
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 db fb 00 00       	call   c000fbfb <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 d3 86 02 00       	call   c00286f8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb a2 92 02 c0       	mov    ebx,0xc00292a2
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb b0 92 02 c0    	cmp    ebx,0xc00292b0
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 58 da 02 c0       	mov    eax,0xc002da58
c0000049:	3d 58 da 02 c0       	cmp    eax,0xc002da58
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 58 da 02 c0       	push   0xc002da58
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 58 da 02 c0       	mov    eax,0xc002da58
c0000075:	2d 58 da 02 c0       	sub    eax,0xc002da58
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 58 da 02 c0       	push   0xc002da58
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 88 e0 02 c0 00 	cmp    BYTE PTR ds:0xc002e088,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb b8 92 02 c0       	mov    ebx,0xc00292b8
c00000bb:	81 eb b4 92 02 c0    	sub    ebx,0xc00292b4
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be b4 92 02 c0       	mov    esi,0xc00292b4
c00000ca:	a1 8c e0 02 c0       	mov    eax,ds:0xc002e08c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 8c e0 02 c0       	mov    ds:0xc002e08c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 8c e0 02 c0       	mov    eax,ds:0xc002e08c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 58 da 02 c0       	push   0xc002da58
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 88 e0 02 c0 01 	mov    BYTE PTR ds:0xc002e088,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 90 e0 02 c0       	push   0xc002e090
c000012c:	68 58 da 02 c0       	push   0xc002da58
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	85 d2                	test   edx,edx
c0000391:	75 11                	jne    c00003a4 <commonThreadSwitch.firstTime>
c0000393:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000396:	e8 af d6 01 00       	call   c001da4a <changeTSS>
c000039b:	5d                   	pop    ebp
c000039c:	5f                   	pop    edi
c000039d:	5e                   	pop    esi
c000039e:	5a                   	pop    edx
c000039f:	59                   	pop    ecx
c00003a0:	5b                   	pop    ebx
c00003a1:	58                   	pop    eax
c00003a2:	9d                   	popf   
c00003a3:	c3                   	ret    

c00003a4 <commonThreadSwitch.firstTime>:
c00003a4:	fa                   	cli    
c00003a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003a8:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003ad:	60                   	pusha  
c00003ae:	e8 15 2a 01 00       	call   c0012dc8 <mapVASFirstTime>
c00003b3:	61                   	popa   
c00003b4:	89 c4                	mov    esp,eax
c00003b6:	56                   	push   esi
c00003b7:	52                   	push   edx
c00003b8:	e8 8d d6 01 00       	call   c001da4a <changeTSS>
c00003bd:	5a                   	pop    edx
c00003be:	5e                   	pop    esi
c00003bf:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003c6:	5d                   	pop    ebp
c00003c7:	5f                   	pop    edi
c00003c8:	5e                   	pop    esi
c00003c9:	59                   	pop    ecx
c00003ca:	59                   	pop    ecx
c00003cb:	5b                   	pop    ebx
c00003cc:	58                   	pop    eax
c00003cd:	81 c4 04 00 00 00    	add    esp,0x4
c00003d3:	6a 02                	push   0x2
c00003d5:	9d                   	popf   
c00003d6:	52                   	push   edx
c00003d7:	e8 db da 01 00       	call   c001deb7 <taskStartupFunction>
c00003dc:	5a                   	pop    edx
c00003dd:	50                   	push   eax
c00003de:	ff d2                	call   edx
c00003e0:	e8 89 e0 01 00       	call   c001e46e <taskReturned>
c00003e5:	e9 fb ff ff ff       	jmp    c00003e5 <commonThreadSwitch.firstTime+0x41>

c00003ea <asmQuickAcquireLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f0 <asmQuickAcquireLock.retry>:
c00003f0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003f5:	72 02                	jb     c00003f9 <asmQuickAcquireLock.spin_with_pause>
c00003f7:	fa                   	cli    
c00003f8:	c3                   	ret    

c00003f9 <asmQuickAcquireLock.spin_with_pause>:
c00003f9:	f3 90                	pause  
c00003fb:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000401:	75 f6                	jne    c00003f9 <asmQuickAcquireLock.spin_with_pause>
c0000403:	e9 e8 ff ff ff       	jmp    c00003f0 <asmQuickAcquireLock.retry>

c0000408 <asmQuickReleaseLock>:
c0000408:	55                   	push   ebp
c0000409:	89 e5                	mov    ebp,esp
c000040b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000412:	5d                   	pop    ebp
c0000413:	c3                   	ret    

c0000414 <asmAcquireLock>:
c0000414:	55                   	push   ebp
c0000415:	89 e5                	mov    ebp,esp
c0000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000041a <asmAcquireLock.retry>:
c000041a:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000041f:	72 05                	jb     c0000426 <asmAcquireLock.spin_with_pause>
c0000421:	9c                   	pushf  
c0000422:	58                   	pop    eax
c0000423:	fa                   	cli    
c0000424:	5d                   	pop    ebp
c0000425:	c3                   	ret    

c0000426 <asmAcquireLock.spin_with_pause>:
c0000426:	f3 90                	pause  
c0000428:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000042e:	75 f6                	jne    c0000426 <asmAcquireLock.spin_with_pause>
c0000430:	e9 e5 ff ff ff       	jmp    c000041a <asmAcquireLock.retry>

c0000435 <asmReleaseLock>:
c0000435:	55                   	push   ebp
c0000436:	89 e5                	mov    ebp,esp
c0000438:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000043b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000043e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000444:	52                   	push   edx
c0000445:	9d                   	popf   
c0000446:	5d                   	pop    ebp
c0000447:	c3                   	ret    

c0000448 <loadGDT>:
c0000448:	0f 01 15 d0 e4 02 c0 	lgdtd  ds:0xc002e4d0
c000044f:	66 b8 10 00          	mov    ax,0x10
c0000453:	66 8e d8             	mov    ds,ax
c0000456:	66 8e c0             	mov    es,ax
c0000459:	66 8e e0             	mov    fs,ax
c000045c:	66 8e e8             	mov    gs,ax
c000045f:	66 8e d0             	mov    ss,ax
c0000462:	e9 00 00 00 00       	jmp    c0000467 <flush2>

c0000467 <flush2>:
c0000467:	c3                   	ret    

c0000468 <isr0>:
c0000468:	fa                   	cli    
c0000469:	68 00 00 00 00       	push   0x0
c000046e:	68 00 00 00 00       	push   0x0
c0000473:	e9 44 01 00 00       	jmp    c00005bc <int_common_stub>

c0000478 <isr1>:
c0000478:	fa                   	cli    
c0000479:	6a 00                	push   0x0
c000047b:	6a 01                	push   0x1
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr2>:
c0000482:	fa                   	cli    
c0000483:	6a 00                	push   0x0
c0000485:	6a 02                	push   0x2
c0000487:	e9 30 01 00 00       	jmp    c00005bc <int_common_stub>

c000048c <isr3>:
c000048c:	fa                   	cli    
c000048d:	6a 00                	push   0x0
c000048f:	6a 03                	push   0x3
c0000491:	e9 26 01 00 00       	jmp    c00005bc <int_common_stub>

c0000496 <isr4>:
c0000496:	fa                   	cli    
c0000497:	6a 00                	push   0x0
c0000499:	6a 04                	push   0x4
c000049b:	e9 1c 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a0 <isr5>:
c00004a0:	fa                   	cli    
c00004a1:	6a 00                	push   0x0
c00004a3:	6a 05                	push   0x5
c00004a5:	e9 12 01 00 00       	jmp    c00005bc <int_common_stub>

c00004aa <isr6>:
c00004aa:	fa                   	cli    
c00004ab:	6a 00                	push   0x0
c00004ad:	6a 06                	push   0x6
c00004af:	e9 08 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b4 <isr7>:
c00004b4:	fa                   	cli    
c00004b5:	6a 00                	push   0x0
c00004b7:	6a 07                	push   0x7
c00004b9:	e9 fe 00 00 00       	jmp    c00005bc <int_common_stub>

c00004be <isr8>:
c00004be:	fa                   	cli    
c00004bf:	6a 08                	push   0x8
c00004c1:	e9 f6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c6 <isr9>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 09                	push   0x9
c00004cb:	e9 ec 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d0 <isr10>:
c00004d0:	fa                   	cli    
c00004d1:	6a 0a                	push   0xa
c00004d3:	e9 e4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d8 <isr11>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0b                	push   0xb
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <isr12>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0c                	push   0xc
c00004e3:	e9 d4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e8 <isr13>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0d                	push   0xd
c00004eb:	e9 cc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f0 <isr14>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0e                	push   0xe
c00004f3:	e9 c4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f8 <isr15>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 0f                	push   0xf
c00004fd:	e9 ba 00 00 00       	jmp    c00005bc <int_common_stub>

c0000502 <isr16>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 10                	push   0x10
c0000507:	e9 b0 00 00 00       	jmp    c00005bc <int_common_stub>

c000050c <isr17>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 11                	push   0x11
c0000511:	e9 a6 00 00 00       	jmp    c00005bc <int_common_stub>

c0000516 <isr18>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 12                	push   0x12
c000051b:	e9 9c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000520 <irq3>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 23                	push   0x23
c0000525:	e9 92 00 00 00       	jmp    c00005bc <int_common_stub>

c000052a <irq4>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 24                	push   0x24
c000052f:	e9 88 00 00 00       	jmp    c00005bc <int_common_stub>

c0000534 <irq5>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 25                	push   0x25
c0000539:	e9 7e 00 00 00       	jmp    c00005bc <int_common_stub>

c000053e <irq6>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 26                	push   0x26
c0000543:	e9 74 00 00 00       	jmp    c00005bc <int_common_stub>

c0000548 <irq7>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 27                	push   0x27
c000054d:	e9 6a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000552 <irq8>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 28                	push   0x28
c0000557:	e9 60 00 00 00       	jmp    c00005bc <int_common_stub>

c000055c <irq9>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 29                	push   0x29
c0000561:	e9 56 00 00 00       	jmp    c00005bc <int_common_stub>

c0000566 <irq10>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2a                	push   0x2a
c000056b:	e9 4c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000570 <irq11>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2b                	push   0x2b
c0000575:	e9 42 00 00 00       	jmp    c00005bc <int_common_stub>

c000057a <irq12>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 2c                	push   0x2c
c000057f:	e9 38 00 00 00       	jmp    c00005bc <int_common_stub>

c0000584 <irq13>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 2d                	push   0x2d
c0000589:	e9 2e 00 00 00       	jmp    c00005bc <int_common_stub>

c000058e <irq14>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 2e                	push   0x2e
c0000593:	e9 24 00 00 00       	jmp    c00005bc <int_common_stub>

c0000598 <irq15>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 2f                	push   0x2f
c000059d:	e9 1a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a2 <irq1>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 21                	push   0x21
c00005a7:	eb 13                	jmp    c00005bc <int_common_stub>

c00005a9 <irq2>:
c00005a9:	fa                   	cli    
c00005aa:	6a 00                	push   0x0
c00005ac:	6a 22                	push   0x22
c00005ae:	eb 0c                	jmp    c00005bc <int_common_stub>

c00005b0 <isr96>:
c00005b0:	6a 00                	push   0x0
c00005b2:	6a 60                	push   0x60
c00005b4:	fb                   	sti    
c00005b5:	eb 05                	jmp    c00005bc <int_common_stub>

c00005b7 <irq0>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 20                	push   0x20

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	54                   	push   esp
c00005d4:	e8 f2 46 01 00       	call   c0014ccb <int_handler>
c00005d9:	81 c4 04 00 00 00    	add    esp,0x4
c00005df:	0f a9                	pop    gs
c00005e1:	0f a1                	pop    fs
c00005e3:	07                   	pop    es
c00005e4:	1f                   	pop    ds
c00005e5:	61                   	popa   
c00005e6:	81 c4 08 00 00 00    	add    esp,0x8
c00005ec:	cf                   	iret   

c00005ed <irq16>:
c00005ed:	fa                   	cli    
c00005ee:	6a 00                	push   0x0
c00005f0:	6a 30                	push   0x30
c00005f2:	e9 c5 ff ff ff       	jmp    c00005bc <int_common_stub>

c00005f7 <irq17>:
c00005f7:	fa                   	cli    
c00005f8:	6a 00                	push   0x0
c00005fa:	6a 31                	push   0x31
c00005fc:	e9 bb ff ff ff       	jmp    c00005bc <int_common_stub>

c0000601 <irq18>:
c0000601:	fa                   	cli    
c0000602:	6a 00                	push   0x0
c0000604:	6a 32                	push   0x32
c0000606:	e9 b1 ff ff ff       	jmp    c00005bc <int_common_stub>

c000060b <irq19>:
c000060b:	fa                   	cli    
c000060c:	6a 00                	push   0x0
c000060e:	6a 33                	push   0x33
c0000610:	e9 a7 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000615 <irq20>:
c0000615:	fa                   	cli    
c0000616:	6a 00                	push   0x0
c0000618:	6a 34                	push   0x34
c000061a:	e9 9d ff ff ff       	jmp    c00005bc <int_common_stub>

c000061f <irq21>:
c000061f:	fa                   	cli    
c0000620:	6a 00                	push   0x0
c0000622:	6a 35                	push   0x35
c0000624:	e9 93 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000629 <irq22>:
c0000629:	fa                   	cli    
c000062a:	6a 00                	push   0x0
c000062c:	6a 36                	push   0x36
c000062e:	e9 89 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000633 <irq23>:
c0000633:	fa                   	cli    
c0000634:	6a 00                	push   0x0
c0000636:	6a 37                	push   0x37
c0000638:	e9 7f ff ff ff       	jmp    c00005bc <int_common_stub>
c000063d:	66 90                	xchg   ax,ax
c000063f:	90                   	nop

c0000640 <memcmp>:
c0000640:	56                   	push   esi
c0000641:	53                   	push   ebx
c0000642:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000646:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000064a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000064e:	85 f6                	test   esi,esi
c0000650:	74 1d                	je     c000066f <memcmp+0x2f>
c0000652:	8a 08                	mov    cl,BYTE PTR [eax]
c0000654:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000657:	38 cb                	cmp    bl,cl
c0000659:	75 19                	jne    c0000674 <memcmp+0x34>
c000065b:	01 c6                	add    esi,eax
c000065d:	eb 0a                	jmp    c0000669 <memcmp+0x29>
c000065f:	90                   	nop
c0000660:	8a 08                	mov    cl,BYTE PTR [eax]
c0000662:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000665:	38 d9                	cmp    cl,bl
c0000667:	75 0b                	jne    c0000674 <memcmp+0x34>
c0000669:	40                   	inc    eax
c000066a:	42                   	inc    edx
c000066b:	39 f0                	cmp    eax,esi
c000066d:	75 f1                	jne    c0000660 <memcmp+0x20>
c000066f:	31 c0                	xor    eax,eax
c0000671:	5b                   	pop    ebx
c0000672:	5e                   	pop    esi
c0000673:	c3                   	ret    
c0000674:	0f b6 c1             	movzx  eax,cl
c0000677:	29 d8                	sub    eax,ebx
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	c3                   	ret    

c000067c <memmove>:
c000067c:	55                   	push   ebp
c000067d:	57                   	push   edi
c000067e:	56                   	push   esi
c000067f:	53                   	push   ebx
c0000680:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000684:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000688:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000068c:	39 dd                	cmp    ebp,ebx
c000068e:	0f 83 80 00 00 00    	jae    c0000714 <memmove+0x98>
c0000694:	85 d2                	test   edx,edx
c0000696:	74 74                	je     c000070c <memmove+0x90>
c0000698:	8d 4b 04             	lea    ecx,[ebx+0x4]
c000069b:	8d 75 04             	lea    esi,[ebp+0x4]
c000069e:	39 cd                	cmp    ebp,ecx
c00006a0:	0f 93 c1             	setae  cl
c00006a3:	39 f3                	cmp    ebx,esi
c00006a5:	0f 93 c0             	setae  al
c00006a8:	89 c6                	mov    esi,eax
c00006aa:	09 ce                	or     esi,ecx
c00006ac:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006af:	89 f0                	mov    eax,esi
c00006b1:	83 f9 0c             	cmp    ecx,0xc
c00006b4:	0f 97 c1             	seta   cl
c00006b7:	84 c8                	test   al,cl
c00006b9:	74 75                	je     c0000730 <memmove+0xb4>
c00006bb:	89 e9                	mov    ecx,ebp
c00006bd:	09 d9                	or     ecx,ebx
c00006bf:	83 e1 03             	and    ecx,0x3
c00006c2:	75 6c                	jne    c0000730 <memmove+0xb4>
c00006c4:	89 d7                	mov    edi,edx
c00006c6:	89 d9                	mov    ecx,ebx
c00006c8:	83 e7 fc             	and    edi,0xfffffffc
c00006cb:	89 ee                	mov    esi,ebp
c00006cd:	01 df                	add    edi,ebx
c00006cf:	90                   	nop
c00006d0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006d2:	83 c6 04             	add    esi,0x4
c00006d5:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006d8:	83 c1 04             	add    ecx,0x4
c00006db:	39 f9                	cmp    ecx,edi
c00006dd:	75 f1                	jne    c00006d0 <memmove+0x54>
c00006df:	89 d1                	mov    ecx,edx
c00006e1:	89 d7                	mov    edi,edx
c00006e3:	83 e1 fc             	and    ecx,0xfffffffc
c00006e6:	29 cf                	sub    edi,ecx
c00006e8:	01 cb                	add    ebx,ecx
c00006ea:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006ee:	39 ca                	cmp    edx,ecx
c00006f0:	74 1a                	je     c000070c <memmove+0x90>
c00006f2:	8a 03                	mov    al,BYTE PTR [ebx]
c00006f4:	83 ff 01             	cmp    edi,0x1
c00006f7:	88 06                	mov    BYTE PTR [esi],al
c00006f9:	74 11                	je     c000070c <memmove+0x90>
c00006fb:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00006fe:	83 ff 02             	cmp    edi,0x2
c0000701:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000704:	74 06                	je     c000070c <memmove+0x90>
c0000706:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000709:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000070c:	5b                   	pop    ebx
c000070d:	89 e8                	mov    eax,ebp
c000070f:	5e                   	pop    esi
c0000710:	5f                   	pop    edi
c0000711:	5d                   	pop    ebp
c0000712:	c3                   	ret    
c0000713:	90                   	nop
c0000714:	76 f6                	jbe    c000070c <memmove+0x90>
c0000716:	85 d2                	test   edx,edx
c0000718:	74 f2                	je     c000070c <memmove+0x90>
c000071a:	4b                   	dec    ebx
c000071b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000071e:	66 90                	xchg   ax,ax
c0000720:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000723:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000726:	4a                   	dec    edx
c0000727:	75 f7                	jne    c0000720 <memmove+0xa4>
c0000729:	5b                   	pop    ebx
c000072a:	89 e8                	mov    eax,ebp
c000072c:	5e                   	pop    esi
c000072d:	5f                   	pop    edi
c000072e:	5d                   	pop    ebp
c000072f:	c3                   	ret    
c0000730:	01 ea                	add    edx,ebp
c0000732:	89 e9                	mov    ecx,ebp
c0000734:	8a 03                	mov    al,BYTE PTR [ebx]
c0000736:	41                   	inc    ecx
c0000737:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000073a:	43                   	inc    ebx
c000073b:	39 d1                	cmp    ecx,edx
c000073d:	75 f5                	jne    c0000734 <memmove+0xb8>
c000073f:	eb cb                	jmp    c000070c <memmove+0x90>
c0000741:	8d 76 00             	lea    esi,[esi+0x0]

c0000744 <memcpy>:
c0000744:	57                   	push   edi
c0000745:	56                   	push   esi
c0000746:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000074a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000074e:	a8 03                	test   al,0x3
c0000750:	74 12                	je     c0000764 <memcpy+0x20>
c0000752:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000756:	89 c1                	mov    ecx,eax
c0000758:	fc                   	cld    
c0000759:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000075b:	29 c7                	sub    edi,eax
c000075d:	5e                   	pop    esi
c000075e:	89 f8                	mov    eax,edi
c0000760:	5f                   	pop    edi
c0000761:	c3                   	ret    
c0000762:	66 90                	xchg   ax,ax
c0000764:	89 c1                	mov    ecx,eax
c0000766:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076a:	c1 e9 02             	shr    ecx,0x2
c000076d:	fc                   	cld    
c000076e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000770:	29 c7                	sub    edi,eax
c0000772:	5e                   	pop    esi
c0000773:	89 f8                	mov    eax,edi
c0000775:	5f                   	pop    edi
c0000776:	c3                   	ret    
c0000777:	90                   	nop

c0000778 <memset>:
c0000778:	57                   	push   edi
c0000779:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000077d:	85 c9                	test   ecx,ecx
c000077f:	74 0b                	je     c000078c <memset+0x14>
c0000781:	fc                   	cld    
c0000782:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000786:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000078a:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000078c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000790:	5f                   	pop    edi
c0000791:	c3                   	ret    
c0000792:	66 90                	xchg   ax,ax

c0000794 <strlen>:
c0000794:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000798:	31 c0                	xor    eax,eax
c000079a:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c000079d:	74 09                	je     c00007a8 <strlen+0x14>
c000079f:	90                   	nop
c00007a0:	40                   	inc    eax
c00007a1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007a5:	75 f9                	jne    c00007a0 <strlen+0xc>
c00007a7:	c3                   	ret    
c00007a8:	c3                   	ret    
c00007a9:	8d 76 00             	lea    esi,[esi+0x0]

c00007ac <strpbrk>:
c00007ac:	57                   	push   edi
c00007ad:	56                   	push   esi
c00007ae:	53                   	push   ebx
c00007af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007b3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007b7:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b9:	84 db                	test   bl,bl
c00007bb:	74 21                	je     c00007de <strpbrk+0x32>
c00007bd:	8a 07                	mov    al,BYTE PTR [edi]
c00007bf:	84 c0                	test   al,al
c00007c1:	74 14                	je     c00007d7 <strpbrk+0x2b>
c00007c3:	38 d8                	cmp    al,bl
c00007c5:	74 19                	je     c00007e0 <strpbrk+0x34>
c00007c7:	89 fa                	mov    edx,edi
c00007c9:	eb 05                	jmp    c00007d0 <strpbrk+0x24>
c00007cb:	90                   	nop
c00007cc:	38 d9                	cmp    cl,bl
c00007ce:	74 10                	je     c00007e0 <strpbrk+0x34>
c00007d0:	42                   	inc    edx
c00007d1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007d3:	84 c9                	test   cl,cl
c00007d5:	75 f5                	jne    c00007cc <strpbrk+0x20>
c00007d7:	46                   	inc    esi
c00007d8:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007da:	84 db                	test   bl,bl
c00007dc:	75 e1                	jne    c00007bf <strpbrk+0x13>
c00007de:	31 f6                	xor    esi,esi
c00007e0:	89 f0                	mov    eax,esi
c00007e2:	5b                   	pop    ebx
c00007e3:	5e                   	pop    esi
c00007e4:	5f                   	pop    edi
c00007e5:	c3                   	ret    
c00007e6:	66 90                	xchg   ax,ax

c00007e8 <strtok>:
c00007e8:	56                   	push   esi
c00007e9:	53                   	push   ebx
c00007ea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007f2:	85 db                	test   ebx,ebx
c00007f4:	75 07                	jne    c00007fd <strtok+0x15>
c00007f6:	eb 2c                	jmp    c0000824 <strtok+0x3c>
c00007f8:	43                   	inc    ebx
c00007f9:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007fd:	56                   	push   esi
c00007fe:	53                   	push   ebx
c00007ff:	e8 a8 ff ff ff       	call   c00007ac <strpbrk>
c0000804:	5a                   	pop    edx
c0000805:	a3 a8 e0 02 c0       	mov    ds:0xc002e0a8,eax
c000080a:	59                   	pop    ecx
c000080b:	39 d8                	cmp    eax,ebx
c000080d:	74 e9                	je     c00007f8 <strtok+0x10>
c000080f:	85 c0                	test   eax,eax
c0000811:	74 1b                	je     c000082e <strtok+0x46>
c0000813:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000816:	8d 50 01             	lea    edx,[eax+0x1]
c0000819:	89 d8                	mov    eax,ebx
c000081b:	89 15 a8 e0 02 c0    	mov    DWORD PTR ds:0xc002e0a8,edx
c0000821:	5b                   	pop    ebx
c0000822:	5e                   	pop    esi
c0000823:	c3                   	ret    
c0000824:	8b 1d a8 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e0a8
c000082a:	85 db                	test   ebx,ebx
c000082c:	75 cf                	jne    c00007fd <strtok+0x15>
c000082e:	31 c0                	xor    eax,eax
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	90                   	nop

c0000834 <strcpy>:
c0000834:	53                   	push   ebx
c0000835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000839:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000083d:	89 c3                	mov    ebx,eax
c000083f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000841:	84 d2                	test   dl,dl
c0000843:	74 0d                	je     c0000852 <strcpy+0x1e>
c0000845:	8d 76 00             	lea    esi,[esi+0x0]
c0000848:	88 13                	mov    BYTE PTR [ebx],dl
c000084a:	41                   	inc    ecx
c000084b:	43                   	inc    ebx
c000084c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000084e:	84 d2                	test   dl,dl
c0000850:	75 f6                	jne    c0000848 <strcpy+0x14>
c0000852:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000855:	5b                   	pop    ebx
c0000856:	c3                   	ret    
c0000857:	90                   	nop

c0000858 <strncpy>:
c0000858:	55                   	push   ebp
c0000859:	57                   	push   edi
c000085a:	56                   	push   esi
c000085b:	53                   	push   ebx
c000085c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000860:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000864:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000868:	85 c0                	test   eax,eax
c000086a:	74 39                	je     c00008a5 <strncpy+0x4d>
c000086c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000086e:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000871:	8d 55 01             	lea    edx,[ebp+0x1]
c0000874:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000877:	84 db                	test   bl,bl
c0000879:	74 31                	je     c00008ac <strncpy+0x54>
c000087b:	85 c9                	test   ecx,ecx
c000087d:	74 26                	je     c00008a5 <strncpy+0x4d>
c000087f:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000882:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000885:	8d 55 02             	lea    edx,[ebp+0x2]
c0000888:	8d 46 02             	lea    eax,[esi+0x2]
c000088b:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000088e:	84 db                	test   bl,bl
c0000890:	75 0f                	jne    c00008a1 <strncpy+0x49>
c0000892:	eb 18                	jmp    c00008ac <strncpy+0x54>
c0000894:	40                   	inc    eax
c0000895:	42                   	inc    edx
c0000896:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000899:	49                   	dec    ecx
c000089a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000089d:	84 db                	test   bl,bl
c000089f:	74 0b                	je     c00008ac <strncpy+0x54>
c00008a1:	85 c9                	test   ecx,ecx
c00008a3:	75 ef                	jne    c0000894 <strncpy+0x3c>
c00008a5:	5b                   	pop    ebx
c00008a6:	89 e8                	mov    eax,ebp
c00008a8:	5e                   	pop    esi
c00008a9:	5f                   	pop    edi
c00008aa:	5d                   	pop    ebp
c00008ab:	c3                   	ret    
c00008ac:	85 c9                	test   ecx,ecx
c00008ae:	74 f5                	je     c00008a5 <strncpy+0x4d>
c00008b0:	fc                   	cld    
c00008b1:	31 c0                	xor    eax,eax
c00008b3:	89 d7                	mov    edi,edx
c00008b5:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008b7:	89 e8                	mov    eax,ebp
c00008b9:	5b                   	pop    ebx
c00008ba:	5e                   	pop    esi
c00008bb:	5f                   	pop    edi
c00008bc:	5d                   	pop    ebp
c00008bd:	c3                   	ret    
c00008be:	66 90                	xchg   ax,ax

c00008c0 <strcmp>:
c00008c0:	56                   	push   esi
c00008c1:	53                   	push   ebx
c00008c2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008ca:	8a 16                	mov    dl,BYTE PTR [esi]
c00008cc:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008cf:	38 d1                	cmp    cl,dl
c00008d1:	75 1d                	jne    c00008f0 <strcmp+0x30>
c00008d3:	84 c9                	test   cl,cl
c00008d5:	74 21                	je     c00008f8 <strcmp+0x38>
c00008d7:	b8 01 00 00 00       	mov    eax,0x1
c00008dc:	eb 07                	jmp    c00008e5 <strcmp+0x25>
c00008de:	66 90                	xchg   ax,ax
c00008e0:	40                   	inc    eax
c00008e1:	84 d2                	test   dl,dl
c00008e3:	74 13                	je     c00008f8 <strcmp+0x38>
c00008e5:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008e8:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 f0                	je     c00008e0 <strcmp+0x20>
c00008f0:	0f b6 c2             	movzx  eax,dl
c00008f3:	5b                   	pop    ebx
c00008f4:	29 c8                	sub    eax,ecx
c00008f6:	5e                   	pop    esi
c00008f7:	c3                   	ret    
c00008f8:	31 c0                	xor    eax,eax
c00008fa:	5b                   	pop    ebx
c00008fb:	5e                   	pop    esi
c00008fc:	c3                   	ret    
c00008fd:	8d 76 00             	lea    esi,[esi+0x0]

c0000900 <strchr>:
c0000900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000904:	8a 10                	mov    dl,BYTE PTR [eax]
c0000906:	84 d2                	test   dl,dl
c0000908:	74 15                	je     c000091f <strchr+0x1f>
c000090a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000090e:	38 ca                	cmp    dl,cl
c0000910:	75 06                	jne    c0000918 <strchr+0x18>
c0000912:	eb 0e                	jmp    c0000922 <strchr+0x22>
c0000914:	38 ca                	cmp    dl,cl
c0000916:	74 09                	je     c0000921 <strchr+0x21>
c0000918:	40                   	inc    eax
c0000919:	8a 10                	mov    dl,BYTE PTR [eax]
c000091b:	84 d2                	test   dl,dl
c000091d:	75 f5                	jne    c0000914 <strchr+0x14>
c000091f:	31 c0                	xor    eax,eax
c0000921:	c3                   	ret    
c0000922:	c3                   	ret    
c0000923:	90                   	nop

c0000924 <strncmp>:
c0000924:	57                   	push   edi
c0000925:	56                   	push   esi
c0000926:	53                   	push   ebx
c0000927:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000092b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000092f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000933:	85 ff                	test   edi,edi
c0000935:	74 28                	je     c000095f <strncmp+0x3b>
c0000937:	8a 16                	mov    dl,BYTE PTR [esi]
c0000939:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000093c:	38 d1                	cmp    cl,dl
c000093e:	75 28                	jne    c0000968 <strncmp+0x44>
c0000940:	8d 46 01             	lea    eax,[esi+0x1]
c0000943:	84 c9                	test   cl,cl
c0000945:	74 18                	je     c000095f <strncmp+0x3b>
c0000947:	01 fe                	add    esi,edi
c0000949:	eb 0f                	jmp    c000095a <strncmp+0x36>
c000094b:	90                   	nop
c000094c:	8a 10                	mov    dl,BYTE PTR [eax]
c000094e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000951:	38 ca                	cmp    dl,cl
c0000953:	75 13                	jne    c0000968 <strncmp+0x44>
c0000955:	40                   	inc    eax
c0000956:	84 d2                	test   dl,dl
c0000958:	74 05                	je     c000095f <strncmp+0x3b>
c000095a:	43                   	inc    ebx
c000095b:	39 c6                	cmp    esi,eax
c000095d:	75 ed                	jne    c000094c <strncmp+0x28>
c000095f:	5b                   	pop    ebx
c0000960:	31 c0                	xor    eax,eax
c0000962:	5e                   	pop    esi
c0000963:	5f                   	pop    edi
c0000964:	c3                   	ret    
c0000965:	8d 76 00             	lea    esi,[esi+0x0]
c0000968:	5b                   	pop    ebx
c0000969:	0f b6 c2             	movzx  eax,dl
c000096c:	5e                   	pop    esi
c000096d:	29 c8                	sub    eax,ecx
c000096f:	5f                   	pop    edi
c0000970:	c3                   	ret    
c0000971:	8d 76 00             	lea    esi,[esi+0x0]

c0000974 <strcat>:
c0000974:	56                   	push   esi
c0000975:	53                   	push   ebx
c0000976:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000097a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000097e:	89 c3                	mov    ebx,eax
c0000980:	eb 04                	jmp    c0000986 <strcat+0x12>
c0000982:	66 90                	xchg   ax,ax
c0000984:	89 d3                	mov    ebx,edx
c0000986:	8d 53 01             	lea    edx,[ebx+0x1]
c0000989:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000098d:	75 f5                	jne    c0000984 <strcat+0x10>
c000098f:	31 d2                	xor    edx,edx
c0000991:	8d 76 00             	lea    esi,[esi+0x0]
c0000994:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000997:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000099a:	42                   	inc    edx
c000099b:	84 c9                	test   cl,cl
c000099d:	75 f5                	jne    c0000994 <strcat+0x20>
c000099f:	5b                   	pop    ebx
c00009a0:	5e                   	pop    esi
c00009a1:	c3                   	ret    
c00009a2:	66 90                	xchg   ax,ax

c00009a4 <strncat>:
c00009a4:	56                   	push   esi
c00009a5:	53                   	push   ebx
c00009a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009b2:	85 f6                	test   esi,esi
c00009b4:	74 1e                	je     c00009d4 <strncat+0x30>
c00009b6:	89 c2                	mov    edx,eax
c00009b8:	42                   	inc    edx
c00009b9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009bd:	75 f9                	jne    c00009b8 <strncat+0x14>
c00009bf:	01 ce                	add    esi,ecx
c00009c1:	eb 06                	jmp    c00009c9 <strncat+0x25>
c00009c3:	90                   	nop
c00009c4:	39 f1                	cmp    ecx,esi
c00009c6:	74 10                	je     c00009d8 <strncat+0x34>
c00009c8:	42                   	inc    edx
c00009c9:	41                   	inc    ecx
c00009ca:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009cd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009d0:	84 db                	test   bl,bl
c00009d2:	75 f0                	jne    c00009c4 <strncat+0x20>
c00009d4:	5b                   	pop    ebx
c00009d5:	5e                   	pop    esi
c00009d6:	c3                   	ret    
c00009d7:	90                   	nop
c00009d8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009db:	5b                   	pop    ebx
c00009dc:	5e                   	pop    esi
c00009dd:	c3                   	ret    
c00009de:	66 90                	xchg   ax,ax

c00009e0 <strstr>:
c00009e0:	57                   	push   edi
c00009e1:	56                   	push   esi
c00009e2:	53                   	push   ebx
c00009e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009e7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009eb:	57                   	push   edi
c00009ec:	e8 a3 fd ff ff       	call   c0000794 <strlen>
c00009f1:	59                   	pop    ecx
c00009f2:	85 c0                	test   eax,eax
c00009f4:	74 2a                	je     c0000a20 <strstr+0x40>
c00009f6:	89 c6                	mov    esi,eax
c00009f8:	eb 12                	jmp    c0000a0c <strstr+0x2c>
c00009fa:	66 90                	xchg   ax,ax
c00009fc:	56                   	push   esi
c00009fd:	57                   	push   edi
c00009fe:	53                   	push   ebx
c00009ff:	e8 3c fc ff ff       	call   c0000640 <memcmp>
c0000a04:	83 c4 0c             	add    esp,0xc
c0000a07:	85 c0                	test   eax,eax
c0000a09:	74 15                	je     c0000a20 <strstr+0x40>
c0000a0b:	43                   	inc    ebx
c0000a0c:	53                   	push   ebx
c0000a0d:	e8 82 fd ff ff       	call   c0000794 <strlen>
c0000a12:	5a                   	pop    edx
c0000a13:	39 f0                	cmp    eax,esi
c0000a15:	73 e5                	jae    c00009fc <strstr+0x1c>
c0000a17:	5b                   	pop    ebx
c0000a18:	31 c0                	xor    eax,eax
c0000a1a:	5e                   	pop    esi
c0000a1b:	5f                   	pop    edi
c0000a1c:	c3                   	ret    
c0000a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a20:	89 d8                	mov    eax,ebx
c0000a22:	5b                   	pop    ebx
c0000a23:	5e                   	pop    esi
c0000a24:	5f                   	pop    edi
c0000a25:	c3                   	ret    
c0000a26:	66 90                	xchg   ax,ax

c0000a28 <toupper>:
c0000a28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a2c:	0f b6 d0             	movzx  edx,al
c0000a2f:	f6 82 c0 92 02 c0 02 	test   BYTE PTR [edx-0x3ffd6d40],0x2
c0000a36:	74 03                	je     c0000a3b <toupper+0x13>
c0000a38:	83 e8 20             	sub    eax,0x20
c0000a3b:	c3                   	ret    

c0000a3c <tolower>:
c0000a3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a40:	0f b6 d0             	movzx  edx,al
c0000a43:	f6 82 c0 92 02 c0 01 	test   BYTE PTR [edx-0x3ffd6d40],0x1
c0000a4a:	74 03                	je     c0000a4f <tolower+0x13>
c0000a4c:	83 c0 20             	add    eax,0x20
c0000a4f:	c3                   	ret    

c0000a50 <simple_strtoul>:
c0000a50:	55                   	push   ebp
c0000a51:	57                   	push   edi
c0000a52:	56                   	push   esi
c0000a53:	53                   	push   ebx
c0000a54:	83 ec 08             	sub    esp,0x8
c0000a57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a5f:	90                   	nop
c0000a60:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a63:	f6 82 c0 92 02 c0 08 	test   BYTE PTR [edx-0x3ffd6d40],0x8
c0000a6a:	75 05                	jne    c0000a71 <simple_strtoul+0x21>
c0000a6c:	80 fa 09             	cmp    dl,0x9
c0000a6f:	75 03                	jne    c0000a74 <simple_strtoul+0x24>
c0000a71:	41                   	inc    ecx
c0000a72:	eb ec                	jmp    c0000a60 <simple_strtoul+0x10>
c0000a74:	80 fa 2d             	cmp    dl,0x2d
c0000a77:	0f 84 1b 01 00 00    	je     c0000b98 <simple_strtoul+0x148>
c0000a7d:	80 fa 2b             	cmp    dl,0x2b
c0000a80:	0f 84 c2 00 00 00    	je     c0000b48 <simple_strtoul+0xf8>
c0000a86:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a8e:	85 f6                	test   esi,esi
c0000a90:	0f 85 c3 00 00 00    	jne    c0000b59 <simple_strtoul+0x109>
c0000a96:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a98:	80 fa 30             	cmp    dl,0x30
c0000a9b:	0f 84 47 01 00 00    	je     c0000be8 <simple_strtoul+0x198>
c0000aa1:	be 0a 00 00 00       	mov    esi,0xa
c0000aa6:	84 d2                	test   dl,dl
c0000aa8:	0f 84 6f 01 00 00    	je     c0000c1d <simple_strtoul+0x1cd>
c0000aae:	31 ed                	xor    ebp,ebp
c0000ab0:	31 ff                	xor    edi,edi
c0000ab2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000ab9:	eb 2b                	jmp    c0000ae6 <simple_strtoul+0x96>
c0000abb:	90                   	nop
c0000abc:	83 eb 30             	sub    ebx,0x30
c0000abf:	39 f3                	cmp    ebx,esi
c0000ac1:	73 4d                	jae    c0000b10 <simple_strtoul+0xc0>
c0000ac3:	31 d2                	xor    edx,edx
c0000ac5:	89 d8                	mov    eax,ebx
c0000ac7:	f7 d0                	not    eax
c0000ac9:	f7 f6                	div    esi
c0000acb:	39 f8                	cmp    eax,edi
c0000acd:	0f 82 b1 00 00 00    	jb     c0000b84 <simple_strtoul+0x134>
c0000ad3:	0f af fe             	imul   edi,esi
c0000ad6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000add:	01 df                	add    edi,ebx
c0000adf:	41                   	inc    ecx
c0000ae0:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000ae2:	84 d2                	test   dl,dl
c0000ae4:	74 2a                	je     c0000b10 <simple_strtoul+0xc0>
c0000ae6:	0f b6 da             	movzx  ebx,dl
c0000ae9:	f6 83 c0 92 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6d40],0x4
c0000af0:	75 ca                	jne    c0000abc <simple_strtoul+0x6c>
c0000af2:	0f be d2             	movsx  edx,dl
c0000af5:	52                   	push   edx
c0000af6:	e8 2d ff ff ff       	call   c0000a28 <toupper>
c0000afb:	5b                   	pop    ebx
c0000afc:	0f b6 d0             	movzx  edx,al
c0000aff:	f6 82 c0 92 02 c0 01 	test   BYTE PTR [edx-0x3ffd6d40],0x1
c0000b06:	74 08                	je     c0000b10 <simple_strtoul+0xc0>
c0000b08:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b0b:	39 f3                	cmp    ebx,esi
c0000b0d:	72 b4                	jb     c0000ac3 <simple_strtoul+0x73>
c0000b0f:	90                   	nop
c0000b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b14:	85 c0                	test   eax,eax
c0000b16:	74 14                	je     c0000b2c <simple_strtoul+0xdc>
c0000b18:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b1b:	09 f8                	or     eax,edi
c0000b1d:	75 71                	jne    c0000b90 <simple_strtoul+0x140>
c0000b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b23:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b27:	31 ff                	xor    edi,edi
c0000b29:	89 30                	mov    DWORD PTR [eax],esi
c0000b2b:	90                   	nop
c0000b2c:	4d                   	dec    ebp
c0000b2d:	75 05                	jne    c0000b34 <simple_strtoul+0xe4>
c0000b2f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b34:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b39:	75 02                	jne    c0000b3d <simple_strtoul+0xed>
c0000b3b:	f7 df                	neg    edi
c0000b3d:	83 c4 08             	add    esp,0x8
c0000b40:	89 f8                	mov    eax,edi
c0000b42:	5b                   	pop    ebx
c0000b43:	5e                   	pop    esi
c0000b44:	5f                   	pop    edi
c0000b45:	5d                   	pop    ebp
c0000b46:	c3                   	ret    
c0000b47:	90                   	nop
c0000b48:	41                   	inc    ecx
c0000b49:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b51:	85 f6                	test   esi,esi
c0000b53:	0f 84 3d ff ff ff    	je     c0000a96 <simple_strtoul+0x46>
c0000b59:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b5c:	83 f8 22             	cmp    eax,0x22
c0000b5f:	77 6a                	ja     c0000bcb <simple_strtoul+0x17b>
c0000b61:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b63:	83 fe 08             	cmp    esi,0x8
c0000b66:	0f 84 a2 00 00 00    	je     c0000c0e <simple_strtoul+0x1be>
c0000b6c:	83 fe 10             	cmp    esi,0x10
c0000b6f:	0f 85 31 ff ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000b75:	80 fa 30             	cmp    dl,0x30
c0000b78:	74 2c                	je     c0000ba6 <simple_strtoul+0x156>
c0000b7a:	be 10 00 00 00       	mov    esi,0x10
c0000b7f:	e9 22 ff ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000b84:	bd 01 00 00 00       	mov    ebp,0x1
c0000b89:	31 ff                	xor    edi,edi
c0000b8b:	e9 4f ff ff ff       	jmp    c0000adf <simple_strtoul+0x8f>
c0000b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b94:	89 08                	mov    DWORD PTR [eax],ecx
c0000b96:	eb 94                	jmp    c0000b2c <simple_strtoul+0xdc>
c0000b98:	41                   	inc    ecx
c0000b99:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ba1:	e9 e8 fe ff ff       	jmp    c0000a8e <simple_strtoul+0x3e>
c0000ba6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000baa:	88 04 24             	mov    BYTE PTR [esp],al
c0000bad:	50                   	push   eax
c0000bae:	e8 89 fe ff ff       	call   c0000a3c <tolower>
c0000bb3:	5e                   	pop    esi
c0000bb4:	83 f8 78             	cmp    eax,0x78
c0000bb7:	0f 84 84 00 00 00    	je     c0000c41 <simple_strtoul+0x1f1>
c0000bbd:	41                   	inc    ecx
c0000bbe:	be 10 00 00 00       	mov    esi,0x10
c0000bc3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bc6:	e9 db fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000bcb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bcf:	85 ff                	test   edi,edi
c0000bd1:	74 5c                	je     c0000c2f <simple_strtoul+0x1df>
c0000bd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bd7:	85 c9                	test   ecx,ecx
c0000bd9:	75 4e                	jne    c0000c29 <simple_strtoul+0x1d9>
c0000bdb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000be1:	31 ff                	xor    edi,edi
c0000be3:	e9 4c ff ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000be8:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bec:	88 04 24             	mov    BYTE PTR [esp],al
c0000bef:	50                   	push   eax
c0000bf0:	e8 47 fe ff ff       	call   c0000a3c <tolower>
c0000bf5:	5d                   	pop    ebp
c0000bf6:	83 f8 78             	cmp    eax,0x78
c0000bf9:	74 3b                	je     c0000c36 <simple_strtoul+0x1e6>
c0000bfb:	41                   	inc    ecx
c0000bfc:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bff:	80 fa 30             	cmp    dl,0x30
c0000c02:	74 13                	je     c0000c17 <simple_strtoul+0x1c7>
c0000c04:	be 08 00 00 00       	mov    esi,0x8
c0000c09:	e9 98 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000c0e:	80 fa 30             	cmp    dl,0x30
c0000c11:	0f 85 8f fe ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000c17:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c1a:	41                   	inc    ecx
c0000c1b:	eb e7                	jmp    c0000c04 <simple_strtoul+0x1b4>
c0000c1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c21:	85 d2                	test   edx,edx
c0000c23:	74 0a                	je     c0000c2f <simple_strtoul+0x1df>
c0000c25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c29:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c2d:	89 30                	mov    DWORD PTR [eax],esi
c0000c2f:	31 ff                	xor    edi,edi
c0000c31:	e9 fe fe ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000c36:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c39:	83 c1 02             	add    ecx,0x2
c0000c3c:	e9 34 ff ff ff       	jmp    c0000b75 <simple_strtoul+0x125>
c0000c41:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c44:	be 10 00 00 00       	mov    esi,0x10
c0000c49:	83 c1 02             	add    ecx,0x2
c0000c4c:	e9 55 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>

c0000c51 <largebin_index>:
c0000c51:	89 c2                	mov    edx,eax
c0000c53:	c1 ea 08             	shr    edx,0x8
c0000c56:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c5c:	77 10                	ja     c0000c6e <largebin_index+0x1d>
c0000c5e:	0f bd d2             	bsr    edx,edx
c0000c61:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c64:	d3 e8                	shr    eax,cl
c0000c66:	83 e0 03             	and    eax,0x3
c0000c69:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c6d:	c3                   	ret    
c0000c6e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c73:	c3                   	ret    

c0000c74 <malloc_init_state>:
c0000c74:	53                   	push   ebx
c0000c75:	8d 50 34             	lea    edx,[eax+0x34]
c0000c78:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c7e:	89 d1                	mov    ecx,edx
c0000c80:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c83:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c86:	83 c2 08             	add    edx,0x8
c0000c89:	39 da                	cmp    edx,ebx
c0000c8b:	75 f3                	jne    c0000c80 <malloc_init_state+0xc>
c0000c8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c8f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c99:	83 e2 03             	and    edx,0x3
c0000c9c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ca6:	83 ca 48             	or     edx,0x48
c0000ca9:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cb3:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cbd:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000cc4:	89 10                	mov    DWORD PTR [eax],edx
c0000cc6:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cc9:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cd3:	5b                   	pop    ebx
c0000cd4:	c3                   	ret    

c0000cd5 <malloc_consolidate>:
c0000cd5:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cd7:	85 d2                	test   edx,edx
c0000cd9:	0f 84 d8 00 00 00    	je     c0000db7 <malloc_consolidate+0xe2>
c0000cdf:	55                   	push   ebp
c0000ce0:	83 e2 fd             	and    edx,0xfffffffd
c0000ce3:	57                   	push   edi
c0000ce4:	89 c5                	mov    ebp,eax
c0000ce6:	56                   	push   esi
c0000ce7:	8d 78 34             	lea    edi,[eax+0x34]
c0000cea:	53                   	push   ebx
c0000ceb:	83 ec 10             	sub    esp,0x10
c0000cee:	89 10                	mov    DWORD PTR [eax],edx
c0000cf0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cf4:	c1 ea 03             	shr    edx,0x3
c0000cf7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cfb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cff:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d02:	85 d2                	test   edx,edx
c0000d04:	0f 84 98 00 00 00    	je     c0000da2 <malloc_consolidate+0xcd>
c0000d0a:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d11:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d14:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d17:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d1b:	89 f9                	mov    ecx,edi
c0000d1d:	83 e1 fe             	and    ecx,0xfffffffe
c0000d20:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d23:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d26:	83 e3 fc             	and    ebx,0xfffffffc
c0000d29:	83 e7 01             	and    edi,0x1
c0000d2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d2f:	75 14                	jne    c0000d45 <malloc_consolidate+0x70>
c0000d31:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d33:	29 fa                	sub    edx,edi
c0000d35:	01 f9                	add    ecx,edi
c0000d37:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3a:	89 fb                	mov    ebx,edi
c0000d3c:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d3f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d42:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d45:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d48:	74 40                	je     c0000d8a <malloc_consolidate+0xb5>
c0000d4a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d4d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d50:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d54:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d57:	83 e7 01             	and    edi,0x1
c0000d5a:	75 0e                	jne    c0000d6a <malloc_consolidate+0x95>
c0000d5c:	01 d9                	add    ecx,ebx
c0000d5e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d61:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d64:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d67:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d6a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d6d:	89 ce                	mov    esi,ecx
c0000d6f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d72:	83 ce 01             	or     esi,0x1
c0000d75:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d78:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d7b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d7e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d82:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d85:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d88:	eb 0c                	jmp    c0000d96 <malloc_consolidate+0xc1>
c0000d8a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d8d:	83 c9 01             	or     ecx,0x1
c0000d90:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d93:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d9a:	85 d2                	test   edx,edx
c0000d9c:	0f 85 6f ff ff ff    	jne    c0000d11 <malloc_consolidate+0x3c>
c0000da2:	83 c5 04             	add    ebp,0x4
c0000da5:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000da9:	0f 85 50 ff ff ff    	jne    c0000cff <malloc_consolidate+0x2a>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	5b                   	pop    ebx
c0000db3:	5e                   	pop    esi
c0000db4:	5f                   	pop    edi
c0000db5:	5d                   	pop    ebp
c0000db6:	c3                   	ret    
c0000db7:	e9 b8 fe ff ff       	jmp    c0000c74 <malloc_init_state>

c0000dbc <dlfree>:
c0000dbc:	57                   	push   edi
c0000dbd:	56                   	push   esi
c0000dbe:	53                   	push   ebx
c0000dbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dc3:	85 db                	test   ebx,ebx
c0000dc5:	0f 84 e2 00 00 00    	je     c0000ead <dlfree+0xf1>
c0000dcb:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dce:	8b 0d c0 e0 02 c0    	mov    ecx,DWORD PTR ds:0xc002e0c0
c0000dd4:	89 f0                	mov    eax,esi
c0000dd6:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dd9:	83 e0 fc             	and    eax,0xfffffffc
c0000ddc:	39 c1                	cmp    ecx,eax
c0000dde:	72 24                	jb     c0000e04 <dlfree+0x48>
c0000de0:	83 c9 03             	or     ecx,0x3
c0000de3:	c1 e8 03             	shr    eax,0x3
c0000de6:	89 0d c0 e0 02 c0    	mov    DWORD PTR ds:0xc002e0c0,ecx
c0000dec:	83 e8 02             	sub    eax,0x2
c0000def:	8b 0c 85 c4 e0 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1f3c]
c0000df6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000df8:	89 14 85 c4 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1f3c],edx
c0000dff:	e9 a9 00 00 00       	jmp    c0000ead <dlfree+0xf1>
c0000e04:	83 e6 02             	and    esi,0x2
c0000e07:	0f 85 a0 00 00 00    	jne    c0000ead <dlfree+0xf1>
c0000e0d:	83 c9 01             	or     ecx,0x1
c0000e10:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e13:	89 0d c0 e0 02 c0    	mov    DWORD PTR ds:0xc002e0c0,ecx
c0000e19:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e1c:	83 e1 fc             	and    ecx,0xfffffffc
c0000e1f:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e23:	75 13                	jne    c0000e38 <dlfree+0x7c>
c0000e25:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e28:	29 da                	sub    edx,ebx
c0000e2a:	01 d8                	add    eax,ebx
c0000e2c:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e2f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e32:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e35:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e38:	39 35 ec e0 02 c0    	cmp    DWORD PTR ds:0xc002e0ec,esi
c0000e3e:	74 40                	je     c0000e80 <dlfree+0xc4>
c0000e40:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e44:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e47:	80 e3 01             	and    bl,0x1
c0000e4a:	75 0e                	jne    c0000e5a <dlfree+0x9e>
c0000e4c:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e4f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e52:	01 c8                	add    eax,ecx
c0000e54:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e57:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e5a:	8b 0d fc e0 02 c0    	mov    ecx,DWORD PTR ds:0xc002e0fc
c0000e60:	c7 42 0c f4 e0 02 c0 	mov    DWORD PTR [edx+0xc],0xc002e0f4
c0000e67:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e6a:	89 15 fc e0 02 c0    	mov    DWORD PTR ds:0xc002e0fc,edx
c0000e70:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e73:	89 c1                	mov    ecx,eax
c0000e75:	83 c9 01             	or     ecx,0x1
c0000e78:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e7b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e7e:	eb 10                	jmp    c0000e90 <dlfree+0xd4>
c0000e80:	01 c8                	add    eax,ecx
c0000e82:	89 c1                	mov    ecx,eax
c0000e84:	83 c9 01             	or     ecx,0x1
c0000e87:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e8a:	89 15 ec e0 02 c0    	mov    DWORD PTR ds:0xc002e0ec,edx
c0000e90:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e95:	76 16                	jbe    c0000ead <dlfree+0xf1>
c0000e97:	f6 05 c0 e0 02 c0 02 	test   BYTE PTR ds:0xc002e0c0,0x2
c0000e9e:	74 0d                	je     c0000ead <dlfree+0xf1>
c0000ea0:	5b                   	pop    ebx
c0000ea1:	b8 c0 e0 02 c0       	mov    eax,0xc002e0c0
c0000ea6:	5e                   	pop    esi
c0000ea7:	5f                   	pop    edi
c0000ea8:	e9 28 fe ff ff       	jmp    c0000cd5 <malloc_consolidate>
c0000ead:	5b                   	pop    ebx
c0000eae:	5e                   	pop    esi
c0000eaf:	5f                   	pop    edi
c0000eb0:	c3                   	ret    

c0000eb1 <sYSMALLOc>:
c0000eb1:	55                   	push   ebp
c0000eb2:	57                   	push   edi
c0000eb3:	56                   	push   esi
c0000eb4:	53                   	push   ebx
c0000eb5:	89 d3                	mov    ebx,edx
c0000eb7:	83 ec 2c             	sub    esp,0x2c
c0000eba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ebe:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ec4:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ec7:	8d 42 ff             	lea    eax,[edx-0x1]
c0000eca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ece:	74 1f                	je     c0000eef <sYSMALLOc+0x3e>
c0000ed0:	89 d8                	mov    eax,ebx
c0000ed2:	e8 fe fd ff ff       	call   c0000cd5 <malloc_consolidate>
c0000ed7:	83 ec 0c             	sub    esp,0xc
c0000eda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ede:	83 e8 07             	sub    eax,0x7
c0000ee1:	50                   	push   eax
c0000ee2:	e8 30 02 00 00       	call   c0001117 <dlmalloc>
c0000ee7:	83 c4 10             	add    esp,0x10
c0000eea:	e9 20 02 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000eef:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ef2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ef8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000efb:	83 e0 fc             	and    eax,0xfffffffc
c0000efe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f06:	83 c0 10             	add    eax,0x10
c0000f09:	01 c1                	add    ecx,eax
c0000f0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f0f:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f16:	74 04                	je     c0000f1c <sYSMALLOc+0x6b>
c0000f18:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f1c:	f7 da                	neg    edx
c0000f1e:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f22:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f26:	21 d1                	and    ecx,edx
c0000f28:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f2c:	7f 07                	jg     c0000f35 <sYSMALLOc+0x84>
c0000f2e:	31 c0                	xor    eax,eax
c0000f30:	e9 da 01 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000f35:	83 ec 0c             	sub    esp,0xc
c0000f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f3c:	e8 56 e7 00 00       	call   c000f697 <sbrk>
c0000f41:	83 c4 10             	add    esp,0x10
c0000f44:	89 c6                	mov    esi,eax
c0000f46:	83 f8 ff             	cmp    eax,0xffffffff
c0000f49:	74 e3                	je     c0000f2e <sYSMALLOc+0x7d>
c0000f4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f53:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f56:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f5c:	39 f1                	cmp    ecx,esi
c0000f5e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f64:	75 13                	jne    c0000f79 <sYSMALLOc+0xc8>
c0000f66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f6a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f6e:	83 c8 01             	or     eax,0x1
c0000f71:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f74:	e9 3e 01 00 00       	jmp    c00010b7 <sYSMALLOc+0x206>
c0000f79:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f7f:	88 d0                	mov    al,dl
c0000f81:	83 e0 01             	and    eax,0x1
c0000f84:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f89:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f8d:	0f 95 c0             	setne  al
c0000f90:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f94:	39 f1                	cmp    ecx,esi
c0000f96:	76 12                	jbe    c0000faa <sYSMALLOc+0xf9>
c0000f98:	84 c0                	test   al,al
c0000f9a:	74 0e                	je     c0000faa <sYSMALLOc+0xf9>
c0000f9c:	83 e2 fe             	and    edx,0xfffffffe
c0000f9f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fa5:	e9 83 00 00 00       	jmp    c000102d <sYSMALLOc+0x17c>
c0000faa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000faf:	74 7c                	je     c000102d <sYSMALLOc+0x17c>
c0000fb1:	84 c0                	test   al,al
c0000fb3:	74 0c                	je     c0000fc1 <sYSMALLOc+0x110>
c0000fb5:	89 f0                	mov    eax,esi
c0000fb7:	29 c8                	sub    eax,ecx
c0000fb9:	01 e8                	add    eax,ebp
c0000fbb:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fc1:	89 f2                	mov    edx,esi
c0000fc3:	83 e2 07             	and    edx,0x7
c0000fc6:	74 0c                	je     c0000fd4 <sYSMALLOc+0x123>
c0000fc8:	b8 08 00 00 00       	mov    eax,0x8
c0000fcd:	29 d0                	sub    eax,edx
c0000fcf:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fd2:	eb 04                	jmp    c0000fd8 <sYSMALLOc+0x127>
c0000fd4:	89 f5                	mov    ebp,esi
c0000fd6:	31 c0                	xor    eax,eax
c0000fd8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fdc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fe0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe4:	01 c1                	add    ecx,eax
c0000fe6:	83 ec 0c             	sub    esp,0xc
c0000fe9:	01 f1                	add    ecx,esi
c0000feb:	01 ca                	add    edx,ecx
c0000fed:	29 c8                	sub    eax,ecx
c0000fef:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ff3:	01 c2                	add    edx,eax
c0000ff5:	52                   	push   edx
c0000ff6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ffa:	e8 98 e6 00 00       	call   c000f697 <sbrk>
c0000fff:	83 c4 10             	add    esp,0x10
c0001002:	83 f8 ff             	cmp    eax,0xffffffff
c0001005:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001009:	75 0f                	jne    c000101a <sYSMALLOc+0x169>
c000100b:	83 ec 0c             	sub    esp,0xc
c000100e:	6a 00                	push   0x0
c0001010:	e8 82 e6 00 00       	call   c000f697 <sbrk>
c0001015:	83 c4 10             	add    esp,0x10
c0001018:	eb 30                	jmp    c000104a <sYSMALLOc+0x199>
c000101a:	39 c6                	cmp    esi,eax
c000101c:	76 33                	jbe    c0001051 <sYSMALLOc+0x1a0>
c000101e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001022:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001029:	01 f0                	add    eax,esi
c000102b:	eb 1d                	jmp    c000104a <sYSMALLOc+0x199>
c000102d:	83 ec 0c             	sub    esp,0xc
c0001030:	89 f5                	mov    ebp,esi
c0001032:	6a 00                	push   0x0
c0001034:	e8 5e e6 00 00       	call   c000f697 <sbrk>
c0001039:	89 c2                	mov    edx,eax
c000103b:	29 f2                	sub    edx,esi
c000103d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001041:	83 c4 10             	add    esp,0x10
c0001044:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000104a:	31 d2                	xor    edx,edx
c000104c:	83 f8 ff             	cmp    eax,0xffffffff
c000104f:	74 66                	je     c00010b7 <sYSMALLOc+0x206>
c0001051:	29 e8                	sub    eax,ebp
c0001053:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001056:	01 d0                	add    eax,edx
c0001058:	83 c8 01             	or     eax,0x1
c000105b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000105e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001064:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001069:	74 4c                	je     c00010b7 <sYSMALLOc+0x206>
c000106b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000106f:	83 e8 0c             	sub    eax,0xc
c0001072:	83 e0 f8             	and    eax,0xfffffff8
c0001075:	89 c2                	mov    edx,eax
c0001077:	83 ca 01             	or     edx,0x1
c000107a:	83 f8 0f             	cmp    eax,0xf
c000107d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001080:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001088:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001090:	76 25                	jbe    c00010b7 <sYSMALLOc+0x206>
c0001092:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001098:	83 ec 0c             	sub    esp,0xc
c000109b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a5:	83 c7 08             	add    edi,0x8
c00010a8:	57                   	push   edi
c00010a9:	e8 0e fd ff ff       	call   c0000dbc <dlfree>
c00010ae:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b4:	83 c4 10             	add    esp,0x10
c00010b7:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010bd:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010c3:	73 06                	jae    c00010cb <sYSMALLOc+0x21a>
c00010c5:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010cb:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010d1:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010d7:	73 06                	jae    c00010df <sYSMALLOc+0x22e>
c00010d9:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010df:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010e2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010e5:	83 e2 fc             	and    edx,0xfffffffc
c00010e8:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010ec:	0f 82 3c fe ff ff    	jb     c0000f2e <sYSMALLOc+0x7d>
c00010f2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010f6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010f9:	29 fa                	sub    edx,edi
c00010fb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010fe:	83 ca 01             	or     edx,0x1
c0001101:	89 fb                	mov    ebx,edi
c0001103:	83 c0 08             	add    eax,0x8
c0001106:	83 cb 01             	or     ebx,0x1
c0001109:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000110c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000110f:	83 c4 2c             	add    esp,0x2c
c0001112:	5b                   	pop    ebx
c0001113:	5e                   	pop    esi
c0001114:	5f                   	pop    edi
c0001115:	5d                   	pop    ebp
c0001116:	c3                   	ret    

c0001117 <dlmalloc>:
c0001117:	55                   	push   ebp
c0001118:	57                   	push   edi
c0001119:	56                   	push   esi
c000111a:	53                   	push   ebx
c000111b:	83 ec 1c             	sub    esp,0x1c
c000111e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001122:	83 f8 df             	cmp    eax,0xffffffdf
c0001125:	0f 87 70 03 00 00    	ja     c000149b <dlmalloc+0x384>
c000112b:	83 c0 0b             	add    eax,0xb
c000112e:	be 10 00 00 00       	mov    esi,0x10
c0001133:	83 f8 0f             	cmp    eax,0xf
c0001136:	76 05                	jbe    c000113d <dlmalloc+0x26>
c0001138:	83 e0 f8             	and    eax,0xfffffff8
c000113b:	89 c6                	mov    esi,eax
c000113d:	8b 3d c0 e0 02 c0    	mov    edi,DWORD PTR ds:0xc002e0c0
c0001143:	f7 c7 01 00 00 00    	test   edi,0x1
c0001149:	75 17                	jne    c0001162 <dlmalloc+0x4b>
c000114b:	85 ff                	test   edi,edi
c000114d:	0f 85 05 03 00 00    	jne    c0001458 <dlmalloc+0x341>
c0001153:	b8 c0 e0 02 c0       	mov    eax,0xc002e0c0
c0001158:	e8 78 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c000115d:	e9 f6 02 00 00       	jmp    c0001458 <dlmalloc+0x341>
c0001162:	39 f7                	cmp    edi,esi
c0001164:	72 1f                	jb     c0001185 <dlmalloc+0x6e>
c0001166:	89 f2                	mov    edx,esi
c0001168:	c1 ea 03             	shr    edx,0x3
c000116b:	83 ea 02             	sub    edx,0x2
c000116e:	8b 04 95 c4 e0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1f3c]
c0001175:	85 c0                	test   eax,eax
c0001177:	74 0c                	je     c0001185 <dlmalloc+0x6e>
c0001179:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000117c:	89 0c 95 c4 e0 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1f3c],ecx
c0001183:	eb 30                	jmp    c00011b5 <dlmalloc+0x9e>
c0001185:	89 f0                	mov    eax,esi
c0001187:	81 fe ff 00 00 00    	cmp    esi,0xff
c000118d:	77 2e                	ja     c00011bd <dlmalloc+0xa6>
c000118f:	c1 e8 03             	shr    eax,0x3
c0001192:	8d 14 c5 f4 e0 02 c0 	lea    edx,[eax*8-0x3ffd1f0c]
c0001199:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000119d:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011a0:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011a3:	39 c3                	cmp    ebx,eax
c00011a5:	74 2e                	je     c00011d5 <dlmalloc+0xbe>
c00011a7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011aa:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011af:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011b2:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011b5:	83 c0 08             	add    eax,0x8
c00011b8:	e9 e0 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c00011bd:	e8 8f fa ff ff       	call   c0000c51 <largebin_index>
c00011c2:	83 e7 02             	and    edi,0x2
c00011c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011c9:	74 0a                	je     c00011d5 <dlmalloc+0xbe>
c00011cb:	b8 c0 e0 02 c0       	mov    eax,0xc002e0c0
c00011d0:	e8 00 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c00011d5:	8d 46 10             	lea    eax,[esi+0x10]
c00011d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011dc:	8b 1d 00 e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e100
c00011e2:	81 fb f4 e0 02 c0    	cmp    ebx,0xc002e0f4
c00011e8:	0f 84 13 01 00 00    	je     c0001301 <dlmalloc+0x1ea>
c00011ee:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011f1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011f4:	83 e7 fc             	and    edi,0xfffffffc
c00011f7:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011fd:	77 4c                	ja     c000124b <dlmalloc+0x134>
c00011ff:	3d f4 e0 02 c0       	cmp    eax,0xc002e0f4
c0001204:	75 45                	jne    c000124b <dlmalloc+0x134>
c0001206:	39 1d f0 e0 02 c0    	cmp    DWORD PTR ds:0xc002e0f0,ebx
c000120c:	75 3d                	jne    c000124b <dlmalloc+0x134>
c000120e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001212:	73 37                	jae    c000124b <dlmalloc+0x134>
c0001214:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001217:	89 fa                	mov    edx,edi
c0001219:	a3 fc e0 02 c0       	mov    ds:0xc002e0fc,eax
c000121e:	a3 00 e1 02 c0       	mov    ds:0xc002e100,eax
c0001223:	a3 f0 e0 02 c0       	mov    ds:0xc002e0f0,eax
c0001228:	29 f2                	sub    edx,esi
c000122a:	c7 40 08 f4 e0 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e0f4
c0001231:	c7 40 0c f4 e0 02 c0 	mov    DWORD PTR [eax+0xc],0xc002e0f4
c0001238:	83 ce 01             	or     esi,0x1
c000123b:	89 d1                	mov    ecx,edx
c000123d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001240:	83 c9 01             	or     ecx,0x1
c0001243:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001246:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001249:	eb 15                	jmp    c0001260 <dlmalloc+0x149>
c000124b:	a3 00 e1 02 c0       	mov    ds:0xc002e100,eax
c0001250:	39 fe                	cmp    esi,edi
c0001252:	c7 40 08 f4 e0 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e0f4
c0001259:	75 0d                	jne    c0001268 <dlmalloc+0x151>
c000125b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001260:	8d 43 08             	lea    eax,[ebx+0x8]
c0001263:	e9 35 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c0001268:	89 f8                	mov    eax,edi
c000126a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001270:	77 19                	ja     c000128b <dlmalloc+0x174>
c0001272:	c1 e8 03             	shr    eax,0x3
c0001275:	8d 14 00             	lea    edx,[eax+eax*1]
c0001278:	83 c2 0d             	add    edx,0xd
c000127b:	8d 2c 95 b8 e0 02 c0 	lea    ebp,[edx*4-0x3ffd1f48]
c0001282:	8b 14 95 c0 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1f40]
c0001289:	eb 46                	jmp    c00012d1 <dlmalloc+0x1ba>
c000128b:	e8 c1 f9 ff ff       	call   c0000c51 <largebin_index>
c0001290:	8d 14 00             	lea    edx,[eax+eax*1]
c0001293:	83 c2 0d             	add    edx,0xd
c0001296:	8d 0c 95 c0 e0 02 c0 	lea    ecx,[edx*4-0x3ffd1f40]
c000129d:	8b 14 95 c0 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1f40]
c00012a4:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012a7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012ab:	89 d5                	mov    ebp,edx
c00012ad:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012b1:	74 1e                	je     c00012d1 <dlmalloc+0x1ba>
c00012b3:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012b6:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012b9:	77 12                	ja     c00012cd <dlmalloc+0x1b6>
c00012bb:	83 cf 01             	or     edi,0x1
c00012be:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012c1:	76 05                	jbe    c00012c8 <dlmalloc+0x1b1>
c00012c3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012c6:	eb f6                	jmp    c00012be <dlmalloc+0x1a7>
c00012c8:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012cb:	eb 04                	jmp    c00012d1 <dlmalloc+0x1ba>
c00012cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012d1:	89 c7                	mov    edi,eax
c00012d3:	88 c1                	mov    cl,al
c00012d5:	c1 ff 05             	sar    edi,0x5
c00012d8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012dc:	bf 01 00 00 00       	mov    edi,0x1
c00012e1:	d3 e7                	shl    edi,cl
c00012e3:	89 f8                	mov    eax,edi
c00012e5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012e9:	09 04 bd f4 e3 02 c0 	or     DWORD PTR [edi*4-0x3ffd1c0c],eax
c00012f0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012f3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012f6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012f9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012fc:	e9 db fe ff ff       	jmp    c00011dc <dlmalloc+0xc5>
c0001301:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001307:	76 78                	jbe    c0001381 <dlmalloc+0x26a>
c0001309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000130d:	8d 04 c5 f4 e0 02 c0 	lea    eax,[eax*8-0x3ffd1f0c]
c0001314:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001317:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000131a:	39 ca                	cmp    edx,ecx
c000131c:	74 63                	je     c0001381 <dlmalloc+0x26a>
c000131e:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001321:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001324:	83 e3 fc             	and    ebx,0xfffffffc
c0001327:	39 de                	cmp    esi,ebx
c0001329:	77 52                	ja     c000137d <dlmalloc+0x266>
c000132b:	89 df                	mov    edi,ebx
c000132d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001330:	29 f7                	sub    edi,esi
c0001332:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001335:	01 d3                	add    ebx,edx
c0001337:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000133a:	83 ff 0f             	cmp    edi,0xf
c000133d:	8d 42 08             	lea    eax,[edx+0x8]
c0001340:	77 09                	ja     c000134b <dlmalloc+0x234>
c0001342:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001346:	e9 52 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000134b:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000134e:	83 ce 01             	or     esi,0x1
c0001351:	89 0d fc e0 02 c0    	mov    DWORD PTR ds:0xc002e0fc,ecx
c0001357:	89 0d 00 e1 02 c0    	mov    DWORD PTR ds:0xc002e100,ecx
c000135d:	c7 41 08 f4 e0 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002e0f4
c0001364:	c7 41 0c f4 e0 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002e0f4
c000136b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000136e:	89 fa                	mov    edx,edi
c0001370:	83 ca 01             	or     edx,0x1
c0001373:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001376:	89 3b                	mov    DWORD PTR [ebx],edi
c0001378:	e9 20 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000137d:	89 c2                	mov    edx,eax
c000137f:	eb 99                	jmp    c000131a <dlmalloc+0x203>
c0001381:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001385:	b8 01 00 00 00       	mov    eax,0x1
c000138a:	41                   	inc    ecx
c000138b:	89 cb                	mov    ebx,ecx
c000138d:	8d 14 cd ec e0 02 c0 	lea    edx,[ecx*8-0x3ffd1f14]
c0001394:	c1 eb 05             	shr    ebx,0x5
c0001397:	d3 e0                	shl    eax,cl
c0001399:	8b 3c 9d f4 e3 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1c0c]
c00013a0:	39 f8                	cmp    eax,edi
c00013a2:	77 04                	ja     c00013a8 <dlmalloc+0x291>
c00013a4:	85 c0                	test   eax,eax
c00013a6:	75 26                	jne    c00013ce <dlmalloc+0x2b7>
c00013a8:	43                   	inc    ebx
c00013a9:	83 fb 02             	cmp    ebx,0x2
c00013ac:	0f 87 a6 00 00 00    	ja     c0001458 <dlmalloc+0x341>
c00013b2:	8b 3c 9d f4 e3 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1c0c]
c00013b9:	85 ff                	test   edi,edi
c00013bb:	74 eb                	je     c00013a8 <dlmalloc+0x291>
c00013bd:	89 d8                	mov    eax,ebx
c00013bf:	c1 e0 06             	shl    eax,0x6
c00013c2:	8d 14 85 ec e0 02 c0 	lea    edx,[eax*4-0x3ffd1f14]
c00013c9:	b8 01 00 00 00       	mov    eax,0x1
c00013ce:	85 f8                	test   eax,edi
c00013d0:	75 07                	jne    c00013d9 <dlmalloc+0x2c2>
c00013d2:	83 c2 08             	add    edx,0x8
c00013d5:	01 c0                	add    eax,eax
c00013d7:	eb f5                	jmp    c00013ce <dlmalloc+0x2b7>
c00013d9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013dc:	39 ca                	cmp    edx,ecx
c00013de:	75 14                	jne    c00013f4 <dlmalloc+0x2dd>
c00013e0:	89 c1                	mov    ecx,eax
c00013e2:	83 c2 08             	add    edx,0x8
c00013e5:	f7 d1                	not    ecx
c00013e7:	01 c0                	add    eax,eax
c00013e9:	21 cf                	and    edi,ecx
c00013eb:	89 3c 9d f4 e3 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd1c0c],edi
c00013f2:	eb ac                	jmp    c00013a0 <dlmalloc+0x289>
c00013f4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013f7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013fa:	83 e0 fc             	and    eax,0xfffffffc
c00013fd:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001400:	89 c3                	mov    ebx,eax
c0001402:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001405:	29 f3                	sub    ebx,esi
c0001407:	8d 14 01             	lea    edx,[ecx+eax*1]
c000140a:	83 fb 0f             	cmp    ebx,0xf
c000140d:	8d 41 08             	lea    eax,[ecx+0x8]
c0001410:	77 09                	ja     c000141b <dlmalloc+0x304>
c0001412:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001416:	e9 82 00 00 00       	jmp    c000149d <dlmalloc+0x386>
c000141b:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000141e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001424:	89 3d fc e0 02 c0    	mov    DWORD PTR ds:0xc002e0fc,edi
c000142a:	89 3d 00 e1 02 c0    	mov    DWORD PTR ds:0xc002e100,edi
c0001430:	c7 47 08 f4 e0 02 c0 	mov    DWORD PTR [edi+0x8],0xc002e0f4
c0001437:	c7 47 0c f4 e0 02 c0 	mov    DWORD PTR [edi+0xc],0xc002e0f4
c000143e:	77 06                	ja     c0001446 <dlmalloc+0x32f>
c0001440:	89 3d f0 e0 02 c0    	mov    DWORD PTR ds:0xc002e0f0,edi
c0001446:	83 ce 01             	or     esi,0x1
c0001449:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000144c:	89 d9                	mov    ecx,ebx
c000144e:	83 c9 01             	or     ecx,0x1
c0001451:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001454:	89 1a                	mov    DWORD PTR [edx],ebx
c0001456:	eb 45                	jmp    c000149d <dlmalloc+0x386>
c0001458:	a1 ec e0 02 c0       	mov    eax,ds:0xc002e0ec
c000145d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001460:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001463:	83 e2 fc             	and    edx,0xfffffffc
c0001466:	39 d1                	cmp    ecx,edx
c0001468:	77 1e                	ja     c0001488 <dlmalloc+0x371>
c000146a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000146d:	89 f3                	mov    ebx,esi
c000146f:	89 0d ec e0 02 c0    	mov    DWORD PTR ds:0xc002e0ec,ecx
c0001475:	83 cb 01             	or     ebx,0x1
c0001478:	29 f2                	sub    edx,esi
c000147a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000147d:	83 ca 01             	or     edx,0x1
c0001480:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001483:	e9 2d fd ff ff       	jmp    c00011b5 <dlmalloc+0x9e>
c0001488:	83 c4 1c             	add    esp,0x1c
c000148b:	89 f0                	mov    eax,esi
c000148d:	5b                   	pop    ebx
c000148e:	ba c0 e0 02 c0       	mov    edx,0xc002e0c0
c0001493:	5e                   	pop    esi
c0001494:	5f                   	pop    edi
c0001495:	5d                   	pop    ebp
c0001496:	e9 16 fa ff ff       	jmp    c0000eb1 <sYSMALLOc>
c000149b:	31 c0                	xor    eax,eax
c000149d:	83 c4 1c             	add    esp,0x1c
c00014a0:	5b                   	pop    ebx
c00014a1:	5e                   	pop    esi
c00014a2:	5f                   	pop    edi
c00014a3:	5d                   	pop    ebp
c00014a4:	c3                   	ret    

c00014a5 <iALLOc>:
c00014a5:	55                   	push   ebp
c00014a6:	89 c5                	mov    ebp,eax
c00014a8:	57                   	push   edi
c00014a9:	56                   	push   esi
c00014aa:	53                   	push   ebx
c00014ab:	83 ec 2c             	sub    esp,0x2c
c00014ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014b2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014ba:	83 3d c0 e0 02 c0 00 	cmp    DWORD PTR ds:0xc002e0c0,0x0
c00014c1:	75 12                	jne    c00014d5 <iALLOc+0x30>
c00014c3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014c7:	b8 c0 e0 02 c0       	mov    eax,0xc002e0c0
c00014cc:	e8 04 f8 ff ff       	call   c0000cd5 <malloc_consolidate>
c00014d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014d5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014da:	74 12                	je     c00014ee <iALLOc+0x49>
c00014dc:	85 ed                	test   ebp,ebp
c00014de:	0f 84 64 01 00 00    	je     c0001648 <iALLOc+0x1a3>
c00014e4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014ec:	eb 33                	jmp    c0001521 <iALLOc+0x7c>
c00014ee:	85 ed                	test   ebp,ebp
c00014f0:	75 14                	jne    c0001506 <iALLOc+0x61>
c00014f2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014fa:	83 c4 2c             	add    esp,0x2c
c00014fd:	5b                   	pop    ebx
c00014fe:	5e                   	pop    esi
c00014ff:	5f                   	pop    edi
c0001500:	5d                   	pop    ebp
c0001501:	e9 11 fc ff ff       	jmp    c0001117 <dlmalloc>
c0001506:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000150d:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001515:	83 f8 0f             	cmp    eax,0xf
c0001518:	76 07                	jbe    c0001521 <iALLOc+0x7c>
c000151a:	83 e0 f8             	and    eax,0xfffffff8
c000151d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001521:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001526:	75 09                	jne    c0001531 <iALLOc+0x8c>
c0001528:	89 d0                	mov    eax,edx
c000152a:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000152d:	31 f6                	xor    esi,esi
c000152f:	eb 3b                	jmp    c000156c <iALLOc+0xc7>
c0001531:	8b 02                	mov    eax,DWORD PTR [edx]
c0001533:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000153b:	83 c0 0b             	add    eax,0xb
c000153e:	83 f8 0f             	cmp    eax,0xf
c0001541:	76 07                	jbe    c000154a <iALLOc+0xa5>
c0001543:	83 e0 f8             	and    eax,0xfffffff8
c0001546:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000154a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000154e:	0f af f5             	imul   esi,ebp
c0001551:	eb 25                	jmp    c0001578 <iALLOc+0xd3>
c0001553:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001555:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001558:	bb 10 00 00 00       	mov    ebx,0x10
c000155d:	83 f9 0f             	cmp    ecx,0xf
c0001560:	76 05                	jbe    c0001567 <iALLOc+0xc2>
c0001562:	83 e1 f8             	and    ecx,0xfffffff8
c0001565:	89 cb                	mov    ebx,ecx
c0001567:	01 de                	add    esi,ebx
c0001569:	83 c0 04             	add    eax,0x4
c000156c:	39 c7                	cmp    edi,eax
c000156e:	75 e3                	jne    c0001553 <iALLOc+0xae>
c0001570:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001578:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000157c:	8b 1d 14 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e414
c0001582:	83 ec 0c             	sub    esp,0xc
c0001585:	c7 05 14 e4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e414,0x0
c000158f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001593:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001597:	50                   	push   eax
c0001598:	e8 7a fb ff ff       	call   c0001117 <dlmalloc>
c000159d:	83 c4 10             	add    esp,0x10
c00015a0:	89 1d 14 e4 02 c0    	mov    DWORD PTR ds:0xc002e414,ebx
c00015a6:	85 c0                	test   eax,eax
c00015a8:	0f 84 92 00 00 00    	je     c0001640 <iALLOc+0x19b>
c00015ae:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015b1:	8d 78 f8             	lea    edi,[eax-0x8]
c00015b4:	83 e3 fc             	and    ebx,0xfffffffc
c00015b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015bb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015c0:	74 1e                	je     c00015e0 <iALLOc+0x13b>
c00015c2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015c6:	89 d9                	mov    ecx,ebx
c00015c8:	52                   	push   edx
c00015c9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015cd:	83 e9 04             	sub    ecx,0x4
c00015d0:	51                   	push   ecx
c00015d1:	6a 00                	push   0x0
c00015d3:	50                   	push   eax
c00015d4:	e8 9f f1 ff ff       	call   c0000778 <memset>
c00015d9:	83 c4 10             	add    esp,0x10
c00015dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015e5:	75 14                	jne    c00015fb <iALLOc+0x156>
c00015e7:	8d 04 37             	lea    eax,[edi+esi*1]
c00015ea:	29 f3                	sub    ebx,esi
c00015ec:	8d 48 08             	lea    ecx,[eax+0x8]
c00015ef:	83 cb 01             	or     ebx,0x1
c00015f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015f6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015f9:	89 f3                	mov    ebx,esi
c00015fb:	31 c0                	xor    eax,eax
c00015fd:	4d                   	dec    ebp
c00015fe:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001601:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001605:	39 c5                	cmp    ebp,eax
c0001607:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000160a:	74 2c                	je     c0001638 <iALLOc+0x193>
c000160c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001610:	85 c9                	test   ecx,ecx
c0001612:	75 15                	jne    c0001629 <iALLOc+0x184>
c0001614:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001617:	8d 71 0b             	lea    esi,[ecx+0xb]
c000161a:	b9 10 00 00 00       	mov    ecx,0x10
c000161f:	83 fe 0f             	cmp    esi,0xf
c0001622:	76 05                	jbe    c0001629 <iALLOc+0x184>
c0001624:	83 e6 f8             	and    esi,0xfffffff8
c0001627:	89 f1                	mov    ecx,esi
c0001629:	89 ce                	mov    esi,ecx
c000162b:	29 cb                	sub    ebx,ecx
c000162d:	83 ce 01             	or     esi,0x1
c0001630:	40                   	inc    eax
c0001631:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001634:	01 cf                	add    edi,ecx
c0001636:	eb c6                	jmp    c00015fe <iALLOc+0x159>
c0001638:	83 cb 01             	or     ebx,0x1
c000163b:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000163e:	eb 08                	jmp    c0001648 <iALLOc+0x1a3>
c0001640:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000164c:	83 c4 2c             	add    esp,0x2c
c000164f:	5b                   	pop    ebx
c0001650:	5e                   	pop    esi
c0001651:	5f                   	pop    edi
c0001652:	5d                   	pop    ebp
c0001653:	c3                   	ret    

c0001654 <dlrealloc>:
c0001654:	55                   	push   ebp
c0001655:	57                   	push   edi
c0001656:	56                   	push   esi
c0001657:	53                   	push   ebx
c0001658:	83 ec 1c             	sub    esp,0x1c
c000165b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000165f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001663:	85 db                	test   ebx,ebx
c0001665:	75 10                	jne    c0001677 <dlrealloc+0x23>
c0001667:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000166b:	83 c4 1c             	add    esp,0x1c
c000166e:	5b                   	pop    ebx
c000166f:	5e                   	pop    esi
c0001670:	5f                   	pop    edi
c0001671:	5d                   	pop    ebp
c0001672:	e9 a0 fa ff ff       	jmp    c0001117 <dlmalloc>
c0001677:	83 f8 df             	cmp    eax,0xffffffdf
c000167a:	76 07                	jbe    c0001683 <dlrealloc+0x2f>
c000167c:	31 db                	xor    ebx,ebx
c000167e:	e9 7c 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c0001683:	83 c0 0b             	add    eax,0xb
c0001686:	bf 10 00 00 00       	mov    edi,0x10
c000168b:	83 f8 0f             	cmp    eax,0xf
c000168e:	76 05                	jbe    c0001695 <dlrealloc+0x41>
c0001690:	83 e0 f8             	and    eax,0xfffffff8
c0001693:	89 c7                	mov    edi,eax
c0001695:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001698:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000169b:	89 c6                	mov    esi,eax
c000169d:	83 e6 fc             	and    esi,0xfffffffc
c00016a0:	a8 02                	test   al,0x2
c00016a2:	75 d8                	jne    c000167c <dlrealloc+0x28>
c00016a4:	39 f7                	cmp    edi,esi
c00016a6:	0f 86 15 01 00 00    	jbe    c00017c1 <dlrealloc+0x16d>
c00016ac:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016b0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016b3:	39 15 ec e0 02 c0    	cmp    DWORD PTR ds:0xc002e0ec,edx
c00016b9:	75 33                	jne    c00016ee <dlrealloc+0x9a>
c00016bb:	83 e1 fc             	and    ecx,0xfffffffc
c00016be:	01 f1                	add    ecx,esi
c00016c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016c4:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016c7:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016cb:	77 49                	ja     c0001716 <dlrealloc+0xc2>
c00016cd:	01 fd                	add    ebp,edi
c00016cf:	83 e0 01             	and    eax,0x1
c00016d2:	09 f8                	or     eax,edi
c00016d4:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016d7:	89 2d ec e0 02 c0    	mov    DWORD PTR ds:0xc002e0ec,ebp
c00016dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e1:	29 f8                	sub    eax,edi
c00016e3:	83 c8 01             	or     eax,0x1
c00016e6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016e9:	e9 11 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c00016ee:	89 c8                	mov    eax,ecx
c00016f0:	83 e0 fe             	and    eax,0xfffffffe
c00016f3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016f8:	75 1c                	jne    c0001716 <dlrealloc+0xc2>
c00016fa:	83 e1 fc             	and    ecx,0xfffffffc
c00016fd:	01 f1                	add    ecx,esi
c00016ff:	39 cf                	cmp    edi,ecx
c0001701:	77 13                	ja     c0001716 <dlrealloc+0xc2>
c0001703:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001706:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001709:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000170c:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000170f:	89 ce                	mov    esi,ecx
c0001711:	e9 ab 00 00 00       	jmp    c00017c1 <dlrealloc+0x16d>
c0001716:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000171a:	8d 47 f9             	lea    eax,[edi-0x7]
c000171d:	83 ec 0c             	sub    esp,0xc
c0001720:	50                   	push   eax
c0001721:	e8 f1 f9 ff ff       	call   c0001117 <dlmalloc>
c0001726:	83 c4 10             	add    esp,0x10
c0001729:	89 c1                	mov    ecx,eax
c000172b:	85 c0                	test   eax,eax
c000172d:	0f 84 49 ff ff ff    	je     c000167c <dlrealloc+0x28>
c0001733:	8d 40 f8             	lea    eax,[eax-0x8]
c0001736:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000173a:	39 c2                	cmp    edx,eax
c000173c:	75 0a                	jne    c0001748 <dlrealloc+0xf4>
c000173e:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001741:	83 e0 fc             	and    eax,0xfffffffc
c0001744:	01 c6                	add    esi,eax
c0001746:	eb 79                	jmp    c00017c1 <dlrealloc+0x16d>
c0001748:	83 ee 04             	sub    esi,0x4
c000174b:	83 fe 27             	cmp    esi,0x27
c000174e:	76 16                	jbe    c0001766 <dlrealloc+0x112>
c0001750:	50                   	push   eax
c0001751:	56                   	push   esi
c0001752:	53                   	push   ebx
c0001753:	51                   	push   ecx
c0001754:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001758:	e8 e7 ef ff ff       	call   c0000744 <memcpy>
c000175d:	83 c4 10             	add    esp,0x10
c0001760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001764:	eb 43                	jmp    c00017a9 <dlrealloc+0x155>
c0001766:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001768:	83 fe 13             	cmp    esi,0x13
c000176b:	89 01                	mov    DWORD PTR [ecx],eax
c000176d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001770:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001773:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001776:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001779:	76 2e                	jbe    c00017a9 <dlrealloc+0x155>
c000177b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000177e:	83 fe 1b             	cmp    esi,0x1b
c0001781:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001784:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001787:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000178a:	76 1d                	jbe    c00017a9 <dlrealloc+0x155>
c000178c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000178f:	83 fe 23             	cmp    esi,0x23
c0001792:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001795:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001798:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000179b:	76 0c                	jbe    c00017a9 <dlrealloc+0x155>
c000179d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017a0:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017a3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017a6:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017ad:	83 ec 0c             	sub    esp,0xc
c00017b0:	53                   	push   ebx
c00017b1:	e8 06 f6 ff ff       	call   c0000dbc <dlfree>
c00017b6:	83 c4 10             	add    esp,0x10
c00017b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017bd:	89 cb                	mov    ebx,ecx
c00017bf:	eb 3e                	jmp    c00017ff <dlrealloc+0x1ab>
c00017c1:	89 f2                	mov    edx,esi
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	29 fa                	sub    edx,edi
c00017c8:	83 e1 01             	and    ecx,0x1
c00017cb:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017cf:	83 fa 0f             	cmp    edx,0xf
c00017d2:	77 0b                	ja     c00017df <dlrealloc+0x18b>
c00017d4:	09 ce                	or     esi,ecx
c00017d6:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017d9:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017dd:	eb 20                	jmp    c00017ff <dlrealloc+0x1ab>
c00017df:	01 fd                	add    ebp,edi
c00017e1:	83 ec 0c             	sub    esp,0xc
c00017e4:	09 cf                	or     edi,ecx
c00017e6:	83 ca 01             	or     edx,0x1
c00017e9:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017ec:	83 c5 08             	add    ebp,0x8
c00017ef:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00017f2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017f6:	55                   	push   ebp
c00017f7:	e8 c0 f5 ff ff       	call   c0000dbc <dlfree>
c00017fc:	83 c4 10             	add    esp,0x10
c00017ff:	83 c4 1c             	add    esp,0x1c
c0001802:	89 d8                	mov    eax,ebx
c0001804:	5b                   	pop    ebx
c0001805:	5e                   	pop    esi
c0001806:	5f                   	pop    edi
c0001807:	5d                   	pop    ebp
c0001808:	c3                   	ret    

c0001809 <dlmemalign>:
c0001809:	55                   	push   ebp
c000180a:	57                   	push   edi
c000180b:	56                   	push   esi
c000180c:	53                   	push   ebx
c000180d:	83 ec 0c             	sub    esp,0xc
c0001810:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001814:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001818:	83 fa 08             	cmp    edx,0x8
c000181b:	77 10                	ja     c000182d <dlmemalign+0x24>
c000181d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001821:	83 c4 0c             	add    esp,0xc
c0001824:	5b                   	pop    ebx
c0001825:	5e                   	pop    esi
c0001826:	5f                   	pop    edi
c0001827:	5d                   	pop    ebp
c0001828:	e9 ea f8 ff ff       	jmp    c0001117 <dlmalloc>
c000182d:	bf 10 00 00 00       	mov    edi,0x10
c0001832:	83 fa 0f             	cmp    edx,0xf
c0001835:	76 13                	jbe    c000184a <dlmemalign+0x41>
c0001837:	8d 4a ff             	lea    ecx,[edx-0x1]
c000183a:	85 d1                	test   ecx,edx
c000183c:	75 04                	jne    c0001842 <dlmemalign+0x39>
c000183e:	89 d7                	mov    edi,edx
c0001840:	eb 08                	jmp    c000184a <dlmemalign+0x41>
c0001842:	39 d7                	cmp    edi,edx
c0001844:	73 04                	jae    c000184a <dlmemalign+0x41>
c0001846:	01 ff                	add    edi,edi
c0001848:	eb f8                	jmp    c0001842 <dlmemalign+0x39>
c000184a:	83 f8 df             	cmp    eax,0xffffffdf
c000184d:	76 07                	jbe    c0001856 <dlmemalign+0x4d>
c000184f:	31 c0                	xor    eax,eax
c0001851:	e9 ce 00 00 00       	jmp    c0001924 <dlmemalign+0x11b>
c0001856:	83 c0 0b             	add    eax,0xb
c0001859:	bd 10 00 00 00       	mov    ebp,0x10
c000185e:	83 f8 0f             	cmp    eax,0xf
c0001861:	76 05                	jbe    c0001868 <dlmemalign+0x5f>
c0001863:	83 e0 f8             	and    eax,0xfffffff8
c0001866:	89 c5                	mov    ebp,eax
c0001868:	83 ec 0c             	sub    esp,0xc
c000186b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000186f:	50                   	push   eax
c0001870:	e8 a2 f8 ff ff       	call   c0001117 <dlmalloc>
c0001875:	83 c4 10             	add    esp,0x10
c0001878:	89 c1                	mov    ecx,eax
c000187a:	85 c0                	test   eax,eax
c000187c:	74 d1                	je     c000184f <dlmemalign+0x46>
c000187e:	31 d2                	xor    edx,edx
c0001880:	8d 70 f8             	lea    esi,[eax-0x8]
c0001883:	f7 f7                	div    edi
c0001885:	85 d2                	test   edx,edx
c0001887:	74 62                	je     c00018eb <dlmemalign+0xe2>
c0001889:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000188d:	89 f8                	mov    eax,edi
c000188f:	f7 d8                	neg    eax
c0001891:	21 c3                	and    ebx,eax
c0001893:	83 eb 08             	sub    ebx,0x8
c0001896:	89 d8                	mov    eax,ebx
c0001898:	29 f0                	sub    eax,esi
c000189a:	83 f8 0f             	cmp    eax,0xf
c000189d:	77 02                	ja     c00018a1 <dlmemalign+0x98>
c000189f:	01 fb                	add    ebx,edi
c00018a1:	89 d8                	mov    eax,ebx
c00018a3:	29 f0                	sub    eax,esi
c00018a5:	89 c6                	mov    esi,eax
c00018a7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018aa:	89 c2                	mov    edx,eax
c00018ac:	83 e2 fc             	and    edx,0xfffffffc
c00018af:	29 f2                	sub    edx,esi
c00018b1:	a8 02                	test   al,0x2
c00018b3:	74 10                	je     c00018c5 <dlmemalign+0xbc>
c00018b5:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018b8:	83 ca 02             	or     edx,0x2
c00018bb:	8d 43 08             	lea    eax,[ebx+0x8]
c00018be:	89 33                	mov    DWORD PTR [ebx],esi
c00018c0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018c3:	eb 5f                	jmp    c0001924 <dlmemalign+0x11b>
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	89 d0                	mov    eax,edx
c00018ca:	83 c8 01             	or     eax,0x1
c00018cd:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018d0:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018d5:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018d8:	83 e0 01             	and    eax,0x1
c00018db:	09 f0                	or     eax,esi
c00018dd:	89 de                	mov    esi,ebx
c00018df:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018e2:	51                   	push   ecx
c00018e3:	e8 d4 f4 ff ff       	call   c0000dbc <dlfree>
c00018e8:	83 c4 10             	add    esp,0x10
c00018eb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018ee:	a8 02                	test   al,0x2
c00018f0:	75 2f                	jne    c0001921 <dlmemalign+0x118>
c00018f2:	83 e0 fc             	and    eax,0xfffffffc
c00018f5:	8d 55 10             	lea    edx,[ebp+0x10]
c00018f8:	39 c2                	cmp    edx,eax
c00018fa:	73 25                	jae    c0001921 <dlmemalign+0x118>
c00018fc:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018ff:	83 ec 0c             	sub    esp,0xc
c0001902:	29 e8                	sub    eax,ebp
c0001904:	83 c2 08             	add    edx,0x8
c0001907:	83 c8 01             	or     eax,0x1
c000190a:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000190d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001910:	83 e0 01             	and    eax,0x1
c0001913:	09 c5                	or     ebp,eax
c0001915:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001918:	52                   	push   edx
c0001919:	e8 9e f4 ff ff       	call   c0000dbc <dlfree>
c000191e:	83 c4 10             	add    esp,0x10
c0001921:	8d 46 08             	lea    eax,[esi+0x8]
c0001924:	83 c4 0c             	add    esp,0xc
c0001927:	5b                   	pop    ebx
c0001928:	5e                   	pop    esi
c0001929:	5f                   	pop    edi
c000192a:	5d                   	pop    ebp
c000192b:	c3                   	ret    

c000192c <dlcalloc>:
c000192c:	53                   	push   ebx
c000192d:	83 ec 14             	sub    esp,0x14
c0001930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001934:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001939:	50                   	push   eax
c000193a:	e8 d8 f7 ff ff       	call   c0001117 <dlmalloc>
c000193f:	83 c4 10             	add    esp,0x10
c0001942:	89 c3                	mov    ebx,eax
c0001944:	85 c0                	test   eax,eax
c0001946:	74 77                	je     c00019bf <dlcalloc+0x93>
c0001948:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000194b:	89 d0                	mov    eax,edx
c000194d:	83 e0 fc             	and    eax,0xfffffffc
c0001950:	80 e2 02             	and    dl,0x2
c0001953:	75 5a                	jne    c00019af <dlcalloc+0x83>
c0001955:	83 e8 04             	sub    eax,0x4
c0001958:	83 f8 27             	cmp    eax,0x27
c000195b:	76 03                	jbe    c0001960 <dlcalloc+0x34>
c000195d:	51                   	push   ecx
c000195e:	eb 53                	jmp    c00019b3 <dlcalloc+0x87>
c0001960:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001966:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000196d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001974:	83 f8 13             	cmp    eax,0x13
c0001977:	76 46                	jbe    c00019bf <dlcalloc+0x93>
c0001979:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001980:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001987:	83 f8 1b             	cmp    eax,0x1b
c000198a:	76 33                	jbe    c00019bf <dlcalloc+0x93>
c000198c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001993:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000199a:	83 f8 23             	cmp    eax,0x23
c000199d:	76 20                	jbe    c00019bf <dlcalloc+0x93>
c000199f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019a6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019ad:	eb 10                	jmp    c00019bf <dlcalloc+0x93>
c00019af:	83 e8 08             	sub    eax,0x8
c00019b2:	52                   	push   edx
c00019b3:	50                   	push   eax
c00019b4:	6a 00                	push   0x0
c00019b6:	53                   	push   ebx
c00019b7:	e8 bc ed ff ff       	call   c0000778 <memset>
c00019bc:	83 c4 10             	add    esp,0x10
c00019bf:	89 d8                	mov    eax,ebx
c00019c1:	83 c4 08             	add    esp,0x8
c00019c4:	5b                   	pop    ebx
c00019c5:	c3                   	ret    

c00019c6 <dlcfree>:
c00019c6:	e9 f1 f3 ff ff       	jmp    c0000dbc <dlfree>

c00019cb <dlindependent_calloc>:
c00019cb:	83 ec 28             	sub    esp,0x28
c00019ce:	b9 03 00 00 00       	mov    ecx,0x3
c00019d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019df:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019e7:	e8 b9 fa ff ff       	call   c00014a5 <iALLOc>
c00019ec:	83 c4 2c             	add    esp,0x2c
c00019ef:	c3                   	ret    

c00019f0 <dlindependent_comalloc>:
c00019f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f8:	31 c9                	xor    ecx,ecx
c00019fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a02:	e9 9e fa ff ff       	jmp    c00014a5 <iALLOc>

c0001a07 <dlvalloc>:
c0001a07:	83 ec 0c             	sub    esp,0xc
c0001a0a:	83 3d c0 e0 02 c0 00 	cmp    DWORD PTR ds:0xc002e0c0,0x0
c0001a11:	75 0a                	jne    c0001a1d <dlvalloc+0x16>
c0001a13:	b8 c0 e0 02 c0       	mov    eax,0xc002e0c0
c0001a18:	e8 b8 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a1d:	50                   	push   eax
c0001a1e:	50                   	push   eax
c0001a1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a23:	ff 35 1c e4 02 c0    	push   DWORD PTR ds:0xc002e41c
c0001a29:	e8 db fd ff ff       	call   c0001809 <dlmemalign>
c0001a2e:	83 c4 1c             	add    esp,0x1c
c0001a31:	c3                   	ret    

c0001a32 <dlpvalloc>:
c0001a32:	83 ec 0c             	sub    esp,0xc
c0001a35:	83 3d c0 e0 02 c0 00 	cmp    DWORD PTR ds:0xc002e0c0,0x0
c0001a3c:	75 0a                	jne    c0001a48 <dlpvalloc+0x16>
c0001a3e:	b8 c0 e0 02 c0       	mov    eax,0xc002e0c0
c0001a43:	e8 8d f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a48:	a1 1c e4 02 c0       	mov    eax,ds:0xc002e41c
c0001a4d:	89 c1                	mov    ecx,eax
c0001a4f:	52                   	push   edx
c0001a50:	f7 d9                	neg    ecx
c0001a52:	52                   	push   edx
c0001a53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a57:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a5b:	21 ca                	and    edx,ecx
c0001a5d:	52                   	push   edx
c0001a5e:	50                   	push   eax
c0001a5f:	e8 a5 fd ff ff       	call   c0001809 <dlmemalign>
c0001a64:	83 c4 1c             	add    esp,0x1c
c0001a67:	c3                   	ret    

c0001a68 <dlmalloc_trim>:
c0001a68:	b8 c0 e0 02 c0       	mov    eax,0xc002e0c0
c0001a6d:	e8 63 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a72:	31 c0                	xor    eax,eax
c0001a74:	c3                   	ret    

c0001a75 <dlmalloc_usable_size>:
c0001a75:	53                   	push   ebx
c0001a76:	31 c0                	xor    eax,eax
c0001a78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a7c:	85 c9                	test   ecx,ecx
c0001a7e:	74 24                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a80:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a83:	f6 c2 02             	test   dl,0x2
c0001a86:	74 08                	je     c0001a90 <dlmalloc_usable_size+0x1b>
c0001a88:	83 e2 fc             	and    edx,0xfffffffc
c0001a8b:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a8e:	eb 14                	jmp    c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a90:	89 d3                	mov    ebx,edx
c0001a92:	31 c0                	xor    eax,eax
c0001a94:	83 e3 fe             	and    ebx,0xfffffffe
c0001a97:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a9c:	74 06                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a9e:	83 e2 fc             	and    edx,0xfffffffc
c0001aa1:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aa4:	5b                   	pop    ebx
c0001aa5:	c3                   	ret    

c0001aa6 <dlmallinfo>:
c0001aa6:	55                   	push   ebp
c0001aa7:	57                   	push   edi
c0001aa8:	56                   	push   esi
c0001aa9:	53                   	push   ebx
c0001aaa:	83 ec 08             	sub    esp,0x8
c0001aad:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ab1:	83 3d ec e0 02 c0 00 	cmp    DWORD PTR ds:0xc002e0ec,0x0
c0001ab8:	75 0a                	jne    c0001ac4 <dlmallinfo+0x1e>
c0001aba:	b8 c0 e0 02 c0       	mov    eax,0xc002e0c0
c0001abf:	e8 11 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001ac4:	a1 ec e0 02 c0       	mov    eax,ds:0xc002e0ec
c0001ac9:	31 ed                	xor    ebp,ebp
c0001acb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ace:	31 c9                	xor    ecx,ecx
c0001ad0:	83 e0 fc             	and    eax,0xfffffffc
c0001ad3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ad7:	31 c0                	xor    eax,eax
c0001ad9:	8b 14 85 c4 e0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1f3c]
c0001ae0:	85 d2                	test   edx,edx
c0001ae2:	74 0e                	je     c0001af2 <dlmallinfo+0x4c>
c0001ae4:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001ae7:	45                   	inc    ebp
c0001ae8:	83 e6 fc             	and    esi,0xfffffffc
c0001aeb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aee:	01 f1                	add    ecx,esi
c0001af0:	eb ee                	jmp    c0001ae0 <dlmallinfo+0x3a>
c0001af2:	40                   	inc    eax
c0001af3:	83 f8 0a             	cmp    eax,0xa
c0001af6:	75 e1                	jne    c0001ad9 <dlmallinfo+0x33>
c0001af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001afc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b03:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b06:	b8 f4 e0 02 c0       	mov    eax,0xc002e0f4
c0001b0b:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b0e:	39 f0                	cmp    eax,esi
c0001b10:	74 10                	je     c0001b22 <dlmallinfo+0x7c>
c0001b12:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b15:	ff 04 24             	inc    DWORD PTR [esp]
c0001b18:	83 e7 fc             	and    edi,0xfffffffc
c0001b1b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b1e:	01 fa                	add    edx,edi
c0001b20:	eb ec                	jmp    c0001b0e <dlmallinfo+0x68>
c0001b22:	83 c0 08             	add    eax,0x8
c0001b25:	3d ec e3 02 c0       	cmp    eax,0xc002e3ec
c0001b2a:	75 df                	jne    c0001b0b <dlmallinfo+0x65>
c0001b2c:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b2f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b32:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b35:	a1 28 e4 02 c0       	mov    eax,ds:0xc002e428
c0001b3a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b3d:	89 03                	mov    DWORD PTR [ebx],eax
c0001b3f:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b42:	8b 35 10 e4 02 c0    	mov    esi,DWORD PTR ds:0xc002e410
c0001b48:	29 d0                	sub    eax,edx
c0001b4a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b4d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b50:	8b 35 24 e4 02 c0    	mov    esi,DWORD PTR ds:0xc002e424
c0001b56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b5a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b5d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b60:	8b 35 34 e4 02 c0    	mov    esi,DWORD PTR ds:0xc002e434
c0001b66:	89 d8                	mov    eax,ebx
c0001b68:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b6b:	83 c4 08             	add    esp,0x8
c0001b6e:	5b                   	pop    ebx
c0001b6f:	5e                   	pop    esi
c0001b70:	5f                   	pop    edi
c0001b71:	5d                   	pop    ebp
c0001b72:	c2 04 00             	ret    0x4

c0001b75 <dlmalloc_stats>:
c0001b75:	83 ec 30             	sub    esp,0x30
c0001b78:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b7c:	50                   	push   eax
c0001b7d:	e8 24 ff ff ff       	call   c0001aa6 <dlmallinfo>
c0001b82:	83 c4 30             	add    esp,0x30
c0001b85:	c3                   	ret    

c0001b86 <dlmallopt>:
c0001b86:	56                   	push   esi
c0001b87:	b8 c0 e0 02 c0       	mov    eax,0xc002e0c0
c0001b8c:	53                   	push   ebx
c0001b8d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b95:	e8 3b f1 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001b9a:	8d 46 04             	lea    eax,[esi+0x4]
c0001b9d:	83 f8 05             	cmp    eax,0x5
c0001ba0:	77 67                	ja     c0001c09 <dlmallopt+0x83>
c0001ba2:	ff 24 85 c4 93 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6c3c]
c0001ba9:	83 fb 50             	cmp    ebx,0x50
c0001bac:	77 5b                	ja     c0001c09 <dlmallopt+0x83>
c0001bae:	ba 08 00 00 00       	mov    edx,0x8
c0001bb3:	85 db                	test   ebx,ebx
c0001bb5:	74 12                	je     c0001bc9 <dlmallopt+0x43>
c0001bb7:	83 c3 0b             	add    ebx,0xb
c0001bba:	ba 10 00 00 00       	mov    edx,0x10
c0001bbf:	83 fb 0f             	cmp    ebx,0xf
c0001bc2:	76 05                	jbe    c0001bc9 <dlmallopt+0x43>
c0001bc4:	89 da                	mov    edx,ebx
c0001bc6:	83 e2 f8             	and    edx,0xfffffff8
c0001bc9:	a1 c0 e0 02 c0       	mov    eax,ds:0xc002e0c0
c0001bce:	83 e0 03             	and    eax,0x3
c0001bd1:	09 d0                	or     eax,edx
c0001bd3:	a3 c0 e0 02 c0       	mov    ds:0xc002e0c0,eax
c0001bd8:	eb 31                	jmp    c0001c0b <dlmallopt+0x85>
c0001bda:	89 1d 04 e4 02 c0    	mov    DWORD PTR ds:0xc002e404,ebx
c0001be0:	eb 06                	jmp    c0001be8 <dlmallopt+0x62>
c0001be2:	89 1d 08 e4 02 c0    	mov    DWORD PTR ds:0xc002e408,ebx
c0001be8:	be 01 00 00 00       	mov    esi,0x1
c0001bed:	eb 1c                	jmp    c0001c0b <dlmallopt+0x85>
c0001bef:	89 1d 0c e4 02 c0    	mov    DWORD PTR ds:0xc002e40c,ebx
c0001bf5:	eb f1                	jmp    c0001be8 <dlmallopt+0x62>
c0001bf7:	31 f6                	xor    esi,esi
c0001bf9:	85 db                	test   ebx,ebx
c0001bfb:	75 0e                	jne    c0001c0b <dlmallopt+0x85>
c0001bfd:	c7 05 14 e4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e414,0x0
c0001c07:	eb df                	jmp    c0001be8 <dlmallopt+0x62>
c0001c09:	31 f6                	xor    esi,esi
c0001c0b:	89 f0                	mov    eax,esi
c0001c0d:	5b                   	pop    ebx
c0001c0e:	5e                   	pop    esi
c0001c0f:	c3                   	ret    

c0001c10 <disk_status>:
c0001c10:	31 c0                	xor    eax,eax
c0001c12:	c3                   	ret    

c0001c13 <disk_initialize>:
c0001c13:	31 c0                	xor    eax,eax
c0001c15:	c3                   	ret    

c0001c16 <disk_read>:
c0001c16:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c1b:	0f b6 04 85 a0 1b 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce460]
c0001c23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c27:	e9 3a f2 01 00       	jmp    c0020e66 <fatWrapperReadDisk>

c0001c2c <disk_write>:
c0001c2c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c31:	0f b6 04 85 a0 1b 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce460]
c0001c39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c3d:	e9 6b f2 01 00       	jmp    c0020ead <fatWrapperWriteDisk>

c0001c42 <disk_ioctl>:
c0001c42:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c4b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c50:	0f b6 04 85 a0 1b 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce460]
c0001c58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c5c:	e9 93 f2 01 00       	jmp    c0020ef4 <fatWrapperIoctl>

c0001c61 <ld_word>:
c0001c61:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c65:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c68:	c1 e2 08             	shl    edx,0x8
c0001c6b:	09 d0                	or     eax,edx
c0001c6d:	c3                   	ret    

c0001c6e <ld_dword>:
c0001c6e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c72:	89 d1                	mov    ecx,edx
c0001c74:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c78:	c1 e1 08             	shl    ecx,0x8
c0001c7b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c7e:	09 ca                	or     edx,ecx
c0001c80:	c1 e2 08             	shl    edx,0x8
c0001c83:	09 d0                	or     eax,edx
c0001c85:	c3                   	ret    

c0001c86 <ld_qword>:
c0001c86:	57                   	push   edi
c0001c87:	56                   	push   esi
c0001c88:	53                   	push   ebx
c0001c89:	31 db                	xor    ebx,ebx
c0001c8b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c8e:	89 df                	mov    edi,ebx
c0001c90:	89 ce                	mov    esi,ecx
c0001c92:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c96:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c9a:	c1 e6 08             	shl    esi,0x8
c0001c9d:	09 f2                	or     edx,esi
c0001c9f:	89 d6                	mov    esi,edx
c0001ca1:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001ca5:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca9:	c1 e6 08             	shl    esi,0x8
c0001cac:	09 f2                	or     edx,esi
c0001cae:	89 d6                	mov    esi,edx
c0001cb0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cb4:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cbb:	c1 e6 08             	shl    esi,0x8
c0001cbe:	89 fb                	mov    ebx,edi
c0001cc0:	09 f2                	or     edx,esi
c0001cc2:	89 d1                	mov    ecx,edx
c0001cc4:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cc8:	c1 e1 08             	shl    ecx,0x8
c0001ccb:	89 da                	mov    edx,ebx
c0001ccd:	09 c8                	or     eax,ecx
c0001ccf:	5b                   	pop    ebx
c0001cd0:	5e                   	pop    esi
c0001cd1:	5f                   	pop    edi
c0001cd2:	c3                   	ret    

c0001cd3 <st_word>:
c0001cd3:	66 89 10             	mov    WORD PTR [eax],dx
c0001cd6:	c3                   	ret    

c0001cd7 <st_dword>:
c0001cd7:	89 10                	mov    DWORD PTR [eax],edx
c0001cd9:	c3                   	ret    

c0001cda <st_qword>:
c0001cda:	89 10                	mov    DWORD PTR [eax],edx
c0001cdc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001cdf:	c3                   	ret    

c0001ce0 <mem_cpy>:
c0001ce0:	85 c9                	test   ecx,ecx
c0001ce2:	74 10                	je     c0001cf4 <mem_cpy+0x14>
c0001ce4:	57                   	push   edi
c0001ce5:	01 c1                	add    ecx,eax
c0001ce7:	56                   	push   esi
c0001ce8:	89 c7                	mov    edi,eax
c0001cea:	89 d6                	mov    esi,edx
c0001cec:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ced:	39 f9                	cmp    ecx,edi
c0001cef:	75 fb                	jne    c0001cec <mem_cpy+0xc>
c0001cf1:	5e                   	pop    esi
c0001cf2:	5f                   	pop    edi
c0001cf3:	c3                   	ret    
c0001cf4:	c3                   	ret    

c0001cf5 <mem_set>:
c0001cf5:	01 c1                	add    ecx,eax
c0001cf7:	40                   	inc    eax
c0001cf8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cfb:	39 c8                	cmp    eax,ecx
c0001cfd:	75 f8                	jne    c0001cf7 <mem_set+0x2>
c0001cff:	c3                   	ret    

c0001d00 <mem_cmp>:
c0001d00:	57                   	push   edi
c0001d01:	56                   	push   esi
c0001d02:	89 c6                	mov    esi,eax
c0001d04:	53                   	push   ebx
c0001d05:	46                   	inc    esi
c0001d06:	42                   	inc    edx
c0001d07:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d0b:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d0f:	29 fb                	sub    ebx,edi
c0001d11:	89 cf                	mov    edi,ecx
c0001d13:	29 f7                	sub    edi,esi
c0001d15:	01 c7                	add    edi,eax
c0001d17:	74 04                	je     c0001d1d <mem_cmp+0x1d>
c0001d19:	85 db                	test   ebx,ebx
c0001d1b:	74 e8                	je     c0001d05 <mem_cmp+0x5>
c0001d1d:	89 d8                	mov    eax,ebx
c0001d1f:	5b                   	pop    ebx
c0001d20:	5e                   	pop    esi
c0001d21:	5f                   	pop    edi
c0001d22:	c3                   	ret    

c0001d23 <chk_chr>:
c0001d23:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d26:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d29:	74 07                	je     c0001d32 <chk_chr+0xf>
c0001d2b:	39 d1                	cmp    ecx,edx
c0001d2d:	74 03                	je     c0001d32 <chk_chr+0xf>
c0001d2f:	40                   	inc    eax
c0001d30:	eb f1                	jmp    c0001d23 <chk_chr>
c0001d32:	89 c8                	mov    eax,ecx
c0001d34:	c3                   	ret    

c0001d35 <dbc_1st>:
c0001d35:	31 c0                	xor    eax,eax
c0001d37:	c3                   	ret    

c0001d38 <dbc_2nd>:
c0001d38:	31 c0                	xor    eax,eax
c0001d3a:	c3                   	ret    

c0001d3b <tchar2uni>:
c0001d3b:	57                   	push   edi
c0001d3c:	89 c7                	mov    edi,eax
c0001d3e:	56                   	push   esi
c0001d3f:	53                   	push   ebx
c0001d40:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d42:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d44:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d47:	84 c9                	test   cl,cl
c0001d49:	78 0a                	js     c0001d55 <tchar2uni+0x1a>
c0001d4b:	0f b6 d1             	movzx  edx,cl
c0001d4e:	89 f3                	mov    ebx,esi
c0001d50:	e9 9f 00 00 00       	jmp    c0001df4 <tchar2uni+0xb9>
c0001d55:	88 ca                	mov    dl,cl
c0001d57:	83 e2 e0             	and    edx,0xffffffe0
c0001d5a:	80 fa c0             	cmp    dl,0xc0
c0001d5d:	75 0c                	jne    c0001d6b <tchar2uni+0x30>
c0001d5f:	89 ca                	mov    edx,ecx
c0001d61:	b9 01 00 00 00       	mov    ecx,0x1
c0001d66:	83 e2 1f             	and    edx,0x1f
c0001d69:	eb 2e                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d6b:	88 ca                	mov    dl,cl
c0001d6d:	83 e2 f0             	and    edx,0xfffffff0
c0001d70:	80 fa e0             	cmp    dl,0xe0
c0001d73:	75 0c                	jne    c0001d81 <tchar2uni+0x46>
c0001d75:	89 ca                	mov    edx,ecx
c0001d77:	b9 02 00 00 00       	mov    ecx,0x2
c0001d7c:	83 e2 0f             	and    edx,0xf
c0001d7f:	eb 18                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d81:	88 ca                	mov    dl,cl
c0001d83:	83 e2 f8             	and    edx,0xfffffff8
c0001d86:	88 d0                	mov    al,dl
c0001d88:	83 ca ff             	or     edx,0xffffffff
c0001d8b:	3c f0                	cmp    al,0xf0
c0001d8d:	75 6c                	jne    c0001dfb <tchar2uni+0xc0>
c0001d8f:	89 ca                	mov    edx,ecx
c0001d91:	b9 03 00 00 00       	mov    ecx,0x3
c0001d96:	83 e2 07             	and    edx,0x7
c0001d99:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d9d:	46                   	inc    esi
c0001d9e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001da1:	88 c8                	mov    al,cl
c0001da3:	83 e0 c0             	and    eax,0xffffffc0
c0001da6:	3c 80                	cmp    al,0x80
c0001da8:	75 4e                	jne    c0001df8 <tchar2uni+0xbd>
c0001daa:	c1 e2 06             	shl    edx,0x6
c0001dad:	83 e1 3f             	and    ecx,0x3f
c0001db0:	09 ca                	or     edx,ecx
c0001db2:	39 de                	cmp    esi,ebx
c0001db4:	75 e7                	jne    c0001d9d <tchar2uni+0x62>
c0001db6:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001db9:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dbf:	77 37                	ja     c0001df8 <tchar2uni+0xbd>
c0001dc1:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001dc7:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dcd:	76 29                	jbe    c0001df8 <tchar2uni+0xbd>
c0001dcf:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001dd5:	76 1d                	jbe    c0001df4 <tchar2uni+0xb9>
c0001dd7:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ddd:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001de3:	c1 e1 06             	shl    ecx,0x6
c0001de6:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001dec:	09 ca                	or     edx,ecx
c0001dee:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001df4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001df6:	eb 03                	jmp    c0001dfb <tchar2uni+0xc0>
c0001df8:	83 ca ff             	or     edx,0xffffffff
c0001dfb:	5b                   	pop    ebx
c0001dfc:	89 d0                	mov    eax,edx
c0001dfe:	5e                   	pop    esi
c0001dff:	5f                   	pop    edi
c0001e00:	c3                   	ret    

c0001e01 <put_utf>:
c0001e01:	53                   	push   ebx
c0001e02:	83 f8 7f             	cmp    eax,0x7f
c0001e05:	89 c3                	mov    ebx,eax
c0001e07:	b0 00                	mov    al,0x0
c0001e09:	77 11                	ja     c0001e1c <put_utf+0x1b>
c0001e0b:	85 c9                	test   ecx,ecx
c0001e0d:	0f 84 e5 00 00 00    	je     c0001ef8 <put_utf+0xf7>
c0001e13:	88 1a                	mov    BYTE PTR [edx],bl
c0001e15:	b0 01                	mov    al,0x1
c0001e17:	e9 dc 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e1c:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e22:	77 23                	ja     c0001e47 <put_utf+0x46>
c0001e24:	83 f9 01             	cmp    ecx,0x1
c0001e27:	0f 86 cb 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e2d:	89 d8                	mov    eax,ebx
c0001e2f:	83 e3 3f             	and    ebx,0x3f
c0001e32:	c1 e8 06             	shr    eax,0x6
c0001e35:	83 cb 80             	or     ebx,0xffffff80
c0001e38:	83 c8 c0             	or     eax,0xffffffc0
c0001e3b:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e3e:	88 02                	mov    BYTE PTR [edx],al
c0001e40:	b0 02                	mov    al,0x2
c0001e42:	e9 b1 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e47:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e4d:	77 40                	ja     c0001e8f <put_utf+0x8e>
c0001e4f:	83 f9 02             	cmp    ecx,0x2
c0001e52:	0f 86 a0 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e58:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e5e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e64:	0f 86 8e 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e6a:	89 d8                	mov    eax,ebx
c0001e6c:	c1 e8 0c             	shr    eax,0xc
c0001e6f:	83 c8 e0             	or     eax,0xffffffe0
c0001e72:	88 02                	mov    BYTE PTR [edx],al
c0001e74:	89 d8                	mov    eax,ebx
c0001e76:	83 e3 3f             	and    ebx,0x3f
c0001e79:	c1 e8 06             	shr    eax,0x6
c0001e7c:	83 cb 80             	or     ebx,0xffffff80
c0001e7f:	83 e0 3f             	and    eax,0x3f
c0001e82:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e85:	83 c8 80             	or     eax,0xffffff80
c0001e88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e8b:	b0 03                	mov    al,0x3
c0001e8d:	eb 69                	jmp    c0001ef8 <put_utf+0xf7>
c0001e8f:	83 f9 03             	cmp    ecx,0x3
c0001e92:	76 64                	jbe    c0001ef8 <put_utf+0xf7>
c0001e94:	89 d9                	mov    ecx,ebx
c0001e96:	0f b7 c3             	movzx  eax,bx
c0001e99:	66 31 c9             	xor    cx,cx
c0001e9c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001ea2:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ea8:	c1 e9 06             	shr    ecx,0x6
c0001eab:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001eb1:	77 43                	ja     c0001ef6 <put_utf+0xf5>
c0001eb3:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001eb9:	77 3b                	ja     c0001ef6 <put_utf+0xf5>
c0001ebb:	09 cb                	or     ebx,ecx
c0001ebd:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ec3:	89 d8                	mov    eax,ebx
c0001ec5:	c1 e8 12             	shr    eax,0x12
c0001ec8:	83 c8 f0             	or     eax,0xfffffff0
c0001ecb:	88 02                	mov    BYTE PTR [edx],al
c0001ecd:	89 d8                	mov    eax,ebx
c0001ecf:	c1 e8 0c             	shr    eax,0xc
c0001ed2:	83 e0 3f             	and    eax,0x3f
c0001ed5:	83 c8 80             	or     eax,0xffffff80
c0001ed8:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001edb:	89 d8                	mov    eax,ebx
c0001edd:	83 e3 3f             	and    ebx,0x3f
c0001ee0:	c1 e8 06             	shr    eax,0x6
c0001ee3:	83 cb 80             	or     ebx,0xffffff80
c0001ee6:	83 e0 3f             	and    eax,0x3f
c0001ee9:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eec:	83 c8 80             	or     eax,0xffffff80
c0001eef:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ef2:	b0 04                	mov    al,0x4
c0001ef4:	eb 02                	jmp    c0001ef8 <put_utf+0xf7>
c0001ef6:	31 c0                	xor    eax,eax
c0001ef8:	5b                   	pop    ebx
c0001ef9:	c3                   	ret    

c0001efa <clst2sect>:
c0001efa:	89 c1                	mov    ecx,eax
c0001efc:	83 ea 02             	sub    edx,0x2
c0001eff:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f02:	83 e8 02             	sub    eax,0x2
c0001f05:	39 d0                	cmp    eax,edx
c0001f07:	76 0d                	jbe    c0001f16 <clst2sect+0x1c>
c0001f09:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f0d:	f7 e2                	mul    edx
c0001f0f:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f12:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f15:	c3                   	ret    
c0001f16:	31 c0                	xor    eax,eax
c0001f18:	31 d2                	xor    edx,edx
c0001f1a:	c3                   	ret    

c0001f1b <clmt_clust>:
c0001f1b:	57                   	push   edi
c0001f1c:	89 cf                	mov    edi,ecx
c0001f1e:	56                   	push   esi
c0001f1f:	89 d6                	mov    esi,edx
c0001f21:	53                   	push   ebx
c0001f22:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f26:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f29:	89 f2                	mov    edx,esi
c0001f2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f2d:	c1 ef 09             	shr    edi,0x9
c0001f30:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f34:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f37:	89 f9                	mov    ecx,edi
c0001f39:	31 ff                	xor    edi,edi
c0001f3b:	57                   	push   edi
c0001f3c:	56                   	push   esi
c0001f3d:	51                   	push   ecx
c0001f3e:	52                   	push   edx
c0001f3f:	e8 18 4b 02 00       	call   c0026a5c <__udivdi3>
c0001f44:	83 c4 10             	add    esp,0x10
c0001f47:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f49:	85 d2                	test   edx,edx
c0001f4b:	74 10                	je     c0001f5d <clmt_clust+0x42>
c0001f4d:	39 d0                	cmp    eax,edx
c0001f4f:	72 07                	jb     c0001f58 <clmt_clust+0x3d>
c0001f51:	29 d0                	sub    eax,edx
c0001f53:	83 c3 08             	add    ebx,0x8
c0001f56:	eb ef                	jmp    c0001f47 <clmt_clust+0x2c>
c0001f58:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f5b:	89 c2                	mov    edx,eax
c0001f5d:	5b                   	pop    ebx
c0001f5e:	89 d0                	mov    eax,edx
c0001f60:	5e                   	pop    esi
c0001f61:	5f                   	pop    edi
c0001f62:	c3                   	ret    

c0001f63 <pick_lfn>:
c0001f63:	55                   	push   ebp
c0001f64:	57                   	push   edi
c0001f65:	56                   	push   esi
c0001f66:	89 d6                	mov    esi,edx
c0001f68:	53                   	push   ebx
c0001f69:	89 c3                	mov    ebx,eax
c0001f6b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f6e:	e8 ee fc ff ff       	call   c0001c61 <ld_word>
c0001f73:	66 85 c0             	test   ax,ax
c0001f76:	74 04                	je     c0001f7c <pick_lfn+0x19>
c0001f78:	31 c0                	xor    eax,eax
c0001f7a:	eb 5c                	jmp    c0001fd8 <pick_lfn+0x75>
c0001f7c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f7f:	bd 01 00 00 00       	mov    ebp,0x1
c0001f84:	83 e1 bf             	and    ecx,0xffffffbf
c0001f87:	31 ff                	xor    edi,edi
c0001f89:	49                   	dec    ecx
c0001f8a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f8d:	0f b6 87 e0 94 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6b20]
c0001f94:	01 f0                	add    eax,esi
c0001f96:	e8 c6 fc ff ff       	call   c0001c61 <ld_word>
c0001f9b:	66 85 ed             	test   bp,bp
c0001f9e:	74 11                	je     c0001fb1 <pick_lfn+0x4e>
c0001fa0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fa6:	77 d0                	ja     c0001f78 <pick_lfn+0x15>
c0001fa8:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fac:	89 c5                	mov    ebp,eax
c0001fae:	41                   	inc    ecx
c0001faf:	eb 04                	jmp    c0001fb5 <pick_lfn+0x52>
c0001fb1:	66 40                	inc    ax
c0001fb3:	75 c3                	jne    c0001f78 <pick_lfn+0x15>
c0001fb5:	47                   	inc    edi
c0001fb6:	83 ff 0d             	cmp    edi,0xd
c0001fb9:	75 d2                	jne    c0001f8d <pick_lfn+0x2a>
c0001fbb:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fbe:	74 13                	je     c0001fd3 <pick_lfn+0x70>
c0001fc0:	66 85 ed             	test   bp,bp
c0001fc3:	74 0e                	je     c0001fd3 <pick_lfn+0x70>
c0001fc5:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fcb:	77 ab                	ja     c0001f78 <pick_lfn+0x15>
c0001fcd:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fd3:	b8 01 00 00 00       	mov    eax,0x1
c0001fd8:	5b                   	pop    ebx
c0001fd9:	5e                   	pop    esi
c0001fda:	5f                   	pop    edi
c0001fdb:	5d                   	pop    ebp
c0001fdc:	c3                   	ret    

c0001fdd <put_lfn>:
c0001fdd:	55                   	push   ebp
c0001fde:	31 ed                	xor    ebp,ebp
c0001fe0:	57                   	push   edi
c0001fe1:	89 d7                	mov    edi,edx
c0001fe3:	56                   	push   esi
c0001fe4:	31 f6                	xor    esi,esi
c0001fe6:	53                   	push   ebx
c0001fe7:	83 ec 08             	sub    esp,0x8
c0001fea:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fed:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ff1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ff5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ffb:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ffe:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002001:	31 d2                	xor    edx,edx
c0002003:	e8 cb fc ff ff       	call   c0001cd3 <st_word>
c0002008:	0f b6 d9             	movzx  ebx,cl
c000200b:	4b                   	dec    ebx
c000200c:	6b db 0d             	imul   ebx,ebx,0xd
c000200f:	66 83 fe ff          	cmp    si,0xffff
c0002013:	74 08                	je     c000201d <put_lfn+0x40>
c0002015:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002018:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000201c:	43                   	inc    ebx
c000201d:	0f b6 85 e0 94 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6b20]
c0002024:	0f b7 d6             	movzx  edx,si
c0002027:	01 f8                	add    eax,edi
c0002029:	e8 a5 fc ff ff       	call   c0001cd3 <st_word>
c000202e:	66 85 f6             	test   si,si
c0002031:	75 03                	jne    c0002036 <put_lfn+0x59>
c0002033:	83 ce ff             	or     esi,0xffffffff
c0002036:	45                   	inc    ebp
c0002037:	83 fd 0d             	cmp    ebp,0xd
c000203a:	75 d3                	jne    c000200f <put_lfn+0x32>
c000203c:	66 46                	inc    si
c000203e:	74 0a                	je     c000204a <put_lfn+0x6d>
c0002040:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002043:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002048:	75 09                	jne    c0002053 <put_lfn+0x76>
c000204a:	88 c8                	mov    al,cl
c000204c:	83 c8 40             	or     eax,0x40
c000204f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002053:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002057:	88 07                	mov    BYTE PTR [edi],al
c0002059:	83 c4 08             	add    esp,0x8
c000205c:	5b                   	pop    ebx
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <gen_numname>:
c0002061:	57                   	push   edi
c0002062:	89 cf                	mov    edi,ecx
c0002064:	56                   	push   esi
c0002065:	b9 0b 00 00 00       	mov    ecx,0xb
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 10             	sub    esp,0x10
c0002070:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002074:	e8 67 fc ff ff       	call   c0001ce0 <mem_cpy>
c0002079:	83 fb 05             	cmp    ebx,0x5
c000207c:	76 2d                	jbe    c00020ab <gen_numname+0x4a>
c000207e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002081:	66 85 c0             	test   ax,ax
c0002084:	74 25                	je     c00020ab <gen_numname+0x4a>
c0002086:	83 c7 02             	add    edi,0x2
c0002089:	ba 10 00 00 00       	mov    edx,0x10
c000208e:	01 db                	add    ebx,ebx
c0002090:	89 c1                	mov    ecx,eax
c0002092:	66 d1 e8             	shr    ax,1
c0002095:	83 e1 01             	and    ecx,0x1
c0002098:	01 cb                	add    ebx,ecx
c000209a:	0f ba e3 10          	bt     ebx,0x10
c000209e:	73 06                	jae    c00020a6 <gen_numname+0x45>
c00020a0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020a6:	4a                   	dec    edx
c00020a7:	75 e5                	jne    c000208e <gen_numname+0x2d>
c00020a9:	eb d3                	jmp    c000207e <gen_numname+0x1d>
c00020ab:	b8 07 00 00 00       	mov    eax,0x7
c00020b0:	88 d9                	mov    cl,bl
c00020b2:	83 e1 0f             	and    ecx,0xf
c00020b5:	8d 51 30             	lea    edx,[ecx+0x30]
c00020b8:	80 fa 39             	cmp    dl,0x39
c00020bb:	76 03                	jbe    c00020c0 <gen_numname+0x5f>
c00020bd:	8d 51 37             	lea    edx,[ecx+0x37]
c00020c0:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020c3:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020c7:	89 da                	mov    edx,ebx
c00020c9:	c1 ea 04             	shr    edx,0x4
c00020cc:	83 fb 0f             	cmp    ebx,0xf
c00020cf:	76 06                	jbe    c00020d7 <gen_numname+0x76>
c00020d1:	89 c8                	mov    eax,ecx
c00020d3:	89 d3                	mov    ebx,edx
c00020d5:	eb d9                	jmp    c00020b0 <gen_numname+0x4f>
c00020d7:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020dc:	31 d2                	xor    edx,edx
c00020de:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020e1:	8d 04 16             	lea    eax,[esi+edx*1]
c00020e4:	39 ca                	cmp    edx,ecx
c00020e6:	73 18                	jae    c0002100 <gen_numname+0x9f>
c00020e8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020eb:	3c 20                	cmp    al,0x20
c00020ed:	74 11                	je     c0002100 <gen_numname+0x9f>
c00020ef:	e8 41 fc ff ff       	call   c0001d35 <dbc_1st>
c00020f4:	85 c0                	test   eax,eax
c00020f6:	74 05                	je     c00020fd <gen_numname+0x9c>
c00020f8:	39 d3                	cmp    ebx,edx
c00020fa:	74 04                	je     c0002100 <gen_numname+0x9f>
c00020fc:	42                   	inc    edx
c00020fd:	42                   	inc    edx
c00020fe:	eb e1                	jmp    c00020e1 <gen_numname+0x80>
c0002100:	b0 20                	mov    al,0x20
c0002102:	83 f9 07             	cmp    ecx,0x7
c0002105:	77 05                	ja     c000210c <gen_numname+0xab>
c0002107:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000210b:	41                   	inc    ecx
c000210c:	42                   	inc    edx
c000210d:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002111:	83 fa 07             	cmp    edx,0x7
c0002114:	76 ea                	jbe    c0002100 <gen_numname+0x9f>
c0002116:	83 c4 10             	add    esp,0x10
c0002119:	5b                   	pop    ebx
c000211a:	5e                   	pop    esi
c000211b:	5f                   	pop    edi
c000211c:	c3                   	ret    

c000211d <sum_sfn>:
c000211d:	31 c9                	xor    ecx,ecx
c000211f:	31 d2                	xor    edx,edx
c0002121:	d0 ca                	ror    dl,1
c0002123:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002126:	41                   	inc    ecx
c0002127:	83 f9 0b             	cmp    ecx,0xb
c000212a:	75 f5                	jne    c0002121 <sum_sfn+0x4>
c000212c:	88 d0                	mov    al,dl
c000212e:	c3                   	ret    

c000212f <xdir_sum>:
c000212f:	56                   	push   esi
c0002130:	31 c9                	xor    ecx,ecx
c0002132:	53                   	push   ebx
c0002133:	31 d2                	xor    edx,edx
c0002135:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002139:	43                   	inc    ebx
c000213a:	c1 e3 05             	shl    ebx,0x5
c000213d:	83 fa 02             	cmp    edx,0x2
c0002140:	74 0b                	je     c000214d <xdir_sum+0x1e>
c0002142:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002146:	66 d1 c9             	ror    cx,1
c0002149:	01 f1                	add    ecx,esi
c000214b:	eb 05                	jmp    c0002152 <xdir_sum+0x23>
c000214d:	ba 03 00 00 00       	mov    edx,0x3
c0002152:	42                   	inc    edx
c0002153:	39 d3                	cmp    ebx,edx
c0002155:	77 e6                	ja     c000213d <xdir_sum+0xe>
c0002157:	89 c8                	mov    eax,ecx
c0002159:	5b                   	pop    ebx
c000215a:	5e                   	pop    esi
c000215b:	c3                   	ret    

c000215c <xsum32>:
c000215c:	d1 ca                	ror    edx,1
c000215e:	0f b6 c0             	movzx  eax,al
c0002161:	01 d0                	add    eax,edx
c0002163:	c3                   	ret    

c0002164 <get_xfileinfo>:
c0002164:	55                   	push   ebp
c0002165:	31 c9                	xor    ecx,ecx
c0002167:	57                   	push   edi
c0002168:	bd 40 00 00 00       	mov    ebp,0x40
c000216d:	56                   	push   esi
c000216e:	31 ff                	xor    edi,edi
c0002170:	53                   	push   ebx
c0002171:	89 c6                	mov    esi,eax
c0002173:	83 ec 0c             	sub    esp,0xc
c0002176:	89 d3                	mov    ebx,edx
c0002178:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000217f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002183:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002186:	76 6d                	jbe    c00021f5 <get_xfileinfo+0x91>
c0002188:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000218e:	76 0b                	jbe    c000219b <get_xfileinfo+0x37>
c0002190:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002194:	bf 01 00 00 00       	mov    edi,0x1
c0002199:	eb 63                	jmp    c00021fe <get_xfileinfo+0x9a>
c000219b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021a1:	75 03                	jne    c00021a6 <get_xfileinfo+0x42>
c00021a3:	83 c5 02             	add    ebp,0x2
c00021a6:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021a9:	83 c5 02             	add    ebp,0x2
c00021ac:	e8 b0 fa ff ff       	call   c0001c61 <ld_word>
c00021b1:	ff 04 24             	inc    DWORD PTR [esp]
c00021b4:	66 85 c9             	test   cx,cx
c00021b7:	75 0d                	jne    c00021c6 <get_xfileinfo+0x62>
c00021b9:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021bf:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021c4:	76 2b                	jbe    c00021f1 <get_xfileinfo+0x8d>
c00021c6:	c1 e1 10             	shl    ecx,0x10
c00021c9:	ba ff 00 00 00       	mov    edx,0xff
c00021ce:	0f b7 c0             	movzx  eax,ax
c00021d1:	29 fa                	sub    edx,edi
c00021d3:	09 c8                	or     eax,ecx
c00021d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021d9:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021e1:	e8 1b fc ff ff       	call   c0001e01 <put_utf>
c00021e6:	84 c0                	test   al,al
c00021e8:	74 a6                	je     c0002190 <get_xfileinfo+0x2c>
c00021ea:	0f b6 c0             	movzx  eax,al
c00021ed:	01 c7                	add    edi,eax
c00021ef:	31 c0                	xor    eax,eax
c00021f1:	89 c1                	mov    ecx,eax
c00021f3:	eb 8a                	jmp    c000217f <get_xfileinfo+0x1b>
c00021f5:	85 ff                	test   edi,edi
c00021f7:	74 97                	je     c0002190 <get_xfileinfo+0x2c>
c00021f9:	66 85 c9             	test   cx,cx
c00021fc:	75 92                	jne    c0002190 <get_xfileinfo+0x2c>
c00021fe:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0002203:	31 c0                	xor    eax,eax
c0002205:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002209:	31 d2                	xor    edx,edx
c000220b:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c000220e:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002211:	80 e1 10             	and    cl,0x10
c0002214:	75 08                	jne    c000221e <get_xfileinfo+0xba>
c0002216:	8d 46 38             	lea    eax,[esi+0x38]
c0002219:	e8 68 fa ff ff       	call   c0001c86 <ld_qword>
c000221e:	89 03                	mov    DWORD PTR [ebx],eax
c0002220:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002223:	8d 46 0c             	lea    eax,[esi+0xc]
c0002226:	e8 36 fa ff ff       	call   c0001c61 <ld_word>
c000222b:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000222f:	8d 46 0e             	lea    eax,[esi+0xe]
c0002232:	e8 2a fa ff ff       	call   c0001c61 <ld_word>
c0002237:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000223b:	83 c4 0c             	add    esp,0xc
c000223e:	5b                   	pop    ebx
c000223f:	5e                   	pop    esi
c0002240:	5f                   	pop    edi
c0002241:	5d                   	pop    ebp
c0002242:	c3                   	ret    

c0002243 <get_ldnumber>:
c0002243:	8b 10                	mov    edx,DWORD PTR [eax]
c0002245:	85 d2                	test   edx,edx
c0002247:	74 14                	je     c000225d <get_ldnumber+0x1a>
c0002249:	56                   	push   esi
c000224a:	53                   	push   ebx
c000224b:	89 d3                	mov    ebx,edx
c000224d:	43                   	inc    ebx
c000224e:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002251:	80 f9 1f             	cmp    cl,0x1f
c0002254:	76 0d                	jbe    c0002263 <get_ldnumber+0x20>
c0002256:	80 f9 3a             	cmp    cl,0x3a
c0002259:	75 f2                	jne    c000224d <get_ldnumber+0xa>
c000225b:	eb 0a                	jmp    c0002267 <get_ldnumber+0x24>
c000225d:	83 c9 ff             	or     ecx,0xffffffff
c0002260:	89 c8                	mov    eax,ecx
c0002262:	c3                   	ret    
c0002263:	31 c9                	xor    ecx,ecx
c0002265:	eb 24                	jmp    c000228b <get_ldnumber+0x48>
c0002267:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000226d:	80 f9 09             	cmp    cl,0x9
c0002270:	77 16                	ja     c0002288 <get_ldnumber+0x45>
c0002272:	83 c2 02             	add    edx,0x2
c0002275:	83 c9 ff             	or     ecx,0xffffffff
c0002278:	39 d3                	cmp    ebx,edx
c000227a:	75 0f                	jne    c000228b <get_ldnumber+0x48>
c000227c:	89 f2                	mov    edx,esi
c000227e:	89 18                	mov    DWORD PTR [eax],ebx
c0002280:	0f be ca             	movsx  ecx,dl
c0002283:	83 e9 30             	sub    ecx,0x30
c0002286:	eb 03                	jmp    c000228b <get_ldnumber+0x48>
c0002288:	83 c9 ff             	or     ecx,0xffffffff
c000228b:	89 c8                	mov    eax,ecx
c000228d:	5b                   	pop    ebx
c000228e:	5e                   	pop    esi
c000228f:	c3                   	ret    

c0002290 <crc32>:
c0002290:	56                   	push   esi
c0002291:	89 d6                	mov    esi,edx
c0002293:	53                   	push   ebx
c0002294:	b2 01                	mov    dl,0x1
c0002296:	bb 08 00 00 00       	mov    ebx,0x8
c000229b:	89 f1                	mov    ecx,esi
c000229d:	84 d1                	test   cl,dl
c000229f:	0f 95 c1             	setne  cl
c00022a2:	0f b6 c9             	movzx  ecx,cl
c00022a5:	31 c1                	xor    ecx,eax
c00022a7:	89 c8                	mov    eax,ecx
c00022a9:	d1 e8                	shr    eax,1
c00022ab:	80 e1 01             	and    cl,0x1
c00022ae:	74 05                	je     c00022b5 <crc32+0x25>
c00022b0:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022b5:	d1 e2                	shl    edx,1
c00022b7:	4b                   	dec    ebx
c00022b8:	75 e1                	jne    c000229b <crc32+0xb>
c00022ba:	5b                   	pop    ebx
c00022bb:	5e                   	pop    esi
c00022bc:	c3                   	ret    

c00022bd <test_gpt_header>:
c00022bd:	55                   	push   ebp
c00022be:	b9 10 00 00 00       	mov    ecx,0x10
c00022c3:	57                   	push   edi
c00022c4:	ba e0 93 02 c0       	mov    edx,0xc00293e0
c00022c9:	56                   	push   esi
c00022ca:	31 ff                	xor    edi,edi
c00022cc:	53                   	push   ebx
c00022cd:	89 c3                	mov    ebx,eax
c00022cf:	e8 2c fa ff ff       	call   c0001d00 <mem_cmp>
c00022d4:	85 c0                	test   eax,eax
c00022d6:	75 55                	jne    c000232d <test_gpt_header+0x70>
c00022d8:	89 c7                	mov    edi,eax
c00022da:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022df:	83 ce ff             	or     esi,0xffffffff
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	83 fd 03             	cmp    ebp,0x3
c00022e7:	76 05                	jbe    c00022ee <test_gpt_header+0x31>
c00022e9:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022ee:	89 f0                	mov    eax,esi
c00022f0:	45                   	inc    ebp
c00022f1:	e8 9a ff ff ff       	call   c0002290 <crc32>
c00022f6:	83 fd 4c             	cmp    ebp,0x4c
c00022f9:	89 c6                	mov    esi,eax
c00022fb:	75 e5                	jne    c00022e2 <test_gpt_header+0x25>
c00022fd:	8d 43 10             	lea    eax,[ebx+0x10]
c0002300:	f7 d6                	not    esi
c0002302:	e8 67 f9 ff ff       	call   c0001c6e <ld_dword>
c0002307:	39 c6                	cmp    esi,eax
c0002309:	75 22                	jne    c000232d <test_gpt_header+0x70>
c000230b:	8d 43 54             	lea    eax,[ebx+0x54]
c000230e:	e8 5b f9 ff ff       	call   c0001c6e <ld_dword>
c0002313:	83 c0 80             	add    eax,0xffffff80
c0002316:	75 15                	jne    c000232d <test_gpt_header+0x70>
c0002318:	8d 43 50             	lea    eax,[ebx+0x50]
c000231b:	e8 4e f9 ff ff       	call   c0001c6e <ld_dword>
c0002320:	3d 80 00 00 00       	cmp    eax,0x80
c0002325:	0f 96 c0             	setbe  al
c0002328:	0f b6 c0             	movzx  eax,al
c000232b:	89 c7                	mov    edi,eax
c000232d:	5b                   	pop    ebx
c000232e:	89 f8                	mov    eax,edi
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    

c0002334 <make_rand>:
c0002334:	56                   	push   esi
c0002335:	85 c0                	test   eax,eax
c0002337:	53                   	push   ebx
c0002338:	75 05                	jne    c000233f <make_rand+0xb>
c000233a:	b8 01 00 00 00       	mov    eax,0x1
c000233f:	01 d1                	add    ecx,edx
c0002341:	bb 08 00 00 00       	mov    ebx,0x8
c0002346:	89 c6                	mov    esi,eax
c0002348:	d1 e8                	shr    eax,1
c000234a:	83 e6 01             	and    esi,0x1
c000234d:	85 f6                	test   esi,esi
c000234f:	74 05                	je     c0002356 <make_rand+0x22>
c0002351:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002356:	4b                   	dec    ebx
c0002357:	75 ed                	jne    c0002346 <make_rand+0x12>
c0002359:	42                   	inc    edx
c000235a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000235d:	39 ca                	cmp    edx,ecx
c000235f:	75 e0                	jne    c0002341 <make_rand+0xd>
c0002361:	5b                   	pop    ebx
c0002362:	5e                   	pop    esi
c0002363:	c3                   	ret    

c0002364 <validate>:
c0002364:	56                   	push   esi
c0002365:	53                   	push   ebx
c0002366:	89 d6                	mov    esi,edx
c0002368:	51                   	push   ecx
c0002369:	85 c0                	test   eax,eax
c000236b:	75 09                	jne    c0002376 <validate+0x12>
c000236d:	b8 09 00 00 00       	mov    eax,0x9
c0002372:	31 c9                	xor    ecx,ecx
c0002374:	eb 2f                	jmp    c00023a5 <validate+0x41>
c0002376:	89 c3                	mov    ebx,eax
c0002378:	8b 00                	mov    eax,DWORD PTR [eax]
c000237a:	85 c0                	test   eax,eax
c000237c:	74 ef                	je     c000236d <validate+0x9>
c000237e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002381:	74 ea                	je     c000236d <validate+0x9>
c0002383:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002387:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000238b:	75 e0                	jne    c000236d <validate+0x9>
c000238d:	83 ec 0c             	sub    esp,0xc
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 76 f8 ff ff       	call   c0001c10 <disk_status>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	a8 01                	test   al,0x1
c000239f:	75 cc                	jne    c000236d <validate+0x9>
c00023a1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023a3:	31 c0                	xor    eax,eax
c00023a5:	89 0e                	mov    DWORD PTR [esi],ecx
c00023a7:	5a                   	pop    edx
c00023a8:	5b                   	pop    ebx
c00023a9:	5e                   	pop    esi
c00023aa:	c3                   	ret    

c00023ab <sync_window>:
c00023ab:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023af:	0f 84 85 00 00 00    	je     c000243a <sync_window+0x8f>
c00023b5:	55                   	push   ebp
c00023b6:	8d 68 54             	lea    ebp,[eax+0x54]
c00023b9:	57                   	push   edi
c00023ba:	56                   	push   esi
c00023bb:	53                   	push   ebx
c00023bc:	89 c3                	mov    ebx,eax
c00023be:	83 ec 28             	sub    esp,0x28
c00023c1:	6a 01                	push   0x1
c00023c3:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023c6:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023c9:	55                   	push   ebp
c00023ca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023ce:	50                   	push   eax
c00023cf:	e8 58 f8 ff ff       	call   c0001c2c <disk_write>
c00023d4:	83 c4 20             	add    esp,0x20
c00023d7:	ba 01 00 00 00       	mov    edx,0x1
c00023dc:	85 c0                	test   eax,eax
c00023de:	75 50                	jne    c0002430 <sync_window+0x85>
c00023e0:	31 ff                	xor    edi,edi
c00023e2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023e5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023e9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023ed:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023f0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023f3:	89 c6                	mov    esi,eax
c00023f5:	89 d7                	mov    edi,edx
c00023f7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023fa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023fe:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002401:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002405:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002409:	73 23                	jae    c000242e <sync_window+0x83>
c000240b:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000240f:	75 1d                	jne    c000242e <sync_window+0x83>
c0002411:	83 ec 0c             	sub    esp,0xc
c0002414:	6a 01                	push   0x1
c0002416:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000241a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000241e:	52                   	push   edx
c000241f:	50                   	push   eax
c0002420:	55                   	push   ebp
c0002421:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002425:	50                   	push   eax
c0002426:	e8 01 f8 ff ff       	call   c0001c2c <disk_write>
c000242b:	83 c4 20             	add    esp,0x20
c000242e:	31 d2                	xor    edx,edx
c0002430:	83 c4 1c             	add    esp,0x1c
c0002433:	89 d0                	mov    eax,edx
c0002435:	5b                   	pop    ebx
c0002436:	5e                   	pop    esi
c0002437:	5f                   	pop    edi
c0002438:	5d                   	pop    ebp
c0002439:	c3                   	ret    
c000243a:	31 d2                	xor    edx,edx
c000243c:	89 d0                	mov    eax,edx
c000243e:	c3                   	ret    

c000243f <move_window>:
c000243f:	56                   	push   esi
c0002440:	53                   	push   ebx
c0002441:	89 c3                	mov    ebx,eax
c0002443:	83 ec 14             	sub    esp,0x14
c0002446:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002449:	75 07                	jne    c0002452 <move_window+0x13>
c000244b:	31 f6                	xor    esi,esi
c000244d:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002450:	74 59                	je     c00024ab <move_window+0x6c>
c0002452:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002456:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000245a:	89 d8                	mov    eax,ebx
c000245c:	e8 4a ff ff ff       	call   c00023ab <sync_window>
c0002461:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002465:	89 c6                	mov    esi,eax
c0002467:	85 c0                	test   eax,eax
c0002469:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000246d:	75 3c                	jne    c00024ab <move_window+0x6c>
c000246f:	83 ec 0c             	sub    esp,0xc
c0002472:	8d 43 54             	lea    eax,[ebx+0x54]
c0002475:	6a 01                	push   0x1
c0002477:	51                   	push   ecx
c0002478:	52                   	push   edx
c0002479:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000247d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002481:	50                   	push   eax
c0002482:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002486:	50                   	push   eax
c0002487:	e8 8a f7 ff ff       	call   c0001c16 <disk_read>
c000248c:	83 c4 20             	add    esp,0x20
c000248f:	85 c0                	test   eax,eax
c0002491:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002495:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002499:	74 0a                	je     c00024a5 <move_window+0x66>
c000249b:	83 ca ff             	or     edx,0xffffffff
c000249e:	be 01 00 00 00       	mov    esi,0x1
c00024a3:	89 d1                	mov    ecx,edx
c00024a5:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024a8:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024ab:	89 f0                	mov    eax,esi
c00024ad:	83 c4 14             	add    esp,0x14
c00024b0:	5b                   	pop    ebx
c00024b1:	5e                   	pop    esi
c00024b2:	c3                   	ret    

c00024b3 <check_fs>:
c00024b3:	53                   	push   ebx
c00024b4:	89 c3                	mov    ebx,eax
c00024b6:	83 ec 08             	sub    esp,0x8
c00024b9:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024bd:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024c4:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024cb:	e8 6f ff ff ff       	call   c000243f <move_window>
c00024d0:	ba 04 00 00 00       	mov    edx,0x4
c00024d5:	85 c0                	test   eax,eax
c00024d7:	0f 85 89 00 00 00    	jne    c0002566 <check_fs+0xb3>
c00024dd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024e3:	e8 79 f7 ff ff       	call   c0001c61 <ld_word>
c00024e8:	ba 03 00 00 00       	mov    edx,0x3
c00024ed:	66 3d 55 aa          	cmp    ax,0xaa55
c00024f1:	75 73                	jne    c0002566 <check_fs+0xb3>
c00024f3:	ba 00 95 02 c0       	mov    edx,0xc0029500
c00024f8:	8d 43 54             	lea    eax,[ebx+0x54]
c00024fb:	b9 0b 00 00 00       	mov    ecx,0xb
c0002500:	e8 fb f7 ff ff       	call   c0001d00 <mem_cmp>
c0002505:	ba 01 00 00 00       	mov    edx,0x1
c000250a:	85 c0                	test   eax,eax
c000250c:	74 58                	je     c0002566 <check_fs+0xb3>
c000250e:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002511:	8d 50 18             	lea    edx,[eax+0x18]
c0002514:	80 fa 01             	cmp    dl,0x1
c0002517:	76 09                	jbe    c0002522 <check_fs+0x6f>
c0002519:	ba 02 00 00 00       	mov    edx,0x2
c000251e:	3c eb                	cmp    al,0xeb
c0002520:	75 44                	jne    c0002566 <check_fs+0xb3>
c0002522:	ba c8 c8 02 c0       	mov    edx,0xc002c8c8
c0002527:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000252d:	b9 03 00 00 00       	mov    ecx,0x3
c0002532:	e8 c9 f7 ff ff       	call   c0001d00 <mem_cmp>
c0002537:	31 d2                	xor    edx,edx
c0002539:	85 c0                	test   eax,eax
c000253b:	74 29                	je     c0002566 <check_fs+0xb3>
c000253d:	ba 0c 95 02 c0       	mov    edx,0xc002950c
c0002542:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002548:	b9 05 00 00 00       	mov    ecx,0x5
c000254d:	e8 ae f7 ff ff       	call   c0001d00 <mem_cmp>
c0002552:	31 d2                	xor    edx,edx
c0002554:	85 c0                	test   eax,eax
c0002556:	74 0e                	je     c0002566 <check_fs+0xb3>
c0002558:	31 d2                	xor    edx,edx
c000255a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002561:	0f 95 c2             	setne  dl
c0002564:	01 d2                	add    edx,edx
c0002566:	89 d0                	mov    eax,edx
c0002568:	83 c4 08             	add    esp,0x8
c000256b:	5b                   	pop    ebx
c000256c:	c3                   	ret    

c000256d <find_volume>:
c000256d:	55                   	push   ebp
c000256e:	31 c9                	xor    ecx,ecx
c0002570:	57                   	push   edi
c0002571:	56                   	push   esi
c0002572:	89 d6                	mov    esi,edx
c0002574:	53                   	push   ebx
c0002575:	31 d2                	xor    edx,edx
c0002577:	83 ec 3c             	sub    esp,0x3c
c000257a:	89 c3                	mov    ebx,eax
c000257c:	e8 32 ff ff ff       	call   c00024b3 <check_fs>
c0002581:	83 f8 02             	cmp    eax,0x2
c0002584:	74 0e                	je     c0002594 <find_volume+0x27>
c0002586:	0f 87 5d 01 00 00    	ja     c00026e9 <find_volume+0x17c>
c000258c:	85 f6                	test   esi,esi
c000258e:	0f 84 55 01 00 00    	je     c00026e9 <find_volume+0x17c>
c0002594:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000259b:	0f 85 dd 00 00 00    	jne    c000267e <find_volume+0x111>
c00025a1:	31 c9                	xor    ecx,ecx
c00025a3:	ba 01 00 00 00       	mov    edx,0x1
c00025a8:	89 d8                	mov    eax,ebx
c00025aa:	e8 90 fe ff ff       	call   c000243f <move_window>
c00025af:	85 c0                	test   eax,eax
c00025b1:	74 0a                	je     c00025bd <find_volume+0x50>
c00025b3:	b8 04 00 00 00       	mov    eax,0x4
c00025b8:	e9 2c 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025bd:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025c0:	89 e8                	mov    eax,ebp
c00025c2:	e8 f6 fc ff ff       	call   c00022bd <test_gpt_header>
c00025c7:	85 c0                	test   eax,eax
c00025c9:	75 0a                	jne    c00025d5 <find_volume+0x68>
c00025cb:	b8 03 00 00 00       	mov    eax,0x3
c00025d0:	e9 14 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025d5:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025db:	e8 8e f6 ff ff       	call   c0001c6e <ld_dword>
c00025e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025e4:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025ea:	e8 97 f6 ff ff       	call   c0001c86 <ld_qword>
c00025ef:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025fb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002607:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000260b:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000260f:	74 ba                	je     c00025cb <find_volume+0x5e>
c0002611:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002615:	31 c9                	xor    ecx,ecx
c0002617:	c1 e7 07             	shl    edi,0x7
c000261a:	89 d8                	mov    eax,ebx
c000261c:	89 fa                	mov    edx,edi
c000261e:	c1 ea 09             	shr    edx,0x9
c0002621:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002625:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002629:	e8 11 fe ff ff       	call   c000243f <move_window>
c000262e:	85 c0                	test   eax,eax
c0002630:	75 81                	jne    c00025b3 <find_volume+0x46>
c0002632:	81 e7 80 01 00 00    	and    edi,0x180
c0002638:	b9 10 00 00 00       	mov    ecx,0x10
c000263d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002641:	ba f0 94 02 c0       	mov    edx,0xc00294f0
c0002646:	e8 b5 f6 ff ff       	call   c0001d00 <mem_cmp>
c000264b:	85 c0                	test   eax,eax
c000264d:	75 29                	jne    c0002678 <find_volume+0x10b>
c000264f:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002653:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002657:	e8 2a f6 ff ff       	call   c0001c86 <ld_qword>
c000265c:	89 d1                	mov    ecx,edx
c000265e:	89 c2                	mov    edx,eax
c0002660:	89 d8                	mov    eax,ebx
c0002662:	e8 4c fe ff ff       	call   c00024b3 <check_fs>
c0002667:	85 f6                	test   esi,esi
c0002669:	75 07                	jne    c0002672 <find_volume+0x105>
c000266b:	83 f8 01             	cmp    eax,0x1
c000266e:	77 08                	ja     c0002678 <find_volume+0x10b>
c0002670:	eb 77                	jmp    c00026e9 <find_volume+0x17c>
c0002672:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002676:	74 71                	je     c00026e9 <find_volume+0x17c>
c0002678:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000267c:	eb 89                	jmp    c0002607 <find_volume+0x9a>
c000267e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002682:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002688:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000268e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002692:	89 cd                	mov    ebp,ecx
c0002694:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002698:	89 f8                	mov    eax,edi
c000269a:	83 c7 10             	add    edi,0x10
c000269d:	e8 cc f5 ff ff       	call   c0001c6e <ld_dword>
c00026a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026a6:	89 01                	mov    DWORD PTR [ecx],eax
c00026a8:	83 c1 04             	add    ecx,0x4
c00026ab:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026af:	75 e3                	jne    c0002694 <find_volume+0x127>
c00026b1:	31 ff                	xor    edi,edi
c00026b3:	85 f6                	test   esi,esi
c00026b5:	74 03                	je     c00026ba <find_volume+0x14d>
c00026b7:	8d 7e ff             	lea    edi,[esi-0x1]
c00026ba:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026be:	85 d2                	test   edx,edx
c00026c0:	74 14                	je     c00026d6 <find_volume+0x169>
c00026c2:	31 c9                	xor    ecx,ecx
c00026c4:	89 d8                	mov    eax,ebx
c00026c6:	e8 e8 fd ff ff       	call   c00024b3 <check_fs>
c00026cb:	83 f8 01             	cmp    eax,0x1
c00026ce:	76 19                	jbe    c00026e9 <find_volume+0x17c>
c00026d0:	85 f6                	test   esi,esi
c00026d2:	74 0f                	je     c00026e3 <find_volume+0x176>
c00026d4:	eb 13                	jmp    c00026e9 <find_volume+0x17c>
c00026d6:	85 f6                	test   esi,esi
c00026d8:	0f 85 ed fe ff ff    	jne    c00025cb <find_volume+0x5e>
c00026de:	b8 03 00 00 00       	mov    eax,0x3
c00026e3:	47                   	inc    edi
c00026e4:	83 ff 03             	cmp    edi,0x3
c00026e7:	76 d1                	jbe    c00026ba <find_volume+0x14d>
c00026e9:	83 c4 3c             	add    esp,0x3c
c00026ec:	5b                   	pop    ebx
c00026ed:	5e                   	pop    esi
c00026ee:	5f                   	pop    edi
c00026ef:	5d                   	pop    ebp
c00026f0:	c3                   	ret    

c00026f1 <mount_volume>:
c00026f1:	55                   	push   ebp
c00026f2:	57                   	push   edi
c00026f3:	89 cf                	mov    edi,ecx
c00026f5:	56                   	push   esi
c00026f6:	53                   	push   ebx
c00026f7:	bb 0b 00 00 00       	mov    ebx,0xb
c00026fc:	83 ec 3c             	sub    esp,0x3c
c00026ff:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002705:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002709:	e8 35 fb ff ff       	call   c0002243 <get_ldnumber>
c000270e:	85 c0                	test   eax,eax
c0002710:	0f 88 3a 05 00 00    	js     c0002c50 <mount_volume+0x55f>
c0002716:	8b 2c 85 60 e4 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1ba0]
c000271d:	89 c6                	mov    esi,eax
c000271f:	bb 0c 00 00 00       	mov    ebx,0xc
c0002724:	85 ed                	test   ebp,ebp
c0002726:	0f 84 24 05 00 00    	je     c0002c50 <mount_volume+0x55f>
c000272c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002730:	83 e7 fe             	and    edi,0xfffffffe
c0002733:	89 2a                	mov    DWORD PTR [edx],ebp
c0002735:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002739:	74 32                	je     c000276d <mount_volume+0x7c>
c000273b:	83 ec 0c             	sub    esp,0xc
c000273e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002742:	50                   	push   eax
c0002743:	e8 c8 f4 ff ff       	call   c0001c10 <disk_status>
c0002748:	83 c4 10             	add    esp,0x10
c000274b:	a8 01                	test   al,0x1
c000274d:	75 1e                	jne    c000276d <mount_volume+0x7c>
c000274f:	31 db                	xor    ebx,ebx
c0002751:	89 f9                	mov    ecx,edi
c0002753:	84 c9                	test   cl,cl
c0002755:	0f 84 f5 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c000275b:	a8 04                	test   al,0x4
c000275d:	0f 84 ed 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c0002763:	bb 0a 00 00 00       	mov    ebx,0xa
c0002768:	e9 e3 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c000276d:	83 ec 0c             	sub    esp,0xc
c0002770:	89 f0                	mov    eax,esi
c0002772:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002776:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002779:	0f b6 f0             	movzx  esi,al
c000277c:	bb 03 00 00 00       	mov    ebx,0x3
c0002781:	56                   	push   esi
c0002782:	e8 8c f4 ff ff       	call   c0001c13 <disk_initialize>
c0002787:	83 c4 10             	add    esp,0x10
c000278a:	a8 01                	test   al,0x1
c000278c:	0f 85 be 04 00 00    	jne    c0002c50 <mount_volume+0x55f>
c0002792:	89 f9                	mov    ecx,edi
c0002794:	84 c9                	test   cl,cl
c0002796:	74 04                	je     c000279c <mount_volume+0xab>
c0002798:	a8 04                	test   al,0x4
c000279a:	75 c7                	jne    c0002763 <mount_volume+0x72>
c000279c:	31 d2                	xor    edx,edx
c000279e:	89 e8                	mov    eax,ebp
c00027a0:	e8 c8 fd ff ff       	call   c000256d <find_volume>
c00027a5:	83 f8 04             	cmp    eax,0x4
c00027a8:	75 0a                	jne    c00027b4 <mount_volume+0xc3>
c00027aa:	bb 01 00 00 00       	mov    ebx,0x1
c00027af:	e9 9c 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027b4:	83 f8 01             	cmp    eax,0x1
c00027b7:	76 0a                	jbe    c00027c3 <mount_volume+0xd2>
c00027b9:	bb 0d 00 00 00       	mov    ebx,0xd
c00027be:	e9 8d 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027c3:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027c6:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027d1:	75 17                	jne    c00027ea <mount_volume+0xf9>
c00027d3:	b8 0b 00 00 00       	mov    eax,0xb
c00027d8:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027dd:	75 da                	jne    c00027b9 <mount_volume+0xc8>
c00027df:	40                   	inc    eax
c00027e0:	83 f8 40             	cmp    eax,0x40
c00027e3:	75 f3                	jne    c00027d8 <mount_volume+0xe7>
c00027e5:	e9 5a 02 00 00       	jmp    c0002a44 <mount_volume+0x353>
c00027ea:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027ed:	e8 6f f4 ff ff       	call   c0001c61 <ld_word>
c00027f2:	66 3d 00 02          	cmp    ax,0x200
c00027f6:	75 c1                	jne    c00027b9 <mount_volume+0xc8>
c00027f8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027fb:	e8 61 f4 ff ff       	call   c0001c61 <ld_word>
c0002800:	0f b7 c0             	movzx  eax,ax
c0002803:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002807:	85 c0                	test   eax,eax
c0002809:	75 0c                	jne    c0002817 <mount_volume+0x126>
c000280b:	8d 45 78             	lea    eax,[ebp+0x78]
c000280e:	e8 5b f4 ff ff       	call   c0001c6e <ld_dword>
c0002813:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000281b:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000281e:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002821:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002825:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002828:	48                   	dec    eax
c0002829:	3c 01                	cmp    al,0x1
c000282b:	77 8c                	ja     c00027b9 <mount_volume+0xc8>
c000282d:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002831:	89 c3                	mov    ebx,eax
c0002833:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002837:	66 85 c0             	test   ax,ax
c000283a:	0f 84 79 ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002840:	8d 40 ff             	lea    eax,[eax-0x1]
c0002843:	85 d8                	test   eax,ebx
c0002845:	0f 85 6e ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000284b:	8d 45 65             	lea    eax,[ebp+0x65]
c000284e:	e8 0e f4 ff ff       	call   c0001c61 <ld_word>
c0002853:	89 c7                	mov    edi,eax
c0002855:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002859:	a8 0f                	test   al,0xf
c000285b:	0f 85 58 ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002861:	8d 45 67             	lea    eax,[ebp+0x67]
c0002864:	e8 f8 f3 ff ff       	call   c0001c61 <ld_word>
c0002869:	0f b7 f0             	movzx  esi,ax
c000286c:	85 f6                	test   esi,esi
c000286e:	75 0a                	jne    c000287a <mount_volume+0x189>
c0002870:	8d 45 74             	lea    eax,[ebp+0x74]
c0002873:	e8 f6 f3 ff ff       	call   c0001c6e <ld_dword>
c0002878:	89 c6                	mov    esi,eax
c000287a:	8d 45 62             	lea    eax,[ebp+0x62]
c000287d:	e8 df f3 ff ff       	call   c0001c61 <ld_word>
c0002882:	66 85 c0             	test   ax,ax
c0002885:	0f 84 2e ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c000288b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002890:	0f b7 c8             	movzx  ecx,ax
c0002893:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002898:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000289c:	89 fa                	mov    edx,edi
c000289e:	66 c1 ea 04          	shr    dx,0x4
c00028a2:	0f b7 d2             	movzx  edx,dx
c00028a5:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028a9:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028b0:	39 c6                	cmp    esi,eax
c00028b2:	0f 82 01 ff ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028b8:	29 c6                	sub    esi,eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 f0                	mov    eax,esi
c00028be:	f7 f3                	div    ebx
c00028c0:	39 de                	cmp    esi,ebx
c00028c2:	0f 82 f1 fe ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028c8:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028cd:	0f 87 e6 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c00028d3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028d8:	0f 86 63 03 00 00    	jbe    c0002c41 <mount_volume+0x550>
c00028de:	bb 03 00 00 00       	mov    ebx,0x3
c00028e3:	8d 70 02             	lea    esi,[eax+0x2]
c00028e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028ee:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028f1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028f4:	31 d2                	xor    edx,edx
c00028f6:	89 c8                	mov    eax,ecx
c00028f8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028fb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028ff:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002903:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002907:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000290b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000290e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002911:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002915:	31 d2                	xor    edx,edx
c0002917:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000291b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000291f:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002922:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002925:	83 fb 03             	cmp    ebx,0x3
c0002928:	75 2b                	jne    c0002955 <mount_volume+0x264>
c000292a:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000292d:	e8 2f f3 ff ff       	call   c0001c61 <ld_word>
c0002932:	66 09 c7             	or     di,ax
c0002935:	0f 85 7e fe ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000293b:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002941:	c1 e6 02             	shl    esi,0x2
c0002944:	e8 25 f3 ff ff       	call   c0001c6e <ld_dword>
c0002949:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002950:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002953:	eb 30                	jmp    c0002985 <mount_volume+0x294>
c0002955:	66 85 ff             	test   di,di
c0002958:	0f 84 5b fe ff ff    	je     c00027b9 <mount_volume+0xc8>
c000295e:	31 d2                	xor    edx,edx
c0002960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002964:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002968:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000296c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000296f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002972:	83 fb 02             	cmp    ebx,0x2
c0002975:	75 04                	jne    c000297b <mount_volume+0x28a>
c0002977:	01 f6                	add    esi,esi
c0002979:	eb 0a                	jmp    c0002985 <mount_volume+0x294>
c000297b:	8d 04 76             	lea    eax,[esi+esi*2]
c000297e:	83 e6 01             	and    esi,0x1
c0002981:	d1 e8                	shr    eax,1
c0002983:	01 c6                	add    esi,eax
c0002985:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000298b:	c1 ee 09             	shr    esi,0x9
c000298e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002992:	0f 87 21 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002998:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000299f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029a6:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029aa:	83 fb 03             	cmp    ebx,0x3
c00029ad:	75 7a                	jne    c0002a29 <mount_volume+0x338>
c00029af:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029b5:	e8 a7 f2 ff ff       	call   c0001c61 <ld_word>
c00029ba:	66 48                	dec    ax
c00029bc:	75 6b                	jne    c0002a29 <mount_volume+0x338>
c00029be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029c6:	83 c2 01             	add    edx,0x1
c00029c9:	89 e8                	mov    eax,ebp
c00029cb:	83 d1 00             	adc    ecx,0x0
c00029ce:	e8 6c fa ff ff       	call   c000243f <move_window>
c00029d3:	85 c0                	test   eax,eax
c00029d5:	75 52                	jne    c0002a29 <mount_volume+0x338>
c00029d7:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029db:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029e1:	e8 7b f2 ff ff       	call   c0001c61 <ld_word>
c00029e6:	66 3d 55 aa          	cmp    ax,0xaa55
c00029ea:	75 3d                	jne    c0002a29 <mount_volume+0x338>
c00029ec:	8d 45 54             	lea    eax,[ebp+0x54]
c00029ef:	e8 7a f2 ff ff       	call   c0001c6e <ld_dword>
c00029f4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029f9:	75 2e                	jne    c0002a29 <mount_volume+0x338>
c00029fb:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a01:	e8 68 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a06:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a0b:	75 1c                	jne    c0002a29 <mount_volume+0x338>
c0002a0d:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a13:	e8 56 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a18:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a1b:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a21:	e8 48 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a26:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a29:	66 a1 40 e4 02 c0    	mov    ax,ds:0xc002e440
c0002a2f:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a32:	40                   	inc    eax
c0002a33:	31 db                	xor    ebx,ebx
c0002a35:	66 a3 40 e4 02 c0    	mov    ds:0xc002e440,ax
c0002a3b:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a3f:	e9 0c 02 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c0002a44:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a4a:	e8 12 f2 ff ff       	call   c0001c61 <ld_word>
c0002a4f:	66 3d 00 01          	cmp    ax,0x100
c0002a53:	0f 85 60 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a59:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a60:	0f 85 53 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a66:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a6c:	e8 15 f2 ff ff       	call   c0001c86 <ld_qword>
c0002a71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a79:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a7f:	e8 ea f1 ff ff       	call   c0001c6e <ld_dword>
c0002a84:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a87:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a8d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a90:	fe c8                	dec    al
c0002a92:	0f 85 21 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a98:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a9f:	bb 01 00 00 00       	mov    ebx,0x1
c0002aa4:	d3 e3                	shl    ebx,cl
c0002aa6:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002aaa:	66 85 db             	test   bx,bx
c0002aad:	0f 84 06 fd ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002ab3:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ab9:	e8 b0 f1 ff ff       	call   c0001c6e <ld_dword>
c0002abe:	89 c6                	mov    esi,eax
c0002ac0:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002ac5:	0f 87 ee fc ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002acb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acf:	8d 40 02             	lea    eax,[eax+0x2]
c0002ad2:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002ad5:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ad8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002adc:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002adf:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002ae5:	e8 84 f1 ff ff       	call   c0001c6e <ld_dword>
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002af4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002af8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002afc:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002aff:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b02:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b08:	e8 61 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b0d:	31 d2                	xor    edx,edx
c0002b0f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b13:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b17:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b1b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b1e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b21:	0f b7 c3             	movzx  eax,bx
c0002b24:	31 d2                	xor    edx,edx
c0002b26:	0f af f0             	imul   esi,eax
c0002b29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b2d:	89 f0                	mov    eax,esi
c0002b2f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b33:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b37:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b3b:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b3f:	39 c1                	cmp    ecx,eax
c0002b41:	89 df                	mov    edi,ebx
c0002b43:	19 d7                	sbb    edi,edx
c0002b45:	0f 82 6e fc ff ff    	jb     c00027b9 <mount_volume+0xc8>
c0002b4b:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b51:	31 db                	xor    ebx,ebx
c0002b53:	e8 16 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b58:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b5f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b62:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b6a:	85 db                	test   ebx,ebx
c0002b6c:	75 39                	jne    c0002ba7 <mount_volume+0x4b6>
c0002b6e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b72:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b76:	0f 86 3d fc ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002b7c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b7f:	31 ff                	xor    edi,edi
c0002b81:	89 e8                	mov    eax,ebp
c0002b83:	e8 72 f3 ff ff       	call   c0001efa <clst2sect>
c0002b88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b8c:	01 c6                	add    esi,eax
c0002b8e:	89 e8                	mov    eax,ebp
c0002b90:	11 d7                	adc    edi,edx
c0002b92:	89 f2                	mov    edx,esi
c0002b94:	89 f9                	mov    ecx,edi
c0002b96:	e8 a4 f8 ff ff       	call   c000243f <move_window>
c0002b9b:	85 c0                	test   eax,eax
c0002b9d:	0f 85 07 fc ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002ba3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002ba7:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bac:	74 0b                	je     c0002bb9 <mount_volume+0x4c8>
c0002bae:	83 c3 20             	add    ebx,0x20
c0002bb1:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bb7:	eb b1                	jmp    c0002b6a <mount_volume+0x479>
c0002bb9:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bbc:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bc0:	e8 a9 f0 ff ff       	call   c0001c6e <ld_dword>
c0002bc5:	89 c3                	mov    ebx,eax
c0002bc7:	83 f8 01             	cmp    eax,0x1
c0002bca:	0f 86 e9 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd0:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bd3:	0f 86 e0 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd9:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002bdc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002be0:	0f af c2             	imul   eax,edx
c0002be3:	31 d2                	xor    edx,edx
c0002be5:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002be8:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002beb:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bee:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bf1:	31 c9                	xor    ecx,ecx
c0002bf3:	89 da                	mov    edx,ebx
c0002bf5:	89 e8                	mov    eax,ebp
c0002bf7:	c1 ea 07             	shr    edx,0x7
c0002bfa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bfd:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c00:	e8 3a f8 ff ff       	call   c000243f <move_window>
c0002c05:	85 c0                	test   eax,eax
c0002c07:	0f 85 9d fb ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002c0d:	89 d8                	mov    eax,ebx
c0002c0f:	83 e0 7f             	and    eax,0x7f
c0002c12:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c15:	e8 54 f0 ff ff       	call   c0001c6e <ld_dword>
c0002c1a:	83 f8 ff             	cmp    eax,0xffffffff
c0002c1d:	74 0a                	je     c0002c29 <mount_volume+0x538>
c0002c1f:	43                   	inc    ebx
c0002c20:	39 d8                	cmp    eax,ebx
c0002c22:	74 cd                	je     c0002bf1 <mount_volume+0x500>
c0002c24:	e9 90 fb ff ff       	jmp    c00027b9 <mount_volume+0xc8>
c0002c29:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c30:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c37:	bb 04 00 00 00       	mov    ebx,0x4
c0002c3c:	e9 e8 fd ff ff       	jmp    c0002a29 <mount_volume+0x338>
c0002c41:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c46:	19 db                	sbb    ebx,ebx
c0002c48:	83 c3 02             	add    ebx,0x2
c0002c4b:	e9 93 fc ff ff       	jmp    c00028e3 <mount_volume+0x1f2>
c0002c50:	83 c4 3c             	add    esp,0x3c
c0002c53:	89 d8                	mov    eax,ebx
c0002c55:	5b                   	pop    ebx
c0002c56:	5e                   	pop    esi
c0002c57:	5f                   	pop    edi
c0002c58:	5d                   	pop    ebp
c0002c59:	c3                   	ret    

c0002c5a <find_bitmap>:
c0002c5a:	55                   	push   ebp
c0002c5b:	57                   	push   edi
c0002c5c:	89 c7                	mov    edi,eax
c0002c5e:	56                   	push   esi
c0002c5f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c62:	53                   	push   ebx
c0002c63:	83 ec 1c             	sub    esp,0x1c
c0002c66:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c69:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c6d:	83 e8 02             	sub    eax,0x2
c0002c70:	39 f0                	cmp    eax,esi
c0002c72:	77 02                	ja     c0002c76 <find_bitmap+0x1c>
c0002c74:	31 f6                	xor    esi,esi
c0002c76:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c7a:	89 f3                	mov    ebx,esi
c0002c7c:	31 ed                	xor    ebp,ebp
c0002c7e:	31 c9                	xor    ecx,ecx
c0002c80:	89 da                	mov    edx,ebx
c0002c82:	89 f8                	mov    eax,edi
c0002c84:	c1 ea 0c             	shr    edx,0xc
c0002c87:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c8a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c8d:	e8 ad f7 ff ff       	call   c000243f <move_window>
c0002c92:	85 c0                	test   eax,eax
c0002c94:	75 68                	jne    c0002cfe <find_bitmap+0xa4>
c0002c96:	89 da                	mov    edx,ebx
c0002c98:	89 d9                	mov    ecx,ebx
c0002c9a:	c1 ea 03             	shr    edx,0x3
c0002c9d:	83 e1 07             	and    ecx,0x7
c0002ca0:	b8 01 00 00 00       	mov    eax,0x1
c0002ca5:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cab:	d3 e0                	shl    eax,cl
c0002cad:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cb0:	83 e9 02             	sub    ecx,0x2
c0002cb3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cb7:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cbb:	43                   	inc    ebx
c0002cbc:	21 c1                	and    ecx,eax
c0002cbe:	d1 e0                	shl    eax,1
c0002cc0:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002cc4:	77 09                	ja     c0002ccf <find_bitmap+0x75>
c0002cc6:	31 db                	xor    ebx,ebx
c0002cc8:	ba 00 02 00 00       	mov    edx,0x200
c0002ccd:	31 c0                	xor    eax,eax
c0002ccf:	84 c9                	test   cl,cl
c0002cd1:	75 10                	jne    c0002ce3 <find_bitmap+0x89>
c0002cd3:	45                   	inc    ebp
c0002cd4:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cd8:	75 0f                	jne    c0002ce9 <find_bitmap+0x8f>
c0002cda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cde:	83 c0 02             	add    eax,0x2
c0002ce1:	eb 22                	jmp    c0002d05 <find_bitmap+0xab>
c0002ce3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ce7:	31 ed                	xor    ebp,ebp
c0002ce9:	39 de                	cmp    esi,ebx
c0002ceb:	74 16                	je     c0002d03 <find_bitmap+0xa9>
c0002ced:	84 c0                	test   al,al
c0002cef:	75 c6                	jne    c0002cb7 <find_bitmap+0x5d>
c0002cf1:	42                   	inc    edx
c0002cf2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cf8:	77 84                	ja     c0002c7e <find_bitmap+0x24>
c0002cfa:	b0 01                	mov    al,0x1
c0002cfc:	eb b9                	jmp    c0002cb7 <find_bitmap+0x5d>
c0002cfe:	83 c8 ff             	or     eax,0xffffffff
c0002d01:	eb 02                	jmp    c0002d05 <find_bitmap+0xab>
c0002d03:	31 c0                	xor    eax,eax
c0002d05:	83 c4 1c             	add    esp,0x1c
c0002d08:	5b                   	pop    ebx
c0002d09:	5e                   	pop    esi
c0002d0a:	5f                   	pop    edi
c0002d0b:	5d                   	pop    ebp
c0002d0c:	c3                   	ret    

c0002d0d <change_bitmap>:
c0002d0d:	55                   	push   ebp
c0002d0e:	89 cd                	mov    ebp,ecx
c0002d10:	57                   	push   edi
c0002d11:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d14:	56                   	push   esi
c0002d15:	89 c7                	mov    edi,eax
c0002d17:	53                   	push   ebx
c0002d18:	89 c8                	mov    eax,ecx
c0002d1a:	83 ec 1c             	sub    esp,0x1c
c0002d1d:	31 d2                	xor    edx,edx
c0002d1f:	89 ce                	mov    esi,ecx
c0002d21:	c1 e8 0c             	shr    eax,0xc
c0002d24:	bb 01 00 00 00       	mov    ebx,0x1
c0002d29:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d2c:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d2f:	c1 ee 03             	shr    esi,0x3
c0002d32:	83 e1 07             	and    ecx,0x7
c0002d35:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d3b:	d3 e3                	shl    ebx,cl
c0002d3d:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d41:	89 c1                	mov    ecx,eax
c0002d43:	89 d3                	mov    ebx,edx
c0002d45:	83 c1 01             	add    ecx,0x1
c0002d48:	83 d3 00             	adc    ebx,0x0
c0002d4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d4f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d53:	89 d1                	mov    ecx,edx
c0002d55:	89 c2                	mov    edx,eax
c0002d57:	89 f8                	mov    eax,edi
c0002d59:	e8 e1 f6 ff ff       	call   c000243f <move_window>
c0002d5e:	89 c1                	mov    ecx,eax
c0002d60:	85 c0                	test   eax,eax
c0002d62:	75 48                	jne    c0002dac <change_bitmap+0x9f>
c0002d64:	31 d2                	xor    edx,edx
c0002d66:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d6a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d6e:	0f 95 c2             	setne  dl
c0002d71:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d75:	74 3c                	je     c0002db3 <change_bitmap+0xa6>
c0002d77:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d7b:	4d                   	dec    ebp
c0002d7c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d80:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d84:	74 32                	je     c0002db8 <change_bitmap+0xab>
c0002d86:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d8a:	75 d8                	jne    c0002d64 <change_bitmap+0x57>
c0002d8c:	8d 46 01             	lea    eax,[esi+0x1]
c0002d8f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d94:	89 c3                	mov    ebx,eax
c0002d96:	31 f6                	xor    esi,esi
c0002d98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002da0:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002da6:	74 99                	je     c0002d41 <change_bitmap+0x34>
c0002da8:	89 de                	mov    esi,ebx
c0002daa:	eb b8                	jmp    c0002d64 <change_bitmap+0x57>
c0002dac:	b9 01 00 00 00       	mov    ecx,0x1
c0002db1:	eb 05                	jmp    c0002db8 <change_bitmap+0xab>
c0002db3:	b9 02 00 00 00       	mov    ecx,0x2
c0002db8:	83 c4 1c             	add    esp,0x1c
c0002dbb:	89 c8                	mov    eax,ecx
c0002dbd:	5b                   	pop    ebx
c0002dbe:	5e                   	pop    esi
c0002dbf:	5f                   	pop    edi
c0002dc0:	5d                   	pop    ebp
c0002dc1:	c3                   	ret    

c0002dc2 <put_fat>:
c0002dc2:	83 fa 01             	cmp    edx,0x1
c0002dc5:	0f 86 7b 01 00 00    	jbe    c0002f46 <put_fat+0x184>
c0002dcb:	55                   	push   ebp
c0002dcc:	57                   	push   edi
c0002dcd:	89 cf                	mov    edi,ecx
c0002dcf:	56                   	push   esi
c0002dd0:	b9 02 00 00 00       	mov    ecx,0x2
c0002dd5:	53                   	push   ebx
c0002dd6:	89 c6                	mov    esi,eax
c0002dd8:	83 ec 1c             	sub    esp,0x1c
c0002ddb:	89 d3                	mov    ebx,edx
c0002ddd:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002de0:	0f 86 68 01 00 00    	jbe    c0002f4e <put_fat+0x18c>
c0002de6:	8a 00                	mov    al,BYTE PTR [eax]
c0002de8:	3c 02                	cmp    al,0x2
c0002dea:	0f 84 c7 00 00 00    	je     c0002eb7 <put_fat+0xf5>
c0002df0:	77 09                	ja     c0002dfb <put_fat+0x39>
c0002df2:	fe c8                	dec    al
c0002df4:	74 17                	je     c0002e0d <put_fat+0x4b>
c0002df6:	e9 53 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002dfb:	b9 02 00 00 00       	mov    ecx,0x2
c0002e00:	3c 04                	cmp    al,0x4
c0002e02:	0f 86 e1 00 00 00    	jbe    c0002ee9 <put_fat+0x127>
c0002e08:	e9 41 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002e0d:	89 d5                	mov    ebp,edx
c0002e0f:	31 c9                	xor    ecx,ecx
c0002e11:	d1 ed                	shr    ebp,1
c0002e13:	89 f0                	mov    eax,esi
c0002e15:	01 d5                	add    ebp,edx
c0002e17:	89 ea                	mov    edx,ebp
c0002e19:	c1 ea 09             	shr    edx,0x9
c0002e1c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e1f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e22:	e8 18 f6 ff ff       	call   c000243f <move_window>
c0002e27:	89 c1                	mov    ecx,eax
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	0f 85 1d 01 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e31:	8d 46 54             	lea    eax,[esi+0x54]
c0002e34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e38:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e3b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e45:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e49:	89 f8                	mov    eax,edi
c0002e4b:	83 e3 01             	and    ebx,0x1
c0002e4e:	74 0d                	je     c0002e5d <put_fat+0x9b>
c0002e50:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e53:	89 fa                	mov    edx,edi
c0002e55:	83 e0 0f             	and    eax,0xf
c0002e58:	c1 e2 04             	shl    edx,0x4
c0002e5b:	09 d0                	or     eax,edx
c0002e5d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e64:	31 c9                	xor    ecx,ecx
c0002e66:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e6a:	c1 ea 09             	shr    edx,0x9
c0002e6d:	89 f0                	mov    eax,esi
c0002e6f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e72:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e75:	e8 c5 f5 ff ff       	call   c000243f <move_window>
c0002e7a:	89 c1                	mov    ecx,eax
c0002e7c:	85 c0                	test   eax,eax
c0002e7e:	0f 85 ca 00 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e84:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e88:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e8e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e92:	85 db                	test   ebx,ebx
c0002e94:	74 07                	je     c0002e9d <put_fat+0xdb>
c0002e96:	c1 ef 04             	shr    edi,0x4
c0002e99:	89 fa                	mov    edx,edi
c0002e9b:	eb 0e                	jmp    c0002eab <put_fat+0xe9>
c0002e9d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ea0:	c1 ef 08             	shr    edi,0x8
c0002ea3:	83 e2 f0             	and    edx,0xfffffff0
c0002ea6:	83 e7 0f             	and    edi,0xf
c0002ea9:	09 fa                	or     edx,edi
c0002eab:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002eae:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eb2:	e9 97 00 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002eb7:	31 c9                	xor    ecx,ecx
c0002eb9:	c1 ea 08             	shr    edx,0x8
c0002ebc:	89 f0                	mov    eax,esi
c0002ebe:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ec1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ec4:	e8 76 f5 ff ff       	call   c000243f <move_window>
c0002ec9:	89 c1                	mov    ecx,eax
c0002ecb:	85 c0                	test   eax,eax
c0002ecd:	75 7f                	jne    c0002f4e <put_fat+0x18c>
c0002ecf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ed3:	01 db                	add    ebx,ebx
c0002ed5:	0f b7 d7             	movzx  edx,di
c0002ed8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ede:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ee2:	e8 ec ed ff ff       	call   c0001cd3 <st_word>
c0002ee7:	eb 53                	jmp    c0002f3c <put_fat+0x17a>
c0002ee9:	31 c9                	xor    ecx,ecx
c0002eeb:	c1 ea 07             	shr    edx,0x7
c0002eee:	89 f0                	mov    eax,esi
c0002ef0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ef3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ef6:	e8 44 f5 ff ff       	call   c000243f <move_window>
c0002efb:	89 c1                	mov    ecx,eax
c0002efd:	85 c0                	test   eax,eax
c0002eff:	75 4d                	jne    c0002f4e <put_fat+0x18c>
c0002f01:	c1 e3 02             	shl    ebx,0x2
c0002f04:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f0a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f0d:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f11:	74 1c                	je     c0002f2f <put_fat+0x16d>
c0002f13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f17:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f1d:	89 d8                	mov    eax,ebx
c0002f1f:	e8 4a ed ff ff       	call   c0001c6e <ld_dword>
c0002f24:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f28:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f2d:	09 c7                	or     edi,eax
c0002f2f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f33:	89 fa                	mov    edx,edi
c0002f35:	89 d8                	mov    eax,ebx
c0002f37:	e8 9b ed ff ff       	call   c0001cd7 <st_dword>
c0002f3c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f44:	eb 08                	jmp    c0002f4e <put_fat+0x18c>
c0002f46:	b9 02 00 00 00       	mov    ecx,0x2
c0002f4b:	89 c8                	mov    eax,ecx
c0002f4d:	c3                   	ret    
c0002f4e:	83 c4 1c             	add    esp,0x1c
c0002f51:	89 c8                	mov    eax,ecx
c0002f53:	5b                   	pop    ebx
c0002f54:	5e                   	pop    esi
c0002f55:	5f                   	pop    edi
c0002f56:	5d                   	pop    ebp
c0002f57:	c3                   	ret    

c0002f58 <fill_last_frag>:
c0002f58:	57                   	push   edi
c0002f59:	89 cf                	mov    edi,ecx
c0002f5b:	56                   	push   esi
c0002f5c:	89 d6                	mov    esi,edx
c0002f5e:	53                   	push   ebx
c0002f5f:	89 c3                	mov    ebx,eax
c0002f61:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f64:	85 c0                	test   eax,eax
c0002f66:	74 21                	je     c0002f89 <fill_last_frag+0x31>
c0002f68:	89 f9                	mov    ecx,edi
c0002f6a:	83 f8 01             	cmp    eax,0x1
c0002f6d:	76 05                	jbe    c0002f74 <fill_last_frag+0x1c>
c0002f6f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f72:	29 c1                	sub    ecx,eax
c0002f74:	8d 56 01             	lea    edx,[esi+0x1]
c0002f77:	29 c2                	sub    edx,eax
c0002f79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f7b:	e8 42 fe ff ff       	call   c0002dc2 <put_fat>
c0002f80:	85 c0                	test   eax,eax
c0002f82:	75 05                	jne    c0002f89 <fill_last_frag+0x31>
c0002f84:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f87:	eb d8                	jmp    c0002f61 <fill_last_frag+0x9>
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <fill_first_frag>:
c0002f8d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f91:	75 2d                	jne    c0002fc0 <fill_first_frag+0x33>
c0002f93:	57                   	push   edi
c0002f94:	56                   	push   esi
c0002f95:	53                   	push   ebx
c0002f96:	89 c3                	mov    ebx,eax
c0002f98:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f9b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f9e:	01 d7                	add    edi,edx
c0002fa0:	39 fa                	cmp    edx,edi
c0002fa2:	74 14                	je     c0002fb8 <fill_first_frag+0x2b>
c0002fa4:	8d 72 01             	lea    esi,[edx+0x1]
c0002fa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fa9:	89 f1                	mov    ecx,esi
c0002fab:	e8 12 fe ff ff       	call   c0002dc2 <put_fat>
c0002fb0:	89 f2                	mov    edx,esi
c0002fb2:	85 c0                	test   eax,eax
c0002fb4:	74 ea                	je     c0002fa0 <fill_first_frag+0x13>
c0002fb6:	eb 0b                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fb8:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fbc:	31 c0                	xor    eax,eax
c0002fbe:	eb 03                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fc0:	31 c0                	xor    eax,eax
c0002fc2:	c3                   	ret    
c0002fc3:	5b                   	pop    ebx
c0002fc4:	5e                   	pop    esi
c0002fc5:	5f                   	pop    edi
c0002fc6:	c3                   	ret    

c0002fc7 <get_fat>:
c0002fc7:	83 fa 01             	cmp    edx,0x1
c0002fca:	0f 86 db 01 00 00    	jbe    c00031ab <get_fat+0x1e4>
c0002fd0:	55                   	push   ebp
c0002fd1:	b9 01 00 00 00       	mov    ecx,0x1
c0002fd6:	57                   	push   edi
c0002fd7:	56                   	push   esi
c0002fd8:	53                   	push   ebx
c0002fd9:	83 ec 1c             	sub    esp,0x1c
c0002fdc:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fde:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fe1:	0f 86 cc 01 00 00    	jbe    c00031b3 <get_fat+0x1ec>
c0002fe7:	89 c3                	mov    ebx,eax
c0002fe9:	89 d6                	mov    esi,edx
c0002feb:	8a 07                	mov    al,BYTE PTR [edi]
c0002fed:	3c 02                	cmp    al,0x2
c0002fef:	0f 84 99 00 00 00    	je     c000308e <get_fat+0xc7>
c0002ff5:	77 09                	ja     c0003000 <get_fat+0x39>
c0002ff7:	fe c8                	dec    al
c0002ff9:	74 1a                	je     c0003015 <get_fat+0x4e>
c0002ffb:	e9 b3 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003000:	3c 03                	cmp    al,0x3
c0003002:	0f 84 b5 00 00 00    	je     c00030bd <get_fat+0xf6>
c0003008:	3c 04                	cmp    al,0x4
c000300a:	0f 84 e3 00 00 00    	je     c00030f3 <get_fat+0x12c>
c0003010:	e9 9e 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003015:	89 d3                	mov    ebx,edx
c0003017:	31 c9                	xor    ecx,ecx
c0003019:	d1 eb                	shr    ebx,1
c000301b:	89 f8                	mov    eax,edi
c000301d:	01 d3                	add    ebx,edx
c000301f:	89 da                	mov    edx,ebx
c0003021:	c1 ea 09             	shr    edx,0x9
c0003024:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003027:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000302a:	e8 10 f4 ff ff       	call   c000243f <move_window>
c000302f:	85 c0                	test   eax,eax
c0003031:	74 08                	je     c000303b <get_fat+0x74>
c0003033:	83 c9 ff             	or     ecx,0xffffffff
c0003036:	e9 78 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000303b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000303e:	31 c9                	xor    ecx,ecx
c0003040:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003046:	89 ea                	mov    edx,ebp
c0003048:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c000304c:	c1 ea 09             	shr    edx,0x9
c000304f:	89 f8                	mov    eax,edi
c0003051:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003054:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003057:	e8 e3 f3 ff ff       	call   c000243f <move_window>
c000305c:	85 c0                	test   eax,eax
c000305e:	75 d3                	jne    c0003033 <get_fat+0x6c>
c0003060:	0f b6 c3             	movzx  eax,bl
c0003063:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003069:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c000306e:	c1 e3 08             	shl    ebx,0x8
c0003071:	09 c3                	or     ebx,eax
c0003073:	89 d9                	mov    ecx,ebx
c0003075:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000307b:	83 e6 01             	and    esi,0x1
c000307e:	0f 84 2f 01 00 00    	je     c00031b3 <get_fat+0x1ec>
c0003084:	89 d9                	mov    ecx,ebx
c0003086:	c1 e9 04             	shr    ecx,0x4
c0003089:	e9 25 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000308e:	31 c9                	xor    ecx,ecx
c0003090:	c1 ea 08             	shr    edx,0x8
c0003093:	89 f8                	mov    eax,edi
c0003095:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003098:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000309b:	e8 9f f3 ff ff       	call   c000243f <move_window>
c00030a0:	85 c0                	test   eax,eax
c00030a2:	75 8f                	jne    c0003033 <get_fat+0x6c>
c00030a4:	01 f6                	add    esi,esi
c00030a6:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030ac:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030b0:	e8 ac eb ff ff       	call   c0001c61 <ld_word>
c00030b5:	0f b7 c8             	movzx  ecx,ax
c00030b8:	e9 f6 00 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c00030bd:	31 c9                	xor    ecx,ecx
c00030bf:	c1 ea 07             	shr    edx,0x7
c00030c2:	89 f8                	mov    eax,edi
c00030c4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030c7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030ca:	e8 70 f3 ff ff       	call   c000243f <move_window>
c00030cf:	85 c0                	test   eax,eax
c00030d1:	0f 85 5c ff ff ff    	jne    c0003033 <get_fat+0x6c>
c00030d7:	c1 e6 02             	shl    esi,0x2
c00030da:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030e0:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030e4:	e8 85 eb ff ff       	call   c0001c6e <ld_dword>
c00030e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030ee:	e9 b4 00 00 00       	jmp    c00031a7 <get_fat+0x1e0>
c00030f3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030f6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030f9:	89 d1                	mov    ecx,edx
c00030fb:	09 c1                	or     ecx,eax
c00030fd:	74 06                	je     c0003105 <get_fat+0x13e>
c00030ff:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003103:	75 0f                	jne    c0003114 <get_fat+0x14d>
c0003105:	b9 01 00 00 00       	mov    ecx,0x1
c000310a:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c000310e:	0f 85 9f 00 00 00    	jne    c00031b3 <get_fat+0x1ec>
c0003114:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003118:	89 f5                	mov    ebp,esi
c000311a:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c000311f:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003122:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003125:	80 f9 02             	cmp    cl,0x2
c0003128:	75 35                	jne    c000315f <get_fat+0x198>
c000312a:	83 c0 ff             	add    eax,0xffffffff
c000312d:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003132:	83 d2 ff             	adc    edx,0xffffffff
c0003135:	31 db                	xor    ebx,ebx
c0003137:	0f ac d0 09          	shrd   eax,edx,0x9
c000313b:	53                   	push   ebx
c000313c:	c1 ea 09             	shr    edx,0x9
c000313f:	51                   	push   ecx
c0003140:	52                   	push   edx
c0003141:	50                   	push   eax
c0003142:	e8 15 39 02 00       	call   c0026a5c <__udivdi3>
c0003147:	83 c4 10             	add    esp,0x10
c000314a:	b9 01 00 00 00       	mov    ecx,0x1
c000314f:	39 c5                	cmp    ebp,eax
c0003151:	77 60                	ja     c00031b3 <get_fat+0x1ec>
c0003153:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003158:	74 59                	je     c00031b3 <get_fat+0x1ec>
c000315a:	8d 4e 01             	lea    ecx,[esi+0x1]
c000315d:	eb 54                	jmp    c00031b3 <get_fat+0x1ec>
c000315f:	80 f9 03             	cmp    cl,0x3
c0003162:	75 05                	jne    c0003169 <get_fat+0x1a2>
c0003164:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003167:	77 f1                	ja     c000315a <get_fat+0x193>
c0003169:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000316e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003172:	75 3f                	jne    c00031b3 <get_fat+0x1ec>
c0003174:	31 c9                	xor    ecx,ecx
c0003176:	89 f2                	mov    edx,esi
c0003178:	89 f8                	mov    eax,edi
c000317a:	c1 ea 07             	shr    edx,0x7
c000317d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003180:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003183:	e8 b7 f2 ff ff       	call   c000243f <move_window>
c0003188:	85 c0                	test   eax,eax
c000318a:	0f 85 a3 fe ff ff    	jne    c0003033 <get_fat+0x6c>
c0003190:	c1 e6 02             	shl    esi,0x2
c0003193:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003199:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319d:	e8 cc ea ff ff       	call   c0001c6e <ld_dword>
c00031a2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031a7:	89 c1                	mov    ecx,eax
c00031a9:	eb 08                	jmp    c00031b3 <get_fat+0x1ec>
c00031ab:	b9 01 00 00 00       	mov    ecx,0x1
c00031b0:	89 c8                	mov    eax,ecx
c00031b2:	c3                   	ret    
c00031b3:	83 c4 1c             	add    esp,0x1c
c00031b6:	89 c8                	mov    eax,ecx
c00031b8:	5b                   	pop    ebx
c00031b9:	5e                   	pop    esi
c00031ba:	5f                   	pop    edi
c00031bb:	5d                   	pop    ebp
c00031bc:	c3                   	ret    

c00031bd <dir_sdi>:
c00031bd:	55                   	push   ebp
c00031be:	57                   	push   edi
c00031bf:	56                   	push   esi
c00031c0:	53                   	push   ebx
c00031c1:	89 c3                	mov    ebx,eax
c00031c3:	83 ec 1c             	sub    esp,0x1c
c00031c6:	8b 38                	mov    edi,DWORD PTR [eax]
c00031c8:	31 c0                	xor    eax,eax
c00031ca:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031cd:	0f 94 c0             	sete   al
c00031d0:	48                   	dec    eax
c00031d1:	25 00 00 20 f0       	and    eax,0xf0200000
c00031d6:	05 00 00 00 10       	add    eax,0x10000000
c00031db:	39 d0                	cmp    eax,edx
c00031dd:	77 0a                	ja     c00031e9 <dir_sdi+0x2c>
c00031df:	b8 02 00 00 00       	mov    eax,0x2
c00031e4:	e9 c4 00 00 00       	jmp    c00032ad <dir_sdi+0xf0>
c00031e9:	89 d6                	mov    esi,edx
c00031eb:	f6 c2 1f             	test   dl,0x1f
c00031ee:	75 ef                	jne    c00031df <dir_sdi+0x22>
c00031f0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031f3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031f6:	85 c9                	test   ecx,ecx
c00031f8:	75 2d                	jne    c0003227 <dir_sdi+0x6a>
c00031fa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031fd:	77 1b                	ja     c000321a <dir_sdi+0x5d>
c00031ff:	89 f2                	mov    edx,esi
c0003201:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003205:	c1 ea 05             	shr    edx,0x5
c0003208:	39 c2                	cmp    edx,eax
c000320a:	73 d3                	jae    c00031df <dir_sdi+0x22>
c000320c:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000320f:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003212:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003215:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003218:	eb 4b                	jmp    c0003265 <dir_sdi+0xa8>
c000321a:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000321d:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003221:	85 c0                	test   eax,eax
c0003223:	74 da                	je     c00031ff <dir_sdi+0x42>
c0003225:	89 c1                	mov    ecx,eax
c0003227:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000322b:	c1 e5 09             	shl    ebp,0x9
c000322e:	89 ca                	mov    edx,ecx
c0003230:	39 ee                	cmp    esi,ebp
c0003232:	72 1c                	jb     c0003250 <dir_sdi+0x93>
c0003234:	89 d8                	mov    eax,ebx
c0003236:	e8 8c fd ff ff       	call   c0002fc7 <get_fat>
c000323b:	89 c1                	mov    ecx,eax
c000323d:	83 f8 ff             	cmp    eax,0xffffffff
c0003240:	74 66                	je     c00032a8 <dir_sdi+0xeb>
c0003242:	83 f8 01             	cmp    eax,0x1
c0003245:	76 98                	jbe    c00031df <dir_sdi+0x22>
c0003247:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000324a:	76 93                	jbe    c00031df <dir_sdi+0x22>
c000324c:	29 ee                	sub    esi,ebp
c000324e:	eb de                	jmp    c000322e <dir_sdi+0x71>
c0003250:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003254:	89 f8                	mov    eax,edi
c0003256:	e8 9f ec ff ff       	call   c0001efa <clst2sect>
c000325b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000325f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003262:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003265:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003268:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000326b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000326e:	89 d1                	mov    ecx,edx
c0003270:	09 c1                	or     ecx,eax
c0003272:	0f 84 67 ff ff ff    	je     c00031df <dir_sdi+0x22>
c0003278:	89 f1                	mov    ecx,esi
c000327a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003282:	c1 e9 09             	shr    ecx,0x9
c0003285:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003289:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000328d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003291:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003294:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000329a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000329d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032a1:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032a4:	31 c0                	xor    eax,eax
c00032a6:	eb 05                	jmp    c00032ad <dir_sdi+0xf0>
c00032a8:	b8 01 00 00 00       	mov    eax,0x1
c00032ad:	83 c4 1c             	add    esp,0x1c
c00032b0:	5b                   	pop    ebx
c00032b1:	5e                   	pop    esi
c00032b2:	5f                   	pop    edi
c00032b3:	5d                   	pop    ebp
c00032b4:	c3                   	ret    

c00032b5 <create_chain>:
c00032b5:	55                   	push   ebp
c00032b6:	89 c5                	mov    ebp,eax
c00032b8:	57                   	push   edi
c00032b9:	56                   	push   esi
c00032ba:	53                   	push   ebx
c00032bb:	83 ec 1c             	sub    esp,0x1c
c00032be:	85 d2                	test   edx,edx
c00032c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032c4:	8b 30                	mov    esi,DWORD PTR [eax]
c00032c6:	75 0e                	jne    c00032d6 <create_chain+0x21>
c00032c8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032cb:	85 ff                	test   edi,edi
c00032cd:	74 39                	je     c0003308 <create_chain+0x53>
c00032cf:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032d2:	77 39                	ja     c000330d <create_chain+0x58>
c00032d4:	eb 32                	jmp    c0003308 <create_chain+0x53>
c00032d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032da:	e8 e8 fc ff ff       	call   c0002fc7 <get_fat>
c00032df:	89 c3                	mov    ebx,eax
c00032e1:	83 f8 01             	cmp    eax,0x1
c00032e4:	77 0a                	ja     c00032f0 <create_chain+0x3b>
c00032e6:	bb 01 00 00 00       	mov    ebx,0x1
c00032eb:	e9 ba 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c00032f0:	83 f8 ff             	cmp    eax,0xffffffff
c00032f3:	0f 84 62 01 00 00    	je     c000345b <create_chain+0x1a6>
c00032f9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032fc:	0f 87 a8 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c0003302:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003306:	eb 05                	jmp    c000330d <create_chain+0x58>
c0003308:	bf 01 00 00 00       	mov    edi,0x1
c000330d:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003311:	75 07                	jne    c000331a <create_chain+0x65>
c0003313:	31 db                	xor    ebx,ebx
c0003315:	e9 90 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c000331a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000331d:	75 74                	jne    c0003393 <create_chain+0xde>
c000331f:	b9 01 00 00 00       	mov    ecx,0x1
c0003324:	89 fa                	mov    edx,edi
c0003326:	89 f0                	mov    eax,esi
c0003328:	e8 2d f9 ff ff       	call   c0002c5a <find_bitmap>
c000332d:	89 c3                	mov    ebx,eax
c000332f:	8d 40 ff             	lea    eax,[eax-0x1]
c0003332:	83 f8 fd             	cmp    eax,0xfffffffd
c0003335:	0f 87 6f 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c000333b:	83 ec 0c             	sub    esp,0xc
c000333e:	b9 01 00 00 00       	mov    ecx,0x1
c0003343:	6a 01                	push   0x1
c0003345:	89 da                	mov    edx,ebx
c0003347:	89 f0                	mov    eax,esi
c0003349:	e8 bf f9 ff ff       	call   c0002d0d <change_bitmap>
c000334e:	83 c4 10             	add    esp,0x10
c0003351:	83 f8 02             	cmp    eax,0x2
c0003354:	74 90                	je     c00032e6 <create_chain+0x31>
c0003356:	83 f8 01             	cmp    eax,0x1
c0003359:	0f 84 fc 00 00 00    	je     c000345b <create_chain+0x1a6>
c000335f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003364:	75 09                	jne    c000336f <create_chain+0xba>
c0003366:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000336a:	e9 0c 01 00 00       	jmp    c000347b <create_chain+0x1c6>
c000336f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003373:	0f 85 e7 00 00 00    	jne    c0003460 <create_chain+0x1ab>
c0003379:	8d 57 01             	lea    edx,[edi+0x1]
c000337c:	39 da                	cmp    edx,ebx
c000337e:	0f 84 f7 00 00 00    	je     c000347b <create_chain+0x1c6>
c0003384:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003387:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000338b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000338e:	e9 cd 00 00 00       	jmp    c0003460 <create_chain+0x1ab>
c0003393:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003397:	75 41                	jne    c00033da <create_chain+0x125>
c0003399:	8d 5f 01             	lea    ebx,[edi+0x1]
c000339c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000339f:	77 05                	ja     c00033a6 <create_chain+0xf1>
c00033a1:	bb 02 00 00 00       	mov    ebx,0x2
c00033a6:	89 da                	mov    edx,ebx
c00033a8:	89 e8                	mov    eax,ebp
c00033aa:	e8 18 fc ff ff       	call   c0002fc7 <get_fat>
c00033af:	83 f8 01             	cmp    eax,0x1
c00033b2:	0f 84 2e ff ff ff    	je     c00032e6 <create_chain+0x31>
c00033b8:	83 f8 ff             	cmp    eax,0xffffffff
c00033bb:	0f 84 9a 00 00 00    	je     c000345b <create_chain+0x1a6>
c00033c1:	85 c0                	test   eax,eax
c00033c3:	74 11                	je     c00033d6 <create_chain+0x121>
c00033c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 0d                	jbe    c00033da <create_chain+0x125>
c00033cd:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033d0:	76 08                	jbe    c00033da <create_chain+0x125>
c00033d2:	89 c7                	mov    edi,eax
c00033d4:	eb 04                	jmp    c00033da <create_chain+0x125>
c00033d6:	85 db                	test   ebx,ebx
c00033d8:	75 38                	jne    c0003412 <create_chain+0x15d>
c00033da:	89 fb                	mov    ebx,edi
c00033dc:	43                   	inc    ebx
c00033dd:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e0:	77 0e                	ja     c00033f0 <create_chain+0x13b>
c00033e2:	83 ff 01             	cmp    edi,0x1
c00033e5:	0f 86 28 ff ff ff    	jbe    c0003313 <create_chain+0x5e>
c00033eb:	bb 02 00 00 00       	mov    ebx,0x2
c00033f0:	89 da                	mov    edx,ebx
c00033f2:	89 e8                	mov    eax,ebp
c00033f4:	e8 ce fb ff ff       	call   c0002fc7 <get_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 15                	je     c0003412 <create_chain+0x15d>
c00033fd:	83 f8 01             	cmp    eax,0x1
c0003400:	0f 84 e0 fe ff ff    	je     c00032e6 <create_chain+0x31>
c0003406:	40                   	inc    eax
c0003407:	74 52                	je     c000345b <create_chain+0x1a6>
c0003409:	39 fb                	cmp    ebx,edi
c000340b:	75 cf                	jne    c00033dc <create_chain+0x127>
c000340d:	e9 01 ff ff ff       	jmp    c0003313 <create_chain+0x5e>
c0003412:	83 c9 ff             	or     ecx,0xffffffff
c0003415:	89 da                	mov    edx,ebx
c0003417:	89 f0                	mov    eax,esi
c0003419:	e8 a4 f9 ff ff       	call   c0002dc2 <put_fat>
c000341e:	85 c0                	test   eax,eax
c0003420:	75 32                	jne    c0003454 <create_chain+0x19f>
c0003422:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003427:	74 11                	je     c000343a <create_chain+0x185>
c0003429:	89 d9                	mov    ecx,ebx
c000342b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000342f:	89 f0                	mov    eax,esi
c0003431:	e8 8c f9 ff ff       	call   c0002dc2 <put_fat>
c0003436:	85 c0                	test   eax,eax
c0003438:	75 1a                	jne    c0003454 <create_chain+0x19f>
c000343a:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000343d:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003440:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003443:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003446:	39 d0                	cmp    eax,edx
c0003448:	77 04                	ja     c000344e <create_chain+0x199>
c000344a:	48                   	dec    eax
c000344b:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000344e:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003452:	eb 56                	jmp    c00034aa <create_chain+0x1f5>
c0003454:	48                   	dec    eax
c0003455:	0f 85 8b fe ff ff    	jne    c00032e6 <create_chain+0x31>
c000345b:	83 cb ff             	or     ebx,0xffffffff
c000345e:	eb 4a                	jmp    c00034aa <create_chain+0x1f5>
c0003460:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003464:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003467:	41                   	inc    ecx
c0003468:	39 d9                	cmp    ecx,ebx
c000346a:	75 19                	jne    c0003485 <create_chain+0x1d0>
c000346c:	b9 02 00 00 00       	mov    ecx,0x2
c0003471:	85 d2                	test   edx,edx
c0003473:	74 03                	je     c0003478 <create_chain+0x1c3>
c0003475:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003478:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000347b:	85 c0                	test   eax,eax
c000347d:	0f 85 63 fe ff ff    	jne    c00032e6 <create_chain+0x31>
c0003483:	eb b5                	jmp    c000343a <create_chain+0x185>
c0003485:	85 d2                	test   edx,edx
c0003487:	75 07                	jne    c0003490 <create_chain+0x1db>
c0003489:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003490:	89 d9                	mov    ecx,ebx
c0003492:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003496:	89 e8                	mov    eax,ebp
c0003498:	e8 bb fa ff ff       	call   c0002f58 <fill_last_frag>
c000349d:	85 c0                	test   eax,eax
c000349f:	75 b3                	jne    c0003454 <create_chain+0x19f>
c00034a1:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034a8:	eb 90                	jmp    c000343a <create_chain+0x185>
c00034aa:	83 c4 1c             	add    esp,0x1c
c00034ad:	89 d8                	mov    eax,ebx
c00034af:	5b                   	pop    ebx
c00034b0:	5e                   	pop    esi
c00034b1:	5f                   	pop    edi
c00034b2:	5d                   	pop    ebp
c00034b3:	c3                   	ret    

c00034b4 <remove_chain>:
c00034b4:	55                   	push   ebp
c00034b5:	57                   	push   edi
c00034b6:	56                   	push   esi
c00034b7:	53                   	push   ebx
c00034b8:	83 ec 1c             	sub    esp,0x1c
c00034bb:	83 fa 01             	cmp    edx,0x1
c00034be:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034c2:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034c4:	77 0a                	ja     c00034d0 <remove_chain+0x1c>
c00034c6:	b8 02 00 00 00       	mov    eax,0x2
c00034cb:	e9 24 01 00 00       	jmp    c00035f4 <remove_chain+0x140>
c00034d0:	89 d6                	mov    esi,edx
c00034d2:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034d5:	76 ef                	jbe    c00034c6 <remove_chain+0x12>
c00034d7:	89 c7                	mov    edi,eax
c00034d9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034de:	75 06                	jne    c00034e6 <remove_chain+0x32>
c00034e0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034e4:	eb 54                	jmp    c000353a <remove_chain+0x86>
c00034e6:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034e9:	75 06                	jne    c00034f1 <remove_chain+0x3d>
c00034eb:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034ef:	74 ef                	je     c00034e0 <remove_chain+0x2c>
c00034f1:	83 c9 ff             	or     ecx,0xffffffff
c00034f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034f8:	89 d8                	mov    eax,ebx
c00034fa:	e8 c3 f8 ff ff       	call   c0002dc2 <put_fat>
c00034ff:	85 c0                	test   eax,eax
c0003501:	74 dd                	je     c00034e0 <remove_chain+0x2c>
c0003503:	e9 ec 00 00 00       	jmp    c00035f4 <remove_chain+0x140>
c0003508:	83 f8 01             	cmp    eax,0x1
c000350b:	74 b9                	je     c00034c6 <remove_chain+0x12>
c000350d:	83 f8 ff             	cmp    eax,0xffffffff
c0003510:	74 6d                	je     c000357f <remove_chain+0xcb>
c0003512:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003515:	75 6f                	jne    c0003586 <remove_chain+0xd2>
c0003517:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000351a:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000351d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003520:	39 d0                	cmp    eax,edx
c0003522:	73 08                	jae    c000352c <remove_chain+0x78>
c0003524:	40                   	inc    eax
c0003525:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003529:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000352c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000352f:	39 e9                	cmp    ecx,ebp
c0003531:	75 64                	jne    c0003597 <remove_chain+0xe3>
c0003533:	89 ee                	mov    esi,ebp
c0003535:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003538:	76 0f                	jbe    c0003549 <remove_chain+0x95>
c000353a:	89 f2                	mov    edx,esi
c000353c:	89 f8                	mov    eax,edi
c000353e:	e8 84 fa ff ff       	call   c0002fc7 <get_fat>
c0003543:	89 c5                	mov    ebp,eax
c0003545:	85 c0                	test   eax,eax
c0003547:	75 bf                	jne    c0003508 <remove_chain+0x54>
c0003549:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000354c:	0f 85 a0 00 00 00    	jne    c00035f2 <remove_chain+0x13e>
c0003552:	eb 6c                	jmp    c00035c0 <remove_chain+0x10c>
c0003554:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003557:	84 c0                	test   al,al
c0003559:	75 7d                	jne    c00035d8 <remove_chain+0x124>
c000355b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000355e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003562:	0f 84 86 00 00 00    	je     c00035ee <remove_chain+0x13a>
c0003568:	89 da                	mov    edx,ebx
c000356a:	89 f8                	mov    eax,edi
c000356c:	e8 56 fa ff ff       	call   c0002fc7 <get_fat>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	0f 86 4c ff ff ff    	jbe    c00034c6 <remove_chain+0x12>
c000357a:	83 f8 ff             	cmp    eax,0xffffffff
c000357d:	75 4e                	jne    c00035cd <remove_chain+0x119>
c000357f:	b8 01 00 00 00       	mov    eax,0x1
c0003584:	eb 6e                	jmp    c00035f4 <remove_chain+0x140>
c0003586:	31 c9                	xor    ecx,ecx
c0003588:	89 f2                	mov    edx,esi
c000358a:	89 d8                	mov    eax,ebx
c000358c:	e8 31 f8 ff ff       	call   c0002dc2 <put_fat>
c0003591:	85 c0                	test   eax,eax
c0003593:	74 82                	je     c0003517 <remove_chain+0x63>
c0003595:	eb 5d                	jmp    c00035f4 <remove_chain+0x140>
c0003597:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000359a:	75 1b                	jne    c00035b7 <remove_chain+0x103>
c000359c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	83 ec 0c             	sub    esp,0xc
c00035a5:	6a 00                	push   0x0
c00035a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035ab:	e8 5d f7 ff ff       	call   c0002d0d <change_bitmap>
c00035b0:	83 c4 10             	add    esp,0x10
c00035b3:	85 c0                	test   eax,eax
c00035b5:	75 3d                	jne    c00035f4 <remove_chain+0x140>
c00035b7:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035bb:	e9 73 ff ff ff       	jmp    c0003533 <remove_chain+0x7f>
c00035c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035c5:	75 8d                	jne    c0003554 <remove_chain+0xa0>
c00035c7:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035cb:	eb 25                	jmp    c00035f2 <remove_chain+0x13e>
c00035cd:	8d 53 01             	lea    edx,[ebx+0x1]
c00035d0:	89 c3                	mov    ebx,eax
c00035d2:	39 c2                	cmp    edx,eax
c00035d4:	74 88                	je     c000355e <remove_chain+0xaa>
c00035d6:	eb 1a                	jmp    c00035f2 <remove_chain+0x13e>
c00035d8:	3c 03                	cmp    al,0x3
c00035da:	75 16                	jne    c00035f2 <remove_chain+0x13e>
c00035dc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035df:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035e3:	77 0d                	ja     c00035f2 <remove_chain+0x13e>
c00035e5:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035e8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035ec:	72 04                	jb     c00035f2 <remove_chain+0x13e>
c00035ee:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035f2:	31 c0                	xor    eax,eax
c00035f4:	83 c4 1c             	add    esp,0x1c
c00035f7:	5b                   	pop    ebx
c00035f8:	5e                   	pop    esi
c00035f9:	5f                   	pop    edi
c00035fa:	5d                   	pop    ebp
c00035fb:	c3                   	ret    

c00035fc <dir_clear>:
c00035fc:	55                   	push   ebp
c00035fd:	57                   	push   edi
c00035fe:	56                   	push   esi
c00035ff:	89 c6                	mov    esi,eax
c0003601:	53                   	push   ebx
c0003602:	83 ec 1c             	sub    esp,0x1c
c0003605:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003609:	e8 9d ed ff ff       	call   c00023ab <sync_window>
c000360e:	85 c0                	test   eax,eax
c0003610:	0f 85 de 00 00 00    	jne    c00036f4 <dir_clear+0xf8>
c0003616:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000361a:	89 f0                	mov    eax,esi
c000361c:	8d 6e 54             	lea    ebp,[esi+0x54]
c000361f:	e8 d6 e8 ff ff       	call   c0001efa <clst2sect>
c0003624:	b9 00 02 00 00       	mov    ecx,0x200
c0003629:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000362d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003631:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003634:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003637:	89 e8                	mov    eax,ebp
c0003639:	31 d2                	xor    edx,edx
c000363b:	e8 b5 e6 ff ff       	call   c0001cf5 <mem_set>
c0003640:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003644:	c1 e3 09             	shl    ebx,0x9
c0003647:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000364d:	76 1f                	jbe    c000366e <dir_clear+0x72>
c000364f:	bb 00 80 00 00       	mov    ebx,0x8000
c0003654:	eb 18                	jmp    c000366e <dir_clear+0x72>
c0003656:	83 ec 0c             	sub    esp,0xc
c0003659:	53                   	push   ebx
c000365a:	e8 35 4e 00 00       	call   c0008494 <ff_memalloc>
c000365f:	83 c4 10             	add    esp,0x10
c0003662:	89 c7                	mov    edi,eax
c0003664:	85 c0                	test   eax,eax
c0003666:	0f 85 8f 00 00 00    	jne    c00036fb <dir_clear+0xff>
c000366c:	d1 eb                	shr    ebx,1
c000366e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003674:	77 e0                	ja     c0003656 <dir_clear+0x5a>
c0003676:	31 db                	xor    ebx,ebx
c0003678:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000367c:	39 d8                	cmp    eax,ebx
c000367e:	76 66                	jbe    c00036e6 <dir_clear+0xea>
c0003680:	83 ec 0c             	sub    esp,0xc
c0003683:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003687:	6a 01                	push   0x1
c0003689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000368d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003691:	55                   	push   ebp
c0003692:	50                   	push   eax
c0003693:	e8 94 e5 ff ff       	call   c0001c2c <disk_write>
c0003698:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000369d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036a2:	83 c4 20             	add    esp,0x20
c00036a5:	85 c0                	test   eax,eax
c00036a7:	75 3d                	jne    c00036e6 <dir_clear+0xea>
c00036a9:	43                   	inc    ebx
c00036aa:	eb cc                	jmp    c0003678 <dir_clear+0x7c>
c00036ac:	83 ec 0c             	sub    esp,0xc
c00036af:	31 d2                	xor    edx,edx
c00036b1:	55                   	push   ebp
c00036b2:	89 d8                	mov    eax,ebx
c00036b4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036b8:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036bc:	52                   	push   edx
c00036bd:	50                   	push   eax
c00036be:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036c2:	57                   	push   edi
c00036c3:	50                   	push   eax
c00036c4:	e8 63 e5 ff ff       	call   c0001c2c <disk_write>
c00036c9:	83 c4 20             	add    esp,0x20
c00036cc:	85 c0                	test   eax,eax
c00036ce:	75 0a                	jne    c00036da <dir_clear+0xde>
c00036d0:	01 eb                	add    ebx,ebp
c00036d2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036d6:	39 d8                	cmp    eax,ebx
c00036d8:	77 d2                	ja     c00036ac <dir_clear+0xb0>
c00036da:	83 ec 0c             	sub    esp,0xc
c00036dd:	57                   	push   edi
c00036de:	e8 c7 4d 00 00       	call   c00084aa <ff_memfree>
c00036e3:	83 c4 10             	add    esp,0x10
c00036e6:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036ea:	39 d8                	cmp    eax,ebx
c00036ec:	0f 95 c0             	setne  al
c00036ef:	0f b6 c0             	movzx  eax,al
c00036f2:	eb 19                	jmp    c000370d <dir_clear+0x111>
c00036f4:	b8 01 00 00 00       	mov    eax,0x1
c00036f9:	eb 12                	jmp    c000370d <dir_clear+0x111>
c00036fb:	89 d9                	mov    ecx,ebx
c00036fd:	31 d2                	xor    edx,edx
c00036ff:	c1 eb 09             	shr    ebx,0x9
c0003702:	e8 ee e5 ff ff       	call   c0001cf5 <mem_set>
c0003707:	89 dd                	mov    ebp,ebx
c0003709:	31 db                	xor    ebx,ebx
c000370b:	eb c5                	jmp    c00036d2 <dir_clear+0xd6>
c000370d:	83 c4 1c             	add    esp,0x1c
c0003710:	5b                   	pop    ebx
c0003711:	5e                   	pop    esi
c0003712:	5f                   	pop    edi
c0003713:	5d                   	pop    ebp
c0003714:	c3                   	ret    

c0003715 <dir_next>:
c0003715:	55                   	push   ebp
c0003716:	57                   	push   edi
c0003717:	56                   	push   esi
c0003718:	53                   	push   ebx
c0003719:	89 c3                	mov    ebx,eax
c000371b:	83 ec 1c             	sub    esp,0x1c
c000371e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003720:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003724:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003727:	8d 78 20             	lea    edi,[eax+0x20]
c000372a:	31 c0                	xor    eax,eax
c000372c:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003730:	0f 94 c0             	sete   al
c0003733:	48                   	dec    eax
c0003734:	25 00 00 20 f0       	and    eax,0xf0200000
c0003739:	05 00 00 00 10       	add    eax,0x10000000
c000373e:	39 f8                	cmp    eax,edi
c0003740:	77 0e                	ja     c0003750 <dir_next+0x3b>
c0003742:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003749:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003750:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003753:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003756:	b8 04 00 00 00       	mov    eax,0x4
c000375b:	89 ce                	mov    esi,ecx
c000375d:	09 d6                	or     esi,edx
c000375f:	0f 84 da 00 00 00    	je     c000383f <dir_next+0x12a>
c0003765:	89 f8                	mov    eax,edi
c0003767:	25 ff 01 00 00       	and    eax,0x1ff
c000376c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003770:	0f 85 b9 00 00 00    	jne    c000382f <dir_next+0x11a>
c0003776:	83 c2 01             	add    edx,0x1
c0003779:	83 d1 00             	adc    ecx,0x0
c000377c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000377f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003782:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003785:	85 d2                	test   edx,edx
c0003787:	75 29                	jne    c00037b2 <dir_next+0x9d>
c0003789:	89 fa                	mov    edx,edi
c000378b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000378f:	c1 ea 05             	shr    edx,0x5
c0003792:	39 c2                	cmp    edx,eax
c0003794:	0f 82 95 00 00 00    	jb     c000382f <dir_next+0x11a>
c000379a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037a1:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037a8:	b8 04 00 00 00       	mov    eax,0x4
c00037ad:	e9 8d 00 00 00       	jmp    c000383f <dir_next+0x12a>
c00037b2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037b6:	89 f9                	mov    ecx,edi
c00037b8:	48                   	dec    eax
c00037b9:	c1 e9 09             	shr    ecx,0x9
c00037bc:	85 c8                	test   eax,ecx
c00037be:	75 6f                	jne    c000382f <dir_next+0x11a>
c00037c0:	89 d8                	mov    eax,ebx
c00037c2:	e8 00 f8 ff ff       	call   c0002fc7 <get_fat>
c00037c7:	89 c6                	mov    esi,eax
c00037c9:	83 f8 01             	cmp    eax,0x1
c00037cc:	77 07                	ja     c00037d5 <dir_next+0xc0>
c00037ce:	b8 02 00 00 00       	mov    eax,0x2
c00037d3:	eb 6a                	jmp    c000383f <dir_next+0x12a>
c00037d5:	83 f8 ff             	cmp    eax,0xffffffff
c00037d8:	75 07                	jne    c00037e1 <dir_next+0xcc>
c00037da:	b8 01 00 00 00       	mov    eax,0x1
c00037df:	eb 5e                	jmp    c000383f <dir_next+0x12a>
c00037e1:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037e4:	77 37                	ja     c000381d <dir_next+0x108>
c00037e6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037eb:	74 ad                	je     c000379a <dir_next+0x85>
c00037ed:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037f0:	89 d8                	mov    eax,ebx
c00037f2:	e8 be fa ff ff       	call   c00032b5 <create_chain>
c00037f7:	89 c6                	mov    esi,eax
c00037f9:	b8 07 00 00 00       	mov    eax,0x7
c00037fe:	85 f6                	test   esi,esi
c0003800:	74 3d                	je     c000383f <dir_next+0x12a>
c0003802:	83 fe 01             	cmp    esi,0x1
c0003805:	74 c7                	je     c00037ce <dir_next+0xb9>
c0003807:	83 fe ff             	cmp    esi,0xffffffff
c000380a:	74 ce                	je     c00037da <dir_next+0xc5>
c000380c:	89 f2                	mov    edx,esi
c000380e:	89 e8                	mov    eax,ebp
c0003810:	e8 e7 fd ff ff       	call   c00035fc <dir_clear>
c0003815:	85 c0                	test   eax,eax
c0003817:	75 c1                	jne    c00037da <dir_next+0xc5>
c0003819:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000381d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003820:	89 f2                	mov    edx,esi
c0003822:	89 e8                	mov    eax,ebp
c0003824:	e8 d1 e6 ff ff       	call   c0001efa <clst2sect>
c0003829:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000382c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000382f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003833:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003836:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000383a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000383d:	31 c0                	xor    eax,eax
c000383f:	83 c4 1c             	add    esp,0x1c
c0003842:	5b                   	pop    ebx
c0003843:	5e                   	pop    esi
c0003844:	5f                   	pop    edi
c0003845:	5d                   	pop    ebp
c0003846:	c3                   	ret    

c0003847 <load_xdir>:
c0003847:	55                   	push   ebp
c0003848:	57                   	push   edi
c0003849:	56                   	push   esi
c000384a:	89 c6                	mov    esi,eax
c000384c:	53                   	push   ebx
c000384d:	83 ec 1c             	sub    esp,0x1c
c0003850:	8b 00                	mov    eax,DWORD PTR [eax]
c0003852:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003855:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003858:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000385b:	e8 df eb ff ff       	call   c000243f <move_window>
c0003860:	89 c3                	mov    ebx,eax
c0003862:	85 c0                	test   eax,eax
c0003864:	0f 85 0c 01 00 00    	jne    c0003976 <load_xdir+0x12f>
c000386a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000386d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003870:	0f 85 fb 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c0003876:	89 f8                	mov    eax,edi
c0003878:	b9 20 00 00 00       	mov    ecx,0x20
c000387d:	e8 5e e4 ff ff       	call   c0001ce0 <mem_cpy>
c0003882:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003886:	40                   	inc    eax
c0003887:	c1 e0 05             	shl    eax,0x5
c000388a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000388e:	83 e8 60             	sub    eax,0x60
c0003891:	3d 00 02 00 00       	cmp    eax,0x200
c0003896:	0f 87 d5 00 00 00    	ja     c0003971 <load_xdir+0x12a>
c000389c:	31 d2                	xor    edx,edx
c000389e:	89 f0                	mov    eax,esi
c00038a0:	e8 70 fe ff ff       	call   c0003715 <dir_next>
c00038a5:	89 c3                	mov    ebx,eax
c00038a7:	83 f8 04             	cmp    eax,0x4
c00038aa:	0f 84 c1 00 00 00    	je     c0003971 <load_xdir+0x12a>
c00038b0:	85 c0                	test   eax,eax
c00038b2:	0f 85 be 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038b8:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038bb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038be:	8b 06                	mov    eax,DWORD PTR [esi]
c00038c0:	e8 7a eb ff ff       	call   c000243f <move_window>
c00038c5:	89 c3                	mov    ebx,eax
c00038c7:	85 c0                	test   eax,eax
c00038c9:	0f 85 a7 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038cf:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038d2:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038d5:	0f 85 96 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c00038db:	8d 47 20             	lea    eax,[edi+0x20]
c00038de:	b9 20 00 00 00       	mov    ecx,0x20
c00038e3:	e8 f8 e3 ff ff       	call   c0001ce0 <mem_cpy>
c00038e8:	31 d2                	xor    edx,edx
c00038ea:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038ee:	b9 0f 00 00 00       	mov    ecx,0xf
c00038f3:	83 c0 2c             	add    eax,0x2c
c00038f6:	f7 f1                	div    ecx
c00038f8:	c1 e0 05             	shl    eax,0x5
c00038fb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038ff:	77 70                	ja     c0003971 <load_xdir+0x12a>
c0003901:	bd 40 00 00 00       	mov    ebp,0x40
c0003906:	31 d2                	xor    edx,edx
c0003908:	89 f0                	mov    eax,esi
c000390a:	e8 06 fe ff ff       	call   c0003715 <dir_next>
c000390f:	89 c3                	mov    ebx,eax
c0003911:	83 f8 04             	cmp    eax,0x4
c0003914:	74 5b                	je     c0003971 <load_xdir+0x12a>
c0003916:	85 c0                	test   eax,eax
c0003918:	75 5c                	jne    c0003976 <load_xdir+0x12f>
c000391a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000391d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003920:	8b 06                	mov    eax,DWORD PTR [esi]
c0003922:	e8 18 eb ff ff       	call   c000243f <move_window>
c0003927:	89 c3                	mov    ebx,eax
c0003929:	85 c0                	test   eax,eax
c000392b:	75 49                	jne    c0003976 <load_xdir+0x12f>
c000392d:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003930:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003933:	75 3c                	jne    c0003971 <load_xdir+0x12a>
c0003935:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000393b:	77 0d                	ja     c000394a <load_xdir+0x103>
c000393d:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003940:	b9 20 00 00 00       	mov    ecx,0x20
c0003945:	e8 96 e3 ff ff       	call   c0001ce0 <mem_cpy>
c000394a:	83 c5 20             	add    ebp,0x20
c000394d:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003951:	77 b3                	ja     c0003906 <load_xdir+0xbf>
c0003953:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003959:	77 1b                	ja     c0003976 <load_xdir+0x12f>
c000395b:	89 f8                	mov    eax,edi
c000395d:	e8 cd e7 ff ff       	call   c000212f <xdir_sum>
c0003962:	89 c1                	mov    ecx,eax
c0003964:	8d 47 02             	lea    eax,[edi+0x2]
c0003967:	e8 f5 e2 ff ff       	call   c0001c61 <ld_word>
c000396c:	66 39 c1             	cmp    cx,ax
c000396f:	74 05                	je     c0003976 <load_xdir+0x12f>
c0003971:	bb 02 00 00 00       	mov    ebx,0x2
c0003976:	83 c4 1c             	add    esp,0x1c
c0003979:	89 d8                	mov    eax,ebx
c000397b:	5b                   	pop    ebx
c000397c:	5e                   	pop    esi
c000397d:	5f                   	pop    edi
c000397e:	5d                   	pop    ebp
c000397f:	c3                   	ret    

c0003980 <load_obj_xdir>:
c0003980:	53                   	push   ebx
c0003981:	89 c3                	mov    ebx,eax
c0003983:	83 ec 08             	sub    esp,0x8
c0003986:	8b 02                	mov    eax,DWORD PTR [edx]
c0003988:	89 03                	mov    DWORD PTR [ebx],eax
c000398a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000398d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003990:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003993:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003996:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003999:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039a0:	30 c0                	xor    al,al
c00039a2:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039a9:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039ac:	89 d8                	mov    eax,ebx
c00039ae:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039b1:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039b4:	e8 04 f8 ff ff       	call   c00031bd <dir_sdi>
c00039b9:	85 c0                	test   eax,eax
c00039bb:	75 0b                	jne    c00039c8 <load_obj_xdir+0x48>
c00039bd:	89 d8                	mov    eax,ebx
c00039bf:	83 c4 08             	add    esp,0x8
c00039c2:	5b                   	pop    ebx
c00039c3:	e9 7f fe ff ff       	jmp    c0003847 <load_xdir>
c00039c8:	83 c4 08             	add    esp,0x8
c00039cb:	5b                   	pop    ebx
c00039cc:	c3                   	ret    

c00039cd <dir_read>:
c00039cd:	55                   	push   ebp
c00039ce:	bd 04 00 00 00       	mov    ebp,0x4
c00039d3:	57                   	push   edi
c00039d4:	56                   	push   esi
c00039d5:	be ff ff ff ff       	mov    esi,0xffffffff
c00039da:	53                   	push   ebx
c00039db:	89 c3                	mov    ebx,eax
c00039dd:	83 ec 1c             	sub    esp,0x1c
c00039e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e4:	8b 38                	mov    edi,DWORD PTR [eax]
c00039e6:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039eb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039ee:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039f1:	89 c8                	mov    eax,ecx
c00039f3:	09 d0                	or     eax,edx
c00039f5:	0f 84 25 01 00 00    	je     c0003b20 <dir_read+0x153>
c00039fb:	89 f8                	mov    eax,edi
c00039fd:	e8 3d ea ff ff       	call   c000243f <move_window>
c0003a02:	89 c5                	mov    ebp,eax
c0003a04:	85 c0                	test   eax,eax
c0003a06:	0f 85 23 01 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a0c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a0f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a11:	84 c9                	test   cl,cl
c0003a13:	0f 84 11 01 00 00    	je     c0003b2a <dir_read+0x15d>
c0003a19:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a1c:	75 48                	jne    c0003a66 <dir_read+0x99>
c0003a1e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a23:	74 10                	je     c0003a35 <dir_read+0x68>
c0003a25:	80 f9 83             	cmp    cl,0x83
c0003a28:	0f 85 dd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a2e:	31 ed                	xor    ebp,ebp
c0003a30:	e9 08 01 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a35:	80 f9 85             	cmp    cl,0x85
c0003a38:	0f 85 cd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a3e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a41:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a44:	89 d8                	mov    eax,ebx
c0003a46:	e8 fc fd ff ff       	call   c0003847 <load_xdir>
c0003a4b:	89 c5                	mov    ebp,eax
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	0f 85 da 00 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a55:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a58:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a5b:	83 e0 3f             	and    eax,0x3f
c0003a5e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a61:	e9 d7 00 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a66:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a69:	83 e0 3f             	and    eax,0x3f
c0003a6c:	80 f9 2e             	cmp    cl,0x2e
c0003a6f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a73:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a76:	0f 84 8a 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a7c:	80 f9 e5             	cmp    cl,0xe5
c0003a7f:	0f 84 81 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a89:	83 e0 1f             	and    eax,0x1f
c0003a8c:	83 f8 08             	cmp    eax,0x8
c0003a8f:	0f 94 c0             	sete   al
c0003a92:	0f b6 c0             	movzx  eax,al
c0003a95:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a99:	75 6b                	jne    c0003b06 <dir_read+0x139>
c0003a9b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aa0:	75 44                	jne    c0003ae6 <dir_read+0x119>
c0003aa2:	f6 c1 40             	test   cl,0x40
c0003aa5:	74 12                	je     c0003ab9 <dir_read+0xec>
c0003aa7:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003aaa:	83 e1 bf             	and    ecx,0xffffffbf
c0003aad:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ab1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ab4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ab7:	eb 06                	jmp    c0003abf <dir_read+0xf2>
c0003ab9:	89 f0                	mov    eax,esi
c0003abb:	38 c8                	cmp    al,cl
c0003abd:	75 47                	jne    c0003b06 <dir_read+0x139>
c0003abf:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003ac3:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ac8:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003acb:	75 3e                	jne    c0003b0b <dir_read+0x13e>
c0003acd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ad1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ad4:	e8 8a e4 ff ff       	call   c0001f63 <pick_lfn>
c0003ad9:	85 c0                	test   eax,eax
c0003adb:	74 2e                	je     c0003b0b <dir_read+0x13e>
c0003add:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ae1:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003ae4:	eb 25                	jmp    c0003b0b <dir_read+0x13e>
c0003ae6:	89 f0                	mov    eax,esi
c0003ae8:	84 c0                	test   al,al
c0003aea:	75 11                	jne    c0003afd <dir_read+0x130>
c0003aec:	89 d0                	mov    eax,edx
c0003aee:	e8 2a e6 ff ff       	call   c000211d <sum_sfn>
c0003af3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003af7:	0f 84 31 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003afd:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b04:	eb 37                	jmp    c0003b3d <dir_read+0x170>
c0003b06:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b0b:	31 d2                	xor    edx,edx
c0003b0d:	89 d8                	mov    eax,ebx
c0003b0f:	e8 01 fc ff ff       	call   c0003715 <dir_next>
c0003b14:	89 c5                	mov    ebp,eax
c0003b16:	85 c0                	test   eax,eax
c0003b18:	0f 84 cd fe ff ff    	je     c00039eb <dir_read+0x1e>
c0003b1e:	eb 0f                	jmp    c0003b2f <dir_read+0x162>
c0003b20:	85 ed                	test   ebp,ebp
c0003b22:	0f 84 06 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003b28:	eb 05                	jmp    c0003b2f <dir_read+0x162>
c0003b2a:	bd 04 00 00 00       	mov    ebp,0x4
c0003b2f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b36:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b3d:	83 c4 1c             	add    esp,0x1c
c0003b40:	89 e8                	mov    eax,ebp
c0003b42:	5b                   	pop    ebx
c0003b43:	5e                   	pop    esi
c0003b44:	5f                   	pop    edi
c0003b45:	5d                   	pop    ebp
c0003b46:	c3                   	ret    

c0003b47 <dir_alloc>:
c0003b47:	55                   	push   ebp
c0003b48:	89 d5                	mov    ebp,edx
c0003b4a:	57                   	push   edi
c0003b4b:	31 d2                	xor    edx,edx
c0003b4d:	56                   	push   esi
c0003b4e:	53                   	push   ebx
c0003b4f:	89 c3                	mov    ebx,eax
c0003b51:	83 ec 0c             	sub    esp,0xc
c0003b54:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b56:	e8 62 f6 ff ff       	call   c00031bd <dir_sdi>
c0003b5b:	85 c0                	test   eax,eax
c0003b5d:	75 4e                	jne    c0003bad <dir_alloc+0x66>
c0003b5f:	31 f6                	xor    esi,esi
c0003b61:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b64:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b67:	89 f8                	mov    eax,edi
c0003b69:	e8 d1 e8 ff ff       	call   c000243f <move_window>
c0003b6e:	85 c0                	test   eax,eax
c0003b70:	75 3b                	jne    c0003bad <dir_alloc+0x66>
c0003b72:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b75:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b78:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b7a:	75 07                	jne    c0003b83 <dir_alloc+0x3c>
c0003b7c:	f7 d2                	not    edx
c0003b7e:	c0 ea 07             	shr    dl,0x7
c0003b81:	eb 0d                	jmp    c0003b90 <dir_alloc+0x49>
c0003b83:	84 d2                	test   dl,dl
c0003b85:	0f 94 c1             	sete   cl
c0003b88:	80 fa e5             	cmp    dl,0xe5
c0003b8b:	0f 94 c2             	sete   dl
c0003b8e:	09 ca                	or     edx,ecx
c0003b90:	84 d2                	test   dl,dl
c0003b92:	74 07                	je     c0003b9b <dir_alloc+0x54>
c0003b94:	46                   	inc    esi
c0003b95:	39 ee                	cmp    esi,ebp
c0003b97:	75 04                	jne    c0003b9d <dir_alloc+0x56>
c0003b99:	eb 1c                	jmp    c0003bb7 <dir_alloc+0x70>
c0003b9b:	31 f6                	xor    esi,esi
c0003b9d:	ba 01 00 00 00       	mov    edx,0x1
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 6c fb ff ff       	call   c0003715 <dir_next>
c0003ba9:	85 c0                	test   eax,eax
c0003bab:	74 b4                	je     c0003b61 <dir_alloc+0x1a>
c0003bad:	83 f8 04             	cmp    eax,0x4
c0003bb0:	75 05                	jne    c0003bb7 <dir_alloc+0x70>
c0003bb2:	b8 07 00 00 00       	mov    eax,0x7
c0003bb7:	83 c4 0c             	add    esp,0xc
c0003bba:	5b                   	pop    ebx
c0003bbb:	5e                   	pop    esi
c0003bbc:	5f                   	pop    edi
c0003bbd:	5d                   	pop    ebp
c0003bbe:	c3                   	ret    

c0003bbf <store_xdir>:
c0003bbf:	55                   	push   ebp
c0003bc0:	57                   	push   edi
c0003bc1:	89 c7                	mov    edi,eax
c0003bc3:	56                   	push   esi
c0003bc4:	53                   	push   ebx
c0003bc5:	83 ec 0c             	sub    esp,0xc
c0003bc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bca:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bcd:	89 e8                	mov    eax,ebp
c0003bcf:	e8 5b e5 ff ff       	call   c000212f <xdir_sum>
c0003bd4:	0f b7 d0             	movzx  edx,ax
c0003bd7:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bda:	e8 f4 e0 ff ff       	call   c0001cd3 <st_word>
c0003bdf:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003be3:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003be6:	89 f8                	mov    eax,edi
c0003be8:	e8 d0 f5 ff ff       	call   c00031bd <dir_sdi>
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	85 f6                	test   esi,esi
c0003bf1:	75 3d                	jne    c0003c30 <store_xdir+0x71>
c0003bf3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bf6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bf9:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bfb:	e8 3f e8 ff ff       	call   c000243f <move_window>
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	85 c0                	test   eax,eax
c0003c04:	75 2a                	jne    c0003c30 <store_xdir+0x71>
c0003c06:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c09:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0e:	89 ea                	mov    edx,ebp
c0003c10:	e8 cb e0 ff ff       	call   c0001ce0 <mem_cpy>
c0003c15:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c17:	85 db                	test   ebx,ebx
c0003c19:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c1d:	74 11                	je     c0003c30 <store_xdir+0x71>
c0003c1f:	31 d2                	xor    edx,edx
c0003c21:	89 f8                	mov    eax,edi
c0003c23:	83 c5 20             	add    ebp,0x20
c0003c26:	e8 ea fa ff ff       	call   c0003715 <dir_next>
c0003c2b:	4b                   	dec    ebx
c0003c2c:	89 c6                	mov    esi,eax
c0003c2e:	eb bf                	jmp    c0003bef <store_xdir+0x30>
c0003c30:	89 f0                	mov    eax,esi
c0003c32:	83 fe 02             	cmp    esi,0x2
c0003c35:	76 05                	jbe    c0003c3c <store_xdir+0x7d>
c0003c37:	b8 02 00 00 00       	mov    eax,0x2
c0003c3c:	83 c4 0c             	add    esp,0xc
c0003c3f:	5b                   	pop    ebx
c0003c40:	5e                   	pop    esi
c0003c41:	5f                   	pop    edi
c0003c42:	5d                   	pop    ebp
c0003c43:	c3                   	ret    

c0003c44 <dir_remove>:
c0003c44:	57                   	push   edi
c0003c45:	56                   	push   esi
c0003c46:	53                   	push   ebx
c0003c47:	89 c3                	mov    ebx,eax
c0003c49:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c4c:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c4e:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c51:	83 fa ff             	cmp    edx,0xffffffff
c0003c54:	74 09                	je     c0003c5f <dir_remove+0x1b>
c0003c56:	e8 62 f5 ff ff       	call   c00031bd <dir_sdi>
c0003c5b:	85 c0                	test   eax,eax
c0003c5d:	75 41                	jne    c0003ca0 <dir_remove+0x5c>
c0003c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c62:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c65:	89 f0                	mov    eax,esi
c0003c67:	e8 d3 e7 ff ff       	call   c000243f <move_window>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	75 26                	jne    c0003c96 <dir_remove+0x52>
c0003c70:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c73:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c76:	75 05                	jne    c0003c7d <dir_remove+0x39>
c0003c78:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c7b:	eb 03                	jmp    c0003c80 <dir_remove+0x3c>
c0003c7d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c80:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c84:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c87:	73 17                	jae    c0003ca0 <dir_remove+0x5c>
c0003c89:	31 d2                	xor    edx,edx
c0003c8b:	89 d8                	mov    eax,ebx
c0003c8d:	e8 83 fa ff ff       	call   c0003715 <dir_next>
c0003c92:	85 c0                	test   eax,eax
c0003c94:	74 c9                	je     c0003c5f <dir_remove+0x1b>
c0003c96:	83 f8 04             	cmp    eax,0x4
c0003c99:	75 05                	jne    c0003ca0 <dir_remove+0x5c>
c0003c9b:	b8 02 00 00 00       	mov    eax,0x2
c0003ca0:	5b                   	pop    ebx
c0003ca1:	5e                   	pop    esi
c0003ca2:	5f                   	pop    edi
c0003ca3:	c3                   	ret    

c0003ca4 <create_name>:
c0003ca4:	55                   	push   ebp
c0003ca5:	89 d5                	mov    ebp,edx
c0003ca7:	57                   	push   edi
c0003ca8:	89 c7                	mov    edi,eax
c0003caa:	56                   	push   esi
c0003cab:	31 f6                	xor    esi,esi
c0003cad:	53                   	push   ebx
c0003cae:	83 ec 3c             	sub    esp,0x3c
c0003cb1:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cb3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cb7:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cc0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003cc4:	e8 72 e0 ff ff       	call   c0001d3b <tchar2uni>
c0003cc9:	89 c3                	mov    ebx,eax
c0003ccb:	83 f8 ff             	cmp    eax,0xffffffff
c0003cce:	75 0a                	jne    c0003cda <create_name+0x36>
c0003cd0:	b8 06 00 00 00       	mov    eax,0x6
c0003cd5:	e9 9e 02 00 00       	jmp    c0003f78 <create_name+0x2d4>
c0003cda:	3d ff ff 00 00       	cmp    eax,0xffff
c0003cdf:	76 0c                	jbe    c0003ced <create_name+0x49>
c0003ce1:	c1 e8 10             	shr    eax,0x10
c0003ce4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ce8:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cec:	46                   	inc    esi
c0003ced:	66 83 fb 1f          	cmp    bx,0x1f
c0003cf1:	76 4f                	jbe    c0003d42 <create_name+0x9e>
c0003cf3:	66 83 fb 5c          	cmp    bx,0x5c
c0003cf7:	74 35                	je     c0003d2e <create_name+0x8a>
c0003cf9:	66 83 fb 2f          	cmp    bx,0x2f
c0003cfd:	74 2f                	je     c0003d2e <create_name+0x8a>
c0003cff:	66 83 fb 7f          	cmp    bx,0x7f
c0003d03:	77 11                	ja     c0003d16 <create_name+0x72>
c0003d05:	0f b7 d3             	movzx  edx,bx
c0003d08:	b8 12 95 02 c0       	mov    eax,0xc0029512
c0003d0d:	e8 11 e0 ff ff       	call   c0001d23 <chk_chr>
c0003d12:	85 c0                	test   eax,eax
c0003d14:	75 ba                	jne    c0003cd0 <create_name+0x2c>
c0003d16:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d1c:	77 b2                	ja     c0003cd0 <create_name+0x2c>
c0003d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d22:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d26:	46                   	inc    esi
c0003d27:	eb 97                	jmp    c0003cc0 <create_name+0x1c>
c0003d29:	40                   	inc    eax
c0003d2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d32:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d34:	80 fa 2f             	cmp    dl,0x2f
c0003d37:	74 f0                	je     c0003d29 <create_name+0x85>
c0003d39:	80 fa 5c             	cmp    dl,0x5c
c0003d3c:	74 eb                	je     c0003d29 <create_name+0x85>
c0003d3e:	31 db                	xor    ebx,ebx
c0003d40:	eb 02                	jmp    c0003d44 <create_name+0xa0>
c0003d42:	b3 04                	mov    bl,0x4
c0003d44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d48:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d4b:	85 f6                	test   esi,esi
c0003d4d:	74 18                	je     c0003d67 <create_name+0xc3>
c0003d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d53:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d58:	66 83 f8 20          	cmp    ax,0x20
c0003d5c:	74 06                	je     c0003d64 <create_name+0xc0>
c0003d5e:	66 83 f8 2e          	cmp    ax,0x2e
c0003d62:	75 03                	jne    c0003d67 <create_name+0xc3>
c0003d64:	4e                   	dec    esi
c0003d65:	eb e4                	jmp    c0003d4b <create_name+0xa7>
c0003d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6b:	31 ed                	xor    ebp,ebp
c0003d6d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d73:	85 f6                	test   esi,esi
c0003d75:	0f 84 55 ff ff ff    	je     c0003cd0 <create_name+0x2c>
c0003d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d7f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d82:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d86:	66 83 f8 20          	cmp    ax,0x20
c0003d8a:	75 04                	jne    c0003d90 <create_name+0xec>
c0003d8c:	89 d5                	mov    ebp,edx
c0003d8e:	eb eb                	jmp    c0003d7b <create_name+0xd7>
c0003d90:	85 ed                	test   ebp,ebp
c0003d92:	75 06                	jne    c0003d9a <create_name+0xf6>
c0003d94:	66 83 f8 2e          	cmp    ax,0x2e
c0003d98:	75 08                	jne    c0003da2 <create_name+0xfe>
c0003d9a:	83 cb 03             	or     ebx,0x3
c0003d9d:	eb 03                	jmp    c0003da2 <create_name+0xfe>
c0003d9f:	4e                   	dec    esi
c0003da0:	74 0c                	je     c0003dae <create_name+0x10a>
c0003da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da6:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003dac:	75 f1                	jne    c0003d9f <create_name+0xfb>
c0003dae:	b9 0b 00 00 00       	mov    ecx,0xb
c0003db3:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003db6:	ba 20 00 00 00       	mov    edx,0x20
c0003dbb:	e8 35 df ff ff       	call   c0001cf5 <mem_set>
c0003dc0:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dc8:	31 c9                	xor    ecx,ecx
c0003dca:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dcf:	8d 45 01             	lea    eax,[ebp+0x1]
c0003dd2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dda:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003dde:	66 85 ed             	test   bp,bp
c0003de1:	0f 84 30 01 00 00    	je     c0003f17 <create_name+0x273>
c0003de7:	66 83 fd 20          	cmp    bp,0x20
c0003deb:	74 10                	je     c0003dfd <create_name+0x159>
c0003ded:	66 83 fd 2e          	cmp    bp,0x2e
c0003df1:	75 13                	jne    c0003e06 <create_name+0x162>
c0003df3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df7:	0f 84 6b 01 00 00    	je     c0003f68 <create_name+0x2c4>
c0003dfd:	83 cb 03             	or     ebx,0x3
c0003e00:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e04:	eb c9                	jmp    c0003dcf <create_name+0x12b>
c0003e06:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e0a:	73 0b                	jae    c0003e17 <create_name+0x173>
c0003e0c:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e10:	75 47                	jne    c0003e59 <create_name+0x1b5>
c0003e12:	e9 51 01 00 00       	jmp    c0003f68 <create_name+0x2c4>
c0003e17:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e1c:	75 10                	jne    c0003e2e <create_name+0x18a>
c0003e1e:	83 cb 03             	or     ebx,0x3
c0003e21:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e29:	e9 e9 00 00 00       	jmp    c0003f17 <create_name+0x273>
c0003e2e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e32:	74 0d                	je     c0003e41 <create_name+0x19d>
c0003e34:	83 cb 03             	or     ebx,0x3
c0003e37:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e3b:	0f 87 d6 00 00 00    	ja     c0003f17 <create_name+0x273>
c0003e41:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e46:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e4a:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e52:	b9 08 00 00 00       	mov    ecx,0x8
c0003e57:	eb a7                	jmp    c0003e00 <create_name+0x15c>
c0003e59:	66 83 fd 7f          	cmp    bp,0x7f
c0003e5d:	76 68                	jbe    c0003ec7 <create_name+0x223>
c0003e5f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e63:	88 da                	mov    dl,bl
c0003e65:	83 ca 02             	or     edx,0x2
c0003e68:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e6c:	50                   	push   eax
c0003e6d:	50                   	push   eax
c0003e6e:	68 b5 01 00 00       	push   0x1b5
c0003e73:	55                   	push   ebp
c0003e74:	e8 48 46 00 00       	call   c00084c1 <ff_uni2oem>
c0003e79:	83 c4 10             	add    esp,0x10
c0003e7c:	89 c5                	mov    ebp,eax
c0003e7e:	a8 80                	test   al,0x80
c0003e80:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e88:	74 0c                	je     c0003e96 <create_name+0x1f2>
c0003e8a:	83 e5 7f             	and    ebp,0x7f
c0003e8d:	0f b6 ad 60 94 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6ba0]
c0003e94:	eb 2a                	jmp    c0003ec0 <create_name+0x21c>
c0003e96:	66 3d ff 00          	cmp    ax,0xff
c0003e9a:	76 24                	jbe    c0003ec0 <create_name+0x21c>
c0003e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea0:	48                   	dec    eax
c0003ea1:	39 c8                	cmp    eax,ecx
c0003ea3:	77 0c                	ja     c0003eb1 <create_name+0x20d>
c0003ea5:	83 cb 03             	or     ebx,0x3
c0003ea8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eac:	e9 4f ff ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003eb1:	89 e8                	mov    eax,ebp
c0003eb3:	88 d3                	mov    bl,dl
c0003eb5:	66 c1 e8 08          	shr    ax,0x8
c0003eb9:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ebd:	41                   	inc    ecx
c0003ebe:	eb 4b                	jmp    c0003f0b <create_name+0x267>
c0003ec0:	88 d3                	mov    bl,dl
c0003ec2:	66 85 ed             	test   bp,bp
c0003ec5:	74 19                	je     c0003ee0 <create_name+0x23c>
c0003ec7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ecb:	0f b7 d5             	movzx  edx,bp
c0003ece:	b8 1b 95 02 c0       	mov    eax,0xc002951b
c0003ed3:	e8 4b de ff ff       	call   c0001d23 <chk_chr>
c0003ed8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003edc:	85 c0                	test   eax,eax
c0003ede:	74 0a                	je     c0003eea <create_name+0x246>
c0003ee0:	83 cb 03             	or     ebx,0x3
c0003ee3:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ee8:	eb 21                	jmp    c0003f0b <create_name+0x267>
c0003eea:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eed:	66 83 f8 19          	cmp    ax,0x19
c0003ef1:	77 07                	ja     c0003efa <create_name+0x256>
c0003ef3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ef8:	eb 11                	jmp    c0003f0b <create_name+0x267>
c0003efa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003efd:	66 83 f8 19          	cmp    ax,0x19
c0003f01:	77 08                	ja     c0003f0b <create_name+0x267>
c0003f03:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f08:	83 ed 20             	sub    ebp,0x20
c0003f0b:	89 e8                	mov    eax,ebp
c0003f0d:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f11:	41                   	inc    ecx
c0003f12:	e9 e9 fe ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003f17:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f1b:	75 04                	jne    c0003f21 <create_name+0x27d>
c0003f1d:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f21:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f26:	75 05                	jne    c0003f2d <create_name+0x289>
c0003f28:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f31:	83 e0 0c             	and    eax,0xc
c0003f34:	3c 0c                	cmp    al,0xc
c0003f36:	74 0b                	je     c0003f43 <create_name+0x29f>
c0003f38:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f3c:	83 e0 03             	and    eax,0x3
c0003f3f:	3c 03                	cmp    al,0x3
c0003f41:	75 05                	jne    c0003f48 <create_name+0x2a4>
c0003f43:	83 cb 02             	or     ebx,0x2
c0003f46:	eb 19                	jmp    c0003f61 <create_name+0x2bd>
c0003f48:	f6 c3 02             	test   bl,0x2
c0003f4b:	75 14                	jne    c0003f61 <create_name+0x2bd>
c0003f4d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f52:	74 03                	je     c0003f57 <create_name+0x2b3>
c0003f54:	83 cb 10             	or     ebx,0x10
c0003f57:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f5c:	74 03                	je     c0003f61 <create_name+0x2bd>
c0003f5e:	83 cb 08             	or     ebx,0x8
c0003f61:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f64:	31 c0                	xor    eax,eax
c0003f66:	eb 10                	jmp    c0003f78 <create_name+0x2d4>
c0003f68:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f6d:	0f 85 ce fe ff ff    	jne    c0003e41 <create_name+0x19d>
c0003f73:	e9 a6 fe ff ff       	jmp    c0003e1e <create_name+0x17a>
c0003f78:	83 c4 3c             	add    esp,0x3c
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	5f                   	pop    edi
c0003f7e:	5d                   	pop    ebp
c0003f7f:	c3                   	ret    

c0003f80 <xname_sum>:
c0003f80:	56                   	push   esi
c0003f81:	53                   	push   ebx
c0003f82:	89 c6                	mov    esi,eax
c0003f84:	51                   	push   ecx
c0003f85:	31 db                	xor    ebx,ebx
c0003f87:	83 c6 02             	add    esi,0x2
c0003f8a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f8e:	66 85 c0             	test   ax,ax
c0003f91:	74 1f                	je     c0003fb2 <xname_sum+0x32>
c0003f93:	83 ec 0c             	sub    esp,0xc
c0003f96:	66 d1 cb             	ror    bx,1
c0003f99:	50                   	push   eax
c0003f9a:	e8 1e 46 00 00       	call   c00085bd <ff_wtoupper>
c0003f9f:	83 c4 10             	add    esp,0x10
c0003fa2:	0f b6 d0             	movzx  edx,al
c0003fa5:	66 c1 e8 08          	shr    ax,0x8
c0003fa9:	01 d3                	add    ebx,edx
c0003fab:	66 d1 cb             	ror    bx,1
c0003fae:	01 c3                	add    ebx,eax
c0003fb0:	eb d5                	jmp    c0003f87 <xname_sum+0x7>
c0003fb2:	89 d8                	mov    eax,ebx
c0003fb4:	5a                   	pop    edx
c0003fb5:	5b                   	pop    ebx
c0003fb6:	5e                   	pop    esi
c0003fb7:	c3                   	ret    

c0003fb8 <create_xdir>:
c0003fb8:	55                   	push   ebp
c0003fb9:	b9 40 00 00 00       	mov    ecx,0x40
c0003fbe:	57                   	push   edi
c0003fbf:	bd 01 00 00 00       	mov    ebp,0x1
c0003fc4:	56                   	push   esi
c0003fc5:	31 ff                	xor    edi,edi
c0003fc7:	53                   	push   ebx
c0003fc8:	be 40 00 00 00       	mov    esi,0x40
c0003fcd:	89 c3                	mov    ebx,eax
c0003fcf:	83 ec 1c             	sub    esp,0x1c
c0003fd2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fd6:	31 d2                	xor    edx,edx
c0003fd8:	e8 18 dd ff ff       	call   c0001cf5 <mem_set>
c0003fdd:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fe0:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fe4:	31 c9                	xor    ecx,ecx
c0003fe6:	8d 46 01             	lea    eax,[esi+0x1]
c0003fe9:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fed:	83 c6 02             	add    esi,0x2
c0003ff0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ff4:	66 85 ed             	test   bp,bp
c0003ff7:	74 12                	je     c000400b <create_xdir+0x53>
c0003ff9:	0f b6 c1             	movzx  eax,cl
c0003ffc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004000:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0004004:	66 83 fd 01          	cmp    bp,0x1
c0004008:	80 d9 ff             	sbb    cl,0xff
c000400b:	8d 04 33             	lea    eax,[ebx+esi*1]
c000400e:	0f b7 d5             	movzx  edx,bp
c0004011:	83 c6 02             	add    esi,0x2
c0004014:	e8 ba dc ff ff       	call   c0001cd3 <st_word>
c0004019:	f7 c6 1f 00 00 00    	test   esi,0x1f
c000401f:	75 d3                	jne    c0003ff4 <create_xdir+0x3c>
c0004021:	8d 47 01             	lea    eax,[edi+0x1]
c0004024:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004028:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000402c:	0f b6 c1             	movzx  eax,cl
c000402f:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004034:	74 07                	je     c000403d <create_xdir+0x85>
c0004036:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c000403b:	eb a9                	jmp    c0003fe6 <create_xdir+0x2e>
c000403d:	8d 47 02             	lea    eax,[edi+0x2]
c0004040:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004043:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004046:	89 d0                	mov    eax,edx
c0004048:	e8 33 ff ff ff       	call   c0003f80 <xname_sum>
c000404d:	83 c4 1c             	add    esp,0x1c
c0004050:	0f b7 d0             	movzx  edx,ax
c0004053:	8d 43 24             	lea    eax,[ebx+0x24]
c0004056:	5b                   	pop    ebx
c0004057:	5e                   	pop    esi
c0004058:	5f                   	pop    edi
c0004059:	5d                   	pop    ebp
c000405a:	e9 74 dc ff ff       	jmp    c0001cd3 <st_word>

c000405f <cmp_lfn>:
c000405f:	55                   	push   ebp
c0004060:	57                   	push   edi
c0004061:	89 d7                	mov    edi,edx
c0004063:	56                   	push   esi
c0004064:	53                   	push   ebx
c0004065:	83 ec 1c             	sub    esp,0x1c
c0004068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000406c:	8d 42 1a             	lea    eax,[edx+0x1a]
c000406f:	e8 ed db ff ff       	call   c0001c61 <ld_word>
c0004074:	66 85 c0             	test   ax,ax
c0004077:	74 07                	je     c0004080 <cmp_lfn+0x21>
c0004079:	31 c0                	xor    eax,eax
c000407b:	e9 9a 00 00 00       	jmp    c000411a <cmp_lfn+0xbb>
c0004080:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004082:	bd 01 00 00 00       	mov    ebp,0x1
c0004087:	83 e3 3f             	and    ebx,0x3f
c000408a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004092:	4b                   	dec    ebx
c0004093:	6b db 0d             	imul   ebx,ebx,0xd
c0004096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000409a:	0f b6 80 e0 94 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6b20]
c00040a1:	01 f8                	add    eax,edi
c00040a3:	e8 b9 db ff ff       	call   c0001c61 <ld_word>
c00040a8:	66 85 ed             	test   bp,bp
c00040ab:	89 c6                	mov    esi,eax
c00040ad:	74 3c                	je     c00040eb <cmp_lfn+0x8c>
c00040af:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040b5:	77 c2                	ja     c0004079 <cmp_lfn+0x1a>
c00040b7:	83 ec 0c             	sub    esp,0xc
c00040ba:	0f b7 c0             	movzx  eax,ax
c00040bd:	50                   	push   eax
c00040be:	e8 fa 44 00 00       	call   c00085bd <ff_wtoupper>
c00040c3:	89 c5                	mov    ebp,eax
c00040c5:	8d 43 01             	lea    eax,[ebx+0x1]
c00040c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040d0:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040d7:	e8 e1 44 00 00       	call   c00085bd <ff_wtoupper>
c00040dc:	83 c4 10             	add    esp,0x10
c00040df:	39 c5                	cmp    ebp,eax
c00040e1:	75 96                	jne    c0004079 <cmp_lfn+0x1a>
c00040e3:	89 f5                	mov    ebp,esi
c00040e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040e9:	eb 04                	jmp    c00040ef <cmp_lfn+0x90>
c00040eb:	66 46                	inc    si
c00040ed:	75 8a                	jne    c0004079 <cmp_lfn+0x1a>
c00040ef:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040f3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040f8:	75 9c                	jne    c0004096 <cmp_lfn+0x37>
c00040fa:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040fd:	74 16                	je     c0004115 <cmp_lfn+0xb6>
c00040ff:	66 85 ed             	test   bp,bp
c0004102:	74 11                	je     c0004115 <cmp_lfn+0xb6>
c0004104:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004108:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000410d:	0f 94 c0             	sete   al
c0004110:	0f b6 c0             	movzx  eax,al
c0004113:	eb 05                	jmp    c000411a <cmp_lfn+0xbb>
c0004115:	b8 01 00 00 00       	mov    eax,0x1
c000411a:	83 c4 1c             	add    esp,0x1c
c000411d:	5b                   	pop    ebx
c000411e:	5e                   	pop    esi
c000411f:	5f                   	pop    edi
c0004120:	5d                   	pop    ebp
c0004121:	c3                   	ret    

c0004122 <dir_find>:
c0004122:	55                   	push   ebp
c0004123:	31 d2                	xor    edx,edx
c0004125:	57                   	push   edi
c0004126:	56                   	push   esi
c0004127:	53                   	push   ebx
c0004128:	89 c3                	mov    ebx,eax
c000412a:	83 ec 1c             	sub    esp,0x1c
c000412d:	8b 30                	mov    esi,DWORD PTR [eax]
c000412f:	e8 89 f0 ff ff       	call   c00031bd <dir_sdi>
c0004134:	89 04 24             	mov    DWORD PTR [esp],eax
c0004137:	85 c0                	test   eax,eax
c0004139:	0f 85 9e 01 00 00    	jne    c00042dd <dir_find+0x1bb>
c000413f:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004142:	0f 85 8d 00 00 00    	jne    c00041d5 <dir_find+0xb3>
c0004148:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000414b:	e8 30 fe ff ff       	call   c0003f80 <xname_sum>
c0004150:	89 c7                	mov    edi,eax
c0004152:	31 d2                	xor    edx,edx
c0004154:	89 d8                	mov    eax,ebx
c0004156:	e8 72 f8 ff ff       	call   c00039cd <dir_read>
c000415b:	85 c0                	test   eax,eax
c000415d:	0f 85 5e 01 00 00    	jne    c00042c1 <dir_find+0x19f>
c0004163:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004166:	8d 41 24             	lea    eax,[ecx+0x24]
c0004169:	e8 f3 da ff ff       	call   c0001c61 <ld_word>
c000416e:	66 39 f8             	cmp    ax,di
c0004171:	75 df                	jne    c0004152 <dir_find+0x30>
c0004173:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004176:	31 ed                	xor    ebp,ebp
c0004178:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000417c:	ba 40 00 00 00       	mov    edx,0x40
c0004181:	89 e9                	mov    ecx,ebp
c0004183:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004187:	0f 84 42 01 00 00    	je     c00042cf <dir_find+0x1ad>
c000418d:	f6 c2 1f             	test   dl,0x1f
c0004190:	75 03                	jne    c0004195 <dir_find+0x73>
c0004192:	83 c2 02             	add    edx,0x2
c0004195:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004199:	89 d0                	mov    eax,edx
c000419b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c000419e:	e8 be da ff ff       	call   c0001c61 <ld_word>
c00041a3:	83 ec 0c             	sub    esp,0xc
c00041a6:	0f b7 c0             	movzx  eax,ax
c00041a9:	50                   	push   eax
c00041aa:	e8 0e 44 00 00       	call   c00085bd <ff_wtoupper>
c00041af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041b3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041b6:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00041bd:	e8 fb 43 00 00       	call   c00085bd <ff_wtoupper>
c00041c2:	83 c4 10             	add    esp,0x10
c00041c5:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041c9:	75 87                	jne    c0004152 <dir_find+0x30>
c00041cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041cf:	45                   	inc    ebp
c00041d0:	83 c2 02             	add    edx,0x2
c00041d3:	eb ac                	jmp    c0004181 <dir_find+0x5f>
c00041d5:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041dc:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041e1:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041e6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041e9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041ec:	89 f0                	mov    eax,esi
c00041ee:	e8 4c e2 ff ff       	call   c000243f <move_window>
c00041f3:	85 c0                	test   eax,eax
c00041f5:	0f 85 c6 00 00 00    	jne    c00042c1 <dir_find+0x19f>
c00041fb:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041fe:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004201:	84 c9                	test   cl,cl
c0004203:	0f 84 bd 00 00 00    	je     c00042c6 <dir_find+0x1a4>
c0004209:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c000420c:	88 d0                	mov    al,dl
c000420e:	83 e0 3f             	and    eax,0x3f
c0004211:	80 f9 e5             	cmp    cl,0xe5
c0004214:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004217:	0f 84 87 00 00 00    	je     c00042a4 <dir_find+0x182>
c000421d:	80 e2 08             	and    dl,0x8
c0004220:	74 06                	je     c0004228 <dir_find+0x106>
c0004222:	3c 0f                	cmp    al,0xf
c0004224:	75 7e                	jne    c00042a4 <dir_find+0x182>
c0004226:	eb 04                	jmp    c000422c <dir_find+0x10a>
c0004228:	3c 0f                	cmp    al,0xf
c000422a:	75 4c                	jne    c0004278 <dir_find+0x156>
c000422c:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004230:	75 7e                	jne    c00042b0 <dir_find+0x18e>
c0004232:	f6 c1 40             	test   cl,0x40
c0004235:	74 12                	je     c0004249 <dir_find+0x127>
c0004237:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000423a:	83 e1 bf             	and    ecx,0xffffffbf
c000423d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004241:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004244:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004247:	eb 06                	jmp    c000424f <dir_find+0x12d>
c0004249:	89 f8                	mov    eax,edi
c000424b:	38 c8                	cmp    al,cl
c000424d:	75 5c                	jne    c00042ab <dir_find+0x189>
c000424f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004253:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004258:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000425b:	75 53                	jne    c00042b0 <dir_find+0x18e>
c000425d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004261:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004264:	89 ea                	mov    edx,ebp
c0004266:	e8 f4 fd ff ff       	call   c000405f <cmp_lfn>
c000426b:	85 c0                	test   eax,eax
c000426d:	74 41                	je     c00042b0 <dir_find+0x18e>
c000426f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004273:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004276:	eb 38                	jmp    c00042b0 <dir_find+0x18e>
c0004278:	89 f8                	mov    eax,edi
c000427a:	84 c0                	test   al,al
c000427c:	75 0d                	jne    c000428b <dir_find+0x169>
c000427e:	89 e8                	mov    eax,ebp
c0004280:	e8 98 de ff ff       	call   c000211d <sum_sfn>
c0004285:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004289:	74 52                	je     c00042dd <dir_find+0x1bb>
c000428b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000428f:	75 13                	jne    c00042a4 <dir_find+0x182>
c0004291:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004294:	b9 0b 00 00 00       	mov    ecx,0xb
c0004299:	89 e8                	mov    eax,ebp
c000429b:	e8 60 da ff ff       	call   c0001d00 <mem_cmp>
c00042a0:	85 c0                	test   eax,eax
c00042a2:	74 39                	je     c00042dd <dir_find+0x1bb>
c00042a4:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042ab:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042b0:	31 d2                	xor    edx,edx
c00042b2:	89 d8                	mov    eax,ebx
c00042b4:	e8 5c f4 ff ff       	call   c0003715 <dir_next>
c00042b9:	85 c0                	test   eax,eax
c00042bb:	0f 84 25 ff ff ff    	je     c00041e6 <dir_find+0xc4>
c00042c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00042c4:	eb 17                	jmp    c00042dd <dir_find+0x1bb>
c00042c6:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042cd:	eb 0e                	jmp    c00042dd <dir_find+0x1bb>
c00042cf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042d2:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042d7:	0f 85 75 fe ff ff    	jne    c0004152 <dir_find+0x30>
c00042dd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042e0:	83 c4 1c             	add    esp,0x1c
c00042e3:	5b                   	pop    ebx
c00042e4:	5e                   	pop    esi
c00042e5:	5f                   	pop    edi
c00042e6:	5d                   	pop    ebp
c00042e7:	c3                   	ret    

c00042e8 <dir_register>:
c00042e8:	55                   	push   ebp
c00042e9:	57                   	push   edi
c00042ea:	56                   	push   esi
c00042eb:	be 06 00 00 00       	mov    esi,0x6
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 6c             	sub    esp,0x6c
c00042f4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042f8:	0f 85 62 02 00 00    	jne    c0004560 <dir_register+0x278>
c00042fe:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004300:	31 ff                	xor    edi,edi
c0004302:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004305:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c000430a:	74 03                	je     c000430f <dir_register+0x27>
c000430c:	47                   	inc    edi
c000430d:	eb f6                	jmp    c0004305 <dir_register+0x1d>
c000430f:	89 c3                	mov    ebx,eax
c0004311:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004315:	0f 85 e1 00 00 00    	jne    c00043fc <dir_register+0x114>
c000431b:	83 c7 0e             	add    edi,0xe
c000431e:	b9 0f 00 00 00       	mov    ecx,0xf
c0004323:	89 f8                	mov    eax,edi
c0004325:	31 d2                	xor    edx,edx
c0004327:	f7 f1                	div    ecx
c0004329:	8d 50 02             	lea    edx,[eax+0x2]
c000432c:	89 c7                	mov    edi,eax
c000432e:	89 d8                	mov    eax,ebx
c0004330:	e8 12 f8 ff ff       	call   c0003b47 <dir_alloc>
c0004335:	89 c6                	mov    esi,eax
c0004337:	85 c0                	test   eax,eax
c0004339:	0f 85 21 02 00 00    	jne    c0004560 <dir_register+0x278>
c000433f:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004345:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004348:	c1 e7 05             	shl    edi,0x5
c000434b:	29 f8                	sub    eax,edi
c000434d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004350:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004353:	a8 04                	test   al,0x4
c0004355:	0f 84 91 00 00 00    	je     c00043ec <dir_register+0x104>
c000435b:	83 e0 fb             	and    eax,0xfffffffb
c000435e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004361:	89 d8                	mov    eax,ebx
c0004363:	e8 25 ec ff ff       	call   c0002f8d <fill_first_frag>
c0004368:	85 c0                	test   eax,eax
c000436a:	0f 85 ee 01 00 00    	jne    c000455e <dir_register+0x276>
c0004370:	83 c9 ff             	or     ecx,0xffffffff
c0004373:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004376:	89 d8                	mov    eax,ebx
c0004378:	e8 db eb ff ff       	call   c0002f58 <fill_last_frag>
c000437d:	85 c0                	test   eax,eax
c000437f:	0f 85 d9 01 00 00    	jne    c000455e <dir_register+0x276>
c0004385:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004389:	74 61                	je     c00043ec <dir_register+0x104>
c000438b:	89 da                	mov    edx,ebx
c000438d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004391:	e8 ea f5 ff ff       	call   c0003980 <load_obj_xdir>
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 c0 01 00 00    	jne    c000455e <dir_register+0x276>
c000439e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043a2:	31 c9                	xor    ecx,ecx
c00043a4:	c1 e2 09             	shl    edx,0x9
c00043a7:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043aa:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043ad:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043b0:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043b3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b6:	83 c0 38             	add    eax,0x38
c00043b9:	e8 1c d9 ff ff       	call   c0001cda <st_qword>
c00043be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043c1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043c4:	83 c0 28             	add    eax,0x28
c00043c7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043ca:	e8 0b d9 ff ff       	call   c0001cda <st_qword>
c00043cf:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043d2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043d5:	83 c8 01             	or     eax,0x1
c00043d8:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043db:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043df:	e8 db f7 ff ff       	call   c0003bbf <store_xdir>
c00043e4:	85 c0                	test   eax,eax
c00043e6:	0f 85 72 01 00 00    	jne    c000455e <dir_register+0x276>
c00043ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043f2:	e8 c1 fb ff ff       	call   c0003fb8 <create_xdir>
c00043f7:	e9 64 01 00 00       	jmp    c0004560 <dir_register+0x278>
c00043fc:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043ff:	b9 0c 00 00 00       	mov    ecx,0xc
c0004404:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004408:	89 c2                	mov    edx,eax
c000440a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000440e:	e8 cd d8 ff ff       	call   c0001ce0 <mem_cpy>
c0004413:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004418:	74 58                	je     c0004472 <dir_register+0x18a>
c000441a:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000441e:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004426:	83 ec 0c             	sub    esp,0xc
c0004429:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000442c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004430:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004434:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004438:	e8 24 dc ff ff       	call   c0002061 <gen_numname>
c000443d:	89 d8                	mov    eax,ebx
c000443f:	e8 de fc ff ff       	call   c0004122 <dir_find>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	89 c6                	mov    esi,eax
c0004449:	85 c0                	test   eax,eax
c000444b:	75 15                	jne    c0004462 <dir_register+0x17a>
c000444d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004451:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004456:	75 ce                	jne    c0004426 <dir_register+0x13e>
c0004458:	be 07 00 00 00       	mov    esi,0x7
c000445d:	e9 fe 00 00 00       	jmp    c0004560 <dir_register+0x278>
c0004462:	83 f8 04             	cmp    eax,0x4
c0004465:	0f 85 f5 00 00 00    	jne    c0004560 <dir_register+0x278>
c000446b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000446f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004472:	b9 01 00 00 00       	mov    ecx,0x1
c0004477:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000447c:	74 0f                	je     c000448d <dir_register+0x1a5>
c000447e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004483:	8d 47 0c             	lea    eax,[edi+0xc]
c0004486:	31 d2                	xor    edx,edx
c0004488:	f7 f1                	div    ecx
c000448a:	8d 48 01             	lea    ecx,[eax+0x1]
c000448d:	89 ca                	mov    edx,ecx
c000448f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004493:	89 d8                	mov    eax,ebx
c0004495:	e8 ad f6 ff ff       	call   c0003b47 <dir_alloc>
c000449a:	89 c6                	mov    esi,eax
c000449c:	85 c0                	test   eax,eax
c000449e:	0f 85 bc 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044a8:	49                   	dec    ecx
c00044a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044ad:	74 6a                	je     c0004519 <dir_register+0x231>
c00044af:	89 c8                	mov    eax,ecx
c00044b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044b4:	c1 e0 05             	shl    eax,0x5
c00044b7:	29 c2                	sub    edx,eax
c00044b9:	89 d8                	mov    eax,ebx
c00044bb:	e8 fd ec ff ff       	call   c00031bd <dir_sdi>
c00044c0:	89 c6                	mov    esi,eax
c00044c2:	85 c0                	test   eax,eax
c00044c4:	0f 85 96 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044ce:	e8 4a dc ff ff       	call   c000211d <sum_sfn>
c00044d3:	0f b6 f8             	movzx  edi,al
c00044d6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044d9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044dc:	89 e8                	mov    eax,ebp
c00044de:	e8 5c df ff ff       	call   c000243f <move_window>
c00044e3:	89 c6                	mov    esi,eax
c00044e5:	85 c0                	test   eax,eax
c00044e7:	75 77                	jne    c0004560 <dir_register+0x278>
c00044e9:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044ee:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044f7:	57                   	push   edi
c00044f8:	e8 e0 da ff ff       	call   c0001fdd <put_lfn>
c00044fd:	31 d2                	xor    edx,edx
c00044ff:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004503:	89 d8                	mov    eax,ebx
c0004505:	e8 0b f2 ff ff       	call   c0003715 <dir_next>
c000450a:	83 c4 10             	add    esp,0x10
c000450d:	89 c6                	mov    esi,eax
c000450f:	85 c0                	test   eax,eax
c0004511:	75 4d                	jne    c0004560 <dir_register+0x278>
c0004513:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004517:	75 bd                	jne    c00044d6 <dir_register+0x1ee>
c0004519:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000451c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000451f:	89 e8                	mov    eax,ebp
c0004521:	e8 19 df ff ff       	call   c000243f <move_window>
c0004526:	89 c6                	mov    esi,eax
c0004528:	85 c0                	test   eax,eax
c000452a:	75 34                	jne    c0004560 <dir_register+0x278>
c000452c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000452f:	b9 20 00 00 00       	mov    ecx,0x20
c0004534:	31 d2                	xor    edx,edx
c0004536:	e8 ba d7 ff ff       	call   c0001cf5 <mem_set>
c000453b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000453e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004542:	b9 0b 00 00 00       	mov    ecx,0xb
c0004547:	e8 94 d7 ff ff       	call   c0001ce0 <mem_cpy>
c000454c:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000454f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004552:	83 e0 18             	and    eax,0x18
c0004555:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004558:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000455c:	eb 02                	jmp    c0004560 <dir_register+0x278>
c000455e:	89 c6                	mov    esi,eax
c0004560:	83 c4 6c             	add    esp,0x6c
c0004563:	89 f0                	mov    eax,esi
c0004565:	5b                   	pop    ebx
c0004566:	5e                   	pop    esi
c0004567:	5f                   	pop    edi
c0004568:	5d                   	pop    ebp
c0004569:	c3                   	ret    

c000456a <sync_fs>:
c000456a:	56                   	push   esi
c000456b:	53                   	push   ebx
c000456c:	53                   	push   ebx
c000456d:	89 c3                	mov    ebx,eax
c000456f:	e8 37 de ff ff       	call   c00023ab <sync_window>
c0004574:	85 c0                	test   eax,eax
c0004576:	0f 85 b1 00 00 00    	jne    c000462d <sync_fs+0xc3>
c000457c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000457f:	0f 85 8e 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c0004585:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004589:	0f 85 84 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c000458f:	b9 00 02 00 00       	mov    ecx,0x200
c0004594:	8d 73 54             	lea    esi,[ebx+0x54]
c0004597:	31 d2                	xor    edx,edx
c0004599:	89 f0                	mov    eax,esi
c000459b:	e8 55 d7 ff ff       	call   c0001cf5 <mem_set>
c00045a0:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045ab:	e8 23 d7 ff ff       	call   c0001cd3 <st_word>
c00045b0:	ba 52 52 61 41       	mov    edx,0x41615252
c00045b5:	89 f0                	mov    eax,esi
c00045b7:	e8 1b d7 ff ff       	call   c0001cd7 <st_dword>
c00045bc:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045c2:	ba 72 72 41 61       	mov    edx,0x61417272
c00045c7:	e8 0b d7 ff ff       	call   c0001cd7 <st_dword>
c00045cc:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045cf:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045d5:	e8 fd d6 ff ff       	call   c0001cd7 <st_dword>
c00045da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045dd:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045e3:	e8 ef d6 ff ff       	call   c0001cd7 <st_dword>
c00045e8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045eb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045ee:	83 c0 01             	add    eax,0x1
c00045f1:	83 d2 00             	adc    edx,0x0
c00045f4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045f7:	83 ec 0c             	sub    esp,0xc
c00045fa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045fd:	6a 01                	push   0x1
c00045ff:	52                   	push   edx
c0004600:	50                   	push   eax
c0004601:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004605:	56                   	push   esi
c0004606:	50                   	push   eax
c0004607:	e8 20 d6 ff ff       	call   c0001c2c <disk_write>
c000460c:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004610:	83 c4 20             	add    esp,0x20
c0004613:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004617:	51                   	push   ecx
c0004618:	6a 00                	push   0x0
c000461a:	6a 00                	push   0x0
c000461c:	50                   	push   eax
c000461d:	e8 20 d6 ff ff       	call   c0001c42 <disk_ioctl>
c0004622:	83 c4 10             	add    esp,0x10
c0004625:	85 c0                	test   eax,eax
c0004627:	0f 95 c0             	setne  al
c000462a:	0f b6 c0             	movzx  eax,al
c000462d:	5a                   	pop    edx
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <create_partition>:
c0004631:	55                   	push   ebp
c0004632:	0f b6 c0             	movzx  eax,al
c0004635:	57                   	push   edi
c0004636:	56                   	push   esi
c0004637:	53                   	push   ebx
c0004638:	83 ec 60             	sub    esp,0x60
c000463b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000463f:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004643:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004647:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000464b:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000464f:	50                   	push   eax
c0004650:	6a 01                	push   0x1
c0004652:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004656:	e8 e7 d5 ff ff       	call   c0001c42 <disk_ioctl>
c000465b:	83 c4 10             	add    esp,0x10
c000465e:	85 c0                	test   eax,eax
c0004660:	74 0a                	je     c000466c <create_partition+0x3b>
c0004662:	b8 01 00 00 00       	mov    eax,0x1
c0004667:	e9 67 05 00 00       	jmp    c0004bd3 <create_partition+0x5a2>
c000466c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004670:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004674:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004678:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000467c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004681:	0f 86 ed 03 00 00    	jbe    c0004a74 <create_partition+0x443>
c0004687:	83 c0 df             	add    eax,0xffffffdf
c000468a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004692:	83 d2 ff             	adc    edx,0xffffffff
c0004695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000469d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046a5:	83 c0 bd             	add    eax,0xffffffbd
c00046a8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046af:	83 d2 ff             	adc    edx,0xffffffff
c00046b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046ba:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c2:	be 22 00 00 00       	mov    esi,0x22
c00046c7:	31 ff                	xor    edi,edi
c00046c9:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046d1:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046d9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046e1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046e5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046eb:	75 0e                	jne    c00046fb <create_partition+0xca>
c00046ed:	b9 00 02 00 00       	mov    ecx,0x200
c00046f2:	31 d2                	xor    edx,edx
c00046f4:	89 d8                	mov    eax,ebx
c00046f6:	e8 fa d5 ff ff       	call   c0001cf5 <mem_set>
c00046fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046ff:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004703:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004707:	0b 04 24             	or     eax,DWORD PTR [esp]
c000470a:	0f 84 23 01 00 00    	je     c0004833 <create_partition+0x202>
c0004710:	89 f0                	mov    eax,esi
c0004712:	89 fa                	mov    edx,edi
c0004714:	05 ff 07 00 00       	add    eax,0x7ff
c0004719:	83 d2 00             	adc    edx,0x0
c000471c:	89 c1                	mov    ecx,eax
c000471e:	89 d7                	mov    edi,edx
c0004720:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004726:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000472a:	89 ce                	mov    esi,ecx
c000472c:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004730:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004734:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004738:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000473b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000473f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004742:	b8 64 00 00 00       	mov    eax,0x64
c0004747:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000474a:	b8 00 00 00 00       	mov    eax,0x0
c000474f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004753:	72 41                	jb     c0004796 <create_partition+0x165>
c0004755:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004759:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000475d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004761:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004766:	01 c1                	add    ecx,eax
c0004768:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000476c:	f7 24 24             	mul    DWORD PTR [esp]
c000476f:	6a 00                	push   0x0
c0004771:	01 ca                	add    edx,ecx
c0004773:	6a 64                	push   0x64
c0004775:	52                   	push   edx
c0004776:	50                   	push   eax
c0004777:	e8 e0 22 02 00       	call   c0026a5c <__udivdi3>
c000477c:	83 c4 10             	add    esp,0x10
c000477f:	05 ff 07 00 00       	add    eax,0x7ff
c0004784:	83 d2 00             	adc    edx,0x0
c0004787:	89 c1                	mov    ecx,eax
c0004789:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000478d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004793:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004796:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004799:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000479d:	01 f0                	add    eax,esi
c000479f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a3:	11 fa                	adc    edx,edi
c00047a5:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047a9:	19 d1                	sbb    ecx,edx
c00047ab:	73 2e                	jae    c00047db <create_partition+0x1aa>
c00047ad:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047b1:	89 f8                	mov    eax,edi
c00047b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047ba:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047be:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047c6:	73 6b                	jae    c0004833 <create_partition+0x202>
c00047c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047d0:	29 f0                	sub    eax,esi
c00047d2:	19 fa                	sbb    edx,edi
c00047d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00047d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047df:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047e2:	74 4f                	je     c0004833 <create_partition+0x202>
c00047e4:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047e7:	b9 10 00 00 00       	mov    ecx,0x10
c00047ec:	ba f0 94 02 c0       	mov    edx,0xc00294f0
c00047f1:	e8 ea d4 ff ff       	call   c0001ce0 <mem_cpy>
c00047f6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047fa:	b9 10 00 00 00       	mov    ecx,0x10
c00047ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004803:	e8 2c db ff ff       	call   c0002334 <make_rand>
c0004808:	89 f2                	mov    edx,esi
c000480a:	89 f9                	mov    ecx,edi
c000480c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004810:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004814:	e8 c1 d4 ff ff       	call   c0001cda <st_qword>
c0004819:	03 34 24             	add    esi,DWORD PTR [esp]
c000481c:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004820:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004824:	89 f2                	mov    edx,esi
c0004826:	89 f9                	mov    ecx,edi
c0004828:	83 c2 ff             	add    edx,0xffffffff
c000482b:	83 d1 ff             	adc    ecx,0xffffffff
c000482e:	e8 a7 d4 ff ff       	call   c0001cda <st_qword>
c0004833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004837:	83 e8 80             	sub    eax,0xffffff80
c000483a:	89 c5                	mov    ebp,eax
c000483c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004840:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004846:	75 6b                	jne    c00048b3 <create_partition+0x282>
c0004848:	45                   	inc    ebp
c0004849:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000484d:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004852:	e8 39 da ff ff       	call   c0002290 <crc32>
c0004857:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000485d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004861:	75 e5                	jne    c0004848 <create_partition+0x217>
c0004863:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004867:	31 d2                	xor    edx,edx
c0004869:	83 ec 0c             	sub    esp,0xc
c000486c:	c1 ed 09             	shr    ebp,0x9
c000486f:	6a 01                	push   0x1
c0004871:	8d 45 02             	lea    eax,[ebp+0x2]
c0004874:	52                   	push   edx
c0004875:	50                   	push   eax
c0004876:	53                   	push   ebx
c0004877:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000487b:	e8 ac d3 ff ff       	call   c0001c2c <disk_write>
c0004880:	83 c4 20             	add    esp,0x20
c0004883:	85 c0                	test   eax,eax
c0004885:	0f 85 d7 fd ff ff    	jne    c0004662 <create_partition+0x31>
c000488b:	83 ec 0c             	sub    esp,0xc
c000488e:	31 d2                	xor    edx,edx
c0004890:	6a 01                	push   0x1
c0004892:	89 e8                	mov    eax,ebp
c0004894:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004898:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000489c:	52                   	push   edx
c000489d:	50                   	push   eax
c000489e:	53                   	push   ebx
c000489f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048a3:	e8 84 d3 ff ff       	call   c0001c2c <disk_write>
c00048a8:	83 c4 20             	add    esp,0x20
c00048ab:	85 c0                	test   eax,eax
c00048ad:	0f 85 af fd ff ff    	jne    c0004662 <create_partition+0x31>
c00048b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048bb:	3d 00 40 00 00       	cmp    eax,0x4000
c00048c0:	74 0d                	je     c00048cf <create_partition+0x29e>
c00048c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048ca:	e9 12 fe ff ff       	jmp    c00046e1 <create_partition+0xb0>
c00048cf:	31 d2                	xor    edx,edx
c00048d1:	b9 00 02 00 00       	mov    ecx,0x200
c00048d6:	89 d8                	mov    eax,ebx
c00048d8:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048db:	e8 15 d4 ff ff       	call   c0001cf5 <mem_set>
c00048e0:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048e3:	b9 10 00 00 00       	mov    ecx,0x10
c00048e8:	ba e0 93 02 c0       	mov    edx,0xc00293e0
c00048ed:	89 d8                	mov    eax,ebx
c00048ef:	e8 ec d3 ff ff       	call   c0001ce0 <mem_cpy>
c00048f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048f8:	8d 43 58             	lea    eax,[ebx+0x58]
c00048fb:	f7 d2                	not    edx
c00048fd:	e8 d5 d3 ff ff       	call   c0001cd7 <st_dword>
c0004902:	8d 43 18             	lea    eax,[ebx+0x18]
c0004905:	31 c9                	xor    ecx,ecx
c0004907:	89 04 24             	mov    DWORD PTR [esp],eax
c000490a:	ba 01 00 00 00       	mov    edx,0x1
c000490f:	e8 c6 d3 ff ff       	call   c0001cda <st_qword>
c0004914:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004918:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000491c:	83 c2 ff             	add    edx,0xffffffff
c000491f:	89 e8                	mov    eax,ebp
c0004921:	83 d1 ff             	adc    ecx,0xffffffff
c0004924:	e8 b1 d3 ff ff       	call   c0001cda <st_qword>
c0004929:	31 c9                	xor    ecx,ecx
c000492b:	8d 43 28             	lea    eax,[ebx+0x28]
c000492e:	ba 22 00 00 00       	mov    edx,0x22
c0004933:	e8 a2 d3 ff ff       	call   c0001cda <st_qword>
c0004938:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000493c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004940:	83 c2 de             	add    edx,0xffffffde
c0004943:	8d 43 30             	lea    eax,[ebx+0x30]
c0004946:	83 d1 ff             	adc    ecx,0xffffffff
c0004949:	31 f6                	xor    esi,esi
c000494b:	e8 8a d3 ff ff       	call   c0001cda <st_qword>
c0004950:	8d 43 54             	lea    eax,[ebx+0x54]
c0004953:	ba 80 00 00 00       	mov    edx,0x80
c0004958:	e8 7a d3 ff ff       	call   c0001cd7 <st_dword>
c000495d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004960:	ba 80 00 00 00       	mov    edx,0x80
c0004965:	e8 6d d3 ff ff       	call   c0001cd7 <st_dword>
c000496a:	ba 02 00 00 00       	mov    edx,0x2
c000496f:	89 f8                	mov    eax,edi
c0004971:	e8 61 d3 ff ff       	call   c0001cd7 <st_dword>
c0004976:	8d 53 38             	lea    edx,[ebx+0x38]
c0004979:	b9 10 00 00 00       	mov    ecx,0x10
c000497e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004982:	e8 ad d9 ff ff       	call   c0002334 <make_rand>
c0004987:	83 c8 ff             	or     eax,0xffffffff
c000498a:	46                   	inc    esi
c000498b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004990:	e8 fb d8 ff ff       	call   c0002290 <crc32>
c0004995:	83 fe 5c             	cmp    esi,0x5c
c0004998:	75 f0                	jne    c000498a <create_partition+0x359>
c000499a:	f7 d0                	not    eax
c000499c:	8d 73 10             	lea    esi,[ebx+0x10]
c000499f:	89 c2                	mov    edx,eax
c00049a1:	89 f0                	mov    eax,esi
c00049a3:	e8 2f d3 ff ff       	call   c0001cd7 <st_dword>
c00049a8:	83 ec 0c             	sub    esp,0xc
c00049ab:	6a 01                	push   0x1
c00049ad:	6a 00                	push   0x0
c00049af:	6a 01                	push   0x1
c00049b1:	53                   	push   ebx
c00049b2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049b6:	e8 71 d2 ff ff       	call   c0001c2c <disk_write>
c00049bb:	83 c4 20             	add    esp,0x20
c00049be:	85 c0                	test   eax,eax
c00049c0:	0f 85 9c fc ff ff    	jne    c0004662 <create_partition+0x31>
c00049c6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049ca:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049ce:	83 c2 ff             	add    edx,0xffffffff
c00049d1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049d4:	83 d1 ff             	adc    ecx,0xffffffff
c00049d7:	e8 fe d2 ff ff       	call   c0001cda <st_qword>
c00049dc:	ba 01 00 00 00       	mov    edx,0x1
c00049e1:	31 c9                	xor    ecx,ecx
c00049e3:	89 e8                	mov    eax,ebp
c00049e5:	e8 f0 d2 ff ff       	call   c0001cda <st_qword>
c00049ea:	89 f8                	mov    eax,edi
c00049ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049f4:	31 ff                	xor    edi,edi
c00049f6:	e8 df d2 ff ff       	call   c0001cda <st_qword>
c00049fb:	89 f0                	mov    eax,esi
c00049fd:	31 d2                	xor    edx,edx
c00049ff:	e8 d3 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a04:	83 c8 ff             	or     eax,0xffffffff
c0004a07:	47                   	inc    edi
c0004a08:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a0d:	e8 7e d8 ff ff       	call   c0002290 <crc32>
c0004a12:	83 ff 5c             	cmp    edi,0x5c
c0004a15:	75 f0                	jne    c0004a07 <create_partition+0x3d6>
c0004a17:	f7 d0                	not    eax
c0004a19:	89 c2                	mov    edx,eax
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	e8 b5 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a22:	83 ec 0c             	sub    esp,0xc
c0004a25:	6a 01                	push   0x1
c0004a27:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a2b:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a2f:	83 c0 ff             	add    eax,0xffffffff
c0004a32:	83 d2 ff             	adc    edx,0xffffffff
c0004a35:	52                   	push   edx
c0004a36:	50                   	push   eax
c0004a37:	53                   	push   ebx
c0004a38:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a3c:	e8 eb d1 ff ff       	call   c0001c2c <disk_write>
c0004a41:	83 c4 20             	add    esp,0x20
c0004a44:	85 c0                	test   eax,eax
c0004a46:	0f 85 16 fc ff ff    	jne    c0004662 <create_partition+0x31>
c0004a4c:	31 d2                	xor    edx,edx
c0004a4e:	89 d8                	mov    eax,ebx
c0004a50:	b9 00 02 00 00       	mov    ecx,0x200
c0004a55:	e8 9b d2 ff ff       	call   c0001cf5 <mem_set>
c0004a5a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a60:	b9 10 00 00 00       	mov    ecx,0x10
c0004a65:	ba f0 93 02 c0       	mov    edx,0xc00293f0
c0004a6a:	e8 71 d2 ff ff       	call   c0001ce0 <mem_cpy>
c0004a6f:	e9 21 01 00 00       	jmp    c0004b95 <create_partition+0x564>
c0004a74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a78:	b9 05 00 00 00       	mov    ecx,0x5
c0004a7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a80:	bf 08 00 00 00       	mov    edi,0x8
c0004a85:	89 f8                	mov    eax,edi
c0004a87:	31 d2                	xor    edx,edx
c0004a89:	0f b6 f0             	movzx  esi,al
c0004a8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a8f:	f7 f6                	div    esi
c0004a91:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a96:	76 0a                	jbe    c0004aa2 <create_partition+0x471>
c0004a98:	d1 e7                	shl    edi,1
c0004a9a:	49                   	dec    ecx
c0004a9b:	75 e8                	jne    c0004a85 <create_partition+0x454>
c0004a9d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aa2:	b9 00 02 00 00       	mov    ecx,0x200
c0004aa7:	31 d2                	xor    edx,edx
c0004aa9:	89 d8                	mov    eax,ebx
c0004aab:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ab1:	e8 3f d2 ff ff       	call   c0001cf5 <mem_set>
c0004ab6:	b9 64 00 00 00       	mov    ecx,0x64
c0004abb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004abe:	31 d2                	xor    edx,edx
c0004ac0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ac8:	f7 f1                	div    ecx
c0004aca:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004acf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ad3:	89 f8                	mov    eax,edi
c0004ad5:	0f b6 c0             	movzx  eax,al
c0004ad8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004adc:	e9 80 00 00 00       	jmp    c0004b61 <create_partition+0x530>
c0004ae1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ae4:	29 cf                	sub    edi,ecx
c0004ae6:	89 ca                	mov    edx,ecx
c0004ae8:	89 f0                	mov    eax,esi
c0004aea:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004aef:	e8 e3 d1 ff ff       	call   c0001cd7 <st_dword>
c0004af4:	8d 46 04             	lea    eax,[esi+0x4]
c0004af7:	89 fa                	mov    edx,edi
c0004af9:	83 c6 10             	add    esi,0x10
c0004afc:	e8 d6 d1 ff ff       	call   c0001cd7 <st_dword>
c0004b01:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b05:	31 d2                	xor    edx,edx
c0004b07:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b0a:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b0e:	89 c8                	mov    eax,ecx
c0004b10:	01 f9                	add    ecx,edi
c0004b12:	f7 f5                	div    ebp
c0004b14:	89 d5                	mov    ebp,edx
c0004b16:	31 d2                	xor    edx,edx
c0004b18:	45                   	inc    ebp
c0004b19:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b1d:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b20:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b23:	89 c2                	mov    edx,eax
c0004b25:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b28:	c1 ea 02             	shr    edx,0x2
c0004b2b:	83 e2 c0             	and    edx,0xffffffc0
c0004b2e:	09 ea                	or     edx,ebp
c0004b30:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b35:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b38:	31 d2                	xor    edx,edx
c0004b3a:	f7 f5                	div    ebp
c0004b3c:	89 d7                	mov    edi,edx
c0004b3e:	31 d2                	xor    edx,edx
c0004b40:	47                   	inc    edi
c0004b41:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b45:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b48:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b4b:	89 c5                	mov    ebp,eax
c0004b4d:	c1 ed 02             	shr    ebp,0x2
c0004b50:	83 e5 c0             	and    ebp,0xffffffc0
c0004b53:	09 ef                	or     edi,ebp
c0004b55:	89 fa                	mov    edx,edi
c0004b57:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b5a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b5f:	74 34                	je     c0004b95 <create_partition+0x564>
c0004b61:	85 c9                	test   ecx,ecx
c0004b63:	74 30                	je     c0004b95 <create_partition+0x564>
c0004b65:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b68:	76 2b                	jbe    c0004b95 <create_partition+0x564>
c0004b6a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b6e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b72:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b75:	83 ff 64             	cmp    edi,0x64
c0004b78:	76 4b                	jbe    c0004bc5 <create_partition+0x594>
c0004b7a:	89 f8                	mov    eax,edi
c0004b7c:	01 c8                	add    eax,ecx
c0004b7e:	0f 82 5d ff ff ff    	jb     c0004ae1 <create_partition+0x4b0>
c0004b84:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b87:	0f 87 54 ff ff ff    	ja     c0004ae1 <create_partition+0x4b0>
c0004b8d:	85 ff                	test   edi,edi
c0004b8f:	0f 85 51 ff ff ff    	jne    c0004ae6 <create_partition+0x4b5>
c0004b95:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b9b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004ba0:	e8 2e d1 ff ff       	call   c0001cd3 <st_word>
c0004ba5:	83 ec 0c             	sub    esp,0xc
c0004ba8:	6a 01                	push   0x1
c0004baa:	6a 00                	push   0x0
c0004bac:	6a 00                	push   0x0
c0004bae:	53                   	push   ebx
c0004baf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bb3:	e8 74 d0 ff ff       	call   c0001c2c <disk_write>
c0004bb8:	83 c4 20             	add    esp,0x20
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	0f 95 c0             	setne  al
c0004bc0:	0f b6 c0             	movzx  eax,al
c0004bc3:	eb 0e                	jmp    c0004bd3 <create_partition+0x5a2>
c0004bc5:	74 07                	je     c0004bce <create_partition+0x59d>
c0004bc7:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bcc:	eb ac                	jmp    c0004b7a <create_partition+0x549>
c0004bce:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bd1:	eb a7                	jmp    c0004b7a <create_partition+0x549>
c0004bd3:	83 c4 5c             	add    esp,0x5c
c0004bd6:	5b                   	pop    ebx
c0004bd7:	5e                   	pop    esi
c0004bd8:	5f                   	pop    edi
c0004bd9:	5d                   	pop    ebp
c0004bda:	c3                   	ret    

c0004bdb <get_fileinfo>:
c0004bdb:	55                   	push   ebp
c0004bdc:	57                   	push   edi
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	83 ec 1c             	sub    esp,0x1c
c0004be2:	8b 30                	mov    esi,DWORD PTR [eax]
c0004be4:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004be8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bec:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bef:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bf2:	0f 84 dc 01 00 00    	je     c0004dd4 <get_fileinfo+0x1f9>
c0004bf8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bfb:	75 0f                	jne    c0004c0c <get_fileinfo+0x31>
c0004bfd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c00:	83 c4 1c             	add    esp,0x1c
c0004c03:	5b                   	pop    ebx
c0004c04:	5e                   	pop    esi
c0004c05:	5f                   	pop    edi
c0004c06:	5d                   	pop    ebp
c0004c07:	e9 58 d5 ff ff       	jmp    c0002164 <get_xfileinfo>
c0004c0c:	89 d3                	mov    ebx,edx
c0004c0e:	89 c6                	mov    esi,eax
c0004c10:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c14:	74 6a                	je     c0004c80 <get_fileinfo+0xa5>
c0004c16:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c1e:	31 ed                	xor    ebp,ebp
c0004c20:	31 ff                	xor    edi,edi
c0004c22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c2a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c2d:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c31:	66 85 d2             	test   dx,dx
c0004c34:	74 3e                	je     c0004c74 <get_fileinfo+0x99>
c0004c36:	66 85 ed             	test   bp,bp
c0004c39:	75 0c                	jne    c0004c47 <get_fileinfo+0x6c>
c0004c3b:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c41:	66 3d ff 07          	cmp    ax,0x7ff
c0004c45:	76 22                	jbe    c0004c69 <get_fileinfo+0x8e>
c0004c47:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c4c:	89 e8                	mov    eax,ebp
c0004c4e:	29 f9                	sub    ecx,edi
c0004c50:	c1 e0 10             	shl    eax,0x10
c0004c53:	09 d0                	or     eax,edx
c0004c55:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c59:	e8 a3 d1 ff ff       	call   c0001e01 <put_utf>
c0004c5e:	84 c0                	test   al,al
c0004c60:	74 10                	je     c0004c72 <get_fileinfo+0x97>
c0004c62:	0f b6 c0             	movzx  eax,al
c0004c65:	31 d2                	xor    edx,edx
c0004c67:	01 c7                	add    edi,eax
c0004c69:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c6e:	89 d5                	mov    ebp,edx
c0004c70:	eb b0                	jmp    c0004c22 <get_fileinfo+0x47>
c0004c72:	31 ff                	xor    edi,edi
c0004c74:	66 85 ed             	test   bp,bp
c0004c77:	74 02                	je     c0004c7b <get_fileinfo+0xa0>
c0004c79:	31 ff                	xor    edi,edi
c0004c7b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c80:	31 ff                	xor    edi,edi
c0004c82:	31 c9                	xor    ecx,ecx
c0004c84:	83 f9 0a             	cmp    ecx,0xa
c0004c87:	0f 87 ad 00 00 00    	ja     c0004d3a <get_fileinfo+0x15f>
c0004c8d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c90:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c93:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c97:	66 83 fa 20          	cmp    dx,0x20
c0004c9b:	0f 84 92 00 00 00    	je     c0004d33 <get_fileinfo+0x158>
c0004ca1:	66 83 fa 05          	cmp    dx,0x5
c0004ca5:	75 05                	jne    c0004cac <get_fileinfo+0xd1>
c0004ca7:	ba e5 00 00 00       	mov    edx,0xe5
c0004cac:	83 ff 0b             	cmp    edi,0xb
c0004caf:	77 0b                	ja     c0004cbc <get_fileinfo+0xe1>
c0004cb1:	83 fd 09             	cmp    ebp,0x9
c0004cb4:	75 06                	jne    c0004cbc <get_fileinfo+0xe1>
c0004cb6:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cbb:	47                   	inc    edi
c0004cbc:	0f b7 c2             	movzx  eax,dx
c0004cbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cc3:	e8 6d d0 ff ff       	call   c0001d35 <dbc_1st>
c0004cc8:	85 c0                	test   eax,eax
c0004cca:	74 2f                	je     c0004cfb <get_fileinfo+0x120>
c0004ccc:	83 fd 08             	cmp    ebp,0x8
c0004ccf:	74 2a                	je     c0004cfb <get_fileinfo+0x120>
c0004cd1:	83 fd 0b             	cmp    ebp,0xb
c0004cd4:	74 25                	je     c0004cfb <get_fileinfo+0x120>
c0004cd6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cd9:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004cdd:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ce1:	e8 52 d0 ff ff       	call   c0001d38 <dbc_2nd>
c0004ce6:	85 c0                	test   eax,eax
c0004ce8:	74 11                	je     c0004cfb <get_fileinfo+0x120>
c0004cea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cf3:	c1 e2 08             	shl    edx,0x8
c0004cf6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cf9:	09 c2                	or     edx,eax
c0004cfb:	0f b7 d2             	movzx  edx,dx
c0004cfe:	50                   	push   eax
c0004cff:	50                   	push   eax
c0004d00:	68 b5 01 00 00       	push   0x1b5
c0004d05:	52                   	push   edx
c0004d06:	e8 46 38 00 00       	call   c0008551 <ff_oem2uni>
c0004d0b:	83 c4 10             	add    esp,0x10
c0004d0e:	66 85 c0             	test   ax,ax
c0004d11:	75 04                	jne    c0004d17 <get_fileinfo+0x13c>
c0004d13:	31 ff                	xor    edi,edi
c0004d15:	eb 23                	jmp    c0004d3a <get_fileinfo+0x15f>
c0004d17:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d1c:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d20:	29 f9                	sub    ecx,edi
c0004d22:	0f b7 c0             	movzx  eax,ax
c0004d25:	e8 d7 d0 ff ff       	call   c0001e01 <put_utf>
c0004d2a:	84 c0                	test   al,al
c0004d2c:	74 e5                	je     c0004d13 <get_fileinfo+0x138>
c0004d2e:	0f b6 c0             	movzx  eax,al
c0004d31:	01 c7                	add    edi,eax
c0004d33:	89 e9                	mov    ecx,ebp
c0004d35:	e9 4a ff ff ff       	jmp    c0004c84 <get_fileinfo+0xa9>
c0004d3a:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d3f:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d43:	75 54                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d45:	85 ff                	test   edi,edi
c0004d47:	75 0b                	jne    c0004d54 <get_fileinfo+0x179>
c0004d49:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d4d:	ba 01 00 00 00       	mov    edx,0x1
c0004d52:	eb 33                	jmp    c0004d87 <get_fileinfo+0x1ac>
c0004d54:	b1 08                	mov    cl,0x8
c0004d56:	31 d2                	xor    edx,edx
c0004d58:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d5e:	84 c0                	test   al,al
c0004d60:	74 25                	je     c0004d87 <get_fileinfo+0x1ac>
c0004d62:	66 83 f8 2e          	cmp    ax,0x2e
c0004d66:	74 16                	je     c0004d7e <get_fileinfo+0x1a3>
c0004d68:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d6b:	66 83 ff 19          	cmp    di,0x19
c0004d6f:	77 0f                	ja     c0004d80 <get_fileinfo+0x1a5>
c0004d71:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d74:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d77:	74 07                	je     c0004d80 <get_fileinfo+0x1a5>
c0004d79:	83 c0 20             	add    eax,0x20
c0004d7c:	eb 02                	jmp    c0004d80 <get_fileinfo+0x1a5>
c0004d7e:	b1 10                	mov    cl,0x10
c0004d80:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d84:	42                   	inc    edx
c0004d85:	eb d1                	jmp    c0004d58 <get_fileinfo+0x17d>
c0004d87:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d8c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d93:	75 04                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d95:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d99:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d9c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d9f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004da2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da5:	83 c0 1c             	add    eax,0x1c
c0004da8:	e8 c1 ce ff ff       	call   c0001c6e <ld_dword>
c0004dad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004db4:	89 03                	mov    DWORD PTR [ebx],eax
c0004db6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004db9:	83 c0 16             	add    eax,0x16
c0004dbc:	e8 a0 ce ff ff       	call   c0001c61 <ld_word>
c0004dc1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004dc5:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc8:	83 c0 18             	add    eax,0x18
c0004dcb:	e8 91 ce ff ff       	call   c0001c61 <ld_word>
c0004dd0:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004dd4:	83 c4 1c             	add    esp,0x1c
c0004dd7:	5b                   	pop    ebx
c0004dd8:	5e                   	pop    esi
c0004dd9:	5f                   	pop    edi
c0004dda:	5d                   	pop    ebp
c0004ddb:	c3                   	ret    

c0004ddc <ld_clust.isra.0>:
c0004ddc:	56                   	push   esi
c0004ddd:	89 c6                	mov    esi,eax
c0004ddf:	53                   	push   ebx
c0004de0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004de3:	89 d3                	mov    ebx,edx
c0004de5:	e8 77 ce ff ff       	call   c0001c61 <ld_word>
c0004dea:	0f b7 c8             	movzx  ecx,ax
c0004ded:	89 f0                	mov    eax,esi
c0004def:	3c 03                	cmp    al,0x3
c0004df1:	75 0d                	jne    c0004e00 <ld_clust.isra.0+0x24>
c0004df3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004df6:	e8 66 ce ff ff       	call   c0001c61 <ld_word>
c0004dfb:	c1 e0 10             	shl    eax,0x10
c0004dfe:	09 c1                	or     ecx,eax
c0004e00:	89 c8                	mov    eax,ecx
c0004e02:	5b                   	pop    ebx
c0004e03:	5e                   	pop    esi
c0004e04:	c3                   	ret    

c0004e05 <st_clust.isra.1>:
c0004e05:	56                   	push   esi
c0004e06:	89 c6                	mov    esi,eax
c0004e08:	53                   	push   ebx
c0004e09:	89 d3                	mov    ebx,edx
c0004e0b:	0f b7 d1             	movzx  edx,cx
c0004e0e:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e11:	e8 bd ce ff ff       	call   c0001cd3 <st_word>
c0004e16:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e19:	75 0f                	jne    c0004e2a <st_clust.isra.1+0x25>
c0004e1b:	c1 e9 10             	shr    ecx,0x10
c0004e1e:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e21:	89 ca                	mov    edx,ecx
c0004e23:	5b                   	pop    ebx
c0004e24:	5e                   	pop    esi
c0004e25:	e9 a9 ce ff ff       	jmp    c0001cd3 <st_word>
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <init_alloc_info.isra.2>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c6                	mov    esi,eax
c0004e31:	89 d3                	mov    ebx,edx
c0004e33:	51                   	push   ecx
c0004e34:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e36:	83 c0 34             	add    eax,0x34
c0004e39:	e8 30 ce ff ff       	call   c0001c6e <ld_dword>
c0004e3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e41:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e43:	83 c0 38             	add    eax,0x38
c0004e46:	e8 3b ce ff ff       	call   c0001c86 <ld_qword>
c0004e4b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e4e:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e51:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e53:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e56:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5d:	83 e0 02             	and    eax,0x2
c0004e60:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e63:	5b                   	pop    ebx
c0004e64:	5b                   	pop    ebx
c0004e65:	5e                   	pop    esi
c0004e66:	c3                   	ret    

c0004e67 <follow_path>:
c0004e67:	56                   	push   esi
c0004e68:	53                   	push   ebx
c0004e69:	89 c3                	mov    ebx,eax
c0004e6b:	83 ec 14             	sub    esp,0x14
c0004e6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e72:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e78:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e7a:	80 fa 5c             	cmp    dl,0x5c
c0004e7d:	75 07                	jne    c0004e86 <follow_path+0x1f>
c0004e7f:	40                   	inc    eax
c0004e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e84:	eb ee                	jmp    c0004e74 <follow_path+0xd>
c0004e86:	80 fa 2f             	cmp    dl,0x2f
c0004e89:	74 f4                	je     c0004e7f <follow_path+0x18>
c0004e8b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e92:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e99:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e9c:	77 52                	ja     c0004ef0 <follow_path+0x89>
c0004e9e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004ea2:	31 d2                	xor    edx,edx
c0004ea4:	89 d8                	mov    eax,ebx
c0004ea6:	e8 12 e3 ff ff       	call   c00031bd <dir_sdi>
c0004eab:	eb 7c                	jmp    c0004f29 <follow_path+0xc2>
c0004ead:	89 d8                	mov    eax,ebx
c0004eaf:	e8 6e f2 ff ff       	call   c0004122 <dir_find>
c0004eb4:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004eb7:	85 c0                	test   eax,eax
c0004eb9:	75 46                	jne    c0004f01 <follow_path+0x9a>
c0004ebb:	80 e2 04             	and    dl,0x4
c0004ebe:	75 69                	jne    c0004f29 <follow_path+0xc2>
c0004ec0:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ec4:	74 5e                	je     c0004f24 <follow_path+0xbd>
c0004ec6:	8a 06                	mov    al,BYTE PTR [esi]
c0004ec8:	3c 04                	cmp    al,0x4
c0004eca:	75 41                	jne    c0004f0d <follow_path+0xa6>
c0004ecc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ecf:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ed3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ed6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ed9:	30 c0                	xor    al,al
c0004edb:	09 d0                	or     eax,edx
c0004edd:	89 da                	mov    edx,ebx
c0004edf:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ee2:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ee5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ee8:	8d 46 10             	lea    eax,[esi+0x10]
c0004eeb:	e8 3d ff ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0004ef0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ef4:	89 d8                	mov    eax,ebx
c0004ef6:	e8 a9 ed ff ff       	call   c0003ca4 <create_name>
c0004efb:	85 c0                	test   eax,eax
c0004efd:	74 ae                	je     c0004ead <follow_path+0x46>
c0004eff:	eb 28                	jmp    c0004f29 <follow_path+0xc2>
c0004f01:	83 f8 04             	cmp    eax,0x4
c0004f04:	75 23                	jne    c0004f29 <follow_path+0xc2>
c0004f06:	80 e2 04             	and    dl,0x4
c0004f09:	74 19                	je     c0004f24 <follow_path+0xbd>
c0004f0b:	eb 1c                	jmp    c0004f29 <follow_path+0xc2>
c0004f0d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f10:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f16:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f1a:	e8 bd fe ff ff       	call   c0004ddc <ld_clust.isra.0>
c0004f1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f22:	eb cc                	jmp    c0004ef0 <follow_path+0x89>
c0004f24:	b8 05 00 00 00       	mov    eax,0x5
c0004f29:	83 c4 14             	add    esp,0x14
c0004f2c:	5b                   	pop    ebx
c0004f2d:	5e                   	pop    esi
c0004f2e:	c3                   	ret    

c0004f2f <f_mount>:
c0004f2f:	53                   	push   ebx
c0004f30:	83 ec 18             	sub    esp,0x18
c0004f33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f37:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f43:	e8 fb d2 ff ff       	call   c0002243 <get_ldnumber>
c0004f48:	89 c2                	mov    edx,eax
c0004f4a:	b8 0b 00 00 00       	mov    eax,0xb
c0004f4f:	85 d2                	test   edx,edx
c0004f51:	78 39                	js     c0004f8c <f_mount+0x5d>
c0004f53:	8b 04 95 60 e4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1ba0]
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 03                	je     c0004f61 <f_mount+0x32>
c0004f5e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f65:	85 c0                	test   eax,eax
c0004f67:	74 03                	je     c0004f6c <f_mount+0x3d>
c0004f69:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f70:	89 04 95 60 e4 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1ba0],eax
c0004f77:	31 c0                	xor    eax,eax
c0004f79:	84 db                	test   bl,bl
c0004f7b:	74 0f                	je     c0004f8c <f_mount+0x5d>
c0004f7d:	31 c9                	xor    ecx,ecx
c0004f7f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f83:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f87:	e8 65 d7 ff ff       	call   c00026f1 <mount_volume>
c0004f8c:	83 c4 18             	add    esp,0x18
c0004f8f:	5b                   	pop    ebx
c0004f90:	c3                   	ret    

c0004f91 <f_open>:
c0004f91:	55                   	push   ebp
c0004f92:	bd 09 00 00 00       	mov    ebp,0x9
c0004f97:	57                   	push   edi
c0004f98:	56                   	push   esi
c0004f99:	53                   	push   ebx
c0004f9a:	83 ec 7c             	sub    esp,0x7c
c0004f9d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fa4:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fab:	85 db                	test   ebx,ebx
c0004fad:	0f 84 10 04 00 00    	je     c00053c3 <f_open+0x432>
c0004fb3:	89 fe                	mov    esi,edi
c0004fb5:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fb9:	83 e6 3f             	and    esi,0x3f
c0004fbc:	89 f0                	mov    eax,esi
c0004fbe:	0f b6 c8             	movzx  ecx,al
c0004fc1:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fc8:	e8 24 d7 ff ff       	call   c00026f1 <mount_volume>
c0004fcd:	89 c5                	mov    ebp,eax
c0004fcf:	85 c0                	test   eax,eax
c0004fd1:	0f 85 e6 03 00 00    	jne    c00053bd <f_open+0x42c>
c0004fd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fdb:	bd 11 00 00 00       	mov    ebp,0x11
c0004fe0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fe4:	83 ec 0c             	sub    esp,0xc
c0004fe7:	68 60 04 00 00       	push   0x460
c0004fec:	e8 a3 34 00 00       	call   c0008494 <ff_memalloc>
c0004ff1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ff5:	83 c4 10             	add    esp,0x10
c0004ff8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ffd:	0f 84 c0 03 00 00    	je     c00053c3 <f_open+0x432>
c0005003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005007:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000500b:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005011:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0005014:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005017:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000501e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005022:	e8 40 fe ff ff       	call   c0004e67 <follow_path>
c0005027:	89 c5                	mov    ebp,eax
c0005029:	85 c0                	test   eax,eax
c000502b:	75 0c                	jne    c0005039 <f_open+0xa8>
c000502d:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005032:	79 05                	jns    c0005039 <f_open+0xa8>
c0005034:	bd 06 00 00 00       	mov    ebp,0x6
c0005039:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000503f:	0f 84 84 01 00 00    	je     c00051c9 <f_open+0x238>
c0005045:	85 ed                	test   ebp,ebp
c0005047:	74 20                	je     c0005069 <f_open+0xd8>
c0005049:	83 fd 04             	cmp    ebp,0x4
c000504c:	0f 85 58 03 00 00    	jne    c00053aa <f_open+0x419>
c0005052:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005056:	83 ce 08             	or     esi,0x8
c0005059:	e8 8a f2 ff ff       	call   c00042e8 <dir_register>
c000505e:	89 c5                	mov    ebp,eax
c0005060:	85 c0                	test   eax,eax
c0005062:	74 2f                	je     c0005093 <f_open+0x102>
c0005064:	e9 41 03 00 00       	jmp    c00053aa <f_open+0x419>
c0005069:	bd 07 00 00 00       	mov    ebp,0x7
c000506e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005073:	0f 85 31 03 00 00    	jne    c00053aa <f_open+0x419>
c0005079:	bd 08 00 00 00       	mov    ebp,0x8
c000507e:	f7 c7 04 00 00 00    	test   edi,0x4
c0005084:	0f 85 20 03 00 00    	jne    c00053aa <f_open+0x419>
c000508a:	83 e7 08             	and    edi,0x8
c000508d:	0f 84 65 01 00 00    	je     c00051f8 <f_open+0x267>
c0005093:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005097:	8a 02                	mov    al,BYTE PTR [edx]
c0005099:	3c 04                	cmp    al,0x4
c000509b:	0f 85 97 00 00 00    	jne    c0005138 <f_open+0x1a7>
c00050a1:	8d 42 10             	lea    eax,[edx+0x10]
c00050a4:	89 13                	mov    DWORD PTR [ebx],edx
c00050a6:	89 da                	mov    edx,ebx
c00050a8:	e8 80 fd ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c00050ad:	31 d2                	xor    edx,edx
c00050af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b3:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050bb:	83 c0 02             	add    eax,0x2
c00050be:	e8 32 cc ff ff       	call   c0001cf5 <mem_set>
c00050c3:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050c8:	31 d2                	xor    edx,edx
c00050ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050d1:	83 c0 26             	add    eax,0x26
c00050d4:	e8 1c cc ff ff       	call   c0001cf5 <mem_set>
c00050d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050e0:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050e4:	ba 00 00 21 50       	mov    edx,0x50210000
c00050e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050ec:	83 c0 08             	add    eax,0x8
c00050ef:	e8 e3 cb ff ff       	call   c0001cd7 <st_dword>
c00050f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050fb:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050ff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005103:	e8 b7 ea ff ff       	call   c0003bbf <store_xdir>
c0005108:	89 c5                	mov    ebp,eax
c000510a:	85 c0                	test   eax,eax
c000510c:	0f 85 98 02 00 00    	jne    c00053aa <f_open+0x419>
c0005112:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005115:	85 d2                	test   edx,edx
c0005117:	0f 84 db 00 00 00    	je     c00051f8 <f_open+0x267>
c000511d:	31 c9                	xor    ecx,ecx
c000511f:	89 d8                	mov    eax,ebx
c0005121:	e8 8e e3 ff ff       	call   c00034b4 <remove_chain>
c0005126:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000512a:	89 c5                	mov    ebp,eax
c000512c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000512f:	48                   	dec    eax
c0005130:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005133:	e9 b8 00 00 00       	jmp    c00051f0 <f_open+0x25f>
c0005138:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000513c:	89 ea                	mov    edx,ebp
c000513e:	e8 99 fc ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005143:	ba 00 00 21 50       	mov    edx,0x50210000
c0005148:	89 c7                	mov    edi,eax
c000514a:	8d 45 0e             	lea    eax,[ebp+0xe]
c000514d:	e8 85 cb ff ff       	call   c0001cd7 <st_dword>
c0005152:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005156:	31 c9                	xor    ecx,ecx
c0005158:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000515c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005160:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005164:	e8 9c fc ff ff       	call   c0004e05 <st_clust.isra.1>
c0005169:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000516d:	31 d2                	xor    edx,edx
c000516f:	83 c0 1c             	add    eax,0x1c
c0005172:	e8 60 cb ff ff       	call   c0001cd7 <st_dword>
c0005177:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517b:	85 ff                	test   edi,edi
c000517d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005181:	74 75                	je     c00051f8 <f_open+0x267>
c0005183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005187:	31 c9                	xor    ecx,ecx
c0005189:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000518c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000518f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005193:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005197:	89 fa                	mov    edx,edi
c0005199:	8d 44 24 24          	lea    eax,[esp+0x24]
c000519d:	e8 12 e3 ff ff       	call   c00034b4 <remove_chain>
c00051a2:	89 c5                	mov    ebp,eax
c00051a4:	85 c0                	test   eax,eax
c00051a6:	0f 85 fe 01 00 00    	jne    c00053aa <f_open+0x419>
c00051ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051b8:	4f                   	dec    edi
c00051b9:	e8 81 d2 ff ff       	call   c000243f <move_window>
c00051be:	89 c5                	mov    ebp,eax
c00051c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051c7:	eb 27                	jmp    c00051f0 <f_open+0x25f>
c00051c9:	85 ed                	test   ebp,ebp
c00051cb:	0f 85 d9 01 00 00    	jne    c00053aa <f_open+0x419>
c00051d1:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051d5:	bd 04 00 00 00       	mov    ebp,0x4
c00051da:	a8 10                	test   al,0x10
c00051dc:	0f 85 c8 01 00 00    	jne    c00053aa <f_open+0x419>
c00051e2:	83 e7 02             	and    edi,0x2
c00051e5:	74 11                	je     c00051f8 <f_open+0x267>
c00051e7:	bd 07 00 00 00       	mov    ebp,0x7
c00051ec:	a8 01                	test   al,0x1
c00051ee:	eb 02                	jmp    c00051f2 <f_open+0x261>
c00051f0:	85 ed                	test   ebp,ebp
c00051f2:	0f 85 b2 01 00 00    	jne    c00053aa <f_open+0x419>
c00051f8:	f7 c6 08 00 00 00    	test   esi,0x8
c00051fe:	74 03                	je     c0005203 <f_open+0x272>
c0005200:	83 ce 40             	or     esi,0x40
c0005203:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005207:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c000520a:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c000520d:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005210:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005213:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005217:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000521a:	8a 02                	mov    al,BYTE PTR [edx]
c000521c:	3c 04                	cmp    al,0x4
c000521e:	75 2a                	jne    c000524a <f_open+0x2b9>
c0005220:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005224:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005229:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000522c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005230:	30 c0                	xor    al,al
c0005232:	09 c8                	or     eax,ecx
c0005234:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005237:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000523b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000523e:	8d 42 10             	lea    eax,[edx+0x10]
c0005241:	89 da                	mov    edx,ebx
c0005243:	e8 e5 fb ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0005248:	eb 1c                	jmp    c0005266 <f_open+0x2d5>
c000524a:	89 fa                	mov    edx,edi
c000524c:	e8 8b fb ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005251:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005254:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005257:	e8 12 ca ff ff       	call   c0001c6e <ld_dword>
c000525c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005263:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000526a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005271:	89 03                	mov    DWORD PTR [ebx],eax
c0005273:	31 d2                	xor    edx,edx
c0005275:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005279:	b9 00 02 00 00       	mov    ecx,0x200
c000527e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005282:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005286:	89 f0                	mov    eax,esi
c0005288:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000528f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005292:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005299:	8d 43 50             	lea    eax,[ebx+0x50]
c000529c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052a3:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052ae:	e8 42 ca ff ff       	call   c0001cf5 <mem_set>
c00052b3:	83 e6 20             	and    esi,0x20
c00052b6:	75 07                	jne    c00052bf <f_open+0x32e>
c00052b8:	31 ed                	xor    ebp,ebp
c00052ba:	e9 eb 00 00 00       	jmp    c00053aa <f_open+0x419>
c00052bf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052c2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052d1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052d5:	74 e1                	je     c00052b8 <f_open+0x327>
c00052d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052df:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052e2:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052e9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052ec:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052f0:	31 ff                	xor    edi,edi
c00052f2:	c1 e5 09             	shl    ebp,0x9
c00052f5:	89 ee                	mov    esi,ebp
c00052f7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052fb:	89 f8                	mov    eax,edi
c00052fd:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005301:	73 22                	jae    c0005325 <f_open+0x394>
c0005303:	89 d8                	mov    eax,ebx
c0005305:	e8 bd dc ff ff       	call   c0002fc7 <get_fat>
c000530a:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000530e:	89 c2                	mov    edx,eax
c0005310:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005314:	83 f8 01             	cmp    eax,0x1
c0005317:	76 10                	jbe    c0005329 <f_open+0x398>
c0005319:	83 f8 ff             	cmp    eax,0xffffffff
c000531c:	75 d9                	jne    c00052f7 <f_open+0x366>
c000531e:	bd 01 00 00 00       	mov    ebp,0x1
c0005323:	eb 09                	jmp    c000532e <f_open+0x39d>
c0005325:	31 ed                	xor    ebp,ebp
c0005327:	eb 05                	jmp    c000532e <f_open+0x39d>
c0005329:	bd 02 00 00 00       	mov    ebp,0x2
c000532e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005331:	85 ed                	test   ebp,ebp
c0005333:	75 75                	jne    c00053aa <f_open+0x419>
c0005335:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005339:	25 ff 01 00 00       	and    eax,0x1ff
c000533e:	0f 84 74 ff ff ff    	je     c00052b8 <f_open+0x327>
c0005344:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005348:	bd 02 00 00 00       	mov    ebp,0x2
c000534d:	89 c8                	mov    eax,ecx
c000534f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005353:	e8 a2 cb ff ff       	call   c0001efa <clst2sect>
c0005358:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000535c:	89 d7                	mov    edi,edx
c000535e:	09 c7                	or     edi,eax
c0005360:	74 48                	je     c00053aa <f_open+0x419>
c0005362:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005366:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000536a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005372:	0f ac fe 09          	shrd   esi,edi,0x9
c0005376:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000537a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000537e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005381:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005385:	83 ec 0c             	sub    esp,0xc
c0005388:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000538b:	6a 01                	push   0x1
c000538d:	52                   	push   edx
c000538e:	50                   	push   eax
c000538f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005393:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005397:	50                   	push   eax
c0005398:	e8 79 c8 ff ff       	call   c0001c16 <disk_read>
c000539d:	83 c4 20             	add    esp,0x20
c00053a0:	85 c0                	test   eax,eax
c00053a2:	0f 95 c0             	setne  al
c00053a5:	0f b6 c0             	movzx  eax,al
c00053a8:	89 c5                	mov    ebp,eax
c00053aa:	83 ec 0c             	sub    esp,0xc
c00053ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053b1:	e8 f4 30 00 00       	call   c00084aa <ff_memfree>
c00053b6:	83 c4 10             	add    esp,0x10
c00053b9:	85 ed                	test   ebp,ebp
c00053bb:	74 06                	je     c00053c3 <f_open+0x432>
c00053bd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053c3:	83 c4 7c             	add    esp,0x7c
c00053c6:	89 e8                	mov    eax,ebp
c00053c8:	5b                   	pop    ebx
c00053c9:	5e                   	pop    esi
c00053ca:	5f                   	pop    edi
c00053cb:	5d                   	pop    ebp
c00053cc:	c3                   	ret    

c00053cd <f_read>:
c00053cd:	55                   	push   ebp
c00053ce:	57                   	push   edi
c00053cf:	56                   	push   esi
c00053d0:	53                   	push   ebx
c00053d1:	83 ec 2c             	sub    esp,0x2c
c00053d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053d8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053e6:	89 d8                	mov    eax,ebx
c00053e8:	e8 77 cf ff ff       	call   c0002364 <validate>
c00053ed:	89 c5                	mov    ebp,eax
c00053ef:	85 c0                	test   eax,eax
c00053f1:	0f 85 4c 02 00 00    	jne    c0005643 <f_read+0x276>
c00053f7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053fb:	85 ed                	test   ebp,ebp
c00053fd:	0f 85 40 02 00 00    	jne    c0005643 <f_read+0x276>
c0005403:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005407:	0f 84 31 02 00 00    	je     c000563e <f_read+0x271>
c000540d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005410:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005413:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005416:	bf 00 00 00 00       	mov    edi,0x0
c000541b:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000541e:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005422:	89 d1                	mov    ecx,edx
c0005424:	19 f9                	sbb    ecx,edi
c0005426:	0f 83 cf 00 00 00    	jae    c00054fb <f_read+0x12e>
c000542c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005430:	e9 c6 00 00 00       	jmp    c00054fb <f_read+0x12e>
c0005435:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005438:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000543b:	89 d0                	mov    eax,edx
c000543d:	25 ff 01 00 00       	and    eax,0x1ff
c0005442:	0f 85 c9 01 00 00    	jne    c0005611 <f_read+0x244>
c0005448:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000544c:	89 d6                	mov    esi,edx
c000544e:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005452:	89 cf                	mov    edi,ecx
c0005454:	48                   	dec    eax
c0005455:	0f ac fe 09          	shrd   esi,edi,0x9
c0005459:	21 f0                	and    eax,esi
c000545b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000545f:	0f 84 a6 00 00 00    	je     c000550b <f_read+0x13e>
c0005465:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005469:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000546c:	89 c8                	mov    eax,ecx
c000546e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005471:	e8 84 ca ff ff       	call   c0001efa <clst2sect>
c0005476:	89 d7                	mov    edi,edx
c0005478:	09 c7                	or     edi,eax
c000547a:	0f 84 b4 00 00 00    	je     c0005534 <f_read+0x167>
c0005480:	31 ff                	xor    edi,edi
c0005482:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005486:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005489:	01 c6                	add    esi,eax
c000548b:	11 d7                	adc    edi,edx
c000548d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005495:	0f 86 fd 00 00 00    	jbe    c0005598 <f_read+0x1cb>
c000549b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000549f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054a3:	c1 e8 09             	shr    eax,0x9
c00054a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00054a9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054ad:	03 14 24             	add    edx,DWORD PTR [esp]
c00054b0:	39 c2                	cmp    edx,eax
c00054b2:	76 07                	jbe    c00054bb <f_read+0xee>
c00054b4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00054bb:	83 ec 0c             	sub    esp,0xc
c00054be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054c2:	57                   	push   edi
c00054c3:	56                   	push   esi
c00054c4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 44 c7 ff ff       	call   c0001c16 <disk_read>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	75 6e                	jne    c0005547 <f_read+0x17a>
c00054d9:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054dd:	78 7e                	js     c000555d <f_read+0x190>
c00054df:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054e2:	c1 e6 09             	shl    esi,0x9
c00054e5:	31 ff                	xor    edi,edi
c00054e7:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054eb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054ef:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054f3:	01 30                	add    DWORD PTR [eax],esi
c00054f5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054f8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054fb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005500:	0f 85 2f ff ff ff    	jne    c0005435 <f_read+0x68>
c0005506:	e9 38 01 00 00       	jmp    c0005643 <f_read+0x276>
c000550b:	89 c8                	mov    eax,ecx
c000550d:	09 d0                	or     eax,edx
c000550f:	75 05                	jne    c0005516 <f_read+0x149>
c0005511:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005514:	eb 19                	jmp    c000552f <f_read+0x162>
c0005516:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000551a:	74 09                	je     c0005525 <f_read+0x158>
c000551c:	89 d8                	mov    eax,ebx
c000551e:	e8 f8 c9 ff ff       	call   c0001f1b <clmt_clust>
c0005523:	eb 0a                	jmp    c000552f <f_read+0x162>
c0005525:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005528:	89 d8                	mov    eax,ebx
c000552a:	e8 98 da ff ff       	call   c0002fc7 <get_fat>
c000552f:	83 f8 01             	cmp    eax,0x1
c0005532:	77 0e                	ja     c0005542 <f_read+0x175>
c0005534:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005538:	bd 02 00 00 00       	mov    ebp,0x2
c000553d:	e9 01 01 00 00       	jmp    c0005643 <f_read+0x276>
c0005542:	83 f8 ff             	cmp    eax,0xffffffff
c0005545:	75 0e                	jne    c0005555 <f_read+0x188>
c0005547:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000554b:	bd 01 00 00 00       	mov    ebp,0x1
c0005550:	e9 ee 00 00 00       	jmp    c0005643 <f_read+0x276>
c0005555:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005558:	e9 08 ff ff ff       	jmp    c0005465 <f_read+0x98>
c000555d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005560:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005563:	29 f0                	sub    eax,esi
c0005565:	19 fa                	sbb    edx,edi
c0005567:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000556a:	89 d7                	mov    edi,edx
c000556c:	ba 00 00 00 00       	mov    edx,0x0
c0005571:	89 f9                	mov    ecx,edi
c0005573:	19 d1                	sbb    ecx,edx
c0005575:	0f 83 64 ff ff ff    	jae    c00054df <f_read+0x112>
c000557b:	89 c7                	mov    edi,eax
c000557d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005580:	c1 e7 09             	shl    edi,0x9
c0005583:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005587:	b9 00 02 00 00       	mov    ecx,0x200
c000558c:	01 f8                	add    eax,edi
c000558e:	e8 4d c7 ff ff       	call   c0001ce0 <mem_cpy>
c0005593:	e9 47 ff ff ff       	jmp    c00054df <f_read+0x112>
c0005598:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000559b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000559e:	89 04 24             	mov    DWORD PTR [esp],eax
c00055a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055a5:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055a9:	75 05                	jne    c00055b0 <f_read+0x1e3>
c00055ab:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055ae:	74 5b                	je     c000560b <f_read+0x23e>
c00055b0:	8d 43 50             	lea    eax,[ebx+0x50]
c00055b3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055bb:	79 2a                	jns    c00055e7 <f_read+0x21a>
c00055bd:	83 ec 0c             	sub    esp,0xc
c00055c0:	6a 01                	push   0x1
c00055c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055ce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055d2:	50                   	push   eax
c00055d3:	e8 54 c6 ff ff       	call   c0001c2c <disk_write>
c00055d8:	83 c4 20             	add    esp,0x20
c00055db:	85 c0                	test   eax,eax
c00055dd:	0f 85 64 ff ff ff    	jne    c0005547 <f_read+0x17a>
c00055e3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055e7:	83 ec 0c             	sub    esp,0xc
c00055ea:	6a 01                	push   0x1
c00055ec:	57                   	push   edi
c00055ed:	56                   	push   esi
c00055ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055fa:	50                   	push   eax
c00055fb:	e8 16 c6 ff ff       	call   c0001c16 <disk_read>
c0005600:	83 c4 20             	add    esp,0x20
c0005603:	85 c0                	test   eax,eax
c0005605:	0f 85 3c ff ff ff    	jne    c0005547 <f_read+0x17a>
c000560b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000560e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005611:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005614:	ba 00 02 00 00       	mov    edx,0x200
c0005619:	25 ff 01 00 00       	and    eax,0x1ff
c000561e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005622:	29 c2                	sub    edx,eax
c0005624:	39 d6                	cmp    esi,edx
c0005626:	76 02                	jbe    c000562a <f_read+0x25d>
c0005628:	89 d6                	mov    esi,edx
c000562a:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000562e:	89 f1                	mov    ecx,esi
c0005630:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005634:	e8 a7 c6 ff ff       	call   c0001ce0 <mem_cpy>
c0005639:	e9 a7 fe ff ff       	jmp    c00054e5 <f_read+0x118>
c000563e:	bd 07 00 00 00       	mov    ebp,0x7
c0005643:	83 c4 2c             	add    esp,0x2c
c0005646:	89 e8                	mov    eax,ebp
c0005648:	5b                   	pop    ebx
c0005649:	5e                   	pop    esi
c000564a:	5f                   	pop    edi
c000564b:	5d                   	pop    ebp
c000564c:	c3                   	ret    

c000564d <f_write>:
c000564d:	55                   	push   ebp
c000564e:	57                   	push   edi
c000564f:	56                   	push   esi
c0005650:	53                   	push   ebx
c0005651:	83 ec 2c             	sub    esp,0x2c
c0005654:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005658:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000565c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005662:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005666:	89 d8                	mov    eax,ebx
c0005668:	e8 f7 cc ff ff       	call   c0002364 <validate>
c000566d:	89 c5                	mov    ebp,eax
c000566f:	85 c0                	test   eax,eax
c0005671:	0f 85 86 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005677:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000567b:	85 ed                	test   ebp,ebp
c000567d:	0f 85 7a 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005683:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005687:	0f 84 6b 02 00 00    	je     c00058f8 <f_write+0x2ab>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005694:	0f 84 43 01 00 00    	je     c00057dd <f_write+0x190>
c000569a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000569d:	89 c1                	mov    ecx,eax
c000569f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056a3:	0f 83 34 01 00 00    	jae    c00057dd <f_write+0x190>
c00056a9:	f7 d0                	not    eax
c00056ab:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056af:	e9 29 01 00 00       	jmp    c00057dd <f_write+0x190>
c00056b4:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056b7:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056ba:	89 d0                	mov    eax,edx
c00056bc:	25 ff 01 00 00       	and    eax,0x1ff
c00056c1:	0f 85 00 02 00 00    	jne    c00058c7 <f_write+0x27a>
c00056c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056cb:	89 d6                	mov    esi,edx
c00056cd:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056d1:	89 cf                	mov    edi,ecx
c00056d3:	48                   	dec    eax
c00056d4:	0f ac fe 09          	shrd   esi,edi,0x9
c00056d8:	21 f0                	and    eax,esi
c00056da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056de:	0f 84 06 01 00 00    	je     c00057ea <f_write+0x19d>
c00056e4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056e8:	0f 88 6e 01 00 00    	js     c000585c <f_write+0x20f>
c00056ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056f2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056f5:	89 c8                	mov    eax,ecx
c00056f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056fb:	e8 fa c7 ff ff       	call   c0001efa <clst2sect>
c0005700:	89 d1                	mov    ecx,edx
c0005702:	09 c1                	or     ecx,eax
c0005704:	0f 84 1c 01 00 00    	je     c0005826 <f_write+0x1d9>
c000570a:	31 ff                	xor    edi,edi
c000570c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005710:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005714:	01 c6                	add    esi,eax
c0005716:	11 d7                	adc    edi,edx
c0005718:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005720:	0f 86 63 01 00 00    	jbe    c0005889 <f_write+0x23c>
c0005726:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000572a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000572e:	c1 e8 09             	shr    eax,0x9
c0005731:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005735:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005739:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000573d:	39 c2                	cmp    edx,eax
c000573f:	76 08                	jbe    c0005749 <f_write+0xfc>
c0005741:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005745:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005749:	83 ec 0c             	sub    esp,0xc
c000574c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005750:	57                   	push   edi
c0005751:	56                   	push   esi
c0005752:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005756:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000575a:	50                   	push   eax
c000575b:	e8 cc c4 ff ff       	call   c0001c2c <disk_write>
c0005760:	83 c4 20             	add    esp,0x20
c0005763:	85 c0                	test   eax,eax
c0005765:	0f 85 ce 00 00 00    	jne    c0005839 <f_write+0x1ec>
c000576b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000576e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005771:	29 f0                	sub    eax,esi
c0005773:	19 fa                	sbb    edx,edi
c0005775:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005779:	89 d7                	mov    edi,edx
c000577b:	ba 00 00 00 00       	mov    edx,0x0
c0005780:	89 f9                	mov    ecx,edi
c0005782:	19 d1                	sbb    ecx,edx
c0005784:	73 1c                	jae    c00057a2 <f_write+0x155>
c0005786:	89 c7                	mov    edi,eax
c0005788:	b9 00 02 00 00       	mov    ecx,0x200
c000578d:	c1 e7 09             	shl    edi,0x9
c0005790:	8d 43 50             	lea    eax,[ebx+0x50]
c0005793:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005797:	89 fa                	mov    edx,edi
c0005799:	e8 42 c5 ff ff       	call   c0001ce0 <mem_cpy>
c000579e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057a2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057a6:	c1 e6 09             	shl    esi,0x9
c00057a9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057ad:	31 ff                	xor    edi,edi
c00057af:	01 30                	add    DWORD PTR [eax],esi
c00057b1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057b9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057bc:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057bf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057c2:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057c5:	89 c1                	mov    ecx,eax
c00057c7:	39 f2                	cmp    edx,esi
c00057c9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057cc:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057cf:	19 f9                	sbb    ecx,edi
c00057d1:	73 04                	jae    c00057d7 <f_write+0x18a>
c00057d3:	89 f2                	mov    edx,esi
c00057d5:	89 f8                	mov    eax,edi
c00057d7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057da:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057dd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057e2:	0f 85 cc fe ff ff    	jne    c00056b4 <f_write+0x67>
c00057e8:	eb 2e                	jmp    c0005818 <f_write+0x1cb>
c00057ea:	89 c8                	mov    eax,ecx
c00057ec:	09 d0                	or     eax,edx
c00057ee:	75 0b                	jne    c00057fb <f_write+0x1ae>
c00057f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057f3:	31 d2                	xor    edx,edx
c00057f5:	85 c0                	test   eax,eax
c00057f7:	75 28                	jne    c0005821 <f_write+0x1d4>
c00057f9:	eb 12                	jmp    c000580d <f_write+0x1c0>
c00057fb:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057ff:	74 09                	je     c000580a <f_write+0x1bd>
c0005801:	89 d8                	mov    eax,ebx
c0005803:	e8 13 c7 ff ff       	call   c0001f1b <clmt_clust>
c0005808:	eb 0a                	jmp    c0005814 <f_write+0x1c7>
c000580a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000580d:	89 d8                	mov    eax,ebx
c000580f:	e8 a1 da ff ff       	call   c00032b5 <create_chain>
c0005814:	85 c0                	test   eax,eax
c0005816:	75 09                	jne    c0005821 <f_write+0x1d4>
c0005818:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000581c:	e9 dc 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005821:	83 f8 01             	cmp    eax,0x1
c0005824:	75 0e                	jne    c0005834 <f_write+0x1e7>
c0005826:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000582a:	bd 02 00 00 00       	mov    ebp,0x2
c000582f:	e9 c9 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005834:	83 f8 ff             	cmp    eax,0xffffffff
c0005837:	75 0e                	jne    c0005847 <f_write+0x1fa>
c0005839:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000583d:	bd 01 00 00 00       	mov    ebp,0x1
c0005842:	e9 b6 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005847:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000584a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000584e:	0f 85 90 fe ff ff    	jne    c00056e4 <f_write+0x97>
c0005854:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005857:	e9 88 fe ff ff       	jmp    c00056e4 <f_write+0x97>
c000585c:	83 ec 0c             	sub    esp,0xc
c000585f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005862:	6a 01                	push   0x1
c0005864:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005867:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000586a:	50                   	push   eax
c000586b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000586f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005873:	50                   	push   eax
c0005874:	e8 b3 c3 ff ff       	call   c0001c2c <disk_write>
c0005879:	83 c4 20             	add    esp,0x20
c000587c:	85 c0                	test   eax,eax
c000587e:	75 b9                	jne    c0005839 <f_write+0x1ec>
c0005880:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005884:	e9 65 fe ff ff       	jmp    c00056ee <f_write+0xa1>
c0005889:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000588c:	75 05                	jne    c0005893 <f_write+0x246>
c000588e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005891:	74 2e                	je     c00058c1 <f_write+0x274>
c0005893:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005896:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005899:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000589c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000589f:	73 20                	jae    c00058c1 <f_write+0x274>
c00058a1:	83 ec 0c             	sub    esp,0xc
c00058a4:	8d 43 50             	lea    eax,[ebx+0x50]
c00058a7:	6a 01                	push   0x1
c00058a9:	57                   	push   edi
c00058aa:	56                   	push   esi
c00058ab:	50                   	push   eax
c00058ac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058b0:	50                   	push   eax
c00058b1:	e8 60 c3 ff ff       	call   c0001c16 <disk_read>
c00058b6:	83 c4 20             	add    esp,0x20
c00058b9:	85 c0                	test   eax,eax
c00058bb:	0f 85 78 ff ff ff    	jne    c0005839 <f_write+0x1ec>
c00058c1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058c4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058ca:	ba 00 02 00 00       	mov    edx,0x200
c00058cf:	25 ff 01 00 00       	and    eax,0x1ff
c00058d4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058d8:	29 c2                	sub    edx,eax
c00058da:	39 d6                	cmp    esi,edx
c00058dc:	76 02                	jbe    c00058e0 <f_write+0x293>
c00058de:	89 d6                	mov    esi,edx
c00058e0:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058e4:	89 f1                	mov    ecx,esi
c00058e6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058ea:	e8 f1 c3 ff ff       	call   c0001ce0 <mem_cpy>
c00058ef:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058f3:	e9 b1 fe ff ff       	jmp    c00057a9 <f_write+0x15c>
c00058f8:	bd 07 00 00 00       	mov    ebp,0x7
c00058fd:	83 c4 2c             	add    esp,0x2c
c0005900:	89 e8                	mov    eax,ebp
c0005902:	5b                   	pop    ebx
c0005903:	5e                   	pop    esi
c0005904:	5f                   	pop    edi
c0005905:	5d                   	pop    ebp
c0005906:	c3                   	ret    

c0005907 <f_sync>:
c0005907:	56                   	push   esi
c0005908:	53                   	push   ebx
c0005909:	83 ec 64             	sub    esp,0x64
c000590c:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005910:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005914:	89 d8                	mov    eax,ebx
c0005916:	e8 49 ca ff ff       	call   c0002364 <validate>
c000591b:	85 c0                	test   eax,eax
c000591d:	0f 85 ba 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005923:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005926:	f6 c2 40             	test   dl,0x40
c0005929:	0f 84 ae 01 00 00    	je     c0005add <f_sync+0x1d6>
c000592f:	84 d2                	test   dl,dl
c0005931:	79 33                	jns    c0005966 <f_sync+0x5f>
c0005933:	83 ec 0c             	sub    esp,0xc
c0005936:	8d 43 50             	lea    eax,[ebx+0x50]
c0005939:	6a 01                	push   0x1
c000593b:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000593e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005941:	50                   	push   eax
c0005942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005946:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000594a:	50                   	push   eax
c000594b:	e8 dc c2 ff ff       	call   c0001c2c <disk_write>
c0005950:	83 c4 20             	add    esp,0x20
c0005953:	89 c2                	mov    edx,eax
c0005955:	b8 01 00 00 00       	mov    eax,0x1
c000595a:	85 d2                	test   edx,edx
c000595c:	0f 85 7b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005962:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000596a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000596d:	0f 85 11 01 00 00    	jne    c0005a84 <f_sync+0x17d>
c0005973:	89 d8                	mov    eax,ebx
c0005975:	e8 13 d6 ff ff       	call   c0002f8d <fill_first_frag>
c000597a:	85 c0                	test   eax,eax
c000597c:	0f 85 5b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005982:	83 c9 ff             	or     ecx,0xffffffff
c0005985:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005988:	89 d8                	mov    eax,ebx
c000598a:	e8 c9 d5 ff ff       	call   c0002f58 <fill_last_frag>
c000598f:	85 c0                	test   eax,eax
c0005991:	0f 85 46 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005997:	83 ec 0c             	sub    esp,0xc
c000599a:	68 60 04 00 00       	push   0x460
c000599f:	e8 f0 2a 00 00       	call   c0008494 <ff_memalloc>
c00059a4:	83 c4 10             	add    esp,0x10
c00059a7:	89 c6                	mov    esi,eax
c00059a9:	b8 11 00 00 00       	mov    eax,0x11
c00059ae:	85 f6                	test   esi,esi
c00059b0:	0f 84 27 01 00 00    	je     c0005add <f_sync+0x1d6>
c00059b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ba:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059c0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059c3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059c6:	89 da                	mov    edx,ebx
c00059c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059cc:	e8 af df ff ff       	call   c0003980 <load_obj_xdir>
c00059d1:	85 c0                	test   eax,eax
c00059d3:	0f 85 95 00 00 00    	jne    c0005a6e <f_sync+0x167>
c00059d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059e0:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059e4:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059e7:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059ea:	83 ca 01             	or     edx,0x1
c00059ed:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059f0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059f6:	83 c0 34             	add    eax,0x34
c00059f9:	e8 d9 c2 ff ff       	call   c0001cd7 <st_dword>
c00059fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a08:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a0b:	83 c0 38             	add    eax,0x38
c0005a0e:	e8 c7 c2 ff ff       	call   c0001cda <st_qword>
c0005a13:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a1a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a1d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a20:	83 c0 28             	add    eax,0x28
c0005a23:	e8 b2 c2 ff ff       	call   c0001cda <st_qword>
c0005a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a31:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a34:	83 c0 0c             	add    eax,0xc
c0005a37:	e8 9b c2 ff ff       	call   c0001cd7 <st_dword>
c0005a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a40:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a43:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a47:	31 d2                	xor    edx,edx
c0005a49:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a4c:	83 c0 10             	add    eax,0x10
c0005a4f:	e8 83 c2 ff ff       	call   c0001cd7 <st_dword>
c0005a54:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a58:	e8 62 e1 ff ff       	call   c0003bbf <store_xdir>
c0005a5d:	85 c0                	test   eax,eax
c0005a5f:	75 0d                	jne    c0005a6e <f_sync+0x167>
c0005a61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a65:	e8 00 eb ff ff       	call   c000456a <sync_fs>
c0005a6a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a72:	83 ec 0c             	sub    esp,0xc
c0005a75:	56                   	push   esi
c0005a76:	e8 2f 2a 00 00       	call   c00084aa <ff_memfree>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a82:	eb 59                	jmp    c0005add <f_sync+0x1d6>
c0005a84:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a87:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a8a:	e8 b0 c9 ff ff       	call   c000243f <move_window>
c0005a8f:	85 c0                	test   eax,eax
c0005a91:	75 4a                	jne    c0005add <f_sync+0x1d6>
c0005a93:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a96:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a9a:	89 f2                	mov    edx,esi
c0005a9c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aa1:	e8 5f f3 ff ff       	call   c0004e05 <st_clust.isra.1>
c0005aa6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aa9:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005aac:	e8 26 c2 ff ff       	call   c0001cd7 <st_dword>
c0005ab1:	8d 46 16             	lea    eax,[esi+0x16]
c0005ab4:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ab9:	e8 19 c2 ff ff       	call   c0001cd7 <st_dword>
c0005abe:	8d 46 12             	lea    eax,[esi+0x12]
c0005ac1:	31 d2                	xor    edx,edx
c0005ac3:	e8 0b c2 ff ff       	call   c0001cd3 <st_word>
c0005ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005acc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ad4:	e8 91 ea ff ff       	call   c000456a <sync_fs>
c0005ad9:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005add:	83 c4 64             	add    esp,0x64
c0005ae0:	5b                   	pop    ebx
c0005ae1:	5e                   	pop    esi
c0005ae2:	c3                   	ret    

c0005ae3 <f_close>:
c0005ae3:	53                   	push   ebx
c0005ae4:	83 ec 24             	sub    esp,0x24
c0005ae7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005aeb:	53                   	push   ebx
c0005aec:	e8 16 fe ff ff       	call   c0005907 <f_sync>
c0005af1:	83 c4 10             	add    esp,0x10
c0005af4:	85 c0                	test   eax,eax
c0005af6:	75 15                	jne    c0005b0d <f_close+0x2a>
c0005af8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005afc:	89 d8                	mov    eax,ebx
c0005afe:	e8 61 c8 ff ff       	call   c0002364 <validate>
c0005b03:	85 c0                	test   eax,eax
c0005b05:	75 06                	jne    c0005b0d <f_close+0x2a>
c0005b07:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b0d:	83 c4 18             	add    esp,0x18
c0005b10:	5b                   	pop    ebx
c0005b11:	c3                   	ret    

c0005b12 <f_lseek>:
c0005b12:	55                   	push   ebp
c0005b13:	57                   	push   edi
c0005b14:	56                   	push   esi
c0005b15:	53                   	push   ebx
c0005b16:	83 ec 3c             	sub    esp,0x3c
c0005b19:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b1d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b21:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b25:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b28:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b2c:	89 d8                	mov    eax,ebx
c0005b2e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b32:	e8 2d c8 ff ff       	call   c0002364 <validate>
c0005b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	0f 85 7a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b43:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b4b:	85 c0                	test   eax,eax
c0005b4d:	0f 85 6a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b57:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b5a:	74 0c                	je     c0005b68 <f_lseek+0x56>
c0005b5c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b5f:	85 c0                	test   eax,eax
c0005b61:	75 1f                	jne    c0005b82 <f_lseek+0x70>
c0005b63:	e9 b5 01 00 00       	jmp    c0005d1d <f_lseek+0x20b>
c0005b68:	83 c9 ff             	or     ecx,0xffffffff
c0005b6b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b6e:	89 d8                	mov    eax,ebx
c0005b70:	e8 e3 d3 ff ff       	call   c0002f58 <fill_last_frag>
c0005b75:	85 c0                	test   eax,eax
c0005b77:	74 e3                	je     c0005b5c <f_lseek+0x4a>
c0005b79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b7d:	e9 3b 04 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005b82:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b87:	0f 85 ac 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b8d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b91:	0f 85 a2 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b97:	8d 78 04             	lea    edi,[eax+0x4]
c0005b9a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b9f:	be 02 00 00 00       	mov    esi,0x2
c0005ba4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ba8:	85 ed                	test   ebp,ebp
c0005baa:	74 73                	je     c0005c1f <f_lseek+0x10d>
c0005bac:	89 e9                	mov    ecx,ebp
c0005bae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bb5:	ff 04 24             	inc    DWORD PTR [esp]
c0005bb8:	89 ca                	mov    edx,ecx
c0005bba:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bbe:	89 d8                	mov    eax,ebx
c0005bc0:	e8 02 d4 ff ff       	call   c0002fc7 <get_fat>
c0005bc5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bc9:	83 f8 01             	cmp    eax,0x1
c0005bcc:	77 11                	ja     c0005bdf <f_lseek+0xcd>
c0005bce:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bd2:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bda:	e9 de 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bdf:	83 f8 ff             	cmp    eax,0xffffffff
c0005be2:	75 11                	jne    c0005bf5 <f_lseek+0xe3>
c0005be4:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005be8:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bf0:	e9 c8 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bf5:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bf8:	89 c1                	mov    ecx,eax
c0005bfa:	39 c2                	cmp    edx,eax
c0005bfc:	74 b7                	je     c0005bb5 <f_lseek+0xa3>
c0005bfe:	83 c6 02             	add    esi,0x2
c0005c01:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c05:	72 0b                	jb     c0005c12 <f_lseek+0x100>
c0005c07:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c0a:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c0d:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c0f:	83 c7 08             	add    edi,0x8
c0005c12:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c16:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c19:	76 04                	jbe    c0005c1f <f_lseek+0x10d>
c0005c1b:	89 c5                	mov    ebp,eax
c0005c1d:	eb 8d                	jmp    c0005bac <f_lseek+0x9a>
c0005c1f:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c22:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c26:	89 30                	mov    DWORD PTR [eax],esi
c0005c28:	0f 87 87 03 00 00    	ja     c0005fb5 <f_lseek+0x4a3>
c0005c2e:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c34:	e9 84 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005c39:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c3c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c4b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c52:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c56:	73 0f                	jae    c0005c67 <f_lseek+0x155>
c0005c58:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c5b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c6f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c72:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c79:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c7d:	0f 84 3a 03 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005c83:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c87:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c8b:	83 c6 ff             	add    esi,0xffffffff
c0005c8e:	89 d8                	mov    eax,ebx
c0005c90:	83 d7 ff             	adc    edi,0xffffffff
c0005c93:	89 f2                	mov    edx,esi
c0005c95:	89 f9                	mov    ecx,edi
c0005c97:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c9b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c9e:	e8 78 c2 ff ff       	call   c0001f1b <clmt_clust>
c0005ca3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ca7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005caa:	89 c2                	mov    edx,eax
c0005cac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cb0:	89 c8                	mov    eax,ecx
c0005cb2:	e8 43 c2 ff ff       	call   c0001efa <clst2sect>
c0005cb7:	89 d7                	mov    edi,edx
c0005cb9:	09 c7                	or     edi,eax
c0005cbb:	0f 84 0d ff ff ff    	je     c0005bce <f_lseek+0xbc>
c0005cc1:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005cc5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ccb:	0f 84 ec 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cd1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cd9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cdc:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ce0:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ce4:	4d                   	dec    ebp
c0005ce5:	31 ff                	xor    edi,edi
c0005ce7:	21 ee                	and    esi,ebp
c0005ce9:	01 c6                	add    esi,eax
c0005ceb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cee:	11 d7                	adc    edi,edx
c0005cf0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cf3:	39 fa                	cmp    edx,edi
c0005cf5:	75 08                	jne    c0005cff <f_lseek+0x1ed>
c0005cf7:	39 f0                	cmp    eax,esi
c0005cf9:	0f 84 be 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cff:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d02:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d06:	0f 89 80 02 00 00    	jns    c0005f8c <f_lseek+0x47a>
c0005d0c:	83 ec 0c             	sub    esp,0xc
c0005d0f:	6a 01                	push   0x1
c0005d11:	52                   	push   edx
c0005d12:	50                   	push   eax
c0005d13:	55                   	push   ebp
c0005d14:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d18:	e9 5a 02 00 00       	jmp    c0005f77 <f_lseek+0x465>
c0005d1d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d21:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d24:	74 16                	je     c0005d3c <f_lseek+0x22a>
c0005d26:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d2b:	76 0f                	jbe    c0005d3c <f_lseek+0x22a>
c0005d2d:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d34:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d3c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d3f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d42:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d45:	89 c7                	mov    edi,eax
c0005d47:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d4b:	73 0d                	jae    c0005d5a <f_lseek+0x248>
c0005d4d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d51:	75 07                	jne    c0005d5a <f_lseek+0x248>
c0005d53:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d5a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d5d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d60:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d64:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d6b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d72:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d75:	75 09                	jne    c0005d80 <f_lseek+0x26e>
c0005d77:	31 f6                	xor    esi,esi
c0005d79:	31 ff                	xor    edi,edi
c0005d7b:	e9 af 01 00 00       	jmp    c0005f2f <f_lseek+0x41d>
c0005d80:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d84:	89 d7                	mov    edi,edx
c0005d86:	c1 e1 09             	shl    ecx,0x9
c0005d89:	09 c7                	or     edi,eax
c0005d8b:	89 cd                	mov    ebp,ecx
c0005d8d:	74 6d                	je     c0005dfc <f_lseek+0x2ea>
c0005d8f:	83 c0 ff             	add    eax,0xffffffff
c0005d92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d96:	83 d2 ff             	adc    edx,0xffffffff
c0005d99:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005da0:	83 c0 ff             	add    eax,0xffffffff
c0005da3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005da7:	83 d2 ff             	adc    edx,0xffffffff
c0005daa:	31 ff                	xor    edi,edi
c0005dac:	57                   	push   edi
c0005dad:	51                   	push   ecx
c0005dae:	52                   	push   edx
c0005daf:	50                   	push   eax
c0005db0:	e8 a7 0c 02 00       	call   c0026a5c <__udivdi3>
c0005db5:	83 c4 10             	add    esp,0x10
c0005db8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dbc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dc0:	57                   	push   edi
c0005dc1:	55                   	push   ebp
c0005dc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dca:	e8 8d 0c 02 00       	call   c0026a5c <__udivdi3>
c0005dcf:	83 c4 10             	add    esp,0x10
c0005dd2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dd6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dda:	19 d1                	sbb    ecx,edx
c0005ddc:	72 1e                	jb     c0005dfc <f_lseek+0x2ea>
c0005dde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005de2:	89 e9                	mov    ecx,ebp
c0005de4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005de7:	f7 d9                	neg    ecx
c0005de9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005dec:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005df0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005df3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005df6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dfa:	eb 28                	jmp    c0005e24 <f_lseek+0x312>
c0005dfc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dff:	85 c0                	test   eax,eax
c0005e01:	75 1e                	jne    c0005e21 <f_lseek+0x30f>
c0005e03:	31 d2                	xor    edx,edx
c0005e05:	89 d8                	mov    eax,ebx
c0005e07:	e8 a9 d4 ff ff       	call   c00032b5 <create_chain>
c0005e0c:	83 f8 01             	cmp    eax,0x1
c0005e0f:	0f 84 b9 fd ff ff    	je     c0005bce <f_lseek+0xbc>
c0005e15:	83 f8 ff             	cmp    eax,0xffffffff
c0005e18:	0f 84 c6 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005e1e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e21:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e24:	85 c0                	test   eax,eax
c0005e26:	0f 84 4b ff ff ff    	je     c0005d77 <f_lseek+0x265>
c0005e2c:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e30:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e38:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e3b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e3f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e42:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e45:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e49:	0f 83 9d 00 00 00    	jae    c0005eec <f_lseek+0x3da>
c0005e4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e53:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e57:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e5a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e5e:	01 f2                	add    edx,esi
c0005e60:	11 f9                	adc    ecx,edi
c0005e62:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e66:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e6a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e6d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e70:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e73:	f6 c1 02             	test   cl,0x2
c0005e76:	74 35                	je     c0005ead <f_lseek+0x39b>
c0005e78:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e7c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e7f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e82:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e86:	73 16                	jae    c0005e9e <f_lseek+0x38c>
c0005e88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e8c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e90:	88 ca                	mov    dl,cl
c0005e92:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e95:	83 ca 40             	or     edx,0x40
c0005e98:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e9b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e9e:	89 c2                	mov    edx,eax
c0005ea0:	89 d8                	mov    eax,ebx
c0005ea2:	e8 0e d4 ff ff       	call   c00032b5 <create_chain>
c0005ea7:	85 c0                	test   eax,eax
c0005ea9:	75 0b                	jne    c0005eb6 <f_lseek+0x3a4>
c0005eab:	eb 30                	jmp    c0005edd <f_lseek+0x3cb>
c0005ead:	89 c2                	mov    edx,eax
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 11 d1 ff ff       	call   c0002fc7 <get_fat>
c0005eb6:	83 f8 ff             	cmp    eax,0xffffffff
c0005eb9:	0f 84 25 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005ebf:	83 f8 01             	cmp    eax,0x1
c0005ec2:	0f 86 06 fd ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ec8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ecc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ecf:	0f 86 f9 fc ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ed5:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ed8:	e9 5b ff ff ff       	jmp    c0005e38 <f_lseek+0x326>
c0005edd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ee4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eef:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ef3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ef6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ef9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005efc:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f02:	0f 84 6f fe ff ff    	je     c0005d77 <f_lseek+0x265>
c0005f08:	89 c2                	mov    edx,eax
c0005f0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f0e:	e8 e7 bf ff ff       	call   c0001efa <clst2sect>
c0005f13:	89 d7                	mov    edi,edx
c0005f15:	09 c7                	or     edi,eax
c0005f17:	0f 84 b1 fc ff ff    	je     c0005bce <f_lseek+0xbc>
c0005f1d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f21:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f24:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f28:	c1 ef 09             	shr    edi,0x9
c0005f2b:	01 c6                	add    esi,eax
c0005f2d:	11 d7                	adc    edi,edx
c0005f2f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f32:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f35:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f38:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f3b:	19 d1                	sbb    ecx,edx
c0005f3d:	73 0a                	jae    c0005f49 <f_lseek+0x437>
c0005f3f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f42:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f45:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f49:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f4e:	74 6d                	je     c0005fbd <f_lseek+0x4ab>
c0005f50:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f53:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f56:	39 fa                	cmp    edx,edi
c0005f58:	75 04                	jne    c0005f5e <f_lseek+0x44c>
c0005f5a:	39 f0                	cmp    eax,esi
c0005f5c:	74 5f                	je     c0005fbd <f_lseek+0x4ab>
c0005f5e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f61:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f65:	79 25                	jns    c0005f8c <f_lseek+0x47a>
c0005f67:	83 ec 0c             	sub    esp,0xc
c0005f6a:	6a 01                	push   0x1
c0005f6c:	52                   	push   edx
c0005f6d:	50                   	push   eax
c0005f6e:	55                   	push   ebp
c0005f6f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f73:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f77:	50                   	push   eax
c0005f78:	e8 af bc ff ff       	call   c0001c2c <disk_write>
c0005f7d:	83 c4 20             	add    esp,0x20
c0005f80:	85 c0                	test   eax,eax
c0005f82:	0f 85 5c fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005f88:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f8c:	83 ec 0c             	sub    esp,0xc
c0005f8f:	6a 01                	push   0x1
c0005f91:	57                   	push   edi
c0005f92:	56                   	push   esi
c0005f93:	55                   	push   ebp
c0005f94:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f98:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f9c:	50                   	push   eax
c0005f9d:	e8 74 bc ff ff       	call   c0001c16 <disk_read>
c0005fa2:	83 c4 20             	add    esp,0x20
c0005fa5:	85 c0                	test   eax,eax
c0005fa7:	0f 85 37 fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005fad:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fb0:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fb3:	eb 08                	jmp    c0005fbd <f_lseek+0x4ab>
c0005fb5:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc1:	83 c4 3c             	add    esp,0x3c
c0005fc4:	5b                   	pop    ebx
c0005fc5:	5e                   	pop    esi
c0005fc6:	5f                   	pop    edi
c0005fc7:	5d                   	pop    ebp
c0005fc8:	c3                   	ret    

c0005fc9 <f_opendir>:
c0005fc9:	56                   	push   esi
c0005fca:	b8 09 00 00 00       	mov    eax,0x9
c0005fcf:	53                   	push   ebx
c0005fd0:	83 ec 24             	sub    esp,0x24
c0005fd3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fd7:	85 db                	test   ebx,ebx
c0005fd9:	0f 84 e6 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c0005fdf:	31 c9                	xor    ecx,ecx
c0005fe1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fe5:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005fe9:	e8 03 c7 ff ff       	call   c00026f1 <mount_volume>
c0005fee:	85 c0                	test   eax,eax
c0005ff0:	0f 85 c9 00 00 00    	jne    c00060bf <f_opendir+0xf6>
c0005ff6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ffa:	83 ec 0c             	sub    esp,0xc
c0005ffd:	89 03                	mov    DWORD PTR [ebx],eax
c0005fff:	68 60 04 00 00       	push   0x460
c0006004:	e8 8b 24 00 00       	call   c0008494 <ff_memalloc>
c0006009:	83 c4 10             	add    esp,0x10
c000600c:	89 c6                	mov    esi,eax
c000600e:	b8 11 00 00 00       	mov    eax,0x11
c0006013:	85 f6                	test   esi,esi
c0006015:	0f 84 aa 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c000601b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000601f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006025:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006028:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000602b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000602f:	89 d8                	mov    eax,ebx
c0006031:	e8 31 ee ff ff       	call   c0004e67 <follow_path>
c0006036:	85 c0                	test   eax,eax
c0006038:	75 61                	jne    c000609b <f_opendir+0xd2>
c000603a:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c000603e:	78 46                	js     c0006086 <f_opendir+0xbd>
c0006040:	b8 05 00 00 00       	mov    eax,0x5
c0006045:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006049:	74 50                	je     c000609b <f_opendir+0xd2>
c000604b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000604f:	8a 01                	mov    al,BYTE PTR [ecx]
c0006051:	3c 04                	cmp    al,0x4
c0006053:	75 26                	jne    c000607b <f_opendir+0xb2>
c0006055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000605b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000605e:	30 d2                	xor    dl,dl
c0006060:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006064:	09 c2                	or     edx,eax
c0006066:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006069:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000606c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000606f:	89 da                	mov    edx,ebx
c0006071:	8d 41 10             	lea    eax,[ecx+0x10]
c0006074:	e8 b4 ed ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0006079:	eb 0b                	jmp    c0006086 <f_opendir+0xbd>
c000607b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000607e:	e8 59 ed ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006083:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0006086:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000608a:	31 d2                	xor    edx,edx
c000608c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006090:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0006094:	89 d8                	mov    eax,ebx
c0006096:	e8 22 d1 ff ff       	call   c00031bd <dir_sdi>
c000609b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000609f:	83 ec 0c             	sub    esp,0xc
c00060a2:	56                   	push   esi
c00060a3:	e8 02 24 00 00       	call   c00084aa <ff_memfree>
c00060a8:	83 c4 10             	add    esp,0x10
c00060ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060af:	83 f8 04             	cmp    eax,0x4
c00060b2:	74 06                	je     c00060ba <f_opendir+0xf1>
c00060b4:	85 c0                	test   eax,eax
c00060b6:	74 0d                	je     c00060c5 <f_opendir+0xfc>
c00060b8:	eb 05                	jmp    c00060bf <f_opendir+0xf6>
c00060ba:	b8 05 00 00 00       	mov    eax,0x5
c00060bf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060c5:	83 c4 24             	add    esp,0x24
c00060c8:	5b                   	pop    ebx
c00060c9:	5e                   	pop    esi
c00060ca:	c3                   	ret    

c00060cb <f_closedir>:
c00060cb:	53                   	push   ebx
c00060cc:	83 ec 18             	sub    esp,0x18
c00060cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060d3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060d7:	89 d8                	mov    eax,ebx
c00060d9:	e8 86 c2 ff ff       	call   c0002364 <validate>
c00060de:	85 c0                	test   eax,eax
c00060e0:	75 06                	jne    c00060e8 <f_closedir+0x1d>
c00060e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060e8:	83 c4 18             	add    esp,0x18
c00060eb:	5b                   	pop    ebx
c00060ec:	c3                   	ret    

c00060ed <f_readdir>:
c00060ed:	57                   	push   edi
c00060ee:	56                   	push   esi
c00060ef:	53                   	push   ebx
c00060f0:	83 ec 20             	sub    esp,0x20
c00060f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060fb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060ff:	89 d8                	mov    eax,ebx
c0006101:	e8 5e c2 ff ff       	call   c0002364 <validate>
c0006106:	85 c0                	test   eax,eax
c0006108:	75 77                	jne    c0006181 <f_readdir+0x94>
c000610a:	85 ff                	test   edi,edi
c000610c:	75 0b                	jne    c0006119 <f_readdir+0x2c>
c000610e:	31 d2                	xor    edx,edx
c0006110:	89 d8                	mov    eax,ebx
c0006112:	e8 a6 d0 ff ff       	call   c00031bd <dir_sdi>
c0006117:	eb 68                	jmp    c0006181 <f_readdir+0x94>
c0006119:	83 ec 0c             	sub    esp,0xc
c000611c:	68 60 04 00 00       	push   0x460
c0006121:	e8 6e 23 00 00       	call   c0008494 <ff_memalloc>
c0006126:	83 c4 10             	add    esp,0x10
c0006129:	89 c6                	mov    esi,eax
c000612b:	b8 11 00 00 00       	mov    eax,0x11
c0006130:	85 f6                	test   esi,esi
c0006132:	74 4d                	je     c0006181 <f_readdir+0x94>
c0006134:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006138:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000613e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006141:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006144:	31 d2                	xor    edx,edx
c0006146:	89 d8                	mov    eax,ebx
c0006148:	e8 80 d8 ff ff       	call   c00039cd <dir_read>
c000614d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006152:	75 19                	jne    c000616d <f_readdir+0x80>
c0006154:	89 fa                	mov    edx,edi
c0006156:	89 d8                	mov    eax,ebx
c0006158:	e8 7e ea ff ff       	call   c0004bdb <get_fileinfo>
c000615d:	31 d2                	xor    edx,edx
c000615f:	89 d8                	mov    eax,ebx
c0006161:	e8 af d5 ff ff       	call   c0003715 <dir_next>
c0006166:	83 f8 04             	cmp    eax,0x4
c0006169:	75 02                	jne    c000616d <f_readdir+0x80>
c000616b:	31 c0                	xor    eax,eax
c000616d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006171:	83 ec 0c             	sub    esp,0xc
c0006174:	56                   	push   esi
c0006175:	e8 30 23 00 00       	call   c00084aa <ff_memfree>
c000617a:	83 c4 10             	add    esp,0x10
c000617d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006181:	83 c4 20             	add    esp,0x20
c0006184:	5b                   	pop    ebx
c0006185:	5e                   	pop    esi
c0006186:	5f                   	pop    edi
c0006187:	c3                   	ret    

c0006188 <f_stat>:
c0006188:	57                   	push   edi
c0006189:	31 c9                	xor    ecx,ecx
c000618b:	56                   	push   esi
c000618c:	53                   	push   ebx
c000618d:	83 ec 50             	sub    esp,0x50
c0006190:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006194:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006198:	8d 44 24 60          	lea    eax,[esp+0x60]
c000619c:	e8 50 c5 ff ff       	call   c00026f1 <mount_volume>
c00061a1:	89 c3                	mov    ebx,eax
c00061a3:	85 c0                	test   eax,eax
c00061a5:	75 67                	jne    c000620e <f_stat+0x86>
c00061a7:	83 ec 0c             	sub    esp,0xc
c00061aa:	bb 11 00 00 00       	mov    ebx,0x11
c00061af:	68 60 04 00 00       	push   0x460
c00061b4:	e8 db 22 00 00       	call   c0008494 <ff_memalloc>
c00061b9:	83 c4 10             	add    esp,0x10
c00061bc:	89 c6                	mov    esi,eax
c00061be:	85 c0                	test   eax,eax
c00061c0:	74 4c                	je     c000620e <f_stat+0x86>
c00061c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061c6:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061cc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061cf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061d2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061d6:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061da:	e8 88 ec ff ff       	call   c0004e67 <follow_path>
c00061df:	89 c3                	mov    ebx,eax
c00061e1:	85 c0                	test   eax,eax
c00061e3:	75 1d                	jne    c0006202 <f_stat+0x7a>
c00061e5:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061ea:	78 11                	js     c00061fd <f_stat+0x75>
c00061ec:	85 ff                	test   edi,edi
c00061ee:	74 12                	je     c0006202 <f_stat+0x7a>
c00061f0:	89 fa                	mov    edx,edi
c00061f2:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061f6:	e8 e0 e9 ff ff       	call   c0004bdb <get_fileinfo>
c00061fb:	eb 05                	jmp    c0006202 <f_stat+0x7a>
c00061fd:	bb 06 00 00 00       	mov    ebx,0x6
c0006202:	83 ec 0c             	sub    esp,0xc
c0006205:	56                   	push   esi
c0006206:	e8 9f 22 00 00       	call   c00084aa <ff_memfree>
c000620b:	83 c4 10             	add    esp,0x10
c000620e:	83 c4 50             	add    esp,0x50
c0006211:	89 d8                	mov    eax,ebx
c0006213:	5b                   	pop    ebx
c0006214:	5e                   	pop    esi
c0006215:	5f                   	pop    edi
c0006216:	c3                   	ret    

c0006217 <f_getfree>:
c0006217:	55                   	push   ebp
c0006218:	31 c9                	xor    ecx,ecx
c000621a:	57                   	push   edi
c000621b:	56                   	push   esi
c000621c:	53                   	push   ebx
c000621d:	83 ec 5c             	sub    esp,0x5c
c0006220:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006224:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006228:	e8 c4 c4 ff ff       	call   c00026f1 <mount_volume>
c000622d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006231:	85 c0                	test   eax,eax
c0006233:	0f 85 9d 01 00 00    	jne    c00063d6 <f_getfree+0x1bf>
c0006239:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000623d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006241:	89 02                	mov    DWORD PTR [edx],eax
c0006243:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006246:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006249:	8d 71 fe             	lea    esi,[ecx-0x2]
c000624c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006250:	39 f2                	cmp    edx,esi
c0006252:	77 0b                	ja     c000625f <f_getfree+0x48>
c0006254:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006258:	89 10                	mov    DWORD PTR [eax],edx
c000625a:	e9 77 01 00 00       	jmp    c00063d6 <f_getfree+0x1bf>
c000625f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006261:	80 fa 01             	cmp    dl,0x1
c0006264:	75 3a                	jne    c00062a0 <f_getfree+0x89>
c0006266:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000626a:	be 02 00 00 00       	mov    esi,0x2
c000626f:	31 db                	xor    ebx,ebx
c0006271:	89 f2                	mov    edx,esi
c0006273:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006277:	e8 4b cd ff ff       	call   c0002fc7 <get_fat>
c000627c:	83 f8 ff             	cmp    eax,0xffffffff
c000627f:	0f 84 28 01 00 00    	je     c00063ad <f_getfree+0x196>
c0006285:	83 f8 01             	cmp    eax,0x1
c0006288:	0f 84 29 01 00 00    	je     c00063b7 <f_getfree+0x1a0>
c000628e:	83 d3 00             	adc    ebx,0x0
c0006291:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006295:	46                   	inc    esi
c0006296:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006299:	77 d6                	ja     c0006271 <f_getfree+0x5a>
c000629b:	e9 25 01 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c00062a0:	80 fa 04             	cmp    dl,0x4
c00062a3:	0f 85 88 00 00 00    	jne    c0006331 <f_getfree+0x11a>
c00062a9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062ac:	31 ed                	xor    ebp,ebp
c00062ae:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062b9:	31 db                	xor    ebx,ebx
c00062bb:	85 ed                	test   ebp,ebp
c00062bd:	75 3f                	jne    c00062fe <f_getfree+0xe7>
c00062bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062c7:	83 c0 01             	add    eax,0x1
c00062ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062ce:	83 d2 00             	adc    edx,0x0
c00062d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062e1:	e8 59 c1 ff ff       	call   c000243f <move_window>
c00062e6:	85 c0                	test   eax,eax
c00062e8:	0f 85 d3 00 00 00    	jne    c00063c1 <f_getfree+0x1aa>
c00062ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062fa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006302:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006305:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006309:	89 cf                	mov    edi,ecx
c000630b:	85 f6                	test   esi,esi
c000630d:	74 12                	je     c0006321 <f_getfree+0x10a>
c000630f:	88 c1                	mov    cl,al
c0006311:	83 e1 01             	and    ecx,0x1
c0006314:	80 f9 01             	cmp    cl,0x1
c0006317:	83 d3 00             	adc    ebx,0x0
c000631a:	d0 e8                	shr    al,1
c000631c:	4e                   	dec    esi
c000631d:	39 fe                	cmp    esi,edi
c000631f:	75 ea                	jne    c000630b <f_getfree+0xf4>
c0006321:	45                   	inc    ebp
c0006322:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006328:	85 f6                	test   esi,esi
c000632a:	75 8f                	jne    c00062bb <f_getfree+0xa4>
c000632c:	e9 94 00 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c0006331:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006334:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006337:	31 f6                	xor    esi,esi
c0006339:	31 db                	xor    ebx,ebx
c000633b:	85 f6                	test   esi,esi
c000633d:	75 1b                	jne    c000635a <f_getfree+0x143>
c000633f:	89 d7                	mov    edi,edx
c0006341:	89 cd                	mov    ebp,ecx
c0006343:	83 c7 01             	add    edi,0x1
c0006346:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000634a:	83 d5 00             	adc    ebp,0x0
c000634d:	e8 ed c0 ff ff       	call   c000243f <move_window>
c0006352:	85 c0                	test   eax,eax
c0006354:	75 6b                	jne    c00063c1 <f_getfree+0x1aa>
c0006356:	89 fa                	mov    edx,edi
c0006358:	89 e9                	mov    ecx,ebp
c000635a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000635e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006362:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006366:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006369:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000636d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006371:	75 11                	jne    c0006384 <f_getfree+0x16d>
c0006373:	e8 e9 b8 ff ff       	call   c0001c61 <ld_word>
c0006378:	66 83 f8 01          	cmp    ax,0x1
c000637c:	83 d3 00             	adc    ebx,0x0
c000637f:	83 c6 02             	add    esi,0x2
c0006382:	eb 13                	jmp    c0006397 <f_getfree+0x180>
c0006384:	e8 e5 b8 ff ff       	call   c0001c6e <ld_dword>
c0006389:	25 ff ff ff 0f       	and    eax,0xfffffff
c000638e:	83 f8 01             	cmp    eax,0x1
c0006391:	83 d3 00             	adc    ebx,0x0
c0006394:	83 c6 04             	add    esi,0x4
c0006397:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000639d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063a1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063a5:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063a9:	75 90                	jne    c000633b <f_getfree+0x124>
c00063ab:	eb 18                	jmp    c00063c5 <f_getfree+0x1ae>
c00063ad:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063b5:	eb 0e                	jmp    c00063c5 <f_getfree+0x1ae>
c00063b7:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063bf:	eb 04                	jmp    c00063c5 <f_getfree+0x1ae>
c00063c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063c5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063c9:	89 18                	mov    DWORD PTR [eax],ebx
c00063cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063cf:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063d2:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063da:	83 c4 5c             	add    esp,0x5c
c00063dd:	5b                   	pop    ebx
c00063de:	5e                   	pop    esi
c00063df:	5f                   	pop    edi
c00063e0:	5d                   	pop    ebp
c00063e1:	c3                   	ret    

c00063e2 <f_truncate>:
c00063e2:	56                   	push   esi
c00063e3:	53                   	push   ebx
c00063e4:	83 ec 14             	sub    esp,0x14
c00063e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063eb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063ef:	89 d8                	mov    eax,ebx
c00063f1:	e8 6e bf ff ff       	call   c0002364 <validate>
c00063f6:	89 c6                	mov    esi,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	0f 85 d2 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c0006400:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006404:	85 f6                	test   esi,esi
c0006406:	0f 85 c6 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c000640c:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006410:	0f 84 b7 00 00 00    	je     c00064cd <f_truncate+0xeb>
c0006416:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006419:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000641c:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000641f:	89 d1                	mov    ecx,edx
c0006421:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006424:	0f 83 a8 00 00 00    	jae    c00064d2 <f_truncate+0xf0>
c000642a:	09 c2                	or     edx,eax
c000642c:	75 15                	jne    c0006443 <f_truncate+0x61>
c000642e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006431:	31 c9                	xor    ecx,ecx
c0006433:	89 d8                	mov    eax,ebx
c0006435:	e8 7a d0 ff ff       	call   c00034b4 <remove_chain>
c000643a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006441:	eb 35                	jmp    c0006478 <f_truncate+0x96>
c0006443:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006446:	89 d8                	mov    eax,ebx
c0006448:	e8 7a cb ff ff       	call   c0002fc7 <get_fat>
c000644d:	89 c2                	mov    edx,eax
c000644f:	b8 01 00 00 00       	mov    eax,0x1
c0006454:	83 fa ff             	cmp    edx,0xffffffff
c0006457:	74 1f                	je     c0006478 <f_truncate+0x96>
c0006459:	b8 02 00 00 00       	mov    eax,0x2
c000645e:	83 fa 01             	cmp    edx,0x1
c0006461:	74 15                	je     c0006478 <f_truncate+0x96>
c0006463:	31 c0                	xor    eax,eax
c0006465:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006469:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000646c:	76 0a                	jbe    c0006478 <f_truncate+0x96>
c000646e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006471:	89 d8                	mov    eax,ebx
c0006473:	e8 3c d0 ff ff       	call   c00034b4 <remove_chain>
c0006478:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000647b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000647e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006481:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006484:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006487:	83 ca 40             	or     edx,0x40
c000648a:	85 c0                	test   eax,eax
c000648c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000648f:	75 35                	jne    c00064c6 <f_truncate+0xe4>
c0006491:	84 d2                	test   dl,dl
c0006493:	79 3d                	jns    c00064d2 <f_truncate+0xf0>
c0006495:	83 ec 0c             	sub    esp,0xc
c0006498:	8d 43 50             	lea    eax,[ebx+0x50]
c000649b:	6a 01                	push   0x1
c000649d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064a0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064a3:	50                   	push   eax
c00064a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064a8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064ac:	50                   	push   eax
c00064ad:	e8 7a b7 ff ff       	call   c0001c2c <disk_write>
c00064b2:	83 c4 20             	add    esp,0x20
c00064b5:	85 c0                	test   eax,eax
c00064b7:	75 08                	jne    c00064c1 <f_truncate+0xdf>
c00064b9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064bd:	31 f6                	xor    esi,esi
c00064bf:	eb 11                	jmp    c00064d2 <f_truncate+0xf0>
c00064c1:	b8 01 00 00 00       	mov    eax,0x1
c00064c6:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064c9:	89 c6                	mov    esi,eax
c00064cb:	eb 05                	jmp    c00064d2 <f_truncate+0xf0>
c00064cd:	be 07 00 00 00       	mov    esi,0x7
c00064d2:	89 f0                	mov    eax,esi
c00064d4:	83 c4 14             	add    esp,0x14
c00064d7:	5b                   	pop    ebx
c00064d8:	5e                   	pop    esi
c00064d9:	c3                   	ret    

c00064da <f_unlink>:
c00064da:	56                   	push   esi
c00064db:	b9 02 00 00 00       	mov    ecx,0x2
c00064e0:	53                   	push   ebx
c00064e1:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064eb:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064f2:	e8 fa c1 ff ff       	call   c00026f1 <mount_volume>
c00064f7:	85 c0                	test   eax,eax
c00064f9:	0f 85 55 01 00 00    	jne    c0006654 <f_unlink+0x17a>
c00064ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006503:	83 ec 0c             	sub    esp,0xc
c0006506:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000650a:	68 60 04 00 00       	push   0x460
c000650f:	e8 80 1f 00 00       	call   c0008494 <ff_memalloc>
c0006514:	83 c4 10             	add    esp,0x10
c0006517:	89 c3                	mov    ebx,eax
c0006519:	b8 11 00 00 00       	mov    eax,0x11
c000651e:	85 db                	test   ebx,ebx
c0006520:	0f 84 2e 01 00 00    	je     c0006654 <f_unlink+0x17a>
c0006526:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000652a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006530:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006533:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006536:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000653d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006541:	e8 21 e9 ff ff       	call   c0004e67 <follow_path>
c0006546:	85 c0                	test   eax,eax
c0006548:	0f 85 f2 00 00 00    	jne    c0006640 <f_unlink+0x166>
c000654e:	b8 06 00 00 00       	mov    eax,0x6
c0006553:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000655b:	0f 88 df 00 00 00    	js     c0006640 <f_unlink+0x166>
c0006561:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006566:	74 0a                	je     c0006572 <f_unlink+0x98>
c0006568:	b8 07 00 00 00       	mov    eax,0x7
c000656d:	e9 ce 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c0006572:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006576:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000657a:	8a 02                	mov    al,BYTE PTR [edx]
c000657c:	3c 04                	cmp    al,0x4
c000657e:	75 12                	jne    c0006592 <f_unlink+0xb8>
c0006580:	8d 42 10             	lea    eax,[edx+0x10]
c0006583:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006587:	e8 a1 e8 ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c000658c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006590:	eb 0e                	jmp    c00065a0 <f_unlink+0xc6>
c0006592:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006599:	e8 3e e8 ff ff       	call   c0004ddc <ld_clust.isra.0>
c000659e:	89 c6                	mov    esi,eax
c00065a0:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065a5:	75 12                	jne    c00065b9 <f_unlink+0xdf>
c00065a7:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065ab:	e8 94 d6 ff ff       	call   c0003c44 <dir_remove>
c00065b0:	85 c0                	test   eax,eax
c00065b2:	74 6c                	je     c0006620 <f_unlink+0x146>
c00065b4:	e9 87 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c00065b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065bd:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065c4:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065cb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065ce:	75 21                	jne    c00065f1 <f_unlink+0x117>
c00065d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065d8:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065df:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065e6:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065ea:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065f1:	31 d2                	xor    edx,edx
c00065f3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065fa:	e8 be cb ff ff       	call   c00031bd <dir_sdi>
c00065ff:	85 c0                	test   eax,eax
c0006601:	75 3d                	jne    c0006640 <f_unlink+0x166>
c0006603:	31 d2                	xor    edx,edx
c0006605:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000660c:	e8 bc d3 ff ff       	call   c00039cd <dir_read>
c0006611:	85 c0                	test   eax,eax
c0006613:	0f 84 4f ff ff ff    	je     c0006568 <f_unlink+0x8e>
c0006619:	83 f8 04             	cmp    eax,0x4
c000661c:	75 22                	jne    c0006640 <f_unlink+0x166>
c000661e:	eb 87                	jmp    c00065a7 <f_unlink+0xcd>
c0006620:	85 f6                	test   esi,esi
c0006622:	75 0b                	jne    c000662f <f_unlink+0x155>
c0006624:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006628:	e8 3d df ff ff       	call   c000456a <sync_fs>
c000662d:	eb 11                	jmp    c0006640 <f_unlink+0x166>
c000662f:	31 c9                	xor    ecx,ecx
c0006631:	89 f2                	mov    edx,esi
c0006633:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006637:	e8 78 ce ff ff       	call   c00034b4 <remove_chain>
c000663c:	85 c0                	test   eax,eax
c000663e:	74 e4                	je     c0006624 <f_unlink+0x14a>
c0006640:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006644:	83 ec 0c             	sub    esp,0xc
c0006647:	53                   	push   ebx
c0006648:	e8 5d 1e 00 00       	call   c00084aa <ff_memfree>
c000664d:	83 c4 10             	add    esp,0x10
c0006650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006654:	81 c4 e4 00 00 00    	add    esp,0xe4
c000665a:	5b                   	pop    ebx
c000665b:	5e                   	pop    esi
c000665c:	c3                   	ret    

c000665d <f_mkdir>:
c000665d:	57                   	push   edi
c000665e:	b9 02 00 00 00       	mov    ecx,0x2
c0006663:	56                   	push   esi
c0006664:	53                   	push   ebx
c0006665:	83 c4 80             	add    esp,0xffffff80
c0006668:	8d 54 24 08          	lea    edx,[esp+0x8]
c000666c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006673:	e8 79 c0 ff ff       	call   c00026f1 <mount_volume>
c0006678:	89 c3                	mov    ebx,eax
c000667a:	85 c0                	test   eax,eax
c000667c:	0f 85 fe 01 00 00    	jne    c0006880 <f_mkdir+0x223>
c0006682:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006686:	bb 11 00 00 00       	mov    ebx,0x11
c000668b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000668f:	83 ec 0c             	sub    esp,0xc
c0006692:	68 60 04 00 00       	push   0x460
c0006697:	e8 f8 1d 00 00       	call   c0008494 <ff_memalloc>
c000669c:	83 c4 10             	add    esp,0x10
c000669f:	89 c7                	mov    edi,eax
c00066a1:	85 c0                	test   eax,eax
c00066a3:	0f 84 d7 01 00 00    	je     c0006880 <f_mkdir+0x223>
c00066a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066ad:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066b3:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066b9:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066c0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066c4:	e8 9e e7 ff ff       	call   c0004e67 <follow_path>
c00066c9:	89 c3                	mov    ebx,eax
c00066cb:	85 c0                	test   eax,eax
c00066cd:	74 3e                	je     c000670d <f_mkdir+0xb0>
c00066cf:	83 f8 04             	cmp    eax,0x4
c00066d2:	75 3e                	jne    c0006712 <f_mkdir+0xb5>
c00066d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d8:	31 d2                	xor    edx,edx
c00066da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066e2:	e8 ce cb ff ff       	call   c00032b5 <create_chain>
c00066e7:	89 c6                	mov    esi,eax
c00066e9:	85 c0                	test   eax,eax
c00066eb:	74 0c                	je     c00066f9 <f_mkdir+0x9c>
c00066ed:	bb 02 00 00 00       	mov    ebx,0x2
c00066f2:	83 f8 01             	cmp    eax,0x1
c00066f5:	74 07                	je     c00066fe <f_mkdir+0xa1>
c00066f7:	eb 2a                	jmp    c0006723 <f_mkdir+0xc6>
c00066f9:	bb 07 00 00 00       	mov    ebx,0x7
c00066fe:	31 c9                	xor    ecx,ecx
c0006700:	89 f2                	mov    edx,esi
c0006702:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006706:	e8 a9 cd ff ff       	call   c00034b4 <remove_chain>
c000670b:	eb 05                	jmp    c0006712 <f_mkdir+0xb5>
c000670d:	bb 08 00 00 00       	mov    ebx,0x8
c0006712:	83 ec 0c             	sub    esp,0xc
c0006715:	57                   	push   edi
c0006716:	e8 8f 1d 00 00       	call   c00084aa <ff_memfree>
c000671b:	83 c4 10             	add    esp,0x10
c000671e:	e9 5d 01 00 00       	jmp    c0006880 <f_mkdir+0x223>
c0006723:	bb 01 00 00 00       	mov    ebx,0x1
c0006728:	83 f8 ff             	cmp    eax,0xffffffff
c000672b:	74 d1                	je     c00066fe <f_mkdir+0xa1>
c000672d:	89 f2                	mov    edx,esi
c000672f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006733:	e8 c4 ce ff ff       	call   c00035fc <dir_clear>
c0006738:	89 c3                	mov    ebx,eax
c000673a:	85 c0                	test   eax,eax
c000673c:	75 c0                	jne    c00066fe <f_mkdir+0xa1>
c000673e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006742:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006745:	74 69                	je     c00067b0 <f_mkdir+0x153>
c0006747:	b9 0b 00 00 00       	mov    ecx,0xb
c000674c:	83 c0 54             	add    eax,0x54
c000674f:	ba 20 00 00 00       	mov    edx,0x20
c0006754:	e8 9c b5 ff ff       	call   c0001cf5 <mem_set>
c0006759:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006762:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006766:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000676a:	83 c0 6a             	add    eax,0x6a
c000676d:	e8 65 b5 ff ff       	call   c0001cd7 <st_dword>
c0006772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006776:	89 f1                	mov    ecx,esi
c0006778:	8d 50 54             	lea    edx,[eax+0x54]
c000677b:	e8 85 e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006784:	b9 20 00 00 00       	mov    ecx,0x20
c0006789:	8d 50 54             	lea    edx,[eax+0x54]
c000678c:	83 c0 74             	add    eax,0x74
c000678f:	e8 4c b5 ff ff       	call   c0001ce0 <mem_cpy>
c0006794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006798:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000679c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067a0:	8d 50 74             	lea    edx,[eax+0x74]
c00067a3:	e8 5d e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c00067a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ac:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067b0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067b4:	e8 2f db ff ff       	call   c00042e8 <dir_register>
c00067b9:	89 c3                	mov    ebx,eax
c00067bb:	85 c0                	test   eax,eax
c00067bd:	0f 85 3b ff ff ff    	jne    c00066fe <f_mkdir+0xa1>
c00067c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067ca:	75 74                	jne    c0006840 <f_mkdir+0x1e3>
c00067cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067cf:	ba 00 00 21 50       	mov    edx,0x50210000
c00067d4:	83 c0 0c             	add    eax,0xc
c00067d7:	e8 fb b4 ff ff       	call   c0001cd7 <st_dword>
c00067dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e0:	89 f2                	mov    edx,esi
c00067e2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e5:	83 c0 34             	add    eax,0x34
c00067e8:	e8 ea b4 ff ff       	call   c0001cd7 <st_dword>
c00067ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067f5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f8:	c1 e2 09             	shl    edx,0x9
c00067fb:	83 c0 38             	add    eax,0x38
c00067fe:	e8 d4 b4 ff ff       	call   c0001cd7 <st_dword>
c0006803:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006807:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000680b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000680e:	c1 e2 09             	shl    edx,0x9
c0006811:	83 c0 28             	add    eax,0x28
c0006814:	e8 be b4 ff ff       	call   c0001cd7 <st_dword>
c0006819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006820:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006824:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006827:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000682b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000682f:	e8 8b d3 ff ff       	call   c0003bbf <store_xdir>
c0006834:	89 c3                	mov    ebx,eax
c0006836:	85 c0                	test   eax,eax
c0006838:	0f 85 d4 fe ff ff    	jne    c0006712 <f_mkdir+0xb5>
c000683e:	eb 30                	jmp    c0006870 <f_mkdir+0x213>
c0006840:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006844:	ba 00 00 21 50       	mov    edx,0x50210000
c0006849:	83 c0 16             	add    eax,0x16
c000684c:	e8 86 b4 ff ff       	call   c0001cd7 <st_dword>
c0006851:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006855:	89 f1                	mov    ecx,esi
c0006857:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000685b:	e8 a5 e5 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006860:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006864:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000686c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006874:	e8 f1 dc ff ff       	call   c000456a <sync_fs>
c0006879:	89 c3                	mov    ebx,eax
c000687b:	e9 92 fe ff ff       	jmp    c0006712 <f_mkdir+0xb5>
c0006880:	83 ec 80             	sub    esp,0xffffff80
c0006883:	89 d8                	mov    eax,ebx
c0006885:	5b                   	pop    ebx
c0006886:	5e                   	pop    esi
c0006887:	5f                   	pop    edi
c0006888:	c3                   	ret    

c0006889 <f_rename>:
c0006889:	55                   	push   ebp
c000688a:	57                   	push   edi
c000688b:	56                   	push   esi
c000688c:	53                   	push   ebx
c000688d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006893:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000689a:	e8 a4 b9 ff ff       	call   c0002243 <get_ldnumber>
c000689f:	b9 02 00 00 00       	mov    ecx,0x2
c00068a4:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068a8:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068af:	e8 3d be ff ff       	call   c00026f1 <mount_volume>
c00068b4:	85 c0                	test   eax,eax
c00068b6:	0f 85 b5 02 00 00    	jne    c0006b71 <f_rename+0x2e8>
c00068bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c0:	83 ec 0c             	sub    esp,0xc
c00068c3:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068c7:	68 60 04 00 00       	push   0x460
c00068cc:	e8 c3 1b 00 00       	call   c0008494 <ff_memalloc>
c00068d1:	83 c4 10             	add    esp,0x10
c00068d4:	89 c3                	mov    ebx,eax
c00068d6:	b8 11 00 00 00       	mov    eax,0x11
c00068db:	85 db                	test   ebx,ebx
c00068dd:	0f 84 8e 02 00 00    	je     c0006b71 <f_rename+0x2e8>
c00068e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e7:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068ed:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068f3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068fa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fe:	e8 64 e5 ff ff       	call   c0004e67 <follow_path>
c0006903:	85 c0                	test   eax,eax
c0006905:	0f 85 52 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000690b:	b8 06 00 00 00       	mov    eax,0x6
c0006910:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006918:	0f 85 3f 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000691e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006922:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006925:	0f 85 05 01 00 00    	jne    c0006a30 <f_rename+0x1a7>
c000692b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000692e:	b9 40 00 00 00       	mov    ecx,0x40
c0006933:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006937:	e8 a4 b3 ff ff       	call   c0001ce0 <mem_cpy>
c000693c:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006941:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006945:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694c:	e8 8f b3 ff ff       	call   c0001ce0 <mem_cpy>
c0006951:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006958:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695f:	e8 03 e5 ff ff       	call   c0004e67 <follow_path>
c0006964:	85 c0                	test   eax,eax
c0006966:	75 29                	jne    c0006991 <f_rename+0x108>
c0006968:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006973:	74 0a                	je     c000697f <f_rename+0xf6>
c0006975:	b8 08 00 00 00       	mov    eax,0x8
c000697a:	e9 de 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c000697f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006986:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698d:	75 e6                	jne    c0006975 <f_rename+0xec>
c000698f:	eb 09                	jmp    c000699a <f_rename+0x111>
c0006991:	83 f8 04             	cmp    eax,0x4
c0006994:	0f 85 c3 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000699a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a1:	e8 42 d9 ff ff       	call   c00042e8 <dir_register>
c00069a6:	85 c0                	test   eax,eax
c00069a8:	0f 85 af 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c00069ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b2:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069b5:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069b8:	89 c5                	mov    ebp,eax
c00069ba:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069bd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069c1:	8d 46 24             	lea    eax,[esi+0x24]
c00069c4:	e8 98 b2 ff ff       	call   c0001c61 <ld_word>
c00069c9:	b9 40 00 00 00       	mov    ecx,0x40
c00069ce:	89 c7                	mov    edi,eax
c00069d0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069d4:	89 f0                	mov    eax,esi
c00069d6:	e8 05 b3 ff ff       	call   c0001ce0 <mem_cpy>
c00069db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069df:	89 e9                	mov    ecx,ebp
c00069e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069e4:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069e7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ef:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069f2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069f5:	0f b7 d7             	movzx  edx,di
c00069f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069fb:	83 c0 24             	add    eax,0x24
c00069fe:	e8 d0 b2 ff ff       	call   c0001cd3 <st_word>
c0006a03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a07:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a0a:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a0d:	a8 10                	test   al,0x10
c0006a0f:	75 06                	jne    c0006a17 <f_rename+0x18e>
c0006a11:	83 c8 20             	or     eax,0x20
c0006a14:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a17:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1e:	e8 9c d1 ff ff       	call   c0003bbf <store_xdir>
c0006a23:	85 c0                	test   eax,eax
c0006a25:	0f 84 1c 01 00 00    	je     c0006b47 <f_rename+0x2be>
c0006a2b:	e9 2d 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c0006a30:	b9 20 00 00 00       	mov    ecx,0x20
c0006a35:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a3c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a40:	e8 9b b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a45:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a4a:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a4e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a55:	e8 86 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a5a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a61:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a68:	e8 fa e3 ff ff       	call   c0004e67 <follow_path>
c0006a6d:	85 c0                	test   eax,eax
c0006a6f:	75 27                	jne    c0006a98 <f_rename+0x20f>
c0006a71:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a75:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a7c:	0f 85 f3 fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a82:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a89:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a90:	0f 85 df fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a96:	eb 09                	jmp    c0006aa1 <f_rename+0x218>
c0006a98:	83 f8 04             	cmp    eax,0x4
c0006a9b:	0f 85 bc 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006aa1:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006aa8:	e8 3b d8 ff ff       	call   c00042e8 <dir_register>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	0f 85 a8 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006ab5:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006abc:	b9 13 00 00 00       	mov    ecx,0x13
c0006ac1:	8d 46 0d             	lea    eax,[esi+0xd]
c0006ac4:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ac8:	e8 13 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006acd:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ad1:	a8 10                	test   al,0x10
c0006ad3:	75 03                	jne    c0006ad8 <f_rename+0x24f>
c0006ad5:	83 c8 20             	or     eax,0x20
c0006ad8:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006adb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006adf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ae3:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006ae7:	74 5e                	je     c0006b47 <f_rename+0x2be>
c0006ae9:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006af0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006af4:	74 51                	je     c0006b47 <f_rename+0x2be>
c0006af6:	89 f2                	mov    edx,esi
c0006af8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006afc:	8a 07                	mov    al,BYTE PTR [edi]
c0006afe:	e8 d9 e2 ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006b03:	89 c2                	mov    edx,eax
c0006b05:	89 f8                	mov    eax,edi
c0006b07:	e8 ee b3 ff ff       	call   c0001efa <clst2sect>
c0006b0c:	89 c6                	mov    esi,eax
c0006b0e:	89 d1                	mov    ecx,edx
c0006b10:	b8 02 00 00 00       	mov    eax,0x2
c0006b15:	09 f2                	or     edx,esi
c0006b17:	74 44                	je     c0006b5d <f_rename+0x2d4>
c0006b19:	89 f2                	mov    edx,esi
c0006b1b:	89 f8                	mov    eax,edi
c0006b1d:	e8 1d b9 ff ff       	call   c000243f <move_window>
c0006b22:	85 c0                	test   eax,eax
c0006b24:	75 37                	jne    c0006b5d <f_rename+0x2d4>
c0006b26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b2a:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b2e:	75 17                	jne    c0006b47 <f_rename+0x2be>
c0006b30:	8d 50 74             	lea    edx,[eax+0x74]
c0006b33:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b3a:	e8 c6 e2 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006b3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b43:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b47:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b4b:	e8 f4 d0 ff ff       	call   c0003c44 <dir_remove>
c0006b50:	85 c0                	test   eax,eax
c0006b52:	75 09                	jne    c0006b5d <f_rename+0x2d4>
c0006b54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b58:	e8 0d da ff ff       	call   c000456a <sync_fs>
c0006b5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b61:	83 ec 0c             	sub    esp,0xc
c0006b64:	53                   	push   ebx
c0006b65:	e8 40 19 00 00       	call   c00084aa <ff_memfree>
c0006b6a:	83 c4 10             	add    esp,0x10
c0006b6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b71:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b77:	5b                   	pop    ebx
c0006b78:	5e                   	pop    esi
c0006b79:	5f                   	pop    edi
c0006b7a:	5d                   	pop    ebp
c0006b7b:	c3                   	ret    

c0006b7c <f_chmod>:
c0006b7c:	57                   	push   edi
c0006b7d:	b9 02 00 00 00       	mov    ecx,0x2
c0006b82:	56                   	push   esi
c0006b83:	53                   	push   ebx
c0006b84:	83 ec 60             	sub    esp,0x60
c0006b87:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b8b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b8f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b93:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b97:	e8 55 bb ff ff       	call   c00026f1 <mount_volume>
c0006b9c:	85 c0                	test   eax,eax
c0006b9e:	0f 85 af 00 00 00    	jne    c0006c53 <f_chmod+0xd7>
c0006ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba8:	83 ec 0c             	sub    esp,0xc
c0006bab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006baf:	68 60 04 00 00       	push   0x460
c0006bb4:	e8 db 18 00 00       	call   c0008494 <ff_memalloc>
c0006bb9:	83 c4 10             	add    esp,0x10
c0006bbc:	89 c6                	mov    esi,eax
c0006bbe:	b8 11 00 00 00       	mov    eax,0x11
c0006bc3:	85 f6                	test   esi,esi
c0006bc5:	0f 84 88 00 00 00    	je     c0006c53 <f_chmod+0xd7>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bdb:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bdf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006be3:	e8 7f e2 ff ff       	call   c0004e67 <follow_path>
c0006be8:	85 c0                	test   eax,eax
c0006bea:	75 53                	jne    c0006c3f <f_chmod+0xc3>
c0006bec:	b8 06 00 00 00       	mov    eax,0x6
c0006bf1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bf6:	75 47                	jne    c0006c3f <f_chmod+0xc3>
c0006bf8:	89 f9                	mov    ecx,edi
c0006bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bfe:	83 e1 27             	and    ecx,0x27
c0006c01:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c04:	75 1d                	jne    c0006c23 <f_chmod+0xa7>
c0006c06:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c09:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c0c:	21 cb                	and    ebx,ecx
c0006c0e:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c11:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c14:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c18:	e8 a2 cf ff ff       	call   c0003bbf <store_xdir>
c0006c1d:	85 c0                	test   eax,eax
c0006c1f:	75 1e                	jne    c0006c3f <f_chmod+0xc3>
c0006c21:	eb 13                	jmp    c0006c36 <f_chmod+0xba>
c0006c23:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c27:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2a:	21 cb                	and    ebx,ecx
c0006c2c:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2f:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c32:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	e8 2b d9 ff ff       	call   c000456a <sync_fs>
c0006c3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	56                   	push   esi
c0006c47:	e8 5e 18 00 00       	call   c00084aa <ff_memfree>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c53:	83 c4 60             	add    esp,0x60
c0006c56:	5b                   	pop    ebx
c0006c57:	5e                   	pop    esi
c0006c58:	5f                   	pop    edi
c0006c59:	c3                   	ret    

c0006c5a <f_utime>:
c0006c5a:	56                   	push   esi
c0006c5b:	b9 02 00 00 00       	mov    ecx,0x2
c0006c60:	53                   	push   ebx
c0006c61:	83 ec 64             	sub    esp,0x64
c0006c64:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c68:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c70:	e8 7c ba ff ff       	call   c00026f1 <mount_volume>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	0f 85 b5 00 00 00    	jne    c0006d32 <f_utime+0xd8>
c0006c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c81:	83 ec 0c             	sub    esp,0xc
c0006c84:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c88:	68 60 04 00 00       	push   0x460
c0006c8d:	e8 02 18 00 00       	call   c0008494 <ff_memalloc>
c0006c92:	83 c4 10             	add    esp,0x10
c0006c95:	89 c3                	mov    ebx,eax
c0006c97:	b8 11 00 00 00       	mov    eax,0x11
c0006c9c:	85 db                	test   ebx,ebx
c0006c9e:	0f 84 8e 00 00 00    	je     c0006d32 <f_utime+0xd8>
c0006ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca8:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cae:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cb1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cb4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 a6 e1 ff ff       	call   c0004e67 <follow_path>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 59                	jne    c0006d1e <f_utime+0xc4>
c0006cc5:	b8 06 00 00 00       	mov    eax,0x6
c0006cca:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ccf:	75 4d                	jne    c0006d1e <f_utime+0xc4>
c0006cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd5:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cd9:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006cdd:	c1 e2 10             	shl    edx,0x10
c0006ce0:	09 ca                	or     edx,ecx
c0006ce2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ce5:	75 1a                	jne    c0006d01 <f_utime+0xa7>
c0006ce7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cea:	83 c0 0c             	add    eax,0xc
c0006ced:	e8 e5 af ff ff       	call   c0001cd7 <st_dword>
c0006cf2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cf6:	e8 c4 ce ff ff       	call   c0003bbf <store_xdir>
c0006cfb:	85 c0                	test   eax,eax
c0006cfd:	75 1f                	jne    c0006d1e <f_utime+0xc4>
c0006cff:	eb 14                	jmp    c0006d15 <f_utime+0xbb>
c0006d01:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d05:	83 c0 16             	add    eax,0x16
c0006d08:	e8 ca af ff ff       	call   c0001cd7 <st_dword>
c0006d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d11:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d19:	e8 4c d8 ff ff       	call   c000456a <sync_fs>
c0006d1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d22:	83 ec 0c             	sub    esp,0xc
c0006d25:	53                   	push   ebx
c0006d26:	e8 7f 17 00 00       	call   c00084aa <ff_memfree>
c0006d2b:	83 c4 10             	add    esp,0x10
c0006d2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d32:	83 c4 64             	add    esp,0x64
c0006d35:	5b                   	pop    ebx
c0006d36:	5e                   	pop    esi
c0006d37:	c3                   	ret    

c0006d38 <f_getlabel>:
c0006d38:	55                   	push   ebp
c0006d39:	31 c9                	xor    ecx,ecx
c0006d3b:	57                   	push   edi
c0006d3c:	56                   	push   esi
c0006d3d:	53                   	push   ebx
c0006d3e:	83 ec 6c             	sub    esp,0x6c
c0006d41:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d45:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d4c:	e8 a0 b9 ff ff       	call   c00026f1 <mount_volume>
c0006d51:	89 c6                	mov    esi,eax
c0006d53:	85 c0                	test   eax,eax
c0006d55:	0f 85 c1 01 00 00    	jne    c0006f1c <f_getlabel+0x1e4>
c0006d5b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d63:	0f 84 5f 01 00 00    	je     c0006ec8 <f_getlabel+0x190>
c0006d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6d:	31 d2                	xor    edx,edx
c0006d6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d73:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d7f:	e8 39 c4 ff ff       	call   c00031bd <dir_sdi>
c0006d84:	85 c0                	test   eax,eax
c0006d86:	0f 85 2d 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006d8c:	ba 01 00 00 00       	mov    edx,0x1
c0006d91:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d95:	e8 33 cc ff ff       	call   c00039cd <dir_read>
c0006d9a:	85 c0                	test   eax,eax
c0006d9c:	0f 85 17 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006da6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006da9:	74 09                	je     c0006db4 <f_getlabel+0x7c>
c0006dab:	31 db                	xor    ebx,ebx
c0006dad:	31 c9                	xor    ecx,ecx
c0006daf:	e9 c8 00 00 00       	jmp    c0006e7c <f_getlabel+0x144>
c0006db4:	31 ed                	xor    ebp,ebp
c0006db6:	31 db                	xor    ebx,ebx
c0006db8:	31 ff                	xor    edi,edi
c0006dba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dbe:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dc2:	39 fa                	cmp    edx,edi
c0006dc4:	76 4b                	jbe    c0006e11 <f_getlabel+0xd9>
c0006dc6:	47                   	inc    edi
c0006dc7:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dca:	01 d0                	add    eax,edx
c0006dcc:	e8 90 ae ff ff       	call   c0001c61 <ld_word>
c0006dd1:	66 85 ed             	test   bp,bp
c0006dd4:	75 0d                	jne    c0006de3 <f_getlabel+0xab>
c0006dd6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006ddc:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006de1:	76 28                	jbe    c0006e0b <f_getlabel+0xd3>
c0006de3:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006dea:	89 e9                	mov    ecx,ebp
c0006dec:	01 da                	add    edx,ebx
c0006dee:	c1 e1 10             	shl    ecx,0x10
c0006df1:	0f b7 c0             	movzx  eax,ax
c0006df4:	09 c8                	or     eax,ecx
c0006df6:	b9 04 00 00 00       	mov    ecx,0x4
c0006dfb:	e8 01 b0 ff ff       	call   c0001e01 <put_utf>
c0006e00:	84 c0                	test   al,al
c0006e02:	74 0b                	je     c0006e0f <f_getlabel+0xd7>
c0006e04:	0f b6 c0             	movzx  eax,al
c0006e07:	01 c3                	add    ebx,eax
c0006e09:	31 c0                	xor    eax,eax
c0006e0b:	89 c5                	mov    ebp,eax
c0006e0d:	eb ab                	jmp    c0006dba <f_getlabel+0x82>
c0006e0f:	31 db                	xor    ebx,ebx
c0006e11:	66 85 ed             	test   bp,bp
c0006e14:	74 02                	je     c0006e18 <f_getlabel+0xe0>
c0006e16:	31 db                	xor    ebx,ebx
c0006e18:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e1f:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e23:	e9 a0 00 00 00       	jmp    c0006ec8 <f_getlabel+0x190>
c0006e28:	83 ff 0b             	cmp    edi,0xb
c0006e2b:	74 11                	je     c0006e3e <f_getlabel+0x106>
c0006e2d:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e36:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e39:	c1 e0 08             	shl    eax,0x8
c0006e3c:	09 c2                	or     edx,eax
c0006e3e:	0f b7 d2             	movzx  edx,dx
c0006e41:	50                   	push   eax
c0006e42:	50                   	push   eax
c0006e43:	68 b5 01 00 00       	push   0x1b5
c0006e48:	52                   	push   edx
c0006e49:	e8 03 17 00 00       	call   c0008551 <ff_oem2uni>
c0006e4e:	83 c4 10             	add    esp,0x10
c0006e51:	66 85 c0             	test   ax,ax
c0006e54:	74 46                	je     c0006e9c <f_getlabel+0x164>
c0006e56:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e5d:	0f b7 c0             	movzx  eax,ax
c0006e60:	01 da                	add    edx,ebx
c0006e62:	b9 04 00 00 00       	mov    ecx,0x4
c0006e67:	e8 95 af ff ff       	call   c0001e01 <put_utf>
c0006e6c:	84 c0                	test   al,al
c0006e6e:	74 2c                	je     c0006e9c <f_getlabel+0x164>
c0006e70:	0f b6 c0             	movzx  eax,al
c0006e73:	01 c3                	add    ebx,eax
c0006e75:	83 ff 0b             	cmp    edi,0xb
c0006e78:	74 24                	je     c0006e9e <f_getlabel+0x166>
c0006e7a:	89 f9                	mov    ecx,edi
c0006e7c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e80:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e83:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e88:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e91:	e8 9f ae ff ff       	call   c0001d35 <dbc_1st>
c0006e96:	85 c0                	test   eax,eax
c0006e98:	74 a4                	je     c0006e3e <f_getlabel+0x106>
c0006e9a:	eb 8c                	jmp    c0006e28 <f_getlabel+0xf0>
c0006e9c:	31 db                	xor    ebx,ebx
c0006e9e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ea5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006ea8:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006eaf:	74 17                	je     c0006ec8 <f_getlabel+0x190>
c0006eb1:	4b                   	dec    ebx
c0006eb2:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006eb5:	74 ee                	je     c0006ea5 <f_getlabel+0x16d>
c0006eb7:	eb 0f                	jmp    c0006ec8 <f_getlabel+0x190>
c0006eb9:	83 f8 04             	cmp    eax,0x4
c0006ebc:	75 5c                	jne    c0006f1a <f_getlabel+0x1e2>
c0006ebe:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ec5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ec8:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ed0:	74 4a                	je     c0006f1c <f_getlabel+0x1e4>
c0006ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ed6:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ed9:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006edc:	e8 5e b5 ff ff       	call   c000243f <move_window>
c0006ee1:	89 c6                	mov    esi,eax
c0006ee3:	85 c0                	test   eax,eax
c0006ee5:	75 35                	jne    c0006f1c <f_getlabel+0x1e4>
c0006ee7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eeb:	b8 43 00 00 00       	mov    eax,0x43
c0006ef0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ef2:	80 f9 03             	cmp    cl,0x3
c0006ef5:	74 0f                	je     c0006f06 <f_getlabel+0x1ce>
c0006ef7:	31 c0                	xor    eax,eax
c0006ef9:	80 f9 04             	cmp    cl,0x4
c0006efc:	0f 94 c0             	sete   al
c0006eff:	48                   	dec    eax
c0006f00:	83 e0 c3             	and    eax,0xffffffc3
c0006f03:	83 c0 64             	add    eax,0x64
c0006f06:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f0a:	e8 5f ad ff ff       	call   c0001c6e <ld_dword>
c0006f0f:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f16:	89 07                	mov    DWORD PTR [edi],eax
c0006f18:	eb 02                	jmp    c0006f1c <f_getlabel+0x1e4>
c0006f1a:	89 c6                	mov    esi,eax
c0006f1c:	83 c4 6c             	add    esp,0x6c
c0006f1f:	89 f0                	mov    eax,esi
c0006f21:	5b                   	pop    ebx
c0006f22:	5e                   	pop    esi
c0006f23:	5f                   	pop    edi
c0006f24:	5d                   	pop    ebp
c0006f25:	c3                   	ret    

c0006f26 <f_setlabel>:
c0006f26:	56                   	push   esi
c0006f27:	b9 02 00 00 00       	mov    ecx,0x2
c0006f2c:	53                   	push   ebx
c0006f2d:	83 ec 74             	sub    esp,0x74
c0006f30:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f34:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f3b:	e8 b1 b7 ff ff       	call   c00026f1 <mount_volume>
c0006f40:	89 c6                	mov    esi,eax
c0006f42:	85 c0                	test   eax,eax
c0006f44:	0f 85 41 02 00 00    	jne    c000718b <f_setlabel+0x265>
c0006f4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f4e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f51:	0f 85 8e 00 00 00    	jne    c0006fe5 <f_setlabel+0xbf>
c0006f57:	b9 16 00 00 00       	mov    ecx,0x16
c0006f5c:	31 d2                	xor    edx,edx
c0006f5e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f62:	31 db                	xor    ebx,ebx
c0006f64:	e8 8c ad ff ff       	call   c0001cf5 <mem_set>
c0006f69:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f70:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f73:	0f 86 0a 01 00 00    	jbe    c0007083 <f_setlabel+0x15d>
c0006f79:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f80:	e8 b6 ad ff ff       	call   c0001d3b <tchar2uni>
c0006f85:	89 c6                	mov    esi,eax
c0006f87:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f8c:	76 2a                	jbe    c0006fb8 <f_setlabel+0x92>
c0006f8e:	83 f8 ff             	cmp    eax,0xffffffff
c0006f91:	74 05                	je     c0006f98 <f_setlabel+0x72>
c0006f93:	83 fb 09             	cmp    ebx,0x9
c0006f96:	76 0a                	jbe    c0006fa2 <f_setlabel+0x7c>
c0006f98:	be 06 00 00 00       	mov    esi,0x6
c0006f9d:	e9 e9 01 00 00       	jmp    c000718b <f_setlabel+0x265>
c0006fa2:	89 c2                	mov    edx,eax
c0006fa4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fa8:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fab:	c1 ea 10             	shr    edx,0x10
c0006fae:	01 c8                	add    eax,ecx
c0006fb0:	43                   	inc    ebx
c0006fb1:	e8 1d ad ff ff       	call   c0001cd3 <st_word>
c0006fb6:	eb 04                	jmp    c0006fbc <f_setlabel+0x96>
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	74 dc                	je     c0006f98 <f_setlabel+0x72>
c0006fbc:	89 f2                	mov    edx,esi
c0006fbe:	b8 37 94 02 c0       	mov    eax,0xc0029437
c0006fc3:	e8 5b ad ff ff       	call   c0001d23 <chk_chr>
c0006fc8:	85 c0                	test   eax,eax
c0006fca:	75 cc                	jne    c0006f98 <f_setlabel+0x72>
c0006fcc:	83 fb 0a             	cmp    ebx,0xa
c0006fcf:	77 c7                	ja     c0006f98 <f_setlabel+0x72>
c0006fd1:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fd4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fd8:	0f b7 d6             	movzx  edx,si
c0006fdb:	01 c8                	add    eax,ecx
c0006fdd:	43                   	inc    ebx
c0006fde:	e8 f0 ac ff ff       	call   c0001cd3 <st_word>
c0006fe3:	eb 84                	jmp    c0006f69 <f_setlabel+0x43>
c0006fe5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fea:	ba 20 00 00 00       	mov    edx,0x20
c0006fef:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ff3:	31 db                	xor    ebx,ebx
c0006ff5:	e8 fb ac ff ff       	call   c0001cf5 <mem_set>
c0006ffa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007001:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0007004:	76 60                	jbe    c0007066 <f_setlabel+0x140>
c0007006:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c000700d:	e8 29 ad ff ff       	call   c0001d3b <tchar2uni>
c0007012:	3d ff ff 00 00       	cmp    eax,0xffff
c0007017:	0f 87 7b ff ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000701d:	83 ec 0c             	sub    esp,0xc
c0007020:	50                   	push   eax
c0007021:	e8 97 15 00 00       	call   c00085bd <ff_wtoupper>
c0007026:	5a                   	pop    edx
c0007027:	59                   	pop    ecx
c0007028:	68 b5 01 00 00       	push   0x1b5
c000702d:	50                   	push   eax
c000702e:	e8 8e 14 00 00       	call   c00084c1 <ff_uni2oem>
c0007033:	83 c4 10             	add    esp,0x10
c0007036:	89 c6                	mov    esi,eax
c0007038:	66 85 c0             	test   ax,ax
c000703b:	0f 84 57 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007041:	0f b7 d0             	movzx  edx,ax
c0007044:	b8 30 94 02 c0       	mov    eax,0xc0029430
c0007049:	e8 d5 ac ff ff       	call   c0001d23 <chk_chr>
c000704e:	85 c0                	test   eax,eax
c0007050:	0f 85 42 ff ff ff    	jne    c0006f98 <f_setlabel+0x72>
c0007056:	66 81 fe ff 00       	cmp    si,0xff
c000705b:	0f 87 14 01 00 00    	ja     c0007175 <f_setlabel+0x24f>
c0007061:	e9 fa 00 00 00       	jmp    c0007160 <f_setlabel+0x23a>
c0007066:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c000706b:	0f 84 27 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007071:	85 db                	test   ebx,ebx
c0007073:	74 0e                	je     c0007083 <f_setlabel+0x15d>
c0007075:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007078:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c000707d:	75 04                	jne    c0007083 <f_setlabel+0x15d>
c000707f:	89 c3                	mov    ebx,eax
c0007081:	eb ee                	jmp    c0007071 <f_setlabel+0x14b>
c0007083:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007087:	31 d2                	xor    edx,edx
c0007089:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000708d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007095:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007099:	e8 1f c1 ff ff       	call   c00031bd <dir_sdi>
c000709e:	89 c6                	mov    esi,eax
c00070a0:	85 c0                	test   eax,eax
c00070a2:	0f 85 e3 00 00 00    	jne    c000718b <f_setlabel+0x265>
c00070a8:	ba 01 00 00 00       	mov    edx,0x1
c00070ad:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b1:	e8 17 c9 ff ff       	call   c00039cd <dir_read>
c00070b6:	85 c0                	test   eax,eax
c00070b8:	75 21                	jne    c00070db <f_setlabel+0x1b5>
c00070ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070be:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070c2:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070c5:	74 5d                	je     c0007124 <f_setlabel+0x1fe>
c00070c7:	85 db                	test   ebx,ebx
c00070c9:	74 0b                	je     c00070d6 <f_setlabel+0x1b0>
c00070cb:	b9 0b 00 00 00       	mov    ecx,0xb
c00070d0:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070d4:	eb 70                	jmp    c0007146 <f_setlabel+0x220>
c00070d6:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070d9:	eb 70                	jmp    c000714b <f_setlabel+0x225>
c00070db:	83 f8 04             	cmp    eax,0x4
c00070de:	75 7c                	jne    c000715c <f_setlabel+0x236>
c00070e0:	85 db                	test   ebx,ebx
c00070e2:	0f 84 a3 00 00 00    	je     c000718b <f_setlabel+0x265>
c00070e8:	ba 01 00 00 00       	mov    edx,0x1
c00070ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070f1:	e8 51 ca ff ff       	call   c0003b47 <dir_alloc>
c00070f6:	89 c6                	mov    esi,eax
c00070f8:	85 c0                	test   eax,eax
c00070fa:	0f 85 8b 00 00 00    	jne    c000718b <f_setlabel+0x265>
c0007100:	31 d2                	xor    edx,edx
c0007102:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007106:	b9 20 00 00 00       	mov    ecx,0x20
c000710b:	e8 e5 ab ff ff       	call   c0001cf5 <mem_set>
c0007110:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007114:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007117:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000711b:	75 18                	jne    c0007135 <f_setlabel+0x20f>
c000711d:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007120:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007124:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007127:	b9 16 00 00 00       	mov    ecx,0x16
c000712c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007130:	83 c0 02             	add    eax,0x2
c0007133:	eb 9b                	jmp    c00070d0 <f_setlabel+0x1aa>
c0007135:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007139:	b9 0b 00 00 00       	mov    ecx,0xb
c000713e:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007142:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007146:	e8 95 ab ff ff       	call   c0001ce0 <mem_cpy>
c000714b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000714f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007157:	e8 0e d4 ff ff       	call   c000456a <sync_fs>
c000715c:	89 c6                	mov    esi,eax
c000715e:	eb 2b                	jmp    c000718b <f_setlabel+0x265>
c0007160:	83 fb 0a             	cmp    ebx,0xa
c0007163:	0f 87 2f fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c0007169:	89 f0                	mov    eax,esi
c000716b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000716f:	43                   	inc    ebx
c0007170:	e9 85 fe ff ff       	jmp    c0006ffa <f_setlabel+0xd4>
c0007175:	83 fb 09             	cmp    ebx,0x9
c0007178:	0f 87 1a fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000717e:	89 f0                	mov    eax,esi
c0007180:	66 c1 e8 08          	shr    ax,0x8
c0007184:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007188:	43                   	inc    ebx
c0007189:	eb de                	jmp    c0007169 <f_setlabel+0x243>
c000718b:	89 f0                	mov    eax,esi
c000718d:	83 c4 74             	add    esp,0x74
c0007190:	5b                   	pop    ebx
c0007191:	5e                   	pop    esi
c0007192:	c3                   	ret    

c0007193 <f_forward>:
c0007193:	55                   	push   ebp
c0007194:	57                   	push   edi
c0007195:	56                   	push   esi
c0007196:	53                   	push   ebx
c0007197:	83 ec 2c             	sub    esp,0x2c
c000719a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000719e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071ac:	89 d8                	mov    eax,ebx
c00071ae:	e8 b1 b1 ff ff       	call   c0002364 <validate>
c00071b3:	89 c5                	mov    ebp,eax
c00071b5:	85 c0                	test   eax,eax
c00071b7:	0f 85 aa 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071c1:	85 ed                	test   ebp,ebp
c00071c3:	0f 85 9e 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071cd:	0f 84 8f 01 00 00    	je     c0007362 <f_forward+0x1cf>
c00071d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071dc:	bf 00 00 00 00       	mov    edi,0x0
c00071e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071e8:	89 d1                	mov    ecx,edx
c00071ea:	19 f9                	sbb    ecx,edi
c00071ec:	0f 83 cf 00 00 00    	jae    c00072c1 <f_forward+0x12e>
c00071f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071f6:	e9 c6 00 00 00       	jmp    c00072c1 <f_forward+0x12e>
c00071fb:	50                   	push   eax
c00071fc:	50                   	push   eax
c00071fd:	6a 00                	push   0x0
c00071ff:	6a 00                	push   0x0
c0007201:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007205:	83 c4 10             	add    esp,0x10
c0007208:	85 c0                	test   eax,eax
c000720a:	0f 84 57 01 00 00    	je     c0007367 <f_forward+0x1d4>
c0007210:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007213:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007217:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000721a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000721e:	89 d7                	mov    edi,edx
c0007220:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007223:	89 c6                	mov    esi,eax
c0007225:	0f ac fe 09          	shrd   esi,edi,0x9
c0007229:	21 ce                	and    esi,ecx
c000722b:	89 c1                	mov    ecx,eax
c000722d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007233:	0f 84 98 00 00 00    	je     c00072d1 <f_forward+0x13e>
c0007239:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000723d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007240:	89 c8                	mov    eax,ecx
c0007242:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007246:	e8 af ac ff ff       	call   c0001efa <clst2sect>
c000724b:	89 d7                	mov    edi,edx
c000724d:	09 c7                	or     edi,eax
c000724f:	0f 84 9e 00 00 00    	je     c00072f3 <f_forward+0x160>
c0007255:	31 ff                	xor    edi,edi
c0007257:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000725a:	01 c6                	add    esi,eax
c000725c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007260:	11 d7                	adc    edi,edx
c0007262:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007265:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007268:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000726c:	39 fa                	cmp    edx,edi
c000726e:	0f 85 a2 00 00 00    	jne    c0007316 <f_forward+0x183>
c0007274:	39 f0                	cmp    eax,esi
c0007276:	0f 85 9a 00 00 00    	jne    c0007316 <f_forward+0x183>
c000727c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000727f:	ba 00 02 00 00       	mov    edx,0x200
c0007284:	25 ff 01 00 00       	and    eax,0x1ff
c0007289:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000728d:	29 c2                	sub    edx,eax
c000728f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007292:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007295:	39 d1                	cmp    ecx,edx
c0007297:	76 02                	jbe    c000729b <f_forward+0x108>
c0007299:	89 d1                	mov    ecx,edx
c000729b:	8d 73 50             	lea    esi,[ebx+0x50]
c000729e:	52                   	push   edx
c000729f:	01 c6                	add    esi,eax
c00072a1:	52                   	push   edx
c00072a2:	51                   	push   ecx
c00072a3:	56                   	push   esi
c00072a4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	85 c0                	test   eax,eax
c00072ad:	74 44                	je     c00072f3 <f_forward+0x160>
c00072af:	31 ff                	xor    edi,edi
c00072b1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072b4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072b7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072bb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072bf:	01 07                	add    DWORD PTR [edi],eax
c00072c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072c6:	0f 85 2f ff ff ff    	jne    c00071fb <f_forward+0x68>
c00072cc:	e9 96 00 00 00       	jmp    c0007367 <f_forward+0x1d4>
c00072d1:	85 f6                	test   esi,esi
c00072d3:	0f 85 60 ff ff ff    	jne    c0007239 <f_forward+0xa6>
c00072d9:	89 d7                	mov    edi,edx
c00072db:	09 c7                	or     edi,eax
c00072dd:	75 05                	jne    c00072e4 <f_forward+0x151>
c00072df:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072e2:	eb 0a                	jmp    c00072ee <f_forward+0x15b>
c00072e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072e7:	89 d8                	mov    eax,ebx
c00072e9:	e8 d9 bc ff ff       	call   c0002fc7 <get_fat>
c00072ee:	83 f8 01             	cmp    eax,0x1
c00072f1:	77 0b                	ja     c00072fe <f_forward+0x16b>
c00072f3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072f7:	bd 02 00 00 00       	mov    ebp,0x2
c00072fc:	eb 69                	jmp    c0007367 <f_forward+0x1d4>
c00072fe:	83 f8 ff             	cmp    eax,0xffffffff
c0007301:	75 0b                	jne    c000730e <f_forward+0x17b>
c0007303:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007307:	bd 01 00 00 00       	mov    ebp,0x1
c000730c:	eb 59                	jmp    c0007367 <f_forward+0x1d4>
c000730e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007311:	e9 23 ff ff ff       	jmp    c0007239 <f_forward+0xa6>
c0007316:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000731a:	79 20                	jns    c000733c <f_forward+0x1a9>
c000731c:	83 ec 0c             	sub    esp,0xc
c000731f:	6a 01                	push   0x1
c0007321:	52                   	push   edx
c0007322:	50                   	push   eax
c0007323:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007327:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000732b:	50                   	push   eax
c000732c:	e8 fb a8 ff ff       	call   c0001c2c <disk_write>
c0007331:	83 c4 20             	add    esp,0x20
c0007334:	85 c0                	test   eax,eax
c0007336:	75 cb                	jne    c0007303 <f_forward+0x170>
c0007338:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000733c:	83 ec 0c             	sub    esp,0xc
c000733f:	6a 01                	push   0x1
c0007341:	57                   	push   edi
c0007342:	56                   	push   esi
c0007343:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007347:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000734b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000734f:	50                   	push   eax
c0007350:	e8 c1 a8 ff ff       	call   c0001c16 <disk_read>
c0007355:	83 c4 20             	add    esp,0x20
c0007358:	85 c0                	test   eax,eax
c000735a:	0f 84 1c ff ff ff    	je     c000727c <f_forward+0xe9>
c0007360:	eb a1                	jmp    c0007303 <f_forward+0x170>
c0007362:	bd 07 00 00 00       	mov    ebp,0x7
c0007367:	83 c4 2c             	add    esp,0x2c
c000736a:	89 e8                	mov    eax,ebp
c000736c:	5b                   	pop    ebx
c000736d:	5e                   	pop    esi
c000736e:	5f                   	pop    edi
c000736f:	5d                   	pop    ebp
c0007370:	c3                   	ret    

c0007371 <f_mkfs>:
c0007371:	55                   	push   ebp
c0007372:	57                   	push   edi
c0007373:	56                   	push   esi
c0007374:	53                   	push   ebx
c0007375:	bb 0b 00 00 00       	mov    ebx,0xb
c000737a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007380:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007387:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000738e:	e8 b0 ae ff ff       	call   c0002243 <get_ldnumber>
c0007393:	85 c0                	test   eax,eax
c0007395:	0f 88 ec 10 00 00    	js     c0008487 <f_mkfs+0x1116>
c000739b:	8b 14 85 60 e4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1ba0]
c00073a2:	85 d2                	test   edx,edx
c00073a4:	74 03                	je     c00073a9 <f_mkfs+0x38>
c00073a6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073a9:	85 f6                	test   esi,esi
c00073ab:	75 05                	jne    c00073b2 <f_mkfs+0x41>
c00073ad:	be 20 94 02 c0       	mov    esi,0xc0029420
c00073b2:	83 ec 0c             	sub    esp,0xc
c00073b5:	0f b6 c0             	movzx  eax,al
c00073b8:	bb 03 00 00 00       	mov    ebx,0x3
c00073bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073c5:	e8 49 a8 ff ff       	call   c0001c13 <disk_initialize>
c00073ca:	83 c4 10             	add    esp,0x10
c00073cd:	a8 01                	test   al,0x1
c00073cf:	0f 85 b2 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073d5:	bb 0a 00 00 00       	mov    ebx,0xa
c00073da:	a8 04                	test   al,0x4
c00073dc:	0f 85 a5 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073e5:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073e9:	85 c0                	test   eax,eax
c00073eb:	75 20                	jne    c000740d <f_mkfs+0x9c>
c00073ed:	51                   	push   ecx
c00073ee:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073f2:	50                   	push   eax
c00073f3:	6a 03                	push   0x3
c00073f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073f9:	e8 44 a8 ff ff       	call   c0001c42 <disk_ioctl>
c00073fe:	83 c4 10             	add    esp,0x10
c0007401:	85 c0                	test   eax,eax
c0007403:	74 08                	je     c000740d <f_mkfs+0x9c>
c0007405:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000740d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007411:	8d 42 ff             	lea    eax,[edx-0x1]
c0007414:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007419:	77 04                	ja     c000741f <f_mkfs+0xae>
c000741b:	85 c2                	test   edx,eax
c000741d:	74 08                	je     c0007427 <f_mkfs+0xb6>
c000741f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007427:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000742a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000742e:	48                   	dec    eax
c000742f:	3c 01                	cmp    al,0x1
c0007431:	76 05                	jbe    c0007438 <f_mkfs+0xc7>
c0007433:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007438:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000743b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000743f:	48                   	dec    eax
c0007440:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007445:	77 07                	ja     c000744e <f_mkfs+0xdd>
c0007447:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000744c:	74 08                	je     c0007456 <f_mkfs+0xe5>
c000744e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007456:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007459:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000745f:	77 07                	ja     c0007468 <f_mkfs+0xf7>
c0007461:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007464:	85 d8                	test   eax,ebx
c0007466:	74 02                	je     c000746a <f_mkfs+0xf9>
c0007468:	31 db                	xor    ebx,ebx
c000746a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007475:	77 0a                	ja     c0007481 <f_mkfs+0x110>
c0007477:	bb 11 00 00 00       	mov    ebx,0x11
c000747c:	e9 06 10 00 00       	jmp    c0008487 <f_mkfs+0x1116>
c0007481:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007488:	8b 36                	mov    esi,DWORD PTR [esi]
c000748a:	85 ed                	test   ebp,ebp
c000748c:	75 1e                	jne    c00074ac <f_mkfs+0x13b>
c000748e:	83 ec 0c             	sub    esp,0xc
c0007491:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007498:	25 00 fe ff ff       	and    eax,0xfffffe00
c000749d:	50                   	push   eax
c000749e:	e8 f1 0f 00 00       	call   c0008494 <ff_memalloc>
c00074a3:	83 c4 10             	add    esp,0x10
c00074a6:	89 c5                	mov    ebp,eax
c00074a8:	85 c0                	test   eax,eax
c00074aa:	74 cb                	je     c0007477 <f_mkfs+0x106>
c00074ac:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074b4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074bc:	52                   	push   edx
c00074bd:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074c1:	50                   	push   eax
c00074c2:	6a 01                	push   0x1
c00074c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074c8:	e8 75 a7 ff ff       	call   c0001c42 <disk_ioctl>
c00074cd:	83 c4 10             	add    esp,0x10
c00074d0:	85 c0                	test   eax,eax
c00074d2:	0f 85 4a 0f 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00074d8:	89 f1                	mov    ecx,esi
c00074da:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074e2:	83 e1 0f             	and    ecx,0xf
c00074e5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074ed:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074f1:	83 e6 08             	and    esi,0x8
c00074f4:	75 56                	jne    c000754c <f_mkfs+0x1db>
c00074f6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074fa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074fe:	83 ff 00             	cmp    edi,0x0
c0007501:	76 20                	jbe    c0007523 <f_mkfs+0x1b2>
c0007503:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007508:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007510:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007516:	83 d7 ff             	adc    edi,0xffffffff
c0007519:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000751d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007521:	eb 21                	jmp    c0007544 <f_mkfs+0x1d3>
c0007523:	ba 3f 00 00 00       	mov    edx,0x3f
c0007528:	39 f2                	cmp    edx,esi
c000752a:	19 f8                	sbb    eax,edi
c000752c:	73 1e                	jae    c000754c <f_mkfs+0x1db>
c000752e:	83 c6 c1             	add    esi,0xffffffc1
c0007531:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007539:	83 d7 ff             	adc    edi,0xffffffff
c000753c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007540:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007544:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000754c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007550:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007554:	89 04 24             	mov    DWORD PTR [esp],eax
c0007557:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000755b:	31 c0                	xor    eax,eax
c000755d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007562:	89 c7                	mov    edi,eax
c0007564:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007567:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000756b:	0f 83 c5 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c0007571:	89 df                	mov    edi,ebx
c0007573:	c1 ef 09             	shr    edi,0x9
c0007576:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000757a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007581:	c1 ef 09             	shr    edi,0x9
c0007584:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007589:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000758d:	74 29                	je     c00075b8 <f_mkfs+0x247>
c000758f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007595:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000759a:	0f 97 c2             	seta   dl
c000759d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075a0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075a4:	0f 92 c0             	setb   al
c00075a7:	08 c2                	or     dl,al
c00075a9:	75 5b                	jne    c0007606 <f_mkfs+0x295>
c00075ab:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075af:	83 e0 07             	and    eax,0x7
c00075b2:	3c 04                	cmp    al,0x4
c00075b4:	74 50                	je     c0007606 <f_mkfs+0x295>
c00075b6:	eb 1b                	jmp    c00075d3 <f_mkfs+0x262>
c00075b8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075bd:	0f 87 73 0a 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c00075c3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075c9:	76 08                	jbe    c00075d3 <f_mkfs+0x262>
c00075cb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075d3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075d7:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075db:	83 e0 01             	and    eax,0x1
c00075de:	80 e1 02             	and    cl,0x2
c00075e1:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075e5:	74 0d                	je     c00075f4 <f_mkfs+0x283>
c00075e7:	84 c0                	test   al,al
c00075e9:	0f 84 53 09 00 00    	je     c0007f42 <f_mkfs+0xbd1>
c00075ef:	e9 12 08 00 00       	jmp    c0007e06 <f_mkfs+0xa95>
c00075f4:	bb 13 00 00 00       	mov    ebx,0x13
c00075f9:	84 c0                	test   al,al
c00075fb:	0f 85 05 08 00 00    	jne    c0007e06 <f_mkfs+0xa95>
c0007601:	e9 39 0e 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0007606:	31 c0                	xor    eax,eax
c0007608:	ba ff 0f 00 00       	mov    edx,0xfff
c000760d:	89 c7                	mov    edi,eax
c000760f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007612:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007616:	0f 83 1a 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c000761c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007622:	77 39                	ja     c000765d <f_mkfs+0x2ec>
c0007624:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007629:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007631:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007634:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007638:	73 08                	jae    c0007642 <f_mkfs+0x2d1>
c000763a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007642:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007647:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000764a:	b8 00 00 00 00       	mov    eax,0x0
c000764f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007653:	73 08                	jae    c000765d <f_mkfs+0x2ec>
c0007655:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000765d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007661:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007665:	83 c0 20             	add    eax,0x20
c0007668:	83 d2 00             	adc    edx,0x0
c000766b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000766f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007673:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007677:	31 d2                	xor    edx,edx
c0007679:	31 ff                	xor    edi,edi
c000767b:	52                   	push   edx
c000767c:	89 fb                	mov    ebx,edi
c000767e:	50                   	push   eax
c000767f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007683:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007687:	e8 d0 f3 01 00       	call   c0026a5c <__udivdi3>
c000768c:	83 c4 10             	add    esp,0x10
c000768f:	c1 e0 02             	shl    eax,0x2
c0007692:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007696:	05 07 02 00 00       	add    eax,0x207
c000769b:	89 f1                	mov    ecx,esi
c000769d:	c1 e8 09             	shr    eax,0x9
c00076a0:	83 c1 ff             	add    ecx,0xffffffff
c00076a3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076a7:	83 d3 ff             	adc    ebx,0xffffffff
c00076aa:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076ae:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076b2:	31 d2                	xor    edx,edx
c00076b4:	01 c8                	add    eax,ecx
c00076b6:	11 da                	adc    edx,ebx
c00076b8:	89 c1                	mov    ecx,eax
c00076ba:	f7 de                	neg    esi
c00076bc:	89 d0                	mov    eax,edx
c00076be:	83 d7 00             	adc    edi,0x0
c00076c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076c5:	f7 df                	neg    edi
c00076c7:	21 f1                	and    ecx,esi
c00076c9:	21 f8                	and    eax,edi
c00076cb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076d3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076d7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076db:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076e2:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076e6:	0f ac d0 01          	shrd   eax,edx,0x1
c00076ea:	89 df                	mov    edi,ebx
c00076ec:	d1 ea                	shr    edx,1
c00076ee:	39 c1                	cmp    ecx,eax
c00076f0:	19 d7                	sbb    edi,edx
c00076f2:	0f 83 3e 09 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c00076f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076fc:	31 d2                	xor    edx,edx
c00076fe:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007702:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007706:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000770a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000770d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007711:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007715:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007719:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000771d:	83 f8 0f             	cmp    eax,0xf
c0007720:	0f 86 10 09 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007726:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000772e:	0f 87 02 09 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007734:	31 d2                	xor    edx,edx
c0007736:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000773a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007742:	83 c0 07             	add    eax,0x7
c0007745:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000774d:	c1 e8 03             	shr    eax,0x3
c0007750:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007757:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000775b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000775f:	c1 e0 09             	shl    eax,0x9
c0007762:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007766:	48                   	dec    eax
c0007767:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000776b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000776f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007773:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007777:	31 d2                	xor    edx,edx
c0007779:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000777d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007784:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007788:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000778d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007791:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007795:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007799:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000779d:	31 ff                	xor    edi,edi
c000779f:	31 f6                	xor    esi,esi
c00077a1:	31 db                	xor    ebx,ebx
c00077a3:	85 ff                	test   edi,edi
c00077a5:	74 05                	je     c00077ac <f_mkfs+0x43b>
c00077a7:	4f                   	dec    edi
c00077a8:	74 44                	je     c00077ee <f_mkfs+0x47d>
c00077aa:	eb 4f                	jmp    c00077fb <f_mkfs+0x48a>
c00077ac:	83 ec 0c             	sub    esp,0xc
c00077af:	0f b7 c3             	movzx  eax,bx
c00077b2:	50                   	push   eax
c00077b3:	e8 05 0e 00 00       	call   c00085bd <ff_wtoupper>
c00077b8:	83 c4 10             	add    esp,0x10
c00077bb:	89 c1                	mov    ecx,eax
c00077bd:	8d 53 01             	lea    edx,[ebx+0x1]
c00077c0:	66 39 c3             	cmp    bx,ax
c00077c3:	75 3e                	jne    c0007803 <f_mkfs+0x492>
c00077c5:	be 01 00 00 00       	mov    esi,0x1
c00077ca:	89 df                	mov    edi,ebx
c00077cc:	66 01 f7             	add    di,si
c00077cf:	75 07                	jne    c00077d8 <f_mkfs+0x467>
c00077d1:	83 fe 7f             	cmp    esi,0x7f
c00077d4:	77 31                	ja     c0007807 <f_mkfs+0x496>
c00077d6:	eb 16                	jmp    c00077ee <f_mkfs+0x47d>
c00077d8:	83 ec 0c             	sub    esp,0xc
c00077db:	0f b7 ff             	movzx  edi,di
c00077de:	57                   	push   edi
c00077df:	e8 d9 0d 00 00       	call   c00085bd <ff_wtoupper>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	39 c7                	cmp    edi,eax
c00077e9:	75 e6                	jne    c00077d1 <f_mkfs+0x460>
c00077eb:	46                   	inc    esi
c00077ec:	eb dc                	jmp    c00077ca <f_mkfs+0x459>
c00077ee:	31 c0                	xor    eax,eax
c00077f0:	89 d9                	mov    ecx,ebx
c00077f2:	4e                   	dec    esi
c00077f3:	0f 95 c0             	setne  al
c00077f6:	43                   	inc    ebx
c00077f7:	89 c7                	mov    edi,eax
c00077f9:	eb 14                	jmp    c000780f <f_mkfs+0x49e>
c00077fb:	89 f1                	mov    ecx,esi
c00077fd:	01 f3                	add    ebx,esi
c00077ff:	31 ff                	xor    edi,edi
c0007801:	eb 0c                	jmp    c000780f <f_mkfs+0x49e>
c0007803:	89 d3                	mov    ebx,edx
c0007805:	eb 08                	jmp    c000780f <f_mkfs+0x49e>
c0007807:	bf 02 00 00 00       	mov    edi,0x2
c000780c:	83 c9 ff             	or     ecx,0xffffffff
c000780f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007813:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007816:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000781a:	0f b6 c1             	movzx  eax,cl
c000781d:	e8 3a a9 ff ff       	call   c000215c <xsum32>
c0007822:	66 c1 e9 08          	shr    cx,0x8
c0007826:	89 c2                	mov    edx,eax
c0007828:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000782f:	0f b7 c1             	movzx  eax,cx
c0007832:	e8 25 a9 ff ff       	call   c000215c <xsum32>
c0007837:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000783c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007840:	66 85 db             	test   bx,bx
c0007843:	74 1f                	je     c0007864 <f_mkfs+0x4f3>
c0007845:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007848:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000784f:	83 c0 02             	add    eax,0x2
c0007852:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007858:	39 c2                	cmp    edx,eax
c000785a:	74 08                	je     c0007864 <f_mkfs+0x4f3>
c000785c:	89 04 24             	mov    DWORD PTR [esp],eax
c000785f:	e9 3f ff ff ff       	jmp    c00077a3 <f_mkfs+0x432>
c0007864:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007867:	83 ec 0c             	sub    esp,0xc
c000786a:	05 01 02 00 00       	add    eax,0x201
c000786f:	c1 e8 09             	shr    eax,0x9
c0007872:	50                   	push   eax
c0007873:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007877:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787f:	55                   	push   ebp
c0007880:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007884:	e8 a3 a3 ff ff       	call   c0001c2c <disk_write>
c0007889:	83 c4 20             	add    esp,0x20
c000788c:	85 c0                	test   eax,eax
c000788e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007891:	0f 85 8b 0b 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007897:	89 d0                	mov    eax,edx
c0007899:	31 d2                	xor    edx,edx
c000789b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000789f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078a3:	66 85 db             	test   bx,bx
c00078a6:	74 04                	je     c00078ac <f_mkfs+0x53b>
c00078a8:	31 c0                	xor    eax,eax
c00078aa:	eb b0                	jmp    c000785c <f_mkfs+0x4eb>
c00078ac:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078b4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078b8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078be:	31 d2                	xor    edx,edx
c00078c0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078cb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078cf:	c1 eb 09             	shr    ebx,0x9
c00078d2:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078dd:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078e5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078e9:	8d 70 01             	lea    esi,[eax+0x1]
c00078ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078f4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078fb:	31 d2                	xor    edx,edx
c00078fd:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007902:	89 04 24             	mov    DWORD PTR [esp],eax
c0007905:	89 c1                	mov    ecx,eax
c0007907:	89 e8                	mov    eax,ebp
c0007909:	e8 e7 a3 ff ff       	call   c0001cf5 <mem_set>
c000790e:	31 c0                	xor    eax,eax
c0007910:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007913:	76 10                	jbe    c0007925 <f_mkfs+0x5b4>
c0007915:	83 fe 07             	cmp    esi,0x7
c0007918:	76 0b                	jbe    c0007925 <f_mkfs+0x5b4>
c000791a:	40                   	inc    eax
c000791b:	83 ee 08             	sub    esi,0x8
c000791e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007923:	eb eb                	jmp    c0007910 <f_mkfs+0x59f>
c0007925:	b2 01                	mov    dl,0x1
c0007927:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000792b:	85 f6                	test   esi,esi
c000792d:	74 0c                	je     c000793b <f_mkfs+0x5ca>
c000792f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007932:	76 07                	jbe    c000793b <f_mkfs+0x5ca>
c0007934:	08 11                	or     BYTE PTR [ecx],dl
c0007936:	4e                   	dec    esi
c0007937:	d1 e2                	shl    edx,1
c0007939:	eb f0                	jmp    c000792b <f_mkfs+0x5ba>
c000793b:	89 df                	mov    edi,ebx
c000793d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007941:	76 04                	jbe    c0007947 <f_mkfs+0x5d6>
c0007943:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007947:	83 ec 0c             	sub    esp,0xc
c000794a:	57                   	push   edi
c000794b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000794f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007953:	55                   	push   ebp
c0007954:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007958:	e8 cf a2 ff ff       	call   c0001c2c <disk_write>
c000795d:	83 c4 20             	add    esp,0x20
c0007960:	85 c0                	test   eax,eax
c0007962:	0f 85 ba 0a 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007968:	31 d2                	xor    edx,edx
c000796a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000796e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007972:	29 fb                	sub    ebx,edi
c0007974:	0f 85 7a ff ff ff    	jne    c00078f4 <f_mkfs+0x583>
c000797a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000797e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007986:	31 f6                	xor    esi,esi
c0007988:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000798c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000798f:	31 d2                	xor    edx,edx
c0007991:	89 e8                	mov    eax,ebp
c0007993:	e8 5d a3 ff ff       	call   c0001cf5 <mem_set>
c0007998:	31 c9                	xor    ecx,ecx
c000799a:	85 db                	test   ebx,ebx
c000799c:	75 40                	jne    c00079de <f_mkfs+0x66d>
c000799e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079a3:	89 e8                	mov    eax,ebp
c00079a5:	bb 02 00 00 00       	mov    ebx,0x2
c00079aa:	e8 28 a3 ff ff       	call   c0001cd7 <st_dword>
c00079af:	8d 45 04             	lea    eax,[ebp+0x4]
c00079b2:	83 ca ff             	or     edx,0xffffffff
c00079b5:	e8 1d a3 ff ff       	call   c0001cd7 <st_dword>
c00079ba:	b9 08 00 00 00       	mov    ecx,0x8
c00079bf:	eb 1d                	jmp    c00079de <f_mkfs+0x66d>
c00079c1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c4:	76 3b                	jbe    c0007a01 <f_mkfs+0x690>
c00079c6:	43                   	inc    ebx
c00079c7:	83 fe 01             	cmp    esi,0x1
c00079ca:	89 da                	mov    edx,ebx
c00079cc:	77 03                	ja     c00079d1 <f_mkfs+0x660>
c00079ce:	83 ca ff             	or     edx,0xffffffff
c00079d1:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079d5:	4e                   	dec    esi
c00079d6:	e8 fc a2 ff ff       	call   c0001cd7 <st_dword>
c00079db:	83 c1 04             	add    ecx,0x4
c00079de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079e2:	85 f6                	test   esi,esi
c00079e4:	75 db                	jne    c00079c1 <f_mkfs+0x650>
c00079e6:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079eb:	77 14                	ja     c0007a01 <f_mkfs+0x690>
c00079ed:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079f1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079f8:	85 f6                	test   esi,esi
c00079fa:	74 05                	je     c0007a01 <f_mkfs+0x690>
c00079fc:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079ff:	77 dd                	ja     c00079de <f_mkfs+0x66d>
c0007a01:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a05:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a09:	39 cf                	cmp    edi,ecx
c0007a0b:	76 02                	jbe    c0007a0f <f_mkfs+0x69e>
c0007a0d:	89 cf                	mov    edi,ecx
c0007a0f:	83 ec 0c             	sub    esp,0xc
c0007a12:	57                   	push   edi
c0007a13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a17:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a1b:	55                   	push   ebp
c0007a1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a20:	e8 07 a2 ff ff       	call   c0001c2c <disk_write>
c0007a25:	83 c4 20             	add    esp,0x20
c0007a28:	85 c0                	test   eax,eax
c0007a2a:	0f 85 f2 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007a30:	31 d2                	xor    edx,edx
c0007a32:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a36:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a3a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a3e:	0f 85 48 ff ff ff    	jne    c000798c <f_mkfs+0x61b>
c0007a44:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a47:	31 d2                	xor    edx,edx
c0007a49:	89 e8                	mov    eax,ebp
c0007a4b:	31 ff                	xor    edi,edi
c0007a4d:	e8 a3 a2 ff ff       	call   c0001cf5 <mem_set>
c0007a52:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a55:	ba 02 00 00 00       	mov    edx,0x2
c0007a5a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a5e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a62:	e8 70 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a67:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a6a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a6e:	e8 64 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a73:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a76:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a7a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a7e:	e8 54 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a83:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a86:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a8a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a8e:	83 c2 02             	add    edx,0x2
c0007a91:	e8 41 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a96:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a99:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a9d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aa1:	e8 31 a2 ff ff       	call   c0001cd7 <st_dword>
c0007aa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007aaa:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007aaf:	89 c6                	mov    esi,eax
c0007ab1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ab5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ab9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007abc:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ac0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007ac3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007ac7:	39 cb                	cmp    ebx,ecx
c0007ac9:	76 02                	jbe    c0007acd <f_mkfs+0x75c>
c0007acb:	89 cb                	mov    ebx,ecx
c0007acd:	83 ec 0c             	sub    esp,0xc
c0007ad0:	53                   	push   ebx
c0007ad1:	57                   	push   edi
c0007ad2:	56                   	push   esi
c0007ad3:	55                   	push   ebp
c0007ad4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad8:	e8 4f a1 ff ff       	call   c0001c2c <disk_write>
c0007add:	83 c4 20             	add    esp,0x20
c0007ae0:	85 c0                	test   eax,eax
c0007ae2:	0f 85 3a 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007ae8:	31 d2                	xor    edx,edx
c0007aea:	b9 00 02 00 00       	mov    ecx,0x200
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 ff a1 ff ff       	call   c0001cf5 <mem_set>
c0007af6:	31 d2                	xor    edx,edx
c0007af8:	01 de                	add    esi,ebx
c0007afa:	11 d7                	adc    edi,edx
c0007afc:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007aff:	75 bf                	jne    c0007ac0 <f_mkfs+0x74f>
c0007b01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b05:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b09:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b11:	b9 00 02 00 00       	mov    ecx,0x200
c0007b16:	31 d2                	xor    edx,edx
c0007b18:	89 e8                	mov    eax,ebp
c0007b1a:	e8 d6 a1 ff ff       	call   c0001cf5 <mem_set>
c0007b1f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b24:	ba 00 95 02 c0       	mov    edx,0xc0029500
c0007b29:	89 e8                	mov    eax,ebp
c0007b2b:	e8 b0 a1 ff ff       	call   c0001ce0 <mem_cpy>
c0007b30:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b37:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b3b:	e8 9a a1 ff ff       	call   c0001cda <st_qword>
c0007b40:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b44:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b47:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b4b:	e8 8a a1 ff ff       	call   c0001cda <st_qword>
c0007b50:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b53:	ba 20 00 00 00       	mov    edx,0x20
c0007b58:	e8 7a a1 ff ff       	call   c0001cd7 <st_dword>
c0007b5d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b65:	e8 6d a1 ff ff       	call   c0001cd7 <st_dword>
c0007b6a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b6e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b72:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b76:	e8 5c a1 ff ff       	call   c0001cd7 <st_dword>
c0007b7b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b7e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b82:	e8 50 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b87:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b8b:	8d 50 02             	lea    edx,[eax+0x2]
c0007b8e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b91:	e8 41 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b96:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b99:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b9e:	e8 34 a1 ff ff       	call   c0001cd7 <st_dword>
c0007ba3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007ba6:	ba 00 01 00 00       	mov    edx,0x100
c0007bab:	e8 23 a1 ff ff       	call   c0001cd3 <st_word>
c0007bb0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bb4:	b8 0a 00 00 00       	mov    eax,0xa
c0007bb9:	48                   	dec    eax
c0007bba:	74 05                	je     c0007bc1 <f_mkfs+0x850>
c0007bbc:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bbf:	eb f8                	jmp    c0007bb9 <f_mkfs+0x848>
c0007bc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bc5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bc9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bcd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bd1:	74 05                	je     c0007bd8 <f_mkfs+0x867>
c0007bd3:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bd6:	eb f5                	jmp    c0007bcd <f_mkfs+0x85c>
c0007bd8:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bdb:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007be0:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007be6:	31 db                	xor    ebx,ebx
c0007be8:	e8 e6 a0 ff ff       	call   c0001cd3 <st_word>
c0007bed:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bf3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bf8:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bfb:	e8 d3 a0 ff ff       	call   c0001cd3 <st_word>
c0007c00:	31 c9                	xor    ecx,ecx
c0007c02:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c05:	83 f8 01             	cmp    eax,0x1
c0007c08:	76 13                	jbe    c0007c1d <f_mkfs+0x8ac>
c0007c0a:	83 f9 70             	cmp    ecx,0x70
c0007c0d:	74 0e                	je     c0007c1d <f_mkfs+0x8ac>
c0007c0f:	89 da                	mov    edx,ebx
c0007c11:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c16:	e8 41 a5 ff ff       	call   c000215c <xsum32>
c0007c1b:	89 c3                	mov    ebx,eax
c0007c1d:	41                   	inc    ecx
c0007c1e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c24:	75 dc                	jne    c0007c02 <f_mkfs+0x891>
c0007c26:	89 f0                	mov    eax,esi
c0007c28:	89 fa                	mov    edx,edi
c0007c2a:	83 c0 01             	add    eax,0x1
c0007c2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c31:	83 d2 00             	adc    edx,0x0
c0007c34:	83 ec 0c             	sub    esp,0xc
c0007c37:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c3b:	6a 01                	push   0x1
c0007c3d:	57                   	push   edi
c0007c3e:	56                   	push   esi
c0007c3f:	55                   	push   ebp
c0007c40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c44:	e8 e3 9f ff ff       	call   c0001c2c <disk_write>
c0007c49:	83 c4 20             	add    esp,0x20
c0007c4c:	85 c0                	test   eax,eax
c0007c4e:	0f 85 ce 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007c54:	31 d2                	xor    edx,edx
c0007c56:	b9 00 02 00 00       	mov    ecx,0x200
c0007c5b:	89 e8                	mov    eax,ebp
c0007c5d:	e8 93 a0 ff ff       	call   c0001cf5 <mem_set>
c0007c62:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c67:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c6a:	e8 64 a0 ff ff       	call   c0001cd3 <st_word>
c0007c6f:	89 f0                	mov    eax,esi
c0007c71:	89 fa                	mov    edx,edi
c0007c73:	83 c0 09             	add    eax,0x9
c0007c76:	83 d2 00             	adc    edx,0x0
c0007c79:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c7c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c80:	31 c9                	xor    ecx,ecx
c0007c82:	41                   	inc    ecx
c0007c83:	89 da                	mov    edx,ebx
c0007c85:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c8a:	e8 cd a4 ff ff       	call   c000215c <xsum32>
c0007c8f:	89 c3                	mov    ebx,eax
c0007c91:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c97:	75 e9                	jne    c0007c82 <f_mkfs+0x911>
c0007c99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c9d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ca1:	83 c0 01             	add    eax,0x1
c0007ca4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ca8:	83 d2 00             	adc    edx,0x0
c0007cab:	83 ec 0c             	sub    esp,0xc
c0007cae:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cb2:	6a 01                	push   0x1
c0007cb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cb8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cbc:	55                   	push   ebp
c0007cbd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cc1:	e8 66 9f ff ff       	call   c0001c2c <disk_write>
c0007cc6:	83 c4 20             	add    esp,0x20
c0007cc9:	85 c0                	test   eax,eax
c0007ccb:	0f 85 51 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007cd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cd5:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cd9:	75 09                	jne    c0007ce4 <f_mkfs+0x973>
c0007cdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cde:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ce2:	74 12                	je     c0007cf6 <f_mkfs+0x985>
c0007ce4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ce8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cf0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cf4:	eb 8a                	jmp    c0007c80 <f_mkfs+0x90f>
c0007cf6:	31 d2                	xor    edx,edx
c0007cf8:	b9 00 02 00 00       	mov    ecx,0x200
c0007cfd:	89 e8                	mov    eax,ebp
c0007cff:	e8 f1 9f ff ff       	call   c0001cf5 <mem_set>
c0007d04:	83 c6 0b             	add    esi,0xb
c0007d07:	83 d7 00             	adc    edi,0x0
c0007d0a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d0e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d12:	31 c9                	xor    ecx,ecx
c0007d14:	41                   	inc    ecx
c0007d15:	89 da                	mov    edx,ebx
c0007d17:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d1c:	e8 3b a4 ff ff       	call   c000215c <xsum32>
c0007d21:	89 c3                	mov    ebx,eax
c0007d23:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d29:	75 e9                	jne    c0007d14 <f_mkfs+0x9a3>
c0007d2b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d2e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d32:	83 c6 01             	add    esi,0x1
c0007d35:	83 d7 00             	adc    edi,0x0
c0007d38:	83 ec 0c             	sub    esp,0xc
c0007d3b:	6a 01                	push   0x1
c0007d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d45:	55                   	push   ebp
c0007d46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d4a:	e8 dd 9e ff ff       	call   c0001c2c <disk_write>
c0007d4f:	83 c4 20             	add    esp,0x20
c0007d52:	85 c0                	test   eax,eax
c0007d54:	0f 85 c8 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007d5a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d5e:	75 06                	jne    c0007d66 <f_mkfs+0x9f5>
c0007d60:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d64:	74 09                	je     c0007d6f <f_mkfs+0x9fe>
c0007d66:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d69:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d6d:	eb a3                	jmp    c0007d12 <f_mkfs+0x9a1>
c0007d6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d73:	89 da                	mov    edx,ebx
c0007d75:	01 e8                	add    eax,ebp
c0007d77:	e8 5b 9f ff ff       	call   c0001cd7 <st_dword>
c0007d7c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d81:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d89:	75 e4                	jne    c0007d6f <f_mkfs+0x9fe>
c0007d8b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d8e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d92:	83 c6 02             	add    esi,0x2
c0007d95:	83 d7 00             	adc    edi,0x0
c0007d98:	83 ec 0c             	sub    esp,0xc
c0007d9b:	6a 01                	push   0x1
c0007d9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da5:	55                   	push   ebp
c0007da6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007daa:	e8 7d 9e ff ff       	call   c0001c2c <disk_write>
c0007daf:	83 c4 20             	add    esp,0x20
c0007db2:	85 c0                	test   eax,eax
c0007db4:	0f 85 68 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007dba:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dbf:	74 0d                	je     c0007dce <f_mkfs+0xa5d>
c0007dc1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dc9:	e9 43 fd ff ff       	jmp    c0007b11 <f_mkfs+0x7a0>
c0007dce:	b1 07                	mov    cl,0x7
c0007dd0:	e9 e3 05 00 00       	jmp    c00083b8 <f_mkfs+0x1047>
c0007dd5:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dda:	0f 85 4f 02 00 00    	jne    c000802f <f_mkfs+0xcbe>
c0007de0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007de5:	0f 86 22 02 00 00    	jbe    c000800d <f_mkfs+0xc9c>
c0007deb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df0:	0f 85 81 06 00 00    	jne    c0008477 <f_mkfs+0x1106>
c0007df6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007df9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dfd:	83 f8 40             	cmp    eax,0x40
c0007e00:	0f 87 51 06 00 00    	ja     c0008457 <f_mkfs+0x10e6>
c0007e06:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e0a:	85 ff                	test   edi,edi
c0007e0c:	75 1c                	jne    c0007e2a <f_mkfs+0xab9>
c0007e0e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e11:	ba 00 94 02 c0       	mov    edx,0xc0029400
c0007e16:	c1 e9 0c             	shr    ecx,0xc
c0007e19:	bf 01 00 00 00       	mov    edi,0x1
c0007e1e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e21:	66 85 c0             	test   ax,ax
c0007e24:	0f 85 95 01 00 00    	jne    c0007fbf <f_mkfs+0xc4e>
c0007e2a:	31 d2                	xor    edx,edx
c0007e2c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e2f:	f7 f7                	div    edi
c0007e31:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e36:	0f 86 95 01 00 00    	jbe    c0007fd1 <f_mkfs+0xc60>
c0007e3c:	83 c0 02             	add    eax,0x2
c0007e3f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e44:	01 c0                	add    eax,eax
c0007e46:	05 ff 01 00 00       	add    eax,0x1ff
c0007e4b:	be 01 00 00 00       	mov    esi,0x1
c0007e50:	c1 e8 09             	shr    eax,0x9
c0007e53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e5b:	c1 e0 05             	shl    eax,0x5
c0007e5e:	c1 e8 09             	shr    eax,0x9
c0007e61:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e65:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e6a:	31 d2                	xor    edx,edx
c0007e6c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e70:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e74:	89 f0                	mov    eax,esi
c0007e76:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e7a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e7e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e82:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e8a:	31 d2                	xor    edx,edx
c0007e8c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e91:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e95:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e99:	31 db                	xor    ebx,ebx
c0007e9b:	01 c8                	add    eax,ecx
c0007e9d:	11 da                	adc    edx,ebx
c0007e9f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007ea3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007ea7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007eab:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007eaf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007eb3:	f7 da                	neg    edx
c0007eb5:	21 d1                	and    ecx,edx
c0007eb7:	29 d9                	sub    ecx,ebx
c0007eb9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ebe:	0f 85 20 01 00 00    	jne    c0007fe4 <f_mkfs+0xc73>
c0007ec4:	31 db                	xor    ebx,ebx
c0007ec6:	01 ce                	add    esi,ecx
c0007ec8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ecc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ed0:	31 d2                	xor    edx,edx
c0007ed2:	89 f8                	mov    eax,edi
c0007ed4:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ed8:	c1 e0 04             	shl    eax,0x4
c0007edb:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007edf:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ee3:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ee7:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eeb:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eee:	19 d3                	sbb    ebx,edx
c0007ef0:	0f 82 40 01 00 00    	jb     c0008036 <f_mkfs+0xcc5>
c0007ef6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ef9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007efd:	89 c8                	mov    eax,ecx
c0007eff:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f04:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f08:	29 f0                	sub    eax,esi
c0007f0a:	29 d0                	sub    eax,edx
c0007f0c:	31 d2                	xor    edx,edx
c0007f0e:	f7 f7                	div    edi
c0007f10:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f15:	89 c3                	mov    ebx,eax
c0007f17:	0f 85 b8 fe ff ff    	jne    c0007dd5 <f_mkfs+0xa64>
c0007f1d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f22:	0f 87 1d 01 00 00    	ja     c0008045 <f_mkfs+0xcd4>
c0007f28:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f2d:	0f 85 03 01 00 00    	jne    c0008036 <f_mkfs+0xcc5>
c0007f33:	83 ff 01             	cmp    edi,0x1
c0007f36:	0f 86 fa 00 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007f3c:	d1 ef                	shr    edi,1
c0007f3e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f42:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f46:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f49:	85 db                	test   ebx,ebx
c0007f4b:	75 2d                	jne    c0007f7a <f_mkfs+0xc09>
c0007f4d:	89 cb                	mov    ebx,ecx
c0007f4f:	ba 10 94 02 c0       	mov    edx,0xc0029410
c0007f54:	c1 eb 11             	shr    ebx,0x11
c0007f57:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f5f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f62:	66 85 c0             	test   ax,ax
c0007f65:	74 11                	je     c0007f78 <f_mkfs+0xc07>
c0007f67:	83 c2 02             	add    edx,0x2
c0007f6a:	39 d8                	cmp    eax,ebx
c0007f6c:	77 0a                	ja     c0007f78 <f_mkfs+0xc07>
c0007f6e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f72:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f76:	eb e7                	jmp    c0007f5f <f_mkfs+0xbee>
c0007f78:	31 db                	xor    ebx,ebx
c0007f7a:	31 d2                	xor    edx,edx
c0007f7c:	89 c8                	mov    eax,ecx
c0007f7e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f82:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f89:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f8e:	c1 ea 09             	shr    edx,0x9
c0007f91:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f96:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f9a:	0f 87 96 00 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007fa0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fa4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fac:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fb0:	be 20 00 00 00       	mov    esi,0x20
c0007fb5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fba:	e9 a6 fe ff ff       	jmp    c0007e65 <f_mkfs+0xaf4>
c0007fbf:	83 c2 02             	add    edx,0x2
c0007fc2:	39 c8                	cmp    eax,ecx
c0007fc4:	0f 87 60 fe ff ff    	ja     c0007e2a <f_mkfs+0xab9>
c0007fca:	01 ff                	add    edi,edi
c0007fcc:	e9 4d fe ff ff       	jmp    c0007e1e <f_mkfs+0xaad>
c0007fd1:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fd4:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fd9:	40                   	inc    eax
c0007fda:	d1 e8                	shr    eax,1
c0007fdc:	83 c0 03             	add    eax,0x3
c0007fdf:	e9 62 fe ff ff       	jmp    c0007e46 <f_mkfs+0xad5>
c0007fe4:	31 d2                	xor    edx,edx
c0007fe6:	89 c8                	mov    eax,ecx
c0007fe8:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fec:	85 d2                	test   edx,edx
c0007fee:	74 0c                	je     c0007ffc <f_mkfs+0xc8b>
c0007ff0:	49                   	dec    ecx
c0007ff1:	46                   	inc    esi
c0007ff2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007ff7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007ffc:	89 c8                	mov    eax,ecx
c0007ffe:	31 d2                	xor    edx,edx
c0008000:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008004:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008008:	e9 c3 fe ff ff       	jmp    c0007ed0 <f_mkfs+0xb5f>
c000800d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008012:	77 31                	ja     c0008045 <f_mkfs+0xcd4>
c0008014:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008019:	75 1b                	jne    c0008036 <f_mkfs+0xcc5>
c000801b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000801e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008022:	3d 80 00 00 00       	cmp    eax,0x80
c0008027:	0f 86 d9 fd ff ff    	jbe    c0007e06 <f_mkfs+0xa95>
c000802d:	eb 07                	jmp    c0008036 <f_mkfs+0xcc5>
c000802f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008034:	76 0a                	jbe    c0008040 <f_mkfs+0xccf>
c0008036:	bb 0e 00 00 00       	mov    ebx,0xe
c000803b:	e9 ff 03 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0008040:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008045:	31 d2                	xor    edx,edx
c0008047:	b9 00 02 00 00       	mov    ecx,0x200
c000804c:	89 e8                	mov    eax,ebp
c000804e:	e8 a2 9c ff ff       	call   c0001cf5 <mem_set>
c0008053:	b9 0b 00 00 00       	mov    ecx,0xb
c0008058:	ba 22 95 02 c0       	mov    edx,0xc0029522
c000805d:	89 e8                	mov    eax,ebp
c000805f:	e8 7c 9c ff ff       	call   c0001ce0 <mem_cpy>
c0008064:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008067:	ba 00 02 00 00       	mov    edx,0x200
c000806c:	e8 62 9c ff ff       	call   c0001cd3 <st_word>
c0008071:	89 f8                	mov    eax,edi
c0008073:	0f b7 d6             	movzx  edx,si
c0008076:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008079:	8d 45 0e             	lea    eax,[ebp+0xe]
c000807c:	e8 52 9c ff ff       	call   c0001cd3 <st_word>
c0008081:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008085:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000808a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c000808d:	75 08                	jne    c0008097 <f_mkfs+0xd26>
c000808f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008097:	8d 45 11             	lea    eax,[ebp+0x11]
c000809a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000809e:	e8 30 9c ff ff       	call   c0001cd3 <st_word>
c00080a3:	b8 ff ff 00 00       	mov    eax,0xffff
c00080a8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080ac:	39 d0                	cmp    eax,edx
c00080ae:	b8 00 00 00 00       	mov    eax,0x0
c00080b3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080b7:	72 0a                	jb     c00080c3 <f_mkfs+0xd52>
c00080b9:	8d 45 13             	lea    eax,[ebp+0x13]
c00080bc:	e8 12 9c ff ff       	call   c0001cd3 <st_word>
c00080c1:	eb 08                	jmp    c00080cb <f_mkfs+0xd5a>
c00080c3:	8d 45 20             	lea    eax,[ebp+0x20]
c00080c6:	e8 0c 9c ff ff       	call   c0001cd7 <st_dword>
c00080cb:	8d 45 18             	lea    eax,[ebp+0x18]
c00080ce:	ba 3f 00 00 00       	mov    edx,0x3f
c00080d3:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080d7:	e8 f7 9b ff ff       	call   c0001cd3 <st_word>
c00080dc:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080df:	ba ff 00 00 00       	mov    edx,0xff
c00080e4:	e8 ea 9b ff ff       	call   c0001cd3 <st_word>
c00080e9:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080f0:	e8 e2 9b ff ff       	call   c0001cd7 <st_dword>
c00080f5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080fa:	75 57                	jne    c0008153 <f_mkfs+0xde2>
c00080fc:	8d 45 43             	lea    eax,[ebp+0x43]
c00080ff:	ba 00 00 21 50       	mov    edx,0x50210000
c0008104:	e8 ce 9b ff ff       	call   c0001cd7 <st_dword>
c0008109:	8d 45 24             	lea    eax,[ebp+0x24]
c000810c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008110:	e8 c2 9b ff ff       	call   c0001cd7 <st_dword>
c0008115:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008118:	ba 02 00 00 00       	mov    edx,0x2
c000811d:	e8 b5 9b ff ff       	call   c0001cd7 <st_dword>
c0008122:	8d 45 30             	lea    eax,[ebp+0x30]
c0008125:	ba 01 00 00 00       	mov    edx,0x1
c000812a:	e8 a4 9b ff ff       	call   c0001cd3 <st_word>
c000812f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008132:	ba 06 00 00 00       	mov    edx,0x6
c0008137:	e8 97 9b ff ff       	call   c0001cd3 <st_word>
c000813c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008140:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008144:	8d 45 47             	lea    eax,[ebp+0x47]
c0008147:	b9 13 00 00 00       	mov    ecx,0x13
c000814c:	ba 2e 95 02 c0       	mov    edx,0xc002952e
c0008151:	eb 2f                	jmp    c0008182 <f_mkfs+0xe11>
c0008153:	8d 45 27             	lea    eax,[ebp+0x27]
c0008156:	ba 00 00 21 50       	mov    edx,0x50210000
c000815b:	e8 77 9b ff ff       	call   c0001cd7 <st_dword>
c0008160:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008165:	8d 45 16             	lea    eax,[ebp+0x16]
c0008168:	e8 66 9b ff ff       	call   c0001cd3 <st_word>
c000816d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008171:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008175:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008178:	b9 13 00 00 00       	mov    ecx,0x13
c000817d:	ba 42 95 02 c0       	mov    edx,0xc0029542
c0008182:	e8 59 9b ff ff       	call   c0001ce0 <mem_cpy>
c0008187:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c000818d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008192:	89 f0                	mov    eax,esi
c0008194:	e8 3a 9b ff ff       	call   c0001cd3 <st_word>
c0008199:	83 ec 0c             	sub    esp,0xc
c000819c:	6a 01                	push   0x1
c000819e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a6:	55                   	push   ebp
c00081a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081ab:	e8 7c 9a ff ff       	call   c0001c2c <disk_write>
c00081b0:	83 c4 20             	add    esp,0x20
c00081b3:	85 c0                	test   eax,eax
c00081b5:	0f 85 67 02 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00081bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081c0:	0f 85 b7 00 00 00    	jne    c000827d <f_mkfs+0xf0c>
c00081c6:	83 ec 0c             	sub    esp,0xc
c00081c9:	6a 01                	push   0x1
c00081cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081d3:	83 c0 06             	add    eax,0x6
c00081d6:	83 d2 00             	adc    edx,0x0
c00081d9:	52                   	push   edx
c00081da:	50                   	push   eax
c00081db:	55                   	push   ebp
c00081dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081e0:	e8 47 9a ff ff       	call   c0001c2c <disk_write>
c00081e5:	83 c4 20             	add    esp,0x20
c00081e8:	b9 00 02 00 00       	mov    ecx,0x200
c00081ed:	31 d2                	xor    edx,edx
c00081ef:	89 e8                	mov    eax,ebp
c00081f1:	e8 ff 9a ff ff       	call   c0001cf5 <mem_set>
c00081f6:	ba 52 52 61 41       	mov    edx,0x41615252
c00081fb:	89 e8                	mov    eax,ebp
c00081fd:	e8 d5 9a ff ff       	call   c0001cd7 <st_dword>
c0008202:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008208:	ba 72 72 41 61       	mov    edx,0x61417272
c000820d:	e8 c5 9a ff ff       	call   c0001cd7 <st_dword>
c0008212:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008215:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000821b:	e8 b7 9a ff ff       	call   c0001cd7 <st_dword>
c0008220:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008226:	ba 02 00 00 00       	mov    edx,0x2
c000822b:	e8 a7 9a ff ff       	call   c0001cd7 <st_dword>
c0008230:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008235:	89 f0                	mov    eax,esi
c0008237:	e8 97 9a ff ff       	call   c0001cd3 <st_word>
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	6a 01                	push   0x1
c0008241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008245:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008249:	83 c0 07             	add    eax,0x7
c000824c:	83 d2 00             	adc    edx,0x0
c000824f:	52                   	push   edx
c0008250:	50                   	push   eax
c0008251:	55                   	push   ebp
c0008252:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008256:	e8 d1 99 ff ff       	call   c0001c2c <disk_write>
c000825b:	83 c4 14             	add    esp,0x14
c000825e:	6a 01                	push   0x1
c0008260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008264:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008268:	83 c0 01             	add    eax,0x1
c000826b:	83 d2 00             	adc    edx,0x0
c000826e:	52                   	push   edx
c000826f:	50                   	push   eax
c0008270:	55                   	push   ebp
c0008271:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008275:	e8 b2 99 ff ff       	call   c0001c2c <disk_write>
c000827a:	83 c4 20             	add    esp,0x20
c000827d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008284:	31 d2                	xor    edx,edx
c0008286:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000828c:	31 db                	xor    ebx,ebx
c000828e:	89 e8                	mov    eax,ebp
c0008290:	e8 60 9a ff ff       	call   c0001cf5 <mem_set>
c0008295:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000829a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082a1:	0f 94 c3             	sete   bl
c00082a4:	4b                   	dec    ebx
c00082a5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082ab:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082b1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082b6:	75 21                	jne    c00082d9 <f_mkfs+0xf68>
c00082b8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082bd:	89 e8                	mov    eax,ebp
c00082bf:	e8 13 9a ff ff       	call   c0001cd7 <st_dword>
c00082c4:	8d 45 04             	lea    eax,[ebp+0x4]
c00082c7:	83 ca ff             	or     edx,0xffffffff
c00082ca:	e8 08 9a ff ff       	call   c0001cd7 <st_dword>
c00082cf:	8d 45 08             	lea    eax,[ebp+0x8]
c00082d2:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082d7:	eb 04                	jmp    c00082dd <f_mkfs+0xf6c>
c00082d9:	89 da                	mov    edx,ebx
c00082db:	89 e8                	mov    eax,ebp
c00082dd:	e8 f5 99 ff ff       	call   c0001cd7 <st_dword>
c00082e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082ea:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082ee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082f2:	39 ce                	cmp    esi,ecx
c00082f4:	76 02                	jbe    c00082f8 <f_mkfs+0xf87>
c00082f6:	89 ce                	mov    esi,ecx
c00082f8:	83 ec 0c             	sub    esp,0xc
c00082fb:	56                   	push   esi
c00082fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008300:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008304:	55                   	push   ebp
c0008305:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008309:	e8 1e 99 ff ff       	call   c0001c2c <disk_write>
c000830e:	83 c4 20             	add    esp,0x20
c0008311:	85 c0                	test   eax,eax
c0008313:	0f 85 09 01 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008319:	31 d2                	xor    edx,edx
c000831b:	b9 00 02 00 00       	mov    ecx,0x200
c0008320:	89 e8                	mov    eax,ebp
c0008322:	e8 ce 99 ff ff       	call   c0001cf5 <mem_set>
c0008327:	31 d2                	xor    edx,edx
c0008329:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000832d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008331:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008335:	75 b3                	jne    c00082ea <f_mkfs+0xf79>
c0008337:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000833a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008341:	40                   	inc    eax
c0008342:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008346:	0f 87 65 ff ff ff    	ja     c00082b1 <f_mkfs+0xf40>
c000834c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008351:	74 04                	je     c0008357 <f_mkfs+0xfe6>
c0008353:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008357:	89 fb                	mov    ebx,edi
c0008359:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000835d:	76 04                	jbe    c0008363 <f_mkfs+0xff2>
c000835f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008363:	83 ec 0c             	sub    esp,0xc
c0008366:	53                   	push   ebx
c0008367:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836f:	55                   	push   ebp
c0008370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008374:	e8 b3 98 ff ff       	call   c0001c2c <disk_write>
c0008379:	83 c4 20             	add    esp,0x20
c000837c:	85 c0                	test   eax,eax
c000837e:	0f 85 9e 00 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008384:	31 d2                	xor    edx,edx
c0008386:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000838a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000838e:	29 df                	sub    edi,ebx
c0008390:	75 c5                	jne    c0008357 <f_mkfs+0xfe6>
c0008392:	b1 0c                	mov    cl,0xc
c0008394:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008399:	74 1d                	je     c00083b8 <f_mkfs+0x1047>
c000839b:	b8 ff ff 00 00       	mov    eax,0xffff
c00083a0:	b1 06                	mov    cl,0x6
c00083a2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083a6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083aa:	72 0c                	jb     c00083b8 <f_mkfs+0x1047>
c00083ac:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083b1:	0f 94 c1             	sete   cl
c00083b4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083b8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083bd:	75 4c                	jne    c000840b <f_mkfs+0x109a>
c00083bf:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083c3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083c7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083ce:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083d5:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083e0:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083eb:	0f b6 c9             	movzx  ecx,cl
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	55                   	push   ebp
c00083f2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083fd:	e8 2f c2 ff ff       	call   c0004631 <create_partition>
c0008402:	83 c4 10             	add    esp,0x10
c0008405:	89 c3                	mov    ebx,eax
c0008407:	85 c0                	test   eax,eax
c0008409:	75 34                	jne    c000843f <f_mkfs+0x10ce>
c000840b:	31 db                	xor    ebx,ebx
c000840d:	50                   	push   eax
c000840e:	6a 00                	push   0x0
c0008410:	6a 00                	push   0x0
c0008412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008416:	e8 27 98 ff ff       	call   c0001c42 <disk_ioctl>
c000841b:	83 c4 10             	add    esp,0x10
c000841e:	85 c0                	test   eax,eax
c0008420:	74 1d                	je     c000843f <f_mkfs+0x10ce>
c0008422:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000842a:	75 0c                	jne    c0008438 <f_mkfs+0x10c7>
c000842c:	83 ec 0c             	sub    esp,0xc
c000842f:	55                   	push   ebp
c0008430:	e8 75 00 00 00       	call   c00084aa <ff_memfree>
c0008435:	83 c4 10             	add    esp,0x10
c0008438:	bb 01 00 00 00       	mov    ebx,0x1
c000843d:	eb 48                	jmp    c0008487 <f_mkfs+0x1116>
c000843f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008447:	75 3e                	jne    c0008487 <f_mkfs+0x1116>
c0008449:	83 ec 0c             	sub    esp,0xc
c000844c:	55                   	push   ebp
c000844d:	e8 58 00 00 00       	call   c00084aa <ff_memfree>
c0008452:	83 c4 10             	add    esp,0x10
c0008455:	eb 30                	jmp    c0008487 <f_mkfs+0x1116>
c0008457:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000845c:	0f 85 eb fa ff ff    	jne    c0007f4d <f_mkfs+0xbdc>
c0008462:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008466:	81 ff 80 00 00 00    	cmp    edi,0x80
c000846c:	0f 86 b8 f9 ff ff    	jbe    c0007e2a <f_mkfs+0xab9>
c0008472:	e9 bf fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008477:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000847c:	0f 85 c0 fa ff ff    	jne    c0007f42 <f_mkfs+0xbd1>
c0008482:	e9 af fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008487:	81 c4 9c 00 00 00    	add    esp,0x9c
c000848d:	89 d8                	mov    eax,ebx
c000848f:	5b                   	pop    ebx
c0008490:	5e                   	pop    esi
c0008491:	5f                   	pop    edi
c0008492:	5d                   	pop    ebp
c0008493:	c3                   	ret    

c0008494 <ff_memalloc>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	83 ec 0c             	sub    esp,0xc
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	e8 a0 73 00 00       	call   c000f843 <malloc>
c00084a3:	83 c4 10             	add    esp,0x10
c00084a6:	83 c4 0c             	add    esp,0xc
c00084a9:	c3                   	ret    

c00084aa <ff_memfree>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	83 ec 0c             	sub    esp,0xc
c00084b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084b4:	e8 9a 73 00 00       	call   c000f853 <free>
c00084b9:	83 c4 10             	add    esp,0x10
c00084bc:	90                   	nop
c00084bd:	83 c4 0c             	add    esp,0xc
c00084c0:	c3                   	ret    

c00084c1 <ff_uni2oem>:
c00084c1:	83 ec 14             	sub    esp,0x14
c00084c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084c8:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084cc:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084d3:	c7 44 24 0c 60 98 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029860
c00084db:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084e0:	77 0b                	ja     c00084ed <ff_uni2oem+0x2c>
c00084e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084e6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084eb:	eb 5b                	jmp    c0008548 <ff_uni2oem+0x87>
c00084ed:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084f5:	77 51                	ja     c0008548 <ff_uni2oem+0x87>
c00084f7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084fd:	75 49                	jne    c0008548 <ff_uni2oem+0x87>
c00084ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008506:	eb 0b                	jmp    c0008513 <ff_uni2oem+0x52>
c0008508:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000850d:	40                   	inc    eax
c000850e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008513:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008519:	77 1b                	ja     c0008536 <ff_uni2oem+0x75>
c000851b:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008520:	01 c0                	add    eax,eax
c0008522:	89 c2                	mov    edx,eax
c0008524:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008528:	01 d0                	add    eax,edx
c000852a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000852d:	0f b7 c0             	movzx  eax,ax
c0008530:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008534:	75 d2                	jne    c0008508 <ff_uni2oem+0x47>
c0008536:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000853b:	83 e8 80             	sub    eax,0xffffff80
c000853e:	25 ff 00 00 00       	and    eax,0xff
c0008543:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008548:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000854d:	83 c4 14             	add    esp,0x14
c0008550:	c3                   	ret    

c0008551 <ff_oem2uni>:
c0008551:	83 ec 18             	sub    esp,0x18
c0008554:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000855c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008561:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008565:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000856c:	c7 44 24 10 60 98 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029860
c0008574:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000857a:	77 0b                	ja     c0008587 <ff_oem2uni+0x36>
c000857c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008580:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008585:	eb 2d                	jmp    c00085b4 <ff_oem2uni+0x63>
c0008587:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000858d:	75 25                	jne    c00085b4 <ff_oem2uni+0x63>
c000858f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008596:	77 1c                	ja     c00085b4 <ff_oem2uni+0x63>
c0008598:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000859d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085a2:	01 c0                	add    eax,eax
c00085a4:	89 c2                	mov    edx,eax
c00085a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085aa:	01 d0                	add    eax,edx
c00085ac:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085af:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085b4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085b9:	83 c4 18             	add    esp,0x18
c00085bc:	c3                   	ret    

c00085bd <ff_wtoupper>:
c00085bd:	83 ec 10             	sub    esp,0x10
c00085c0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085c8:	0f 87 3e 01 00 00    	ja     c000870c <ff_wtoupper+0x14f>
c00085ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085d7:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085de:	77 07                	ja     c00085e7 <ff_wtoupper+0x2a>
c00085e0:	b8 60 96 02 c0       	mov    eax,0xc0029660
c00085e5:	eb 05                	jmp    c00085ec <ff_wtoupper+0x2f>
c00085e7:	b8 a0 95 02 c0       	mov    eax,0xc00295a0
c00085ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085f4:	8d 50 02             	lea    edx,[eax+0x2]
c00085f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085fb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085fe:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008603:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008609:	0f 84 f4 00 00 00    	je     c0008703 <ff_wtoupper+0x146>
c000860f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008614:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008619:	0f 82 e4 00 00 00    	jb     c0008703 <ff_wtoupper+0x146>
c000861f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008623:	8d 50 02             	lea    edx,[eax+0x2]
c0008626:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000862a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000862d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008632:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008637:	66 c1 e8 08          	shr    ax,0x8
c000863b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008640:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008647:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000864c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008651:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008656:	01 ca                	add    edx,ecx
c0008658:	39 d0                	cmp    eax,edx
c000865a:	0f 8d 86 00 00 00    	jge    c00086e6 <ff_wtoupper+0x129>
c0008660:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008665:	83 f8 08             	cmp    eax,0x8
c0008668:	0f 87 94 00 00 00    	ja     c0008702 <ff_wtoupper+0x145>
c000866e:	8b 04 85 60 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6aa0]
c0008675:	ff e0                	jmp    eax
c0008677:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000867c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008681:	29 c2                	sub    edx,eax
c0008683:	89 d0                	mov    eax,edx
c0008685:	01 c0                	add    eax,eax
c0008687:	89 c2                	mov    edx,eax
c0008689:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000868d:	01 d0                	add    eax,edx
c000868f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008692:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008697:	eb 4b                	jmp    c00086e4 <ff_wtoupper+0x127>
c0008699:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000869e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086a2:	83 e0 01             	and    eax,0x1
c00086a5:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086aa:	eb 38                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086ac:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086b2:	eb 30                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086b4:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086ba:	eb 28                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086bc:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086c2:	eb 20                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086c4:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086ca:	eb 18                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086cc:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086d2:	eb 10                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086d4:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086da:	eb 08                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086dc:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086e3:	90                   	nop
c00086e4:	eb 1c                	jmp    c0008702 <ff_wtoupper+0x145>
c00086e6:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086ec:	0f 85 fe fe ff ff    	jne    c00085f0 <ff_wtoupper+0x33>
c00086f2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086f7:	01 c0                	add    eax,eax
c00086f9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086fd:	e9 ee fe ff ff       	jmp    c00085f0 <ff_wtoupper+0x33>
c0008702:	90                   	nop
c0008703:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008708:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000870c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008710:	83 c4 10             	add    esp,0x10
c0008713:	c3                   	ret    

c0008714 <psrc_set_converter>:
c0008714:	56                   	push   esi
c0008715:	89 d6                	mov    esi,edx
c0008717:	53                   	push   ebx
c0008718:	89 c3                	mov    ebx,eax
c000871a:	83 ec 0c             	sub    esp,0xc
c000871d:	52                   	push   edx
c000871e:	50                   	push   eax
c000871f:	e8 6f 55 00 00       	call   c000dc93 <sinc_set_converter>
c0008724:	83 c4 10             	add    esp,0x10
c0008727:	85 c0                	test   eax,eax
c0008729:	74 25                	je     c0008750 <psrc_set_converter+0x3c>
c000872b:	50                   	push   eax
c000872c:	50                   	push   eax
c000872d:	56                   	push   esi
c000872e:	53                   	push   ebx
c000872f:	e8 17 5d 00 00       	call   c000e44b <zoh_set_converter>
c0008734:	83 c4 10             	add    esp,0x10
c0008737:	85 c0                	test   eax,eax
c0008739:	74 15                	je     c0008750 <psrc_set_converter+0x3c>
c000873b:	51                   	push   ecx
c000873c:	51                   	push   ecx
c000873d:	56                   	push   esi
c000873e:	53                   	push   ebx
c000873f:	e8 0f 11 00 00       	call   c0009853 <linear_set_converter>
c0008744:	83 c4 10             	add    esp,0x10
c0008747:	ba 0a 00 00 00       	mov    edx,0xa
c000874c:	85 c0                	test   eax,eax
c000874e:	75 02                	jne    c0008752 <psrc_set_converter+0x3e>
c0008750:	31 d2                	xor    edx,edx
c0008752:	89 d0                	mov    eax,edx
c0008754:	5a                   	pop    edx
c0008755:	5b                   	pop    ebx
c0008756:	5e                   	pop    esi
c0008757:	c3                   	ret    

c0008758 <src_delete>:
c0008758:	53                   	push   ebx
c0008759:	83 ec 08             	sub    esp,0x8
c000875c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008760:	85 db                	test   ebx,ebx
c0008762:	74 29                	je     c000878d <src_delete+0x35>
c0008764:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008767:	85 c0                	test   eax,eax
c0008769:	74 0c                	je     c0008777 <src_delete+0x1f>
c000876b:	83 ec 0c             	sub    esp,0xc
c000876e:	50                   	push   eax
c000876f:	e8 df 70 00 00       	call   c000f853 <free>
c0008774:	83 c4 10             	add    esp,0x10
c0008777:	50                   	push   eax
c0008778:	6a 3c                	push   0x3c
c000877a:	6a 00                	push   0x0
c000877c:	53                   	push   ebx
c000877d:	e8 f6 7f ff ff       	call   c0000778 <memset>
c0008782:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008785:	e8 c9 70 00 00       	call   c000f853 <free>
c000878a:	83 c4 10             	add    esp,0x10
c000878d:	31 c0                	xor    eax,eax
c000878f:	83 c4 08             	add    esp,0x8
c0008792:	5b                   	pop    ebx
c0008793:	c3                   	ret    

c0008794 <src_process>:
c0008794:	55                   	push   ebp
c0008795:	57                   	push   edi
c0008796:	56                   	push   esi
c0008797:	53                   	push   ebx
c0008798:	83 ec 1c             	sub    esp,0x1c
c000879b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000879f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087a3:	85 ed                	test   ebp,ebp
c00087a5:	0f 84 6f 01 00 00    	je     c000891a <src_process+0x186>
c00087ab:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087af:	0f 84 6c 01 00 00    	je     c0008921 <src_process+0x18d>
c00087b5:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087b9:	0f 84 62 01 00 00    	je     c0008921 <src_process+0x18d>
c00087bf:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087c6:	0f 85 5c 01 00 00    	jne    c0008928 <src_process+0x194>
c00087cc:	85 db                	test   ebx,ebx
c00087ce:	0f 84 5b 01 00 00    	je     c000892f <src_process+0x19b>
c00087d4:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087d6:	85 f6                	test   esi,esi
c00087d8:	0f 84 58 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087de:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087e1:	85 ff                	test   edi,edi
c00087e3:	0f 84 4d 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087e9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087ec:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087f7:	68 00 00 70 3f       	push   0x3f700000
c00087fc:	6a 00                	push   0x0
c00087fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008806:	e8 24 fd 01 00       	call   c002852f <__ltdf2>
c000880b:	83 c4 10             	add    esp,0x10
c000880e:	85 c0                	test   eax,eax
c0008810:	0f 88 27 01 00 00    	js     c000893d <src_process+0x1a9>
c0008816:	68 00 00 70 40       	push   0x40700000
c000881b:	6a 00                	push   0x0
c000881d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008825:	e8 e7 fc 01 00       	call   c0028511 <__gtdf2>
c000882a:	83 c4 10             	add    esp,0x10
c000882d:	85 c0                	test   eax,eax
c000882f:	0f 8f 08 01 00 00    	jg     c000893d <src_process+0x1a9>
c0008835:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008839:	79 07                	jns    c0008842 <src_process+0xae>
c000883b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008842:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008845:	85 c0                	test   eax,eax
c0008847:	79 50                	jns    c0008899 <src_process+0x105>
c0008849:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008850:	39 fe                	cmp    esi,edi
c0008852:	72 37                	jb     c000888b <src_process+0xf7>
c0008854:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000885b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008862:	68 00 00 70 3f       	push   0x3f700000
c0008867:	6a 00                	push   0x0
c0008869:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000886c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000886f:	e8 bb fc 01 00       	call   c002852f <__ltdf2>
c0008874:	83 c4 10             	add    esp,0x10
c0008877:	85 c0                	test   eax,eax
c0008879:	79 37                	jns    c00088b2 <src_process+0x11e>
c000887b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000887f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008883:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008886:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008889:	eb 27                	jmp    c00088b2 <src_process+0x11e>
c000888b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000888e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008892:	8d 04 86             	lea    eax,[esi+eax*4]
c0008895:	39 c7                	cmp    edi,eax
c0008897:	eb 0d                	jmp    c00088a6 <src_process+0x112>
c0008899:	39 fe                	cmp    esi,edi
c000889b:	72 ee                	jb     c000888b <src_process+0xf7>
c000889d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088a1:	8d 04 87             	lea    eax,[edi+eax*4]
c00088a4:	39 c6                	cmp    esi,eax
c00088a6:	73 ac                	jae    c0008854 <src_process+0xc0>
c00088a8:	b8 10 00 00 00       	mov    eax,0x10
c00088ad:	e9 90 00 00 00       	jmp    c0008942 <src_process+0x1ae>
c00088b2:	83 ec 10             	sub    esp,0x10
c00088b5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088b8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088be:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088c1:	e8 6e f3 01 00       	call   c0027c34 <__subdf3>
c00088c6:	83 c4 18             	add    esp,0x18
c00088c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088d1:	52                   	push   edx
c00088d2:	50                   	push   eax
c00088d3:	e8 e8 fd 01 00       	call   c00286c0 <fabs>
c00088d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088dc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088e0:	83 c4 10             	add    esp,0x10
c00088e3:	68 af 03 d2 3c       	push   0x3cd203af
c00088e8:	68 16 56 e7 9e       	push   0x9ee75616
c00088ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f5:	e8 35 fc 01 00       	call   c002852f <__ltdf2>
c00088fa:	83 c4 10             	add    esp,0x10
c00088fd:	85 c0                	test   eax,eax
c00088ff:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008903:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008907:	79 05                	jns    c000890e <src_process+0x17a>
c0008909:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000890c:	eb 03                	jmp    c0008911 <src_process+0x17d>
c000890e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008911:	83 c4 1c             	add    esp,0x1c
c0008914:	5b                   	pop    ebx
c0008915:	5e                   	pop    esi
c0008916:	5f                   	pop    edi
c0008917:	5d                   	pop    ebp
c0008918:	ff e0                	jmp    eax
c000891a:	b8 02 00 00 00       	mov    eax,0x2
c000891f:	eb 21                	jmp    c0008942 <src_process+0x1ae>
c0008921:	b8 07 00 00 00       	mov    eax,0x7
c0008926:	eb 1a                	jmp    c0008942 <src_process+0x1ae>
c0008928:	b8 12 00 00 00       	mov    eax,0x12
c000892d:	eb 13                	jmp    c0008942 <src_process+0x1ae>
c000892f:	b8 03 00 00 00       	mov    eax,0x3
c0008934:	eb 0c                	jmp    c0008942 <src_process+0x1ae>
c0008936:	b8 04 00 00 00       	mov    eax,0x4
c000893b:	eb 05                	jmp    c0008942 <src_process+0x1ae>
c000893d:	b8 06 00 00 00       	mov    eax,0x6
c0008942:	83 c4 1c             	add    esp,0x1c
c0008945:	5b                   	pop    ebx
c0008946:	5e                   	pop    esi
c0008947:	5f                   	pop    edi
c0008948:	5d                   	pop    ebp
c0008949:	c3                   	ret    

c000894a <src_callback_read>:
c000894a:	55                   	push   ebp
c000894b:	57                   	push   edi
c000894c:	56                   	push   esi
c000894d:	53                   	push   ebx
c000894e:	83 ec 3c             	sub    esp,0x3c
c0008951:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008955:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008959:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000895d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008961:	85 ed                	test   ebp,ebp
c0008963:	0f 8e 52 01 00 00    	jle    c0008abb <src_callback_read+0x171>
c0008969:	85 db                	test   ebx,ebx
c000896b:	0f 84 4a 01 00 00    	je     c0008abb <src_callback_read+0x171>
c0008971:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008978:	74 0c                	je     c0008986 <src_callback_read+0x3c>
c000897a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008981:	e9 35 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008986:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000898a:	75 0c                	jne    c0008998 <src_callback_read+0x4e>
c000898c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008993:	e9 23 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008998:	51                   	push   ecx
c0008999:	6a 24                	push   0x24
c000899b:	6a 00                	push   0x0
c000899d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089a1:	50                   	push   eax
c00089a2:	e8 d1 7d ff ff       	call   c0000778 <memset>
c00089a7:	83 c4 10             	add    esp,0x10
c00089aa:	68 00 00 70 3f       	push   0x3f700000
c00089af:	6a 00                	push   0x0
c00089b1:	57                   	push   edi
c00089b2:	56                   	push   esi
c00089b3:	e8 77 fb 01 00       	call   c002852f <__ltdf2>
c00089b8:	83 c4 10             	add    esp,0x10
c00089bb:	85 c0                	test   eax,eax
c00089bd:	78 3e                	js     c00089fd <src_callback_read+0xb3>
c00089bf:	68 00 00 70 40       	push   0x40700000
c00089c4:	6a 00                	push   0x0
c00089c6:	57                   	push   edi
c00089c7:	56                   	push   esi
c00089c8:	e8 44 fb 01 00       	call   c0028511 <__gtdf2>
c00089cd:	83 c4 10             	add    esp,0x10
c00089d0:	85 c0                	test   eax,eax
c00089d2:	7f 29                	jg     c00089fd <src_callback_read+0xb3>
c00089d4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089d8:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089e0:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089e4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089e7:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089ef:	31 f6                	xor    esi,esi
c00089f1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089f8:	e9 97 00 00 00       	jmp    c0008a94 <src_callback_read+0x14a>
c00089fd:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a04:	e9 b2 00 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008a09:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a11:	52                   	push   edx
c0008a12:	52                   	push   edx
c0008a13:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a17:	50                   	push   eax
c0008a18:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a1b:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a22:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a26:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a2a:	83 c4 10             	add    esp,0x10
c0008a2d:	85 c0                	test   eax,eax
c0008a2f:	75 08                	jne    c0008a39 <src_callback_read+0xef>
c0008a31:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a39:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a40:	50                   	push   eax
c0008a41:	50                   	push   eax
c0008a42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a46:	50                   	push   eax
c0008a47:	53                   	push   ebx
c0008a48:	e8 47 fd ff ff       	call   c0008794 <src_process>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a57:	85 c0                	test   eax,eax
c0008a59:	75 49                	jne    c0008aa4 <src_callback_read+0x15a>
c0008a5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a5f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a62:	89 f9                	mov    ecx,edi
c0008a64:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a68:	0f af ca             	imul   ecx,edx
c0008a6b:	c1 e1 02             	shl    ecx,0x2
c0008a6e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a72:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a76:	0f af d1             	imul   edx,ecx
c0008a79:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a7d:	c1 e2 02             	shl    edx,0x2
c0008a80:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a84:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a87:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a8c:	74 12                	je     c0008aa0 <src_callback_read+0x156>
c0008a8e:	39 d5                	cmp    ebp,edx
c0008a90:	7e 14                	jle    c0008aa6 <src_callback_read+0x15c>
c0008a92:	89 d6                	mov    esi,edx
c0008a94:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a99:	75 9e                	jne    c0008a39 <src_callback_read+0xef>
c0008a9b:	e9 69 ff ff ff       	jmp    c0008a09 <src_callback_read+0xbf>
c0008aa0:	85 c9                	test   ecx,ecx
c0008aa2:	75 ea                	jne    c0008a8e <src_callback_read+0x144>
c0008aa4:	89 f2                	mov    edx,esi
c0008aa6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008aaa:	85 c0                	test   eax,eax
c0008aac:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008aaf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ab3:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008ab6:	74 05                	je     c0008abd <src_callback_read+0x173>
c0008ab8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008abb:	31 d2                	xor    edx,edx
c0008abd:	83 c4 3c             	add    esp,0x3c
c0008ac0:	89 d0                	mov    eax,edx
c0008ac2:	5b                   	pop    ebx
c0008ac3:	5e                   	pop    esi
c0008ac4:	5f                   	pop    edi
c0008ac5:	5d                   	pop    ebp
c0008ac6:	c3                   	ret    

c0008ac7 <src_set_ratio>:
c0008ac7:	57                   	push   edi
c0008ac8:	ba 02 00 00 00       	mov    edx,0x2
c0008acd:	56                   	push   esi
c0008ace:	53                   	push   ebx
c0008acf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ad3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ad7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008adb:	85 db                	test   ebx,ebx
c0008add:	74 4c                	je     c0008b2b <src_set_ratio+0x64>
c0008adf:	ba 07 00 00 00       	mov    edx,0x7
c0008ae4:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ae8:	74 41                	je     c0008b2b <src_set_ratio+0x64>
c0008aea:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008aee:	74 3b                	je     c0008b2b <src_set_ratio+0x64>
c0008af0:	68 00 00 70 3f       	push   0x3f700000
c0008af5:	6a 00                	push   0x0
c0008af7:	57                   	push   edi
c0008af8:	56                   	push   esi
c0008af9:	e8 31 fa 01 00       	call   c002852f <__ltdf2>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	ba 06 00 00 00       	mov    edx,0x6
c0008b06:	85 c0                	test   eax,eax
c0008b08:	78 21                	js     c0008b2b <src_set_ratio+0x64>
c0008b0a:	68 00 00 70 40       	push   0x40700000
c0008b0f:	6a 00                	push   0x0
c0008b11:	57                   	push   edi
c0008b12:	56                   	push   esi
c0008b13:	e8 f9 f9 01 00       	call   c0028511 <__gtdf2>
c0008b18:	83 c4 10             	add    esp,0x10
c0008b1b:	ba 06 00 00 00       	mov    edx,0x6
c0008b20:	85 c0                	test   eax,eax
c0008b22:	7f 07                	jg     c0008b2b <src_set_ratio+0x64>
c0008b24:	89 33                	mov    DWORD PTR [ebx],esi
c0008b26:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b29:	31 d2                	xor    edx,edx
c0008b2b:	5b                   	pop    ebx
c0008b2c:	89 d0                	mov    eax,edx
c0008b2e:	5e                   	pop    esi
c0008b2f:	5f                   	pop    edi
c0008b30:	c3                   	ret    

c0008b31 <src_get_channels>:
c0008b31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b35:	b8 02 00 00 00       	mov    eax,0x2
c0008b3a:	85 d2                	test   edx,edx
c0008b3c:	74 14                	je     c0008b52 <src_get_channels+0x21>
c0008b3e:	b8 07 00 00 00       	mov    eax,0x7
c0008b43:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b47:	74 09                	je     c0008b52 <src_get_channels+0x21>
c0008b49:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b4d:	74 03                	je     c0008b52 <src_get_channels+0x21>
c0008b4f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b52:	c3                   	ret    

c0008b53 <src_reset>:
c0008b53:	53                   	push   ebx
c0008b54:	b8 02 00 00 00       	mov    eax,0x2
c0008b59:	83 ec 08             	sub    esp,0x8
c0008b5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b60:	85 db                	test   ebx,ebx
c0008b62:	74 36                	je     c0008b9a <src_reset+0x47>
c0008b64:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b67:	85 c0                	test   eax,eax
c0008b69:	74 09                	je     c0008b74 <src_reset+0x21>
c0008b6b:	83 ec 0c             	sub    esp,0xc
c0008b6e:	53                   	push   ebx
c0008b6f:	ff d0                	call   eax
c0008b71:	83 c4 10             	add    esp,0x10
c0008b74:	31 c0                	xor    eax,eax
c0008b76:	31 d2                	xor    edx,edx
c0008b78:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b7b:	89 03                	mov    DWORD PTR [ebx],eax
c0008b7d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b80:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b83:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b8a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b91:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b98:	31 c0                	xor    eax,eax
c0008b9a:	83 c4 08             	add    esp,0x8
c0008b9d:	5b                   	pop    ebx
c0008b9e:	c3                   	ret    

c0008b9f <src_new>:
c0008b9f:	57                   	push   edi
c0008ba0:	56                   	push   esi
c0008ba1:	53                   	push   ebx
c0008ba2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008ba6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008baa:	85 f6                	test   esi,esi
c0008bac:	74 73                	je     c0008c21 <src_new+0x82>
c0008bae:	85 ff                	test   edi,edi
c0008bb0:	7f 08                	jg     c0008bba <src_new+0x1b>
c0008bb2:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bb8:	eb 1e                	jmp    c0008bd8 <src_new+0x39>
c0008bba:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bc0:	50                   	push   eax
c0008bc1:	50                   	push   eax
c0008bc2:	6a 3c                	push   0x3c
c0008bc4:	6a 01                	push   0x1
c0008bc6:	e8 a8 6c 00 00       	call   c000f873 <calloc>
c0008bcb:	83 c4 10             	add    esp,0x10
c0008bce:	89 c3                	mov    ebx,eax
c0008bd0:	85 c0                	test   eax,eax
c0008bd2:	75 10                	jne    c0008be4 <src_new+0x45>
c0008bd4:	85 f6                	test   esi,esi
c0008bd6:	75 04                	jne    c0008bdc <src_new+0x3d>
c0008bd8:	31 db                	xor    ebx,ebx
c0008bda:	eb 4b                	jmp    c0008c27 <src_new+0x88>
c0008bdc:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008be2:	eb 43                	jmp    c0008c27 <src_new+0x88>
c0008be4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008be7:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bf2:	e8 1d fb ff ff       	call   c0008714 <psrc_set_converter>
c0008bf7:	85 c0                	test   eax,eax
c0008bf9:	74 18                	je     c0008c13 <src_new+0x74>
c0008bfb:	85 f6                	test   esi,esi
c0008bfd:	74 06                	je     c0008c05 <src_new+0x66>
c0008bff:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c05:	83 ec 0c             	sub    esp,0xc
c0008c08:	53                   	push   ebx
c0008c09:	31 db                	xor    ebx,ebx
c0008c0b:	e8 43 6c 00 00       	call   c000f853 <free>
c0008c10:	83 c4 10             	add    esp,0x10
c0008c13:	83 ec 0c             	sub    esp,0xc
c0008c16:	53                   	push   ebx
c0008c17:	e8 37 ff ff ff       	call   c0008b53 <src_reset>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	eb 06                	jmp    c0008c27 <src_new+0x88>
c0008c21:	85 ff                	test   edi,edi
c0008c23:	7f 9b                	jg     c0008bc0 <src_new+0x21>
c0008c25:	eb b1                	jmp    c0008bd8 <src_new+0x39>
c0008c27:	89 d8                	mov    eax,ebx
c0008c29:	5b                   	pop    ebx
c0008c2a:	5e                   	pop    esi
c0008c2b:	5f                   	pop    edi
c0008c2c:	c3                   	ret    

c0008c2d <src_callback_new>:
c0008c2d:	56                   	push   esi
c0008c2e:	53                   	push   ebx
c0008c2f:	53                   	push   ebx
c0008c30:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c38:	85 f6                	test   esi,esi
c0008c3a:	75 0e                	jne    c0008c4a <src_callback_new+0x1d>
c0008c3c:	31 db                	xor    ebx,ebx
c0008c3e:	85 c0                	test   eax,eax
c0008c40:	74 47                	je     c0008c89 <src_callback_new+0x5c>
c0008c42:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c48:	eb 3f                	jmp    c0008c89 <src_callback_new+0x5c>
c0008c4a:	85 c0                	test   eax,eax
c0008c4c:	74 06                	je     c0008c54 <src_callback_new+0x27>
c0008c4e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c54:	51                   	push   ecx
c0008c55:	50                   	push   eax
c0008c56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5e:	e8 3c ff ff ff       	call   c0008b9f <src_new>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	89 c3                	mov    ebx,eax
c0008c68:	85 c0                	test   eax,eax
c0008c6a:	74 1d                	je     c0008c89 <src_callback_new+0x5c>
c0008c6c:	83 ec 0c             	sub    esp,0xc
c0008c6f:	50                   	push   eax
c0008c70:	e8 de fe ff ff       	call   c0008b53 <src_reset>
c0008c75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c79:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c80:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c83:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c86:	83 c4 10             	add    esp,0x10
c0008c89:	89 d8                	mov    eax,ebx
c0008c8b:	5a                   	pop    edx
c0008c8c:	5b                   	pop    ebx
c0008c8d:	5e                   	pop    esi
c0008c8e:	c3                   	ret    

c0008c8f <src_get_name>:
c0008c8f:	53                   	push   ebx
c0008c90:	83 ec 14             	sub    esp,0x14
c0008c93:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c97:	53                   	push   ebx
c0008c98:	e8 d0 4f 00 00       	call   c000dc6d <sinc_get_name>
c0008c9d:	83 c4 10             	add    esp,0x10
c0008ca0:	85 c0                	test   eax,eax
c0008ca2:	75 1d                	jne    c0008cc1 <src_get_name+0x32>
c0008ca4:	83 ec 0c             	sub    esp,0xc
c0008ca7:	53                   	push   ebx
c0008ca8:	e8 80 57 00 00       	call   c000e42d <zoh_get_name>
c0008cad:	83 c4 10             	add    esp,0x10
c0008cb0:	85 c0                	test   eax,eax
c0008cb2:	75 0d                	jne    c0008cc1 <src_get_name+0x32>
c0008cb4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb8:	83 c4 08             	add    esp,0x8
c0008cbb:	5b                   	pop    ebx
c0008cbc:	e9 74 0b 00 00       	jmp    c0009835 <linear_get_name>
c0008cc1:	83 c4 08             	add    esp,0x8
c0008cc4:	5b                   	pop    ebx
c0008cc5:	c3                   	ret    

c0008cc6 <src_get_description>:
c0008cc6:	53                   	push   ebx
c0008cc7:	83 ec 14             	sub    esp,0x14
c0008cca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cce:	53                   	push   ebx
c0008ccf:	e8 ac 4f 00 00       	call   c000dc80 <sinc_get_description>
c0008cd4:	83 c4 10             	add    esp,0x10
c0008cd7:	85 c0                	test   eax,eax
c0008cd9:	75 1d                	jne    c0008cf8 <src_get_description+0x32>
c0008cdb:	83 ec 0c             	sub    esp,0xc
c0008cde:	53                   	push   ebx
c0008cdf:	e8 58 57 00 00       	call   c000e43c <zoh_get_description>
c0008ce4:	83 c4 10             	add    esp,0x10
c0008ce7:	85 c0                	test   eax,eax
c0008ce9:	75 0d                	jne    c0008cf8 <src_get_description+0x32>
c0008ceb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cef:	83 c4 08             	add    esp,0x8
c0008cf2:	5b                   	pop    ebx
c0008cf3:	e9 4c 0b 00 00       	jmp    c0009844 <linear_get_description>
c0008cf8:	83 c4 08             	add    esp,0x8
c0008cfb:	5b                   	pop    ebx
c0008cfc:	c3                   	ret    

c0008cfd <src_get_version>:
c0008cfd:	b8 60 99 02 c0       	mov    eax,0xc0029960
c0008d02:	c3                   	ret    

c0008d03 <src_is_valid_ratio>:
c0008d03:	83 ec 1c             	sub    esp,0x1c
c0008d06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d16:	68 00 00 70 3f       	push   0x3f700000
c0008d1b:	6a 00                	push   0x0
c0008d1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d25:	e8 05 f8 01 00       	call   c002852f <__ltdf2>
c0008d2a:	83 c4 10             	add    esp,0x10
c0008d2d:	31 d2                	xor    edx,edx
c0008d2f:	85 c0                	test   eax,eax
c0008d31:	78 1e                	js     c0008d51 <src_is_valid_ratio+0x4e>
c0008d33:	68 00 00 70 40       	push   0x40700000
c0008d38:	6a 00                	push   0x0
c0008d3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d42:	e8 ca f7 01 00       	call   c0028511 <__gtdf2>
c0008d47:	31 d2                	xor    edx,edx
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	85 c0                	test   eax,eax
c0008d4e:	0f 9e c2             	setle  dl
c0008d51:	89 d0                	mov    eax,edx
c0008d53:	83 c4 1c             	add    esp,0x1c
c0008d56:	c3                   	ret    

c0008d57 <src_error>:
c0008d57:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d5b:	31 c0                	xor    eax,eax
c0008d5d:	85 d2                	test   edx,edx
c0008d5f:	74 03                	je     c0008d64 <src_error+0xd>
c0008d61:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d64:	c3                   	ret    

c0008d65 <src_strerror>:
c0008d65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d69:	31 c0                	xor    eax,eax
c0008d6b:	83 fa 17             	cmp    edx,0x17
c0008d6e:	77 07                	ja     c0008d77 <src_strerror+0x12>
c0008d70:	8b 04 95 c0 9d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6240]
c0008d77:	c3                   	ret    

c0008d78 <src_simple>:
c0008d78:	56                   	push   esi
c0008d79:	53                   	push   ebx
c0008d7a:	83 ec 18             	sub    esp,0x18
c0008d7d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d81:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d85:	50                   	push   eax
c0008d86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8e:	e8 0c fe ff ff       	call   c0008b9f <src_new>
c0008d93:	83 c4 10             	add    esp,0x10
c0008d96:	85 c0                	test   eax,eax
c0008d98:	75 06                	jne    c0008da0 <src_simple+0x28>
c0008d9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d9e:	eb 25                	jmp    c0008dc5 <src_simple+0x4d>
c0008da0:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008da7:	89 c3                	mov    ebx,eax
c0008da9:	50                   	push   eax
c0008daa:	50                   	push   eax
c0008dab:	56                   	push   esi
c0008dac:	53                   	push   ebx
c0008dad:	e8 e2 f9 ff ff       	call   c0008794 <src_process>
c0008db2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008db5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008db9:	e8 9a f9 ff ff       	call   c0008758 <src_delete>
c0008dbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dc2:	83 c4 10             	add    esp,0x10
c0008dc5:	83 c4 14             	add    esp,0x14
c0008dc8:	5b                   	pop    ebx
c0008dc9:	5e                   	pop    esi
c0008dca:	c3                   	ret    

c0008dcb <src_short_to_float_array>:
c0008dcb:	53                   	push   ebx
c0008dcc:	83 ec 18             	sub    esp,0x18
c0008dcf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008dd3:	85 db                	test   ebx,ebx
c0008dd5:	74 54                	je     c0008e2b <src_short_to_float_array+0x60>
c0008dd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ddb:	4b                   	dec    ebx
c0008ddc:	83 ec 0c             	sub    esp,0xc
c0008ddf:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008de3:	50                   	push   eax
c0008de4:	e8 da f4 01 00       	call   c00282c3 <__floatsidf>
c0008de9:	83 c4 10             	add    esp,0x10
c0008dec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008df0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008df4:	68 00 00 00 3f       	push   0x3f000000
c0008df9:	6a 00                	push   0x0
c0008dfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e03:	e8 58 ee 01 00       	call   c0027c60 <__muldf3>
c0008e08:	59                   	pop    ecx
c0008e09:	59                   	pop    ecx
c0008e0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1a:	e8 14 f7 01 00       	call   c0028533 <__truncdfsf2>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e26:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e29:	eb a8                	jmp    c0008dd3 <src_short_to_float_array+0x8>
c0008e2b:	83 c4 18             	add    esp,0x18
c0008e2e:	5b                   	pop    ebx
c0008e2f:	c3                   	ret    

c0008e30 <src_float_to_short_array>:
c0008e30:	56                   	push   esi
c0008e31:	53                   	push   ebx
c0008e32:	83 ec 14             	sub    esp,0x14
c0008e35:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e39:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e3d:	85 db                	test   ebx,ebx
c0008e3f:	0f 84 a4 00 00 00    	je     c0008ee9 <src_float_to_short_array+0xb9>
c0008e45:	83 ec 0c             	sub    esp,0xc
c0008e48:	4b                   	dec    ebx
c0008e49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e4d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e50:	e8 02 f8 01 00       	call   c0028657 <__extendsfdf2>
c0008e55:	83 c4 10             	add    esp,0x10
c0008e58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e60:	68 00 00 e0 41       	push   0x41e00000
c0008e65:	6a 00                	push   0x0
c0008e67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6f:	e8 ec ed 01 00       	call   c0027c60 <__muldf3>
c0008e74:	83 c4 10             	add    esp,0x10
c0008e77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e7f:	68 ff ff df 41       	push   0x41dfffff
c0008e84:	68 00 00 c0 ff       	push   0xffc00000
c0008e89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e91:	e8 97 f6 01 00       	call   c002852d <__gedf2>
c0008e96:	83 c4 10             	add    esp,0x10
c0008e99:	85 c0                	test   eax,eax
c0008e9b:	78 08                	js     c0008ea5 <src_float_to_short_array+0x75>
c0008e9d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008ea3:	eb 98                	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ea5:	68 00 00 e0 c1       	push   0xc1e00000
c0008eaa:	6a 00                	push   0x0
c0008eac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb4:	e8 78 f6 01 00       	call   c0028531 <__ledf2>
c0008eb9:	83 c4 10             	add    esp,0x10
c0008ebc:	85 c0                	test   eax,eax
c0008ebe:	7f 0b                	jg     c0008ecb <src_float_to_short_array+0x9b>
c0008ec0:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ec6:	e9 72 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ecb:	50                   	push   eax
c0008ecc:	50                   	push   eax
c0008ecd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed5:	e8 06 f8 01 00       	call   c00286e0 <lrint>
c0008eda:	83 c4 10             	add    esp,0x10
c0008edd:	c1 f8 10             	sar    eax,0x10
c0008ee0:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ee4:	e9 54 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ee9:	83 c4 14             	add    esp,0x14
c0008eec:	5b                   	pop    ebx
c0008eed:	5e                   	pop    esi
c0008eee:	c3                   	ret    

c0008eef <src_int_to_float_array>:
c0008eef:	53                   	push   ebx
c0008ef0:	83 ec 18             	sub    esp,0x18
c0008ef3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ef7:	85 db                	test   ebx,ebx
c0008ef9:	74 52                	je     c0008f4d <src_int_to_float_array+0x5e>
c0008efb:	83 ec 0c             	sub    esp,0xc
c0008efe:	4b                   	dec    ebx
c0008eff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f03:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f06:	e8 b8 f3 01 00       	call   c00282c3 <__floatsidf>
c0008f0b:	83 c4 10             	add    esp,0x10
c0008f0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f16:	68 00 00 00 3e       	push   0x3e000000
c0008f1b:	6a 00                	push   0x0
c0008f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f25:	e8 36 ed 01 00       	call   c0027c60 <__muldf3>
c0008f2a:	59                   	pop    ecx
c0008f2b:	59                   	pop    ecx
c0008f2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f30:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3c:	e8 f2 f5 01 00       	call   c0028533 <__truncdfsf2>
c0008f41:	83 c4 10             	add    esp,0x10
c0008f44:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f48:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f4b:	eb aa                	jmp    c0008ef7 <src_int_to_float_array+0x8>
c0008f4d:	83 c4 18             	add    esp,0x18
c0008f50:	5b                   	pop    ebx
c0008f51:	c3                   	ret    

c0008f52 <src_float_to_int_array>:
c0008f52:	56                   	push   esi
c0008f53:	53                   	push   ebx
c0008f54:	83 ec 14             	sub    esp,0x14
c0008f57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f5b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f5f:	85 db                	test   ebx,ebx
c0008f61:	0f 84 a2 00 00 00    	je     c0009009 <src_float_to_int_array+0xb7>
c0008f67:	83 ec 0c             	sub    esp,0xc
c0008f6a:	4b                   	dec    ebx
c0008f6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f6f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f72:	e8 e0 f6 01 00       	call   c0028657 <__extendsfdf2>
c0008f77:	83 c4 10             	add    esp,0x10
c0008f7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f82:	68 00 00 e0 41       	push   0x41e00000
c0008f87:	6a 00                	push   0x0
c0008f89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f91:	e8 ca ec 01 00       	call   c0027c60 <__muldf3>
c0008f96:	83 c4 10             	add    esp,0x10
c0008f99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa1:	68 ff ff df 41       	push   0x41dfffff
c0008fa6:	68 00 00 c0 ff       	push   0xffc00000
c0008fab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008faf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb3:	e8 75 f5 01 00       	call   c002852d <__gedf2>
c0008fb8:	83 c4 10             	add    esp,0x10
c0008fbb:	85 c0                	test   eax,eax
c0008fbd:	78 09                	js     c0008fc8 <src_float_to_int_array+0x76>
c0008fbf:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fc6:	eb 97                	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fc8:	68 00 00 e0 c1       	push   0xc1e00000
c0008fcd:	6a 00                	push   0x0
c0008fcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd7:	e8 55 f5 01 00       	call   c0028531 <__ledf2>
c0008fdc:	83 c4 10             	add    esp,0x10
c0008fdf:	85 c0                	test   eax,eax
c0008fe1:	7f 0c                	jg     c0008fef <src_float_to_int_array+0x9d>
c0008fe3:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fea:	e9 70 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fef:	50                   	push   eax
c0008ff0:	50                   	push   eax
c0008ff1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff9:	e8 e2 f6 01 00       	call   c00286e0 <lrint>
c0008ffe:	83 c4 10             	add    esp,0x10
c0009001:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009004:	e9 56 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0009009:	83 c4 14             	add    esp,0x14
c000900c:	5b                   	pop    ebx
c000900d:	5e                   	pop    esi
c000900e:	c3                   	ret    

c000900f <linear_vari_process>:
c000900f:	55                   	push   ebp
c0009010:	31 d2                	xor    edx,edx
c0009012:	57                   	push   edi
c0009013:	56                   	push   esi
c0009014:	53                   	push   ebx
c0009015:	83 ec 3c             	sub    esp,0x3c
c0009018:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000901c:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009020:	0f 8e d3 07 00 00    	jle    c00097f9 <linear_vari_process+0x7ea>
c0009026:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000902a:	ba 05 00 00 00       	mov    edx,0x5
c000902f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009032:	85 db                	test   ebx,ebx
c0009034:	0f 84 bf 07 00 00    	je     c00097f9 <linear_vari_process+0x7ea>
c000903a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000903d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009041:	74 19                	je     c000905c <linear_vari_process+0x4d>
c0009043:	31 d2                	xor    edx,edx
c0009045:	39 c2                	cmp    edx,eax
c0009047:	7d 0c                	jge    c0009055 <linear_vari_process+0x46>
c0009049:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000904b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000904e:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009052:	42                   	inc    edx
c0009053:	eb f0                	jmp    c0009045 <linear_vari_process+0x36>
c0009055:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000905c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000905f:	0f af d0             	imul   edx,eax
c0009062:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009065:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009069:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009070:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009073:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000907a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000907e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009081:	8b 00                	mov    eax,DWORD PTR [eax]
c0009083:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009087:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000908b:	68 00 00 70 3f       	push   0x3f700000
c0009090:	6a 00                	push   0x0
c0009092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909a:	e8 90 f4 01 00       	call   c002852f <__ltdf2>
c000909f:	83 c4 10             	add    esp,0x10
c00090a2:	ba 16 00 00 00       	mov    edx,0x16
c00090a7:	85 c0                	test   eax,eax
c00090a9:	0f 88 4a 07 00 00    	js     c00097f9 <linear_vari_process+0x7ea>
c00090af:	68 00 00 70 40       	push   0x40700000
c00090b4:	6a 00                	push   0x0
c00090b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090be:	e8 4e f4 01 00       	call   c0028511 <__gtdf2>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	ba 16 00 00 00       	mov    edx,0x16
c00090cb:	85 c0                	test   eax,eax
c00090cd:	0f 8f 26 07 00 00    	jg     c00097f9 <linear_vari_process+0x7ea>
c00090d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090d7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090e5:	68 00 00 f0 3f       	push   0x3ff00000
c00090ea:	6a 00                	push   0x0
c00090ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f4:	e8 36 f4 01 00       	call   c002852f <__ltdf2>
c00090f9:	83 c4 10             	add    esp,0x10
c00090fc:	85 c0                	test   eax,eax
c00090fe:	0f 89 89 02 00 00    	jns    c000938d <linear_vari_process+0x37e>
c0009104:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009107:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000910a:	0f 8d 7d 02 00 00    	jge    c000938d <linear_vari_process+0x37e>
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009116:	e8 a8 f1 01 00       	call   c00282c3 <__floatsidf>
c000911b:	83 c4 10             	add    esp,0x10
c000911e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009121:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009125:	68 00 00 f0 3f       	push   0x3ff00000
c000912a:	6a 00                	push   0x0
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009134:	e8 aa e4 01 00       	call   c00275e3 <__adddf3>
c0009139:	83 c4 10             	add    esp,0x10
c000913c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009140:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009144:	52                   	push   edx
c0009145:	50                   	push   eax
c0009146:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914e:	e8 0d eb 01 00       	call   c0027c60 <__muldf3>
c0009153:	5d                   	pop    ebp
c0009154:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009158:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000915c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000915f:	e8 5f f1 01 00       	call   c00282c3 <__floatsidf>
c0009164:	83 c4 10             	add    esp,0x10
c0009167:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000916b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000916f:	52                   	push   edx
c0009170:	50                   	push   eax
c0009171:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009175:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009179:	e8 65 e4 01 00       	call   c00275e3 <__adddf3>
c000917e:	59                   	pop    ecx
c000917f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009183:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009187:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000918a:	e8 34 f1 01 00       	call   c00282c3 <__floatsidf>
c000918f:	83 c4 10             	add    esp,0x10
c0009192:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009196:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000919a:	52                   	push   edx
c000919b:	50                   	push   eax
c000919c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a4:	e8 84 f3 01 00       	call   c002852d <__gedf2>
c00091a9:	83 c4 10             	add    esp,0x10
c00091ac:	85 c0                	test   eax,eax
c00091ae:	0f 89 d9 01 00 00    	jns    c000938d <linear_vari_process+0x37e>
c00091b4:	85 ff                	test   edi,edi
c00091b6:	0f 8e f4 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c00091bc:	83 ec 10             	sub    esp,0x10
c00091bf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091c2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091c5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091c9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091cc:	ff 30                	push   DWORD PTR [eax]
c00091ce:	e8 61 ea 01 00       	call   c0027c34 <__subdf3>
c00091d3:	83 c4 18             	add    esp,0x18
c00091d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091de:	52                   	push   edx
c00091df:	50                   	push   eax
c00091e0:	e8 db f4 01 00       	call   c00286c0 <fabs>
c00091e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091ed:	83 c4 10             	add    esp,0x10
c00091f0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091f5:	68 23 42 92 0c       	push   0xc924223
c00091fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009202:	e8 0a f3 01 00       	call   c0028511 <__gtdf2>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	85 c0                	test   eax,eax
c000920c:	0f 8e 9e 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c0009212:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009216:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009219:	8b 00                	mov    eax,DWORD PTR [eax]
c000921b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000921f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009222:	52                   	push   edx
c0009223:	50                   	push   eax
c0009224:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009227:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000922a:	e8 05 ea 01 00       	call   c0027c34 <__subdf3>
c000922f:	59                   	pop    ecx
c0009230:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009234:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009238:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000923b:	e8 83 f0 01 00       	call   c00282c3 <__floatsidf>
c0009240:	83 c4 10             	add    esp,0x10
c0009243:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009247:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000924b:	52                   	push   edx
c000924c:	50                   	push   eax
c000924d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009255:	e8 06 ea 01 00       	call   c0027c60 <__muldf3>
c000925a:	5f                   	pop    edi
c000925b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000925f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009263:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009266:	e8 58 f0 01 00       	call   c00282c3 <__floatsidf>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009272:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009276:	52                   	push   edx
c0009277:	50                   	push   eax
c0009278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000927c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009280:	e8 bf ec 01 00       	call   c0027f44 <__divdf3>
c0009285:	83 c4 10             	add    esp,0x10
c0009288:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000928c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009290:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009294:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000929c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a0:	e8 3e e3 01 00       	call   c00275e3 <__adddf3>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b0:	31 ff                	xor    edi,edi
c00092b2:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092b5:	0f 8e 9d 00 00 00    	jle    c0009358 <linear_vari_process+0x349>
c00092bb:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092be:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092c5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00092cc:	8b 06                	mov    eax,DWORD PTR [esi]
c00092ce:	52                   	push   edx
c00092cf:	52                   	push   edx
c00092d0:	55                   	push   ebp
c00092d1:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092d4:	47                   	inc    edi
c00092d5:	e8 9e dc 01 00       	call   c0026f78 <__subsf3>
c00092da:	89 04 24             	mov    DWORD PTR [esp],eax
c00092dd:	e8 75 f3 01 00       	call   c0028657 <__extendsfdf2>
c00092e2:	83 c4 10             	add    esp,0x10
c00092e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092fd:	e8 5e e9 01 00       	call   c0027c60 <__muldf3>
c0009302:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000930d:	e8 45 f3 01 00       	call   c0028657 <__extendsfdf2>
c0009312:	83 c4 10             	add    esp,0x10
c0009315:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009319:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000931d:	52                   	push   edx
c000931e:	50                   	push   eax
c000931f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009323:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009327:	e8 b7 e2 01 00       	call   c00275e3 <__adddf3>
c000932c:	59                   	pop    ecx
c000932d:	5d                   	pop    ebp
c000932e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009332:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009336:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933e:	e8 f0 f1 01 00       	call   c0028533 <__truncdfsf2>
c0009343:	83 c4 10             	add    esp,0x10
c0009346:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009349:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000934d:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009350:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009353:	e9 5a ff ff ff       	jmp    c00092b2 <linear_vari_process+0x2a3>
c0009358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009360:	68 00 00 f0 3f       	push   0x3ff00000
c0009365:	6a 00                	push   0x0
c0009367:	e8 d8 eb 01 00       	call   c0027f44 <__divdf3>
c000936c:	83 c4 10             	add    esp,0x10
c000936f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009372:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000937c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009380:	e8 5e e2 01 00       	call   c00275e3 <__adddf3>
c0009385:	83 c4 10             	add    esp,0x10
c0009388:	e9 50 fd ff ff       	jmp    c00090dd <linear_vari_process+0xce>
c000938d:	50                   	push   eax
c000938e:	50                   	push   eax
c000938f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009397:	e8 44 f3 01 00       	call   c00286e0 <lrint>
c000939c:	83 ec 0c             	sub    esp,0xc
c000939f:	50                   	push   eax
c00093a0:	e8 1e ef 01 00       	call   c00282c3 <__floatsidf>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b0:	52                   	push   edx
c00093b1:	50                   	push   eax
c00093b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093ba:	e8 75 e8 01 00       	call   c0027c34 <__subdf3>
c00093bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093c7:	83 c4 20             	add    esp,0x20
c00093ca:	6a 00                	push   0x0
c00093cc:	6a 00                	push   0x0
c00093ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d6:	e8 54 f1 01 00       	call   c002852f <__ltdf2>
c00093db:	83 c4 10             	add    esp,0x10
c00093de:	85 c0                	test   eax,eax
c00093e0:	79 1e                	jns    c0009400 <linear_vari_process+0x3f1>
c00093e2:	68 00 00 f0 3f       	push   0x3ff00000
c00093e7:	6a 00                	push   0x0
c00093e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f1:	e8 ed e1 01 00       	call   c00275e3 <__adddf3>
c00093f6:	83 c4 10             	add    esp,0x10
c00093f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009400:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009403:	83 ec 10             	sub    esp,0x10
c0009406:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009412:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009416:	e8 19 e8 01 00       	call   c0027c34 <__subdf3>
c000941b:	83 c4 18             	add    esp,0x18
c000941e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009422:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009426:	52                   	push   edx
c0009427:	50                   	push   eax
c0009428:	e8 b3 f2 01 00       	call   c00286e0 <lrint>
c000942d:	83 c4 10             	add    esp,0x10
c0009430:	0f af f8             	imul   edi,eax
c0009433:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009436:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009439:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000943c:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000943f:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009442:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009446:	0f 8d 13 03 00 00    	jge    c000975f <linear_vari_process+0x750>
c000944c:	83 ec 0c             	sub    esp,0xc
c000944f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009452:	e8 6c ee 01 00       	call   c00282c3 <__floatsidf>
c0009457:	83 c4 10             	add    esp,0x10
c000945a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009462:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009466:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000946a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009472:	e8 e9 e7 01 00       	call   c0027c60 <__muldf3>
c0009477:	89 3c 24             	mov    DWORD PTR [esp],edi
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	e8 3c ee 01 00       	call   c00282c3 <__floatsidf>
c0009487:	83 c4 10             	add    esp,0x10
c000948a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000948e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009492:	52                   	push   edx
c0009493:	50                   	push   eax
c0009494:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009498:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000949c:	e8 42 e1 01 00       	call   c00275e3 <__adddf3>
c00094a1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094ac:	e8 12 ee 01 00       	call   c00282c3 <__floatsidf>
c00094b1:	83 c4 10             	add    esp,0x10
c00094b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094bc:	52                   	push   edx
c00094bd:	50                   	push   eax
c00094be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c6:	e8 64 f0 01 00       	call   c002852f <__ltdf2>
c00094cb:	83 c4 10             	add    esp,0x10
c00094ce:	85 c0                	test   eax,eax
c00094d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094d4:	0f 89 85 02 00 00    	jns    c000975f <linear_vari_process+0x750>
c00094da:	85 c9                	test   ecx,ecx
c00094dc:	0f 8e f5 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c00094e2:	83 ec 10             	sub    esp,0x10
c00094e5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094e8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094eb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094ef:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094f2:	ff 30                	push   DWORD PTR [eax]
c00094f4:	e8 3b e7 01 00       	call   c0027c34 <__subdf3>
c00094f9:	83 c4 18             	add    esp,0x18
c00094fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009500:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009504:	52                   	push   edx
c0009505:	50                   	push   eax
c0009506:	e8 b5 f1 01 00       	call   c00286c0 <fabs>
c000950b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000950f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009513:	83 c4 10             	add    esp,0x10
c0009516:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000951b:	68 23 42 92 0c       	push   0xc924223
c0009520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009528:	e8 e4 ef 01 00       	call   c0028511 <__gtdf2>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	85 c0                	test   eax,eax
c0009532:	0f 8e 9f 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c0009538:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000953c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000953f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009541:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009549:	52                   	push   edx
c000954a:	50                   	push   eax
c000954b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000954e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009551:	e8 de e6 01 00       	call   c0027c34 <__subdf3>
c0009556:	5f                   	pop    edi
c0009557:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000955b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000955f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009562:	e8 5c ed 01 00       	call   c00282c3 <__floatsidf>
c0009567:	83 c4 10             	add    esp,0x10
c000956a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000956e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009572:	52                   	push   edx
c0009573:	50                   	push   eax
c0009574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000957c:	e8 df e6 01 00       	call   c0027c60 <__muldf3>
c0009581:	5d                   	pop    ebp
c0009582:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009586:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000958a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000958d:	e8 31 ed 01 00       	call   c00282c3 <__floatsidf>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009599:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000959d:	52                   	push   edx
c000959e:	50                   	push   eax
c000959f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a7:	e8 98 e9 01 00       	call   c0027f44 <__divdf3>
c00095ac:	83 c4 10             	add    esp,0x10
c00095af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095b3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c7:	e8 17 e0 01 00       	call   c00275e3 <__adddf3>
c00095cc:	83 c4 10             	add    esp,0x10
c00095cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095d7:	31 ff                	xor    edi,edi
c00095d9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095dc:	39 f8                	cmp    eax,edi
c00095de:	0f 8e ac 00 00 00    	jle    c0009690 <linear_vari_process+0x681>
c00095e4:	8b 16                	mov    edx,DWORD PTR [esi]
c00095e6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095e9:	29 c1                	sub    ecx,eax
c00095eb:	89 c8                	mov    eax,ecx
c00095ed:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095f0:	01 f8                	add    eax,edi
c00095f2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095f6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095f9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009600:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009603:	51                   	push   ecx
c0009604:	01 f8                	add    eax,edi
c0009606:	51                   	push   ecx
c0009607:	47                   	inc    edi
c0009608:	55                   	push   ebp
c0009609:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c000960c:	e8 67 d9 01 00       	call   c0026f78 <__subsf3>
c0009611:	89 04 24             	mov    DWORD PTR [esp],eax
c0009614:	e8 3e f0 01 00       	call   c0028657 <__extendsfdf2>
c0009619:	83 c4 10             	add    esp,0x10
c000961c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009620:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009624:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009628:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000962c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009630:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009634:	e8 27 e6 01 00       	call   c0027c60 <__muldf3>
c0009639:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000963c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009640:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009644:	e8 0e f0 01 00       	call   c0028657 <__extendsfdf2>
c0009649:	83 c4 10             	add    esp,0x10
c000964c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009650:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009654:	52                   	push   edx
c0009655:	50                   	push   eax
c0009656:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965e:	e8 80 df 01 00       	call   c00275e3 <__adddf3>
c0009663:	5d                   	pop    ebp
c0009664:	59                   	pop    ecx
c0009665:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009669:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000966d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009671:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009675:	e8 b9 ee 01 00       	call   c0028533 <__truncdfsf2>
c000967a:	83 c4 10             	add    esp,0x10
c000967d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009681:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009685:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009688:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000968b:	e9 49 ff ff ff       	jmp    c00095d9 <linear_vari_process+0x5ca>
c0009690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	68 00 00 f0 3f       	push   0x3ff00000
c000969d:	6a 00                	push   0x0
c000969f:	e8 a0 e8 01 00       	call   c0027f44 <__divdf3>
c00096a4:	83 c4 10             	add    esp,0x10
c00096a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096af:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	e8 1f df 01 00       	call   c00275e3 <__adddf3>
c00096c4:	59                   	pop    ecx
c00096c5:	5f                   	pop    edi
c00096c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d6:	e8 05 f0 01 00       	call   c00286e0 <lrint>
c00096db:	83 ec 0c             	sub    esp,0xc
c00096de:	50                   	push   eax
c00096df:	e8 df eb 01 00       	call   c00282c3 <__floatsidf>
c00096e4:	83 c4 10             	add    esp,0x10
c00096e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096eb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ef:	52                   	push   edx
c00096f0:	50                   	push   eax
c00096f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f9:	e8 36 e5 01 00       	call   c0027c34 <__subdf3>
c00096fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009702:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009706:	83 c4 20             	add    esp,0x20
c0009709:	6a 00                	push   0x0
c000970b:	6a 00                	push   0x0
c000970d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009711:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009715:	e8 15 ee 01 00       	call   c002852f <__ltdf2>
c000971a:	83 c4 10             	add    esp,0x10
c000971d:	85 c0                	test   eax,eax
c000971f:	79 1e                	jns    c000973f <linear_vari_process+0x730>
c0009721:	68 00 00 f0 3f       	push   0x3ff00000
c0009726:	6a 00                	push   0x0
c0009728:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000972c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009730:	e8 ae de 01 00       	call   c00275e3 <__adddf3>
c0009735:	83 c4 10             	add    esp,0x10
c0009738:	89 04 24             	mov    DWORD PTR [esp],eax
c000973b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000973f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009742:	83 ec 10             	sub    esp,0x10
c0009745:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009749:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000974d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009751:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009755:	e8 da e4 01 00       	call   c0027c34 <__subdf3>
c000975a:	e9 bc fc ff ff       	jmp    c000941b <linear_vari_process+0x40c>
c000975f:	39 fd                	cmp    ebp,edi
c0009761:	7d 38                	jge    c000979b <linear_vari_process+0x78c>
c0009763:	83 ec 0c             	sub    esp,0xc
c0009766:	89 f8                	mov    eax,edi
c0009768:	29 e8                	sub    eax,ebp
c000976a:	99                   	cdq    
c000976b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000976e:	50                   	push   eax
c000976f:	e8 4f eb 01 00       	call   c00282c3 <__floatsidf>
c0009774:	83 c4 10             	add    esp,0x10
c0009777:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000977b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000977f:	52                   	push   edx
c0009780:	50                   	push   eax
c0009781:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009785:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009789:	e8 55 de 01 00       	call   c00275e3 <__adddf3>
c000978e:	83 c4 10             	add    esp,0x10
c0009791:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009794:	89 04 24             	mov    DWORD PTR [esp],eax
c0009797:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000979b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000979f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097a6:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097a9:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097ac:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097af:	85 c0                	test   eax,eax
c00097b1:	7f 29                	jg     c00097dc <linear_vari_process+0x7cd>
c00097b3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097bf:	89 01                	mov    DWORD PTR [ecx],eax
c00097c1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097c7:	99                   	cdq    
c00097c8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097cb:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097ce:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097d1:	99                   	cdq    
c00097d2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097d5:	31 d2                	xor    edx,edx
c00097d7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097da:	eb 1d                	jmp    c00097f9 <linear_vari_process+0x7ea>
c00097dc:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097df:	31 d2                	xor    edx,edx
c00097e1:	29 c8                	sub    eax,ecx
c00097e3:	c1 e0 02             	shl    eax,0x2
c00097e6:	39 d1                	cmp    ecx,edx
c00097e8:	7e c9                	jle    c00097b3 <linear_vari_process+0x7a4>
c00097ea:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097ec:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097ef:	83 c0 04             	add    eax,0x4
c00097f2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097f6:	42                   	inc    edx
c00097f7:	eb ed                	jmp    c00097e6 <linear_vari_process+0x7d7>
c00097f9:	83 c4 3c             	add    esp,0x3c
c00097fc:	89 d0                	mov    eax,edx
c00097fe:	5b                   	pop    ebx
c00097ff:	5e                   	pop    esi
c0009800:	5f                   	pop    edi
c0009801:	5d                   	pop    ebp
c0009802:	c3                   	ret    

c0009803 <linear_reset>:
c0009803:	83 ec 0c             	sub    esp,0xc
c0009806:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000980a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000980d:	85 c0                	test   eax,eax
c000980f:	74 20                	je     c0009831 <linear_reset+0x2e>
c0009811:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009814:	83 c0 1c             	add    eax,0x1c
c0009817:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000981a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009821:	c1 e2 02             	shl    edx,0x2
c0009824:	51                   	push   ecx
c0009825:	52                   	push   edx
c0009826:	6a 00                	push   0x0
c0009828:	50                   	push   eax
c0009829:	e8 4a 6f ff ff       	call   c0000778 <memset>
c000982e:	83 c4 10             	add    esp,0x10
c0009831:	83 c4 0c             	add    esp,0xc
c0009834:	c3                   	ret    

c0009835 <linear_get_name>:
c0009835:	31 c0                	xor    eax,eax
c0009837:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000983c:	75 05                	jne    c0009843 <linear_get_name+0xe>
c000983e:	b8 20 9e 02 c0       	mov    eax,0xc0029e20
c0009843:	c3                   	ret    

c0009844 <linear_get_description>:
c0009844:	31 c0                	xor    eax,eax
c0009846:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000984b:	75 05                	jne    c0009852 <linear_get_description+0xe>
c000984d:	b8 34 9e 02 c0       	mov    eax,0xc0029e34
c0009852:	c3                   	ret    

c0009853 <linear_set_converter>:
c0009853:	53                   	push   ebx
c0009854:	b8 0a 00 00 00       	mov    eax,0xa
c0009859:	83 ec 08             	sub    esp,0x8
c000985c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009860:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009865:	75 6e                	jne    c00098d5 <linear_set_converter+0x82>
c0009867:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000986a:	85 c0                	test   eax,eax
c000986c:	74 13                	je     c0009881 <linear_set_converter+0x2e>
c000986e:	83 ec 0c             	sub    esp,0xc
c0009871:	50                   	push   eax
c0009872:	e8 dc 5f 00 00       	call   c000f853 <free>
c0009877:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000987e:	83 c4 10             	add    esp,0x10
c0009881:	50                   	push   eax
c0009882:	50                   	push   eax
c0009883:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009886:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000988d:	50                   	push   eax
c000988e:	6a 01                	push   0x1
c0009890:	e8 de 5f 00 00       	call   c000f873 <calloc>
c0009895:	83 c4 10             	add    esp,0x10
c0009898:	89 c2                	mov    edx,eax
c000989a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000989d:	85 d2                	test   edx,edx
c000989f:	b8 01 00 00 00       	mov    eax,0x1
c00098a4:	74 2f                	je     c00098d5 <linear_set_converter+0x82>
c00098a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098a9:	83 ec 0c             	sub    esp,0xc
c00098ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098af:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098b5:	c7 43 24 0f 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000900f
c00098bc:	c7 43 20 0f 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000900f
c00098c3:	c7 43 28 03 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009803
c00098ca:	53                   	push   ebx
c00098cb:	e8 33 ff ff ff       	call   c0009803 <linear_reset>
c00098d0:	83 c4 10             	add    esp,0x10
c00098d3:	31 c0                	xor    eax,eax
c00098d5:	83 c4 08             	add    esp,0x8
c00098d8:	5b                   	pop    ebx
c00098d9:	c3                   	ret    

c00098da <int_to_fp>:
c00098da:	c1 e0 0c             	shl    eax,0xc
c00098dd:	c3                   	ret    

c00098de <fp_to_int>:
c00098de:	c1 f8 0c             	sar    eax,0xc
c00098e1:	c3                   	ret    

c00098e2 <fp_fraction_part>:
c00098e2:	25 ff 0f 00 00       	and    eax,0xfff
c00098e7:	c3                   	ret    

c00098e8 <fp_to_double>:
c00098e8:	83 ec 1c             	sub    esp,0x1c
c00098eb:	e8 f2 ff ff ff       	call   c00098e2 <fp_fraction_part>
c00098f0:	83 ec 0c             	sub    esp,0xc
c00098f3:	50                   	push   eax
c00098f4:	e8 ca e9 01 00       	call   c00282c3 <__floatsidf>
c00098f9:	83 c4 10             	add    esp,0x10
c00098fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009900:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009904:	68 00 00 30 3f       	push   0x3f300000
c0009909:	6a 00                	push   0x0
c000990b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000990f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009913:	e8 48 e3 01 00       	call   c0027c60 <__muldf3>
c0009918:	83 c4 2c             	add    esp,0x2c
c000991b:	c3                   	ret    

c000991c <calc_output_single>:
c000991c:	55                   	push   ebp
c000991d:	57                   	push   edi
c000991e:	56                   	push   esi
c000991f:	89 c6                	mov    esi,eax
c0009921:	53                   	push   ebx
c0009922:	89 d3                	mov    ebx,edx
c0009924:	83 ec 4c             	sub    esp,0x4c
c0009927:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000992b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000992e:	e8 a7 ff ff ff       	call   c00098da <int_to_fp>
c0009933:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009936:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000993a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000993e:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009942:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009945:	99                   	cdq    
c0009946:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000994e:	f7 fb                	idiv   ebx
c0009950:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009958:	89 da                	mov    edx,ebx
c000995a:	0f af d0             	imul   edx,eax
c000995d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009961:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009965:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009969:	29 c2                	sub    edx,eax
c000996b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000996e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009972:	83 c5 04             	add    ebp,0x4
c0009975:	e8 6e ff ff ff       	call   c00098e8 <fp_to_double>
c000997a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000997e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009986:	e8 53 ff ff ff       	call   c00098de <fp_to_int>
c000998b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000998e:	52                   	push   edx
c000998f:	52                   	push   edx
c0009990:	51                   	push   ecx
c0009991:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009995:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009999:	e8 da d5 01 00       	call   c0026f78 <__subsf3>
c000999e:	89 04 24             	mov    DWORD PTR [esp],eax
c00099a1:	e8 b1 ec 01 00       	call   c0028657 <__extendsfdf2>
c00099a6:	83 c4 10             	add    esp,0x10
c00099a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099ad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c1:	e8 9a e2 01 00       	call   c0027c60 <__muldf3>
c00099c6:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099ce:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099d1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099d5:	e8 7d ec 01 00       	call   c0028657 <__extendsfdf2>
c00099da:	83 c4 10             	add    esp,0x10
c00099dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099e5:	52                   	push   edx
c00099e6:	50                   	push   eax
c00099e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099ef:	e8 ef db 01 00       	call   c00275e3 <__adddf3>
c00099f4:	59                   	pop    ecx
c00099f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099fd:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a03:	e8 4f ec 01 00       	call   c0028657 <__extendsfdf2>
c0009a08:	83 c4 10             	add    esp,0x10
c0009a0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a13:	52                   	push   edx
c0009a14:	50                   	push   eax
c0009a15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a1d:	e8 3e e2 01 00       	call   c0027c60 <__muldf3>
c0009a22:	83 c4 10             	add    esp,0x10
c0009a25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a2d:	52                   	push   edx
c0009a2e:	50                   	push   eax
c0009a2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a37:	e8 a7 db 01 00       	call   c00275e3 <__adddf3>
c0009a3c:	83 c4 10             	add    esp,0x10
c0009a3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a47:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a4b:	0f 89 1d ff ff ff    	jns    c000996e <calc_output_single+0x52>
c0009a51:	89 d9                	mov    ecx,ebx
c0009a53:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a57:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a5b:	89 dd                	mov    ebp,ebx
c0009a5d:	29 c8                	sub    eax,ecx
c0009a5f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a67:	99                   	cdq    
c0009a68:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a70:	f7 fb                	idiv   ebx
c0009a72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a76:	0f af e8             	imul   ebp,eax
c0009a79:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a7d:	01 cd                	add    ebp,ecx
c0009a7f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a82:	89 e8                	mov    eax,ebp
c0009a84:	83 ee 04             	sub    esi,0x4
c0009a87:	e8 5c fe ff ff       	call   c00098e8 <fp_to_double>
c0009a8c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a94:	89 e8                	mov    eax,ebp
c0009a96:	29 dd                	sub    ebp,ebx
c0009a98:	e8 41 fe ff ff       	call   c00098de <fp_to_int>
c0009a9d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009aa0:	52                   	push   edx
c0009aa1:	52                   	push   edx
c0009aa2:	51                   	push   ecx
c0009aa3:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009aa7:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009aab:	e8 c8 d4 01 00       	call   c0026f78 <__subsf3>
c0009ab0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ab3:	e8 9f eb 01 00       	call   c0028657 <__extendsfdf2>
c0009ab8:	83 c4 10             	add    esp,0x10
c0009abb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009abf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ac3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ac7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009acb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009acf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ad3:	e8 88 e1 01 00       	call   c0027c60 <__muldf3>
c0009ad8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009adc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ae0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ae3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ae7:	e8 6b eb 01 00       	call   c0028657 <__extendsfdf2>
c0009aec:	83 c4 10             	add    esp,0x10
c0009aef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009af3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009af7:	52                   	push   edx
c0009af8:	50                   	push   eax
c0009af9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b01:	e8 dd da 01 00       	call   c00275e3 <__adddf3>
c0009b06:	59                   	pop    ecx
c0009b07:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b0b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b0f:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b15:	e8 3d eb 01 00       	call   c0028657 <__extendsfdf2>
c0009b1a:	83 c4 10             	add    esp,0x10
c0009b1d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b21:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b25:	52                   	push   edx
c0009b26:	50                   	push   eax
c0009b27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2f:	e8 2c e1 01 00       	call   c0027c60 <__muldf3>
c0009b34:	83 c4 10             	add    esp,0x10
c0009b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b3f:	52                   	push   edx
c0009b40:	50                   	push   eax
c0009b41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b49:	e8 95 da 01 00       	call   c00275e3 <__adddf3>
c0009b4e:	83 c4 10             	add    esp,0x10
c0009b51:	85 ed                	test   ebp,ebp
c0009b53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b57:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b5b:	0f 8f 21 ff ff ff    	jg     c0009a82 <calc_output_single+0x166>
c0009b61:	52                   	push   edx
c0009b62:	50                   	push   eax
c0009b63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b6b:	e8 73 da 01 00       	call   c00275e3 <__adddf3>
c0009b70:	83 c4 5c             	add    esp,0x5c
c0009b73:	5b                   	pop    ebx
c0009b74:	5e                   	pop    esi
c0009b75:	5f                   	pop    edi
c0009b76:	5d                   	pop    ebp
c0009b77:	c3                   	ret    

c0009b78 <calc_output_stereo>:
c0009b78:	55                   	push   ebp
c0009b79:	89 cd                	mov    ebp,ecx
c0009b7b:	57                   	push   edi
c0009b7c:	56                   	push   esi
c0009b7d:	53                   	push   ebx
c0009b7e:	89 c3                	mov    ebx,eax
c0009b80:	83 ec 6c             	sub    esp,0x6c
c0009b83:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b87:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b8e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b95:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b99:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b9d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009ba0:	e8 35 fd ff ff       	call   c00098da <int_to_fp>
c0009ba5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bad:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bb9:	29 c8                	sub    eax,ecx
c0009bbb:	99                   	cdq    
c0009bbc:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bc4:	0f af d0             	imul   edx,eax
c0009bc7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bca:	31 d2                	xor    edx,edx
c0009bcc:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bd4:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bd7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bdb:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009bde:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009be2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009be6:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009be9:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bee:	29 c1                	sub    ecx,eax
c0009bf0:	31 c0                	xor    eax,eax
c0009bf2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bf5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bfd:	83 c7 08             	add    edi,0x8
c0009c00:	e8 e3 fc ff ff       	call   c00098e8 <fp_to_double>
c0009c05:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c09:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c11:	e8 c8 fc ff ff       	call   c00098de <fp_to_int>
c0009c16:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c19:	52                   	push   edx
c0009c1a:	52                   	push   edx
c0009c1b:	51                   	push   ecx
c0009c1c:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c20:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c24:	e8 4f d3 01 00       	call   c0026f78 <__subsf3>
c0009c29:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c2c:	e8 26 ea 01 00       	call   c0028657 <__extendsfdf2>
c0009c31:	83 c4 10             	add    esp,0x10
c0009c34:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c38:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c48:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c4c:	e8 0f e0 01 00       	call   c0027c60 <__muldf3>
c0009c51:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c55:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c59:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c5c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c60:	e8 f2 e9 01 00       	call   c0028657 <__extendsfdf2>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c6c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c70:	52                   	push   edx
c0009c71:	50                   	push   eax
c0009c72:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c76:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c7a:	e8 64 d9 01 00       	call   c00275e3 <__adddf3>
c0009c7f:	59                   	pop    ecx
c0009c80:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c84:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c88:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c8e:	e8 c4 e9 01 00       	call   c0028657 <__extendsfdf2>
c0009c93:	83 c4 10             	add    esp,0x10
c0009c96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009caa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cae:	e8 ad df 01 00       	call   c0027c60 <__muldf3>
c0009cb3:	83 c4 10             	add    esp,0x10
c0009cb6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cba:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cbe:	52                   	push   edx
c0009cbf:	50                   	push   eax
c0009cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc8:	e8 16 d9 01 00       	call   c00275e3 <__adddf3>
c0009ccd:	59                   	pop    ecx
c0009cce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cd6:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009cdc:	e8 76 e9 01 00       	call   c0028657 <__extendsfdf2>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ce8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cf8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cfc:	e8 5f df 01 00       	call   c0027c60 <__muldf3>
c0009d01:	83 c4 10             	add    esp,0x10
c0009d04:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d08:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d0c:	52                   	push   edx
c0009d0d:	50                   	push   eax
c0009d0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d16:	e8 c8 d8 01 00       	call   c00275e3 <__adddf3>
c0009d1b:	83 c4 10             	add    esp,0x10
c0009d1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d22:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d26:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d2a:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d2e:	0f 89 c5 fe ff ff    	jns    c0009bf9 <calc_output_stereo+0x81>
c0009d34:	29 e9                	sub    ecx,ebp
c0009d36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d3a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d3e:	29 c8                	sub    eax,ecx
c0009d40:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d48:	99                   	cdq    
c0009d49:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d4d:	31 d2                	xor    edx,edx
c0009d4f:	0f af f8             	imul   edi,eax
c0009d52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d56:	40                   	inc    eax
c0009d57:	01 cf                	add    edi,ecx
c0009d59:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d5e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d62:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d6a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d6d:	31 c0                	xor    eax,eax
c0009d6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d73:	89 f8                	mov    eax,edi
c0009d75:	83 eb 08             	sub    ebx,0x8
c0009d78:	e8 6b fb ff ff       	call   c00098e8 <fp_to_double>
c0009d7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d85:	89 f8                	mov    eax,edi
c0009d87:	e8 52 fb ff ff       	call   c00098de <fp_to_int>
c0009d8c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d8f:	52                   	push   edx
c0009d90:	52                   	push   edx
c0009d91:	55                   	push   ebp
c0009d92:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d96:	e8 dd d1 01 00       	call   c0026f78 <__subsf3>
c0009d9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d9e:	e8 b4 e8 01 00       	call   c0028657 <__extendsfdf2>
c0009da3:	83 c4 10             	add    esp,0x10
c0009da6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009daa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dbe:	e8 9d de 01 00       	call   c0027c60 <__muldf3>
c0009dc3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dc6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dca:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dce:	e8 84 e8 01 00       	call   c0028657 <__extendsfdf2>
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dda:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dde:	52                   	push   edx
c0009ddf:	50                   	push   eax
c0009de0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de8:	e8 f6 d7 01 00       	call   c00275e3 <__adddf3>
c0009ded:	59                   	pop    ecx
c0009dee:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009df2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009df6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dfc:	e8 56 e8 01 00       	call   c0028657 <__extendsfdf2>
c0009e01:	83 c4 10             	add    esp,0x10
c0009e04:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e08:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e0c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e10:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e1c:	e8 3f de 01 00       	call   c0027c60 <__muldf3>
c0009e21:	83 c4 10             	add    esp,0x10
c0009e24:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e28:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e2c:	52                   	push   edx
c0009e2d:	50                   	push   eax
c0009e2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e36:	e8 a8 d7 01 00       	call   c00275e3 <__adddf3>
c0009e3b:	5d                   	pop    ebp
c0009e3c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e40:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e44:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e4a:	e8 08 e8 01 00       	call   c0028657 <__extendsfdf2>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e6a:	e8 f1 dd 01 00       	call   c0027c60 <__muldf3>
c0009e6f:	83 c4 10             	add    esp,0x10
c0009e72:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e76:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e7a:	52                   	push   edx
c0009e7b:	50                   	push   eax
c0009e7c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e80:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e84:	e8 5a d7 01 00       	call   c00275e3 <__adddf3>
c0009e89:	83 c4 10             	add    esp,0x10
c0009e8c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e98:	85 ff                	test   edi,edi
c0009e9a:	0f 8f d3 fe ff ff    	jg     c0009d73 <calc_output_stereo+0x1fb>
c0009ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	e8 2e d7 01 00       	call   c00275e3 <__adddf3>
c0009eb5:	83 c4 10             	add    esp,0x10
c0009eb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ec0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ecc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed0:	e8 8b dd 01 00       	call   c0027c60 <__muldf3>
c0009ed5:	59                   	pop    ecx
c0009ed6:	5b                   	pop    ebx
c0009ed7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009edb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009edf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee7:	e8 47 e6 01 00       	call   c0028533 <__truncdfsf2>
c0009eec:	83 c4 10             	add    esp,0x10
c0009eef:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ef6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009efc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f08:	e8 d6 d6 01 00       	call   c00275e3 <__adddf3>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f28:	e8 33 dd 01 00       	call   c0027c60 <__muldf3>
c0009f2d:	5e                   	pop    esi
c0009f2e:	5f                   	pop    edi
c0009f2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3f:	e8 ef e5 01 00       	call   c0028533 <__truncdfsf2>
c0009f44:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f4b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f4e:	83 c4 7c             	add    esp,0x7c
c0009f51:	5b                   	pop    ebx
c0009f52:	5e                   	pop    esi
c0009f53:	5f                   	pop    edi
c0009f54:	5d                   	pop    ebp
c0009f55:	c3                   	ret    

c0009f56 <calc_output_quad>:
c0009f56:	55                   	push   ebp
c0009f57:	57                   	push   edi
c0009f58:	56                   	push   esi
c0009f59:	89 c6                	mov    esi,eax
c0009f5b:	53                   	push   ebx
c0009f5c:	83 ec 7c             	sub    esp,0x7c
c0009f5f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f63:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f67:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f6e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f75:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f7d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f80:	e8 55 f9 ff ff       	call   c00098da <int_to_fp>
c0009f85:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f88:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f8b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f8f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f93:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f97:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f9b:	99                   	cdq    
c0009f9c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fa0:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fa4:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009fa7:	31 d2                	xor    edx,edx
c0009fa9:	0f af d8             	imul   ebx,eax
c0009fac:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fb4:	0f af c7             	imul   eax,edi
c0009fb7:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fbb:	29 c1                	sub    ecx,eax
c0009fbd:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fc5:	31 c0                	xor    eax,eax
c0009fc7:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fda:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fde:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fe2:	89 d8                	mov    eax,ebx
c0009fe4:	83 c7 10             	add    edi,0x10
c0009fe7:	e8 fc f8 ff ff       	call   c00098e8 <fp_to_double>
c0009fec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ff4:	89 d8                	mov    eax,ebx
c0009ff6:	e8 e3 f8 ff ff       	call   c00098de <fp_to_int>
c0009ffb:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fff:	52                   	push   edx
c000a000:	52                   	push   edx
c000a001:	51                   	push   ecx
c000a002:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a006:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a00a:	e8 69 cf 01 00       	call   c0026f78 <__subsf3>
c000a00f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a012:	e8 40 e6 01 00       	call   c0028657 <__extendsfdf2>
c000a017:	83 c4 10             	add    esp,0x10
c000a01a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a02e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a032:	e8 29 dc 01 00       	call   c0027c60 <__muldf3>
c000a037:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a03b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a03f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a042:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a046:	e8 0c e6 01 00       	call   c0028657 <__extendsfdf2>
c000a04b:	83 c4 10             	add    esp,0x10
c000a04e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a052:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a056:	52                   	push   edx
c000a057:	50                   	push   eax
c000a058:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a05c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a060:	e8 7e d5 01 00       	call   c00275e3 <__adddf3>
c000a065:	59                   	pop    ecx
c000a066:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a06a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a06e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a074:	e8 de e5 01 00       	call   c0028657 <__extendsfdf2>
c000a079:	83 c4 10             	add    esp,0x10
c000a07c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a080:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a08c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a090:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a094:	e8 c7 db 01 00       	call   c0027c60 <__muldf3>
c000a099:	83 c4 10             	add    esp,0x10
c000a09c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0a4:	52                   	push   edx
c000a0a5:	50                   	push   eax
c000a0a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0ae:	e8 30 d5 01 00       	call   c00275e3 <__adddf3>
c000a0b3:	59                   	pop    ecx
c000a0b4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0b8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0bc:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0c2:	e8 90 e5 01 00       	call   c0028657 <__extendsfdf2>
c000a0c7:	83 c4 10             	add    esp,0x10
c000a0ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e2:	e8 79 db 01 00       	call   c0027c60 <__muldf3>
c000a0e7:	83 c4 10             	add    esp,0x10
c000a0ea:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ee:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0f2:	52                   	push   edx
c000a0f3:	50                   	push   eax
c000a0f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0fc:	e8 e2 d4 01 00       	call   c00275e3 <__adddf3>
c000a101:	59                   	pop    ecx
c000a102:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a106:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a10a:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a110:	e8 42 e5 01 00       	call   c0028657 <__extendsfdf2>
c000a115:	83 c4 10             	add    esp,0x10
c000a118:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a11c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a128:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a12c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a130:	e8 2b db 01 00       	call   c0027c60 <__muldf3>
c000a135:	83 c4 10             	add    esp,0x10
c000a138:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a13c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a140:	52                   	push   edx
c000a141:	50                   	push   eax
c000a142:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a146:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a14a:	e8 94 d4 01 00       	call   c00275e3 <__adddf3>
c000a14f:	59                   	pop    ecx
c000a150:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a154:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a158:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a15e:	e8 f4 e4 01 00       	call   c0028657 <__extendsfdf2>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a16a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a16e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a176:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17e:	e8 dd da 01 00       	call   c0027c60 <__muldf3>
c000a183:	83 c4 10             	add    esp,0x10
c000a186:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a18a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a18e:	52                   	push   edx
c000a18f:	50                   	push   eax
c000a190:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a194:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a198:	e8 46 d4 01 00       	call   c00275e3 <__adddf3>
c000a19d:	83 c4 10             	add    esp,0x10
c000a1a0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1a4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1a8:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1ac:	0f 89 30 fe ff ff    	jns    c0009fe2 <calc_output_quad+0x8c>
c000a1b2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1b6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1ba:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1be:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1c2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1ca:	29 c8                	sub    eax,ecx
c000a1cc:	99                   	cdq    
c000a1cd:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1d1:	31 d2                	xor    edx,edx
c000a1d3:	0f af d8             	imul   ebx,eax
c000a1d6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1da:	40                   	inc    eax
c000a1db:	01 cb                	add    ebx,ecx
c000a1dd:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1e2:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1e6:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1ee:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1f1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1f9:	31 c0                	xor    eax,eax
c000a1fb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1ff:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a203:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a207:	89 d8                	mov    eax,ebx
c000a209:	83 ee 10             	sub    esi,0x10
c000a20c:	e8 d7 f6 ff ff       	call   c00098e8 <fp_to_double>
c000a211:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a215:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a219:	89 d8                	mov    eax,ebx
c000a21b:	e8 be f6 ff ff       	call   c00098de <fp_to_int>
c000a220:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a224:	52                   	push   edx
c000a225:	52                   	push   edx
c000a226:	57                   	push   edi
c000a227:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a22b:	e8 48 cd 01 00       	call   c0026f78 <__subsf3>
c000a230:	89 04 24             	mov    DWORD PTR [esp],eax
c000a233:	e8 1f e4 01 00       	call   c0028657 <__extendsfdf2>
c000a238:	83 c4 10             	add    esp,0x10
c000a23b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a23f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a243:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a24b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a24f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a253:	e8 08 da 01 00       	call   c0027c60 <__muldf3>
c000a258:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a25b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a25f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a263:	e8 ef e3 01 00       	call   c0028657 <__extendsfdf2>
c000a268:	83 c4 10             	add    esp,0x10
c000a26b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a26f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a273:	52                   	push   edx
c000a274:	50                   	push   eax
c000a275:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a279:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a27d:	e8 61 d3 01 00       	call   c00275e3 <__adddf3>
c000a282:	59                   	pop    ecx
c000a283:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a287:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a28b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a291:	e8 c1 e3 01 00       	call   c0028657 <__extendsfdf2>
c000a296:	83 c4 10             	add    esp,0x10
c000a299:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ad:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b1:	e8 aa d9 01 00       	call   c0027c60 <__muldf3>
c000a2b6:	83 c4 10             	add    esp,0x10
c000a2b9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2bd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c1:	52                   	push   edx
c000a2c2:	50                   	push   eax
c000a2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2cb:	e8 13 d3 01 00       	call   c00275e3 <__adddf3>
c000a2d0:	5f                   	pop    edi
c000a2d1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2d5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2d9:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2df:	e8 73 e3 01 00       	call   c0028657 <__extendsfdf2>
c000a2e4:	83 c4 10             	add    esp,0x10
c000a2e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2fb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ff:	e8 5c d9 01 00       	call   c0027c60 <__muldf3>
c000a304:	83 c4 10             	add    esp,0x10
c000a307:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a30b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a30f:	52                   	push   edx
c000a310:	50                   	push   eax
c000a311:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a315:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a319:	e8 c5 d2 01 00       	call   c00275e3 <__adddf3>
c000a31e:	59                   	pop    ecx
c000a31f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a323:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a327:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a32d:	e8 25 e3 01 00       	call   c0028657 <__extendsfdf2>
c000a332:	83 c4 10             	add    esp,0x10
c000a335:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a339:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a341:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a345:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a349:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a34d:	e8 0e d9 01 00       	call   c0027c60 <__muldf3>
c000a352:	83 c4 10             	add    esp,0x10
c000a355:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a359:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a35d:	52                   	push   edx
c000a35e:	50                   	push   eax
c000a35f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a363:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a367:	e8 77 d2 01 00       	call   c00275e3 <__adddf3>
c000a36c:	5f                   	pop    edi
c000a36d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a371:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a375:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a37b:	e8 d7 e2 01 00       	call   c0028657 <__extendsfdf2>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a387:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a38f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a393:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a397:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a39b:	e8 c0 d8 01 00       	call   c0027c60 <__muldf3>
c000a3a0:	83 c4 10             	add    esp,0x10
c000a3a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3a7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3ab:	52                   	push   edx
c000a3ac:	50                   	push   eax
c000a3ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b5:	e8 29 d2 01 00       	call   c00275e3 <__adddf3>
c000a3ba:	83 c4 10             	add    esp,0x10
c000a3bd:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3c5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3c9:	85 db                	test   ebx,ebx
c000a3cb:	0f 8f 36 fe ff ff    	jg     c000a207 <calc_output_quad+0x2b1>
c000a3d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e1:	e8 fd d1 01 00       	call   c00275e3 <__adddf3>
c000a3e6:	83 c4 10             	add    esp,0x10
c000a3e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a401:	e8 5a d8 01 00       	call   c0027c60 <__muldf3>
c000a406:	59                   	pop    ecx
c000a407:	5b                   	pop    ebx
c000a408:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a40c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a418:	e8 16 e1 01 00       	call   c0028533 <__truncdfsf2>
c000a41d:	83 c4 10             	add    esp,0x10
c000a420:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a427:	89 06                	mov    DWORD PTR [esi],eax
c000a429:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a42d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a431:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a435:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a439:	e8 a5 d1 01 00       	call   c00275e3 <__adddf3>
c000a43e:	83 c4 10             	add    esp,0x10
c000a441:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a445:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a449:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a44d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a451:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a459:	e8 02 d8 01 00       	call   c0027c60 <__muldf3>
c000a45e:	5e                   	pop    esi
c000a45f:	5f                   	pop    edi
c000a460:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a464:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	e8 be e0 01 00       	call   c0028533 <__truncdfsf2>
c000a475:	83 c4 10             	add    esp,0x10
c000a478:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a47f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a482:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a486:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a48a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a48e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a492:	e8 4c d1 01 00       	call   c00275e3 <__adddf3>
c000a497:	83 c4 10             	add    esp,0x10
c000a49a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a49e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b2:	e8 a9 d7 01 00       	call   c0027c60 <__muldf3>
c000a4b7:	5d                   	pop    ebp
c000a4b8:	59                   	pop    ecx
c000a4b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	e8 65 e0 01 00       	call   c0028533 <__truncdfsf2>
c000a4ce:	83 c4 10             	add    esp,0x10
c000a4d1:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4d8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4eb:	e8 f3 d0 01 00       	call   c00275e3 <__adddf3>
c000a4f0:	83 c4 10             	add    esp,0x10
c000a4f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50b:	e8 50 d7 01 00       	call   c0027c60 <__muldf3>
c000a510:	5b                   	pop    ebx
c000a511:	5e                   	pop    esi
c000a512:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a516:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a51a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a51e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a522:	e8 0c e0 01 00       	call   c0028533 <__truncdfsf2>
c000a527:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a52e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a531:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a537:	5b                   	pop    ebx
c000a538:	5e                   	pop    esi
c000a539:	5f                   	pop    edi
c000a53a:	5d                   	pop    ebp
c000a53b:	c3                   	ret    

c000a53c <calc_output_hex>:
c000a53c:	55                   	push   ebp
c000a53d:	89 cd                	mov    ebp,ecx
c000a53f:	57                   	push   edi
c000a540:	56                   	push   esi
c000a541:	53                   	push   ebx
c000a542:	89 c3                	mov    ebx,eax
c000a544:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a54a:	89 14 24             	mov    DWORD PTR [esp],edx
c000a54d:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a554:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a55b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a55f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a563:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a566:	e8 6f f3 ff ff       	call   c00098da <int_to_fp>
c000a56b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a56e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a572:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a575:	29 c8                	sub    eax,ecx
c000a577:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a57b:	99                   	cdq    
c000a57c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a584:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a587:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a58f:	0f af f8             	imul   edi,eax
c000a592:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a595:	01 cf                	add    edi,ecx
c000a597:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a59b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a59e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5a2:	0f af c2             	imul   eax,edx
c000a5a5:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5a9:	29 c1                	sub    ecx,eax
c000a5ab:	31 d2                	xor    edx,edx
c000a5ad:	31 c0                	xor    eax,eax
c000a5af:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5c2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5c6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5ca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5ce:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5da:	89 f8                	mov    eax,edi
c000a5dc:	e8 07 f3 ff ff       	call   c00098e8 <fp_to_double>
c000a5e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5e9:	89 f8                	mov    eax,edi
c000a5eb:	e8 ee f2 ff ff       	call   c00098de <fp_to_int>
c000a5f0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5f4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5f7:	52                   	push   edx
c000a5f8:	52                   	push   edx
c000a5f9:	51                   	push   ecx
c000a5fa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5fe:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a605:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a609:	e8 6a c9 01 00       	call   c0026f78 <__subsf3>
c000a60e:	89 04 24             	mov    DWORD PTR [esp],eax
c000a611:	e8 41 e0 01 00       	call   c0028657 <__extendsfdf2>
c000a616:	83 c4 10             	add    esp,0x10
c000a619:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a61d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a625:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a629:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a62d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a631:	e8 2a d6 01 00       	call   c0027c60 <__muldf3>
c000a636:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a63a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a63e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a641:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a645:	e8 0d e0 01 00       	call   c0028657 <__extendsfdf2>
c000a64a:	83 c4 10             	add    esp,0x10
c000a64d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a651:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a655:	52                   	push   edx
c000a656:	50                   	push   eax
c000a657:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65f:	e8 7f cf 01 00       	call   c00275e3 <__adddf3>
c000a664:	59                   	pop    ecx
c000a665:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a669:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a66d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a673:	e8 df df 01 00       	call   c0028657 <__extendsfdf2>
c000a678:	83 c4 10             	add    esp,0x10
c000a67b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a67f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a683:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a687:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a68f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a693:	e8 c8 d5 01 00       	call   c0027c60 <__muldf3>
c000a698:	83 c4 10             	add    esp,0x10
c000a69b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a69f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6a3:	52                   	push   edx
c000a6a4:	50                   	push   eax
c000a6a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6ad:	e8 31 cf 01 00       	call   c00275e3 <__adddf3>
c000a6b2:	59                   	pop    ecx
c000a6b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6b7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6bb:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6c1:	e8 91 df 01 00       	call   c0028657 <__extendsfdf2>
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e1:	e8 7a d5 01 00       	call   c0027c60 <__muldf3>
c000a6e6:	83 c4 10             	add    esp,0x10
c000a6e9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6ed:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f1:	52                   	push   edx
c000a6f2:	50                   	push   eax
c000a6f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6fb:	e8 e3 ce 01 00       	call   c00275e3 <__adddf3>
c000a700:	59                   	pop    ecx
c000a701:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a705:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a709:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a70f:	e8 43 df 01 00       	call   c0028657 <__extendsfdf2>
c000a714:	83 c4 10             	add    esp,0x10
c000a717:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a71b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a71f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a727:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72f:	e8 2c d5 01 00       	call   c0027c60 <__muldf3>
c000a734:	83 c4 10             	add    esp,0x10
c000a737:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a73b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a73f:	52                   	push   edx
c000a740:	50                   	push   eax
c000a741:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a745:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a749:	e8 95 ce 01 00       	call   c00275e3 <__adddf3>
c000a74e:	59                   	pop    ecx
c000a74f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a753:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a757:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a75d:	e8 f5 de 01 00       	call   c0028657 <__extendsfdf2>
c000a762:	83 c4 10             	add    esp,0x10
c000a765:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a769:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a76d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a771:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a775:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a779:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a77d:	e8 de d4 01 00       	call   c0027c60 <__muldf3>
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a789:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a78d:	52                   	push   edx
c000a78e:	50                   	push   eax
c000a78f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a793:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a797:	e8 47 ce 01 00       	call   c00275e3 <__adddf3>
c000a79c:	59                   	pop    ecx
c000a79d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7a1:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7a5:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7ab:	e8 a7 de 01 00       	call   c0028657 <__extendsfdf2>
c000a7b0:	83 c4 10             	add    esp,0x10
c000a7b3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7b7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7cb:	e8 90 d4 01 00       	call   c0027c60 <__muldf3>
c000a7d0:	83 c4 10             	add    esp,0x10
c000a7d3:	83 c6 18             	add    esi,0x18
c000a7d6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7da:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7de:	52                   	push   edx
c000a7df:	50                   	push   eax
c000a7e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e8:	e8 f6 cd 01 00       	call   c00275e3 <__adddf3>
c000a7ed:	59                   	pop    ecx
c000a7ee:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7f2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7f6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7fc:	e8 56 de 01 00       	call   c0028657 <__extendsfdf2>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a808:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a80c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a810:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a814:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a818:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a81c:	e8 3f d4 01 00       	call   c0027c60 <__muldf3>
c000a821:	83 c4 10             	add    esp,0x10
c000a824:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a828:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a82c:	52                   	push   edx
c000a82d:	50                   	push   eax
c000a82e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a832:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a836:	e8 a8 cd 01 00       	call   c00275e3 <__adddf3>
c000a83b:	83 c4 10             	add    esp,0x10
c000a83e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a842:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a846:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a849:	0f 89 8b fd ff ff    	jns    c000a5da <calc_output_hex+0x9e>
c000a84f:	31 f6                	xor    esi,esi
c000a851:	31 ff                	xor    edi,edi
c000a853:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a857:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a85a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a85e:	29 e9                	sub    ecx,ebp
c000a860:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a864:	29 c8                	sub    eax,ecx
c000a866:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a869:	99                   	cdq    
c000a86a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a86e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a871:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a875:	0f af e8             	imul   ebp,eax
c000a878:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a87c:	40                   	inc    eax
c000a87d:	01 cd                	add    ebp,ecx
c000a87f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a884:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a888:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a890:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a893:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a897:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a89b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a89f:	89 e8                	mov    eax,ebp
c000a8a1:	e8 42 f0 ff ff       	call   c00098e8 <fp_to_double>
c000a8a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8ae:	89 e8                	mov    eax,ebp
c000a8b0:	e8 29 f0 ff ff       	call   c00098de <fp_to_int>
c000a8b5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8b9:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8bc:	52                   	push   edx
c000a8bd:	52                   	push   edx
c000a8be:	51                   	push   ecx
c000a8bf:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8c6:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8cd:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8d1:	e8 a2 c6 01 00       	call   c0026f78 <__subsf3>
c000a8d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8d9:	e8 79 dd 01 00       	call   c0028657 <__extendsfdf2>
c000a8de:	83 c4 10             	add    esp,0x10
c000a8e1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f9:	e8 62 d3 01 00       	call   c0027c60 <__muldf3>
c000a8fe:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a905:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a909:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a90c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a910:	e8 42 dd 01 00       	call   c0028657 <__extendsfdf2>
c000a915:	83 c4 10             	add    esp,0x10
c000a918:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a91c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a920:	52                   	push   edx
c000a921:	50                   	push   eax
c000a922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92a:	e8 b4 cc 01 00       	call   c00275e3 <__adddf3>
c000a92f:	59                   	pop    ecx
c000a930:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a934:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a938:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a93e:	e8 14 dd 01 00       	call   c0028657 <__extendsfdf2>
c000a943:	83 c4 10             	add    esp,0x10
c000a946:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a94a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a94e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a952:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a956:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95e:	e8 fd d2 01 00       	call   c0027c60 <__muldf3>
c000a963:	83 c4 10             	add    esp,0x10
c000a966:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a96a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a96e:	52                   	push   edx
c000a96f:	50                   	push   eax
c000a970:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a974:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a978:	e8 66 cc 01 00       	call   c00275e3 <__adddf3>
c000a97d:	59                   	pop    ecx
c000a97e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a982:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a986:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a98c:	e8 c6 dc 01 00       	call   c0028657 <__extendsfdf2>
c000a991:	83 c4 10             	add    esp,0x10
c000a994:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a998:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a99c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9a8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9ac:	e8 af d2 01 00       	call   c0027c60 <__muldf3>
c000a9b1:	83 c4 10             	add    esp,0x10
c000a9b4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9b8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9bc:	52                   	push   edx
c000a9bd:	50                   	push   eax
c000a9be:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c2:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c6:	e8 18 cc 01 00       	call   c00275e3 <__adddf3>
c000a9cb:	59                   	pop    ecx
c000a9cc:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9d0:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9d4:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9da:	e8 78 dc 01 00       	call   c0028657 <__extendsfdf2>
c000a9df:	83 c4 10             	add    esp,0x10
c000a9e2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9e6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9f6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9fa:	e8 61 d2 01 00       	call   c0027c60 <__muldf3>
c000a9ff:	83 c4 10             	add    esp,0x10
c000aa02:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa06:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa0a:	52                   	push   edx
c000aa0b:	50                   	push   eax
c000aa0c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa10:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa14:	e8 ca cb 01 00       	call   c00275e3 <__adddf3>
c000aa19:	59                   	pop    ecx
c000aa1a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa1e:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa22:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa28:	e8 2a dc 01 00       	call   c0028657 <__extendsfdf2>
c000aa2d:	83 c4 10             	add    esp,0x10
c000aa30:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa34:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa40:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa44:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa48:	e8 13 d2 01 00       	call   c0027c60 <__muldf3>
c000aa4d:	83 c4 10             	add    esp,0x10
c000aa50:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa54:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa58:	52                   	push   edx
c000aa59:	50                   	push   eax
c000aa5a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa5e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa62:	e8 7c cb 01 00       	call   c00275e3 <__adddf3>
c000aa67:	59                   	pop    ecx
c000aa68:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa6c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa70:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa76:	e8 dc db 01 00       	call   c0028657 <__extendsfdf2>
c000aa7b:	83 c4 10             	add    esp,0x10
c000aa7e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa82:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa92:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa96:	e8 c5 d1 01 00       	call   c0027c60 <__muldf3>
c000aa9b:	83 c4 10             	add    esp,0x10
c000aa9e:	83 eb 18             	sub    ebx,0x18
c000aaa1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaa5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aaa9:	52                   	push   edx
c000aaaa:	50                   	push   eax
c000aaab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aaaf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aab3:	e8 2b cb 01 00       	call   c00275e3 <__adddf3>
c000aab8:	59                   	pop    ecx
c000aab9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aabd:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aac1:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aac7:	e8 8b db 01 00       	call   c0028657 <__extendsfdf2>
c000aacc:	83 c4 10             	add    esp,0x10
c000aacf:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aad3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aad7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae7:	e8 74 d1 01 00       	call   c0027c60 <__muldf3>
c000aaec:	83 c4 10             	add    esp,0x10
c000aaef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaf3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaf7:	52                   	push   edx
c000aaf8:	50                   	push   eax
c000aaf9:	57                   	push   edi
c000aafa:	56                   	push   esi
c000aafb:	e8 e3 ca 01 00       	call   c00275e3 <__adddf3>
c000ab00:	83 c4 10             	add    esp,0x10
c000ab03:	89 c6                	mov    esi,eax
c000ab05:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab08:	89 d7                	mov    edi,edx
c000ab0a:	85 ed                	test   ebp,ebp
c000ab0c:	0f 8f 8d fd ff ff    	jg     c000a89f <calc_output_hex+0x363>
c000ab12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab22:	e8 bc ca 01 00       	call   c00275e3 <__adddf3>
c000ab27:	83 c4 10             	add    esp,0x10
c000ab2a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab41:	e8 1a d1 01 00       	call   c0027c60 <__muldf3>
c000ab46:	59                   	pop    ecx
c000ab47:	5b                   	pop    ebx
c000ab48:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab54:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab58:	e8 d6 d9 01 00       	call   c0028533 <__truncdfsf2>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab67:	89 03                	mov    DWORD PTR [ebx],eax
c000ab69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab6d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab79:	e8 65 ca 01 00       	call   c00275e3 <__adddf3>
c000ab7e:	83 c4 10             	add    esp,0x10
c000ab81:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab98:	e8 c3 d0 01 00       	call   c0027c60 <__muldf3>
c000ab9d:	5d                   	pop    ebp
c000ab9e:	59                   	pop    ecx
c000ab9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aba3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aba7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaf:	e8 7f d9 01 00       	call   c0028533 <__truncdfsf2>
c000abb4:	83 c4 10             	add    esp,0x10
c000abb7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abbe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abc1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abcd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd1:	e8 0d ca 01 00       	call   c00275e3 <__adddf3>
c000abd6:	83 c4 10             	add    esp,0x10
c000abd9:	89 04 24             	mov    DWORD PTR [esp],eax
c000abdc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abe0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf0:	e8 6b d0 01 00       	call   c0027c60 <__muldf3>
c000abf5:	5b                   	pop    ebx
c000abf6:	5d                   	pop    ebp
c000abf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abfb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac07:	e8 27 d9 01 00       	call   c0028533 <__truncdfsf2>
c000ac0c:	83 c4 10             	add    esp,0x10
c000ac0f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac16:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac1d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac25:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac29:	e8 b5 c9 01 00       	call   c00275e3 <__adddf3>
c000ac2e:	83 c4 10             	add    esp,0x10
c000ac31:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac34:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac48:	e8 13 d0 01 00       	call   c0027c60 <__muldf3>
c000ac4d:	59                   	pop    ecx
c000ac4e:	5b                   	pop    ebx
c000ac4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5f:	e8 cf d8 01 00       	call   c0028533 <__truncdfsf2>
c000ac64:	83 c4 10             	add    esp,0x10
c000ac67:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac6e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac81:	e8 5d c9 01 00       	call   c00275e3 <__adddf3>
c000ac86:	83 c4 10             	add    esp,0x10
c000ac89:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca0:	e8 bb cf 01 00       	call   c0027c60 <__muldf3>
c000aca5:	5d                   	pop    ebp
c000aca6:	59                   	pop    ecx
c000aca7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb7:	e8 77 d8 01 00       	call   c0028533 <__truncdfsf2>
c000acbc:	83 c4 10             	add    esp,0x10
c000acbf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acc6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acc9:	57                   	push   edi
c000acca:	56                   	push   esi
c000accb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000accf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acd3:	e8 0b c9 01 00       	call   c00275e3 <__adddf3>
c000acd8:	83 c4 10             	add    esp,0x10
c000acdb:	89 04 24             	mov    DWORD PTR [esp],eax
c000acde:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ace2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ace6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf2:	e8 69 cf 01 00       	call   c0027c60 <__muldf3>
c000acf7:	5b                   	pop    ebx
c000acf8:	5e                   	pop    esi
c000acf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad09:	e8 25 d8 01 00       	call   c0028533 <__truncdfsf2>
c000ad0e:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad15:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad18:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad1e:	5b                   	pop    ebx
c000ad1f:	5e                   	pop    esi
c000ad20:	5f                   	pop    edi
c000ad21:	5d                   	pop    ebp
c000ad22:	c3                   	ret    

c000ad23 <sinc_reset>:
c000ad23:	56                   	push   esi
c000ad24:	53                   	push   ebx
c000ad25:	51                   	push   ecx
c000ad26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad2a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad2d:	85 db                	test   ebx,ebx
c000ad2f:	74 59                	je     c000ad8a <sinc_reset+0x67>
c000ad31:	31 d2                	xor    edx,edx
c000ad33:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad3a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad3d:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad40:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad47:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad4e:	31 c0                	xor    eax,eax
c000ad50:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad56:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad59:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad5c:	52                   	push   edx
c000ad5d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad60:	c1 e0 02             	shl    eax,0x2
c000ad63:	50                   	push   eax
c000ad64:	6a 00                	push   0x0
c000ad66:	56                   	push   esi
c000ad67:	e8 0c 5a ff ff       	call   c0000778 <memset>
c000ad6c:	83 c4 0c             	add    esp,0xc
c000ad6f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad72:	c1 e0 02             	shl    eax,0x2
c000ad75:	50                   	push   eax
c000ad76:	68 aa 00 00 00       	push   0xaa
c000ad7b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad7e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad81:	50                   	push   eax
c000ad82:	e8 f1 59 ff ff       	call   c0000778 <memset>
c000ad87:	83 c4 10             	add    esp,0x10
c000ad8a:	58                   	pop    eax
c000ad8b:	5b                   	pop    ebx
c000ad8c:	5e                   	pop    esi
c000ad8d:	c3                   	ret    

c000ad8e <calc_output_multi>:
c000ad8e:	55                   	push   ebp
c000ad8f:	57                   	push   edi
c000ad90:	56                   	push   esi
c000ad91:	89 c6                	mov    esi,eax
c000ad93:	53                   	push   ebx
c000ad94:	83 ec 4c             	sub    esp,0x4c
c000ad97:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad9b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad9f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ada3:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ada7:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000adaf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000adb3:	8d 46 44             	lea    eax,[esi+0x44]
c000adb6:	89 04 24             	mov    DWORD PTR [esp],eax
c000adb9:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adc3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adc6:	e8 0f eb ff ff       	call   c00098da <int_to_fp>
c000adcb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adce:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000add2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000add6:	99                   	cdq    
c000add7:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000addb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000addf:	0f af d0             	imul   edx,eax
c000ade2:	0f af c3             	imul   eax,ebx
c000ade5:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ade9:	29 c1                	sub    ecx,eax
c000adeb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adef:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adf3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adfa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adfe:	57                   	push   edi
c000adff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae03:	6a 00                	push   0x0
c000ae05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae09:	e8 6a 59 ff ff       	call   c0000778 <memset>
c000ae0e:	83 c4 10             	add    esp,0x10
c000ae11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae15:	89 df                	mov    edi,ebx
c000ae17:	e8 cc ea ff ff       	call   c00098e8 <fp_to_double>
c000ae1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae28:	e8 b1 ea ff ff       	call   c00098de <fp_to_int>
c000ae2d:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae30:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae33:	51                   	push   ecx
c000ae34:	51                   	push   ecx
c000ae35:	55                   	push   ebp
c000ae36:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae3a:	e8 39 c1 01 00       	call   c0026f78 <__subsf3>
c000ae3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae42:	e8 10 d8 01 00       	call   c0028657 <__extendsfdf2>
c000ae47:	83 c4 10             	add    esp,0x10
c000ae4a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae4e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae5e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae62:	e8 f9 cd 01 00       	call   c0027c60 <__muldf3>
c000ae67:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae6e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae72:	e8 e0 d7 01 00       	call   c0028657 <__extendsfdf2>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae82:	52                   	push   edx
c000ae83:	50                   	push   eax
c000ae84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae8c:	e8 52 c7 01 00       	call   c00275e3 <__adddf3>
c000ae91:	83 c4 10             	add    esp,0x10
c000ae94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae98:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae9c:	89 f8                	mov    eax,edi
c000ae9e:	b9 08 00 00 00       	mov    ecx,0x8
c000aea3:	99                   	cdq    
c000aea4:	f7 f9                	idiv   ecx
c000aea6:	4a                   	dec    edx
c000aea7:	83 fa 06             	cmp    edx,0x6
c000aeaa:	77 07                	ja     c000aeb3 <calc_output_multi+0x125>
c000aeac:	ff 24 95 64 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd619c]
c000aeb3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeb6:	4f                   	dec    edi
c000aeb7:	83 ec 0c             	sub    esp,0xc
c000aeba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aebd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aec1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aec8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aecc:	e8 86 d7 01 00       	call   c0028657 <__extendsfdf2>
c000aed1:	83 c4 10             	add    esp,0x10
c000aed4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aed8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aedc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aee8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeec:	e8 6f cd 01 00       	call   c0027c60 <__muldf3>
c000aef1:	83 c4 10             	add    esp,0x10
c000aef4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aef8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aefc:	52                   	push   edx
c000aefd:	50                   	push   eax
c000aefe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af01:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af04:	e8 da c6 01 00       	call   c00275e3 <__adddf3>
c000af09:	83 c4 10             	add    esp,0x10
c000af0c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af0f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af12:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af15:	4f                   	dec    edi
c000af16:	83 ec 0c             	sub    esp,0xc
c000af19:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af20:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af27:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af2b:	e8 27 d7 01 00       	call   c0028657 <__extendsfdf2>
c000af30:	83 c4 10             	add    esp,0x10
c000af33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af4b:	e8 10 cd 01 00       	call   c0027c60 <__muldf3>
c000af50:	83 c4 10             	add    esp,0x10
c000af53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af57:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af5b:	52                   	push   edx
c000af5c:	50                   	push   eax
c000af5d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af60:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af63:	e8 7b c6 01 00       	call   c00275e3 <__adddf3>
c000af68:	83 c4 10             	add    esp,0x10
c000af6b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af6e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af71:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af74:	4f                   	dec    edi
c000af75:	83 ec 0c             	sub    esp,0xc
c000af78:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af7f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af86:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af8a:	e8 c8 d6 01 00       	call   c0028657 <__extendsfdf2>
c000af8f:	83 c4 10             	add    esp,0x10
c000af92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af96:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afa6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afaa:	e8 b1 cc 01 00       	call   c0027c60 <__muldf3>
c000afaf:	83 c4 10             	add    esp,0x10
c000afb2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afb6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afba:	52                   	push   edx
c000afbb:	50                   	push   eax
c000afbc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afbf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afc2:	e8 1c c6 01 00       	call   c00275e3 <__adddf3>
c000afc7:	83 c4 10             	add    esp,0x10
c000afca:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afcd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afd0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afd3:	4f                   	dec    edi
c000afd4:	83 ec 0c             	sub    esp,0xc
c000afd7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afde:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afe5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afe9:	e8 69 d6 01 00       	call   c0028657 <__extendsfdf2>
c000afee:	83 c4 10             	add    esp,0x10
c000aff1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aff5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000affd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b001:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b005:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b009:	e8 52 cc 01 00       	call   c0027c60 <__muldf3>
c000b00e:	83 c4 10             	add    esp,0x10
c000b011:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b015:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b019:	52                   	push   edx
c000b01a:	50                   	push   eax
c000b01b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b01e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b021:	e8 bd c5 01 00       	call   c00275e3 <__adddf3>
c000b026:	83 c4 10             	add    esp,0x10
c000b029:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b02c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b02f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b032:	4f                   	dec    edi
c000b033:	83 ec 0c             	sub    esp,0xc
c000b036:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b039:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b03d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b044:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b048:	e8 0a d6 01 00       	call   c0028657 <__extendsfdf2>
c000b04d:	83 c4 10             	add    esp,0x10
c000b050:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b054:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b058:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b060:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b064:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b068:	e8 f3 cb 01 00       	call   c0027c60 <__muldf3>
c000b06d:	83 c4 10             	add    esp,0x10
c000b070:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b074:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b078:	52                   	push   edx
c000b079:	50                   	push   eax
c000b07a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b07d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b080:	e8 5e c5 01 00       	call   c00275e3 <__adddf3>
c000b085:	83 c4 10             	add    esp,0x10
c000b088:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b08b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b08e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b091:	4f                   	dec    edi
c000b092:	83 ec 0c             	sub    esp,0xc
c000b095:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b098:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b09c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0a3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0a7:	e8 ab d5 01 00       	call   c0028657 <__extendsfdf2>
c000b0ac:	83 c4 10             	add    esp,0x10
c000b0af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0b3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c7:	e8 94 cb 01 00       	call   c0027c60 <__muldf3>
c000b0cc:	83 c4 10             	add    esp,0x10
c000b0cf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0d7:	52                   	push   edx
c000b0d8:	50                   	push   eax
c000b0d9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0dc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0df:	e8 ff c4 01 00       	call   c00275e3 <__adddf3>
c000b0e4:	83 c4 10             	add    esp,0x10
c000b0e7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ea:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0f0:	4f                   	dec    edi
c000b0f1:	83 ec 0c             	sub    esp,0xc
c000b0f4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0fb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b102:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b106:	e8 4c d5 01 00       	call   c0028657 <__extendsfdf2>
c000b10b:	83 c4 10             	add    esp,0x10
c000b10e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b112:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b116:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b122:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b126:	e8 35 cb 01 00       	call   c0027c60 <__muldf3>
c000b12b:	83 c4 10             	add    esp,0x10
c000b12e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b132:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b136:	52                   	push   edx
c000b137:	50                   	push   eax
c000b138:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b13b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b13e:	e8 a0 c4 01 00       	call   c00275e3 <__adddf3>
c000b143:	83 c4 10             	add    esp,0x10
c000b146:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b149:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b14c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b14f:	4f                   	dec    edi
c000b150:	83 ec 0c             	sub    esp,0xc
c000b153:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b156:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b15a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b161:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b165:	e8 ed d4 01 00       	call   c0028657 <__extendsfdf2>
c000b16a:	83 c4 10             	add    esp,0x10
c000b16d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b171:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b175:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b179:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b17d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b181:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b185:	e8 d6 ca 01 00       	call   c0027c60 <__muldf3>
c000b18a:	83 c4 10             	add    esp,0x10
c000b18d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b191:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b195:	52                   	push   edx
c000b196:	50                   	push   eax
c000b197:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b19a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b19d:	e8 41 c4 01 00       	call   c00275e3 <__adddf3>
c000b1a2:	83 c4 10             	add    esp,0x10
c000b1a5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1a8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1ab:	85 ff                	test   edi,edi
c000b1ad:	0f 8f e9 fc ff ff    	jg     c000ae9c <calc_output_multi+0x10e>
c000b1b3:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1b7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1bb:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1bf:	0f 89 4c fc ff ff    	jns    c000ae11 <calc_output_multi+0x83>
c000b1c5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1cd:	29 c8                	sub    eax,ecx
c000b1cf:	99                   	cdq    
c000b1d0:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1d8:	0f af d0             	imul   edx,eax
c000b1db:	40                   	inc    eax
c000b1dc:	01 d1                	add    ecx,edx
c000b1de:	0f af c3             	imul   eax,ebx
c000b1e1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1e5:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1ec:	55                   	push   ebp
c000b1ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f1:	6a 00                	push   0x0
c000b1f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1f7:	e8 7c 55 ff ff       	call   c0000778 <memset>
c000b1fc:	83 c4 10             	add    esp,0x10
c000b1ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b203:	e8 e0 e6 ff ff       	call   c00098e8 <fp_to_double>
c000b208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b20c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b210:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b214:	e8 c5 e6 ff ff       	call   c00098de <fp_to_int>
c000b219:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b21c:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b21f:	57                   	push   edi
c000b220:	57                   	push   edi
c000b221:	89 df                	mov    edi,ebx
c000b223:	55                   	push   ebp
c000b224:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b228:	e8 4b bd 01 00       	call   c0026f78 <__subsf3>
c000b22d:	89 04 24             	mov    DWORD PTR [esp],eax
c000b230:	e8 22 d4 01 00       	call   c0028657 <__extendsfdf2>
c000b235:	83 c4 10             	add    esp,0x10
c000b238:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b23c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b240:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b248:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b24c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b250:	e8 0b ca 01 00       	call   c0027c60 <__muldf3>
c000b255:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b258:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b25c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b260:	e8 f2 d3 01 00       	call   c0028657 <__extendsfdf2>
c000b265:	83 c4 10             	add    esp,0x10
c000b268:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b26c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b270:	52                   	push   edx
c000b271:	50                   	push   eax
c000b272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27a:	e8 64 c3 01 00       	call   c00275e3 <__adddf3>
c000b27f:	83 c4 10             	add    esp,0x10
c000b282:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b286:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b28a:	89 f8                	mov    eax,edi
c000b28c:	b9 08 00 00 00       	mov    ecx,0x8
c000b291:	99                   	cdq    
c000b292:	f7 f9                	idiv   ecx
c000b294:	4a                   	dec    edx
c000b295:	83 fa 06             	cmp    edx,0x6
c000b298:	77 07                	ja     c000b2a1 <calc_output_multi+0x513>
c000b29a:	ff 24 95 80 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6180]
c000b2a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2a5:	4f                   	dec    edi
c000b2a6:	83 ec 0c             	sub    esp,0xc
c000b2a9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2b0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2b7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2bb:	e8 97 d3 01 00       	call   c0028657 <__extendsfdf2>
c000b2c0:	83 c4 10             	add    esp,0x10
c000b2c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2db:	e8 80 c9 01 00       	call   c0027c60 <__muldf3>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2eb:	52                   	push   edx
c000b2ec:	50                   	push   eax
c000b2ed:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2f0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2f3:	e8 eb c2 01 00       	call   c00275e3 <__adddf3>
c000b2f8:	83 c4 10             	add    esp,0x10
c000b2fb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2fe:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b301:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b305:	4f                   	dec    edi
c000b306:	83 ec 0c             	sub    esp,0xc
c000b309:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b30c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b310:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b317:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b31b:	e8 37 d3 01 00       	call   c0028657 <__extendsfdf2>
c000b320:	83 c4 10             	add    esp,0x10
c000b323:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b327:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b32f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b333:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b337:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33b:	e8 20 c9 01 00       	call   c0027c60 <__muldf3>
c000b340:	83 c4 10             	add    esp,0x10
c000b343:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b347:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b34b:	52                   	push   edx
c000b34c:	50                   	push   eax
c000b34d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b350:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b353:	e8 8b c2 01 00       	call   c00275e3 <__adddf3>
c000b358:	83 c4 10             	add    esp,0x10
c000b35b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b35e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b361:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b365:	4f                   	dec    edi
c000b366:	83 ec 0c             	sub    esp,0xc
c000b369:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b36c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b370:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b377:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b37b:	e8 d7 d2 01 00       	call   c0028657 <__extendsfdf2>
c000b380:	83 c4 10             	add    esp,0x10
c000b383:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b387:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b38b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b38f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b393:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b397:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39b:	e8 c0 c8 01 00       	call   c0027c60 <__muldf3>
c000b3a0:	83 c4 10             	add    esp,0x10
c000b3a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3ab:	52                   	push   edx
c000b3ac:	50                   	push   eax
c000b3ad:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3b0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3b3:	e8 2b c2 01 00       	call   c00275e3 <__adddf3>
c000b3b8:	83 c4 10             	add    esp,0x10
c000b3bb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3be:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3c5:	4f                   	dec    edi
c000b3c6:	83 ec 0c             	sub    esp,0xc
c000b3c9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3d0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3d7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3db:	e8 77 d2 01 00       	call   c0028657 <__extendsfdf2>
c000b3e0:	83 c4 10             	add    esp,0x10
c000b3e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3fb:	e8 60 c8 01 00       	call   c0027c60 <__muldf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b407:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b40b:	52                   	push   edx
c000b40c:	50                   	push   eax
c000b40d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b410:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b413:	e8 cb c1 01 00       	call   c00275e3 <__adddf3>
c000b418:	83 c4 10             	add    esp,0x10
c000b41b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b41e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b421:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b425:	4f                   	dec    edi
c000b426:	83 ec 0c             	sub    esp,0xc
c000b429:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b42c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b430:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b437:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b43b:	e8 17 d2 01 00       	call   c0028657 <__extendsfdf2>
c000b440:	83 c4 10             	add    esp,0x10
c000b443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b447:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b44b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b44f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b453:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b457:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b45b:	e8 00 c8 01 00       	call   c0027c60 <__muldf3>
c000b460:	83 c4 10             	add    esp,0x10
c000b463:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b467:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46b:	52                   	push   edx
c000b46c:	50                   	push   eax
c000b46d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b470:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b473:	e8 6b c1 01 00       	call   c00275e3 <__adddf3>
c000b478:	83 c4 10             	add    esp,0x10
c000b47b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b47e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b481:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b485:	4f                   	dec    edi
c000b486:	83 ec 0c             	sub    esp,0xc
c000b489:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b48c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b490:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b497:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b49b:	e8 b7 d1 01 00       	call   c0028657 <__extendsfdf2>
c000b4a0:	83 c4 10             	add    esp,0x10
c000b4a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4bb:	e8 a0 c7 01 00       	call   c0027c60 <__muldf3>
c000b4c0:	83 c4 10             	add    esp,0x10
c000b4c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4cb:	52                   	push   edx
c000b4cc:	50                   	push   eax
c000b4cd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4d0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4d3:	e8 0b c1 01 00       	call   c00275e3 <__adddf3>
c000b4d8:	83 c4 10             	add    esp,0x10
c000b4db:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4de:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4e5:	4f                   	dec    edi
c000b4e6:	83 ec 0c             	sub    esp,0xc
c000b4e9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4f0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4f7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4fb:	e8 57 d1 01 00       	call   c0028657 <__extendsfdf2>
c000b500:	83 c4 10             	add    esp,0x10
c000b503:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b507:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b50b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b513:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b517:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b51b:	e8 40 c7 01 00       	call   c0027c60 <__muldf3>
c000b520:	83 c4 10             	add    esp,0x10
c000b523:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b527:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b52b:	52                   	push   edx
c000b52c:	50                   	push   eax
c000b52d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b530:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b533:	e8 ab c0 01 00       	call   c00275e3 <__adddf3>
c000b538:	83 c4 10             	add    esp,0x10
c000b53b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b53e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b545:	4f                   	dec    edi
c000b546:	83 ec 0c             	sub    esp,0xc
c000b549:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b54c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b550:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b557:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b55b:	e8 f7 d0 01 00       	call   c0028657 <__extendsfdf2>
c000b560:	83 c4 10             	add    esp,0x10
c000b563:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b567:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b573:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b577:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b57b:	e8 e0 c6 01 00       	call   c0027c60 <__muldf3>
c000b580:	83 c4 10             	add    esp,0x10
c000b583:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b587:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b58b:	52                   	push   edx
c000b58c:	50                   	push   eax
c000b58d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b590:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b593:	e8 4b c0 01 00       	call   c00275e3 <__adddf3>
c000b598:	83 c4 10             	add    esp,0x10
c000b59b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b59e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5a1:	85 ff                	test   edi,edi
c000b5a3:	0f 8f e1 fc ff ff    	jg     c000b28a <calc_output_multi+0x4fc>
c000b5a9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5ad:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5b1:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5b5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5ba:	0f 8f 3f fc ff ff    	jg     c000b1ff <calc_output_multi+0x471>
c000b5c0:	be 08 00 00 00       	mov    esi,0x8
c000b5c5:	89 d8                	mov    eax,ebx
c000b5c7:	99                   	cdq    
c000b5c8:	f7 fe                	idiv   esi
c000b5ca:	4a                   	dec    edx
c000b5cb:	83 fa 06             	cmp    edx,0x6
c000b5ce:	77 07                	ja     c000b5d7 <calc_output_multi+0x849>
c000b5d0:	ff 24 95 9c 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6164]
c000b5d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5db:	4b                   	dec    ebx
c000b5dc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5e7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5eb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5ee:	e8 f0 bf 01 00       	call   c00275e3 <__adddf3>
c000b5f3:	83 c4 10             	add    esp,0x10
c000b5f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60e:	e8 4d c6 01 00       	call   c0027c60 <__muldf3>
c000b613:	5d                   	pop    ebp
c000b614:	59                   	pop    ecx
c000b615:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b619:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b625:	e8 09 cf 01 00       	call   c0028533 <__truncdfsf2>
c000b62a:	83 c4 10             	add    esp,0x10
c000b62d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b631:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b638:	4b                   	dec    ebx
c000b639:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b63d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b644:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b648:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b64b:	e8 93 bf 01 00       	call   c00275e3 <__adddf3>
c000b650:	83 c4 10             	add    esp,0x10
c000b653:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b657:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b663:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b667:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66b:	e8 f0 c5 01 00       	call   c0027c60 <__muldf3>
c000b670:	59                   	pop    ecx
c000b671:	5f                   	pop    edi
c000b672:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b676:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b682:	e8 ac ce 01 00       	call   c0028533 <__truncdfsf2>
c000b687:	83 c4 10             	add    esp,0x10
c000b68a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b68e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b691:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b695:	4b                   	dec    ebx
c000b696:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b69a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b69d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6a1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a8:	e8 36 bf 01 00       	call   c00275e3 <__adddf3>
c000b6ad:	83 c4 10             	add    esp,0x10
c000b6b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c8:	e8 93 c5 01 00       	call   c0027c60 <__muldf3>
c000b6cd:	5f                   	pop    edi
c000b6ce:	5d                   	pop    ebp
c000b6cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6df:	e8 4f ce 01 00       	call   c0028533 <__truncdfsf2>
c000b6e4:	83 c4 10             	add    esp,0x10
c000b6e7:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6eb:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6f2:	4b                   	dec    ebx
c000b6f3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6f7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6fe:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b702:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b705:	e8 d9 be 01 00       	call   c00275e3 <__adddf3>
c000b70a:	83 c4 10             	add    esp,0x10
c000b70d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b711:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b715:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b719:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b71d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b721:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b725:	e8 36 c5 01 00       	call   c0027c60 <__muldf3>
c000b72a:	5d                   	pop    ebp
c000b72b:	59                   	pop    ecx
c000b72c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b730:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b734:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b73c:	e8 f2 cd 01 00       	call   c0028533 <__truncdfsf2>
c000b741:	83 c4 10             	add    esp,0x10
c000b744:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b748:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b74b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b74f:	4b                   	dec    ebx
c000b750:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b754:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b757:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b75b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b75f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b762:	e8 7c be 01 00       	call   c00275e3 <__adddf3>
c000b767:	83 c4 10             	add    esp,0x10
c000b76a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b76e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b782:	e8 d9 c4 01 00       	call   c0027c60 <__muldf3>
c000b787:	59                   	pop    ecx
c000b788:	5f                   	pop    edi
c000b789:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b78d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b791:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b799:	e8 95 cd 01 00       	call   c0028533 <__truncdfsf2>
c000b79e:	83 c4 10             	add    esp,0x10
c000b7a1:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7a5:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7ac:	4b                   	dec    ebx
c000b7ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7b8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7bc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7bf:	e8 1f be 01 00       	call   c00275e3 <__adddf3>
c000b7c4:	83 c4 10             	add    esp,0x10
c000b7c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7df:	e8 7c c4 01 00       	call   c0027c60 <__muldf3>
c000b7e4:	5f                   	pop    edi
c000b7e5:	5d                   	pop    ebp
c000b7e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f6:	e8 38 cd 01 00       	call   c0028533 <__truncdfsf2>
c000b7fb:	83 c4 10             	add    esp,0x10
c000b7fe:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b802:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b805:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b809:	4b                   	dec    ebx
c000b80a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b80e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b815:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b819:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b81c:	e8 c2 bd 01 00       	call   c00275e3 <__adddf3>
c000b821:	83 c4 10             	add    esp,0x10
c000b824:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b828:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b82c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b834:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b838:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b83c:	e8 1f c4 01 00       	call   c0027c60 <__muldf3>
c000b841:	5d                   	pop    ebp
c000b842:	59                   	pop    ecx
c000b843:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b847:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b84b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b84f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b853:	e8 db cc 01 00       	call   c0028533 <__truncdfsf2>
c000b858:	83 c4 10             	add    esp,0x10
c000b85b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b85f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b866:	4b                   	dec    ebx
c000b867:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b86b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b86e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b872:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b876:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b879:	e8 65 bd 01 00       	call   c00275e3 <__adddf3>
c000b87e:	83 c4 10             	add    esp,0x10
c000b881:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b885:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b88d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b891:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b895:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b899:	e8 c2 c3 01 00       	call   c0027c60 <__muldf3>
c000b89e:	59                   	pop    ecx
c000b89f:	5f                   	pop    edi
c000b8a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b0:	e8 7e cc 01 00       	call   c0028533 <__truncdfsf2>
c000b8b5:	83 c4 10             	add    esp,0x10
c000b8b8:	85 db                	test   ebx,ebx
c000b8ba:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8be:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8c1:	0f 8f fe fc ff ff    	jg     c000b5c5 <calc_output_multi+0x837>
c000b8c7:	83 c4 4c             	add    esp,0x4c
c000b8ca:	5b                   	pop    ebx
c000b8cb:	5e                   	pop    esi
c000b8cc:	5f                   	pop    edi
c000b8cd:	5d                   	pop    ebp
c000b8ce:	c3                   	ret    

c000b8cf <double_to_fp>:
c000b8cf:	83 ec 0c             	sub    esp,0xc
c000b8d2:	68 00 00 b0 40       	push   0x40b00000
c000b8d7:	6a 00                	push   0x0
c000b8d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e1:	e8 7a c3 01 00       	call   c0027c60 <__muldf3>
c000b8e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8ee:	83 c4 1c             	add    esp,0x1c
c000b8f1:	e9 ea cd 01 00       	jmp    c00286e0 <lrint>

c000b8f6 <prepare_data>:
c000b8f6:	55                   	push   ebp
c000b8f7:	57                   	push   edi
c000b8f8:	56                   	push   esi
c000b8f9:	53                   	push   ebx
c000b8fa:	83 ec 1c             	sub    esp,0x1c
c000b8fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b901:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b905:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b909:	0f 89 57 01 00 00    	jns    c000ba66 <prepare_data+0x170>
c000b90f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b912:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b915:	85 d2                	test   edx,edx
c000b917:	75 0d                	jne    c000b926 <prepare_data+0x30>
c000b919:	8d 14 36             	lea    edx,[esi+esi*1]
c000b91c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b91f:	29 d0                	sub    eax,edx
c000b921:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b924:	eb 44                	jmp    c000b96a <prepare_data+0x74>
c000b926:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b929:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b92c:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b92f:	39 c1                	cmp    ecx,eax
c000b931:	7d 04                	jge    c000b937 <prepare_data+0x41>
c000b933:	29 d0                	sub    eax,edx
c000b935:	eb 2d                	jmp    c000b964 <prepare_data+0x6e>
c000b937:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b93d:	29 d7                	sub    edi,edx
c000b93f:	01 f7                	add    edi,esi
c000b941:	51                   	push   ecx
c000b942:	29 f2                	sub    edx,esi
c000b944:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b94b:	8d 14 90             	lea    edx,[eax+edx*4]
c000b94e:	51                   	push   ecx
c000b94f:	52                   	push   edx
c000b950:	50                   	push   eax
c000b951:	e8 26 4d ff ff       	call   c000067c <memmove>
c000b956:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b959:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b95c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b95f:	29 f0                	sub    eax,esi
c000b961:	83 c4 10             	add    esp,0x10
c000b964:	29 f0                	sub    eax,esi
c000b966:	79 02                	jns    c000b96a <prepare_data+0x74>
c000b968:	31 c0                	xor    eax,eax
c000b96a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b96d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b970:	29 ef                	sub    edi,ebp
c000b972:	39 c7                	cmp    edi,eax
c000b974:	7e 02                	jle    c000b978 <prepare_data+0x82>
c000b976:	89 c7                	mov    edi,eax
c000b978:	89 f8                	mov    eax,edi
c000b97a:	99                   	cdq    
c000b97b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b97e:	b8 15 00 00 00       	mov    eax,0x15
c000b983:	29 d7                	sub    edi,edx
c000b985:	0f 88 dd 00 00 00    	js     c000ba68 <prepare_data+0x172>
c000b98b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b98e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b991:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b994:	0f 8f ce 00 00 00    	jg     c000ba68 <prepare_data+0x172>
c000b99a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9a0:	50                   	push   eax
c000b9a1:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9a8:	50                   	push   eax
c000b9a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9af:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9b2:	50                   	push   eax
c000b9b3:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9ba:	50                   	push   eax
c000b9bb:	e8 84 4d ff ff       	call   c0000744 <memcpy>
c000b9c0:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9c3:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9c6:	01 fd                	add    ebp,edi
c000b9c8:	01 f9                	add    ecx,edi
c000b9ca:	83 c4 10             	add    esp,0x10
c000b9cd:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9d0:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9d3:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9da:	0f 85 86 00 00 00    	jne    c000ba66 <prepare_data+0x170>
c000b9e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9e3:	89 e8                	mov    eax,ebp
c000b9e5:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9e8:	29 c8                	sub    eax,ecx
c000b9ea:	39 f8                	cmp    eax,edi
c000b9ec:	7d 78                	jge    c000ba66 <prepare_data+0x170>
c000b9ee:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9f2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9f6:	74 6e                	je     c000ba66 <prepare_data+0x170>
c000b9f8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9ff:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba02:	29 ef                	sub    edi,ebp
c000ba04:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba08:	7c 29                	jl     c000ba33 <prepare_data+0x13d>
c000ba0a:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0d:	29 f1                	sub    ecx,esi
c000ba0f:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba16:	55                   	push   ebp
c000ba17:	50                   	push   eax
c000ba18:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba1b:	50                   	push   eax
c000ba1c:	52                   	push   edx
c000ba1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba21:	e8 56 4c ff ff       	call   c000067c <memmove>
c000ba26:	83 c4 10             	add    esp,0x10
c000ba29:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba2c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba33:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba36:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba39:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba3c:	83 c6 05             	add    esi,0x5
c000ba3f:	78 07                	js     c000ba48 <prepare_data+0x152>
c000ba41:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba44:	39 cf                	cmp    edi,ecx
c000ba46:	7e 04                	jle    c000ba4c <prepare_data+0x156>
c000ba48:	89 ce                	mov    esi,ecx
c000ba4a:	29 c6                	sub    esi,eax
c000ba4c:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba4f:	51                   	push   ecx
c000ba50:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba57:	51                   	push   ecx
c000ba58:	6a 00                	push   0x0
c000ba5a:	50                   	push   eax
c000ba5b:	e8 18 4d ff ff       	call   c0000778 <memset>
c000ba60:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba63:	83 c4 10             	add    esp,0x10
c000ba66:	31 c0                	xor    eax,eax
c000ba68:	83 c4 1c             	add    esp,0x1c
c000ba6b:	5b                   	pop    ebx
c000ba6c:	5e                   	pop    esi
c000ba6d:	5f                   	pop    edi
c000ba6e:	5d                   	pop    ebp
c000ba6f:	c3                   	ret    

c000ba70 <sinc_multichan_vari_process>:
c000ba70:	55                   	push   ebp
c000ba71:	ba 05 00 00 00       	mov    edx,0x5
c000ba76:	57                   	push   edi
c000ba77:	56                   	push   esi
c000ba78:	53                   	push   ebx
c000ba79:	83 ec 4c             	sub    esp,0x4c
c000ba7c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba80:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba84:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba87:	85 db                	test   ebx,ebx
c000ba89:	0f 84 9b 06 00 00    	je     c000c12a <sinc_multichan_vari_process+0x6ba>
c000ba8f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba92:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba95:	0f af c5             	imul   eax,ebp
c000ba98:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba9b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba9e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000baa5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000baac:	0f af c5             	imul   eax,ebp
c000baaf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bab2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bab5:	8b 06                	mov    eax,DWORD PTR [esi]
c000bab7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000babb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000babf:	68 00 00 70 3f       	push   0x3f700000
c000bac4:	6a 00                	push   0x0
c000bac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bace:	e8 5c ca 01 00       	call   c002852f <__ltdf2>
c000bad3:	83 c4 10             	add    esp,0x10
c000bad6:	ba 16 00 00 00       	mov    edx,0x16
c000badb:	85 c0                	test   eax,eax
c000badd:	0f 88 47 06 00 00    	js     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bae3:	68 00 00 70 40       	push   0x40700000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf2:	e8 1a ca 01 00       	call   c0028511 <__gtdf2>
c000baf7:	83 c4 10             	add    esp,0x10
c000bafa:	ba 16 00 00 00       	mov    edx,0x16
c000baff:	85 c0                	test   eax,eax
c000bb01:	0f 8f 23 06 00 00    	jg     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bb07:	83 ec 0c             	sub    esp,0xc
c000bb0a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb0d:	e8 b1 c7 01 00       	call   c00282c3 <__floatsidf>
c000bb12:	83 c4 10             	add    esp,0x10
c000bb15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb1d:	68 00 00 00 40       	push   0x40000000
c000bb22:	6a 00                	push   0x0
c000bb24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb2c:	e8 b2 ba 01 00       	call   c00275e3 <__adddf3>
c000bb31:	59                   	pop    ecx
c000bb32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb36:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb3a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb3d:	e8 81 c7 01 00       	call   c00282c3 <__floatsidf>
c000bb42:	83 c4 10             	add    esp,0x10
c000bb45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb49:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb4d:	52                   	push   edx
c000bb4e:	50                   	push   eax
c000bb4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb57:	e8 e8 c3 01 00       	call   c0027f44 <__divdf3>
c000bb5c:	83 c4 10             	add    esp,0x10
c000bb5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb63:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb67:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb6a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb71:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb85:	e8 87 c9 01 00       	call   c0028511 <__gtdf2>
c000bb8a:	83 c4 10             	add    esp,0x10
c000bb8d:	85 c0                	test   eax,eax
c000bb8f:	7e 2d                	jle    c000bbbe <sinc_multichan_vari_process+0x14e>
c000bb91:	68 00 00 f0 3f       	push   0x3ff00000
c000bb96:	6a 00                	push   0x0
c000bb98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba0:	e8 8a c9 01 00       	call   c002852f <__ltdf2>
c000bba5:	83 c4 10             	add    esp,0x10
c000bba8:	85 c0                	test   eax,eax
c000bbaa:	79 4d                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbbc:	eb 1b                	jmp    c000bbd9 <sinc_multichan_vari_process+0x169>
c000bbbe:	68 00 00 f0 3f       	push   0x3ff00000
c000bbc3:	6a 00                	push   0x0
c000bbc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbcd:	e8 5d c9 01 00       	call   c002852f <__ltdf2>
c000bbd2:	83 c4 10             	add    esp,0x10
c000bbd5:	85 c0                	test   eax,eax
c000bbd7:	79 20                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbdd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe9:	e8 56 c3 01 00       	call   c0027f44 <__divdf3>
c000bbee:	83 c4 10             	add    esp,0x10
c000bbf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbf5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbf9:	50                   	push   eax
c000bbfa:	50                   	push   eax
c000bbfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc03:	e8 d8 ca 01 00       	call   c00286e0 <lrint>
c000bc08:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc0b:	40                   	inc    eax
c000bc0c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc10:	0f af c5             	imul   eax,ebp
c000bc13:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc17:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc1a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1e:	58                   	pop    eax
c000bc1f:	5a                   	pop    edx
c000bc20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc24:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc28:	e8 b3 ca 01 00       	call   c00286e0 <lrint>
c000bc2d:	83 ec 0c             	sub    esp,0xc
c000bc30:	50                   	push   eax
c000bc31:	e8 8d c6 01 00       	call   c00282c3 <__floatsidf>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc3d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc41:	52                   	push   edx
c000bc42:	50                   	push   eax
c000bc43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc4b:	e8 e4 bf 01 00       	call   c0027c34 <__subdf3>
c000bc50:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc58:	83 c4 20             	add    esp,0x20
c000bc5b:	6a 00                	push   0x0
c000bc5d:	6a 00                	push   0x0
c000bc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc67:	e8 c3 c8 01 00       	call   c002852f <__ltdf2>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	85 c0                	test   eax,eax
c000bc71:	79 1f                	jns    c000bc92 <sinc_multichan_vari_process+0x222>
c000bc73:	68 00 00 f0 3f       	push   0x3ff00000
c000bc78:	6a 00                	push   0x0
c000bc7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc82:	e8 5c b9 01 00       	call   c00275e3 <__adddf3>
c000bc87:	83 c4 10             	add    esp,0x10
c000bc8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc92:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc95:	83 ec 10             	sub    esp,0x10
c000bc98:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc9c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcaf:	e8 80 bf 01 00       	call   c0027c34 <__subdf3>
c000bcb4:	83 c4 18             	add    esp,0x18
c000bcb7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcbf:	52                   	push   edx
c000bcc0:	50                   	push   eax
c000bcc1:	e8 1a ca 01 00       	call   c00286e0 <lrint>
c000bcc6:	0f af e8             	imul   ebp,eax
c000bcc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bccd:	01 e8                	add    eax,ebp
c000bccf:	99                   	cdq    
c000bcd0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcd3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcd6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcde:	68 00 00 f0 3f       	push   0x3ff00000
c000bce3:	6a 00                	push   0x0
c000bce5:	e8 5a c2 01 00       	call   c0027f44 <__divdf3>
c000bcea:	83 c4 10             	add    esp,0x10
c000bced:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcf1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcfa:	68 23 42 92 0c       	push   0xc924223
c000bcff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd07:	e8 d7 b8 01 00       	call   c00275e3 <__adddf3>
c000bd0c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd14:	83 c4 20             	add    esp,0x20
c000bd17:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd1f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd27:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd2a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd2d:	7d 50                	jge    c000bd7f <sinc_multichan_vari_process+0x30f>
c000bd2f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd32:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd35:	01 c8                	add    eax,ecx
c000bd37:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3a:	99                   	cdq    
c000bd3b:	f7 f9                	idiv   ecx
c000bd3d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd41:	7d 0c                	jge    c000bd4f <sinc_multichan_vari_process+0x2df>
c000bd43:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd46:	85 ed                	test   ebp,ebp
c000bd48:	79 6b                	jns    c000bdb5 <sinc_multichan_vari_process+0x345>
c000bd4a:	e9 e6 00 00 00       	jmp    c000be35 <sinc_multichan_vari_process+0x3c5>
c000bd4f:	50                   	push   eax
c000bd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd54:	57                   	push   edi
c000bd55:	53                   	push   ebx
c000bd56:	e8 9b fb ff ff       	call   c000b8f6 <prepare_data>
c000bd5b:	83 c4 10             	add    esp,0x10
c000bd5e:	89 c2                	mov    edx,eax
c000bd60:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd63:	85 c0                	test   eax,eax
c000bd65:	0f 85 bf 03 00 00    	jne    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bd6b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd6e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd71:	01 c8                	add    eax,ecx
c000bd73:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd76:	99                   	cdq    
c000bd77:	f7 f9                	idiv   ecx
c000bd79:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd7d:	7c c4                	jl     c000bd43 <sinc_multichan_vari_process+0x2d3>
c000bd7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd87:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd8a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd95:	89 06                	mov    DWORD PTR [esi],eax
c000bd97:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd9d:	99                   	cdq    
c000bd9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bda1:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bda4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bda7:	99                   	cdq    
c000bda8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdab:	31 d2                	xor    edx,edx
c000bdad:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdb0:	e9 75 03 00 00       	jmp    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bdb5:	83 ec 0c             	sub    esp,0xc
c000bdb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bdbb:	e8 03 c5 01 00       	call   c00282c3 <__floatsidf>
c000bdc0:	83 c4 10             	add    esp,0x10
c000bdc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddb:	e8 03 b8 01 00       	call   c00275e3 <__adddf3>
c000bde0:	83 c4 10             	add    esp,0x10
c000bde3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bde7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdfb:	e8 e3 b7 01 00       	call   c00275e3 <__adddf3>
c000be00:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be03:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be07:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be0b:	e8 b3 c4 01 00       	call   c00282c3 <__floatsidf>
c000be10:	83 c4 10             	add    esp,0x10
c000be13:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be1b:	52                   	push   edx
c000be1c:	50                   	push   eax
c000be1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be25:	e8 03 c7 01 00       	call   c002852d <__gedf2>
c000be2a:	83 c4 10             	add    esp,0x10
c000be2d:	85 c0                	test   eax,eax
c000be2f:	0f 89 4a ff ff ff    	jns    c000bd7f <sinc_multichan_vari_process+0x30f>
c000be35:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be39:	0f 8e ed 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be3f:	83 ec 10             	sub    esp,0x10
c000be42:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be45:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be48:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be4b:	ff 36                	push   DWORD PTR [esi]
c000be4d:	e8 e2 bd 01 00       	call   c0027c34 <__subdf3>
c000be52:	83 c4 18             	add    esp,0x18
c000be55:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be59:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be5d:	52                   	push   edx
c000be5e:	50                   	push   eax
c000be5f:	e8 5c c8 01 00       	call   c00286c0 <fabs>
c000be64:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be68:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be6c:	83 c4 10             	add    esp,0x10
c000be6f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be74:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be81:	e8 8b c6 01 00       	call   c0028511 <__gtdf2>
c000be86:	83 c4 10             	add    esp,0x10
c000be89:	85 c0                	test   eax,eax
c000be8b:	0f 8e 9b 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be91:	8b 06                	mov    eax,DWORD PTR [esi]
c000be93:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be9a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be9e:	52                   	push   edx
c000be9f:	50                   	push   eax
c000bea0:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bea3:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bea6:	e8 89 bd 01 00       	call   c0027c34 <__subdf3>
c000beab:	59                   	pop    ecx
c000beac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beb0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000beb4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000beb7:	e8 07 c4 01 00       	call   c00282c3 <__floatsidf>
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bec3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bec7:	52                   	push   edx
c000bec8:	50                   	push   eax
c000bec9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000becd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed1:	e8 8a bd 01 00       	call   c0027c60 <__muldf3>
c000bed6:	5d                   	pop    ebp
c000bed7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bedb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bedf:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bee2:	e8 dc c3 01 00       	call   c00282c3 <__floatsidf>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef2:	52                   	push   edx
c000bef3:	50                   	push   eax
c000bef4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befc:	e8 43 c0 01 00       	call   c0027f44 <__divdf3>
c000bf01:	83 c4 10             	add    esp,0x10
c000bf04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf1c:	e8 c2 b6 01 00       	call   c00275e3 <__adddf3>
c000bf21:	83 c4 10             	add    esp,0x10
c000bf24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf2c:	83 ec 0c             	sub    esp,0xc
c000bf2f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf32:	e8 8c c3 01 00       	call   c00282c3 <__floatsidf>
c000bf37:	83 c4 10             	add    esp,0x10
c000bf3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf52:	e8 d8 c5 01 00       	call   c002852f <__ltdf2>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	85 c0                	test   eax,eax
c000bf5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf60:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf64:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf68:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf6c:	78 10                	js     c000bf7e <sinc_multichan_vari_process+0x50e>
c000bf6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf7a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8e:	e8 cd bc 01 00       	call   c0027c60 <__muldf3>
c000bf93:	59                   	pop    ecx
c000bf94:	5d                   	pop    ebp
c000bf95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa5:	e8 25 f9 ff ff       	call   c000b8cf <double_to_fp>
c000bfaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfae:	89 c5                	mov    ebp,eax
c000bfb0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfbc:	e8 9f bc 01 00       	call   c0027c60 <__muldf3>
c000bfc1:	83 c4 18             	add    esp,0x18
c000bfc4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfc8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfcc:	52                   	push   edx
c000bfcd:	50                   	push   eax
c000bfce:	e8 fc f8 ff ff       	call   c000b8cf <double_to_fp>
c000bfd3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfd6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfda:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfdd:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfe0:	50                   	push   eax
c000bfe1:	50                   	push   eax
c000bfe2:	50                   	push   eax
c000bfe3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfe6:	e8 d8 c2 01 00       	call   c00282c3 <__floatsidf>
c000bfeb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfef:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bff3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bff7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c003:	e8 3c bf 01 00       	call   c0027f44 <__divdf3>
c000c008:	83 c4 1c             	add    esp,0x1c
c000c00b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c00f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c013:	52                   	push   edx
c000c014:	89 ea                	mov    edx,ebp
c000c016:	50                   	push   eax
c000c017:	89 d8                	mov    eax,ebx
c000c019:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c01c:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c020:	e8 69 ed ff ff       	call   c000ad8e <calc_output_multi>
c000c025:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c028:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c02b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c02f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c033:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c037:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c03b:	e8 04 bf 01 00       	call   c0027f44 <__divdf3>
c000c040:	83 c4 10             	add    esp,0x10
c000c043:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c047:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c04b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c04f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c053:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c057:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c05b:	e8 83 b5 01 00       	call   c00275e3 <__adddf3>
c000c060:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c064:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c068:	83 c4 28             	add    esp,0x28
c000c06b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c06f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c073:	e8 68 c6 01 00       	call   c00286e0 <lrint>
c000c078:	83 ec 0c             	sub    esp,0xc
c000c07b:	50                   	push   eax
c000c07c:	e8 42 c2 01 00       	call   c00282c3 <__floatsidf>
c000c081:	83 c4 10             	add    esp,0x10
c000c084:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c088:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c08c:	52                   	push   edx
c000c08d:	50                   	push   eax
c000c08e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c092:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c096:	e8 99 bb 01 00       	call   c0027c34 <__subdf3>
c000c09b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c09f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0a3:	83 c4 20             	add    esp,0x20
c000c0a6:	6a 00                	push   0x0
c000c0a8:	6a 00                	push   0x0
c000c0aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b2:	e8 78 c4 01 00       	call   c002852f <__ltdf2>
c000c0b7:	83 c4 10             	add    esp,0x10
c000c0ba:	85 c0                	test   eax,eax
c000c0bc:	79 20                	jns    c000c0de <sinc_multichan_vari_process+0x66e>
c000c0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ce:	e8 10 b5 01 00       	call   c00275e3 <__adddf3>
c000c0d3:	83 c4 10             	add    esp,0x10
c000c0d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0e1:	83 ec 10             	sub    esp,0x10
c000c0e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0e8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0fb:	e8 34 bb 01 00       	call   c0027c34 <__subdf3>
c000c100:	83 c4 18             	add    esp,0x18
c000c103:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c107:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c10b:	52                   	push   edx
c000c10c:	50                   	push   eax
c000c10d:	e8 ce c5 01 00       	call   c00286e0 <lrint>
c000c112:	0f af e8             	imul   ebp,eax
c000c115:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c119:	83 c4 10             	add    esp,0x10
c000c11c:	01 e8                	add    eax,ebp
c000c11e:	99                   	cdq    
c000c11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c125:	e9 fd fb ff ff       	jmp    c000bd27 <sinc_multichan_vari_process+0x2b7>
c000c12a:	83 c4 4c             	add    esp,0x4c
c000c12d:	89 d0                	mov    eax,edx
c000c12f:	5b                   	pop    ebx
c000c130:	5e                   	pop    esi
c000c131:	5f                   	pop    edi
c000c132:	5d                   	pop    ebp
c000c133:	c3                   	ret    

c000c134 <sinc_hex_vari_process>:
c000c134:	55                   	push   ebp
c000c135:	ba 05 00 00 00       	mov    edx,0x5
c000c13a:	57                   	push   edi
c000c13b:	56                   	push   esi
c000c13c:	53                   	push   ebx
c000c13d:	83 ec 4c             	sub    esp,0x4c
c000c140:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c144:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c148:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c14b:	85 db                	test   ebx,ebx
c000c14d:	0f 84 9c 06 00 00    	je     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c153:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c156:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c159:	0f af c7             	imul   eax,edi
c000c15c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c15f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c162:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c169:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c170:	0f af c7             	imul   eax,edi
c000c173:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c176:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c179:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c17c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c180:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c184:	68 00 00 70 3f       	push   0x3f700000
c000c189:	6a 00                	push   0x0
c000c18b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c18f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c193:	e8 97 c3 01 00       	call   c002852f <__ltdf2>
c000c198:	83 c4 10             	add    esp,0x10
c000c19b:	ba 16 00 00 00       	mov    edx,0x16
c000c1a0:	85 c0                	test   eax,eax
c000c1a2:	0f 88 47 06 00 00    	js     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1a8:	68 00 00 70 40       	push   0x40700000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b7:	e8 55 c3 01 00       	call   c0028511 <__gtdf2>
c000c1bc:	83 c4 10             	add    esp,0x10
c000c1bf:	ba 16 00 00 00       	mov    edx,0x16
c000c1c4:	85 c0                	test   eax,eax
c000c1c6:	0f 8f 23 06 00 00    	jg     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1cc:	83 ec 0c             	sub    esp,0xc
c000c1cf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1d2:	e8 ec c0 01 00       	call   c00282c3 <__floatsidf>
c000c1d7:	83 c4 10             	add    esp,0x10
c000c1da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1e2:	68 00 00 00 40       	push   0x40000000
c000c1e7:	6a 00                	push   0x0
c000c1e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f1:	e8 ed b3 01 00       	call   c00275e3 <__adddf3>
c000c1f6:	59                   	pop    ecx
c000c1f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1fb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1ff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c202:	e8 bc c0 01 00       	call   c00282c3 <__floatsidf>
c000c207:	83 c4 10             	add    esp,0x10
c000c20a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c20e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c212:	52                   	push   edx
c000c213:	50                   	push   eax
c000c214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c21c:	e8 23 bd 01 00       	call   c0027f44 <__divdf3>
c000c221:	83 c4 10             	add    esp,0x10
c000c224:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c228:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c22c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c22f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c232:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c236:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c23a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c23e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24a:	e8 c2 c2 01 00       	call   c0028511 <__gtdf2>
c000c24f:	83 c4 10             	add    esp,0x10
c000c252:	85 c0                	test   eax,eax
c000c254:	7e 2d                	jle    c000c283 <sinc_hex_vari_process+0x14f>
c000c256:	68 00 00 f0 3f       	push   0x3ff00000
c000c25b:	6a 00                	push   0x0
c000c25d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c265:	e8 c5 c2 01 00       	call   c002852f <__ltdf2>
c000c26a:	83 c4 10             	add    esp,0x10
c000c26d:	85 c0                	test   eax,eax
c000c26f:	79 4d                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c275:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c279:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c27d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c281:	eb 1b                	jmp    c000c29e <sinc_hex_vari_process+0x16a>
c000c283:	68 00 00 f0 3f       	push   0x3ff00000
c000c288:	6a 00                	push   0x0
c000c28a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c28e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c292:	e8 98 c2 01 00       	call   c002852f <__ltdf2>
c000c297:	83 c4 10             	add    esp,0x10
c000c29a:	85 c0                	test   eax,eax
c000c29c:	79 20                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c29e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ae:	e8 91 bc 01 00       	call   c0027f44 <__divdf3>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2be:	50                   	push   eax
c000c2bf:	50                   	push   eax
c000c2c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c8:	e8 13 c4 01 00       	call   c00286e0 <lrint>
c000c2cd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2d0:	40                   	inc    eax
c000c2d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d5:	0f af c7             	imul   eax,edi
c000c2d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2e3:	58                   	pop    eax
c000c2e4:	5a                   	pop    edx
c000c2e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ed:	e8 ee c3 01 00       	call   c00286e0 <lrint>
c000c2f2:	83 ec 0c             	sub    esp,0xc
c000c2f5:	50                   	push   eax
c000c2f6:	e8 c8 bf 01 00       	call   c00282c3 <__floatsidf>
c000c2fb:	83 c4 10             	add    esp,0x10
c000c2fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c302:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c306:	52                   	push   edx
c000c307:	50                   	push   eax
c000c308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c30c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c310:	e8 1f b9 01 00       	call   c0027c34 <__subdf3>
c000c315:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c319:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c31d:	83 c4 20             	add    esp,0x20
c000c320:	6a 00                	push   0x0
c000c322:	6a 00                	push   0x0
c000c324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c32c:	e8 fe c1 01 00       	call   c002852f <__ltdf2>
c000c331:	83 c4 10             	add    esp,0x10
c000c334:	85 c0                	test   eax,eax
c000c336:	79 1f                	jns    c000c357 <sinc_hex_vari_process+0x223>
c000c338:	68 00 00 f0 3f       	push   0x3ff00000
c000c33d:	6a 00                	push   0x0
c000c33f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c343:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c347:	e8 97 b2 01 00       	call   c00275e3 <__adddf3>
c000c34c:	83 c4 10             	add    esp,0x10
c000c34f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c357:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c35a:	83 ec 10             	sub    esp,0x10
c000c35d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c361:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c36c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c370:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c374:	e8 bb b8 01 00       	call   c0027c34 <__subdf3>
c000c379:	83 c4 18             	add    esp,0x18
c000c37c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c380:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c384:	52                   	push   edx
c000c385:	50                   	push   eax
c000c386:	e8 55 c3 01 00       	call   c00286e0 <lrint>
c000c38b:	0f af f8             	imul   edi,eax
c000c38e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c392:	01 f8                	add    eax,edi
c000c394:	99                   	cdq    
c000c395:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c398:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c39b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c39f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3a3:	68 00 00 f0 3f       	push   0x3ff00000
c000c3a8:	6a 00                	push   0x0
c000c3aa:	e8 95 bb 01 00       	call   c0027f44 <__divdf3>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3bf:	68 23 42 92 0c       	push   0xc924223
c000c3c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3cc:	e8 12 b2 01 00       	call   c00275e3 <__adddf3>
c000c3d1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3d5:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3d9:	83 c4 20             	add    esp,0x20
c000c3dc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3e4:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3ef:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3f2:	7d 50                	jge    c000c444 <sinc_hex_vari_process+0x310>
c000c3f4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fa:	01 c8                	add    eax,ecx
c000c3fc:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3ff:	99                   	cdq    
c000c400:	f7 f9                	idiv   ecx
c000c402:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c406:	7d 0c                	jge    c000c414 <sinc_hex_vari_process+0x2e0>
c000c408:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c40b:	85 ff                	test   edi,edi
c000c40d:	79 6c                	jns    c000c47b <sinc_hex_vari_process+0x347>
c000c40f:	e9 e7 00 00 00       	jmp    c000c4fb <sinc_hex_vari_process+0x3c7>
c000c414:	50                   	push   eax
c000c415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c419:	56                   	push   esi
c000c41a:	53                   	push   ebx
c000c41b:	e8 d6 f4 ff ff       	call   c000b8f6 <prepare_data>
c000c420:	83 c4 10             	add    esp,0x10
c000c423:	89 c2                	mov    edx,eax
c000c425:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c428:	85 c0                	test   eax,eax
c000c42a:	0f 85 bf 03 00 00    	jne    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c430:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c433:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c436:	01 c8                	add    eax,ecx
c000c438:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c43b:	99                   	cdq    
c000c43c:	f7 f9                	idiv   ecx
c000c43e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c442:	7c c4                	jl     c000c408 <sinc_hex_vari_process+0x2d4>
c000c444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c44c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c44f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c456:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c45a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c45d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c460:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c463:	99                   	cdq    
c000c464:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c467:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c46a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c46d:	99                   	cdq    
c000c46e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c471:	31 d2                	xor    edx,edx
c000c473:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c476:	e9 74 03 00 00       	jmp    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c47b:	83 ec 0c             	sub    esp,0xc
c000c47e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c481:	e8 3d be 01 00       	call   c00282c3 <__floatsidf>
c000c486:	83 c4 10             	add    esp,0x10
c000c489:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c48d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c491:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c495:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c499:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c49d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a1:	e8 3d b1 01 00       	call   c00275e3 <__adddf3>
c000c4a6:	83 c4 10             	add    esp,0x10
c000c4a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c1:	e8 1d b1 01 00       	call   c00275e3 <__adddf3>
c000c4c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4cd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4d1:	e8 ed bd 01 00       	call   c00282c3 <__floatsidf>
c000c4d6:	83 c4 10             	add    esp,0x10
c000c4d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4e1:	52                   	push   edx
c000c4e2:	50                   	push   eax
c000c4e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4eb:	e8 3d c0 01 00       	call   c002852d <__gedf2>
c000c4f0:	83 c4 10             	add    esp,0x10
c000c4f3:	85 c0                	test   eax,eax
c000c4f5:	0f 89 49 ff ff ff    	jns    c000c444 <sinc_hex_vari_process+0x310>
c000c4fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4ff:	0f 8e ef 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c505:	83 ec 10             	sub    esp,0x10
c000c508:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c50b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c50e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c511:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c514:	e8 1b b7 01 00       	call   c0027c34 <__subdf3>
c000c519:	83 c4 18             	add    esp,0x18
c000c51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c520:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c524:	52                   	push   edx
c000c525:	50                   	push   eax
c000c526:	e8 95 c1 01 00       	call   c00286c0 <fabs>
c000c52b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c52f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c533:	83 c4 10             	add    esp,0x10
c000c536:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c53b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c540:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c548:	e8 c4 bf 01 00       	call   c0028511 <__gtdf2>
c000c54d:	83 c4 10             	add    esp,0x10
c000c550:	85 c0                	test   eax,eax
c000c552:	0f 8e 9c 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c558:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c55b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c55e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c562:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c566:	52                   	push   edx
c000c567:	50                   	push   eax
c000c568:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c56b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c56e:	e8 c1 b6 01 00       	call   c0027c34 <__subdf3>
c000c573:	59                   	pop    ecx
c000c574:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c578:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c57c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c57f:	e8 3f bd 01 00       	call   c00282c3 <__floatsidf>
c000c584:	83 c4 10             	add    esp,0x10
c000c587:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c58b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c58f:	52                   	push   edx
c000c590:	50                   	push   eax
c000c591:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c595:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c599:	e8 c2 b6 01 00       	call   c0027c60 <__muldf3>
c000c59e:	5f                   	pop    edi
c000c59f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5a3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5a7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5aa:	e8 14 bd 01 00       	call   c00282c3 <__floatsidf>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5ba:	52                   	push   edx
c000c5bb:	50                   	push   eax
c000c5bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c4:	e8 7b b9 01 00       	call   c0027f44 <__divdf3>
c000c5c9:	83 c4 10             	add    esp,0x10
c000c5cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5d0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e4:	e8 fa af 01 00       	call   c00275e3 <__adddf3>
c000c5e9:	83 c4 10             	add    esp,0x10
c000c5ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f4:	83 ec 0c             	sub    esp,0xc
c000c5f7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5fa:	e8 c4 bc 01 00       	call   c00282c3 <__floatsidf>
c000c5ff:	83 c4 10             	add    esp,0x10
c000c602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c60e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	e8 10 bf 01 00       	call   c002852f <__ltdf2>
c000c61f:	83 c4 10             	add    esp,0x10
c000c622:	85 c0                	test   eax,eax
c000c624:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c628:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c62c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c630:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c634:	78 10                	js     c000c646 <sinc_hex_vari_process+0x512>
c000c636:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c63a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c63e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c642:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c652:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c656:	e8 05 b6 01 00       	call   c0027c60 <__muldf3>
c000c65b:	59                   	pop    ecx
c000c65c:	5f                   	pop    edi
c000c65d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c661:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c665:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c669:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c66d:	e8 5d f2 ff ff       	call   c000b8cf <double_to_fp>
c000c672:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c676:	89 c7                	mov    edi,eax
c000c678:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c680:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c684:	e8 d7 b5 01 00       	call   c0027c60 <__muldf3>
c000c689:	83 c4 18             	add    esp,0x18
c000c68c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c690:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c694:	52                   	push   edx
c000c695:	50                   	push   eax
c000c696:	e8 34 f2 ff ff       	call   c000b8cf <double_to_fp>
c000c69b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c69e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6a2:	83 c4 0c             	add    esp,0xc
c000c6a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6a8:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6ab:	50                   	push   eax
c000c6ac:	50                   	push   eax
c000c6ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b0:	e8 0e bc 01 00       	call   c00282c3 <__floatsidf>
c000c6b5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6b9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cd:	e8 72 b8 01 00       	call   c0027f44 <__divdf3>
c000c6d2:	83 c4 18             	add    esp,0x18
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	52                   	push   edx
c000c6de:	89 fa                	mov    edx,edi
c000c6e0:	50                   	push   eax
c000c6e1:	89 d8                	mov    eax,ebx
c000c6e3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6e7:	e8 50 de ff ff       	call   c000a53c <calc_output_hex>
c000c6ec:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c700:	e8 3f b8 01 00       	call   c0027f44 <__divdf3>
c000c705:	83 c4 10             	add    esp,0x10
c000c708:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c70c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c718:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c720:	e8 be ae 01 00       	call   c00275e3 <__adddf3>
c000c725:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c729:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c72d:	83 c4 18             	add    esp,0x18
c000c730:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c734:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c738:	e8 a3 bf 01 00       	call   c00286e0 <lrint>
c000c73d:	83 ec 0c             	sub    esp,0xc
c000c740:	50                   	push   eax
c000c741:	e8 7d bb 01 00       	call   c00282c3 <__floatsidf>
c000c746:	83 c4 10             	add    esp,0x10
c000c749:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c74d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c751:	52                   	push   edx
c000c752:	50                   	push   eax
c000c753:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c757:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c75b:	e8 d4 b4 01 00       	call   c0027c34 <__subdf3>
c000c760:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c764:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c768:	83 c4 20             	add    esp,0x20
c000c76b:	6a 00                	push   0x0
c000c76d:	6a 00                	push   0x0
c000c76f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c773:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c777:	e8 b3 bd 01 00       	call   c002852f <__ltdf2>
c000c77c:	83 c4 10             	add    esp,0x10
c000c77f:	85 c0                	test   eax,eax
c000c781:	79 20                	jns    c000c7a3 <sinc_hex_vari_process+0x66f>
c000c783:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c787:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c78b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c78f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c793:	e8 4b ae 01 00       	call   c00275e3 <__adddf3>
c000c798:	83 c4 10             	add    esp,0x10
c000c79b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c79f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7a3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7a6:	83 ec 10             	sub    esp,0x10
c000c7a9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7ad:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c0:	e8 6f b4 01 00       	call   c0027c34 <__subdf3>
c000c7c5:	83 c4 18             	add    esp,0x18
c000c7c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7d0:	52                   	push   edx
c000c7d1:	50                   	push   eax
c000c7d2:	e8 09 bf 01 00       	call   c00286e0 <lrint>
c000c7d7:	0f af f8             	imul   edi,eax
c000c7da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7de:	83 c4 10             	add    esp,0x10
c000c7e1:	01 f8                	add    eax,edi
c000c7e3:	99                   	cdq    
c000c7e4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7e7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7ea:	e9 fd fb ff ff       	jmp    c000c3ec <sinc_hex_vari_process+0x2b8>
c000c7ef:	83 c4 4c             	add    esp,0x4c
c000c7f2:	89 d0                	mov    eax,edx
c000c7f4:	5b                   	pop    ebx
c000c7f5:	5e                   	pop    esi
c000c7f6:	5f                   	pop    edi
c000c7f7:	5d                   	pop    ebp
c000c7f8:	c3                   	ret    

c000c7f9 <sinc_quad_vari_process>:
c000c7f9:	55                   	push   ebp
c000c7fa:	ba 05 00 00 00       	mov    edx,0x5
c000c7ff:	57                   	push   edi
c000c800:	56                   	push   esi
c000c801:	53                   	push   ebx
c000c802:	83 ec 4c             	sub    esp,0x4c
c000c805:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c809:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c80d:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c810:	85 db                	test   ebx,ebx
c000c812:	0f 84 9c 06 00 00    	je     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c818:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c81b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c81e:	0f af c7             	imul   eax,edi
c000c821:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c824:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c827:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c82e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c835:	0f af c7             	imul   eax,edi
c000c838:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c83b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c83e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c841:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c845:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c849:	68 00 00 70 3f       	push   0x3f700000
c000c84e:	6a 00                	push   0x0
c000c850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c858:	e8 d2 bc 01 00       	call   c002852f <__ltdf2>
c000c85d:	83 c4 10             	add    esp,0x10
c000c860:	ba 16 00 00 00       	mov    edx,0x16
c000c865:	85 c0                	test   eax,eax
c000c867:	0f 88 47 06 00 00    	js     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c86d:	68 00 00 70 40       	push   0x40700000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c87c:	e8 90 bc 01 00       	call   c0028511 <__gtdf2>
c000c881:	83 c4 10             	add    esp,0x10
c000c884:	ba 16 00 00 00       	mov    edx,0x16
c000c889:	85 c0                	test   eax,eax
c000c88b:	0f 8f 23 06 00 00    	jg     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c891:	83 ec 0c             	sub    esp,0xc
c000c894:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c897:	e8 27 ba 01 00       	call   c00282c3 <__floatsidf>
c000c89c:	83 c4 10             	add    esp,0x10
c000c89f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8a7:	68 00 00 00 40       	push   0x40000000
c000c8ac:	6a 00                	push   0x0
c000c8ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b6:	e8 28 ad 01 00       	call   c00275e3 <__adddf3>
c000c8bb:	59                   	pop    ecx
c000c8bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8c0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8c4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8c7:	e8 f7 b9 01 00       	call   c00282c3 <__floatsidf>
c000c8cc:	83 c4 10             	add    esp,0x10
c000c8cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8d7:	52                   	push   edx
c000c8d8:	50                   	push   eax
c000c8d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e1:	e8 5e b6 01 00       	call   c0027f44 <__divdf3>
c000c8e6:	83 c4 10             	add    esp,0x10
c000c8e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8f4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c907:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90f:	e8 fd bb 01 00       	call   c0028511 <__gtdf2>
c000c914:	83 c4 10             	add    esp,0x10
c000c917:	85 c0                	test   eax,eax
c000c919:	7e 2d                	jle    c000c948 <sinc_quad_vari_process+0x14f>
c000c91b:	68 00 00 f0 3f       	push   0x3ff00000
c000c920:	6a 00                	push   0x0
c000c922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92a:	e8 00 bc 01 00       	call   c002852f <__ltdf2>
c000c92f:	83 c4 10             	add    esp,0x10
c000c932:	85 c0                	test   eax,eax
c000c934:	79 4d                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c93a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c93e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c942:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c946:	eb 1b                	jmp    c000c963 <sinc_quad_vari_process+0x16a>
c000c948:	68 00 00 f0 3f       	push   0x3ff00000
c000c94d:	6a 00                	push   0x0
c000c94f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c953:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c957:	e8 d3 bb 01 00       	call   c002852f <__ltdf2>
c000c95c:	83 c4 10             	add    esp,0x10
c000c95f:	85 c0                	test   eax,eax
c000c961:	79 20                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c963:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c967:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c96b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c973:	e8 cc b5 01 00       	call   c0027f44 <__divdf3>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c97f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c983:	50                   	push   eax
c000c984:	50                   	push   eax
c000c985:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c989:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c98d:	e8 4e bd 01 00       	call   c00286e0 <lrint>
c000c992:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c995:	40                   	inc    eax
c000c996:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c99a:	0f af c7             	imul   eax,edi
c000c99d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a8:	58                   	pop    eax
c000c9a9:	5a                   	pop    edx
c000c9aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b2:	e8 29 bd 01 00       	call   c00286e0 <lrint>
c000c9b7:	83 ec 0c             	sub    esp,0xc
c000c9ba:	50                   	push   eax
c000c9bb:	e8 03 b9 01 00       	call   c00282c3 <__floatsidf>
c000c9c0:	83 c4 10             	add    esp,0x10
c000c9c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9cb:	52                   	push   edx
c000c9cc:	50                   	push   eax
c000c9cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d5:	e8 5a b2 01 00       	call   c0027c34 <__subdf3>
c000c9da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9e2:	83 c4 20             	add    esp,0x20
c000c9e5:	6a 00                	push   0x0
c000c9e7:	6a 00                	push   0x0
c000c9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f1:	e8 39 bb 01 00       	call   c002852f <__ltdf2>
c000c9f6:	83 c4 10             	add    esp,0x10
c000c9f9:	85 c0                	test   eax,eax
c000c9fb:	79 1f                	jns    c000ca1c <sinc_quad_vari_process+0x223>
c000c9fd:	68 00 00 f0 3f       	push   0x3ff00000
c000ca02:	6a 00                	push   0x0
c000ca04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca0c:	e8 d2 ab 01 00       	call   c00275e3 <__adddf3>
c000ca11:	83 c4 10             	add    esp,0x10
c000ca14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca1c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca1f:	83 ec 10             	sub    esp,0x10
c000ca22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca26:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca35:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca39:	e8 f6 b1 01 00       	call   c0027c34 <__subdf3>
c000ca3e:	83 c4 18             	add    esp,0x18
c000ca41:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca49:	52                   	push   edx
c000ca4a:	50                   	push   eax
c000ca4b:	e8 90 bc 01 00       	call   c00286e0 <lrint>
c000ca50:	0f af f8             	imul   edi,eax
c000ca53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca57:	01 f8                	add    eax,edi
c000ca59:	99                   	cdq    
c000ca5a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca5d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca68:	68 00 00 f0 3f       	push   0x3ff00000
c000ca6d:	6a 00                	push   0x0
c000ca6f:	e8 d0 b4 01 00       	call   c0027f44 <__divdf3>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca84:	68 23 42 92 0c       	push   0xc924223
c000ca89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca91:	e8 4d ab 01 00       	call   c00275e3 <__adddf3>
c000ca96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca9e:	83 c4 20             	add    esp,0x20
c000caa1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000caa9:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cab1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cab4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cab7:	7d 50                	jge    c000cb09 <sinc_quad_vari_process+0x310>
c000cab9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cabf:	01 c8                	add    eax,ecx
c000cac1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac4:	99                   	cdq    
c000cac5:	f7 f9                	idiv   ecx
c000cac7:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacb:	7d 0c                	jge    c000cad9 <sinc_quad_vari_process+0x2e0>
c000cacd:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cad0:	85 ff                	test   edi,edi
c000cad2:	79 6c                	jns    c000cb40 <sinc_quad_vari_process+0x347>
c000cad4:	e9 e7 00 00 00       	jmp    c000cbc0 <sinc_quad_vari_process+0x3c7>
c000cad9:	50                   	push   eax
c000cada:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cade:	56                   	push   esi
c000cadf:	53                   	push   ebx
c000cae0:	e8 11 ee ff ff       	call   c000b8f6 <prepare_data>
c000cae5:	83 c4 10             	add    esp,0x10
c000cae8:	89 c2                	mov    edx,eax
c000caea:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000caed:	85 c0                	test   eax,eax
c000caef:	0f 85 bf 03 00 00    	jne    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000caf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000caf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cafb:	01 c8                	add    eax,ecx
c000cafd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb00:	99                   	cdq    
c000cb01:	f7 f9                	idiv   ecx
c000cb03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb07:	7c c4                	jl     c000cacd <sinc_quad_vari_process+0x2d4>
c000cb09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb11:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb14:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb1f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb22:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb25:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb28:	99                   	cdq    
c000cb29:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb2c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb2f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb32:	99                   	cdq    
c000cb33:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb36:	31 d2                	xor    edx,edx
c000cb38:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb3b:	e9 74 03 00 00       	jmp    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000cb40:	83 ec 0c             	sub    esp,0xc
c000cb43:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb46:	e8 78 b7 01 00       	call   c00282c3 <__floatsidf>
c000cb4b:	83 c4 10             	add    esp,0x10
c000cb4e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb52:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb66:	e8 78 aa 01 00       	call   c00275e3 <__adddf3>
c000cb6b:	83 c4 10             	add    esp,0x10
c000cb6e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb72:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb86:	e8 58 aa 01 00       	call   c00275e3 <__adddf3>
c000cb8b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb92:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb96:	e8 28 b7 01 00       	call   c00282c3 <__floatsidf>
c000cb9b:	83 c4 10             	add    esp,0x10
c000cb9e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cba2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cba6:	52                   	push   edx
c000cba7:	50                   	push   eax
c000cba8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb0:	e8 78 b9 01 00       	call   c002852d <__gedf2>
c000cbb5:	83 c4 10             	add    esp,0x10
c000cbb8:	85 c0                	test   eax,eax
c000cbba:	0f 89 49 ff ff ff    	jns    c000cb09 <sinc_quad_vari_process+0x310>
c000cbc0:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbc4:	0f 8e ef 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cbca:	83 ec 10             	sub    esp,0x10
c000cbcd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbd0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbd3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbd6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbd9:	e8 56 b0 01 00       	call   c0027c34 <__subdf3>
c000cbde:	83 c4 18             	add    esp,0x18
c000cbe1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbe5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbe9:	52                   	push   edx
c000cbea:	50                   	push   eax
c000cbeb:	e8 d0 ba 01 00       	call   c00286c0 <fabs>
c000cbf0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbf4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbf8:	83 c4 10             	add    esp,0x10
c000cbfb:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc00:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc0d:	e8 ff b8 01 00       	call   c0028511 <__gtdf2>
c000cc12:	83 c4 10             	add    esp,0x10
c000cc15:	85 c0                	test   eax,eax
c000cc17:	0f 8e 9c 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cc1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc20:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc27:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc2b:	52                   	push   edx
c000cc2c:	50                   	push   eax
c000cc2d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc30:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc33:	e8 fc af 01 00       	call   c0027c34 <__subdf3>
c000cc38:	59                   	pop    ecx
c000cc39:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc3d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc41:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc44:	e8 7a b6 01 00       	call   c00282c3 <__floatsidf>
c000cc49:	83 c4 10             	add    esp,0x10
c000cc4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc54:	52                   	push   edx
c000cc55:	50                   	push   eax
c000cc56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5e:	e8 fd af 01 00       	call   c0027c60 <__muldf3>
c000cc63:	5f                   	pop    edi
c000cc64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc6c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc6f:	e8 4f b6 01 00       	call   c00282c3 <__floatsidf>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7f:	52                   	push   edx
c000cc80:	50                   	push   eax
c000cc81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc89:	e8 b6 b2 01 00       	call   c0027f44 <__divdf3>
c000cc8e:	83 c4 10             	add    esp,0x10
c000cc91:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc95:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca9:	e8 35 a9 01 00       	call   c00275e3 <__adddf3>
c000ccae:	83 c4 10             	add    esp,0x10
c000ccb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccb5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccb9:	83 ec 0c             	sub    esp,0xc
c000ccbc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccbf:	e8 ff b5 01 00       	call   c00282c3 <__floatsidf>
c000ccc4:	83 c4 10             	add    esp,0x10
c000ccc7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cccb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cccf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	e8 4b b8 01 00       	call   c002852f <__ltdf2>
c000cce4:	83 c4 10             	add    esp,0x10
c000cce7:	85 c0                	test   eax,eax
c000cce9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cced:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccf1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccf5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccf9:	78 10                	js     c000cd0b <sinc_quad_vari_process+0x512>
c000ccfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd03:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1b:	e8 40 af 01 00       	call   c0027c60 <__muldf3>
c000cd20:	59                   	pop    ecx
c000cd21:	5f                   	pop    edi
c000cd22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd26:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd32:	e8 98 eb ff ff       	call   c000b8cf <double_to_fp>
c000cd37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd3b:	89 c7                	mov    edi,eax
c000cd3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd49:	e8 12 af 01 00       	call   c0027c60 <__muldf3>
c000cd4e:	83 c4 18             	add    esp,0x18
c000cd51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd55:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd59:	52                   	push   edx
c000cd5a:	50                   	push   eax
c000cd5b:	e8 6f eb ff ff       	call   c000b8cf <double_to_fp>
c000cd60:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd63:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd67:	83 c4 0c             	add    esp,0xc
c000cd6a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd6d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd70:	50                   	push   eax
c000cd71:	50                   	push   eax
c000cd72:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd75:	e8 49 b5 01 00       	call   c00282c3 <__floatsidf>
c000cd7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd92:	e8 ad b1 01 00       	call   c0027f44 <__divdf3>
c000cd97:	83 c4 18             	add    esp,0x18
c000cd9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cda2:	52                   	push   edx
c000cda3:	89 fa                	mov    edx,edi
c000cda5:	50                   	push   eax
c000cda6:	89 d8                	mov    eax,ebx
c000cda8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdac:	e8 a5 d1 ff ff       	call   c0009f56 <calc_output_quad>
c000cdb1:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdb9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc5:	e8 7a b1 01 00       	call   c0027f44 <__divdf3>
c000cdca:	83 c4 10             	add    esp,0x10
c000cdcd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdd1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cddd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde5:	e8 f9 a7 01 00       	call   c00275e3 <__adddf3>
c000cdea:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdf2:	83 c4 18             	add    esp,0x18
c000cdf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdfd:	e8 de b8 01 00       	call   c00286e0 <lrint>
c000ce02:	83 ec 0c             	sub    esp,0xc
c000ce05:	50                   	push   eax
c000ce06:	e8 b8 b4 01 00       	call   c00282c3 <__floatsidf>
c000ce0b:	83 c4 10             	add    esp,0x10
c000ce0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce12:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce16:	52                   	push   edx
c000ce17:	50                   	push   eax
c000ce18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce1c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce20:	e8 0f ae 01 00       	call   c0027c34 <__subdf3>
c000ce25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce2d:	83 c4 20             	add    esp,0x20
c000ce30:	6a 00                	push   0x0
c000ce32:	6a 00                	push   0x0
c000ce34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce3c:	e8 ee b6 01 00       	call   c002852f <__ltdf2>
c000ce41:	83 c4 10             	add    esp,0x10
c000ce44:	85 c0                	test   eax,eax
c000ce46:	79 20                	jns    c000ce68 <sinc_quad_vari_process+0x66f>
c000ce48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce58:	e8 86 a7 01 00       	call   c00275e3 <__adddf3>
c000ce5d:	83 c4 10             	add    esp,0x10
c000ce60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce68:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce6b:	83 ec 10             	sub    esp,0x10
c000ce6e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce72:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce85:	e8 aa ad 01 00       	call   c0027c34 <__subdf3>
c000ce8a:	83 c4 18             	add    esp,0x18
c000ce8d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce91:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce95:	52                   	push   edx
c000ce96:	50                   	push   eax
c000ce97:	e8 44 b8 01 00       	call   c00286e0 <lrint>
c000ce9c:	0f af f8             	imul   edi,eax
c000ce9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	01 f8                	add    eax,edi
c000cea8:	99                   	cdq    
c000cea9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ceac:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ceaf:	e9 fd fb ff ff       	jmp    c000cab1 <sinc_quad_vari_process+0x2b8>
c000ceb4:	83 c4 4c             	add    esp,0x4c
c000ceb7:	89 d0                	mov    eax,edx
c000ceb9:	5b                   	pop    ebx
c000ceba:	5e                   	pop    esi
c000cebb:	5f                   	pop    edi
c000cebc:	5d                   	pop    ebp
c000cebd:	c3                   	ret    

c000cebe <sinc_stereo_vari_process>:
c000cebe:	55                   	push   ebp
c000cebf:	ba 05 00 00 00       	mov    edx,0x5
c000cec4:	57                   	push   edi
c000cec5:	56                   	push   esi
c000cec6:	53                   	push   ebx
c000cec7:	83 ec 4c             	sub    esp,0x4c
c000ceca:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cece:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ced2:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ced5:	85 db                	test   ebx,ebx
c000ced7:	0f 84 9c 06 00 00    	je     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cedd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cee0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cee3:	0f af c7             	imul   eax,edi
c000cee6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cee9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cef3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cefa:	0f af c7             	imul   eax,edi
c000cefd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf00:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf06:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf0e:	68 00 00 70 3f       	push   0x3f700000
c000cf13:	6a 00                	push   0x0
c000cf15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf1d:	e8 0d b6 01 00       	call   c002852f <__ltdf2>
c000cf22:	83 c4 10             	add    esp,0x10
c000cf25:	ba 16 00 00 00       	mov    edx,0x16
c000cf2a:	85 c0                	test   eax,eax
c000cf2c:	0f 88 47 06 00 00    	js     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf32:	68 00 00 70 40       	push   0x40700000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf41:	e8 cb b5 01 00       	call   c0028511 <__gtdf2>
c000cf46:	83 c4 10             	add    esp,0x10
c000cf49:	ba 16 00 00 00       	mov    edx,0x16
c000cf4e:	85 c0                	test   eax,eax
c000cf50:	0f 8f 23 06 00 00    	jg     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf56:	83 ec 0c             	sub    esp,0xc
c000cf59:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf5c:	e8 62 b3 01 00       	call   c00282c3 <__floatsidf>
c000cf61:	83 c4 10             	add    esp,0x10
c000cf64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf6c:	68 00 00 00 40       	push   0x40000000
c000cf71:	6a 00                	push   0x0
c000cf73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf7b:	e8 63 a6 01 00       	call   c00275e3 <__adddf3>
c000cf80:	59                   	pop    ecx
c000cf81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf85:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf89:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf8c:	e8 32 b3 01 00       	call   c00282c3 <__floatsidf>
c000cf91:	83 c4 10             	add    esp,0x10
c000cf94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf9c:	52                   	push   edx
c000cf9d:	50                   	push   eax
c000cf9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa6:	e8 99 af 01 00       	call   c0027f44 <__divdf3>
c000cfab:	83 c4 10             	add    esp,0x10
c000cfae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfb6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfb9:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd4:	e8 38 b5 01 00       	call   c0028511 <__gtdf2>
c000cfd9:	83 c4 10             	add    esp,0x10
c000cfdc:	85 c0                	test   eax,eax
c000cfde:	7e 2d                	jle    c000d00d <sinc_stereo_vari_process+0x14f>
c000cfe0:	68 00 00 f0 3f       	push   0x3ff00000
c000cfe5:	6a 00                	push   0x0
c000cfe7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfef:	e8 3b b5 01 00       	call   c002852f <__ltdf2>
c000cff4:	83 c4 10             	add    esp,0x10
c000cff7:	85 c0                	test   eax,eax
c000cff9:	79 4d                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000cffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d003:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d007:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d00b:	eb 1b                	jmp    c000d028 <sinc_stereo_vari_process+0x16a>
c000d00d:	68 00 00 f0 3f       	push   0x3ff00000
c000d012:	6a 00                	push   0x0
c000d014:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d018:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d01c:	e8 0e b5 01 00       	call   c002852f <__ltdf2>
c000d021:	83 c4 10             	add    esp,0x10
c000d024:	85 c0                	test   eax,eax
c000d026:	79 20                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000d028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d02c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d030:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d034:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d038:	e8 07 af 01 00       	call   c0027f44 <__divdf3>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d044:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d048:	50                   	push   eax
c000d049:	50                   	push   eax
c000d04a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d04e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d052:	e8 89 b6 01 00       	call   c00286e0 <lrint>
c000d057:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d05a:	40                   	inc    eax
c000d05b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05f:	0f af c7             	imul   eax,edi
c000d062:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d069:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d06d:	58                   	pop    eax
c000d06e:	5a                   	pop    edx
c000d06f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d073:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d077:	e8 64 b6 01 00       	call   c00286e0 <lrint>
c000d07c:	83 ec 0c             	sub    esp,0xc
c000d07f:	50                   	push   eax
c000d080:	e8 3e b2 01 00       	call   c00282c3 <__floatsidf>
c000d085:	83 c4 10             	add    esp,0x10
c000d088:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d08c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d090:	52                   	push   edx
c000d091:	50                   	push   eax
c000d092:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d096:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d09a:	e8 95 ab 01 00       	call   c0027c34 <__subdf3>
c000d09f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0a7:	83 c4 20             	add    esp,0x20
c000d0aa:	6a 00                	push   0x0
c000d0ac:	6a 00                	push   0x0
c000d0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b6:	e8 74 b4 01 00       	call   c002852f <__ltdf2>
c000d0bb:	83 c4 10             	add    esp,0x10
c000d0be:	85 c0                	test   eax,eax
c000d0c0:	79 1f                	jns    c000d0e1 <sinc_stereo_vari_process+0x223>
c000d0c2:	68 00 00 f0 3f       	push   0x3ff00000
c000d0c7:	6a 00                	push   0x0
c000d0c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d1:	e8 0d a5 01 00       	call   c00275e3 <__adddf3>
c000d0d6:	83 c4 10             	add    esp,0x10
c000d0d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0e1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0e4:	83 ec 10             	sub    esp,0x10
c000d0e7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fe:	e8 31 ab 01 00       	call   c0027c34 <__subdf3>
c000d103:	83 c4 18             	add    esp,0x18
c000d106:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10e:	52                   	push   edx
c000d10f:	50                   	push   eax
c000d110:	e8 cb b5 01 00       	call   c00286e0 <lrint>
c000d115:	0f af f8             	imul   edi,eax
c000d118:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d11c:	01 f8                	add    eax,edi
c000d11e:	99                   	cdq    
c000d11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d125:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d129:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d12d:	68 00 00 f0 3f       	push   0x3ff00000
c000d132:	6a 00                	push   0x0
c000d134:	e8 0b ae 01 00       	call   c0027f44 <__divdf3>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d149:	68 23 42 92 0c       	push   0xc924223
c000d14e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d152:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d156:	e8 88 a4 01 00       	call   c00275e3 <__adddf3>
c000d15b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d15f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d163:	83 c4 20             	add    esp,0x20
c000d166:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d16e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d176:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d179:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d17c:	7d 50                	jge    c000d1ce <sinc_stereo_vari_process+0x310>
c000d17e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d181:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d184:	01 c8                	add    eax,ecx
c000d186:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d189:	99                   	cdq    
c000d18a:	f7 f9                	idiv   ecx
c000d18c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d190:	7d 0c                	jge    c000d19e <sinc_stereo_vari_process+0x2e0>
c000d192:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d195:	85 ff                	test   edi,edi
c000d197:	79 6c                	jns    c000d205 <sinc_stereo_vari_process+0x347>
c000d199:	e9 e7 00 00 00       	jmp    c000d285 <sinc_stereo_vari_process+0x3c7>
c000d19e:	50                   	push   eax
c000d19f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1a3:	56                   	push   esi
c000d1a4:	53                   	push   ebx
c000d1a5:	e8 4c e7 ff ff       	call   c000b8f6 <prepare_data>
c000d1aa:	83 c4 10             	add    esp,0x10
c000d1ad:	89 c2                	mov    edx,eax
c000d1af:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1b2:	85 c0                	test   eax,eax
c000d1b4:	0f 85 bf 03 00 00    	jne    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d1ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1c0:	01 c8                	add    eax,ecx
c000d1c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1c5:	99                   	cdq    
c000d1c6:	f7 f9                	idiv   ecx
c000d1c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1cc:	7c c4                	jl     c000d192 <sinc_stereo_vari_process+0x2d4>
c000d1ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1d6:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1d9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1e4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1e7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1ea:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1ed:	99                   	cdq    
c000d1ee:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1f1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1f4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1f7:	99                   	cdq    
c000d1f8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1fb:	31 d2                	xor    edx,edx
c000d1fd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d200:	e9 74 03 00 00       	jmp    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d205:	83 ec 0c             	sub    esp,0xc
c000d208:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d20b:	e8 b3 b0 01 00       	call   c00282c3 <__floatsidf>
c000d210:	83 c4 10             	add    esp,0x10
c000d213:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d217:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d21b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d21f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d223:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d227:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22b:	e8 b3 a3 01 00       	call   c00275e3 <__adddf3>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d237:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d23b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d243:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24b:	e8 93 a3 01 00       	call   c00275e3 <__adddf3>
c000d250:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d253:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d257:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d25b:	e8 63 b0 01 00       	call   c00282c3 <__floatsidf>
c000d260:	83 c4 10             	add    esp,0x10
c000d263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d267:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d26b:	52                   	push   edx
c000d26c:	50                   	push   eax
c000d26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d271:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d275:	e8 b3 b2 01 00       	call   c002852d <__gedf2>
c000d27a:	83 c4 10             	add    esp,0x10
c000d27d:	85 c0                	test   eax,eax
c000d27f:	0f 89 49 ff ff ff    	jns    c000d1ce <sinc_stereo_vari_process+0x310>
c000d285:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d289:	0f 8e ef 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d28f:	83 ec 10             	sub    esp,0x10
c000d292:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d295:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d298:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d29b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d29e:	e8 91 a9 01 00       	call   c0027c34 <__subdf3>
c000d2a3:	83 c4 18             	add    esp,0x18
c000d2a6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2ae:	52                   	push   edx
c000d2af:	50                   	push   eax
c000d2b0:	e8 0b b4 01 00       	call   c00286c0 <fabs>
c000d2b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2b9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2bd:	83 c4 10             	add    esp,0x10
c000d2c0:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2c5:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2d2:	e8 3a b2 01 00       	call   c0028511 <__gtdf2>
c000d2d7:	83 c4 10             	add    esp,0x10
c000d2da:	85 c0                	test   eax,eax
c000d2dc:	0f 8e 9c 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d2e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2e5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2f0:	52                   	push   edx
c000d2f1:	50                   	push   eax
c000d2f2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2f5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2f8:	e8 37 a9 01 00       	call   c0027c34 <__subdf3>
c000d2fd:	59                   	pop    ecx
c000d2fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d302:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d306:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d309:	e8 b5 af 01 00       	call   c00282c3 <__floatsidf>
c000d30e:	83 c4 10             	add    esp,0x10
c000d311:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d315:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d319:	52                   	push   edx
c000d31a:	50                   	push   eax
c000d31b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d31f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d323:	e8 38 a9 01 00       	call   c0027c60 <__muldf3>
c000d328:	5f                   	pop    edi
c000d329:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d32d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d331:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d334:	e8 8a af 01 00       	call   c00282c3 <__floatsidf>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d340:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d344:	52                   	push   edx
c000d345:	50                   	push   eax
c000d346:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34e:	e8 f1 ab 01 00       	call   c0027f44 <__divdf3>
c000d353:	83 c4 10             	add    esp,0x10
c000d356:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d35a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d35e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d362:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d366:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36e:	e8 70 a2 01 00       	call   c00275e3 <__adddf3>
c000d373:	83 c4 10             	add    esp,0x10
c000d376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d37e:	83 ec 0c             	sub    esp,0xc
c000d381:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d384:	e8 3a af 01 00       	call   c00282c3 <__floatsidf>
c000d389:	83 c4 10             	add    esp,0x10
c000d38c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d390:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a4:	e8 86 b1 01 00       	call   c002852f <__ltdf2>
c000d3a9:	83 c4 10             	add    esp,0x10
c000d3ac:	85 c0                	test   eax,eax
c000d3ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3b6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3ba:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3be:	78 10                	js     c000d3d0 <sinc_stereo_vari_process+0x512>
c000d3c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e0:	e8 7b a8 01 00       	call   c0027c60 <__muldf3>
c000d3e5:	59                   	pop    ecx
c000d3e6:	5f                   	pop    edi
c000d3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f7:	e8 d3 e4 ff ff       	call   c000b8cf <double_to_fp>
c000d3fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d400:	89 c7                	mov    edi,eax
c000d402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40e:	e8 4d a8 01 00       	call   c0027c60 <__muldf3>
c000d413:	83 c4 18             	add    esp,0x18
c000d416:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d41a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d41e:	52                   	push   edx
c000d41f:	50                   	push   eax
c000d420:	e8 aa e4 ff ff       	call   c000b8cf <double_to_fp>
c000d425:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d428:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d42c:	83 c4 0c             	add    esp,0xc
c000d42f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d432:	8d 04 90             	lea    eax,[eax+edx*4]
c000d435:	50                   	push   eax
c000d436:	50                   	push   eax
c000d437:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d43a:	e8 84 ae 01 00       	call   c00282c3 <__floatsidf>
c000d43f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d443:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d447:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d457:	e8 e8 aa 01 00       	call   c0027f44 <__divdf3>
c000d45c:	83 c4 18             	add    esp,0x18
c000d45f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d463:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d467:	52                   	push   edx
c000d468:	89 fa                	mov    edx,edi
c000d46a:	50                   	push   eax
c000d46b:	89 d8                	mov    eax,ebx
c000d46d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d471:	e8 02 c7 ff ff       	call   c0009b78 <calc_output_stereo>
c000d476:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d47a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d47e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d482:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d486:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d48a:	e8 b5 aa 01 00       	call   c0027f44 <__divdf3>
c000d48f:	83 c4 10             	add    esp,0x10
c000d492:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d496:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4aa:	e8 34 a1 01 00       	call   c00275e3 <__adddf3>
c000d4af:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4b7:	83 c4 18             	add    esp,0x18
c000d4ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4c2:	e8 19 b2 01 00       	call   c00286e0 <lrint>
c000d4c7:	83 ec 0c             	sub    esp,0xc
c000d4ca:	50                   	push   eax
c000d4cb:	e8 f3 ad 01 00       	call   c00282c3 <__floatsidf>
c000d4d0:	83 c4 10             	add    esp,0x10
c000d4d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4db:	52                   	push   edx
c000d4dc:	50                   	push   eax
c000d4dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e5:	e8 4a a7 01 00       	call   c0027c34 <__subdf3>
c000d4ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4f2:	83 c4 20             	add    esp,0x20
c000d4f5:	6a 00                	push   0x0
c000d4f7:	6a 00                	push   0x0
c000d4f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d501:	e8 29 b0 01 00       	call   c002852f <__ltdf2>
c000d506:	83 c4 10             	add    esp,0x10
c000d509:	85 c0                	test   eax,eax
c000d50b:	79 20                	jns    c000d52d <sinc_stereo_vari_process+0x66f>
c000d50d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d511:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d515:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d519:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d51d:	e8 c1 a0 01 00       	call   c00275e3 <__adddf3>
c000d522:	83 c4 10             	add    esp,0x10
c000d525:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d529:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d52d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d530:	83 ec 10             	sub    esp,0x10
c000d533:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d537:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d53a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d53e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d542:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d546:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d54a:	e8 e5 a6 01 00       	call   c0027c34 <__subdf3>
c000d54f:	83 c4 18             	add    esp,0x18
c000d552:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d556:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d55a:	52                   	push   edx
c000d55b:	50                   	push   eax
c000d55c:	e8 7f b1 01 00       	call   c00286e0 <lrint>
c000d561:	0f af f8             	imul   edi,eax
c000d564:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d568:	83 c4 10             	add    esp,0x10
c000d56b:	01 f8                	add    eax,edi
c000d56d:	99                   	cdq    
c000d56e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d571:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d574:	e9 fd fb ff ff       	jmp    c000d176 <sinc_stereo_vari_process+0x2b8>
c000d579:	83 c4 4c             	add    esp,0x4c
c000d57c:	89 d0                	mov    eax,edx
c000d57e:	5b                   	pop    ebx
c000d57f:	5e                   	pop    esi
c000d580:	5f                   	pop    edi
c000d581:	5d                   	pop    ebp
c000d582:	c3                   	ret    

c000d583 <sinc_mono_vari_process>:
c000d583:	55                   	push   ebp
c000d584:	ba 05 00 00 00       	mov    edx,0x5
c000d589:	57                   	push   edi
c000d58a:	56                   	push   esi
c000d58b:	53                   	push   ebx
c000d58c:	83 ec 4c             	sub    esp,0x4c
c000d58f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d593:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d597:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d59a:	85 db                	test   ebx,ebx
c000d59c:	0f 84 c1 06 00 00    	je     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5a2:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5a5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5a8:	0f af c7             	imul   eax,edi
c000d5ab:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5ae:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5b1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5b8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5bf:	0f af c7             	imul   eax,edi
c000d5c2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5c5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5c9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5d6:	68 00 00 70 3f       	push   0x3f700000
c000d5db:	6a 00                	push   0x0
c000d5dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e5:	e8 45 af 01 00       	call   c002852f <__ltdf2>
c000d5ea:	83 c4 10             	add    esp,0x10
c000d5ed:	ba 16 00 00 00       	mov    edx,0x16
c000d5f2:	85 c0                	test   eax,eax
c000d5f4:	0f 88 69 06 00 00    	js     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5fa:	68 00 00 70 40       	push   0x40700000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d605:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d609:	e8 03 af 01 00       	call   c0028511 <__gtdf2>
c000d60e:	83 c4 10             	add    esp,0x10
c000d611:	ba 16 00 00 00       	mov    edx,0x16
c000d616:	85 c0                	test   eax,eax
c000d618:	0f 8f 45 06 00 00    	jg     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d61e:	83 ec 0c             	sub    esp,0xc
c000d621:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d624:	e8 9a ac 01 00       	call   c00282c3 <__floatsidf>
c000d629:	83 c4 10             	add    esp,0x10
c000d62c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d630:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d634:	68 00 00 00 40       	push   0x40000000
c000d639:	6a 00                	push   0x0
c000d63b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d63f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d643:	e8 9b 9f 01 00       	call   c00275e3 <__adddf3>
c000d648:	59                   	pop    ecx
c000d649:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d64d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d651:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d654:	e8 6a ac 01 00       	call   c00282c3 <__floatsidf>
c000d659:	83 c4 10             	add    esp,0x10
c000d65c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d660:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d664:	52                   	push   edx
c000d665:	50                   	push   eax
c000d666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66e:	e8 d1 a8 01 00       	call   c0027f44 <__divdf3>
c000d673:	83 c4 10             	add    esp,0x10
c000d676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d67a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d67e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d681:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d684:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d688:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d68c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69c:	e8 70 ae 01 00       	call   c0028511 <__gtdf2>
c000d6a1:	83 c4 10             	add    esp,0x10
c000d6a4:	85 c0                	test   eax,eax
c000d6a6:	7e 2d                	jle    c000d6d5 <sinc_mono_vari_process+0x152>
c000d6a8:	68 00 00 f0 3f       	push   0x3ff00000
c000d6ad:	6a 00                	push   0x0
c000d6af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b7:	e8 73 ae 01 00       	call   c002852f <__ltdf2>
c000d6bc:	83 c4 10             	add    esp,0x10
c000d6bf:	85 c0                	test   eax,eax
c000d6c1:	79 4d                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6d3:	eb 1b                	jmp    c000d6f0 <sinc_mono_vari_process+0x16d>
c000d6d5:	68 00 00 f0 3f       	push   0x3ff00000
c000d6da:	6a 00                	push   0x0
c000d6dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e4:	e8 46 ae 01 00       	call   c002852f <__ltdf2>
c000d6e9:	83 c4 10             	add    esp,0x10
c000d6ec:	85 c0                	test   eax,eax
c000d6ee:	79 20                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d700:	e8 3f a8 01 00       	call   c0027f44 <__divdf3>
c000d705:	83 c4 10             	add    esp,0x10
c000d708:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d70c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d710:	50                   	push   eax
c000d711:	50                   	push   eax
c000d712:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d716:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d71a:	e8 c1 af 01 00       	call   c00286e0 <lrint>
c000d71f:	40                   	inc    eax
c000d720:	0f af c7             	imul   eax,edi
c000d723:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d727:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d72b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d72e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d731:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d735:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d739:	58                   	pop    eax
c000d73a:	5a                   	pop    edx
c000d73b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d73f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d743:	e8 98 af 01 00       	call   c00286e0 <lrint>
c000d748:	83 ec 0c             	sub    esp,0xc
c000d74b:	50                   	push   eax
c000d74c:	e8 72 ab 01 00       	call   c00282c3 <__floatsidf>
c000d751:	83 c4 10             	add    esp,0x10
c000d754:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d758:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d75c:	52                   	push   edx
c000d75d:	50                   	push   eax
c000d75e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d762:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d766:	e8 c9 a4 01 00       	call   c0027c34 <__subdf3>
c000d76b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d76f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d773:	83 c4 20             	add    esp,0x20
c000d776:	6a 00                	push   0x0
c000d778:	6a 00                	push   0x0
c000d77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d782:	e8 a8 ad 01 00       	call   c002852f <__ltdf2>
c000d787:	83 c4 10             	add    esp,0x10
c000d78a:	85 c0                	test   eax,eax
c000d78c:	79 1f                	jns    c000d7ad <sinc_mono_vari_process+0x22a>
c000d78e:	68 00 00 f0 3f       	push   0x3ff00000
c000d793:	6a 00                	push   0x0
c000d795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d79d:	e8 41 9e 01 00       	call   c00275e3 <__adddf3>
c000d7a2:	83 c4 10             	add    esp,0x10
c000d7a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7ad:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7b3:	83 ec 10             	sub    esp,0x10
c000d7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	e8 69 a4 01 00       	call   c0027c34 <__subdf3>
c000d7cb:	83 c4 18             	add    esp,0x18
c000d7ce:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7d2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7d6:	52                   	push   edx
c000d7d7:	50                   	push   eax
c000d7d8:	e8 03 af 01 00       	call   c00286e0 <lrint>
c000d7dd:	0f af f8             	imul   edi,eax
c000d7e0:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7e3:	31 ff                	xor    edi,edi
c000d7e5:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7ea:	99                   	cdq    
c000d7eb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7ee:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f9:	55                   	push   ebp
c000d7fa:	57                   	push   edi
c000d7fb:	e8 44 a7 01 00       	call   c0027f44 <__divdf3>
c000d800:	83 c4 10             	add    esp,0x10
c000d803:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d807:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d80b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d810:	68 23 42 92 0c       	push   0xc924223
c000d815:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d819:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d81d:	e8 c1 9d 01 00       	call   c00275e3 <__adddf3>
c000d822:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d826:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d82a:	83 c4 20             	add    esp,0x20
c000d82d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d831:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d835:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d838:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d83b:	7d 54                	jge    c000d891 <sinc_mono_vari_process+0x30e>
c000d83d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d840:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d843:	01 c8                	add    eax,ecx
c000d845:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d848:	99                   	cdq    
c000d849:	f7 f9                	idiv   ecx
c000d84b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d84f:	7d 0c                	jge    c000d85d <sinc_mono_vari_process+0x2da>
c000d851:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d854:	85 ff                	test   edi,edi
c000d856:	79 73                	jns    c000d8cb <sinc_mono_vari_process+0x348>
c000d858:	e9 ee 00 00 00       	jmp    c000d94b <sinc_mono_vari_process+0x3c8>
c000d85d:	50                   	push   eax
c000d85e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d862:	56                   	push   esi
c000d863:	53                   	push   ebx
c000d864:	e8 8d e0 ff ff       	call   c000b8f6 <prepare_data>
c000d869:	89 c2                	mov    edx,eax
c000d86b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d875:	85 d2                	test   edx,edx
c000d877:	0f 85 e6 03 00 00    	jne    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d87d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d880:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d883:	01 c8                	add    eax,ecx
c000d885:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d888:	99                   	cdq    
c000d889:	f7 f9                	idiv   ecx
c000d88b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d88f:	7c c0                	jl     c000d851 <sinc_mono_vari_process+0x2ce>
c000d891:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d895:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d899:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d89d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8a0:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8ab:	89 01                	mov    DWORD PTR [ecx],eax
c000d8ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8b3:	99                   	cdq    
c000d8b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8bd:	99                   	cdq    
c000d8be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8c1:	31 d2                	xor    edx,edx
c000d8c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8c6:	e9 98 03 00 00       	jmp    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d8cb:	83 ec 0c             	sub    esp,0xc
c000d8ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8d1:	e8 ed a9 01 00       	call   c00282c3 <__floatsidf>
c000d8d6:	83 c4 10             	add    esp,0x10
c000d8d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f1:	e8 ed 9c 01 00       	call   c00275e3 <__adddf3>
c000d8f6:	83 c4 10             	add    esp,0x10
c000d8f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d901:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d905:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d909:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d90d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d911:	e8 cd 9c 01 00       	call   c00275e3 <__adddf3>
c000d916:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d919:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d91d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d921:	e8 9d a9 01 00       	call   c00282c3 <__floatsidf>
c000d926:	83 c4 10             	add    esp,0x10
c000d929:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d92d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d931:	52                   	push   edx
c000d932:	50                   	push   eax
c000d933:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d937:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d93b:	e8 d1 ab 01 00       	call   c0028511 <__gtdf2>
c000d940:	83 c4 10             	add    esp,0x10
c000d943:	85 c0                	test   eax,eax
c000d945:	0f 8f 46 ff ff ff    	jg     c000d891 <sinc_mono_vari_process+0x30e>
c000d94b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d94f:	0f 8e f5 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d955:	83 ec 10             	sub    esp,0x10
c000d958:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d95b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d95e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d962:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d965:	ff 30                	push   DWORD PTR [eax]
c000d967:	e8 c8 a2 01 00       	call   c0027c34 <__subdf3>
c000d96c:	83 c4 18             	add    esp,0x18
c000d96f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d977:	52                   	push   edx
c000d978:	50                   	push   eax
c000d979:	e8 42 ad 01 00       	call   c00286c0 <fabs>
c000d97e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d982:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d986:	83 c4 10             	add    esp,0x10
c000d989:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d98e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99b:	e8 71 ab 01 00       	call   c0028511 <__gtdf2>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	85 c0                	test   eax,eax
c000d9a5:	0f 8e 9f 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d9ab:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9af:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9bc:	52                   	push   edx
c000d9bd:	50                   	push   eax
c000d9be:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9c1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9c4:	e8 6b a2 01 00       	call   c0027c34 <__subdf3>
c000d9c9:	5f                   	pop    edi
c000d9ca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9ce:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9d2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9d5:	e8 e9 a8 01 00       	call   c00282c3 <__floatsidf>
c000d9da:	83 c4 10             	add    esp,0x10
c000d9dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9e5:	52                   	push   edx
c000d9e6:	50                   	push   eax
c000d9e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9ef:	e8 6c a2 01 00       	call   c0027c60 <__muldf3>
c000d9f4:	5d                   	pop    ebp
c000d9f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9fd:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da00:	e8 be a8 01 00       	call   c00282c3 <__floatsidf>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da0c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da10:	52                   	push   edx
c000da11:	50                   	push   eax
c000da12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da16:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1a:	e8 25 a5 01 00       	call   c0027f44 <__divdf3>
c000da1f:	83 c4 10             	add    esp,0x10
c000da22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da26:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3a:	e8 a4 9b 01 00       	call   c00275e3 <__adddf3>
c000da3f:	83 c4 10             	add    esp,0x10
c000da42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da46:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da4a:	83 ec 0c             	sub    esp,0xc
c000da4d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da50:	e8 6e a8 01 00       	call   c00282c3 <__floatsidf>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da5c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da70:	e8 ba aa 01 00       	call   c002852f <__ltdf2>
c000da75:	83 c4 10             	add    esp,0x10
c000da78:	85 c0                	test   eax,eax
c000da7a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da7e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da82:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da86:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da8a:	78 10                	js     c000da9c <sinc_mono_vari_process+0x519>
c000da8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da94:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da98:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daa8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daac:	e8 af a1 01 00       	call   c0027c60 <__muldf3>
c000dab1:	59                   	pop    ecx
c000dab2:	5f                   	pop    edi
c000dab3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dab7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dabb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dabf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dac3:	e8 07 de ff ff       	call   c000b8cf <double_to_fp>
c000dac8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dacc:	89 c7                	mov    edi,eax
c000dace:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dad6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dada:	e8 81 a1 01 00       	call   c0027c60 <__muldf3>
c000dadf:	83 c4 18             	add    esp,0x18
c000dae2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dae6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000daea:	52                   	push   edx
c000daeb:	50                   	push   eax
c000daec:	e8 de dd ff ff       	call   c000b8cf <double_to_fp>
c000daf1:	83 ec 0c             	sub    esp,0xc
c000daf4:	89 c5                	mov    ebp,eax
c000daf6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000daf9:	e8 c5 a7 01 00       	call   c00282c3 <__floatsidf>
c000dafe:	83 c4 10             	add    esp,0x10
c000db01:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db05:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db09:	52                   	push   edx
c000db0a:	50                   	push   eax
c000db0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db0f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db13:	e8 2c a4 01 00       	call   c0027f44 <__divdf3>
c000db18:	83 c4 10             	add    esp,0x10
c000db1b:	89 e9                	mov    ecx,ebp
c000db1d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db21:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db25:	89 d8                	mov    eax,ebx
c000db27:	89 fa                	mov    edx,edi
c000db29:	e8 ee bd ff ff       	call   c000991c <calc_output_single>
c000db2e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db31:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db38:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db3c:	52                   	push   edx
c000db3d:	50                   	push   eax
c000db3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db42:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db46:	e8 15 a1 01 00       	call   c0027c60 <__muldf3>
c000db4b:	59                   	pop    ecx
c000db4c:	59                   	pop    ecx
c000db4d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db51:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	e8 d1 a9 01 00       	call   c0028533 <__truncdfsf2>
c000db62:	83 c4 10             	add    esp,0x10
c000db65:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db68:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db7b:	e8 c4 a3 01 00       	call   c0027f44 <__divdf3>
c000db80:	83 c4 10             	add    esp,0x10
c000db83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db87:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db97:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9b:	e8 43 9a 01 00       	call   c00275e3 <__adddf3>
c000dba0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dba4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dba8:	83 c4 18             	add    esp,0x18
c000dbab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbb3:	e8 28 ab 01 00       	call   c00286e0 <lrint>
c000dbb8:	83 ec 0c             	sub    esp,0xc
c000dbbb:	50                   	push   eax
c000dbbc:	e8 02 a7 01 00       	call   c00282c3 <__floatsidf>
c000dbc1:	83 c4 10             	add    esp,0x10
c000dbc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbc8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbcc:	52                   	push   edx
c000dbcd:	50                   	push   eax
c000dbce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd6:	e8 59 a0 01 00       	call   c0027c34 <__subdf3>
c000dbdb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbe3:	83 c4 20             	add    esp,0x20
c000dbe6:	6a 00                	push   0x0
c000dbe8:	6a 00                	push   0x0
c000dbea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf2:	e8 38 a9 01 00       	call   c002852f <__ltdf2>
c000dbf7:	83 c4 10             	add    esp,0x10
c000dbfa:	85 c0                	test   eax,eax
c000dbfc:	79 20                	jns    c000dc1e <sinc_mono_vari_process+0x69b>
c000dbfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0e:	e8 d0 99 01 00       	call   c00275e3 <__adddf3>
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc1e:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc21:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc24:	83 ec 10             	sub    esp,0x10
c000dc27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc33:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc37:	e8 f8 9f 01 00       	call   c0027c34 <__subdf3>
c000dc3c:	83 c4 18             	add    esp,0x18
c000dc3f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc47:	52                   	push   edx
c000dc48:	50                   	push   eax
c000dc49:	e8 92 aa 01 00       	call   c00286e0 <lrint>
c000dc4e:	83 c4 10             	add    esp,0x10
c000dc51:	0f af f8             	imul   edi,eax
c000dc54:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc57:	99                   	cdq    
c000dc58:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc5b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc5e:	e9 d2 fb ff ff       	jmp    c000d835 <sinc_mono_vari_process+0x2b2>
c000dc63:	83 c4 4c             	add    esp,0x4c
c000dc66:	89 d0                	mov    eax,edx
c000dc68:	5b                   	pop    ebx
c000dc69:	5e                   	pop    esi
c000dc6a:	5f                   	pop    edi
c000dc6b:	5d                   	pop    ebp
c000dc6c:	c3                   	ret    

c000dc6d <sinc_get_name>:
c000dc6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc71:	31 c0                	xor    eax,eax
c000dc73:	83 fa 02             	cmp    edx,0x2
c000dc76:	77 07                	ja     c000dc7f <sinc_get_name+0x12>
c000dc78:	8b 04 95 c4 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd613c]
c000dc7f:	c3                   	ret    

c000dc80 <sinc_get_description>:
c000dc80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc84:	31 c0                	xor    eax,eax
c000dc86:	83 fa 02             	cmp    edx,0x2
c000dc89:	77 07                	ja     c000dc92 <sinc_get_description+0x12>
c000dc8b:	8b 04 95 b8 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6148]
c000dc92:	c3                   	ret    

c000dc93 <sinc_set_converter>:
c000dc93:	53                   	push   ebx
c000dc94:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc9a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dca1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dca4:	85 c0                	test   eax,eax
c000dca6:	74 13                	je     c000dcbb <sinc_set_converter+0x28>
c000dca8:	83 ec 0c             	sub    esp,0xc
c000dcab:	50                   	push   eax
c000dcac:	e8 a2 1b 00 00       	call   c000f853 <free>
c000dcb1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcb8:	83 c4 10             	add    esp,0x10
c000dcbb:	50                   	push   eax
c000dcbc:	68 44 08 00 00       	push   0x844
c000dcc1:	6a 00                	push   0x0
c000dcc3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dcc7:	50                   	push   eax
c000dcc8:	e8 ab 2a ff ff       	call   c0000778 <memset>
c000dccd:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcd0:	83 c4 10             	add    esp,0x10
c000dcd3:	b8 0b 00 00 00       	mov    eax,0xb
c000dcd8:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dcde:	7f 6e                	jg     c000dd4e <sinc_set_converter+0xbb>
c000dce0:	83 fa 01             	cmp    edx,0x1
c000dce3:	75 10                	jne    c000dcf5 <sinc_set_converter+0x62>
c000dce5:	c7 43 24 83 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d583
c000dcec:	c7 43 20 83 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d583
c000dcf3:	eb 4d                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dcf5:	83 fa 02             	cmp    edx,0x2
c000dcf8:	75 10                	jne    c000dd0a <sinc_set_converter+0x77>
c000dcfa:	c7 43 24 be ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cebe
c000dd01:	c7 43 20 be ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cebe
c000dd08:	eb 38                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd0a:	83 fa 04             	cmp    edx,0x4
c000dd0d:	75 10                	jne    c000dd1f <sinc_set_converter+0x8c>
c000dd0f:	c7 43 24 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7f9
c000dd16:	c7 43 20 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7f9
c000dd1d:	eb 23                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd1f:	83 fa 06             	cmp    edx,0x6
c000dd22:	75 10                	jne    c000dd34 <sinc_set_converter+0xa1>
c000dd24:	c7 43 24 34 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c134
c000dd2b:	c7 43 20 34 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c134
c000dd32:	eb 0e                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd34:	c7 43 24 70 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba70
c000dd3b:	c7 43 20 70 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba70
c000dd42:	c7 43 28 23 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad23
c000dd49:	b8 0a 00 00 00       	mov    eax,0xa
c000dd4e:	81 c4 58 08 00 00    	add    esp,0x858
c000dd54:	5b                   	pop    ebx
c000dd55:	c3                   	ret    

c000dd56 <zoh_vari_process>:
c000dd56:	55                   	push   ebp
c000dd57:	31 d2                	xor    edx,edx
c000dd59:	57                   	push   edi
c000dd5a:	56                   	push   esi
c000dd5b:	53                   	push   ebx
c000dd5c:	83 ec 3c             	sub    esp,0x3c
c000dd5f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd63:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd67:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd6b:	0f 8e 80 06 00 00    	jle    c000e3f1 <zoh_vari_process+0x69b>
c000dd71:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd74:	ba 05 00 00 00       	mov    edx,0x5
c000dd79:	85 db                	test   ebx,ebx
c000dd7b:	0f 84 70 06 00 00    	je     c000e3f1 <zoh_vari_process+0x69b>
c000dd81:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd84:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd88:	74 19                	je     c000dda3 <zoh_vari_process+0x4d>
c000dd8a:	31 d2                	xor    edx,edx
c000dd8c:	39 c2                	cmp    edx,eax
c000dd8e:	7d 0c                	jge    c000dd9c <zoh_vari_process+0x46>
c000dd90:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd92:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd95:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd99:	42                   	inc    edx
c000dd9a:	eb f0                	jmp    c000dd8c <zoh_vari_process+0x36>
c000dd9c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dda3:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dda6:	0f af d0             	imul   edx,eax
c000dda9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddac:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddb0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ddb7:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddba:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddc1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddc4:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddce:	68 00 00 70 3f       	push   0x3f700000
c000ddd3:	6a 00                	push   0x0
c000ddd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dddd:	e8 4d a7 01 00       	call   c002852f <__ltdf2>
c000dde2:	83 c4 10             	add    esp,0x10
c000dde5:	ba 16 00 00 00       	mov    edx,0x16
c000ddea:	85 c0                	test   eax,eax
c000ddec:	0f 88 ff 05 00 00    	js     c000e3f1 <zoh_vari_process+0x69b>
c000ddf2:	68 00 00 70 40       	push   0x40700000
c000ddf7:	6a 00                	push   0x0
c000ddf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de01:	e8 0b a7 01 00       	call   c0028511 <__gtdf2>
c000de06:	83 c4 10             	add    esp,0x10
c000de09:	ba 16 00 00 00       	mov    edx,0x16
c000de0e:	85 c0                	test   eax,eax
c000de10:	0f 8f db 05 00 00    	jg     c000e3f1 <zoh_vari_process+0x69b>
c000de16:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de19:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de24:	68 00 00 f0 3f       	push   0x3ff00000
c000de29:	6a 00                	push   0x0
c000de2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de33:	e8 f7 a6 01 00       	call   c002852f <__ltdf2>
c000de38:	83 c4 10             	add    esp,0x10
c000de3b:	85 c0                	test   eax,eax
c000de3d:	0f 89 da 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000de43:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de46:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de49:	0f 8d ce 01 00 00    	jge    c000e01d <zoh_vari_process+0x2c7>
c000de4f:	83 ec 0c             	sub    esp,0xc
c000de52:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de55:	e8 69 a4 01 00       	call   c00282c3 <__floatsidf>
c000de5a:	83 c4 10             	add    esp,0x10
c000de5d:	89 04 24             	mov    DWORD PTR [esp],eax
c000de60:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de70:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de74:	e8 e7 9d 01 00       	call   c0027c60 <__muldf3>
c000de79:	59                   	pop    ecx
c000de7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de7e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de82:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de85:	e8 39 a4 01 00       	call   c00282c3 <__floatsidf>
c000de8a:	83 c4 10             	add    esp,0x10
c000de8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de91:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de95:	52                   	push   edx
c000de96:	50                   	push   eax
c000de97:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9f:	e8 3f 97 01 00       	call   c00275e3 <__adddf3>
c000dea4:	59                   	pop    ecx
c000dea5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dea9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dead:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000deb0:	e8 0e a4 01 00       	call   c00282c3 <__floatsidf>
c000deb5:	83 c4 10             	add    esp,0x10
c000deb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000debc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dec0:	52                   	push   edx
c000dec1:	50                   	push   eax
c000dec2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dec6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deca:	e8 5e a6 01 00       	call   c002852d <__gedf2>
c000decf:	83 c4 10             	add    esp,0x10
c000ded2:	85 c0                	test   eax,eax
c000ded4:	0f 89 43 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000deda:	85 ed                	test   ebp,ebp
c000dedc:	0f 8e ec 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000dee2:	83 ec 10             	sub    esp,0x10
c000dee5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dee8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deeb:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deee:	ff 37                	push   DWORD PTR [edi]
c000def0:	e8 3f 9d 01 00       	call   c0027c34 <__subdf3>
c000def5:	83 c4 18             	add    esp,0x18
c000def8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000defc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df00:	52                   	push   edx
c000df01:	50                   	push   eax
c000df02:	e8 b9 a7 01 00       	call   c00286c0 <fabs>
c000df07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df0b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df0f:	83 c4 10             	add    esp,0x10
c000df12:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df17:	68 23 42 92 0c       	push   0xc924223
c000df1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df24:	e8 e8 a5 01 00       	call   c0028511 <__gtdf2>
c000df29:	83 c4 10             	add    esp,0x10
c000df2c:	85 c0                	test   eax,eax
c000df2e:	0f 8e 9a 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000df34:	8b 07                	mov    eax,DWORD PTR [edi]
c000df36:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df39:	89 04 24             	mov    DWORD PTR [esp],eax
c000df3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df40:	52                   	push   edx
c000df41:	50                   	push   eax
c000df42:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df45:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df48:	e8 e7 9c 01 00       	call   c0027c34 <__subdf3>
c000df4d:	59                   	pop    ecx
c000df4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df52:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df56:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df59:	e8 65 a3 01 00       	call   c00282c3 <__floatsidf>
c000df5e:	83 c4 10             	add    esp,0x10
c000df61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df65:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df69:	52                   	push   edx
c000df6a:	50                   	push   eax
c000df6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df73:	e8 e8 9c 01 00       	call   c0027c60 <__muldf3>
c000df78:	5d                   	pop    ebp
c000df79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df7d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df81:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df84:	e8 3a a3 01 00       	call   c00282c3 <__floatsidf>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df94:	52                   	push   edx
c000df95:	50                   	push   eax
c000df96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9e:	e8 a1 9f 01 00       	call   c0027f44 <__divdf3>
c000dfa3:	83 c4 10             	add    esp,0x10
c000dfa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfaa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfbe:	e8 20 96 01 00       	call   c00275e3 <__adddf3>
c000dfc3:	83 c4 10             	add    esp,0x10
c000dfc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfce:	31 c0                	xor    eax,eax
c000dfd0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfd3:	7e 13                	jle    c000dfe8 <zoh_vari_process+0x292>
c000dfd5:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfd9:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfdc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfdf:	40                   	inc    eax
c000dfe0:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfe3:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfe6:	eb e8                	jmp    c000dfd0 <zoh_vari_process+0x27a>
c000dfe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff0:	68 00 00 f0 3f       	push   0x3ff00000
c000dff5:	6a 00                	push   0x0
c000dff7:	e8 48 9f 01 00       	call   c0027f44 <__divdf3>
c000dffc:	83 c4 10             	add    esp,0x10
c000dfff:	89 04 24             	mov    DWORD PTR [esp],eax
c000e002:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e00c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e010:	e8 ce 95 01 00       	call   c00275e3 <__adddf3>
c000e015:	83 c4 10             	add    esp,0x10
c000e018:	e9 ff fd ff ff       	jmp    c000de1c <zoh_vari_process+0xc6>
c000e01d:	55                   	push   ebp
c000e01e:	55                   	push   ebp
c000e01f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e023:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e027:	e8 b4 a6 01 00       	call   c00286e0 <lrint>
c000e02c:	83 ec 0c             	sub    esp,0xc
c000e02f:	50                   	push   eax
c000e030:	e8 8e a2 01 00       	call   c00282c3 <__floatsidf>
c000e035:	83 c4 10             	add    esp,0x10
c000e038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e03c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e040:	52                   	push   edx
c000e041:	50                   	push   eax
c000e042:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e046:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e04a:	e8 e5 9b 01 00       	call   c0027c34 <__subdf3>
c000e04f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e053:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e057:	83 c4 20             	add    esp,0x20
c000e05a:	6a 00                	push   0x0
c000e05c:	6a 00                	push   0x0
c000e05e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e062:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e066:	e8 c4 a4 01 00       	call   c002852f <__ltdf2>
c000e06b:	83 c4 10             	add    esp,0x10
c000e06e:	85 c0                	test   eax,eax
c000e070:	79 1e                	jns    c000e090 <zoh_vari_process+0x33a>
c000e072:	68 00 00 f0 3f       	push   0x3ff00000
c000e077:	6a 00                	push   0x0
c000e079:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e07d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e081:	e8 5d 95 01 00       	call   c00275e3 <__adddf3>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 04 24             	mov    DWORD PTR [esp],eax
c000e08c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e090:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e093:	83 ec 10             	sub    esp,0x10
c000e096:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a6:	e8 89 9b 01 00       	call   c0027c34 <__subdf3>
c000e0ab:	83 c4 18             	add    esp,0x18
c000e0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0b6:	52                   	push   edx
c000e0b7:	50                   	push   eax
c000e0b8:	e8 23 a6 01 00       	call   c00286e0 <lrint>
c000e0bd:	83 c4 10             	add    esp,0x10
c000e0c0:	0f af e8             	imul   ebp,eax
c000e0c3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0c6:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0c9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0d0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0d7:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0da:	0f 8d 7a 02 00 00    	jge    c000e35a <zoh_vari_process+0x604>
c000e0e0:	83 ec 0c             	sub    esp,0xc
c000e0e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0e6:	e8 d8 a1 01 00       	call   c00282c3 <__floatsidf>
c000e0eb:	83 c4 10             	add    esp,0x10
c000e0ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0f6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e102:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e106:	e8 55 9b 01 00       	call   c0027c60 <__muldf3>
c000e10b:	59                   	pop    ecx
c000e10c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e110:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e118:	e8 a6 a1 01 00       	call   c00282c3 <__floatsidf>
c000e11d:	83 c4 10             	add    esp,0x10
c000e120:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e124:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e128:	52                   	push   edx
c000e129:	50                   	push   eax
c000e12a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e12e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e132:	e8 ac 94 01 00       	call   c00275e3 <__adddf3>
c000e137:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e13a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e13e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e142:	e8 7c a1 01 00       	call   c00282c3 <__floatsidf>
c000e147:	83 c4 10             	add    esp,0x10
c000e14a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e14e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e152:	52                   	push   edx
c000e153:	50                   	push   eax
c000e154:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e158:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e15c:	e8 d0 a3 01 00       	call   c0028531 <__ledf2>
c000e161:	83 c4 10             	add    esp,0x10
c000e164:	85 c0                	test   eax,eax
c000e166:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e16a:	0f 8f ea 01 00 00    	jg     c000e35a <zoh_vari_process+0x604>
c000e170:	85 c9                	test   ecx,ecx
c000e172:	0f 8e ed 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e178:	83 ec 10             	sub    esp,0x10
c000e17b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e17e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e181:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e184:	ff 37                	push   DWORD PTR [edi]
c000e186:	e8 a9 9a 01 00       	call   c0027c34 <__subdf3>
c000e18b:	83 c4 18             	add    esp,0x18
c000e18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e192:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e196:	52                   	push   edx
c000e197:	50                   	push   eax
c000e198:	e8 23 a5 01 00       	call   c00286c0 <fabs>
c000e19d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1a1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1a5:	83 c4 10             	add    esp,0x10
c000e1a8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1ad:	68 23 42 92 0c       	push   0xc924223
c000e1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1ba:	e8 52 a3 01 00       	call   c0028511 <__gtdf2>
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	85 c0                	test   eax,eax
c000e1c4:	0f 8e 9b 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e1ca:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1cc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1d7:	52                   	push   edx
c000e1d8:	50                   	push   eax
c000e1d9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1dc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1df:	e8 50 9a 01 00       	call   c0027c34 <__subdf3>
c000e1e4:	5d                   	pop    ebp
c000e1e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1e9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1ed:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1f0:	e8 ce a0 01 00       	call   c00282c3 <__floatsidf>
c000e1f5:	83 c4 10             	add    esp,0x10
c000e1f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e200:	52                   	push   edx
c000e201:	50                   	push   eax
c000e202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20a:	e8 51 9a 01 00       	call   c0027c60 <__muldf3>
c000e20f:	59                   	pop    ecx
c000e210:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e214:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e218:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e21b:	e8 a3 a0 01 00       	call   c00282c3 <__floatsidf>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e227:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e22b:	52                   	push   edx
c000e22c:	50                   	push   eax
c000e22d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e235:	e8 0a 9d 01 00       	call   c0027f44 <__divdf3>
c000e23a:	83 c4 10             	add    esp,0x10
c000e23d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e241:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e249:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e24d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e255:	e8 89 93 01 00       	call   c00275e3 <__adddf3>
c000e25a:	83 c4 10             	add    esp,0x10
c000e25d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e261:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e265:	31 d2                	xor    edx,edx
c000e267:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e26a:	39 d0                	cmp    eax,edx
c000e26c:	7e 1d                	jle    c000e28b <zoh_vari_process+0x535>
c000e26e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e271:	29 c1                	sub    ecx,eax
c000e273:	89 c8                	mov    eax,ecx
c000e275:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e277:	01 d0                	add    eax,edx
c000e279:	42                   	inc    edx
c000e27a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e27d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e280:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e283:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e286:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e289:	eb dc                	jmp    c000e267 <zoh_vari_process+0x511>
c000e28b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e28f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e293:	68 00 00 f0 3f       	push   0x3ff00000
c000e298:	6a 00                	push   0x0
c000e29a:	e8 a5 9c 01 00       	call   c0027f44 <__divdf3>
c000e29f:	83 c4 10             	add    esp,0x10
c000e2a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2ae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ba:	e8 24 93 01 00       	call   c00275e3 <__adddf3>
c000e2bf:	5d                   	pop    ebp
c000e2c0:	59                   	pop    ecx
c000e2c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d1:	e8 0a a4 01 00       	call   c00286e0 <lrint>
c000e2d6:	83 ec 0c             	sub    esp,0xc
c000e2d9:	50                   	push   eax
c000e2da:	e8 e4 9f 01 00       	call   c00282c3 <__floatsidf>
c000e2df:	83 c4 10             	add    esp,0x10
c000e2e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2ea:	52                   	push   edx
c000e2eb:	50                   	push   eax
c000e2ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f4:	e8 3b 99 01 00       	call   c0027c34 <__subdf3>
c000e2f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e301:	83 c4 20             	add    esp,0x20
c000e304:	6a 00                	push   0x0
c000e306:	6a 00                	push   0x0
c000e308:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e30c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e310:	e8 1a a2 01 00       	call   c002852f <__ltdf2>
c000e315:	83 c4 10             	add    esp,0x10
c000e318:	85 c0                	test   eax,eax
c000e31a:	79 1e                	jns    c000e33a <zoh_vari_process+0x5e4>
c000e31c:	68 00 00 f0 3f       	push   0x3ff00000
c000e321:	6a 00                	push   0x0
c000e323:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e327:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e32b:	e8 b3 92 01 00       	call   c00275e3 <__adddf3>
c000e330:	83 c4 10             	add    esp,0x10
c000e333:	89 04 24             	mov    DWORD PTR [esp],eax
c000e336:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e33a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e33d:	83 ec 10             	sub    esp,0x10
c000e340:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e344:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e348:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e34c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e350:	e8 df 98 01 00       	call   c0027c34 <__subdf3>
c000e355:	e9 51 fd ff ff       	jmp    c000e0ab <zoh_vari_process+0x355>
c000e35a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e35e:	7d 3a                	jge    c000e39a <zoh_vari_process+0x644>
c000e360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e364:	83 ec 0c             	sub    esp,0xc
c000e367:	29 e8                	sub    eax,ebp
c000e369:	99                   	cdq    
c000e36a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e36d:	50                   	push   eax
c000e36e:	e8 50 9f 01 00       	call   c00282c3 <__floatsidf>
c000e373:	83 c4 10             	add    esp,0x10
c000e376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e37e:	52                   	push   edx
c000e37f:	50                   	push   eax
c000e380:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e384:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e388:	e8 56 92 01 00       	call   c00275e3 <__adddf3>
c000e38d:	83 c4 10             	add    esp,0x10
c000e390:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e393:	89 04 24             	mov    DWORD PTR [esp],eax
c000e396:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e39a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e39d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3a1:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3a4:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3a7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3aa:	85 c0                	test   eax,eax
c000e3ac:	7f 25                	jg     c000e3d3 <zoh_vari_process+0x67d>
c000e3ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3b6:	89 07                	mov    DWORD PTR [edi],eax
c000e3b8:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3bb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3be:	99                   	cdq    
c000e3bf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3c2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3c5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3c8:	99                   	cdq    
c000e3c9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3cc:	31 d2                	xor    edx,edx
c000e3ce:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3d1:	eb 1e                	jmp    c000e3f1 <zoh_vari_process+0x69b>
c000e3d3:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3d6:	31 d2                	xor    edx,edx
c000e3d8:	29 c8                	sub    eax,ecx
c000e3da:	c1 e0 02             	shl    eax,0x2
c000e3dd:	39 d1                	cmp    ecx,edx
c000e3df:	7e cd                	jle    c000e3ae <zoh_vari_process+0x658>
c000e3e1:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3e3:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3e7:	83 c0 04             	add    eax,0x4
c000e3ea:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3ee:	42                   	inc    edx
c000e3ef:	eb ec                	jmp    c000e3dd <zoh_vari_process+0x687>
c000e3f1:	83 c4 3c             	add    esp,0x3c
c000e3f4:	89 d0                	mov    eax,edx
c000e3f6:	5b                   	pop    ebx
c000e3f7:	5e                   	pop    esi
c000e3f8:	5f                   	pop    edi
c000e3f9:	5d                   	pop    ebp
c000e3fa:	c3                   	ret    

c000e3fb <zoh_reset>:
c000e3fb:	83 ec 0c             	sub    esp,0xc
c000e3fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e402:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e405:	85 c0                	test   eax,eax
c000e407:	74 20                	je     c000e429 <zoh_reset+0x2e>
c000e409:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e40c:	83 c0 1c             	add    eax,0x1c
c000e40f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e412:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e419:	c1 e2 02             	shl    edx,0x2
c000e41c:	51                   	push   ecx
c000e41d:	52                   	push   edx
c000e41e:	6a 00                	push   0x0
c000e420:	50                   	push   eax
c000e421:	e8 52 23 ff ff       	call   c0000778 <memset>
c000e426:	83 c4 10             	add    esp,0x10
c000e429:	83 c4 0c             	add    esp,0xc
c000e42c:	c3                   	ret    

c000e42d <zoh_get_name>:
c000e42d:	31 c0                	xor    eax,eax
c000e42f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e434:	75 05                	jne    c000e43b <zoh_get_name+0xe>
c000e436:	b8 de 9f 02 c0       	mov    eax,0xc0029fde
c000e43b:	c3                   	ret    

c000e43c <zoh_get_description>:
c000e43c:	31 c0                	xor    eax,eax
c000e43e:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e443:	75 05                	jne    c000e44a <zoh_get_description+0xe>
c000e445:	b8 ef 9f 02 c0       	mov    eax,0xc0029fef
c000e44a:	c3                   	ret    

c000e44b <zoh_set_converter>:
c000e44b:	53                   	push   ebx
c000e44c:	b8 0a 00 00 00       	mov    eax,0xa
c000e451:	83 ec 08             	sub    esp,0x8
c000e454:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e458:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e45d:	75 6e                	jne    c000e4cd <zoh_set_converter+0x82>
c000e45f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e462:	85 c0                	test   eax,eax
c000e464:	74 13                	je     c000e479 <zoh_set_converter+0x2e>
c000e466:	83 ec 0c             	sub    esp,0xc
c000e469:	50                   	push   eax
c000e46a:	e8 e4 13 00 00       	call   c000f853 <free>
c000e46f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e476:	83 c4 10             	add    esp,0x10
c000e479:	50                   	push   eax
c000e47a:	50                   	push   eax
c000e47b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e47e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e485:	50                   	push   eax
c000e486:	6a 01                	push   0x1
c000e488:	e8 e6 13 00 00       	call   c000f873 <calloc>
c000e48d:	83 c4 10             	add    esp,0x10
c000e490:	89 c2                	mov    edx,eax
c000e492:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e495:	85 d2                	test   edx,edx
c000e497:	b8 01 00 00 00       	mov    eax,0x1
c000e49c:	74 2f                	je     c000e4cd <zoh_set_converter+0x82>
c000e49e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a1:	83 ec 0c             	sub    esp,0xc
c000e4a4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4a7:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4ad:	c7 43 24 56 dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd56
c000e4b4:	c7 43 20 56 dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd56
c000e4bb:	c7 43 28 fb e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3fb
c000e4c2:	53                   	push   ebx
c000e4c3:	e8 33 ff ff ff       	call   c000e3fb <zoh_reset>
c000e4c8:	83 c4 10             	add    esp,0x10
c000e4cb:	31 c0                	xor    eax,eax
c000e4cd:	83 c4 08             	add    esp,0x8
c000e4d0:	5b                   	pop    ebx
c000e4d1:	c3                   	ret    

c000e4d2 <CPU::current()>:
c000e4d2:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c000e4d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4dd:	90                   	nop
c000e4de:	c3                   	ret    

c000e4df <operator new(unsigned long)>:
c000e4df:	83 ec 0c             	sub    esp,0xc
c000e4e2:	83 ec 0c             	sub    esp,0xc
c000e4e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4e9:	e8 55 13 00 00       	call   c000f843 <malloc>
c000e4ee:	83 c4 10             	add    esp,0x10
c000e4f1:	83 c4 0c             	add    esp,0xc
c000e4f4:	c3                   	ret    

c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e4f5:	83 ec 0c             	sub    esp,0xc
c000e4f8:	83 ec 08             	sub    esp,0x8
c000e4fb:	68 26 a0 02 c0       	push   0xc002a026
c000e500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e504:	e8 b7 23 ff ff       	call   c00008c0 <strcmp>
c000e509:	83 c4 10             	add    esp,0x10
c000e50c:	85 c0                	test   eax,eax
c000e50e:	0f 94 c0             	sete   al
c000e511:	84 c0                	test   al,al
c000e513:	74 0a                	je     c000e51f <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e515:	b8 c8 e4 02 c0       	mov    eax,0xc002e4c8
c000e51a:	e9 e3 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e51f:	83 ec 08             	sub    esp,0x8
c000e522:	68 2f a0 02 c0       	push   0xc002a02f
c000e527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e52b:	e8 90 23 ff ff       	call   c00008c0 <strcmp>
c000e530:	83 c4 10             	add    esp,0x10
c000e533:	85 c0                	test   eax,eax
c000e535:	0f 94 c0             	sete   al
c000e538:	84 c0                	test   al,al
c000e53a:	74 0a                	je     c000e546 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e53c:	b8 5c 6a 02 c0       	mov    eax,0xc0026a5c
c000e541:	e9 bc 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e546:	83 ec 08             	sub    esp,0x8
c000e549:	68 39 a0 02 c0       	push   0xc002a039
c000e54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e552:	e8 69 23 ff ff       	call   c00008c0 <strcmp>
c000e557:	83 c4 10             	add    esp,0x10
c000e55a:	85 c0                	test   eax,eax
c000e55c:	0f 94 c0             	sete   al
c000e55f:	84 c0                	test   al,al
c000e561:	74 0a                	je     c000e56d <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e563:	b8 90 67 02 c0       	mov    eax,0xc0026790
c000e568:	e9 95 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e56d:	83 ec 08             	sub    esp,0x8
c000e570:	68 42 a0 02 c0       	push   0xc002a042
c000e575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e579:	e8 42 23 ff ff       	call   c00008c0 <strcmp>
c000e57e:	83 c4 10             	add    esp,0x10
c000e581:	85 c0                	test   eax,eax
c000e583:	0f 94 c0             	sete   al
c000e586:	84 c0                	test   al,al
c000e588:	74 07                	je     c000e591 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e58a:	b8 5c 6b 02 c0       	mov    eax,0xc0026b5c
c000e58f:	eb 71                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e591:	83 ec 08             	sub    esp,0x8
c000e594:	68 4c a0 02 c0       	push   0xc002a04c
c000e599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59d:	e8 1e 23 ff ff       	call   c00008c0 <strcmp>
c000e5a2:	83 c4 10             	add    esp,0x10
c000e5a5:	85 c0                	test   eax,eax
c000e5a7:	0f 94 c0             	sete   al
c000e5aa:	84 c0                	test   al,al
c000e5ac:	74 07                	je     c000e5b5 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5ae:	b8 dc 68 02 c0       	mov    eax,0xc00268dc
c000e5b3:	eb 4d                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b5:	83 ec 08             	sub    esp,0x8
c000e5b8:	68 55 a0 02 c0       	push   0xc002a055
c000e5bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c1:	e8 fa 22 ff ff       	call   c00008c0 <strcmp>
c000e5c6:	83 c4 10             	add    esp,0x10
c000e5c9:	85 c0                	test   eax,eax
c000e5cb:	0f 94 c0             	sete   al
c000e5ce:	84 c0                	test   al,al
c000e5d0:	74 07                	je     c000e5d9 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e5d2:	b8 cc e4 02 c0       	mov    eax,0xc002e4cc
c000e5d7:	eb 29                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5d9:	83 ec 08             	sub    esp,0x8
c000e5dc:	68 62 a0 02 c0       	push   0xc002a062
c000e5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e5:	e8 d6 22 ff ff       	call   c00008c0 <strcmp>
c000e5ea:	83 c4 10             	add    esp,0x10
c000e5ed:	85 c0                	test   eax,eax
c000e5ef:	0f 94 c0             	sete   al
c000e5f2:	84 c0                	test   al,al
c000e5f4:	74 07                	je     c000e5fd <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e5f6:	b8 cd e4 02 c0       	mov    eax,0xc002e4cd
c000e5fb:	eb 05                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5fd:	b8 00 00 00 00       	mov    eax,0x0
c000e602:	83 c4 0c             	add    esp,0xc
c000e605:	c3                   	ret    

c000e606 <Computer::close(int, int, void*)>:
c000e606:	57                   	push   edi
c000e607:	56                   	push   esi
c000e608:	53                   	push   ebx
c000e609:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e60d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e611:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e615:	83 ec 0c             	sub    esp,0xc
c000e618:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e61e:	e8 63 5f 00 00       	call   c0014586 <Device::closeAll()>
c000e623:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e629:	83 c4 10             	add    esp,0x10
c000e62c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e62e:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e632:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e63a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e63e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e642:	5b                   	pop    ebx
c000e643:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e646:	5e                   	pop    esi
c000e647:	5f                   	pop    edi
c000e648:	ff e0                	jmp    eax

c000e64a <Krnl::firstTask()>:
c000e64a:	53                   	push   ebx
c000e64b:	83 ec 14             	sub    esp,0x14
c000e64e:	fb                   	sti    
c000e64f:	68 3f 07 00 00       	push   0x73f
c000e654:	e8 ea 11 00 00       	call   c000f843 <malloc>
c000e659:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e660:	89 c3                	mov    ebx,eax
c000e662:	ff 35 34 1a 03 c0    	push   DWORD PTR ds:0xc0031a34
c000e668:	68 6f a0 02 c0       	push   0xc002a06f
c000e66d:	6a 01                	push   0x1
c000e66f:	50                   	push   eax
c000e670:	e8 43 f6 00 00       	call   c001dcb8 <Process::Process(bool, char const*, Process*, char**)>
c000e675:	83 c4 20             	add    esp,0x20
c000e678:	68 ff 00 00 00       	push   0xff
c000e67d:	6a 00                	push   0x0
c000e67f:	68 d5 f1 00 c0       	push   0xc000f1d5
c000e684:	53                   	push   ebx
c000e685:	e8 2c f9 00 00       	call   c001dfb6 <Process::createThread(void (*)(void*), void*, int)>
c000e68a:	6a 7a                	push   0x7a
c000e68c:	6a 00                	push   0x0
c000e68e:	68 14 e8 01 c0       	push   0xc001e814
c000e693:	ff 35 34 1a 03 c0    	push   DWORD PTR ds:0xc0031a34
c000e699:	e8 18 f9 00 00       	call   c001dfb6 <Process::createThread(void (*)(void*), void*, int)>
c000e69e:	83 c4 20             	add    esp,0x20
c000e6a1:	a3 e8 19 03 c0       	mov    ds:0xc00319e8,eax
c000e6a6:	c6 05 cd e4 02 c0 01 	mov    BYTE PTR ds:0xc002e4cd,0x1
c000e6ad:	e8 e3 04 01 00       	call   c001eb95 <Vm::initialise8086()>
c000e6b2:	e8 b7 4c 00 00       	call   c001336e <Fs::initVFS()>
c000e6b7:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c000e6bc:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e6c2:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6c4:	6a 00                	push   0x0
c000e6c6:	6a 00                	push   0x0
c000e6c8:	6a 00                	push   0x0
c000e6ca:	50                   	push   eax
c000e6cb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e6ce:	e8 5b df 00 00       	call   c001c62e <Sys::loadSyscalls()>
c000e6d3:	e8 7e be 00 00       	call   c001a556 <Krnl::loadSystemEnv()>
c000e6d8:	83 c4 0c             	add    esp,0xc
c000e6db:	6a 3a                	push   0x3a
c000e6dd:	68 7c a0 02 c0       	push   0xc002a07c
c000e6e2:	68 85 a0 02 c0       	push   0xc002a085
c000e6e7:	e8 90 cb 00 00       	call   c001b27c <Reg::readIntWithDefault(char*, char*, int)>
c000e6ec:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6ef:	e8 62 57 00 00       	call   c0013e56 <User::loadClockSettings(int)>
c000e6f4:	58                   	pop    eax
c000e6f5:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c000e6fa:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e700:	e8 55 5e 00 00       	call   c001455a <Device::loadDriversForAll()>
c000e705:	e8 92 b9 00 00       	call   c001a09c <Krnl::startCPUs()>
c000e70a:	5a                   	pop    edx
c000e70b:	8b 1d c8 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e4c8
c000e711:	59                   	pop    ecx
c000e712:	6a 01                	push   0x1
c000e714:	68 8d a0 02 c0       	push   0xc002a08d
c000e719:	e8 a4 f0 00 00       	call   c001d7c2 <Thr::loadDLL(char const*, bool)>
c000e71e:	5a                   	pop    edx
c000e71f:	59                   	pop    ecx
c000e720:	53                   	push   ebx
c000e721:	50                   	push   eax
c000e722:	e8 ea f2 00 00       	call   c001da11 <Thr::executeDLL(unsigned long, void*)>
c000e727:	83 c4 10             	add    esp,0x10
c000e72a:	83 ec 0c             	sub    esp,0xc
c000e72d:	6a 02                	push   0x2
c000e72f:	e8 e6 fb 00 00       	call   c001e31a <blockTask(TaskState)>
c000e734:	83 c4 10             	add    esp,0x10
c000e737:	eb f1                	jmp    c000e72a <Krnl::firstTask()+0xe0>
c000e739:	90                   	nop

c000e73a <Computer::Computer()>:
c000e73a:	83 ec 0c             	sub    esp,0xc
c000e73d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e741:	83 ec 08             	sub    esp,0x8
c000e744:	68 a9 a0 02 c0       	push   0xc002a0a9
c000e749:	50                   	push   eax
c000e74a:	e8 b1 5e 00 00       	call   c0014600 <Device::Device(char const*)>
c000e74f:	83 c4 10             	add    esp,0x10
c000e752:	ba 48 a2 02 c0       	mov    edx,0xc002a248
c000e757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e75b:	89 10                	mov    DWORD PTR [eax],edx
c000e75d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e761:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e76b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e76f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e77d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e783:	83 ca 04             	or     edx,0x4
c000e786:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e790:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e796:	0f b6 d0             	movzx  edx,al
c000e799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e79d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ae:	0f b6 d0             	movzx  edx,al
c000e7b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7be:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7c4:	8d 50 01             	lea    edx,[eax+0x1]
c000e7c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e7cb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e7d1:	0f b6 d0             	movzx  edx,al
c000e7d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e7dc:	83 e1 3f             	and    ecx,0x3f
c000e7df:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ed:	0f b6 d0             	movzx  edx,al
c000e7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f4:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e805:	0f b6 d0             	movzx  edx,al
c000e808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e815:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e81b:	8d 50 01             	lea    edx,[eax+0x1]
c000e81e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e822:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e828:	0f b6 d0             	movzx  edx,al
c000e82b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e833:	83 e1 3f             	and    ecx,0x3f
c000e836:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e844:	0f b6 d0             	movzx  edx,al
c000e847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84b:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e856:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e85c:	0f b6 d0             	movzx  edx,al
c000e85f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e863:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e872:	8d 50 01             	lea    edx,[eax+0x1]
c000e875:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e879:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e87f:	0f b6 d0             	movzx  edx,al
c000e882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e886:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e88a:	83 e1 3f             	and    ecx,0x3f
c000e88d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e891:	90                   	nop
c000e892:	83 c4 0c             	add    esp,0xc
c000e895:	c3                   	ret    

c000e896 <Computer::setBootMessage(char const*)>:
c000e896:	c3                   	ret    
c000e897:	90                   	nop

c000e898 <Computer::detectFeatures()>:
c000e898:	55                   	push   ebp
c000e899:	57                   	push   edi
c000e89a:	56                   	push   esi
c000e89b:	53                   	push   ebx
c000e89c:	83 ec 1c             	sub    esp,0x1c
c000e89f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8a3:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8ad:	e8 32 1a ff ff       	call   c00002e4 <detectCPUID>
c000e8b2:	85 c0                	test   eax,eax
c000e8b4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8ba:	0f 95 c2             	setne  dl
c000e8bd:	83 e0 fd             	and    eax,0xfffffffd
c000e8c0:	d1 e2                	shl    edx,1
c000e8c2:	09 d0                	or     eax,edx
c000e8c4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8ca:	a8 02                	test   al,0x2
c000e8cc:	75 46                	jne    c000e914 <Computer::detectFeatures()+0x7c>
c000e8ce:	f6 05 e1 e4 02 c0 04 	test   BYTE PTR ds:0xc002e4e1,0x4
c000e8d5:	74 07                	je     c000e8de <Computer::detectFeatures()+0x46>
c000e8d7:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e8de:	e8 43 7e 01 00       	call   c0026726 <x87Detect>
c000e8e3:	83 e0 01             	and    eax,0x1
c000e8e6:	c1 e0 04             	shl    eax,0x4
c000e8e9:	88 c2                	mov    dl,al
c000e8eb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8f1:	83 e0 ef             	and    eax,0xffffffef
c000e8f4:	09 d0                	or     eax,edx
c000e8f6:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8fc:	a8 10                	test   al,0x10
c000e8fe:	0f 85 2a 01 00 00    	jne    c000ea2e <Computer::detectFeatures()+0x196>
c000e904:	84 c0                	test   al,al
c000e906:	0f 88 45 01 00 00    	js     c000ea51 <Computer::detectFeatures()+0x1b9>
c000e90c:	83 c4 1c             	add    esp,0x1c
c000e90f:	5b                   	pop    ebx
c000e910:	5e                   	pop    esi
c000e911:	5f                   	pop    edi
c000e912:	5d                   	pop    ebp
c000e913:	c3                   	ret    
c000e914:	83 ec 0c             	sub    esp,0xc
c000e917:	6a 20                	push   0x20
c000e919:	e8 90 a4 00 00       	call   c0018dae <CPU::cpuidCheckEDX(unsigned int)>
c000e91e:	83 e0 01             	and    eax,0x1
c000e921:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e928:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e92e:	83 e0 f7             	and    eax,0xfffffff7
c000e931:	09 d0                	or     eax,edx
c000e933:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e939:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e940:	e8 69 a4 00 00       	call   c0018dae <CPU::cpuidCheckEDX(unsigned int)>
c000e945:	83 e0 01             	and    eax,0x1
c000e948:	88 c2                	mov    dl,al
c000e94a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e950:	83 e0 fe             	and    eax,0xfffffffe
c000e953:	09 d0                	or     eax,edx
c000e955:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e95b:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e962:	e8 47 a4 00 00       	call   c0018dae <CPU::cpuidCheckEDX(unsigned int)>
c000e967:	c1 e0 07             	shl    eax,0x7
c000e96a:	88 c2                	mov    dl,al
c000e96c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e972:	83 e0 7f             	and    eax,0x7f
c000e975:	09 d0                	or     eax,edx
c000e977:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e97d:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e984:	e8 25 a4 00 00       	call   c0018dae <CPU::cpuidCheckEDX(unsigned int)>
c000e989:	83 c4 10             	add    esp,0x10
c000e98c:	83 e0 01             	and    eax,0x1
c000e98f:	c1 e0 05             	shl    eax,0x5
c000e992:	88 c2                	mov    dl,al
c000e994:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e99a:	83 e0 df             	and    eax,0xffffffdf
c000e99d:	09 d0                	or     eax,edx
c000e99f:	f7 05 e0 e4 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e4e0,0x401
c000e9a9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9af:	0f 84 c2 00 00 00    	je     c000ea77 <Computer::detectFeatures()+0x1df>
c000e9b5:	83 e0 fe             	and    eax,0xfffffffe
c000e9b8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9be:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9c4:	88 c2                	mov    dl,al
c000e9c6:	83 e2 09             	and    edx,0x9
c000e9c9:	fe ca                	dec    dl
c000e9cb:	75 09                	jne    c000e9d6 <Computer::detectFeatures()+0x13e>
c000e9cd:	83 e0 fe             	and    eax,0xfffffffe
c000e9d0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d6:	83 ec 0c             	sub    esp,0xc
c000e9d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e9dd:	50                   	push   eax
c000e9de:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e9e2:	55                   	push   ebp
c000e9e3:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e9e7:	57                   	push   edi
c000e9e8:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e9ec:	56                   	push   esi
c000e9ed:	68 00 00 00 80       	push   0x80000000
c000e9f2:	e8 33 a3 00 00       	call   c0018d2a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e9f7:	83 c4 20             	add    esp,0x20
c000e9fa:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea01:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea05:	0f 86 c3 fe ff ff    	jbe    c000e8ce <Computer::detectFeatures()+0x36>
c000ea0b:	83 ec 0c             	sub    esp,0xc
c000ea0e:	50                   	push   eax
c000ea0f:	55                   	push   ebp
c000ea10:	57                   	push   edi
c000ea11:	56                   	push   esi
c000ea12:	68 01 00 00 80       	push   0x80000001
c000ea17:	e8 0e a3 00 00       	call   c0018d2a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea1c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea26:	83 c4 20             	add    esp,0x20
c000ea29:	e9 a0 fe ff ff       	jmp    c000e8ce <Computer::detectFeatures()+0x36>
c000ea2e:	e8 ad 7c 01 00       	call   c00266e0 <absolutelyNoChanceInHell>
c000ea33:	88 c2                	mov    dl,al
c000ea35:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea3b:	c1 e2 07             	shl    edx,0x7
c000ea3e:	83 e0 7f             	and    eax,0x7f
c000ea41:	09 d0                	or     eax,edx
c000ea43:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea49:	84 c0                	test   al,al
c000ea4b:	0f 89 bb fe ff ff    	jns    c000e90c <Computer::detectFeatures()+0x74>
c000ea51:	e8 6a 7c 01 00       	call   c00266c0 <avxDetect>
c000ea56:	83 e0 01             	and    eax,0x1
c000ea59:	c1 e0 05             	shl    eax,0x5
c000ea5c:	88 c2                	mov    dl,al
c000ea5e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea64:	83 e0 df             	and    eax,0xffffffdf
c000ea67:	09 d0                	or     eax,edx
c000ea69:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea6f:	83 c4 1c             	add    esp,0x1c
c000ea72:	5b                   	pop    ebx
c000ea73:	5e                   	pop    esi
c000ea74:	5f                   	pop    edi
c000ea75:	5d                   	pop    ebp
c000ea76:	c3                   	ret    
c000ea77:	83 ec 0c             	sub    esp,0xc
c000ea7a:	68 00 02 00 00       	push   0x200
c000ea7f:	e8 2a a3 00 00       	call   c0018dae <CPU::cpuidCheckEDX(unsigned int)>
c000ea84:	83 c4 10             	add    esp,0x10
c000ea87:	83 e0 01             	and    eax,0x1
c000ea8a:	88 c2                	mov    dl,al
c000ea8c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea92:	83 e0 fe             	and    eax,0xfffffffe
c000ea95:	09 d0                	or     eax,edx
c000ea97:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea9d:	e9 1c ff ff ff       	jmp    c000e9be <Computer::detectFeatures()+0x126>

c000eaa2 <Computer::displayFeatures()>:
c000eaa2:	53                   	push   ebx
c000eaa3:	83 ec 14             	sub    esp,0x14
c000eaa6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eaaa:	68 b9 a0 02 c0       	push   0xc002a0b9
c000eaaf:	e8 36 45 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c000eab4:	83 c4 10             	add    esp,0x10
c000eab7:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eabe:	0f 85 73 02 00 00    	jne    c000ed37 <Computer::displayFeatures()+0x295>
c000eac4:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c000eac9:	83 ec 08             	sub    esp,0x8
c000eacc:	50                   	push   eax
c000eacd:	68 cc a0 02 c0       	push   0xc002a0cc
c000ead2:	e8 13 45 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c000ead7:	83 c4 10             	add    esp,0x10
c000eada:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eae1:	0f 85 8c 02 00 00    	jne    c000ed73 <Computer::displayFeatures()+0x2d1>
c000eae7:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c000eaec:	83 ec 08             	sub    esp,0x8
c000eaef:	50                   	push   eax
c000eaf0:	68 dd a0 02 c0       	push   0xc002a0dd
c000eaf5:	e8 f0 44 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c000eafa:	83 c4 10             	add    esp,0x10
c000eafd:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb04:	0f 85 5f 02 00 00    	jne    c000ed69 <Computer::displayFeatures()+0x2c7>
c000eb0a:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c000eb0f:	83 ec 08             	sub    esp,0x8
c000eb12:	50                   	push   eax
c000eb13:	68 ee a0 02 c0       	push   0xc002a0ee
c000eb18:	e8 cd 44 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c000eb1d:	83 c4 10             	add    esp,0x10
c000eb20:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb27:	0f 85 32 02 00 00    	jne    c000ed5f <Computer::displayFeatures()+0x2bd>
c000eb2d:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c000eb32:	83 ec 08             	sub    esp,0x8
c000eb35:	50                   	push   eax
c000eb36:	68 ff a0 02 c0       	push   0xc002a0ff
c000eb3b:	e8 aa 44 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c000eb40:	83 c4 10             	add    esp,0x10
c000eb43:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb4a:	0f 85 05 02 00 00    	jne    c000ed55 <Computer::displayFeatures()+0x2b3>
c000eb50:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c000eb55:	83 ec 08             	sub    esp,0x8
c000eb58:	50                   	push   eax
c000eb59:	68 10 a1 02 c0       	push   0xc002a110
c000eb5e:	e8 87 44 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c000eb63:	83 c4 10             	add    esp,0x10
c000eb66:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000eb6d:	0f 85 d8 01 00 00    	jne    c000ed4b <Computer::displayFeatures()+0x2a9>
c000eb73:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c000eb78:	83 ec 08             	sub    esp,0x8
c000eb7b:	50                   	push   eax
c000eb7c:	68 21 a1 02 c0       	push   0xc002a121
c000eb81:	e8 64 44 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c000eb86:	83 c4 10             	add    esp,0x10
c000eb89:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000eb90:	0f 85 ab 01 00 00    	jne    c000ed41 <Computer::displayFeatures()+0x29f>
c000eb96:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c000eb9b:	83 ec 08             	sub    esp,0x8
c000eb9e:	50                   	push   eax
c000eb9f:	68 32 a1 02 c0       	push   0xc002a132
c000eba4:	e8 41 44 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c000eba9:	83 c4 10             	add    esp,0x10
c000ebac:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebb3:	0f 88 1b 02 00 00    	js     c000edd4 <Computer::displayFeatures()+0x332>
c000ebb9:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c000ebbe:	83 ec 08             	sub    esp,0x8
c000ebc1:	50                   	push   eax
c000ebc2:	68 43 a1 02 c0       	push   0xc002a143
c000ebc7:	e8 1e 44 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c000ebcc:	83 c4 10             	add    esp,0x10
c000ebcf:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ebd6:	0f 85 a1 01 00 00    	jne    c000ed7d <Computer::displayFeatures()+0x2db>
c000ebdc:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c000ebe1:	83 ec 08             	sub    esp,0x8
c000ebe4:	50                   	push   eax
c000ebe5:	68 54 a1 02 c0       	push   0xc002a154
c000ebea:	e8 fb 43 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c000ebef:	83 c4 10             	add    esp,0x10
c000ebf2:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ebf9:	0f 85 cb 01 00 00    	jne    c000edca <Computer::displayFeatures()+0x328>
c000ebff:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c000ec04:	83 ec 08             	sub    esp,0x8
c000ec07:	50                   	push   eax
c000ec08:	68 65 a1 02 c0       	push   0xc002a165
c000ec0d:	e8 d8 43 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c000ec12:	83 c4 10             	add    esp,0x10
c000ec15:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec1c:	0f 85 9e 01 00 00    	jne    c000edc0 <Computer::displayFeatures()+0x31e>
c000ec22:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c000ec27:	83 ec 08             	sub    esp,0x8
c000ec2a:	50                   	push   eax
c000ec2b:	68 76 a1 02 c0       	push   0xc002a176
c000ec30:	e8 b5 43 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c000ec35:	83 c4 10             	add    esp,0x10
c000ec38:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec3f:	0f 85 71 01 00 00    	jne    c000edb6 <Computer::displayFeatures()+0x314>
c000ec45:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c000ec4a:	83 ec 08             	sub    esp,0x8
c000ec4d:	50                   	push   eax
c000ec4e:	68 87 a1 02 c0       	push   0xc002a187
c000ec53:	e8 92 43 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c000ec58:	83 c4 10             	add    esp,0x10
c000ec5b:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ec62:	0f 85 44 01 00 00    	jne    c000edac <Computer::displayFeatures()+0x30a>
c000ec68:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c000ec6d:	83 ec 08             	sub    esp,0x8
c000ec70:	50                   	push   eax
c000ec71:	68 98 a1 02 c0       	push   0xc002a198
c000ec76:	e8 6f 43 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c000ec7b:	83 c4 10             	add    esp,0x10
c000ec7e:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ec85:	0f 85 17 01 00 00    	jne    c000eda2 <Computer::displayFeatures()+0x300>
c000ec8b:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c000ec90:	83 ec 08             	sub    esp,0x8
c000ec93:	50                   	push   eax
c000ec94:	68 a9 a1 02 c0       	push   0xc002a1a9
c000ec99:	e8 4c 43 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c000ec9e:	83 c4 10             	add    esp,0x10
c000eca1:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000eca8:	0f 85 ea 00 00 00    	jne    c000ed98 <Computer::displayFeatures()+0x2f6>
c000ecae:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c000ecb3:	83 ec 08             	sub    esp,0x8
c000ecb6:	50                   	push   eax
c000ecb7:	68 ba a1 02 c0       	push   0xc002a1ba
c000ecbc:	e8 29 43 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c000ecc1:	83 c4 10             	add    esp,0x10
c000ecc4:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000eccb:	0f 88 0d 01 00 00    	js     c000edde <Computer::displayFeatures()+0x33c>
c000ecd1:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c000ecd6:	83 ec 08             	sub    esp,0x8
c000ecd9:	50                   	push   eax
c000ecda:	68 cb a1 02 c0       	push   0xc002a1cb
c000ecdf:	e8 06 43 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c000ece4:	83 c4 10             	add    esp,0x10
c000ece7:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ecee:	0f 85 9a 00 00 00    	jne    c000ed8e <Computer::displayFeatures()+0x2ec>
c000ecf4:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c000ecf9:	83 ec 08             	sub    esp,0x8
c000ecfc:	50                   	push   eax
c000ecfd:	68 dc a1 02 c0       	push   0xc002a1dc
c000ed02:	e8 e3 42 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c000ed07:	83 c4 10             	add    esp,0x10
c000ed0a:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed11:	75 74                	jne    c000ed87 <Computer::displayFeatures()+0x2e5>
c000ed13:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c000ed18:	83 ec 08             	sub    esp,0x8
c000ed1b:	50                   	push   eax
c000ed1c:	68 ed a1 02 c0       	push   0xc002a1ed
c000ed21:	e8 c4 42 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c000ed26:	c7 44 24 20 94 bb 02 c0 	mov    DWORD PTR [esp+0x20],0xc002bb94
c000ed2e:	83 c4 18             	add    esp,0x18
c000ed31:	5b                   	pop    ebx
c000ed32:	e9 b3 42 00 00       	jmp    c0012fea <Dbg::kprintf(char const*, ...)>
c000ed37:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c000ed3c:	e9 88 fd ff ff       	jmp    c000eac9 <Computer::displayFeatures()+0x27>
c000ed41:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c000ed46:	e9 50 fe ff ff       	jmp    c000eb9b <Computer::displayFeatures()+0xf9>
c000ed4b:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c000ed50:	e9 23 fe ff ff       	jmp    c000eb78 <Computer::displayFeatures()+0xd6>
c000ed55:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c000ed5a:	e9 f6 fd ff ff       	jmp    c000eb55 <Computer::displayFeatures()+0xb3>
c000ed5f:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c000ed64:	e9 c9 fd ff ff       	jmp    c000eb32 <Computer::displayFeatures()+0x90>
c000ed69:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c000ed6e:	e9 9c fd ff ff       	jmp    c000eb0f <Computer::displayFeatures()+0x6d>
c000ed73:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c000ed78:	e9 6f fd ff ff       	jmp    c000eaec <Computer::displayFeatures()+0x4a>
c000ed7d:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c000ed82:	e9 5a fe ff ff       	jmp    c000ebe1 <Computer::displayFeatures()+0x13f>
c000ed87:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c000ed8c:	eb 8a                	jmp    c000ed18 <Computer::displayFeatures()+0x276>
c000ed8e:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c000ed93:	e9 61 ff ff ff       	jmp    c000ecf9 <Computer::displayFeatures()+0x257>
c000ed98:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c000ed9d:	e9 11 ff ff ff       	jmp    c000ecb3 <Computer::displayFeatures()+0x211>
c000eda2:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c000eda7:	e9 e4 fe ff ff       	jmp    c000ec90 <Computer::displayFeatures()+0x1ee>
c000edac:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c000edb1:	e9 b7 fe ff ff       	jmp    c000ec6d <Computer::displayFeatures()+0x1cb>
c000edb6:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c000edbb:	e9 8a fe ff ff       	jmp    c000ec4a <Computer::displayFeatures()+0x1a8>
c000edc0:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c000edc5:	e9 5d fe ff ff       	jmp    c000ec27 <Computer::displayFeatures()+0x185>
c000edca:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c000edcf:	e9 30 fe ff ff       	jmp    c000ec04 <Computer::displayFeatures()+0x162>
c000edd4:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c000edd9:	e9 e0 fd ff ff       	jmp    c000ebbe <Computer::displayFeatures()+0x11c>
c000edde:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c000ede3:	e9 ee fe ff ff       	jmp    c000ecd6 <Computer::displayFeatures()+0x234>

c000ede8 <Computer::rdmsr(unsigned int)>:
c000ede8:	83 ec 0c             	sub    esp,0xc
c000edeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edef:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edf6:	74 0a                	je     c000ee02 <Computer::rdmsr(unsigned int)+0x1a>
c000edf8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000edfc:	0f 32                	rdmsr  
c000edfe:	83 c4 0c             	add    esp,0xc
c000ee01:	c3                   	ret    
c000ee02:	83 ec 0c             	sub    esp,0xc
c000ee05:	68 fe a1 02 c0       	push   0xc002a1fe
c000ee0a:	e8 80 b8 00 00       	call   c001a68f <Krnl::panic(char const*)>
c000ee0f:	83 c4 10             	add    esp,0x10
c000ee12:	eb e4                	jmp    c000edf8 <Computer::rdmsr(unsigned int)+0x10>

c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee14:	57                   	push   edi
c000ee15:	56                   	push   esi
c000ee16:	52                   	push   edx
c000ee17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee1b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee1f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee23:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee2a:	74 0e                	je     c000ee3a <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee2c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee30:	89 f0                	mov    eax,esi
c000ee32:	89 fa                	mov    edx,edi
c000ee34:	0f 30                	wrmsr  
c000ee36:	58                   	pop    eax
c000ee37:	5e                   	pop    esi
c000ee38:	5f                   	pop    edi
c000ee39:	c3                   	ret    
c000ee3a:	83 ec 0c             	sub    esp,0xc
c000ee3d:	68 04 a2 02 c0       	push   0xc002a204
c000ee42:	e8 48 b8 00 00       	call   c001a68f <Krnl::panic(char const*)>
c000ee47:	83 c4 10             	add    esp,0x10
c000ee4a:	eb e0                	jmp    c000ee2c <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee4c <Computer::nmiEnabled()>:
c000ee4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee50:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ee56:	c3                   	ret    
c000ee57:	90                   	nop

c000ee58 <Computer::readCMOS(unsigned char)>:
c000ee58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee5c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ee63:	19 c0                	sbb    eax,eax
c000ee65:	83 e0 80             	and    eax,0xffffff80
c000ee68:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee6c:	e6 70                	out    0x70,al
c000ee6e:	e4 71                	in     al,0x71
c000ee70:	c3                   	ret    
c000ee71:	90                   	nop

c000ee72 <Computer::enableNMI(bool)>:
c000ee72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee7a:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee80:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee88:	eb ce                	jmp    c000ee58 <Computer::readCMOS(unsigned char)>

c000ee8a <Computer::open(int, int, void*)>:
c000ee8a:	56                   	push   esi
c000ee8b:	53                   	push   ebx
c000ee8c:	83 ec 10             	sub    esp,0x10
c000ee8f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee93:	f6 05 e0 e4 02 c0 04 	test   BYTE PTR ds:0xc002e4e0,0x4
c000ee9a:	68 68 12 00 00       	push   0x1268
c000ee9f:	0f 94 05 04 d4 02 c0 	sete   BYTE PTR ds:0xc002d404
c000eea6:	e8 98 09 00 00       	call   c000f843 <malloc>
c000eeab:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeae:	89 c6                	mov    esi,eax
c000eeb0:	e8 c5 93 00 00       	call   c001827a <ACPI::ACPI()>
c000eeb5:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eebb:	58                   	pop    eax
c000eebc:	5a                   	pop    edx
c000eebd:	56                   	push   esi
c000eebe:	53                   	push   ebx
c000eebf:	e8 4c 55 00 00       	call   c0014410 <Device::addChild(Device*)>
c000eec4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eec7:	e8 cc f9 ff ff       	call   c000e898 <Computer::detectFeatures()>
c000eecc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eecf:	e8 ce fb ff ff       	call   c000eaa2 <Computer::displayFeatures()>
c000eed4:	59                   	pop    ecx
c000eed5:	5e                   	pop    esi
c000eed6:	6a 01                	push   0x1
c000eed8:	53                   	push   ebx
c000eed9:	e8 94 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000eede:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eee5:	e8 59 09 00 00       	call   c000f843 <malloc>
c000eeea:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeed:	89 c6                	mov    esi,eax
c000eeef:	e8 72 9f 00 00       	call   c0018e66 <CPU::CPU()>
c000eef4:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eefa:	58                   	pop    eax
c000eefb:	5a                   	pop    edx
c000eefc:	56                   	push   esi
c000eefd:	53                   	push   ebx
c000eefe:	e8 0d 55 00 00       	call   c0014410 <Device::addChild(Device*)>
c000ef03:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef09:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef0f:	6a 00                	push   0x0
c000ef11:	6a 00                	push   0x0
c000ef13:	50                   	push   eax
c000ef14:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef17:	83 c4 20             	add    esp,0x20
c000ef1a:	e8 77 5a 00 00       	call   c0014996 <setupFPU()>
c000ef1f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef25:	85 c0                	test   eax,eax
c000ef27:	74 1f                	je     c000ef48 <Computer::open(int, int, void*)+0xbe>
c000ef29:	83 ec 08             	sub    esp,0x8
c000ef2c:	50                   	push   eax
c000ef2d:	53                   	push   ebx
c000ef2e:	e8 dd 54 00 00       	call   c0014410 <Device::addChild(Device*)>
c000ef33:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef39:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef3b:	6a 00                	push   0x0
c000ef3d:	6a 00                	push   0x0
c000ef3f:	6a 00                	push   0x0
c000ef41:	50                   	push   eax
c000ef42:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef45:	83 c4 20             	add    esp,0x20
c000ef48:	83 ec 0c             	sub    esp,0xc
c000ef4b:	68 4a e6 00 c0       	push   0xc000e64a
c000ef50:	e8 61 f1 00 00       	call   c001e0b6 <setupMultitasking(void (*)())>
c000ef55:	83 c4 14             	add    esp,0x14
c000ef58:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef5d:	5b                   	pop    ebx
c000ef5e:	5e                   	pop    esi
c000ef5f:	c3                   	ret    

c000ef60 <Computer::disableNMI()>:
c000ef60:	6a 00                	push   0x0
c000ef62:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef66:	e8 07 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000ef6b:	58                   	pop    eax
c000ef6c:	5a                   	pop    edx
c000ef6d:	c3                   	ret    

c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ef6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef72:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef79:	19 c0                	sbb    eax,eax
c000ef7b:	83 e0 80             	and    eax,0xffffff80
c000ef7e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef82:	e6 70                	out    0x70,al
c000ef84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef88:	e6 71                	out    0x71,al
c000ef8a:	c3                   	ret    
c000ef8b:	90                   	nop

c000ef8c <Computer::handleNMI()>:
c000ef8c:	56                   	push   esi
c000ef8d:	53                   	push   ebx
c000ef8e:	83 ec 10             	sub    esp,0x10
c000ef91:	e4 92                	in     al,0x92
c000ef93:	89 c6                	mov    esi,eax
c000ef95:	e4 61                	in     al,0x61
c000ef97:	68 0a a2 02 c0       	push   0xc002a20a
c000ef9c:	88 c3                	mov    bl,al
c000ef9e:	e8 47 40 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c000efa3:	83 c4 10             	add    esp,0x10
c000efa6:	83 e6 10             	and    esi,0x10
c000efa9:	75 0d                	jne    c000efb8 <Computer::handleNMI()+0x2c>
c000efab:	f6 c3 40             	test   bl,0x40
c000efae:	75 1d                	jne    c000efcd <Computer::handleNMI()+0x41>
c000efb0:	84 db                	test   bl,bl
c000efb2:	78 2d                	js     c000efe1 <Computer::handleNMI()+0x55>
c000efb4:	58                   	pop    eax
c000efb5:	5b                   	pop    ebx
c000efb6:	5e                   	pop    esi
c000efb7:	c3                   	ret    
c000efb8:	83 ec 0c             	sub    esp,0xc
c000efbb:	68 1b a2 02 c0       	push   0xc002a21b
c000efc0:	e8 ca b6 00 00       	call   c001a68f <Krnl::panic(char const*)>
c000efc5:	83 c4 10             	add    esp,0x10
c000efc8:	f6 c3 40             	test   bl,0x40
c000efcb:	74 e3                	je     c000efb0 <Computer::handleNMI()+0x24>
c000efcd:	83 ec 0c             	sub    esp,0xc
c000efd0:	68 28 a2 02 c0       	push   0xc002a228
c000efd5:	e8 b5 b6 00 00       	call   c001a68f <Krnl::panic(char const*)>
c000efda:	83 c4 10             	add    esp,0x10
c000efdd:	84 db                	test   bl,bl
c000efdf:	79 d3                	jns    c000efb4 <Computer::handleNMI()+0x28>
c000efe1:	c7 44 24 10 32 a2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a232
c000efe9:	5a                   	pop    edx
c000efea:	5b                   	pop    ebx
c000efeb:	5e                   	pop    esi
c000efec:	e9 9e b6 00 00       	jmp    c001a68f <Krnl::panic(char const*)>
c000eff1:	90                   	nop

c000eff2 <Computer::setDiskActivityLight(int, bool)>:
c000eff2:	56                   	push   esi
c000eff3:	53                   	push   ebx
c000eff4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000eff8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000effd:	77 1b                	ja     c000f01a <Computer::setDiskActivityLight(int, bool)+0x28>
c000efff:	e4 92                	in     al,0x92
c000f001:	bb 40 00 00 00       	mov    ebx,0x40
c000f006:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f00a:	89 da                	mov    edx,ebx
c000f00c:	d3 e2                	shl    edx,cl
c000f00e:	89 f1                	mov    ecx,esi
c000f010:	f7 d2                	not    edx
c000f012:	d3 e3                	shl    ebx,cl
c000f014:	21 d0                	and    eax,edx
c000f016:	09 d8                	or     eax,ebx
c000f018:	e6 92                	out    0x92,al
c000f01a:	5b                   	pop    ebx
c000f01b:	5e                   	pop    esi
c000f01c:	c3                   	ret    
c000f01d:	90                   	nop

c000f01e <GDTEntry::setBase(unsigned int)>:
c000f01e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f022:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f026:	89 c1                	mov    ecx,eax
c000f028:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f02c:	c1 e9 10             	shr    ecx,0x10
c000f02f:	c1 e8 18             	shr    eax,0x18
c000f032:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f035:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f038:	c3                   	ret    
c000f039:	90                   	nop

c000f03a <GDTEntry::setLimit(unsigned int)>:
c000f03a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f03e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f042:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f045:	66 89 01             	mov    WORD PTR [ecx],ax
c000f048:	83 e2 f0             	and    edx,0xfffffff0
c000f04b:	c1 e8 10             	shr    eax,0x10
c000f04e:	83 e0 0f             	and    eax,0xf
c000f051:	09 d0                	or     eax,edx
c000f053:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f056:	c3                   	ret    
c000f057:	90                   	nop

c000f058 <GDT::GDT()>:
c000f058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f05c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f062:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f066:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f06c:	90                   	nop
c000f06d:	c3                   	ret    

c000f06e <GDT::addEntry(GDTEntry)>:
c000f06e:	53                   	push   ebx
c000f06f:	83 ec 0c             	sub    esp,0xc
c000f072:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f076:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f078:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f07f:	52                   	push   edx
c000f080:	50                   	push   eax
c000f081:	68 6c a2 02 c0       	push   0xc002a26c
c000f086:	e8 5f 3f 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c000f08b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f08d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f091:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f095:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f099:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f09d:	8d 50 01             	lea    edx,[eax+0x1]
c000f0a0:	c1 e0 03             	shl    eax,0x3
c000f0a3:	89 13                	mov    DWORD PTR [ebx],edx
c000f0a5:	83 c4 18             	add    esp,0x18
c000f0a8:	5b                   	pop    ebx
c000f0a9:	c3                   	ret    

c000f0aa <GDT::getNumberOfEntries()>:
c000f0aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b0:	c3                   	ret    
c000f0b1:	90                   	nop

c000f0b2 <GDT::flush()>:
c000f0b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b6:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0b8:	83 c0 04             	add    eax,0x4
c000f0bb:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0c2:	a3 d2 e4 02 c0       	mov    ds:0xc002e4d2,eax
c000f0c7:	66 89 15 d0 e4 02 c0 	mov    WORD PTR ds:0xc002e4d0,dx
c000f0ce:	e9 75 13 ff ff       	jmp    c0000448 <loadGDT>
c000f0d3:	90                   	nop

c000f0d4 <GDT::setup()>:
c000f0d4:	55                   	push   ebp
c000f0d5:	57                   	push   edi
c000f0d6:	56                   	push   esi
c000f0d7:	53                   	push   ebx
c000f0d8:	83 ec 3c             	sub    esp,0x3c
c000f0db:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f0df:	6a 00                	push   0x0
c000f0e1:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f0e5:	53                   	push   ebx
c000f0e6:	e8 33 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f0eb:	6a 00                	push   0x0
c000f0ed:	53                   	push   ebx
c000f0ee:	e8 47 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f0f3:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f0fb:	6a 00                	push   0x0
c000f0fd:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f101:	53                   	push   ebx
c000f102:	e8 17 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f107:	68 ff ff ff 00       	push   0xffffff
c000f10c:	53                   	push   ebx
c000f10d:	e8 28 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f112:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f116:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f11b:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f120:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f124:	83 c4 20             	add    esp,0x20
c000f127:	6a 00                	push   0x0
c000f129:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f12d:	53                   	push   ebx
c000f12e:	e8 eb fe ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f133:	68 ff ff ff 00       	push   0xffffff
c000f138:	53                   	push   ebx
c000f139:	e8 fc fe ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f13e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f142:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f146:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f14a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f14e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f152:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f157:	0d 00 92 c0 00       	or     eax,0xc09200
c000f15c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f160:	89 d8                	mov    eax,ebx
c000f162:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f166:	80 cc 60             	or     ah,0x60
c000f169:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f16d:	83 c4 0c             	add    esp,0xc
c000f170:	89 f8                	mov    eax,edi
c000f172:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f176:	80 cc 60             	or     ah,0x60
c000f179:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f17d:	89 c7                	mov    edi,eax
c000f17f:	55                   	push   ebp
c000f180:	e8 e9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f185:	83 c4 0c             	add    esp,0xc
c000f188:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f18c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f190:	55                   	push   ebp
c000f191:	e8 d8 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f196:	83 c4 0c             	add    esp,0xc
c000f199:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f19d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a1:	55                   	push   ebp
c000f1a2:	e8 c7 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1a7:	83 c4 0c             	add    esp,0xc
c000f1aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1b2:	53                   	push   ebx
c000f1b3:	51                   	push   ecx
c000f1b4:	55                   	push   ebp
c000f1b5:	e8 b4 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1ba:	83 c4 0c             	add    esp,0xc
c000f1bd:	57                   	push   edi
c000f1be:	56                   	push   esi
c000f1bf:	55                   	push   ebp
c000f1c0:	e8 a9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1c8:	e8 e5 fe ff ff       	call   c000f0b2 <GDT::flush()>
c000f1cd:	83 c4 4c             	add    esp,0x4c
c000f1d0:	5b                   	pop    ebx
c000f1d1:	5e                   	pop    esi
c000f1d2:	5f                   	pop    edi
c000f1d3:	5d                   	pop    ebp
c000f1d4:	c3                   	ret    

c000f1d5 <idleFunction(void*)>:
c000f1d5:	53                   	push   ebx
c000f1d6:	83 ec 08             	sub    esp,0x8
c000f1d9:	e8 a8 ec 00 00       	call   c001de86 <unlockScheduler()>
c000f1de:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c000f1e3:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f1e9:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f1f0:	74 3c                	je     c000f22e <idleFunction(void*)+0x59>
c000f1f2:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f1f9:	74 33                	je     c000f22e <idleFunction(void*)+0x59>
c000f1fb:	31 db                	xor    ebx,ebx
c000f1fd:	52                   	push   edx
c000f1fe:	52                   	push   edx
c000f1ff:	68 e1 00 00 00       	push   0xe1
c000f204:	50                   	push   eax
c000f205:	e8 de fb ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c000f20a:	53                   	push   ebx
c000f20b:	83 e0 02             	and    eax,0x2
c000f20e:	50                   	push   eax
c000f20f:	68 e1 00 00 00       	push   0xe1
c000f214:	ff 35 c8 e4 02 c0    	push   DWORD PTR ds:0xc002e4c8
c000f21a:	e8 f5 fb ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f21f:	83 c4 20             	add    esp,0x20
c000f222:	e8 58 10 ff ff       	call   c000027f <doTPAUSE>
c000f227:	e8 34 95 01 00       	call   c0028760 <idleCommon()>
c000f22c:	eb f4                	jmp    c000f222 <idleFunction(void*)+0x4d>
c000f22e:	fb                   	sti    
c000f22f:	f4                   	hlt    
c000f230:	e8 2b 95 01 00       	call   c0028760 <idleCommon()>
c000f235:	eb f7                	jmp    c000f22e <idleFunction(void*)+0x59>
c000f237:	90                   	nop

c000f238 <IDTEntry::IDTEntry(bool)>:
c000f238:	83 ec 04             	sub    esp,0x4
c000f23b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f23f:	88 04 24             	mov    BYTE PTR [esp],al
c000f242:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f246:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f24c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f250:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f254:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f258:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f25b:	83 e2 f0             	and    edx,0xfffffff0
c000f25e:	83 ca 0e             	or     edx,0xe
c000f261:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f264:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f268:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f26b:	83 e2 ef             	and    edx,0xffffffef
c000f26e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f271:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f275:	74 04                	je     c000f27b <IDTEntry::IDTEntry(bool)+0x43>
c000f277:	b2 03                	mov    dl,0x3
c000f279:	eb 02                	jmp    c000f27d <IDTEntry::IDTEntry(bool)+0x45>
c000f27b:	b2 00                	mov    dl,0x0
c000f27d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f281:	83 e2 03             	and    edx,0x3
c000f284:	88 d1                	mov    cl,dl
c000f286:	c1 e1 05             	shl    ecx,0x5
c000f289:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f28c:	83 e2 9f             	and    edx,0xffffff9f
c000f28f:	09 ca                	or     edx,ecx
c000f291:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f298:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f29b:	83 ca 80             	or     edx,0xffffff80
c000f29e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2a1:	90                   	nop
c000f2a2:	83 c4 04             	add    esp,0x4
c000f2a5:	c3                   	ret    

c000f2a6 <IDTEntry::setOffset(unsigned int)>:
c000f2a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ae:	66 89 02             	mov    WORD PTR [edx],ax
c000f2b1:	c1 e8 10             	shr    eax,0x10
c000f2b4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2b8:	c3                   	ret    
c000f2b9:	90                   	nop

c000f2ba <IDT::IDT()>:
c000f2ba:	90                   	nop
c000f2bb:	c3                   	ret    

c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2c0:	83 c0 30             	add    eax,0x30
c000f2c3:	c3                   	ret    

c000f2c4 <IDT::addEntry(IDTEntry, int)>:
c000f2c4:	53                   	push   ebx
c000f2c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2d5:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f2d8:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f2dc:	5b                   	pop    ebx
c000f2dd:	c3                   	ret    

c000f2de <IDT::addEntry(int, void (*)(), bool)>:
c000f2de:	53                   	push   ebx
c000f2df:	83 ec 10             	sub    esp,0x10
c000f2e2:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f2e7:	50                   	push   eax
c000f2e8:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f2ec:	53                   	push   ebx
c000f2ed:	e8 46 ff ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f2f2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2f6:	53                   	push   ebx
c000f2f7:	e8 aa ff ff ff       	call   c000f2a6 <IDTEntry::setOffset(unsigned int)>
c000f2fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f300:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f304:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f30c:	e8 b3 ff ff ff       	call   c000f2c4 <IDT::addEntry(IDTEntry, int)>
c000f311:	83 c4 30             	add    esp,0x30
c000f314:	5b                   	pop    ebx
c000f315:	c3                   	ret    

c000f316 <IDT::flush()>:
c000f316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f31a:	66 c7 05 d8 e4 02 c0 ff 07 	mov    WORD PTR ds:0xc002e4d8,0x7ff
c000f323:	a3 da e4 02 c0       	mov    ds:0xc002e4da,eax
c000f328:	0f 01 1d d8 e4 02 c0 	lidtd  ds:0xc002e4d8
c000f32f:	c3                   	ret    

c000f330 <IDT::setup()>:
c000f330:	57                   	push   edi
c000f331:	56                   	push   esi
c000f332:	53                   	push   ebx
c000f333:	83 ec 10             	sub    esp,0x10
c000f336:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f33a:	6a 00                	push   0x0
c000f33c:	68 68 04 00 c0       	push   0xc0000468
c000f341:	6a 00                	push   0x0
c000f343:	53                   	push   ebx
c000f344:	e8 95 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f349:	6a 00                	push   0x0
c000f34b:	68 78 04 00 c0       	push   0xc0000478
c000f350:	6a 01                	push   0x1
c000f352:	53                   	push   ebx
c000f353:	e8 86 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f358:	83 c4 20             	add    esp,0x20
c000f35b:	6a 00                	push   0x0
c000f35d:	68 82 04 00 c0       	push   0xc0000482
c000f362:	6a 02                	push   0x2
c000f364:	53                   	push   ebx
c000f365:	e8 74 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f36a:	6a 00                	push   0x0
c000f36c:	68 8c 04 00 c0       	push   0xc000048c
c000f371:	6a 03                	push   0x3
c000f373:	53                   	push   ebx
c000f374:	e8 65 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f379:	83 c4 20             	add    esp,0x20
c000f37c:	6a 00                	push   0x0
c000f37e:	68 96 04 00 c0       	push   0xc0000496
c000f383:	6a 04                	push   0x4
c000f385:	53                   	push   ebx
c000f386:	e8 53 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f38b:	6a 00                	push   0x0
c000f38d:	68 a0 04 00 c0       	push   0xc00004a0
c000f392:	6a 05                	push   0x5
c000f394:	53                   	push   ebx
c000f395:	e8 44 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f39a:	83 c4 20             	add    esp,0x20
c000f39d:	6a 00                	push   0x0
c000f39f:	68 aa 04 00 c0       	push   0xc00004aa
c000f3a4:	6a 06                	push   0x6
c000f3a6:	53                   	push   ebx
c000f3a7:	e8 32 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ac:	6a 00                	push   0x0
c000f3ae:	68 b4 04 00 c0       	push   0xc00004b4
c000f3b3:	6a 07                	push   0x7
c000f3b5:	53                   	push   ebx
c000f3b6:	e8 23 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3bb:	83 c4 20             	add    esp,0x20
c000f3be:	6a 00                	push   0x0
c000f3c0:	68 be 04 00 c0       	push   0xc00004be
c000f3c5:	6a 08                	push   0x8
c000f3c7:	53                   	push   ebx
c000f3c8:	e8 11 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3cd:	6a 00                	push   0x0
c000f3cf:	68 c6 04 00 c0       	push   0xc00004c6
c000f3d4:	6a 09                	push   0x9
c000f3d6:	53                   	push   ebx
c000f3d7:	e8 02 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3dc:	83 c4 20             	add    esp,0x20
c000f3df:	6a 00                	push   0x0
c000f3e1:	68 d0 04 00 c0       	push   0xc00004d0
c000f3e6:	6a 0a                	push   0xa
c000f3e8:	53                   	push   ebx
c000f3e9:	e8 f0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ee:	6a 00                	push   0x0
c000f3f0:	68 d8 04 00 c0       	push   0xc00004d8
c000f3f5:	6a 0b                	push   0xb
c000f3f7:	53                   	push   ebx
c000f3f8:	e8 e1 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3fd:	83 c4 20             	add    esp,0x20
c000f400:	6a 00                	push   0x0
c000f402:	68 e0 04 00 c0       	push   0xc00004e0
c000f407:	6a 0c                	push   0xc
c000f409:	53                   	push   ebx
c000f40a:	e8 cf fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f40f:	6a 00                	push   0x0
c000f411:	68 e8 04 00 c0       	push   0xc00004e8
c000f416:	6a 0d                	push   0xd
c000f418:	53                   	push   ebx
c000f419:	e8 c0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f41e:	83 c4 20             	add    esp,0x20
c000f421:	6a 00                	push   0x0
c000f423:	68 f0 04 00 c0       	push   0xc00004f0
c000f428:	6a 0e                	push   0xe
c000f42a:	53                   	push   ebx
c000f42b:	e8 ae fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f430:	6a 00                	push   0x0
c000f432:	68 f8 04 00 c0       	push   0xc00004f8
c000f437:	6a 0f                	push   0xf
c000f439:	53                   	push   ebx
c000f43a:	e8 9f fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f43f:	83 c4 20             	add    esp,0x20
c000f442:	6a 00                	push   0x0
c000f444:	68 02 05 00 c0       	push   0xc0000502
c000f449:	6a 10                	push   0x10
c000f44b:	53                   	push   ebx
c000f44c:	e8 8d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f451:	6a 00                	push   0x0
c000f453:	68 0c 05 00 c0       	push   0xc000050c
c000f458:	6a 11                	push   0x11
c000f45a:	53                   	push   ebx
c000f45b:	e8 7e fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f460:	83 c4 20             	add    esp,0x20
c000f463:	6a 00                	push   0x0
c000f465:	68 16 05 00 c0       	push   0xc0000516
c000f46a:	6a 12                	push   0x12
c000f46c:	53                   	push   ebx
c000f46d:	e8 6c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f472:	6a 01                	push   0x1
c000f474:	68 b0 05 00 c0       	push   0xc00005b0
c000f479:	6a 60                	push   0x60
c000f47b:	53                   	push   ebx
c000f47c:	e8 5d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f481:	83 c4 20             	add    esp,0x20
c000f484:	6a 00                	push   0x0
c000f486:	68 b7 05 00 c0       	push   0xc00005b7
c000f48b:	6a 20                	push   0x20
c000f48d:	53                   	push   ebx
c000f48e:	e8 4b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f493:	6a 00                	push   0x0
c000f495:	68 a2 05 00 c0       	push   0xc00005a2
c000f49a:	6a 21                	push   0x21
c000f49c:	53                   	push   ebx
c000f49d:	e8 3c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4a2:	83 c4 20             	add    esp,0x20
c000f4a5:	6a 00                	push   0x0
c000f4a7:	68 a9 05 00 c0       	push   0xc00005a9
c000f4ac:	6a 22                	push   0x22
c000f4ae:	53                   	push   ebx
c000f4af:	e8 2a fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4b4:	6a 00                	push   0x0
c000f4b6:	68 20 05 00 c0       	push   0xc0000520
c000f4bb:	6a 23                	push   0x23
c000f4bd:	53                   	push   ebx
c000f4be:	e8 1b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4c3:	83 c4 20             	add    esp,0x20
c000f4c6:	6a 00                	push   0x0
c000f4c8:	68 2a 05 00 c0       	push   0xc000052a
c000f4cd:	6a 24                	push   0x24
c000f4cf:	53                   	push   ebx
c000f4d0:	e8 09 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4d5:	6a 00                	push   0x0
c000f4d7:	68 34 05 00 c0       	push   0xc0000534
c000f4dc:	6a 25                	push   0x25
c000f4de:	53                   	push   ebx
c000f4df:	e8 fa fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4e4:	83 c4 20             	add    esp,0x20
c000f4e7:	6a 00                	push   0x0
c000f4e9:	68 3e 05 00 c0       	push   0xc000053e
c000f4ee:	6a 26                	push   0x26
c000f4f0:	53                   	push   ebx
c000f4f1:	e8 e8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4f6:	6a 00                	push   0x0
c000f4f8:	68 48 05 00 c0       	push   0xc0000548
c000f4fd:	6a 27                	push   0x27
c000f4ff:	53                   	push   ebx
c000f500:	e8 d9 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f505:	83 c4 20             	add    esp,0x20
c000f508:	6a 00                	push   0x0
c000f50a:	68 52 05 00 c0       	push   0xc0000552
c000f50f:	6a 28                	push   0x28
c000f511:	53                   	push   ebx
c000f512:	e8 c7 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f517:	6a 00                	push   0x0
c000f519:	68 5c 05 00 c0       	push   0xc000055c
c000f51e:	6a 29                	push   0x29
c000f520:	53                   	push   ebx
c000f521:	e8 b8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f526:	83 c4 20             	add    esp,0x20
c000f529:	6a 00                	push   0x0
c000f52b:	68 66 05 00 c0       	push   0xc0000566
c000f530:	6a 2a                	push   0x2a
c000f532:	53                   	push   ebx
c000f533:	e8 a6 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f538:	6a 00                	push   0x0
c000f53a:	68 70 05 00 c0       	push   0xc0000570
c000f53f:	6a 2b                	push   0x2b
c000f541:	53                   	push   ebx
c000f542:	e8 97 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f547:	83 c4 20             	add    esp,0x20
c000f54a:	6a 00                	push   0x0
c000f54c:	68 7a 05 00 c0       	push   0xc000057a
c000f551:	6a 2c                	push   0x2c
c000f553:	53                   	push   ebx
c000f554:	e8 85 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f559:	6a 00                	push   0x0
c000f55b:	68 84 05 00 c0       	push   0xc0000584
c000f560:	6a 2d                	push   0x2d
c000f562:	53                   	push   ebx
c000f563:	e8 76 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f568:	83 c4 20             	add    esp,0x20
c000f56b:	6a 00                	push   0x0
c000f56d:	68 8e 05 00 c0       	push   0xc000058e
c000f572:	6a 2e                	push   0x2e
c000f574:	53                   	push   ebx
c000f575:	e8 64 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f57a:	6a 00                	push   0x0
c000f57c:	68 98 05 00 c0       	push   0xc0000598
c000f581:	6a 2f                	push   0x2f
c000f583:	53                   	push   ebx
c000f584:	e8 55 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f589:	83 c4 20             	add    esp,0x20
c000f58c:	6a 00                	push   0x0
c000f58e:	68 ed 05 00 c0       	push   0xc00005ed
c000f593:	6a 30                	push   0x30
c000f595:	53                   	push   ebx
c000f596:	e8 43 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f59b:	6a 00                	push   0x0
c000f59d:	68 f7 05 00 c0       	push   0xc00005f7
c000f5a2:	6a 31                	push   0x31
c000f5a4:	53                   	push   ebx
c000f5a5:	e8 34 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5aa:	83 c4 20             	add    esp,0x20
c000f5ad:	6a 00                	push   0x0
c000f5af:	68 01 06 00 c0       	push   0xc0000601
c000f5b4:	6a 32                	push   0x32
c000f5b6:	53                   	push   ebx
c000f5b7:	e8 22 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5bc:	6a 00                	push   0x0
c000f5be:	68 0b 06 00 c0       	push   0xc000060b
c000f5c3:	6a 33                	push   0x33
c000f5c5:	53                   	push   ebx
c000f5c6:	e8 13 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5cb:	83 c4 20             	add    esp,0x20
c000f5ce:	6a 00                	push   0x0
c000f5d0:	68 15 06 00 c0       	push   0xc0000615
c000f5d5:	6a 34                	push   0x34
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 01 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5dd:	6a 00                	push   0x0
c000f5df:	68 1f 06 00 c0       	push   0xc000061f
c000f5e4:	6a 35                	push   0x35
c000f5e6:	53                   	push   ebx
c000f5e7:	e8 f2 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5ec:	83 c4 20             	add    esp,0x20
c000f5ef:	6a 00                	push   0x0
c000f5f1:	68 29 06 00 c0       	push   0xc0000629
c000f5f6:	6a 36                	push   0x36
c000f5f8:	53                   	push   ebx
c000f5f9:	e8 e0 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5fe:	6a 00                	push   0x0
c000f600:	68 33 06 00 c0       	push   0xc0000633
c000f605:	6a 37                	push   0x37
c000f607:	53                   	push   ebx
c000f608:	e8 d1 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f60d:	83 c4 20             	add    esp,0x20
c000f610:	e8 14 29 00 00       	call   c0011f29 <Virt::getAKernelVAS()>
c000f615:	52                   	push   edx
c000f616:	6a 03                	push   0x3
c000f618:	6a 02                	push   0x2
c000f61a:	50                   	push   eax
c000f61b:	e8 5a 2f 00 00       	call   c001257a <VAS::allocatePages(int, int)>
c000f620:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f627:	89 c6                	mov    esi,eax
c000f629:	e8 15 02 00 00       	call   c000f843 <malloc>
c000f62e:	81 c6 00 20 00 00    	add    esi,0x2000
c000f634:	89 04 24             	mov    DWORD PTR [esp],eax
c000f637:	89 c7                	mov    edi,eax
c000f639:	e8 6e 1e 00 00       	call   c00114ac <TSS::TSS()>
c000f63e:	83 c4 0c             	add    esp,0xc
c000f641:	68 be 04 00 c0       	push   0xc00004be
c000f646:	56                   	push   esi
c000f647:	57                   	push   edi
c000f648:	e8 9f 1e 00 00       	call   c00114ec <TSS::setup(unsigned long, unsigned long)>
c000f64d:	59                   	pop    ecx
c000f64e:	89 c6                	mov    esi,eax
c000f650:	5f                   	pop    edi
c000f651:	6a 00                	push   0x0
c000f653:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f657:	50                   	push   eax
c000f658:	e8 db fb ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f65d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f661:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f666:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f66d:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f673:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f677:	80 ce 05             	or     dh,0x5
c000f67a:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f67d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f681:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f685:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f688:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f68b:	e8 86 fc ff ff       	call   c000f316 <IDT::flush()>
c000f690:	83 c4 20             	add    esp,0x20
c000f693:	5b                   	pop    ebx
c000f694:	5e                   	pop    esi
c000f695:	5f                   	pop    edi
c000f696:	c3                   	ret    

c000f697 <sbrk>:
c000f697:	55                   	push   ebp
c000f698:	57                   	push   edi
c000f699:	56                   	push   esi
c000f69a:	53                   	push   ebx
c000f69b:	83 ec 1c             	sub    esp,0x1c
c000f69e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6a2:	85 c0                	test   eax,eax
c000f6a4:	74 3e                	je     c000f6e4 <sbrk+0x4d>
c000f6a6:	78 43                	js     c000f6eb <sbrk+0x54>
c000f6a8:	8b 15 c8 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e4c8
c000f6ae:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f6b4:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f6ba:	83 e2 01             	and    edx,0x1
c000f6bd:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f6c1:	8b 0d dc d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d3dc
c000f6c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f6cb:	05 ff 0f 00 00       	add    eax,0xfff
c000f6d0:	89 c2                	mov    edx,eax
c000f6d2:	78 2f                	js     c000f703 <sbrk+0x6c>
c000f6d4:	c1 fa 0c             	sar    edx,0xc
c000f6d7:	89 d7                	mov    edi,edx
c000f6d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6dd:	be 00 00 00 00       	mov    esi,0x0
c000f6e2:	eb 36                	jmp    c000f71a <sbrk+0x83>
c000f6e4:	a1 dc d3 02 c0       	mov    eax,ds:0xc002d3dc
c000f6e9:	eb 74                	jmp    c000f75f <sbrk+0xc8>
c000f6eb:	83 ec 08             	sub    esp,0x8
c000f6ee:	50                   	push   eax
c000f6ef:	68 88 a2 02 c0       	push   0xc002a288
c000f6f4:	e8 f1 38 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c000f6f9:	83 c4 10             	add    esp,0x10
c000f6fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f701:	eb 5c                	jmp    c000f75f <sbrk+0xc8>
c000f703:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f709:	eb c9                	jmp    c000f6d4 <sbrk+0x3d>
c000f70b:	81 05 dc d3 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002d3dc,0x1000
c000f715:	46                   	inc    esi
c000f716:	39 f7                	cmp    edi,esi
c000f718:	74 34                	je     c000f74e <sbrk+0xb7>
c000f71a:	e8 0a 28 00 00       	call   c0011f29 <Virt::getAKernelVAS()>
c000f71f:	89 c3                	mov    ebx,eax
c000f721:	8b 2d dc d3 02 c0    	mov    ebp,DWORD PTR ds:0xc002d3dc
c000f727:	e8 b4 07 00 00       	call   c000fee0 <Phys::allocatePage()>
c000f72c:	68 01 04 00 00       	push   0x401
c000f731:	55                   	push   ebp
c000f732:	50                   	push   eax
c000f733:	53                   	push   ebx
c000f734:	e8 41 2d 00 00       	call   c001247a <VAS::mapPage(unsigned long, unsigned long, int)>
c000f739:	83 c4 10             	add    esp,0x10
c000f73c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f741:	74 c8                	je     c000f70b <sbrk+0x74>
c000f743:	8b 1d dc d3 02 c0    	mov    ebx,DWORD PTR ds:0xc002d3dc
c000f749:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f74c:	eb bd                	jmp    c000f70b <sbrk+0x74>
c000f74e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f753:	75 12                	jne    c000f767 <sbrk+0xd0>
c000f755:	0f 20 d8             	mov    eax,cr3
c000f758:	0f 22 d8             	mov    cr3,eax
c000f75b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f75f:	83 c4 1c             	add    esp,0x1c
c000f762:	5b                   	pop    ebx
c000f763:	5e                   	pop    esi
c000f764:	5f                   	pop    edi
c000f765:	5d                   	pop    ebp
c000f766:	c3                   	ret    
c000f767:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f76b:	89 cb                	mov    ebx,ecx
c000f76d:	c1 eb 0a             	shr    ebx,0xa
c000f770:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f776:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f77c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f780:	c1 e0 0c             	shl    eax,0xc
c000f783:	01 c8                	add    eax,ecx
c000f785:	c1 e8 0a             	shr    eax,0xa
c000f788:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f78d:	2d 00 00 40 00       	sub    eax,0x400000
c000f792:	39 c3                	cmp    ebx,eax
c000f794:	77 c5                	ja     c000f75b <sbrk+0xc4>
c000f796:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f799:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f79f:	39 d8                	cmp    eax,ebx
c000f7a1:	73 f3                	jae    c000f796 <sbrk+0xff>
c000f7a3:	eb b6                	jmp    c000f75b <sbrk+0xc4>

c000f7a5 <mmap>:
c000f7a5:	83 ec 18             	sub    esp,0x18
c000f7a8:	68 b8 a2 02 c0       	push   0xc002a2b8
c000f7ad:	e8 dd ae 00 00       	call   c001a68f <Krnl::panic(char const*)>
c000f7b2:	b8 00 00 00 00       	mov    eax,0x0
c000f7b7:	83 c4 1c             	add    esp,0x1c
c000f7ba:	c3                   	ret    

c000f7bb <munmap>:
c000f7bb:	83 ec 18             	sub    esp,0x18
c000f7be:	68 bd a2 02 c0       	push   0xc002a2bd
c000f7c3:	e8 c7 ae 00 00       	call   c001a68f <Krnl::panic(char const*)>
c000f7c8:	b8 00 00 00 00       	mov    eax,0x0
c000f7cd:	83 c4 1c             	add    esp,0x1c
c000f7d0:	c3                   	ret    

c000f7d1 <liballoc_lock()>:
c000f7d1:	83 ec 0c             	sub    esp,0xc
c000f7d4:	e8 ab e6 00 00       	call   c001de84 <lockScheduler()>
c000f7d9:	b8 00 00 00 00       	mov    eax,0x0
c000f7de:	83 c4 0c             	add    esp,0xc
c000f7e1:	c3                   	ret    

c000f7e2 <liballoc_unlock()>:
c000f7e2:	83 ec 0c             	sub    esp,0xc
c000f7e5:	e8 9c e6 00 00       	call   c001de86 <unlockScheduler()>
c000f7ea:	b8 00 00 00 00       	mov    eax,0x0
c000f7ef:	83 c4 0c             	add    esp,0xc
c000f7f2:	c3                   	ret    

c000f7f3 <liballoc_alloc(int)>:
c000f7f3:	83 ec 0c             	sub    esp,0xc
c000f7f6:	e8 2e 27 00 00       	call   c0011f29 <Virt::getAKernelVAS()>
c000f7fb:	83 ec 04             	sub    esp,0x4
c000f7fe:	68 01 08 00 00       	push   0x801
c000f803:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f807:	50                   	push   eax
c000f808:	e8 6d 2d 00 00       	call   c001257a <VAS::allocatePages(int, int)>
c000f80d:	83 c4 1c             	add    esp,0x1c
c000f810:	c3                   	ret    

c000f811 <liballoc_free(void*, int)>:
c000f811:	83 ec 0c             	sub    esp,0xc
c000f814:	e8 10 27 00 00       	call   c0011f29 <Virt::getAKernelVAS()>
c000f819:	83 ec 08             	sub    esp,0x8
c000f81c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f820:	50                   	push   eax
c000f821:	e8 10 2a 00 00       	call   c0012236 <VAS::freeAllocatedPages(unsigned long)>
c000f826:	b8 00 00 00 00       	mov    eax,0x0
c000f82b:	83 c4 1c             	add    esp,0x1c
c000f82e:	c3                   	ret    

c000f82f <realloc>:
c000f82f:	83 ec 14             	sub    esp,0x14
c000f832:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f836:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f83a:	e8 15 1e ff ff       	call   c0001654 <dlrealloc>
c000f83f:	83 c4 1c             	add    esp,0x1c
c000f842:	c3                   	ret    

c000f843 <malloc>:
c000f843:	83 ec 18             	sub    esp,0x18
c000f846:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f84a:	e8 c8 18 ff ff       	call   c0001117 <dlmalloc>
c000f84f:	83 c4 1c             	add    esp,0x1c
c000f852:	c3                   	ret    

c000f853 <free>:
c000f853:	83 ec 18             	sub    esp,0x18
c000f856:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f85a:	e8 5d 15 ff ff       	call   c0000dbc <dlfree>
c000f85f:	83 c4 1c             	add    esp,0x1c
c000f862:	c3                   	ret    

c000f863 <rfree>:
c000f863:	83 ec 18             	sub    esp,0x18
c000f866:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f86a:	e8 4d 15 ff ff       	call   c0000dbc <dlfree>
c000f86f:	83 c4 1c             	add    esp,0x1c
c000f872:	c3                   	ret    

c000f873 <calloc>:
c000f873:	56                   	push   esi
c000f874:	53                   	push   ebx
c000f875:	83 ec 10             	sub    esp,0x10
c000f878:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f87c:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f881:	53                   	push   ebx
c000f882:	e8 bc ff ff ff       	call   c000f843 <malloc>
c000f887:	89 c6                	mov    esi,eax
c000f889:	83 c4 0c             	add    esp,0xc
c000f88c:	53                   	push   ebx
c000f88d:	6a 00                	push   0x0
c000f88f:	50                   	push   eax
c000f890:	e8 e3 0e ff ff       	call   c0000778 <memset>
c000f895:	89 f0                	mov    eax,esi
c000f897:	83 c4 14             	add    esp,0x14
c000f89a:	5b                   	pop    ebx
c000f89b:	5e                   	pop    esi
c000f89c:	c3                   	ret    

c000f89d <hwTextMode_loadInData(VgaText*)>:
c000f89d:	55                   	push   ebp
c000f89e:	a1 00 d4 02 c0       	mov    eax,ds:0xc002d400
c000f8a3:	57                   	push   edi
c000f8a4:	56                   	push   esi
c000f8a5:	53                   	push   ebx
c000f8a6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8aa:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f8b0:	85 d2                	test   edx,edx
c000f8b2:	7e 2f                	jle    c000f8e3 <hwTextMode_loadInData(VgaText*)+0x46>
c000f8b4:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f8ba:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f8bd:	31 f6                	xor    esi,esi
c000f8bf:	29 fd                	sub    ebp,edi
c000f8c1:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f8c4:	31 c0                	xor    eax,eax
c000f8c6:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f8ca:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f8ce:	40                   	inc    eax
c000f8cf:	83 f8 50             	cmp    eax,0x50
c000f8d2:	75 f2                	jne    c000f8c6 <hwTextMode_loadInData(VgaText*)+0x29>
c000f8d4:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f8da:	46                   	inc    esi
c000f8db:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f8e1:	7f de                	jg     c000f8c1 <hwTextMode_loadInData(VgaText*)+0x24>
c000f8e3:	5b                   	pop    ebx
c000f8e4:	5e                   	pop    esi
c000f8e5:	5f                   	pop    edi
c000f8e6:	5d                   	pop    ebp
c000f8e7:	c3                   	ret    

c000f8e8 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f8e8:	55                   	push   ebp
c000f8e9:	80 3d 60 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e560,0x0
c000f8f0:	57                   	push   edi
c000f8f1:	56                   	push   esi
c000f8f2:	53                   	push   ebx
c000f8f3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f8f7:	75 50                	jne    c000f949 <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f8f9:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f8ff:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f905:	8b 15 00 d4 02 c0    	mov    edx,DWORD PTR ds:0xc002d400
c000f90b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f90f:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f915:	eb 0e                	jmp    c000f925 <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f917:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f91d:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f923:	89 da                	mov    edx,ebx
c000f925:	83 e5 0f             	and    ebp,0xf
c000f928:	c1 e0 04             	shl    eax,0x4
c000f92b:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f92e:	0f b6 c0             	movzx  eax,al
c000f931:	41                   	inc    ecx
c000f932:	09 e8                	or     eax,ebp
c000f934:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f938:	c1 e0 08             	shl    eax,0x8
c000f93b:	09 e8                	or     eax,ebp
c000f93d:	39 fb                	cmp    ebx,edi
c000f93f:	66 89 02             	mov    WORD PTR [edx],ax
c000f942:	75 d3                	jne    c000f917 <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f944:	5b                   	pop    ebx
c000f945:	5e                   	pop    esi
c000f946:	5f                   	pop    edi
c000f947:	5d                   	pop    ebp
c000f948:	c3                   	ret    
c000f949:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f953:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f95d:	31 c0                	xor    eax,eax
c000f95f:	bd 02 00 00 00       	mov    ebp,0x2
c000f964:	eb 9f                	jmp    c000f905 <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f966 <hwTextMode_showCursor(VgaText*, bool)>:
c000f966:	56                   	push   esi
c000f967:	80 3d 60 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e560,0x0
c000f96e:	53                   	push   ebx
c000f96f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f973:	75 39                	jne    c000f9ae <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f975:	84 c0                	test   al,al
c000f977:	74 38                	je     c000f9b1 <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f979:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f97e:	b0 0a                	mov    al,0xa
c000f980:	89 da                	mov    edx,ebx
c000f982:	ee                   	out    dx,al
c000f983:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f988:	89 ca                	mov    edx,ecx
c000f98a:	ec                   	in     al,dx
c000f98b:	b2 0f                	mov    dl,0xf
c000f98d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f991:	83 e0 c0             	and    eax,0xffffffc0
c000f994:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f99a:	09 d0                	or     eax,edx
c000f99c:	89 ca                	mov    edx,ecx
c000f99e:	ee                   	out    dx,al
c000f99f:	b0 0b                	mov    al,0xb
c000f9a1:	89 da                	mov    edx,ebx
c000f9a3:	ee                   	out    dx,al
c000f9a4:	89 ca                	mov    edx,ecx
c000f9a6:	ec                   	in     al,dx
c000f9a7:	83 e0 e0             	and    eax,0xffffffe0
c000f9aa:	83 c8 0f             	or     eax,0xf
c000f9ad:	ee                   	out    dx,al
c000f9ae:	5b                   	pop    ebx
c000f9af:	5e                   	pop    esi
c000f9b0:	c3                   	ret    
c000f9b1:	b0 0a                	mov    al,0xa
c000f9b3:	ba d4 03 00 00       	mov    edx,0x3d4
c000f9b8:	ee                   	out    dx,al
c000f9b9:	b0 20                	mov    al,0x20
c000f9bb:	ba d5 03 00 00       	mov    edx,0x3d5
c000f9c0:	ee                   	out    dx,al
c000f9c1:	5b                   	pop    ebx
c000f9c2:	5e                   	pop    esi
c000f9c3:	c3                   	ret    

c000f9c4 <hwTextMode_update(VgaText*)>:
c000f9c4:	c3                   	ret    

c000f9c5 <hwTextMode_updateCursor(VgaText*)>:
c000f9c5:	56                   	push   esi
c000f9c6:	80 3d 60 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e560,0x0
c000f9cd:	53                   	push   ebx
c000f9ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9d2:	75 3f                	jne    c000fa13 <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f9d4:	be d4 03 00 00       	mov    esi,0x3d4
c000f9d9:	b9 19 00 00 00       	mov    ecx,0x19
c000f9de:	89 f2                	mov    edx,esi
c000f9e0:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f9e6:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f9ec:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f9ef:	c1 e1 04             	shl    ecx,0x4
c000f9f2:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f9f8:	b0 0f                	mov    al,0xf
c000f9fa:	ee                   	out    dx,al
c000f9fb:	bb d5 03 00 00       	mov    ebx,0x3d5
c000fa00:	88 c8                	mov    al,cl
c000fa02:	89 da                	mov    edx,ebx
c000fa04:	ee                   	out    dx,al
c000fa05:	b0 0e                	mov    al,0xe
c000fa07:	89 f2                	mov    edx,esi
c000fa09:	ee                   	out    dx,al
c000fa0a:	89 c8                	mov    eax,ecx
c000fa0c:	89 da                	mov    edx,ebx
c000fa0e:	66 c1 e8 08          	shr    ax,0x8
c000fa12:	ee                   	out    dx,al
c000fa13:	5b                   	pop    ebx
c000fa14:	5e                   	pop    esi
c000fa15:	c3                   	ret    

c000fa16 <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa1a:	80 3d 60 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e560,0x0
c000fa21:	75 38                	jne    c000fa5b <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa23:	ba da 03 00 00       	mov    edx,0x3da
c000fa28:	84 c0                	test   al,al
c000fa2a:	75 18                	jne    c000fa44 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa2c:	ec                   	in     al,dx
c000fa2d:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa32:	b0 30                	mov    al,0x30
c000fa34:	89 ca                	mov    edx,ecx
c000fa36:	ee                   	out    dx,al
c000fa37:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa3c:	ec                   	in     al,dx
c000fa3d:	83 c8 08             	or     eax,0x8
c000fa40:	89 ca                	mov    edx,ecx
c000fa42:	ee                   	out    dx,al
c000fa43:	c3                   	ret    
c000fa44:	ec                   	in     al,dx
c000fa45:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa4a:	b0 30                	mov    al,0x30
c000fa4c:	89 ca                	mov    edx,ecx
c000fa4e:	ee                   	out    dx,al
c000fa4f:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa54:	ec                   	in     al,dx
c000fa55:	83 e0 f7             	and    eax,0xfffffff7
c000fa58:	89 ca                	mov    edx,ecx
c000fa5a:	ee                   	out    dx,al
c000fa5b:	c3                   	ret    

c000fa5c <hwTextMode_scrollScreen(VgaText*)>:
c000fa5c:	55                   	push   ebp
c000fa5d:	57                   	push   edi
c000fa5e:	56                   	push   esi
c000fa5f:	53                   	push   ebx
c000fa60:	83 ec 1c             	sub    esp,0x1c
c000fa63:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa67:	80 3d 60 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e560,0x0
c000fa6e:	74 14                	je     c000fa84 <hwTextMode_scrollScreen(VgaText*)+0x28>
c000fa70:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000fa7a:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000fa84:	a1 00 d4 02 c0       	mov    eax,ds:0xc002d400
c000fa89:	bd 02 00 00 00       	mov    ebp,0x2
c000fa8e:	05 a0 00 00 00       	add    eax,0xa0
c000fa93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa97:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fa9b:	31 c0                	xor    eax,eax
c000fa9d:	eb 0b                	jmp    c000faaa <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000fa9f:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faa5:	74 57                	je     c000fafe <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000faa7:	43                   	inc    ebx
c000faa8:	89 f0                	mov    eax,esi
c000faaa:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000fab0:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fab6:	88 13                	mov    BYTE PTR [ebx],dl
c000fab8:	8d 70 01             	lea    esi,[eax+0x1]
c000fabb:	83 fd 18             	cmp    ebp,0x18
c000fabe:	75 df                	jne    c000fa9f <hwTextMode_scrollScreen(VgaText*)+0x43>
c000fac0:	a8 01                	test   al,0x1
c000fac2:	75 13                	jne    c000fad7 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000fac4:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fac7:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000facd:	75 d8                	jne    c000faa7 <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000facf:	83 c4 1c             	add    esp,0x1c
c000fad2:	5b                   	pop    ebx
c000fad3:	5e                   	pop    esi
c000fad4:	5f                   	pop    edi
c000fad5:	5d                   	pop    ebp
c000fad6:	c3                   	ret    
c000fad7:	83 ec 08             	sub    esp,0x8
c000fada:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000fae1:	50                   	push   eax
c000fae2:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fae6:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000faed:	50                   	push   eax
c000faee:	e8 8b 0c 00 00       	call   c001077e <VgaText::combineColours(unsigned char, unsigned char)>
c000faf3:	83 c4 10             	add    esp,0x10
c000faf6:	88 07                	mov    BYTE PTR [edi],al
c000faf8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fafc:	eb c9                	jmp    c000fac7 <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000fafe:	45                   	inc    ebp
c000faff:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb07:	eb 8e                	jmp    c000fa97 <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000fb09 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb09:	57                   	push   edi
c000fb0a:	80 3d 60 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e560,0x0
c000fb11:	56                   	push   esi
c000fb12:	53                   	push   ebx
c000fb13:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb17:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb1b:	75 65                	jne    c000fb82 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000fb1d:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb22:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb27:	83 ec 08             	sub    esp,0x8
c000fb2a:	52                   	push   edx
c000fb2b:	50                   	push   eax
c000fb2c:	e8 4d 0c 00 00       	call   c001077e <VgaText::combineColours(unsigned char, unsigned char)>
c000fb31:	5a                   	pop    edx
c000fb32:	0f b6 c0             	movzx  eax,al
c000fb35:	59                   	pop    ecx
c000fb36:	50                   	push   eax
c000fb37:	0f be c3             	movsx  eax,bl
c000fb3a:	50                   	push   eax
c000fb3b:	e8 e4 0c 00 00       	call   c0010824 <VgaText::combineCharAndColour(char, unsigned char)>
c000fb40:	83 c4 10             	add    esp,0x10
c000fb43:	8b 35 00 d4 02 c0    	mov    esi,DWORD PTR ds:0xc002d400
c000fb49:	80 3d 60 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e560,0x0
c000fb50:	74 07                	je     c000fb59 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb52:	66 0f be c3          	movsx  ax,bl
c000fb56:	80 cc 02             	or     ah,0x2
c000fb59:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb5d:	ba 19 00 00 00       	mov    edx,0x19
c000fb62:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000fb68:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb6b:	8d 14 92             	lea    edx,[edx+edx*4]
c000fb6e:	c1 e1 04             	shl    ecx,0x4
c000fb71:	c1 e2 04             	shl    edx,0x4
c000fb74:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fb78:	01 ca                	add    edx,ecx
c000fb7a:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fb7e:	5b                   	pop    ebx
c000fb7f:	5e                   	pop    esi
c000fb80:	5f                   	pop    edi
c000fb81:	c3                   	ret    
c000fb82:	b8 02 00 00 00       	mov    eax,0x2
c000fb87:	31 d2                	xor    edx,edx
c000fb89:	eb 9c                	jmp    c000fb27 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fb8b <setupTextMode()>:
c000fb8b:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fb90:	83 e0 30             	and    eax,0x30
c000fb93:	66 83 f8 30          	cmp    ax,0x30
c000fb97:	75 11                	jne    c000fbaa <setupTextMode()+0x1f>
c000fb99:	81 2d 00 d4 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002d400,0x8000
c000fba3:	c6 05 60 e5 02 c0 01 	mov    BYTE PTR ds:0xc002e560,0x1
c000fbaa:	c7 05 98 e5 02 c0 16 fa 00 c0 	mov    DWORD PTR ds:0xc002e598,0xc000fa16
c000fbb4:	c7 05 84 e5 02 c0 9d f8 00 c0 	mov    DWORD PTR ds:0xc002e584,0xc000f89d
c000fbbe:	c7 05 80 e5 02 c0 e8 f8 00 c0 	mov    DWORD PTR ds:0xc002e580,0xc000f8e8
c000fbc8:	c7 05 8c e5 02 c0 5c fa 00 c0 	mov    DWORD PTR ds:0xc002e58c,0xc000fa5c
c000fbd2:	c7 05 94 e5 02 c0 66 f9 00 c0 	mov    DWORD PTR ds:0xc002e594,0xc000f966
c000fbdc:	c7 05 88 e5 02 c0 c4 f9 00 c0 	mov    DWORD PTR ds:0xc002e588,0xc000f9c4
c000fbe6:	c7 05 90 e5 02 c0 c5 f9 00 c0 	mov    DWORD PTR ds:0xc002e590,0xc000f9c5
c000fbf0:	c7 05 9c e5 02 c0 09 fb 00 c0 	mov    DWORD PTR ds:0xc002e59c,0xc000fb09
c000fbfa:	c3                   	ret    

c000fbfb <kernel_main>:
c000fbfb:	57                   	push   edi
c000fbfc:	bf f9 03 00 00       	mov    edi,0x3f9
c000fc01:	56                   	push   esi
c000fc02:	31 f6                	xor    esi,esi
c000fc04:	53                   	push   ebx
c000fc05:	83 ec 20             	sub    esp,0x20
c000fc08:	e8 cb 09 00 00       	call   c00105d8 <installVgaTextImplementation()>
c000fc0d:	e8 79 ff ff ff       	call   c000fb8b <setupTextMode()>
c000fc12:	89 f0                	mov    eax,esi
c000fc14:	89 fa                	mov    edx,edi
c000fc16:	ee                   	out    dx,al
c000fc17:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc1c:	b0 80                	mov    al,0x80
c000fc1e:	89 da                	mov    edx,ebx
c000fc20:	ee                   	out    dx,al
c000fc21:	b1 03                	mov    cl,0x3
c000fc23:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc28:	88 c8                	mov    al,cl
c000fc2a:	ee                   	out    dx,al
c000fc2b:	89 f0                	mov    eax,esi
c000fc2d:	89 fa                	mov    edx,edi
c000fc2f:	ee                   	out    dx,al
c000fc30:	88 c8                	mov    al,cl
c000fc32:	89 da                	mov    edx,ebx
c000fc34:	ee                   	out    dx,al
c000fc35:	b0 c7                	mov    al,0xc7
c000fc37:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc3c:	ee                   	out    dx,al
c000fc3d:	b0 0b                	mov    al,0xb
c000fc3f:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc44:	ee                   	out    dx,al
c000fc45:	83 ec 0c             	sub    esp,0xc
c000fc48:	68 c4 a2 02 c0       	push   0xc002a2c4
c000fc4d:	e8 98 33 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c000fc52:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc57:	05 ff 0f 00 00       	add    eax,0xfff
c000fc5c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc61:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc64:	e8 2a 04 00 00       	call   c0010093 <Phys::physicalMemorySetup(unsigned int)>
c000fc69:	e8 3c 22 00 00       	call   c0011eaa <Virt::virtualMemorySetup()>
c000fc6e:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fc74:	83 c4 10             	add    esp,0x10
c000fc77:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fc7d:	75 0e                	jne    c000fc8d <kernel_main+0x92>
c000fc7f:	89 d8                	mov    eax,ebx
c000fc81:	25 48 03 00 00       	and    eax,0x348
c000fc86:	3d 00 03 00 00       	cmp    eax,0x300
c000fc8b:	74 10                	je     c000fc9d <kernel_main+0xa2>
c000fc8d:	83 ec 0c             	sub    esp,0xc
c000fc90:	68 95 bb 02 c0       	push   0xc002bb95
c000fc95:	e8 f5 a9 00 00       	call   c001a68f <Krnl::panic(char const*)>
c000fc9a:	83 c4 10             	add    esp,0x10
c000fc9d:	83 ec 0c             	sub    esp,0xc
c000fca0:	89 1d e0 e4 02 c0    	mov    DWORD PTR ds:0xc002e4e0,ebx
c000fca6:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fcaa:	53                   	push   ebx
c000fcab:	e8 ae 23 00 00       	call   c001205e <VAS::VAS()>
c000fcb0:	89 1d 4c e6 02 c0    	mov    DWORD PTR ds:0xc002e64c,ebx
c000fcb6:	e8 65 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fcbb:	c7 04 24 db a2 02 c0 	mov    DWORD PTR [esp],0xc002a2db
c000fcc2:	e8 23 33 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c000fcc7:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fcce:	e8 70 fb ff ff       	call   c000f843 <malloc>
c000fcd3:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcd6:	89 c6                	mov    esi,eax
c000fcd8:	e8 5d ea ff ff       	call   c000e73a <Computer::Computer()>
c000fcdd:	58                   	pop    eax
c000fcde:	89 35 c8 e4 02 c0    	mov    DWORD PTR ds:0xc002e4c8,esi
c000fce4:	5a                   	pop    edx
c000fce5:	56                   	push   esi
c000fce6:	68 f8 a2 02 c0       	push   0xc002a2f8
c000fceb:	e8 fa 32 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c000fcf0:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c000fcf5:	8b 10                	mov    edx,DWORD PTR [eax]
c000fcf7:	6a 00                	push   0x0
c000fcf9:	6a 00                	push   0x0
c000fcfb:	6a 00                	push   0x0
c000fcfd:	50                   	push   eax
c000fcfe:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fd01:	83 c4 14             	add    esp,0x14
c000fd04:	53                   	push   ebx
c000fd05:	e8 04 26 00 00       	call   c001230e <VAS::~VAS()>
c000fd0a:	c7 04 24 0b a3 02 c0 	mov    DWORD PTR [esp],0xc002a30b
c000fd11:	e8 79 a9 00 00       	call   c001a68f <Krnl::panic(char const*)>
c000fd16:	83 c4 30             	add    esp,0x30
c000fd19:	5b                   	pop    ebx
c000fd1a:	5e                   	pop    esi
c000fd1b:	5f                   	pop    edi
c000fd1c:	c3                   	ret    

c000fd1d <Phys::allocateDMA(unsigned long)>:
c000fd1d:	55                   	push   ebp
c000fd1e:	31 d2                	xor    edx,edx
c000fd20:	57                   	push   edi
c000fd21:	31 ed                	xor    ebp,ebp
c000fd23:	56                   	push   esi
c000fd24:	31 c9                	xor    ecx,ecx
c000fd26:	53                   	push   ebx
c000fd27:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd2b:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd31:	31 c0                	xor    eax,eax
c000fd33:	c1 ee 0c             	shr    esi,0xc
c000fd36:	eb 17                	jmp    c000fd4f <Phys::allocateDMA(unsigned long)+0x32>
c000fd38:	85 c9                	test   ecx,ecx
c000fd3a:	75 04                	jne    c000fd40 <Phys::allocateDMA(unsigned long)+0x23>
c000fd3c:	89 d5                	mov    ebp,edx
c000fd3e:	89 d0                	mov    eax,edx
c000fd40:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd43:	39 de                	cmp    esi,ebx
c000fd45:	74 20                	je     c000fd67 <Phys::allocateDMA(unsigned long)+0x4a>
c000fd47:	42                   	inc    edx
c000fd48:	89 d9                	mov    ecx,ebx
c000fd4a:	83 fa 2f             	cmp    edx,0x2f
c000fd4d:	7f 11                	jg     c000fd60 <Phys::allocateDMA(unsigned long)+0x43>
c000fd4f:	80 ba 20 e5 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd1ae0],0x0
c000fd56:	74 e0                	je     c000fd38 <Phys::allocateDMA(unsigned long)+0x1b>
c000fd58:	31 c9                	xor    ecx,ecx
c000fd5a:	42                   	inc    edx
c000fd5b:	83 fa 2f             	cmp    edx,0x2f
c000fd5e:	7e ef                	jle    c000fd4f <Phys::allocateDMA(unsigned long)+0x32>
c000fd60:	5b                   	pop    ebx
c000fd61:	31 c0                	xor    eax,eax
c000fd63:	5e                   	pop    esi
c000fd64:	5f                   	pop    edi
c000fd65:	5d                   	pop    ebp
c000fd66:	c3                   	ret    
c000fd67:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd6a:	89 d7                	mov    edi,edx
c000fd6c:	4f                   	dec    edi
c000fd6d:	79 03                	jns    c000fd72 <Phys::allocateDMA(unsigned long)+0x55>
c000fd6f:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fd72:	c1 ff 04             	sar    edi,0x4
c000fd75:	89 c2                	mov    edx,eax
c000fd77:	c1 fa 04             	sar    edx,0x4
c000fd7a:	39 fa                	cmp    edx,edi
c000fd7c:	75 2f                	jne    c000fdad <Phys::allocateDMA(unsigned long)+0x90>
c000fd7e:	85 db                	test   ebx,ebx
c000fd80:	74 1a                	je     c000fd9c <Phys::allocateDMA(unsigned long)+0x7f>
c000fd82:	be 20 e5 02 c0       	mov    esi,0xc002e520
c000fd87:	8d 90 20 e5 02 c0    	lea    edx,[eax-0x3ffd1ae0]
c000fd8d:	f7 d6                	not    esi
c000fd8f:	29 c6                	sub    esi,eax
c000fd91:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fd94:	42                   	inc    edx
c000fd95:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fd98:	39 d9                	cmp    ecx,ebx
c000fd9a:	7f f5                	jg     c000fd91 <Phys::allocateDMA(unsigned long)+0x74>
c000fd9c:	85 ff                	test   edi,edi
c000fd9e:	74 13                	je     c000fdb3 <Phys::allocateDMA(unsigned long)+0x96>
c000fda0:	5b                   	pop    ebx
c000fda1:	05 50 20 0c 00       	add    eax,0xc2050
c000fda6:	5e                   	pop    esi
c000fda7:	c1 e0 0c             	shl    eax,0xc
c000fdaa:	5f                   	pop    edi
c000fdab:	5d                   	pop    ebp
c000fdac:	c3                   	ret    
c000fdad:	89 ea                	mov    edx,ebp
c000fdaf:	31 c9                	xor    ecx,ecx
c000fdb1:	eb a7                	jmp    c000fd5a <Phys::allocateDMA(unsigned long)+0x3d>
c000fdb3:	5b                   	pop    ebx
c000fdb4:	c1 e0 0c             	shl    eax,0xc
c000fdb7:	5e                   	pop    esi
c000fdb8:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fdbd:	5f                   	pop    edi
c000fdbe:	5d                   	pop    ebp
c000fdbf:	c3                   	ret    

c000fdc0 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fdc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdc4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fdc8:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fdce:	c1 e9 0c             	shr    ecx,0xc
c000fdd1:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fdd6:	76 25                	jbe    c000fdfd <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fdd8:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fddd:	c1 e8 0c             	shr    eax,0xc
c000fde0:	8d 50 10             	lea    edx,[eax+0x10]
c000fde3:	85 c9                	test   ecx,ecx
c000fde5:	74 15                	je     c000fdfc <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fde7:	8d 82 20 e5 02 c0    	lea    eax,[edx-0x3ffd1ae0]
c000fded:	8d 94 11 20 e5 02 c0 	lea    edx,[ecx+edx*1-0x3ffd1ae0]
c000fdf4:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fdf7:	40                   	inc    eax
c000fdf8:	39 d0                	cmp    eax,edx
c000fdfa:	75 f8                	jne    c000fdf4 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fdfc:	c3                   	ret    
c000fdfd:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe03:	c1 ea 0c             	shr    edx,0xc
c000fe06:	eb db                	jmp    c000fde3 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe08 <Phys::setPageState(unsigned long, bool)>:
c000fe08:	56                   	push   esi
c000fe09:	ba 01 00 00 00       	mov    edx,0x1
c000fe0e:	53                   	push   ebx
c000fe0f:	8b 35 e0 d3 02 c0    	mov    esi,DWORD PTR ds:0xc002d3e0
c000fe15:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe19:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe1d:	89 c8                	mov    eax,ecx
c000fe1f:	83 e1 07             	and    ecx,0x7
c000fe22:	c1 e8 03             	shr    eax,0x3
c000fe25:	d3 e3                	shl    ebx,cl
c000fe27:	01 c6                	add    esi,eax
c000fe29:	d3 e2                	shl    edx,cl
c000fe2b:	f7 d2                	not    edx
c000fe2d:	20 16                	and    BYTE PTR [esi],dl
c000fe2f:	03 05 e0 d3 02 c0    	add    eax,DWORD PTR ds:0xc002d3e0
c000fe35:	08 18                	or     BYTE PTR [eax],bl
c000fe37:	5b                   	pop    ebx
c000fe38:	5e                   	pop    esi
c000fe39:	c3                   	ret    

c000fe3a <Phys::getPageState(unsigned long)>:
c000fe3a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe3e:	8b 15 e0 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d3e0
c000fe44:	89 c8                	mov    eax,ecx
c000fe46:	83 e1 07             	and    ecx,0x7
c000fe49:	c1 e8 03             	shr    eax,0x3
c000fe4c:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe50:	d3 f8                	sar    eax,cl
c000fe52:	83 e0 01             	and    eax,0x1
c000fe55:	c3                   	ret    

c000fe56 <Phys::freePage(unsigned long)>:
c000fe56:	53                   	push   ebx
c000fe57:	83 ec 08             	sub    esp,0x8
c000fe5a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe5e:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe64:	76 57                	jbe    c000febd <Phys::freePage(unsigned long)+0x67>
c000fe66:	c1 eb 0c             	shr    ebx,0xc
c000fe69:	53                   	push   ebx
c000fe6a:	e8 cb ff ff ff       	call   c000fe3a <Phys::getPageState(unsigned long)>
c000fe6f:	5a                   	pop    edx
c000fe70:	84 c0                	test   al,al
c000fe72:	74 5b                	je     c000fecf <Phys::freePage(unsigned long)+0x79>
c000fe74:	a1 10 e5 02 c0       	mov    eax,ds:0xc002e510
c000fe79:	48                   	dec    eax
c000fe7a:	a3 10 e5 02 c0       	mov    ds:0xc002e510,eax
c000fe7f:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe82:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe85:	c1 e0 02             	shl    eax,0x2
c000fe88:	99                   	cdq    
c000fe89:	f7 3d 14 e5 02 c0    	idiv   DWORD PTR ds:0xc002e514
c000fe8f:	39 05 0c e5 02 c0    	cmp    DWORD PTR ds:0xc002e50c,eax
c000fe95:	75 13                	jne    c000feaa <Phys::freePage(unsigned long)+0x54>
c000fe97:	83 ec 08             	sub    esp,0x8
c000fe9a:	6a 00                	push   0x0
c000fe9c:	53                   	push   ebx
c000fe9d:	e8 66 ff ff ff       	call   c000fe08 <Phys::setPageState(unsigned long, bool)>
c000fea2:	83 c4 10             	add    esp,0x10
c000fea5:	83 c4 08             	add    esp,0x8
c000fea8:	5b                   	pop    ebx
c000fea9:	c3                   	ret    
c000feaa:	83 ec 0c             	sub    esp,0xc
c000fead:	a3 0c e5 02 c0       	mov    ds:0xc002e50c,eax
c000feb2:	50                   	push   eax
c000feb3:	e8 b4 0a 00 00       	call   c001096c <VgaText::updateRAMUsageDisplay(int)>
c000feb8:	83 c4 10             	add    esp,0x10
c000febb:	eb da                	jmp    c000fe97 <Phys::freePage(unsigned long)+0x41>
c000febd:	68 00 10 00 00       	push   0x1000
c000fec2:	53                   	push   ebx
c000fec3:	e8 f8 fe ff ff       	call   c000fdc0 <Phys::freeDMA(unsigned long, unsigned long)>
c000fec8:	59                   	pop    ecx
c000fec9:	5b                   	pop    ebx
c000feca:	83 c4 08             	add    esp,0x8
c000fecd:	5b                   	pop    ebx
c000fece:	c3                   	ret    
c000fecf:	c7 44 24 10 26 a3 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a326
c000fed7:	83 c4 08             	add    esp,0x8
c000feda:	5b                   	pop    ebx
c000fedb:	e9 af a7 00 00       	jmp    c001a68f <Krnl::panic(char const*)>

c000fee0 <Phys::allocatePage()>:
c000fee0:	56                   	push   esi
c000fee1:	53                   	push   ebx
c000fee2:	83 ec 14             	sub    esp,0x14
c000fee5:	8b 35 04 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e504
c000feeb:	89 f3                	mov    ebx,esi
c000feed:	eb 0a                	jmp    c000fef9 <Phys::allocatePage()+0x19>
c000feef:	89 1d 04 e5 02 c0    	mov    DWORD PTR ds:0xc002e504,ebx
c000fef5:	39 de                	cmp    esi,ebx
c000fef7:	74 24                	je     c000ff1d <Phys::allocatePage()+0x3d>
c000fef9:	53                   	push   ebx
c000fefa:	e8 3b ff ff ff       	call   c000fe3a <Phys::getPageState(unsigned long)>
c000feff:	5a                   	pop    edx
c000ff00:	84 c0                	test   al,al
c000ff02:	74 7b                	je     c000ff7f <Phys::allocatePage()+0x9f>
c000ff04:	43                   	inc    ebx
c000ff05:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff0b:	75 e2                	jne    c000feef <Phys::allocatePage()+0xf>
c000ff0d:	31 db                	xor    ebx,ebx
c000ff0f:	c7 05 04 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e504,0x0
c000ff19:	39 de                	cmp    esi,ebx
c000ff1b:	75 dc                	jne    c000fef9 <Phys::allocatePage()+0x19>
c000ff1d:	83 ec 0c             	sub    esp,0xc
c000ff20:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff25:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ff28:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000ff2e:	e8 b3 2d 00 00       	call   c0012ce6 <VAS::scanForEviction()>
c000ff33:	83 c4 10             	add    esp,0x10
c000ff36:	85 c0                	test   eax,eax
c000ff38:	0f 85 a8 00 00 00    	jne    c000ffe6 <Phys::allocatePage()+0x106>
c000ff3e:	83 ec 0c             	sub    esp,0xc
c000ff41:	68 4b a3 02 c0       	push   0xc002a34b
c000ff46:	e8 9f 30 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c000ff4b:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff52:	e8 c6 fd ff ff       	call   c000fd1d <Phys::allocateDMA(unsigned long)>
c000ff57:	83 c4 10             	add    esp,0x10
c000ff5a:	85 c0                	test   eax,eax
c000ff5c:	75 6f                	jne    c000ffcd <Phys::allocatePage()+0xed>
c000ff5e:	83 ec 0c             	sub    esp,0xc
c000ff61:	68 5c a3 02 c0       	push   0xc002a35c
c000ff66:	e8 24 a7 00 00       	call   c001a68f <Krnl::panic(char const*)>
c000ff6b:	83 c4 10             	add    esp,0x10
c000ff6e:	8b 1d 04 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e504
c000ff74:	53                   	push   ebx
c000ff75:	e8 c0 fe ff ff       	call   c000fe3a <Phys::getPageState(unsigned long)>
c000ff7a:	5a                   	pop    edx
c000ff7b:	84 c0                	test   al,al
c000ff7d:	75 85                	jne    c000ff04 <Phys::allocatePage()+0x24>
c000ff7f:	6a 01                	push   0x1
c000ff81:	53                   	push   ebx
c000ff82:	e8 81 fe ff ff       	call   c000fe08 <Phys::setPageState(unsigned long, bool)>
c000ff87:	a1 10 e5 02 c0       	mov    eax,ds:0xc002e510
c000ff8c:	40                   	inc    eax
c000ff8d:	a3 10 e5 02 c0       	mov    ds:0xc002e510,eax
c000ff92:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff95:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff98:	c1 e0 02             	shl    eax,0x2
c000ff9b:	99                   	cdq    
c000ff9c:	f7 3d 14 e5 02 c0    	idiv   DWORD PTR ds:0xc002e514
c000ffa2:	5a                   	pop    edx
c000ffa3:	39 05 0c e5 02 c0    	cmp    DWORD PTR ds:0xc002e50c,eax
c000ffa9:	59                   	pop    ecx
c000ffaa:	75 27                	jne    c000ffd3 <Phys::allocatePage()+0xf3>
c000ffac:	83 ec 08             	sub    esp,0x8
c000ffaf:	a1 04 e5 02 c0       	mov    eax,ds:0xc002e504
c000ffb4:	c1 e0 0c             	shl    eax,0xc
c000ffb7:	50                   	push   eax
c000ffb8:	68 3c a3 02 c0       	push   0xc002a33c
c000ffbd:	e8 28 30 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c000ffc2:	a1 04 e5 02 c0       	mov    eax,ds:0xc002e504
c000ffc7:	83 c4 10             	add    esp,0x10
c000ffca:	c1 e0 0c             	shl    eax,0xc
c000ffcd:	83 c4 14             	add    esp,0x14
c000ffd0:	5b                   	pop    ebx
c000ffd1:	5e                   	pop    esi
c000ffd2:	c3                   	ret    
c000ffd3:	83 ec 0c             	sub    esp,0xc
c000ffd6:	a3 0c e5 02 c0       	mov    ds:0xc002e50c,eax
c000ffdb:	50                   	push   eax
c000ffdc:	e8 8b 09 00 00       	call   c001096c <VgaText::updateRAMUsageDisplay(int)>
c000ffe1:	83 c4 10             	add    esp,0x10
c000ffe4:	eb c6                	jmp    c000ffac <Phys::allocatePage()+0xcc>
c000ffe6:	83 ec 08             	sub    esp,0x8
c000ffe9:	50                   	push   eax
c000ffea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ffee:	68 3c a3 02 c0       	push   0xc002a33c
c000fff3:	e8 f2 2f 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c000fff8:	83 c4 10             	add    esp,0x10
c000fffb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ffff:	eb cc                	jmp    c000ffcd <Phys::allocatePage()+0xed>

c0010001 <Phys::allocateContiguousPages(int)>:
c0010001:	57                   	push   edi
c0010002:	56                   	push   esi
c0010003:	53                   	push   ebx
c0010004:	31 db                	xor    ebx,ebx
c0010006:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001000a:	e8 75 de 00 00       	call   c001de84 <lockScheduler()>
c001000f:	85 db                	test   ebx,ebx
c0010011:	75 11                	jne    c0010024 <Phys::allocateContiguousPages(int)+0x23>
c0010013:	e8 c8 fe ff ff       	call   c000fee0 <Phys::allocatePage()>
c0010018:	83 ff 01             	cmp    edi,0x1
c001001b:	89 c6                	mov    esi,eax
c001001d:	74 21                	je     c0010040 <Phys::allocateContiguousPages(int)+0x3f>
c001001f:	bb 01 00 00 00       	mov    ebx,0x1
c0010024:	e8 b7 fe ff ff       	call   c000fee0 <Phys::allocatePage()>
c0010029:	89 da                	mov    edx,ebx
c001002b:	c1 e2 0c             	shl    edx,0xc
c001002e:	01 f2                	add    edx,esi
c0010030:	39 c2                	cmp    edx,eax
c0010032:	74 17                	je     c001004b <Phys::allocateContiguousPages(int)+0x4a>
c0010034:	bb 01 00 00 00       	mov    ebx,0x1
c0010039:	89 c6                	mov    esi,eax
c001003b:	83 ff 01             	cmp    edi,0x1
c001003e:	75 e4                	jne    c0010024 <Phys::allocateContiguousPages(int)+0x23>
c0010040:	e8 41 de 00 00       	call   c001de86 <unlockScheduler()>
c0010045:	89 f0                	mov    eax,esi
c0010047:	5b                   	pop    ebx
c0010048:	5e                   	pop    esi
c0010049:	5f                   	pop    edi
c001004a:	c3                   	ret    
c001004b:	43                   	inc    ebx
c001004c:	39 fb                	cmp    ebx,edi
c001004e:	75 bf                	jne    c001000f <Phys::allocateContiguousPages(int)+0xe>
c0010050:	e8 31 de 00 00       	call   c001de86 <unlockScheduler()>
c0010055:	89 f0                	mov    eax,esi
c0010057:	5b                   	pop    ebx
c0010058:	5e                   	pop    esi
c0010059:	5f                   	pop    edi
c001005a:	c3                   	ret    

c001005b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c001005b:	56                   	push   esi
c001005c:	53                   	push   ebx
c001005d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010061:	39 1d 08 e5 02 c0    	cmp    DWORD PTR ds:0xc002e508,ebx
c0010067:	73 06                	jae    c001006f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0010069:	89 1d 08 e5 02 c0    	mov    DWORD PTR ds:0xc002e508,ebx
c001006f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010073:	c1 eb 0c             	shr    ebx,0xc
c0010076:	c1 e8 0c             	shr    eax,0xc
c0010079:	39 d8                	cmp    eax,ebx
c001007b:	73 13                	jae    c0010090 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c001007d:	6a 00                	push   0x0
c001007f:	8d 70 01             	lea    esi,[eax+0x1]
c0010082:	50                   	push   eax
c0010083:	e8 80 fd ff ff       	call   c000fe08 <Phys::setPageState(unsigned long, bool)>
c0010088:	5a                   	pop    edx
c0010089:	89 f0                	mov    eax,esi
c001008b:	59                   	pop    ecx
c001008c:	39 f3                	cmp    ebx,esi
c001008e:	75 ed                	jne    c001007d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0010090:	5b                   	pop    ebx
c0010091:	5e                   	pop    esi
c0010092:	c3                   	ret    

c0010093 <Phys::physicalMemorySetup(unsigned int)>:
c0010093:	55                   	push   ebp
c0010094:	57                   	push   edi
c0010095:	56                   	push   esi
c0010096:	53                   	push   ebx
c0010097:	31 db                	xor    ebx,ebx
c0010099:	83 ec 40             	sub    esp,0x40
c001009c:	6a 30                	push   0x30
c001009e:	6a 00                	push   0x0
c00100a0:	68 20 e5 02 c0       	push   0xc002e520
c00100a5:	e8 ce 06 ff ff       	call   c0000778 <memset>
c00100aa:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00100ae:	25 00 f0 ff ff       	and    eax,0xfffff000
c00100b3:	05 00 10 00 00       	add    eax,0x1000
c00100b8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00100bc:	83 c4 10             	add    esp,0x10
c00100bf:	83 ec 08             	sub    esp,0x8
c00100c2:	6a 01                	push   0x1
c00100c4:	53                   	push   ebx
c00100c5:	43                   	inc    ebx
c00100c6:	e8 3d fd ff ff       	call   c000fe08 <Phys::setPageState(unsigned long, bool)>
c00100cb:	83 c4 10             	add    esp,0x10
c00100ce:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00100d4:	75 e9                	jne    c00100bf <Phys::physicalMemorySetup(unsigned int)+0x2c>
c00100d6:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c00100dd:	66 85 c0             	test   ax,ax
c00100e0:	0f 84 8e 01 00 00    	je     c0010274 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c00100e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00100ea:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00100f2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00100f6:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00100fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00100ff:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0010107:	eb 15                	jmp    c001011e <Phys::physicalMemorySetup(unsigned int)+0x8b>
c0010109:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001010d:	83 c3 18             	add    ebx,0x18
c0010110:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010114:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0010118:	0f 84 66 01 00 00    	je     c0010284 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c001011e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0010121:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010124:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0010127:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001012b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001012f:	8b 33                	mov    esi,DWORD PTR [ebx]
c0010131:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0010134:	01 f0                	add    eax,esi
c0010136:	55                   	push   ebp
c0010137:	11 fa                	adc    edx,edi
c0010139:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001013d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0010141:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0010145:	56                   	push   esi
c0010146:	68 94 a3 02 c0       	push   0xc002a394
c001014b:	e8 9a 2e 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0010150:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010154:	83 c4 10             	add    esp,0x10
c0010157:	09 f8                	or     eax,edi
c0010159:	0f 85 25 01 00 00    	jne    c0010284 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c001015f:	4d                   	dec    ebp
c0010160:	75 a7                	jne    c0010109 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010162:	ba 00 00 08 00       	mov    edx,0x80000
c0010167:	89 c1                	mov    ecx,eax
c0010169:	39 f2                	cmp    edx,esi
c001016b:	19 f9                	sbb    ecx,edi
c001016d:	0f 82 a7 00 00 00    	jb     c001021a <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010173:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0010177:	89 c1                	mov    ecx,eax
c0010179:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c001017d:	0f 83 97 00 00 00    	jae    c001021a <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010183:	ba 00 00 0a 00       	mov    edx,0xa0000
c0010188:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001018c:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010190:	39 fa                	cmp    edx,edi
c0010192:	19 e8                	sbb    eax,ebp
c0010194:	0f 82 14 01 00 00    	jb     c00102ae <Phys::physicalMemorySetup(unsigned int)+0x21b>
c001019a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001019e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00101a2:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00101a8:	ba ff 1f 00 00       	mov    edx,0x1fff
c00101ad:	83 d5 ff             	adc    ebp,0xffffffff
c00101b0:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00101b4:	31 c0                	xor    eax,eax
c00101b6:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00101ba:	39 fa                	cmp    edx,edi
c00101bc:	89 c1                	mov    ecx,eax
c00101be:	19 e9                	sbb    ecx,ebp
c00101c0:	0f 83 43 ff ff ff    	jae    c0010109 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101c6:	be 00 00 08 00       	mov    esi,0x80000
c00101cb:	50                   	push   eax
c00101cc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00101d0:	57                   	push   edi
c00101d1:	56                   	push   esi
c00101d2:	68 b8 a3 02 c0       	push   0xc002a3b8
c00101d7:	e8 0e 2e 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c00101dc:	5a                   	pop    edx
c00101dd:	59                   	pop    ecx
c00101de:	57                   	push   edi
c00101df:	56                   	push   esi
c00101e0:	e8 76 fe ff ff       	call   c001005b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00101e5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00101e9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00101ed:	83 c4 0c             	add    esp,0xc
c00101f0:	0f ac d0 0c          	shrd   eax,edx,0xc
c00101f4:	03 05 14 e5 02 c0    	add    eax,DWORD PTR ds:0xc002e514
c00101fa:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010201:	a3 14 e5 02 c0       	mov    ds:0xc002e514,eax
c0010206:	52                   	push   edx
c0010207:	50                   	push   eax
c0010208:	68 78 a3 02 c0       	push   0xc002a378
c001020d:	e8 d8 2d 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0010212:	83 c4 10             	add    esp,0x10
c0010215:	e9 ef fe ff ff       	jmp    c0010109 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001021a:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001021e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010222:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010226:	39 ea                	cmp    edx,ebp
c0010228:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c001022c:	0f 82 d7 fe ff ff    	jb     c0010109 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010232:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010237:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c001023b:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c001023f:	0f 83 c4 fe ff ff    	jae    c0010109 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010245:	39 ee                	cmp    esi,ebp
c0010247:	89 f8                	mov    eax,edi
c0010249:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c001024d:	0f 83 78 ff ff ff    	jae    c00101cb <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010253:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010257:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001025b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001025f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010263:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0010267:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001026b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001026f:	e9 57 ff ff ff       	jmp    c00101cb <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010274:	83 ec 0c             	sub    esp,0xc
c0010277:	68 6a a3 02 c0       	push   0xc002a36a
c001027c:	e8 0e a4 00 00       	call   c001a68f <Krnl::panic(char const*)>
c0010281:	83 c4 10             	add    esp,0x10
c0010284:	bb 40 01 00 00       	mov    ebx,0x140
c0010289:	83 ec 08             	sub    esp,0x8
c001028c:	6a 00                	push   0x0
c001028e:	53                   	push   ebx
c001028f:	43                   	inc    ebx
c0010290:	e8 73 fb ff ff       	call   c000fe08 <Phys::setPageState(unsigned long, bool)>
c0010295:	ff 05 14 e5 02 c0    	inc    DWORD PTR ds:0xc002e514
c001029b:	83 c4 10             	add    esp,0x10
c001029e:	81 fb 80 01 00 00    	cmp    ebx,0x180
c00102a4:	75 e3                	jne    c0010289 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c00102a6:	83 c4 3c             	add    esp,0x3c
c00102a9:	5b                   	pop    ebx
c00102aa:	5e                   	pop    esi
c00102ab:	5f                   	pop    edi
c00102ac:	5d                   	pop    ebp
c00102ad:	c3                   	ret    
c00102ae:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c00102b6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00102be:	e9 d7 fe ff ff       	jmp    c001019a <Phys::physicalMemorySetup(unsigned int)+0x107>
c00102c3:	90                   	nop

c00102c4 <Pipe::isAtty()>:
c00102c4:	31 c0                	xor    eax,eax
c00102c6:	c3                   	ret    
c00102c7:	90                   	nop

c00102c8 <Pipe::~Pipe()>:
c00102c8:	83 ec 0c             	sub    esp,0xc
c00102cb:	ba 24 a4 02 c0       	mov    edx,0xc002a424
c00102d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102d4:	89 10                	mov    DWORD PTR [eax],edx
c00102d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102da:	83 ec 0c             	sub    esp,0xc
c00102dd:	50                   	push   eax
c00102de:	e8 37 16 00 00       	call   c001191a <UnixFile::~UnixFile()>
c00102e3:	83 c4 10             	add    esp,0x10
c00102e6:	90                   	nop
c00102e7:	83 c4 0c             	add    esp,0xc
c00102ea:	c3                   	ret    
c00102eb:	90                   	nop

c00102ec <Pipe::~Pipe()>:
c00102ec:	83 ec 0c             	sub    esp,0xc
c00102ef:	83 ec 0c             	sub    esp,0xc
c00102f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102f6:	e8 cd ff ff ff       	call   c00102c8 <Pipe::~Pipe()>
c00102fb:	83 c4 10             	add    esp,0x10
c00102fe:	83 ec 08             	sub    esp,0x8
c0010301:	6a 20                	push   0x20
c0010303:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010307:	e8 fe 2b 00 00       	call   c0012f0a <operator delete(void*, unsigned long)>
c001030c:	83 c4 10             	add    esp,0x10
c001030f:	83 c4 0c             	add    esp,0xc
c0010312:	c3                   	ret    
c0010313:	90                   	nop

c0010314 <Pipe::read(unsigned long long, void*, int*)>:
c0010314:	55                   	push   ebp
c0010315:	57                   	push   edi
c0010316:	56                   	push   esi
c0010317:	53                   	push   ebx
c0010318:	83 ec 1c             	sub    esp,0x1c
c001031b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001031f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010323:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010327:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c001032a:	89 c8                	mov    eax,ecx
c001032c:	99                   	cdq    
c001032d:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0010331:	74 19                	je     c001034c <Pipe::read(unsigned long long, void*, int*)+0x38>
c0010333:	39 f9                	cmp    ecx,edi
c0010335:	89 d1                	mov    ecx,edx
c0010337:	19 f1                	sbb    ecx,esi
c0010339:	73 11                	jae    c001034c <Pipe::read(unsigned long long, void*, int*)+0x38>
c001033b:	e8 44 db 00 00       	call   c001de84 <lockScheduler()>
c0010340:	e8 7b de 00 00       	call   c001e1c0 <schedule()>
c0010345:	e8 3c db 00 00       	call   c001de86 <unlockScheduler()>
c001034a:	eb db                	jmp    c0010327 <Pipe::read(unsigned long long, void*, int*)+0x13>
c001034c:	39 f8                	cmp    eax,edi
c001034e:	89 d1                	mov    ecx,edx
c0010350:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0010354:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0010358:	19 f1                	sbb    ecx,esi
c001035a:	73 08                	jae    c0010364 <Pipe::read(unsigned long long, void*, int*)+0x50>
c001035c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010360:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010364:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010367:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c001036a:	29 c6                	sub    esi,eax
c001036c:	89 f1                	mov    ecx,esi
c001036e:	c1 f9 1f             	sar    ecx,0x1f
c0010371:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0010375:	89 ca                	mov    edx,ecx
c0010377:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001037b:	19 d1                	sbb    ecx,edx
c001037d:	73 04                	jae    c0010383 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c001037f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0010383:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010387:	89 fd                	mov    ebp,edi
c0010389:	29 f5                	sub    ebp,esi
c001038b:	85 f6                	test   esi,esi
c001038d:	74 12                	je     c00103a1 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c001038f:	52                   	push   edx
c0010390:	56                   	push   esi
c0010391:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c0010394:	50                   	push   eax
c0010395:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0010399:	e8 a6 03 ff ff       	call   c0000744 <memcpy>
c001039e:	83 c4 10             	add    esp,0x10
c00103a1:	85 ed                	test   ebp,ebp
c00103a3:	74 12                	je     c00103b7 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c00103a5:	50                   	push   eax
c00103a6:	55                   	push   ebp
c00103a7:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00103aa:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c00103ae:	56                   	push   esi
c00103af:	e8 90 03 ff ff       	call   c0000744 <memcpy>
c00103b4:	83 c4 10             	add    esp,0x10
c00103b7:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c00103ba:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00103bd:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00103c0:	99                   	cdq    
c00103c1:	89 f7                	mov    edi,esi
c00103c3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00103c7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00103cb:	c1 ff 1f             	sar    edi,0x1f
c00103ce:	57                   	push   edi
c00103cf:	56                   	push   esi
c00103d0:	52                   	push   edx
c00103d1:	50                   	push   eax
c00103d2:	e8 85 67 01 00       	call   c0026b5c <__umoddi3>
c00103d7:	83 c4 10             	add    esp,0x10
c00103da:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00103dd:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00103e2:	75 10                	jne    c00103f4 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c00103e4:	83 ec 0c             	sub    esp,0xc
c00103e7:	68 e1 a3 02 c0       	push   0xc002a3e1
c00103ec:	e8 9e a2 00 00       	call   c001a68f <Krnl::panic(char const*)>
c00103f1:	83 c4 10             	add    esp,0x10
c00103f4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00103f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103fc:	89 10                	mov    DWORD PTR [eax],edx
c00103fe:	83 c4 1c             	add    esp,0x1c
c0010401:	31 c0                	xor    eax,eax
c0010403:	5b                   	pop    ebx
c0010404:	5e                   	pop    esi
c0010405:	5f                   	pop    edi
c0010406:	5d                   	pop    ebp
c0010407:	c3                   	ret    

c0010408 <Pipe::write(unsigned long long, void*, int*)>:
c0010408:	55                   	push   ebp
c0010409:	57                   	push   edi
c001040a:	56                   	push   esi
c001040b:	53                   	push   ebx
c001040c:	83 ec 1c             	sub    esp,0x1c
c001040f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010413:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010417:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001041b:	89 04 24             	mov    DWORD PTR [esp],eax
c001041e:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0010421:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c0010424:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010428:	89 de                	mov    esi,ebx
c001042a:	89 df                	mov    edi,ebx
c001042c:	c1 ff 1f             	sar    edi,0x1f
c001042f:	01 c6                	add    esi,eax
c0010431:	89 c8                	mov    eax,ecx
c0010433:	11 d7                	adc    edi,edx
c0010435:	99                   	cdq    
c0010436:	39 f1                	cmp    ecx,esi
c0010438:	89 d0                	mov    eax,edx
c001043a:	19 f8                	sbb    eax,edi
c001043c:	b8 01 00 00 00       	mov    eax,0x1
c0010441:	0f 82 80 00 00 00    	jb     c00104c7 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c0010447:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001044a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001044d:	01 d8                	add    eax,ebx
c001044f:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0010453:	99                   	cdq    
c0010454:	f7 f9                	idiv   ecx
c0010456:	29 d1                	sub    ecx,edx
c0010458:	89 d7                	mov    edi,edx
c001045a:	89 c8                	mov    eax,ecx
c001045c:	99                   	cdq    
c001045d:	39 ce                	cmp    esi,ecx
c001045f:	19 d3                	sbb    ebx,edx
c0010461:	bb 00 00 00 00       	mov    ebx,0x0
c0010466:	72 04                	jb     c001046c <Pipe::write(unsigned long long, void*, int*)+0x64>
c0010468:	89 f3                	mov    ebx,esi
c001046a:	29 cb                	sub    ebx,ecx
c001046c:	89 f1                	mov    ecx,esi
c001046e:	29 d9                	sub    ecx,ebx
c0010470:	74 1a                	je     c001048c <Pipe::write(unsigned long long, void*, int*)+0x84>
c0010472:	52                   	push   edx
c0010473:	51                   	push   ecx
c0010474:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010478:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001047c:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c001047f:	57                   	push   edi
c0010480:	e8 bf 02 ff ff       	call   c0000744 <memcpy>
c0010485:	83 c4 10             	add    esp,0x10
c0010488:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001048c:	85 db                	test   ebx,ebx
c001048e:	74 12                	je     c00104a2 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c0010490:	50                   	push   eax
c0010491:	53                   	push   ebx
c0010492:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c0010496:	51                   	push   ecx
c0010497:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001049a:	e8 a5 02 ff ff       	call   c0000744 <memcpy>
c001049f:	83 c4 10             	add    esp,0x10
c00104a2:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c00104a5:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00104aa:	75 10                	jne    c00104bc <Pipe::write(unsigned long long, void*, int*)+0xb4>
c00104ac:	83 ec 0c             	sub    esp,0xc
c00104af:	68 fd a3 02 c0       	push   0xc002a3fd
c00104b4:	e8 d6 a1 00 00       	call   c001a68f <Krnl::panic(char const*)>
c00104b9:	83 c4 10             	add    esp,0x10
c00104bc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00104c0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00104c3:	89 38                	mov    DWORD PTR [eax],edi
c00104c5:	31 c0                	xor    eax,eax
c00104c7:	83 c4 1c             	add    esp,0x1c
c00104ca:	5b                   	pop    ebx
c00104cb:	5e                   	pop    esi
c00104cc:	5f                   	pop    edi
c00104cd:	5d                   	pop    ebp
c00104ce:	c3                   	ret    
c00104cf:	90                   	nop

c00104d0 <Pipe::Pipe(int)>:
c00104d0:	83 ec 0c             	sub    esp,0xc
c00104d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104d7:	83 ec 08             	sub    esp,0x8
c00104da:	6a 00                	push   0x0
c00104dc:	50                   	push   eax
c00104dd:	e8 56 12 00 00       	call   c0011738 <UnixFile::UnixFile(int)>
c00104e2:	83 c4 10             	add    esp,0x10
c00104e5:	ba 24 a4 02 c0       	mov    edx,0xc002a424
c00104ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ee:	89 10                	mov    DWORD PTR [eax],edx
c00104f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104f4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00104f8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00104fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ff:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0010506:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001050a:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010511:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010515:	83 ec 0c             	sub    esp,0xc
c0010518:	50                   	push   eax
c0010519:	e8 25 f3 ff ff       	call   c000f843 <malloc>
c001051e:	83 c4 10             	add    esp,0x10
c0010521:	89 c2                	mov    edx,eax
c0010523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010527:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001052a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001052e:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010532:	90                   	nop
c0010533:	83 c4 0c             	add    esp,0xc
c0010536:	c3                   	ret    
c0010537:	90                   	nop

c0010538 <VgaText::isAtty()>:
c0010538:	b0 01                	mov    al,0x1
c001053a:	c3                   	ret    
c001053b:	90                   	nop

c001053c <VgaText::~VgaText()>:
c001053c:	83 ec 0c             	sub    esp,0xc
c001053f:	ba e0 a4 02 c0       	mov    edx,0xc002a4e0
c0010544:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010548:	89 10                	mov    DWORD PTR [eax],edx
c001054a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001054e:	83 ec 0c             	sub    esp,0xc
c0010551:	50                   	push   eax
c0010552:	e8 c3 13 00 00       	call   c001191a <UnixFile::~UnixFile()>
c0010557:	83 c4 10             	add    esp,0x10
c001055a:	90                   	nop
c001055b:	83 c4 0c             	add    esp,0xc
c001055e:	c3                   	ret    
c001055f:	90                   	nop

c0010560 <VgaText::~VgaText()>:
c0010560:	83 ec 0c             	sub    esp,0xc
c0010563:	83 ec 0c             	sub    esp,0xc
c0010566:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001056a:	e8 cd ff ff ff       	call   c001053c <VgaText::~VgaText()>
c001056f:	83 c4 10             	add    esp,0x10
c0010572:	83 ec 08             	sub    esp,0x8
c0010575:	68 60 12 00 00       	push   0x1260
c001057a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001057e:	e8 87 29 00 00       	call   c0012f0a <operator delete(void*, unsigned long)>
c0010583:	83 c4 10             	add    esp,0x10
c0010586:	83 c4 0c             	add    esp,0xc
c0010589:	c3                   	ret    

c001058a <VgaText::read(unsigned long long, void*, int*)>:
c001058a:	83 ec 10             	sub    esp,0x10
c001058d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010591:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010595:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010599:	e8 ee 5d 00 00       	call   c001638c <readKeyboard(VgaText*, char*, unsigned long)>
c001059e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00105a2:	89 02                	mov    DWORD PTR [edx],eax
c00105a4:	31 c0                	xor    eax,eax
c00105a6:	83 c4 1c             	add    esp,0x1c
c00105a9:	c3                   	ret    

c00105aa <setTerminalScrollLock(bool)>:
c00105aa:	c3                   	ret    

c00105ab <addToTerminalCycle(VgaText*)>:
c00105ab:	8b 15 a0 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e5a0
c00105b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105b5:	85 d2                	test   edx,edx
c00105b7:	75 0c                	jne    c00105c5 <addToTerminalCycle(VgaText*)+0x1a>
c00105b9:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c00105bf:	a3 a0 e5 02 c0       	mov    ds:0xc002e5a0,eax
c00105c4:	c3                   	ret    
c00105c5:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c00105cb:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c00105d1:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c00105d7:	c3                   	ret    

c00105d8 <installVgaTextImplementation()>:
c00105d8:	83 ec 10             	sub    esp,0x10
c00105db:	6a 20                	push   0x20
c00105dd:	6a 00                	push   0x0
c00105df:	68 80 e5 02 c0       	push   0xc002e580
c00105e4:	e8 8f 01 ff ff       	call   c0000778 <memset>
c00105e9:	83 c4 1c             	add    esp,0x1c
c00105ec:	c3                   	ret    

c00105ed <scrollTerminalScrollLock(int)>:
c00105ed:	c3                   	ret    

c00105ee <VgaText::load()>:
c00105ee:	53                   	push   ebx
c00105ef:	31 c0                	xor    eax,eax
c00105f1:	83 ec 58             	sub    esp,0x58
c00105f4:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00105f8:	89 e2                	mov    edx,esp
c00105fa:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00105fe:	40                   	inc    eax
c00105ff:	83 f8 50             	cmp    eax,0x50
c0010602:	75 f6                	jne    c00105fa <VgaText::load()+0xc>
c0010604:	31 c0                	xor    eax,eax
c0010606:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c001060d:	84 c9                	test   cl,cl
c001060f:	74 06                	je     c0010617 <VgaText::load()+0x29>
c0010611:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010614:	40                   	inc    eax
c0010615:	eb ef                	jmp    c0010606 <VgaText::load()+0x18>
c0010617:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c001061d:	85 c0                	test   eax,eax
c001061f:	74 09                	je     c001062a <VgaText::load()+0x3c>
c0010621:	51                   	push   ecx
c0010622:	51                   	push   ecx
c0010623:	52                   	push   edx
c0010624:	53                   	push   ebx
c0010625:	ff d0                	call   eax
c0010627:	83 c4 10             	add    esp,0x10
c001062a:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c0010630:	85 c0                	test   eax,eax
c0010632:	74 09                	je     c001063d <VgaText::load()+0x4f>
c0010634:	83 ec 0c             	sub    esp,0xc
c0010637:	53                   	push   ebx
c0010638:	ff d0                	call   eax
c001063a:	83 c4 10             	add    esp,0x10
c001063d:	83 c4 58             	add    esp,0x58
c0010640:	5b                   	pop    ebx
c0010641:	c3                   	ret    

c0010642 <VgaText::updateCursor()>:
c0010642:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010646:	39 05 a4 e5 02 c0    	cmp    DWORD PTR ds:0xc002e5a4,eax
c001064c:	75 0c                	jne    c001065a <VgaText::updateCursor()+0x18>
c001064e:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c0010654:	85 c0                	test   eax,eax
c0010656:	74 02                	je     c001065a <VgaText::updateCursor()+0x18>
c0010658:	ff e0                	jmp    eax
c001065a:	c3                   	ret    
c001065b:	90                   	nop

c001065c <VgaText::showCursor(bool)>:
c001065c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010660:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010664:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c001066a:	c3                   	ret    
c001066b:	90                   	nop

c001066c <VgaText::disableBlink(bool)>:
c001066c:	56                   	push   esi
c001066d:	53                   	push   ebx
c001066e:	51                   	push   ecx
c001066f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010673:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010677:	39 1d a4 e5 02 c0    	cmp    DWORD PTR ds:0xc002e5a4,ebx
c001067d:	75 18                	jne    c0010697 <VgaText::disableBlink(bool)+0x2b>
c001067f:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c0010685:	85 c0                	test   eax,eax
c0010687:	74 0e                	je     c0010697 <VgaText::disableBlink(bool)+0x2b>
c0010689:	89 f1                	mov    ecx,esi
c001068b:	52                   	push   edx
c001068c:	52                   	push   edx
c001068d:	0f b6 d1             	movzx  edx,cl
c0010690:	52                   	push   edx
c0010691:	53                   	push   ebx
c0010692:	ff d0                	call   eax
c0010694:	83 c4 10             	add    esp,0x10
c0010697:	89 f0                	mov    eax,esi
c0010699:	83 f0 01             	xor    eax,0x1
c001069c:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c00106a2:	58                   	pop    eax
c00106a3:	5b                   	pop    ebx
c00106a4:	5e                   	pop    esi
c00106a5:	c3                   	ret    

c00106a6 <VgaText::doANSI_SGR(int)>:
c00106a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106ae:	85 d2                	test   edx,edx
c00106b0:	75 14                	jne    c00106c6 <VgaText::doANSI_SGR(int)+0x20>
c00106b2:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c00106b8:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00106be:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c00106c4:	eb 65                	jmp    c001072b <VgaText::doANSI_SGR(int)+0x85>
c00106c6:	83 fa 07             	cmp    edx,0x7
c00106c9:	75 14                	jne    c00106df <VgaText::doANSI_SGR(int)+0x39>
c00106cb:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c00106d1:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c00106d7:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c00106dd:	eb 4c                	jmp    c001072b <VgaText::doANSI_SGR(int)+0x85>
c00106df:	83 fa 1b             	cmp    edx,0x1b
c00106e2:	74 ce                	je     c00106b2 <VgaText::doANSI_SGR(int)+0xc>
c00106e4:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00106e7:	83 f9 07             	cmp    ecx,0x7
c00106ea:	77 09                	ja     c00106f5 <VgaText::doANSI_SGR(int)+0x4f>
c00106ec:	8b 14 8d 20 d4 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2be0]
c00106f3:	eb 20                	jmp    c0010715 <VgaText::doANSI_SGR(int)+0x6f>
c00106f5:	8d 4a d8             	lea    ecx,[edx-0x28]
c00106f8:	83 f9 07             	cmp    ecx,0x7
c00106fb:	77 09                	ja     c0010706 <VgaText::doANSI_SGR(int)+0x60>
c00106fd:	8b 14 8d 20 d4 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2be0]
c0010704:	eb 25                	jmp    c001072b <VgaText::doANSI_SGR(int)+0x85>
c0010706:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010709:	83 f9 07             	cmp    ecx,0x7
c001070c:	77 0e                	ja     c001071c <VgaText::doANSI_SGR(int)+0x76>
c001070e:	8b 14 95 d8 d2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2d28]
c0010715:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001071b:	c3                   	ret    
c001071c:	8d 4a 9c             	lea    ecx,[edx-0x64]
c001071f:	83 f9 07             	cmp    ecx,0x7
c0010722:	77 0d                	ja     c0010731 <VgaText::doANSI_SGR(int)+0x8b>
c0010724:	8b 14 95 b0 d2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2d50]
c001072b:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010731:	c3                   	ret    

c0010732 <VgaText::setDefaultBgColour(VgaColour)>:
c0010732:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010736:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001073a:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c0010740:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010746:	c3                   	ret    
c0010747:	90                   	nop

c0010748 <VgaText::setDefaultFgColour(VgaColour)>:
c0010748:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001074c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010750:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c0010756:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001075c:	c3                   	ret    
c001075d:	90                   	nop

c001075e <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c001075e:	53                   	push   ebx
c001075f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010763:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010767:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001076b:	51                   	push   ecx
c001076c:	e8 c1 ff ff ff       	call   c0010732 <VgaText::setDefaultBgColour(VgaColour)>
c0010771:	58                   	pop    eax
c0010772:	5a                   	pop    edx
c0010773:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010777:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001077b:	5b                   	pop    ebx
c001077c:	eb ca                	jmp    c0010748 <VgaText::setDefaultFgColour(VgaColour)>

c001077e <VgaText::combineColours(unsigned char, unsigned char)>:
c001077e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0010782:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010787:	83 e0 0f             	and    eax,0xf
c001078a:	c1 e2 04             	shl    edx,0x4
c001078d:	09 d0                	or     eax,edx
c001078f:	c3                   	ret    

c0010790 <VgaText::scrollScreen()>:
c0010790:	57                   	push   edi
c0010791:	56                   	push   esi
c0010792:	be 01 00 00 00       	mov    esi,0x1
c0010797:	53                   	push   ebx
c0010798:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001079c:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c00107a2:	31 ff                	xor    edi,edi
c00107a4:	01 d9                	add    ecx,ebx
c00107a6:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c00107a9:	83 fe 17             	cmp    esi,0x17
c00107ac:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c00107b2:	75 28                	jne    c00107dc <VgaText::scrollScreen()+0x4c>
c00107b4:	f7 c7 01 00 00 00    	test   edi,0x1
c00107ba:	74 1c                	je     c00107d8 <VgaText::scrollScreen()+0x48>
c00107bc:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c00107c3:	50                   	push   eax
c00107c4:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c00107cb:	50                   	push   eax
c00107cc:	e8 ad ff ff ff       	call   c001077e <VgaText::combineColours(unsigned char, unsigned char)>
c00107d1:	5a                   	pop    edx
c00107d2:	5a                   	pop    edx
c00107d3:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c00107d6:	eb 04                	jmp    c00107dc <VgaText::scrollScreen()+0x4c>
c00107d8:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c00107dc:	47                   	inc    edi
c00107dd:	41                   	inc    ecx
c00107de:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00107e4:	75 c0                	jne    c00107a6 <VgaText::scrollScreen()+0x16>
c00107e6:	46                   	inc    esi
c00107e7:	83 fe 18             	cmp    esi,0x18
c00107ea:	75 b0                	jne    c001079c <VgaText::scrollScreen()+0xc>
c00107ec:	39 1d a4 e5 02 c0    	cmp    DWORD PTR ds:0xc002e5a4,ebx
c00107f2:	75 24                	jne    c0010818 <VgaText::scrollScreen()+0x88>
c00107f4:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c00107fb:	74 08                	je     c0010805 <VgaText::scrollScreen()+0x75>
c00107fd:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c0010803:	eb 13                	jmp    c0010818 <VgaText::scrollScreen()+0x88>
c0010805:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c001080b:	85 c0                	test   eax,eax
c001080d:	74 09                	je     c0010818 <VgaText::scrollScreen()+0x88>
c001080f:	83 ec 0c             	sub    esp,0xc
c0010812:	53                   	push   ebx
c0010813:	ff d0                	call   eax
c0010815:	83 c4 10             	add    esp,0x10
c0010818:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001081c:	5b                   	pop    ebx
c001081d:	5e                   	pop    esi
c001081e:	5f                   	pop    edi
c001081f:	e9 1e fe ff ff       	jmp    c0010642 <VgaText::updateCursor()>

c0010824 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010824:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010829:	c1 e0 08             	shl    eax,0x8
c001082c:	89 c2                	mov    edx,eax
c001082e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010833:	09 d0                	or     eax,edx
c0010835:	c3                   	ret    

c0010836 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010836:	53                   	push   ebx
c0010837:	83 ec 08             	sub    esp,0x8
c001083a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001083e:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010843:	50                   	push   eax
c0010844:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010849:	50                   	push   eax
c001084a:	e8 2f ff ff ff       	call   c001077e <VgaText::combineColours(unsigned char, unsigned char)>
c001084f:	5a                   	pop    edx
c0010850:	0f b6 c0             	movzx  eax,al
c0010853:	5b                   	pop    ebx
c0010854:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0010859:	50                   	push   eax
c001085a:	53                   	push   ebx
c001085b:	e8 c4 ff ff ff       	call   c0010824 <VgaText::combineCharAndColour(char, unsigned char)>
c0010860:	5a                   	pop    edx
c0010861:	5a                   	pop    edx
c0010862:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010868:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c001086c:	0f b7 d2             	movzx  edx,dx
c001086f:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c0010874:	39 0d a4 e5 02 c0    	cmp    DWORD PTR ds:0xc002e5a4,ecx
c001087a:	75 14                	jne    c0010890 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c001087c:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c0010882:	85 c0                	test   eax,eax
c0010884:	74 0a                	je     c0010890 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010886:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001088a:	83 c4 08             	add    esp,0x8
c001088d:	5b                   	pop    ebx
c001088e:	ff e0                	jmp    eax
c0010890:	83 c4 08             	add    esp,0x8
c0010893:	5b                   	pop    ebx
c0010894:	c3                   	ret    
c0010895:	90                   	nop

c0010896 <VgaText::getCursorX()>:
c0010896:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001089a:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c00108a0:	c3                   	ret    
c00108a1:	90                   	nop

c00108a2 <VgaText::getCursorY()>:
c00108a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108a6:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c00108ac:	c3                   	ret    
c00108ad:	90                   	nop

c00108ae <VgaText::setCursor(int, int)>:
c00108ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108b2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00108b6:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c00108bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00108c0:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c00108c6:	e9 77 fd ff ff       	jmp    c0010642 <VgaText::updateCursor()>
c00108cb:	90                   	nop

c00108cc <VgaText::setCursorX(int)>:
c00108cc:	83 ec 10             	sub    esp,0x10
c00108cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108d3:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c00108d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108dd:	50                   	push   eax
c00108de:	e8 cb ff ff ff       	call   c00108ae <VgaText::setCursor(int, int)>
c00108e3:	83 c4 1c             	add    esp,0x1c
c00108e6:	c3                   	ret    
c00108e7:	90                   	nop

c00108e8 <VgaText::setCursorY(int)>:
c00108e8:	83 ec 10             	sub    esp,0x10
c00108eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00108f3:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c00108f9:	50                   	push   eax
c00108fa:	e8 af ff ff ff       	call   c00108ae <VgaText::setCursor(int, int)>
c00108ff:	83 c4 1c             	add    esp,0x1c
c0010902:	c3                   	ret    
c0010903:	90                   	nop

c0010904 <VgaText::incrementCursor(bool)>:
c0010904:	56                   	push   esi
c0010905:	53                   	push   ebx
c0010906:	51                   	push   ecx
c0010907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001090b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001090f:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c0010915:	40                   	inc    eax
c0010916:	83 f8 50             	cmp    eax,0x50
c0010919:	74 08                	je     c0010923 <VgaText::incrementCursor(bool)+0x1f>
c001091b:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c0010921:	eb 33                	jmp    c0010956 <VgaText::incrementCursor(bool)+0x52>
c0010923:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010929:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010933:	8d 50 01             	lea    edx,[eax+0x1]
c0010936:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c001093c:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010942:	75 12                	jne    c0010956 <VgaText::incrementCursor(bool)+0x52>
c0010944:	83 ec 0c             	sub    esp,0xc
c0010947:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c001094d:	53                   	push   ebx
c001094e:	e8 3d fe ff ff       	call   c0010790 <VgaText::scrollScreen()>
c0010953:	83 c4 10             	add    esp,0x10
c0010956:	89 f0                	mov    eax,esi
c0010958:	84 c0                	test   al,al
c001095a:	74 0c                	je     c0010968 <VgaText::incrementCursor(bool)+0x64>
c001095c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010960:	5a                   	pop    edx
c0010961:	5b                   	pop    ebx
c0010962:	5e                   	pop    esi
c0010963:	e9 da fc ff ff       	jmp    c0010642 <VgaText::updateCursor()>
c0010968:	58                   	pop    eax
c0010969:	5b                   	pop    ebx
c001096a:	5e                   	pop    esi
c001096b:	c3                   	ret    

c001096c <VgaText::updateRAMUsageDisplay(int)>:
c001096c:	56                   	push   esi
c001096d:	8b 35 00 d4 02 c0    	mov    esi,DWORD PTR ds:0xc002d400
c0010973:	53                   	push   ebx
c0010974:	bb 0a 00 00 00       	mov    ebx,0xa
c0010979:	6a 0f                	push   0xf
c001097b:	6a 00                	push   0x0
c001097d:	e8 fc fd ff ff       	call   c001077e <VgaText::combineColours(unsigned char, unsigned char)>
c0010982:	5a                   	pop    edx
c0010983:	59                   	pop    ecx
c0010984:	0f b6 c8             	movzx  ecx,al
c0010987:	51                   	push   ecx
c0010988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001098c:	99                   	cdq    
c001098d:	f7 fb                	idiv   ebx
c001098f:	89 d3                	mov    ebx,edx
c0010991:	83 c0 30             	add    eax,0x30
c0010994:	83 c3 30             	add    ebx,0x30
c0010997:	0f be c0             	movsx  eax,al
c001099a:	0f b6 db             	movzx  ebx,bl
c001099d:	50                   	push   eax
c001099e:	e8 81 fe ff ff       	call   c0010824 <VgaText::combineCharAndColour(char, unsigned char)>
c00109a3:	5a                   	pop    edx
c00109a4:	5a                   	pop    edx
c00109a5:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c00109ac:	51                   	push   ecx
c00109ad:	53                   	push   ebx
c00109ae:	e8 71 fe ff ff       	call   c0010824 <VgaText::combineCharAndColour(char, unsigned char)>
c00109b3:	5b                   	pop    ebx
c00109b4:	5a                   	pop    edx
c00109b5:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c00109bc:	51                   	push   ecx
c00109bd:	6a 25                	push   0x25
c00109bf:	e8 60 fe ff ff       	call   c0010824 <VgaText::combineCharAndColour(char, unsigned char)>
c00109c4:	59                   	pop    ecx
c00109c5:	5b                   	pop    ebx
c00109c6:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c00109cd:	5b                   	pop    ebx
c00109ce:	5e                   	pop    esi
c00109cf:	c3                   	ret    

c00109d0 <VgaText::updateDiskUsage()>:
c00109d0:	55                   	push   ebp
c00109d1:	bd 10 27 00 00       	mov    ebp,0x2710
c00109d6:	57                   	push   edi
c00109d7:	8b 3d 00 d4 02 c0    	mov    edi,DWORD PTR ds:0xc002d400
c00109dd:	56                   	push   esi
c00109de:	53                   	push   ebx
c00109df:	6a 0f                	push   0xf
c00109e1:	6a 00                	push   0x0
c00109e3:	e8 96 fd ff ff       	call   c001077e <VgaText::combineColours(unsigned char, unsigned char)>
c00109e8:	5a                   	pop    edx
c00109e9:	0f b6 d8             	movzx  ebx,al
c00109ec:	59                   	pop    ecx
c00109ed:	8b 35 28 28 03 c0    	mov    esi,DWORD PTR ds:0xc0032828
c00109f3:	53                   	push   ebx
c00109f4:	b9 0a 00 00 00       	mov    ecx,0xa
c00109f9:	89 f0                	mov    eax,esi
c00109fb:	99                   	cdq    
c00109fc:	f7 fd                	idiv   ebp
c00109fe:	99                   	cdq    
c00109ff:	f7 f9                	idiv   ecx
c0010a01:	8d 42 30             	lea    eax,[edx+0x30]
c0010a04:	0f b6 c0             	movzx  eax,al
c0010a07:	50                   	push   eax
c0010a08:	e8 17 fe ff ff       	call   c0010824 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a0d:	5d                   	pop    ebp
c0010a0e:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a13:	5a                   	pop    edx
c0010a14:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c0010a18:	53                   	push   ebx
c0010a19:	89 f0                	mov    eax,esi
c0010a1b:	99                   	cdq    
c0010a1c:	f7 fd                	idiv   ebp
c0010a1e:	99                   	cdq    
c0010a1f:	f7 f9                	idiv   ecx
c0010a21:	8d 42 30             	lea    eax,[edx+0x30]
c0010a24:	0f b6 c0             	movzx  eax,al
c0010a27:	50                   	push   eax
c0010a28:	e8 f7 fd ff ff       	call   c0010824 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a2d:	5d                   	pop    ebp
c0010a2e:	bd 64 00 00 00       	mov    ebp,0x64
c0010a33:	5a                   	pop    edx
c0010a34:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c0010a3b:	53                   	push   ebx
c0010a3c:	89 f0                	mov    eax,esi
c0010a3e:	99                   	cdq    
c0010a3f:	f7 fd                	idiv   ebp
c0010a41:	99                   	cdq    
c0010a42:	f7 f9                	idiv   ecx
c0010a44:	8d 42 30             	lea    eax,[edx+0x30]
c0010a47:	0f b6 c0             	movzx  eax,al
c0010a4a:	50                   	push   eax
c0010a4b:	e8 d4 fd ff ff       	call   c0010824 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a50:	5d                   	pop    ebp
c0010a51:	5a                   	pop    edx
c0010a52:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010a59:	53                   	push   ebx
c0010a5a:	89 f0                	mov    eax,esi
c0010a5c:	99                   	cdq    
c0010a5d:	f7 f9                	idiv   ecx
c0010a5f:	89 d6                	mov    esi,edx
c0010a61:	99                   	cdq    
c0010a62:	f7 f9                	idiv   ecx
c0010a64:	8d 42 30             	lea    eax,[edx+0x30]
c0010a67:	0f b6 c0             	movzx  eax,al
c0010a6a:	50                   	push   eax
c0010a6b:	e8 b4 fd ff ff       	call   c0010824 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a70:	5d                   	pop    ebp
c0010a71:	5a                   	pop    edx
c0010a72:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010a79:	53                   	push   ebx
c0010a7a:	8d 46 30             	lea    eax,[esi+0x30]
c0010a7d:	0f b6 f0             	movzx  esi,al
c0010a80:	56                   	push   esi
c0010a81:	e8 9e fd ff ff       	call   c0010824 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a86:	5e                   	pop    esi
c0010a87:	8b 35 24 28 03 c0    	mov    esi,DWORD PTR ds:0xc0032824
c0010a8d:	5d                   	pop    ebp
c0010a8e:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010a95:	bd 10 27 00 00       	mov    ebp,0x2710
c0010a9a:	53                   	push   ebx
c0010a9b:	89 f0                	mov    eax,esi
c0010a9d:	99                   	cdq    
c0010a9e:	f7 fd                	idiv   ebp
c0010aa0:	99                   	cdq    
c0010aa1:	f7 f9                	idiv   ecx
c0010aa3:	8d 42 30             	lea    eax,[edx+0x30]
c0010aa6:	0f b6 c0             	movzx  eax,al
c0010aa9:	50                   	push   eax
c0010aaa:	e8 75 fd ff ff       	call   c0010824 <VgaText::combineCharAndColour(char, unsigned char)>
c0010aaf:	5a                   	pop    edx
c0010ab0:	5d                   	pop    ebp
c0010ab1:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010ab8:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010abd:	53                   	push   ebx
c0010abe:	89 f0                	mov    eax,esi
c0010ac0:	99                   	cdq    
c0010ac1:	f7 fd                	idiv   ebp
c0010ac3:	99                   	cdq    
c0010ac4:	f7 f9                	idiv   ecx
c0010ac6:	8d 42 30             	lea    eax,[edx+0x30]
c0010ac9:	0f b6 c0             	movzx  eax,al
c0010acc:	50                   	push   eax
c0010acd:	e8 52 fd ff ff       	call   c0010824 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ad2:	5a                   	pop    edx
c0010ad3:	5d                   	pop    ebp
c0010ad4:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010adb:	bd 64 00 00 00       	mov    ebp,0x64
c0010ae0:	53                   	push   ebx
c0010ae1:	89 f0                	mov    eax,esi
c0010ae3:	99                   	cdq    
c0010ae4:	f7 fd                	idiv   ebp
c0010ae6:	99                   	cdq    
c0010ae7:	f7 f9                	idiv   ecx
c0010ae9:	83 c2 30             	add    edx,0x30
c0010aec:	0f b6 d2             	movzx  edx,dl
c0010aef:	52                   	push   edx
c0010af0:	e8 2f fd ff ff       	call   c0010824 <VgaText::combineCharAndColour(char, unsigned char)>
c0010af5:	5a                   	pop    edx
c0010af6:	5d                   	pop    ebp
c0010af7:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010afe:	53                   	push   ebx
c0010aff:	89 f0                	mov    eax,esi
c0010b01:	99                   	cdq    
c0010b02:	f7 f9                	idiv   ecx
c0010b04:	89 d6                	mov    esi,edx
c0010b06:	99                   	cdq    
c0010b07:	f7 f9                	idiv   ecx
c0010b09:	8d 42 30             	lea    eax,[edx+0x30]
c0010b0c:	0f b6 c0             	movzx  eax,al
c0010b0f:	50                   	push   eax
c0010b10:	e8 0f fd ff ff       	call   c0010824 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b15:	5a                   	pop    edx
c0010b16:	59                   	pop    ecx
c0010b17:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010b1e:	53                   	push   ebx
c0010b1f:	8d 46 30             	lea    eax,[esi+0x30]
c0010b22:	0f b6 f0             	movzx  esi,al
c0010b25:	56                   	push   esi
c0010b26:	e8 f9 fc ff ff       	call   c0010824 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b2b:	5b                   	pop    ebx
c0010b2c:	5e                   	pop    esi
c0010b2d:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010b34:	5b                   	pop    ebx
c0010b35:	5e                   	pop    esi
c0010b36:	5f                   	pop    edi
c0010b37:	5d                   	pop    ebp
c0010b38:	c3                   	ret    
c0010b39:	90                   	nop

c0010b3a <VgaText::updateTitle()>:
c0010b3a:	53                   	push   ebx
c0010b3b:	31 c0                	xor    eax,eax
c0010b3d:	83 ec 58             	sub    esp,0x58
c0010b40:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010b44:	89 e1                	mov    ecx,esp
c0010b46:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010b4a:	40                   	inc    eax
c0010b4b:	83 f8 50             	cmp    eax,0x50
c0010b4e:	75 f6                	jne    c0010b46 <VgaText::updateTitle()+0xc>
c0010b50:	31 c0                	xor    eax,eax
c0010b52:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010b59:	84 db                	test   bl,bl
c0010b5b:	74 06                	je     c0010b63 <VgaText::updateTitle()+0x29>
c0010b5d:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010b60:	40                   	inc    eax
c0010b61:	eb ef                	jmp    c0010b52 <VgaText::updateTitle()+0x18>
c0010b63:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010b69:	85 c0                	test   eax,eax
c0010b6b:	74 09                	je     c0010b76 <VgaText::updateTitle()+0x3c>
c0010b6d:	53                   	push   ebx
c0010b6e:	53                   	push   ebx
c0010b6f:	51                   	push   ecx
c0010b70:	52                   	push   edx
c0010b71:	ff d0                	call   eax
c0010b73:	83 c4 10             	add    esp,0x10
c0010b76:	e8 55 fe ff ff       	call   c00109d0 <VgaText::updateDiskUsage()>
c0010b7b:	83 c4 58             	add    esp,0x58
c0010b7e:	5b                   	pop    ebx
c0010b7f:	c3                   	ret    

c0010b80 <VgaText::setTitleTextColour(VgaColour)>:
c0010b80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b88:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010b8e:	eb aa                	jmp    c0010b3a <VgaText::updateTitle()>

c0010b90 <VgaText::setTitleColour(VgaColour)>:
c0010b90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b94:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b98:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010b9e:	eb 9a                	jmp    c0010b3a <VgaText::updateTitle()>

c0010ba0 <VgaText::setTitle(char*)>:
c0010ba0:	53                   	push   ebx
c0010ba1:	83 ec 10             	sub    esp,0x10
c0010ba4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010ba8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bac:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010bb2:	50                   	push   eax
c0010bb3:	e8 7c fc fe ff       	call   c0000834 <strcpy>
c0010bb8:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010bbc:	83 c4 18             	add    esp,0x18
c0010bbf:	5b                   	pop    ebx
c0010bc0:	e9 75 ff ff ff       	jmp    c0010b3a <VgaText::updateTitle()>
c0010bc5:	90                   	nop

c0010bc6 <VgaText::decrementCursor(bool)>:
c0010bc6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010bca:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010bce:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010bd4:	85 c0                	test   eax,eax
c0010bd6:	74 07                	je     c0010bdf <VgaText::decrementCursor(bool)+0x19>
c0010bd8:	48                   	dec    eax
c0010bd9:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010bdf:	84 c9                	test   cl,cl
c0010be1:	74 09                	je     c0010bec <VgaText::decrementCursor(bool)+0x26>
c0010be3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010be7:	e9 56 fa ff ff       	jmp    c0010642 <VgaText::updateCursor()>
c0010bec:	c3                   	ret    
c0010bed:	90                   	nop

c0010bee <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010bee:	53                   	push   ebx
c0010bef:	83 ec 08             	sub    esp,0x8
c0010bf2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010bf6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010bfa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010bfe:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010c02:	3c 07                	cmp    al,0x7
c0010c04:	75 2a                	jne    c0010c30 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010c06:	a1 54 e6 02 c0       	mov    eax,ds:0xc002e654
c0010c0b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010c13:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010c1b:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010c23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010c27:	83 c4 08             	add    esp,0x8
c0010c2a:	5b                   	pop    ebx
c0010c2b:	e9 b8 31 00 00       	jmp    c0013de8 <Buzzer::beep(int, int, bool)>
c0010c30:	3c 0d                	cmp    al,0xd
c0010c32:	75 0c                	jne    c0010c40 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010c34:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c3e:	eb 3b                	jmp    c0010c7b <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010c40:	3c 0a                	cmp    al,0xa
c0010c42:	75 40                	jne    c0010c84 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010c44:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010c4a:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c54:	8d 50 01             	lea    edx,[eax+0x1]
c0010c57:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010c5d:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010c63:	75 12                	jne    c0010c77 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010c65:	83 ec 0c             	sub    esp,0xc
c0010c68:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010c6e:	53                   	push   ebx
c0010c6f:	e8 1c fb ff ff       	call   c0010790 <VgaText::scrollScreen()>
c0010c74:	83 c4 10             	add    esp,0x10
c0010c77:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010c7b:	83 c4 08             	add    esp,0x8
c0010c7e:	5b                   	pop    ebx
c0010c7f:	e9 be f9 ff ff       	jmp    c0010642 <VgaText::updateCursor()>
c0010c84:	3c 08                	cmp    al,0x8
c0010c86:	75 31                	jne    c0010cb9 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010c88:	50                   	push   eax
c0010c89:	50                   	push   eax
c0010c8a:	6a 01                	push   0x1
c0010c8c:	53                   	push   ebx
c0010c8d:	e8 34 ff ff ff       	call   c0010bc6 <VgaText::decrementCursor(bool)>
c0010c92:	5a                   	pop    edx
c0010c93:	59                   	pop    ecx
c0010c94:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010c9a:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010ca0:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010ca6:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010cac:	6a 20                	push   0x20
c0010cae:	53                   	push   ebx
c0010caf:	e8 82 fb ff ff       	call   c0010836 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010cb4:	83 c4 28             	add    esp,0x28
c0010cb7:	5b                   	pop    ebx
c0010cb8:	c3                   	ret    
c0010cb9:	83 ec 08             	sub    esp,0x8
c0010cbc:	0f be c0             	movsx  eax,al
c0010cbf:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010cc5:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010ccb:	51                   	push   ecx
c0010ccc:	52                   	push   edx
c0010ccd:	50                   	push   eax
c0010cce:	53                   	push   ebx
c0010ccf:	e8 62 fb ff ff       	call   c0010836 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010cd4:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010cd8:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010ce0:	83 c4 28             	add    esp,0x28
c0010ce3:	5b                   	pop    ebx
c0010ce4:	e9 1b fc ff ff       	jmp    c0010904 <VgaText::incrementCursor(bool)>
c0010ce9:	90                   	nop

c0010cea <VgaText::isShowingCursor()>:
c0010cea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cee:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010cf4:	c3                   	ret    
c0010cf5:	90                   	nop

c0010cf6 <VgaText::isBlinkDisabled()>:
c0010cf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cfa:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010d00:	83 f0 01             	xor    eax,0x1
c0010d03:	c3                   	ret    

c0010d04 <VgaText::setCursorHeight(int)>:
c0010d04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d08:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010d0c:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010d12:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010d19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010d1d:	e9 3a f9 ff ff       	jmp    c001065c <VgaText::showCursor(bool)>

c0010d22 <VgaText::getCursorHeight()>:
c0010d22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d26:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010d2c:	c3                   	ret    

c0010d2d <setActiveTerminal(VgaText*)>:
c0010d2d:	53                   	push   ebx
c0010d2e:	83 ec 08             	sub    esp,0x8
c0010d31:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d35:	85 db                	test   ebx,ebx
c0010d37:	75 11                	jne    c0010d4a <setActiveTerminal(VgaText*)+0x1d>
c0010d39:	c7 44 24 10 38 a4 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a438
c0010d41:	83 c4 08             	add    esp,0x8
c0010d44:	5b                   	pop    ebx
c0010d45:	e9 45 99 00 00       	jmp    c001a68f <Krnl::panic(char const*)>
c0010d4a:	50                   	push   eax
c0010d4b:	50                   	push   eax
c0010d4c:	53                   	push   ebx
c0010d4d:	68 46 a4 02 c0       	push   0xc002a446
c0010d52:	e8 93 22 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0010d57:	a1 a4 e5 02 c0       	mov    eax,ds:0xc002e5a4
c0010d5c:	83 c4 10             	add    esp,0x10
c0010d5f:	85 c0                	test   eax,eax
c0010d61:	74 0c                	je     c0010d6f <setActiveTerminal(VgaText*)+0x42>
c0010d63:	83 ec 0c             	sub    esp,0xc
c0010d66:	50                   	push   eax
c0010d67:	e8 d6 f8 ff ff       	call   c0010642 <VgaText::updateCursor()>
c0010d6c:	83 c4 10             	add    esp,0x10
c0010d6f:	89 1d a4 e5 02 c0    	mov    DWORD PTR ds:0xc002e5a4,ebx
c0010d75:	51                   	push   ecx
c0010d76:	51                   	push   ecx
c0010d77:	53                   	push   ebx
c0010d78:	68 5e a4 02 c0       	push   0xc002a45e
c0010d7d:	e8 68 22 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0010d82:	83 c4 0c             	add    esp,0xc
c0010d85:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010d8b:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010d91:	53                   	push   ebx
c0010d92:	e8 17 fb ff ff       	call   c00108ae <VgaText::setCursor(int, int)>
c0010d97:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d9a:	e8 57 ff ff ff       	call   c0010cf6 <VgaText::isBlinkDisabled()>
c0010d9f:	5a                   	pop    edx
c0010da0:	0f b6 c0             	movzx  eax,al
c0010da3:	59                   	pop    ecx
c0010da4:	50                   	push   eax
c0010da5:	53                   	push   ebx
c0010da6:	e8 c1 f8 ff ff       	call   c001066c <VgaText::disableBlink(bool)>
c0010dab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010dae:	e8 6f ff ff ff       	call   c0010d22 <VgaText::getCursorHeight()>
c0010db3:	5a                   	pop    edx
c0010db4:	59                   	pop    ecx
c0010db5:	50                   	push   eax
c0010db6:	53                   	push   ebx
c0010db7:	e8 48 ff ff ff       	call   c0010d04 <VgaText::setCursorHeight(int)>
c0010dbc:	83 c4 10             	add    esp,0x10
c0010dbf:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010dc6:	75 0a                	jne    c0010dd2 <setActiveTerminal(VgaText*)+0xa5>
c0010dc8:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010dd2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010dd6:	83 c4 08             	add    esp,0x8
c0010dd9:	5b                   	pop    ebx
c0010dda:	e9 0f f8 ff ff       	jmp    c00105ee <VgaText::load()>

c0010ddf <doTerminalCycle()>:
c0010ddf:	83 ec 18             	sub    esp,0x18
c0010de2:	a1 a0 e5 02 c0       	mov    eax,ds:0xc002e5a0
c0010de7:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010ded:	50                   	push   eax
c0010dee:	a3 a0 e5 02 c0       	mov    ds:0xc002e5a0,eax
c0010df3:	e8 35 ff ff ff       	call   c0010d2d <setActiveTerminal(VgaText*)>
c0010df8:	83 c4 1c             	add    esp,0x1c
c0010dfb:	c3                   	ret    

c0010dfc <VgaText::doUpdate()>:
c0010dfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e00:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010e06:	85 c0                	test   eax,eax
c0010e08:	74 02                	je     c0010e0c <VgaText::doUpdate()+0x10>
c0010e0a:	ff e0                	jmp    eax
c0010e0c:	c3                   	ret    
c0010e0d:	90                   	nop

c0010e0e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010e0e:	55                   	push   ebp
c0010e0f:	57                   	push   edi
c0010e10:	56                   	push   esi
c0010e11:	53                   	push   ebx
c0010e12:	83 ec 1c             	sub    esp,0x1c
c0010e15:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010e19:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010e1e:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010e25:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010e28:	50                   	push   eax
c0010e29:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010e2e:	50                   	push   eax
c0010e2f:	e8 4a f9 ff ff       	call   c001077e <VgaText::combineColours(unsigned char, unsigned char)>
c0010e34:	59                   	pop    ecx
c0010e35:	0f b6 c0             	movzx  eax,al
c0010e38:	5b                   	pop    ebx
c0010e39:	31 c9                	xor    ecx,ecx
c0010e3b:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010e43:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010e47:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010e4d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e51:	0f b7 db             	movzx  ebx,bx
c0010e54:	01 db                	add    ebx,ebx
c0010e56:	01 fb                	add    ebx,edi
c0010e58:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010e5b:	84 c0                	test   al,al
c0010e5d:	0f 84 38 01 00 00    	je     c0010f9b <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010e63:	3c 0d                	cmp    al,0xd
c0010e65:	75 0f                	jne    c0010e76 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010e67:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e71:	e9 1f 01 00 00       	jmp    c0010f95 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010e76:	3c 0a                	cmp    al,0xa
c0010e78:	75 5b                	jne    c0010ed5 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010e7a:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010e80:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e8a:	8d 48 01             	lea    ecx,[eax+0x1]
c0010e8d:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010e93:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010e99:	75 12                	jne    c0010ead <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010e9b:	83 ec 0c             	sub    esp,0xc
c0010e9e:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010ea4:	55                   	push   ebp
c0010ea5:	e8 e6 f8 ff ff       	call   c0010790 <VgaText::scrollScreen()>
c0010eaa:	83 c4 10             	add    esp,0x10
c0010ead:	83 ec 0c             	sub    esp,0xc
c0010eb0:	55                   	push   ebp
c0010eb1:	e8 8c f7 ff ff       	call   c0010642 <VgaText::updateCursor()>
c0010eb6:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010ebe:	83 c4 10             	add    esp,0x10
c0010ec1:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010ec7:	31 c9                	xor    ecx,ecx
c0010ec9:	0f b7 db             	movzx  ebx,bx
c0010ecc:	01 db                	add    ebx,ebx
c0010ece:	01 fb                	add    ebx,edi
c0010ed0:	e9 c0 00 00 00       	jmp    c0010f95 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010ed5:	3c 08                	cmp    al,0x8
c0010ed7:	75 4e                	jne    c0010f27 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010ed9:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010edd:	53                   	push   ebx
c0010ede:	53                   	push   ebx
c0010edf:	6a 01                	push   0x1
c0010ee1:	55                   	push   ebp
c0010ee2:	e8 df fc ff ff       	call   c0010bc6 <VgaText::decrementCursor(bool)>
c0010ee7:	58                   	pop    eax
c0010ee8:	5a                   	pop    edx
c0010ee9:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010eef:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010ef5:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010efb:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010f01:	6a 20                	push   0x20
c0010f03:	55                   	push   ebp
c0010f04:	e8 2d f9 ff ff       	call   c0010836 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010f09:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f11:	83 c4 20             	add    esp,0x20
c0010f14:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010f1a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010f1e:	0f b7 db             	movzx  ebx,bx
c0010f21:	01 db                	add    ebx,ebx
c0010f23:	01 fb                	add    ebx,edi
c0010f25:	eb 6e                	jmp    c0010f95 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010f27:	51                   	push   ecx
c0010f28:	51                   	push   ecx
c0010f29:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010f2d:	50                   	push   eax
c0010f2e:	e8 f1 f8 ff ff       	call   c0010824 <VgaText::combineCharAndColour(char, unsigned char)>
c0010f33:	83 c4 10             	add    esp,0x10
c0010f36:	66 89 03             	mov    WORD PTR [ebx],ax
c0010f39:	39 2d a4 e5 02 c0    	cmp    DWORD PTR ds:0xc002e5a4,ebp
c0010f3f:	75 2a                	jne    c0010f6b <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f41:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010f47:	85 c0                	test   eax,eax
c0010f49:	74 20                	je     c0010f6b <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f4b:	52                   	push   edx
c0010f4c:	52                   	push   edx
c0010f4d:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010f53:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f59:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f5d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f61:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010f64:	51                   	push   ecx
c0010f65:	55                   	push   ebp
c0010f66:	ff d0                	call   eax
c0010f68:	83 c4 20             	add    esp,0x20
c0010f6b:	83 c3 02             	add    ebx,0x2
c0010f6e:	50                   	push   eax
c0010f6f:	50                   	push   eax
c0010f70:	6a 00                	push   0x0
c0010f72:	55                   	push   ebp
c0010f73:	e8 8c f9 ff ff       	call   c0010904 <VgaText::incrementCursor(bool)>
c0010f78:	83 c4 10             	add    esp,0x10
c0010f7b:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010f82:	75 0f                	jne    c0010f93 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010f84:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f8c:	0f b7 db             	movzx  ebx,bx
c0010f8f:	01 db                	add    ebx,ebx
c0010f91:	01 fb                	add    ebx,edi
c0010f93:	b1 01                	mov    cl,0x1
c0010f95:	46                   	inc    esi
c0010f96:	e9 bd fe ff ff       	jmp    c0010e58 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010f9b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010f9f:	83 ec 0c             	sub    esp,0xc
c0010fa2:	55                   	push   ebp
c0010fa3:	e8 9a f6 ff ff       	call   c0010642 <VgaText::updateCursor()>
c0010fa8:	83 c4 10             	add    esp,0x10
c0010fab:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010faf:	84 c9                	test   cl,cl
c0010fb1:	74 0c                	je     c0010fbf <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010fb3:	83 ec 0c             	sub    esp,0xc
c0010fb6:	55                   	push   ebp
c0010fb7:	e8 40 fe ff ff       	call   c0010dfc <VgaText::doUpdate()>
c0010fbc:	83 c4 10             	add    esp,0x10
c0010fbf:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010fc6:	83 c4 1c             	add    esp,0x1c
c0010fc9:	5b                   	pop    ebx
c0010fca:	5e                   	pop    esi
c0010fcb:	5f                   	pop    edi
c0010fcc:	5d                   	pop    ebp
c0010fcd:	c3                   	ret    

c0010fce <VgaText::clearScreen()>:
c0010fce:	57                   	push   edi
c0010fcf:	56                   	push   esi
c0010fd0:	31 f6                	xor    esi,esi
c0010fd2:	53                   	push   ebx
c0010fd3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010fd7:	52                   	push   edx
c0010fd8:	6a 00                	push   0x0
c0010fda:	6a 00                	push   0x0
c0010fdc:	53                   	push   ebx
c0010fdd:	e8 cc f8 ff ff       	call   c00108ae <VgaText::setCursor(int, int)>
c0010fe2:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010fe9:	83 c4 10             	add    esp,0x10
c0010fec:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010ff2:	7e 26                	jle    c001101a <VgaText::clearScreen()+0x4c>
c0010ff4:	31 ff                	xor    edi,edi
c0010ff6:	50                   	push   eax
c0010ff7:	50                   	push   eax
c0010ff8:	56                   	push   esi
c0010ff9:	57                   	push   edi
c0010ffa:	47                   	inc    edi
c0010ffb:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0011001:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0011007:	6a 20                	push   0x20
c0011009:	53                   	push   ebx
c001100a:	e8 27 f8 ff ff       	call   c0010836 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001100f:	83 c4 20             	add    esp,0x20
c0011012:	83 ff 50             	cmp    edi,0x50
c0011015:	75 df                	jne    c0010ff6 <VgaText::clearScreen()+0x28>
c0011017:	46                   	inc    esi
c0011018:	eb d2                	jmp    c0010fec <VgaText::clearScreen()+0x1e>
c001101a:	83 ec 0c             	sub    esp,0xc
c001101d:	53                   	push   ebx
c001101e:	e8 d9 fd ff ff       	call   c0010dfc <VgaText::doUpdate()>
c0011023:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c001102a:	83 c4 10             	add    esp,0x10
c001102d:	5b                   	pop    ebx
c001102e:	5e                   	pop    esi
c001102f:	5f                   	pop    edi
c0011030:	c3                   	ret    
c0011031:	90                   	nop

c0011032 <VgaText::putchar(char)>:
c0011032:	56                   	push   esi
c0011033:	53                   	push   ebx
c0011034:	83 ec 14             	sub    esp,0x14
c0011037:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001103b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001103f:	3c 5b                	cmp    al,0x5b
c0011041:	75 21                	jne    c0011064 <VgaText::putchar(char)+0x32>
c0011043:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c001104a:	74 28                	je     c0011074 <VgaText::putchar(char)+0x42>
c001104c:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0011055:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c001105f:	e9 e2 00 00 00       	jmp    c0011146 <VgaText::putchar(char)+0x114>
c0011064:	3c 1b                	cmp    al,0x1b
c0011066:	75 0c                	jne    c0011074 <VgaText::putchar(char)+0x42>
c0011068:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c001106f:	e9 d2 00 00 00       	jmp    c0011146 <VgaText::putchar(char)+0x114>
c0011074:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c001107a:	84 c9                	test   cl,cl
c001107c:	0f 84 ab 00 00 00    	je     c001112d <VgaText::putchar(char)+0xfb>
c0011082:	8d 50 c0             	lea    edx,[eax-0x40]
c0011085:	80 fa 3e             	cmp    dl,0x3e
c0011088:	0f 87 82 00 00 00    	ja     c0011110 <VgaText::putchar(char)+0xde>
c001108e:	3c 6d                	cmp    al,0x6d
c0011090:	75 4d                	jne    c00110df <VgaText::putchar(char)+0xad>
c0011092:	31 f6                	xor    esi,esi
c0011094:	31 d2                	xor    edx,edx
c0011096:	31 c0                	xor    eax,eax
c0011098:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c001109e:	7e 30                	jle    c00110d0 <VgaText::putchar(char)+0x9e>
c00110a0:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c00110a8:	80 fa 3b             	cmp    dl,0x3b
c00110ab:	75 17                	jne    c00110c4 <VgaText::putchar(char)+0x92>
c00110ad:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00110b1:	50                   	push   eax
c00110b2:	53                   	push   ebx
c00110b3:	e8 ee f5 ff ff       	call   c00106a6 <VgaText::doANSI_SGR(int)>
c00110b8:	59                   	pop    ecx
c00110b9:	31 d2                	xor    edx,edx
c00110bb:	58                   	pop    eax
c00110bc:	31 c0                	xor    eax,eax
c00110be:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00110c2:	eb 09                	jmp    c00110cd <VgaText::putchar(char)+0x9b>
c00110c4:	6b c0 0a             	imul   eax,eax,0xa
c00110c7:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00110cb:	88 ca                	mov    dl,cl
c00110cd:	46                   	inc    esi
c00110ce:	eb c8                	jmp    c0011098 <VgaText::putchar(char)+0x66>
c00110d0:	84 d2                	test   dl,dl
c00110d2:	74 31                	je     c0011105 <VgaText::putchar(char)+0xd3>
c00110d4:	50                   	push   eax
c00110d5:	53                   	push   ebx
c00110d6:	e8 cb f5 ff ff       	call   c00106a6 <VgaText::doANSI_SGR(int)>
c00110db:	58                   	pop    eax
c00110dc:	5a                   	pop    edx
c00110dd:	eb 26                	jmp    c0011105 <VgaText::putchar(char)+0xd3>
c00110df:	3c 4a                	cmp    al,0x4a
c00110e1:	75 22                	jne    c0011105 <VgaText::putchar(char)+0xd3>
c00110e3:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c00110ea:	75 19                	jne    c0011105 <VgaText::putchar(char)+0xd3>
c00110ec:	83 ec 0c             	sub    esp,0xc
c00110ef:	53                   	push   ebx
c00110f0:	e8 d9 fe ff ff       	call   c0010fce <VgaText::clearScreen()>
c00110f5:	83 c4 0c             	add    esp,0xc
c00110f8:	6a 00                	push   0x0
c00110fa:	6a 00                	push   0x0
c00110fc:	53                   	push   ebx
c00110fd:	e8 ac f7 ff ff       	call   c00108ae <VgaText::setCursor(int, int)>
c0011102:	83 c4 10             	add    esp,0x10
c0011105:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c001110e:	eb 36                	jmp    c0011146 <VgaText::putchar(char)+0x114>
c0011110:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0011116:	83 fa 0e             	cmp    edx,0xe
c0011119:	7f 2b                	jg     c0011146 <VgaText::putchar(char)+0x114>
c001111b:	8d 4a 01             	lea    ecx,[edx+0x1]
c001111e:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0011124:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c001112b:	eb 19                	jmp    c0011146 <VgaText::putchar(char)+0x114>
c001112d:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0011133:	0f be c0             	movsx  eax,al
c0011136:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c001113c:	50                   	push   eax
c001113d:	53                   	push   ebx
c001113e:	e8 ab fa ff ff       	call   c0010bee <VgaText::putchar(char, VgaColour, VgaColour)>
c0011143:	83 c4 10             	add    esp,0x10
c0011146:	83 c4 14             	add    esp,0x14
c0011149:	5b                   	pop    ebx
c001114a:	5e                   	pop    esi
c001114b:	c3                   	ret    

c001114c <VgaText::puts(char const*)>:
c001114c:	53                   	push   ebx
c001114d:	83 ec 08             	sub    esp,0x8
c0011150:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011154:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0011157:	84 c0                	test   al,al
c0011159:	74 12                	je     c001116d <VgaText::puts(char const*)+0x21>
c001115b:	43                   	inc    ebx
c001115c:	51                   	push   ecx
c001115d:	51                   	push   ecx
c001115e:	50                   	push   eax
c001115f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011163:	e8 ca fe ff ff       	call   c0011032 <VgaText::putchar(char)>
c0011168:	83 c4 10             	add    esp,0x10
c001116b:	eb e7                	jmp    c0011154 <VgaText::puts(char const*)+0x8>
c001116d:	83 c4 08             	add    esp,0x8
c0011170:	5b                   	pop    ebx
c0011171:	c3                   	ret    

c0011172 <VgaText::putx(unsigned int)>:
c0011172:	57                   	push   edi
c0011173:	b9 11 00 00 00       	mov    ecx,0x11
c0011178:	56                   	push   esi
c0011179:	be 7a a4 02 c0       	mov    esi,0xc002a47a
c001117e:	53                   	push   ebx
c001117f:	83 ec 20             	sub    esp,0x20
c0011182:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011186:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c001118a:	fc                   	cld    
c001118b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001118d:	be 08 00 00 00       	mov    esi,0x8
c0011192:	50                   	push   eax
c0011193:	50                   	push   eax
c0011194:	89 d8                	mov    eax,ebx
c0011196:	c1 e3 04             	shl    ebx,0x4
c0011199:	c1 e8 1c             	shr    eax,0x1c
c001119c:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00111a1:	50                   	push   eax
c00111a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00111a6:	e8 87 fe ff ff       	call   c0011032 <VgaText::putchar(char)>
c00111ab:	83 c4 10             	add    esp,0x10
c00111ae:	4e                   	dec    esi
c00111af:	75 e1                	jne    c0011192 <VgaText::putx(unsigned int)+0x20>
c00111b1:	83 c4 20             	add    esp,0x20
c00111b4:	5b                   	pop    ebx
c00111b5:	5e                   	pop    esi
c00111b6:	5f                   	pop    edi
c00111b7:	c3                   	ret    

c00111b8 <VgaText::VgaText(char const*)>:
c00111b8:	57                   	push   edi
c00111b9:	56                   	push   esi
c00111ba:	53                   	push   ebx
c00111bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111bf:	83 ec 08             	sub    esp,0x8
c00111c2:	6a 00                	push   0x0
c00111c4:	50                   	push   eax
c00111c5:	e8 6e 05 00 00       	call   c0011738 <UnixFile::UnixFile(int)>
c00111ca:	83 c4 10             	add    esp,0x10
c00111cd:	ba e0 a4 02 c0       	mov    edx,0xc002a4e0
c00111d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111d6:	89 10                	mov    DWORD PTR [eax],edx
c00111d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111dc:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c00111e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ea:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c00111f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111f8:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c00111ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011203:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c001120a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001120e:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0011218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001121c:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0011226:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001122a:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0011231:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011235:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c001123c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011240:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0011246:	bb 80 e5 02 c0       	mov    ebx,0xc002e580
c001124b:	b8 08 00 00 00       	mov    eax,0x8
c0011250:	fc                   	cld    
c0011251:	89 d7                	mov    edi,edx
c0011253:	89 de                	mov    esi,ebx
c0011255:	89 c1                	mov    ecx,eax
c0011257:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011259:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001125d:	05 1e 10 00 00       	add    eax,0x101e
c0011262:	83 ec 08             	sub    esp,0x8
c0011265:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011269:	50                   	push   eax
c001126a:	e8 c5 f5 fe ff       	call   c0000834 <strcpy>
c001126f:	83 c4 10             	add    esp,0x10
c0011272:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011276:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0011280:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011284:	83 c0 0c             	add    eax,0xc
c0011287:	83 ec 04             	sub    esp,0x4
c001128a:	68 00 0f 00 00       	push   0xf00
c001128f:	6a 00                	push   0x0
c0011291:	50                   	push   eax
c0011292:	e8 e1 f4 fe ff       	call   c0000778 <memset>
c0011297:	83 c4 10             	add    esp,0x10
c001129a:	83 ec 04             	sub    esp,0x4
c001129d:	6a 00                	push   0x0
c001129f:	6a 07                	push   0x7
c00112a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112a5:	e8 b4 f4 ff ff       	call   c001075e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00112aa:	83 c4 10             	add    esp,0x10
c00112ad:	83 ec 08             	sub    esp,0x8
c00112b0:	6a 02                	push   0x2
c00112b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112b6:	e8 49 fa ff ff       	call   c0010d04 <VgaText::setCursorHeight(int)>
c00112bb:	83 c4 10             	add    esp,0x10
c00112be:	83 ec 04             	sub    esp,0x4
c00112c1:	6a 00                	push   0x0
c00112c3:	6a 00                	push   0x0
c00112c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112c9:	e8 e0 f5 ff ff       	call   c00108ae <VgaText::setCursor(int, int)>
c00112ce:	83 c4 10             	add    esp,0x10
c00112d1:	83 ec 08             	sub    esp,0x8
c00112d4:	6a 01                	push   0x1
c00112d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112da:	e8 7d f3 ff ff       	call   c001065c <VgaText::showCursor(bool)>
c00112df:	83 c4 10             	add    esp,0x10
c00112e2:	83 ec 08             	sub    esp,0x8
c00112e5:	6a 01                	push   0x1
c00112e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112eb:	e8 7c f3 ff ff       	call   c001066c <VgaText::disableBlink(bool)>
c00112f0:	83 c4 10             	add    esp,0x10
c00112f3:	83 ec 0c             	sub    esp,0xc
c00112f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112fa:	e8 cf fc ff ff       	call   c0010fce <VgaText::clearScreen()>
c00112ff:	83 c4 10             	add    esp,0x10
c0011302:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011306:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c001130d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011311:	05 9e 10 00 00       	add    eax,0x109e
c0011316:	83 ec 04             	sub    esp,0x4
c0011319:	68 96 00 00 00       	push   0x96
c001131e:	6a 00                	push   0x0
c0011320:	50                   	push   eax
c0011321:	e8 52 f4 fe ff       	call   c0000778 <memset>
c0011326:	83 c4 10             	add    esp,0x10
c0011329:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001132d:	05 34 11 00 00       	add    eax,0x1134
c0011332:	83 ec 04             	sub    esp,0x4
c0011335:	68 2c 01 00 00       	push   0x12c
c001133a:	6a 00                	push   0x0
c001133c:	50                   	push   eax
c001133d:	e8 36 f4 fe ff       	call   c0000778 <memset>
c0011342:	83 c4 10             	add    esp,0x10
c0011345:	90                   	nop
c0011346:	5b                   	pop    ebx
c0011347:	5e                   	pop    esi
c0011348:	5f                   	pop    edi
c0011349:	c3                   	ret    

c001134a <VgaText::receiveKey(unsigned char)>:
c001134a:	55                   	push   ebp
c001134b:	57                   	push   edi
c001134c:	56                   	push   esi
c001134d:	53                   	push   ebx
c001134e:	83 ec 1c             	sub    esp,0x1c
c0011351:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011355:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011359:	84 db                	test   bl,bl
c001135b:	0f 84 c9 00 00 00    	je     c001142a <VgaText::receiveKey(unsigned char)+0xe0>
c0011361:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0011367:	80 fb 08             	cmp    bl,0x8
c001136a:	75 2c                	jne    c0011398 <VgaText::receiveKey(unsigned char)+0x4e>
c001136c:	83 ec 0c             	sub    esp,0xc
c001136f:	57                   	push   edi
c0011370:	e8 1f f4 fe ff       	call   c0000794 <strlen>
c0011375:	83 c4 10             	add    esp,0x10
c0011378:	85 c0                	test   eax,eax
c001137a:	74 41                	je     c00113bd <VgaText::receiveKey(unsigned char)+0x73>
c001137c:	50                   	push   eax
c001137d:	50                   	push   eax
c001137e:	6a 08                	push   0x8
c0011380:	56                   	push   esi
c0011381:	e8 ac fc ff ff       	call   c0011032 <VgaText::putchar(char)>
c0011386:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011389:	e8 06 f4 fe ff       	call   c0000794 <strlen>
c001138e:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0011396:	eb 22                	jmp    c00113ba <VgaText::receiveKey(unsigned char)+0x70>
c0011398:	0f be c3             	movsx  eax,bl
c001139b:	52                   	push   edx
c001139c:	52                   	push   edx
c001139d:	50                   	push   eax
c001139e:	56                   	push   esi
c001139f:	e8 8e fc ff ff       	call   c0011032 <VgaText::putchar(char)>
c00113a4:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c00113a8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00113ad:	59                   	pop    ecx
c00113ae:	5d                   	pop    ebp
c00113af:	8d 44 24 16          	lea    eax,[esp+0x16]
c00113b3:	50                   	push   eax
c00113b4:	57                   	push   edi
c00113b5:	e8 ba f5 fe ff       	call   c0000974 <strcat>
c00113ba:	83 c4 10             	add    esp,0x10
c00113bd:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c00113c4:	75 05                	jne    c00113cb <VgaText::receiveKey(unsigned char)+0x81>
c00113c6:	80 fb 0a             	cmp    bl,0xa
c00113c9:	75 53                	jne    c001141e <VgaText::receiveKey(unsigned char)+0xd4>
c00113cb:	83 ec 0c             	sub    esp,0xc
c00113ce:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c00113d4:	53                   	push   ebx
c00113d5:	e8 ba f3 fe ff       	call   c0000794 <strlen>
c00113da:	89 3c 24             	mov    DWORD PTR [esp],edi
c00113dd:	89 c5                	mov    ebp,eax
c00113df:	e8 b0 f3 fe ff       	call   c0000794 <strlen>
c00113e4:	83 c4 10             	add    esp,0x10
c00113e7:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c00113eb:	3d 2c 01 00 00       	cmp    eax,0x12c
c00113f0:	76 10                	jbe    c0011402 <VgaText::receiveKey(unsigned char)+0xb8>
c00113f2:	83 ec 0c             	sub    esp,0xc
c00113f5:	68 8b a4 02 c0       	push   0xc002a48b
c00113fa:	e8 90 92 00 00       	call   c001a68f <Krnl::panic(char const*)>
c00113ff:	83 c4 10             	add    esp,0x10
c0011402:	50                   	push   eax
c0011403:	50                   	push   eax
c0011404:	57                   	push   edi
c0011405:	53                   	push   ebx
c0011406:	e8 69 f5 fe ff       	call   c0000974 <strcat>
c001140b:	83 c4 0c             	add    esp,0xc
c001140e:	68 96 00 00 00       	push   0x96
c0011413:	6a 00                	push   0x0
c0011415:	57                   	push   edi
c0011416:	e8 5d f3 fe ff       	call   c0000778 <memset>
c001141b:	83 c4 10             	add    esp,0x10
c001141e:	83 ec 0c             	sub    esp,0xc
c0011421:	56                   	push   esi
c0011422:	e8 d5 f9 ff ff       	call   c0010dfc <VgaText::doUpdate()>
c0011427:	83 c4 10             	add    esp,0x10
c001142a:	83 c4 1c             	add    esp,0x1c
c001142d:	5b                   	pop    ebx
c001142e:	5e                   	pop    esi
c001142f:	5f                   	pop    edi
c0011430:	5d                   	pop    ebp
c0011431:	c3                   	ret    

c0011432 <VgaText::write(unsigned long long, void*, int*)>:
c0011432:	55                   	push   ebp
c0011433:	57                   	push   edi
c0011434:	56                   	push   esi
c0011435:	53                   	push   ebx
c0011436:	83 ec 0c             	sub    esp,0xc
c0011439:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001143d:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011441:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011445:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c001144c:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c001144f:	39 eb                	cmp    ebx,ebp
c0011451:	74 13                	je     c0011466 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0011453:	43                   	inc    ebx
c0011454:	50                   	push   eax
c0011455:	50                   	push   eax
c0011456:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c001145a:	50                   	push   eax
c001145b:	56                   	push   esi
c001145c:	e8 d1 fb ff ff       	call   c0011032 <VgaText::putchar(char)>
c0011461:	83 c4 10             	add    esp,0x10
c0011464:	eb e9                	jmp    c001144f <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0011466:	83 ec 0c             	sub    esp,0xc
c0011469:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0011470:	56                   	push   esi
c0011471:	e8 86 f9 ff ff       	call   c0010dfc <VgaText::doUpdate()>
c0011476:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001147a:	89 38                	mov    DWORD PTR [eax],edi
c001147c:	83 c4 1c             	add    esp,0x1c
c001147f:	31 c0                	xor    eax,eax
c0011481:	5b                   	pop    ebx
c0011482:	5e                   	pop    esi
c0011483:	5f                   	pop    edi
c0011484:	5d                   	pop    ebp
c0011485:	c3                   	ret    

c0011486 <newTerminal(char*)>:
c0011486:	83 ec 28             	sub    esp,0x28
c0011489:	68 60 12 00 00       	push   0x1260
c001148e:	e8 b0 e3 ff ff       	call   c000f843 <malloc>
c0011493:	5a                   	pop    edx
c0011494:	59                   	pop    ecx
c0011495:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011499:	50                   	push   eax
c001149a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001149e:	e8 15 fd ff ff       	call   c00111b8 <VgaText::VgaText(char const*)>
c00114a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114a7:	83 c4 2c             	add    esp,0x2c
c00114aa:	c3                   	ret    
c00114ab:	90                   	nop

c00114ac <TSS::TSS()>:
c00114ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114b0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00114b7:	90                   	nop
c00114b8:	c3                   	ret    
c00114b9:	90                   	nop

c00114ba <TSS::setESP(unsigned long)>:
c00114ba:	55                   	push   ebp
c00114bb:	89 e5                	mov    ebp,esp
c00114bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114c3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00114c6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114c9:	90                   	nop
c00114ca:	5d                   	pop    ebp
c00114cb:	c3                   	ret    

c00114cc <TSS::flush()>:
c00114cc:	55                   	push   ebp
c00114cd:	89 e5                	mov    ebp,esp
c00114cf:	83 ec 10             	sub    esp,0x10
c00114d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00114d7:	83 c8 03             	or     eax,0x3
c00114da:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00114de:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00114e2:	66 89 d0             	mov    ax,dx
c00114e5:	0f 00 d8             	ltr    ax
c00114e8:	90                   	nop
c00114e9:	c9                   	leave  
c00114ea:	c3                   	ret    
c00114eb:	90                   	nop

c00114ec <TSS::setup(unsigned long, unsigned long)>:
c00114ec:	55                   	push   ebp
c00114ed:	89 e5                	mov    ebp,esp
c00114ef:	83 ec 18             	sub    esp,0x18
c00114f2:	83 ec 0c             	sub    esp,0xc
c00114f5:	6a 68                	push   0x68
c00114f7:	e8 47 e3 ff ff       	call   c000f843 <malloc>
c00114fc:	83 c4 10             	add    esp,0x10
c00114ff:	89 c2                	mov    edx,eax
c0011501:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011504:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011507:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001150a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001150d:	83 ec 04             	sub    esp,0x4
c0011510:	6a 68                	push   0x68
c0011512:	6a 00                	push   0x0
c0011514:	50                   	push   eax
c0011515:	e8 5e f2 fe ff       	call   c0000778 <memset>
c001151a:	83 c4 10             	add    esp,0x10
c001151d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011520:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011523:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0011529:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001152c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001152f:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0011535:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011538:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001153b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001153e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011541:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011544:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011547:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c001154d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011550:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011553:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0011559:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001155c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001155f:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011565:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011568:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001156b:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011571:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011574:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011577:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c001157d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011580:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011583:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0011589:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001158c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001158f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0011592:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011595:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011598:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001159b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001159e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00115a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115a7:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00115ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115b1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115b4:	0f 20 da             	mov    edx,cr3
c00115b7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00115ba:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00115bd:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00115c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115c3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115c6:	83 ec 08             	sub    esp,0x8
c00115c9:	50                   	push   eax
c00115ca:	8d 45 ec             	lea    eax,[ebp-0x14]
c00115cd:	50                   	push   eax
c00115ce:	e8 4b da ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c00115d3:	83 c4 10             	add    esp,0x10
c00115d6:	83 ec 08             	sub    esp,0x8
c00115d9:	6a 68                	push   0x68
c00115db:	8d 45 ec             	lea    eax,[ebp-0x14]
c00115de:	50                   	push   eax
c00115df:	e8 56 da ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c00115e4:	83 c4 10             	add    esp,0x10
c00115e7:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00115eb:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00115ee:	83 e0 0f             	and    eax,0xf
c00115f1:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00115f4:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00115f7:	83 c8 40             	or     eax,0x40
c00115fa:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00115fd:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0011602:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011608:	05 78 01 00 00       	add    eax,0x178
c001160d:	83 ec 04             	sub    esp,0x4
c0011610:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011613:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0011616:	50                   	push   eax
c0011617:	e8 52 da ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c001161c:	83 c4 10             	add    esp,0x10
c001161f:	89 c2                	mov    edx,eax
c0011621:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011624:	89 10                	mov    DWORD PTR [eax],edx
c0011626:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c001162b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011631:	05 78 01 00 00       	add    eax,0x178
c0011636:	83 ec 0c             	sub    esp,0xc
c0011639:	50                   	push   eax
c001163a:	e8 73 da ff ff       	call   c000f0b2 <GDT::flush()>
c001163f:	83 c4 10             	add    esp,0x10
c0011642:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011645:	8b 00                	mov    eax,DWORD PTR [eax]
c0011647:	83 ec 08             	sub    esp,0x8
c001164a:	50                   	push   eax
c001164b:	68 f4 a4 02 c0       	push   0xc002a4f4
c0011650:	e8 95 19 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0011655:	83 c4 10             	add    esp,0x10
c0011658:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001165b:	8b 00                	mov    eax,DWORD PTR [eax]
c001165d:	c9                   	leave  
c001165e:	c3                   	ret    
c001165f:	90                   	nop

c0011660 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011660:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011664:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011668:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001166b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011670:	75 08                	jne    c001167a <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011672:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011678:	eb 38                	jmp    c00116b2 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c001167a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001167f:	75 17                	jne    c0011698 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011681:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011686:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011689:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001168f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011691:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011695:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011698:	89 c1                	mov    ecx,eax
c001169a:	83 e1 fd             	and    ecx,0xfffffffd
c001169d:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00116a3:	74 cd                	je     c0011672 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00116a5:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00116aa:	83 e0 ef             	and    eax,0xffffffef
c00116ad:	83 f8 08             	cmp    eax,0x8
c00116b0:	76 c0                	jbe    c0011672 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00116b2:	31 c0                	xor    eax,eax
c00116b4:	c3                   	ret    
c00116b5:	90                   	nop

c00116b6 <ReservedFilename::isAtty()>:
c00116b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00116bd:	31 c0                	xor    eax,eax
c00116bf:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00116c5:	74 09                	je     c00116d0 <ReservedFilename::isAtty()+0x1a>
c00116c7:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00116cd:	0f 94 c0             	sete   al
c00116d0:	c3                   	ret    
c00116d1:	90                   	nop

c00116d2 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00116d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00116da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116dd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00116e1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00116e6:	75 08                	jne    c00116f0 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00116e8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00116ee:	eb 3d                	jmp    c001172d <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00116f0:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00116f5:	75 17                	jne    c001170e <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00116f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116fc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00116ff:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011705:	8b 10                	mov    edx,DWORD PTR [eax]
c0011707:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001170b:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c001170e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011713:	75 04                	jne    c0011719 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011715:	89 0a                	mov    DWORD PTR [edx],ecx
c0011717:	eb 14                	jmp    c001172d <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011719:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c001171e:	74 c8                	je     c00116e8 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011720:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011725:	83 e0 ef             	and    eax,0xffffffef
c0011728:	83 f8 08             	cmp    eax,0x8
c001172b:	76 bb                	jbe    c00116e8 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c001172d:	31 c0                	xor    eax,eax
c001172f:	c3                   	ret    

c0011730 <UnixFile::getFileDescriptor()>:
c0011730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011734:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011737:	c3                   	ret    

c0011738 <UnixFile::UnixFile(int)>:
c0011738:	53                   	push   ebx
c0011739:	83 ec 28             	sub    esp,0x28
c001173c:	ba e0 a5 02 c0       	mov    edx,0xc002a5e0
c0011741:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011745:	89 10                	mov    DWORD PTR [eax],edx
c0011747:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c001174f:	0f 8f 8c 01 00 00    	jg     c00118e1 <UnixFile::UnixFile(int)+0x1a9>
c0011755:	a1 60 d4 02 c0       	mov    eax,ds:0xc002d460
c001175a:	8d 50 01             	lea    edx,[eax+0x1]
c001175d:	89 15 60 d4 02 c0    	mov    DWORD PTR ds:0xc002d460,edx
c0011763:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011767:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001176a:	83 ec 08             	sub    esp,0x8
c001176d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011771:	68 38 e6 02 c0       	push   0xc002e638
c0011776:	e8 55 70 01 00       	call   c00287d0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001177b:	83 c4 10             	add    esp,0x10
c001177e:	a0 34 e6 02 c0       	mov    al,ds:0xc002e634
c0011783:	83 f0 01             	xor    eax,0x1
c0011786:	84 c0                	test   al,al
c0011788:	0f 84 54 01 00 00    	je     c00118e2 <UnixFile::UnixFile(int)+0x1aa>
c001178e:	c6 05 34 e6 02 c0 01 	mov    BYTE PTR ds:0xc002e634,0x1
c0011795:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c001179d:	83 ec 0c             	sub    esp,0xc
c00117a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00117a4:	e8 9a e0 ff ff       	call   c000f843 <malloc>
c00117a9:	83 c4 10             	add    esp,0x10
c00117ac:	89 c3                	mov    ebx,eax
c00117ae:	83 ec 08             	sub    esp,0x8
c00117b1:	68 03 ff ff 0f       	push   0xfffff03
c00117b6:	53                   	push   ebx
c00117b7:	e8 2c 01 00 00       	call   c00118e8 <ReservedFilename::ReservedFilename(int)>
c00117bc:	83 c4 10             	add    esp,0x10
c00117bf:	89 1d 2c e6 02 c0    	mov    DWORD PTR ds:0xc002e62c,ebx
c00117c5:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00117cd:	83 ec 0c             	sub    esp,0xc
c00117d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117d4:	e8 6a e0 ff ff       	call   c000f843 <malloc>
c00117d9:	83 c4 10             	add    esp,0x10
c00117dc:	89 c3                	mov    ebx,eax
c00117de:	83 ec 08             	sub    esp,0x8
c00117e1:	68 01 ff ff 0f       	push   0xfffff01
c00117e6:	53                   	push   ebx
c00117e7:	e8 fc 00 00 00       	call   c00118e8 <ReservedFilename::ReservedFilename(int)>
c00117ec:	83 c4 10             	add    esp,0x10
c00117ef:	89 1d 30 e6 02 c0    	mov    DWORD PTR ds:0xc002e630,ebx
c00117f5:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00117fd:	83 ec 0c             	sub    esp,0xc
c0011800:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011804:	e8 3a e0 ff ff       	call   c000f843 <malloc>
c0011809:	83 c4 10             	add    esp,0x10
c001180c:	89 c3                	mov    ebx,eax
c001180e:	83 ec 08             	sub    esp,0x8
c0011811:	68 00 ff ff 0f       	push   0xfffff00
c0011816:	53                   	push   ebx
c0011817:	e8 cc 00 00 00       	call   c00118e8 <ReservedFilename::ReservedFilename(int)>
c001181c:	83 c4 10             	add    esp,0x10
c001181f:	89 1d 24 e6 02 c0    	mov    DWORD PTR ds:0xc002e624,ebx
c0011825:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c001182d:	83 ec 0c             	sub    esp,0xc
c0011830:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011834:	e8 0a e0 ff ff       	call   c000f843 <malloc>
c0011839:	83 c4 10             	add    esp,0x10
c001183c:	89 c3                	mov    ebx,eax
c001183e:	83 ec 08             	sub    esp,0x8
c0011841:	68 02 ff ff 0f       	push   0xfffff02
c0011846:	53                   	push   ebx
c0011847:	e8 9c 00 00 00       	call   c00118e8 <ReservedFilename::ReservedFilename(int)>
c001184c:	83 c4 10             	add    esp,0x10
c001184f:	89 1d 28 e6 02 c0    	mov    DWORD PTR ds:0xc002e628,ebx
c0011855:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001185d:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011862:	7f 7e                	jg     c00118e2 <UnixFile::UnixFile(int)+0x1aa>
c0011864:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c001186c:	83 ec 0c             	sub    esp,0xc
c001186f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011873:	e8 cb df ff ff       	call   c000f843 <malloc>
c0011878:	83 c4 10             	add    esp,0x10
c001187b:	89 c3                	mov    ebx,eax
c001187d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011881:	05 10 ff ff 0f       	add    eax,0xfffff10
c0011886:	83 ec 08             	sub    esp,0x8
c0011889:	50                   	push   eax
c001188a:	53                   	push   ebx
c001188b:	e8 58 00 00 00       	call   c00118e8 <ReservedFilename::ReservedFilename(int)>
c0011890:	83 c4 10             	add    esp,0x10
c0011893:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011897:	89 1c 85 00 e6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1a00],ebx
c001189e:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00118a6:	83 ec 0c             	sub    esp,0xc
c00118a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00118ad:	e8 91 df ff ff       	call   c000f843 <malloc>
c00118b2:	83 c4 10             	add    esp,0x10
c00118b5:	89 c3                	mov    ebx,eax
c00118b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118bb:	05 20 ff ff 0f       	add    eax,0xfffff20
c00118c0:	83 ec 08             	sub    esp,0x8
c00118c3:	50                   	push   eax
c00118c4:	53                   	push   ebx
c00118c5:	e8 1e 00 00 00       	call   c00118e8 <ReservedFilename::ReservedFilename(int)>
c00118ca:	83 c4 10             	add    esp,0x10
c00118cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118d1:	89 1c 85 c0 e5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1a40],ebx
c00118d8:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118dc:	e9 7c ff ff ff       	jmp    c001185d <UnixFile::UnixFile(int)+0x125>
c00118e1:	90                   	nop
c00118e2:	83 c4 28             	add    esp,0x28
c00118e5:	5b                   	pop    ebx
c00118e6:	c3                   	ret    
c00118e7:	90                   	nop

c00118e8 <ReservedFilename::ReservedFilename(int)>:
c00118e8:	83 ec 0c             	sub    esp,0xc
c00118eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118ef:	83 ec 08             	sub    esp,0x8
c00118f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118f6:	50                   	push   eax
c00118f7:	e8 3c fe ff ff       	call   c0011738 <UnixFile::UnixFile(int)>
c00118fc:	83 c4 10             	add    esp,0x10
c00118ff:	ba fc a5 02 c0       	mov    edx,0xc002a5fc
c0011904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011908:	89 10                	mov    DWORD PTR [eax],edx
c001190a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001190e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011912:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011915:	90                   	nop
c0011916:	83 c4 0c             	add    esp,0xc
c0011919:	c3                   	ret    

c001191a <UnixFile::~UnixFile()>:
c001191a:	83 ec 1c             	sub    esp,0x1c
c001191d:	ba e0 a5 02 c0       	mov    edx,0xc002a5e0
c0011922:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011926:	89 10                	mov    DWORD PTR [eax],edx
c0011928:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001192c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001192f:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011934:	7f 73                	jg     c00119a9 <UnixFile::~UnixFile()+0x8f>
c0011936:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001193e:	83 ec 0c             	sub    esp,0xc
c0011941:	68 38 e6 02 c0       	push   0xc002e638
c0011946:	e8 59 6f 01 00       	call   c00288a4 <LinkedList<UnixFile>::getFirstElement()>
c001194b:	83 c4 10             	add    esp,0x10
c001194e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011952:	83 ec 0c             	sub    esp,0xc
c0011955:	68 38 e6 02 c0       	push   0xc002e638
c001195a:	e8 4d 6f 01 00       	call   c00288ac <LinkedList<UnixFile>::removeFirst()>
c001195f:	83 c4 10             	add    esp,0x10
c0011962:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011966:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001196a:	74 40                	je     c00119ac <UnixFile::~UnixFile()+0x92>
c001196c:	83 ec 08             	sub    esp,0x8
c001196f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011973:	68 38 e6 02 c0       	push   0xc002e638
c0011978:	e8 53 6e 01 00       	call   c00287d0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001197d:	83 c4 10             	add    esp,0x10
c0011980:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011984:	8d 50 01             	lea    edx,[eax+0x1]
c0011987:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001198b:	3d 88 13 00 00       	cmp    eax,0x1388
c0011990:	0f 94 c0             	sete   al
c0011993:	84 c0                	test   al,al
c0011995:	74 a7                	je     c001193e <UnixFile::~UnixFile()+0x24>
c0011997:	83 ec 0c             	sub    esp,0xc
c001199a:	68 b8 a5 02 c0       	push   0xc002a5b8
c001199f:	e8 eb 8c 00 00       	call   c001a68f <Krnl::panic(char const*)>
c00119a4:	83 c4 10             	add    esp,0x10
c00119a7:	eb 95                	jmp    c001193e <UnixFile::~UnixFile()+0x24>
c00119a9:	90                   	nop
c00119aa:	eb 01                	jmp    c00119ad <UnixFile::~UnixFile()+0x93>
c00119ac:	90                   	nop
c00119ad:	90                   	nop
c00119ae:	83 c4 1c             	add    esp,0x1c
c00119b1:	c3                   	ret    

c00119b2 <UnixFile::~UnixFile()>:
c00119b2:	83 ec 0c             	sub    esp,0xc
c00119b5:	83 ec 0c             	sub    esp,0xc
c00119b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119bc:	e8 59 ff ff ff       	call   c001191a <UnixFile::~UnixFile()>
c00119c1:	83 c4 10             	add    esp,0x10
c00119c4:	83 ec 08             	sub    esp,0x8
c00119c7:	6a 0c                	push   0xc
c00119c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119cd:	e8 38 15 00 00       	call   c0012f0a <operator delete(void*, unsigned long)>
c00119d2:	83 c4 10             	add    esp,0x10
c00119d5:	83 c4 0c             	add    esp,0xc
c00119d8:	c3                   	ret    
c00119d9:	90                   	nop

c00119da <ReservedFilename::~ReservedFilename()>:
c00119da:	83 ec 0c             	sub    esp,0xc
c00119dd:	ba fc a5 02 c0       	mov    edx,0xc002a5fc
c00119e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119e6:	89 10                	mov    DWORD PTR [eax],edx
c00119e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119ec:	83 ec 0c             	sub    esp,0xc
c00119ef:	50                   	push   eax
c00119f0:	e8 25 ff ff ff       	call   c001191a <UnixFile::~UnixFile()>
c00119f5:	83 c4 10             	add    esp,0x10
c00119f8:	90                   	nop
c00119f9:	83 c4 0c             	add    esp,0xc
c00119fc:	c3                   	ret    
c00119fd:	90                   	nop

c00119fe <ReservedFilename::~ReservedFilename()>:
c00119fe:	83 ec 0c             	sub    esp,0xc
c0011a01:	83 ec 0c             	sub    esp,0xc
c0011a04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a08:	e8 cd ff ff ff       	call   c00119da <ReservedFilename::~ReservedFilename()>
c0011a0d:	83 c4 10             	add    esp,0x10
c0011a10:	83 ec 08             	sub    esp,0x8
c0011a13:	6a 0c                	push   0xc
c0011a15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a19:	e8 ec 14 00 00       	call   c0012f0a <operator delete(void*, unsigned long)>
c0011a1e:	83 c4 10             	add    esp,0x10
c0011a21:	83 c4 0c             	add    esp,0xc
c0011a24:	c3                   	ret    

c0011a25 <getFromFileDescriptor(int)>:
c0011a25:	53                   	push   ebx
c0011a26:	83 ec 08             	sub    esp,0x8
c0011a29:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011a2d:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011a33:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011a39:	7f 2c                	jg     c0011a67 <getFromFileDescriptor(int)+0x42>
c0011a3b:	83 ec 0c             	sub    esp,0xc
c0011a3e:	68 38 e6 02 c0       	push   0xc002e638
c0011a43:	e8 5c 6e 01 00       	call   c00288a4 <LinkedList<UnixFile>::getFirstElement()>
c0011a48:	83 c4 10             	add    esp,0x10
c0011a4b:	85 c0                	test   eax,eax
c0011a4d:	75 04                	jne    c0011a53 <getFromFileDescriptor(int)+0x2e>
c0011a4f:	31 c0                	xor    eax,eax
c0011a51:	eb 6e                	jmp    c0011ac1 <getFromFileDescriptor(int)+0x9c>
c0011a53:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011a56:	74 69                	je     c0011ac1 <getFromFileDescriptor(int)+0x9c>
c0011a58:	52                   	push   edx
c0011a59:	52                   	push   edx
c0011a5a:	50                   	push   eax
c0011a5b:	68 38 e6 02 c0       	push   0xc002e638
c0011a60:	e8 e9 6e 01 00       	call   c002894e <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011a65:	eb e1                	jmp    c0011a48 <getFromFileDescriptor(int)+0x23>
c0011a67:	a1 2c e6 02 c0       	mov    eax,ds:0xc002e62c
c0011a6c:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011a72:	74 4d                	je     c0011ac1 <getFromFileDescriptor(int)+0x9c>
c0011a74:	a1 30 e6 02 c0       	mov    eax,ds:0xc002e630
c0011a79:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011a7f:	74 40                	je     c0011ac1 <getFromFileDescriptor(int)+0x9c>
c0011a81:	a1 28 e6 02 c0       	mov    eax,ds:0xc002e628
c0011a86:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011a8c:	74 33                	je     c0011ac1 <getFromFileDescriptor(int)+0x9c>
c0011a8e:	a1 24 e6 02 c0       	mov    eax,ds:0xc002e624
c0011a93:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011a99:	74 26                	je     c0011ac1 <getFromFileDescriptor(int)+0x9c>
c0011a9b:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011aa1:	83 f8 08             	cmp    eax,0x8
c0011aa4:	77 09                	ja     c0011aaf <getFromFileDescriptor(int)+0x8a>
c0011aa6:	8b 04 85 00 e6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1a00]
c0011aad:	eb 12                	jmp    c0011ac1 <getFromFileDescriptor(int)+0x9c>
c0011aaf:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011ab5:	83 fb 08             	cmp    ebx,0x8
c0011ab8:	77 95                	ja     c0011a4f <getFromFileDescriptor(int)+0x2a>
c0011aba:	8b 04 9d c0 e5 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1a40]
c0011ac1:	83 c4 08             	add    esp,0x8
c0011ac4:	5b                   	pop    ebx
c0011ac5:	c3                   	ret    

c0011ac6 <__static_initialization_and_destruction_0(int, int)>:
c0011ac6:	83 ec 0c             	sub    esp,0xc
c0011ac9:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011ace:	75 34                	jne    c0011b04 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011ad0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011ad8:	75 2a                	jne    c0011b04 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011ada:	83 ec 0c             	sub    esp,0xc
c0011add:	68 38 e6 02 c0       	push   0xc002e638
c0011ae2:	e8 91 6c 01 00       	call   c0028778 <LinkedList<UnixFile>::LinkedList()>
c0011ae7:	83 c4 10             	add    esp,0x10
c0011aea:	83 ec 04             	sub    esp,0x4
c0011aed:	68 d8 d3 02 c0       	push   0xc002d3d8
c0011af2:	68 38 e6 02 c0       	push   0xc002e638
c0011af7:	68 76 87 02 c0       	push   0xc0028776
c0011afc:	e8 83 13 00 00       	call   c0012e84 <__cxa_atexit>
c0011b01:	83 c4 10             	add    esp,0x10
c0011b04:	90                   	nop
c0011b05:	83 c4 0c             	add    esp,0xc
c0011b08:	c3                   	ret    

c0011b09 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011b09:	83 ec 0c             	sub    esp,0xc
c0011b0c:	83 ec 08             	sub    esp,0x8
c0011b0f:	68 ff ff 00 00       	push   0xffff
c0011b14:	6a 01                	push   0x1
c0011b16:	e8 ab ff ff ff       	call   c0011ac6 <__static_initialization_and_destruction_0(int, int)>
c0011b1b:	83 c4 10             	add    esp,0x10
c0011b1e:	83 c4 0c             	add    esp,0xc
c0011b21:	c3                   	ret    

c0011b22 <Virt::swappingSetup()>:
c0011b22:	57                   	push   edi
c0011b23:	56                   	push   esi
c0011b24:	53                   	push   ebx
c0011b25:	83 ec 1c             	sub    esp,0x1c
c0011b28:	68 14 01 00 00       	push   0x114
c0011b2d:	e8 11 dd ff ff       	call   c000f843 <malloc>
c0011b32:	83 c4 0c             	add    esp,0xc
c0011b35:	89 c6                	mov    esi,eax
c0011b37:	ff 35 34 1a 03 c0    	push   DWORD PTR ds:0xc0031a34
c0011b3d:	68 10 a6 02 c0       	push   0xc002a610
c0011b42:	50                   	push   eax
c0011b43:	e8 fa 19 00 00       	call   c0013542 <File::File(char const*, Process*)>
c0011b48:	83 c4 10             	add    esp,0x10
c0011b4b:	85 f6                	test   esi,esi
c0011b4d:	0f 84 2a 01 00 00    	je     c0011c7d <Virt::swappingSetup()+0x15b>
c0011b53:	53                   	push   ebx
c0011b54:	8d 44 24 07          	lea    eax,[esp+0x7]
c0011b58:	50                   	push   eax
c0011b59:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011b5d:	50                   	push   eax
c0011b5e:	56                   	push   esi
c0011b5f:	e8 ee 1c 00 00       	call   c0013852 <File::stat(unsigned long long*, bool*)>
c0011b64:	83 c4 10             	add    esp,0x10
c0011b67:	85 c0                	test   eax,eax
c0011b69:	75 0b                	jne    c0011b76 <Virt::swappingSetup()+0x54>
c0011b6b:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0011b70:	0f 84 e6 00 00 00    	je     c0011c5c <Virt::swappingSetup()+0x13a>
c0011b76:	83 ec 0c             	sub    esp,0xc
c0011b79:	56                   	push   esi
c0011b7a:	e8 9f 1b 00 00       	call   c001371e <File::unlink()>
c0011b7f:	c7 04 24 3a a6 02 c0 	mov    DWORD PTR [esp],0xc002a63a
c0011b86:	e8 5f 14 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0011b8b:	58                   	pop    eax
c0011b8c:	5a                   	pop    edx
c0011b8d:	6a 12                	push   0x12
c0011b8f:	56                   	push   esi
c0011b90:	e8 11 1a 00 00       	call   c00135a6 <File::open(FileOpenMode)>
c0011b95:	83 c4 10             	add    esp,0x10
c0011b98:	8b 0d 70 d4 02 c0    	mov    ecx,DWORD PTR ds:0xc002d470
c0011b9e:	85 c9                	test   ecx,ecx
c0011ba0:	74 42                	je     c0011be4 <Virt::swappingSetup()+0xc2>
c0011ba2:	31 db                	xor    ebx,ebx
c0011ba4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011ba8:	83 ec 0c             	sub    esp,0xc
c0011bab:	8b 06                	mov    eax,DWORD PTR [esi]
c0011bad:	57                   	push   edi
c0011bae:	68 22 1b 01 c0       	push   0xc0011b22
c0011bb3:	6a 00                	push   0x0
c0011bb5:	68 00 02 00 00       	push   0x200
c0011bba:	56                   	push   esi
c0011bbb:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011bbe:	83 c4 20             	add    esp,0x20
c0011bc1:	81 7c 24 04 00 02 00 00 	cmp    DWORD PTR [esp+0x4],0x200
c0011bc9:	74 10                	je     c0011bdb <Virt::swappingSetup()+0xb9>
c0011bcb:	83 ec 0c             	sub    esp,0xc
c0011bce:	68 52 a6 02 c0       	push   0xc002a652
c0011bd3:	e8 b7 8a 00 00       	call   c001a68f <Krnl::panic(char const*)>
c0011bd8:	83 c4 10             	add    esp,0x10
c0011bdb:	43                   	inc    ebx
c0011bdc:	39 1d 70 d4 02 c0    	cmp    DWORD PTR ds:0xc002d470,ebx
c0011be2:	77 c4                	ja     c0011ba8 <Virt::swappingSetup()+0x86>
c0011be4:	83 ec 0c             	sub    esp,0xc
c0011be7:	56                   	push   esi
c0011be8:	e8 17 1a 00 00       	call   c0013604 <File::close()>
c0011bed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011bf1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011bf5:	83 c4 10             	add    esp,0x10
c0011bf8:	83 ec 08             	sub    esp,0x8
c0011bfb:	0f ac d0 09          	shrd   eax,edx,0x9
c0011bff:	31 d2                	xor    edx,edx
c0011c01:	a3 70 d4 02 c0       	mov    ds:0xc002d470,eax
c0011c06:	f7 35 6c d4 02 c0    	div    DWORD PTR ds:0xc002d46c
c0011c0c:	c1 e8 05             	shr    eax,0x5
c0011c0f:	50                   	push   eax
c0011c10:	68 70 a6 02 c0       	push   0xc002a670
c0011c15:	e8 d0 13 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0011c1a:	a1 70 d4 02 c0       	mov    eax,ds:0xc002d470
c0011c1f:	31 d2                	xor    edx,edx
c0011c21:	f7 35 6c d4 02 c0    	div    DWORD PTR ds:0xc002d46c
c0011c27:	c1 e8 05             	shr    eax,0x5
c0011c2a:	89 04 24             	mov    DWORD PTR [esp],eax
c0011c2d:	e8 11 dc ff ff       	call   c000f843 <malloc>
c0011c32:	83 c4 0c             	add    esp,0xc
c0011c35:	89 c1                	mov    ecx,eax
c0011c37:	a3 48 e6 02 c0       	mov    ds:0xc002e648,eax
c0011c3c:	31 d2                	xor    edx,edx
c0011c3e:	a1 70 d4 02 c0       	mov    eax,ds:0xc002d470
c0011c43:	f7 35 6c d4 02 c0    	div    DWORD PTR ds:0xc002d46c
c0011c49:	c1 e8 05             	shr    eax,0x5
c0011c4c:	50                   	push   eax
c0011c4d:	6a 00                	push   0x0
c0011c4f:	51                   	push   ecx
c0011c50:	e8 23 eb fe ff       	call   c0000778 <memset>
c0011c55:	83 c4 20             	add    esp,0x20
c0011c58:	5b                   	pop    ebx
c0011c59:	5e                   	pop    esi
c0011c5a:	5f                   	pop    edi
c0011c5b:	c3                   	ret    
c0011c5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011c60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011c64:	89 c1                	mov    ecx,eax
c0011c66:	89 d3                	mov    ebx,edx
c0011c68:	09 c3                	or     ebx,eax
c0011c6a:	0f 84 06 ff ff ff    	je     c0011b76 <Virt::swappingSetup()+0x54>
c0011c70:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0011c76:	74 80                	je     c0011bf8 <Virt::swappingSetup()+0xd6>
c0011c78:	e9 f9 fe ff ff       	jmp    c0011b76 <Virt::swappingSetup()+0x54>
c0011c7d:	83 ec 0c             	sub    esp,0xc
c0011c80:	68 20 a6 02 c0       	push   0xc002a620
c0011c85:	e8 05 8a 00 00       	call   c001a68f <Krnl::panic(char const*)>
c0011c8a:	83 c4 10             	add    esp,0x10
c0011c8d:	e9 c1 fe ff ff       	jmp    c0011b53 <Virt::swappingSetup()+0x31>

c0011c92 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011c92:	53                   	push   ebx
c0011c93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011c97:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011c9b:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011ca1:	89 c8                	mov    eax,ecx
c0011ca3:	d1 e8                	shr    eax,1
c0011ca5:	03 05 68 d4 02 c0    	add    eax,DWORD PTR ds:0xc002d468
c0011cab:	83 e1 01             	and    ecx,0x1
c0011cae:	8a 10                	mov    dl,BYTE PTR [eax]
c0011cb0:	75 09                	jne    c0011cbb <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011cb2:	83 e2 f0             	and    edx,0xfffffff0
c0011cb5:	09 da                	or     edx,ebx
c0011cb7:	88 10                	mov    BYTE PTR [eax],dl
c0011cb9:	5b                   	pop    ebx
c0011cba:	c3                   	ret    
c0011cbb:	c1 e3 04             	shl    ebx,0x4
c0011cbe:	83 e2 0f             	and    edx,0xf
c0011cc1:	09 da                	or     edx,ebx
c0011cc3:	88 10                	mov    BYTE PTR [eax],dl
c0011cc5:	5b                   	pop    ebx
c0011cc6:	c3                   	ret    

c0011cc7 <Virt::getPageState(unsigned long)>:
c0011cc7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ccb:	8b 0d 68 d4 02 c0    	mov    ecx,DWORD PTR ds:0xc002d468
c0011cd1:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011cd7:	89 d0                	mov    eax,edx
c0011cd9:	d1 e8                	shr    eax,1
c0011cdb:	83 e2 01             	and    edx,0x1
c0011cde:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011ce1:	75 04                	jne    c0011ce7 <Virt::getPageState(unsigned long)+0x20>
c0011ce3:	83 e0 0f             	and    eax,0xf
c0011ce6:	c3                   	ret    
c0011ce7:	c0 e8 04             	shr    al,0x4
c0011cea:	c3                   	ret    

c0011ceb <Virt::allocateKernelVirtualPages(int)>:
c0011ceb:	55                   	push   ebp
c0011cec:	31 ed                	xor    ebp,ebp
c0011cee:	57                   	push   edi
c0011cef:	56                   	push   esi
c0011cf0:	53                   	push   ebx
c0011cf1:	31 db                	xor    ebx,ebx
c0011cf3:	83 ec 1c             	sub    esp,0x1c
c0011cf6:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011cfa:	8b 3d 64 d4 02 c0    	mov    edi,DWORD PTR ds:0xc002d464
c0011d00:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011d05:	57                   	push   edi
c0011d06:	e8 bc ff ff ff       	call   c0011cc7 <Virt::getPageState(unsigned long)>
c0011d0b:	5a                   	pop    edx
c0011d0c:	84 c0                	test   al,al
c0011d0e:	75 3a                	jne    c0011d4a <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011d10:	85 db                	test   ebx,ebx
c0011d12:	75 02                	jne    c0011d16 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011d14:	89 fd                	mov    ebp,edi
c0011d16:	43                   	inc    ebx
c0011d17:	39 f3                	cmp    ebx,esi
c0011d19:	74 5a                	je     c0011d75 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011d1b:	47                   	inc    edi
c0011d1c:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011d22:	76 31                	jbe    c0011d55 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011d24:	c7 05 64 d4 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d464,0xc8000
c0011d2e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011d33:	75 28                	jne    c0011d5d <Virt::allocateKernelVirtualPages(int)+0x72>
c0011d35:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011d3a:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011d3f:	57                   	push   edi
c0011d40:	e8 82 ff ff ff       	call   c0011cc7 <Virt::getPageState(unsigned long)>
c0011d45:	5a                   	pop    edx
c0011d46:	84 c0                	test   al,al
c0011d48:	74 c6                	je     c0011d10 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011d4a:	31 db                	xor    ebx,ebx
c0011d4c:	47                   	inc    edi
c0011d4d:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011d53:	77 cf                	ja     c0011d24 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011d55:	89 3d 64 d4 02 c0    	mov    DWORD PTR ds:0xc002d464,edi
c0011d5b:	eb a8                	jmp    c0011d05 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011d5d:	83 ec 0c             	sub    esp,0xc
c0011d60:	68 bc a7 02 c0       	push   0xc002a7bc
c0011d65:	e8 25 89 00 00       	call   c001a68f <Krnl::panic(char const*)>
c0011d6a:	8b 3d 64 d4 02 c0    	mov    edi,DWORD PTR ds:0xc002d464
c0011d70:	83 c4 10             	add    esp,0x10
c0011d73:	eb 90                	jmp    c0011d05 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011d75:	89 2d 64 d4 02 c0    	mov    DWORD PTR ds:0xc002d464,ebp
c0011d7b:	4b                   	dec    ebx
c0011d7c:	74 5f                	je     c0011ddd <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011d7e:	85 f6                	test   esi,esi
c0011d80:	74 3d                	je     c0011dbf <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011d82:	89 e8                	mov    eax,ebp
c0011d84:	31 db                	xor    ebx,ebx
c0011d86:	8d 7e ff             	lea    edi,[esi-0x1]
c0011d89:	eb 14                	jmp    c0011d9f <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011d8b:	6a 01                	push   0x1
c0011d8d:	43                   	inc    ebx
c0011d8e:	50                   	push   eax
c0011d8f:	e8 fe fe ff ff       	call   c0011c92 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d94:	58                   	pop    eax
c0011d95:	39 f3                	cmp    ebx,esi
c0011d97:	5a                   	pop    edx
c0011d98:	74 25                	je     c0011dbf <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011d9a:	a1 64 d4 02 c0       	mov    eax,ds:0xc002d464
c0011d9f:	8d 50 01             	lea    edx,[eax+0x1]
c0011da2:	85 db                	test   ebx,ebx
c0011da4:	89 15 64 d4 02 c0    	mov    DWORD PTR ds:0xc002d464,edx
c0011daa:	74 20                	je     c0011dcc <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011dac:	39 df                	cmp    edi,ebx
c0011dae:	75 db                	jne    c0011d8b <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011db0:	6a 03                	push   0x3
c0011db2:	43                   	inc    ebx
c0011db3:	50                   	push   eax
c0011db4:	e8 d9 fe ff ff       	call   c0011c92 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011db9:	59                   	pop    ecx
c0011dba:	39 f3                	cmp    ebx,esi
c0011dbc:	58                   	pop    eax
c0011dbd:	75 db                	jne    c0011d9a <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011dbf:	83 c4 1c             	add    esp,0x1c
c0011dc2:	89 e8                	mov    eax,ebp
c0011dc4:	5b                   	pop    ebx
c0011dc5:	c1 e0 0c             	shl    eax,0xc
c0011dc8:	5e                   	pop    esi
c0011dc9:	5f                   	pop    edi
c0011dca:	5d                   	pop    ebp
c0011dcb:	c3                   	ret    
c0011dcc:	6a 02                	push   0x2
c0011dce:	bb 01 00 00 00       	mov    ebx,0x1
c0011dd3:	50                   	push   eax
c0011dd4:	e8 b9 fe ff ff       	call   c0011c92 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011dd9:	58                   	pop    eax
c0011dda:	5a                   	pop    edx
c0011ddb:	eb bd                	jmp    c0011d9a <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011ddd:	6a 04                	push   0x4
c0011ddf:	8d 45 01             	lea    eax,[ebp+0x1]
c0011de2:	55                   	push   ebp
c0011de3:	a3 64 d4 02 c0       	mov    ds:0xc002d464,eax
c0011de8:	e8 a5 fe ff ff       	call   c0011c92 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011ded:	59                   	pop    ecx
c0011dee:	89 e8                	mov    eax,ebp
c0011df0:	5b                   	pop    ebx
c0011df1:	c1 e0 0c             	shl    eax,0xc
c0011df4:	83 c4 1c             	add    esp,0x1c
c0011df7:	5b                   	pop    ebx
c0011df8:	5e                   	pop    esi
c0011df9:	5f                   	pop    edi
c0011dfa:	5d                   	pop    ebp
c0011dfb:	c3                   	ret    

c0011dfc <Virt::freeSwapfilePage(unsigned long)>:
c0011dfc:	53                   	push   ebx
c0011dfd:	8b 15 48 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e648
c0011e03:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011e07:	b8 01 00 00 00       	mov    eax,0x1
c0011e0c:	89 cb                	mov    ebx,ecx
c0011e0e:	d3 e0                	shl    eax,cl
c0011e10:	c1 eb 05             	shr    ebx,0x5
c0011e13:	f7 d0                	not    eax
c0011e15:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011e18:	5b                   	pop    ebx
c0011e19:	c3                   	ret    

c0011e1a <Virt::swapIDToSector(unsigned long)>:
c0011e1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e1e:	0f af 05 6c d4 02 c0 	imul   eax,DWORD PTR ds:0xc002d46c
c0011e25:	03 05 74 d4 02 c0    	add    eax,DWORD PTR ds:0xc002d474
c0011e2b:	c3                   	ret    

c0011e2c <Virt::allocateSwapfilePage()>:
c0011e2c:	55                   	push   ebp
c0011e2d:	31 d2                	xor    edx,edx
c0011e2f:	57                   	push   edi
c0011e30:	56                   	push   esi
c0011e31:	53                   	push   ebx
c0011e32:	83 ec 0c             	sub    esp,0xc
c0011e35:	8b 0d 6c d4 02 c0    	mov    ecx,DWORD PTR ds:0xc002d46c
c0011e3b:	a1 70 d4 02 c0       	mov    eax,ds:0xc002d470
c0011e40:	f7 f1                	div    ecx
c0011e42:	39 0d 70 d4 02 c0    	cmp    DWORD PTR ds:0xc002d470,ecx
c0011e48:	72 2d                	jb     c0011e77 <Virt::allocateSwapfilePage()+0x4b>
c0011e4a:	8b 35 48 e6 02 c0    	mov    esi,DWORD PTR ds:0xc002e648
c0011e50:	8b 16                	mov    edx,DWORD PTR [esi]
c0011e52:	f6 c2 01             	test   dl,0x1
c0011e55:	74 3c                	je     c0011e93 <Virt::allocateSwapfilePage()+0x67>
c0011e57:	31 c9                	xor    ecx,ecx
c0011e59:	bf 01 00 00 00       	mov    edi,0x1
c0011e5e:	eb 12                	jmp    c0011e72 <Virt::allocateSwapfilePage()+0x46>
c0011e60:	89 fd                	mov    ebp,edi
c0011e62:	89 ca                	mov    edx,ecx
c0011e64:	d3 e5                	shl    ebp,cl
c0011e66:	c1 ea 05             	shr    edx,0x5
c0011e69:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011e6c:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011e6e:	85 ea                	test   edx,ebp
c0011e70:	74 2a                	je     c0011e9c <Virt::allocateSwapfilePage()+0x70>
c0011e72:	41                   	inc    ecx
c0011e73:	39 c8                	cmp    eax,ecx
c0011e75:	77 e9                	ja     c0011e60 <Virt::allocateSwapfilePage()+0x34>
c0011e77:	83 ec 0c             	sub    esp,0xc
c0011e7a:	68 8b a6 02 c0       	push   0xc002a68b
c0011e7f:	e8 0b 88 00 00       	call   c001a68f <Krnl::panic(char const*)>
c0011e84:	83 c4 10             	add    esp,0x10
c0011e87:	31 c9                	xor    ecx,ecx
c0011e89:	83 c4 0c             	add    esp,0xc
c0011e8c:	89 c8                	mov    eax,ecx
c0011e8e:	5b                   	pop    ebx
c0011e8f:	5e                   	pop    esi
c0011e90:	5f                   	pop    edi
c0011e91:	5d                   	pop    ebp
c0011e92:	c3                   	ret    
c0011e93:	89 f3                	mov    ebx,esi
c0011e95:	bd 01 00 00 00       	mov    ebp,0x1
c0011e9a:	31 c9                	xor    ecx,ecx
c0011e9c:	09 ea                	or     edx,ebp
c0011e9e:	89 c8                	mov    eax,ecx
c0011ea0:	89 13                	mov    DWORD PTR [ebx],edx
c0011ea2:	83 c4 0c             	add    esp,0xc
c0011ea5:	5b                   	pop    ebx
c0011ea6:	5e                   	pop    esi
c0011ea7:	5f                   	pop    edi
c0011ea8:	5d                   	pop    ebp
c0011ea9:	c3                   	ret    

c0011eaa <Virt::virtualMemorySetup()>:
c0011eaa:	53                   	push   ebx
c0011eab:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011eb0:	83 ec 08             	sub    esp,0x8
c0011eb3:	6a 0f                	push   0xf
c0011eb5:	53                   	push   ebx
c0011eb6:	43                   	inc    ebx
c0011eb7:	e8 d6 fd ff ff       	call   c0011c92 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011ebc:	59                   	pop    ecx
c0011ebd:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011ec3:	58                   	pop    eax
c0011ec4:	75 ed                	jne    c0011eb3 <Virt::virtualMemorySetup()+0x9>
c0011ec6:	83 ec 08             	sub    esp,0x8
c0011ec9:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011ece:	68 00 00 00 c8       	push   0xc8000000
c0011ed3:	68 a2 a6 02 c0       	push   0xc002a6a2
c0011ed8:	e8 0d 11 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0011edd:	58                   	pop    eax
c0011ede:	5a                   	pop    edx
c0011edf:	68 00 f0 ff ef       	push   0xeffff000
c0011ee4:	68 b6 a6 02 c0       	push   0xc002a6b6
c0011ee9:	e8 fc 10 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0011eee:	83 c4 10             	add    esp,0x10
c0011ef1:	83 ec 08             	sub    esp,0x8
c0011ef4:	6a 00                	push   0x0
c0011ef6:	53                   	push   ebx
c0011ef7:	43                   	inc    ebx
c0011ef8:	e8 95 fd ff ff       	call   c0011c92 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011efd:	83 c4 10             	add    esp,0x10
c0011f00:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011f06:	75 e9                	jne    c0011ef1 <Virt::virtualMemorySetup()+0x47>
c0011f08:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011f0d:	83 ec 08             	sub    esp,0x8
c0011f10:	6a 0f                	push   0xf
c0011f12:	53                   	push   ebx
c0011f13:	43                   	inc    ebx
c0011f14:	e8 79 fd ff ff       	call   c0011c92 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011f19:	83 c4 10             	add    esp,0x10
c0011f1c:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011f22:	75 e9                	jne    c0011f0d <Virt::virtualMemorySetup()+0x63>
c0011f24:	83 c4 08             	add    esp,0x8
c0011f27:	5b                   	pop    ebx
c0011f28:	c3                   	ret    

c0011f29 <Virt::getAKernelVAS()>:
c0011f29:	a1 4c e6 02 c0       	mov    eax,ds:0xc002e64c
c0011f2e:	c3                   	ret    

c0011f2f <Virt::setupPageSwapping(int)>:
c0011f2f:	57                   	push   edi
c0011f30:	56                   	push   esi
c0011f31:	53                   	push   ebx
c0011f32:	83 ec 1c             	sub    esp,0x1c
c0011f35:	68 14 01 00 00       	push   0x114
c0011f3a:	e8 04 d9 ff ff       	call   c000f843 <malloc>
c0011f3f:	83 c4 0c             	add    esp,0xc
c0011f42:	89 c6                	mov    esi,eax
c0011f44:	ff 35 34 1a 03 c0    	push   DWORD PTR ds:0xc0031a34
c0011f4a:	68 ca a6 02 c0       	push   0xc002a6ca
c0011f4f:	50                   	push   eax
c0011f50:	e8 ed 15 00 00       	call   c0013542 <File::File(char const*, Process*)>
c0011f55:	89 34 24             	mov    DWORD PTR [esp],esi
c0011f58:	e8 c1 17 00 00       	call   c001371e <File::unlink()>
c0011f5d:	58                   	pop    eax
c0011f5e:	5a                   	pop    edx
c0011f5f:	6a 12                	push   0x12
c0011f61:	56                   	push   esi
c0011f62:	e8 3f 16 00 00       	call   c00135a6 <File::open(FileOpenMode)>
c0011f67:	83 c4 10             	add    esp,0x10
c0011f6a:	85 c0                	test   eax,eax
c0011f6c:	0f 85 ca 00 00 00    	jne    c001203c <Virt::setupPageSwapping(int)+0x10d>
c0011f72:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011f76:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011f7e:	c1 e3 08             	shl    ebx,0x8
c0011f81:	83 ec 0c             	sub    esp,0xc
c0011f84:	68 00 00 01 00       	push   0x10000
c0011f89:	e8 b5 d8 ff ff       	call   c000f843 <malloc>
c0011f8e:	83 c4 0c             	add    esp,0xc
c0011f91:	89 c7                	mov    edi,eax
c0011f93:	68 00 00 01 00       	push   0x10000
c0011f98:	6a 00                	push   0x0
c0011f9a:	50                   	push   eax
c0011f9b:	e8 d8 e7 fe ff       	call   c0000778 <memset>
c0011fa0:	83 c4 10             	add    esp,0x10
c0011fa3:	85 db                	test   ebx,ebx
c0011fa5:	79 03                	jns    c0011faa <Virt::setupPageSwapping(int)+0x7b>
c0011fa7:	83 c3 0f             	add    ebx,0xf
c0011faa:	c1 fb 04             	sar    ebx,0x4
c0011fad:	4b                   	dec    ebx
c0011fae:	83 fb ff             	cmp    ebx,0xffffffff
c0011fb1:	74 4b                	je     c0011ffe <Virt::setupPageSwapping(int)+0xcf>
c0011fb3:	83 ec 0c             	sub    esp,0xc
c0011fb6:	8b 06                	mov    eax,DWORD PTR [esi]
c0011fb8:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011fbc:	52                   	push   edx
c0011fbd:	57                   	push   edi
c0011fbe:	6a 00                	push   0x0
c0011fc0:	68 00 00 01 00       	push   0x10000
c0011fc5:	56                   	push   esi
c0011fc6:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011fc9:	83 c4 20             	add    esp,0x20
c0011fcc:	85 c0                	test   eax,eax
c0011fce:	75 59                	jne    c0012029 <Virt::setupPageSwapping(int)+0xfa>
c0011fd0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011fd4:	3d 00 00 01 00       	cmp    eax,0x10000
c0011fd9:	74 d2                	je     c0011fad <Virt::setupPageSwapping(int)+0x7e>
c0011fdb:	83 ec 08             	sub    esp,0x8
c0011fde:	4b                   	dec    ebx
c0011fdf:	50                   	push   eax
c0011fe0:	68 1d a7 02 c0       	push   0xc002a71d
c0011fe5:	e8 00 10 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0011fea:	c7 04 24 26 a7 02 c0 	mov    DWORD PTR [esp],0xc002a726
c0011ff1:	e8 99 86 00 00       	call   c001a68f <Krnl::panic(char const*)>
c0011ff6:	83 c4 10             	add    esp,0x10
c0011ff9:	83 fb ff             	cmp    ebx,0xffffffff
c0011ffc:	75 b5                	jne    c0011fb3 <Virt::setupPageSwapping(int)+0x84>
c0011ffe:	83 ec 0c             	sub    esp,0xc
c0012001:	56                   	push   esi
c0012002:	e8 fd 15 00 00       	call   c0013604 <File::close()>
c0012007:	89 3c 24             	mov    DWORD PTR [esp],edi
c001200a:	e8 54 d8 ff ff       	call   c000f863 <rfree>
c001200f:	83 c4 10             	add    esp,0x10
c0012012:	85 f6                	test   esi,esi
c0012014:	74 0c                	je     c0012022 <Virt::setupPageSwapping(int)+0xf3>
c0012016:	83 ec 0c             	sub    esp,0xc
c0012019:	8b 06                	mov    eax,DWORD PTR [esi]
c001201b:	56                   	push   esi
c001201c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001201f:	83 c4 10             	add    esp,0x10
c0012022:	83 c4 10             	add    esp,0x10
c0012025:	5b                   	pop    ebx
c0012026:	5e                   	pop    esi
c0012027:	5f                   	pop    edi
c0012028:	c3                   	ret    
c0012029:	83 ec 08             	sub    esp,0x8
c001202c:	50                   	push   eax
c001202d:	68 05 a7 02 c0       	push   0xc002a705
c0012032:	e8 b3 0f 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0012037:	83 c4 10             	add    esp,0x10
c001203a:	eb 94                	jmp    c0011fd0 <Virt::setupPageSwapping(int)+0xa1>
c001203c:	83 ec 08             	sub    esp,0x8
c001203f:	50                   	push   eax
c0012040:	68 e1 a6 02 c0       	push   0xc002a6e1
c0012045:	e8 a0 0f 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001204a:	c7 04 24 ea a6 02 c0 	mov    DWORD PTR [esp],0xc002a6ea
c0012051:	e8 39 86 00 00       	call   c001a68f <Krnl::panic(char const*)>
c0012056:	83 c4 10             	add    esp,0x10
c0012059:	e9 14 ff ff ff       	jmp    c0011f72 <Virt::setupPageSwapping(int)+0x43>

c001205e <VAS::VAS()>:
c001205e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012062:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012069:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001206d:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0012074:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012078:	a3 4c e6 02 c0       	mov    ds:0xc002e64c,eax
c001207d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012081:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0012085:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012089:	c6 00 01             	mov    BYTE PTR [eax],0x1
c001208c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012090:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0012097:	90                   	nop
c0012098:	c3                   	ret    
c0012099:	90                   	nop

c001209a <VAS::VAS(VAS*)>:
c001209a:	83 ec 0c             	sub    esp,0xc
c001209d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120a1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00120a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120ac:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00120b3:	83 ec 0c             	sub    esp,0xc
c00120b6:	68 dc a7 02 c0       	push   0xc002a7dc
c00120bb:	e8 cf 85 00 00       	call   c001a68f <Krnl::panic(char const*)>
c00120c0:	83 c4 10             	add    esp,0x10
c00120c3:	90                   	nop
c00120c4:	83 c4 0c             	add    esp,0xc
c00120c7:	c3                   	ret    

c00120c8 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00120c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00120cc:	89 c2                	mov    edx,eax
c00120ce:	c1 e8 0a             	shr    eax,0xa
c00120d1:	c1 ea 16             	shr    edx,0x16
c00120d4:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00120d9:	19 c9                	sbb    ecx,ecx
c00120db:	c1 e2 0c             	shl    edx,0xc
c00120de:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00120e4:	25 fc 0f 00 00       	and    eax,0xffc
c00120e9:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00120f0:	01 d0                	add    eax,edx
c00120f2:	c3                   	ret    
c00120f3:	90                   	nop

c00120f4 <VAS::getPageTableEntry(unsigned long)>:
c00120f4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00120f8:	89 ca                	mov    edx,ecx
c00120fa:	c1 e9 0a             	shr    ecx,0xa
c00120fd:	c1 ea 16             	shr    edx,0x16
c0012100:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0012106:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c001210c:	c1 e0 0c             	shl    eax,0xc
c001210f:	8d 04 08             	lea    eax,[eax+ecx*1]
c0012112:	c3                   	ret    

c0012113 <Virt::freeKernelVirtualPages(unsigned long)>:
c0012113:	57                   	push   edi
c0012114:	56                   	push   esi
c0012115:	be 01 00 00 00       	mov    esi,0x1
c001211a:	53                   	push   ebx
c001211b:	83 ec 10             	sub    esp,0x10
c001211e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012122:	c1 eb 0c             	shr    ebx,0xc
c0012125:	eb 3f                	jmp    c0012166 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0012127:	e8 fd fd ff ff       	call   c0011f29 <Virt::getAKernelVAS()>
c001212c:	83 ec 08             	sub    esp,0x8
c001212f:	57                   	push   edi
c0012130:	50                   	push   eax
c0012131:	e8 be ff ff ff       	call   c00120f4 <VAS::getPageTableEntry(unsigned long)>
c0012136:	83 c4 10             	add    esp,0x10
c0012139:	8b 00                	mov    eax,DWORD PTR [eax]
c001213b:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001213f:	f6 c4 04             	test   ah,0x4
c0012142:	75 5f                	jne    c00121a3 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0012144:	80 fa 04             	cmp    dl,0x4
c0012147:	74 78                	je     c00121c1 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0012149:	80 fa 02             	cmp    dl,0x2
c001214c:	0f 84 88 00 00 00    	je     c00121da <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0012152:	80 fa 03             	cmp    dl,0x3
c0012155:	0f 84 ad 00 00 00    	je     c0012208 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c001215b:	fe ca                	dec    dl
c001215d:	0f 84 92 00 00 00    	je     c00121f5 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0012163:	43                   	inc    ebx
c0012164:	31 f6                	xor    esi,esi
c0012166:	53                   	push   ebx
c0012167:	e8 5b fb ff ff       	call   c0011cc7 <Virt::getPageState(unsigned long)>
c001216c:	5f                   	pop    edi
c001216d:	89 df                	mov    edi,ebx
c001216f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012173:	c1 e7 0c             	shl    edi,0xc
c0012176:	84 c0                	test   al,al
c0012178:	75 ad                	jne    c0012127 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c001217a:	83 ec 0c             	sub    esp,0xc
c001217d:	68 2c a7 02 c0       	push   0xc002a72c
c0012182:	e8 08 85 00 00       	call   c001a68f <Krnl::panic(char const*)>
c0012187:	e8 9d fd ff ff       	call   c0011f29 <Virt::getAKernelVAS()>
c001218c:	5a                   	pop    edx
c001218d:	59                   	pop    ecx
c001218e:	57                   	push   edi
c001218f:	50                   	push   eax
c0012190:	e8 5f ff ff ff       	call   c00120f4 <VAS::getPageTableEntry(unsigned long)>
c0012195:	83 c4 10             	add    esp,0x10
c0012198:	8b 00                	mov    eax,DWORD PTR [eax]
c001219a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001219e:	f6 c4 04             	test   ah,0x4
c00121a1:	74 c0                	je     c0012163 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00121a3:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00121a7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00121ac:	83 ec 0c             	sub    esp,0xc
c00121af:	50                   	push   eax
c00121b0:	e8 a1 dc ff ff       	call   c000fe56 <Phys::freePage(unsigned long)>
c00121b5:	83 c4 10             	add    esp,0x10
c00121b8:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00121bc:	80 fa 04             	cmp    dl,0x4
c00121bf:	75 88                	jne    c0012149 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00121c1:	89 f0                	mov    eax,esi
c00121c3:	84 c0                	test   al,al
c00121c5:	75 47                	jne    c001220e <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c00121c7:	c7 44 24 20 00 a8 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a800
c00121cf:	83 c4 10             	add    esp,0x10
c00121d2:	5b                   	pop    ebx
c00121d3:	5e                   	pop    esi
c00121d4:	5f                   	pop    edi
c00121d5:	e9 b5 84 00 00       	jmp    c001a68f <Krnl::panic(char const*)>
c00121da:	89 f0                	mov    eax,esi
c00121dc:	84 c0                	test   al,al
c00121de:	75 15                	jne    c00121f5 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00121e0:	83 ec 0c             	sub    esp,0xc
c00121e3:	68 48 a7 02 c0       	push   0xc002a748
c00121e8:	e8 a2 84 00 00       	call   c001a68f <Krnl::panic(char const*)>
c00121ed:	83 c4 10             	add    esp,0x10
c00121f0:	e9 6e ff ff ff       	jmp    c0012163 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00121f5:	83 ec 08             	sub    esp,0x8
c00121f8:	6a 00                	push   0x0
c00121fa:	53                   	push   ebx
c00121fb:	e8 92 fa ff ff       	call   c0011c92 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012200:	83 c4 10             	add    esp,0x10
c0012203:	e9 5b ff ff ff       	jmp    c0012163 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0012208:	89 f0                	mov    eax,esi
c001220a:	84 c0                	test   al,al
c001220c:	75 15                	jne    c0012223 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c001220e:	83 ec 08             	sub    esp,0x8
c0012211:	6a 00                	push   0x0
c0012213:	53                   	push   ebx
c0012214:	e8 79 fa ff ff       	call   c0011c92 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012219:	83 c4 10             	add    esp,0x10
c001221c:	83 c4 10             	add    esp,0x10
c001221f:	5b                   	pop    ebx
c0012220:	5e                   	pop    esi
c0012221:	5f                   	pop    edi
c0012222:	c3                   	ret    
c0012223:	c7 44 24 20 64 a7 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a764
c001222b:	83 c4 10             	add    esp,0x10
c001222e:	5b                   	pop    ebx
c001222f:	5e                   	pop    esi
c0012230:	5f                   	pop    edi
c0012231:	e9 59 84 00 00       	jmp    c001a68f <Krnl::panic(char const*)>

c0012236 <VAS::freeAllocatedPages(unsigned long)>:
c0012236:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001223a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001223e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0012242:	74 09                	je     c001224d <VAS::freeAllocatedPages(unsigned long)+0x17>
c0012244:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012248:	e9 c6 fe ff ff       	jmp    c0012113 <Virt::freeKernelVirtualPages(unsigned long)>
c001224d:	c7 44 24 04 24 a8 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a824
c0012255:	e9 90 0d 00 00       	jmp    c0012fea <Dbg::kprintf(char const*, ...)>

c001225a <VAS::virtualToPhysical(unsigned long)>:
c001225a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001225e:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012262:	e8 8d fe ff ff       	call   c00120f4 <VAS::getPageTableEntry(unsigned long)>
c0012267:	5a                   	pop    edx
c0012268:	8b 00                	mov    eax,DWORD PTR [eax]
c001226a:	59                   	pop    ecx
c001226b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012270:	c3                   	ret    
c0012271:	90                   	nop

c0012272 <VAS::reflagRange(unsigned long, int, int, int)>:
c0012272:	55                   	push   ebp
c0012273:	57                   	push   edi
c0012274:	56                   	push   esi
c0012275:	53                   	push   ebx
c0012276:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001227a:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001227e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012282:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012286:	85 db                	test   ebx,ebx
c0012288:	7e 22                	jle    c00122ac <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c001228a:	c1 e3 0c             	shl    ebx,0xc
c001228d:	01 f3                	add    ebx,esi
c001228f:	56                   	push   esi
c0012290:	81 c6 00 10 00 00    	add    esi,0x1000
c0012296:	55                   	push   ebp
c0012297:	e8 58 fe ff ff       	call   c00120f4 <VAS::getPageTableEntry(unsigned long)>
c001229c:	5a                   	pop    edx
c001229d:	59                   	pop    ecx
c001229e:	8b 08                	mov    ecx,DWORD PTR [eax]
c00122a0:	21 f9                	and    ecx,edi
c00122a2:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c00122a6:	39 f3                	cmp    ebx,esi
c00122a8:	89 08                	mov    DWORD PTR [eax],ecx
c00122aa:	75 e3                	jne    c001228f <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c00122ac:	5b                   	pop    ebx
c00122ad:	5e                   	pop    esi
c00122ae:	5f                   	pop    edi
c00122af:	5d                   	pop    ebp
c00122b0:	c3                   	ret    
c00122b1:	90                   	nop

c00122b2 <VAS::setToWriteCombining(unsigned long, int)>:
c00122b2:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c00122b7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00122bd:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c00122c4:	75 01                	jne    c00122c7 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00122c6:	c3                   	ret    
c00122c7:	68 80 00 00 00       	push   0x80
c00122cc:	6a ff                	push   0xffffffff
c00122ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00122d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00122d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00122da:	e8 93 ff ff ff       	call   c0012272 <VAS::reflagRange(unsigned long, int, int, int)>
c00122df:	83 c4 14             	add    esp,0x14
c00122e2:	c3                   	ret    
c00122e3:	90                   	nop

c00122e4 <VAS::mapOtherVASIn(bool, VAS*)>:
c00122e4:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00122e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00122ed:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00122f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122f4:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00122f7:	19 c0                	sbb    eax,eax
c00122f9:	83 ca 03             	or     edx,0x3
c00122fc:	83 e0 fc             	and    eax,0xfffffffc
c00122ff:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0012306:	0f 20 d8             	mov    eax,cr3
c0012309:	0f 22 d8             	mov    cr3,eax
c001230c:	c3                   	ret    
c001230d:	90                   	nop

c001230e <VAS::~VAS()>:
c001230e:	83 ec 2c             	sub    esp,0x2c
c0012311:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012319:	e8 66 bb 00 00       	call   c001de84 <lockScheduler()>
c001231e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012323:	8b 00                	mov    eax,DWORD PTR [eax]
c0012325:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012328:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001232e:	83 ec 04             	sub    esp,0x4
c0012331:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012335:	6a 01                	push   0x1
c0012337:	50                   	push   eax
c0012338:	e8 a7 ff ff ff       	call   c00122e4 <VAS::mapOtherVASIn(bool, VAS*)>
c001233d:	83 c4 10             	add    esp,0x10
c0012340:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012348:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0012350:	0f 8f d7 00 00 00    	jg     c001242d <VAS::~VAS()+0x11f>
c0012356:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001235a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001235d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012361:	c1 e2 02             	shl    edx,0x2
c0012364:	01 d0                	add    eax,edx
c0012366:	8b 00                	mov    eax,DWORD PTR [eax]
c0012368:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001236c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012370:	83 e0 01             	and    eax,0x1
c0012373:	0f 84 ab 00 00 00    	je     c0012424 <VAS::~VAS()+0x116>
c0012379:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012381:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0012389:	7f 75                	jg     c0012400 <VAS::~VAS()+0xf2>
c001238b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001238f:	c1 e0 0a             	shl    eax,0xa
c0012392:	89 c2                	mov    edx,eax
c0012394:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012398:	01 d0                	add    eax,edx
c001239a:	c1 e0 0c             	shl    eax,0xc
c001239d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00123a1:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00123a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00123a8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00123ab:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00123b1:	83 ec 04             	sub    esp,0x4
c00123b4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00123b8:	6a 01                	push   0x1
c00123ba:	50                   	push   eax
c00123bb:	e8 08 fd ff ff       	call   c00120c8 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00123c0:	83 c4 10             	add    esp,0x10
c00123c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00123c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00123cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00123cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00123d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00123d5:	25 01 04 00 00       	and    eax,0x401
c00123da:	3d 01 04 00 00       	cmp    eax,0x401
c00123df:	75 19                	jne    c00123fa <VAS::~VAS()+0xec>
c00123e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00123e5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00123ea:	83 ec 0c             	sub    esp,0xc
c00123ed:	50                   	push   eax
c00123ee:	e8 63 da ff ff       	call   c000fe56 <Phys::freePage(unsigned long)>
c00123f3:	83 c4 10             	add    esp,0x10
c00123f6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00123fa:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00123fe:	eb 81                	jmp    c0012381 <VAS::~VAS()+0x73>
c0012400:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012404:	25 00 04 00 00       	and    eax,0x400
c0012409:	74 19                	je     c0012424 <VAS::~VAS()+0x116>
c001240b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001240f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012414:	83 ec 0c             	sub    esp,0xc
c0012417:	50                   	push   eax
c0012418:	e8 39 da ff ff       	call   c000fe56 <Phys::freePage(unsigned long)>
c001241d:	83 c4 10             	add    esp,0x10
c0012420:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012424:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012428:	e9 1b ff ff ff       	jmp    c0012348 <VAS::~VAS()+0x3a>
c001242d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012431:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012434:	83 ec 0c             	sub    esp,0xc
c0012437:	50                   	push   eax
c0012438:	e8 d6 fc ff ff       	call   c0012113 <Virt::freeKernelVirtualPages(unsigned long)>
c001243d:	83 c4 10             	add    esp,0x10
c0012440:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012444:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012447:	83 ec 0c             	sub    esp,0xc
c001244a:	50                   	push   eax
c001244b:	e8 06 da ff ff       	call   c000fe56 <Phys::freePage(unsigned long)>
c0012450:	83 c4 10             	add    esp,0x10
c0012453:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012457:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001245b:	c1 e0 02             	shl    eax,0x2
c001245e:	83 ec 08             	sub    esp,0x8
c0012461:	50                   	push   eax
c0012462:	68 48 a8 02 c0       	push   0xc002a848
c0012467:	e8 7e 0b 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001246c:	83 c4 10             	add    esp,0x10
c001246f:	e8 12 ba 00 00       	call   c001de86 <unlockScheduler()>
c0012474:	90                   	nop
c0012475:	83 c4 2c             	add    esp,0x2c
c0012478:	c3                   	ret    
c0012479:	90                   	nop

c001247a <VAS::mapPage(unsigned long, unsigned long, int)>:
c001247a:	55                   	push   ebp
c001247b:	57                   	push   edi
c001247c:	56                   	push   esi
c001247d:	53                   	push   ebx
c001247e:	83 ec 1c             	sub    esp,0x1c
c0012481:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012485:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012489:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c001248f:	77 08                	ja     c0012499 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0012491:	0f 20 d8             	mov    eax,cr3
c0012494:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0012497:	75 47                	jne    c00124e0 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0012499:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001249d:	09 d8                	or     eax,ebx
c001249f:	a9 ff 0f 00 00       	test   eax,0xfff
c00124a4:	75 57                	jne    c00124fd <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c00124a6:	89 de                	mov    esi,ebx
c00124a8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00124ab:	c1 ee 16             	shr    esi,0x16
c00124ae:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00124b5:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00124b9:	74 54                	je     c001250f <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c00124bb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00124bf:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00124c5:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00124c9:	c1 e6 0c             	shl    esi,0xc
c00124cc:	c1 eb 0a             	shr    ebx,0xa
c00124cf:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00124d5:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00124d8:	83 c4 1c             	add    esp,0x1c
c00124db:	5b                   	pop    ebx
c00124dc:	5e                   	pop    esi
c00124dd:	5f                   	pop    edi
c00124de:	5d                   	pop    ebp
c00124df:	c3                   	ret    
c00124e0:	83 ec 0c             	sub    esp,0xc
c00124e3:	68 68 a8 02 c0       	push   0xc002a868
c00124e8:	e8 fd 0a 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c00124ed:	83 c4 10             	add    esp,0x10
c00124f0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00124f4:	09 d8                	or     eax,ebx
c00124f6:	a9 ff 0f 00 00       	test   eax,0xfff
c00124fb:	74 a9                	je     c00124a6 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00124fd:	83 ec 0c             	sub    esp,0xc
c0012500:	68 d0 a8 02 c0       	push   0xc002a8d0
c0012505:	e8 85 81 00 00       	call   c001a68f <Krnl::panic(char const*)>
c001250a:	83 c4 10             	add    esp,0x10
c001250d:	eb 97                	jmp    c00124a6 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c001250f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012513:	e8 c8 d9 ff ff       	call   c000fee0 <Phys::allocatePage()>
c0012518:	89 c5                	mov    ebp,eax
c001251a:	e8 0a fa ff ff       	call   c0011f29 <Virt::getAKernelVAS()>
c001251f:	83 ec 0c             	sub    esp,0xc
c0012522:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012526:	6a 01                	push   0x1
c0012528:	e8 be f7 ff ff       	call   c0011ceb <Virt::allocateKernelVirtualPages(int)>
c001252d:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012534:	6a 01                	push   0x1
c0012536:	50                   	push   eax
c0012537:	55                   	push   ebp
c0012538:	81 cd 07 04 00 00    	or     ebp,0x407
c001253e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012542:	51                   	push   ecx
c0012543:	e8 26 02 00 00       	call   c001276e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012548:	83 c4 1c             	add    esp,0x1c
c001254b:	68 00 10 00 00       	push   0x1000
c0012550:	6a 00                	push   0x0
c0012552:	50                   	push   eax
c0012553:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012557:	e8 1c e2 fe ff       	call   c0000778 <memset>
c001255c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012560:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012563:	e8 ab fb ff ff       	call   c0012113 <Virt::freeKernelVirtualPages(unsigned long)>
c0012568:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001256c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001256f:	83 c4 10             	add    esp,0x10
c0012572:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0012575:	e9 41 ff ff ff       	jmp    c00124bb <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c001257a <VAS::allocatePages(int, int)>:
c001257a:	55                   	push   ebp
c001257b:	57                   	push   edi
c001257c:	56                   	push   esi
c001257d:	53                   	push   ebx
c001257e:	83 ec 1c             	sub    esp,0x1c
c0012581:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012585:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c001258a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012590:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012596:	83 e0 01             	and    eax,0x1
c0012599:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c001259d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00125a1:	0f 85 cc 00 00 00    	jne    c0012673 <VAS::allocatePages(int, int)+0xf9>
c00125a7:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00125aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00125ae:	85 c0                	test   eax,eax
c00125b0:	0f 84 a1 00 00 00    	je     c0012657 <VAS::allocatePages(int, int)+0xdd>
c00125b6:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00125ba:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00125be:	c1 e6 0c             	shl    esi,0xc
c00125c1:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c00125c5:	85 c0                	test   eax,eax
c00125c7:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00125ca:	7e 33                	jle    c00125ff <VAS::allocatePages(int, int)+0x85>
c00125cc:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00125d0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00125d4:	81 cd 00 04 00 00    	or     ebp,0x400
c00125da:	e8 01 d9 ff ff       	call   c000fee0 <Phys::allocatePage()>
c00125df:	55                   	push   ebp
c00125e0:	53                   	push   ebx
c00125e1:	50                   	push   eax
c00125e2:	57                   	push   edi
c00125e3:	e8 92 fe ff ff       	call   c001247a <VAS::mapPage(unsigned long, unsigned long, int)>
c00125e8:	83 c4 10             	add    esp,0x10
c00125eb:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125f0:	74 03                	je     c00125f5 <VAS::allocatePages(int, int)+0x7b>
c00125f2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125f5:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125fb:	39 de                	cmp    esi,ebx
c00125fd:	75 db                	jne    c00125da <VAS::allocatePages(int, int)+0x60>
c00125ff:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012604:	75 12                	jne    c0012618 <VAS::allocatePages(int, int)+0x9e>
c0012606:	0f 20 d8             	mov    eax,cr3
c0012609:	0f 22 d8             	mov    cr3,eax
c001260c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012610:	83 c4 1c             	add    esp,0x1c
c0012613:	5b                   	pop    ebx
c0012614:	5e                   	pop    esi
c0012615:	5f                   	pop    edi
c0012616:	5d                   	pop    ebp
c0012617:	c3                   	ret    
c0012618:	c1 ee 0a             	shr    esi,0xa
c001261b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001261f:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012625:	c1 eb 0a             	shr    ebx,0xa
c0012628:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c001262e:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012634:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001263a:	39 c3                	cmp    ebx,eax
c001263c:	77 ce                	ja     c001260c <VAS::allocatePages(int, int)+0x92>
c001263e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012641:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012647:	39 d8                	cmp    eax,ebx
c0012649:	73 f3                	jae    c001263e <VAS::allocatePages(int, int)+0xc4>
c001264b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001264f:	83 c4 1c             	add    esp,0x1c
c0012652:	5b                   	pop    ebx
c0012653:	5e                   	pop    esi
c0012654:	5f                   	pop    edi
c0012655:	5d                   	pop    ebp
c0012656:	c3                   	ret    
c0012657:	83 ec 0c             	sub    esp,0xc
c001265a:	68 f4 a8 02 c0       	push   0xc002a8f4
c001265f:	e8 2b 80 00 00       	call   c001a68f <Krnl::panic(char const*)>
c0012664:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012667:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001266b:	83 c4 10             	add    esp,0x10
c001266e:	e9 43 ff ff ff       	jmp    c00125b6 <VAS::allocatePages(int, int)+0x3c>
c0012673:	83 ec 0c             	sub    esp,0xc
c0012676:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001267a:	e8 6c f6 ff ff       	call   c0011ceb <Virt::allocateKernelVirtualPages(int)>
c001267f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012683:	83 c4 10             	add    esp,0x10
c0012686:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c001268b:	0f 87 9b 00 00 00    	ja     c001272c <VAS::allocatePages(int, int)+0x1b2>
c0012691:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012695:	85 d2                	test   edx,edx
c0012697:	7e 3c                	jle    c00126d5 <VAS::allocatePages(int, int)+0x15b>
c0012699:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001269d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00126a1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00126a5:	c1 e5 0c             	shl    ebp,0xc
c00126a8:	81 ce 00 04 00 00    	or     esi,0x400
c00126ae:	01 dd                	add    ebp,ebx
c00126b0:	e8 2b d8 ff ff       	call   c000fee0 <Phys::allocatePage()>
c00126b5:	56                   	push   esi
c00126b6:	53                   	push   ebx
c00126b7:	50                   	push   eax
c00126b8:	57                   	push   edi
c00126b9:	e8 bc fd ff ff       	call   c001247a <VAS::mapPage(unsigned long, unsigned long, int)>
c00126be:	83 c4 10             	add    esp,0x10
c00126c1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00126c6:	74 03                	je     c00126cb <VAS::allocatePages(int, int)+0x151>
c00126c8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00126cb:	81 c3 00 10 00 00    	add    ebx,0x1000
c00126d1:	39 dd                	cmp    ebp,ebx
c00126d3:	75 db                	jne    c00126b0 <VAS::allocatePages(int, int)+0x136>
c00126d5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00126da:	0f 84 26 ff ff ff    	je     c0012606 <VAS::allocatePages(int, int)+0x8c>
c00126e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00126e4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00126e8:	89 d3                	mov    ebx,edx
c00126ea:	c1 e0 0c             	shl    eax,0xc
c00126ed:	c1 eb 0a             	shr    ebx,0xa
c00126f0:	01 d0                	add    eax,edx
c00126f2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00126f8:	c1 e8 0a             	shr    eax,0xa
c00126fb:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012701:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012706:	2d 00 00 40 00       	sub    eax,0x400000
c001270b:	39 c3                	cmp    ebx,eax
c001270d:	0f 87 f9 fe ff ff    	ja     c001260c <VAS::allocatePages(int, int)+0x92>
c0012713:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012716:	81 c3 00 10 00 00    	add    ebx,0x1000
c001271c:	39 d8                	cmp    eax,ebx
c001271e:	73 f3                	jae    c0012713 <VAS::allocatePages(int, int)+0x199>
c0012720:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012724:	83 c4 1c             	add    esp,0x1c
c0012727:	5b                   	pop    ebx
c0012728:	5e                   	pop    esi
c0012729:	5f                   	pop    edi
c001272a:	5d                   	pop    ebp
c001272b:	c3                   	ret    
c001272c:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0012731:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012737:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c001273e:	0f 84 4d ff ff ff    	je     c0012691 <VAS::allocatePages(int, int)+0x117>
c0012744:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c001274c:	e9 40 ff ff ff       	jmp    c0012691 <VAS::allocatePages(int, int)+0x117>
c0012751:	90                   	nop

c0012752 <VAS::setCPUSpecific(unsigned long)>:
c0012752:	83 ec 0c             	sub    esp,0xc
c0012755:	6a 05                	push   0x5
c0012757:	68 00 00 40 c2       	push   0xc2400000
c001275c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012760:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012764:	e8 11 fd ff ff       	call   c001247a <VAS::mapPage(unsigned long, unsigned long, int)>
c0012769:	83 c4 1c             	add    esp,0x1c
c001276c:	c3                   	ret    
c001276d:	90                   	nop

c001276e <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c001276e:	55                   	push   ebp
c001276f:	57                   	push   edi
c0012770:	56                   	push   esi
c0012771:	53                   	push   ebx
c0012772:	83 ec 1c             	sub    esp,0x1c
c0012775:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c001277a:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001277e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012784:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012788:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001278e:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012792:	83 e0 01             	and    eax,0x1
c0012795:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012799:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001279d:	85 c0                	test   eax,eax
c001279f:	7e 39                	jle    c00127da <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c00127a1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00127a5:	89 f3                	mov    ebx,esi
c00127a7:	c1 e0 0c             	shl    eax,0xc
c00127aa:	01 f0                	add    eax,esi
c00127ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00127b0:	55                   	push   ebp
c00127b1:	53                   	push   ebx
c00127b2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00127b6:	29 f0                	sub    eax,esi
c00127b8:	01 d8                	add    eax,ebx
c00127ba:	50                   	push   eax
c00127bb:	57                   	push   edi
c00127bc:	e8 b9 fc ff ff       	call   c001247a <VAS::mapPage(unsigned long, unsigned long, int)>
c00127c1:	83 c4 10             	add    esp,0x10
c00127c4:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00127c9:	74 03                	je     c00127ce <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c00127cb:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00127ce:	81 c3 00 10 00 00    	add    ebx,0x1000
c00127d4:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c00127d8:	75 d6                	jne    c00127b0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c00127da:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00127df:	75 10                	jne    c00127f1 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c00127e1:	0f 20 d8             	mov    eax,cr3
c00127e4:	0f 22 d8             	mov    cr3,eax
c00127e7:	83 c4 1c             	add    esp,0x1c
c00127ea:	89 f0                	mov    eax,esi
c00127ec:	5b                   	pop    ebx
c00127ed:	5e                   	pop    esi
c00127ee:	5f                   	pop    edi
c00127ef:	5d                   	pop    ebp
c00127f0:	c3                   	ret    
c00127f1:	89 f3                	mov    ebx,esi
c00127f3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00127f7:	c1 eb 0a             	shr    ebx,0xa
c00127fa:	c1 e0 0c             	shl    eax,0xc
c00127fd:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012803:	01 f0                	add    eax,esi
c0012805:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001280b:	c1 e8 0a             	shr    eax,0xa
c001280e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012813:	2d 00 00 40 00       	sub    eax,0x400000
c0012818:	39 c3                	cmp    ebx,eax
c001281a:	77 cb                	ja     c00127e7 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c001281c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001281f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012825:	39 d8                	cmp    eax,ebx
c0012827:	73 f3                	jae    c001281c <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0012829:	83 c4 1c             	add    esp,0x1c
c001282c:	89 f0                	mov    eax,esi
c001282e:	5b                   	pop    ebx
c001282f:	5e                   	pop    esi
c0012830:	5f                   	pop    edi
c0012831:	5d                   	pop    ebp
c0012832:	c3                   	ret    
c0012833:	90                   	nop

c0012834 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012834:	55                   	push   ebp
c0012835:	57                   	push   edi
c0012836:	56                   	push   esi
c0012837:	53                   	push   ebx
c0012838:	83 ec 1c             	sub    esp,0x1c
c001283b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001283f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012843:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0012847:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001284b:	a9 ff 0f 00 00       	test   eax,0xfff
c0012850:	75 4a                	jne    c001289c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0012852:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012856:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012859:	c1 eb 16             	shr    ebx,0x16
c001285c:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012863:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0012867:	74 4d                	je     c00128b6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0012869:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001286d:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012871:	c1 e8 0a             	shr    eax,0xa
c0012874:	80 fa 01             	cmp    dl,0x1
c0012877:	19 d2                	sbb    edx,edx
c0012879:	c1 e3 0c             	shl    ebx,0xc
c001287c:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012880:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012886:	25 fc 0f 00 00       	and    eax,0xffc
c001288b:	01 d8                	add    eax,ebx
c001288d:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012894:	83 c4 1c             	add    esp,0x1c
c0012897:	5b                   	pop    ebx
c0012898:	5e                   	pop    esi
c0012899:	5f                   	pop    edi
c001289a:	5d                   	pop    ebp
c001289b:	c3                   	ret    
c001289c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00128a0:	83 ec 0c             	sub    esp,0xc
c00128a3:	68 20 a9 02 c0       	push   0xc002a920
c00128a8:	e8 e2 7d 00 00       	call   c001a68f <Krnl::panic(char const*)>
c00128ad:	83 c4 10             	add    esp,0x10
c00128b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00128b4:	eb 9c                	jmp    c0012852 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c00128b6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00128ba:	e8 21 d6 ff ff       	call   c000fee0 <Phys::allocatePage()>
c00128bf:	89 c5                	mov    ebp,eax
c00128c1:	e8 63 f6 ff ff       	call   c0011f29 <Virt::getAKernelVAS()>
c00128c6:	83 ec 0c             	sub    esp,0xc
c00128c9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00128cd:	6a 01                	push   0x1
c00128cf:	e8 17 f4 ff ff       	call   c0011ceb <Virt::allocateKernelVirtualPages(int)>
c00128d4:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00128db:	6a 01                	push   0x1
c00128dd:	50                   	push   eax
c00128de:	55                   	push   ebp
c00128df:	81 cd 07 04 00 00    	or     ebp,0x407
c00128e5:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00128e9:	51                   	push   ecx
c00128ea:	e8 7f fe ff ff       	call   c001276e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00128ef:	83 c4 1c             	add    esp,0x1c
c00128f2:	68 00 10 00 00       	push   0x1000
c00128f7:	6a 00                	push   0x0
c00128f9:	50                   	push   eax
c00128fa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00128fe:	e8 75 de fe ff       	call   c0000778 <memset>
c0012903:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012907:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001290a:	e8 04 f8 ff ff       	call   c0012113 <Virt::freeKernelVirtualPages(unsigned long)>
c001290f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012912:	83 c4 10             	add    esp,0x10
c0012915:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0012918:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001291c:	e9 48 ff ff ff       	jmp    c0012869 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0012921:	90                   	nop

c0012922 <VAS::VAS(bool)>:
c0012922:	53                   	push   ebx
c0012923:	83 ec 28             	sub    esp,0x28
c0012926:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001292a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001292e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012932:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012939:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001293d:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0012944:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012948:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001294c:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c001294f:	e8 8c d5 ff ff       	call   c000fee0 <Phys::allocatePage()>
c0012954:	89 c2                	mov    edx,eax
c0012956:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001295a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001295d:	e8 c7 f5 ff ff       	call   c0011f29 <Virt::getAKernelVAS()>
c0012962:	89 c3                	mov    ebx,eax
c0012964:	83 ec 0c             	sub    esp,0xc
c0012967:	6a 01                	push   0x1
c0012969:	e8 7d f3 ff ff       	call   c0011ceb <Virt::allocateKernelVirtualPages(int)>
c001296e:	83 c4 10             	add    esp,0x10
c0012971:	89 c2                	mov    edx,eax
c0012973:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012977:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001297a:	83 ec 0c             	sub    esp,0xc
c001297d:	6a 03                	push   0x3
c001297f:	6a 01                	push   0x1
c0012981:	52                   	push   edx
c0012982:	50                   	push   eax
c0012983:	53                   	push   ebx
c0012984:	e8 e5 fd ff ff       	call   c001276e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012989:	83 c4 20             	add    esp,0x20
c001298c:	89 c2                	mov    edx,eax
c001298e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012992:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0012995:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001299d:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c00129a5:	7f 1c                	jg     c00129c3 <VAS::VAS(bool)+0xa1>
c00129a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129ab:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00129ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00129b2:	c1 e2 02             	shl    edx,0x2
c00129b5:	01 d0                	add    eax,edx
c00129b7:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00129bd:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00129c1:	eb da                	jmp    c001299d <VAS::VAS(bool)+0x7b>
c00129c3:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00129cb:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00129d3:	7f 7a                	jg     c0012a4f <VAS::VAS(bool)+0x12d>
c00129d5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00129d9:	2d 00 02 00 00       	sub    eax,0x200
c00129de:	c1 e0 0c             	shl    eax,0xc
c00129e1:	83 c8 03             	or     eax,0x3
c00129e4:	89 c2                	mov    edx,eax
c00129e6:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c00129eb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129f1:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00129f7:	83 e0 10             	and    eax,0x10
c00129fa:	84 c0                	test   al,al
c00129fc:	74 07                	je     c0012a05 <VAS::VAS(bool)+0xe3>
c00129fe:	b8 00 01 00 00       	mov    eax,0x100
c0012a03:	eb 05                	jmp    c0012a0a <VAS::VAS(bool)+0xe8>
c0012a05:	b8 00 00 00 00       	mov    eax,0x0
c0012a0a:	09 d0                	or     eax,edx
c0012a0c:	89 c1                	mov    ecx,eax
c0012a0e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a12:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012a15:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012a19:	c1 e2 02             	shl    edx,0x2
c0012a1c:	01 d0                	add    eax,edx
c0012a1e:	89 ca                	mov    edx,ecx
c0012a20:	89 10                	mov    DWORD PTR [eax],edx
c0012a22:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012a26:	2d 40 03 00 00       	sub    eax,0x340
c0012a2b:	83 f8 7f             	cmp    eax,0x7f
c0012a2e:	77 16                	ja     c0012a46 <VAS::VAS(bool)+0x124>
c0012a30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a34:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012a37:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012a3b:	c1 e2 02             	shl    edx,0x2
c0012a3e:	01 d0                	add    eax,edx
c0012a40:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012a46:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012a4a:	e9 7c ff ff ff       	jmp    c00129cb <VAS::VAS(bool)+0xa9>
c0012a4f:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0012a54:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a5a:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012a60:	83 e0 10             	and    eax,0x10
c0012a63:	84 c0                	test   al,al
c0012a65:	74 07                	je     c0012a6e <VAS::VAS(bool)+0x14c>
c0012a67:	b8 03 41 00 00       	mov    eax,0x4103
c0012a6c:	eb 05                	jmp    c0012a73 <VAS::VAS(bool)+0x151>
c0012a6e:	b8 03 40 00 00       	mov    eax,0x4003
c0012a73:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012a77:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012a7a:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012a80:	89 02                	mov    DWORD PTR [edx],eax
c0012a82:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0012a87:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a8d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012a93:	83 ec 08             	sub    esp,0x8
c0012a96:	50                   	push   eax
c0012a97:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a9b:	e8 b2 fc ff ff       	call   c0012752 <VAS::setCPUSpecific(unsigned long)>
c0012aa0:	83 c4 10             	add    esp,0x10
c0012aa3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012aa7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012aaa:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0012aaf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012ab5:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012abb:	83 e0 10             	and    eax,0x10
c0012abe:	84 c0                	test   al,al
c0012ac0:	74 07                	je     c0012ac9 <VAS::VAS(bool)+0x1a7>
c0012ac2:	b8 00 01 00 00       	mov    eax,0x100
c0012ac7:	eb 05                	jmp    c0012ace <VAS::VAS(bool)+0x1ac>
c0012ac9:	b8 00 00 00 00       	mov    eax,0x0
c0012ace:	09 c2                	or     edx,eax
c0012ad0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012ad4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012ad7:	05 fc 0f 00 00       	add    eax,0xffc
c0012adc:	83 ca 03             	or     edx,0x3
c0012adf:	89 10                	mov    DWORD PTR [eax],edx
c0012ae1:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0012ae6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012aec:	83 ec 0c             	sub    esp,0xc
c0012aef:	50                   	push   eax
c0012af0:	e8 07 1c 00 00       	call   c00146fc <Device::getName()>
c0012af5:	83 c4 10             	add    esp,0x10
c0012af8:	83 ec 08             	sub    esp,0x8
c0012afb:	68 7e a7 02 c0       	push   0xc002a77e
c0012b00:	50                   	push   eax
c0012b01:	e8 ba dd fe ff       	call   c00008c0 <strcmp>
c0012b06:	83 c4 10             	add    esp,0x10
c0012b09:	85 c0                	test   eax,eax
c0012b0b:	0f 94 c0             	sete   al
c0012b0e:	84 c0                	test   al,al
c0012b10:	74 70                	je     c0012b82 <VAS::VAS(bool)+0x260>
c0012b12:	e8 50 b3 00 00       	call   c001de67 <disableIRQs()>
c0012b17:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0012b1c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012b22:	05 7c 09 00 00       	add    eax,0x97c
c0012b27:	83 ec 0c             	sub    esp,0xc
c0012b2a:	50                   	push   eax
c0012b2b:	e8 8c c7 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012b30:	83 c4 10             	add    esp,0x10
c0012b33:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012b38:	89 c3                	mov    ebx,eax
c0012b3a:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0012b3f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012b45:	05 7c 09 00 00       	add    eax,0x97c
c0012b4a:	83 ec 0c             	sub    esp,0xc
c0012b4d:	50                   	push   eax
c0012b4e:	e8 69 c7 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012b53:	83 c4 10             	add    esp,0x10
c0012b56:	83 ec 08             	sub    esp,0x8
c0012b59:	50                   	push   eax
c0012b5a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012b5e:	e8 91 f5 ff ff       	call   c00120f4 <VAS::getPageTableEntry(unsigned long)>
c0012b63:	83 c4 10             	add    esp,0x10
c0012b66:	8b 00                	mov    eax,DWORD PTR [eax]
c0012b68:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012b6d:	6a 11                	push   0x11
c0012b6f:	53                   	push   ebx
c0012b70:	50                   	push   eax
c0012b71:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012b75:	e8 00 f9 ff ff       	call   c001247a <VAS::mapPage(unsigned long, unsigned long, int)>
c0012b7a:	83 c4 10             	add    esp,0x10
c0012b7d:	e8 f3 b2 00 00       	call   c001de75 <enableIRQs()>
c0012b82:	90                   	nop
c0012b83:	83 c4 28             	add    esp,0x28
c0012b86:	5b                   	pop    ebx
c0012b87:	c3                   	ret    

c0012b88 <VAS::evict(unsigned long)>:
c0012b88:	55                   	push   ebp
c0012b89:	57                   	push   edi
c0012b8a:	56                   	push   esi
c0012b8b:	53                   	push   ebx
c0012b8c:	83 ec 0c             	sub    esp,0xc
c0012b8f:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0012b93:	e8 94 f2 ff ff       	call   c0011e2c <Virt::allocateSwapfilePage()>
c0012b98:	89 c7                	mov    edi,eax
c0012b9a:	a1 6c d4 02 c0       	mov    eax,ds:0xc002d46c
c0012b9f:	85 c0                	test   eax,eax
c0012ba1:	7e 3d                	jle    c0012be0 <VAS::evict(unsigned long)+0x58>
c0012ba3:	89 ee                	mov    esi,ebp
c0012ba5:	31 db                	xor    ebx,ebx
c0012ba7:	83 ec 0c             	sub    esp,0xc
c0012baa:	57                   	push   edi
c0012bab:	e8 6a f2 ff ff       	call   c0011e1a <Virt::swapIDToSector(unsigned long)>
c0012bb0:	89 34 24             	mov    DWORD PTR [esp],esi
c0012bb3:	01 d8                	add    eax,ebx
c0012bb5:	6a 01                	push   0x1
c0012bb7:	31 d2                	xor    edx,edx
c0012bb9:	43                   	inc    ebx
c0012bba:	52                   	push   edx
c0012bbb:	81 c6 00 02 00 00    	add    esi,0x200
c0012bc1:	50                   	push   eax
c0012bc2:	0f be 05 78 d4 02 c0 	movsx  eax,BYTE PTR ds:0xc002d478
c0012bc9:	ff 34 85 dc e9 02 c0 	push   DWORD PTR [eax*4-0x3ffd1624]
c0012bd0:	e8 91 3c 00 00       	call   c0016866 <LogicalDisk::write(unsigned long long, int, void*)>
c0012bd5:	83 c4 20             	add    esp,0x20
c0012bd8:	39 1d 6c d4 02 c0    	cmp    DWORD PTR ds:0xc002d46c,ebx
c0012bde:	7f c7                	jg     c0012ba7 <VAS::evict(unsigned long)+0x1f>
c0012be0:	83 ec 08             	sub    esp,0x8
c0012be3:	c1 e7 0b             	shl    edi,0xb
c0012be6:	55                   	push   ebp
c0012be7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012beb:	e8 04 f5 ff ff       	call   c00120f4 <VAS::getPageTableEntry(unsigned long)>
c0012bf0:	8b 10                	mov    edx,DWORD PTR [eax]
c0012bf2:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012bf8:	09 d7                	or     edi,edx
c0012bfa:	89 38                	mov    DWORD PTR [eax],edi
c0012bfc:	ff 05 44 e6 02 c0    	inc    DWORD PTR ds:0xc002e644
c0012c02:	0f 20 d8             	mov    eax,cr3
c0012c05:	0f 22 d8             	mov    cr3,eax
c0012c08:	83 c4 1c             	add    esp,0x1c
c0012c0b:	5b                   	pop    ebx
c0012c0c:	5e                   	pop    esi
c0012c0d:	5f                   	pop    edi
c0012c0e:	5d                   	pop    ebp
c0012c0f:	c3                   	ret    

c0012c10 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012c10:	57                   	push   edi
c0012c11:	56                   	push   esi
c0012c12:	53                   	push   ebx
c0012c13:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012c17:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012c1d:	74 1c                	je     c0012c3b <VAS::tryLoadBackOffDisk(unsigned long)+0x2b>
c0012c1f:	53                   	push   ebx
c0012c20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012c24:	e8 cb f4 ff ff       	call   c00120f4 <VAS::getPageTableEntry(unsigned long)>
c0012c29:	5a                   	pop    edx
c0012c2a:	89 c6                	mov    esi,eax
c0012c2c:	59                   	pop    ecx
c0012c2d:	85 c0                	test   eax,eax
c0012c2f:	74 0a                	je     c0012c3b <VAS::tryLoadBackOffDisk(unsigned long)+0x2b>
c0012c31:	8b 38                	mov    edi,DWORD PTR [eax]
c0012c33:	f7 c7 01 00 00 00    	test   edi,0x1
c0012c39:	74 06                	je     c0012c41 <VAS::tryLoadBackOffDisk(unsigned long)+0x31>
c0012c3b:	31 c0                	xor    eax,eax
c0012c3d:	5b                   	pop    ebx
c0012c3e:	5e                   	pop    esi
c0012c3f:	5f                   	pop    edi
c0012c40:	c3                   	ret    
c0012c41:	e8 9a d2 ff ff       	call   c000fee0 <Phys::allocatePage()>
c0012c46:	c1 ef 0b             	shr    edi,0xb
c0012c49:	8b 16                	mov    edx,DWORD PTR [esi]
c0012c4b:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012c51:	09 c2                	or     edx,eax
c0012c53:	81 ca 01 08 00 00    	or     edx,0x801
c0012c59:	89 16                	mov    DWORD PTR [esi],edx
c0012c5b:	0f 20 d8             	mov    eax,cr3
c0012c5e:	0f 22 d8             	mov    cr3,eax
c0012c61:	a1 6c d4 02 c0       	mov    eax,ds:0xc002d46c
c0012c66:	85 c0                	test   eax,eax
c0012c68:	7e 3b                	jle    c0012ca5 <VAS::tryLoadBackOffDisk(unsigned long)+0x95>
c0012c6a:	31 f6                	xor    esi,esi
c0012c6c:	83 ec 0c             	sub    esp,0xc
c0012c6f:	57                   	push   edi
c0012c70:	e8 a5 f1 ff ff       	call   c0011e1a <Virt::swapIDToSector(unsigned long)>
c0012c75:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012c78:	01 f0                	add    eax,esi
c0012c7a:	6a 01                	push   0x1
c0012c7c:	31 d2                	xor    edx,edx
c0012c7e:	46                   	inc    esi
c0012c7f:	52                   	push   edx
c0012c80:	81 c3 00 02 00 00    	add    ebx,0x200
c0012c86:	50                   	push   eax
c0012c87:	0f be 05 78 d4 02 c0 	movsx  eax,BYTE PTR ds:0xc002d478
c0012c8e:	ff 34 85 dc e9 02 c0 	push   DWORD PTR [eax*4-0x3ffd1624]
c0012c95:	e8 60 3b 00 00       	call   c00167fa <LogicalDisk::read(unsigned long long, int, void*)>
c0012c9a:	83 c4 20             	add    esp,0x20
c0012c9d:	39 35 6c d4 02 c0    	cmp    DWORD PTR ds:0xc002d46c,esi
c0012ca3:	7f c7                	jg     c0012c6c <VAS::tryLoadBackOffDisk(unsigned long)+0x5c>
c0012ca5:	83 ec 0c             	sub    esp,0xc
c0012ca8:	ff 0d 44 e6 02 c0    	dec    DWORD PTR ds:0xc002e644
c0012cae:	57                   	push   edi
c0012caf:	e8 48 f1 ff ff       	call   c0011dfc <Virt::freeSwapfilePage(unsigned long)>
c0012cb4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012cb8:	83 c4 10             	add    esp,0x10
c0012cbb:	25 ff 0f 00 00       	and    eax,0xfff
c0012cc0:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012cc5:	77 07                	ja     c0012cce <VAS::tryLoadBackOffDisk(unsigned long)+0xbe>
c0012cc7:	b0 01                	mov    al,0x1
c0012cc9:	e9 6f ff ff ff       	jmp    c0012c3d <VAS::tryLoadBackOffDisk(unsigned long)+0x2d>
c0012cce:	83 ec 0c             	sub    esp,0xc
c0012cd1:	68 8c a7 02 c0       	push   0xc002a78c
c0012cd6:	e8 0f 03 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0012cdb:	83 c4 10             	add    esp,0x10
c0012cde:	b0 01                	mov    al,0x1
c0012ce0:	e9 58 ff ff ff       	jmp    c0012c3d <VAS::tryLoadBackOffDisk(unsigned long)+0x2d>
c0012ce5:	90                   	nop

c0012ce6 <VAS::scanForEviction()>:
c0012ce6:	55                   	push   ebp
c0012ce7:	57                   	push   edi
c0012ce8:	31 ff                	xor    edi,edi
c0012cea:	56                   	push   esi
c0012ceb:	31 f6                	xor    esi,esi
c0012ced:	53                   	push   ebx
c0012cee:	83 ec 1c             	sub    esp,0x1c
c0012cf1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012cf5:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0012cf8:	89 d8                	mov    eax,ebx
c0012cfa:	39 c3                	cmp    ebx,eax
c0012cfc:	74 72                	je     c0012d70 <VAS::scanForEviction()+0x8a>
c0012cfe:	a9 ff ff 3f 00       	test   eax,0x3fffff
c0012d03:	75 0e                	jne    c0012d13 <VAS::scanForEviction()+0x2d>
c0012d05:	89 c1                	mov    ecx,eax
c0012d07:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0012d0a:	c1 e9 16             	shr    ecx,0x16
c0012d0d:	f6 04 8a 01          	test   BYTE PTR [edx+ecx*4],0x1
c0012d11:	74 51                	je     c0012d64 <VAS::scanForEviction()+0x7e>
c0012d13:	50                   	push   eax
c0012d14:	55                   	push   ebp
c0012d15:	e8 da f3 ff ff       	call   c00120f4 <VAS::getPageTableEntry(unsigned long)>
c0012d1a:	5a                   	pop    edx
c0012d1b:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d1d:	59                   	pop    ecx
c0012d1e:	89 d1                	mov    ecx,edx
c0012d20:	81 e1 00 0c 00 00    	and    ecx,0xc00
c0012d26:	81 f9 00 0c 00 00    	cmp    ecx,0xc00
c0012d2c:	74 54                	je     c0012d82 <VAS::scanForEviction()+0x9c>
c0012d2e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0012d31:	05 00 10 00 00       	add    eax,0x1000
c0012d36:	3d ff ff bf ff       	cmp    eax,0xffbfffff
c0012d3b:	76 3d                	jbe    c0012d7a <VAS::scanForEviction()+0x94>
c0012d3d:	c7 45 10 00 00 00 00 	mov    DWORD PTR [ebp+0x10],0x0
c0012d44:	85 db                	test   ebx,ebx
c0012d46:	74 79                	je     c0012dc1 <VAS::scanForEviction()+0xdb>
c0012d48:	31 c0                	xor    eax,eax
c0012d4a:	be 01 00 00 00       	mov    esi,0x1
c0012d4f:	a9 ff ff 3f 00       	test   eax,0x3fffff
c0012d54:	75 bd                	jne    c0012d13 <VAS::scanForEviction()+0x2d>
c0012d56:	89 c1                	mov    ecx,eax
c0012d58:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0012d5b:	c1 e9 16             	shr    ecx,0x16
c0012d5e:	f6 04 8a 01          	test   BYTE PTR [edx+ecx*4],0x1
c0012d62:	75 af                	jne    c0012d13 <VAS::scanForEviction()+0x2d>
c0012d64:	05 00 00 40 00       	add    eax,0x400000
c0012d69:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0012d6c:	39 c3                	cmp    ebx,eax
c0012d6e:	75 8e                	jne    c0012cfe <VAS::scanForEviction()+0x18>
c0012d70:	89 f1                	mov    ecx,esi
c0012d72:	84 c9                	test   cl,cl
c0012d74:	74 88                	je     c0012cfe <VAS::scanForEviction()+0x18>
c0012d76:	89 f7                	mov    edi,esi
c0012d78:	eb 84                	jmp    c0012cfe <VAS::scanForEviction()+0x18>
c0012d7a:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0012d7d:	e9 78 ff ff ff       	jmp    c0012cfa <VAS::scanForEviction()+0x14>
c0012d82:	f6 c2 01             	test   dl,0x1
c0012d85:	74 a7                	je     c0012d2e <VAS::scanForEviction()+0x48>
c0012d87:	f6 c2 40             	test   dl,0x40
c0012d8a:	74 0b                	je     c0012d97 <VAS::scanForEviction()+0xb1>
c0012d8c:	83 e2 bf             	and    edx,0xffffffbf
c0012d8f:	89 10                	mov    DWORD PTR [eax],edx
c0012d91:	89 f8                	mov    eax,edi
c0012d93:	84 c0                	test   al,al
c0012d95:	74 97                	je     c0012d2e <VAS::scanForEviction()+0x48>
c0012d97:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012d9b:	83 ec 08             	sub    esp,0x8
c0012d9e:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0012da1:	55                   	push   ebp
c0012da2:	e8 e1 fd ff ff       	call   c0012b88 <VAS::evict(unsigned long)>
c0012da7:	81 45 10 00 10 00 00 	add    DWORD PTR [ebp+0x10],0x1000
c0012dae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012db2:	83 c4 2c             	add    esp,0x2c
c0012db5:	89 d0                	mov    eax,edx
c0012db7:	5b                   	pop    ebx
c0012db8:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012dbd:	5e                   	pop    esi
c0012dbe:	5f                   	pop    edi
c0012dbf:	5d                   	pop    ebp
c0012dc0:	c3                   	ret    
c0012dc1:	bf 01 00 00 00       	mov    edi,0x1
c0012dc6:	eb 80                	jmp    c0012d48 <VAS::scanForEviction()+0x62>

c0012dc8 <mapVASFirstTime>:
c0012dc8:	55                   	push   ebp
c0012dc9:	57                   	push   edi
c0012dca:	56                   	push   esi
c0012dcb:	53                   	push   ebx
c0012dcc:	83 ec 0c             	sub    esp,0xc
c0012dcf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012dd4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012dd7:	4a                   	dec    edx
c0012dd8:	0f 84 8e 00 00 00    	je     c0012e6c <mapVASFirstTime+0xa4>
c0012dde:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012de1:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012de4:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012de9:	c1 e5 15             	shl    ebp,0x15
c0012dec:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012df1:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012df7:	29 eb                	sub    ebx,ebp
c0012df9:	29 ee                	sub    esi,ebp
c0012dfb:	e8 e0 d0 ff ff       	call   c000fee0 <Phys::allocatePage()>
c0012e00:	83 ec 0c             	sub    esp,0xc
c0012e03:	68 03 04 00 00       	push   0x403
c0012e08:	6a 01                	push   0x1
c0012e0a:	53                   	push   ebx
c0012e0b:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012e11:	50                   	push   eax
c0012e12:	57                   	push   edi
c0012e13:	e8 56 f9 ff ff       	call   c001276e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012e18:	83 c4 20             	add    esp,0x20
c0012e1b:	39 f3                	cmp    ebx,esi
c0012e1d:	75 dc                	jne    c0012dfb <mapVASFirstTime+0x33>
c0012e1f:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012e24:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012e29:	29 ee                	sub    esi,ebp
c0012e2b:	29 e8                	sub    eax,ebp
c0012e2d:	89 c5                	mov    ebp,eax
c0012e2f:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012e33:	19 db                	sbb    ebx,ebx
c0012e35:	e8 a6 d0 ff ff       	call   c000fee0 <Phys::allocatePage()>
c0012e3a:	83 e3 04             	and    ebx,0x4
c0012e3d:	83 ec 0c             	sub    esp,0xc
c0012e40:	81 c3 03 04 00 00    	add    ebx,0x403
c0012e46:	53                   	push   ebx
c0012e47:	6a 01                	push   0x1
c0012e49:	56                   	push   esi
c0012e4a:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012e50:	50                   	push   eax
c0012e51:	57                   	push   edi
c0012e52:	e8 17 f9 ff ff       	call   c001276e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012e57:	83 c4 20             	add    esp,0x20
c0012e5a:	39 f5                	cmp    ebp,esi
c0012e5c:	75 d1                	jne    c0012e2f <mapVASFirstTime+0x67>
c0012e5e:	0f 20 d8             	mov    eax,cr3
c0012e61:	0f 22 d8             	mov    cr3,eax
c0012e64:	83 c4 0c             	add    esp,0xc
c0012e67:	5b                   	pop    ebx
c0012e68:	5e                   	pop    esi
c0012e69:	5f                   	pop    edi
c0012e6a:	5d                   	pop    ebp
c0012e6b:	c3                   	ret    
c0012e6c:	83 ec 0c             	sub    esp,0xc
c0012e6f:	68 a0 a7 02 c0       	push   0xc002a7a0
c0012e74:	e8 71 01 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0012e79:	83 c4 10             	add    esp,0x10
c0012e7c:	83 c4 0c             	add    esp,0xc
c0012e7f:	5b                   	pop    ebx
c0012e80:	5e                   	pop    esi
c0012e81:	5f                   	pop    edi
c0012e82:	5d                   	pop    ebp
c0012e83:	c3                   	ret    

c0012e84 <__cxa_atexit>:
c0012e84:	31 c0                	xor    eax,eax
c0012e86:	c3                   	ret    

c0012e87 <__cxa_finalize>:
c0012e87:	c3                   	ret    

c0012e88 <__stack_chk_fail>:
c0012e88:	55                   	push   ebp
c0012e89:	89 e5                	mov    ebp,esp
c0012e8b:	83 ec 14             	sub    esp,0x14
c0012e8e:	68 43 a9 02 c0       	push   0xc002a943
c0012e93:	e8 52 01 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0012e98:	58                   	pop    eax
c0012e99:	5a                   	pop    edx
c0012e9a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012e9d:	68 93 a9 02 c0       	push   0xc002a993
c0012ea2:	e8 43 01 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0012ea7:	59                   	pop    ecx
c0012ea8:	58                   	pop    eax
c0012ea9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012eac:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012eaf:	68 93 a9 02 c0       	push   0xc002a993
c0012eb4:	e8 31 01 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0012eb9:	5a                   	pop    edx
c0012eba:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012ebd:	59                   	pop    ecx
c0012ebe:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ec0:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012ec3:	68 93 a9 02 c0       	push   0xc002a993
c0012ec8:	e8 1d 01 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0012ecd:	5a                   	pop    edx
c0012ece:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012ed1:	59                   	pop    ecx
c0012ed2:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ed4:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ed6:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012ed9:	68 93 a9 02 c0       	push   0xc002a993
c0012ede:	e8 07 01 00 00       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0012ee3:	c7 04 24 9b a9 02 c0 	mov    DWORD PTR [esp],0xc002a99b
c0012eea:	e8 a0 77 00 00       	call   c001a68f <Krnl::panic(char const*)>
c0012eef:	83 c4 10             	add    esp,0x10
c0012ef2:	c9                   	leave  
c0012ef3:	c3                   	ret    

c0012ef4 <__cxa_pure_virtual>:
c0012ef4:	83 ec 18             	sub    esp,0x18
c0012ef7:	68 b3 a9 02 c0       	push   0xc002a9b3
c0012efc:	e8 8e 77 00 00       	call   c001a68f <Krnl::panic(char const*)>
c0012f01:	83 c4 1c             	add    esp,0x1c
c0012f04:	c3                   	ret    

c0012f05 <operator new[](unsigned long)>:
c0012f05:	e9 39 c9 ff ff       	jmp    c000f843 <malloc>

c0012f0a <operator delete(void*, unsigned long)>:
c0012f0a:	e9 54 c9 ff ff       	jmp    c000f863 <rfree>

c0012f0f <operator delete[](void*)>:
c0012f0f:	e9 4f c9 ff ff       	jmp    c000f863 <rfree>

c0012f14 <operator delete[](void*, unsigned long)>:
c0012f14:	e9 4a c9 ff ff       	jmp    c000f863 <rfree>

c0012f19 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012f19:	57                   	push   edi
c0012f1a:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012f1f:	56                   	push   esi
c0012f20:	be c8 a9 02 c0       	mov    esi,0xc002a9c8
c0012f25:	53                   	push   ebx
c0012f26:	83 ec 40             	sub    esp,0x40
c0012f29:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012f2d:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012f31:	fc                   	cld    
c0012f32:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012f34:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012f38:	83 f9 3e             	cmp    ecx,0x3e
c0012f3b:	7e 05                	jle    c0012f42 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012f3d:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012f42:	89 df                	mov    edi,ebx
c0012f44:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012f48:	eb 02                	jmp    c0012f4c <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012f4a:	89 c7                	mov    edi,eax
c0012f4c:	31 d2                	xor    edx,edx
c0012f4e:	46                   	inc    esi
c0012f4f:	89 f8                	mov    eax,edi
c0012f51:	f7 f1                	div    ecx
c0012f53:	39 cf                	cmp    edi,ecx
c0012f55:	73 f3                	jae    c0012f4a <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012f57:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012f5a:	eb 02                	jmp    c0012f5e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012f5c:	89 c3                	mov    ebx,eax
c0012f5e:	31 d2                	xor    edx,edx
c0012f60:	4e                   	dec    esi
c0012f61:	89 d8                	mov    eax,ebx
c0012f63:	f7 f1                	div    ecx
c0012f65:	39 cb                	cmp    ebx,ecx
c0012f67:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012f6b:	88 16                	mov    BYTE PTR [esi],dl
c0012f6d:	73 ed                	jae    c0012f5c <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012f6f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012f73:	83 c4 40             	add    esp,0x40
c0012f76:	5b                   	pop    ebx
c0012f77:	5e                   	pop    esi
c0012f78:	5f                   	pop    edi
c0012f79:	c3                   	ret    

c0012f7a <Dbg::logc(char)>:
c0012f7a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f7e:	ba fd 03 00 00       	mov    edx,0x3fd
c0012f83:	ec                   	in     al,dx
c0012f84:	a8 20                	test   al,0x20
c0012f86:	74 fb                	je     c0012f83 <Dbg::logc(char)+0x9>
c0012f88:	ba f8 03 00 00       	mov    edx,0x3f8
c0012f8d:	88 c8                	mov    al,cl
c0012f8f:	ee                   	out    dx,al
c0012f90:	c3                   	ret    

c0012f91 <Dbg::logs(char*)>:
c0012f91:	53                   	push   ebx
c0012f92:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012f96:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012f99:	84 c0                	test   al,al
c0012f9b:	74 0f                	je     c0012fac <Dbg::logs(char*)+0x1b>
c0012f9d:	50                   	push   eax
c0012f9e:	43                   	inc    ebx
c0012f9f:	e8 d6 ff ff ff       	call   c0012f7a <Dbg::logc(char)>
c0012fa4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012fa7:	5a                   	pop    edx
c0012fa8:	84 c0                	test   al,al
c0012faa:	75 f1                	jne    c0012f9d <Dbg::logs(char*)+0xc>
c0012fac:	5b                   	pop    ebx
c0012fad:	c3                   	ret    

c0012fae <Dbg::logWriteInt(unsigned int)>:
c0012fae:	83 ec 10             	sub    esp,0x10
c0012fb1:	6a 0a                	push   0xa
c0012fb3:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012fb7:	50                   	push   eax
c0012fb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fbc:	e8 58 ff ff ff       	call   c0012f19 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012fc1:	50                   	push   eax
c0012fc2:	e8 ca ff ff ff       	call   c0012f91 <Dbg::logs(char*)>
c0012fc7:	83 c4 20             	add    esp,0x20
c0012fca:	c3                   	ret    

c0012fcb <Dbg::logWriteIntBase(unsigned int, int)>:
c0012fcb:	83 ec 10             	sub    esp,0x10
c0012fce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012fd2:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012fd6:	50                   	push   eax
c0012fd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fdb:	e8 39 ff ff ff       	call   c0012f19 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012fe0:	50                   	push   eax
c0012fe1:	e8 ab ff ff ff       	call   c0012f91 <Dbg::logs(char*)>
c0012fe6:	83 c4 20             	add    esp,0x20
c0012fe9:	c3                   	ret    

c0012fea <Dbg::kprintf(char const*, ...)>:
c0012fea:	55                   	push   ebp
c0012feb:	57                   	push   edi
c0012fec:	56                   	push   esi
c0012fed:	53                   	push   ebx
c0012fee:	83 ec 0c             	sub    esp,0xc
c0012ff1:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012ff5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012ff9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012ffd:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0013000:	84 c0                	test   al,al
c0013002:	74 4a                	je     c001304e <Dbg::kprintf(char const*, ...)+0x64>
c0013004:	31 db                	xor    ebx,ebx
c0013006:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013009:	3c 25                	cmp    al,0x25
c001300b:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c001300e:	0f 85 e4 00 00 00    	jne    c00130f8 <Dbg::kprintf(char const*, ...)+0x10e>
c0013014:	83 c3 02             	add    ebx,0x2
c0013017:	8a 07                	mov    al,BYTE PTR [edi]
c0013019:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c001301c:	83 e8 25             	sub    eax,0x25
c001301f:	3c 53                	cmp    al,0x53
c0013021:	0f 87 ba 00 00 00    	ja     c00130e1 <Dbg::kprintf(char const*, ...)+0xf7>
c0013027:	0f b6 c0             	movzx  eax,al
c001302a:	ff 24 85 08 aa 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd55f8]
c0013031:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013035:	89 c8                	mov    eax,ecx
c0013037:	83 c1 04             	add    ecx,0x4
c001303a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001303e:	ff 30                	push   DWORD PTR [eax]
c0013040:	e8 4c ff ff ff       	call   c0012f91 <Dbg::logs(char*)>
c0013045:	58                   	pop    eax
c0013046:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c001304a:	84 c0                	test   al,al
c001304c:	75 b8                	jne    c0013006 <Dbg::kprintf(char const*, ...)+0x1c>
c001304e:	83 c4 0c             	add    esp,0xc
c0013051:	5b                   	pop    ebx
c0013052:	5e                   	pop    esi
c0013053:	5f                   	pop    edi
c0013054:	5d                   	pop    ebp
c0013055:	c3                   	ret    
c0013056:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001305a:	89 d0                	mov    eax,edx
c001305c:	83 c2 04             	add    edx,0x4
c001305f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0013063:	ff 30                	push   DWORD PTR [eax]
c0013065:	e8 44 ff ff ff       	call   c0012fae <Dbg::logWriteInt(unsigned int)>
c001306a:	58                   	pop    eax
c001306b:	eb d9                	jmp    c0013046 <Dbg::kprintf(char const*, ...)+0x5c>
c001306d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013071:	89 d0                	mov    eax,edx
c0013073:	83 c2 04             	add    edx,0x4
c0013076:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0013079:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001307d:	50                   	push   eax
c001307e:	e8 f7 fe ff ff       	call   c0012f7a <Dbg::logc(char)>
c0013083:	58                   	pop    eax
c0013084:	eb c0                	jmp    c0013046 <Dbg::kprintf(char const*, ...)+0x5c>
c0013086:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001308a:	89 c8                	mov    eax,ecx
c001308c:	83 c1 04             	add    ecx,0x4
c001308f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0013093:	ff 30                	push   DWORD PTR [eax]
c0013095:	e8 14 ff ff ff       	call   c0012fae <Dbg::logWriteInt(unsigned int)>
c001309a:	5f                   	pop    edi
c001309b:	eb a9                	jmp    c0013046 <Dbg::kprintf(char const*, ...)+0x5c>
c001309d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00130a1:	89 c8                	mov    eax,ecx
c00130a3:	83 c1 04             	add    ecx,0x4
c00130a6:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00130aa:	6a 10                	push   0x10
c00130ac:	ff 30                	push   DWORD PTR [eax]
c00130ae:	e8 18 ff ff ff       	call   c0012fcb <Dbg::logWriteIntBase(unsigned int, int)>
c00130b3:	59                   	pop    ecx
c00130b4:	5f                   	pop    edi
c00130b5:	eb 8f                	jmp    c0013046 <Dbg::kprintf(char const*, ...)+0x5c>
c00130b7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00130bb:	89 d0                	mov    eax,edx
c00130bd:	83 c2 08             	add    edx,0x8
c00130c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00130c4:	6a 10                	push   0x10
c00130c6:	ff 30                	push   DWORD PTR [eax]
c00130c8:	e8 fe fe ff ff       	call   c0012fcb <Dbg::logWriteIntBase(unsigned int, int)>
c00130cd:	58                   	pop    eax
c00130ce:	5a                   	pop    edx
c00130cf:	e9 72 ff ff ff       	jmp    c0013046 <Dbg::kprintf(char const*, ...)+0x5c>
c00130d4:	6a 25                	push   0x25
c00130d6:	e8 9f fe ff ff       	call   c0012f7a <Dbg::logc(char)>
c00130db:	58                   	pop    eax
c00130dc:	e9 65 ff ff ff       	jmp    c0013046 <Dbg::kprintf(char const*, ...)+0x5c>
c00130e1:	6a 25                	push   0x25
c00130e3:	e8 92 fe ff ff       	call   c0012f7a <Dbg::logc(char)>
c00130e8:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00130eb:	50                   	push   eax
c00130ec:	e8 89 fe ff ff       	call   c0012f7a <Dbg::logc(char)>
c00130f1:	5a                   	pop    edx
c00130f2:	59                   	pop    ecx
c00130f3:	e9 4e ff ff ff       	jmp    c0013046 <Dbg::kprintf(char const*, ...)+0x5c>
c00130f8:	50                   	push   eax
c00130f9:	89 eb                	mov    ebx,ebp
c00130fb:	e8 7a fe ff ff       	call   c0012f7a <Dbg::logc(char)>
c0013100:	89 fd                	mov    ebp,edi
c0013102:	58                   	pop    eax
c0013103:	e9 3e ff ff ff       	jmp    c0013046 <Dbg::kprintf(char const*, ...)+0x5c>

c0013108 <File::read(unsigned long long, void*, int*)>:
c0013108:	53                   	push   ebx
c0013109:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001310d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013111:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013118:	3c 19                	cmp    al,0x19
c001311a:	77 35                	ja     c0013151 <File::read(unsigned long long, void*, int*)+0x49>
c001311c:	8b 04 85 e0 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1520]
c0013123:	85 c0                	test   eax,eax
c0013125:	74 2a                	je     c0013151 <File::read(unsigned long long, void*, int*)+0x49>
c0013127:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001312d:	85 c0                	test   eax,eax
c001312f:	74 20                	je     c0013151 <File::read(unsigned long long, void*, int*)+0x49>
c0013131:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013135:	74 21                	je     c0013158 <File::read(unsigned long long, void*, int*)+0x50>
c0013137:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013139:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001313d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013143:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013147:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001314b:	5b                   	pop    ebx
c001314c:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c001314f:	ff e0                	jmp    eax
c0013151:	b8 0b 00 00 00       	mov    eax,0xb
c0013156:	eb 05                	jmp    c001315d <File::read(unsigned long long, void*, int*)+0x55>
c0013158:	b8 05 00 00 00       	mov    eax,0x5
c001315d:	5b                   	pop    ebx
c001315e:	c3                   	ret    
c001315f:	90                   	nop

c0013160 <File::write(unsigned long long, void*, int*)>:
c0013160:	53                   	push   ebx
c0013161:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013165:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013169:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013170:	3c 19                	cmp    al,0x19
c0013172:	77 35                	ja     c00131a9 <File::write(unsigned long long, void*, int*)+0x49>
c0013174:	8b 04 85 e0 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1520]
c001317b:	85 c0                	test   eax,eax
c001317d:	74 2a                	je     c00131a9 <File::write(unsigned long long, void*, int*)+0x49>
c001317f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013185:	85 c0                	test   eax,eax
c0013187:	74 20                	je     c00131a9 <File::write(unsigned long long, void*, int*)+0x49>
c0013189:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001318d:	74 21                	je     c00131b0 <File::write(unsigned long long, void*, int*)+0x50>
c001318f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013191:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013195:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001319b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001319f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00131a3:	5b                   	pop    ebx
c00131a4:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c00131a7:	ff e0                	jmp    eax
c00131a9:	b8 0b 00 00 00       	mov    eax,0xb
c00131ae:	eb 05                	jmp    c00131b5 <File::write(unsigned long long, void*, int*)+0x55>
c00131b0:	b8 05 00 00 00       	mov    eax,0x5
c00131b5:	5b                   	pop    ebx
c00131b6:	c3                   	ret    
c00131b7:	90                   	nop

c00131b8 <Directory::read(unsigned long long, void*, int*)>:
c00131b8:	53                   	push   ebx
c00131b9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00131bd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00131c1:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00131c8:	3c 19                	cmp    al,0x19
c00131ca:	77 35                	ja     c0013201 <Directory::read(unsigned long long, void*, int*)+0x49>
c00131cc:	8b 04 85 e0 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1520]
c00131d3:	85 c0                	test   eax,eax
c00131d5:	74 2a                	je     c0013201 <Directory::read(unsigned long long, void*, int*)+0x49>
c00131d7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00131dd:	85 c0                	test   eax,eax
c00131df:	74 20                	je     c0013201 <Directory::read(unsigned long long, void*, int*)+0x49>
c00131e1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00131e5:	74 21                	je     c0013208 <Directory::read(unsigned long long, void*, int*)+0x50>
c00131e7:	8b 08                	mov    ecx,DWORD PTR [eax]
c00131e9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00131ed:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00131f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00131f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00131fb:	5b                   	pop    ebx
c00131fc:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c00131ff:	ff e0                	jmp    eax
c0013201:	b8 0b 00 00 00       	mov    eax,0xb
c0013206:	eb 05                	jmp    c001320d <Directory::read(unsigned long long, void*, int*)+0x55>
c0013208:	b8 05 00 00 00       	mov    eax,0x5
c001320d:	5b                   	pop    ebx
c001320e:	c3                   	ret    
c001320f:	90                   	nop

c0013210 <Directory::write(unsigned long long, void*, int*)>:
c0013210:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013214:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c001321b:	b8 0b 00 00 00       	mov    eax,0xb
c0013220:	80 fa 19             	cmp    dl,0x19
c0013223:	77 18                	ja     c001323d <Directory::write(unsigned long long, void*, int*)+0x2d>
c0013225:	8b 14 95 e0 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1520]
c001322c:	85 d2                	test   edx,edx
c001322e:	74 0d                	je     c001323d <Directory::write(unsigned long long, void*, int*)+0x2d>
c0013230:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0013237:	19 c0                	sbb    eax,eax
c0013239:	83 e0 0a             	and    eax,0xa
c001323c:	40                   	inc    eax
c001323d:	c3                   	ret    

c001323e <File::isAtty()>:
c001323e:	31 c0                	xor    eax,eax
c0013240:	c3                   	ret    
c0013241:	90                   	nop

c0013242 <Directory::isAtty()>:
c0013242:	31 c0                	xor    eax,eax
c0013244:	c3                   	ret    
c0013245:	90                   	nop

c0013246 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0013246:	b8 0a 00 00 00       	mov    eax,0xa
c001324b:	c3                   	ret    

c001324c <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c001324c:	b8 0a 00 00 00       	mov    eax,0xa
c0013251:	c3                   	ret    

c0013252 <File::~File()>:
c0013252:	83 ec 0c             	sub    esp,0xc
c0013255:	ba c4 ab 02 c0       	mov    edx,0xc002abc4
c001325a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001325e:	89 10                	mov    DWORD PTR [eax],edx
c0013260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013264:	83 ec 0c             	sub    esp,0xc
c0013267:	50                   	push   eax
c0013268:	e8 ad e6 ff ff       	call   c001191a <UnixFile::~UnixFile()>
c001326d:	83 c4 10             	add    esp,0x10
c0013270:	90                   	nop
c0013271:	83 c4 0c             	add    esp,0xc
c0013274:	c3                   	ret    
c0013275:	90                   	nop

c0013276 <File::~File()>:
c0013276:	83 ec 0c             	sub    esp,0xc
c0013279:	83 ec 0c             	sub    esp,0xc
c001327c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013280:	e8 cd ff ff ff       	call   c0013252 <File::~File()>
c0013285:	83 c4 10             	add    esp,0x10
c0013288:	83 ec 08             	sub    esp,0x8
c001328b:	68 14 01 00 00       	push   0x114
c0013290:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013294:	e8 71 fc ff ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c0013299:	83 c4 10             	add    esp,0x10
c001329c:	83 c4 0c             	add    esp,0xc
c001329f:	c3                   	ret    

c00132a0 <Directory::~Directory()>:
c00132a0:	83 ec 0c             	sub    esp,0xc
c00132a3:	ba e0 ab 02 c0       	mov    edx,0xc002abe0
c00132a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132ac:	89 10                	mov    DWORD PTR [eax],edx
c00132ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132b2:	83 ec 0c             	sub    esp,0xc
c00132b5:	50                   	push   eax
c00132b6:	e8 5f e6 ff ff       	call   c001191a <UnixFile::~UnixFile()>
c00132bb:	83 c4 10             	add    esp,0x10
c00132be:	90                   	nop
c00132bf:	83 c4 0c             	add    esp,0xc
c00132c2:	c3                   	ret    
c00132c3:	90                   	nop

c00132c4 <Directory::~Directory()>:
c00132c4:	83 ec 0c             	sub    esp,0xc
c00132c7:	83 ec 0c             	sub    esp,0xc
c00132ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132ce:	e8 cd ff ff ff       	call   c00132a0 <Directory::~Directory()>
c00132d3:	83 c4 10             	add    esp,0x10
c00132d6:	83 ec 08             	sub    esp,0x8
c00132d9:	68 14 01 00 00       	push   0x114
c00132de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132e2:	e8 23 fc ff ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c00132e7:	83 c4 10             	add    esp,0x10
c00132ea:	83 c4 0c             	add    esp,0xc
c00132ed:	c3                   	ret    

c00132ee <Filesystem::Filesystem()>:
c00132ee:	ba 60 ab 02 c0       	mov    edx,0xc002ab60
c00132f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00132f7:	89 10                	mov    DWORD PTR [eax],edx
c00132f9:	8b 15 50 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e650
c00132ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013303:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0013306:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001330a:	a3 50 e6 02 c0       	mov    ds:0xc002e650,eax
c001330f:	90                   	nop
c0013310:	c3                   	ret    
c0013311:	90                   	nop

c0013312 <Filesystem::~Filesystem()>:
c0013312:	ba 60 ab 02 c0       	mov    edx,0xc002ab60
c0013317:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001331b:	89 10                	mov    DWORD PTR [eax],edx
c001331d:	90                   	nop
c001331e:	c3                   	ret    
c001331f:	90                   	nop

c0013320 <Filesystem::~Filesystem()>:
c0013320:	83 ec 0c             	sub    esp,0xc
c0013323:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013327:	e8 e6 ff ff ff       	call   c0013312 <Filesystem::~Filesystem()>
c001332c:	83 c4 04             	add    esp,0x4
c001332f:	83 ec 08             	sub    esp,0x8
c0013332:	6a 08                	push   0x8
c0013334:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013338:	e8 cd fb ff ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c001333d:	83 c4 10             	add    esp,0x10
c0013340:	83 c4 0c             	add    esp,0xc
c0013343:	c3                   	ret    

c0013344 <Fs::getcwd(Process*, char*, int)>:
c0013344:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013348:	31 c0                	xor    eax,eax
c001334a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001334d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0013351:	7d 15                	jge    c0013368 <Fs::getcwd(Process*, char*, int)+0x24>
c0013353:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013357:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c001335e:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0013361:	84 c9                	test   cl,cl
c0013363:	74 06                	je     c001336b <Fs::getcwd(Process*, char*, int)+0x27>
c0013365:	40                   	inc    eax
c0013366:	eb e2                	jmp    c001334a <Fs::getcwd(Process*, char*, int)+0x6>
c0013368:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c001336b:	31 c0                	xor    eax,eax
c001336d:	c3                   	ret    

c001336e <Fs::initVFS()>:
c001336e:	83 ec 18             	sub    esp,0x18
c0013371:	6a 08                	push   0x8
c0013373:	e8 cb c4 ff ff       	call   c000f843 <malloc>
c0013378:	89 04 24             	mov    DWORD PTR [esp],eax
c001337b:	e8 78 dc 00 00       	call   c0020ff8 <FAT::FAT()>
c0013380:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0013387:	e8 b7 c4 ff ff       	call   c000f843 <malloc>
c001338c:	89 04 24             	mov    DWORD PTR [esp],eax
c001338f:	e8 bc ee 00 00       	call   c0022250 <ISO9660::ISO9660()>
c0013394:	83 c4 1c             	add    esp,0x1c
c0013397:	c3                   	ret    

c0013398 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0013398:	55                   	push   ebp
c0013399:	57                   	push   edi
c001339a:	56                   	push   esi
c001339b:	53                   	push   ebx
c001339c:	81 ec 10 04 00 00    	sub    esp,0x410
c00133a2:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c00133a9:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c00133b0:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c00133b7:	68 00 04 00 00       	push   0x400
c00133bc:	6a 00                	push   0x0
c00133be:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00133c2:	56                   	push   esi
c00133c3:	e8 b0 d3 fe ff       	call   c0000778 <memset>
c00133c8:	83 c4 10             	add    esp,0x10
c00133cb:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c00133cf:	75 0b                	jne    c00133dc <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c00133d1:	50                   	push   eax
c00133d2:	50                   	push   eax
c00133d3:	57                   	push   edi
c00133d4:	56                   	push   esi
c00133d5:	e8 5a d4 fe ff       	call   c0000834 <strcpy>
c00133da:	eb 41                	jmp    c001341d <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c00133dc:	8a 07                	mov    al,BYTE PTR [edi]
c00133de:	3c 5c                	cmp    al,0x5c
c00133e0:	74 04                	je     c00133e6 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c00133e2:	3c 2f                	cmp    al,0x2f
c00133e4:	75 18                	jne    c00133fe <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c00133e6:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c00133e9:	3c 60                	cmp    al,0x60
c00133eb:	7e 03                	jle    c00133f0 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c00133ed:	83 e8 20             	sub    eax,0x20
c00133f0:	88 04 24             	mov    BYTE PTR [esp],al
c00133f3:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00133fa:	50                   	push   eax
c00133fb:	50                   	push   eax
c00133fc:	eb 18                	jmp    c0013416 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c00133fe:	50                   	push   eax
c00133ff:	50                   	push   eax
c0013400:	55                   	push   ebp
c0013401:	56                   	push   esi
c0013402:	e8 2d d4 fe ff       	call   c0000834 <strcpy>
c0013407:	5a                   	pop    edx
c0013408:	59                   	pop    ecx
c0013409:	68 9c c2 02 c0       	push   0xc002c29c
c001340e:	56                   	push   esi
c001340f:	e8 60 d5 fe ff       	call   c0000974 <strcat>
c0013414:	5d                   	pop    ebp
c0013415:	58                   	pop    eax
c0013416:	57                   	push   edi
c0013417:	56                   	push   esi
c0013418:	e8 57 d5 fe ff       	call   c0000974 <strcat>
c001341d:	83 c4 10             	add    esp,0x10
c0013420:	8a 04 24             	mov    al,BYTE PTR [esp]
c0013423:	3c 60                	cmp    al,0x60
c0013425:	7e 03                	jle    c001342a <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0013427:	83 e8 20             	sub    eax,0x20
c001342a:	88 04 24             	mov    BYTE PTR [esp],al
c001342d:	88 03                	mov    BYTE PTR [ebx],al
c001342f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0013436:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c001343c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0013440:	bf 03 00 00 00       	mov    edi,0x3
c0013445:	b8 03 00 00 00       	mov    eax,0x3
c001344a:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c001344d:	84 d2                	test   dl,dl
c001344f:	0f 84 91 00 00 00    	je     c00134e6 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0013455:	8d 4f 01             	lea    ecx,[edi+0x1]
c0013458:	80 fa 5c             	cmp    dl,0x5c
c001345b:	74 05                	je     c0013462 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c001345d:	80 fa 2f             	cmp    dl,0x2f
c0013460:	75 12                	jne    c0013474 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0013462:	89 c5                	mov    ebp,eax
c0013464:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013469:	74 09                	je     c0013474 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c001346b:	40                   	inc    eax
c001346c:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0013470:	89 cf                	mov    edi,ecx
c0013472:	eb d6                	jmp    c001344a <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0013474:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0013479:	75 5b                	jne    c00134d6 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c001347b:	80 fa 2e             	cmp    dl,0x2e
c001347e:	75 56                	jne    c00134d6 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0013480:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0013484:	74 19                	je     c001349f <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0013486:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c001348b:	74 53                	je     c00134e0 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c001348d:	89 f9                	mov    ecx,edi
c001348f:	41                   	inc    ecx
c0013490:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0013493:	80 fa 2f             	cmp    dl,0x2f
c0013496:	74 f7                	je     c001348f <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013498:	80 fa 5c             	cmp    dl,0x5c
c001349b:	74 f2                	je     c001348f <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c001349d:	eb d1                	jmp    c0013470 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001349f:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00134a4:	74 3a                	je     c00134e0 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c00134a6:	83 f8 03             	cmp    eax,0x3
c00134a9:	74 c5                	je     c0013470 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00134ab:	41                   	inc    ecx
c00134ac:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00134af:	80 fa 2f             	cmp    dl,0x2f
c00134b2:	74 f7                	je     c00134ab <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c00134b4:	80 fa 5c             	cmp    dl,0x5c
c00134b7:	74 f2                	je     c00134ab <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c00134b9:	48                   	dec    eax
c00134ba:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00134be:	75 06                	jne    c00134c6 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c00134c0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00134c4:	eb f3                	jmp    c00134b9 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c00134c6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00134ca:	74 07                	je     c00134d3 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c00134cc:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00134d0:	48                   	dec    eax
c00134d1:	eb f3                	jmp    c00134c6 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c00134d3:	40                   	inc    eax
c00134d4:	eb 9a                	jmp    c0013470 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00134d6:	80 fa 2f             	cmp    dl,0x2f
c00134d9:	74 95                	je     c0013470 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00134db:	80 fa 5c             	cmp    dl,0x5c
c00134de:	74 90                	je     c0013470 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00134e0:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c00134e3:	40                   	inc    eax
c00134e4:	eb 8a                	jmp    c0013470 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00134e6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00134ea:	83 ec 0c             	sub    esp,0xc
c00134ed:	53                   	push   ebx
c00134ee:	e8 a1 d2 fe ff       	call   c0000794 <strlen>
c00134f3:	83 c4 10             	add    esp,0x10
c00134f6:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c00134fb:	75 26                	jne    c0013523 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c00134fd:	83 ec 0c             	sub    esp,0xc
c0013500:	53                   	push   ebx
c0013501:	e8 8e d2 fe ff       	call   c0000794 <strlen>
c0013506:	83 c4 10             	add    esp,0x10
c0013509:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c001350e:	74 26                	je     c0013536 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0013510:	83 ec 0c             	sub    esp,0xc
c0013513:	53                   	push   ebx
c0013514:	e8 7b d2 fe ff       	call   c0000794 <strlen>
c0013519:	83 c4 10             	add    esp,0x10
c001351c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013521:	eb c7                	jmp    c00134ea <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0013523:	83 ec 0c             	sub    esp,0xc
c0013526:	53                   	push   ebx
c0013527:	e8 68 d2 fe ff       	call   c0000794 <strlen>
c001352c:	83 c4 10             	add    esp,0x10
c001352f:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013534:	74 c7                	je     c00134fd <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0013536:	81 c4 0c 04 00 00    	add    esp,0x40c
c001353c:	5b                   	pop    ebx
c001353d:	5e                   	pop    esi
c001353e:	5f                   	pop    edi
c001353f:	5d                   	pop    ebp
c0013540:	c3                   	ret    
c0013541:	90                   	nop

c0013542 <File::File(char const*, Process*)>:
c0013542:	83 ec 0c             	sub    esp,0xc
c0013545:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013549:	83 ec 08             	sub    esp,0x8
c001354c:	6a 00                	push   0x0
c001354e:	50                   	push   eax
c001354f:	e8 e4 e1 ff ff       	call   c0011738 <UnixFile::UnixFile(int)>
c0013554:	83 c4 10             	add    esp,0x10
c0013557:	ba c4 ab 02 c0       	mov    edx,0xc002abc4
c001355c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013560:	89 10                	mov    DWORD PTR [eax],edx
c0013562:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013566:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001356c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013570:	83 c0 0d             	add    eax,0xd
c0013573:	83 ec 04             	sub    esp,0x4
c0013576:	52                   	push   edx
c0013577:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001357b:	50                   	push   eax
c001357c:	e8 17 fe ff ff       	call   c0013398 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013581:	83 c4 10             	add    esp,0x10
c0013584:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013588:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001358b:	8d 50 bf             	lea    edx,[eax-0x41]
c001358e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013592:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013598:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001359c:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00135a0:	90                   	nop
c00135a1:	83 c4 0c             	add    esp,0xc
c00135a4:	c3                   	ret    
c00135a5:	90                   	nop

c00135a6 <File::open(FileOpenMode)>:
c00135a6:	53                   	push   ebx
c00135a7:	b8 0b 00 00 00       	mov    eax,0xb
c00135ac:	83 ec 08             	sub    esp,0x8
c00135af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00135b3:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00135ba:	80 fa 19             	cmp    dl,0x19
c00135bd:	77 40                	ja     c00135ff <File::open(FileOpenMode)+0x59>
c00135bf:	8b 14 95 e0 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1520]
c00135c6:	85 d2                	test   edx,edx
c00135c8:	74 35                	je     c00135ff <File::open(FileOpenMode)+0x59>
c00135ca:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00135d0:	85 d2                	test   edx,edx
c00135d2:	74 2b                	je     c00135ff <File::open(FileOpenMode)+0x59>
c00135d4:	b8 06 00 00 00       	mov    eax,0x6
c00135d9:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00135dd:	75 20                	jne    c00135ff <File::open(FileOpenMode)+0x59>
c00135df:	8b 02                	mov    eax,DWORD PTR [edx]
c00135e1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00135e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00135eb:	51                   	push   ecx
c00135ec:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00135ef:	51                   	push   ecx
c00135f0:	52                   	push   edx
c00135f1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00135f4:	83 c4 10             	add    esp,0x10
c00135f7:	85 c0                	test   eax,eax
c00135f9:	75 04                	jne    c00135ff <File::open(FileOpenMode)+0x59>
c00135fb:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00135ff:	83 c4 08             	add    esp,0x8
c0013602:	5b                   	pop    ebx
c0013603:	c3                   	ret    

c0013604 <File::close()>:
c0013604:	53                   	push   ebx
c0013605:	b8 0b 00 00 00       	mov    eax,0xb
c001360a:	83 ec 08             	sub    esp,0x8
c001360d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013611:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013618:	80 fa 19             	cmp    dl,0x19
c001361b:	77 41                	ja     c001365e <File::close()+0x5a>
c001361d:	8b 1c 95 e0 ea 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1520]
c0013624:	85 db                	test   ebx,ebx
c0013626:	74 36                	je     c001365e <File::close()+0x5a>
c0013628:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001362f:	74 2d                	je     c001365e <File::close()+0x5a>
c0013631:	b8 05 00 00 00       	mov    eax,0x5
c0013636:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001363a:	74 22                	je     c001365e <File::close()+0x5a>
c001363c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013640:	8b 04 95 e0 ea 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1520]
c0013647:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001364d:	53                   	push   ebx
c001364e:	53                   	push   ebx
c001364f:	8b 10                	mov    edx,DWORD PTR [eax]
c0013651:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013657:	50                   	push   eax
c0013658:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c001365b:	83 c4 10             	add    esp,0x10
c001365e:	83 c4 08             	add    esp,0x8
c0013661:	5b                   	pop    ebx
c0013662:	c3                   	ret    
c0013663:	90                   	nop

c0013664 <File::seek(unsigned long long)>:
c0013664:	56                   	push   esi
c0013665:	53                   	push   ebx
c0013666:	b8 0b 00 00 00       	mov    eax,0xb
c001366b:	51                   	push   ecx
c001366c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013670:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013674:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001367b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001367f:	80 fa 19             	cmp    dl,0x19
c0013682:	77 31                	ja     c00136b5 <File::seek(unsigned long long)+0x51>
c0013684:	8b 14 95 e0 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1520]
c001368b:	85 d2                	test   edx,edx
c001368d:	74 26                	je     c00136b5 <File::seek(unsigned long long)+0x51>
c001368f:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013695:	85 d2                	test   edx,edx
c0013697:	74 1c                	je     c00136b5 <File::seek(unsigned long long)+0x51>
c0013699:	b8 05 00 00 00       	mov    eax,0x5
c001369e:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00136a2:	74 11                	je     c00136b5 <File::seek(unsigned long long)+0x51>
c00136a4:	8b 02                	mov    eax,DWORD PTR [edx]
c00136a6:	53                   	push   ebx
c00136a7:	51                   	push   ecx
c00136a8:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00136ae:	52                   	push   edx
c00136af:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00136b2:	83 c4 10             	add    esp,0x10
c00136b5:	5a                   	pop    edx
c00136b6:	5b                   	pop    ebx
c00136b7:	5e                   	pop    esi
c00136b8:	c3                   	ret    
c00136b9:	90                   	nop

c00136ba <File::tell(unsigned long long*)>:
c00136ba:	83 ec 0c             	sub    esp,0xc
c00136bd:	b8 0b 00 00 00       	mov    eax,0xb
c00136c2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00136c6:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00136cd:	80 fa 19             	cmp    dl,0x19
c00136d0:	77 34                	ja     c0013706 <File::tell(unsigned long long*)+0x4c>
c00136d2:	8b 14 95 e0 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1520]
c00136d9:	85 d2                	test   edx,edx
c00136db:	74 29                	je     c0013706 <File::tell(unsigned long long*)+0x4c>
c00136dd:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00136e3:	85 d2                	test   edx,edx
c00136e5:	74 1f                	je     c0013706 <File::tell(unsigned long long*)+0x4c>
c00136e7:	b8 05 00 00 00       	mov    eax,0x5
c00136ec:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00136f0:	74 14                	je     c0013706 <File::tell(unsigned long long*)+0x4c>
c00136f2:	50                   	push   eax
c00136f3:	8b 02                	mov    eax,DWORD PTR [edx]
c00136f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00136f9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00136ff:	52                   	push   edx
c0013700:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0013703:	83 c4 10             	add    esp,0x10
c0013706:	83 c4 0c             	add    esp,0xc
c0013709:	c3                   	ret    

c001370a <File::rewind()>:
c001370a:	83 ec 10             	sub    esp,0x10
c001370d:	6a 00                	push   0x0
c001370f:	6a 00                	push   0x0
c0013711:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013715:	e8 4a ff ff ff       	call   c0013664 <File::seek(unsigned long long)>
c001371a:	83 c4 1c             	add    esp,0x1c
c001371d:	c3                   	ret    

c001371e <File::unlink()>:
c001371e:	83 ec 0c             	sub    esp,0xc
c0013721:	b8 0b 00 00 00       	mov    eax,0xb
c0013726:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001372a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013731:	80 f9 19             	cmp    cl,0x19
c0013734:	77 2f                	ja     c0013765 <File::unlink()+0x47>
c0013736:	8b 0c 8d e0 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1520]
c001373d:	85 c9                	test   ecx,ecx
c001373f:	74 24                	je     c0013765 <File::unlink()+0x47>
c0013741:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013747:	85 c9                	test   ecx,ecx
c0013749:	74 1a                	je     c0013765 <File::unlink()+0x47>
c001374b:	b8 06 00 00 00       	mov    eax,0x6
c0013750:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013754:	75 0f                	jne    c0013765 <File::unlink()+0x47>
c0013756:	83 c2 0d             	add    edx,0xd
c0013759:	50                   	push   eax
c001375a:	50                   	push   eax
c001375b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001375d:	52                   	push   edx
c001375e:	51                   	push   ecx
c001375f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013762:	83 c4 10             	add    esp,0x10
c0013765:	83 c4 0c             	add    esp,0xc
c0013768:	c3                   	ret    
c0013769:	90                   	nop

c001376a <File::rename(char const*)>:
c001376a:	83 ec 0c             	sub    esp,0xc
c001376d:	b8 0b 00 00 00       	mov    eax,0xb
c0013772:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013776:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001377d:	80 f9 19             	cmp    cl,0x19
c0013780:	77 32                	ja     c00137b4 <File::rename(char const*)+0x4a>
c0013782:	8b 0c 8d e0 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1520]
c0013789:	85 c9                	test   ecx,ecx
c001378b:	74 27                	je     c00137b4 <File::rename(char const*)+0x4a>
c001378d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013793:	85 c9                	test   ecx,ecx
c0013795:	74 1d                	je     c00137b4 <File::rename(char const*)+0x4a>
c0013797:	b8 06 00 00 00       	mov    eax,0x6
c001379c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00137a0:	75 12                	jne    c00137b4 <File::rename(char const*)+0x4a>
c00137a2:	83 c2 0d             	add    edx,0xd
c00137a5:	50                   	push   eax
c00137a6:	8b 01                	mov    eax,DWORD PTR [ecx]
c00137a8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00137ac:	52                   	push   edx
c00137ad:	51                   	push   ecx
c00137ae:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00137b1:	83 c4 10             	add    esp,0x10
c00137b4:	83 c4 0c             	add    esp,0xc
c00137b7:	c3                   	ret    

c00137b8 <File::chfatattr(unsigned char, unsigned char)>:
c00137b8:	57                   	push   edi
c00137b9:	b8 0b 00 00 00       	mov    eax,0xb
c00137be:	56                   	push   esi
c00137bf:	53                   	push   ebx
c00137c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00137c4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00137c8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00137cf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00137d3:	80 f9 19             	cmp    cl,0x19
c00137d6:	77 37                	ja     c001380f <File::chfatattr(unsigned char, unsigned char)+0x57>
c00137d8:	8b 0c 8d e0 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1520]
c00137df:	85 c9                	test   ecx,ecx
c00137e1:	74 2c                	je     c001380f <File::chfatattr(unsigned char, unsigned char)+0x57>
c00137e3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00137e9:	85 c9                	test   ecx,ecx
c00137eb:	74 22                	je     c001380f <File::chfatattr(unsigned char, unsigned char)+0x57>
c00137ed:	b8 06 00 00 00       	mov    eax,0x6
c00137f2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00137f6:	75 17                	jne    c001380f <File::chfatattr(unsigned char, unsigned char)+0x57>
c00137f8:	8b 39                	mov    edi,DWORD PTR [ecx]
c00137fa:	89 f0                	mov    eax,esi
c00137fc:	83 c2 0d             	add    edx,0xd
c00137ff:	0f b6 f0             	movzx  esi,al
c0013802:	0f b6 db             	movzx  ebx,bl
c0013805:	56                   	push   esi
c0013806:	53                   	push   ebx
c0013807:	52                   	push   edx
c0013808:	51                   	push   ecx
c0013809:	ff 57 34             	call   DWORD PTR [edi+0x34]
c001380c:	83 c4 10             	add    esp,0x10
c001380f:	5b                   	pop    ebx
c0013810:	5e                   	pop    esi
c0013811:	5f                   	pop    edi
c0013812:	c3                   	ret    
c0013813:	90                   	nop

c0013814 <File::exists()>:
c0013814:	83 ec 0c             	sub    esp,0xc
c0013817:	31 c0                	xor    eax,eax
c0013819:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001381d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013824:	80 f9 19             	cmp    cl,0x19
c0013827:	77 24                	ja     c001384d <File::exists()+0x39>
c0013829:	8b 0c 8d e0 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1520]
c0013830:	85 c9                	test   ecx,ecx
c0013832:	74 19                	je     c001384d <File::exists()+0x39>
c0013834:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001383a:	85 c9                	test   ecx,ecx
c001383c:	74 0f                	je     c001384d <File::exists()+0x39>
c001383e:	83 c2 0d             	add    edx,0xd
c0013841:	50                   	push   eax
c0013842:	50                   	push   eax
c0013843:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013845:	52                   	push   edx
c0013846:	51                   	push   ecx
c0013847:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001384a:	83 c4 10             	add    esp,0x10
c001384d:	83 c4 0c             	add    esp,0xc
c0013850:	c3                   	ret    
c0013851:	90                   	nop

c0013852 <File::stat(unsigned long long*, bool*)>:
c0013852:	56                   	push   esi
c0013853:	53                   	push   ebx
c0013854:	50                   	push   eax
c0013855:	b8 0b 00 00 00       	mov    eax,0xb
c001385a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001385e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013862:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013869:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001386d:	80 f9 19             	cmp    cl,0x19
c0013870:	77 3d                	ja     c00138af <File::stat(unsigned long long*, bool*)+0x5d>
c0013872:	8b 0c 8d e0 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1520]
c0013879:	85 c9                	test   ecx,ecx
c001387b:	74 32                	je     c00138af <File::stat(unsigned long long*, bool*)+0x5d>
c001387d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013883:	85 c9                	test   ecx,ecx
c0013885:	74 28                	je     c00138af <File::stat(unsigned long long*, bool*)+0x5d>
c0013887:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013889:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001388d:	74 13                	je     c00138a2 <File::stat(unsigned long long*, bool*)+0x50>
c001388f:	83 ec 04             	sub    esp,0x4
c0013892:	56                   	push   esi
c0013893:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0013899:	51                   	push   ecx
c001389a:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c001389d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00138a0:	eb 0a                	jmp    c00138ac <File::stat(unsigned long long*, bool*)+0x5a>
c00138a2:	53                   	push   ebx
c00138a3:	83 c2 0d             	add    edx,0xd
c00138a6:	56                   	push   esi
c00138a7:	52                   	push   edx
c00138a8:	51                   	push   ecx
c00138a9:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00138ac:	83 c4 10             	add    esp,0x10
c00138af:	5a                   	pop    edx
c00138b0:	5b                   	pop    ebx
c00138b1:	5e                   	pop    esi
c00138b2:	c3                   	ret    

c00138b3 <Fs::setcwd(Process*, char*)>:
c00138b3:	55                   	push   ebp
c00138b4:	57                   	push   edi
c00138b5:	56                   	push   esi
c00138b6:	53                   	push   ebx
c00138b7:	81 ec 20 02 00 00    	sub    esp,0x220
c00138bd:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c00138c4:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00138ca:	57                   	push   edi
c00138cb:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00138d2:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00138d6:	56                   	push   esi
c00138d7:	e8 bc fa ff ff       	call   c0013398 <Fs::standardiseFiles(char*, char const*, char const*)>
c00138dc:	89 34 24             	mov    DWORD PTR [esp],esi
c00138df:	e8 b0 ce fe ff       	call   c0000794 <strlen>
c00138e4:	83 c4 10             	add    esp,0x10
c00138e7:	83 f8 02             	cmp    eax,0x2
c00138ea:	77 17                	ja     c0013903 <Fs::setcwd(Process*, char*)+0x50>
c00138ec:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c00138f1:	83 e8 41             	sub    eax,0x41
c00138f4:	83 f8 19             	cmp    eax,0x19
c00138f7:	76 24                	jbe    c001391d <Fs::setcwd(Process*, char*)+0x6a>
c00138f9:	b8 03 00 00 00       	mov    eax,0x3
c00138fe:	e9 e0 00 00 00       	jmp    c00139e3 <Fs::setcwd(Process*, char*)+0x130>
c0013903:	83 ec 0c             	sub    esp,0xc
c0013906:	56                   	push   esi
c0013907:	e8 88 ce fe ff       	call   c0000794 <strlen>
c001390c:	83 c4 10             	add    esp,0x10
c001390f:	83 f8 03             	cmp    eax,0x3
c0013912:	75 34                	jne    c0013948 <Fs::setcwd(Process*, char*)+0x95>
c0013914:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0013919:	75 2d                	jne    c0013948 <Fs::setcwd(Process*, char*)+0x95>
c001391b:	eb cf                	jmp    c00138ec <Fs::setcwd(Process*, char*)+0x39>
c001391d:	8b 14 85 e0 ea 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1520]
c0013924:	b8 05 00 00 00       	mov    eax,0x5
c0013929:	85 d2                	test   edx,edx
c001392b:	0f 84 b2 00 00 00    	je     c00139e3 <Fs::setcwd(Process*, char*)+0x130>
c0013931:	b8 06 00 00 00       	mov    eax,0x6
c0013936:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c001393d:	0f 85 92 00 00 00    	jne    c00139d5 <Fs::setcwd(Process*, char*)+0x122>
c0013943:	e9 9b 00 00 00       	jmp    c00139e3 <Fs::setcwd(Process*, char*)+0x130>
c0013948:	83 ec 0c             	sub    esp,0xc
c001394b:	68 14 01 00 00       	push   0x114
c0013950:	e8 ee be ff ff       	call   c000f843 <malloc>
c0013955:	83 c4 0c             	add    esp,0xc
c0013958:	89 c3                	mov    ebx,eax
c001395a:	55                   	push   ebp
c001395b:	56                   	push   esi
c001395c:	50                   	push   eax
c001395d:	e8 e0 fb ff ff       	call   c0013542 <File::File(char const*, Process*)>
c0013962:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013967:	83 c4 0c             	add    esp,0xc
c001396a:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001396e:	50                   	push   eax
c001396f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013973:	50                   	push   eax
c0013974:	53                   	push   ebx
c0013975:	e8 d8 fe ff ff       	call   c0013852 <File::stat(unsigned long long*, bool*)>
c001397a:	83 c4 10             	add    esp,0x10
c001397d:	83 f8 02             	cmp    eax,0x2
c0013980:	74 04                	je     c0013986 <Fs::setcwd(Process*, char*)+0xd3>
c0013982:	85 c0                	test   eax,eax
c0013984:	74 1c                	je     c00139a2 <Fs::setcwd(Process*, char*)+0xef>
c0013986:	b8 01 00 00 00       	mov    eax,0x1
c001398b:	85 db                	test   ebx,ebx
c001398d:	74 54                	je     c00139e3 <Fs::setcwd(Process*, char*)+0x130>
c001398f:	83 ec 0c             	sub    esp,0xc
c0013992:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013994:	53                   	push   ebx
c0013995:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013998:	83 c4 10             	add    esp,0x10
c001399b:	b8 01 00 00 00       	mov    eax,0x1
c00139a0:	eb 41                	jmp    c00139e3 <Fs::setcwd(Process*, char*)+0x130>
c00139a2:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00139a7:	75 1c                	jne    c00139c5 <Fs::setcwd(Process*, char*)+0x112>
c00139a9:	b8 02 00 00 00       	mov    eax,0x2
c00139ae:	85 db                	test   ebx,ebx
c00139b0:	74 31                	je     c00139e3 <Fs::setcwd(Process*, char*)+0x130>
c00139b2:	83 ec 0c             	sub    esp,0xc
c00139b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00139b7:	53                   	push   ebx
c00139b8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00139bb:	83 c4 10             	add    esp,0x10
c00139be:	b8 02 00 00 00       	mov    eax,0x2
c00139c3:	eb 1e                	jmp    c00139e3 <Fs::setcwd(Process*, char*)+0x130>
c00139c5:	85 db                	test   ebx,ebx
c00139c7:	74 0c                	je     c00139d5 <Fs::setcwd(Process*, char*)+0x122>
c00139c9:	83 ec 0c             	sub    esp,0xc
c00139cc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00139ce:	53                   	push   ebx
c00139cf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00139d2:	83 c4 10             	add    esp,0x10
c00139d5:	50                   	push   eax
c00139d6:	50                   	push   eax
c00139d7:	56                   	push   esi
c00139d8:	57                   	push   edi
c00139d9:	e8 56 ce fe ff       	call   c0000834 <strcpy>
c00139de:	83 c4 10             	add    esp,0x10
c00139e1:	31 c0                	xor    eax,eax
c00139e3:	81 c4 1c 02 00 00    	add    esp,0x21c
c00139e9:	5b                   	pop    ebx
c00139ea:	5e                   	pop    esi
c00139eb:	5f                   	pop    edi
c00139ec:	5d                   	pop    ebp
c00139ed:	c3                   	ret    

c00139ee <Directory::Directory(char const*, Process*)>:
c00139ee:	83 ec 0c             	sub    esp,0xc
c00139f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139f5:	83 ec 08             	sub    esp,0x8
c00139f8:	6a 00                	push   0x0
c00139fa:	50                   	push   eax
c00139fb:	e8 38 dd ff ff       	call   c0011738 <UnixFile::UnixFile(int)>
c0013a00:	83 c4 10             	add    esp,0x10
c0013a03:	ba e0 ab 02 c0       	mov    edx,0xc002abe0
c0013a08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a0c:	89 10                	mov    DWORD PTR [eax],edx
c0013a0e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013a12:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a1c:	83 c0 0d             	add    eax,0xd
c0013a1f:	83 ec 04             	sub    esp,0x4
c0013a22:	52                   	push   edx
c0013a23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a27:	50                   	push   eax
c0013a28:	e8 6b f9 ff ff       	call   c0013398 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013a2d:	83 c4 10             	add    esp,0x10
c0013a30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a34:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013a37:	8d 50 bf             	lea    edx,[eax-0x41]
c0013a3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a3e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013a44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a48:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013a4c:	90                   	nop
c0013a4d:	83 c4 0c             	add    esp,0xc
c0013a50:	c3                   	ret    
c0013a51:	90                   	nop

c0013a52 <Directory::open()>:
c0013a52:	53                   	push   ebx
c0013a53:	b8 0b 00 00 00       	mov    eax,0xb
c0013a58:	83 ec 08             	sub    esp,0x8
c0013a5b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013a5f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013a66:	80 fa 19             	cmp    dl,0x19
c0013a69:	77 3d                	ja     c0013aa8 <Directory::open()+0x56>
c0013a6b:	8b 14 95 e0 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1520]
c0013a72:	85 d2                	test   edx,edx
c0013a74:	74 32                	je     c0013aa8 <Directory::open()+0x56>
c0013a76:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013a7c:	85 d2                	test   edx,edx
c0013a7e:	74 28                	je     c0013aa8 <Directory::open()+0x56>
c0013a80:	b8 06 00 00 00       	mov    eax,0x6
c0013a85:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013a89:	75 1d                	jne    c0013aa8 <Directory::open()+0x56>
c0013a8b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013a91:	50                   	push   eax
c0013a92:	8b 02                	mov    eax,DWORD PTR [edx]
c0013a94:	51                   	push   ecx
c0013a95:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013a98:	51                   	push   ecx
c0013a99:	52                   	push   edx
c0013a9a:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013a9d:	83 c4 10             	add    esp,0x10
c0013aa0:	85 c0                	test   eax,eax
c0013aa2:	75 04                	jne    c0013aa8 <Directory::open()+0x56>
c0013aa4:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013aa8:	83 c4 08             	add    esp,0x8
c0013aab:	5b                   	pop    ebx
c0013aac:	c3                   	ret    
c0013aad:	90                   	nop

c0013aae <Directory::close()>:
c0013aae:	53                   	push   ebx
c0013aaf:	b8 0b 00 00 00       	mov    eax,0xb
c0013ab4:	83 ec 08             	sub    esp,0x8
c0013ab7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013abb:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013ac2:	80 fa 19             	cmp    dl,0x19
c0013ac5:	77 41                	ja     c0013b08 <Directory::close()+0x5a>
c0013ac7:	8b 1c 95 e0 ea 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1520]
c0013ace:	85 db                	test   ebx,ebx
c0013ad0:	74 36                	je     c0013b08 <Directory::close()+0x5a>
c0013ad2:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013ad9:	74 2d                	je     c0013b08 <Directory::close()+0x5a>
c0013adb:	b8 05 00 00 00       	mov    eax,0x5
c0013ae0:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013ae4:	74 22                	je     c0013b08 <Directory::close()+0x5a>
c0013ae6:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013aea:	8b 04 95 e0 ea 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1520]
c0013af1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013af7:	53                   	push   ebx
c0013af8:	53                   	push   ebx
c0013af9:	8b 10                	mov    edx,DWORD PTR [eax]
c0013afb:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013b01:	50                   	push   eax
c0013b02:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013b05:	83 c4 10             	add    esp,0x10
c0013b08:	83 c4 08             	add    esp,0x8
c0013b0b:	5b                   	pop    ebx
c0013b0c:	c3                   	ret    
c0013b0d:	90                   	nop

c0013b0e <Directory::unlink()>:
c0013b0e:	83 ec 0c             	sub    esp,0xc
c0013b11:	b8 0b 00 00 00       	mov    eax,0xb
c0013b16:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b1a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013b21:	80 f9 19             	cmp    cl,0x19
c0013b24:	77 2f                	ja     c0013b55 <Directory::unlink()+0x47>
c0013b26:	8b 0c 8d e0 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1520]
c0013b2d:	85 c9                	test   ecx,ecx
c0013b2f:	74 24                	je     c0013b55 <Directory::unlink()+0x47>
c0013b31:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013b37:	85 c9                	test   ecx,ecx
c0013b39:	74 1a                	je     c0013b55 <Directory::unlink()+0x47>
c0013b3b:	b8 06 00 00 00       	mov    eax,0x6
c0013b40:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013b44:	75 0f                	jne    c0013b55 <Directory::unlink()+0x47>
c0013b46:	83 c2 0d             	add    edx,0xd
c0013b49:	50                   	push   eax
c0013b4a:	50                   	push   eax
c0013b4b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b4d:	52                   	push   edx
c0013b4e:	51                   	push   ecx
c0013b4f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013b52:	83 c4 10             	add    esp,0x10
c0013b55:	83 c4 0c             	add    esp,0xc
c0013b58:	c3                   	ret    
c0013b59:	90                   	nop

c0013b5a <Directory::rename(char const*)>:
c0013b5a:	83 ec 0c             	sub    esp,0xc
c0013b5d:	b8 0b 00 00 00       	mov    eax,0xb
c0013b62:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b66:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013b6d:	80 f9 19             	cmp    cl,0x19
c0013b70:	77 32                	ja     c0013ba4 <Directory::rename(char const*)+0x4a>
c0013b72:	8b 0c 8d e0 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1520]
c0013b79:	85 c9                	test   ecx,ecx
c0013b7b:	74 27                	je     c0013ba4 <Directory::rename(char const*)+0x4a>
c0013b7d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013b83:	85 c9                	test   ecx,ecx
c0013b85:	74 1d                	je     c0013ba4 <Directory::rename(char const*)+0x4a>
c0013b87:	b8 06 00 00 00       	mov    eax,0x6
c0013b8c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013b90:	75 12                	jne    c0013ba4 <Directory::rename(char const*)+0x4a>
c0013b92:	83 c2 0d             	add    edx,0xd
c0013b95:	50                   	push   eax
c0013b96:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b98:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013b9c:	52                   	push   edx
c0013b9d:	51                   	push   ecx
c0013b9e:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013ba1:	83 c4 10             	add    esp,0x10
c0013ba4:	83 c4 0c             	add    esp,0xc
c0013ba7:	c3                   	ret    

c0013ba8 <Directory::exists()>:
c0013ba8:	83 ec 0c             	sub    esp,0xc
c0013bab:	31 c0                	xor    eax,eax
c0013bad:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013bb1:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013bb8:	80 f9 19             	cmp    cl,0x19
c0013bbb:	77 24                	ja     c0013be1 <Directory::exists()+0x39>
c0013bbd:	8b 0c 8d e0 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1520]
c0013bc4:	85 c9                	test   ecx,ecx
c0013bc6:	74 19                	je     c0013be1 <Directory::exists()+0x39>
c0013bc8:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013bce:	85 c9                	test   ecx,ecx
c0013bd0:	74 0f                	je     c0013be1 <Directory::exists()+0x39>
c0013bd2:	83 c2 0d             	add    edx,0xd
c0013bd5:	50                   	push   eax
c0013bd6:	50                   	push   eax
c0013bd7:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013bd9:	52                   	push   edx
c0013bda:	51                   	push   ecx
c0013bdb:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013bde:	83 c4 10             	add    esp,0x10
c0013be1:	83 c4 0c             	add    esp,0xc
c0013be4:	c3                   	ret    
c0013be5:	90                   	nop

c0013be6 <Directory::read(dirent*)>:
c0013be6:	83 ec 1c             	sub    esp,0x1c
c0013be9:	b8 0b 00 00 00       	mov    eax,0xb
c0013bee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013bf2:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013bf9:	80 fa 19             	cmp    dl,0x19
c0013bfc:	77 30                	ja     c0013c2e <Directory::read(dirent*)+0x48>
c0013bfe:	8b 14 95 e0 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1520]
c0013c05:	85 d2                	test   edx,edx
c0013c07:	74 25                	je     c0013c2e <Directory::read(dirent*)+0x48>
c0013c09:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013c10:	74 1c                	je     c0013c2e <Directory::read(dirent*)+0x48>
c0013c12:	83 ec 0c             	sub    esp,0xc
c0013c15:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013c17:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013c1b:	52                   	push   edx
c0013c1c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013c20:	6a 00                	push   0x0
c0013c22:	68 10 01 00 00       	push   0x110
c0013c27:	51                   	push   ecx
c0013c28:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013c2b:	83 c4 20             	add    esp,0x20
c0013c2e:	83 c4 1c             	add    esp,0x1c
c0013c31:	c3                   	ret    

c0013c32 <Directory::create()>:
c0013c32:	83 ec 0c             	sub    esp,0xc
c0013c35:	b8 0b 00 00 00       	mov    eax,0xb
c0013c3a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013c3e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013c45:	80 f9 19             	cmp    cl,0x19
c0013c48:	77 2f                	ja     c0013c79 <Directory::create()+0x47>
c0013c4a:	8b 0c 8d e0 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1520]
c0013c51:	85 c9                	test   ecx,ecx
c0013c53:	74 24                	je     c0013c79 <Directory::create()+0x47>
c0013c55:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013c5b:	85 c9                	test   ecx,ecx
c0013c5d:	74 1a                	je     c0013c79 <Directory::create()+0x47>
c0013c5f:	b8 06 00 00 00       	mov    eax,0x6
c0013c64:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013c68:	75 0f                	jne    c0013c79 <Directory::create()+0x47>
c0013c6a:	83 c2 0d             	add    edx,0xd
c0013c6d:	50                   	push   eax
c0013c6e:	50                   	push   eax
c0013c6f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013c71:	52                   	push   edx
c0013c72:	51                   	push   ecx
c0013c73:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013c76:	83 c4 10             	add    esp,0x10
c0013c79:	83 c4 0c             	add    esp,0xc
c0013c7c:	c3                   	ret    
c0013c7d:	90                   	nop

c0013c7e <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013c7e:	b8 0a 00 00 00       	mov    eax,0xa
c0013c83:	c3                   	ret    

c0013c84 <Bus::Bus(char const*)>:
c0013c84:	83 ec 0c             	sub    esp,0xc
c0013c87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c8b:	83 ec 08             	sub    esp,0x8
c0013c8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c92:	50                   	push   eax
c0013c93:	e8 68 09 00 00       	call   c0014600 <Device::Device(char const*)>
c0013c98:	83 c4 10             	add    esp,0x10
c0013c9b:	ba fc ab 02 c0       	mov    edx,0xc002abfc
c0013ca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ca4:	89 10                	mov    DWORD PTR [eax],edx
c0013ca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013caa:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013cb4:	90                   	nop
c0013cb5:	83 c4 0c             	add    esp,0xc
c0013cb8:	c3                   	ret    
c0013cb9:	90                   	nop

c0013cba <Bus::~Bus()>:
c0013cba:	83 ec 0c             	sub    esp,0xc
c0013cbd:	ba fc ab 02 c0       	mov    edx,0xc002abfc
c0013cc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cc6:	89 10                	mov    DWORD PTR [eax],edx
c0013cc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ccc:	83 ec 0c             	sub    esp,0xc
c0013ccf:	50                   	push   eax
c0013cd0:	e8 0d 06 00 00       	call   c00142e2 <Device::~Device()>
c0013cd5:	83 c4 10             	add    esp,0x10
c0013cd8:	90                   	nop
c0013cd9:	83 c4 0c             	add    esp,0xc
c0013cdc:	c3                   	ret    
c0013cdd:	90                   	nop

c0013cde <Bus::~Bus()>:
c0013cde:	83 ec 0c             	sub    esp,0xc
c0013ce1:	83 ec 0c             	sub    esp,0xc
c0013ce4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ce8:	e8 cd ff ff ff       	call   c0013cba <Bus::~Bus()>
c0013ced:	83 c4 10             	add    esp,0x10
c0013cf0:	83 ec 08             	sub    esp,0x8
c0013cf3:	68 58 01 00 00       	push   0x158
c0013cf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cfc:	e8 09 f2 ff ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c0013d01:	83 c4 10             	add    esp,0x10
c0013d04:	83 c4 0c             	add    esp,0xc
c0013d07:	c3                   	ret    

c0013d08 <Buzzer::Buzzer(char const*)>:
c0013d08:	83 ec 0c             	sub    esp,0xc
c0013d0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d0f:	83 ec 08             	sub    esp,0x8
c0013d12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d16:	50                   	push   eax
c0013d17:	e8 e4 08 00 00       	call   c0014600 <Device::Device(char const*)>
c0013d1c:	83 c4 10             	add    esp,0x10
c0013d1f:	ba 28 ac 02 c0       	mov    edx,0xc002ac28
c0013d24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d28:	89 10                	mov    DWORD PTR [eax],edx
c0013d2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d2e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013d38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d3c:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013d46:	90                   	nop
c0013d47:	83 c4 0c             	add    esp,0xc
c0013d4a:	c3                   	ret    
c0013d4b:	90                   	nop

c0013d4c <Buzzer::~Buzzer()>:
c0013d4c:	83 ec 0c             	sub    esp,0xc
c0013d4f:	ba 28 ac 02 c0       	mov    edx,0xc002ac28
c0013d54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d58:	89 10                	mov    DWORD PTR [eax],edx
c0013d5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d5e:	83 ec 0c             	sub    esp,0xc
c0013d61:	50                   	push   eax
c0013d62:	e8 7b 05 00 00       	call   c00142e2 <Device::~Device()>
c0013d67:	83 c4 10             	add    esp,0x10
c0013d6a:	90                   	nop
c0013d6b:	83 c4 0c             	add    esp,0xc
c0013d6e:	c3                   	ret    
c0013d6f:	90                   	nop

c0013d70 <Buzzer::~Buzzer()>:
c0013d70:	83 ec 0c             	sub    esp,0xc
c0013d73:	83 ec 0c             	sub    esp,0xc
c0013d76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d7a:	e8 cd ff ff ff       	call   c0013d4c <Buzzer::~Buzzer()>
c0013d7f:	83 c4 10             	add    esp,0x10
c0013d82:	83 ec 08             	sub    esp,0x8
c0013d85:	68 5c 01 00 00       	push   0x15c
c0013d8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d8e:	e8 77 f1 ff ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c0013d93:	83 c4 10             	add    esp,0x10
c0013d96:	83 c4 0c             	add    esp,0xc
c0013d99:	c3                   	ret    

c0013d9a <Buzzer::stop()>:
c0013d9a:	83 ec 14             	sub    esp,0x14
c0013d9d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013da1:	8b 10                	mov    edx,DWORD PTR [eax]
c0013da3:	6a 00                	push   0x0
c0013da5:	50                   	push   eax
c0013da6:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013da9:	83 c4 1c             	add    esp,0x1c
c0013dac:	c3                   	ret    

c0013dad <beepThread(void*)>:
c0013dad:	53                   	push   ebx
c0013dae:	83 ec 08             	sub    esp,0x8
c0013db1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013db5:	e8 cc a0 00 00       	call   c001de86 <unlockScheduler()>
c0013dba:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013dbf:	52                   	push   edx
c0013dc0:	52                   	push   edx
c0013dc1:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013dc7:	52                   	push   edx
c0013dc8:	50                   	push   eax
c0013dc9:	e8 06 a6 00 00       	call   c001e3d4 <nanoSleep(unsigned long long)>
c0013dce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013dd1:	e8 c4 ff ff ff       	call   c0013d9a <Buzzer::stop()>
c0013dd6:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013dde:	83 c4 18             	add    esp,0x18
c0013de1:	5b                   	pop    ebx
c0013de2:	e9 33 a5 00 00       	jmp    c001e31a <blockTask(TaskState)>
c0013de7:	90                   	nop

c0013de8 <Buzzer::beep(int, int, bool)>:
c0013de8:	57                   	push   edi
c0013de9:	56                   	push   esi
c0013dea:	53                   	push   ebx
c0013deb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013def:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013df3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013df7:	52                   	push   edx
c0013df8:	52                   	push   edx
c0013df9:	8b 06                	mov    eax,DWORD PTR [esi]
c0013dfb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013dff:	56                   	push   esi
c0013e00:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013e03:	83 c4 10             	add    esp,0x10
c0013e06:	89 f8                	mov    eax,edi
c0013e08:	84 c0                	test   al,al
c0013e0a:	74 1f                	je     c0013e2b <Buzzer::beep(int, int, bool)+0x43>
c0013e0c:	50                   	push   eax
c0013e0d:	50                   	push   eax
c0013e0e:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013e14:	99                   	cdq    
c0013e15:	52                   	push   edx
c0013e16:	50                   	push   eax
c0013e17:	e8 b8 a5 00 00       	call   c001e3d4 <nanoSleep(unsigned long long)>
c0013e1c:	83 c4 10             	add    esp,0x10
c0013e1f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013e23:	5b                   	pop    ebx
c0013e24:	5e                   	pop    esi
c0013e25:	5f                   	pop    edi
c0013e26:	e9 6f ff ff ff       	jmp    c0013d9a <Buzzer::stop()>
c0013e2b:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013e31:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c0013e36:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013e3e:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013e42:	c7 44 24 14 ad 3d 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013dad
c0013e4a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013e4e:	5b                   	pop    ebx
c0013e4f:	5e                   	pop    esi
c0013e50:	5f                   	pop    edi
c0013e51:	e9 60 a1 00 00       	jmp    c001dfb6 <Process::createThread(void (*)(void*), void*, int)>

c0013e56 <User::loadClockSettings(int)>:
c0013e56:	53                   	push   ebx
c0013e57:	83 ec 14             	sub    esp,0x14
c0013e5a:	68 14 01 00 00       	push   0x114
c0013e5f:	e8 df b9 ff ff       	call   c000f843 <malloc>
c0013e64:	83 c4 0c             	add    esp,0xc
c0013e67:	89 c3                	mov    ebx,eax
c0013e69:	ff 35 34 1a 03 c0    	push   DWORD PTR ds:0xc0031a34
c0013e6f:	68 50 ac 02 c0       	push   0xc002ac50
c0013e74:	50                   	push   eax
c0013e75:	e8 c8 f6 ff ff       	call   c0013542 <File::File(char const*, Process*)>
c0013e7a:	58                   	pop    eax
c0013e7b:	5a                   	pop    edx
c0013e7c:	6a 01                	push   0x1
c0013e7e:	53                   	push   ebx
c0013e7f:	e8 22 f7 ff ff       	call   c00135a6 <File::open(FileOpenMode)>
c0013e84:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e87:	e8 78 f7 ff ff       	call   c0013604 <File::close()>
c0013e8c:	83 c4 10             	add    esp,0x10
c0013e8f:	85 db                	test   ebx,ebx
c0013e91:	74 0f                	je     c0013ea2 <User::loadClockSettings(int)+0x4c>
c0013e93:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e95:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013e99:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013e9c:	83 c4 08             	add    esp,0x8
c0013e9f:	5b                   	pop    ebx
c0013ea0:	ff e0                	jmp    eax
c0013ea2:	83 c4 08             	add    esp,0x8
c0013ea5:	5b                   	pop    ebx
c0013ea6:	c3                   	ret    
c0013ea7:	90                   	nop

c0013ea8 <Clock::Clock(char const*)>:
c0013ea8:	83 ec 0c             	sub    esp,0xc
c0013eab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013eaf:	83 ec 08             	sub    esp,0x8
c0013eb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013eb6:	50                   	push   eax
c0013eb7:	e8 44 07 00 00       	call   c0014600 <Device::Device(char const*)>
c0013ebc:	83 c4 10             	add    esp,0x10
c0013ebf:	ba 78 ac 02 c0       	mov    edx,0xc002ac78
c0013ec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ec8:	89 10                	mov    DWORD PTR [eax],edx
c0013eca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ece:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013ed8:	90                   	nop
c0013ed9:	83 c4 0c             	add    esp,0xc
c0013edc:	c3                   	ret    
c0013edd:	90                   	nop

c0013ede <Clock::~Clock()>:
c0013ede:	83 ec 0c             	sub    esp,0xc
c0013ee1:	ba 78 ac 02 c0       	mov    edx,0xc002ac78
c0013ee6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013eea:	89 10                	mov    DWORD PTR [eax],edx
c0013eec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ef0:	83 ec 0c             	sub    esp,0xc
c0013ef3:	50                   	push   eax
c0013ef4:	e8 e9 03 00 00       	call   c00142e2 <Device::~Device()>
c0013ef9:	83 c4 10             	add    esp,0x10
c0013efc:	90                   	nop
c0013efd:	83 c4 0c             	add    esp,0xc
c0013f00:	c3                   	ret    
c0013f01:	90                   	nop

c0013f02 <Clock::~Clock()>:
c0013f02:	83 ec 0c             	sub    esp,0xc
c0013f05:	83 ec 0c             	sub    esp,0xc
c0013f08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f0c:	e8 cd ff ff ff       	call   c0013ede <Clock::~Clock()>
c0013f11:	83 c4 10             	add    esp,0x10
c0013f14:	83 ec 08             	sub    esp,0x8
c0013f17:	68 58 01 00 00       	push   0x158
c0013f1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f20:	e8 e5 ef ff ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c0013f25:	83 c4 10             	add    esp,0x10
c0013f28:	83 c4 0c             	add    esp,0xc
c0013f2b:	c3                   	ret    

c0013f2c <Clock::timeInSecondsLocal()>:
c0013f2c:	53                   	push   ebx
c0013f2d:	83 ec 14             	sub    esp,0x14
c0013f30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013f34:	8b 10                	mov    edx,DWORD PTR [eax]
c0013f36:	50                   	push   eax
c0013f37:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013f3a:	0f b6 0d 58 e6 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e658
c0013f41:	03 0d 5c e6 02 c0    	add    ecx,DWORD PTR ds:0xc002e65c
c0013f47:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013f4d:	89 cb                	mov    ebx,ecx
c0013f4f:	c1 fb 1f             	sar    ebx,0x1f
c0013f52:	01 c8                	add    eax,ecx
c0013f54:	11 da                	adc    edx,ebx
c0013f56:	83 c4 10             	add    esp,0x10
c0013f59:	31 c9                	xor    ecx,ecx
c0013f5b:	80 3d 59 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e659,0x0
c0013f62:	74 05                	je     c0013f69 <Clock::timeInSecondsLocal()+0x3d>
c0013f64:	b9 08 07 00 00       	mov    ecx,0x708
c0013f69:	31 db                	xor    ebx,ebx
c0013f6b:	01 c8                	add    eax,ecx
c0013f6d:	11 da                	adc    edx,ebx
c0013f6f:	83 c4 08             	add    esp,0x8
c0013f72:	5b                   	pop    ebx
c0013f73:	c3                   	ret    

c0013f74 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013f74:	57                   	push   edi
c0013f75:	56                   	push   esi
c0013f76:	53                   	push   ebx
c0013f77:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013f7b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013f7f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013f81:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013f85:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013f88:	0f b6 05 58 e6 02 c0 	movzx  eax,BYTE PTR ds:0xc002e658
c0013f8f:	03 05 5c e6 02 c0    	add    eax,DWORD PTR ds:0xc002e65c
c0013f95:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013f9b:	99                   	cdq    
c0013f9c:	29 c6                	sub    esi,eax
c0013f9e:	19 d7                	sbb    edi,edx
c0013fa0:	89 f0                	mov    eax,esi
c0013fa2:	89 fa                	mov    edx,edi
c0013fa4:	31 f6                	xor    esi,esi
c0013fa6:	80 3d 59 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e659,0x0
c0013fad:	74 05                	je     c0013fb4 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013faf:	be 08 07 00 00       	mov    esi,0x708
c0013fb4:	31 ff                	xor    edi,edi
c0013fb6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013fba:	29 f0                	sub    eax,esi
c0013fbc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013fc0:	19 fa                	sbb    edx,edi
c0013fc2:	89 d8                	mov    eax,ebx
c0013fc4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013fc8:	5b                   	pop    ebx
c0013fc9:	5e                   	pop    esi
c0013fca:	5f                   	pop    edi
c0013fcb:	ff e0                	jmp    eax

c0013fcd <datetimeToSeconds(datetime_t)>:
c0013fcd:	55                   	push   ebp
c0013fce:	57                   	push   edi
c0013fcf:	56                   	push   esi
c0013fd0:	53                   	push   ebx
c0013fd1:	83 ec 14             	sub    esp,0x14
c0013fd4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013fd8:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013fdc:	89 d3                	mov    ebx,edx
c0013fde:	0f b6 c6             	movzx  eax,dh
c0013fe1:	c1 eb 10             	shr    ebx,0x10
c0013fe4:	48                   	dec    eax
c0013fe5:	66 81 eb 6c 07       	sub    bx,0x76c
c0013fea:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013fee:	0f b6 f5             	movzx  esi,ch
c0013ff1:	89 cf                	mov    edi,ecx
c0013ff3:	6b f6 3c             	imul   esi,esi,0x3c
c0013ff6:	c1 ef 10             	shr    edi,0x10
c0013ff9:	0f b6 c9             	movzx  ecx,cl
c0013ffc:	89 f8                	mov    eax,edi
c0013ffe:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0014004:	0f b6 f8             	movzx  edi,al
c0014007:	0f b6 d2             	movzx  edx,dl
c001400a:	01 fe                	add    esi,edi
c001400c:	01 f1                	add    ecx,esi
c001400e:	0f b7 f3             	movzx  esi,bx
c0014011:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0014015:	c1 f9 1f             	sar    ecx,0x1f
c0014018:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c001401d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014021:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0014026:	8b 0c 8d c0 ac 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5340]
c001402d:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0014031:	76 29                	jbe    c001405c <datetimeToSeconds(datetime_t)+0x8f>
c0014033:	f6 c3 03             	test   bl,0x3
c0014036:	75 24                	jne    c001405c <datetimeToSeconds(datetime_t)+0x8f>
c0014038:	31 d2                	xor    edx,edx
c001403a:	bf 64 00 00 00       	mov    edi,0x64
c001403f:	89 d8                	mov    eax,ebx
c0014041:	66 f7 f7             	div    di
c0014044:	66 85 d2             	test   dx,dx
c0014047:	75 12                	jne    c001405b <datetimeToSeconds(datetime_t)+0x8e>
c0014049:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001404f:	bf 90 01 00 00       	mov    edi,0x190
c0014054:	99                   	cdq    
c0014055:	f7 ff                	idiv   edi
c0014057:	85 d2                	test   edx,edx
c0014059:	75 01                	jne    c001405c <datetimeToSeconds(datetime_t)+0x8f>
c001405b:	41                   	inc    ecx
c001405c:	66 83 fb 46          	cmp    bx,0x46
c0014060:	76 45                	jbe    c00140a7 <datetimeToSeconds(datetime_t)+0xda>
c0014062:	bb 46 00 00 00       	mov    ebx,0x46
c0014067:	bf 64 00 00 00       	mov    edi,0x64
c001406c:	bd 90 01 00 00       	mov    ebp,0x190
c0014071:	b8 6d 01 00 00       	mov    eax,0x16d
c0014076:	f6 c3 03             	test   bl,0x3
c0014079:	75 23                	jne    c001409e <datetimeToSeconds(datetime_t)+0xd1>
c001407b:	89 d8                	mov    eax,ebx
c001407d:	99                   	cdq    
c001407e:	f7 ff                	idiv   edi
c0014080:	b8 6e 01 00 00       	mov    eax,0x16e
c0014085:	85 d2                	test   edx,edx
c0014087:	75 15                	jne    c001409e <datetimeToSeconds(datetime_t)+0xd1>
c0014089:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c001408f:	99                   	cdq    
c0014090:	f7 fd                	idiv   ebp
c0014092:	83 fa 01             	cmp    edx,0x1
c0014095:	19 c0                	sbb    eax,eax
c0014097:	f7 d0                	not    eax
c0014099:	05 6e 01 00 00       	add    eax,0x16e
c001409e:	01 c1                	add    ecx,eax
c00140a0:	43                   	inc    ebx
c00140a1:	39 f3                	cmp    ebx,esi
c00140a3:	7c cc                	jl     c0014071 <datetimeToSeconds(datetime_t)+0xa4>
c00140a5:	eb 35                	jmp    c00140dc <datetimeToSeconds(datetime_t)+0x10f>
c00140a7:	74 33                	je     c00140dc <datetimeToSeconds(datetime_t)+0x10f>
c00140a9:	b8 45 00 00 00       	mov    eax,0x45
c00140ae:	89 c2                	mov    edx,eax
c00140b0:	83 e2 03             	and    edx,0x3
c00140b3:	39 f0                	cmp    eax,esi
c00140b5:	7e 0f                	jle    c00140c6 <datetimeToSeconds(datetime_t)+0xf9>
c00140b7:	83 fa 01             	cmp    edx,0x1
c00140ba:	19 d2                	sbb    edx,edx
c00140bc:	48                   	dec    eax
c00140bd:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00140c4:	eb e8                	jmp    c00140ae <datetimeToSeconds(datetime_t)+0xe1>
c00140c6:	b8 6d 01 00 00       	mov    eax,0x16d
c00140cb:	85 d2                	test   edx,edx
c00140cd:	75 0b                	jne    c00140da <datetimeToSeconds(datetime_t)+0x10d>
c00140cf:	66 83 fb 01          	cmp    bx,0x1
c00140d3:	19 c0                	sbb    eax,eax
c00140d5:	05 6e 01 00 00       	add    eax,0x16e
c00140da:	29 c1                	sub    ecx,eax
c00140dc:	b8 80 51 01 00       	mov    eax,0x15180
c00140e1:	f7 e9                	imul   ecx
c00140e3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00140e7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00140eb:	83 c4 14             	add    esp,0x14
c00140ee:	5b                   	pop    ebx
c00140ef:	5e                   	pop    esi
c00140f0:	5f                   	pop    edi
c00140f1:	5d                   	pop    ebp
c00140f2:	c3                   	ret    
c00140f3:	90                   	nop

c00140f4 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00140f4:	57                   	push   edi
c00140f5:	56                   	push   esi
c00140f6:	53                   	push   ebx
c00140f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00140fb:	8b 06                	mov    eax,DWORD PTR [esi]
c00140fd:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0014100:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014104:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014108:	e8 c0 fe ff ff       	call   c0013fcd <datetimeToSeconds(datetime_t)>
c001410d:	59                   	pop    ecx
c001410e:	0f b6 0d 58 e6 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e658
c0014115:	5b                   	pop    ebx
c0014116:	03 0d 5c e6 02 c0    	add    ecx,DWORD PTR ds:0xc002e65c
c001411c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0014122:	89 cb                	mov    ebx,ecx
c0014124:	c1 fb 1f             	sar    ebx,0x1f
c0014127:	29 c8                	sub    eax,ecx
c0014129:	19 da                	sbb    edx,ebx
c001412b:	31 c9                	xor    ecx,ecx
c001412d:	80 3d 59 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e659,0x0
c0014134:	74 05                	je     c001413b <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0014136:	b9 08 07 00 00       	mov    ecx,0x708
c001413b:	31 db                	xor    ebx,ebx
c001413d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0014141:	29 c8                	sub    eax,ecx
c0014143:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014147:	19 da                	sbb    edx,ebx
c0014149:	89 f8                	mov    eax,edi
c001414b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001414f:	5b                   	pop    ebx
c0014150:	5e                   	pop    esi
c0014151:	5f                   	pop    edi
c0014152:	ff e0                	jmp    eax

c0014154 <secondsToDatetime(unsigned long long)>:
c0014154:	55                   	push   ebp
c0014155:	57                   	push   edi
c0014156:	56                   	push   esi
c0014157:	53                   	push   ebx
c0014158:	83 ec 1c             	sub    esp,0x1c
c001415b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001415f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0014163:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0014167:	6a 00                	push   0x0
c0014169:	68 80 51 01 00       	push   0x15180
c001416e:	55                   	push   ebp
c001416f:	57                   	push   edi
c0014170:	e8 e7 28 01 00       	call   c0026a5c <__udivdi3>
c0014175:	83 c4 10             	add    esp,0x10
c0014178:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c001417e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014182:	6a 00                	push   0x0
c0014184:	68 80 51 01 00       	push   0x15180
c0014189:	55                   	push   ebp
c001418a:	57                   	push   edi
c001418b:	bf 10 0e 00 00       	mov    edi,0xe10
c0014190:	e8 c7 29 01 00       	call   c0026b5c <__umoddi3>
c0014195:	83 c4 10             	add    esp,0x10
c0014198:	99                   	cdq    
c0014199:	f7 ff                	idiv   edi
c001419b:	bf 3c 00 00 00       	mov    edi,0x3c
c00141a0:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00141a3:	89 d0                	mov    eax,edx
c00141a5:	99                   	cdq    
c00141a6:	f7 ff                	idiv   edi
c00141a8:	85 db                	test   ebx,ebx
c00141aa:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00141ad:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00141b0:	79 11                	jns    c00141c3 <secondsToDatetime(unsigned long long)+0x6f>
c00141b2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00141b6:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00141bc:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00141c1:	eb 07                	jmp    c00141ca <secondsToDatetime(unsigned long long)+0x76>
c00141c3:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00141c8:	89 d8                	mov    eax,ebx
c00141ca:	bf b4 05 00 00       	mov    edi,0x5b4
c00141cf:	99                   	cdq    
c00141d0:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00141d5:	f7 f9                	idiv   ecx
c00141d7:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00141dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00141e0:	31 d2                	xor    edx,edx
c00141e2:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00141ea:	01 c3                	add    ebx,eax
c00141ec:	89 d8                	mov    eax,ebx
c00141ee:	f7 f1                	div    ecx
c00141f0:	31 d2                	xor    edx,edx
c00141f2:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00141f5:	89 d8                	mov    eax,ebx
c00141f7:	f7 f7                	div    edi
c00141f9:	31 d2                	xor    edx,edx
c00141fb:	29 c1                	sub    ecx,eax
c00141fd:	89 d8                	mov    eax,ebx
c00141ff:	f7 f5                	div    ebp
c0014201:	bd 6d 01 00 00       	mov    ebp,0x16d
c0014206:	29 c1                	sub    ecx,eax
c0014208:	31 d2                	xor    edx,edx
c001420a:	89 c8                	mov    eax,ecx
c001420c:	f7 f5                	div    ebp
c001420e:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0014213:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014217:	31 d2                	xor    edx,edx
c0014219:	89 c8                	mov    eax,ecx
c001421b:	f7 f5                	div    ebp
c001421d:	31 d2                	xor    edx,edx
c001421f:	01 c3                	add    ebx,eax
c0014221:	89 c8                	mov    eax,ecx
c0014223:	f7 f7                	div    edi
c0014225:	bf 99 00 00 00       	mov    edi,0x99
c001422a:	29 c3                	sub    ebx,eax
c001422c:	31 d2                	xor    edx,edx
c001422e:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0014236:	29 c3                	sub    ebx,eax
c0014238:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001423b:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001423e:	bb 05 00 00 00       	mov    ebx,0x5
c0014243:	83 c1 02             	add    ecx,0x2
c0014246:	89 c8                	mov    eax,ecx
c0014248:	f7 f7                	div    edi
c001424a:	31 d2                	xor    edx,edx
c001424c:	89 c7                	mov    edi,eax
c001424e:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0014254:	83 c0 02             	add    eax,0x2
c0014257:	f7 f3                	div    ebx
c0014259:	89 eb                	mov    ebx,ebp
c001425b:	29 c3                	sub    ebx,eax
c001425d:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0014263:	88 1e                	mov    BYTE PTR [esi],bl
c0014265:	19 c0                	sbb    eax,eax
c0014267:	31 d2                	xor    edx,edx
c0014269:	83 e0 0c             	and    eax,0xc
c001426c:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0014270:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0014278:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001427c:	83 f9 01             	cmp    ecx,0x1
c001427f:	0f 96 c2             	setbe  dl
c0014282:	41                   	inc    ecx
c0014283:	01 d0                	add    eax,edx
c0014285:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0014288:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c001428c:	83 c4 1c             	add    esp,0x1c
c001428f:	89 f0                	mov    eax,esi
c0014291:	5b                   	pop    ebx
c0014292:	5e                   	pop    esi
c0014293:	5f                   	pop    edi
c0014294:	5d                   	pop    ebp
c0014295:	c2 04 00             	ret    0x4

c0014298 <Clock::timeInDatetimeLocal()>:
c0014298:	53                   	push   ebx
c0014299:	83 ec 14             	sub    esp,0x14
c001429c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00142a0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00142a4:	e8 83 fc ff ff       	call   c0013f2c <Clock::timeInSecondsLocal()>
c00142a9:	83 c4 0c             	add    esp,0xc
c00142ac:	52                   	push   edx
c00142ad:	50                   	push   eax
c00142ae:	53                   	push   ebx
c00142af:	e8 a0 fe ff ff       	call   c0014154 <secondsToDatetime(unsigned long long)>
c00142b4:	89 d8                	mov    eax,ebx
c00142b6:	83 c4 14             	add    esp,0x14
c00142b9:	5b                   	pop    ebx
c00142ba:	c2 04 00             	ret    0x4
c00142bd:	90                   	nop

c00142be <Device::hibernate()>:
c00142be:	c3                   	ret    
c00142bf:	90                   	nop

c00142c0 <Device::wake()>:
c00142c0:	c3                   	ret    
c00142c1:	90                   	nop

c00142c2 <Device::detect()>:
c00142c2:	c3                   	ret    
c00142c3:	90                   	nop

c00142c4 <Device::disableLegacy()>:
c00142c4:	c3                   	ret    
c00142c5:	90                   	nop

c00142c6 <Device::powerSaving(PowerSavingLevel)>:
c00142c6:	c3                   	ret    
c00142c7:	90                   	nop

c00142c8 <DriverlessDevice::close(int, int, void*)>:
c00142c8:	31 c0                	xor    eax,eax
c00142ca:	c3                   	ret    
c00142cb:	90                   	nop

c00142cc <DriverlessDevice::detect()>:
c00142cc:	c3                   	ret    
c00142cd:	90                   	nop

c00142ce <DriverlessDevice::open(int, int, void*)>:
c00142ce:	83 ec 18             	sub    esp,0x18
c00142d1:	68 f0 ac 02 c0       	push   0xc002acf0
c00142d6:	e8 b4 63 00 00       	call   c001a68f <Krnl::panic(char const*)>
c00142db:	83 c8 ff             	or     eax,0xffffffff
c00142de:	83 c4 1c             	add    esp,0x1c
c00142e1:	c3                   	ret    

c00142e2 <Device::~Device()>:
c00142e2:	ba 18 ad 02 c0       	mov    edx,0xc002ad18
c00142e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00142eb:	89 10                	mov    DWORD PTR [eax],edx
c00142ed:	90                   	nop
c00142ee:	c3                   	ret    
c00142ef:	90                   	nop

c00142f0 <Device::~Device()>:
c00142f0:	83 ec 0c             	sub    esp,0xc
c00142f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00142f7:	e8 e6 ff ff ff       	call   c00142e2 <Device::~Device()>
c00142fc:	83 c4 04             	add    esp,0x4
c00142ff:	83 ec 08             	sub    esp,0x8
c0014302:	68 58 01 00 00       	push   0x158
c0014307:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001430b:	e8 fa eb ff ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c0014310:	83 c4 10             	add    esp,0x10
c0014313:	83 c4 0c             	add    esp,0xc
c0014316:	c3                   	ret    
c0014317:	90                   	nop

c0014318 <Device::findAndLoadDriver()>:
c0014318:	c3                   	ret    
c0014319:	90                   	nop

c001431a <Device::preOpenPCI(PCIDeviceInfo)>:
c001431a:	57                   	push   edi
c001431b:	b9 09 00 00 00       	mov    ecx,0x9
c0014320:	56                   	push   esi
c0014321:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014325:	8d 74 24 10          	lea    esi,[esp+0x10]
c0014329:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0014333:	81 c7 18 01 00 00    	add    edi,0x118
c0014339:	fc                   	cld    
c001433a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001433c:	5e                   	pop    esi
c001433d:	5f                   	pop    edi
c001433e:	c3                   	ret    
c001433f:	90                   	nop

c0014340 <Device::preOpenACPI(void*, char*, char*)>:
c0014340:	56                   	push   esi
c0014341:	53                   	push   ebx
c0014342:	83 ec 08             	sub    esp,0x8
c0014345:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014349:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001434d:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0014357:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001435b:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0014361:	6a 1e                	push   0x1e
c0014363:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0014369:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001436d:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0014373:	50                   	push   eax
c0014374:	e8 cb c3 fe ff       	call   c0000744 <memcpy>
c0014379:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c001437d:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0014381:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0014389:	83 c4 14             	add    esp,0x14
c001438c:	5b                   	pop    ebx
c001438d:	5e                   	pop    esi
c001438e:	e9 b1 c3 fe ff       	jmp    c0000744 <memcpy>
c0014393:	90                   	nop

c0014394 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014394:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014398:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001439d:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00143a4:	75 0b                	jne    c00143b1 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c00143a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00143a8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00143ac:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00143af:	eb 1e                	jmp    c00143cf <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c00143b1:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c00143b6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00143bc:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00143c2:	8b 08                	mov    ecx,DWORD PTR [eax]
c00143c4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00143c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00143cc:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00143cf:	ff e0                	jmp    eax
c00143d1:	90                   	nop

c00143d2 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00143d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00143d6:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00143db:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00143e2:	75 0b                	jne    c00143ef <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c00143e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00143e6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00143ea:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00143ed:	eb 1e                	jmp    c001440d <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c00143ef:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c00143f4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00143fa:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0014400:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014402:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014406:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001440a:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c001440d:	ff e0                	jmp    eax
c001440f:	90                   	nop

c0014410 <Device::addChild(Device*)>:
c0014410:	53                   	push   ebx
c0014411:	83 ec 08             	sub    esp,0x8
c0014414:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014418:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001441c:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0014422:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0014428:	8b 13                	mov    edx,DWORD PTR [ebx]
c001442a:	85 d2                	test   edx,edx
c001442c:	74 04                	je     c0014432 <Device::addChild(Device*)+0x22>
c001442e:	89 d3                	mov    ebx,edx
c0014430:	eb f6                	jmp    c0014428 <Device::addChild(Device*)+0x18>
c0014432:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0014435:	83 ec 0c             	sub    esp,0xc
c0014438:	6a 08                	push   0x8
c001443a:	e8 04 b4 ff ff       	call   c000f843 <malloc>
c001443f:	89 03                	mov    DWORD PTR [ebx],eax
c0014441:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014447:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001444e:	83 c4 18             	add    esp,0x18
c0014451:	5b                   	pop    ebx
c0014452:	c3                   	ret    
c0014453:	90                   	nop

c0014454 <Device::removeAllChildren()>:
c0014454:	56                   	push   esi
c0014455:	53                   	push   ebx
c0014456:	52                   	push   edx
c0014457:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001445b:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0014461:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014464:	74 17                	je     c001447d <Device::removeAllChildren()+0x29>
c0014466:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0014469:	85 c0                	test   eax,eax
c001446b:	74 0c                	je     c0014479 <Device::removeAllChildren()+0x25>
c001446d:	83 ec 0c             	sub    esp,0xc
c0014470:	8b 10                	mov    edx,DWORD PTR [eax]
c0014472:	50                   	push   eax
c0014473:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0014476:	83 c4 10             	add    esp,0x10
c0014479:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001447b:	eb e4                	jmp    c0014461 <Device::removeAllChildren()+0xd>
c001447d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0014483:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014489:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001448f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014496:	58                   	pop    eax
c0014497:	5b                   	pop    ebx
c0014498:	5e                   	pop    esi
c0014499:	c3                   	ret    

c001449a <Device::hibernateAll()>:
c001449a:	53                   	push   ebx
c001449b:	83 ec 14             	sub    esp,0x14
c001449e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00144a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144a4:	53                   	push   ebx
c00144a5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00144a8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00144ae:	83 c4 10             	add    esp,0x10
c00144b1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00144b4:	74 0f                	je     c00144c5 <Device::hibernateAll()+0x2b>
c00144b6:	83 ec 0c             	sub    esp,0xc
c00144b9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00144bc:	e8 d9 ff ff ff       	call   c001449a <Device::hibernateAll()>
c00144c1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00144c3:	eb e9                	jmp    c00144ae <Device::hibernateAll()+0x14>
c00144c5:	83 c4 08             	add    esp,0x8
c00144c8:	5b                   	pop    ebx
c00144c9:	c3                   	ret    

c00144ca <Device::wakeAll()>:
c00144ca:	53                   	push   ebx
c00144cb:	83 ec 14             	sub    esp,0x14
c00144ce:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00144d2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144d4:	53                   	push   ebx
c00144d5:	ff 50 14             	call   DWORD PTR [eax+0x14]
c00144d8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00144de:	83 c4 10             	add    esp,0x10
c00144e1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00144e4:	74 0f                	je     c00144f5 <Device::wakeAll()+0x2b>
c00144e6:	83 ec 0c             	sub    esp,0xc
c00144e9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00144ec:	e8 d9 ff ff ff       	call   c00144ca <Device::wakeAll()>
c00144f1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00144f3:	eb e9                	jmp    c00144de <Device::wakeAll()+0x14>
c00144f5:	83 c4 08             	add    esp,0x8
c00144f8:	5b                   	pop    ebx
c00144f9:	c3                   	ret    

c00144fa <Device::detectAll()>:
c00144fa:	53                   	push   ebx
c00144fb:	83 ec 14             	sub    esp,0x14
c00144fe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014502:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014504:	53                   	push   ebx
c0014505:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0014508:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001450e:	83 c4 10             	add    esp,0x10
c0014511:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014514:	74 0f                	je     c0014525 <Device::detectAll()+0x2b>
c0014516:	83 ec 0c             	sub    esp,0xc
c0014519:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001451c:	e8 d9 ff ff ff       	call   c00144fa <Device::detectAll()>
c0014521:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014523:	eb e9                	jmp    c001450e <Device::detectAll()+0x14>
c0014525:	83 c4 08             	add    esp,0x8
c0014528:	5b                   	pop    ebx
c0014529:	c3                   	ret    

c001452a <Device::disableLegacyAll()>:
c001452a:	53                   	push   ebx
c001452b:	83 ec 14             	sub    esp,0x14
c001452e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014532:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014534:	53                   	push   ebx
c0014535:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0014538:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001453e:	83 c4 10             	add    esp,0x10
c0014541:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014544:	74 0f                	je     c0014555 <Device::disableLegacyAll()+0x2b>
c0014546:	83 ec 0c             	sub    esp,0xc
c0014549:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001454c:	e8 d9 ff ff ff       	call   c001452a <Device::disableLegacyAll()>
c0014551:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014553:	eb e9                	jmp    c001453e <Device::disableLegacyAll()+0x14>
c0014555:	83 c4 08             	add    esp,0x8
c0014558:	5b                   	pop    ebx
c0014559:	c3                   	ret    

c001455a <Device::loadDriversForAll()>:
c001455a:	53                   	push   ebx
c001455b:	83 ec 08             	sub    esp,0x8
c001455e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014562:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014568:	8b 18                	mov    ebx,DWORD PTR [eax]
c001456a:	85 db                	test   ebx,ebx
c001456c:	74 12                	je     c0014580 <Device::loadDriversForAll()+0x26>
c001456e:	83 ec 0c             	sub    esp,0xc
c0014571:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014574:	e8 e1 ff ff ff       	call   c001455a <Device::loadDriversForAll()>
c0014579:	83 c4 10             	add    esp,0x10
c001457c:	89 d8                	mov    eax,ebx
c001457e:	eb e8                	jmp    c0014568 <Device::loadDriversForAll()+0xe>
c0014580:	83 c4 08             	add    esp,0x8
c0014583:	5b                   	pop    ebx
c0014584:	c3                   	ret    
c0014585:	90                   	nop

c0014586 <Device::closeAll()>:
c0014586:	53                   	push   ebx
c0014587:	83 ec 08             	sub    esp,0x8
c001458a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001458e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014590:	6a 00                	push   0x0
c0014592:	6a 00                	push   0x0
c0014594:	6a 00                	push   0x0
c0014596:	53                   	push   ebx
c0014597:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001459a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00145a0:	83 c4 10             	add    esp,0x10
c00145a3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00145a6:	74 0f                	je     c00145b7 <Device::closeAll()+0x31>
c00145a8:	83 ec 0c             	sub    esp,0xc
c00145ab:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00145ae:	e8 d3 ff ff ff       	call   c0014586 <Device::closeAll()>
c00145b3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00145b5:	eb e9                	jmp    c00145a0 <Device::closeAll()+0x1a>
c00145b7:	83 c4 08             	add    esp,0x8
c00145ba:	5b                   	pop    ebx
c00145bb:	c3                   	ret    

c00145bc <Device::powerSavingAll(PowerSavingLevel)>:
c00145bc:	56                   	push   esi
c00145bd:	53                   	push   ebx
c00145be:	83 ec 0c             	sub    esp,0xc
c00145c1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00145c5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00145c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00145cb:	56                   	push   esi
c00145cc:	53                   	push   ebx
c00145cd:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00145d0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00145d6:	83 c4 10             	add    esp,0x10
c00145d9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00145dc:	74 0f                	je     c00145ed <Device::powerSavingAll(PowerSavingLevel)+0x31>
c00145de:	52                   	push   edx
c00145df:	52                   	push   edx
c00145e0:	56                   	push   esi
c00145e1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00145e4:	e8 d3 ff ff ff       	call   c00145bc <Device::powerSavingAll(PowerSavingLevel)>
c00145e9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00145eb:	eb e9                	jmp    c00145d6 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c00145ed:	58                   	pop    eax
c00145ee:	5b                   	pop    ebx
c00145ef:	5e                   	pop    esi
c00145f0:	c3                   	ret    
c00145f1:	90                   	nop

c00145f2 <Device::setName(char const*)>:
c00145f2:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c00145fa:	e9 35 c2 fe ff       	jmp    c0000834 <strcpy>
c00145ff:	90                   	nop

c0014600 <Device::Device(char const*)>:
c0014600:	83 ec 1c             	sub    esp,0x1c
c0014603:	ba 18 ad 02 c0       	mov    edx,0xc002ad18
c0014608:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001460c:	89 10                	mov    DWORD PTR [eax],edx
c001460e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014612:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c001461c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014620:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001462a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001462e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014638:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001463c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014646:	83 ec 08             	sub    esp,0x8
c0014649:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001464d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014651:	e8 9c ff ff ff       	call   c00145f2 <Device::setName(char const*)>
c0014656:	83 c4 10             	add    esp,0x10
c0014659:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0014661:	83 ec 0c             	sub    esp,0xc
c0014664:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014668:	e8 d6 b1 ff ff       	call   c000f843 <malloc>
c001466d:	83 c4 10             	add    esp,0x10
c0014670:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014676:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001467d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014681:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0014687:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001468b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014691:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014697:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001469b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00146a1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00146a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146ac:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00146b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146b7:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00146be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146c2:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00146cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146d0:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00146da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146de:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00146e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146ec:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c00146f6:	90                   	nop
c00146f7:	83 c4 1c             	add    esp,0x1c
c00146fa:	c3                   	ret    
c00146fb:	90                   	nop

c00146fc <Device::getName()>:
c00146fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014700:	05 d0 00 00 00       	add    eax,0xd0
c0014705:	c3                   	ret    

c0014706 <DriverlessDevice::DriverlessDevice(char const*)>:
c0014706:	83 ec 0c             	sub    esp,0xc
c0014709:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001470d:	83 ec 08             	sub    esp,0x8
c0014710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014714:	50                   	push   eax
c0014715:	e8 e6 fe ff ff       	call   c0014600 <Device::Device(char const*)>
c001471a:	83 c4 10             	add    esp,0x10
c001471d:	ba 44 ad 02 c0       	mov    edx,0xc002ad44
c0014722:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014726:	89 10                	mov    DWORD PTR [eax],edx
c0014728:	90                   	nop
c0014729:	83 c4 0c             	add    esp,0xc
c001472c:	c3                   	ret    
c001472d:	90                   	nop

c001472e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001472e:	57                   	push   edi
c001472f:	56                   	push   esi
c0014730:	53                   	push   ebx
c0014731:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014735:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014739:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001473d:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0014743:	75 0c                	jne    c0014751 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0014745:	52                   	push   edx
c0014746:	52                   	push   edx
c0014747:	53                   	push   ebx
c0014748:	56                   	push   esi
c0014749:	e8 4c 42 01 00       	call   c002899a <LinkedList<Device>::addElement(Device*)>
c001474e:	83 c4 10             	add    esp,0x10
c0014751:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014757:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001475a:	74 12                	je     c001476e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001475c:	50                   	push   eax
c001475d:	57                   	push   edi
c001475e:	56                   	push   esi
c001475f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014762:	e8 c7 ff ff ff       	call   c001472e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014767:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014769:	83 c4 10             	add    esp,0x10
c001476c:	eb e9                	jmp    c0014757 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001476e:	5b                   	pop    ebx
c001476f:	5e                   	pop    esi
c0014770:	5f                   	pop    edi
c0014771:	c3                   	ret    

c0014772 <getDevicesOfType(DeviceType)>:
c0014772:	53                   	push   ebx
c0014773:	83 ec 14             	sub    esp,0x14
c0014776:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001477a:	53                   	push   ebx
c001477b:	e8 f6 42 01 00       	call   c0028a76 <LinkedList<Device>::LinkedList()>
c0014780:	83 c4 0c             	add    esp,0xc
c0014783:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014787:	53                   	push   ebx
c0014788:	ff 35 c8 e4 02 c0    	push   DWORD PTR ds:0xc002e4c8
c001478e:	e8 9b ff ff ff       	call   c001472e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014793:	89 d8                	mov    eax,ebx
c0014795:	83 c4 18             	add    esp,0x18
c0014798:	5b                   	pop    ebx
c0014799:	c2 04 00             	ret    0x4

c001479c <HardDiskController::HardDiskController(char const*)>:
c001479c:	83 ec 0c             	sub    esp,0xc
c001479f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147a3:	83 ec 08             	sub    esp,0x8
c00147a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147aa:	50                   	push   eax
c00147ab:	e8 50 fe ff ff       	call   c0014600 <Device::Device(char const*)>
c00147b0:	83 c4 10             	add    esp,0x10
c00147b3:	ba 70 ad 02 c0       	mov    edx,0xc002ad70
c00147b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147bc:	89 10                	mov    DWORD PTR [eax],edx
c00147be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147c2:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00147cc:	90                   	nop
c00147cd:	83 c4 0c             	add    esp,0xc
c00147d0:	c3                   	ret    
c00147d1:	90                   	nop

c00147d2 <HardDiskController::~HardDiskController()>:
c00147d2:	83 ec 0c             	sub    esp,0xc
c00147d5:	ba 70 ad 02 c0       	mov    edx,0xc002ad70
c00147da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147de:	89 10                	mov    DWORD PTR [eax],edx
c00147e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147e4:	83 ec 0c             	sub    esp,0xc
c00147e7:	50                   	push   eax
c00147e8:	e8 f5 fa ff ff       	call   c00142e2 <Device::~Device()>
c00147ed:	83 c4 10             	add    esp,0x10
c00147f0:	90                   	nop
c00147f1:	83 c4 0c             	add    esp,0xc
c00147f4:	c3                   	ret    
c00147f5:	90                   	nop

c00147f6 <HardDiskController::~HardDiskController()>:
c00147f6:	83 ec 0c             	sub    esp,0xc
c00147f9:	83 ec 0c             	sub    esp,0xc
c00147fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014800:	e8 cd ff ff ff       	call   c00147d2 <HardDiskController::~HardDiskController()>
c0014805:	83 c4 10             	add    esp,0x10
c0014808:	83 ec 08             	sub    esp,0x8
c001480b:	68 58 01 00 00       	push   0x158
c0014810:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014814:	e8 f1 e6 ff ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c0014819:	83 c4 10             	add    esp,0x10
c001481c:	83 c4 0c             	add    esp,0xc
c001481f:	c3                   	ret    

c0014820 <PhysicalDisk::eject()>:
c0014820:	83 ec 18             	sub    esp,0x18
c0014823:	68 94 ad 02 c0       	push   0xc002ad94
c0014828:	e8 bd e7 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001482d:	83 c8 ff             	or     eax,0xffffffff
c0014830:	83 c4 1c             	add    esp,0x1c
c0014833:	c3                   	ret    

c0014834 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0014834:	83 ec 0c             	sub    esp,0xc
c0014837:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001483b:	83 ec 08             	sub    esp,0x8
c001483e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014842:	50                   	push   eax
c0014843:	e8 b8 fd ff ff       	call   c0014600 <Device::Device(char const*)>
c0014848:	83 c4 10             	add    esp,0x10
c001484b:	ba c4 ad 02 c0       	mov    edx,0xc002adc4
c0014850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014854:	89 10                	mov    DWORD PTR [eax],edx
c0014856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001485a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0014861:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014865:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c001486c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014870:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c001487a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001487e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014882:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0014888:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001488c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014896:	90                   	nop
c0014897:	83 c4 0c             	add    esp,0xc
c001489a:	c3                   	ret    
c001489b:	90                   	nop

c001489c <PhysicalDisk::startCache()>:
c001489c:	56                   	push   esi
c001489d:	53                   	push   ebx
c001489e:	83 ec 10             	sub    esp,0x10
c00148a1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00148a5:	6a 44                	push   0x44
c00148a7:	e8 97 af ff ff       	call   c000f843 <malloc>
c00148ac:	89 c6                	mov    esi,eax
c00148ae:	58                   	pop    eax
c00148af:	5a                   	pop    edx
c00148b0:	53                   	push   ebx
c00148b1:	56                   	push   esi
c00148b2:	e8 29 27 00 00       	call   c0016fe0 <VCache::VCache(PhysicalDisk*)>
c00148b7:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00148bd:	83 c4 14             	add    esp,0x14
c00148c0:	5b                   	pop    ebx
c00148c1:	5e                   	pop    esi
c00148c2:	c3                   	ret    
c00148c3:	90                   	nop

c00148c4 <PhysicalDisk::~PhysicalDisk()>:
c00148c4:	83 ec 0c             	sub    esp,0xc
c00148c7:	ba c4 ad 02 c0       	mov    edx,0xc002adc4
c00148cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148d0:	89 10                	mov    DWORD PTR [eax],edx
c00148d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148d6:	83 ec 0c             	sub    esp,0xc
c00148d9:	50                   	push   eax
c00148da:	e8 03 fa ff ff       	call   c00142e2 <Device::~Device()>
c00148df:	83 c4 10             	add    esp,0x10
c00148e2:	90                   	nop
c00148e3:	83 c4 0c             	add    esp,0xc
c00148e6:	c3                   	ret    
c00148e7:	90                   	nop

c00148e8 <PhysicalDisk::~PhysicalDisk()>:
c00148e8:	83 ec 0c             	sub    esp,0xc
c00148eb:	83 ec 0c             	sub    esp,0xc
c00148ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148f2:	e8 cd ff ff ff       	call   c00148c4 <PhysicalDisk::~PhysicalDisk()>
c00148f7:	83 c4 10             	add    esp,0x10
c00148fa:	83 ec 08             	sub    esp,0x8
c00148fd:	68 6c 01 00 00       	push   0x16c
c0014902:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014906:	e8 ff e5 ff ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c001490b:	83 c4 10             	add    esp,0x10
c001490e:	83 c4 0c             	add    esp,0xc
c0014911:	c3                   	ret    

c0014912 <FPU::FPU(char const*)>:
c0014912:	83 ec 0c             	sub    esp,0xc
c0014915:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014919:	83 ec 08             	sub    esp,0x8
c001491c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014920:	50                   	push   eax
c0014921:	e8 da fc ff ff       	call   c0014600 <Device::Device(char const*)>
c0014926:	83 c4 10             	add    esp,0x10
c0014929:	ba 08 ae 02 c0       	mov    edx,0xc002ae08
c001492e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014932:	89 10                	mov    DWORD PTR [eax],edx
c0014934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014938:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0014942:	90                   	nop
c0014943:	83 c4 0c             	add    esp,0xc
c0014946:	c3                   	ret    
c0014947:	90                   	nop

c0014948 <FPU::~FPU()>:
c0014948:	83 ec 0c             	sub    esp,0xc
c001494b:	ba 08 ae 02 c0       	mov    edx,0xc002ae08
c0014950:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014954:	89 10                	mov    DWORD PTR [eax],edx
c0014956:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001495a:	83 ec 0c             	sub    esp,0xc
c001495d:	50                   	push   eax
c001495e:	e8 7f f9 ff ff       	call   c00142e2 <Device::~Device()>
c0014963:	83 c4 10             	add    esp,0x10
c0014966:	90                   	nop
c0014967:	83 c4 0c             	add    esp,0xc
c001496a:	c3                   	ret    
c001496b:	90                   	nop

c001496c <FPU::~FPU()>:
c001496c:	83 ec 0c             	sub    esp,0xc
c001496f:	83 ec 0c             	sub    esp,0xc
c0014972:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014976:	e8 cd ff ff ff       	call   c0014948 <FPU::~FPU()>
c001497b:	83 c4 10             	add    esp,0x10
c001497e:	83 ec 08             	sub    esp,0x8
c0014981:	68 58 01 00 00       	push   0x158
c0014986:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001498a:	e8 7b e5 ff ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c001498f:	83 c4 10             	add    esp,0x10
c0014992:	83 c4 0c             	add    esp,0xc
c0014995:	c3                   	ret    

c0014996 <setupFPU()>:
c0014996:	53                   	push   ebx
c0014997:	83 ec 08             	sub    esp,0x8
c001499a:	8b 15 c8 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e4c8
c00149a0:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c00149a7:	74 19                	je     c00149c2 <setupFPU()+0x2c>
c00149a9:	83 ec 0c             	sub    esp,0xc
c00149ac:	68 58 01 00 00       	push   0x158
c00149b1:	e8 8d ae ff ff       	call   c000f843 <malloc>
c00149b6:	89 c3                	mov    ebx,eax
c00149b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00149bb:	e8 2a 0c 01 00       	call   c00255ea <AVX::AVX()>
c00149c0:	eb 5b                	jmp    c0014a1d <setupFPU()+0x87>
c00149c2:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00149c8:	84 c0                	test   al,al
c00149ca:	79 19                	jns    c00149e5 <setupFPU()+0x4f>
c00149cc:	83 ec 0c             	sub    esp,0xc
c00149cf:	68 58 01 00 00       	push   0x158
c00149d4:	e8 6a ae ff ff       	call   c000f843 <malloc>
c00149d9:	89 c3                	mov    ebx,eax
c00149db:	89 04 24             	mov    DWORD PTR [esp],eax
c00149de:	e8 2d 0d 01 00       	call   c0025710 <SSE::SSE()>
c00149e3:	eb 38                	jmp    c0014a1d <setupFPU()+0x87>
c00149e5:	a8 20                	test   al,0x20
c00149e7:	74 19                	je     c0014a02 <setupFPU()+0x6c>
c00149e9:	83 ec 0c             	sub    esp,0xc
c00149ec:	68 58 01 00 00       	push   0x158
c00149f1:	e8 4d ae ff ff       	call   c000f843 <malloc>
c00149f6:	89 c3                	mov    ebx,eax
c00149f8:	89 04 24             	mov    DWORD PTR [esp],eax
c00149fb:	e8 7a 0c 01 00       	call   c002567a <MMX::MMX()>
c0014a00:	eb 1b                	jmp    c0014a1d <setupFPU()+0x87>
c0014a02:	a8 10                	test   al,0x10
c0014a04:	74 1c                	je     c0014a22 <setupFPU()+0x8c>
c0014a06:	83 ec 0c             	sub    esp,0xc
c0014a09:	68 58 01 00 00       	push   0x158
c0014a0e:	e8 30 ae ff ff       	call   c000f843 <malloc>
c0014a13:	89 c3                	mov    ebx,eax
c0014a15:	89 04 24             	mov    DWORD PTR [esp],eax
c0014a18:	e8 81 0d 01 00       	call   c002579e <x87::x87()>
c0014a1d:	83 c4 10             	add    esp,0x10
c0014a20:	eb 24                	jmp    c0014a46 <setupFPU()+0xb0>
c0014a22:	83 e0 ef             	and    eax,0xffffffef
c0014a25:	83 ec 0c             	sub    esp,0xc
c0014a28:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014a2e:	68 f4 ad 02 c0       	push   0xc002adf4
c0014a33:	e8 b2 e5 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0014a38:	0f 20 c0             	mov    eax,cr0
c0014a3b:	83 c8 04             	or     eax,0x4
c0014a3e:	0f 22 c0             	mov    cr0,eax
c0014a41:	31 db                	xor    ebx,ebx
c0014a43:	83 c4 10             	add    esp,0x10
c0014a46:	89 d8                	mov    eax,ebx
c0014a48:	83 c4 08             	add    esp,0x8
c0014a4b:	5b                   	pop    ebx
c0014a4c:	c3                   	ret    
c0014a4d:	90                   	nop

c0014a4e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014a4e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014a52:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014a56:	c1 e0 04             	shl    eax,0x4
c0014a59:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014a5d:	8d 50 10             	lea    edx,[eax+0x10]
c0014a60:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014a66:	74 08                	je     c0014a70 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014a68:	83 c0 04             	add    eax,0x4
c0014a6b:	39 d0                	cmp    eax,edx
c0014a6d:	75 f1                	jne    c0014a60 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014a6f:	c3                   	ret    
c0014a70:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014a7a:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014a84:	eb e2                	jmp    c0014a68 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014a86 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014a86:	57                   	push   edi
c0014a87:	31 c0                	xor    eax,eax
c0014a89:	56                   	push   esi
c0014a8a:	53                   	push   ebx
c0014a8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014a8f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014a93:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014a97:	89 da                	mov    edx,ebx
c0014a99:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014a9d:	c1 e2 04             	shl    edx,0x4
c0014aa0:	01 ca                	add    edx,ecx
c0014aa2:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014aaa:	74 16                	je     c0014ac2 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014aac:	40                   	inc    eax
c0014aad:	83 f8 04             	cmp    eax,0x4
c0014ab0:	75 f0                	jne    c0014aa2 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0014ab2:	c7 44 24 10 38 ae 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ae38
c0014aba:	5b                   	pop    ebx
c0014abb:	5e                   	pop    esi
c0014abc:	5f                   	pop    edi
c0014abd:	e9 cd 5b 00 00       	jmp    c001a68f <Krnl::panic(char const*)>
c0014ac2:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014ac5:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014ac8:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014ace:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014ad4:	5b                   	pop    ebx
c0014ad5:	5e                   	pop    esi
c0014ad6:	5f                   	pop    edi
c0014ad7:	c3                   	ret    

c0014ad8 <doubleFault(regs*, void*)>:
c0014ad8:	55                   	push   ebp
c0014ad9:	89 e5                	mov    ebp,esp
c0014adb:	83 ec 08             	sub    esp,0x8
c0014ade:	83 ec 0c             	sub    esp,0xc
c0014ae1:	68 73 ae 02 c0       	push   0xc002ae73
c0014ae6:	e8 a4 5b 00 00       	call   c001a68f <Krnl::panic(char const*)>
c0014aeb:	83 c4 10             	add    esp,0x10
c0014aee:	90                   	nop
c0014aef:	c9                   	leave  
c0014af0:	c3                   	ret    
c0014af1:	90                   	nop

c0014af2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014af2:	56                   	push   esi
c0014af3:	53                   	push   ebx
c0014af4:	50                   	push   eax
c0014af5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014af9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014afd:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014b02:	75 35                	jne    c0014b39 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014b04:	8d 43 20             	lea    eax,[ebx+0x20]
c0014b07:	31 d2                	xor    edx,edx
c0014b09:	89 c1                	mov    ecx,eax
c0014b0b:	c1 e1 04             	shl    ecx,0x4
c0014b0e:	01 f1                	add    ecx,esi
c0014b10:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014b18:	74 3e                	je     c0014b58 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014b1a:	42                   	inc    edx
c0014b1b:	83 fa 04             	cmp    edx,0x4
c0014b1e:	75 f0                	jne    c0014b10 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014b20:	83 ec 0c             	sub    esp,0xc
c0014b23:	68 b8 ae 02 c0       	push   0xc002aeb8
c0014b28:	e8 62 5b 00 00       	call   c001a68f <Krnl::panic(char const*)>
c0014b2d:	83 c4 10             	add    esp,0x10
c0014b30:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014b35:	5a                   	pop    edx
c0014b36:	5b                   	pop    ebx
c0014b37:	5e                   	pop    esi
c0014b38:	c3                   	ret    
c0014b39:	83 ec 0c             	sub    esp,0xc
c0014b3c:	56                   	push   esi
c0014b3d:	e8 ba fb ff ff       	call   c00146fc <Device::getName()>
c0014b42:	83 c4 10             	add    esp,0x10
c0014b45:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014b48:	75 ba                	jne    c0014b04 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014b4a:	83 fb 0f             	cmp    ebx,0xf
c0014b4d:	7f 29                	jg     c0014b78 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014b4f:	0f b6 9b 20 d7 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd28e0]
c0014b56:	eb ac                	jmp    c0014b04 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014b58:	8d 04 82             	lea    eax,[edx+eax*4]
c0014b5b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014b5f:	8d 04 86             	lea    eax,[esi+eax*4]
c0014b62:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014b68:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014b6c:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014b72:	89 d8                	mov    eax,ebx
c0014b74:	5a                   	pop    edx
c0014b75:	5b                   	pop    ebx
c0014b76:	5e                   	pop    esi
c0014b77:	c3                   	ret    
c0014b78:	83 ec 0c             	sub    esp,0xc
c0014b7b:	68 80 ae 02 c0       	push   0xc002ae80
c0014b80:	e8 0a 5b 00 00       	call   c001a68f <Krnl::panic(char const*)>
c0014b85:	83 c4 10             	add    esp,0x10
c0014b88:	e9 77 ff ff ff       	jmp    c0014b04 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014b8d:	90                   	nop

c0014b8e <InterruptController::clearAllHandlers(int, bool)>:
c0014b8e:	56                   	push   esi
c0014b8f:	53                   	push   ebx
c0014b90:	52                   	push   edx
c0014b91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014b95:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014b99:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014b9e:	75 61                	jne    c0014c01 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014ba0:	8d 46 20             	lea    eax,[esi+0x20]
c0014ba3:	c1 e6 04             	shl    esi,0x4
c0014ba6:	c1 e0 04             	shl    eax,0x4
c0014ba9:	01 de                	add    esi,ebx
c0014bab:	01 d8                	add    eax,ebx
c0014bad:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014bb7:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014bc1:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014bcb:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014bd5:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014bdf:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014be9:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014bf3:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014bfd:	58                   	pop    eax
c0014bfe:	5b                   	pop    ebx
c0014bff:	5e                   	pop    esi
c0014c00:	c3                   	ret    
c0014c01:	83 ec 0c             	sub    esp,0xc
c0014c04:	53                   	push   ebx
c0014c05:	e8 f2 fa ff ff       	call   c00146fc <Device::getName()>
c0014c0a:	83 c4 10             	add    esp,0x10
c0014c0d:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014c10:	75 8e                	jne    c0014ba0 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014c12:	83 fe 0f             	cmp    esi,0xf
c0014c15:	7f 09                	jg     c0014c20 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014c17:	0f b6 b6 20 d7 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd28e0]
c0014c1e:	eb 80                	jmp    c0014ba0 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014c20:	83 ec 0c             	sub    esp,0xc
c0014c23:	68 f4 ae 02 c0       	push   0xc002aef4
c0014c28:	e8 62 5a 00 00       	call   c001a68f <Krnl::panic(char const*)>
c0014c2d:	83 c4 10             	add    esp,0x10
c0014c30:	e9 6b ff ff ff       	jmp    c0014ba0 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014c35:	90                   	nop

c0014c36 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014c36:	56                   	push   esi
c0014c37:	53                   	push   ebx
c0014c38:	52                   	push   edx
c0014c39:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014c3d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014c41:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014c46:	75 3a                	jne    c0014c82 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014c48:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014c4c:	8d 50 20             	lea    edx,[eax+0x20]
c0014c4f:	c1 e2 04             	shl    edx,0x4
c0014c52:	8d 04 16             	lea    eax,[esi+edx*1]
c0014c55:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014c59:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014c5f:	74 0b                	je     c0014c6c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014c61:	83 c0 04             	add    eax,0x4
c0014c64:	39 d0                	cmp    eax,edx
c0014c66:	75 f1                	jne    c0014c59 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014c68:	58                   	pop    eax
c0014c69:	5b                   	pop    ebx
c0014c6a:	5e                   	pop    esi
c0014c6b:	c3                   	ret    
c0014c6c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014c76:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014c80:	eb df                	jmp    c0014c61 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014c82:	83 ec 0c             	sub    esp,0xc
c0014c85:	56                   	push   esi
c0014c86:	e8 71 fa ff ff       	call   c00146fc <Device::getName()>
c0014c8b:	83 c4 10             	add    esp,0x10
c0014c8e:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014c91:	75 b5                	jne    c0014c48 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014c93:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014c98:	7f 11                	jg     c0014cab <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014c9a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014c9e:	0f b6 80 20 d7 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd28e0]
c0014ca5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014ca9:	eb 9d                	jmp    c0014c48 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014cab:	83 ec 0c             	sub    esp,0xc
c0014cae:	68 f4 ae 02 c0       	push   0xc002aef4
c0014cb3:	e8 d7 59 00 00       	call   c001a68f <Krnl::panic(char const*)>
c0014cb8:	83 c4 10             	add    esp,0x10
c0014cbb:	eb 8b                	jmp    c0014c48 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014cbd <nmiHandler(regs*, void*)>:
c0014cbd:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0014cc2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014cc6:	e9 c1 a2 ff ff       	jmp    c000ef8c <Computer::handleNMI()>

c0014ccb <int_handler>:
c0014ccb:	55                   	push   ebp
c0014ccc:	57                   	push   edi
c0014ccd:	56                   	push   esi
c0014cce:	53                   	push   ebx
c0014ccf:	83 ec 0c             	sub    esp,0xc
c0014cd2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014cd6:	80 3d 24 10 03 c0 00 	cmp    BYTE PTR ds:0xc0031024,0x0
c0014cdd:	74 0b                	je     c0014cea <int_handler+0x1f>
c0014cdf:	fa                   	cli    
c0014ce0:	f4                   	hlt    
c0014ce1:	80 3d 24 10 03 c0 00 	cmp    BYTE PTR ds:0xc0031024,0x0
c0014ce8:	75 f5                	jne    c0014cdf <int_handler+0x14>
c0014cea:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0014cef:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014cf2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014cf8:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014cfe:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014d01:	83 f8 17             	cmp    eax,0x17
c0014d04:	77 13                	ja     c0014d19 <int_handler+0x4e>
c0014d06:	83 ec 08             	sub    esp,0x8
c0014d09:	8b 17                	mov    edx,DWORD PTR [edi]
c0014d0b:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014d0e:	0f b6 c0             	movzx  eax,al
c0014d11:	50                   	push   eax
c0014d12:	57                   	push   edi
c0014d13:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014d16:	83 c4 10             	add    esp,0x10
c0014d19:	83 c3 15             	add    ebx,0x15
c0014d1c:	c1 e3 04             	shl    ebx,0x4
c0014d1f:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014d23:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014d2a:	31 db                	xor    ebx,ebx
c0014d2c:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014d30:	85 c0                	test   eax,eax
c0014d32:	74 13                	je     c0014d47 <int_handler+0x7c>
c0014d34:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014d37:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014d3b:	74 1c                	je     c0014d59 <int_handler+0x8e>
c0014d3d:	83 ec 08             	sub    esp,0x8
c0014d40:	52                   	push   edx
c0014d41:	56                   	push   esi
c0014d42:	ff d0                	call   eax
c0014d44:	83 c4 10             	add    esp,0x10
c0014d47:	43                   	inc    ebx
c0014d48:	83 fb 04             	cmp    ebx,0x4
c0014d4b:	75 df                	jne    c0014d2c <int_handler+0x61>
c0014d4d:	83 c4 0c             	add    esp,0xc
c0014d50:	31 c0                	xor    eax,eax
c0014d52:	5b                   	pop    ebx
c0014d53:	31 d2                	xor    edx,edx
c0014d55:	5e                   	pop    esi
c0014d56:	5f                   	pop    edi
c0014d57:	5d                   	pop    ebp
c0014d58:	c3                   	ret    
c0014d59:	83 ec 08             	sub    esp,0x8
c0014d5c:	52                   	push   edx
c0014d5d:	56                   	push   esi
c0014d5e:	ff d0                	call   eax
c0014d60:	83 c4 10             	add    esp,0x10
c0014d63:	83 c4 0c             	add    esp,0xc
c0014d66:	5b                   	pop    ebx
c0014d67:	5e                   	pop    esi
c0014d68:	5f                   	pop    edi
c0014d69:	5d                   	pop    ebp
c0014d6a:	c3                   	ret    
c0014d6b:	90                   	nop

c0014d6c <InterruptController::InterruptController(char const*)>:
c0014d6c:	83 ec 1c             	sub    esp,0x1c
c0014d6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d73:	83 ec 08             	sub    esp,0x8
c0014d76:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014d7a:	50                   	push   eax
c0014d7b:	e8 80 f8 ff ff       	call   c0014600 <Device::Device(char const*)>
c0014d80:	83 c4 10             	add    esp,0x10
c0014d83:	ba 94 b1 02 c0       	mov    edx,0xc002b194
c0014d88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d8c:	89 10                	mov    DWORD PTR [eax],edx
c0014d8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d92:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014d9c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014da4:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014dac:	7f 5e                	jg     c0014e0c <InterruptController::InterruptController(char const*)+0xa0>
c0014dae:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014db6:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014dbb:	7f 49                	jg     c0014e06 <InterruptController::InterruptController(char const*)+0x9a>
c0014dbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014dc1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014dc5:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014dcc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014dd0:	01 ca                	add    edx,ecx
c0014dd2:	83 c2 54             	add    edx,0x54
c0014dd5:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014ddd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014de1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014de5:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014dec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014df0:	01 ca                	add    edx,ecx
c0014df2:	81 c2 54 04 00 00    	add    edx,0x454
c0014df8:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014e00:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014e04:	eb b0                	jmp    c0014db6 <InterruptController::InterruptController(char const*)+0x4a>
c0014e06:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014e0a:	eb 98                	jmp    c0014da4 <InterruptController::InterruptController(char const*)+0x38>
c0014e0c:	90                   	nop
c0014e0d:	83 c4 1c             	add    esp,0x1c
c0014e10:	c3                   	ret    
c0014e11:	90                   	nop

c0014e12 <InterruptController::~InterruptController()>:
c0014e12:	83 ec 0c             	sub    esp,0xc
c0014e15:	ba 94 b1 02 c0       	mov    edx,0xc002b194
c0014e1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e1e:	89 10                	mov    DWORD PTR [eax],edx
c0014e20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e24:	83 ec 0c             	sub    esp,0xc
c0014e27:	50                   	push   eax
c0014e28:	e8 b5 f4 ff ff       	call   c00142e2 <Device::~Device()>
c0014e2d:	83 c4 10             	add    esp,0x10
c0014e30:	90                   	nop
c0014e31:	83 c4 0c             	add    esp,0xc
c0014e34:	c3                   	ret    
c0014e35:	90                   	nop

c0014e36 <InterruptController::~InterruptController()>:
c0014e36:	83 ec 0c             	sub    esp,0xc
c0014e39:	83 ec 0c             	sub    esp,0xc
c0014e3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e40:	e8 cd ff ff ff       	call   c0014e12 <InterruptController::~InterruptController()>
c0014e45:	83 c4 10             	add    esp,0x10
c0014e48:	83 ec 08             	sub    esp,0x8
c0014e4b:	68 58 21 00 00       	push   0x2158
c0014e50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e54:	e8 b1 e0 ff ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c0014e59:	83 c4 10             	add    esp,0x10
c0014e5c:	83 c4 0c             	add    esp,0xc
c0014e5f:	c3                   	ret    

c0014e60 <displayDebugInfo(regs*)>:
c0014e60:	55                   	push   ebp
c0014e61:	57                   	push   edi
c0014e62:	56                   	push   esi
c0014e63:	53                   	push   ebx
c0014e64:	83 ec 24             	sub    esp,0x24
c0014e67:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014e6b:	0f 20 c2             	mov    edx,cr0
c0014e6e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014e72:	0f 20 d7             	mov    edi,cr2
c0014e75:	0f 20 de             	mov    esi,cr3
c0014e78:	0f 20 e5             	mov    ebp,cr4
c0014e7b:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014e7e:	68 2e af 02 c0       	push   0xc002af2e
c0014e83:	e8 62 e1 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0014e88:	59                   	pop    ecx
c0014e89:	58                   	pop    eax
c0014e8a:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014e8d:	68 39 af 02 c0       	push   0xc002af39
c0014e92:	e8 53 e1 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0014e97:	58                   	pop    eax
c0014e98:	5a                   	pop    edx
c0014e99:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014e9c:	68 44 af 02 c0       	push   0xc002af44
c0014ea1:	e8 44 e1 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0014ea6:	59                   	pop    ecx
c0014ea7:	58                   	pop    eax
c0014ea8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014eab:	68 4f af 02 c0       	push   0xc002af4f
c0014eb0:	e8 35 e1 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0014eb5:	58                   	pop    eax
c0014eb6:	5a                   	pop    edx
c0014eb7:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014eba:	68 5a af 02 c0       	push   0xc002af5a
c0014ebf:	e8 26 e1 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0014ec4:	59                   	pop    ecx
c0014ec5:	58                   	pop    eax
c0014ec6:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014ec9:	68 65 af 02 c0       	push   0xc002af65
c0014ece:	e8 17 e1 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0014ed3:	58                   	pop    eax
c0014ed4:	5a                   	pop    edx
c0014ed5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014ed8:	68 70 af 02 c0       	push   0xc002af70
c0014edd:	e8 08 e1 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0014ee2:	59                   	pop    ecx
c0014ee3:	58                   	pop    eax
c0014ee4:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014ee7:	68 7b af 02 c0       	push   0xc002af7b
c0014eec:	e8 f9 e0 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0014ef1:	58                   	pop    eax
c0014ef2:	5a                   	pop    edx
c0014ef3:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014ef6:	68 86 af 02 c0       	push   0xc002af86
c0014efb:	e8 ea e0 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0014f00:	59                   	pop    ecx
c0014f01:	58                   	pop    eax
c0014f02:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014f05:	68 95 af 02 c0       	push   0xc002af95
c0014f0a:	e8 db e0 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0014f0f:	58                   	pop    eax
c0014f10:	5a                   	pop    edx
c0014f11:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014f14:	68 a0 af 02 c0       	push   0xc002afa0
c0014f19:	e8 cc e0 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0014f1e:	59                   	pop    ecx
c0014f1f:	58                   	pop    eax
c0014f20:	57                   	push   edi
c0014f21:	68 ab af 02 c0       	push   0xc002afab
c0014f26:	e8 bf e0 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0014f2b:	58                   	pop    eax
c0014f2c:	5a                   	pop    edx
c0014f2d:	56                   	push   esi
c0014f2e:	68 b6 af 02 c0       	push   0xc002afb6
c0014f33:	e8 b2 e0 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0014f38:	59                   	pop    ecx
c0014f39:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c0014f3e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f44:	e8 e4 bd ff ff       	call   c0010d2d <setActiveTerminal(VgaText*)>
c0014f49:	58                   	pop    eax
c0014f4a:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014f4d:	5a                   	pop    edx
c0014f4e:	c1 e0 05             	shl    eax,0x5
c0014f51:	05 80 d4 02 c0       	add    eax,0xc002d480
c0014f56:	50                   	push   eax
c0014f57:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c0014f5c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f62:	e8 e5 c1 ff ff       	call   c001114c <VgaText::puts(char const*)>
c0014f67:	59                   	pop    ecx
c0014f68:	58                   	pop    eax
c0014f69:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c0014f6e:	68 c1 af 02 c0       	push   0xc002afc1
c0014f73:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f79:	e8 ce c1 ff ff       	call   c001114c <VgaText::puts(char const*)>
c0014f7e:	58                   	pop    eax
c0014f7f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f84:	5a                   	pop    edx
c0014f85:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014f88:	83 c0 0c             	add    eax,0xc
c0014f8b:	50                   	push   eax
c0014f8c:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c0014f91:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f97:	e8 b0 c1 ff ff       	call   c001114c <VgaText::puts(char const*)>
c0014f9c:	59                   	pop    ecx
c0014f9d:	58                   	pop    eax
c0014f9e:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c0014fa3:	68 ca af 02 c0       	push   0xc002afca
c0014fa8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fae:	e8 99 c1 ff ff       	call   c001114c <VgaText::puts(char const*)>
c0014fb3:	58                   	pop    eax
c0014fb4:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c0014fb9:	5a                   	pop    edx
c0014fba:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014fbd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fc3:	e8 aa c1 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c0014fc8:	59                   	pop    ecx
c0014fc9:	58                   	pop    eax
c0014fca:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c0014fcf:	68 d2 af 02 c0       	push   0xc002afd2
c0014fd4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fda:	e8 6d c1 ff ff       	call   c001114c <VgaText::puts(char const*)>
c0014fdf:	58                   	pop    eax
c0014fe0:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c0014fe5:	5a                   	pop    edx
c0014fe6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014fe9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fef:	e8 7e c1 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c0014ff4:	59                   	pop    ecx
c0014ff5:	58                   	pop    eax
c0014ff6:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c0014ffb:	68 da af 02 c0       	push   0xc002afda
c0015000:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015006:	e8 41 c1 ff ff       	call   c001114c <VgaText::puts(char const*)>
c001500b:	58                   	pop    eax
c001500c:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c0015011:	5a                   	pop    edx
c0015012:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0015015:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001501b:	e8 52 c1 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c0015020:	59                   	pop    ecx
c0015021:	58                   	pop    eax
c0015022:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c0015027:	68 e2 af 02 c0       	push   0xc002afe2
c001502c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015032:	e8 15 c1 ff ff       	call   c001114c <VgaText::puts(char const*)>
c0015037:	58                   	pop    eax
c0015038:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c001503d:	5a                   	pop    edx
c001503e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0015041:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015047:	e8 26 c1 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c001504c:	59                   	pop    ecx
c001504d:	58                   	pop    eax
c001504e:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c0015053:	68 ea af 02 c0       	push   0xc002afea
c0015058:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001505e:	e8 e9 c0 ff ff       	call   c001114c <VgaText::puts(char const*)>
c0015063:	58                   	pop    eax
c0015064:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c0015069:	5a                   	pop    edx
c001506a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001506d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015073:	e8 fa c0 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c0015078:	59                   	pop    ecx
c0015079:	58                   	pop    eax
c001507a:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c001507f:	68 f2 af 02 c0       	push   0xc002aff2
c0015084:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001508a:	e8 bd c0 ff ff       	call   c001114c <VgaText::puts(char const*)>
c001508f:	58                   	pop    eax
c0015090:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c0015095:	5a                   	pop    edx
c0015096:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0015099:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001509f:	e8 ce c0 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c00150a4:	59                   	pop    ecx
c00150a5:	58                   	pop    eax
c00150a6:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c00150ab:	68 fa af 02 c0       	push   0xc002affa
c00150b0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150b6:	e8 91 c0 ff ff       	call   c001114c <VgaText::puts(char const*)>
c00150bb:	58                   	pop    eax
c00150bc:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c00150c1:	5a                   	pop    edx
c00150c2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00150c6:	52                   	push   edx
c00150c7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150cd:	e8 a0 c0 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c00150d2:	59                   	pop    ecx
c00150d3:	58                   	pop    eax
c00150d4:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c00150d9:	68 03 b0 02 c0       	push   0xc002b003
c00150de:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150e4:	e8 63 c0 ff ff       	call   c001114c <VgaText::puts(char const*)>
c00150e9:	58                   	pop    eax
c00150ea:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c00150ef:	5a                   	pop    edx
c00150f0:	57                   	push   edi
c00150f1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150f7:	e8 76 c0 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c00150fc:	59                   	pop    ecx
c00150fd:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c0015102:	5f                   	pop    edi
c0015103:	68 0b b0 02 c0       	push   0xc002b00b
c0015108:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001510e:	e8 39 c0 ff ff       	call   c001114c <VgaText::puts(char const*)>
c0015113:	58                   	pop    eax
c0015114:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c0015119:	5a                   	pop    edx
c001511a:	56                   	push   esi
c001511b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015121:	e8 4c c0 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c0015126:	59                   	pop    ecx
c0015127:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c001512c:	5e                   	pop    esi
c001512d:	68 13 b0 02 c0       	push   0xc002b013
c0015132:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015138:	e8 0f c0 ff ff       	call   c001114c <VgaText::puts(char const*)>
c001513d:	5f                   	pop    edi
c001513e:	58                   	pop    eax
c001513f:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c0015144:	55                   	push   ebp
c0015145:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001514b:	e8 22 c0 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c0015150:	58                   	pop    eax
c0015151:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c0015156:	5a                   	pop    edx
c0015157:	68 1b b0 02 c0       	push   0xc002b01b
c001515c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015162:	e8 e5 bf ff ff       	call   c001114c <VgaText::puts(char const*)>
c0015167:	0f 21 c0             	mov    eax,db0
c001516a:	59                   	pop    ecx
c001516b:	5e                   	pop    esi
c001516c:	50                   	push   eax
c001516d:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c0015172:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015178:	e8 f5 bf ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c001517d:	5f                   	pop    edi
c001517e:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c0015183:	5d                   	pop    ebp
c0015184:	68 24 b0 02 c0       	push   0xc002b024
c0015189:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001518f:	e8 b8 bf ff ff       	call   c001114c <VgaText::puts(char const*)>
c0015194:	0f 21 c8             	mov    eax,db1
c0015197:	5a                   	pop    edx
c0015198:	59                   	pop    ecx
c0015199:	50                   	push   eax
c001519a:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c001519f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151a5:	e8 c8 bf ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c00151aa:	5e                   	pop    esi
c00151ab:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c00151b0:	5f                   	pop    edi
c00151b1:	68 2c b0 02 c0       	push   0xc002b02c
c00151b6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151bc:	e8 8b bf ff ff       	call   c001114c <VgaText::puts(char const*)>
c00151c1:	0f 21 d0             	mov    eax,db2
c00151c4:	5d                   	pop    ebp
c00151c5:	5a                   	pop    edx
c00151c6:	50                   	push   eax
c00151c7:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c00151cc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151d2:	e8 9b bf ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c00151d7:	59                   	pop    ecx
c00151d8:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c00151dd:	5e                   	pop    esi
c00151de:	68 34 b0 02 c0       	push   0xc002b034
c00151e3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151e9:	e8 5e bf ff ff       	call   c001114c <VgaText::puts(char const*)>
c00151ee:	0f 21 d8             	mov    eax,db3
c00151f1:	5f                   	pop    edi
c00151f2:	5d                   	pop    ebp
c00151f3:	50                   	push   eax
c00151f4:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c00151f9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151ff:	e8 6e bf ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c0015204:	58                   	pop    eax
c0015205:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c001520a:	5a                   	pop    edx
c001520b:	68 3c b0 02 c0       	push   0xc002b03c
c0015210:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015216:	e8 31 bf ff ff       	call   c001114c <VgaText::puts(char const*)>
c001521b:	0f 21 f0             	mov    eax,db6
c001521e:	59                   	pop    ecx
c001521f:	5e                   	pop    esi
c0015220:	50                   	push   eax
c0015221:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c0015226:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001522c:	e8 41 bf ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c0015231:	5f                   	pop    edi
c0015232:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c0015237:	5d                   	pop    ebp
c0015238:	68 44 b0 02 c0       	push   0xc002b044
c001523d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015243:	e8 04 bf ff ff       	call   c001114c <VgaText::puts(char const*)>
c0015248:	0f 21 f8             	mov    eax,db7
c001524b:	5a                   	pop    edx
c001524c:	59                   	pop    ecx
c001524d:	50                   	push   eax
c001524e:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c0015253:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015259:	e8 14 bf ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c001525e:	5e                   	pop    esi
c001525f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0015262:	e8 0a 85 00 00       	call   c001d771 <Thr::getDriverNameFromAddress(unsigned long)>
c0015267:	83 c4 10             	add    esp,0x10
c001526a:	85 c0                	test   eax,eax
c001526c:	74 7d                	je     c00152eb <displayDebugInfo(regs*)+0x48b>
c001526e:	89 c6                	mov    esi,eax
c0015270:	50                   	push   eax
c0015271:	50                   	push   eax
c0015272:	56                   	push   esi
c0015273:	68 4c b0 02 c0       	push   0xc002b04c
c0015278:	e8 6d dd ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001527d:	5a                   	pop    edx
c001527e:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c0015283:	59                   	pop    ecx
c0015284:	68 5a b0 02 c0       	push   0xc002b05a
c0015289:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001528f:	e8 b8 be ff ff       	call   c001114c <VgaText::puts(char const*)>
c0015294:	5f                   	pop    edi
c0015295:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c001529a:	5d                   	pop    ebp
c001529b:	56                   	push   esi
c001529c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00152a2:	e8 a5 be ff ff       	call   c001114c <VgaText::puts(char const*)>
c00152a7:	58                   	pop    eax
c00152a8:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c00152ad:	5a                   	pop    edx
c00152ae:	68 66 b0 02 c0       	push   0xc002b066
c00152b3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00152b9:	e8 8e be ff ff       	call   c001114c <VgaText::puts(char const*)>
c00152be:	59                   	pop    ecx
c00152bf:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c00152c4:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c00152ca:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00152cd:	e8 d6 84 00 00       	call   c001d7a8 <Thr::getDriverOffsetFromAddress(unsigned long)>
c00152d2:	5b                   	pop    ebx
c00152d3:	5d                   	pop    ebp
c00152d4:	50                   	push   eax
c00152d5:	57                   	push   edi
c00152d6:	e8 97 be ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c00152db:	58                   	pop    eax
c00152dc:	5a                   	pop    edx
c00152dd:	56                   	push   esi
c00152de:	68 72 b0 02 c0       	push   0xc002b072
c00152e3:	e8 02 dd ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c00152e8:	83 c4 10             	add    esp,0x10
c00152eb:	fa                   	cli    
c00152ec:	f4                   	hlt    
c00152ed:	eb fe                	jmp    c00152ed <displayDebugInfo(regs*)+0x48d>

c00152ef <x87EmulHandler(regs*, void*)>:
c00152ef:	53                   	push   ebx
c00152f0:	83 ec 14             	sub    esp,0x14
c00152f3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00152f7:	53                   	push   ebx
c00152f8:	e8 1b a8 00 00       	call   c001fb18 <Vm::x87Handler(regs*)>
c00152fd:	83 c4 10             	add    esp,0x10
c0015300:	84 c0                	test   al,al
c0015302:	74 05                	je     c0015309 <x87EmulHandler(regs*, void*)+0x1a>
c0015304:	83 c4 08             	add    esp,0x8
c0015307:	5b                   	pop    ebx
c0015308:	c3                   	ret    
c0015309:	83 ec 0c             	sub    esp,0xc
c001530c:	68 82 b0 02 c0       	push   0xc002b082
c0015311:	e8 d4 dc ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0015316:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015319:	e8 42 fb ff ff       	call   c0014e60 <displayDebugInfo(regs*)>

c001531e <gpFault(regs*, void*)>:
c001531e:	53                   	push   ebx
c001531f:	83 ec 14             	sub    esp,0x14
c0015322:	c7 05 78 e6 02 c0 95 ee 01 c0 	mov    DWORD PTR ds:0xc002e678,0xc001ee95
c001532c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015330:	53                   	push   ebx
c0015331:	e8 5f 9b 00 00       	call   c001ee95 <Vm::faultHandler(regs*)>
c0015336:	83 c4 10             	add    esp,0x10
c0015339:	84 c0                	test   al,al
c001533b:	74 05                	je     c0015342 <gpFault(regs*, void*)+0x24>
c001533d:	83 c4 08             	add    esp,0x8
c0015340:	5b                   	pop    ebx
c0015341:	c3                   	ret    
c0015342:	83 ec 0c             	sub    esp,0xc
c0015345:	68 98 b0 02 c0       	push   0xc002b098
c001534a:	e8 9b dc ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001534f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015352:	e8 09 fb ff ff       	call   c0014e60 <displayDebugInfo(regs*)>

c0015357 <pgFault(regs*, void*)>:
c0015357:	83 ec 14             	sub    esp,0x14
c001535a:	0f 20 d0             	mov    eax,cr2
c001535d:	50                   	push   eax
c001535e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015363:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015366:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001536c:	e8 9f d8 ff ff       	call   c0012c10 <VAS::tryLoadBackOffDisk(unsigned long)>
c0015371:	83 c4 10             	add    esp,0x10
c0015374:	84 c0                	test   al,al
c0015376:	74 04                	je     c001537c <pgFault(regs*, void*)+0x25>
c0015378:	83 c4 0c             	add    esp,0xc
c001537b:	c3                   	ret    
c001537c:	83 ec 0c             	sub    esp,0xc
c001537f:	68 b3 b0 02 c0       	push   0xc002b0b3
c0015384:	e8 61 dc ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0015389:	58                   	pop    eax
c001538a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001538e:	e8 cd fa ff ff       	call   c0014e60 <displayDebugInfo(regs*)>

c0015393 <otherISRHandler(regs*, void*)>:
c0015393:	53                   	push   ebx
c0015394:	83 ec 0c             	sub    esp,0xc
c0015397:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001539b:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001539e:	50                   	push   eax
c001539f:	50                   	push   eax
c00153a0:	68 c5 b0 02 c0       	push   0xc002b0c5
c00153a5:	e8 40 dc ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c00153aa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00153ad:	e8 ae fa ff ff       	call   c0014e60 <displayDebugInfo(regs*)>

c00153b2 <opcodeFault(regs*, void*)>:
c00153b2:	55                   	push   ebp
c00153b3:	89 e5                	mov    ebp,esp
c00153b5:	56                   	push   esi
c00153b6:	53                   	push   ebx
c00153b7:	83 ec 40             	sub    esp,0x40
c00153ba:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c00153bf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00153c5:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c00153cb:	84 c0                	test   al,al
c00153cd:	74 24                	je     c00153f3 <opcodeFault(regs*, void*)+0x41>
c00153cf:	83 ec 0c             	sub    esp,0xc
c00153d2:	68 e4 b0 02 c0       	push   0xc002b0e4
c00153d7:	e8 0e dc ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c00153dc:	83 c4 10             	add    esp,0x10
c00153df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153e2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153e5:	8d 50 19             	lea    edx,[eax+0x19]
c00153e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153eb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153ee:	e9 be 05 00 00       	jmp    c00159b1 <opcodeFault(regs*, void*)+0x5ff>
c00153f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153f6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153f9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00153fc:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0015400:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0015404:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015407:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001540a:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001540d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015410:	8a 00                	mov    al,BYTE PTR [eax]
c0015412:	3c f0                	cmp    al,0xf0
c0015414:	75 17                	jne    c001542d <opcodeFault(regs*, void*)+0x7b>
c0015416:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015419:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001541c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001541f:	8d 50 01             	lea    edx,[eax+0x1]
c0015422:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015425:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015428:	e9 da 00 00 00       	jmp    c0015507 <opcodeFault(regs*, void*)+0x155>
c001542d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015430:	8a 00                	mov    al,BYTE PTR [eax]
c0015432:	3c f2                	cmp    al,0xf2
c0015434:	74 09                	je     c001543f <opcodeFault(regs*, void*)+0x8d>
c0015436:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015439:	8a 00                	mov    al,BYTE PTR [eax]
c001543b:	3c f3                	cmp    al,0xf3
c001543d:	75 1b                	jne    c001545a <opcodeFault(regs*, void*)+0xa8>
c001543f:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015443:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015446:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015449:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001544c:	8d 50 01             	lea    edx,[eax+0x1]
c001544f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015452:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015455:	e9 ad 00 00 00       	jmp    c0015507 <opcodeFault(regs*, void*)+0x155>
c001545a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001545d:	8a 00                	mov    al,BYTE PTR [eax]
c001545f:	3c 66                	cmp    al,0x66
c0015461:	75 1f                	jne    c0015482 <opcodeFault(regs*, void*)+0xd0>
c0015463:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015467:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c001546b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001546e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015471:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015474:	8d 50 01             	lea    edx,[eax+0x1]
c0015477:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001547a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001547d:	e9 85 00 00 00       	jmp    c0015507 <opcodeFault(regs*, void*)+0x155>
c0015482:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015485:	8a 00                	mov    al,BYTE PTR [eax]
c0015487:	3c 67                	cmp    al,0x67
c0015489:	75 18                	jne    c00154a3 <opcodeFault(regs*, void*)+0xf1>
c001548b:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001548f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015492:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015495:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015498:	8d 50 01             	lea    edx,[eax+0x1]
c001549b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001549e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154a1:	eb 64                	jmp    c0015507 <opcodeFault(regs*, void*)+0x155>
c00154a3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154a6:	8a 00                	mov    al,BYTE PTR [eax]
c00154a8:	3c 2e                	cmp    al,0x2e
c00154aa:	74 09                	je     c00154b5 <opcodeFault(regs*, void*)+0x103>
c00154ac:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154af:	8a 00                	mov    al,BYTE PTR [eax]
c00154b1:	3c 3e                	cmp    al,0x3e
c00154b3:	75 18                	jne    c00154cd <opcodeFault(regs*, void*)+0x11b>
c00154b5:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00154b9:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00154bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154bf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154c2:	8d 50 01             	lea    edx,[eax+0x1]
c00154c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154c8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154cb:	eb 3a                	jmp    c0015507 <opcodeFault(regs*, void*)+0x155>
c00154cd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154d0:	8a 00                	mov    al,BYTE PTR [eax]
c00154d2:	3c 36                	cmp    al,0x36
c00154d4:	74 1b                	je     c00154f1 <opcodeFault(regs*, void*)+0x13f>
c00154d6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154d9:	8a 00                	mov    al,BYTE PTR [eax]
c00154db:	3c 26                	cmp    al,0x26
c00154dd:	74 12                	je     c00154f1 <opcodeFault(regs*, void*)+0x13f>
c00154df:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154e2:	8a 00                	mov    al,BYTE PTR [eax]
c00154e4:	3c 64                	cmp    al,0x64
c00154e6:	74 09                	je     c00154f1 <opcodeFault(regs*, void*)+0x13f>
c00154e8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154eb:	8a 00                	mov    al,BYTE PTR [eax]
c00154ed:	3c 65                	cmp    al,0x65
c00154ef:	75 16                	jne    c0015507 <opcodeFault(regs*, void*)+0x155>
c00154f1:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00154f5:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00154f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154fb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154fe:	8d 50 01             	lea    edx,[eax+0x1]
c0015501:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015504:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015507:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001550a:	8a 00                	mov    al,BYTE PTR [eax]
c001550c:	3c 0f                	cmp    al,0xf
c001550e:	0f 85 ad 00 00 00    	jne    c00155c1 <opcodeFault(regs*, void*)+0x20f>
c0015514:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015517:	40                   	inc    eax
c0015518:	8a 00                	mov    al,BYTE PTR [eax]
c001551a:	3c c2                	cmp    al,0xc2
c001551c:	74 0e                	je     c001552c <opcodeFault(regs*, void*)+0x17a>
c001551e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015521:	40                   	inc    eax
c0015522:	8a 00                	mov    al,BYTE PTR [eax]
c0015524:	3c c3                	cmp    al,0xc3
c0015526:	0f 85 95 00 00 00    	jne    c00155c1 <opcodeFault(regs*, void*)+0x20f>
c001552c:	83 ec 0c             	sub    esp,0xc
c001552f:	68 07 b1 02 c0       	push   0xc002b107
c0015534:	e8 b1 da ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0015539:	83 c4 10             	add    esp,0x10
c001553c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001553f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015542:	8d 50 01             	lea    edx,[eax+0x1]
c0015545:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015548:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001554b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001554e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015551:	8a 00                	mov    al,BYTE PTR [eax]
c0015553:	8d 50 fe             	lea    edx,[eax-0x2]
c0015556:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015559:	88 10                	mov    BYTE PTR [eax],dl
c001555b:	8d 45 c2             	lea    eax,[ebp-0x3e]
c001555e:	50                   	push   eax
c001555f:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0015562:	50                   	push   eax
c0015563:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0015566:	50                   	push   eax
c0015567:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001556a:	e8 e7 47 00 00       	call   c0019d56 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001556f:	83 c4 10             	add    esp,0x10
c0015572:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015575:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015578:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c001557b:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c001557e:	01 d0                	add    eax,edx
c0015580:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0015583:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015586:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015589:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c001558c:	48                   	dec    eax
c001558d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0015590:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015593:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0015596:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015599:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001559c:	83 ec 04             	sub    esp,0x4
c001559f:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00155a2:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00155a5:	50                   	push   eax
c00155a6:	e8 09 ac fe ff       	call   c00001b4 <voodooXADD>
c00155ab:	83 c4 10             	add    esp,0x10
c00155ae:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00155b1:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00155b4:	01 c2                	add    edx,eax
c00155b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155b9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00155bc:	e9 f0 03 00 00       	jmp    c00159b1 <opcodeFault(regs*, void*)+0x5ff>
c00155c1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155c4:	8a 00                	mov    al,BYTE PTR [eax]
c00155c6:	3c 0f                	cmp    al,0xf
c00155c8:	0f 85 8b 01 00 00    	jne    c0015759 <opcodeFault(regs*, void*)+0x3a7>
c00155ce:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155d1:	40                   	inc    eax
c00155d2:	8a 00                	mov    al,BYTE PTR [eax]
c00155d4:	3c c7                	cmp    al,0xc7
c00155d6:	0f 86 7d 01 00 00    	jbe    c0015759 <opcodeFault(regs*, void*)+0x3a7>
c00155dc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155df:	40                   	inc    eax
c00155e0:	8a 00                	mov    al,BYTE PTR [eax]
c00155e2:	3c cf                	cmp    al,0xcf
c00155e4:	0f 87 6f 01 00 00    	ja     c0015759 <opcodeFault(regs*, void*)+0x3a7>
c00155ea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155ed:	40                   	inc    eax
c00155ee:	8a 00                	mov    al,BYTE PTR [eax]
c00155f0:	83 c0 38             	add    eax,0x38
c00155f3:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c00155f6:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00155fa:	75 0b                	jne    c0015607 <opcodeFault(regs*, void*)+0x255>
c00155fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155ff:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015602:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015605:	eb 75                	jmp    c001567c <opcodeFault(regs*, void*)+0x2ca>
c0015607:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001560b:	75 0b                	jne    c0015618 <opcodeFault(regs*, void*)+0x266>
c001560d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015610:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015613:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015616:	eb 64                	jmp    c001567c <opcodeFault(regs*, void*)+0x2ca>
c0015618:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001561c:	75 0b                	jne    c0015629 <opcodeFault(regs*, void*)+0x277>
c001561e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015621:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015624:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015627:	eb 53                	jmp    c001567c <opcodeFault(regs*, void*)+0x2ca>
c0015629:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c001562d:	75 0b                	jne    c001563a <opcodeFault(regs*, void*)+0x288>
c001562f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015632:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015635:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015638:	eb 42                	jmp    c001567c <opcodeFault(regs*, void*)+0x2ca>
c001563a:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c001563e:	75 0b                	jne    c001564b <opcodeFault(regs*, void*)+0x299>
c0015640:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015643:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0015646:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015649:	eb 31                	jmp    c001567c <opcodeFault(regs*, void*)+0x2ca>
c001564b:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c001564f:	75 0b                	jne    c001565c <opcodeFault(regs*, void*)+0x2aa>
c0015651:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015654:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0015657:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001565a:	eb 20                	jmp    c001567c <opcodeFault(regs*, void*)+0x2ca>
c001565c:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015660:	75 0b                	jne    c001566d <opcodeFault(regs*, void*)+0x2bb>
c0015662:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015665:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015668:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001566b:	eb 0f                	jmp    c001567c <opcodeFault(regs*, void*)+0x2ca>
c001566d:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015671:	75 09                	jne    c001567c <opcodeFault(regs*, void*)+0x2ca>
c0015673:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015676:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015679:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001567c:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0015680:	74 10                	je     c0015692 <opcodeFault(regs*, void*)+0x2e0>
c0015682:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0015689:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0015690:	eb 2d                	jmp    c00156bf <opcodeFault(regs*, void*)+0x30d>
c0015692:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015695:	c1 e0 18             	shl    eax,0x18
c0015698:	89 c2                	mov    edx,eax
c001569a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001569d:	c1 e0 08             	shl    eax,0x8
c00156a0:	25 00 00 ff 00       	and    eax,0xff0000
c00156a5:	09 c2                	or     edx,eax
c00156a7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00156aa:	c1 e8 08             	shr    eax,0x8
c00156ad:	25 00 ff 00 00       	and    eax,0xff00
c00156b2:	09 c2                	or     edx,eax
c00156b4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00156b7:	c1 e8 18             	shr    eax,0x18
c00156ba:	09 d0                	or     eax,edx
c00156bc:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00156bf:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00156c3:	75 0b                	jne    c00156d0 <opcodeFault(regs*, void*)+0x31e>
c00156c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156c8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156cb:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00156ce:	eb 75                	jmp    c0015745 <opcodeFault(regs*, void*)+0x393>
c00156d0:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00156d4:	75 0b                	jne    c00156e1 <opcodeFault(regs*, void*)+0x32f>
c00156d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156d9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156dc:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00156df:	eb 64                	jmp    c0015745 <opcodeFault(regs*, void*)+0x393>
c00156e1:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00156e5:	75 0b                	jne    c00156f2 <opcodeFault(regs*, void*)+0x340>
c00156e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156ea:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156ed:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00156f0:	eb 53                	jmp    c0015745 <opcodeFault(regs*, void*)+0x393>
c00156f2:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00156f6:	75 0b                	jne    c0015703 <opcodeFault(regs*, void*)+0x351>
c00156f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156fb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156fe:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0015701:	eb 42                	jmp    c0015745 <opcodeFault(regs*, void*)+0x393>
c0015703:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015707:	75 0b                	jne    c0015714 <opcodeFault(regs*, void*)+0x362>
c0015709:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001570c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001570f:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0015712:	eb 31                	jmp    c0015745 <opcodeFault(regs*, void*)+0x393>
c0015714:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015718:	75 0b                	jne    c0015725 <opcodeFault(regs*, void*)+0x373>
c001571a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001571d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015720:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015723:	eb 20                	jmp    c0015745 <opcodeFault(regs*, void*)+0x393>
c0015725:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015729:	75 0b                	jne    c0015736 <opcodeFault(regs*, void*)+0x384>
c001572b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001572e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015731:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0015734:	eb 0f                	jmp    c0015745 <opcodeFault(regs*, void*)+0x393>
c0015736:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001573a:	75 09                	jne    c0015745 <opcodeFault(regs*, void*)+0x393>
c001573c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001573f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015742:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0015745:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015748:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001574b:	8d 50 02             	lea    edx,[eax+0x2]
c001574e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015751:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015754:	e9 58 02 00 00       	jmp    c00159b1 <opcodeFault(regs*, void*)+0x5ff>
c0015759:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001575c:	8a 00                	mov    al,BYTE PTR [eax]
c001575e:	3c 0f                	cmp    al,0xf
c0015760:	0f 85 76 01 00 00    	jne    c00158dc <opcodeFault(regs*, void*)+0x52a>
c0015766:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015769:	40                   	inc    eax
c001576a:	8a 00                	mov    al,BYTE PTR [eax]
c001576c:	3c c7                	cmp    al,0xc7
c001576e:	0f 85 68 01 00 00    	jne    c00158dc <opcodeFault(regs*, void*)+0x52a>
c0015774:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015777:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001577a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001577d:	8d 50 01             	lea    edx,[eax+0x1]
c0015780:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015783:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015786:	8d 45 ba             	lea    eax,[ebp-0x46]
c0015789:	50                   	push   eax
c001578a:	8d 45 bb             	lea    eax,[ebp-0x45]
c001578d:	50                   	push   eax
c001578e:	8d 45 bc             	lea    eax,[ebp-0x44]
c0015791:	50                   	push   eax
c0015792:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015795:	e8 bc 45 00 00       	call   c0019d56 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001579a:	83 c4 10             	add    esp,0x10
c001579d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00157a0:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c00157a3:	83 f0 01             	xor    eax,0x1
c00157a6:	84 c0                	test   al,al
c00157a8:	0f 84 2e 01 00 00    	je     c00158dc <opcodeFault(regs*, void*)+0x52a>
c00157ae:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c00157b1:	3c 01                	cmp    al,0x1
c00157b3:	0f 85 23 01 00 00    	jne    c00158dc <opcodeFault(regs*, void*)+0x52a>
c00157b9:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c00157bc:	83 f0 01             	xor    eax,0x1
c00157bf:	84 c0                	test   al,al
c00157c1:	0f 84 15 01 00 00    	je     c00158dc <opcodeFault(regs*, void*)+0x52a>
c00157c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ca:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00157cd:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00157d0:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c00157d7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00157da:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00157dd:	89 c2                	mov    edx,eax
c00157df:	b8 00 00 00 00       	mov    eax,0x0
c00157e4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00157e7:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00157ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ed:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00157f0:	ba 00 00 00 00       	mov    edx,0x0
c00157f5:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c00157f8:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c00157fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157fe:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015801:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015804:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c001580b:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001580e:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015811:	89 c2                	mov    edx,eax
c0015813:	b8 00 00 00 00       	mov    eax,0x0
c0015818:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001581b:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c001581e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015821:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015824:	ba 00 00 00 00       	mov    edx,0x0
c0015829:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c001582c:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c001582f:	e8 50 86 00 00       	call   c001de84 <lockScheduler()>
c0015834:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015837:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001583a:	8b 00                	mov    eax,DWORD PTR [eax]
c001583c:	89 c1                	mov    ecx,eax
c001583e:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0015841:	89 cb                	mov    ebx,ecx
c0015843:	89 d0                	mov    eax,edx
c0015845:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0015848:	89 c6                	mov    esi,eax
c001584a:	89 f0                	mov    eax,esi
c001584c:	09 d8                	or     eax,ebx
c001584e:	85 c0                	test   eax,eax
c0015850:	75 21                	jne    c0015873 <opcodeFault(regs*, void*)+0x4c1>
c0015852:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0015855:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015858:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001585b:	89 01                	mov    DWORD PTR [ecx],eax
c001585d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015860:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015863:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015866:	83 c8 40             	or     eax,0x40
c0015869:	89 c2                	mov    edx,eax
c001586b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001586e:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015871:	eb 3e                	jmp    c00158b1 <opcodeFault(regs*, void*)+0x4ff>
c0015873:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015876:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015879:	8b 00                	mov    eax,DWORD PTR [eax]
c001587b:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001587e:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015881:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0015884:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015887:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001588a:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001588d:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015890:	89 d0                	mov    eax,edx
c0015892:	31 d2                	xor    edx,edx
c0015894:	89 c3                	mov    ebx,eax
c0015896:	89 d6                	mov    esi,edx
c0015898:	89 da                	mov    edx,ebx
c001589a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001589d:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00158a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158a3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00158a6:	83 e0 bf             	and    eax,0xffffffbf
c00158a9:	89 c2                	mov    edx,eax
c00158ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ae:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00158b1:	e8 d0 85 00 00       	call   c001de86 <unlockScheduler()>
c00158b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158b9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158bc:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c00158bf:	01 c2                	add    edx,eax
c00158c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158c4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00158c7:	83 ec 0c             	sub    esp,0xc
c00158ca:	68 16 b1 02 c0       	push   0xc002b116
c00158cf:	e8 16 d7 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c00158d4:	83 c4 10             	add    esp,0x10
c00158d7:	e9 d5 00 00 00       	jmp    c00159b1 <opcodeFault(regs*, void*)+0x5ff>
c00158dc:	83 ec 0c             	sub    esp,0xc
c00158df:	68 29 b1 02 c0       	push   0xc002b129
c00158e4:	e8 01 d7 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c00158e9:	83 c4 10             	add    esp,0x10
c00158ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ef:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00158f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158f5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00158f8:	c1 e0 04             	shl    eax,0x4
c00158fb:	01 d0                	add    eax,edx
c00158fd:	83 c0 03             	add    eax,0x3
c0015900:	8a 00                	mov    al,BYTE PTR [eax]
c0015902:	0f b6 d8             	movzx  ebx,al
c0015905:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015908:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001590b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001590e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015911:	c1 e0 04             	shl    eax,0x4
c0015914:	01 d0                	add    eax,edx
c0015916:	83 c0 02             	add    eax,0x2
c0015919:	8a 00                	mov    al,BYTE PTR [eax]
c001591b:	0f b6 c8             	movzx  ecx,al
c001591e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015921:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015924:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015927:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001592a:	c1 e0 04             	shl    eax,0x4
c001592d:	01 d0                	add    eax,edx
c001592f:	40                   	inc    eax
c0015930:	8a 00                	mov    al,BYTE PTR [eax]
c0015932:	0f b6 d0             	movzx  edx,al
c0015935:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015938:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c001593b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001593e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015941:	c1 e0 04             	shl    eax,0x4
c0015944:	01 f0                	add    eax,esi
c0015946:	8a 00                	mov    al,BYTE PTR [eax]
c0015948:	0f b6 c0             	movzx  eax,al
c001594b:	83 ec 0c             	sub    esp,0xc
c001594e:	53                   	push   ebx
c001594f:	51                   	push   ecx
c0015950:	52                   	push   edx
c0015951:	50                   	push   eax
c0015952:	68 3c b1 02 c0       	push   0xc002b13c
c0015957:	e8 8e d6 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001595c:	83 c4 20             	add    esp,0x20
c001595f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015962:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015965:	83 c0 03             	add    eax,0x3
c0015968:	8a 00                	mov    al,BYTE PTR [eax]
c001596a:	0f b6 d8             	movzx  ebx,al
c001596d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015970:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015973:	83 c0 02             	add    eax,0x2
c0015976:	8a 00                	mov    al,BYTE PTR [eax]
c0015978:	0f b6 c8             	movzx  ecx,al
c001597b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001597e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015981:	40                   	inc    eax
c0015982:	8a 00                	mov    al,BYTE PTR [eax]
c0015984:	0f b6 d0             	movzx  edx,al
c0015987:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001598a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001598d:	8a 00                	mov    al,BYTE PTR [eax]
c001598f:	0f b6 c0             	movzx  eax,al
c0015992:	83 ec 0c             	sub    esp,0xc
c0015995:	53                   	push   ebx
c0015996:	51                   	push   ecx
c0015997:	52                   	push   edx
c0015998:	50                   	push   eax
c0015999:	68 64 b1 02 c0       	push   0xc002b164
c001599e:	e8 47 d6 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c00159a3:	83 c4 20             	add    esp,0x20
c00159a6:	83 ec 0c             	sub    esp,0xc
c00159a9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00159ac:	e8 af f4 ff ff       	call   c0014e60 <displayDebugInfo(regs*)>
c00159b1:	8d 65 f8             	lea    esp,[ebp-0x8]
c00159b4:	5b                   	pop    ebx
c00159b5:	5e                   	pop    esi
c00159b6:	5d                   	pop    ebp
c00159b7:	c3                   	ret    

c00159b8 <displayProgramFault(char const*)>:
c00159b8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00159bd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00159c0:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00159c6:	85 c0                	test   eax,eax
c00159c8:	74 15                	je     c00159df <displayProgramFault(char const*)+0x27>
c00159ca:	83 ec 0c             	sub    esp,0xc
c00159cd:	6a 04                	push   0x4
c00159cf:	6a 0f                	push   0xf
c00159d1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00159d5:	50                   	push   eax
c00159d6:	e8 33 b4 ff ff       	call   c0010e0e <VgaText::puts(char const*, VgaColour, VgaColour)>
c00159db:	83 c4 1c             	add    esp,0x1c
c00159de:	c3                   	ret    
c00159df:	c3                   	ret    

c00159e0 <setupInterruptController()>:
c00159e0:	55                   	push   ebp
c00159e1:	89 e5                	mov    ebp,esp
c00159e3:	53                   	push   ebx
c00159e4:	83 ec 24             	sub    esp,0x24
c00159e7:	b8 00 00 00 00       	mov    eax,0x0
c00159ec:	85 c0                	test   eax,eax
c00159ee:	0f 95 c0             	setne  al
c00159f1:	84 c0                	test   al,al
c00159f3:	74 5b                	je     c0015a50 <setupInterruptController()+0x70>
c00159f5:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c00159fc:	83 ec 0c             	sub    esp,0xc
c00159ff:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015a02:	e8 3c 9e ff ff       	call   c000f843 <malloc>
c0015a07:	83 c4 10             	add    esp,0x10
c0015a0a:	89 c3                	mov    ebx,eax
c0015a0c:	83 ec 0c             	sub    esp,0xc
c0015a0f:	53                   	push   ebx
c0015a10:	e8 c7 ff 00 00       	call   c00259dc <APIC::APIC()>
c0015a15:	83 c4 10             	add    esp,0x10
c0015a18:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015a1b:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015a1e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015a21:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a23:	83 c0 08             	add    eax,0x8
c0015a26:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a28:	6a 00                	push   0x0
c0015a2a:	6a 00                	push   0x0
c0015a2c:	6a 00                	push   0x0
c0015a2e:	52                   	push   edx
c0015a2f:	ff d0                	call   eax
c0015a31:	83 c4 10             	add    esp,0x10
c0015a34:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0015a39:	83 ec 08             	sub    esp,0x8
c0015a3c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015a3f:	50                   	push   eax
c0015a40:	e8 cb e9 ff ff       	call   c0014410 <Device::addChild(Device*)>
c0015a45:	83 c4 10             	add    esp,0x10
c0015a48:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015a4b:	e9 52 03 00 00       	jmp    c0015da2 <setupInterruptController()+0x3c2>
c0015a50:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0015a55:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015a5b:	83 e0 01             	and    eax,0x1
c0015a5e:	84 c0                	test   al,al
c0015a60:	0f 95 c0             	setne  al
c0015a63:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0015a66:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015a6d:	83 ec 0c             	sub    esp,0xc
c0015a70:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015a73:	e8 cb 9d ff ff       	call   c000f843 <malloc>
c0015a78:	83 c4 10             	add    esp,0x10
c0015a7b:	89 c3                	mov    ebx,eax
c0015a7d:	83 ec 0c             	sub    esp,0xc
c0015a80:	53                   	push   ebx
c0015a81:	e8 ae 04 01 00       	call   c0025f34 <PIC::PIC()>
c0015a86:	83 c4 10             	add    esp,0x10
c0015a89:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015a8c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a8f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a92:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a94:	83 c0 08             	add    eax,0x8
c0015a97:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a99:	6a 00                	push   0x0
c0015a9b:	6a 00                	push   0x0
c0015a9d:	6a 00                	push   0x0
c0015a9f:	52                   	push   edx
c0015aa0:	ff d0                	call   eax
c0015aa2:	83 c4 10             	add    esp,0x10
c0015aa5:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015aa9:	74 73                	je     c0015b1e <setupInterruptController()+0x13e>
c0015aab:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015aae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ab1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ab3:	83 c0 0c             	add    eax,0xc
c0015ab6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ab8:	6a 00                	push   0x0
c0015aba:	6a 00                	push   0x0
c0015abc:	6a 00                	push   0x0
c0015abe:	52                   	push   edx
c0015abf:	ff d0                	call   eax
c0015ac1:	83 c4 10             	add    esp,0x10
c0015ac4:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015ac8:	74 15                	je     c0015adf <setupInterruptController()+0xff>
c0015aca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015acd:	8b 00                	mov    eax,DWORD PTR [eax]
c0015acf:	83 c0 04             	add    eax,0x4
c0015ad2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ad4:	83 ec 0c             	sub    esp,0xc
c0015ad7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ada:	ff d0                	call   eax
c0015adc:	83 c4 10             	add    esp,0x10
c0015adf:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015ae6:	83 ec 0c             	sub    esp,0xc
c0015ae9:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015aec:	e8 52 9d ff ff       	call   c000f843 <malloc>
c0015af1:	83 c4 10             	add    esp,0x10
c0015af4:	89 c3                	mov    ebx,eax
c0015af6:	83 ec 0c             	sub    esp,0xc
c0015af9:	53                   	push   ebx
c0015afa:	e8 dd fe 00 00       	call   c00259dc <APIC::APIC()>
c0015aff:	83 c4 10             	add    esp,0x10
c0015b02:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015b05:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015b08:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b0b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b0d:	83 c0 08             	add    eax,0x8
c0015b10:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b12:	6a 00                	push   0x0
c0015b14:	6a 00                	push   0x0
c0015b16:	6a 00                	push   0x0
c0015b18:	52                   	push   edx
c0015b19:	ff d0                	call   eax
c0015b1b:	83 c4 10             	add    esp,0x10
c0015b1e:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0015b23:	83 ec 08             	sub    esp,0x8
c0015b26:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b29:	50                   	push   eax
c0015b2a:	e8 e1 e8 ff ff       	call   c0014410 <Device::addChild(Device*)>
c0015b2f:	83 c4 10             	add    esp,0x10
c0015b32:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b35:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b37:	83 c0 24             	add    eax,0x24
c0015b3a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b3c:	6a 00                	push   0x0
c0015b3e:	68 93 53 01 c0       	push   0xc0015393
c0015b43:	6a 00                	push   0x0
c0015b45:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b48:	ff d0                	call   eax
c0015b4a:	83 c4 10             	add    esp,0x10
c0015b4d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b50:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b52:	83 c0 24             	add    eax,0x24
c0015b55:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b57:	6a 00                	push   0x0
c0015b59:	68 93 53 01 c0       	push   0xc0015393
c0015b5e:	6a 01                	push   0x1
c0015b60:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b63:	ff d0                	call   eax
c0015b65:	83 c4 10             	add    esp,0x10
c0015b68:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b6b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b6d:	83 c0 24             	add    eax,0x24
c0015b70:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b72:	6a 00                	push   0x0
c0015b74:	68 bd 4c 01 c0       	push   0xc0014cbd
c0015b79:	6a 02                	push   0x2
c0015b7b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b7e:	ff d0                	call   eax
c0015b80:	83 c4 10             	add    esp,0x10
c0015b83:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b86:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b88:	83 c0 24             	add    eax,0x24
c0015b8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b8d:	6a 00                	push   0x0
c0015b8f:	68 93 53 01 c0       	push   0xc0015393
c0015b94:	6a 03                	push   0x3
c0015b96:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b99:	ff d0                	call   eax
c0015b9b:	83 c4 10             	add    esp,0x10
c0015b9e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ba1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ba3:	83 c0 24             	add    eax,0x24
c0015ba6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ba8:	6a 00                	push   0x0
c0015baa:	68 93 53 01 c0       	push   0xc0015393
c0015baf:	6a 04                	push   0x4
c0015bb1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bb4:	ff d0                	call   eax
c0015bb6:	83 c4 10             	add    esp,0x10
c0015bb9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bbc:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bbe:	83 c0 24             	add    eax,0x24
c0015bc1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bc3:	6a 00                	push   0x0
c0015bc5:	68 93 53 01 c0       	push   0xc0015393
c0015bca:	6a 05                	push   0x5
c0015bcc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bcf:	ff d0                	call   eax
c0015bd1:	83 c4 10             	add    esp,0x10
c0015bd4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bd7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bd9:	83 c0 24             	add    eax,0x24
c0015bdc:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bde:	6a 00                	push   0x0
c0015be0:	68 b2 53 01 c0       	push   0xc00153b2
c0015be5:	6a 06                	push   0x6
c0015be7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bea:	ff d0                	call   eax
c0015bec:	83 c4 10             	add    esp,0x10
c0015bef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bf2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bf4:	83 c0 24             	add    eax,0x24
c0015bf7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bf9:	6a 00                	push   0x0
c0015bfb:	68 ef 52 01 c0       	push   0xc00152ef
c0015c00:	6a 07                	push   0x7
c0015c02:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c05:	ff d0                	call   eax
c0015c07:	83 c4 10             	add    esp,0x10
c0015c0a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c0f:	83 c0 24             	add    eax,0x24
c0015c12:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c14:	6a 00                	push   0x0
c0015c16:	68 d8 4a 01 c0       	push   0xc0014ad8
c0015c1b:	6a 08                	push   0x8
c0015c1d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c20:	ff d0                	call   eax
c0015c22:	83 c4 10             	add    esp,0x10
c0015c25:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c28:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c2a:	83 c0 24             	add    eax,0x24
c0015c2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c2f:	6a 00                	push   0x0
c0015c31:	68 93 53 01 c0       	push   0xc0015393
c0015c36:	6a 09                	push   0x9
c0015c38:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c3b:	ff d0                	call   eax
c0015c3d:	83 c4 10             	add    esp,0x10
c0015c40:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c43:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c45:	83 c0 24             	add    eax,0x24
c0015c48:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c4a:	6a 00                	push   0x0
c0015c4c:	68 93 53 01 c0       	push   0xc0015393
c0015c51:	6a 0a                	push   0xa
c0015c53:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c56:	ff d0                	call   eax
c0015c58:	83 c4 10             	add    esp,0x10
c0015c5b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c5e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c60:	83 c0 24             	add    eax,0x24
c0015c63:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c65:	6a 00                	push   0x0
c0015c67:	68 93 53 01 c0       	push   0xc0015393
c0015c6c:	6a 0b                	push   0xb
c0015c6e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c71:	ff d0                	call   eax
c0015c73:	83 c4 10             	add    esp,0x10
c0015c76:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c79:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c7b:	83 c0 24             	add    eax,0x24
c0015c7e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c80:	6a 00                	push   0x0
c0015c82:	68 93 53 01 c0       	push   0xc0015393
c0015c87:	6a 0c                	push   0xc
c0015c89:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c8c:	ff d0                	call   eax
c0015c8e:	83 c4 10             	add    esp,0x10
c0015c91:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c94:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c96:	83 c0 24             	add    eax,0x24
c0015c99:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c9b:	6a 00                	push   0x0
c0015c9d:	68 1e 53 01 c0       	push   0xc001531e
c0015ca2:	6a 0d                	push   0xd
c0015ca4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ca7:	ff d0                	call   eax
c0015ca9:	83 c4 10             	add    esp,0x10
c0015cac:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015caf:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cb1:	83 c0 24             	add    eax,0x24
c0015cb4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cb6:	6a 00                	push   0x0
c0015cb8:	68 57 53 01 c0       	push   0xc0015357
c0015cbd:	6a 0e                	push   0xe
c0015cbf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cc2:	ff d0                	call   eax
c0015cc4:	83 c4 10             	add    esp,0x10
c0015cc7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cca:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ccc:	83 c0 24             	add    eax,0x24
c0015ccf:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cd1:	6a 00                	push   0x0
c0015cd3:	68 93 53 01 c0       	push   0xc0015393
c0015cd8:	6a 0f                	push   0xf
c0015cda:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cdd:	ff d0                	call   eax
c0015cdf:	83 c4 10             	add    esp,0x10
c0015ce2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ce5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ce7:	83 c0 24             	add    eax,0x24
c0015cea:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cec:	6a 00                	push   0x0
c0015cee:	68 93 53 01 c0       	push   0xc0015393
c0015cf3:	6a 10                	push   0x10
c0015cf5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cf8:	ff d0                	call   eax
c0015cfa:	83 c4 10             	add    esp,0x10
c0015cfd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d00:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d02:	83 c0 24             	add    eax,0x24
c0015d05:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d07:	6a 00                	push   0x0
c0015d09:	68 93 53 01 c0       	push   0xc0015393
c0015d0e:	6a 11                	push   0x11
c0015d10:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d13:	ff d0                	call   eax
c0015d15:	83 c4 10             	add    esp,0x10
c0015d18:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d1d:	83 c0 24             	add    eax,0x24
c0015d20:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d22:	6a 00                	push   0x0
c0015d24:	68 93 53 01 c0       	push   0xc0015393
c0015d29:	6a 12                	push   0x12
c0015d2b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d2e:	ff d0                	call   eax
c0015d30:	83 c4 10             	add    esp,0x10
c0015d33:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d36:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d38:	83 c0 24             	add    eax,0x24
c0015d3b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d3d:	6a 00                	push   0x0
c0015d3f:	68 93 53 01 c0       	push   0xc0015393
c0015d44:	6a 13                	push   0x13
c0015d46:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d49:	ff d0                	call   eax
c0015d4b:	83 c4 10             	add    esp,0x10
c0015d4e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d51:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d53:	83 c0 24             	add    eax,0x24
c0015d56:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d58:	6a 00                	push   0x0
c0015d5a:	68 93 53 01 c0       	push   0xc0015393
c0015d5f:	6a 14                	push   0x14
c0015d61:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d64:	ff d0                	call   eax
c0015d66:	83 c4 10             	add    esp,0x10
c0015d69:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d6e:	83 c0 24             	add    eax,0x24
c0015d71:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d73:	6a 00                	push   0x0
c0015d75:	68 93 53 01 c0       	push   0xc0015393
c0015d7a:	6a 1e                	push   0x1e
c0015d7c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d7f:	ff d0                	call   eax
c0015d81:	83 c4 10             	add    esp,0x10
c0015d84:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d87:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d89:	83 c0 24             	add    eax,0x24
c0015d8c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d8e:	6a 00                	push   0x0
c0015d90:	68 19 c8 01 c0       	push   0xc001c819
c0015d95:	6a 60                	push   0x60
c0015d97:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d9a:	ff d0                	call   eax
c0015d9c:	83 c4 10             	add    esp,0x10
c0015d9f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015da2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015da5:	c9                   	leave  
c0015da6:	c3                   	ret    
c0015da7:	90                   	nop

c0015da8 <InterruptController::convertLegacyIRQNumber(int)>:
c0015da8:	55                   	push   ebp
c0015da9:	89 e5                	mov    ebp,esp
c0015dab:	83 ec 08             	sub    esp,0x8
c0015dae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015db1:	83 ec 0c             	sub    esp,0xc
c0015db4:	50                   	push   eax
c0015db5:	e8 42 e9 ff ff       	call   c00146fc <Device::getName()>
c0015dba:	83 c4 10             	add    esp,0x10
c0015dbd:	8a 00                	mov    al,BYTE PTR [eax]
c0015dbf:	3c 41                	cmp    al,0x41
c0015dc1:	0f 94 c0             	sete   al
c0015dc4:	84 c0                	test   al,al
c0015dc6:	74 28                	je     c0015df0 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015dc8:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015dcc:	7f 12                	jg     c0015de0 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015dce:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015dd1:	05 20 d7 02 c0       	add    eax,0xc002d720
c0015dd6:	8a 00                	mov    al,BYTE PTR [eax]
c0015dd8:	0f b6 c0             	movzx  eax,al
c0015ddb:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015dde:	eb 10                	jmp    c0015df0 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015de0:	83 ec 0c             	sub    esp,0xc
c0015de3:	68 80 ae 02 c0       	push   0xc002ae80
c0015de8:	e8 a2 48 00 00       	call   c001a68f <Krnl::panic(char const*)>
c0015ded:	83 c4 10             	add    esp,0x10
c0015df0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015df3:	c9                   	leave  
c0015df4:	c3                   	ret    
c0015df5:	90                   	nop

c0015df6 <startGUI(void*)>:
c0015df6:	55                   	push   ebp
c0015df7:	89 e5                	mov    ebp,esp
c0015df9:	53                   	push   ebx
c0015dfa:	83 ec 04             	sub    esp,0x4
c0015dfd:	e8 84 80 00 00       	call   c001de86 <unlockScheduler()>
c0015e02:	8b 1d c8 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e4c8
c0015e08:	83 ec 08             	sub    esp,0x8
c0015e0b:	6a 01                	push   0x1
c0015e0d:	68 d4 b1 02 c0       	push   0xc002b1d4
c0015e12:	e8 ab 79 00 00       	call   c001d7c2 <Thr::loadDLL(char const*, bool)>
c0015e17:	83 c4 10             	add    esp,0x10
c0015e1a:	83 ec 08             	sub    esp,0x8
c0015e1d:	53                   	push   ebx
c0015e1e:	50                   	push   eax
c0015e1f:	e8 ed 7b 00 00       	call   c001da11 <Thr::executeDLL(unsigned long, void*)>
c0015e24:	83 c4 10             	add    esp,0x10
c0015e27:	8b 1d c8 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e4c8
c0015e2d:	83 ec 08             	sub    esp,0x8
c0015e30:	6a 01                	push   0x1
c0015e32:	68 ee b1 02 c0       	push   0xc002b1ee
c0015e37:	e8 86 79 00 00       	call   c001d7c2 <Thr::loadDLL(char const*, bool)>
c0015e3c:	83 c4 10             	add    esp,0x10
c0015e3f:	83 ec 08             	sub    esp,0x8
c0015e42:	53                   	push   ebx
c0015e43:	50                   	push   eax
c0015e44:	e8 c8 7b 00 00       	call   c001da11 <Thr::executeDLL(unsigned long, void*)>
c0015e49:	83 c4 10             	add    esp,0x10
c0015e4c:	90                   	nop
c0015e4d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015e50:	c9                   	leave  
c0015e51:	c3                   	ret    

c0015e52 <startGUIVESA(void*)>:
c0015e52:	55                   	push   ebp
c0015e53:	89 e5                	mov    ebp,esp
c0015e55:	53                   	push   ebx
c0015e56:	83 ec 04             	sub    esp,0x4
c0015e59:	e8 28 80 00 00       	call   c001de86 <unlockScheduler()>
c0015e5e:	8b 1d c8 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e4c8
c0015e64:	83 ec 08             	sub    esp,0x8
c0015e67:	6a 01                	push   0x1
c0015e69:	68 08 b2 02 c0       	push   0xc002b208
c0015e6e:	e8 4f 79 00 00       	call   c001d7c2 <Thr::loadDLL(char const*, bool)>
c0015e73:	83 c4 10             	add    esp,0x10
c0015e76:	83 ec 08             	sub    esp,0x8
c0015e79:	53                   	push   ebx
c0015e7a:	50                   	push   eax
c0015e7b:	e8 91 7b 00 00       	call   c001da11 <Thr::executeDLL(unsigned long, void*)>
c0015e80:	83 c4 10             	add    esp,0x10
c0015e83:	8b 1d c8 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e4c8
c0015e89:	83 ec 08             	sub    esp,0x8
c0015e8c:	6a 01                	push   0x1
c0015e8e:	68 ee b1 02 c0       	push   0xc002b1ee
c0015e93:	e8 2a 79 00 00       	call   c001d7c2 <Thr::loadDLL(char const*, bool)>
c0015e98:	83 c4 10             	add    esp,0x10
c0015e9b:	83 ec 08             	sub    esp,0x8
c0015e9e:	53                   	push   ebx
c0015e9f:	50                   	push   eax
c0015ea0:	e8 6c 7b 00 00       	call   c001da11 <Thr::executeDLL(unsigned long, void*)>
c0015ea5:	83 c4 10             	add    esp,0x10
c0015ea8:	90                   	nop
c0015ea9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015eac:	c9                   	leave  
c0015ead:	c3                   	ret    

c0015eae <sendKeyToTerminal(unsigned char)>:
c0015eae:	55                   	push   ebp
c0015eaf:	89 e5                	mov    ebp,esp
c0015eb1:	83 ec 28             	sub    esp,0x28
c0015eb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015eb7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015eba:	a1 a4 e5 02 c0       	mov    eax,ds:0xc002e5a4
c0015ebf:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015ec3:	83 ec 08             	sub    esp,0x8
c0015ec6:	52                   	push   edx
c0015ec7:	50                   	push   eax
c0015ec8:	e8 7d b4 ff ff       	call   c001134a <VgaText::receiveKey(unsigned char)>
c0015ecd:	83 c4 10             	add    esp,0x10
c0015ed0:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015ed4:	75 41                	jne    c0015f17 <sendKeyToTerminal(unsigned char)+0x69>
c0015ed6:	e8 d0 7f 00 00       	call   c001deab <lockStuff()>
c0015edb:	a1 80 e6 02 c0       	mov    eax,ds:0xc002e680
c0015ee0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015ee3:	c7 05 80 e6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e680,0x0
c0015eed:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015ef1:	74 1f                	je     c0015f12 <sendKeyToTerminal(unsigned char)+0x64>
c0015ef3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ef6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015ef9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015efc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015eff:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015f02:	83 ec 0c             	sub    esp,0xc
c0015f05:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015f08:	e8 8f 85 00 00       	call   c001e49c <unblockTask(ThreadControlBlock*)>
c0015f0d:	83 c4 10             	add    esp,0x10
c0015f10:	eb db                	jmp    c0015eed <sendKeyToTerminal(unsigned char)+0x3f>
c0015f12:	e8 2e 83 00 00       	call   c001e245 <unlockStuff()>
c0015f17:	90                   	nop
c0015f18:	c9                   	leave  
c0015f19:	c3                   	ret    

c0015f1a <sendKeyboardToken(KeyboardToken)>:
c0015f1a:	55                   	push   ebp
c0015f1b:	89 e5                	mov    ebp,esp
c0015f1d:	83 ec 18             	sub    esp,0x18
c0015f20:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015f23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f26:	0f b7 c0             	movzx  eax,ax
c0015f29:	83 f2 01             	xor    edx,0x1
c0015f2c:	88 90 a0 e6 02 c0    	mov    BYTE PTR [eax-0x3ffd1960],dl
c0015f32:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c0015f37:	85 c0                	test   eax,eax
c0015f39:	74 24                	je     c0015f5f <sendKeyboardToken(KeyboardToken)+0x45>
c0015f3b:	8b 0d 88 e6 02 c0    	mov    ecx,DWORD PTR ds:0xc002e688
c0015f41:	83 ec 04             	sub    esp,0x4
c0015f44:	68 a0 e6 02 c0       	push   0xc002e6a0
c0015f49:	83 ec 08             	sub    esp,0x8
c0015f4c:	89 e2                	mov    edx,esp
c0015f4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f51:	89 02                	mov    DWORD PTR [edx],eax
c0015f53:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015f56:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015f5a:	ff d1                	call   ecx
c0015f5c:	83 c4 10             	add    esp,0x10
c0015f5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f62:	66 3d 03 02          	cmp    ax,0x203
c0015f66:	75 07                	jne    c0015f6f <sendKeyboardToken(KeyboardToken)+0x55>
c0015f68:	a0 a0 e7 02 c0       	mov    al,ds:0xc002e7a0
c0015f6d:	84 c0                	test   al,al
c0015f6f:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015f73:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015f76:	a0 a8 ea 02 c0       	mov    al,ds:0xc002eaa8
c0015f7b:	38 c2                	cmp    dl,al
c0015f7d:	74 1c                	je     c0015f9b <sendKeyboardToken(KeyboardToken)+0x81>
c0015f7f:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015f82:	a2 a8 ea 02 c0       	mov    ds:0xc002eaa8,al
c0015f87:	a0 a8 ea 02 c0       	mov    al,ds:0xc002eaa8
c0015f8c:	0f b6 c0             	movzx  eax,al
c0015f8f:	83 ec 0c             	sub    esp,0xc
c0015f92:	50                   	push   eax
c0015f93:	e8 12 a6 ff ff       	call   c00105aa <setTerminalScrollLock(bool)>
c0015f98:	83 c4 10             	add    esp,0x10
c0015f9b:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015f9e:	84 c0                	test   al,al
c0015fa0:	0f 84 ae 00 00 00    	je     c0016054 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015fa6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fa9:	66 3d 10 03          	cmp    ax,0x310
c0015fad:	75 06                	jne    c0015fb5 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015faf:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015fb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fb8:	66 3d 11 03          	cmp    ax,0x311
c0015fbc:	75 06                	jne    c0015fc4 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015fbe:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015fc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fc7:	66 3d 12 03          	cmp    ax,0x312
c0015fcb:	75 06                	jne    c0015fd3 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015fcd:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015fd3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fd6:	66 3d 13 03          	cmp    ax,0x313
c0015fda:	75 06                	jne    c0015fe2 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015fdc:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015fe2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fe5:	66 3d 14 03          	cmp    ax,0x314
c0015fe9:	75 06                	jne    c0015ff1 <sendKeyboardToken(KeyboardToken)+0xd7>
c0015feb:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015ff1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ff4:	66 3d 15 03          	cmp    ax,0x315
c0015ff8:	75 06                	jne    c0016000 <sendKeyboardToken(KeyboardToken)+0xe6>
c0015ffa:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0016000:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016003:	66 3d 16 03          	cmp    ax,0x316
c0016007:	75 06                	jne    c001600f <sendKeyboardToken(KeyboardToken)+0xf5>
c0016009:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c001600f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016012:	66 3d 17 03          	cmp    ax,0x317
c0016016:	75 06                	jne    c001601e <sendKeyboardToken(KeyboardToken)+0x104>
c0016018:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c001601e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016021:	66 3d 18 03          	cmp    ax,0x318
c0016025:	75 06                	jne    c001602d <sendKeyboardToken(KeyboardToken)+0x113>
c0016027:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001602d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016030:	66 3d 19 03          	cmp    ax,0x319
c0016034:	75 06                	jne    c001603c <sendKeyboardToken(KeyboardToken)+0x122>
c0016036:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c001603c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001603f:	66 3d 1a 03          	cmp    ax,0x31a
c0016043:	0f 85 c9 00 00 00    	jne    c0016112 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0016049:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c001604f:	e9 be 00 00 00       	jmp    c0016112 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0016054:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016057:	66 3d 10 03          	cmp    ax,0x310
c001605b:	75 0a                	jne    c0016067 <sendKeyboardToken(KeyboardToken)+0x14d>
c001605d:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0016063:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016067:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001606a:	66 3d 11 03          	cmp    ax,0x311
c001606e:	75 0a                	jne    c001607a <sendKeyboardToken(KeyboardToken)+0x160>
c0016070:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0016076:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001607a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001607d:	66 3d 12 03          	cmp    ax,0x312
c0016081:	75 0a                	jne    c001608d <sendKeyboardToken(KeyboardToken)+0x173>
c0016083:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0016089:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001608d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016090:	66 3d 13 03          	cmp    ax,0x313
c0016094:	75 0a                	jne    c00160a0 <sendKeyboardToken(KeyboardToken)+0x186>
c0016096:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c001609c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160a3:	66 3d 14 03          	cmp    ax,0x314
c00160a7:	75 0a                	jne    c00160b3 <sendKeyboardToken(KeyboardToken)+0x199>
c00160a9:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c00160af:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160b6:	66 3d 15 03          	cmp    ax,0x315
c00160ba:	75 0a                	jne    c00160c6 <sendKeyboardToken(KeyboardToken)+0x1ac>
c00160bc:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00160c2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160c9:	66 3d 16 03          	cmp    ax,0x316
c00160cd:	75 0a                	jne    c00160d9 <sendKeyboardToken(KeyboardToken)+0x1bf>
c00160cf:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00160d5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160dc:	66 3d 17 03          	cmp    ax,0x317
c00160e0:	75 0a                	jne    c00160ec <sendKeyboardToken(KeyboardToken)+0x1d2>
c00160e2:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00160e8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160ef:	66 3d 18 03          	cmp    ax,0x318
c00160f3:	75 0a                	jne    c00160ff <sendKeyboardToken(KeyboardToken)+0x1e5>
c00160f5:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00160fb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016102:	66 3d 19 03          	cmp    ax,0x319
c0016106:	75 0a                	jne    c0016112 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0016108:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c001610e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016112:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016115:	66 3d 00 02          	cmp    ax,0x200
c0016119:	75 2c                	jne    c0016147 <sendKeyboardToken(KeyboardToken)+0x22d>
c001611b:	a0 a0 ea 02 c0       	mov    al,ds:0xc002eaa0
c0016120:	83 f0 01             	xor    eax,0x1
c0016123:	84 c0                	test   al,al
c0016125:	74 20                	je     c0016147 <sendKeyboardToken(KeyboardToken)+0x22d>
c0016127:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c001612c:	6a 01                	push   0x1
c001612e:	6a 00                	push   0x0
c0016130:	68 f6 5d 01 c0       	push   0xc0015df6
c0016135:	50                   	push   eax
c0016136:	e8 7b 7e 00 00       	call   c001dfb6 <Process::createThread(void (*)(void*), void*, int)>
c001613b:	83 c4 10             	add    esp,0x10
c001613e:	c6 05 a0 ea 02 c0 01 	mov    BYTE PTR ds:0xc002eaa0,0x1
c0016145:	eb 33                	jmp    c001617a <sendKeyboardToken(KeyboardToken)+0x260>
c0016147:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001614a:	66 3d 01 02          	cmp    ax,0x201
c001614e:	75 2a                	jne    c001617a <sendKeyboardToken(KeyboardToken)+0x260>
c0016150:	a0 a0 ea 02 c0       	mov    al,ds:0xc002eaa0
c0016155:	83 f0 01             	xor    eax,0x1
c0016158:	84 c0                	test   al,al
c001615a:	74 1e                	je     c001617a <sendKeyboardToken(KeyboardToken)+0x260>
c001615c:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c0016161:	6a 01                	push   0x1
c0016163:	6a 00                	push   0x0
c0016165:	68 52 5e 01 c0       	push   0xc0015e52
c001616a:	50                   	push   eax
c001616b:	e8 46 7e 00 00       	call   c001dfb6 <Process::createThread(void (*)(void*), void*, int)>
c0016170:	83 c4 10             	add    esp,0x10
c0016173:	c6 05 a0 ea 02 c0 01 	mov    BYTE PTR ds:0xc002eaa0,0x1
c001617a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001617d:	66 3d 1d 03          	cmp    ax,0x31d
c0016181:	75 06                	jne    c0016189 <sendKeyboardToken(KeyboardToken)+0x26f>
c0016183:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0016189:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001618c:	66 3d 1c 03          	cmp    ax,0x31c
c0016190:	75 06                	jne    c0016198 <sendKeyboardToken(KeyboardToken)+0x27e>
c0016192:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0016198:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001619b:	66 3d 1b 03          	cmp    ax,0x31b
c001619f:	75 06                	jne    c00161a7 <sendKeyboardToken(KeyboardToken)+0x28d>
c00161a1:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00161a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161aa:	66 3d 1e 03          	cmp    ax,0x31e
c00161ae:	75 06                	jne    c00161b6 <sendKeyboardToken(KeyboardToken)+0x29c>
c00161b0:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00161b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161b9:	66 3d 1f 03          	cmp    ax,0x31f
c00161bd:	75 06                	jne    c00161c5 <sendKeyboardToken(KeyboardToken)+0x2ab>
c00161bf:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00161c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161c8:	66 3d 1a 03          	cmp    ax,0x31a
c00161cc:	75 06                	jne    c00161d4 <sendKeyboardToken(KeyboardToken)+0x2ba>
c00161ce:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00161d4:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00161d8:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00161db:	83 f0 01             	xor    eax,0x1
c00161de:	84 c0                	test   al,al
c00161e0:	74 77                	je     c0016259 <sendKeyboardToken(KeyboardToken)+0x33f>
c00161e2:	a0 a1 e7 02 c0       	mov    al,ds:0xc002e7a1
c00161e7:	84 c0                	test   al,al
c00161e9:	74 41                	je     c001622c <sendKeyboardToken(KeyboardToken)+0x312>
c00161eb:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00161ef:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c00161f3:	74 2b                	je     c0016220 <sendKeyboardToken(KeyboardToken)+0x306>
c00161f5:	8b 15 a4 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002eaa4
c00161fb:	89 d0                	mov    eax,edx
c00161fd:	c1 e0 02             	shl    eax,0x2
c0016200:	01 d0                	add    eax,edx
c0016202:	01 c0                	add    eax,eax
c0016204:	a3 a4 ea 02 c0       	mov    ds:0xc002eaa4,eax
c0016209:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001620c:	0f b7 c0             	movzx  eax,ax
c001620f:	8d 50 d0             	lea    edx,[eax-0x30]
c0016212:	a1 a4 ea 02 c0       	mov    eax,ds:0xc002eaa4
c0016217:	01 d0                	add    eax,edx
c0016219:	a3 a4 ea 02 c0       	mov    ds:0xc002eaa4,eax
c001621e:	eb 6d                	jmp    c001628d <sendKeyboardToken(KeyboardToken)+0x373>
c0016220:	c7 05 a4 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eaa4,0x0
c001622a:	eb 61                	jmp    c001628d <sendKeyboardToken(KeyboardToken)+0x373>
c001622c:	a1 a4 ea 02 c0       	mov    eax,ds:0xc002eaa4
c0016231:	85 c0                	test   eax,eax
c0016233:	74 18                	je     c001624d <sendKeyboardToken(KeyboardToken)+0x333>
c0016235:	a1 a4 ea 02 c0       	mov    eax,ds:0xc002eaa4
c001623a:	0f b6 c0             	movzx  eax,al
c001623d:	83 ec 0c             	sub    esp,0xc
c0016240:	50                   	push   eax
c0016241:	e8 68 fc ff ff       	call   c0015eae <sendKeyToTerminal(unsigned char)>
c0016246:	83 c4 10             	add    esp,0x10
c0016249:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001624d:	c7 05 a4 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eaa4,0x0
c0016257:	eb 34                	jmp    c001628d <sendKeyboardToken(KeyboardToken)+0x373>
c0016259:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001625c:	66 3d 01 01          	cmp    ax,0x101
c0016260:	75 2b                	jne    c001628d <sendKeyboardToken(KeyboardToken)+0x373>
c0016262:	a1 a4 ea 02 c0       	mov    eax,ds:0xc002eaa4
c0016267:	85 c0                	test   eax,eax
c0016269:	74 18                	je     c0016283 <sendKeyboardToken(KeyboardToken)+0x369>
c001626b:	a1 a4 ea 02 c0       	mov    eax,ds:0xc002eaa4
c0016270:	0f b6 c0             	movzx  eax,al
c0016273:	83 ec 0c             	sub    esp,0xc
c0016276:	50                   	push   eax
c0016277:	e8 32 fc ff ff       	call   c0015eae <sendKeyToTerminal(unsigned char)>
c001627c:	83 c4 10             	add    esp,0x10
c001627f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016283:	c7 05 a4 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eaa4,0x0
c001628d:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0016290:	83 f0 01             	xor    eax,0x1
c0016293:	84 c0                	test   al,al
c0016295:	74 4c                	je     c00162e3 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016297:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001629a:	83 f0 01             	xor    eax,0x1
c001629d:	84 c0                	test   al,al
c001629f:	74 42                	je     c00162e3 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00162a1:	a0 a0 e7 02 c0       	mov    al,ds:0xc002e7a0
c00162a6:	83 f0 01             	xor    eax,0x1
c00162a9:	84 c0                	test   al,al
c00162ab:	74 36                	je     c00162e3 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00162ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162b0:	66 83 f8 1f          	cmp    ax,0x1f
c00162b4:	76 09                	jbe    c00162bf <sendKeyboardToken(KeyboardToken)+0x3a5>
c00162b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162b9:	66 83 f8 7e          	cmp    ax,0x7e
c00162bd:	76 12                	jbe    c00162d1 <sendKeyboardToken(KeyboardToken)+0x3b7>
c00162bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162c2:	66 83 f8 0a          	cmp    ax,0xa
c00162c6:	74 09                	je     c00162d1 <sendKeyboardToken(KeyboardToken)+0x3b7>
c00162c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162cb:	66 83 f8 08          	cmp    ax,0x8
c00162cf:	75 12                	jne    c00162e3 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00162d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162d4:	0f b6 c0             	movzx  eax,al
c00162d7:	83 ec 0c             	sub    esp,0xc
c00162da:	50                   	push   eax
c00162db:	e8 ce fb ff ff       	call   c0015eae <sendKeyToTerminal(unsigned char)>
c00162e0:	83 c4 10             	add    esp,0x10
c00162e3:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00162e6:	83 f0 01             	xor    eax,0x1
c00162e9:	84 c0                	test   al,al
c00162eb:	74 4f                	je     c001633c <sendKeyboardToken(KeyboardToken)+0x422>
c00162ed:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00162f0:	83 f0 01             	xor    eax,0x1
c00162f3:	84 c0                	test   al,al
c00162f5:	74 45                	je     c001633c <sendKeyboardToken(KeyboardToken)+0x422>
c00162f7:	a0 a0 e7 02 c0       	mov    al,ds:0xc002e7a0
c00162fc:	84 c0                	test   al,al
c00162fe:	74 3c                	je     c001633c <sendKeyboardToken(KeyboardToken)+0x422>
c0016300:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016303:	66 83 f8 3f          	cmp    ax,0x3f
c0016307:	76 33                	jbe    c001633c <sendKeyboardToken(KeyboardToken)+0x422>
c0016309:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001630c:	66 83 f8 7f          	cmp    ax,0x7f
c0016310:	77 2a                	ja     c001633c <sendKeyboardToken(KeyboardToken)+0x422>
c0016312:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016315:	88 c2                	mov    dl,al
c0016317:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001631a:	66 83 f8 5f          	cmp    ax,0x5f
c001631e:	76 04                	jbe    c0016324 <sendKeyboardToken(KeyboardToken)+0x40a>
c0016320:	b0 20                	mov    al,0x20
c0016322:	eb 02                	jmp    c0016326 <sendKeyboardToken(KeyboardToken)+0x40c>
c0016324:	b0 00                	mov    al,0x0
c0016326:	29 c2                	sub    edx,eax
c0016328:	88 d0                	mov    al,dl
c001632a:	83 e8 40             	sub    eax,0x40
c001632d:	0f b6 c0             	movzx  eax,al
c0016330:	83 ec 0c             	sub    esp,0xc
c0016333:	50                   	push   eax
c0016334:	e8 75 fb ff ff       	call   c0015eae <sendKeyToTerminal(unsigned char)>
c0016339:	83 c4 10             	add    esp,0x10
c001633c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001633f:	66 3d 00 03          	cmp    ax,0x300
c0016343:	75 0f                	jne    c0016354 <sendKeyboardToken(KeyboardToken)+0x43a>
c0016345:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016348:	83 f0 01             	xor    eax,0x1
c001634b:	84 c0                	test   al,al
c001634d:	74 05                	je     c0016354 <sendKeyboardToken(KeyboardToken)+0x43a>
c001634f:	e8 8b aa ff ff       	call   c0010ddf <doTerminalCycle()>
c0016354:	90                   	nop
c0016355:	c9                   	leave  
c0016356:	c3                   	ret    

c0016357 <clearInternalKeybuffer(VgaText*)>:
c0016357:	55                   	push   ebp
c0016358:	89 e5                	mov    ebp,esp
c001635a:	83 ec 08             	sub    esp,0x8
c001635d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016360:	05 34 11 00 00       	add    eax,0x1134
c0016365:	83 ec 0c             	sub    esp,0xc
c0016368:	50                   	push   eax
c0016369:	e8 26 a4 fe ff       	call   c0000794 <strlen>
c001636e:	83 c4 10             	add    esp,0x10
c0016371:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016374:	81 c2 34 11 00 00    	add    edx,0x1134
c001637a:	83 ec 04             	sub    esp,0x4
c001637d:	50                   	push   eax
c001637e:	6a 00                	push   0x0
c0016380:	52                   	push   edx
c0016381:	e8 f2 a3 fe ff       	call   c0000778 <memset>
c0016386:	83 c4 10             	add    esp,0x10
c0016389:	90                   	nop
c001638a:	c9                   	leave  
c001638b:	c3                   	ret    

c001638c <readKeyboard(VgaText*, char*, unsigned long)>:
c001638c:	55                   	push   ebp
c001638d:	89 e5                	mov    ebp,esp
c001638f:	83 ec 18             	sub    esp,0x18
c0016392:	fb                   	sti    
c0016393:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c001639a:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001639e:	0f 84 8a 00 00 00    	je     c001642e <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c00163a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00163a7:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c00163ad:	84 c0                	test   al,al
c00163af:	75 11                	jne    c00163c2 <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c00163b1:	e8 ce 7a 00 00       	call   c001de84 <lockScheduler()>
c00163b6:	e8 05 7e 00 00       	call   c001e1c0 <schedule()>
c00163bb:	e8 c6 7a 00 00       	call   c001de86 <unlockScheduler()>
c00163c0:	eb e2                	jmp    c00163a4 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c00163c2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00163c5:	8d 50 01             	lea    edx,[eax+0x1]
c00163c8:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00163cb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00163ce:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c00163d4:	88 10                	mov    BYTE PTR [eax],dl
c00163d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00163d9:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c00163df:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c00163e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00163e5:	05 34 11 00 00       	add    eax,0x1134
c00163ea:	83 ec 0c             	sub    esp,0xc
c00163ed:	50                   	push   eax
c00163ee:	e8 a1 a3 fe ff       	call   c0000794 <strlen>
c00163f3:	83 c4 10             	add    esp,0x10
c00163f6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00163f9:	81 c2 34 11 00 00    	add    edx,0x1134
c00163ff:	8d 4a 01             	lea    ecx,[edx+0x1]
c0016402:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016405:	81 c2 34 11 00 00    	add    edx,0x1134
c001640b:	83 ec 04             	sub    esp,0x4
c001640e:	50                   	push   eax
c001640f:	51                   	push   ecx
c0016410:	52                   	push   edx
c0016411:	e8 66 a2 fe ff       	call   c000067c <memmove>
c0016416:	83 c4 10             	add    esp,0x10
c0016419:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c001641c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001641f:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0016423:	0f 85 71 ff ff ff    	jne    c001639a <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0016429:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001642c:	eb 03                	jmp    c0016431 <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c001642e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0016431:	c9                   	leave  
c0016432:	c3                   	ret    
c0016433:	90                   	nop

c0016434 <Keyboard::Keyboard(char const*)>:
c0016434:	83 ec 0c             	sub    esp,0xc
c0016437:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001643b:	83 ec 08             	sub    esp,0x8
c001643e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016442:	50                   	push   eax
c0016443:	e8 b8 e1 ff ff       	call   c0014600 <Device::Device(char const*)>
c0016448:	83 c4 10             	add    esp,0x10
c001644b:	ba 2c b2 02 c0       	mov    edx,0xc002b22c
c0016450:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016454:	89 10                	mov    DWORD PTR [eax],edx
c0016456:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001645a:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0016464:	c6 05 84 e6 02 c0 01 	mov    BYTE PTR ds:0xc002e684,0x1
c001646b:	90                   	nop
c001646c:	83 c4 0c             	add    esp,0xc
c001646f:	c3                   	ret    

c0016470 <Keyboard::~Keyboard()>:
c0016470:	83 ec 0c             	sub    esp,0xc
c0016473:	ba 2c b2 02 c0       	mov    edx,0xc002b22c
c0016478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001647c:	89 10                	mov    DWORD PTR [eax],edx
c001647e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016482:	83 ec 0c             	sub    esp,0xc
c0016485:	50                   	push   eax
c0016486:	e8 57 de ff ff       	call   c00142e2 <Device::~Device()>
c001648b:	83 c4 10             	add    esp,0x10
c001648e:	90                   	nop
c001648f:	83 c4 0c             	add    esp,0xc
c0016492:	c3                   	ret    
c0016493:	90                   	nop

c0016494 <Keyboard::~Keyboard()>:
c0016494:	83 ec 0c             	sub    esp,0xc
c0016497:	83 ec 0c             	sub    esp,0xc
c001649a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001649e:	e8 cd ff ff ff       	call   c0016470 <Keyboard::~Keyboard()>
c00164a3:	83 c4 10             	add    esp,0x10
c00164a6:	83 ec 08             	sub    esp,0x8
c00164a9:	68 5c 01 00 00       	push   0x15c
c00164ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164b2:	e8 53 ca ff ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c00164b7:	83 c4 10             	add    esp,0x10
c00164ba:	83 c4 0c             	add    esp,0xc
c00164bd:	c3                   	ret    

c00164be <LogicalDisk::close(int, int, void*)>:
c00164be:	83 c8 ff             	or     eax,0xffffffff
c00164c1:	c3                   	ret    

c00164c2 <LogicalDisk::~LogicalDisk()>:
c00164c2:	83 ec 0c             	sub    esp,0xc
c00164c5:	ba dc b2 02 c0       	mov    edx,0xc002b2dc
c00164ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164ce:	89 10                	mov    DWORD PTR [eax],edx
c00164d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164d4:	83 ec 0c             	sub    esp,0xc
c00164d7:	50                   	push   eax
c00164d8:	e8 05 de ff ff       	call   c00142e2 <Device::~Device()>
c00164dd:	83 c4 10             	add    esp,0x10
c00164e0:	90                   	nop
c00164e1:	83 c4 0c             	add    esp,0xc
c00164e4:	c3                   	ret    
c00164e5:	90                   	nop

c00164e6 <LogicalDisk::~LogicalDisk()>:
c00164e6:	83 ec 0c             	sub    esp,0xc
c00164e9:	83 ec 0c             	sub    esp,0xc
c00164ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164f0:	e8 cd ff ff ff       	call   c00164c2 <LogicalDisk::~LogicalDisk()>
c00164f5:	83 c4 10             	add    esp,0x10
c00164f8:	83 ec 08             	sub    esp,0x8
c00164fb:	68 74 01 00 00       	push   0x174
c0016500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016504:	e8 01 ca ff ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c0016509:	83 c4 10             	add    esp,0x10
c001650c:	83 c4 0c             	add    esp,0xc
c001650f:	c3                   	ret    

c0016510 <LogicalDisk::open(int, int, void*)>:
c0016510:	83 ec 18             	sub    esp,0x18
c0016513:	68 58 b2 02 c0       	push   0xc002b258
c0016518:	e8 72 41 00 00       	call   c001a68f <Krnl::panic(char const*)>
c001651d:	83 c8 ff             	or     eax,0xffffffff
c0016520:	83 c4 1c             	add    esp,0x1c
c0016523:	c3                   	ret    

c0016524 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0016524:	53                   	push   ebx
c0016525:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016529:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001652d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016531:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0016537:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c001653d:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0016543:	77 10                	ja     c0016555 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0016545:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c001654b:	89 d3                	mov    ebx,edx
c001654d:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0016553:	72 05                	jb     c001655a <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0016555:	83 c8 ff             	or     eax,0xffffffff
c0016558:	89 c2                	mov    edx,eax
c001655a:	5b                   	pop    ebx
c001655b:	c3                   	ret    

c001655c <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c001655c:	56                   	push   esi
c001655d:	83 c8 ff             	or     eax,0xffffffff
c0016560:	53                   	push   ebx
c0016561:	89 c2                	mov    edx,eax
c0016563:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016567:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001656b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001656f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016575:	77 27                	ja     c001659e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016577:	89 d8                	mov    eax,ebx
c0016579:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001657f:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0016585:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001658a:	89 c2                	mov    edx,eax
c001658c:	73 10                	jae    c001659e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001658e:	89 c8                	mov    eax,ecx
c0016590:	89 da                	mov    edx,ebx
c0016592:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0016598:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001659e:	5b                   	pop    ebx
c001659f:	5e                   	pop    esi
c00165a0:	c3                   	ret    
c00165a1:	90                   	nop

c00165a2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c00165a2:	83 ec 1c             	sub    esp,0x1c
c00165a5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00165a9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00165ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00165b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00165b5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00165b9:	89 04 24             	mov    DWORD PTR [esp],eax
c00165bc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00165c0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00165c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165c8:	83 ec 08             	sub    esp,0x8
c00165cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00165cf:	50                   	push   eax
c00165d0:	e8 2b e0 ff ff       	call   c0014600 <Device::Device(char const*)>
c00165d5:	83 c4 10             	add    esp,0x10
c00165d8:	ba dc b2 02 c0       	mov    edx,0xc002b2dc
c00165dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165e1:	89 10                	mov    DWORD PTR [eax],edx
c00165e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165e7:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00165ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165f2:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00165f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165fd:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0016607:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001660b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001660f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016613:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0016619:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001661f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016623:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016626:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001662a:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0016630:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0016636:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001663a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001663e:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0016644:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016648:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016652:	90                   	nop
c0016653:	83 c4 1c             	add    esp,0x1c
c0016656:	c3                   	ret    
c0016657:	90                   	nop

c0016658 <LogicalDisk::assignDriveLetter()>:
c0016658:	55                   	push   ebp
c0016659:	57                   	push   edi
c001665a:	56                   	push   esi
c001665b:	53                   	push   ebx
c001665c:	83 ec 14             	sub    esp,0x14
c001665f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016663:	8b 3d c0 ea 02 c0    	mov    edi,DWORD PTR ds:0xc002eac0
c0016669:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001666f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0016673:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0016679:	8b 3d c4 ea 02 c0    	mov    edi,DWORD PTR ds:0xc002eac4
c001667f:	3c 01                	cmp    al,0x1
c0016681:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0016685:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016689:	19 c0                	sbb    eax,eax
c001668b:	83 e0 02             	and    eax,0x2
c001668e:	83 c0 41             	add    eax,0x41
c0016691:	0f be e8             	movsx  ebp,al
c0016694:	3c 43                	cmp    al,0x43
c0016696:	75 10                	jne    c00166a8 <LogicalDisk::assignDriveLetter()+0x50>
c0016698:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001669f:	75 5d                	jne    c00166fe <LogicalDisk::assignDriveLetter()+0xa6>
c00166a1:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00166a6:	75 56                	jne    c00166fe <LogicalDisk::assignDriveLetter()+0xa6>
c00166a8:	8d 75 bf             	lea    esi,[ebp-0x41]
c00166ab:	ba 01 00 00 00       	mov    edx,0x1
c00166b0:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00166b4:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00166b8:	d3 e2                	shl    edx,cl
c00166ba:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00166be:	89 d7                	mov    edi,edx
c00166c0:	89 d6                	mov    esi,edx
c00166c2:	c1 ff 1f             	sar    edi,0x1f
c00166c5:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c00166c9:	21 f9                	and    ecx,edi
c00166cb:	09 d1                	or     ecx,edx
c00166cd:	75 2f                	jne    c00166fe <LogicalDisk::assignDriveLetter()+0xa6>
c00166cf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00166d3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00166d7:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c00166dd:	09 f2                	or     edx,esi
c00166df:	89 15 c0 ea 02 c0    	mov    DWORD PTR ds:0xc002eac0,edx
c00166e5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00166e9:	09 fa                	or     edx,edi
c00166eb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00166ef:	89 15 c4 ea 02 c0    	mov    DWORD PTR ds:0xc002eac4,edx
c00166f5:	89 1c bd e0 ea 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1520],ebx
c00166fc:	eb 08                	jmp    c0016706 <LogicalDisk::assignDriveLetter()+0xae>
c00166fe:	45                   	inc    ebp
c00166ff:	40                   	inc    eax
c0016700:	3c 5b                	cmp    al,0x5b
c0016702:	75 90                	jne    c0016694 <LogicalDisk::assignDriveLetter()+0x3c>
c0016704:	31 c0                	xor    eax,eax
c0016706:	83 c4 14             	add    esp,0x14
c0016709:	5b                   	pop    ebx
c001670a:	5e                   	pop    esi
c001670b:	5f                   	pop    edi
c001670c:	5d                   	pop    ebp
c001670d:	c3                   	ret    

c001670e <LogicalDisk::mount()>:
c001670e:	56                   	push   esi
c001670f:	53                   	push   ebx
c0016710:	51                   	push   ecx
c0016711:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016715:	8b 1d 50 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e650
c001671b:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0016725:	85 db                	test   ebx,ebx
c0016727:	74 50                	je     c0016779 <LogicalDisk::mount()+0x6b>
c0016729:	e8 41 77 00 00       	call   c001de6f <getIRQNestingLevel()>
c001672e:	52                   	push   edx
c001672f:	52                   	push   edx
c0016730:	50                   	push   eax
c0016731:	68 7c b2 02 c0       	push   0xc002b27c
c0016736:	e8 af c8 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001673b:	83 c4 0c             	add    esp,0xc
c001673e:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0016745:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016747:	83 e8 41             	sub    eax,0x41
c001674a:	50                   	push   eax
c001674b:	56                   	push   esi
c001674c:	53                   	push   ebx
c001674d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016750:	83 c4 10             	add    esp,0x10
c0016753:	84 c0                	test   al,al
c0016755:	74 08                	je     c001675f <LogicalDisk::mount()+0x51>
c0016757:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c001675d:	eb 1c                	jmp    c001677b <LogicalDisk::mount()+0x6d>
c001675f:	e8 0b 77 00 00       	call   c001de6f <getIRQNestingLevel()>
c0016764:	51                   	push   ecx
c0016765:	51                   	push   ecx
c0016766:	50                   	push   eax
c0016767:	68 97 b2 02 c0       	push   0xc002b297
c001676c:	e8 79 c8 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0016771:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016774:	83 c4 10             	add    esp,0x10
c0016777:	eb ac                	jmp    c0016725 <LogicalDisk::mount()+0x17>
c0016779:	31 c0                	xor    eax,eax
c001677b:	5a                   	pop    edx
c001677c:	5b                   	pop    ebx
c001677d:	5e                   	pop    esi
c001677e:	c3                   	ret    
c001677f:	90                   	nop

c0016780 <LogicalDisk::unmount()>:
c0016780:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016784:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001678e:	c3                   	ret    
c001678f:	90                   	nop

c0016790 <LogicalDisk::eject()>:
c0016790:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016794:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001679a:	8b 10                	mov    edx,DWORD PTR [eax]
c001679c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00167a0:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c00167a3:	90                   	nop

c00167a4 <LogicalDisk::unassignDriveLetter()>:
c00167a4:	57                   	push   edi
c00167a5:	56                   	push   esi
c00167a6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00167aa:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c00167b1:	84 c9                	test   cl,cl
c00167b3:	75 0f                	jne    c00167c4 <LogicalDisk::unassignDriveLetter()+0x20>
c00167b5:	c7 44 24 0c b2 b2 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b2b2
c00167bd:	5e                   	pop    esi
c00167be:	5f                   	pop    edi
c00167bf:	e9 cb 3e 00 00       	jmp    c001a68f <Krnl::panic(char const*)>
c00167c4:	83 e9 41             	sub    ecx,0x41
c00167c7:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00167ce:	b8 01 00 00 00       	mov    eax,0x1
c00167d3:	c7 04 8d e0 ea 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd1520],0x0
c00167de:	d3 e0                	shl    eax,cl
c00167e0:	89 c7                	mov    edi,eax
c00167e2:	f7 d0                	not    eax
c00167e4:	c1 ff 1f             	sar    edi,0x1f
c00167e7:	21 05 c0 ea 02 c0    	and    DWORD PTR ds:0xc002eac0,eax
c00167ed:	89 fe                	mov    esi,edi
c00167ef:	f7 d6                	not    esi
c00167f1:	21 35 c4 ea 02 c0    	and    DWORD PTR ds:0xc002eac4,esi
c00167f7:	5e                   	pop    esi
c00167f8:	5f                   	pop    edi
c00167f9:	c3                   	ret    

c00167fa <LogicalDisk::read(unsigned long long, int, void*)>:
c00167fa:	57                   	push   edi
c00167fb:	56                   	push   esi
c00167fc:	53                   	push   ebx
c00167fd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016801:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016805:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016809:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001680d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016813:	77 41                	ja     c0016856 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0016815:	99                   	cdq    
c0016816:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001681c:	01 c8                	add    eax,ecx
c001681e:	11 da                	adc    edx,ebx
c0016820:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016826:	19 d7                	sbb    edi,edx
c0016828:	72 33                	jb     c001685d <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001682a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016830:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016836:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001683a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001683e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016844:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001684a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001684e:	5b                   	pop    ebx
c001684f:	5e                   	pop    esi
c0016850:	5f                   	pop    edi
c0016851:	e9 b0 0a 00 00       	jmp    c0017306 <VCache::read(unsigned long long, int, void*)>
c0016856:	b8 05 00 00 00       	mov    eax,0x5
c001685b:	eb 05                	jmp    c0016862 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001685d:	b8 07 00 00 00       	mov    eax,0x7
c0016862:	5b                   	pop    ebx
c0016863:	5e                   	pop    esi
c0016864:	5f                   	pop    edi
c0016865:	c3                   	ret    

c0016866 <LogicalDisk::write(unsigned long long, int, void*)>:
c0016866:	57                   	push   edi
c0016867:	56                   	push   esi
c0016868:	53                   	push   ebx
c0016869:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001686d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016871:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016875:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016879:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001687f:	77 41                	ja     c00168c2 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0016881:	99                   	cdq    
c0016882:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016888:	01 c8                	add    eax,ecx
c001688a:	11 da                	adc    edx,ebx
c001688c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016892:	19 d7                	sbb    edi,edx
c0016894:	72 33                	jb     c00168c9 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0016896:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001689c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00168a2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00168a6:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00168aa:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00168b0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00168b6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00168ba:	5b                   	pop    ebx
c00168bb:	5e                   	pop    esi
c00168bc:	5f                   	pop    edi
c00168bd:	e9 4e 09 00 00       	jmp    c0017210 <VCache::write(unsigned long long, int, void*)>
c00168c2:	b8 05 00 00 00       	mov    eax,0x5
c00168c7:	eb 05                	jmp    c00168ce <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00168c9:	b8 07 00 00 00       	mov    eax,0x7
c00168ce:	5b                   	pop    ebx
c00168cf:	5e                   	pop    esi
c00168d0:	5f                   	pop    edi
c00168d1:	c3                   	ret    

c00168d2 <Mouse::Mouse(char const*)>:
c00168d2:	83 ec 0c             	sub    esp,0xc
c00168d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168d9:	83 ec 08             	sub    esp,0x8
c00168dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168e0:	50                   	push   eax
c00168e1:	e8 1a dd ff ff       	call   c0014600 <Device::Device(char const*)>
c00168e6:	83 c4 10             	add    esp,0x10
c00168e9:	ba 08 b3 02 c0       	mov    edx,0xc002b308
c00168ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168f2:	89 10                	mov    DWORD PTR [eax],edx
c00168f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168f8:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0016902:	90                   	nop
c0016903:	83 c4 0c             	add    esp,0xc
c0016906:	c3                   	ret    
c0016907:	90                   	nop

c0016908 <Mouse::~Mouse()>:
c0016908:	83 ec 0c             	sub    esp,0xc
c001690b:	ba 08 b3 02 c0       	mov    edx,0xc002b308
c0016910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016914:	89 10                	mov    DWORD PTR [eax],edx
c0016916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001691a:	83 ec 0c             	sub    esp,0xc
c001691d:	50                   	push   eax
c001691e:	e8 bf d9 ff ff       	call   c00142e2 <Device::~Device()>
c0016923:	83 c4 10             	add    esp,0x10
c0016926:	90                   	nop
c0016927:	83 c4 0c             	add    esp,0xc
c001692a:	c3                   	ret    
c001692b:	90                   	nop

c001692c <Mouse::~Mouse()>:
c001692c:	83 ec 0c             	sub    esp,0xc
c001692f:	83 ec 0c             	sub    esp,0xc
c0016932:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016936:	e8 cd ff ff ff       	call   c0016908 <Mouse::~Mouse()>
c001693b:	83 c4 10             	add    esp,0x10
c001693e:	83 ec 08             	sub    esp,0x8
c0016941:	68 58 01 00 00       	push   0x158
c0016946:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001694a:	e8 bb c5 ff ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c001694f:	83 c4 10             	add    esp,0x10
c0016952:	83 c4 0c             	add    esp,0xc
c0016955:	c3                   	ret    

c0016956 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016956:	55                   	push   ebp
c0016957:	57                   	push   edi
c0016958:	56                   	push   esi
c0016959:	53                   	push   ebx
c001695a:	81 ec 28 01 00 00    	sub    esp,0x128
c0016960:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0016967:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001696e:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016975:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c001697c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016980:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016984:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001698b:	e8 6c dd ff ff       	call   c00146fc <Device::getName()>
c0016990:	5a                   	pop    edx
c0016991:	59                   	pop    ecx
c0016992:	50                   	push   eax
c0016993:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0016997:	55                   	push   ebp
c0016998:	e8 97 9e fe ff       	call   c0000834 <strcpy>
c001699d:	5b                   	pop    ebx
c001699e:	58                   	pop    eax
c001699f:	68 2c b3 02 c0       	push   0xc002b32c
c00169a4:	55                   	push   ebp
c00169a5:	e8 ca 9f fe ff       	call   c0000974 <strcat>
c00169aa:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00169b1:	e8 8d 8e ff ff       	call   c000f843 <malloc>
c00169b6:	83 c4 0c             	add    esp,0xc
c00169b9:	89 c3                	mov    ebx,eax
c00169bb:	57                   	push   edi
c00169bc:	56                   	push   esi
c00169bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00169c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00169c5:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00169cc:	55                   	push   ebp
c00169cd:	50                   	push   eax
c00169ce:	e8 cf fb ff ff       	call   c00165a2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00169d3:	83 c4 14             	add    esp,0x14
c00169d6:	53                   	push   ebx
c00169d7:	e8 7c fc ff ff       	call   c0016658 <LogicalDisk::assignDriveLetter()>
c00169dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00169df:	89 c6                	mov    esi,eax
c00169e1:	e8 28 fd ff ff       	call   c001670e <LogicalDisk::mount()>
c00169e6:	58                   	pop    eax
c00169e7:	5a                   	pop    edx
c00169e8:	53                   	push   ebx
c00169e9:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00169f0:	e8 1b da ff ff       	call   c0014410 <Device::addChild(Device*)>
c00169f5:	59                   	pop    ecx
c00169f6:	89 f0                	mov    eax,esi
c00169f8:	5b                   	pop    ebx
c00169f9:	0f be f0             	movsx  esi,al
c00169fc:	56                   	push   esi
c00169fd:	68 37 b3 02 c0       	push   0xc002b337
c0016a02:	e8 e3 c5 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0016a07:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016a0d:	5b                   	pop    ebx
c0016a0e:	5e                   	pop    esi
c0016a0f:	5f                   	pop    edi
c0016a10:	5d                   	pop    ebp
c0016a11:	c3                   	ret    

c0016a12 <createPartitionsForDisk(PhysicalDisk*)>:
c0016a12:	55                   	push   ebp
c0016a13:	57                   	push   edi
c0016a14:	56                   	push   esi
c0016a15:	53                   	push   ebx
c0016a16:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016a1c:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016a23:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016a29:	3d 00 02 00 00       	cmp    eax,0x200
c0016a2e:	74 27                	je     c0016a57 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016a30:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016a36:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016a3c:	83 ec 10             	sub    esp,0x10
c0016a3f:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016a43:	99                   	cdq    
c0016a44:	c1 e6 0a             	shl    esi,0xa
c0016a47:	52                   	push   edx
c0016a48:	89 fd                	mov    ebp,edi
c0016a4a:	50                   	push   eax
c0016a4b:	55                   	push   ebp
c0016a4c:	56                   	push   esi
c0016a4d:	e8 0a 00 01 00       	call   c0026a5c <__udivdi3>
c0016a52:	e9 b1 00 00 00       	jmp    c0016b08 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016a57:	83 ec 0c             	sub    esp,0xc
c0016a5a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a5c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016a60:	56                   	push   esi
c0016a61:	6a 01                	push   0x1
c0016a63:	6a 00                	push   0x0
c0016a65:	6a 00                	push   0x0
c0016a67:	53                   	push   ebx
c0016a68:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016a6b:	83 c4 20             	add    esp,0x20
c0016a6e:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016a76:	75 0a                	jne    c0016a82 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016a78:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016a80:	74 2c                	je     c0016aae <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016a82:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016a88:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016a8e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016a94:	83 ec 10             	sub    esp,0x10
c0016a97:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016a9b:	89 f7                	mov    edi,esi
c0016a9d:	c1 e0 0a             	shl    eax,0xa
c0016aa0:	c1 ff 1f             	sar    edi,0x1f
c0016aa3:	57                   	push   edi
c0016aa4:	56                   	push   esi
c0016aa5:	52                   	push   edx
c0016aa6:	50                   	push   eax
c0016aa7:	e8 b0 ff 00 00       	call   c0026a5c <__udivdi3>
c0016aac:	eb 5a                	jmp    c0016b08 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016aae:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016ab5:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016abc:	83 e1 7f             	and    ecx,0x7f
c0016abf:	83 e0 7f             	and    eax,0x7f
c0016ac2:	01 c1                	add    ecx,eax
c0016ac4:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016acb:	83 e0 7f             	and    eax,0x7f
c0016ace:	01 c1                	add    ecx,eax
c0016ad0:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016ad7:	83 e0 7f             	and    eax,0x7f
c0016ada:	00 c1                	add    cl,al
c0016adc:	74 41                	je     c0016b1f <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016ade:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016ae4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016aea:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016af0:	83 ec 10             	sub    esp,0x10
c0016af3:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016af7:	89 f7                	mov    edi,esi
c0016af9:	c1 e0 0a             	shl    eax,0xa
c0016afc:	c1 ff 1f             	sar    edi,0x1f
c0016aff:	57                   	push   edi
c0016b00:	56                   	push   esi
c0016b01:	52                   	push   edx
c0016b02:	50                   	push   eax
c0016b03:	e8 54 ff 00 00       	call   c0026a5c <__udivdi3>
c0016b08:	83 c4 14             	add    esp,0x14
c0016b0b:	52                   	push   edx
c0016b0c:	50                   	push   eax
c0016b0d:	6a 00                	push   0x0
c0016b0f:	6a 00                	push   0x0
c0016b11:	53                   	push   ebx
c0016b12:	e8 3f fe ff ff       	call   c0016956 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016b17:	83 c4 20             	add    esp,0x20
c0016b1a:	e9 79 01 00 00       	jmp    c0016c98 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016b1f:	89 f0                	mov    eax,esi
c0016b21:	31 f6                	xor    esi,esi
c0016b23:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016b2a:	75 02                	jne    c0016b2e <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016b2c:	89 f1                	mov    ecx,esi
c0016b2e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016b35:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016b3c:	c1 e2 08             	shl    edx,0x8
c0016b3f:	c1 e7 10             	shl    edi,0x10
c0016b42:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016b4a:	09 fa                	or     edx,edi
c0016b4c:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016b54:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016b5b:	83 c0 10             	add    eax,0x10
c0016b5e:	09 fa                	or     edx,edi
c0016b60:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016b67:	c1 e7 18             	shl    edi,0x18
c0016b6a:	09 fa                	or     edx,edi
c0016b6c:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016b73:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016b77:	c1 e7 10             	shl    edi,0x10
c0016b7a:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016b81:	c1 e2 08             	shl    edx,0x8
c0016b84:	09 fa                	or     edx,edi
c0016b86:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016b8d:	09 fa                	or     edx,edi
c0016b8f:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016b96:	c1 e7 18             	shl    edi,0x18
c0016b99:	09 fa                	or     edx,edi
c0016b9b:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016b9f:	46                   	inc    esi
c0016ba0:	83 fe 04             	cmp    esi,0x4
c0016ba3:	0f 85 7a ff ff ff    	jne    c0016b23 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016ba9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bad:	83 f0 01             	xor    eax,0x1
c0016bb0:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016bb4:	75 57                	jne    c0016c0d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016bb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016bba:	83 f0 01             	xor    eax,0x1
c0016bbd:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016bc1:	75 4a                	jne    c0016c0d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016bc3:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016bc7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016bcf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016bd7:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016bdd:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016be3:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016be9:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016bed:	89 f7                	mov    edi,esi
c0016bef:	c1 e0 0a             	shl    eax,0xa
c0016bf2:	c1 ff 1f             	sar    edi,0x1f
c0016bf5:	57                   	push   edi
c0016bf6:	56                   	push   esi
c0016bf7:	52                   	push   edx
c0016bf8:	50                   	push   eax
c0016bf9:	e8 5e fe 00 00       	call   c0026a5c <__udivdi3>
c0016bfe:	83 c4 10             	add    esp,0x10
c0016c01:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016c05:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016c09:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016c0d:	84 c9                	test   cl,cl
c0016c0f:	74 53                	je     c0016c64 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016c11:	0f b6 c9             	movzx  ecx,cl
c0016c14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c18:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016c1c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016c20:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016c24:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016c28:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016c2c:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016c30:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016c34:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016c38:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016c3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c40:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016c44:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016c48:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016c4c:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016c50:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016c54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016c58:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016c5c:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016c60:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016c64:	31 ed                	xor    ebp,ebp
c0016c66:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016c6a:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016c6e:	89 f8                	mov    eax,edi
c0016c70:	09 f0                	or     eax,esi
c0016c72:	74 1e                	je     c0016c92 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016c74:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016c78:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016c7c:	89 d1                	mov    ecx,edx
c0016c7e:	09 c1                	or     ecx,eax
c0016c80:	74 10                	je     c0016c92 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016c82:	83 ec 0c             	sub    esp,0xc
c0016c85:	57                   	push   edi
c0016c86:	56                   	push   esi
c0016c87:	52                   	push   edx
c0016c88:	50                   	push   eax
c0016c89:	53                   	push   ebx
c0016c8a:	e8 c7 fc ff ff       	call   c0016956 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016c8f:	83 c4 20             	add    esp,0x20
c0016c92:	45                   	inc    ebp
c0016c93:	83 fd 04             	cmp    ebp,0x4
c0016c96:	75 ce                	jne    c0016c66 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016c98:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016c9e:	5b                   	pop    ebx
c0016c9f:	5e                   	pop    esi
c0016ca0:	5f                   	pop    edi
c0016ca1:	5d                   	pop    ebp
c0016ca2:	c3                   	ret    
c0016ca3:	90                   	nop

c0016ca4 <Serial::Serial(char const*)>:
c0016ca4:	83 ec 0c             	sub    esp,0xc
c0016ca7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cab:	83 ec 08             	sub    esp,0x8
c0016cae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cb2:	50                   	push   eax
c0016cb3:	e8 48 d9 ff ff       	call   c0014600 <Device::Device(char const*)>
c0016cb8:	83 c4 10             	add    esp,0x10
c0016cbb:	ba 64 b3 02 c0       	mov    edx,0xc002b364
c0016cc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cc4:	89 10                	mov    DWORD PTR [eax],edx
c0016cc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cca:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016cd4:	90                   	nop
c0016cd5:	83 c4 0c             	add    esp,0xc
c0016cd8:	c3                   	ret    
c0016cd9:	90                   	nop

c0016cda <Serial::~Serial()>:
c0016cda:	83 ec 0c             	sub    esp,0xc
c0016cdd:	ba 64 b3 02 c0       	mov    edx,0xc002b364
c0016ce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ce6:	89 10                	mov    DWORD PTR [eax],edx
c0016ce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cec:	83 ec 0c             	sub    esp,0xc
c0016cef:	50                   	push   eax
c0016cf0:	e8 ed d5 ff ff       	call   c00142e2 <Device::~Device()>
c0016cf5:	83 c4 10             	add    esp,0x10
c0016cf8:	90                   	nop
c0016cf9:	83 c4 0c             	add    esp,0xc
c0016cfc:	c3                   	ret    
c0016cfd:	90                   	nop

c0016cfe <Serial::~Serial()>:
c0016cfe:	83 ec 0c             	sub    esp,0xc
c0016d01:	83 ec 0c             	sub    esp,0xc
c0016d04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d08:	e8 cd ff ff ff       	call   c0016cda <Serial::~Serial()>
c0016d0d:	83 c4 10             	add    esp,0x10
c0016d10:	83 ec 08             	sub    esp,0x8
c0016d13:	68 58 01 00 00       	push   0x158
c0016d18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d1c:	e8 e9 c1 ff ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c0016d21:	83 c4 10             	add    esp,0x10
c0016d24:	83 c4 0c             	add    esp,0xc
c0016d27:	c3                   	ret    

c0016d28 <Timer::Timer(char const*)>:
c0016d28:	83 ec 0c             	sub    esp,0xc
c0016d2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d2f:	83 ec 08             	sub    esp,0x8
c0016d32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d36:	50                   	push   eax
c0016d37:	e8 c4 d8 ff ff       	call   c0014600 <Device::Device(char const*)>
c0016d3c:	83 c4 10             	add    esp,0x10
c0016d3f:	ba a8 b3 02 c0       	mov    edx,0xc002b3a8
c0016d44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d48:	89 10                	mov    DWORD PTR [eax],edx
c0016d4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d4e:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016d58:	90                   	nop
c0016d59:	83 c4 0c             	add    esp,0xc
c0016d5c:	c3                   	ret    
c0016d5d:	90                   	nop

c0016d5e <Timer::~Timer()>:
c0016d5e:	83 ec 0c             	sub    esp,0xc
c0016d61:	ba a8 b3 02 c0       	mov    edx,0xc002b3a8
c0016d66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d6a:	89 10                	mov    DWORD PTR [eax],edx
c0016d6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d70:	83 ec 0c             	sub    esp,0xc
c0016d73:	50                   	push   eax
c0016d74:	e8 69 d5 ff ff       	call   c00142e2 <Device::~Device()>
c0016d79:	83 c4 10             	add    esp,0x10
c0016d7c:	90                   	nop
c0016d7d:	83 c4 0c             	add    esp,0xc
c0016d80:	c3                   	ret    
c0016d81:	90                   	nop

c0016d82 <Timer::~Timer()>:
c0016d82:	83 ec 0c             	sub    esp,0xc
c0016d85:	83 ec 0c             	sub    esp,0xc
c0016d88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d8c:	e8 cd ff ff ff       	call   c0016d5e <Timer::~Timer()>
c0016d91:	83 c4 10             	add    esp,0x10
c0016d94:	83 ec 08             	sub    esp,0x8
c0016d97:	68 5c 01 00 00       	push   0x15c
c0016d9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016da0:	e8 65 c1 ff ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c0016da5:	83 c4 10             	add    esp,0x10
c0016da8:	83 c4 0c             	add    esp,0xc
c0016dab:	c3                   	ret    

c0016dac <Timer::read()>:
c0016dac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016db0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016db6:	c3                   	ret    

c0016db7 <timerHandler(unsigned long long)>:
c0016db7:	55                   	push   ebp
c0016db8:	57                   	push   edi
c0016db9:	56                   	push   esi
c0016dba:	53                   	push   ebx
c0016dbb:	83 ec 0c             	sub    esp,0xc
c0016dbe:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016dc2:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016dc6:	01 35 50 eb 02 c0    	add    DWORD PTR ds:0xc002eb50,esi
c0016dcc:	11 3d 54 eb 02 c0    	adc    DWORD PTR ds:0xc002eb54,edi
c0016dd2:	80 3d cd e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e4cd,0x0
c0016dd9:	0f 84 07 01 00 00    	je     c0016ee6 <timerHandler(unsigned long long)+0x12f>
c0016ddf:	e8 c7 70 00 00       	call   c001deab <lockStuff()>
c0016de4:	83 ec 0c             	sub    esp,0xc
c0016de7:	68 1c 1a 03 c0       	push   0xc0031a1c
c0016dec:	e8 dd 1c 01 00       	call   c0028ace <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016df1:	c7 04 24 1c 1a 03 c0 	mov    DWORD PTR [esp],0xc0031a1c
c0016df8:	89 c3                	mov    ebx,eax
c0016dfa:	e8 d7 1c 01 00       	call   c0028ad6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016dff:	83 c4 10             	add    esp,0x10
c0016e02:	84 c0                	test   al,al
c0016e04:	74 60                	je     c0016e66 <timerHandler(unsigned long long)+0xaf>
c0016e06:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016e0c:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0016e0f:	85 c0                	test   eax,eax
c0016e11:	0f 85 91 00 00 00    	jne    c0016ea8 <timerHandler(unsigned long long)+0xf1>
c0016e17:	e9 be 00 00 00       	jmp    c0016eda <timerHandler(unsigned long long)+0x123>
c0016e1c:	83 ec 0c             	sub    esp,0xc
c0016e1f:	55                   	push   ebp
c0016e20:	e8 77 76 00 00       	call   c001e49c <unblockTask(ThreadControlBlock*)>
c0016e25:	83 c4 10             	add    esp,0x10
c0016e28:	39 eb                	cmp    ebx,ebp
c0016e2a:	75 12                	jne    c0016e3e <timerHandler(unsigned long long)+0x87>
c0016e2c:	83 ec 0c             	sub    esp,0xc
c0016e2f:	68 1c 1a 03 c0       	push   0xc0031a1c
c0016e34:	e8 95 1c 01 00       	call   c0028ace <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e39:	89 c3                	mov    ebx,eax
c0016e3b:	83 c4 10             	add    esp,0x10
c0016e3e:	83 ec 0c             	sub    esp,0xc
c0016e41:	68 1c 1a 03 c0       	push   0xc0031a1c
c0016e46:	e8 8b 1c 01 00       	call   c0028ad6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016e4b:	83 c4 10             	add    esp,0x10
c0016e4e:	84 c0                	test   al,al
c0016e50:	75 b4                	jne    c0016e06 <timerHandler(unsigned long long)+0x4f>
c0016e52:	83 ec 0c             	sub    esp,0xc
c0016e55:	68 1c 1a 03 c0       	push   0xc0031a1c
c0016e5a:	e8 6f 1c 01 00       	call   c0028ace <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e5f:	83 c4 10             	add    esp,0x10
c0016e62:	39 d8                	cmp    eax,ebx
c0016e64:	74 a0                	je     c0016e06 <timerHandler(unsigned long long)+0x4f>
c0016e66:	83 ec 0c             	sub    esp,0xc
c0016e69:	68 1c 1a 03 c0       	push   0xc0031a1c
c0016e6e:	e8 5b 1c 01 00       	call   c0028ace <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e73:	c7 04 24 1c 1a 03 c0 	mov    DWORD PTR [esp],0xc0031a1c
c0016e7a:	89 c5                	mov    ebp,eax
c0016e7c:	e8 71 1c 01 00       	call   c0028af2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016e81:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016e84:	83 c4 10             	add    esp,0x10
c0016e87:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016e8a:	39 15 50 eb 02 c0    	cmp    DWORD PTR ds:0xc002eb50,edx
c0016e90:	a1 54 eb 02 c0       	mov    eax,ds:0xc002eb54
c0016e95:	19 c8                	sbb    eax,ecx
c0016e97:	73 83                	jae    c0016e1c <timerHandler(unsigned long long)+0x65>
c0016e99:	50                   	push   eax
c0016e9a:	50                   	push   eax
c0016e9b:	55                   	push   ebp
c0016e9c:	68 1c 1a 03 c0       	push   0xc0031a1c
c0016ea1:	e8 fa 1c 01 00       	call   c0028ba0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016ea6:	eb 93                	jmp    c0016e3b <timerHandler(unsigned long long)+0x84>
c0016ea8:	80 3d cc e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e4cc,0x0
c0016eaf:	74 29                	je     c0016eda <timerHandler(unsigned long long)+0x123>
c0016eb1:	39 c6                	cmp    esi,eax
c0016eb3:	bb 00 00 00 00       	mov    ebx,0x0
c0016eb8:	19 df                	sbb    edi,ebx
c0016eba:	72 19                	jb     c0016ed5 <timerHandler(unsigned long long)+0x11e>
c0016ebc:	e8 c3 6f 00 00       	call   c001de84 <lockScheduler()>
c0016ec1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ec6:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016ec9:	e8 f2 72 00 00       	call   c001e1c0 <schedule()>
c0016ece:	e8 b3 6f 00 00       	call   c001de86 <unlockScheduler()>
c0016ed3:	eb 05                	jmp    c0016eda <timerHandler(unsigned long long)+0x123>
c0016ed5:	29 f0                	sub    eax,esi
c0016ed7:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016eda:	83 c4 0c             	add    esp,0xc
c0016edd:	5b                   	pop    ebx
c0016ede:	5e                   	pop    esi
c0016edf:	5f                   	pop    edi
c0016ee0:	5d                   	pop    ebp
c0016ee1:	e9 5f 73 00 00       	jmp    c001e245 <unlockStuff()>
c0016ee6:	83 c4 0c             	add    esp,0xc
c0016ee9:	5b                   	pop    ebx
c0016eea:	5e                   	pop    esi
c0016eeb:	5f                   	pop    edi
c0016eec:	5d                   	pop    ebp
c0016eed:	c3                   	ret    

c0016eee <setupTimer(int)>:
c0016eee:	57                   	push   edi
c0016eef:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0016ef4:	56                   	push   esi
c0016ef5:	53                   	push   ebx
c0016ef6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016efa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016f00:	83 ec 0c             	sub    esp,0xc
c0016f03:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016f09:	e8 ee d7 ff ff       	call   c00146fc <Device::getName()>
c0016f0e:	83 c4 10             	add    esp,0x10
c0016f11:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016f14:	0f 85 8d 00 00 00    	jne    c0016fa7 <setupTimer(int)+0xb9>
c0016f1a:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0016f1f:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016f26:	74 7f                	je     c0016fa7 <setupTimer(int)+0xb9>
c0016f28:	83 ec 0c             	sub    esp,0xc
c0016f2b:	68 5c 01 00 00       	push   0x15c
c0016f30:	e8 0e 89 ff ff       	call   c000f843 <malloc>
c0016f35:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f38:	89 c3                	mov    ebx,eax
c0016f3a:	e8 ff f6 00 00       	call   c002663e <PIT::PIT()>
c0016f3f:	59                   	pop    ecx
c0016f40:	5f                   	pop    edi
c0016f41:	53                   	push   ebx
c0016f42:	ff 35 c8 e4 02 c0    	push   DWORD PTR ds:0xc002e4c8
c0016f48:	e8 c3 d4 ff ff       	call   c0014410 <Device::addChild(Device*)>
c0016f4d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f4f:	6a 00                	push   0x0
c0016f51:	6a 00                	push   0x0
c0016f53:	56                   	push   esi
c0016f54:	53                   	push   ebx
c0016f55:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016f58:	83 c4 14             	add    esp,0x14
c0016f5b:	68 60 01 00 00       	push   0x160
c0016f60:	e8 de 88 ff ff       	call   c000f843 <malloc>
c0016f65:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f68:	89 c7                	mov    edi,eax
c0016f6a:	e8 7f f5 00 00       	call   c00264ee <APICTimer::APICTimer()>
c0016f6f:	6a 00                	push   0x0
c0016f71:	6a 00                	push   0x0
c0016f73:	56                   	push   esi
c0016f74:	57                   	push   edi
c0016f75:	e8 76 f4 00 00       	call   c00263f0 <APICTimer::open(int, int, void*)>
c0016f7a:	83 c4 20             	add    esp,0x20
c0016f7d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f7f:	6a 00                	push   0x0
c0016f81:	6a 00                	push   0x0
c0016f83:	6a 00                	push   0x0
c0016f85:	53                   	push   ebx
c0016f86:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016f89:	58                   	pop    eax
c0016f8a:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0016f8f:	5a                   	pop    edx
c0016f90:	57                   	push   edi
c0016f91:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016f97:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016f9d:	e8 6e d4 ff ff       	call   c0014410 <Device::addChild(Device*)>
c0016fa2:	83 c4 10             	add    esp,0x10
c0016fa5:	eb 33                	jmp    c0016fda <setupTimer(int)+0xec>
c0016fa7:	83 ec 0c             	sub    esp,0xc
c0016faa:	68 5c 01 00 00       	push   0x15c
c0016faf:	e8 8f 88 ff ff       	call   c000f843 <malloc>
c0016fb4:	89 04 24             	mov    DWORD PTR [esp],eax
c0016fb7:	89 c3                	mov    ebx,eax
c0016fb9:	e8 80 f6 00 00       	call   c002663e <PIT::PIT()>
c0016fbe:	58                   	pop    eax
c0016fbf:	5a                   	pop    edx
c0016fc0:	53                   	push   ebx
c0016fc1:	ff 35 c8 e4 02 c0    	push   DWORD PTR ds:0xc002e4c8
c0016fc7:	e8 44 d4 ff ff       	call   c0014410 <Device::addChild(Device*)>
c0016fcc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016fce:	6a 00                	push   0x0
c0016fd0:	6a 00                	push   0x0
c0016fd2:	56                   	push   esi
c0016fd3:	53                   	push   ebx
c0016fd4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016fd7:	83 c4 20             	add    esp,0x20
c0016fda:	89 d8                	mov    eax,ebx
c0016fdc:	5b                   	pop    ebx
c0016fdd:	5e                   	pop    esi
c0016fde:	5f                   	pop    edi
c0016fdf:	c3                   	ret    

c0016fe0 <VCache::VCache(PhysicalDisk*)>:
c0016fe0:	53                   	push   ebx
c0016fe1:	83 ec 18             	sub    esp,0x18
c0016fe4:	ba d8 b3 02 c0       	mov    edx,0xc002b3d8
c0016fe9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fed:	89 10                	mov    DWORD PTR [eax],edx
c0016fef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ff3:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016ffa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ffe:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0017005:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017009:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0017010:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0017017:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001701b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0017022:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0017029:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001702d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0017034:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017038:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001703c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017040:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0017047:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c001704e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017052:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0017056:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001705a:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c001705e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017062:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0017066:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001706a:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0017071:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0017079:	83 ec 0c             	sub    esp,0xc
c001707c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017080:	e8 be 87 ff ff       	call   c000f843 <malloc>
c0017085:	83 c4 10             	add    esp,0x10
c0017088:	89 c3                	mov    ebx,eax
c001708a:	83 ec 0c             	sub    esp,0xc
c001708d:	53                   	push   ebx
c001708e:	e8 11 6f 00 00       	call   c001dfa4 <Mutex::Mutex()>
c0017093:	83 c4 10             	add    esp,0x10
c0017096:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001709a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001709d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170a1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00170a5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00170a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170ac:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c00170b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170b7:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00170bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170c1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00170c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170c8:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c00170ce:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00170d4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00170d8:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00170db:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00170de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170e2:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c00170e6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170ea:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00170f0:	05 00 01 00 00       	add    eax,0x100
c00170f5:	c1 e0 04             	shl    eax,0x4
c00170f8:	83 ec 0c             	sub    esp,0xc
c00170fb:	50                   	push   eax
c00170fc:	e8 42 87 ff ff       	call   c000f843 <malloc>
c0017101:	83 c4 10             	add    esp,0x10
c0017104:	89 c2                	mov    edx,eax
c0017106:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001710a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001710d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017111:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0017118:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001711c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0017120:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017124:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001712a:	c1 e0 07             	shl    eax,0x7
c001712d:	83 ec 0c             	sub    esp,0xc
c0017130:	50                   	push   eax
c0017131:	e8 0d 87 ff ff       	call   c000f843 <malloc>
c0017136:	83 c4 10             	add    esp,0x10
c0017139:	89 c2                	mov    edx,eax
c001713b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001713f:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0017142:	90                   	nop
c0017143:	83 c4 18             	add    esp,0x18
c0017146:	5b                   	pop    ebx
c0017147:	c3                   	ret    

c0017148 <VCache::invalidateReadBuffer()>:
c0017148:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001714c:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0017152:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0017156:	c3                   	ret    
c0017157:	90                   	nop

c0017158 <VCache::writeWriteBuffer()>:
c0017158:	53                   	push   ebx
c0017159:	83 ec 14             	sub    esp,0x14
c001715c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017160:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017163:	8b 10                	mov    edx,DWORD PTR [eax]
c0017165:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0017168:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001716b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001716e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0017171:	50                   	push   eax
c0017172:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0017175:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c001717c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0017183:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0017187:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c001718e:	83 c4 28             	add    esp,0x28
c0017191:	5b                   	pop    ebx
c0017192:	c3                   	ret    
c0017193:	90                   	nop

c0017194 <VCache::~VCache()>:
c0017194:	83 ec 0c             	sub    esp,0xc
c0017197:	ba d8 b3 02 c0       	mov    edx,0xc002b3d8
c001719c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171a0:	89 10                	mov    DWORD PTR [eax],edx
c00171a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171a6:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c00171a9:	84 c0                	test   al,al
c00171ab:	74 0f                	je     c00171bc <VCache::~VCache()+0x28>
c00171ad:	83 ec 0c             	sub    esp,0xc
c00171b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171b4:	e8 9f ff ff ff       	call   c0017158 <VCache::writeWriteBuffer()>
c00171b9:	83 c4 10             	add    esp,0x10
c00171bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171c0:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00171c3:	83 ec 0c             	sub    esp,0xc
c00171c6:	50                   	push   eax
c00171c7:	e8 87 86 ff ff       	call   c000f853 <free>
c00171cc:	83 c4 10             	add    esp,0x10
c00171cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171d3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00171d6:	83 ec 0c             	sub    esp,0xc
c00171d9:	50                   	push   eax
c00171da:	e8 74 86 ff ff       	call   c000f853 <free>
c00171df:	83 c4 10             	add    esp,0x10
c00171e2:	90                   	nop
c00171e3:	83 c4 0c             	add    esp,0xc
c00171e6:	c3                   	ret    
c00171e7:	90                   	nop

c00171e8 <VCache::~VCache()>:
c00171e8:	83 ec 0c             	sub    esp,0xc
c00171eb:	83 ec 0c             	sub    esp,0xc
c00171ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171f2:	e8 9d ff ff ff       	call   c0017194 <VCache::~VCache()>
c00171f7:	83 c4 10             	add    esp,0x10
c00171fa:	83 ec 08             	sub    esp,0x8
c00171fd:	6a 44                	push   0x44
c00171ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017203:	e8 02 bd ff ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c0017208:	83 c4 10             	add    esp,0x10
c001720b:	83 c4 0c             	add    esp,0xc
c001720e:	c3                   	ret    
c001720f:	90                   	nop

c0017210 <VCache::write(unsigned long long, int, void*)>:
c0017210:	55                   	push   ebp
c0017211:	57                   	push   edi
c0017212:	56                   	push   esi
c0017213:	53                   	push   ebx
c0017214:	83 ec 28             	sub    esp,0x28
c0017217:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001721b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001721f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017223:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0017227:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001722a:	e8 d7 71 00 00       	call   c001e406 <Semaphore::acquire()>
c001722f:	83 c4 10             	add    esp,0x10
c0017232:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0017236:	74 0c                	je     c0017244 <VCache::write(unsigned long long, int, void*)+0x34>
c0017238:	83 ec 0c             	sub    esp,0xc
c001723b:	53                   	push   ebx
c001723c:	e8 07 ff ff ff       	call   c0017148 <VCache::invalidateReadBuffer()>
c0017241:	83 c4 10             	add    esp,0x10
c0017244:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017248:	74 66                	je     c00172b0 <VCache::write(unsigned long long, int, void*)+0xa0>
c001724a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001724d:	99                   	cdq    
c001724e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017252:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0017255:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0017258:	89 c1                	mov    ecx,eax
c001725a:	89 d0                	mov    eax,edx
c001725c:	31 f1                	xor    ecx,esi
c001725e:	31 f8                	xor    eax,edi
c0017260:	89 ca                	mov    edx,ecx
c0017262:	09 c2                	or     edx,eax
c0017264:	75 3e                	jne    c00172a4 <VCache::write(unsigned long long, int, void*)+0x94>
c0017266:	83 fd 01             	cmp    ebp,0x1
c0017269:	75 39                	jne    c00172a4 <VCache::write(unsigned long long, int, void*)+0x94>
c001726b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001726e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017274:	51                   	push   ecx
c0017275:	50                   	push   eax
c0017276:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001727a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001727e:	0f af c8             	imul   ecx,eax
c0017281:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0017284:	51                   	push   ecx
c0017285:	e8 ba 94 fe ff       	call   c0000744 <memcpy>
c001728a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001728d:	83 c4 10             	add    esp,0x10
c0017290:	40                   	inc    eax
c0017291:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0017294:	83 c0 80             	add    eax,0xffffff80
c0017297:	75 57                	jne    c00172f0 <VCache::write(unsigned long long, int, void*)+0xe0>
c0017299:	83 ec 0c             	sub    esp,0xc
c001729c:	53                   	push   ebx
c001729d:	e8 b6 fe ff ff       	call   c0017158 <VCache::writeWriteBuffer()>
c00172a2:	eb 34                	jmp    c00172d8 <VCache::write(unsigned long long, int, void*)+0xc8>
c00172a4:	83 ec 0c             	sub    esp,0xc
c00172a7:	53                   	push   ebx
c00172a8:	e8 ab fe ff ff       	call   c0017158 <VCache::writeWriteBuffer()>
c00172ad:	83 c4 10             	add    esp,0x10
c00172b0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00172b3:	83 fd 7f             	cmp    ebp,0x7f
c00172b6:	7f 25                	jg     c00172dd <VCache::write(unsigned long long, int, void*)+0xcd>
c00172b8:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00172bb:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00172be:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c00172c1:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00172c5:	52                   	push   edx
c00172c6:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00172cc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00172d0:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00172d3:	e8 6c 94 fe ff       	call   c0000744 <memcpy>
c00172d8:	83 c4 10             	add    esp,0x10
c00172db:	eb 13                	jmp    c00172f0 <VCache::write(unsigned long long, int, void*)+0xe0>
c00172dd:	83 ec 0c             	sub    esp,0xc
c00172e0:	8b 10                	mov    edx,DWORD PTR [eax]
c00172e2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00172e6:	55                   	push   ebp
c00172e7:	57                   	push   edi
c00172e8:	56                   	push   esi
c00172e9:	50                   	push   eax
c00172ea:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00172ed:	83 c4 20             	add    esp,0x20
c00172f0:	83 ec 0c             	sub    esp,0xc
c00172f3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00172f6:	e8 b9 76 00 00       	call   c001e9b4 <Semaphore::release()>
c00172fb:	83 c4 2c             	add    esp,0x2c
c00172fe:	31 c0                	xor    eax,eax
c0017300:	5b                   	pop    ebx
c0017301:	5e                   	pop    esi
c0017302:	5f                   	pop    edi
c0017303:	5d                   	pop    ebp
c0017304:	c3                   	ret    
c0017305:	90                   	nop

c0017306 <VCache::read(unsigned long long, int, void*)>:
c0017306:	55                   	push   ebp
c0017307:	57                   	push   edi
c0017308:	56                   	push   esi
c0017309:	53                   	push   ebx
c001730a:	83 ec 28             	sub    esp,0x28
c001730d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017311:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017315:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017319:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001731d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0017321:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0017325:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0017329:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001732c:	e8 d5 70 00 00       	call   c001e406 <Semaphore::acquire()>
c0017331:	83 c4 10             	add    esp,0x10
c0017334:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017338:	74 0c                	je     c0017346 <VCache::read(unsigned long long, int, void*)+0x40>
c001733a:	83 ec 0c             	sub    esp,0xc
c001733d:	53                   	push   ebx
c001733e:	e8 15 fe ff ff       	call   c0017158 <VCache::writeWriteBuffer()>
c0017343:	83 c4 10             	add    esp,0x10
c0017346:	83 fe 01             	cmp    esi,0x1
c0017349:	0f 85 80 00 00 00    	jne    c00173cf <VCache::read(unsigned long long, int, void*)+0xc9>
c001734f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017352:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0017359:	75 74                	jne    c00173cf <VCache::read(unsigned long long, int, void*)+0xc9>
c001735b:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001735e:	89 d1                	mov    ecx,edx
c0017360:	f7 d9                	neg    ecx
c0017362:	89 cf                	mov    edi,ecx
c0017364:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0017368:	c1 ff 1f             	sar    edi,0x1f
c001736b:	23 0c 24             	and    ecx,DWORD PTR [esp]
c001736e:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0017372:	89 ce                	mov    esi,ecx
c0017374:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017378:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c001737c:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0017380:	89 cf                	mov    edi,ecx
c0017382:	74 0a                	je     c001738e <VCache::read(unsigned long long, int, void*)+0x88>
c0017384:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0017387:	75 05                	jne    c001738e <VCache::read(unsigned long long, int, void*)+0x88>
c0017389:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c001738c:	74 1c                	je     c00173aa <VCache::read(unsigned long long, int, void*)+0xa4>
c001738e:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0017392:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0017395:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c0017398:	83 ec 0c             	sub    esp,0xc
c001739b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001739d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00173a0:	52                   	push   edx
c00173a1:	57                   	push   edi
c00173a2:	56                   	push   esi
c00173a3:	50                   	push   eax
c00173a4:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c00173a7:	83 c4 20             	add    esp,0x20
c00173aa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00173ad:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00173b3:	50                   	push   eax
c00173b4:	52                   	push   edx
c00173b5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00173b8:	48                   	dec    eax
c00173b9:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c00173bd:	0f af c2             	imul   eax,edx
c00173c0:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c00173c3:	50                   	push   eax
c00173c4:	55                   	push   ebp
c00173c5:	e8 7a 93 fe ff       	call   c0000744 <memcpy>
c00173ca:	83 c4 10             	add    esp,0x10
c00173cd:	eb 21                	jmp    c00173f0 <VCache::read(unsigned long long, int, void*)+0xea>
c00173cf:	83 ec 0c             	sub    esp,0xc
c00173d2:	53                   	push   ebx
c00173d3:	e8 70 fd ff ff       	call   c0017148 <VCache::invalidateReadBuffer()>
c00173d8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00173db:	8b 10                	mov    edx,DWORD PTR [eax]
c00173dd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00173e0:	56                   	push   esi
c00173e1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00173e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00173e9:	50                   	push   eax
c00173ea:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00173ed:	83 c4 20             	add    esp,0x20
c00173f0:	83 ec 0c             	sub    esp,0xc
c00173f3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00173f6:	e8 b9 75 00 00       	call   c001e9b4 <Semaphore::release()>
c00173fb:	83 c4 2c             	add    esp,0x2c
c00173fe:	31 c0                	xor    eax,eax
c0017400:	5b                   	pop    ebx
c0017401:	5e                   	pop    esi
c0017402:	5f                   	pop    edi
c0017403:	5d                   	pop    ebp
c0017404:	c3                   	ret    
c0017405:	90                   	nop

c0017406 <Video::putrect(int, int, int, int, unsigned int)>:
c0017406:	55                   	push   ebp
c0017407:	57                   	push   edi
c0017408:	56                   	push   esi
c0017409:	53                   	push   ebx
c001740a:	83 ec 1c             	sub    esp,0x1c
c001740d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017411:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017415:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0017419:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001741d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017425:	01 df                	add    edi,ebx
c0017427:	39 fb                	cmp    ebx,edi
c0017429:	7d 1f                	jge    c001744a <Video::putrect(int, int, int, int, unsigned int)+0x44>
c001742b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001742f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0017433:	7d 12                	jge    c0017447 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0017435:	8b 16                	mov    edx,DWORD PTR [esi]
c0017437:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001743b:	53                   	push   ebx
c001743c:	55                   	push   ebp
c001743d:	45                   	inc    ebp
c001743e:	56                   	push   esi
c001743f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0017442:	83 c4 10             	add    esp,0x10
c0017445:	eb e8                	jmp    c001742f <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0017447:	43                   	inc    ebx
c0017448:	eb dd                	jmp    c0017427 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c001744a:	83 c4 1c             	add    esp,0x1c
c001744d:	5b                   	pop    ebx
c001744e:	5e                   	pop    esi
c001744f:	5f                   	pop    edi
c0017450:	5d                   	pop    ebp
c0017451:	c3                   	ret    

c0017452 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0017452:	55                   	push   ebp
c0017453:	57                   	push   edi
c0017454:	31 ff                	xor    edi,edi
c0017456:	56                   	push   esi
c0017457:	53                   	push   ebx
c0017458:	83 ec 1c             	sub    esp,0x1c
c001745b:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001745f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0017463:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c001746a:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001746f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017473:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0017477:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001747b:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001747e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017482:	01 f9                	add    ecx,edi
c0017484:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0017488:	7d 2f                	jge    c00174b9 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c001748a:	31 f6                	xor    esi,esi
c001748c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017490:	01 f2                	add    edx,esi
c0017492:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0017496:	7d 1a                	jge    c00174b2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0017498:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001749b:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001749e:	46                   	inc    esi
c001749f:	51                   	push   ecx
c00174a0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00174a4:	52                   	push   edx
c00174a5:	55                   	push   ebp
c00174a6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00174a9:	83 c4 10             	add    esp,0x10
c00174ac:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00174b0:	eb da                	jmp    c001748c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c00174b2:	47                   	inc    edi
c00174b3:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00174b7:	eb c5                	jmp    c001747e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c00174b9:	83 c4 1c             	add    esp,0x1c
c00174bc:	5b                   	pop    ebx
c00174bd:	5e                   	pop    esi
c00174be:	5f                   	pop    edi
c00174bf:	5d                   	pop    ebp
c00174c0:	c3                   	ret    
c00174c1:	90                   	nop

c00174c2 <Video::blit(unsigned int*, int, int, int, int)>:
c00174c2:	55                   	push   ebp
c00174c3:	57                   	push   edi
c00174c4:	56                   	push   esi
c00174c5:	53                   	push   ebx
c00174c6:	83 ec 1c             	sub    esp,0x1c
c00174c9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00174cd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00174d1:	85 c0                	test   eax,eax
c00174d3:	79 02                	jns    c00174d7 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00174d5:	31 c0                	xor    eax,eax
c00174d7:	c1 e0 02             	shl    eax,0x2
c00174da:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00174de:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00174e2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00174e6:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00174ea:	39 d8                	cmp    eax,ebx
c00174ec:	7e 49                	jle    c0017537 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00174ee:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00174f4:	7c 41                	jl     c0017537 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00174f6:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00174fa:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00174fe:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017502:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0017506:	39 f9                	cmp    ecx,edi
c0017508:	7e 22                	jle    c001752c <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c001750a:	83 c5 04             	add    ebp,0x4
c001750d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017513:	7c 14                	jl     c0017529 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0017515:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017517:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c001751a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001751e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017522:	56                   	push   esi
c0017523:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0017526:	83 c4 10             	add    esp,0x10
c0017529:	47                   	inc    edi
c001752a:	eb d2                	jmp    c00174fe <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c001752c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017530:	43                   	inc    ebx
c0017531:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017535:	eb ab                	jmp    c00174e2 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0017537:	83 c4 1c             	add    esp,0x1c
c001753a:	5b                   	pop    ebx
c001753b:	5e                   	pop    esi
c001753c:	5f                   	pop    edi
c001753d:	5d                   	pop    ebp
c001753e:	c3                   	ret    
c001753f:	90                   	nop

c0017540 <Video::clearScreen(unsigned int)>:
c0017540:	57                   	push   edi
c0017541:	56                   	push   esi
c0017542:	53                   	push   ebx
c0017543:	31 db                	xor    ebx,ebx
c0017545:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017549:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001754f:	7e 1f                	jle    c0017570 <Video::clearScreen(unsigned int)+0x30>
c0017551:	31 ff                	xor    edi,edi
c0017553:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017559:	7e 12                	jle    c001756d <Video::clearScreen(unsigned int)+0x2d>
c001755b:	8b 06                	mov    eax,DWORD PTR [esi]
c001755d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017561:	53                   	push   ebx
c0017562:	57                   	push   edi
c0017563:	47                   	inc    edi
c0017564:	56                   	push   esi
c0017565:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017568:	83 c4 10             	add    esp,0x10
c001756b:	eb e6                	jmp    c0017553 <Video::clearScreen(unsigned int)+0x13>
c001756d:	43                   	inc    ebx
c001756e:	eb d9                	jmp    c0017549 <Video::clearScreen(unsigned int)+0x9>
c0017570:	5b                   	pop    ebx
c0017571:	5e                   	pop    esi
c0017572:	5f                   	pop    edi
c0017573:	c3                   	ret    

c0017574 <Video::putpixel(int, int, unsigned int)>:
c0017574:	c7 44 24 04 e0 b3 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b3e0
c001757c:	e9 0e 31 00 00       	jmp    c001a68f <Krnl::panic(char const*)>
c0017581:	90                   	nop

c0017582 <Video::Video(char const*)>:
c0017582:	83 ec 0c             	sub    esp,0xc
c0017585:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017589:	83 ec 08             	sub    esp,0x8
c001758c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017590:	50                   	push   eax
c0017591:	e8 6a d0 ff ff       	call   c0014600 <Device::Device(char const*)>
c0017596:	83 c4 10             	add    esp,0x10
c0017599:	ba 64 b4 02 c0       	mov    edx,0xc002b464
c001759e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175a2:	89 10                	mov    DWORD PTR [eax],edx
c00175a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175a8:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00175b2:	90                   	nop
c00175b3:	83 c4 0c             	add    esp,0xc
c00175b6:	c3                   	ret    
c00175b7:	90                   	nop

c00175b8 <Video::~Video()>:
c00175b8:	83 ec 0c             	sub    esp,0xc
c00175bb:	ba 64 b4 02 c0       	mov    edx,0xc002b464
c00175c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175c4:	89 10                	mov    DWORD PTR [eax],edx
c00175c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175ca:	83 ec 0c             	sub    esp,0xc
c00175cd:	50                   	push   eax
c00175ce:	e8 0f cd ff ff       	call   c00142e2 <Device::~Device()>
c00175d3:	83 c4 10             	add    esp,0x10
c00175d6:	90                   	nop
c00175d7:	83 c4 0c             	add    esp,0xc
c00175da:	c3                   	ret    
c00175db:	90                   	nop

c00175dc <Video::~Video()>:
c00175dc:	83 ec 0c             	sub    esp,0xc
c00175df:	83 ec 0c             	sub    esp,0xc
c00175e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175e6:	e8 cd ff ff ff       	call   c00175b8 <Video::~Video()>
c00175eb:	83 c4 10             	add    esp,0x10
c00175ee:	83 ec 08             	sub    esp,0x8
c00175f1:	68 64 01 00 00       	push   0x164
c00175f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175fa:	e8 0b b9 ff ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c00175ff:	83 c4 10             	add    esp,0x10
c0017602:	83 c4 0c             	add    esp,0xc
c0017605:	c3                   	ret    

c0017606 <Video::isMonochrome()>:
c0017606:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001760a:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0017610:	c3                   	ret    
c0017611:	90                   	nop

c0017612 <Video::getWidth()>:
c0017612:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017616:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001761c:	c3                   	ret    
c001761d:	90                   	nop

c001761e <Video::getHeight()>:
c001761e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017622:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017628:	c3                   	ret    
c0017629:	90                   	nop

c001762a <Video::drawCursor(int, int, unsigned char*, int)>:
c001762a:	55                   	push   ebp
c001762b:	57                   	push   edi
c001762c:	56                   	push   esi
c001762d:	53                   	push   ebx
c001762e:	83 ec 2c             	sub    esp,0x2c
c0017631:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017635:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017639:	83 f8 01             	cmp    eax,0x1
c001763c:	19 c9                	sbb    ecx,ecx
c001763e:	31 db                	xor    ebx,ebx
c0017640:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0017644:	89 cd                	mov    ebp,ecx
c0017646:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001764e:	f7 d5                	not    ebp
c0017650:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0017656:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001765a:	01 d8                	add    eax,ebx
c001765c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017660:	56                   	push   esi
c0017661:	e8 b8 ff ff ff       	call   c001761e <Video::getHeight()>
c0017666:	59                   	pop    ecx
c0017667:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001766b:	7e 70                	jle    c00176dd <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c001766d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017671:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017675:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0017678:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001767c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017680:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0017687:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001768b:	89 f8                	mov    eax,edi
c001768d:	83 c0 20             	add    eax,0x20
c0017690:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017694:	56                   	push   esi
c0017695:	e8 78 ff ff ff       	call   c0017612 <Video::getWidth()>
c001769a:	5a                   	pop    edx
c001769b:	39 c7                	cmp    edi,eax
c001769d:	7d 34                	jge    c00176d3 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c001769f:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00176a4:	74 05                	je     c00176ab <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00176a6:	8b 06                	mov    eax,DWORD PTR [esi]
c00176a8:	55                   	push   ebp
c00176a9:	eb 0d                	jmp    c00176b8 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00176ab:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00176b0:	74 12                	je     c00176c4 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00176b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00176b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00176b8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00176bc:	57                   	push   edi
c00176bd:	56                   	push   esi
c00176be:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00176c1:	83 c4 10             	add    esp,0x10
c00176c4:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00176c8:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00176cc:	47                   	inc    edi
c00176cd:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00176d1:	75 c1                	jne    c0017694 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00176d3:	43                   	inc    ebx
c00176d4:	83 fb 20             	cmp    ebx,0x20
c00176d7:	0f 85 79 ff ff ff    	jne    c0017656 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00176dd:	83 c4 2c             	add    esp,0x2c
c00176e0:	5b                   	pop    ebx
c00176e1:	5e                   	pop    esi
c00176e2:	5f                   	pop    edi
c00176e3:	5d                   	pop    ebp
c00176e4:	c3                   	ret    
c00176e5:	90                   	nop

c00176e6 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c00176e6:	55                   	push   ebp
c00176e7:	57                   	push   edi
c00176e8:	56                   	push   esi
c00176e9:	53                   	push   ebx
c00176ea:	83 ec 28             	sub    esp,0x28
c00176ed:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00176f1:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c00176f5:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c00176f9:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00176fd:	c1 e7 08             	shl    edi,0x8
c0017700:	01 c7                	add    edi,eax
c0017702:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0017706:	c1 e0 08             	shl    eax,0x8
c0017709:	01 d0                	add    eax,edx
c001770b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001770f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017713:	0f af c7             	imul   eax,edi
c0017716:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c001771d:	50                   	push   eax
c001771e:	e8 20 81 ff ff       	call   c000f843 <malloc>
c0017723:	83 c4 10             	add    esp,0x10
c0017726:	89 c5                	mov    ebp,eax
c0017728:	85 c0                	test   eax,eax
c001772a:	75 15                	jne    c0017741 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c001772c:	83 ec 0c             	sub    esp,0xc
c001772f:	68 01 b4 02 c0       	push   0xc002b401
c0017734:	e8 b1 b8 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0017739:	83 c4 10             	add    esp,0x10
c001773c:	e9 1c 01 00 00       	jmp    c001785d <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017741:	be 12 00 00 00       	mov    esi,0x12
c0017746:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c001774a:	74 11                	je     c001775d <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c001774c:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c0017750:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0017754:	c1 fe 03             	sar    esi,0x3
c0017757:	0f af f0             	imul   esi,eax
c001775a:	83 c6 12             	add    esi,0x12
c001775d:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0017761:	74 04                	je     c0017767 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c0017763:	85 ff                	test   edi,edi
c0017765:	75 12                	jne    c0017779 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0017767:	83 ec 0c             	sub    esp,0xc
c001776a:	68 18 b4 02 c0       	push   0xc002b418
c001776f:	e8 76 b8 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0017774:	e9 ce 00 00 00       	jmp    c0017847 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0017779:	52                   	push   edx
c001777a:	52                   	push   edx
c001777b:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c001777f:	50                   	push   eax
c0017780:	68 2d b4 02 c0       	push   0xc002b42d
c0017785:	e8 60 b8 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001778a:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c001778e:	83 c4 10             	add    esp,0x10
c0017791:	80 fa 02             	cmp    dl,0x2
c0017794:	0f 85 98 00 00 00    	jne    c0017832 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c001779a:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001779f:	75 10                	jne    c00177b1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00177a1:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00177a5:	75 0a                	jne    c00177b1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00177a7:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00177aa:	83 e8 18             	sub    eax,0x18
c00177ad:	a8 f7                	test   al,0xf7
c00177af:	74 0a                	je     c00177bb <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c00177b1:	83 ec 0c             	sub    esp,0xc
c00177b4:	68 3a b4 02 c0       	push   0xc002b43a
c00177b9:	eb 7f                	jmp    c001783a <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c00177bb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00177c3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00177cb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00177cf:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00177d7:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c00177db:	75 0c                	jne    c00177e9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c00177dd:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c00177e2:	c1 e0 18             	shl    eax,0x18
c00177e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00177e9:	41                   	inc    ecx
c00177ea:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c00177ef:	c1 e2 10             	shl    edx,0x10
c00177f2:	89 d0                	mov    eax,edx
c00177f4:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c00177f9:	c1 e2 08             	shl    edx,0x8
c00177fc:	09 c2                	or     edx,eax
c00177fe:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c0017802:	09 c2                	or     edx,eax
c0017804:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0017808:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c001780c:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0017810:	c1 f8 03             	sar    eax,0x3
c0017813:	01 c6                	add    esi,eax
c0017815:	89 c8                	mov    eax,ecx
c0017817:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c001781b:	39 c7                	cmp    edi,eax
c001781d:	7f b0                	jg     c00177cf <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c001781f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017823:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017827:	39 14 24             	cmp    DWORD PTR [esp],edx
c001782a:	7e 22                	jle    c001784e <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c001782c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0017830:	eb 99                	jmp    c00177cb <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c0017832:	50                   	push   eax
c0017833:	50                   	push   eax
c0017834:	52                   	push   edx
c0017835:	68 48 b4 02 c0       	push   0xc002b448
c001783a:	e8 ab b7 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001783f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017842:	e8 0c 80 ff ff       	call   c000f853 <free>
c0017847:	83 c4 10             	add    esp,0x10
c001784a:	31 ed                	xor    ebp,ebp
c001784c:	eb 0f                	jmp    c001785d <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c001784e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017852:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0017855:	89 38                	mov    DWORD PTR [eax],edi
c0017857:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001785b:	89 08                	mov    DWORD PTR [eax],ecx
c001785d:	83 c4 1c             	add    esp,0x1c
c0017860:	89 e8                	mov    eax,ebp
c0017862:	5b                   	pop    ebx
c0017863:	5e                   	pop    esi
c0017864:	5f                   	pop    edi
c0017865:	5d                   	pop    ebp
c0017866:	c3                   	ret    
c0017867:	90                   	nop

c0017868 <Video::putTGA(int, int, unsigned char*, int)>:
c0017868:	55                   	push   ebp
c0017869:	57                   	push   edi
c001786a:	56                   	push   esi
c001786b:	53                   	push   ebx
c001786c:	83 ec 28             	sub    esp,0x28
c001786f:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0017873:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017877:	50                   	push   eax
c0017878:	8d 44 24 18          	lea    eax,[esp+0x18]
c001787c:	50                   	push   eax
c001787d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017881:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017885:	56                   	push   esi
c0017886:	e8 5b fe ff ff       	call   c00176e6 <Video::tgaParse(unsigned char*, int, int*, int*)>
c001788b:	83 c4 20             	add    esp,0x20
c001788e:	85 c0                	test   eax,eax
c0017890:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017894:	74 35                	je     c00178cb <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017896:	89 c7                	mov    edi,eax
c0017898:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001789c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00178a0:	39 d8                	cmp    eax,ebx
c00178a2:	7e 27                	jle    c00178cb <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00178a4:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00178a8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00178ac:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00178b0:	39 e8                	cmp    eax,ebp
c00178b2:	7e 14                	jle    c00178c8 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c00178b4:	8b 06                	mov    eax,DWORD PTR [esi]
c00178b6:	83 c7 04             	add    edi,0x4
c00178b9:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c00178bc:	53                   	push   ebx
c00178bd:	55                   	push   ebp
c00178be:	45                   	inc    ebp
c00178bf:	56                   	push   esi
c00178c0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00178c3:	83 c4 10             	add    esp,0x10
c00178c6:	eb e0                	jmp    c00178a8 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00178c8:	43                   	inc    ebx
c00178c9:	eb cd                	jmp    c0017898 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00178cb:	83 c4 1c             	add    esp,0x1c
c00178ce:	5b                   	pop    ebx
c00178cf:	5e                   	pop    esi
c00178d0:	5f                   	pop    edi
c00178d1:	5d                   	pop    ebp
c00178d2:	c3                   	ret    
c00178d3:	90                   	nop

c00178d4 <ACPI::close(int, int, void*)>:
c00178d4:	83 ec 1c             	sub    esp,0x1c
c00178d7:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00178df:	74 0a                	je     c00178eb <ACPI::close(int, int, void*)+0x17>
c00178e1:	b8 00 00 00 00       	mov    eax,0x0
c00178e6:	e9 9a 00 00 00       	jmp    c0017985 <ACPI::close(int, int, void*)+0xb1>
c00178eb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00178f0:	75 37                	jne    c0017929 <ACPI::close(int, int, void*)+0x55>
c00178f2:	83 ec 0c             	sub    esp,0xc
c00178f5:	68 a4 b4 02 c0       	push   0xc002b4a4
c00178fa:	e8 eb b6 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c00178ff:	83 c4 10             	add    esp,0x10
c0017902:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c0017907:	85 c0                	test   eax,eax
c0017909:	74 07                	je     c0017912 <ACPI::close(int, int, void*)+0x3e>
c001790b:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c0017910:	ff d0                	call   eax
c0017912:	83 ec 0c             	sub    esp,0xc
c0017915:	68 c8 b5 02 c0       	push   0xc002b5c8
c001791a:	e8 70 2d 00 00       	call   c001a68f <Krnl::panic(char const*)>
c001791f:	83 c4 10             	add    esp,0x10
c0017922:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017927:	eb 5c                	jmp    c0017985 <ACPI::close(int, int, void*)+0xb1>
c0017929:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001792e:	75 50                	jne    c0017980 <ACPI::close(int, int, void*)+0xac>
c0017930:	a1 84 0b 03 c0       	mov    eax,ds:0xc0030b84
c0017935:	85 c0                	test   eax,eax
c0017937:	74 07                	je     c0017940 <ACPI::close(int, int, void*)+0x6c>
c0017939:	a1 84 0b 03 c0       	mov    eax,ds:0xc0030b84
c001793e:	ff d0                	call   eax
c0017940:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0017945:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001794a:	83 e0 02             	and    eax,0x2
c001794d:	74 1c                	je     c001796b <ACPI::close(int, int, void*)+0x97>
c001794f:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0017956:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001795a:	89 c2                	mov    edx,eax
c001795c:	ec                   	in     al,dx
c001795d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0017961:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0017965:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017969:	eb da                	jmp    c0017945 <ACPI::close(int, int, void*)+0x71>
c001796b:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0017972:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0017977:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001797b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001797f:	ee                   	out    dx,al
c0017980:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017985:	83 c4 1c             	add    esp,0x1c
c0017988:	c3                   	ret    

c0017989 <findRSDP()>:
c0017989:	83 ec 1c             	sub    esp,0x1c
c001798c:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0017991:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017997:	83 e0 04             	and    eax,0x4
c001799a:	84 c0                	test   al,al
c001799c:	75 07                	jne    c00179a5 <findRSDP()+0x1c>
c001799e:	b8 00 00 00 00       	mov    eax,0x0
c00179a3:	eb 6a                	jmp    c0017a0f <findRSDP()+0x86>
c00179a5:	a1 14 e5 02 c0       	mov    eax,ds:0xc002e514
c00179aa:	3d ff 07 00 00       	cmp    eax,0x7ff
c00179af:	7f 1b                	jg     c00179cc <findRSDP()+0x43>
c00179b1:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c00179b6:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00179bc:	83 e2 fb             	and    edx,0xfffffffb
c00179bf:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00179c5:	b8 00 00 00 00       	mov    eax,0x0
c00179ca:	eb 43                	jmp    c0017a0f <findRSDP()+0x86>
c00179cc:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00179d4:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00179dc:	77 2c                	ja     c0017a0a <findRSDP()+0x81>
c00179de:	83 ec 04             	sub    esp,0x4
c00179e1:	6a 08                	push   0x8
c00179e3:	68 b1 b4 02 c0       	push   0xc002b4b1
c00179e8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00179ec:	e8 4f 8c fe ff       	call   c0000640 <memcmp>
c00179f1:	83 c4 10             	add    esp,0x10
c00179f4:	85 c0                	test   eax,eax
c00179f6:	0f 94 c0             	sete   al
c00179f9:	84 c0                	test   al,al
c00179fb:	74 06                	je     c0017a03 <findRSDP()+0x7a>
c00179fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a01:	eb 0c                	jmp    c0017a0f <findRSDP()+0x86>
c0017a03:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017a08:	eb ca                	jmp    c00179d4 <findRSDP()+0x4b>
c0017a0a:	b8 00 00 00 00       	mov    eax,0x0
c0017a0f:	83 c4 1c             	add    esp,0x1c
c0017a12:	c3                   	ret    

c0017a13 <loadACPITables(unsigned char*)>:
c0017a13:	56                   	push   esi
c0017a14:	53                   	push   ebx
c0017a15:	83 ec 44             	sub    esp,0x44
c0017a18:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0017a1d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017a23:	83 e0 04             	and    eax,0x4
c0017a26:	84 c0                	test   al,al
c0017a28:	0f 84 05 02 00 00    	je     c0017c33 <loadACPITables(unsigned char*)+0x220>
c0017a2e:	a0 a0 0d 03 c0       	mov    al,ds:0xc0030da0
c0017a33:	84 c0                	test   al,al
c0017a35:	74 75                	je     c0017aac <loadACPITables(unsigned char*)+0x99>
c0017a37:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a3b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017a3f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017a43:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a46:	83 e8 24             	sub    eax,0x24
c0017a49:	c1 e8 03             	shr    eax,0x3
c0017a4c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017a50:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017a58:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017a5c:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0017a60:	0f 8d b2 00 00 00    	jge    c0017b18 <loadACPITables(unsigned char*)+0x105>
c0017a66:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a6a:	83 c0 24             	add    eax,0x24
c0017a6d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017a71:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a75:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017a79:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017a7d:	c1 e0 03             	shl    eax,0x3
c0017a80:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0017a84:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017a88:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017a8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a8d:	89 c1                	mov    ecx,eax
c0017a8f:	a1 8c 0b 03 c0       	mov    eax,ds:0xc0030b8c
c0017a94:	8d 50 01             	lea    edx,[eax+0x1]
c0017a97:	89 15 8c 0b 03 c0    	mov    DWORD PTR ds:0xc0030b8c,edx
c0017a9d:	89 ca                	mov    edx,ecx
c0017a9f:	89 14 c5 a4 0b 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf45c],edx
c0017aa6:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0017aaa:	eb ac                	jmp    c0017a58 <loadACPITables(unsigned char*)+0x45>
c0017aac:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017ab0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017ab4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ab8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017abb:	83 e8 24             	sub    eax,0x24
c0017abe:	c1 e8 02             	shr    eax,0x2
c0017ac1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017ac5:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0017acd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017ad1:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0017ad5:	7d 41                	jge    c0017b18 <loadACPITables(unsigned char*)+0x105>
c0017ad7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017adb:	83 c0 24             	add    eax,0x24
c0017ade:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017ae2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017ae6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017aea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017aee:	c1 e0 02             	shl    eax,0x2
c0017af1:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0017af5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017af9:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017afb:	a1 8c 0b 03 c0       	mov    eax,ds:0xc0030b8c
c0017b00:	8d 50 01             	lea    edx,[eax+0x1]
c0017b03:	89 15 8c 0b 03 c0    	mov    DWORD PTR ds:0xc0030b8c,edx
c0017b09:	89 ca                	mov    edx,ecx
c0017b0b:	89 14 c5 a4 0b 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf45c],edx
c0017b12:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0017b16:	eb b5                	jmp    c0017acd <loadACPITables(unsigned char*)+0xba>
c0017b18:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0017b20:	a1 8c 0b 03 c0       	mov    eax,ds:0xc0030b8c
c0017b25:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0017b29:	0f 8d 05 01 00 00    	jge    c0017c34 <loadACPITables(unsigned char*)+0x221>
c0017b2f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b33:	8b 04 c5 a4 0b 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf45c]
c0017b3a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b42:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017b46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b4a:	25 ff 0f 00 00       	and    eax,0xfff
c0017b4f:	89 c6                	mov    esi,eax
c0017b51:	e8 d3 a3 ff ff       	call   c0011f29 <Virt::getAKernelVAS()>
c0017b56:	89 c3                	mov    ebx,eax
c0017b58:	83 ec 0c             	sub    esp,0xc
c0017b5b:	6a 01                	push   0x1
c0017b5d:	e8 89 a1 ff ff       	call   c0011ceb <Virt::allocateKernelVirtualPages(int)>
c0017b62:	83 c4 10             	add    esp,0x10
c0017b65:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017b69:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017b6f:	83 ec 0c             	sub    esp,0xc
c0017b72:	6a 01                	push   0x1
c0017b74:	6a 01                	push   0x1
c0017b76:	50                   	push   eax
c0017b77:	52                   	push   edx
c0017b78:	53                   	push   ebx
c0017b79:	e8 f0 ab ff ff       	call   c001276e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017b7e:	83 c4 20             	add    esp,0x20
c0017b81:	09 f0                	or     eax,esi
c0017b83:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b87:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b8b:	c1 e0 03             	shl    eax,0x3
c0017b8e:	05 a0 0b 03 c0       	add    eax,0xc0030ba0
c0017b93:	83 ec 04             	sub    esp,0x4
c0017b96:	6a 04                	push   0x4
c0017b98:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017b9c:	50                   	push   eax
c0017b9d:	e8 a2 8b fe ff       	call   c0000744 <memcpy>
c0017ba2:	83 c4 10             	add    esp,0x10
c0017ba5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ba9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017bac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017bb0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017bb4:	05 00 10 00 00       	add    eax,0x1000
c0017bb9:	c1 e8 0c             	shr    eax,0xc
c0017bbc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017bc4:	89 04 24             	mov    DWORD PTR [esp],eax
c0017bc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017bcb:	25 ff 0f 00 00       	and    eax,0xfff
c0017bd0:	89 c6                	mov    esi,eax
c0017bd2:	e8 52 a3 ff ff       	call   c0011f29 <Virt::getAKernelVAS()>
c0017bd7:	89 c3                	mov    ebx,eax
c0017bd9:	83 ec 0c             	sub    esp,0xc
c0017bdc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017be0:	e8 06 a1 ff ff       	call   c0011ceb <Virt::allocateKernelVirtualPages(int)>
c0017be5:	83 c4 10             	add    esp,0x10
c0017be8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017bec:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017bf2:	83 ec 0c             	sub    esp,0xc
c0017bf5:	6a 01                	push   0x1
c0017bf7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017bfb:	50                   	push   eax
c0017bfc:	52                   	push   edx
c0017bfd:	53                   	push   ebx
c0017bfe:	e8 6b ab ff ff       	call   c001276e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c03:	83 c4 20             	add    esp,0x20
c0017c06:	09 f0                	or     eax,esi
c0017c08:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017c0c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017c0f:	83 ec 0c             	sub    esp,0xc
c0017c12:	50                   	push   eax
c0017c13:	e8 fb a4 ff ff       	call   c0012113 <Virt::freeKernelVirtualPages(unsigned long)>
c0017c18:	83 c4 10             	add    esp,0x10
c0017c1b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c1f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017c23:	89 14 c5 a4 0b 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf45c],edx
c0017c2a:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017c2e:	e9 ed fe ff ff       	jmp    c0017b20 <loadACPITables(unsigned char*)+0x10d>
c0017c33:	90                   	nop
c0017c34:	83 c4 44             	add    esp,0x44
c0017c37:	5b                   	pop    ebx
c0017c38:	5e                   	pop    esi
c0017c39:	c3                   	ret    

c0017c3a <findRSDT(unsigned char*)>:
c0017c3a:	56                   	push   esi
c0017c3b:	53                   	push   ebx
c0017c3c:	83 ec 44             	sub    esp,0x44
c0017c3f:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0017c44:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017c4a:	83 e0 04             	and    eax,0x4
c0017c4d:	84 c0                	test   al,al
c0017c4f:	75 0a                	jne    c0017c5b <findRSDT(unsigned char*)+0x21>
c0017c51:	b8 00 00 00 00       	mov    eax,0x0
c0017c56:	e9 f7 00 00 00       	jmp    c0017d52 <findRSDT(unsigned char*)+0x118>
c0017c5b:	83 ec 04             	sub    esp,0x4
c0017c5e:	6a 24                	push   0x24
c0017c60:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017c64:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017c68:	50                   	push   eax
c0017c69:	e8 d6 8a fe ff       	call   c0000744 <memcpy>
c0017c6e:	83 c4 10             	add    esp,0x10
c0017c71:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017c75:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017c79:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017c81:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017c85:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c89:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017c8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017c91:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017c95:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c99:	25 ff 0f 00 00       	and    eax,0xfff
c0017c9e:	89 c6                	mov    esi,eax
c0017ca0:	e8 84 a2 ff ff       	call   c0011f29 <Virt::getAKernelVAS()>
c0017ca5:	89 c3                	mov    ebx,eax
c0017ca7:	83 ec 0c             	sub    esp,0xc
c0017caa:	6a 02                	push   0x2
c0017cac:	e8 3a a0 ff ff       	call   c0011ceb <Virt::allocateKernelVirtualPages(int)>
c0017cb1:	83 c4 10             	add    esp,0x10
c0017cb4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017cb8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017cbe:	83 ec 0c             	sub    esp,0xc
c0017cc1:	6a 01                	push   0x1
c0017cc3:	6a 02                	push   0x2
c0017cc5:	50                   	push   eax
c0017cc6:	52                   	push   edx
c0017cc7:	53                   	push   ebx
c0017cc8:	e8 a1 aa ff ff       	call   c001276e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017ccd:	83 c4 20             	add    esp,0x20
c0017cd0:	09 f0                	or     eax,esi
c0017cd2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017cd6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017cda:	25 ff 0f 00 00       	and    eax,0xfff
c0017cdf:	89 c6                	mov    esi,eax
c0017ce1:	e8 43 a2 ff ff       	call   c0011f29 <Virt::getAKernelVAS()>
c0017ce6:	89 c3                	mov    ebx,eax
c0017ce8:	83 ec 0c             	sub    esp,0xc
c0017ceb:	6a 02                	push   0x2
c0017ced:	e8 f9 9f ff ff       	call   c0011ceb <Virt::allocateKernelVirtualPages(int)>
c0017cf2:	83 c4 10             	add    esp,0x10
c0017cf5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017cf9:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017cff:	83 ec 0c             	sub    esp,0xc
c0017d02:	6a 01                	push   0x1
c0017d04:	6a 02                	push   0x2
c0017d06:	50                   	push   eax
c0017d07:	52                   	push   edx
c0017d08:	53                   	push   ebx
c0017d09:	e8 60 aa ff ff       	call   c001276e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017d0e:	83 c4 20             	add    esp,0x20
c0017d11:	09 f0                	or     eax,esi
c0017d13:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017d17:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017d1c:	75 11                	jne    c0017d2f <findRSDT(unsigned char*)+0xf5>
c0017d1e:	c6 05 a0 0d 03 c0 00 	mov    BYTE PTR ds:0xc0030da0,0x0
c0017d25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d29:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017d2d:	eb 1f                	jmp    c0017d4e <findRSDT(unsigned char*)+0x114>
c0017d2f:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017d34:	75 11                	jne    c0017d47 <findRSDT(unsigned char*)+0x10d>
c0017d36:	c6 05 a0 0d 03 c0 01 	mov    BYTE PTR ds:0xc0030da0,0x1
c0017d3d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017d41:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017d45:	eb 07                	jmp    c0017d4e <findRSDT(unsigned char*)+0x114>
c0017d47:	b8 00 00 00 00       	mov    eax,0x0
c0017d4c:	eb 04                	jmp    c0017d52 <findRSDT(unsigned char*)+0x118>
c0017d4e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017d52:	83 c4 44             	add    esp,0x44
c0017d55:	5b                   	pop    ebx
c0017d56:	5e                   	pop    esi
c0017d57:	c3                   	ret    

c0017d58 <findDataTable(unsigned char*, char*)>:
c0017d58:	83 ec 1c             	sub    esp,0x1c
c0017d5b:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0017d60:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017d66:	83 e0 04             	and    eax,0x4
c0017d69:	84 c0                	test   al,al
c0017d6b:	75 07                	jne    c0017d74 <findDataTable(unsigned char*, char*)+0x1c>
c0017d6d:	b8 00 00 00 00       	mov    eax,0x0
c0017d72:	eb 7c                	jmp    c0017df0 <findDataTable(unsigned char*, char*)+0x98>
c0017d74:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017d7c:	a1 8c 0b 03 c0       	mov    eax,ds:0xc0030b8c
c0017d81:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017d85:	7d 3a                	jge    c0017dc1 <findDataTable(unsigned char*, char*)+0x69>
c0017d87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d8b:	c1 e0 03             	shl    eax,0x3
c0017d8e:	05 a0 0b 03 c0       	add    eax,0xc0030ba0
c0017d93:	83 ec 04             	sub    esp,0x4
c0017d96:	6a 04                	push   0x4
c0017d98:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d9c:	50                   	push   eax
c0017d9d:	e8 9e 88 fe ff       	call   c0000640 <memcmp>
c0017da2:	83 c4 10             	add    esp,0x10
c0017da5:	85 c0                	test   eax,eax
c0017da7:	0f 94 c0             	sete   al
c0017daa:	84 c0                	test   al,al
c0017dac:	74 0d                	je     c0017dbb <findDataTable(unsigned char*, char*)+0x63>
c0017dae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017db2:	8b 04 c5 a4 0b 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf45c]
c0017db9:	eb 35                	jmp    c0017df0 <findDataTable(unsigned char*, char*)+0x98>
c0017dbb:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017dbf:	eb bb                	jmp    c0017d7c <findDataTable(unsigned char*, char*)+0x24>
c0017dc1:	a0 a0 0d 03 c0       	mov    al,ds:0xc0030da0
c0017dc6:	84 c0                	test   al,al
c0017dc8:	74 07                	je     c0017dd1 <findDataTable(unsigned char*, char*)+0x79>
c0017dca:	b8 58 00 00 00       	mov    eax,0x58
c0017dcf:	eb 05                	jmp    c0017dd6 <findDataTable(unsigned char*, char*)+0x7e>
c0017dd1:	b8 52 00 00 00       	mov    eax,0x52
c0017dd6:	83 ec 04             	sub    esp,0x4
c0017dd9:	50                   	push   eax
c0017dda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017dde:	68 ec b5 02 c0       	push   0xc002b5ec
c0017de3:	e8 02 b2 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0017de8:	83 c4 10             	add    esp,0x10
c0017deb:	b8 00 00 00 00       	mov    eax,0x0
c0017df0:	83 c4 1c             	add    esp,0x1c
c0017df3:	c3                   	ret    

c0017df4 <scanMADT()>:
c0017df4:	53                   	push   ebx
c0017df5:	83 ec 38             	sub    esp,0x38
c0017df8:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0017dfd:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017e03:	83 e0 04             	and    eax,0x4
c0017e06:	84 c0                	test   al,al
c0017e08:	0f 84 63 04 00 00    	je     c0018271 <scanMADT()+0x47d>
c0017e0e:	e8 76 fb ff ff       	call   c0017989 <findRSDP()>
c0017e13:	a3 ac 0d 03 c0       	mov    ds:0xc0030dac,eax
c0017e18:	a1 ac 0d 03 c0       	mov    eax,ds:0xc0030dac
c0017e1d:	85 c0                	test   eax,eax
c0017e1f:	75 19                	jne    c0017e3a <scanMADT()+0x46>
c0017e21:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0017e26:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017e2c:	83 e2 fb             	and    edx,0xfffffffb
c0017e2f:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017e35:	e9 3b 04 00 00       	jmp    c0018275 <scanMADT()+0x481>
c0017e3a:	a1 ac 0d 03 c0       	mov    eax,ds:0xc0030dac
c0017e3f:	83 ec 0c             	sub    esp,0xc
c0017e42:	50                   	push   eax
c0017e43:	e8 f2 fd ff ff       	call   c0017c3a <findRSDT(unsigned char*)>
c0017e48:	83 c4 10             	add    esp,0x10
c0017e4b:	a3 a8 0d 03 c0       	mov    ds:0xc0030da8,eax
c0017e50:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c0017e55:	85 c0                	test   eax,eax
c0017e57:	75 19                	jne    c0017e72 <scanMADT()+0x7e>
c0017e59:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0017e5e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017e64:	83 e2 fb             	and    edx,0xfffffffb
c0017e67:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017e6d:	e9 03 04 00 00       	jmp    c0018275 <scanMADT()+0x481>
c0017e72:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c0017e77:	83 ec 0c             	sub    esp,0xc
c0017e7a:	50                   	push   eax
c0017e7b:	e8 93 fb ff ff       	call   c0017a13 <loadACPITables(unsigned char*)>
c0017e80:	83 c4 10             	add    esp,0x10
c0017e83:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c0017e88:	83 ec 08             	sub    esp,0x8
c0017e8b:	68 ba b4 02 c0       	push   0xc002b4ba
c0017e90:	50                   	push   eax
c0017e91:	e8 c2 fe ff ff       	call   c0017d58 <findDataTable(unsigned char*, char*)>
c0017e96:	83 c4 10             	add    esp,0x10
c0017e99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017e9d:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017ea2:	75 19                	jne    c0017ebd <scanMADT()+0xc9>
c0017ea4:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0017ea9:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017eaf:	83 e2 fe             	and    edx,0xfffffffe
c0017eb2:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017eb8:	e9 b8 03 00 00       	jmp    c0018275 <scanMADT()+0x481>
c0017ebd:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017ec5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ec9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017ecc:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017ed0:	0f 87 9f 03 00 00    	ja     c0018275 <scanMADT()+0x481>
c0017ed6:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017ede:	0f 87 91 03 00 00    	ja     c0018275 <scanMADT()+0x481>
c0017ee4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ee8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017eec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ef0:	8d 50 01             	lea    edx,[eax+0x1]
c0017ef3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ef7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017efb:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017eff:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017f03:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f07:	8d 50 01             	lea    edx,[eax+0x1]
c0017f0a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f0e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f12:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017f16:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017f1a:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017f1f:	0f 86 4f 03 00 00    	jbe    c0018274 <scanMADT()+0x480>
c0017f25:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017f2a:	75 57                	jne    c0017f83 <scanMADT()+0x18f>
c0017f2c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f30:	8d 50 01             	lea    edx,[eax+0x1]
c0017f33:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f37:	8a 15 a0 0f 03 c0    	mov    dl,BYTE PTR ds:0xc0030fa0
c0017f3d:	0f b6 d2             	movzx  edx,dl
c0017f40:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017f44:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017f48:	88 82 e0 0f 03 c0    	mov    BYTE PTR [edx-0x3ffcf020],al
c0017f4e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f52:	8d 50 01             	lea    edx,[eax+0x1]
c0017f55:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f59:	8a 15 a0 0f 03 c0    	mov    dl,BYTE PTR ds:0xc0030fa0
c0017f5f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017f62:	88 0d a0 0f 03 c0    	mov    BYTE PTR ds:0xc0030fa0,cl
c0017f68:	0f b6 d2             	movzx  edx,dl
c0017f6b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017f6f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017f73:	88 82 c0 0f 03 c0    	mov    BYTE PTR [edx-0x3ffcf040],al
c0017f79:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017f7e:	e9 da 02 00 00       	jmp    c001825d <scanMADT()+0x469>
c0017f83:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017f88:	0f 85 14 01 00 00    	jne    c00180a2 <scanMADT()+0x2ae>
c0017f8e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f92:	8d 50 01             	lea    edx,[eax+0x1]
c0017f95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f99:	8a 15 60 0e 03 c0    	mov    dl,BYTE PTR ds:0xc0030e60
c0017f9f:	0f b6 d2             	movzx  edx,dl
c0017fa2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017fa6:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017faa:	88 82 80 0e 03 c0    	mov    BYTE PTR [edx-0x3ffcf180],al
c0017fb0:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017fb4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fb8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fbc:	01 d0                	add    eax,edx
c0017fbe:	83 c0 2c             	add    eax,0x2c
c0017fc1:	8a 00                	mov    al,BYTE PTR [eax]
c0017fc3:	0f b6 d0             	movzx  edx,al
c0017fc6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fca:	8d 48 01             	lea    ecx,[eax+0x1]
c0017fcd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fd1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017fd5:	0f b6 c0             	movzx  eax,al
c0017fd8:	c1 e0 08             	shl    eax,0x8
c0017fdb:	89 d1                	mov    ecx,edx
c0017fdd:	09 c1                	or     ecx,eax
c0017fdf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fe3:	8d 50 02             	lea    edx,[eax+0x2]
c0017fe6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fea:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017fee:	0f b6 c0             	movzx  eax,al
c0017ff1:	c1 e0 10             	shl    eax,0x10
c0017ff4:	09 c1                	or     ecx,eax
c0017ff6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ffa:	8d 50 03             	lea    edx,[eax+0x3]
c0017ffd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018001:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018005:	0f b6 c0             	movzx  eax,al
c0018008:	c1 e0 18             	shl    eax,0x18
c001800b:	09 c1                	or     ecx,eax
c001800d:	89 ca                	mov    edx,ecx
c001800f:	a0 60 0e 03 c0       	mov    al,ds:0xc0030e60
c0018014:	0f b6 c0             	movzx  eax,al
c0018017:	89 14 85 a0 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf160],edx
c001801e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018023:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018027:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001802b:	01 d0                	add    eax,edx
c001802d:	83 c0 2c             	add    eax,0x2c
c0018030:	8a 00                	mov    al,BYTE PTR [eax]
c0018032:	0f b6 d0             	movzx  edx,al
c0018035:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018039:	8d 48 01             	lea    ecx,[eax+0x1]
c001803c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018040:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018044:	0f b6 c0             	movzx  eax,al
c0018047:	c1 e0 08             	shl    eax,0x8
c001804a:	89 d1                	mov    ecx,edx
c001804c:	09 c1                	or     ecx,eax
c001804e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018052:	8d 50 02             	lea    edx,[eax+0x2]
c0018055:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018059:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001805d:	0f b6 c0             	movzx  eax,al
c0018060:	c1 e0 10             	shl    eax,0x10
c0018063:	09 c1                	or     ecx,eax
c0018065:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018069:	8d 50 03             	lea    edx,[eax+0x3]
c001806c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018070:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018074:	0f b6 c0             	movzx  eax,al
c0018077:	c1 e0 18             	shl    eax,0x18
c001807a:	09 c1                	or     ecx,eax
c001807c:	89 ca                	mov    edx,ecx
c001807e:	a0 60 0e 03 c0       	mov    al,ds:0xc0030e60
c0018083:	0f b6 c0             	movzx  eax,al
c0018086:	89 14 85 20 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf0e0],edx
c001808d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018092:	a0 60 0e 03 c0       	mov    al,ds:0xc0030e60
c0018097:	40                   	inc    eax
c0018098:	a2 60 0e 03 c0       	mov    ds:0xc0030e60,al
c001809d:	e9 bb 01 00 00       	jmp    c001825d <scanMADT()+0x469>
c00180a2:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c00180a7:	0f 85 e9 00 00 00    	jne    c0018196 <scanMADT()+0x3a2>
c00180ad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180b1:	8d 50 01             	lea    edx,[eax+0x1]
c00180b4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00180b8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180bc:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00180c0:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c00180c4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180c8:	8d 50 01             	lea    edx,[eax+0x1]
c00180cb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00180cf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180d3:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00180d7:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00180db:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180df:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180e3:	01 d0                	add    eax,edx
c00180e5:	83 c0 2c             	add    eax,0x2c
c00180e8:	8a 00                	mov    al,BYTE PTR [eax]
c00180ea:	0f b6 d0             	movzx  edx,al
c00180ed:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180f1:	8d 48 01             	lea    ecx,[eax+0x1]
c00180f4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180f8:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00180fc:	0f b6 c0             	movzx  eax,al
c00180ff:	c1 e0 08             	shl    eax,0x8
c0018102:	89 d1                	mov    ecx,edx
c0018104:	09 c1                	or     ecx,eax
c0018106:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001810a:	8d 50 02             	lea    edx,[eax+0x2]
c001810d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018111:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018115:	0f b6 c0             	movzx  eax,al
c0018118:	c1 e0 10             	shl    eax,0x10
c001811b:	09 c1                	or     ecx,eax
c001811d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018121:	8d 50 03             	lea    edx,[eax+0x3]
c0018124:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018128:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001812c:	0f b6 c0             	movzx  eax,al
c001812f:	c1 e0 18             	shl    eax,0x18
c0018132:	09 c8                	or     eax,ecx
c0018134:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018138:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001813d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018141:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018145:	01 d0                	add    eax,edx
c0018147:	83 c0 2c             	add    eax,0x2c
c001814a:	8a 00                	mov    al,BYTE PTR [eax]
c001814c:	0f b6 c0             	movzx  eax,al
c001814f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018153:	8d 4a 01             	lea    ecx,[edx+0x1]
c0018156:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001815a:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c001815e:	0f b6 d2             	movzx  edx,dl
c0018161:	c1 e2 08             	shl    edx,0x8
c0018164:	09 d0                	or     eax,edx
c0018166:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001816b:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0018170:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0018175:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018179:	88 90 20 d7 02 c0    	mov    BYTE PTR [eax-0x3ffd28e0],dl
c001817f:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0018184:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0018189:	66 89 84 12 40 0e 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcf1c0],ax
c0018191:	e9 c7 00 00 00       	jmp    c001825d <scanMADT()+0x469>
c0018196:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c001819b:	0f 85 b0 00 00 00    	jne    c0018251 <scanMADT()+0x45d>
c00181a1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181a5:	8d 50 01             	lea    edx,[eax+0x1]
c00181a8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00181ac:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181b0:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00181b4:	0f b6 c0             	movzx  eax,al
c00181b7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00181bb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181c3:	01 d0                	add    eax,edx
c00181c5:	83 c0 2c             	add    eax,0x2c
c00181c8:	8a 00                	mov    al,BYTE PTR [eax]
c00181ca:	0f b6 d0             	movzx  edx,al
c00181cd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181d1:	8d 48 01             	lea    ecx,[eax+0x1]
c00181d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00181d8:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00181dc:	0f b6 c0             	movzx  eax,al
c00181df:	c1 e0 08             	shl    eax,0x8
c00181e2:	09 d0                	or     eax,edx
c00181e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00181e8:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00181ed:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181f1:	8d 50 01             	lea    edx,[eax+0x1]
c00181f4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00181f8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181fc:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018200:	0f b6 c0             	movzx  eax,al
c0018203:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018207:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001820b:	c1 e0 08             	shl    eax,0x8
c001820e:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0018212:	89 c1                	mov    ecx,eax
c0018214:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018218:	c1 e0 18             	shl    eax,0x18
c001821b:	89 c3                	mov    ebx,eax
c001821d:	a1 b0 0d 03 c0       	mov    eax,ds:0xc0030db0
c0018222:	8d 50 01             	lea    edx,[eax+0x1]
c0018225:	89 15 b0 0d 03 c0    	mov    DWORD PTR ds:0xc0030db0,edx
c001822b:	09 d9                	or     ecx,ebx
c001822d:	89 ca                	mov    edx,ecx
c001822f:	89 14 85 c0 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf240],edx
c0018236:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001823a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001823e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018242:	68 1c b6 02 c0       	push   0xc002b61c
c0018247:	e8 9e ad ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001824c:	83 c4 10             	add    esp,0x10
c001824f:	eb 0c                	jmp    c001825d <scanMADT()+0x469>
c0018251:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0018256:	75 05                	jne    c001825d <scanMADT()+0x469>
c0018258:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c001825d:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0018262:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018266:	01 d0                	add    eax,edx
c0018268:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001826c:	e9 54 fc ff ff       	jmp    c0017ec5 <scanMADT()+0xd1>
c0018271:	90                   	nop
c0018272:	eb 01                	jmp    c0018275 <scanMADT()+0x481>
c0018274:	90                   	nop
c0018275:	83 c4 38             	add    esp,0x38
c0018278:	5b                   	pop    ebx
c0018279:	c3                   	ret    

c001827a <ACPI::ACPI()>:
c001827a:	83 ec 0c             	sub    esp,0xc
c001827d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018281:	83 ec 08             	sub    esp,0x8
c0018284:	68 bf b4 02 c0       	push   0xc002b4bf
c0018289:	50                   	push   eax
c001828a:	e8 71 c3 ff ff       	call   c0014600 <Device::Device(char const*)>
c001828f:	83 c4 10             	add    esp,0x10
c0018292:	ba 90 b6 02 c0       	mov    edx,0xc002b690
c0018297:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001829b:	89 10                	mov    DWORD PTR [eax],edx
c001829d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182a1:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00182a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182ac:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00182b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182ba:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c00182c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182c8:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c00182cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182d3:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c00182da:	e8 15 fb ff ff       	call   c0017df4 <scanMADT()>
c00182df:	90                   	nop
c00182e0:	83 c4 0c             	add    esp,0xc
c00182e3:	c3                   	ret    

c00182e4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00182e4:	83 ec 2c             	sub    esp,0x2c
c00182e7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00182eb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00182ef:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00182f3:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00182f7:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00182fc:	88 d0                	mov    al,dl
c00182fe:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018302:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0018307:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001830f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018313:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018319:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001831d:	0f 8d 97 00 00 00    	jge    c00183ba <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0018323:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018327:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001832b:	83 c2 2a             	add    edx,0x2a
c001832e:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0018332:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0018337:	75 78                	jne    c00183b1 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018339:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001833d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018341:	83 c2 2a             	add    edx,0x2a
c0018344:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0018348:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c001834c:	75 63                	jne    c00183b1 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c001834e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018353:	74 3a                	je     c001838f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0018355:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018359:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001835d:	83 c2 2a             	add    edx,0x2a
c0018360:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0018364:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018368:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001836b:	39 c2                	cmp    edx,eax
c001836d:	74 10                	je     c001837f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c001836f:	83 ec 0c             	sub    esp,0xc
c0018372:	68 58 b6 02 c0       	push   0xc002b658
c0018377:	e8 13 23 00 00       	call   c001a68f <Krnl::panic(char const*)>
c001837c:	83 c4 10             	add    esp,0x10
c001837f:	83 ec 0c             	sub    esp,0xc
c0018382:	68 c4 b4 02 c0       	push   0xc002b4c4
c0018387:	e8 03 23 00 00       	call   c001a68f <Krnl::panic(char const*)>
c001838c:	83 c4 10             	add    esp,0x10
c001838f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018393:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018397:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001839b:	83 c2 2a             	add    edx,0x2a
c001839e:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00183a2:	8b 02                	mov    eax,DWORD PTR [edx]
c00183a4:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00183a7:	89 01                	mov    DWORD PTR [ecx],eax
c00183a9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00183ac:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00183b1:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00183b5:	e9 55 ff ff ff       	jmp    c001830f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c00183ba:	90                   	nop
c00183bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183bf:	83 c4 2c             	add    esp,0x2c
c00183c2:	c2 04 00             	ret    0x4
c00183c5:	90                   	nop

c00183c6 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00183c6:	83 ec 1c             	sub    esp,0x1c
c00183c9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00183cd:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00183d1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00183d5:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00183da:	88 c8                	mov    al,cl
c00183dc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00183e0:	88 d0                	mov    al,dl
c00183e2:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00183e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183ea:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00183f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183f4:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00183f7:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00183fb:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00183ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018403:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018409:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001840d:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0018410:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018414:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0018419:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001841d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018423:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0018427:	8d 48 01             	lea    ecx,[eax+0x1]
c001842a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001842e:	83 c2 2a             	add    edx,0x2a
c0018431:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0018435:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018439:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001843f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018443:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018446:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001844a:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001844e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018452:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018458:	8d 50 01             	lea    edx,[eax+0x1]
c001845b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001845f:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0018465:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018469:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001846f:	3d 00 02 00 00       	cmp    eax,0x200
c0018474:	75 10                	jne    c0018486 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0018476:	83 ec 0c             	sub    esp,0xc
c0018479:	68 d3 b4 02 c0       	push   0xc002b4d3
c001847e:	e8 0c 22 00 00       	call   c001a68f <Krnl::panic(char const*)>
c0018483:	83 c4 10             	add    esp,0x10
c0018486:	90                   	nop
c0018487:	83 c4 1c             	add    esp,0x1c
c001848a:	c3                   	ret    
c001848b:	90                   	nop

c001848c <ACPI::setScreenBrightnessLevel(void*, int)>:
c001848c:	b8 00 00 00 00       	mov    eax,0x0
c0018491:	c3                   	ret    

c0018492 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0018492:	83 ec 1c             	sub    esp,0x1c
c0018495:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018499:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001849c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00184a0:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c00184a5:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00184aa:	83 ec 08             	sub    esp,0x8
c00184ad:	52                   	push   edx
c00184ae:	50                   	push   eax
c00184af:	e8 a4 69 ff ff       	call   c000ee58 <Computer::readCMOS(unsigned char)>
c00184b4:	83 c4 10             	add    esp,0x10
c00184b7:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00184bb:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c00184c0:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00184c5:	83 ec 04             	sub    esp,0x4
c00184c8:	6a 01                	push   0x1
c00184ca:	52                   	push   edx
c00184cb:	50                   	push   eax
c00184cc:	e8 9d 6a ff ff       	call   c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>
c00184d1:	83 c4 10             	add    esp,0x10
c00184d4:	90                   	nop
c00184d5:	83 c4 1c             	add    esp,0x1c
c00184d8:	c3                   	ret    
c00184d9:	90                   	nop

c00184da <ACPI::open(int, int, void*)>:
c00184da:	53                   	push   ebx
c00184db:	83 ec 28             	sub    esp,0x28
c00184de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184e2:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c00184e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184ed:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c00184f4:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c00184f9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00184ff:	83 e0 04             	and    eax,0x4
c0018502:	84 c0                	test   al,al
c0018504:	74 47                	je     c001854d <ACPI::open(int, int, void*)+0x73>
c0018506:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c001850b:	83 ec 08             	sub    esp,0x8
c001850e:	68 f0 b4 02 c0       	push   0xc002b4f0
c0018513:	50                   	push   eax
c0018514:	e8 3f f8 ff ff       	call   c0017d58 <findDataTable(unsigned char*, char*)>
c0018519:	83 c4 10             	add    esp,0x10
c001851c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018520:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0018525:	74 26                	je     c001854d <ACPI::open(int, int, void*)+0x73>
c0018527:	83 ec 0c             	sub    esp,0xc
c001852a:	68 f5 b4 02 c0       	push   0xc002b4f5
c001852f:	e8 b6 aa ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0018534:	83 c4 10             	add    esp,0x10
c0018537:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001853b:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018542:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018546:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c001854d:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c0018555:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018559:	8a 00                	mov    al,BYTE PTR [eax]
c001855b:	3c 01                	cmp    al,0x1
c001855d:	75 28                	jne    c0018587 <ACPI::open(int, int, void*)+0xad>
c001855f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018563:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001856a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001856e:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018575:	83 ec 0c             	sub    esp,0xc
c0018578:	68 06 b5 02 c0       	push   0xc002b506
c001857d:	e8 68 aa ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0018582:	83 c4 10             	add    esp,0x10
c0018585:	eb 25                	jmp    c00185ac <ACPI::open(int, int, void*)+0xd2>
c0018587:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001858b:	8a 00                	mov    al,BYTE PTR [eax]
c001858d:	3c 02                	cmp    al,0x2
c001858f:	75 1b                	jne    c00185ac <ACPI::open(int, int, void*)+0xd2>
c0018591:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018595:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001859c:	83 ec 0c             	sub    esp,0xc
c001859f:	68 0e b5 02 c0       	push   0xc002b50e
c00185a4:	e8 41 aa ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c00185a9:	83 c4 10             	add    esp,0x10
c00185ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185b0:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00185b6:	83 f0 01             	xor    eax,0x1
c00185b9:	84 c0                	test   al,al
c00185bb:	74 6a                	je     c0018627 <ACPI::open(int, int, void*)+0x14d>
c00185bd:	83 ec 0c             	sub    esp,0xc
c00185c0:	68 16 b5 02 c0       	push   0xc002b516
c00185c5:	e8 20 aa ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c00185ca:	83 c4 10             	add    esp,0x10
c00185cd:	e8 7e 7b fe ff       	call   c0000150 <manualPCIProbe>
c00185d2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00185d6:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c00185db:	75 28                	jne    c0018605 <ACPI::open(int, int, void*)+0x12b>
c00185dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185e1:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00185e8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185ec:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00185f3:	83 ec 0c             	sub    esp,0xc
c00185f6:	68 24 b5 02 c0       	push   0xc002b524
c00185fb:	e8 ea a9 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0018600:	83 c4 10             	add    esp,0x10
c0018603:	eb 22                	jmp    c0018627 <ACPI::open(int, int, void*)+0x14d>
c0018605:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c001860a:	75 1b                	jne    c0018627 <ACPI::open(int, int, void*)+0x14d>
c001860c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018610:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018617:	83 ec 0c             	sub    esp,0xc
c001861a:	68 2e b5 02 c0       	push   0xc002b52e
c001861f:	e8 c6 a9 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0018624:	83 c4 10             	add    esp,0x10
c0018627:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001862b:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018631:	84 c0                	test   al,al
c0018633:	74 13                	je     c0018648 <ACPI::open(int, int, void*)+0x16e>
c0018635:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018639:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c001863f:	83 f0 01             	xor    eax,0x1
c0018642:	0f b6 c0             	movzx  eax,al
c0018645:	40                   	inc    eax
c0018646:	eb 05                	jmp    c001864d <ACPI::open(int, int, void*)+0x173>
c0018648:	b8 00 00 00 00       	mov    eax,0x0
c001864d:	83 ec 08             	sub    esp,0x8
c0018650:	50                   	push   eax
c0018651:	68 38 b5 02 c0       	push   0xc002b538
c0018656:	e8 8f a9 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001865b:	83 c4 10             	add    esp,0x10
c001865e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018662:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018668:	84 c0                	test   al,al
c001866a:	74 67                	je     c00186d3 <ACPI::open(int, int, void*)+0x1f9>
c001866c:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c0018674:	83 ec 0c             	sub    esp,0xc
c0018677:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001867b:	e8 c3 71 ff ff       	call   c000f843 <malloc>
c0018680:	83 c4 10             	add    esp,0x10
c0018683:	89 c3                	mov    ebx,eax
c0018685:	83 ec 0c             	sub    esp,0xc
c0018688:	53                   	push   ebx
c0018689:	e8 fa a2 00 00       	call   c0022988 <PCI::PCI()>
c001868e:	83 c4 10             	add    esp,0x10
c0018691:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018695:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018699:	83 ec 08             	sub    esp,0x8
c001869c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00186a0:	50                   	push   eax
c00186a1:	e8 6a bd ff ff       	call   c0014410 <Device::addChild(Device*)>
c00186a6:	83 c4 10             	add    esp,0x10
c00186a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00186ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00186af:	83 c0 08             	add    eax,0x8
c00186b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00186b4:	6a 00                	push   0x0
c00186b6:	6a 00                	push   0x0
c00186b8:	6a 00                	push   0x0
c00186ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00186be:	ff d0                	call   eax
c00186c0:	83 c4 10             	add    esp,0x10
c00186c3:	83 ec 0c             	sub    esp,0xc
c00186c6:	68 41 b5 02 c0       	push   0xc002b541
c00186cb:	e8 1a a9 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c00186d0:	83 c4 10             	add    esp,0x10
c00186d3:	e8 4a 94 ff ff       	call   c0011b22 <Virt::swappingSetup()>
c00186d8:	83 ec 0c             	sub    esp,0xc
c00186db:	68 4c b5 02 c0       	push   0xc002b54c
c00186e0:	e8 80 46 00 00       	call   c001cd65 <Thr::loadKernelSymbolTable(char const*)>
c00186e5:	83 c4 10             	add    esp,0x10
c00186e8:	8b 1d c8 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e4c8
c00186ee:	83 ec 08             	sub    esp,0x8
c00186f1:	6a 01                	push   0x1
c00186f3:	68 6a b5 02 c0       	push   0xc002b56a
c00186f8:	e8 c5 50 00 00       	call   c001d7c2 <Thr::loadDLL(char const*, bool)>
c00186fd:	83 c4 10             	add    esp,0x10
c0018700:	83 ec 08             	sub    esp,0x8
c0018703:	53                   	push   ebx
c0018704:	50                   	push   eax
c0018705:	e8 07 53 00 00       	call   c001da11 <Thr::executeDLL(unsigned long, void*)>
c001870a:	83 c4 10             	add    esp,0x10
c001870d:	8b 1d c8 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e4c8
c0018713:	83 ec 08             	sub    esp,0x8
c0018716:	6a 01                	push   0x1
c0018718:	68 87 b5 02 c0       	push   0xc002b587
c001871d:	e8 a0 50 00 00       	call   c001d7c2 <Thr::loadDLL(char const*, bool)>
c0018722:	83 c4 10             	add    esp,0x10
c0018725:	83 ec 08             	sub    esp,0x8
c0018728:	53                   	push   ebx
c0018729:	50                   	push   eax
c001872a:	e8 e2 52 00 00       	call   c001da11 <Thr::executeDLL(unsigned long, void*)>
c001872f:	83 c4 10             	add    esp,0x10
c0018732:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0018737:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001873d:	83 e0 04             	and    eax,0x4
c0018740:	84 c0                	test   al,al
c0018742:	0f 84 d2 00 00 00    	je     c001881a <ACPI::open(int, int, void*)+0x340>
c0018748:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001874f:	83 ec 0c             	sub    esp,0xc
c0018752:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018756:	e8 e8 70 ff ff       	call   c000f843 <malloc>
c001875b:	83 c4 10             	add    esp,0x10
c001875e:	89 c3                	mov    ebx,eax
c0018760:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c0018765:	83 ec 04             	sub    esp,0x4
c0018768:	50                   	push   eax
c0018769:	68 a4 b5 02 c0       	push   0xc002b5a4
c001876e:	53                   	push   ebx
c001876f:	e8 ce ad ff ff       	call   c0013542 <File::File(char const*, Process*)>
c0018774:	83 c4 10             	add    esp,0x10
c0018777:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001877b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018780:	74 17                	je     c0018799 <ACPI::open(int, int, void*)+0x2bf>
c0018782:	83 ec 0c             	sub    esp,0xc
c0018785:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018789:	e8 86 b0 ff ff       	call   c0013814 <File::exists()>
c001878e:	83 c4 10             	add    esp,0x10
c0018791:	84 c0                	test   al,al
c0018793:	74 04                	je     c0018799 <ACPI::open(int, int, void*)+0x2bf>
c0018795:	b0 01                	mov    al,0x1
c0018797:	eb 02                	jmp    c001879b <ACPI::open(int, int, void*)+0x2c1>
c0018799:	b0 00                	mov    al,0x0
c001879b:	84 c0                	test   al,al
c001879d:	74 22                	je     c00187c1 <ACPI::open(int, int, void*)+0x2e7>
c001879f:	83 ec 08             	sub    esp,0x8
c00187a2:	6a 01                	push   0x1
c00187a4:	68 a4 b5 02 c0       	push   0xc002b5a4
c00187a9:	e8 14 50 00 00       	call   c001d7c2 <Thr::loadDLL(char const*, bool)>
c00187ae:	83 c4 10             	add    esp,0x10
c00187b1:	83 ec 08             	sub    esp,0x8
c00187b4:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00187b8:	50                   	push   eax
c00187b9:	e8 53 52 00 00       	call   c001da11 <Thr::executeDLL(unsigned long, void*)>
c00187be:	83 c4 10             	add    esp,0x10
c00187c1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00187c6:	74 1e                	je     c00187e6 <ACPI::open(int, int, void*)+0x30c>
c00187c8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00187cd:	74 17                	je     c00187e6 <ACPI::open(int, int, void*)+0x30c>
c00187cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00187d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00187d5:	83 c0 08             	add    eax,0x8
c00187d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00187da:	83 ec 0c             	sub    esp,0xc
c00187dd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00187e1:	ff d0                	call   eax
c00187e3:	83 c4 10             	add    esp,0x10
c00187e6:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c00187eb:	83 ec 08             	sub    esp,0x8
c00187ee:	68 c1 b5 02 c0       	push   0xc002b5c1
c00187f3:	50                   	push   eax
c00187f4:	e8 5f f5 ff ff       	call   c0017d58 <findDataTable(unsigned char*, char*)>
c00187f9:	83 c4 10             	add    esp,0x10
c00187fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018800:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018805:	74 13                	je     c001881a <ACPI::open(int, int, void*)+0x340>
c0018807:	83 ec 08             	sub    esp,0x8
c001880a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001880e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018812:	e8 7b fc ff ff       	call   c0018492 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0018817:	83 c4 10             	add    esp,0x10
c001881a:	b8 00 00 00 00       	mov    eax,0x0
c001881f:	83 c4 28             	add    esp,0x28
c0018822:	5b                   	pop    ebx
c0018823:	c3                   	ret    

c0018824 <ACPI::sleep()>:
c0018824:	83 ec 0c             	sub    esp,0xc
c0018827:	a1 80 0b 03 c0       	mov    eax,ds:0xc0030b80
c001882c:	85 c0                	test   eax,eax
c001882e:	74 07                	je     c0018837 <ACPI::sleep()+0x13>
c0018830:	a1 80 0b 03 c0       	mov    eax,ds:0xc0030b80
c0018835:	ff d0                	call   eax
c0018837:	90                   	nop
c0018838:	83 c4 0c             	add    esp,0xc
c001883b:	c3                   	ret    

c001883c <CPU::close(int, int, void*)>:
c001883c:	31 c0                	xor    eax,eax
c001883e:	c3                   	ret    
c001883f:	90                   	nop

c0018840 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018840:	55                   	push   ebp
c0018841:	57                   	push   edi
c0018842:	56                   	push   esi
c0018843:	53                   	push   ebx
c0018844:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018848:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001884c:	89 ce                	mov    esi,ecx
c001884e:	89 d5                	mov    ebp,edx
c0018850:	80 f9 04             	cmp    cl,0x4
c0018853:	75 28                	jne    c001887d <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0018855:	8d 42 f9             	lea    eax,[edx-0x7]
c0018858:	3c 03                	cmp    al,0x3
c001885a:	0f 86 63 01 00 00    	jbe    c00189c3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018860:	80 fa 03             	cmp    dl,0x3
c0018863:	0f 84 5a 01 00 00    	je     c00189c3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018869:	8d 7a f2             	lea    edi,[edx-0xe]
c001886c:	b8 f0 d8 02 c0       	mov    eax,0xc002d8f0
c0018871:	89 fb                	mov    ebx,edi
c0018873:	80 fb 01             	cmp    bl,0x1
c0018876:	77 4e                	ja     c00188c6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0018878:	e9 52 01 00 00       	jmp    c00189cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001887d:	80 f9 05             	cmp    cl,0x5
c0018880:	75 4d                	jne    c00188cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018882:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c0018887:	80 fa 03             	cmp    dl,0x3
c001888a:	0f 86 3f 01 00 00    	jbe    c00189cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018890:	8d 7a fa             	lea    edi,[edx-0x6]
c0018893:	b8 10 d9 02 c0       	mov    eax,0xc002d910
c0018898:	89 fb                	mov    ebx,edi
c001889a:	80 fb 01             	cmp    bl,0x1
c001889d:	0f 86 2c 01 00 00    	jbe    c00189cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188a3:	b8 20 d9 02 c0       	mov    eax,0xc002d920
c00188a8:	80 fa 08             	cmp    dl,0x8
c00188ab:	0f 84 1e 01 00 00    	je     c00189cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188b1:	89 d7                	mov    edi,edx
c00188b3:	b8 30 d9 02 c0       	mov    eax,0xc002d930
c00188b8:	83 e7 fb             	and    edi,0xfffffffb
c00188bb:	89 fb                	mov    ebx,edi
c00188bd:	80 fb 09             	cmp    bl,0x9
c00188c0:	0f 84 09 01 00 00    	je     c00189cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188c6:	31 c0                	xor    eax,eax
c00188c8:	89 eb                	mov    ebx,ebp
c00188ca:	0f b6 fb             	movzx  edi,bl
c00188cd:	eb 30                	jmp    c00188ff <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c00188cf:	31 c0                	xor    eax,eax
c00188d1:	80 f9 06             	cmp    cl,0x6
c00188d4:	75 f2                	jne    c00188c8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00188d6:	80 fa 0a             	cmp    dl,0xa
c00188d9:	77 ed                	ja     c00188c8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00188db:	bf de 05 00 00       	mov    edi,0x5de
c00188e0:	0f a3 d7             	bt     edi,edx
c00188e3:	73 e3                	jae    c00188c8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00188e5:	b8 40 d9 02 c0       	mov    eax,0xc002d940
c00188ea:	e9 e0 00 00 00       	jmp    c00189cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188ef:	39 c7                	cmp    edi,eax
c00188f1:	0f 84 d3 00 00 00    	je     c00189ca <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00188f7:	40                   	inc    eax
c00188f8:	3d d0 00 00 00       	cmp    eax,0xd0
c00188fd:	74 09                	je     c0018908 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c00188ff:	89 f3                	mov    ebx,esi
c0018901:	80 fb 0f             	cmp    bl,0xf
c0018904:	75 f1                	jne    c00188f7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018906:	eb e7                	jmp    c00188ef <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018908:	80 f9 10             	cmp    cl,0x10
c001890b:	75 14                	jne    c0018921 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c001890d:	8d 42 fc             	lea    eax,[edx-0x4]
c0018910:	83 e0 fb             	and    eax,0xfffffffb
c0018913:	3c 02                	cmp    al,0x2
c0018915:	76 34                	jbe    c001894b <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018917:	b8 a6 b9 02 c0       	mov    eax,0xc002b9a6
c001891c:	80 fa 02             	cmp    dl,0x2
c001891f:	eb 24                	jmp    c0018945 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018921:	80 f9 11             	cmp    cl,0x11
c0018924:	75 13                	jne    c0018939 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018926:	b8 a6 b9 02 c0       	mov    eax,0xc002b9a6
c001892b:	80 fa 03             	cmp    dl,0x3
c001892e:	0f 85 9b 00 00 00    	jne    c00189cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018934:	e9 91 00 00 00       	jmp    c00189ca <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018939:	80 f9 12             	cmp    cl,0x12
c001893c:	75 14                	jne    c0018952 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c001893e:	b8 a6 b9 02 c0       	mov    eax,0xc002b9a6
c0018943:	fe ca                	dec    dl
c0018945:	0f 85 84 00 00 00    	jne    c00189cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001894b:	b8 60 d9 02 c0       	mov    eax,0xc002d960
c0018950:	eb 7d                	jmp    c00189cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018952:	80 f9 14             	cmp    cl,0x14
c0018955:	75 12                	jne    c0018969 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0018957:	4a                   	dec    edx
c0018958:	b8 a6 b9 02 c0       	mov    eax,0xc002b9a6
c001895d:	80 fa 01             	cmp    dl,0x1
c0018960:	77 6d                	ja     c00189cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018962:	b8 70 d9 02 c0       	mov    eax,0xc002d970
c0018967:	eb 66                	jmp    c00189cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018969:	80 f9 15             	cmp    cl,0x15
c001896c:	75 31                	jne    c001899f <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c001896e:	b8 80 d9 02 c0       	mov    eax,0xc002d980
c0018973:	80 fa 01             	cmp    dl,0x1
c0018976:	74 57                	je     c00189cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018978:	b8 a6 b9 02 c0       	mov    eax,0xc002b9a6
c001897d:	80 fa 13             	cmp    dl,0x13
c0018980:	76 0c                	jbe    c001898e <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018982:	80 fa 30             	cmp    dl,0x30
c0018985:	75 48                	jne    c00189cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018987:	b8 a0 d9 02 c0       	mov    eax,0xc002d9a0
c001898c:	eb 41                	jmp    c00189cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001898e:	b9 04 00 09 00       	mov    ecx,0x90004
c0018993:	0f a3 d1             	bt     ecx,edx
c0018996:	73 37                	jae    c00189cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018998:	b8 90 d9 02 c0       	mov    eax,0xc002d990
c001899d:	eb 30                	jmp    c00189cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001899f:	b8 a6 b9 02 c0       	mov    eax,0xc002b9a6
c00189a4:	80 f9 16             	cmp    cl,0x16
c00189a7:	75 26                	jne    c00189cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189a9:	b8 b0 d9 02 c0       	mov    eax,0xc002d9b0
c00189ae:	84 d2                	test   dl,dl
c00189b0:	74 1d                	je     c00189cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189b2:	b8 a6 b9 02 c0       	mov    eax,0xc002b9a6
c00189b7:	80 fa 30             	cmp    dl,0x30
c00189ba:	75 13                	jne    c00189cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189bc:	b8 c0 d9 02 c0       	mov    eax,0xc002d9c0
c00189c1:	eb 0c                	jmp    c00189cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189c3:	b8 e0 d8 02 c0       	mov    eax,0xc002d8e0
c00189c8:	eb 05                	jmp    c00189cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189ca:	b8 50 d9 02 c0       	mov    eax,0xc002d950
c00189cf:	5b                   	pop    ebx
c00189d0:	5e                   	pop    esi
c00189d1:	5f                   	pop    edi
c00189d2:	5d                   	pop    ebp
c00189d3:	c3                   	ret    

c00189d4 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c00189d4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00189d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00189dc:	80 f9 04             	cmp    cl,0x4
c00189df:	75 6b                	jne    c0018a4c <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c00189e1:	b8 40 d7 02 c0       	mov    eax,0xc002d740
c00189e6:	80 fa 01             	cmp    dl,0x1
c00189e9:	0f 86 92 02 00 00    	jbe    c0018c81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189ef:	b8 50 d7 02 c0       	mov    eax,0xc002d750
c00189f4:	80 fa 02             	cmp    dl,0x2
c00189f7:	0f 84 84 02 00 00    	je     c0018c81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189fd:	b8 60 d7 02 c0       	mov    eax,0xc002d760
c0018a02:	80 fa 03             	cmp    dl,0x3
c0018a05:	0f 84 76 02 00 00    	je     c0018c81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a0b:	b8 70 d7 02 c0       	mov    eax,0xc002d770
c0018a10:	80 fa 04             	cmp    dl,0x4
c0018a13:	0f 84 68 02 00 00    	je     c0018c81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a19:	b8 80 d7 02 c0       	mov    eax,0xc002d780
c0018a1e:	80 fa 05             	cmp    dl,0x5
c0018a21:	0f 84 5a 02 00 00    	je     c0018c81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a27:	b8 60 d7 02 c0       	mov    eax,0xc002d760
c0018a2c:	80 fa 07             	cmp    dl,0x7
c0018a2f:	0f 84 4c 02 00 00    	je     c0018c81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a35:	83 ea 08             	sub    edx,0x8
c0018a38:	b8 a6 b9 02 c0       	mov    eax,0xc002b9a6
c0018a3d:	80 fa 01             	cmp    dl,0x1
c0018a40:	0f 87 3b 02 00 00    	ja     c0018c81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a46:	b8 90 d7 02 c0       	mov    eax,0xc002d790
c0018a4b:	c3                   	ret    
c0018a4c:	80 f9 05             	cmp    cl,0x5
c0018a4f:	75 45                	jne    c0018a96 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018a51:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018a54:	b8 a0 d7 02 c0       	mov    eax,0xc002d7a0
c0018a59:	80 f9 02             	cmp    cl,0x2
c0018a5c:	0f 86 1f 02 00 00    	jbe    c0018c81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a62:	80 fa 04             	cmp    dl,0x4
c0018a65:	0f 84 f3 01 00 00    	je     c0018c5e <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018a6b:	80 fa 07             	cmp    dl,0x7
c0018a6e:	0f 84 0d 02 00 00    	je     c0018c81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a74:	b8 b0 d7 02 c0       	mov    eax,0xc002d7b0
c0018a79:	80 fa 08             	cmp    dl,0x8
c0018a7c:	0f 84 ff 01 00 00    	je     c0018c81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a82:	b8 a6 b9 02 c0       	mov    eax,0xc002b9a6
c0018a87:	80 fa 09             	cmp    dl,0x9
c0018a8a:	0f 85 f1 01 00 00    	jne    c0018c81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a90:	b8 c0 d7 02 c0       	mov    eax,0xc002d7c0
c0018a95:	c3                   	ret    
c0018a96:	80 f9 06             	cmp    cl,0x6
c0018a99:	0f 85 85 01 00 00    	jne    c0018c24 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018a9f:	b8 d0 d7 02 c0       	mov    eax,0xc002d7d0
c0018aa4:	80 fa 01             	cmp    dl,0x1
c0018aa7:	0f 84 d4 01 00 00    	je     c0018c81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018aad:	8d 42 fb             	lea    eax,[edx-0x5]
c0018ab0:	3c 01                	cmp    al,0x1
c0018ab2:	0f 86 ac 01 00 00    	jbe    c0018c64 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018ab8:	80 fa 03             	cmp    dl,0x3
c0018abb:	0f 84 a3 01 00 00    	je     c0018c64 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018ac1:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018ac4:	b8 f0 d7 02 c0       	mov    eax,0xc002d7f0
c0018ac9:	80 f9 01             	cmp    cl,0x1
c0018acc:	0f 86 af 01 00 00    	jbe    c0018c81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ad2:	80 fa 09             	cmp    dl,0x9
c0018ad5:	0f 84 8f 01 00 00    	je     c0018c6a <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018adb:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018ade:	80 f9 01             	cmp    cl,0x1
c0018ae1:	0f 86 9a 01 00 00    	jbe    c0018c81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ae7:	b8 00 d8 02 c0       	mov    eax,0xc002d800
c0018aec:	80 fa 0d             	cmp    dl,0xd
c0018aef:	0f 84 8c 01 00 00    	je     c0018c81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018af5:	b8 10 d8 02 c0       	mov    eax,0xc002d810
c0018afa:	80 fa 0e             	cmp    dl,0xe
c0018afd:	0f 84 7e 01 00 00    	je     c0018c81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b03:	b8 20 d8 02 c0       	mov    eax,0xc002d820
c0018b08:	80 fa 0f             	cmp    dl,0xf
c0018b0b:	0f 84 70 01 00 00    	je     c0018c81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b11:	b8 00 d8 02 c0       	mov    eax,0xc002d800
c0018b16:	80 fa 15             	cmp    dl,0x15
c0018b19:	0f 84 62 01 00 00    	je     c0018c81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b1f:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018b22:	b8 20 d8 02 c0       	mov    eax,0xc002d820
c0018b27:	80 f9 01             	cmp    cl,0x1
c0018b2a:	0f 86 51 01 00 00    	jbe    c0018c81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b30:	80 fa 1a             	cmp    dl,0x1a
c0018b33:	0f 84 37 01 00 00    	je     c0018c70 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018b39:	80 fa 1c             	cmp    dl,0x1c
c0018b3c:	0f 84 34 01 00 00    	je     c0018c76 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018b42:	80 fa 1d             	cmp    dl,0x1d
c0018b45:	0f 84 36 01 00 00    	je     c0018c81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b4b:	b8 50 d8 02 c0       	mov    eax,0xc002d850
c0018b50:	80 fa 25             	cmp    dl,0x25
c0018b53:	0f 84 28 01 00 00    	je     c0018c81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b59:	8d 4a da             	lea    ecx,[edx-0x26]
c0018b5c:	b8 40 d8 02 c0       	mov    eax,0xc002d840
c0018b61:	80 f9 01             	cmp    cl,0x1
c0018b64:	0f 86 17 01 00 00    	jbe    c0018c81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b6a:	b8 60 d8 02 c0       	mov    eax,0xc002d860
c0018b6f:	80 fa 2a             	cmp    dl,0x2a
c0018b72:	0f 84 09 01 00 00    	je     c0018c81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b78:	b8 50 d8 02 c0       	mov    eax,0xc002d850
c0018b7d:	80 fa 2c             	cmp    dl,0x2c
c0018b80:	0f 84 fb 00 00 00    	je     c0018c81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b86:	b8 60 d8 02 c0       	mov    eax,0xc002d860
c0018b8b:	80 fa 2d             	cmp    dl,0x2d
c0018b8e:	0f 84 ed 00 00 00    	je     c0018c81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b94:	b8 30 d8 02 c0       	mov    eax,0xc002d830
c0018b99:	80 fa 2e             	cmp    dl,0x2e
c0018b9c:	0f 84 df 00 00 00    	je     c0018c81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ba2:	b8 50 d8 02 c0       	mov    eax,0xc002d850
c0018ba7:	80 fa 2f             	cmp    dl,0x2f
c0018baa:	0f 84 d1 00 00 00    	je     c0018c81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bb0:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018bb3:	b8 40 d8 02 c0       	mov    eax,0xc002d840
c0018bb8:	80 f9 01             	cmp    cl,0x1
c0018bbb:	0f 86 c0 00 00 00    	jbe    c0018c81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bc1:	b8 70 d8 02 c0       	mov    eax,0xc002d870
c0018bc6:	80 fa 37             	cmp    dl,0x37
c0018bc9:	0f 84 b2 00 00 00    	je     c0018c81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bcf:	b8 80 d8 02 c0       	mov    eax,0xc002d880
c0018bd4:	80 fa 3a             	cmp    dl,0x3a
c0018bd7:	0f 84 a4 00 00 00    	je     c0018c81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bdd:	b8 90 d8 02 c0       	mov    eax,0xc002d890
c0018be2:	80 fa 3c             	cmp    dl,0x3c
c0018be5:	0f 84 96 00 00 00    	je     c0018c81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018beb:	b8 a0 d8 02 c0       	mov    eax,0xc002d8a0
c0018bf0:	80 fa 3d             	cmp    dl,0x3d
c0018bf3:	0f 84 88 00 00 00    	je     c0018c81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bf9:	b8 80 d8 02 c0       	mov    eax,0xc002d880
c0018bfe:	80 fa 3e             	cmp    dl,0x3e
c0018c01:	74 7e                	je     c0018c81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c03:	8d 42 bb             	lea    eax,[edx-0x45]
c0018c06:	3c 01                	cmp    al,0x1
c0018c08:	76 72                	jbe    c0018c7c <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018c0a:	80 fa 3f             	cmp    dl,0x3f
c0018c0d:	74 6d                	je     c0018c7c <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018c0f:	80 fa 4a             	cmp    dl,0x4a
c0018c12:	74 0a                	je     c0018c1e <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018c14:	b8 a6 b9 02 c0       	mov    eax,0xc002b9a6
c0018c19:	80 fa 4d             	cmp    dl,0x4d
c0018c1c:	75 63                	jne    c0018c81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c1e:	b8 70 d8 02 c0       	mov    eax,0xc002d870
c0018c23:	c3                   	ret    
c0018c24:	b8 a6 b9 02 c0       	mov    eax,0xc002b9a6
c0018c29:	80 f9 0b             	cmp    cl,0xb
c0018c2c:	75 0a                	jne    c0018c38 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018c2e:	fe ca                	dec    dl
c0018c30:	75 4f                	jne    c0018c81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c32:	b8 b0 d8 02 c0       	mov    eax,0xc002d8b0
c0018c37:	c3                   	ret    
c0018c38:	80 f9 0f             	cmp    cl,0xf
c0018c3b:	75 44                	jne    c0018c81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c3d:	b8 c0 d8 02 c0       	mov    eax,0xc002d8c0
c0018c42:	80 fa 02             	cmp    dl,0x2
c0018c45:	76 3a                	jbe    c0018c81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c47:	8d 42 fd             	lea    eax,[edx-0x3]
c0018c4a:	3c 01                	cmp    al,0x1
c0018c4c:	76 0a                	jbe    c0018c58 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018c4e:	b8 a6 b9 02 c0       	mov    eax,0xc002b9a6
c0018c53:	80 fa 06             	cmp    dl,0x6
c0018c56:	75 29                	jne    c0018c81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c58:	b8 d0 d8 02 c0       	mov    eax,0xc002d8d0
c0018c5d:	c3                   	ret    
c0018c5e:	b8 b0 d7 02 c0       	mov    eax,0xc002d7b0
c0018c63:	c3                   	ret    
c0018c64:	b8 e0 d7 02 c0       	mov    eax,0xc002d7e0
c0018c69:	c3                   	ret    
c0018c6a:	b8 00 d8 02 c0       	mov    eax,0xc002d800
c0018c6f:	c3                   	ret    
c0018c70:	b8 30 d8 02 c0       	mov    eax,0xc002d830
c0018c75:	c3                   	ret    
c0018c76:	b8 40 d8 02 c0       	mov    eax,0xc002d840
c0018c7b:	c3                   	ret    
c0018c7c:	b8 90 d8 02 c0       	mov    eax,0xc002d890
c0018c81:	c3                   	ret    

c0018c82 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018c82:	60                   	pusha  
c0018c83:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018c87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018c8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018c8f:	9c                   	pushf  
c0018c90:	fa                   	cli    
c0018c91:	0f 09                	wbinvd 
c0018c93:	0f 30                	wrmsr  
c0018c95:	9d                   	popf   
c0018c96:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018c9a:	89 02                	mov    DWORD PTR [edx],eax
c0018c9c:	61                   	popa   
c0018c9d:	c3                   	ret    

c0018c9e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018c9e:	60                   	pusha  
c0018c9f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018ca3:	9c                   	pushf  
c0018ca4:	fa                   	cli    
c0018ca5:	0f 09                	wbinvd 
c0018ca7:	31 c0                	xor    eax,eax
c0018ca9:	31 d2                	xor    edx,edx
c0018cab:	0f 32                	rdmsr  
c0018cad:	9d                   	popf   
c0018cae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018cb2:	89 02                	mov    DWORD PTR [edx],eax
c0018cb4:	61                   	popa   
c0018cb5:	c3                   	ret    

c0018cb6 <CPU::AMD_K6_writeback(int, int, int)>:
c0018cb6:	56                   	push   esi
c0018cb7:	53                   	push   ebx
c0018cb8:	83 ec 10             	sub    esp,0x10
c0018cbb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018cbf:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018cc4:	75 5d                	jne    c0018d23 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018cc6:	83 f8 08             	cmp    eax,0x8
c0018cc9:	75 09                	jne    c0018cd4 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018ccb:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018cd0:	7e 13                	jle    c0018ce5 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018cd2:	eb 30                	jmp    c0018d04 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018cd4:	83 f8 06             	cmp    eax,0x6
c0018cd7:	7c 4a                	jl     c0018d23 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018cd9:	83 f8 07             	cmp    eax,0x7
c0018cdc:	7e 07                	jle    c0018ce5 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018cde:	83 f8 09             	cmp    eax,0x9
c0018ce1:	74 21                	je     c0018d04 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018ce3:	eb 3e                	jmp    c0018d23 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018ce5:	89 e6                	mov    esi,esp
c0018ce7:	8b 1d 08 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e508
c0018ced:	56                   	push   esi
c0018cee:	c1 eb 15             	shr    ebx,0x15
c0018cf1:	68 82 00 00 c0       	push   0xc0000082
c0018cf6:	83 e3 7e             	and    ebx,0x7e
c0018cf9:	e8 a0 ff ff ff       	call   c0018c9e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018cfe:	56                   	push   esi
c0018cff:	6a 00                	push   0x0
c0018d01:	53                   	push   ebx
c0018d02:	eb 12                	jmp    c0018d16 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018d04:	89 e3                	mov    ebx,esp
c0018d06:	53                   	push   ebx
c0018d07:	68 82 00 00 c0       	push   0xc0000082
c0018d0c:	e8 8d ff ff ff       	call   c0018c9e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018d11:	53                   	push   ebx
c0018d12:	6a 00                	push   0x0
c0018d14:	6a 00                	push   0x0
c0018d16:	68 82 00 00 c0       	push   0xc0000082
c0018d1b:	e8 62 ff ff ff       	call   c0018c82 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018d20:	83 c4 18             	add    esp,0x18
c0018d23:	83 c4 10             	add    esp,0x10
c0018d26:	5b                   	pop    ebx
c0018d27:	5e                   	pop    esi
c0018d28:	c3                   	ret    
c0018d29:	90                   	nop

c0018d2a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018d2a:	55                   	push   ebp
c0018d2b:	57                   	push   edi
c0018d2c:	56                   	push   esi
c0018d2d:	53                   	push   ebx
c0018d2e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d32:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018d36:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018d3a:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018d3e:	39 05 e0 d9 02 c0    	cmp    DWORD PTR ds:0xc002d9e0,eax
c0018d44:	75 23                	jne    c0018d69 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018d46:	a1 0c 10 03 c0       	mov    eax,ds:0xc003100c
c0018d4b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018d4f:	89 06                	mov    DWORD PTR [esi],eax
c0018d51:	a1 08 10 03 c0       	mov    eax,ds:0xc0031008
c0018d56:	89 07                	mov    DWORD PTR [edi],eax
c0018d58:	a1 04 10 03 c0       	mov    eax,ds:0xc0031004
c0018d5d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018d60:	a1 00 10 03 c0       	mov    eax,ds:0xc0031000
c0018d65:	89 02                	mov    DWORD PTR [edx],eax
c0018d67:	eb 3f                	jmp    c0018da8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018d69:	31 c9                	xor    ecx,ecx
c0018d6b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d6f:	0f a2                	cpuid  
c0018d71:	89 06                	mov    DWORD PTR [esi],eax
c0018d73:	89 1f                	mov    DWORD PTR [edi],ebx
c0018d75:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018d79:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018d7c:	89 10                	mov    DWORD PTR [eax],edx
c0018d7e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d82:	a3 e0 d9 02 c0       	mov    ds:0xc002d9e0,eax
c0018d87:	8b 06                	mov    eax,DWORD PTR [esi]
c0018d89:	a3 0c 10 03 c0       	mov    ds:0xc003100c,eax
c0018d8e:	8b 07                	mov    eax,DWORD PTR [edi]
c0018d90:	a3 08 10 03 c0       	mov    ds:0xc0031008,eax
c0018d95:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018d98:	a3 04 10 03 c0       	mov    ds:0xc0031004,eax
c0018d9d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018da1:	8b 00                	mov    eax,DWORD PTR [eax]
c0018da3:	a3 00 10 03 c0       	mov    ds:0xc0031000,eax
c0018da8:	5b                   	pop    ebx
c0018da9:	5e                   	pop    esi
c0018daa:	5f                   	pop    edi
c0018dab:	5d                   	pop    ebp
c0018dac:	c3                   	ret    
c0018dad:	90                   	nop

c0018dae <CPU::cpuidCheckEDX(unsigned int)>:
c0018dae:	83 ec 10             	sub    esp,0x10
c0018db1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018db5:	50                   	push   eax
c0018db6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dba:	50                   	push   eax
c0018dbb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dbf:	50                   	push   eax
c0018dc0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dc4:	50                   	push   eax
c0018dc5:	6a 01                	push   0x1
c0018dc7:	e8 5e ff ff ff       	call   c0018d2a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018dcc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018dd0:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018dd4:	0f 95 c0             	setne  al
c0018dd7:	83 c4 24             	add    esp,0x24
c0018dda:	c3                   	ret    
c0018ddb:	90                   	nop

c0018ddc <CPU::cpuidCheckECX(unsigned int)>:
c0018ddc:	83 ec 10             	sub    esp,0x10
c0018ddf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018de3:	50                   	push   eax
c0018de4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018de8:	50                   	push   eax
c0018de9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ded:	50                   	push   eax
c0018dee:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018df2:	50                   	push   eax
c0018df3:	6a 01                	push   0x1
c0018df5:	e8 30 ff ff ff       	call   c0018d2a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018dfa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018dfe:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018e02:	0f 95 c0             	setne  al
c0018e05:	83 c4 24             	add    esp,0x24
c0018e08:	c3                   	ret    
c0018e09:	90                   	nop

c0018e0a <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018e0a:	83 ec 10             	sub    esp,0x10
c0018e0d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e11:	50                   	push   eax
c0018e12:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e16:	50                   	push   eax
c0018e17:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e1b:	50                   	push   eax
c0018e1c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e20:	50                   	push   eax
c0018e21:	6a 07                	push   0x7
c0018e23:	e8 02 ff ff ff       	call   c0018d2a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e28:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e2c:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018e30:	0f 95 c0             	setne  al
c0018e33:	83 c4 24             	add    esp,0x24
c0018e36:	c3                   	ret    
c0018e37:	90                   	nop

c0018e38 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018e38:	83 ec 10             	sub    esp,0x10
c0018e3b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e3f:	50                   	push   eax
c0018e40:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e44:	50                   	push   eax
c0018e45:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e49:	50                   	push   eax
c0018e4a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e4e:	50                   	push   eax
c0018e4f:	6a 07                	push   0x7
c0018e51:	e8 d4 fe ff ff       	call   c0018d2a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e56:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e5a:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018e5e:	0f 95 c0             	setne  al
c0018e61:	83 c4 24             	add    esp,0x24
c0018e64:	c3                   	ret    
c0018e65:	90                   	nop

c0018e66 <CPU::CPU()>:
c0018e66:	83 ec 0c             	sub    esp,0xc
c0018e69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e6d:	83 ec 08             	sub    esp,0x8
c0018e70:	68 a6 b9 02 c0       	push   0xc002b9a6
c0018e75:	50                   	push   eax
c0018e76:	e8 85 b7 ff ff       	call   c0014600 <Device::Device(char const*)>
c0018e7b:	83 c4 10             	add    esp,0x10
c0018e7e:	ba 80 ba 02 c0       	mov    edx,0xc002ba80
c0018e83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e87:	89 10                	mov    DWORD PTR [eax],edx
c0018e89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e8d:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018e97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e9b:	05 78 01 00 00       	add    eax,0x178
c0018ea0:	83 ec 0c             	sub    esp,0xc
c0018ea3:	50                   	push   eax
c0018ea4:	e8 af 61 ff ff       	call   c000f058 <GDT::GDT()>
c0018ea9:	83 c4 10             	add    esp,0x10
c0018eac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018eb0:	05 7c 09 00 00       	add    eax,0x97c
c0018eb5:	83 ec 0c             	sub    esp,0xc
c0018eb8:	50                   	push   eax
c0018eb9:	e8 fc 63 ff ff       	call   c000f2ba <IDT::IDT()>
c0018ebe:	83 c4 10             	add    esp,0x10
c0018ec1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ec5:	05 7c 11 00 00       	add    eax,0x117c
c0018eca:	83 ec 0c             	sub    esp,0xc
c0018ecd:	50                   	push   eax
c0018ece:	e8 d9 85 ff ff       	call   c00114ac <TSS::TSS()>
c0018ed3:	83 c4 10             	add    esp,0x10
c0018ed6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018eda:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018ee1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ee5:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018eef:	90                   	nop
c0018ef0:	83 c4 0c             	add    esp,0xc
c0018ef3:	c3                   	ret    

c0018ef4 <CPU::displayFeatures()>:
c0018ef4:	53                   	push   ebx
c0018ef5:	83 ec 10             	sub    esp,0x10
c0018ef8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018efc:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018f02:	68 b4 b6 02 c0       	push   0xc002b6b4
c0018f07:	e8 de a0 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0018f0c:	59                   	pop    ecx
c0018f0d:	58                   	pop    eax
c0018f0e:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018f14:	50                   	push   eax
c0018f15:	68 c5 b6 02 c0       	push   0xc002b6c5
c0018f1a:	e8 cb a0 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0018f1f:	58                   	pop    eax
c0018f20:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f26:	5a                   	pop    edx
c0018f27:	c1 e8 0e             	shr    eax,0xe
c0018f2a:	0f b6 c0             	movzx  eax,al
c0018f2d:	50                   	push   eax
c0018f2e:	68 d6 b6 02 c0       	push   0xc002b6d6
c0018f33:	e8 b2 a0 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0018f38:	59                   	pop    ecx
c0018f39:	58                   	pop    eax
c0018f3a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f40:	66 c1 e8 06          	shr    ax,0x6
c0018f44:	0f b6 c0             	movzx  eax,al
c0018f47:	50                   	push   eax
c0018f48:	68 e7 b6 02 c0       	push   0xc002b6e7
c0018f4d:	e8 98 a0 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0018f52:	c7 04 24 94 bb 02 c0 	mov    DWORD PTR [esp],0xc002bb94
c0018f59:	e8 8c a0 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0018f5e:	83 c4 10             	add    esp,0x10
c0018f61:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c0018f66:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018f6d:	74 05                	je     c0018f74 <CPU::displayFeatures()+0x80>
c0018f6f:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c0018f74:	52                   	push   edx
c0018f75:	52                   	push   edx
c0018f76:	50                   	push   eax
c0018f77:	68 f8 b6 02 c0       	push   0xc002b6f8
c0018f7c:	e8 69 a0 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0018f81:	83 c4 10             	add    esp,0x10
c0018f84:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c0018f89:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018f90:	78 05                	js     c0018f97 <CPU::displayFeatures()+0xa3>
c0018f92:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c0018f97:	51                   	push   ecx
c0018f98:	51                   	push   ecx
c0018f99:	50                   	push   eax
c0018f9a:	68 0f b7 02 c0       	push   0xc002b70f
c0018f9f:	e8 46 a0 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0018fa4:	83 c4 10             	add    esp,0x10
c0018fa7:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c0018fac:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018fb3:	75 05                	jne    c0018fba <CPU::displayFeatures()+0xc6>
c0018fb5:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c0018fba:	52                   	push   edx
c0018fbb:	52                   	push   edx
c0018fbc:	50                   	push   eax
c0018fbd:	68 26 b7 02 c0       	push   0xc002b726
c0018fc2:	e8 23 a0 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0018fc7:	83 c4 10             	add    esp,0x10
c0018fca:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c0018fcf:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018fd6:	75 05                	jne    c0018fdd <CPU::displayFeatures()+0xe9>
c0018fd8:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c0018fdd:	51                   	push   ecx
c0018fde:	51                   	push   ecx
c0018fdf:	50                   	push   eax
c0018fe0:	68 3d b7 02 c0       	push   0xc002b73d
c0018fe5:	e8 00 a0 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0018fea:	83 c4 10             	add    esp,0x10
c0018fed:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c0018ff2:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018ff9:	75 05                	jne    c0019000 <CPU::displayFeatures()+0x10c>
c0018ffb:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c0019000:	52                   	push   edx
c0019001:	52                   	push   edx
c0019002:	50                   	push   eax
c0019003:	68 54 b7 02 c0       	push   0xc002b754
c0019008:	e8 dd 9f ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001900d:	83 c4 10             	add    esp,0x10
c0019010:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c0019015:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c001901c:	75 05                	jne    c0019023 <CPU::displayFeatures()+0x12f>
c001901e:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c0019023:	51                   	push   ecx
c0019024:	51                   	push   ecx
c0019025:	50                   	push   eax
c0019026:	68 6b b7 02 c0       	push   0xc002b76b
c001902b:	e8 ba 9f ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0019030:	83 c4 10             	add    esp,0x10
c0019033:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c0019038:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c001903f:	75 05                	jne    c0019046 <CPU::displayFeatures()+0x152>
c0019041:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c0019046:	52                   	push   edx
c0019047:	52                   	push   edx
c0019048:	50                   	push   eax
c0019049:	68 82 b7 02 c0       	push   0xc002b782
c001904e:	e8 97 9f ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0019053:	83 c4 10             	add    esp,0x10
c0019056:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c001905b:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0019062:	75 05                	jne    c0019069 <CPU::displayFeatures()+0x175>
c0019064:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c0019069:	51                   	push   ecx
c001906a:	51                   	push   ecx
c001906b:	50                   	push   eax
c001906c:	68 99 b7 02 c0       	push   0xc002b799
c0019071:	e8 74 9f ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0019076:	83 c4 10             	add    esp,0x10
c0019079:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c001907e:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0019085:	75 05                	jne    c001908c <CPU::displayFeatures()+0x198>
c0019087:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c001908c:	52                   	push   edx
c001908d:	52                   	push   edx
c001908e:	50                   	push   eax
c001908f:	68 b0 b7 02 c0       	push   0xc002b7b0
c0019094:	e8 51 9f ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0019099:	83 c4 10             	add    esp,0x10
c001909c:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c00190a1:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c00190a8:	75 05                	jne    c00190af <CPU::displayFeatures()+0x1bb>
c00190aa:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c00190af:	51                   	push   ecx
c00190b0:	51                   	push   ecx
c00190b1:	50                   	push   eax
c00190b2:	68 c7 b7 02 c0       	push   0xc002b7c7
c00190b7:	e8 2e 9f ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c00190bc:	83 c4 10             	add    esp,0x10
c00190bf:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c00190c4:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c00190cb:	75 05                	jne    c00190d2 <CPU::displayFeatures()+0x1de>
c00190cd:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c00190d2:	52                   	push   edx
c00190d3:	52                   	push   edx
c00190d4:	50                   	push   eax
c00190d5:	68 de b7 02 c0       	push   0xc002b7de
c00190da:	e8 0b 9f ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c00190df:	83 c4 10             	add    esp,0x10
c00190e2:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c00190e7:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c00190ee:	75 05                	jne    c00190f5 <CPU::displayFeatures()+0x201>
c00190f0:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c00190f5:	51                   	push   ecx
c00190f6:	51                   	push   ecx
c00190f7:	50                   	push   eax
c00190f8:	68 f5 b7 02 c0       	push   0xc002b7f5
c00190fd:	e8 e8 9e ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0019102:	83 c4 10             	add    esp,0x10
c0019105:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c001910a:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0019111:	75 05                	jne    c0019118 <CPU::displayFeatures()+0x224>
c0019113:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c0019118:	52                   	push   edx
c0019119:	52                   	push   edx
c001911a:	50                   	push   eax
c001911b:	68 0c b8 02 c0       	push   0xc002b80c
c0019120:	e8 c5 9e ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0019125:	83 c4 10             	add    esp,0x10
c0019128:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c001912d:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0019134:	78 05                	js     c001913b <CPU::displayFeatures()+0x247>
c0019136:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c001913b:	51                   	push   ecx
c001913c:	51                   	push   ecx
c001913d:	50                   	push   eax
c001913e:	68 23 b8 02 c0       	push   0xc002b823
c0019143:	e8 a2 9e ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0019148:	83 c4 10             	add    esp,0x10
c001914b:	b8 b2 a0 02 c0       	mov    eax,0xc002a0b2
c0019150:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0019157:	75 05                	jne    c001915e <CPU::displayFeatures()+0x26a>
c0019159:	b8 b6 a0 02 c0       	mov    eax,0xc002a0b6
c001915e:	52                   	push   edx
c001915f:	52                   	push   edx
c0019160:	50                   	push   eax
c0019161:	68 3a b8 02 c0       	push   0xc002b83a
c0019166:	e8 7f 9e ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001916b:	83 c4 18             	add    esp,0x18
c001916e:	5b                   	pop    ebx
c001916f:	c3                   	ret    

c0019170 <CPU::detectFeatures()>:
c0019170:	55                   	push   ebp
c0019171:	57                   	push   edi
c0019172:	56                   	push   esi
c0019173:	53                   	push   ebx
c0019174:	83 ec 50             	sub    esp,0x50
c0019177:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c001917b:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0019185:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c001918c:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0019192:	6a 0d                	push   0xd
c0019194:	6a 00                	push   0x0
c0019196:	57                   	push   edi
c0019197:	e8 dc 75 fe ff       	call   c0000778 <memset>
c001919c:	83 c4 10             	add    esp,0x10
c001919f:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c00191a4:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c00191ab:	0f 84 20 09 00 00    	je     c0019ad1 <CPU::detectFeatures()+0x961>
c00191b1:	83 ec 0c             	sub    esp,0xc
c00191b4:	6a 10                	push   0x10
c00191b6:	e8 f3 fb ff ff       	call   c0018dae <CPU::cpuidCheckEDX(unsigned int)>
c00191bb:	83 e0 01             	and    eax,0x1
c00191be:	8d 14 00             	lea    edx,[eax+eax*1]
c00191c1:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191c7:	83 e0 fd             	and    eax,0xfffffffd
c00191ca:	09 d0                	or     eax,edx
c00191cc:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191d2:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00191d9:	e8 d0 fb ff ff       	call   c0018dae <CPU::cpuidCheckEDX(unsigned int)>
c00191de:	83 e0 01             	and    eax,0x1
c00191e1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00191e8:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191ee:	83 e0 fb             	and    eax,0xfffffffb
c00191f1:	09 d0                	or     eax,edx
c00191f3:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191f9:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0019200:	e8 a9 fb ff ff       	call   c0018dae <CPU::cpuidCheckEDX(unsigned int)>
c0019205:	83 e0 01             	and    eax,0x1
c0019208:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001920f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019215:	83 e0 f7             	and    eax,0xfffffff7
c0019218:	09 d0                	or     eax,edx
c001921a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019220:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0019227:	e8 82 fb ff ff       	call   c0018dae <CPU::cpuidCheckEDX(unsigned int)>
c001922c:	83 e0 01             	and    eax,0x1
c001922f:	c1 e0 04             	shl    eax,0x4
c0019232:	88 c2                	mov    dl,al
c0019234:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001923a:	83 e0 ef             	and    eax,0xffffffef
c001923d:	09 d0                	or     eax,edx
c001923f:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019245:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001924c:	e8 5d fb ff ff       	call   c0018dae <CPU::cpuidCheckEDX(unsigned int)>
c0019251:	83 e0 01             	and    eax,0x1
c0019254:	c1 e0 05             	shl    eax,0x5
c0019257:	88 c2                	mov    dl,al
c0019259:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001925f:	83 e0 df             	and    eax,0xffffffdf
c0019262:	09 d0                	or     eax,edx
c0019264:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001926a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0019271:	e8 38 fb ff ff       	call   c0018dae <CPU::cpuidCheckEDX(unsigned int)>
c0019276:	83 e0 01             	and    eax,0x1
c0019279:	8d 14 00             	lea    edx,[eax+eax*1]
c001927c:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019282:	83 e0 fd             	and    eax,0xfffffffd
c0019285:	09 d0                	or     eax,edx
c0019287:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001928d:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0019294:	e8 15 fb ff ff       	call   c0018dae <CPU::cpuidCheckEDX(unsigned int)>
c0019299:	83 e0 01             	and    eax,0x1
c001929c:	c1 e0 06             	shl    eax,0x6
c001929f:	88 c2                	mov    dl,al
c00192a1:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00192a7:	83 e0 bf             	and    eax,0xffffffbf
c00192aa:	09 d0                	or     eax,edx
c00192ac:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00192b2:	58                   	pop    eax
c00192b3:	8d 74 24 28          	lea    esi,[esp+0x28]
c00192b7:	56                   	push   esi
c00192b8:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00192bc:	55                   	push   ebp
c00192bd:	8d 44 24 28          	lea    eax,[esp+0x28]
c00192c1:	50                   	push   eax
c00192c2:	8d 54 24 28          	lea    edx,[esp+0x28]
c00192c6:	52                   	push   edx
c00192c7:	6a 00                	push   0x0
c00192c9:	e8 5c fa ff ff       	call   c0018d2a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00192ce:	83 c4 1c             	add    esp,0x1c
c00192d1:	6a 04                	push   0x4
c00192d3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00192d7:	50                   	push   eax
c00192d8:	57                   	push   edi
c00192d9:	e8 66 74 fe ff       	call   c0000744 <memcpy>
c00192de:	83 c4 0c             	add    esp,0xc
c00192e1:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c00192e7:	6a 04                	push   0x4
c00192e9:	56                   	push   esi
c00192ea:	50                   	push   eax
c00192eb:	e8 54 74 fe ff       	call   c0000744 <memcpy>
c00192f0:	83 c4 0c             	add    esp,0xc
c00192f3:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c00192f9:	6a 04                	push   0x4
c00192fb:	55                   	push   ebp
c00192fc:	50                   	push   eax
c00192fd:	e8 42 74 fe ff       	call   c0000744 <memcpy>
c0019302:	58                   	pop    eax
c0019303:	5a                   	pop    edx
c0019304:	68 51 b8 02 c0       	push   0xc002b851
c0019309:	57                   	push   edi
c001930a:	e8 b1 75 fe ff       	call   c00008c0 <strcmp>
c001930f:	83 c4 10             	add    esp,0x10
c0019312:	85 c0                	test   eax,eax
c0019314:	75 0f                	jne    c0019325 <CPU::detectFeatures()+0x1b5>
c0019316:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0019320:	e9 22 02 00 00       	jmp    c0019547 <CPU::detectFeatures()+0x3d7>
c0019325:	50                   	push   eax
c0019326:	50                   	push   eax
c0019327:	68 5e b8 02 c0       	push   0xc002b85e
c001932c:	57                   	push   edi
c001932d:	e8 8e 75 fe ff       	call   c00008c0 <strcmp>
c0019332:	83 c4 10             	add    esp,0x10
c0019335:	85 c0                	test   eax,eax
c0019337:	74 dd                	je     c0019316 <CPU::detectFeatures()+0x1a6>
c0019339:	51                   	push   ecx
c001933a:	51                   	push   ecx
c001933b:	68 6b b8 02 c0       	push   0xc002b86b
c0019340:	57                   	push   edi
c0019341:	e8 7a 75 fe ff       	call   c00008c0 <strcmp>
c0019346:	83 c4 10             	add    esp,0x10
c0019349:	85 c0                	test   eax,eax
c001934b:	74 2a                	je     c0019377 <CPU::detectFeatures()+0x207>
c001934d:	52                   	push   edx
c001934e:	52                   	push   edx
c001934f:	68 78 b8 02 c0       	push   0xc002b878
c0019354:	57                   	push   edi
c0019355:	e8 66 75 fe ff       	call   c00008c0 <strcmp>
c001935a:	83 c4 10             	add    esp,0x10
c001935d:	85 c0                	test   eax,eax
c001935f:	74 16                	je     c0019377 <CPU::detectFeatures()+0x207>
c0019361:	50                   	push   eax
c0019362:	50                   	push   eax
c0019363:	68 85 b8 02 c0       	push   0xc002b885
c0019368:	57                   	push   edi
c0019369:	e8 52 75 fe ff       	call   c00008c0 <strcmp>
c001936e:	83 c4 10             	add    esp,0x10
c0019371:	85 c0                	test   eax,eax
c0019373:	74 48                	je     c00193bd <CPU::detectFeatures()+0x24d>
c0019375:	eb 0f                	jmp    c0019386 <CPU::detectFeatures()+0x216>
c0019377:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0019381:	e9 c1 01 00 00       	jmp    c0019547 <CPU::detectFeatures()+0x3d7>
c0019386:	50                   	push   eax
c0019387:	50                   	push   eax
c0019388:	68 92 b8 02 c0       	push   0xc002b892
c001938d:	57                   	push   edi
c001938e:	e8 2d 75 fe ff       	call   c00008c0 <strcmp>
c0019393:	83 c4 10             	add    esp,0x10
c0019396:	85 c0                	test   eax,eax
c0019398:	74 23                	je     c00193bd <CPU::detectFeatures()+0x24d>
c001939a:	50                   	push   eax
c001939b:	50                   	push   eax
c001939c:	68 9f b8 02 c0       	push   0xc002b89f
c00193a1:	57                   	push   edi
c00193a2:	e8 19 75 fe ff       	call   c00008c0 <strcmp>
c00193a7:	83 c4 10             	add    esp,0x10
c00193aa:	85 c0                	test   eax,eax
c00193ac:	75 1e                	jne    c00193cc <CPU::detectFeatures()+0x25c>
c00193ae:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00193b8:	e9 8a 01 00 00       	jmp    c0019547 <CPU::detectFeatures()+0x3d7>
c00193bd:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00193c7:	e9 7b 01 00 00       	jmp    c0019547 <CPU::detectFeatures()+0x3d7>
c00193cc:	50                   	push   eax
c00193cd:	50                   	push   eax
c00193ce:	68 ac b8 02 c0       	push   0xc002b8ac
c00193d3:	57                   	push   edi
c00193d4:	e8 e7 74 fe ff       	call   c00008c0 <strcmp>
c00193d9:	83 c4 10             	add    esp,0x10
c00193dc:	85 c0                	test   eax,eax
c00193de:	75 0f                	jne    c00193ef <CPU::detectFeatures()+0x27f>
c00193e0:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00193ea:	e9 58 01 00 00       	jmp    c0019547 <CPU::detectFeatures()+0x3d7>
c00193ef:	50                   	push   eax
c00193f0:	50                   	push   eax
c00193f1:	68 6b b8 02 c0       	push   0xc002b86b
c00193f6:	57                   	push   edi
c00193f7:	e8 c4 74 fe ff       	call   c00008c0 <strcmp>
c00193fc:	83 c4 10             	add    esp,0x10
c00193ff:	85 c0                	test   eax,eax
c0019401:	75 0f                	jne    c0019412 <CPU::detectFeatures()+0x2a2>
c0019403:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001940d:	e9 35 01 00 00       	jmp    c0019547 <CPU::detectFeatures()+0x3d7>
c0019412:	50                   	push   eax
c0019413:	50                   	push   eax
c0019414:	68 b9 b8 02 c0       	push   0xc002b8b9
c0019419:	57                   	push   edi
c001941a:	e8 a1 74 fe ff       	call   c00008c0 <strcmp>
c001941f:	83 c4 10             	add    esp,0x10
c0019422:	85 c0                	test   eax,eax
c0019424:	75 0f                	jne    c0019435 <CPU::detectFeatures()+0x2c5>
c0019426:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0019430:	e9 12 01 00 00       	jmp    c0019547 <CPU::detectFeatures()+0x3d7>
c0019435:	51                   	push   ecx
c0019436:	51                   	push   ecx
c0019437:	68 c6 b8 02 c0       	push   0xc002b8c6
c001943c:	57                   	push   edi
c001943d:	e8 7e 74 fe ff       	call   c00008c0 <strcmp>
c0019442:	83 c4 10             	add    esp,0x10
c0019445:	85 c0                	test   eax,eax
c0019447:	75 0f                	jne    c0019458 <CPU::detectFeatures()+0x2e8>
c0019449:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0019453:	e9 ef 00 00 00       	jmp    c0019547 <CPU::detectFeatures()+0x3d7>
c0019458:	52                   	push   edx
c0019459:	52                   	push   edx
c001945a:	68 d3 b8 02 c0       	push   0xc002b8d3
c001945f:	57                   	push   edi
c0019460:	e8 5b 74 fe ff       	call   c00008c0 <strcmp>
c0019465:	83 c4 10             	add    esp,0x10
c0019468:	85 c0                	test   eax,eax
c001946a:	75 0f                	jne    c001947b <CPU::detectFeatures()+0x30b>
c001946c:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0019476:	e9 cc 00 00 00       	jmp    c0019547 <CPU::detectFeatures()+0x3d7>
c001947b:	50                   	push   eax
c001947c:	50                   	push   eax
c001947d:	68 e0 b8 02 c0       	push   0xc002b8e0
c0019482:	57                   	push   edi
c0019483:	e8 38 74 fe ff       	call   c00008c0 <strcmp>
c0019488:	83 c4 10             	add    esp,0x10
c001948b:	85 c0                	test   eax,eax
c001948d:	75 0f                	jne    c001949e <CPU::detectFeatures()+0x32e>
c001948f:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0019499:	e9 a9 00 00 00       	jmp    c0019547 <CPU::detectFeatures()+0x3d7>
c001949e:	50                   	push   eax
c001949f:	50                   	push   eax
c00194a0:	68 ed b8 02 c0       	push   0xc002b8ed
c00194a5:	57                   	push   edi
c00194a6:	e8 15 74 fe ff       	call   c00008c0 <strcmp>
c00194ab:	83 c4 10             	add    esp,0x10
c00194ae:	85 c0                	test   eax,eax
c00194b0:	75 0f                	jne    c00194c1 <CPU::detectFeatures()+0x351>
c00194b2:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00194bc:	e9 86 00 00 00       	jmp    c0019547 <CPU::detectFeatures()+0x3d7>
c00194c1:	50                   	push   eax
c00194c2:	50                   	push   eax
c00194c3:	68 fa b8 02 c0       	push   0xc002b8fa
c00194c8:	57                   	push   edi
c00194c9:	e8 f2 73 fe ff       	call   c00008c0 <strcmp>
c00194ce:	83 c4 10             	add    esp,0x10
c00194d1:	85 c0                	test   eax,eax
c00194d3:	75 0c                	jne    c00194e1 <CPU::detectFeatures()+0x371>
c00194d5:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00194df:	eb 66                	jmp    c0019547 <CPU::detectFeatures()+0x3d7>
c00194e1:	50                   	push   eax
c00194e2:	50                   	push   eax
c00194e3:	68 07 b9 02 c0       	push   0xc002b907
c00194e8:	57                   	push   edi
c00194e9:	e8 d2 73 fe ff       	call   c00008c0 <strcmp>
c00194ee:	83 c4 10             	add    esp,0x10
c00194f1:	85 c0                	test   eax,eax
c00194f3:	75 0c                	jne    c0019501 <CPU::detectFeatures()+0x391>
c00194f5:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00194ff:	eb 46                	jmp    c0019547 <CPU::detectFeatures()+0x3d7>
c0019501:	50                   	push   eax
c0019502:	50                   	push   eax
c0019503:	68 14 b9 02 c0       	push   0xc002b914
c0019508:	57                   	push   edi
c0019509:	e8 b2 73 fe ff       	call   c00008c0 <strcmp>
c001950e:	83 c4 10             	add    esp,0x10
c0019511:	85 c0                	test   eax,eax
c0019513:	74 e0                	je     c00194f5 <CPU::detectFeatures()+0x385>
c0019515:	50                   	push   eax
c0019516:	50                   	push   eax
c0019517:	68 21 b9 02 c0       	push   0xc002b921
c001951c:	57                   	push   edi
c001951d:	e8 9e 73 fe ff       	call   c00008c0 <strcmp>
c0019522:	83 c4 10             	add    esp,0x10
c0019525:	85 c0                	test   eax,eax
c0019527:	74 cc                	je     c00194f5 <CPU::detectFeatures()+0x385>
c0019529:	51                   	push   ecx
c001952a:	51                   	push   ecx
c001952b:	68 2e b9 02 c0       	push   0xc002b92e
c0019530:	57                   	push   edi
c0019531:	e8 8a 73 fe ff       	call   c00008c0 <strcmp>
c0019536:	83 c4 10             	add    esp,0x10
c0019539:	85 c0                	test   eax,eax
c001953b:	74 b8                	je     c00194f5 <CPU::detectFeatures()+0x385>
c001953d:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0019547:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001954c:	0f 86 be 00 00 00    	jbe    c0019610 <CPU::detectFeatures()+0x4a0>
c0019552:	83 ec 0c             	sub    esp,0xc
c0019555:	68 80 00 00 00       	push   0x80
c001955a:	e8 ab f8 ff ff       	call   c0018e0a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001955f:	83 e0 01             	and    eax,0x1
c0019562:	c1 e0 06             	shl    eax,0x6
c0019565:	88 c2                	mov    dl,al
c0019567:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001956d:	83 e0 bf             	and    eax,0xffffffbf
c0019570:	09 d0                	or     eax,edx
c0019572:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019578:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001957f:	e8 86 f8 ff ff       	call   c0018e0a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019584:	83 e0 01             	and    eax,0x1
c0019587:	c1 e0 04             	shl    eax,0x4
c001958a:	88 c2                	mov    dl,al
c001958c:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019592:	83 e0 ef             	and    eax,0xffffffef
c0019595:	09 d0                	or     eax,edx
c0019597:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001959d:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00195a4:	e8 61 f8 ff ff       	call   c0018e0a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00195a9:	c1 e0 07             	shl    eax,0x7
c00195ac:	88 c2                	mov    dl,al
c00195ae:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00195b4:	83 e0 7f             	and    eax,0x7f
c00195b7:	09 d0                	or     eax,edx
c00195b9:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00195bf:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00195c6:	e8 6d f8 ff ff       	call   c0018e38 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00195cb:	83 e0 01             	and    eax,0x1
c00195ce:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00195d5:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00195db:	83 e0 f7             	and    eax,0xfffffff7
c00195de:	09 d0                	or     eax,edx
c00195e0:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00195e6:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00195ed:	e8 46 f8 ff ff       	call   c0018e38 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00195f2:	83 c4 10             	add    esp,0x10
c00195f5:	83 e0 01             	and    eax,0x1
c00195f8:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00195ff:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019605:	83 e0 fb             	and    eax,0xfffffffb
c0019608:	09 d0                	or     eax,edx
c001960a:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019610:	83 ec 0c             	sub    esp,0xc
c0019613:	56                   	push   esi
c0019614:	55                   	push   ebp
c0019615:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0019619:	57                   	push   edi
c001961a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001961e:	50                   	push   eax
c001961f:	6a 01                	push   0x1
c0019621:	e8 04 f7 ff ff       	call   c0018d2a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019626:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001962a:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019630:	88 ca                	mov    dl,cl
c0019632:	83 e0 f0             	and    eax,0xfffffff0
c0019635:	83 e2 0f             	and    edx,0xf
c0019638:	09 d0                	or     eax,edx
c001963a:	88 ca                	mov    dl,cl
c001963c:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0019642:	c0 ea 04             	shr    dl,0x4
c0019645:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0019649:	0f b6 c2             	movzx  eax,dl
c001964c:	83 c4 20             	add    esp,0x20
c001964f:	c1 e0 06             	shl    eax,0x6
c0019652:	89 c5                	mov    ebp,eax
c0019654:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001965a:	66 25 3f c0          	and    ax,0xc03f
c001965e:	09 e8                	or     eax,ebp
c0019660:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019667:	89 c8                	mov    eax,ecx
c0019669:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001966f:	c1 e8 08             	shr    eax,0x8
c0019672:	83 e2 3f             	and    edx,0x3f
c0019675:	83 e0 0f             	and    eax,0xf
c0019678:	89 c5                	mov    ebp,eax
c001967a:	c1 e5 06             	shl    ebp,0x6
c001967d:	09 d5                	or     ebp,edx
c001967f:	89 ea                	mov    edx,ebp
c0019681:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0019687:	88 c2                	mov    dl,al
c0019689:	c0 ea 02             	shr    dl,0x2
c001968c:	89 d5                	mov    ebp,edx
c001968e:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0019694:	83 e2 c0             	and    edx,0xffffffc0
c0019697:	09 d5                	or     ebp,edx
c0019699:	89 ea                	mov    edx,ebp
c001969b:	89 cd                	mov    ebp,ecx
c001969d:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c00196a3:	c1 ed 0c             	shr    ebp,0xc
c00196a6:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00196ac:	83 e5 03             	and    ebp,0x3
c00196af:	83 e2 cf             	and    edx,0xffffffcf
c00196b2:	c1 e5 04             	shl    ebp,0x4
c00196b5:	09 d5                	or     ebp,edx
c00196b7:	3c 06                	cmp    al,0x6
c00196b9:	89 ea                	mov    edx,ebp
c00196bb:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00196c1:	74 04                	je     c00196c7 <CPU::detectFeatures()+0x557>
c00196c3:	3c 0f                	cmp    al,0xf
c00196c5:	75 5c                	jne    c0019723 <CPU::detectFeatures()+0x5b3>
c00196c7:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00196cb:	89 cd                	mov    ebp,ecx
c00196cd:	c1 ed 10             	shr    ebp,0x10
c00196d0:	c1 e5 04             	shl    ebp,0x4
c00196d3:	09 ea                	or     edx,ebp
c00196d5:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00196db:	0f b6 d2             	movzx  edx,dl
c00196de:	66 81 e5 3f c0       	and    bp,0xc03f
c00196e3:	c1 e2 06             	shl    edx,0x6
c00196e6:	09 ea                	or     edx,ebp
c00196e8:	3c 0f                	cmp    al,0xf
c00196ea:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00196f1:	75 30                	jne    c0019723 <CPU::detectFeatures()+0x5b3>
c00196f3:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00196f9:	c1 e9 14             	shr    ecx,0x14
c00196fc:	83 e0 3f             	and    eax,0x3f
c00196ff:	83 c1 0f             	add    ecx,0xf
c0019702:	88 ca                	mov    dl,cl
c0019704:	c0 e9 02             	shr    cl,0x2
c0019707:	c1 e2 06             	shl    edx,0x6
c001970a:	09 d0                	or     eax,edx
c001970c:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0019712:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0019718:	83 e0 c0             	and    eax,0xffffffc0
c001971b:	09 c1                	or     ecx,eax
c001971d:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0019723:	83 ec 0c             	sub    esp,0xc
c0019726:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001972d:	56                   	push   esi
c001972e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019732:	50                   	push   eax
c0019733:	57                   	push   edi
c0019734:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019738:	55                   	push   ebp
c0019739:	68 00 00 00 80       	push   0x80000000
c001973e:	e8 e7 f5 ff ff       	call   c0018d2a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019743:	83 c4 20             	add    esp,0x20
c0019746:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001974e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019752:	76 1e                	jbe    c0019772 <CPU::detectFeatures()+0x602>
c0019754:	83 ec 0c             	sub    esp,0xc
c0019757:	56                   	push   esi
c0019758:	50                   	push   eax
c0019759:	57                   	push   edi
c001975a:	55                   	push   ebp
c001975b:	68 01 00 00 80       	push   0x80000001
c0019760:	e8 c5 f5 ff ff       	call   c0018d2a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019765:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c001976f:	83 c4 20             	add    esp,0x20
c0019772:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0019778:	83 f8 01             	cmp    eax,0x1
c001977b:	75 6f                	jne    c00197ec <CPU::detectFeatures()+0x67c>
c001977d:	51                   	push   ecx
c001977e:	51                   	push   ecx
c001977f:	68 3a b9 02 c0       	push   0xc002b93a
c0019784:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019788:	56                   	push   esi
c0019789:	e8 a6 70 fe ff       	call   c0000834 <strcpy>
c001978e:	5f                   	pop    edi
c001978f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019795:	5d                   	pop    ebp
c0019796:	66 c1 e8 06          	shr    ax,0x6
c001979a:	0f b6 c0             	movzx  eax,al
c001979d:	50                   	push   eax
c001979e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00197a4:	c1 e8 0e             	shr    eax,0xe
c00197a7:	0f b6 c0             	movzx  eax,al
c00197aa:	50                   	push   eax
c00197ab:	e8 24 f2 ff ff       	call   c00189d4 <CPU::lookupIntelName(unsigned char, unsigned char)>
c00197b0:	5a                   	pop    edx
c00197b1:	59                   	pop    ecx
c00197b2:	50                   	push   eax
c00197b3:	56                   	push   esi
c00197b4:	e8 bb 71 fe ff       	call   c0000974 <strcat>
c00197b9:	5f                   	pop    edi
c00197ba:	5d                   	pop    ebp
c00197bb:	56                   	push   esi
c00197bc:	53                   	push   ebx
c00197bd:	e8 30 ae ff ff       	call   c00145f2 <Device::setName(char const*)>
c00197c2:	58                   	pop    eax
c00197c3:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00197c9:	5a                   	pop    edx
c00197ca:	68 41 b9 02 c0       	push   0xc002b941
c00197cf:	50                   	push   eax
c00197d0:	e8 eb 70 fe ff       	call   c00008c0 <strcmp>
c00197d5:	83 c4 10             	add    esp,0x10
c00197d8:	85 c0                	test   eax,eax
c00197da:	0f 85 71 03 00 00    	jne    c0019b51 <CPU::detectFeatures()+0x9e1>
c00197e0:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00197e7:	e9 65 03 00 00       	jmp    c0019b51 <CPU::detectFeatures()+0x9e1>
c00197ec:	83 f8 02             	cmp    eax,0x2
c00197ef:	0f 85 b5 00 00 00    	jne    c00198aa <CPU::detectFeatures()+0x73a>
c00197f5:	57                   	push   edi
c00197f6:	57                   	push   edi
c00197f7:	68 53 b9 02 c0       	push   0xc002b953
c00197fc:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019800:	56                   	push   esi
c0019801:	e8 2e 70 fe ff       	call   c0000834 <strcpy>
c0019806:	5d                   	pop    ebp
c0019807:	58                   	pop    eax
c0019808:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001980e:	66 c1 e8 06          	shr    ax,0x6
c0019812:	0f b6 c0             	movzx  eax,al
c0019815:	50                   	push   eax
c0019816:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001981c:	c1 e8 0e             	shr    eax,0xe
c001981f:	0f b6 c0             	movzx  eax,al
c0019822:	50                   	push   eax
c0019823:	e8 18 f0 ff ff       	call   c0018840 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019828:	5a                   	pop    edx
c0019829:	59                   	pop    ecx
c001982a:	50                   	push   eax
c001982b:	56                   	push   esi
c001982c:	e8 43 71 fe ff       	call   c0000974 <strcat>
c0019831:	5f                   	pop    edi
c0019832:	5d                   	pop    ebp
c0019833:	56                   	push   esi
c0019834:	53                   	push   ebx
c0019835:	e8 b8 ad ff ff       	call   c00145f2 <Device::setName(char const*)>
c001983a:	58                   	pop    eax
c001983b:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019841:	5a                   	pop    edx
c0019842:	68 58 b9 02 c0       	push   0xc002b958
c0019847:	50                   	push   eax
c0019848:	e8 73 70 fe ff       	call   c00008c0 <strcmp>
c001984d:	83 c4 10             	add    esp,0x10
c0019850:	85 c0                	test   eax,eax
c0019852:	75 20                	jne    c0019874 <CPU::detectFeatures()+0x704>
c0019854:	8b 15 c8 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e4c8
c001985a:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0019860:	a8 01                	test   al,0x1
c0019862:	74 10                	je     c0019874 <CPU::detectFeatures()+0x704>
c0019864:	83 e0 fe             	and    eax,0xfffffffe
c0019867:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001986d:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0019874:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001987a:	c1 e8 0e             	shr    eax,0xe
c001987d:	3c 05                	cmp    al,0x5
c001987f:	0f 85 cc 02 00 00    	jne    c0019b51 <CPU::detectFeatures()+0x9e1>
c0019885:	56                   	push   esi
c0019886:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001988c:	83 e0 0f             	and    eax,0xf
c001988f:	50                   	push   eax
c0019890:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019896:	66 c1 e8 06          	shr    ax,0x6
c001989a:	0f b6 c0             	movzx  eax,al
c001989d:	50                   	push   eax
c001989e:	6a 05                	push   0x5
c00198a0:	e8 11 f4 ff ff       	call   c0018cb6 <CPU::AMD_K6_writeback(int, int, int)>
c00198a5:	e9 1f 02 00 00       	jmp    c0019ac9 <CPU::detectFeatures()+0x959>
c00198aa:	8d 50 fd             	lea    edx,[eax-0x3]
c00198ad:	83 fa 01             	cmp    edx,0x1
c00198b0:	76 09                	jbe    c00198bb <CPU::detectFeatures()+0x74b>
c00198b2:	83 f8 06             	cmp    eax,0x6
c00198b5:	0f 85 91 01 00 00    	jne    c0019a4c <CPU::detectFeatures()+0x8dc>
c00198bb:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00198c1:	c1 ea 0e             	shr    edx,0xe
c00198c4:	80 fa 05             	cmp    dl,0x5
c00198c7:	75 7b                	jne    c0019944 <CPU::detectFeatures()+0x7d4>
c00198c9:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00198cf:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00198d4:	66 81 fa 00 01       	cmp    dx,0x100
c00198d9:	75 0c                	jne    c00198e7 <CPU::detectFeatures()+0x777>
c00198db:	51                   	push   ecx
c00198dc:	51                   	push   ecx
c00198dd:	68 5f b9 02 c0       	push   0xc002b95f
c00198e2:	e9 dc 01 00 00       	jmp    c0019ac3 <CPU::detectFeatures()+0x953>
c00198e7:	66 81 fa 00 02       	cmp    dx,0x200
c00198ec:	75 0c                	jne    c00198fa <CPU::detectFeatures()+0x78a>
c00198ee:	52                   	push   edx
c00198ef:	52                   	push   edx
c00198f0:	68 72 b9 02 c0       	push   0xc002b972
c00198f5:	e9 c9 01 00 00       	jmp    c0019ac3 <CPU::detectFeatures()+0x953>
c00198fa:	66 81 fa 40 02       	cmp    dx,0x240
c00198ff:	75 0c                	jne    c001990d <CPU::detectFeatures()+0x79d>
c0019901:	50                   	push   eax
c0019902:	50                   	push   eax
c0019903:	68 84 b9 02 c0       	push   0xc002b984
c0019908:	e9 b6 01 00 00       	jmp    c0019ac3 <CPU::detectFeatures()+0x953>
c001990d:	83 f8 06             	cmp    eax,0x6
c0019910:	75 0c                	jne    c001991e <CPU::detectFeatures()+0x7ae>
c0019912:	50                   	push   eax
c0019913:	50                   	push   eax
c0019914:	68 96 b9 02 c0       	push   0xc002b996
c0019919:	e9 a5 01 00 00       	jmp    c0019ac3 <CPU::detectFeatures()+0x953>
c001991e:	83 f8 04             	cmp    eax,0x4
c0019921:	75 0c                	jne    c001992f <CPU::detectFeatures()+0x7bf>
c0019923:	50                   	push   eax
c0019924:	50                   	push   eax
c0019925:	68 a2 b9 02 c0       	push   0xc002b9a2
c001992a:	e9 94 01 00 00       	jmp    c0019ac3 <CPU::detectFeatures()+0x953>
c001992f:	83 f8 03             	cmp    eax,0x3
c0019932:	0f 85 19 02 00 00    	jne    c0019b51 <CPU::detectFeatures()+0x9e1>
c0019938:	50                   	push   eax
c0019939:	50                   	push   eax
c001993a:	68 aa b9 02 c0       	push   0xc002b9aa
c001993f:	e9 7f 01 00 00       	jmp    c0019ac3 <CPU::detectFeatures()+0x953>
c0019944:	80 fa 06             	cmp    dl,0x6
c0019947:	0f 85 db 00 00 00    	jne    c0019a28 <CPU::detectFeatures()+0x8b8>
c001994d:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019953:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019958:	66 81 fa 80 01       	cmp    dx,0x180
c001995d:	75 0c                	jne    c001996b <CPU::detectFeatures()+0x7fb>
c001995f:	50                   	push   eax
c0019960:	50                   	push   eax
c0019961:	68 b5 b9 02 c0       	push   0xc002b9b5
c0019966:	e9 58 01 00 00       	jmp    c0019ac3 <CPU::detectFeatures()+0x953>
c001996b:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019971:	66 f7 c1 80 ff       	test   cx,0xff80
c0019976:	75 0c                	jne    c0019984 <CPU::detectFeatures()+0x814>
c0019978:	50                   	push   eax
c0019979:	50                   	push   eax
c001997a:	68 c5 b9 02 c0       	push   0xc002b9c5
c001997f:	e9 3f 01 00 00       	jmp    c0019ac3 <CPU::detectFeatures()+0x953>
c0019984:	66 81 fa 40 02       	cmp    dx,0x240
c0019989:	75 0c                	jne    c0019997 <CPU::detectFeatures()+0x827>
c001998b:	55                   	push   ebp
c001998c:	55                   	push   ebp
c001998d:	68 cc b9 02 c0       	push   0xc002b9cc
c0019992:	e9 2c 01 00 00       	jmp    c0019ac3 <CPU::detectFeatures()+0x953>
c0019997:	66 81 fa 80 02       	cmp    dx,0x280
c001999c:	75 0c                	jne    c00199aa <CPU::detectFeatures()+0x83a>
c001999e:	57                   	push   edi
c001999f:	57                   	push   edi
c00199a0:	68 d5 b9 02 c0       	push   0xc002b9d5
c00199a5:	e9 19 01 00 00       	jmp    c0019ac3 <CPU::detectFeatures()+0x953>
c00199aa:	66 81 fa 40 03       	cmp    dx,0x340
c00199af:	74 ed                	je     c001999e <CPU::detectFeatures()+0x82e>
c00199b1:	66 81 fa c0 03       	cmp    dx,0x3c0
c00199b6:	75 0c                	jne    c00199c4 <CPU::detectFeatures()+0x854>
c00199b8:	56                   	push   esi
c00199b9:	56                   	push   esi
c00199ba:	68 dc b9 02 c0       	push   0xc002b9dc
c00199bf:	e9 ff 00 00 00       	jmp    c0019ac3 <CPU::detectFeatures()+0x953>
c00199c4:	83 f8 06             	cmp    eax,0x6
c00199c7:	0f 84 45 ff ff ff    	je     c0019912 <CPU::detectFeatures()+0x7a2>
c00199cd:	83 f8 04             	cmp    eax,0x4
c00199d0:	0f 84 4d ff ff ff    	je     c0019923 <CPU::detectFeatures()+0x7b3>
c00199d6:	83 f8 03             	cmp    eax,0x3
c00199d9:	0f 85 72 01 00 00    	jne    c0019b51 <CPU::detectFeatures()+0x9e1>
c00199df:	51                   	push   ecx
c00199e0:	51                   	push   ecx
c00199e1:	68 e5 b9 02 c0       	push   0xc002b9e5
c00199e6:	53                   	push   ebx
c00199e7:	e8 06 ac ff ff       	call   c00145f2 <Device::setName(char const*)>
c00199ec:	b1 c1                	mov    cl,0xc1
c00199ee:	88 c8                	mov    al,cl
c00199f0:	e6 22                	out    0x22,al
c00199f2:	e4 23                	in     al,0x23
c00199f4:	88 c2                	mov    dl,al
c00199f6:	88 c8                	mov    al,cl
c00199f8:	e6 22                	out    0x22,al
c00199fa:	88 d0                	mov    al,dl
c00199fc:	83 c8 10             	or     eax,0x10
c00199ff:	e6 23                	out    0x23,al
c0019a01:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019a08:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019a0b:	89 d0                	mov    eax,edx
c0019a0d:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019a13:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019a17:	40                   	inc    eax
c0019a18:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019a1e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019a23:	e9 a1 00 00 00       	jmp    c0019ac9 <CPU::detectFeatures()+0x959>
c0019a28:	83 f8 06             	cmp    eax,0x6
c0019a2b:	0f 84 e1 fe ff ff    	je     c0019912 <CPU::detectFeatures()+0x7a2>
c0019a31:	83 f8 04             	cmp    eax,0x4
c0019a34:	0f 84 e9 fe ff ff    	je     c0019923 <CPU::detectFeatures()+0x7b3>
c0019a3a:	83 f8 03             	cmp    eax,0x3
c0019a3d:	0f 85 0e 01 00 00    	jne    c0019b51 <CPU::detectFeatures()+0x9e1>
c0019a43:	52                   	push   edx
c0019a44:	52                   	push   edx
c0019a45:	68 f0 b9 02 c0       	push   0xc002b9f0
c0019a4a:	eb 77                	jmp    c0019ac3 <CPU::detectFeatures()+0x953>
c0019a4c:	83 f8 07             	cmp    eax,0x7
c0019a4f:	75 09                	jne    c0019a5a <CPU::detectFeatures()+0x8ea>
c0019a51:	50                   	push   eax
c0019a52:	50                   	push   eax
c0019a53:	68 fa b9 02 c0       	push   0xc002b9fa
c0019a58:	eb 69                	jmp    c0019ac3 <CPU::detectFeatures()+0x953>
c0019a5a:	83 f8 0a             	cmp    eax,0xa
c0019a5d:	75 09                	jne    c0019a68 <CPU::detectFeatures()+0x8f8>
c0019a5f:	50                   	push   eax
c0019a60:	50                   	push   eax
c0019a61:	68 05 ba 02 c0       	push   0xc002ba05
c0019a66:	eb 5b                	jmp    c0019ac3 <CPU::detectFeatures()+0x953>
c0019a68:	83 f8 0b             	cmp    eax,0xb
c0019a6b:	75 09                	jne    c0019a76 <CPU::detectFeatures()+0x906>
c0019a6d:	50                   	push   eax
c0019a6e:	50                   	push   eax
c0019a6f:	68 0d ba 02 c0       	push   0xc002ba0d
c0019a74:	eb 4d                	jmp    c0019ac3 <CPU::detectFeatures()+0x953>
c0019a76:	83 f8 08             	cmp    eax,0x8
c0019a79:	75 09                	jne    c0019a84 <CPU::detectFeatures()+0x914>
c0019a7b:	50                   	push   eax
c0019a7c:	50                   	push   eax
c0019a7d:	68 16 ba 02 c0       	push   0xc002ba16
c0019a82:	eb 3f                	jmp    c0019ac3 <CPU::detectFeatures()+0x953>
c0019a84:	83 f8 09             	cmp    eax,0x9
c0019a87:	75 09                	jne    c0019a92 <CPU::detectFeatures()+0x922>
c0019a89:	50                   	push   eax
c0019a8a:	50                   	push   eax
c0019a8b:	68 1e ba 02 c0       	push   0xc002ba1e
c0019a90:	eb 31                	jmp    c0019ac3 <CPU::detectFeatures()+0x953>
c0019a92:	83 f8 05             	cmp    eax,0x5
c0019a95:	75 09                	jne    c0019aa0 <CPU::detectFeatures()+0x930>
c0019a97:	50                   	push   eax
c0019a98:	50                   	push   eax
c0019a99:	68 26 ba 02 c0       	push   0xc002ba26
c0019a9e:	eb 23                	jmp    c0019ac3 <CPU::detectFeatures()+0x953>
c0019aa0:	83 f8 0c             	cmp    eax,0xc
c0019aa3:	75 09                	jne    c0019aae <CPU::detectFeatures()+0x93e>
c0019aa5:	55                   	push   ebp
c0019aa6:	55                   	push   ebp
c0019aa7:	68 34 ba 02 c0       	push   0xc002ba34
c0019aac:	eb 15                	jmp    c0019ac3 <CPU::detectFeatures()+0x953>
c0019aae:	83 f8 0d             	cmp    eax,0xd
c0019ab1:	75 09                	jne    c0019abc <CPU::detectFeatures()+0x94c>
c0019ab3:	57                   	push   edi
c0019ab4:	57                   	push   edi
c0019ab5:	68 3f ba 02 c0       	push   0xc002ba3f
c0019aba:	eb 07                	jmp    c0019ac3 <CPU::detectFeatures()+0x953>
c0019abc:	56                   	push   esi
c0019abd:	56                   	push   esi
c0019abe:	68 53 ba 02 c0       	push   0xc002ba53
c0019ac3:	53                   	push   ebx
c0019ac4:	e8 29 ab ff ff       	call   c00145f2 <Device::setName(char const*)>
c0019ac9:	83 c4 10             	add    esp,0x10
c0019acc:	e9 80 00 00 00       	jmp    c0019b51 <CPU::detectFeatures()+0x9e1>
c0019ad1:	51                   	push   ecx
c0019ad2:	51                   	push   ecx
c0019ad3:	68 9f b8 02 c0       	push   0xc002b89f
c0019ad8:	57                   	push   edi
c0019ad9:	e8 56 6d fe ff       	call   c0000834 <strcpy>
c0019ade:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019ae8:	e8 c1 67 fe ff       	call   c00002ae <is486>
c0019aed:	83 c4 10             	add    esp,0x10
c0019af0:	85 c0                	test   eax,eax
c0019af2:	74 2b                	je     c0019b1f <CPU::detectFeatures()+0x9af>
c0019af4:	52                   	push   edx
c0019af5:	52                   	push   edx
c0019af6:	68 5f ba 02 c0       	push   0xc002ba5f
c0019afb:	53                   	push   ebx
c0019afc:	e8 f1 aa ff ff       	call   c00145f2 <Device::setName(char const*)>
c0019b01:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019b08:	0f 20 c0             	mov    eax,cr0
c0019b0b:	83 e0 14             	and    eax,0x14
c0019b0e:	83 c4 10             	add    esp,0x10
c0019b11:	83 f8 04             	cmp    eax,0x4
c0019b14:	75 1f                	jne    c0019b35 <CPU::detectFeatures()+0x9c5>
c0019b16:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019b1d:	eb 32                	jmp    c0019b51 <CPU::detectFeatures()+0x9e1>
c0019b1f:	50                   	push   eax
c0019b20:	50                   	push   eax
c0019b21:	68 6a ba 02 c0       	push   0xc002ba6a
c0019b26:	53                   	push   ebx
c0019b27:	e8 c6 aa ff ff       	call   c00145f2 <Device::setName(char const*)>
c0019b2c:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019b33:	eb d3                	jmp    c0019b08 <CPU::detectFeatures()+0x998>
c0019b35:	e8 4f 67 fe ff       	call   c0000289 <hasLegacyFPU>
c0019b3a:	83 e0 01             	and    eax,0x1
c0019b3d:	8d 14 00             	lea    edx,[eax+eax*1]
c0019b40:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019b46:	83 e0 fd             	and    eax,0xfffffffd
c0019b49:	09 d0                	or     eax,edx
c0019b4b:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019b51:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019b58:	83 c4 4c             	add    esp,0x4c
c0019b5b:	5b                   	pop    ebx
c0019b5c:	5e                   	pop    esi
c0019b5d:	5f                   	pop    edi
c0019b5e:	5d                   	pop    ebp
c0019b5f:	c3                   	ret    

c0019b60 <CPU::setupSMEP()>:
c0019b60:	0f 20 e0             	mov    eax,cr4
c0019b63:	0d 00 00 10 00       	or     eax,0x100000
c0019b68:	0f 22 e0             	mov    cr4,eax
c0019b6b:	c3                   	ret    

c0019b6c <CPU::setupUMIP()>:
c0019b6c:	0f 20 e0             	mov    eax,cr4
c0019b6f:	80 cc 08             	or     ah,0x8
c0019b72:	0f 22 e0             	mov    cr4,eax
c0019b75:	c3                   	ret    

c0019b76 <CPU::setupTSC()>:
c0019b76:	0f 20 e0             	mov    eax,cr4
c0019b79:	83 c8 04             	or     eax,0x4
c0019b7c:	0f 22 e0             	mov    cr4,eax
c0019b7f:	c3                   	ret    

c0019b80 <CPU::setupLargePages()>:
c0019b80:	0f 20 e0             	mov    eax,cr4
c0019b83:	83 c8 10             	or     eax,0x10
c0019b86:	0f 22 e0             	mov    cr4,eax
c0019b89:	c3                   	ret    

c0019b8a <CPU::setupPAT()>:
c0019b8a:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0019b8f:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019b96:	74 2c                	je     c0019bc4 <CPU::setupPAT()+0x3a>
c0019b98:	53                   	push   ebx
c0019b99:	83 ec 10             	sub    esp,0x10
c0019b9c:	68 77 02 00 00       	push   0x277
c0019ba1:	50                   	push   eax
c0019ba2:	e8 41 52 ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019ba7:	83 e2 f8             	and    edx,0xfffffff8
c0019baa:	83 ca 01             	or     edx,0x1
c0019bad:	52                   	push   edx
c0019bae:	50                   	push   eax
c0019baf:	68 77 02 00 00       	push   0x277
c0019bb4:	ff 35 c8 e4 02 c0    	push   DWORD PTR ds:0xc002e4c8
c0019bba:	e8 55 52 ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c0019bbf:	83 c4 28             	add    esp,0x28
c0019bc2:	5b                   	pop    ebx
c0019bc3:	c3                   	ret    
c0019bc4:	c3                   	ret    
c0019bc5:	90                   	nop

c0019bc6 <CPU::setupMTRR()>:
c0019bc6:	c3                   	ret    
c0019bc7:	90                   	nop

c0019bc8 <CPU::setupGlobalPages()>:
c0019bc8:	0f 20 e0             	mov    eax,cr4
c0019bcb:	0c 80                	or     al,0x80
c0019bcd:	0f 22 e0             	mov    cr4,eax
c0019bd0:	c3                   	ret    
c0019bd1:	90                   	nop

c0019bd2 <CPU::allowUsermodeDataAccess()>:
c0019bd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bd6:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019bdd:	74 03                	je     c0019be2 <CPU::allowUsermodeDataAccess()+0x10>
c0019bdf:	0f 01 cb             	stac   
c0019be2:	c3                   	ret    
c0019be3:	90                   	nop

c0019be4 <CPU::prohibitUsermodeDataAccess()>:
c0019be4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019be8:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019bef:	74 03                	je     c0019bf4 <CPU::prohibitUsermodeDataAccess()+0x10>
c0019bf1:	0f 01 ca             	clac   
c0019bf4:	c3                   	ret    
c0019bf5:	90                   	nop

c0019bf6 <CPU::setupSMAP()>:
c0019bf6:	0f 20 e0             	mov    eax,cr4
c0019bf9:	0d 00 00 20 00       	or     eax,0x200000
c0019bfe:	0f 22 e0             	mov    cr4,eax
c0019c01:	eb e1                	jmp    c0019be4 <CPU::prohibitUsermodeDataAccess()>
c0019c03:	90                   	nop

c0019c04 <CPU::setupFeatures()>:
c0019c04:	83 ec 0c             	sub    esp,0xc
c0019c07:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019c0b:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019c12:	74 07                	je     c0019c1b <CPU::setupFeatures()+0x17>
c0019c14:	52                   	push   edx
c0019c15:	e8 46 ff ff ff       	call   c0019b60 <CPU::setupSMEP()>
c0019c1a:	58                   	pop    eax
c0019c1b:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019c22:	74 07                	je     c0019c2b <CPU::setupFeatures()+0x27>
c0019c24:	52                   	push   edx
c0019c25:	e8 cc ff ff ff       	call   c0019bf6 <CPU::setupSMAP()>
c0019c2a:	58                   	pop    eax
c0019c2b:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019c32:	74 07                	je     c0019c3b <CPU::setupFeatures()+0x37>
c0019c34:	52                   	push   edx
c0019c35:	e8 32 ff ff ff       	call   c0019b6c <CPU::setupUMIP()>
c0019c3a:	58                   	pop    eax
c0019c3b:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019c42:	74 07                	je     c0019c4b <CPU::setupFeatures()+0x47>
c0019c44:	52                   	push   edx
c0019c45:	e8 2c ff ff ff       	call   c0019b76 <CPU::setupTSC()>
c0019c4a:	58                   	pop    eax
c0019c4b:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019c52:	74 07                	je     c0019c5b <CPU::setupFeatures()+0x57>
c0019c54:	52                   	push   edx
c0019c55:	e8 26 ff ff ff       	call   c0019b80 <CPU::setupLargePages()>
c0019c5a:	59                   	pop    ecx
c0019c5b:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019c62:	74 07                	je     c0019c6b <CPU::setupFeatures()+0x67>
c0019c64:	52                   	push   edx
c0019c65:	e8 5e ff ff ff       	call   c0019bc8 <CPU::setupGlobalPages()>
c0019c6a:	58                   	pop    eax
c0019c6b:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019c72:	74 0c                	je     c0019c80 <CPU::setupFeatures()+0x7c>
c0019c74:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019c78:	83 c4 0c             	add    esp,0xc
c0019c7b:	e9 0a ff ff ff       	jmp    c0019b8a <CPU::setupPAT()>
c0019c80:	83 c4 0c             	add    esp,0xc
c0019c83:	c3                   	ret    

c0019c84 <CPU::open(int, int, void*)>:
c0019c84:	57                   	push   edi
c0019c85:	56                   	push   esi
c0019c86:	53                   	push   ebx
c0019c87:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019c8b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019c8f:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019c95:	83 ec 0c             	sub    esp,0xc
c0019c98:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019c9e:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019ca4:	50                   	push   eax
c0019ca5:	e8 2a 54 ff ff       	call   c000f0d4 <GDT::setup()>
c0019caa:	83 c4 0c             	add    esp,0xc
c0019cad:	6a 00                	push   0x0
c0019caf:	68 ef be ad de       	push   0xdeadbeef
c0019cb4:	57                   	push   edi
c0019cb5:	e8 32 78 ff ff       	call   c00114ec <TSS::setup(unsigned long, unsigned long)>
c0019cba:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019cbd:	e8 0a 78 ff ff       	call   c00114cc <TSS::flush()>
c0019cc2:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019cc8:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ccb:	e8 60 56 ff ff       	call   c000f330 <IDT::setup()>
c0019cd0:	b8 00 04 00 00       	mov    eax,0x400
c0019cd5:	0f 23 f8             	mov    db7,eax
c0019cd8:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019ce2:	e8 f9 61 ff ff       	call   c000fee0 <Phys::allocatePage()>
c0019ce7:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019ced:	89 30                	mov    DWORD PTR [eax],esi
c0019cef:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019cf5:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019cf8:	58                   	pop    eax
c0019cf9:	5a                   	pop    edx
c0019cfa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019d00:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019d04:	e8 49 8a ff ff       	call   c0012752 <VAS::setCPUSpecific(unsigned long)>
c0019d09:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d0c:	e8 5f f4 ff ff       	call   c0019170 <CPU::detectFeatures()>
c0019d11:	e8 ca bc ff ff       	call   c00159e0 <setupInterruptController()>
c0019d16:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019d1c:	a1 e0 e4 02 c0       	mov    eax,ds:0xc002e4e0
c0019d21:	83 e0 10             	and    eax,0x10
c0019d24:	83 f8 01             	cmp    eax,0x1
c0019d27:	19 c0                	sbb    eax,eax
c0019d29:	83 e0 46             	and    eax,0x46
c0019d2c:	83 c0 1e             	add    eax,0x1e
c0019d2f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d32:	e8 b7 d1 ff ff       	call   c0016eee <setupTimer(int)>
c0019d37:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019d3d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d40:	e8 bf fe ff ff       	call   c0019c04 <CPU::setupFeatures()>
c0019d45:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d48:	e8 a7 f1 ff ff       	call   c0018ef4 <CPU::displayFeatures()>
c0019d4d:	83 c4 10             	add    esp,0x10
c0019d50:	31 c0                	xor    eax,eax
c0019d52:	5b                   	pop    ebx
c0019d53:	5e                   	pop    esi
c0019d54:	5f                   	pop    edi
c0019d55:	c3                   	ret    

c0019d56 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019d56:	57                   	push   edi
c0019d57:	56                   	push   esi
c0019d58:	53                   	push   ebx
c0019d59:	51                   	push   ecx
c0019d5a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019d5e:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019d61:	0f 02 c0             	lar    eax,ax
c0019d64:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019d67:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019d6b:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019d6e:	88 ca                	mov    dl,cl
c0019d70:	c0 ea 06             	shr    dl,0x6
c0019d73:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019d77:	89 ca                	mov    edx,ecx
c0019d79:	66 c1 ea 03          	shr    dx,0x3
c0019d7d:	83 e2 07             	and    edx,0x7
c0019d80:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019d85:	88 17                	mov    BYTE PTR [edi],dl
c0019d87:	0f 84 a6 01 00 00    	je     c0019f33 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019d8d:	83 e1 07             	and    ecx,0x7
c0019d90:	80 f9 04             	cmp    cl,0x4
c0019d93:	0f 84 98 00 00 00    	je     c0019e31 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019d99:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019d9e:	0f 95 c0             	setne  al
c0019da1:	80 f9 05             	cmp    cl,0x5
c0019da4:	0f 95 c2             	setne  dl
c0019da7:	08 c2                	or     dl,al
c0019da9:	74 79                	je     c0019e24 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019dab:	84 c9                	test   cl,cl
c0019dad:	75 05                	jne    c0019db4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019daf:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019db2:	eb 3c                	jmp    c0019df0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019db4:	80 f9 01             	cmp    cl,0x1
c0019db7:	75 05                	jne    c0019dbe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019db9:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019dbc:	eb 32                	jmp    c0019df0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019dbe:	80 f9 02             	cmp    cl,0x2
c0019dc1:	75 05                	jne    c0019dc8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019dc3:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019dc6:	eb 28                	jmp    c0019df0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019dc8:	31 c0                	xor    eax,eax
c0019dca:	80 f9 03             	cmp    cl,0x3
c0019dcd:	75 05                	jne    c0019dd4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019dcf:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019dd2:	eb 1c                	jmp    c0019df0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019dd4:	80 f9 05             	cmp    cl,0x5
c0019dd7:	75 05                	jne    c0019dde <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019dd9:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019ddc:	eb 12                	jmp    c0019df0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019dde:	80 f9 06             	cmp    cl,0x6
c0019de1:	75 05                	jne    c0019de8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019de3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019de6:	eb 08                	jmp    c0019df0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019de8:	80 f9 07             	cmp    cl,0x7
c0019deb:	75 03                	jne    c0019df0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019ded:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019df0:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019df5:	75 10                	jne    c0019e07 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019df7:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019dfb:	b9 03 00 00 00       	mov    ecx,0x3
c0019e00:	01 d0                	add    eax,edx
c0019e02:	e9 37 01 00 00       	jmp    c0019f3e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019e07:	b9 02 00 00 00       	mov    ecx,0x2
c0019e0c:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019e11:	0f 85 27 01 00 00    	jne    c0019f3e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019e17:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019e1a:	b9 06 00 00 00       	mov    ecx,0x6
c0019e1f:	e9 1a 01 00 00       	jmp    c0019f3e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019e24:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019e27:	b9 06 00 00 00       	mov    ecx,0x6
c0019e2c:	e9 0f 01 00 00       	jmp    c0019f40 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e31:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019e34:	88 ca                	mov    dl,cl
c0019e36:	c0 ea 06             	shr    dl,0x6
c0019e39:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019e3d:	89 ca                	mov    edx,ecx
c0019e3f:	66 c1 ea 03          	shr    dx,0x3
c0019e43:	83 e2 07             	and    edx,0x7
c0019e46:	80 e1 07             	and    cl,0x7
c0019e49:	75 05                	jne    c0019e50 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019e4b:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019e4e:	eb 4c                	jmp    c0019e9c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e50:	80 f9 01             	cmp    cl,0x1
c0019e53:	75 05                	jne    c0019e5a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019e55:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019e58:	eb 42                	jmp    c0019e9c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e5a:	80 f9 02             	cmp    cl,0x2
c0019e5d:	75 05                	jne    c0019e64 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019e5f:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019e62:	eb 38                	jmp    c0019e9c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e64:	80 f9 03             	cmp    cl,0x3
c0019e67:	75 05                	jne    c0019e6e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019e69:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019e6c:	eb 2e                	jmp    c0019e9c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e6e:	80 f9 04             	cmp    cl,0x4
c0019e71:	75 12                	jne    c0019e85 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019e73:	f6 c4 60             	test   ah,0x60
c0019e76:	75 08                	jne    c0019e80 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019e78:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019e7b:	8d 78 14             	lea    edi,[eax+0x14]
c0019e7e:	eb 1c                	jmp    c0019e9c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e80:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019e83:	eb 17                	jmp    c0019e9c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e85:	80 f9 05             	cmp    cl,0x5
c0019e88:	75 05                	jne    c0019e8f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019e8a:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019e8d:	eb 0d                	jmp    c0019e9c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e8f:	80 f9 06             	cmp    cl,0x6
c0019e92:	75 05                	jne    c0019e99 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019e94:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019e97:	eb 03                	jmp    c0019e9c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e99:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019e9c:	84 d2                	test   dl,dl
c0019e9e:	75 05                	jne    c0019ea5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019ea0:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019ea3:	eb 3c                	jmp    c0019ee1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ea5:	80 fa 01             	cmp    dl,0x1
c0019ea8:	75 05                	jne    c0019eaf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019eaa:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019ead:	eb 32                	jmp    c0019ee1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019eaf:	80 fa 02             	cmp    dl,0x2
c0019eb2:	75 05                	jne    c0019eb9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019eb4:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019eb7:	eb 28                	jmp    c0019ee1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019eb9:	80 fa 03             	cmp    dl,0x3
c0019ebc:	75 05                	jne    c0019ec3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019ebe:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019ec1:	eb 1e                	jmp    c0019ee1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ec3:	31 c0                	xor    eax,eax
c0019ec5:	80 fa 04             	cmp    dl,0x4
c0019ec8:	74 17                	je     c0019ee1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019eca:	80 fa 05             	cmp    dl,0x5
c0019ecd:	75 05                	jne    c0019ed4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019ecf:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019ed2:	eb 0d                	jmp    c0019ee1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ed4:	80 fa 06             	cmp    dl,0x6
c0019ed7:	75 05                	jne    c0019ede <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019ed9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019edc:	eb 03                	jmp    c0019ee1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ede:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019ee1:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019ee6:	0f 94 c2             	sete   dl
c0019ee9:	80 f9 05             	cmp    cl,0x5
c0019eec:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019ef0:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019ef5:	d3 e0                	shl    eax,cl
c0019ef7:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019efb:	74 0a                	je     c0019f07 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019efd:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019f00:	b9 07 00 00 00       	mov    ecx,0x7
c0019f05:	eb 37                	jmp    c0019f3e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019f07:	01 f8                	add    eax,edi
c0019f09:	b9 03 00 00 00       	mov    ecx,0x3
c0019f0e:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019f13:	74 2b                	je     c0019f40 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019f15:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019f1a:	75 0d                	jne    c0019f29 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019f1c:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019f20:	01 c8                	add    eax,ecx
c0019f22:	b9 04 00 00 00       	mov    ecx,0x4
c0019f27:	eb 17                	jmp    c0019f40 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019f29:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019f2c:	b9 07 00 00 00       	mov    ecx,0x7
c0019f31:	eb 0d                	jmp    c0019f40 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019f33:	b9 02 00 00 00       	mov    ecx,0x2
c0019f38:	b2 01                	mov    dl,0x1
c0019f3a:	31 c0                	xor    eax,eax
c0019f3c:	eb 02                	jmp    c0019f40 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019f3e:	31 d2                	xor    edx,edx
c0019f40:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019f44:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019f46:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019f4a:	88 11                	mov    BYTE PTR [ecx],dl
c0019f4c:	5a                   	pop    edx
c0019f4d:	5b                   	pop    ebx
c0019f4e:	5e                   	pop    esi
c0019f4f:	5f                   	pop    edi
c0019f50:	c3                   	ret    

c0019f51 <Krnl::smpEntry()>:
c0019f51:	eb fe                	jmp    c0019f51 <Krnl::smpEntry()>

c0019f53 <Krnl::startCPU(int)>:
c0019f53:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0019f58:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019f5f:	0f 84 36 01 00 00    	je     c001a09b <Krnl::startCPU(int)+0x148>
c0019f65:	53                   	push   ebx
c0019f66:	83 ec 08             	sub    esp,0x8
c0019f69:	e8 16 3f 00 00       	call   c001de84 <lockScheduler()>
c0019f6e:	52                   	push   edx
c0019f6f:	52                   	push   edx
c0019f70:	6a 1b                	push   0x1b
c0019f72:	ff 35 c8 e4 02 c0    	push   DWORD PTR ds:0xc002e4c8
c0019f78:	e8 6b 4e ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019f7d:	59                   	pop    ecx
c0019f7e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019f83:	89 c3                	mov    ebx,eax
c0019f85:	58                   	pop    eax
c0019f86:	53                   	push   ebx
c0019f87:	68 a4 ba 02 c0       	push   0xc002baa4
c0019f8c:	e8 59 90 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0019f91:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019f9f:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019fa9:	c1 e0 18             	shl    eax,0x18
c0019fac:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019fb2:	83 c4 10             	add    esp,0x10
c0019fb5:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019fbb:	09 c2                	or     edx,eax
c0019fbd:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019fc3:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019fc9:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019fcf:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019fd5:	80 cd c5             	or     ch,0xc5
c0019fd8:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019fde:	f3 90                	pause  
c0019fe0:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019fe2:	0f ba e1 0c          	bt     ecx,0xc
c0019fe6:	72 f6                	jb     c0019fde <Krnl::startCPU(int)+0x8b>
c0019fe8:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019fee:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019ff4:	09 c1                	or     ecx,eax
c0019ff6:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019ffc:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a002:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001a008:	80 cd 85             	or     ch,0x85
c001a00b:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a011:	f3 90                	pause  
c001a013:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a015:	0f ba e1 0c          	bt     ecx,0xc
c001a019:	72 f6                	jb     c001a011 <Krnl::startCPU(int)+0xbe>
c001a01b:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a025:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a02b:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a031:	09 c1                	or     ecx,eax
c001a033:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a039:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a03f:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c001a045:	81 c9 02 06 00 00    	or     ecx,0x602
c001a04b:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a051:	f3 90                	pause  
c001a053:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a055:	0f ba e1 0c          	bt     ecx,0xc
c001a059:	72 f6                	jb     c001a051 <Krnl::startCPU(int)+0xfe>
c001a05b:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a065:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a06b:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a071:	09 c8                	or     eax,ecx
c001a073:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c001a079:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c001a07f:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c001a084:	0d 02 06 00 00       	or     eax,0x602
c001a089:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c001a08f:	f3 90                	pause  
c001a091:	8b 02                	mov    eax,DWORD PTR [edx]
c001a093:	0f ba e0 0c          	bt     eax,0xc
c001a097:	72 f6                	jb     c001a08f <Krnl::startCPU(int)+0x13c>
c001a099:	eb fe                	jmp    c001a099 <Krnl::startCPU(int)+0x146>
c001a09b:	c3                   	ret    

c001a09c <Krnl::startCPUs()>:
c001a09c:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c001a0a1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001a0a7:	88 c2                	mov    dl,al
c001a0a9:	83 e2 0a             	and    edx,0xa
c001a0ac:	80 fa 0a             	cmp    dl,0xa
c001a0af:	75 09                	jne    c001a0ba <Krnl::startCPUs()+0x1e>
c001a0b1:	a8 01                	test   al,0x1
c001a0b3:	74 05                	je     c001a0ba <Krnl::startCPUs()+0x1e>
c001a0b5:	e9 e1 60 fe ff       	jmp    c000019b <prepareTramp>
c001a0ba:	c3                   	ret    
c001a0bb:	90                   	nop

c001a0bc <EnvVarContainer::getEnv(char const*)>:
c001a0bc:	57                   	push   edi
c001a0bd:	56                   	push   esi
c001a0be:	53                   	push   ebx
c001a0bf:	31 db                	xor    ebx,ebx
c001a0c1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a0c5:	39 1e                	cmp    DWORD PTR [esi],ebx
c001a0c7:	7e 2b                	jle    c001a0f4 <EnvVarContainer::getEnv(char const*)+0x38>
c001a0c9:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001a0d0:	50                   	push   eax
c001a0d1:	50                   	push   eax
c001a0d2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a0d5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001a0d8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a0dc:	e8 df 67 fe ff       	call   c00008c0 <strcmp>
c001a0e1:	83 c4 10             	add    esp,0x10
c001a0e4:	85 c0                	test   eax,eax
c001a0e6:	75 09                	jne    c001a0f1 <EnvVarContainer::getEnv(char const*)+0x35>
c001a0e8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a0eb:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001a0ef:	eb 05                	jmp    c001a0f6 <EnvVarContainer::getEnv(char const*)+0x3a>
c001a0f1:	43                   	inc    ebx
c001a0f2:	eb d1                	jmp    c001a0c5 <EnvVarContainer::getEnv(char const*)+0x9>
c001a0f4:	31 c0                	xor    eax,eax
c001a0f6:	5b                   	pop    ebx
c001a0f7:	5e                   	pop    esi
c001a0f8:	5f                   	pop    edi
c001a0f9:	c3                   	ret    

c001a0fa <EnvVarContainer::setEnv(char const*, char const*)>:
c001a0fa:	57                   	push   edi
c001a0fb:	56                   	push   esi
c001a0fc:	53                   	push   ebx
c001a0fd:	83 ec 1c             	sub    esp,0x1c
c001a100:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a104:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a108:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a10c:	57                   	push   edi
c001a10d:	e8 82 66 fe ff       	call   c0000794 <strlen>
c001a112:	40                   	inc    eax
c001a113:	89 04 24             	mov    DWORD PTR [esp],eax
c001a116:	e8 28 57 ff ff       	call   c000f843 <malloc>
c001a11b:	89 34 24             	mov    DWORD PTR [esp],esi
c001a11e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a122:	e8 6d 66 fe ff       	call   c0000794 <strlen>
c001a127:	40                   	inc    eax
c001a128:	89 04 24             	mov    DWORD PTR [esp],eax
c001a12b:	e8 13 57 ff ff       	call   c000f843 <malloc>
c001a130:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a133:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a137:	e8 58 66 fe ff       	call   c0000794 <strlen>
c001a13c:	83 c4 0c             	add    esp,0xc
c001a13f:	40                   	inc    eax
c001a140:	50                   	push   eax
c001a141:	6a 00                	push   0x0
c001a143:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a147:	e8 2c 66 fe ff       	call   c0000778 <memset>
c001a14c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a14f:	e8 40 66 fe ff       	call   c0000794 <strlen>
c001a154:	83 c4 0c             	add    esp,0xc
c001a157:	40                   	inc    eax
c001a158:	50                   	push   eax
c001a159:	57                   	push   edi
c001a15a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a15e:	e8 e1 65 fe ff       	call   c0000744 <memcpy>
c001a163:	89 34 24             	mov    DWORD PTR [esp],esi
c001a166:	e8 29 66 fe ff       	call   c0000794 <strlen>
c001a16b:	83 c4 0c             	add    esp,0xc
c001a16e:	40                   	inc    eax
c001a16f:	50                   	push   eax
c001a170:	6a 00                	push   0x0
c001a172:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a176:	e8 fd 65 fe ff       	call   c0000778 <memset>
c001a17b:	89 34 24             	mov    DWORD PTR [esp],esi
c001a17e:	e8 11 66 fe ff       	call   c0000794 <strlen>
c001a183:	83 c4 0c             	add    esp,0xc
c001a186:	40                   	inc    eax
c001a187:	50                   	push   eax
c001a188:	56                   	push   esi
c001a189:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a18d:	e8 b2 65 fe ff       	call   c0000744 <memcpy>
c001a192:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a194:	40                   	inc    eax
c001a195:	89 03                	mov    DWORD PTR [ebx],eax
c001a197:	c1 e0 03             	shl    eax,0x3
c001a19a:	5a                   	pop    edx
c001a19b:	59                   	pop    ecx
c001a19c:	50                   	push   eax
c001a19d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001a1a0:	e8 8a 56 ff ff       	call   c000f82f <realloc>
c001a1a5:	83 c4 0c             	add    esp,0xc
c001a1a8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a1ab:	6a 08                	push   0x8
c001a1ad:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a1b1:	52                   	push   edx
c001a1b2:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a1b4:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a1b8:	50                   	push   eax
c001a1b9:	e8 86 65 fe ff       	call   c0000744 <memcpy>
c001a1be:	83 c4 20             	add    esp,0x20
c001a1c1:	5b                   	pop    ebx
c001a1c2:	5e                   	pop    esi
c001a1c3:	5f                   	pop    edi
c001a1c4:	c3                   	ret    
c001a1c5:	90                   	nop

c001a1c6 <EnvVarContainer::deleteEnv(char const*)>:
c001a1c6:	c3                   	ret    
c001a1c7:	90                   	nop

c001a1c8 <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a1c8:	55                   	push   ebp
c001a1c9:	57                   	push   edi
c001a1ca:	56                   	push   esi
c001a1cb:	53                   	push   ebx
c001a1cc:	81 ec 38 01 00 00    	sub    esp,0x138
c001a1d2:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c001a1d9:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c001a1e0:	68 14 01 00 00       	push   0x114
c001a1e5:	e8 59 56 ff ff       	call   c000f843 <malloc>
c001a1ea:	83 c4 0c             	add    esp,0xc
c001a1ed:	89 c7                	mov    edi,eax
c001a1ef:	ff 76 08             	push   DWORD PTR [esi+0x8]
c001a1f2:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a1f9:	50                   	push   eax
c001a1fa:	e8 43 93 ff ff       	call   c0013542 <File::File(char const*, Process*)>
c001a1ff:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a202:	e8 0d 96 ff ff       	call   c0013814 <File::exists()>
c001a207:	83 c4 10             	add    esp,0x10
c001a20a:	84 c0                	test   al,al
c001a20c:	75 31                	jne    c001a23f <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001a20e:	51                   	push   ecx
c001a20f:	51                   	push   ecx
c001a210:	6a 12                	push   0x12
c001a212:	57                   	push   edi
c001a213:	e8 8e 93 ff ff       	call   c00135a6 <File::open(FileOpenMode)>
c001a218:	8b 07                	mov    eax,DWORD PTR [edi]
c001a21a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001a21d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a220:	e8 6f 65 fe ff       	call   c0000794 <strlen>
c001a225:	5a                   	pop    edx
c001a226:	31 d2                	xor    edx,edx
c001a228:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a22c:	51                   	push   ecx
c001a22d:	55                   	push   ebp
c001a22e:	52                   	push   edx
c001a22f:	50                   	push   eax
c001a230:	57                   	push   edi
c001a231:	ff d3                	call   ebx
c001a233:	83 c4 14             	add    esp,0x14
c001a236:	57                   	push   edi
c001a237:	e8 c8 93 ff ff       	call   c0013604 <File::close()>
c001a23c:	83 c4 10             	add    esp,0x10
c001a23f:	31 db                	xor    ebx,ebx
c001a241:	50                   	push   eax
c001a242:	31 ed                	xor    ebp,ebp
c001a244:	68 00 01 00 00       	push   0x100
c001a249:	6a 00                	push   0x0
c001a24b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a24f:	50                   	push   eax
c001a250:	e8 23 65 fe ff       	call   c0000778 <memset>
c001a255:	58                   	pop    eax
c001a256:	5a                   	pop    edx
c001a257:	6a 01                	push   0x1
c001a259:	57                   	push   edi
c001a25a:	e8 47 93 ff ff       	call   c00135a6 <File::open(FileOpenMode)>
c001a25f:	83 c4 10             	add    esp,0x10
c001a262:	83 ec 0c             	sub    esp,0xc
c001a265:	8b 07                	mov    eax,DWORD PTR [edi]
c001a267:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a26b:	51                   	push   ecx
c001a26c:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a270:	52                   	push   edx
c001a271:	6a 00                	push   0x0
c001a273:	6a 01                	push   0x1
c001a275:	57                   	push   edi
c001a276:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a279:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a27d:	83 c4 20             	add    esp,0x20
c001a280:	3c 0d                	cmp    al,0xd
c001a282:	0f 84 12 01 00 00    	je     c001a39a <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a288:	85 db                	test   ebx,ebx
c001a28a:	0f 84 fd 00 00 00    	je     c001a38d <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a290:	3c 0a                	cmp    al,0xa
c001a292:	74 13                	je     c001a2a7 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a294:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a299:	74 0c                	je     c001a2a7 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a29b:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c001a2a1:	0f 8e e6 00 00 00    	jle    c001a38d <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a2a7:	83 ec 0c             	sub    esp,0xc
c001a2aa:	8d 53 01             	lea    edx,[ebx+0x1]
c001a2ad:	29 dd                	sub    ebp,ebx
c001a2af:	52                   	push   edx
c001a2b0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a2b4:	e8 8a 55 ff ff       	call   c000f843 <malloc>
c001a2b9:	8d 4d 04             	lea    ecx,[ebp+0x4]
c001a2bc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a2c0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001a2c3:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001a2c7:	e8 77 55 ff ff       	call   c000f843 <malloc>
c001a2cc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a2d0:	83 c4 0c             	add    esp,0xc
c001a2d3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a2d7:	52                   	push   edx
c001a2d8:	6a 00                	push   0x0
c001a2da:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a2de:	e8 95 64 fe ff       	call   c0000778 <memset>
c001a2e3:	83 c4 0c             	add    esp,0xc
c001a2e6:	53                   	push   ebx
c001a2e7:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a2eb:	55                   	push   ebp
c001a2ec:	01 eb                	add    ebx,ebp
c001a2ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a2f2:	e8 4d 64 fe ff       	call   c0000744 <memcpy>
c001a2f7:	83 c4 0c             	add    esp,0xc
c001a2fa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a2fe:	51                   	push   ecx
c001a2ff:	6a 00                	push   0x0
c001a301:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a305:	e8 6e 64 fe ff       	call   c0000778 <memset>
c001a30a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a30d:	e8 82 64 fe ff       	call   c0000794 <strlen>
c001a312:	83 c4 0c             	add    esp,0xc
c001a315:	50                   	push   eax
c001a316:	53                   	push   ebx
c001a317:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a31b:	e8 24 64 fe ff       	call   c0000744 <memcpy>
c001a320:	5b                   	pop    ebx
c001a321:	58                   	pop    eax
c001a322:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a326:	68 b5 ba 02 c0       	push   0xc002bab5
c001a32b:	e8 ba 8c ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001a330:	8b 06                	mov    eax,DWORD PTR [esi]
c001a332:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001a335:	40                   	inc    eax
c001a336:	83 c4 10             	add    esp,0x10
c001a339:	89 06                	mov    DWORD PTR [esi],eax
c001a33b:	85 d2                	test   edx,edx
c001a33d:	75 0c                	jne    c001a34b <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001a33f:	83 ec 0c             	sub    esp,0xc
c001a342:	6a 08                	push   0x8
c001a344:	e8 fa 54 ff ff       	call   c000f843 <malloc>
c001a349:	eb 0c                	jmp    c001a357 <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001a34b:	c1 e0 03             	shl    eax,0x3
c001a34e:	51                   	push   ecx
c001a34f:	51                   	push   ecx
c001a350:	50                   	push   eax
c001a351:	52                   	push   edx
c001a352:	e8 d8 54 ff ff       	call   c000f82f <realloc>
c001a357:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001a35a:	83 c4 10             	add    esp,0x10
c001a35d:	31 db                	xor    ebx,ebx
c001a35f:	52                   	push   edx
c001a360:	6a 08                	push   0x8
c001a362:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a366:	50                   	push   eax
c001a367:	8b 16                	mov    edx,DWORD PTR [esi]
c001a369:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a36c:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a370:	50                   	push   eax
c001a371:	e8 ce 63 fe ff       	call   c0000744 <memcpy>
c001a376:	83 c4 0c             	add    esp,0xc
c001a379:	68 00 01 00 00       	push   0x100
c001a37e:	6a 00                	push   0x0
c001a380:	55                   	push   ebp
c001a381:	31 ed                	xor    ebp,ebp
c001a383:	e8 f0 63 fe ff       	call   c0000778 <memset>
c001a388:	83 c4 10             	add    esp,0x10
c001a38b:	eb 0d                	jmp    c001a39a <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a38d:	3c 3d                	cmp    al,0x3d
c001a38f:	74 07                	je     c001a398 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001a391:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c001a395:	45                   	inc    ebp
c001a396:	eb 02                	jmp    c001a39a <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a398:	89 eb                	mov    ebx,ebp
c001a39a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a39f:	0f 85 bd fe ff ff    	jne    c001a262 <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c001a3a5:	50                   	push   eax
c001a3a6:	50                   	push   eax
c001a3a7:	ff 36                	push   DWORD PTR [esi]
c001a3a9:	68 c3 ba 02 c0       	push   0xc002bac3
c001a3ae:	e8 37 8c ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001a3b3:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a3b9:	5b                   	pop    ebx
c001a3ba:	5e                   	pop    esi
c001a3bb:	5f                   	pop    edi
c001a3bc:	5d                   	pop    ebp
c001a3bd:	c3                   	ret    

c001a3be <EnvVarContainer::__loadSystem()>:
c001a3be:	83 ec 10             	sub    esp,0x10
c001a3c1:	68 00 da 02 c0       	push   0xc002da00
c001a3c6:	68 ee ba 02 c0       	push   0xc002baee
c001a3cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a3cf:	e8 f4 fd ff ff       	call   c001a1c8 <EnvVarContainer::loadFrom(char const*, char const*)>
c001a3d4:	83 c4 1c             	add    esp,0x1c
c001a3d7:	c3                   	ret    

c001a3d8 <EnvVarContainer::__loadUser()>:
c001a3d8:	c3                   	ret    
c001a3d9:	90                   	nop

c001a3da <EnvVarContainer::EnvVarContainer(Process*)>:
c001a3da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3de:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a3e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a3ec:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a3ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3f3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a3fa:	90                   	nop
c001a3fb:	c3                   	ret    

c001a3fc <EnvVarContainer::~EnvVarContainer()>:
c001a3fc:	83 ec 0c             	sub    esp,0xc
c001a3ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a403:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a406:	85 c0                	test   eax,eax
c001a408:	74 1d                	je     c001a427 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a40a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a40e:	8b 00                	mov    eax,DWORD PTR [eax]
c001a410:	85 c0                	test   eax,eax
c001a412:	74 13                	je     c001a427 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a414:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a418:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a41b:	83 ec 0c             	sub    esp,0xc
c001a41e:	50                   	push   eax
c001a41f:	e8 2f 54 ff ff       	call   c000f853 <free>
c001a424:	83 c4 10             	add    esp,0x10
c001a427:	90                   	nop
c001a428:	83 c4 0c             	add    esp,0xc
c001a42b:	c3                   	ret    

c001a42c <Krnl::getEnv(Process*, char const*)>:
c001a42c:	53                   	push   ebx
c001a42d:	83 ec 08             	sub    esp,0x8
c001a430:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a434:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a438:	39 05 34 1a 03 c0    	cmp    DWORD PTR ds:0xc0031a34,eax
c001a43e:	74 04                	je     c001a444 <Krnl::getEnv(Process*, char const*)+0x18>
c001a440:	85 c0                	test   eax,eax
c001a442:	75 0b                	jne    c001a44f <Krnl::getEnv(Process*, char const*)+0x23>
c001a444:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c001a449:	85 c0                	test   eax,eax
c001a44b:	75 19                	jne    c001a466 <Krnl::getEnv(Process*, char const*)+0x3a>
c001a44d:	eb 27                	jmp    c001a476 <Krnl::getEnv(Process*, char const*)+0x4a>
c001a44f:	52                   	push   edx
c001a450:	52                   	push   edx
c001a451:	53                   	push   ebx
c001a452:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a458:	e8 5f fc ff ff       	call   c001a0bc <EnvVarContainer::getEnv(char const*)>
c001a45d:	83 c4 10             	add    esp,0x10
c001a460:	85 c0                	test   eax,eax
c001a462:	75 28                	jne    c001a48c <Krnl::getEnv(Process*, char const*)+0x60>
c001a464:	eb de                	jmp    c001a444 <Krnl::getEnv(Process*, char const*)+0x18>
c001a466:	52                   	push   edx
c001a467:	52                   	push   edx
c001a468:	53                   	push   ebx
c001a469:	50                   	push   eax
c001a46a:	e8 4d fc ff ff       	call   c001a0bc <EnvVarContainer::getEnv(char const*)>
c001a46f:	83 c4 10             	add    esp,0x10
c001a472:	85 c0                	test   eax,eax
c001a474:	75 16                	jne    c001a48c <Krnl::getEnv(Process*, char const*)+0x60>
c001a476:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a47a:	a1 18 10 03 c0       	mov    eax,ds:0xc0031018
c001a47f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a483:	83 c4 08             	add    esp,0x8
c001a486:	5b                   	pop    ebx
c001a487:	e9 30 fc ff ff       	jmp    c001a0bc <EnvVarContainer::getEnv(char const*)>
c001a48c:	83 c4 08             	add    esp,0x8
c001a48f:	5b                   	pop    ebx
c001a490:	c3                   	ret    

c001a491 <Krnl::setEnvSystem(char const*, char const*)>:
c001a491:	83 ec 10             	sub    esp,0x10
c001a494:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a498:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a49c:	ff 35 18 10 03 c0    	push   DWORD PTR ds:0xc0031018
c001a4a2:	e8 53 fc ff ff       	call   c001a0fa <EnvVarContainer::setEnv(char const*, char const*)>
c001a4a7:	83 c4 1c             	add    esp,0x1c
c001a4aa:	c3                   	ret    

c001a4ab <Krnl::setEnvUser(char const*, char const*)>:
c001a4ab:	a1 14 10 03 c0       	mov    eax,ds:0xc0031014
c001a4b0:	85 c0                	test   eax,eax
c001a4b2:	74 15                	je     c001a4c9 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a4b4:	83 ec 10             	sub    esp,0x10
c001a4b7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a4bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a4bf:	50                   	push   eax
c001a4c0:	e8 35 fc ff ff       	call   c001a0fa <EnvVarContainer::setEnv(char const*, char const*)>
c001a4c5:	83 c4 1c             	add    esp,0x1c
c001a4c8:	c3                   	ret    
c001a4c9:	c3                   	ret    

c001a4ca <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a4ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a4ce:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a4d4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a4d8:	e9 1d fc ff ff       	jmp    c001a0fa <EnvVarContainer::setEnv(char const*, char const*)>

c001a4dd <Krnl::deleteEnvSystem(char const*)>:
c001a4dd:	c3                   	ret    

c001a4de <Krnl::deleteEnvUser(char const*)>:
c001a4de:	c3                   	ret    

c001a4df <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a4df:	c3                   	ret    

c001a4e0 <Krnl::newProcessEnv(Process*)>:
c001a4e0:	83 ec 28             	sub    esp,0x28
c001a4e3:	6a 0c                	push   0xc
c001a4e5:	e8 59 53 ff ff       	call   c000f843 <malloc>
c001a4ea:	5a                   	pop    edx
c001a4eb:	59                   	pop    ecx
c001a4ec:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a4f0:	50                   	push   eax
c001a4f1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a4f5:	e8 e0 fe ff ff       	call   c001a3da <EnvVarContainer::EnvVarContainer(Process*)>
c001a4fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a4fe:	83 c4 2c             	add    esp,0x2c
c001a501:	c3                   	ret    

c001a502 <Krnl::copyProcessEnv(Process*, Process*)>:
c001a502:	56                   	push   esi
c001a503:	53                   	push   ebx
c001a504:	83 ec 10             	sub    esp,0x10
c001a507:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a50b:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c001a511:	6a 0c                	push   0xc
c001a513:	e8 2b 53 ff ff       	call   c000f843 <malloc>
c001a518:	89 c3                	mov    ebx,eax
c001a51a:	58                   	pop    eax
c001a51b:	5a                   	pop    edx
c001a51c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a520:	53                   	push   ebx
c001a521:	e8 b4 fe ff ff       	call   c001a3da <EnvVarContainer::EnvVarContainer(Process*)>
c001a526:	8b 06                	mov    eax,DWORD PTR [esi]
c001a528:	89 03                	mov    DWORD PTR [ebx],eax
c001a52a:	c1 e0 03             	shl    eax,0x3
c001a52d:	89 04 24             	mov    DWORD PTR [esp],eax
c001a530:	e8 0e 53 ff ff       	call   c000f843 <malloc>
c001a535:	83 c4 0c             	add    esp,0xc
c001a538:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a53b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a53d:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a544:	52                   	push   edx
c001a545:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a548:	50                   	push   eax
c001a549:	e8 f6 61 fe ff       	call   c0000744 <memcpy>
c001a54e:	89 d8                	mov    eax,ebx
c001a550:	83 c4 14             	add    esp,0x14
c001a553:	5b                   	pop    ebx
c001a554:	5e                   	pop    esi
c001a555:	c3                   	ret    

c001a556 <Krnl::loadSystemEnv()>:
c001a556:	53                   	push   ebx
c001a557:	83 ec 14             	sub    esp,0x14
c001a55a:	6a 0c                	push   0xc
c001a55c:	e8 e2 52 ff ff       	call   c000f843 <malloc>
c001a561:	89 c3                	mov    ebx,eax
c001a563:	58                   	pop    eax
c001a564:	5a                   	pop    edx
c001a565:	ff 35 34 1a 03 c0    	push   DWORD PTR ds:0xc0031a34
c001a56b:	53                   	push   ebx
c001a56c:	e8 69 fe ff ff       	call   c001a3da <EnvVarContainer::EnvVarContainer(Process*)>
c001a571:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a574:	89 1d 18 10 03 c0    	mov    DWORD PTR ds:0xc0031018,ebx
c001a57a:	e8 3f fe ff ff       	call   c001a3be <EnvVarContainer::__loadSystem()>
c001a57f:	83 c4 18             	add    esp,0x18
c001a582:	5b                   	pop    ebx
c001a583:	c3                   	ret    

c001a584 <Krnl::loadUserEnv()>:
c001a584:	53                   	push   ebx
c001a585:	83 ec 14             	sub    esp,0x14
c001a588:	6a 0c                	push   0xc
c001a58a:	e8 b4 52 ff ff       	call   c000f843 <malloc>
c001a58f:	89 c3                	mov    ebx,eax
c001a591:	58                   	pop    eax
c001a592:	5a                   	pop    edx
c001a593:	ff 35 34 1a 03 c0    	push   DWORD PTR ds:0xc0031a34
c001a599:	53                   	push   ebx
c001a59a:	e8 3b fe ff ff       	call   c001a3da <EnvVarContainer::EnvVarContainer(Process*)>
c001a59f:	89 1d 14 10 03 c0    	mov    DWORD PTR ds:0xc0031014,ebx
c001a5a5:	83 c4 18             	add    esp,0x18
c001a5a8:	5b                   	pop    ebx
c001a5a9:	c3                   	ret    

c001a5aa <Krnl::flushEnv()>:
c001a5aa:	c3                   	ret    

c001a5ab <Krnl::getProcessTotalEnvCount(Process*)>:
c001a5ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5af:	8b 15 14 10 03 c0    	mov    edx,DWORD PTR ds:0xc0031014
c001a5b5:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a5bb:	a1 18 10 03 c0       	mov    eax,ds:0xc0031018
c001a5c0:	8b 00                	mov    eax,DWORD PTR [eax]
c001a5c2:	03 01                	add    eax,DWORD PTR [ecx]
c001a5c4:	85 d2                	test   edx,edx
c001a5c6:	74 02                	je     c001a5ca <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a5c8:	03 02                	add    eax,DWORD PTR [edx]
c001a5ca:	c3                   	ret    

c001a5cb <Krnl::getProcessEnvPair(Process*, int)>:
c001a5cb:	57                   	push   edi
c001a5cc:	8b 0d 14 10 03 c0    	mov    ecx,DWORD PTR ds:0xc0031014
c001a5d2:	56                   	push   esi
c001a5d3:	85 c9                	test   ecx,ecx
c001a5d5:	53                   	push   ebx
c001a5d6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a5da:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a5de:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a5e4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a5e8:	8b 02                	mov    eax,DWORD PTR [edx]
c001a5ea:	75 47                	jne    c001a633 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a5ec:	39 c3                	cmp    ebx,eax
c001a5ee:	7c 47                	jl     c001a637 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a5f0:	8b 15 18 10 03 c0    	mov    edx,DWORD PTR ds:0xc0031018
c001a5f6:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a5f8:	01 c1                	add    ecx,eax
c001a5fa:	39 d9                	cmp    ecx,ebx
c001a5fc:	7e 6c                	jle    c001a66a <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a5fe:	51                   	push   ecx
c001a5ff:	89 d9                	mov    ecx,ebx
c001a601:	29 c1                	sub    ecx,eax
c001a603:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a606:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a60a:	53                   	push   ebx
c001a60b:	68 10 bb 02 c0       	push   0xc002bb10
c001a610:	e8 d5 89 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001a615:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a61b:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a61d:	a1 18 10 03 c0       	mov    eax,ds:0xc0031018
c001a622:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a625:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a629:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a62c:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a62f:	89 06                	mov    DWORD PTR [esi],eax
c001a631:	eb 51                	jmp    c001a684 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a633:	39 c3                	cmp    ebx,eax
c001a635:	7d 05                	jge    c001a63c <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a637:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a63a:	eb 20                	jmp    c001a65c <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a63c:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a63e:	8d 14 07             	lea    edx,[edi+eax*1]
c001a641:	39 da                	cmp    edx,ebx
c001a643:	7e 04                	jle    c001a649 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a645:	29 c3                	sub    ebx,eax
c001a647:	eb 10                	jmp    c001a659 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a649:	8b 0d 18 10 03 c0    	mov    ecx,DWORD PTR ds:0xc0031018
c001a64f:	03 11                	add    edx,DWORD PTR [ecx]
c001a651:	39 da                	cmp    edx,ebx
c001a653:	7e 15                	jle    c001a66a <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a655:	29 c3                	sub    ebx,eax
c001a657:	29 fb                	sub    ebx,edi
c001a659:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a65c:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a660:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a663:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a666:	89 06                	mov    DWORD PTR [esi],eax
c001a668:	eb 1d                	jmp    c001a687 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a66a:	83 ec 0c             	sub    esp,0xc
c001a66d:	68 24 bb 02 c0       	push   0xc002bb24
c001a672:	e8 18 00 00 00       	call   c001a68f <Krnl::panic(char const*)>
c001a677:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a67d:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a684:	83 c4 10             	add    esp,0x10
c001a687:	89 f0                	mov    eax,esi
c001a689:	5b                   	pop    ebx
c001a68a:	5e                   	pop    esi
c001a68b:	5f                   	pop    edi
c001a68c:	c2 04 00             	ret    0x4

c001a68f <Krnl::panic(char const*)>:
c001a68f:	55                   	push   ebp
c001a690:	89 e5                	mov    ebp,esp
c001a692:	53                   	push   ebx
c001a693:	83 ec 0c             	sub    esp,0xc
c001a696:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a699:	fa                   	cli    
c001a69a:	c6 05 24 10 03 c0 01 	mov    BYTE PTR ds:0xc0031024,0x1
c001a6a1:	53                   	push   ebx
c001a6a2:	c6 05 04 d4 02 c0 00 	mov    BYTE PTR ds:0xc002d404,0x0
c001a6a9:	68 3e bb 02 c0       	push   0xc002bb3e
c001a6ae:	e8 37 89 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001a6b3:	58                   	pop    eax
c001a6b4:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c001a6b9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6bf:	e8 69 66 ff ff       	call   c0010d2d <setActiveTerminal(VgaText*)>
c001a6c4:	83 c4 0c             	add    esp,0xc
c001a6c7:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c001a6cc:	6a 01                	push   0x1
c001a6ce:	6a 0f                	push   0xf
c001a6d0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6d6:	e8 83 60 ff ff       	call   c001075e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a6db:	58                   	pop    eax
c001a6dc:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c001a6e1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6e7:	e8 e2 68 ff ff       	call   c0010fce <VgaText::clearScreen()>
c001a6ec:	58                   	pop    eax
c001a6ed:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c001a6f2:	5a                   	pop    edx
c001a6f3:	68 57 bb 02 c0       	push   0xc002bb57
c001a6f8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6fe:	e8 49 6a ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a703:	59                   	pop    ecx
c001a704:	58                   	pop    eax
c001a705:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c001a70a:	68 fc bb 02 c0       	push   0xc002bbfc
c001a70f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a715:	e8 32 6a ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a71a:	58                   	pop    eax
c001a71b:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c001a720:	5a                   	pop    edx
c001a721:	68 73 bb 02 c0       	push   0xc002bb73
c001a726:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a72c:	e8 1b 6a ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a731:	59                   	pop    ecx
c001a732:	58                   	pop    eax
c001a733:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c001a738:	53                   	push   ebx
c001a739:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a73f:	e8 08 6a ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a744:	58                   	pop    eax
c001a745:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c001a74a:	5a                   	pop    edx
c001a74b:	68 93 bb 02 c0       	push   0xc002bb93
c001a750:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a756:	e8 f1 69 ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a75b:	a1 20 10 03 c0       	mov    eax,ds:0xc0031020
c001a760:	83 c4 10             	add    esp,0x10
c001a763:	85 c0                	test   eax,eax
c001a765:	74 02                	je     c001a769 <Krnl::panic(char const*)+0xda>
c001a767:	ff d0                	call   eax
c001a769:	83 ec 0c             	sub    esp,0xc
c001a76c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a76f:	e8 fd 2f 00 00       	call   c001d771 <Thr::getDriverNameFromAddress(unsigned long)>
c001a774:	83 c4 10             	add    esp,0x10
c001a777:	89 c3                	mov    ebx,eax
c001a779:	85 c0                	test   eax,eax
c001a77b:	0f 84 50 02 00 00    	je     c001a9d1 <Krnl::panic(char const*)+0x342>
c001a781:	83 ec 08             	sub    esp,0x8
c001a784:	8b 15 34 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031a34
c001a78a:	68 38 bc 02 c0       	push   0xc002bc38
c001a78f:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a795:	e8 b2 69 ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a79a:	58                   	pop    eax
c001a79b:	5a                   	pop    edx
c001a79c:	8b 15 34 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031a34
c001a7a2:	68 73 bb 02 c0       	push   0xc002bb73
c001a7a7:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a7ad:	e8 9a 69 ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a7b2:	59                   	pop    ecx
c001a7b3:	58                   	pop    eax
c001a7b4:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c001a7b9:	53                   	push   ebx
c001a7ba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7c0:	e8 87 69 ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a7c5:	83 c4 10             	add    esp,0x10
c001a7c8:	83 ec 08             	sub    esp,0x8
c001a7cb:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c001a7d0:	68 92 bb 02 c0       	push   0xc002bb92
c001a7d5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7db:	e8 6c 69 ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a7e0:	58                   	pop    eax
c001a7e1:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c001a7e6:	5a                   	pop    edx
c001a7e7:	68 90 bc 02 c0       	push   0xc002bc90
c001a7ec:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7f2:	e8 55 69 ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a7f7:	59                   	pop    ecx
c001a7f8:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c001a7fd:	5b                   	pop    ebx
c001a7fe:	68 d0 bc 02 c0       	push   0xc002bcd0
c001a803:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a809:	e8 3e 69 ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a80e:	58                   	pop    eax
c001a80f:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c001a814:	5a                   	pop    edx
c001a815:	68 7e bb 02 c0       	push   0xc002bb7e
c001a81a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a820:	e8 27 69 ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a825:	59                   	pop    ecx
c001a826:	5b                   	pop    ebx
c001a827:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a82a:	68 96 bb 02 c0       	push   0xc002bb96
c001a82f:	e8 b6 87 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001a834:	58                   	pop    eax
c001a835:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a838:	5a                   	pop    edx
c001a839:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a83c:	68 9f bb 02 c0       	push   0xc002bb9f
c001a841:	e8 a4 87 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001a846:	59                   	pop    ecx
c001a847:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a84a:	5b                   	pop    ebx
c001a84b:	8b 00                	mov    eax,DWORD PTR [eax]
c001a84d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a850:	68 a8 bb 02 c0       	push   0xc002bba8
c001a855:	e8 90 87 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001a85a:	58                   	pop    eax
c001a85b:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c001a860:	5a                   	pop    edx
c001a861:	68 14 bd 02 c0       	push   0xc002bd14
c001a866:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a86c:	e8 db 68 ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a871:	59                   	pop    ecx
c001a872:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c001a877:	5b                   	pop    ebx
c001a878:	68 b1 bb 02 c0       	push   0xc002bbb1
c001a87d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a883:	e8 c4 68 ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a888:	0f 20 c0             	mov    eax,cr0
c001a88b:	5a                   	pop    edx
c001a88c:	59                   	pop    ecx
c001a88d:	50                   	push   eax
c001a88e:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c001a893:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a899:	e8 d4 68 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c001a89e:	5b                   	pop    ebx
c001a89f:	58                   	pop    eax
c001a8a0:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c001a8a5:	68 bb bb 02 c0       	push   0xc002bbbb
c001a8aa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8b0:	e8 97 68 ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a8b5:	0f 20 d0             	mov    eax,cr2
c001a8b8:	5a                   	pop    edx
c001a8b9:	59                   	pop    ecx
c001a8ba:	50                   	push   eax
c001a8bb:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c001a8c0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8c6:	e8 a7 68 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c001a8cb:	5b                   	pop    ebx
c001a8cc:	58                   	pop    eax
c001a8cd:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c001a8d2:	68 c5 bb 02 c0       	push   0xc002bbc5
c001a8d7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8dd:	e8 6a 68 ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a8e2:	0f 20 d8             	mov    eax,cr3
c001a8e5:	5a                   	pop    edx
c001a8e6:	59                   	pop    ecx
c001a8e7:	50                   	push   eax
c001a8e8:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c001a8ed:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8f3:	e8 7a 68 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c001a8f8:	5b                   	pop    ebx
c001a8f9:	58                   	pop    eax
c001a8fa:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c001a8ff:	68 d8 bb 02 c0       	push   0xc002bbd8
c001a904:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a90a:	e8 3d 68 ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a90f:	0f 20 e0             	mov    eax,cr4
c001a912:	5a                   	pop    edx
c001a913:	59                   	pop    ecx
c001a914:	50                   	push   eax
c001a915:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c001a91a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a920:	e8 4d 68 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c001a925:	5b                   	pop    ebx
c001a926:	58                   	pop    eax
c001a927:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c001a92c:	68 e2 bb 02 c0       	push   0xc002bbe2
c001a931:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a937:	e8 10 68 ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a93c:	5a                   	pop    edx
c001a93d:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c001a942:	59                   	pop    ecx
c001a943:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a949:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a94c:	50                   	push   eax
c001a94d:	e8 20 68 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c001a952:	5b                   	pop    ebx
c001a953:	58                   	pop    eax
c001a954:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c001a959:	68 f9 bb 02 c0       	push   0xc002bbf9
c001a95e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a964:	e8 e3 67 ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a969:	5a                   	pop    edx
c001a96a:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c001a96f:	59                   	pop    ecx
c001a970:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a976:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a979:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a97c:	50                   	push   eax
c001a97d:	e8 f0 67 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c001a982:	5b                   	pop    ebx
c001a983:	58                   	pop    eax
c001a984:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c001a989:	68 f9 bb 02 c0       	push   0xc002bbf9
c001a98e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a994:	e8 b3 67 ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a999:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c001a99e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a9a1:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a9a7:	8b 12                	mov    edx,DWORD PTR [edx]
c001a9a9:	59                   	pop    ecx
c001a9aa:	5b                   	pop    ebx
c001a9ab:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a9ae:	50                   	push   eax
c001a9af:	e8 be 67 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c001a9b4:	83 c4 10             	add    esp,0x10
c001a9b7:	b2 fe                	mov    dl,0xfe
c001a9b9:	e4 60                	in     al,0x60
c001a9bb:	3c 1c                	cmp    al,0x1c
c001a9bd:	74 04                	je     c001a9c3 <Krnl::panic(char const*)+0x334>
c001a9bf:	3c 5a                	cmp    al,0x5a
c001a9c1:	75 f6                	jne    c001a9b9 <Krnl::panic(char const*)+0x32a>
c001a9c3:	e4 64                	in     al,0x64
c001a9c5:	a8 02                	test   al,0x2
c001a9c7:	75 fa                	jne    c001a9c3 <Krnl::panic(char const*)+0x334>
c001a9c9:	88 d0                	mov    al,dl
c001a9cb:	e6 64                	out    0x64,al
c001a9cd:	fa                   	cli    
c001a9ce:	f4                   	hlt    
c001a9cf:	eb e8                	jmp    c001a9b9 <Krnl::panic(char const*)+0x32a>
c001a9d1:	50                   	push   eax
c001a9d2:	50                   	push   eax
c001a9d3:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c001a9d8:	68 64 bc 02 c0       	push   0xc002bc64
c001a9dd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9e3:	e8 64 67 ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a9e8:	58                   	pop    eax
c001a9e9:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c001a9ee:	5a                   	pop    edx
c001a9ef:	68 73 bb 02 c0       	push   0xc002bb73
c001a9f4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9fa:	e8 4d 67 ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a9ff:	59                   	pop    ecx
c001aa00:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aa05:	5b                   	pop    ebx
c001aa06:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001aa09:	83 c0 0c             	add    eax,0xc
c001aa0c:	50                   	push   eax
c001aa0d:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c001aa12:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa18:	e8 2f 67 ff ff       	call   c001114c <VgaText::puts(char const*)>
c001aa1d:	83 c4 10             	add    esp,0x10
c001aa20:	e9 a3 fd ff ff       	jmp    c001a7c8 <Krnl::panic(char const*)+0x139>

c001aa25 <Net::switchEndian16(unsigned short)>:
c001aa25:	83 ec 04             	sub    esp,0x4
c001aa28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aa2c:	66 89 04 24          	mov    WORD PTR [esp],ax
c001aa30:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001aa34:	c1 f8 08             	sar    eax,0x8
c001aa37:	89 c2                	mov    edx,eax
c001aa39:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001aa3d:	c1 e0 08             	shl    eax,0x8
c001aa40:	09 d0                	or     eax,edx
c001aa42:	83 c4 04             	add    esp,0x4
c001aa45:	c3                   	ret    

c001aa46 <Net::switchEndian32(unsigned int)>:
c001aa46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa4a:	c1 e8 18             	shr    eax,0x18
c001aa4d:	89 c2                	mov    edx,eax
c001aa4f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa53:	c1 e0 08             	shl    eax,0x8
c001aa56:	25 00 00 ff 00       	and    eax,0xff0000
c001aa5b:	09 c2                	or     edx,eax
c001aa5d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa61:	c1 e8 08             	shr    eax,0x8
c001aa64:	25 00 ff 00 00       	and    eax,0xff00
c001aa69:	09 c2                	or     edx,eax
c001aa6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa6f:	c1 e0 18             	shl    eax,0x18
c001aa72:	09 d0                	or     eax,edx
c001aa74:	c3                   	ret    

c001aa75 <Net::crc32Calc(unsigned char*, int)>:
c001aa75:	83 ec 10             	sub    esp,0x10
c001aa78:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001aa7d:	75 07                	jne    c001aa86 <Net::crc32Calc(unsigned char*, int)+0x11>
c001aa7f:	b8 00 00 00 00       	mov    eax,0x0
c001aa84:	eb 7c                	jmp    c001ab02 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001aa86:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001aa8b:	7f 07                	jg     c001aa94 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001aa8d:	b8 00 00 00 00       	mov    eax,0x0
c001aa92:	eb 6e                	jmp    c001ab02 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001aa94:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001aa9c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001aaa4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aaa8:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001aaac:	7d 4e                	jge    c001aafc <Net::crc32Calc(unsigned char*, int)+0x87>
c001aaae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001aab2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aab6:	01 d0                	add    eax,edx
c001aab8:	8a 00                	mov    al,BYTE PTR [eax]
c001aaba:	0f b6 c0             	movzx  eax,al
c001aabd:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001aac1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aac9:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001aace:	7f 26                	jg     c001aaf6 <Net::crc32Calc(unsigned char*, int)+0x81>
c001aad0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aad4:	83 e0 01             	and    eax,0x1
c001aad7:	74 0d                	je     c001aae6 <Net::crc32Calc(unsigned char*, int)+0x71>
c001aad9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aadd:	d1 e8                	shr    eax,1
c001aadf:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001aae4:	eb 06                	jmp    c001aaec <Net::crc32Calc(unsigned char*, int)+0x77>
c001aae6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aaea:	d1 e8                	shr    eax,1
c001aaec:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aaf0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aaf4:	eb d3                	jmp    c001aac9 <Net::crc32Calc(unsigned char*, int)+0x54>
c001aaf6:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001aafa:	eb a8                	jmp    c001aaa4 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001aafc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab00:	f7 d0                	not    eax
c001ab02:	83 c4 10             	add    esp,0x10
c001ab05:	c3                   	ret    

c001ab06 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001ab06:	83 ec 1c             	sub    esp,0x1c
c001ab09:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ab11:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ab19:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001ab1e:	7f 14                	jg     c001ab34 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001ab20:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab24:	8d 50 01             	lea    edx,[eax+0x1]
c001ab27:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab2b:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001ab2e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ab32:	eb e5                	jmp    c001ab19 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001ab34:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab38:	8d 50 01             	lea    edx,[eax+0x1]
c001ab3b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab3f:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001ab42:	83 ec 04             	sub    esp,0x4
c001ab45:	6a 06                	push   0x6
c001ab47:	8d 44 24 36          	lea    eax,[esp+0x36]
c001ab4b:	50                   	push   eax
c001ab4c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ab50:	e8 ef 5b fe ff       	call   c0000744 <memcpy>
c001ab55:	83 c4 10             	add    esp,0x10
c001ab58:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001ab5d:	83 ec 04             	sub    esp,0x4
c001ab60:	6a 06                	push   0x6
c001ab62:	8d 44 24 30          	lea    eax,[esp+0x30]
c001ab66:	50                   	push   eax
c001ab67:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ab6b:	e8 d4 5b fe ff       	call   c0000744 <memcpy>
c001ab70:	83 c4 10             	add    esp,0x10
c001ab73:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001ab78:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab7c:	0f b7 c0             	movzx  eax,ax
c001ab7f:	c1 f8 08             	sar    eax,0x8
c001ab82:	89 c1                	mov    ecx,eax
c001ab84:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab88:	8d 50 01             	lea    edx,[eax+0x1]
c001ab8b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab8f:	88 ca                	mov    dl,cl
c001ab91:	88 10                	mov    BYTE PTR [eax],dl
c001ab93:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ab97:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab9b:	8d 48 01             	lea    ecx,[eax+0x1]
c001ab9e:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001aba2:	88 10                	mov    BYTE PTR [eax],dl
c001aba4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001aba8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abac:	83 ec 04             	sub    esp,0x4
c001abaf:	52                   	push   edx
c001abb0:	50                   	push   eax
c001abb1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001abb5:	e8 8a 5b fe ff       	call   c0000744 <memcpy>
c001abba:	83 c4 10             	add    esp,0x10
c001abbd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001abc1:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001abc5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001abc9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001abcd:	83 ec 08             	sub    esp,0x8
c001abd0:	50                   	push   eax
c001abd1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001abd5:	e8 9b fe ff ff       	call   c001aa75 <Net::crc32Calc(unsigned char*, int)>
c001abda:	83 c4 10             	add    esp,0x10
c001abdd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001abe1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abe5:	c1 e8 18             	shr    eax,0x18
c001abe8:	89 c1                	mov    ecx,eax
c001abea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001abee:	8d 50 01             	lea    edx,[eax+0x1]
c001abf1:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001abf5:	88 ca                	mov    dl,cl
c001abf7:	88 10                	mov    BYTE PTR [eax],dl
c001abf9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abfd:	c1 e8 10             	shr    eax,0x10
c001ac00:	89 c1                	mov    ecx,eax
c001ac02:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac06:	8d 50 01             	lea    edx,[eax+0x1]
c001ac09:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ac0d:	88 ca                	mov    dl,cl
c001ac0f:	88 10                	mov    BYTE PTR [eax],dl
c001ac11:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac15:	c1 e8 08             	shr    eax,0x8
c001ac18:	89 c1                	mov    ecx,eax
c001ac1a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac1e:	8d 50 01             	lea    edx,[eax+0x1]
c001ac21:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ac25:	88 ca                	mov    dl,cl
c001ac27:	88 10                	mov    BYTE PTR [eax],dl
c001ac29:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac2d:	8d 50 01             	lea    edx,[eax+0x1]
c001ac30:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ac34:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ac38:	88 10                	mov    BYTE PTR [eax],dl
c001ac3a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ac3e:	83 c4 1c             	add    esp,0x1c
c001ac41:	c3                   	ret    

c001ac42 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001ac42:	83 ec 2c             	sub    esp,0x2c
c001ac45:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac49:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ac4d:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001ac52:	83 ec 04             	sub    esp,0x4
c001ac55:	6a 06                	push   0x6
c001ac57:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ac5b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ac5f:	83 c0 0e             	add    eax,0xe
c001ac62:	50                   	push   eax
c001ac63:	e8 dc 5a fe ff       	call   c0000744 <memcpy>
c001ac68:	83 c4 10             	add    esp,0x10
c001ac6b:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ac70:	83 ec 04             	sub    esp,0x4
c001ac73:	6a 06                	push   0x6
c001ac75:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ac79:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ac7d:	83 c0 08             	add    eax,0x8
c001ac80:	50                   	push   eax
c001ac81:	e8 be 5a fe ff       	call   c0000744 <memcpy>
c001ac86:	83 c4 10             	add    esp,0x10
c001ac89:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ac8e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac92:	8d 50 01             	lea    edx,[eax+0x1]
c001ac95:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac99:	8a 00                	mov    al,BYTE PTR [eax]
c001ac9b:	0f b6 c0             	movzx  eax,al
c001ac9e:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001aca3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aca7:	8d 50 01             	lea    edx,[eax+0x1]
c001acaa:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001acae:	8a 00                	mov    al,BYTE PTR [eax]
c001acb0:	0f b6 c0             	movzx  eax,al
c001acb3:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001acb8:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001acbd:	c1 e0 08             	shl    eax,0x8
c001acc0:	89 c2                	mov    edx,eax
c001acc2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001acc6:	09 d0                	or     eax,edx
c001acc8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001accc:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001acd0:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001acd5:	75 3a                	jne    c001ad11 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001acd7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001acdb:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001acde:	66 3d dc 05          	cmp    ax,0x5dc
c001ace2:	77 10                	ja     c001acf4 <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001ace4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ace8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aceb:	0f b7 c0             	movzx  eax,ax
c001acee:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001acf2:	eb 1d                	jmp    c001ad11 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001acf4:	83 ec 0c             	sub    esp,0xc
c001acf7:	68 3c bd 02 c0       	push   0xc002bd3c
c001acfc:	e8 e9 82 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001ad01:	83 c4 10             	add    esp,0x10
c001ad04:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad08:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001ad0c:	e9 c0 00 00 00       	jmp    c001add1 <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001ad11:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ad15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad19:	8b 00                	mov    eax,DWORD PTR [eax]
c001ad1b:	83 ec 04             	sub    esp,0x4
c001ad1e:	52                   	push   edx
c001ad1f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ad23:	50                   	push   eax
c001ad24:	e8 1b 5a fe ff       	call   c0000744 <memcpy>
c001ad29:	83 c4 10             	add    esp,0x10
c001ad2c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ad30:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001ad34:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad38:	8d 50 01             	lea    edx,[eax+0x1]
c001ad3b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ad3f:	8a 00                	mov    al,BYTE PTR [eax]
c001ad41:	0f b6 c0             	movzx  eax,al
c001ad44:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ad48:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad4c:	8d 50 01             	lea    edx,[eax+0x1]
c001ad4f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ad53:	8a 00                	mov    al,BYTE PTR [eax]
c001ad55:	0f b6 c0             	movzx  eax,al
c001ad58:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ad5c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad60:	8d 50 01             	lea    edx,[eax+0x1]
c001ad63:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ad67:	8a 00                	mov    al,BYTE PTR [eax]
c001ad69:	0f b6 c0             	movzx  eax,al
c001ad6c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ad70:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad74:	8d 50 01             	lea    edx,[eax+0x1]
c001ad77:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ad7b:	8a 00                	mov    al,BYTE PTR [eax]
c001ad7d:	0f b6 c0             	movzx  eax,al
c001ad80:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ad84:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad88:	c1 e0 18             	shl    eax,0x18
c001ad8b:	89 c2                	mov    edx,eax
c001ad8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad91:	c1 e0 10             	shl    eax,0x10
c001ad94:	09 c2                	or     edx,eax
c001ad96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad9a:	c1 e0 08             	shl    eax,0x8
c001ad9d:	09 d0                	or     eax,edx
c001ad9f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001ada3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ada7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001adab:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001adaf:	83 e8 04             	sub    eax,0x4
c001adb2:	83 ec 08             	sub    esp,0x8
c001adb5:	50                   	push   eax
c001adb6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001adba:	e8 b6 fc ff ff       	call   c001aa75 <Net::crc32Calc(unsigned char*, int)>
c001adbf:	83 c4 10             	add    esp,0x10
c001adc2:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001adc6:	0f 94 c2             	sete   dl
c001adc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001adcd:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001add0:	90                   	nop
c001add1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001add5:	83 c4 2c             	add    esp,0x2c
c001add8:	c2 04 00             	ret    0x4

c001addb <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001addb:	55                   	push   ebp
c001addc:	57                   	push   edi
c001addd:	56                   	push   esi
c001adde:	53                   	push   ebx
c001addf:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ade5:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001adec:	8a 1e                	mov    bl,BYTE PTR [esi]
c001adee:	8d 6e 01             	lea    ebp,[esi+0x1]
c001adf1:	80 fb 40             	cmp    bl,0x40
c001adf4:	75 1b                	jne    c001ae11 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001adf6:	8a 16                	mov    dl,BYTE PTR [esi]
c001adf8:	84 d2                	test   dl,dl
c001adfa:	0f 84 f1 00 00 00    	je     c001aef1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae00:	8d 46 01             	lea    eax,[esi+0x1]
c001ae03:	80 fa 3a             	cmp    dl,0x3a
c001ae06:	74 04                	je     c001ae0c <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001ae08:	89 c6                	mov    esi,eax
c001ae0a:	eb ea                	jmp    c001adf6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001ae0c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ae0f:	89 c6                	mov    esi,eax
c001ae11:	50                   	push   eax
c001ae12:	6a 40                	push   0x40
c001ae14:	6a 00                	push   0x0
c001ae16:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ae1a:	50                   	push   eax
c001ae1b:	e8 58 59 fe ff       	call   c0000778 <memset>
c001ae20:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001ae27:	31 c0                	xor    eax,eax
c001ae29:	83 c4 10             	add    esp,0x10
c001ae2c:	8a 0f                	mov    cl,BYTE PTR [edi]
c001ae2e:	84 c9                	test   cl,cl
c001ae30:	0f 84 bb 00 00 00    	je     c001aef1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae36:	3d c7 00 00 00       	cmp    eax,0xc7
c001ae3b:	0f 8f b0 00 00 00    	jg     c001aef1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae41:	80 f9 0a             	cmp    cl,0xa
c001ae44:	0f 85 98 00 00 00    	jne    c001aee2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001ae4a:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001ae4f:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001ae53:	a8 df                	test   al,0xdf
c001ae55:	0f 94 c1             	sete   cl
c001ae58:	3c 23                	cmp    al,0x23
c001ae5a:	0f 94 c2             	sete   dl
c001ae5d:	08 d1                	or     cl,dl
c001ae5f:	75 4a                	jne    c001aeab <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae61:	8d 50 f7             	lea    edx,[eax-0x9]
c001ae64:	80 fa 01             	cmp    dl,0x1
c001ae67:	76 42                	jbe    c001aeab <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae69:	3c 5b                	cmp    al,0x5b
c001ae6b:	75 42                	jne    c001aeaf <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001ae6d:	80 fb 40             	cmp    bl,0x40
c001ae70:	75 39                	jne    c001aeab <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae72:	83 ec 0c             	sub    esp,0xc
c001ae75:	8d 54 24 65          	lea    edx,[esp+0x65]
c001ae79:	52                   	push   edx
c001ae7a:	e8 15 59 fe ff       	call   c0000794 <strlen>
c001ae7f:	83 c4 10             	add    esp,0x10
c001ae82:	83 f8 3f             	cmp    eax,0x3f
c001ae85:	77 6a                	ja     c001aef1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae87:	50                   	push   eax
c001ae88:	50                   	push   eax
c001ae89:	8d 54 24 61          	lea    edx,[esp+0x61]
c001ae8d:	52                   	push   edx
c001ae8e:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ae92:	52                   	push   edx
c001ae93:	e8 9c 59 fe ff       	call   c0000834 <strcpy>
c001ae98:	58                   	pop    eax
c001ae99:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ae9d:	52                   	push   edx
c001ae9e:	e8 f1 58 fe ff       	call   c0000794 <strlen>
c001aea3:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001aea8:	83 c4 10             	add    esp,0x10
c001aeab:	31 d2                	xor    edx,edx
c001aead:	eb 3a                	jmp    c001aee9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001aeaf:	80 fb 40             	cmp    bl,0x40
c001aeb2:	74 06                	je     c001aeba <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001aeb4:	8d 44 24 58          	lea    eax,[esp+0x58]
c001aeb8:	eb 20                	jmp    c001aeda <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001aeba:	50                   	push   eax
c001aebb:	50                   	push   eax
c001aebc:	55                   	push   ebp
c001aebd:	8d 44 24 24          	lea    eax,[esp+0x24]
c001aec1:	50                   	push   eax
c001aec2:	e8 f9 59 fe ff       	call   c00008c0 <strcmp>
c001aec7:	83 c4 10             	add    esp,0x10
c001aeca:	85 c0                	test   eax,eax
c001aecc:	75 dd                	jne    c001aeab <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001aece:	eb e4                	jmp    c001aeb4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001aed0:	8d 50 01             	lea    edx,[eax+0x1]
c001aed3:	80 f9 3d             	cmp    cl,0x3d
c001aed6:	74 1d                	je     c001aef5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001aed8:	89 d0                	mov    eax,edx
c001aeda:	8a 08                	mov    cl,BYTE PTR [eax]
c001aedc:	84 c9                	test   cl,cl
c001aede:	75 f0                	jne    c001aed0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001aee0:	eb 0f                	jmp    c001aef1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001aee2:	8d 50 01             	lea    edx,[eax+0x1]
c001aee5:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001aee9:	47                   	inc    edi
c001aeea:	89 d0                	mov    eax,edx
c001aeec:	e9 3b ff ff ff       	jmp    c001ae2c <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001aef1:	31 c0                	xor    eax,eax
c001aef3:	eb 33                	jmp    c001af28 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001aef5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001aef9:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001aefc:	50                   	push   eax
c001aefd:	50                   	push   eax
c001aefe:	8d 44 24 60          	lea    eax,[esp+0x60]
c001af02:	50                   	push   eax
c001af03:	56                   	push   esi
c001af04:	e8 b7 59 fe ff       	call   c00008c0 <strcmp>
c001af09:	83 c4 10             	add    esp,0x10
c001af0c:	85 c0                	test   eax,eax
c001af0e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001af12:	75 97                	jne    c001aeab <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001af14:	51                   	push   ecx
c001af15:	51                   	push   ecx
c001af16:	52                   	push   edx
c001af17:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001af1e:	e8 11 59 fe ff       	call   c0000834 <strcpy>
c001af23:	83 c4 10             	add    esp,0x10
c001af26:	b0 01                	mov    al,0x1
c001af28:	81 c4 2c 01 00 00    	add    esp,0x12c
c001af2e:	5b                   	pop    ebx
c001af2f:	5e                   	pop    esi
c001af30:	5f                   	pop    edi
c001af31:	5d                   	pop    ebp
c001af32:	c3                   	ret    

c001af33 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001af33:	57                   	push   edi
c001af34:	56                   	push   esi
c001af35:	53                   	push   ebx
c001af36:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001af3c:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001af43:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001af4a:	53                   	push   ebx
c001af4b:	e8 44 58 fe ff       	call   c0000794 <strlen>
c001af50:	89 34 24             	mov    DWORD PTR [esp],esi
c001af53:	89 c7                	mov    edi,eax
c001af55:	e8 3a 58 fe ff       	call   c0000794 <strlen>
c001af5a:	83 c4 10             	add    esp,0x10
c001af5d:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001af61:	3d ff 00 00 00       	cmp    eax,0xff
c001af66:	0f 87 d3 00 00 00    	ja     c001b03f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001af6c:	57                   	push   edi
c001af6d:	57                   	push   edi
c001af6e:	56                   	push   esi
c001af6f:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001af73:	56                   	push   esi
c001af74:	e8 bb 58 fe ff       	call   c0000834 <strcpy>
c001af79:	58                   	pop    eax
c001af7a:	5a                   	pop    edx
c001af7b:	68 9c c2 02 c0       	push   0xc002c29c
c001af80:	56                   	push   esi
c001af81:	e8 ee 59 fe ff       	call   c0000974 <strcat>
c001af86:	59                   	pop    ecx
c001af87:	5f                   	pop    edi
c001af88:	53                   	push   ebx
c001af89:	56                   	push   esi
c001af8a:	e8 e5 59 fe ff       	call   c0000974 <strcat>
c001af8f:	58                   	pop    eax
c001af90:	5a                   	pop    edx
c001af91:	68 88 bd 02 c0       	push   0xc002bd88
c001af96:	56                   	push   esi
c001af97:	e8 d8 59 fe ff       	call   c0000974 <strcat>
c001af9c:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001afa3:	e8 9b 48 ff ff       	call   c000f843 <malloc>
c001afa8:	83 c4 0c             	add    esp,0xc
c001afab:	89 c3                	mov    ebx,eax
c001afad:	ff 35 34 1a 03 c0    	push   DWORD PTR ds:0xc0031a34
c001afb3:	56                   	push   esi
c001afb4:	50                   	push   eax
c001afb5:	e8 88 85 ff ff       	call   c0013542 <File::File(char const*, Process*)>
c001afba:	83 c4 10             	add    esp,0x10
c001afbd:	85 db                	test   ebx,ebx
c001afbf:	74 7e                	je     c001b03f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001afc1:	51                   	push   ecx
c001afc2:	51                   	push   ecx
c001afc3:	6a 01                	push   0x1
c001afc5:	53                   	push   ebx
c001afc6:	e8 db 85 ff ff       	call   c00135a6 <File::open(FileOpenMode)>
c001afcb:	83 c4 10             	add    esp,0x10
c001afce:	85 c0                	test   eax,eax
c001afd0:	74 08                	je     c001afda <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001afd2:	83 ec 0c             	sub    esp,0xc
c001afd5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001afd7:	53                   	push   ebx
c001afd8:	eb 5f                	jmp    c001b039 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001afda:	52                   	push   edx
c001afdb:	8d 44 24 17          	lea    eax,[esp+0x17]
c001afdf:	50                   	push   eax
c001afe0:	8d 44 24 20          	lea    eax,[esp+0x20]
c001afe4:	50                   	push   eax
c001afe5:	53                   	push   ebx
c001afe6:	e8 67 88 ff ff       	call   c0013852 <File::stat(unsigned long long*, bool*)>
c001afeb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001afef:	83 c4 10             	add    esp,0x10
c001aff2:	89 c1                	mov    ecx,eax
c001aff4:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001aff8:	74 31                	je     c001b02b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001affa:	83 ec 0c             	sub    esp,0xc
c001affd:	50                   	push   eax
c001affe:	e8 40 48 ff ff       	call   c000f843 <malloc>
c001b003:	89 c6                	mov    esi,eax
c001b005:	58                   	pop    eax
c001b006:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b008:	8d 54 24 20          	lea    edx,[esp+0x20]
c001b00c:	52                   	push   edx
c001b00d:	56                   	push   esi
c001b00e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b012:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b016:	53                   	push   ebx
c001b017:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b01a:	83 c4 20             	add    esp,0x20
c001b01d:	85 c0                	test   eax,eax
c001b01f:	75 0a                	jne    c001b02b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b021:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b025:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001b029:	74 18                	je     c001b043 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001b02b:	83 ec 0c             	sub    esp,0xc
c001b02e:	53                   	push   ebx
c001b02f:	e8 d0 85 ff ff       	call   c0013604 <File::close()>
c001b034:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b036:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b039:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b03c:	83 c4 10             	add    esp,0x10
c001b03f:	31 c0                	xor    eax,eax
c001b041:	eb 3b                	jmp    c001b07e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001b043:	83 ec 0c             	sub    esp,0xc
c001b046:	53                   	push   ebx
c001b047:	e8 b8 85 ff ff       	call   c0013604 <File::close()>
c001b04c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b04e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b051:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b054:	83 c4 0c             	add    esp,0xc
c001b057:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b05e:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b065:	56                   	push   esi
c001b066:	e8 70 fd ff ff       	call   c001addb <Reg::findLineFromLoadedData(char*, char*, char*)>
c001b06b:	89 34 24             	mov    DWORD PTR [esp],esi
c001b06e:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b072:	e8 dc 47 ff ff       	call   c000f853 <free>
c001b077:	83 c4 10             	add    esp,0x10
c001b07a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b07e:	81 c4 20 01 00 00    	add    esp,0x120
c001b084:	5b                   	pop    ebx
c001b085:	5e                   	pop    esi
c001b086:	5f                   	pop    edi
c001b087:	c3                   	ret    

c001b088 <Reg::getLine(char*, char*, char*)>:
c001b088:	57                   	push   edi
c001b089:	56                   	push   esi
c001b08a:	53                   	push   ebx
c001b08b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b08f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b093:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b097:	57                   	push   edi
c001b098:	56                   	push   esi
c001b099:	53                   	push   ebx
c001b09a:	68 8d bd 02 c0       	push   0xc002bd8d
c001b09f:	e8 8f fe ff ff       	call   c001af33 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b0a4:	83 c4 10             	add    esp,0x10
c001b0a7:	84 c0                	test   al,al
c001b0a9:	75 10                	jne    c001b0bb <Reg::getLine(char*, char*, char*)+0x33>
c001b0ab:	57                   	push   edi
c001b0ac:	56                   	push   esi
c001b0ad:	53                   	push   ebx
c001b0ae:	68 b2 bd 02 c0       	push   0xc002bdb2
c001b0b3:	e8 7b fe ff ff       	call   c001af33 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b0b8:	83 c4 10             	add    esp,0x10
c001b0bb:	5b                   	pop    ebx
c001b0bc:	5e                   	pop    esi
c001b0bd:	5f                   	pop    edi
c001b0be:	c3                   	ret    

c001b0bf <Reg::readInt(char*, char*, int*)>:
c001b0bf:	55                   	push   ebp
c001b0c0:	57                   	push   edi
c001b0c1:	56                   	push   esi
c001b0c2:	53                   	push   ebx
c001b0c3:	81 ec f0 00 00 00    	sub    esp,0xf0
c001b0c9:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b0cd:	57                   	push   edi
c001b0ce:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b0d5:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b0dc:	e8 a7 ff ff ff       	call   c001b088 <Reg::getLine(char*, char*, char*)>
c001b0e1:	83 c4 10             	add    esp,0x10
c001b0e4:	84 c0                	test   al,al
c001b0e6:	0f 84 b3 00 00 00    	je     c001b19f <Reg::readInt(char*, char*, int*)+0xe0>
c001b0ec:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001b0f0:	80 fa 2b             	cmp    dl,0x2b
c001b0f3:	74 0c                	je     c001b101 <Reg::readInt(char*, char*, int*)+0x42>
c001b0f5:	80 fa 2d             	cmp    dl,0x2d
c001b0f8:	75 0e                	jne    c001b108 <Reg::readInt(char*, char*, int*)+0x49>
c001b0fa:	ba 01 00 00 00       	mov    edx,0x1
c001b0ff:	eb 0b                	jmp    c001b10c <Reg::readInt(char*, char*, int*)+0x4d>
c001b101:	ba 01 00 00 00       	mov    edx,0x1
c001b106:	eb 02                	jmp    c001b10a <Reg::readInt(char*, char*, int*)+0x4b>
c001b108:	31 d2                	xor    edx,edx
c001b10a:	31 c0                	xor    eax,eax
c001b10c:	be 0a 00 00 00       	mov    esi,0xa
c001b111:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b116:	75 20                	jne    c001b138 <Reg::readInt(char*, char*, int*)+0x79>
c001b118:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b11c:	80 f9 78             	cmp    cl,0x78
c001b11f:	75 0a                	jne    c001b12b <Reg::readInt(char*, char*, int*)+0x6c>
c001b121:	83 c2 02             	add    edx,0x2
c001b124:	be 10 00 00 00       	mov    esi,0x10
c001b129:	eb 0d                	jmp    c001b138 <Reg::readInt(char*, char*, int*)+0x79>
c001b12b:	80 f9 62             	cmp    cl,0x62
c001b12e:	75 08                	jne    c001b138 <Reg::readInt(char*, char*, int*)+0x79>
c001b130:	83 c2 02             	add    edx,0x2
c001b133:	be 02 00 00 00       	mov    esi,0x2
c001b138:	01 d7                	add    edi,edx
c001b13a:	31 d2                	xor    edx,edx
c001b13c:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b13e:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b142:	80 fb 0d             	cmp    bl,0xd
c001b145:	0f 94 c3             	sete   bl
c001b148:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b14d:	0f 94 c1             	sete   cl
c001b150:	08 cb                	or     bl,cl
c001b152:	75 3a                	jne    c001b18e <Reg::readInt(char*, char*, int*)+0xcf>
c001b154:	0f af d6             	imul   edx,esi
c001b157:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b15c:	83 fe 10             	cmp    esi,0x10
c001b15f:	75 26                	jne    c001b187 <Reg::readInt(char*, char*, int*)+0xc8>
c001b161:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b165:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b168:	89 e9                	mov    ecx,ebp
c001b16a:	80 f9 05             	cmp    cl,0x5
c001b16d:	77 06                	ja     c001b175 <Reg::readInt(char*, char*, int*)+0xb6>
c001b16f:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b173:	eb 16                	jmp    c001b18b <Reg::readInt(char*, char*, int*)+0xcc>
c001b175:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b179:	83 e9 61             	sub    ecx,0x61
c001b17c:	80 f9 05             	cmp    cl,0x5
c001b17f:	77 06                	ja     c001b187 <Reg::readInt(char*, char*, int*)+0xc8>
c001b181:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b185:	eb 04                	jmp    c001b18b <Reg::readInt(char*, char*, int*)+0xcc>
c001b187:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b18b:	47                   	inc    edi
c001b18c:	eb ae                	jmp    c001b13c <Reg::readInt(char*, char*, int*)+0x7d>
c001b18e:	84 c0                	test   al,al
c001b190:	74 02                	je     c001b194 <Reg::readInt(char*, char*, int*)+0xd5>
c001b192:	f7 da                	neg    edx
c001b194:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b19b:	89 10                	mov    DWORD PTR [eax],edx
c001b19d:	88 d8                	mov    al,bl
c001b19f:	81 c4 ec 00 00 00    	add    esp,0xec
c001b1a5:	5b                   	pop    ebx
c001b1a6:	5e                   	pop    esi
c001b1a7:	5f                   	pop    edi
c001b1a8:	5d                   	pop    ebp
c001b1a9:	c3                   	ret    

c001b1aa <Reg::readString(char*, char*, char*, int)>:
c001b1aa:	57                   	push   edi
c001b1ab:	56                   	push   esi
c001b1ac:	53                   	push   ebx
c001b1ad:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b1b3:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b1ba:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b1be:	57                   	push   edi
c001b1bf:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b1c6:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b1cd:	e8 b6 fe ff ff       	call   c001b088 <Reg::getLine(char*, char*, char*)>
c001b1d2:	83 c4 10             	add    esp,0x10
c001b1d5:	89 c6                	mov    esi,eax
c001b1d7:	84 c0                	test   al,al
c001b1d9:	74 44                	je     c001b21f <Reg::readString(char*, char*, char*, int)+0x75>
c001b1db:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b1e2:	31 c0                	xor    eax,eax
c001b1e4:	4a                   	dec    edx
c001b1e5:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b1e8:	84 c9                	test   cl,cl
c001b1ea:	74 0f                	je     c001b1fb <Reg::readString(char*, char*, char*, int)+0x51>
c001b1ec:	39 c2                	cmp    edx,eax
c001b1ee:	7e 0b                	jle    c001b1fb <Reg::readString(char*, char*, char*, int)+0x51>
c001b1f0:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b1f3:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b1f8:	40                   	inc    eax
c001b1f9:	eb ea                	jmp    c001b1e5 <Reg::readString(char*, char*, char*, int)+0x3b>
c001b1fb:	83 ec 0c             	sub    esp,0xc
c001b1fe:	53                   	push   ebx
c001b1ff:	e8 90 55 fe ff       	call   c0000794 <strlen>
c001b204:	83 c4 10             	add    esp,0x10
c001b207:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b20c:	75 11                	jne    c001b21f <Reg::readString(char*, char*, char*, int)+0x75>
c001b20e:	83 ec 0c             	sub    esp,0xc
c001b211:	53                   	push   ebx
c001b212:	e8 7d 55 fe ff       	call   c0000794 <strlen>
c001b217:	83 c4 10             	add    esp,0x10
c001b21a:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b21f:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b225:	89 f0                	mov    eax,esi
c001b227:	5b                   	pop    ebx
c001b228:	5e                   	pop    esi
c001b229:	5f                   	pop    edi
c001b22a:	c3                   	ret    

c001b22b <Reg::readBool(char*, char*, bool*)>:
c001b22b:	83 ec 20             	sub    esp,0x20
c001b22e:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b232:	50                   	push   eax
c001b233:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b237:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b23b:	e8 7f fe ff ff       	call   c001b0bf <Reg::readInt(char*, char*, int*)>
c001b240:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b245:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b249:	0f 95 02             	setne  BYTE PTR [edx]
c001b24c:	83 c4 2c             	add    esp,0x2c
c001b24f:	c3                   	ret    

c001b250 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b250:	53                   	push   ebx
c001b251:	83 ec 1c             	sub    esp,0x1c
c001b254:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b258:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b25c:	50                   	push   eax
c001b25d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b261:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b265:	e8 c1 ff ff ff       	call   c001b22b <Reg::readBool(char*, char*, bool*)>
c001b26a:	83 c4 10             	add    esp,0x10
c001b26d:	84 c0                	test   al,al
c001b26f:	74 04                	je     c001b275 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b271:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b275:	88 d8                	mov    al,bl
c001b277:	83 c4 18             	add    esp,0x18
c001b27a:	5b                   	pop    ebx
c001b27b:	c3                   	ret    

c001b27c <Reg::readIntWithDefault(char*, char*, int)>:
c001b27c:	53                   	push   ebx
c001b27d:	83 ec 1c             	sub    esp,0x1c
c001b280:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b284:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b288:	50                   	push   eax
c001b289:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b28d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b291:	e8 29 fe ff ff       	call   c001b0bf <Reg::readInt(char*, char*, int*)>
c001b296:	83 c4 10             	add    esp,0x10
c001b299:	84 c0                	test   al,al
c001b29b:	74 04                	je     c001b2a1 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b29d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b2a1:	89 d8                	mov    eax,ebx
c001b2a3:	83 c4 18             	add    esp,0x18
c001b2a6:	5b                   	pop    ebx
c001b2a7:	c3                   	ret    

c001b2a8 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b2a8:	57                   	push   edi
c001b2a9:	56                   	push   esi
c001b2aa:	53                   	push   ebx
c001b2ab:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b2af:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b2b3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b2b7:	56                   	push   esi
c001b2b8:	53                   	push   ebx
c001b2b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b2bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b2c1:	e8 e4 fe ff ff       	call   c001b1aa <Reg::readString(char*, char*, char*, int)>
c001b2c6:	83 c4 10             	add    esp,0x10
c001b2c9:	84 c0                	test   al,al
c001b2cb:	75 1b                	jne    c001b2e8 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001b2cd:	50                   	push   eax
c001b2ce:	56                   	push   esi
c001b2cf:	4e                   	dec    esi
c001b2d0:	6a 00                	push   0x0
c001b2d2:	53                   	push   ebx
c001b2d3:	e8 a0 54 fe ff       	call   c0000778 <memset>
c001b2d8:	83 c4 0c             	add    esp,0xc
c001b2db:	56                   	push   esi
c001b2dc:	57                   	push   edi
c001b2dd:	53                   	push   ebx
c001b2de:	89 fb                	mov    ebx,edi
c001b2e0:	e8 5f 54 fe ff       	call   c0000744 <memcpy>
c001b2e5:	83 c4 10             	add    esp,0x10
c001b2e8:	89 d8                	mov    eax,ebx
c001b2ea:	5b                   	pop    ebx
c001b2eb:	5e                   	pop    esi
c001b2ec:	5f                   	pop    edi
c001b2ed:	c3                   	ret    

c001b2ee <Sys::eject(regs*)>:
c001b2ee:	83 ec 0c             	sub    esp,0xc
c001b2f1:	83 ca ff             	or     edx,0xffffffff
c001b2f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2f8:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b2fb:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b300:	83 e9 41             	sub    ecx,0x41
c001b303:	83 f9 19             	cmp    ecx,0x19
c001b306:	77 18                	ja     c001b320 <Sys::eject(regs*)+0x32>
c001b308:	8b 0c 8d e0 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1520]
c001b30f:	85 c9                	test   ecx,ecx
c001b311:	74 0d                	je     c001b320 <Sys::eject(regs*)+0x32>
c001b313:	83 ec 0c             	sub    esp,0xc
c001b316:	51                   	push   ecx
c001b317:	e8 74 b4 ff ff       	call   c0016790 <LogicalDisk::eject()>
c001b31c:	83 c4 10             	add    esp,0x10
c001b31f:	99                   	cdq    
c001b320:	83 c4 0c             	add    esp,0xc
c001b323:	c3                   	ret    

c001b324 <Sys::exit(regs*)>:
c001b324:	83 ec 18             	sub    esp,0x18
c001b327:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b32b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b32e:	e8 94 35 00 00       	call   c001e8c7 <terminateTask(int)>
c001b333:	83 c8 ff             	or     eax,0xffffffff
c001b336:	83 c4 1c             	add    esp,0x1c
c001b339:	89 c2                	mov    edx,eax
c001b33b:	c3                   	ret    

c001b33c <Sys::getCwd(regs*)>:
c001b33c:	83 ec 10             	sub    esp,0x10
c001b33f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b343:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b346:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b349:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b34e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b351:	e8 ee 7f ff ff       	call   c0013344 <Fs::getcwd(Process*, char*, int)>
c001b356:	83 c4 1c             	add    esp,0x1c
c001b359:	99                   	cdq    
c001b35a:	c3                   	ret    

c001b35b <Sys::getPID(regs*)>:
c001b35b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b360:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b363:	8b 00                	mov    eax,DWORD PTR [eax]
c001b365:	99                   	cdq    
c001b366:	c3                   	ret    

c001b367 <Sys::getRAMData(regs*)>:
c001b367:	8b 0d 14 e5 02 c0    	mov    ecx,DWORD PTR ds:0xc002e514
c001b36d:	6b 05 10 e5 02 c0 64 	imul   eax,DWORD PTR ds:0xc002e510,0x64
c001b374:	99                   	cdq    
c001b375:	f7 f9                	idiv   ecx
c001b377:	c1 e0 18             	shl    eax,0x18
c001b37a:	09 c8                	or     eax,ecx
c001b37c:	99                   	cdq    
c001b37d:	c3                   	ret    

c001b37e <Sys::loadDLL(regs*)>:
c001b37e:	56                   	push   esi
c001b37f:	53                   	push   ebx
c001b380:	31 d2                	xor    edx,edx
c001b382:	51                   	push   ecx
c001b383:	b8 01 00 00 00       	mov    eax,0x1
c001b388:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b38c:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b390:	0f 84 8c 00 00 00    	je     c001b422 <Sys::loadDLL(regs*)+0xa4>
c001b396:	83 ec 0c             	sub    esp,0xc
c001b399:	68 14 01 00 00       	push   0x114
c001b39e:	e8 a0 44 ff ff       	call   c000f843 <malloc>
c001b3a3:	83 c4 0c             	add    esp,0xc
c001b3a6:	89 c3                	mov    ebx,eax
c001b3a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3ad:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b3b0:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b3b3:	53                   	push   ebx
c001b3b4:	e8 89 81 ff ff       	call   c0013542 <File::File(char const*, Process*)>
c001b3b9:	83 c4 10             	add    esp,0x10
c001b3bc:	31 d2                	xor    edx,edx
c001b3be:	b8 02 00 00 00       	mov    eax,0x2
c001b3c3:	85 db                	test   ebx,ebx
c001b3c5:	74 5b                	je     c001b422 <Sys::loadDLL(regs*)+0xa4>
c001b3c7:	83 ec 0c             	sub    esp,0xc
c001b3ca:	53                   	push   ebx
c001b3cb:	e8 44 84 ff ff       	call   c0013814 <File::exists()>
c001b3d0:	83 c4 10             	add    esp,0x10
c001b3d3:	84 c0                	test   al,al
c001b3d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b3d7:	75 11                	jne    c001b3ea <Sys::loadDLL(regs*)+0x6c>
c001b3d9:	83 ec 0c             	sub    esp,0xc
c001b3dc:	53                   	push   ebx
c001b3dd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b3e0:	83 c4 10             	add    esp,0x10
c001b3e3:	b8 03 00 00 00       	mov    eax,0x3
c001b3e8:	eb 36                	jmp    c001b420 <Sys::loadDLL(regs*)+0xa2>
c001b3ea:	83 ec 0c             	sub    esp,0xc
c001b3ed:	53                   	push   ebx
c001b3ee:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b3f1:	58                   	pop    eax
c001b3f2:	5a                   	pop    edx
c001b3f3:	6a 00                	push   0x0
c001b3f5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b3f8:	e8 c5 23 00 00       	call   c001d7c2 <Thr::loadDLL(char const*, bool)>
c001b3fd:	83 c4 10             	add    esp,0x10
c001b400:	89 c1                	mov    ecx,eax
c001b402:	31 d2                	xor    edx,edx
c001b404:	b8 04 00 00 00       	mov    eax,0x4
c001b409:	85 c9                	test   ecx,ecx
c001b40b:	74 15                	je     c001b422 <Sys::loadDLL(regs*)+0xa4>
c001b40d:	53                   	push   ebx
c001b40e:	53                   	push   ebx
c001b40f:	ff 35 c8 e4 02 c0    	push   DWORD PTR ds:0xc002e4c8
c001b415:	51                   	push   ecx
c001b416:	e8 f6 25 00 00       	call   c001da11 <Thr::executeDLL(unsigned long, void*)>
c001b41b:	83 c4 10             	add    esp,0x10
c001b41e:	31 c0                	xor    eax,eax
c001b420:	31 d2                	xor    edx,edx
c001b422:	59                   	pop    ecx
c001b423:	5b                   	pop    ebx
c001b424:	5e                   	pop    esi
c001b425:	c3                   	ret    

c001b426 <Sys::read(regs*)>:
c001b426:	57                   	push   edi
c001b427:	56                   	push   esi
c001b428:	53                   	push   ebx
c001b429:	83 ec 10             	sub    esp,0x10
c001b42c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b430:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b433:	83 f8 02             	cmp    eax,0x2
c001b436:	77 10                	ja     c001b448 <Sys::read(regs*)+0x22>
c001b438:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b43d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b440:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b446:	eb 0e                	jmp    c001b456 <Sys::read(regs*)+0x30>
c001b448:	83 ec 0c             	sub    esp,0xc
c001b44b:	50                   	push   eax
c001b44c:	e8 d4 65 ff ff       	call   c0011a25 <getFromFileDescriptor(int)>
c001b451:	83 c4 10             	add    esp,0x10
c001b454:	89 c1                	mov    ecx,eax
c001b456:	83 c8 ff             	or     eax,0xffffffff
c001b459:	85 c9                	test   ecx,ecx
c001b45b:	89 c2                	mov    edx,eax
c001b45d:	74 28                	je     c001b487 <Sys::read(regs*)+0x61>
c001b45f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b467:	31 ff                	xor    edi,edi
c001b469:	83 ec 0c             	sub    esp,0xc
c001b46c:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b46e:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b472:	52                   	push   edx
c001b473:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b476:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b479:	57                   	push   edi
c001b47a:	56                   	push   esi
c001b47b:	51                   	push   ecx
c001b47c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b47f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b483:	83 c4 20             	add    esp,0x20
c001b486:	99                   	cdq    
c001b487:	83 c4 10             	add    esp,0x10
c001b48a:	5b                   	pop    ebx
c001b48b:	5e                   	pop    esi
c001b48c:	5f                   	pop    edi
c001b48d:	c3                   	ret    

c001b48e <Sys::sbrk(regs*)>:
c001b48e:	56                   	push   esi
c001b48f:	53                   	push   ebx
c001b490:	50                   	push   eax
c001b491:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b496:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b49a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b49d:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b4a0:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b4a6:	85 db                	test   ebx,ebx
c001b4a8:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b4ab:	74 02                	je     c001b4af <Sys::sbrk(regs*)+0x21>
c001b4ad:	79 06                	jns    c001b4b5 <Sys::sbrk(regs*)+0x27>
c001b4af:	89 f0                	mov    eax,esi
c001b4b1:	31 d2                	xor    edx,edx
c001b4b3:	eb 2a                	jmp    c001b4df <Sys::sbrk(regs*)+0x51>
c001b4b5:	83 c8 ff             	or     eax,0xffffffff
c001b4b8:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b4be:	89 c2                	mov    edx,eax
c001b4c0:	77 1d                	ja     c001b4df <Sys::sbrk(regs*)+0x51>
c001b4c2:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b4c8:	50                   	push   eax
c001b4c9:	c1 ea 0c             	shr    edx,0xc
c001b4cc:	68 07 0c 00 00       	push   0xc07
c001b4d1:	52                   	push   edx
c001b4d2:	51                   	push   ecx
c001b4d3:	e8 a2 70 ff ff       	call   c001257a <VAS::allocatePages(int, int)>
c001b4d8:	89 f0                	mov    eax,esi
c001b4da:	31 d2                	xor    edx,edx
c001b4dc:	83 c4 10             	add    esp,0x10
c001b4df:	59                   	pop    ecx
c001b4e0:	5b                   	pop    ebx
c001b4e1:	5e                   	pop    esi
c001b4e2:	c3                   	ret    

c001b4e3 <Sys::setCwd(regs*)>:
c001b4e3:	83 ec 14             	sub    esp,0x14
c001b4e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b4ea:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b4ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4f2:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b4f5:	e8 b9 83 ff ff       	call   c00138b3 <Fs::setcwd(Process*, char*)>
c001b4fa:	83 c4 1c             	add    esp,0x1c
c001b4fd:	99                   	cdq    
c001b4fe:	c3                   	ret    

c001b4ff <Sys::setTime(regs*)>:
c001b4ff:	55                   	push   ebp
c001b500:	31 d2                	xor    edx,edx
c001b502:	57                   	push   edi
c001b503:	bf 18 00 00 00       	mov    edi,0x18
c001b508:	56                   	push   esi
c001b509:	53                   	push   ebx
c001b50a:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b50f:	83 ec 30             	sub    esp,0x30
c001b512:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b516:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b519:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b51c:	f7 f3                	div    ebx
c001b51e:	89 d6                	mov    esi,edx
c001b520:	31 d2                	xor    edx,edx
c001b522:	f7 f3                	div    ebx
c001b524:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b527:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b52b:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b530:	31 d2                	xor    edx,edx
c001b532:	f7 f3                	div    ebx
c001b534:	31 d2                	xor    edx,edx
c001b536:	bb 0c 00 00 00       	mov    ebx,0xc
c001b53b:	f7 f7                	div    edi
c001b53d:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b540:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b544:	0f b7 cd             	movzx  ecx,bp
c001b547:	56                   	push   esi
c001b548:	89 c7                	mov    edi,eax
c001b54a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b54e:	c1 e6 10             	shl    esi,0x10
c001b551:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b555:	83 e7 1f             	and    edi,0x1f
c001b558:	51                   	push   ecx
c001b559:	47                   	inc    edi
c001b55a:	c1 e8 05             	shr    eax,0x5
c001b55d:	31 d2                	xor    edx,edx
c001b55f:	f7 f3                	div    ebx
c001b561:	31 db                	xor    ebx,ebx
c001b563:	52                   	push   edx
c001b564:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b568:	57                   	push   edi
c001b569:	68 cd bd 02 c0       	push   0xc002bdcd
c001b56e:	e8 77 7a ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001b573:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b577:	89 f8                	mov    eax,edi
c001b579:	31 c9                	xor    ecx,ecx
c001b57b:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b57f:	88 c1                	mov    cl,al
c001b581:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b587:	88 d5                	mov    ch,dl
c001b589:	c1 e0 10             	shl    eax,0x10
c001b58c:	0f b7 d1             	movzx  edx,cx
c001b58f:	09 c2                	or     edx,eax
c001b591:	89 d8                	mov    eax,ebx
c001b593:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b598:	09 f0                	or     eax,esi
c001b59a:	89 c3                	mov    ebx,eax
c001b59c:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b5a0:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b5a4:	83 c4 18             	add    esp,0x18
c001b5a7:	53                   	push   ebx
c001b5a8:	52                   	push   edx
c001b5a9:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b5ad:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b5b1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b5b5:	e8 13 8a ff ff       	call   c0013fcd <datetimeToSeconds(datetime_t)>
c001b5ba:	83 c4 0c             	add    esp,0xc
c001b5bd:	52                   	push   edx
c001b5be:	50                   	push   eax
c001b5bf:	56                   	push   esi
c001b5c0:	e8 8f 8b ff ff       	call   c0014154 <secondsToDatetime(unsigned long long)>
c001b5c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b5c9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b5cd:	51                   	push   ecx
c001b5ce:	89 d6                	mov    esi,edx
c001b5d0:	51                   	push   ecx
c001b5d1:	c1 ee 10             	shr    esi,0x10
c001b5d4:	89 f3                	mov    ebx,esi
c001b5d6:	0f b6 f3             	movzx  esi,bl
c001b5d9:	56                   	push   esi
c001b5da:	0f b6 f6             	movzx  esi,dh
c001b5dd:	0f b6 d2             	movzx  edx,dl
c001b5e0:	56                   	push   esi
c001b5e1:	52                   	push   edx
c001b5e2:	89 c2                	mov    edx,eax
c001b5e4:	c1 ea 10             	shr    edx,0x10
c001b5e7:	52                   	push   edx
c001b5e8:	0f b6 d4             	movzx  edx,ah
c001b5eb:	0f b6 c0             	movzx  eax,al
c001b5ee:	52                   	push   edx
c001b5ef:	50                   	push   eax
c001b5f0:	68 e9 bd 02 c0       	push   0xc002bde9
c001b5f5:	e8 f0 79 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001b5fa:	83 c4 2c             	add    esp,0x2c
c001b5fd:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c001b602:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b606:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b60a:	53                   	push   ebx
c001b60b:	51                   	push   ecx
c001b60c:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b612:	e8 dd 8a ff ff       	call   c00140f4 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b617:	83 f0 01             	xor    eax,0x1
c001b61a:	31 d2                	xor    edx,edx
c001b61c:	0f b6 c0             	movzx  eax,al
c001b61f:	83 c4 3c             	add    esp,0x3c
c001b622:	5b                   	pop    ebx
c001b623:	5e                   	pop    esi
c001b624:	5f                   	pop    edi
c001b625:	5d                   	pop    ebp
c001b626:	c3                   	ret    

c001b627 <Sys::timezone(regs*)>:
c001b627:	53                   	push   ebx
c001b628:	83 ec 08             	sub    esp,0x8
c001b62b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b62f:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b633:	75 17                	jne    c001b64c <Sys::timezone(regs*)+0x25>
c001b635:	83 ec 0c             	sub    esp,0xc
c001b638:	68 05 be 02 c0       	push   0xc002be05
c001b63d:	e8 a8 79 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001b642:	83 c8 ff             	or     eax,0xffffffff
c001b645:	83 c4 10             	add    esp,0x10
c001b648:	89 c2                	mov    edx,eax
c001b64a:	eb 20                	jmp    c001b66c <Sys::timezone(regs*)+0x45>
c001b64c:	83 ec 0c             	sub    esp,0xc
c001b64f:	68 3d be 02 c0       	push   0xc002be3d
c001b654:	e8 91 79 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001b659:	58                   	pop    eax
c001b65a:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b65d:	e8 f4 87 ff ff       	call   c0013e56 <User::loadClockSettings(int)>
c001b662:	83 c4 10             	add    esp,0x10
c001b665:	b8 01 00 00 00       	mov    eax,0x1
c001b66a:	31 d2                	xor    edx,edx
c001b66c:	83 c4 08             	add    esp,0x8
c001b66f:	5b                   	pop    ebx
c001b670:	c3                   	ret    

c001b671 <Sys::write(regs*)>:
c001b671:	57                   	push   edi
c001b672:	56                   	push   esi
c001b673:	53                   	push   ebx
c001b674:	83 ec 10             	sub    esp,0x10
c001b677:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b67b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b67e:	83 f8 02             	cmp    eax,0x2
c001b681:	77 10                	ja     c001b693 <Sys::write(regs*)+0x22>
c001b683:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b688:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b68b:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b691:	eb 0e                	jmp    c001b6a1 <Sys::write(regs*)+0x30>
c001b693:	83 ec 0c             	sub    esp,0xc
c001b696:	50                   	push   eax
c001b697:	e8 89 63 ff ff       	call   c0011a25 <getFromFileDescriptor(int)>
c001b69c:	83 c4 10             	add    esp,0x10
c001b69f:	89 c1                	mov    ecx,eax
c001b6a1:	83 c8 ff             	or     eax,0xffffffff
c001b6a4:	85 c9                	test   ecx,ecx
c001b6a6:	89 c2                	mov    edx,eax
c001b6a8:	74 28                	je     c001b6d2 <Sys::write(regs*)+0x61>
c001b6aa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b6b2:	31 ff                	xor    edi,edi
c001b6b4:	83 ec 0c             	sub    esp,0xc
c001b6b7:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b6b9:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b6bd:	52                   	push   edx
c001b6be:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b6c1:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b6c4:	57                   	push   edi
c001b6c5:	56                   	push   esi
c001b6c6:	51                   	push   ecx
c001b6c7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b6ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b6ce:	83 c4 20             	add    esp,0x20
c001b6d1:	99                   	cdq    
c001b6d2:	83 c4 10             	add    esp,0x10
c001b6d5:	5b                   	pop    ebx
c001b6d6:	5e                   	pop    esi
c001b6d7:	5f                   	pop    edi
c001b6d8:	c3                   	ret    

c001b6d9 <Sys::wsbe(regs*)>:
c001b6d9:	57                   	push   edi
c001b6da:	b9 0b 00 00 00       	mov    ecx,0xb
c001b6df:	56                   	push   esi
c001b6e0:	be 7c be 02 c0       	mov    esi,0xc002be7c
c001b6e5:	53                   	push   ebx
c001b6e6:	83 ec 30             	sub    esp,0x30
c001b6e9:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b6ed:	fc                   	cld    
c001b6ee:	83 ec 0c             	sub    esp,0xc
c001b6f1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b6f3:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b6f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6fc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b6ff:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b705:	8b 06                	mov    eax,DWORD PTR [esi]
c001b707:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b70a:	57                   	push   edi
c001b70b:	e8 84 50 fe ff       	call   c0000794 <strlen>
c001b710:	5a                   	pop    edx
c001b711:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b715:	52                   	push   edx
c001b716:	31 d2                	xor    edx,edx
c001b718:	57                   	push   edi
c001b719:	52                   	push   edx
c001b71a:	50                   	push   eax
c001b71b:	56                   	push   esi
c001b71c:	ff d3                	call   ebx
c001b71e:	83 c4 14             	add    esp,0x14
c001b721:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b725:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b728:	e8 9a 31 00 00       	call   c001e8c7 <terminateTask(int)>
c001b72d:	83 c4 40             	add    esp,0x40
c001b730:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b735:	5b                   	pop    ebx
c001b736:	31 d2                	xor    edx,edx
c001b738:	5e                   	pop    esi
c001b739:	5f                   	pop    edi
c001b73a:	c3                   	ret    

c001b73b <Sys::yield(regs*)>:
c001b73b:	57                   	push   edi
c001b73c:	56                   	push   esi
c001b73d:	53                   	push   ebx
c001b73e:	e8 41 27 00 00       	call   c001de84 <lockScheduler()>
c001b743:	e8 78 2a 00 00       	call   c001e1c0 <schedule()>
c001b748:	e8 39 27 00 00       	call   c001de86 <unlockScheduler()>
c001b74d:	8b 35 50 eb 02 c0    	mov    esi,DWORD PTR ds:0xc002eb50
c001b753:	8b 3d 54 eb 02 c0    	mov    edi,DWORD PTR ds:0xc002eb54
c001b759:	89 f0                	mov    eax,esi
c001b75b:	89 fb                	mov    ebx,edi
c001b75d:	89 f1                	mov    ecx,esi
c001b75f:	c1 e0 07             	shl    eax,0x7
c001b762:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b766:	25 80 30 0f 00       	and    eax,0xf3080
c001b76b:	c1 eb 17             	shr    ebx,0x17
c001b76e:	31 c8                	xor    eax,ecx
c001b770:	89 da                	mov    edx,ebx
c001b772:	5b                   	pop    ebx
c001b773:	5e                   	pop    esi
c001b774:	5f                   	pop    edi
c001b775:	c3                   	ret    

c001b776 <sysCallSeekDir(regs*)>:
c001b776:	31 c0                	xor    eax,eax
c001b778:	31 d2                	xor    edx,edx
c001b77a:	c3                   	ret    

c001b77b <sysCallTellDir(regs*)>:
c001b77b:	31 c0                	xor    eax,eax
c001b77d:	31 d2                	xor    edx,edx
c001b77f:	c3                   	ret    

c001b780 <sysCallVerify(regs*)>:
c001b780:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b784:	31 d2                	xor    edx,edx
c001b786:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b789:	c3                   	ret    

c001b78a <sysFormatDisk(regs*)>:
c001b78a:	56                   	push   esi
c001b78b:	53                   	push   ebx
c001b78c:	53                   	push   ebx
c001b78d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b791:	8b 1d 50 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e650
c001b797:	eb 25                	jmp    c001b7be <sysFormatDisk(regs*)+0x34>
c001b799:	83 ec 0c             	sub    esp,0xc
c001b79c:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b79f:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b7a1:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b7a4:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b7a7:	50                   	push   eax
c001b7a8:	ff 34 85 e0 ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd1520]
c001b7af:	53                   	push   ebx
c001b7b0:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b7b3:	83 c4 20             	add    esp,0x20
c001b7b6:	83 f8 08             	cmp    eax,0x8
c001b7b9:	75 12                	jne    c001b7cd <sysFormatDisk(regs*)+0x43>
c001b7bb:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b7be:	85 db                	test   ebx,ebx
c001b7c0:	75 d7                	jne    c001b799 <sysFormatDisk(regs*)+0xf>
c001b7c2:	59                   	pop    ecx
c001b7c3:	b8 03 00 00 00       	mov    eax,0x3
c001b7c8:	31 d2                	xor    edx,edx
c001b7ca:	5b                   	pop    ebx
c001b7cb:	5e                   	pop    esi
c001b7cc:	c3                   	ret    
c001b7cd:	85 c0                	test   eax,eax
c001b7cf:	74 1b                	je     c001b7ec <sysFormatDisk(regs*)+0x62>
c001b7d1:	83 f8 09             	cmp    eax,0x9
c001b7d4:	74 0b                	je     c001b7e1 <sysFormatDisk(regs*)+0x57>
c001b7d6:	59                   	pop    ecx
c001b7d7:	b8 02 00 00 00       	mov    eax,0x2
c001b7dc:	31 d2                	xor    edx,edx
c001b7de:	5b                   	pop    ebx
c001b7df:	5e                   	pop    esi
c001b7e0:	c3                   	ret    
c001b7e1:	59                   	pop    ecx
c001b7e2:	b8 01 00 00 00       	mov    eax,0x1
c001b7e7:	31 d2                	xor    edx,edx
c001b7e9:	5b                   	pop    ebx
c001b7ea:	5e                   	pop    esi
c001b7eb:	c3                   	ret    
c001b7ec:	59                   	pop    ecx
c001b7ed:	31 c0                	xor    eax,eax
c001b7ef:	31 d2                	xor    edx,edx
c001b7f1:	5b                   	pop    ebx
c001b7f2:	5e                   	pop    esi
c001b7f3:	c3                   	ret    

c001b7f4 <sysSetDiskVolumeLabel(regs*)>:
c001b7f4:	56                   	push   esi
c001b7f5:	53                   	push   ebx
c001b7f6:	53                   	push   ebx
c001b7f7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b7fb:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b7fe:	83 f8 19             	cmp    eax,0x19
c001b801:	77 29                	ja     c001b82c <sysSetDiskVolumeLabel(regs*)+0x38>
c001b803:	8b 0c 85 e0 ea 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1520]
c001b80a:	85 c9                	test   ecx,ecx
c001b80c:	74 1e                	je     c001b82c <sysSetDiskVolumeLabel(regs*)+0x38>
c001b80e:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b811:	85 d2                	test   edx,edx
c001b813:	74 17                	je     c001b82c <sysSetDiskVolumeLabel(regs*)+0x38>
c001b815:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b81b:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b81d:	52                   	push   edx
c001b81e:	50                   	push   eax
c001b81f:	51                   	push   ecx
c001b820:	53                   	push   ebx
c001b821:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b824:	83 c4 10             	add    esp,0x10
c001b827:	99                   	cdq    
c001b828:	59                   	pop    ecx
c001b829:	5b                   	pop    ebx
c001b82a:	5e                   	pop    esi
c001b82b:	c3                   	ret    
c001b82c:	59                   	pop    ecx
c001b82d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b832:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b837:	5b                   	pop    ebx
c001b838:	5e                   	pop    esi
c001b839:	c3                   	ret    

c001b83a <sysGetDiskVolumeLabel(regs*)>:
c001b83a:	57                   	push   edi
c001b83b:	56                   	push   esi
c001b83c:	53                   	push   ebx
c001b83d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b841:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b844:	83 fa 19             	cmp    edx,0x19
c001b847:	77 34                	ja     c001b87d <sysGetDiskVolumeLabel(regs*)+0x43>
c001b849:	8b 0c 95 e0 ea 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd1520]
c001b850:	85 c9                	test   ecx,ecx
c001b852:	74 29                	je     c001b87d <sysGetDiskVolumeLabel(regs*)+0x43>
c001b854:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b857:	85 db                	test   ebx,ebx
c001b859:	74 22                	je     c001b87d <sysGetDiskVolumeLabel(regs*)+0x43>
c001b85b:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b85e:	85 c0                	test   eax,eax
c001b860:	74 1b                	je     c001b87d <sysGetDiskVolumeLabel(regs*)+0x43>
c001b862:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b868:	83 ec 0c             	sub    esp,0xc
c001b86b:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b86d:	50                   	push   eax
c001b86e:	53                   	push   ebx
c001b86f:	52                   	push   edx
c001b870:	51                   	push   ecx
c001b871:	56                   	push   esi
c001b872:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b875:	83 c4 20             	add    esp,0x20
c001b878:	99                   	cdq    
c001b879:	5b                   	pop    ebx
c001b87a:	5e                   	pop    esi
c001b87b:	5f                   	pop    edi
c001b87c:	c3                   	ret    
c001b87d:	5b                   	pop    ebx
c001b87e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b883:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b888:	5e                   	pop    esi
c001b889:	5f                   	pop    edi
c001b88a:	c3                   	ret    

c001b88b <sysShutdown(regs*)>:
c001b88b:	83 ec 0c             	sub    esp,0xc
c001b88e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b892:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b895:	85 c0                	test   eax,eax
c001b897:	74 18                	je     c001b8b1 <sysShutdown(regs*)+0x26>
c001b899:	83 f8 01             	cmp    eax,0x1
c001b89c:	74 38                	je     c001b8d6 <sysShutdown(regs*)+0x4b>
c001b89e:	83 f8 02             	cmp    eax,0x2
c001b8a1:	74 24                	je     c001b8c7 <sysShutdown(regs*)+0x3c>
c001b8a3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b8a8:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b8ad:	83 c4 0c             	add    esp,0xc
c001b8b0:	c3                   	ret    
c001b8b1:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c001b8b6:	8b 10                	mov    edx,DWORD PTR [eax]
c001b8b8:	6a 00                	push   0x0
c001b8ba:	6a 00                	push   0x0
c001b8bc:	6a 00                	push   0x0
c001b8be:	50                   	push   eax
c001b8bf:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b8c2:	83 c4 10             	add    esp,0x10
c001b8c5:	eb dc                	jmp    c001b8a3 <sysShutdown(regs*)+0x18>
c001b8c7:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c001b8cc:	8b 10                	mov    edx,DWORD PTR [eax]
c001b8ce:	6a 00                	push   0x0
c001b8d0:	6a 00                	push   0x0
c001b8d2:	6a 01                	push   0x1
c001b8d4:	eb e8                	jmp    c001b8be <sysShutdown(regs*)+0x33>
c001b8d6:	a1 80 0b 03 c0       	mov    eax,ds:0xc0030b80
c001b8db:	85 c0                	test   eax,eax
c001b8dd:	74 02                	je     c001b8e1 <sysShutdown(regs*)+0x56>
c001b8df:	ff d0                	call   eax
c001b8e1:	31 c0                	xor    eax,eax
c001b8e3:	31 d2                	xor    edx,edx
c001b8e5:	83 c4 0c             	add    esp,0xc
c001b8e8:	c3                   	ret    

c001b8e9 <sysCallRealpath(regs*)>:
c001b8e9:	83 ec 0c             	sub    esp,0xc
c001b8ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8f0:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b8f3:	85 d2                	test   edx,edx
c001b8f5:	74 07                	je     c001b8fe <sysCallRealpath(regs*)+0x15>
c001b8f7:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b8fa:	85 c0                	test   eax,eax
c001b8fc:	75 0b                	jne    c001b909 <sysCallRealpath(regs*)+0x20>
c001b8fe:	b8 01 00 00 00       	mov    eax,0x1
c001b903:	31 d2                	xor    edx,edx
c001b905:	83 c4 0c             	add    esp,0xc
c001b908:	c3                   	ret    
c001b909:	51                   	push   ecx
c001b90a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b910:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b913:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b919:	51                   	push   ecx
c001b91a:	52                   	push   edx
c001b91b:	50                   	push   eax
c001b91c:	e8 77 7a ff ff       	call   c0013398 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b921:	83 c4 10             	add    esp,0x10
c001b924:	31 c0                	xor    eax,eax
c001b926:	31 d2                	xor    edx,edx
c001b928:	83 c4 0c             	add    esp,0xc
c001b92b:	c3                   	ret    

c001b92c <sysCallGetArgc(regs*)>:
c001b92c:	83 ec 14             	sub    esp,0x14
c001b92f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b934:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b937:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001b93d:	68 a8 be 02 c0       	push   0xc002bea8
c001b942:	e8 a3 76 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001b947:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b94c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b94f:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b955:	83 c4 1c             	add    esp,0x1c
c001b958:	99                   	cdq    
c001b959:	c3                   	ret    

c001b95a <sysCallReadDir(regs*)>:
c001b95a:	53                   	push   ebx
c001b95b:	83 ec 18             	sub    esp,0x18
c001b95e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b962:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b965:	83 f8 02             	cmp    eax,0x2
c001b968:	76 53                	jbe    c001b9bd <sysCallReadDir(regs*)+0x63>
c001b96a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b96d:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b973:	77 4f                	ja     c001b9c4 <sysCallReadDir(regs*)+0x6a>
c001b975:	83 ec 0c             	sub    esp,0xc
c001b978:	50                   	push   eax
c001b979:	e8 a7 60 ff ff       	call   c0011a25 <getFromFileDescriptor(int)>
c001b97e:	83 c4 10             	add    esp,0x10
c001b981:	85 c0                	test   eax,eax
c001b983:	74 50                	je     c001b9d5 <sysCallReadDir(regs*)+0x7b>
c001b985:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b98d:	83 ec 0c             	sub    esp,0xc
c001b990:	8b 10                	mov    edx,DWORD PTR [eax]
c001b992:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b996:	51                   	push   ecx
c001b997:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b99a:	6a 00                	push   0x0
c001b99c:	68 10 01 00 00       	push   0x110
c001b9a1:	50                   	push   eax
c001b9a2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b9a5:	83 c4 20             	add    esp,0x20
c001b9a8:	85 c0                	test   eax,eax
c001b9aa:	74 38                	je     c001b9e4 <sysCallReadDir(regs*)+0x8a>
c001b9ac:	83 f8 07             	cmp    eax,0x7
c001b9af:	74 0c                	je     c001b9bd <sysCallReadDir(regs*)+0x63>
c001b9b1:	b8 02 00 00 00       	mov    eax,0x2
c001b9b6:	31 d2                	xor    edx,edx
c001b9b8:	83 c4 18             	add    esp,0x18
c001b9bb:	5b                   	pop    ebx
c001b9bc:	c3                   	ret    
c001b9bd:	b8 01 00 00 00       	mov    eax,0x1
c001b9c2:	eb f2                	jmp    c001b9b6 <sysCallReadDir(regs*)+0x5c>
c001b9c4:	83 ec 08             	sub    esp,0x8
c001b9c7:	52                   	push   edx
c001b9c8:	68 c0 bf 02 c0       	push   0xc002bfc0
c001b9cd:	e8 18 76 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001b9d2:	83 c4 10             	add    esp,0x10
c001b9d5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b9da:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b9df:	83 c4 18             	add    esp,0x18
c001b9e2:	5b                   	pop    ebx
c001b9e3:	c3                   	ret    
c001b9e4:	31 c0                	xor    eax,eax
c001b9e6:	eb ce                	jmp    c001b9b6 <sysCallReadDir(regs*)+0x5c>

c001b9e8 <sysCallIsATTY(regs*)>:
c001b9e8:	83 ec 0c             	sub    esp,0xc
c001b9eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9ef:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b9f2:	83 f8 02             	cmp    eax,0x2
c001b9f5:	76 07                	jbe    c001b9fe <sysCallIsATTY(regs*)+0x16>
c001b9f7:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b9fc:	75 26                	jne    c001ba24 <sysCallIsATTY(regs*)+0x3c>
c001b9fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba03:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ba06:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ba0c:	85 c0                	test   eax,eax
c001ba0e:	74 24                	je     c001ba34 <sysCallIsATTY(regs*)+0x4c>
c001ba10:	83 ec 0c             	sub    esp,0xc
c001ba13:	8b 10                	mov    edx,DWORD PTR [eax]
c001ba15:	50                   	push   eax
c001ba16:	ff 12                	call   DWORD PTR [edx]
c001ba18:	31 d2                	xor    edx,edx
c001ba1a:	0f b6 c0             	movzx  eax,al
c001ba1d:	83 c4 10             	add    esp,0x10
c001ba20:	83 c4 0c             	add    esp,0xc
c001ba23:	c3                   	ret    
c001ba24:	83 ec 0c             	sub    esp,0xc
c001ba27:	50                   	push   eax
c001ba28:	e8 f8 5f ff ff       	call   c0011a25 <getFromFileDescriptor(int)>
c001ba2d:	83 c4 10             	add    esp,0x10
c001ba30:	85 c0                	test   eax,eax
c001ba32:	75 dc                	jne    c001ba10 <sysCallIsATTY(regs*)+0x28>
c001ba34:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba39:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba3e:	83 c4 0c             	add    esp,0xc
c001ba41:	c3                   	ret    

c001ba42 <sysCallSeek(regs*)>:
c001ba42:	53                   	push   ebx
c001ba43:	83 ec 08             	sub    esp,0x8
c001ba46:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba4a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba4d:	83 f8 02             	cmp    eax,0x2
c001ba50:	76 4a                	jbe    c001ba9c <sysCallSeek(regs*)+0x5a>
c001ba52:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ba57:	77 32                	ja     c001ba8b <sysCallSeek(regs*)+0x49>
c001ba59:	83 ec 0c             	sub    esp,0xc
c001ba5c:	50                   	push   eax
c001ba5d:	e8 c3 5f ff ff       	call   c0011a25 <getFromFileDescriptor(int)>
c001ba62:	83 c4 0c             	add    esp,0xc
c001ba65:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001ba68:	31 db                	xor    ebx,ebx
c001ba6a:	53                   	push   ebx
c001ba6b:	51                   	push   ecx
c001ba6c:	50                   	push   eax
c001ba6d:	e8 f2 7b ff ff       	call   c0013664 <File::seek(unsigned long long)>
c001ba72:	83 c4 10             	add    esp,0x10
c001ba75:	85 c0                	test   eax,eax
c001ba77:	0f 95 c0             	setne  al
c001ba7a:	31 d2                	xor    edx,edx
c001ba7c:	0f b6 c0             	movzx  eax,al
c001ba7f:	f7 d8                	neg    eax
c001ba81:	83 d2 00             	adc    edx,0x0
c001ba84:	83 c4 08             	add    esp,0x8
c001ba87:	f7 da                	neg    edx
c001ba89:	5b                   	pop    ebx
c001ba8a:	c3                   	ret    
c001ba8b:	83 ec 08             	sub    esp,0x8
c001ba8e:	50                   	push   eax
c001ba8f:	68 b3 be 02 c0       	push   0xc002beb3
c001ba94:	e8 51 75 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001ba99:	83 c4 10             	add    esp,0x10
c001ba9c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001baa1:	ba ff ff ff ff       	mov    edx,0xffffffff
c001baa6:	83 c4 08             	add    esp,0x8
c001baa9:	5b                   	pop    ebx
c001baaa:	c3                   	ret    

c001baab <sysCallTell(regs*)>:
c001baab:	53                   	push   ebx
c001baac:	83 ec 08             	sub    esp,0x8
c001baaf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bab3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bab6:	83 f8 02             	cmp    eax,0x2
c001bab9:	76 5e                	jbe    c001bb19 <sysCallTell(regs*)+0x6e>
c001babb:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bac0:	77 2d                	ja     c001baef <sysCallTell(regs*)+0x44>
c001bac2:	83 ec 0c             	sub    esp,0xc
c001bac5:	50                   	push   eax
c001bac6:	e8 5a 5f ff ff       	call   c0011a25 <getFromFileDescriptor(int)>
c001bacb:	5a                   	pop    edx
c001bacc:	59                   	pop    ecx
c001bacd:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bad0:	50                   	push   eax
c001bad1:	e8 e4 7b ff ff       	call   c00136ba <File::tell(unsigned long long*)>
c001bad6:	83 c4 10             	add    esp,0x10
c001bad9:	85 c0                	test   eax,eax
c001badb:	0f 95 c0             	setne  al
c001bade:	31 d2                	xor    edx,edx
c001bae0:	0f b6 c0             	movzx  eax,al
c001bae3:	f7 d8                	neg    eax
c001bae5:	83 d2 00             	adc    edx,0x0
c001bae8:	83 c4 08             	add    esp,0x8
c001baeb:	f7 da                	neg    edx
c001baed:	5b                   	pop    ebx
c001baee:	c3                   	ret    
c001baef:	83 ec 08             	sub    esp,0x8
c001baf2:	50                   	push   eax
c001baf3:	68 cd be 02 c0       	push   0xc002becd
c001baf8:	e8 ed 74 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001bafd:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bb00:	83 c4 10             	add    esp,0x10
c001bb03:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bb09:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bb10:	31 d2                	xor    edx,edx
c001bb12:	31 c0                	xor    eax,eax
c001bb14:	83 c4 08             	add    esp,0x8
c001bb17:	5b                   	pop    ebx
c001bb18:	c3                   	ret    
c001bb19:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb1e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb23:	83 c4 08             	add    esp,0x8
c001bb26:	5b                   	pop    ebx
c001bb27:	c3                   	ret    

c001bb28 <sysCallSize(regs*)>:
c001bb28:	53                   	push   ebx
c001bb29:	83 ec 18             	sub    esp,0x18
c001bb2c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bb30:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bb33:	83 f8 02             	cmp    eax,0x2
c001bb36:	76 64                	jbe    c001bb9c <sysCallSize(regs*)+0x74>
c001bb38:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bb3d:	77 33                	ja     c001bb72 <sysCallSize(regs*)+0x4a>
c001bb3f:	83 ec 0c             	sub    esp,0xc
c001bb42:	50                   	push   eax
c001bb43:	e8 dd 5e ff ff       	call   c0011a25 <getFromFileDescriptor(int)>
c001bb48:	83 c4 0c             	add    esp,0xc
c001bb4b:	8d 54 24 13          	lea    edx,[esp+0x13]
c001bb4f:	52                   	push   edx
c001bb50:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bb53:	50                   	push   eax
c001bb54:	e8 f9 7c ff ff       	call   c0013852 <File::stat(unsigned long long*, bool*)>
c001bb59:	83 c4 10             	add    esp,0x10
c001bb5c:	85 c0                	test   eax,eax
c001bb5e:	0f 95 c0             	setne  al
c001bb61:	31 d2                	xor    edx,edx
c001bb63:	0f b6 c0             	movzx  eax,al
c001bb66:	f7 d8                	neg    eax
c001bb68:	83 d2 00             	adc    edx,0x0
c001bb6b:	83 c4 18             	add    esp,0x18
c001bb6e:	f7 da                	neg    edx
c001bb70:	5b                   	pop    ebx
c001bb71:	c3                   	ret    
c001bb72:	83 ec 08             	sub    esp,0x8
c001bb75:	50                   	push   eax
c001bb76:	68 e7 be 02 c0       	push   0xc002bee7
c001bb7b:	e8 6a 74 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001bb80:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bb83:	83 c4 10             	add    esp,0x10
c001bb86:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bb8c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bb93:	31 d2                	xor    edx,edx
c001bb95:	31 c0                	xor    eax,eax
c001bb97:	83 c4 18             	add    esp,0x18
c001bb9a:	5b                   	pop    ebx
c001bb9b:	c3                   	ret    
c001bb9c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bba1:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bba6:	83 c4 18             	add    esp,0x18
c001bba9:	5b                   	pop    ebx
c001bbaa:	c3                   	ret    

c001bbab <sysCallSizeFromFilename(regs*)>:
c001bbab:	57                   	push   edi
c001bbac:	56                   	push   esi
c001bbad:	53                   	push   ebx
c001bbae:	83 ec 20             	sub    esp,0x20
c001bbb1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bbb5:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001bbb8:	83 fb 02             	cmp    ebx,0x2
c001bbbb:	0f 86 99 00 00 00    	jbe    c001bc5a <sysCallSizeFromFilename(regs*)+0xaf>
c001bbc1:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001bbc7:	77 65                	ja     c001bc2e <sysCallSizeFromFilename(regs*)+0x83>
c001bbc9:	83 ec 0c             	sub    esp,0xc
c001bbcc:	68 14 01 00 00       	push   0x114
c001bbd1:	e8 6d 3c ff ff       	call   c000f843 <malloc>
c001bbd6:	83 c4 0c             	add    esp,0xc
c001bbd9:	89 c6                	mov    esi,eax
c001bbdb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bbe0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bbe3:	53                   	push   ebx
c001bbe4:	56                   	push   esi
c001bbe5:	e8 58 79 ff ff       	call   c0013542 <File::File(char const*, Process*)>
c001bbea:	83 c4 0c             	add    esp,0xc
c001bbed:	8d 44 24 23          	lea    eax,[esp+0x23]
c001bbf1:	50                   	push   eax
c001bbf2:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001bbf5:	56                   	push   esi
c001bbf6:	e8 57 7c ff ff       	call   c0013852 <File::stat(unsigned long long*, bool*)>
c001bbfb:	83 c4 10             	add    esp,0x10
c001bbfe:	85 f6                	test   esi,esi
c001bc00:	74 14                	je     c001bc16 <sysCallSizeFromFilename(regs*)+0x6b>
c001bc02:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bc06:	8b 16                	mov    edx,DWORD PTR [esi]
c001bc08:	83 ec 0c             	sub    esp,0xc
c001bc0b:	56                   	push   esi
c001bc0c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bc0f:	83 c4 10             	add    esp,0x10
c001bc12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bc16:	85 c0                	test   eax,eax
c001bc18:	0f 95 c0             	setne  al
c001bc1b:	31 d2                	xor    edx,edx
c001bc1d:	0f b6 c0             	movzx  eax,al
c001bc20:	f7 d8                	neg    eax
c001bc22:	83 d2 00             	adc    edx,0x0
c001bc25:	83 c4 20             	add    esp,0x20
c001bc28:	f7 da                	neg    edx
c001bc2a:	5b                   	pop    ebx
c001bc2b:	5e                   	pop    esi
c001bc2c:	5f                   	pop    edi
c001bc2d:	c3                   	ret    
c001bc2e:	83 ec 08             	sub    esp,0x8
c001bc31:	53                   	push   ebx
c001bc32:	68 e7 be 02 c0       	push   0xc002bee7
c001bc37:	e8 ae 73 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001bc3c:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001bc3f:	83 c4 10             	add    esp,0x10
c001bc42:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bc48:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bc4f:	31 d2                	xor    edx,edx
c001bc51:	83 c4 20             	add    esp,0x20
c001bc54:	31 c0                	xor    eax,eax
c001bc56:	5b                   	pop    ebx
c001bc57:	5e                   	pop    esi
c001bc58:	5f                   	pop    edi
c001bc59:	c3                   	ret    
c001bc5a:	83 c4 20             	add    esp,0x20
c001bc5d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc62:	5b                   	pop    ebx
c001bc63:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc68:	5e                   	pop    esi
c001bc69:	5f                   	pop    edi
c001bc6a:	c3                   	ret    

c001bc6b <sysCallClose(regs*)>:
c001bc6b:	53                   	push   ebx
c001bc6c:	83 ec 08             	sub    esp,0x8
c001bc6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc73:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bc76:	83 f8 02             	cmp    eax,0x2
c001bc79:	76 50                	jbe    c001bccb <sysCallClose(regs*)+0x60>
c001bc7b:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bc80:	74 58                	je     c001bcda <sysCallClose(regs*)+0x6f>
c001bc82:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bc87:	74 60                	je     c001bce9 <sysCallClose(regs*)+0x7e>
c001bc89:	77 2f                	ja     c001bcba <sysCallClose(regs*)+0x4f>
c001bc8b:	83 ec 0c             	sub    esp,0xc
c001bc8e:	50                   	push   eax
c001bc8f:	e8 91 5d ff ff       	call   c0011a25 <getFromFileDescriptor(int)>
c001bc94:	89 c3                	mov    ebx,eax
c001bc96:	89 04 24             	mov    DWORD PTR [esp],eax
c001bc99:	e8 66 79 ff ff       	call   c0013604 <File::close()>
c001bc9e:	83 c4 10             	add    esp,0x10
c001bca1:	85 db                	test   ebx,ebx
c001bca3:	74 0c                	je     c001bcb1 <sysCallClose(regs*)+0x46>
c001bca5:	83 ec 0c             	sub    esp,0xc
c001bca8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bcaa:	53                   	push   ebx
c001bcab:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bcae:	83 c4 10             	add    esp,0x10
c001bcb1:	31 c0                	xor    eax,eax
c001bcb3:	31 d2                	xor    edx,edx
c001bcb5:	83 c4 08             	add    esp,0x8
c001bcb8:	5b                   	pop    ebx
c001bcb9:	c3                   	ret    
c001bcba:	83 ec 08             	sub    esp,0x8
c001bcbd:	50                   	push   eax
c001bcbe:	68 e4 bf 02 c0       	push   0xc002bfe4
c001bcc3:	e8 22 73 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001bcc8:	83 c4 10             	add    esp,0x10
c001bccb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bcd0:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bcd5:	83 c4 08             	add    esp,0x8
c001bcd8:	5b                   	pop    ebx
c001bcd9:	c3                   	ret    
c001bcda:	83 ec 0c             	sub    esp,0xc
c001bcdd:	68 02 bf 02 c0       	push   0xc002bf02
c001bce2:	e8 03 73 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001bce7:	eb c5                	jmp    c001bcae <sysCallClose(regs*)+0x43>
c001bce9:	83 ec 0c             	sub    esp,0xc
c001bcec:	68 10 bf 02 c0       	push   0xc002bf10
c001bcf1:	eb ef                	jmp    c001bce2 <sysCallClose(regs*)+0x77>

c001bcf3 <sysCallOpenDir(regs*)>:
c001bcf3:	56                   	push   esi
c001bcf4:	53                   	push   ebx
c001bcf5:	53                   	push   ebx
c001bcf6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bcfa:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bcfd:	85 f6                	test   esi,esi
c001bcff:	74 59                	je     c001bd5a <sysCallOpenDir(regs*)+0x67>
c001bd01:	83 ec 0c             	sub    esp,0xc
c001bd04:	68 14 01 00 00       	push   0x114
c001bd09:	e8 35 3b ff ff       	call   c000f843 <malloc>
c001bd0e:	83 c4 0c             	add    esp,0xc
c001bd11:	89 c6                	mov    esi,eax
c001bd13:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd18:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd1b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd1e:	56                   	push   esi
c001bd1f:	e8 ca 7c ff ff       	call   c00139ee <Directory::Directory(char const*, Process*)>
c001bd24:	83 c4 10             	add    esp,0x10
c001bd27:	85 f6                	test   esi,esi
c001bd29:	74 2f                	je     c001bd5a <sysCallOpenDir(regs*)+0x67>
c001bd2b:	83 ec 0c             	sub    esp,0xc
c001bd2e:	56                   	push   esi
c001bd2f:	e8 1e 7d ff ff       	call   c0013a52 <Directory::open()>
c001bd34:	83 c4 10             	add    esp,0x10
c001bd37:	85 c0                	test   eax,eax
c001bd39:	75 1f                	jne    c001bd5a <sysCallOpenDir(regs*)+0x67>
c001bd3b:	83 ec 0c             	sub    esp,0xc
c001bd3e:	56                   	push   esi
c001bd3f:	e8 ec 59 ff ff       	call   c0011730 <UnixFile::getFileDescriptor()>
c001bd44:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bd47:	83 c4 10             	add    esp,0x10
c001bd4a:	89 02                	mov    DWORD PTR [edx],eax
c001bd4c:	c1 f8 1f             	sar    eax,0x1f
c001bd4f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bd52:	31 c0                	xor    eax,eax
c001bd54:	59                   	pop    ecx
c001bd55:	31 d2                	xor    edx,edx
c001bd57:	5b                   	pop    ebx
c001bd58:	5e                   	pop    esi
c001bd59:	c3                   	ret    
c001bd5a:	59                   	pop    ecx
c001bd5b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd60:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd65:	5b                   	pop    ebx
c001bd66:	5e                   	pop    esi
c001bd67:	c3                   	ret    

c001bd68 <sysCallCloseDir(regs*)>:
c001bd68:	53                   	push   ebx
c001bd69:	83 ec 08             	sub    esp,0x8
c001bd6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd70:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bd73:	83 f8 02             	cmp    eax,0x2
c001bd76:	76 47                	jbe    c001bdbf <sysCallCloseDir(regs*)+0x57>
c001bd78:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bd7d:	77 2f                	ja     c001bdae <sysCallCloseDir(regs*)+0x46>
c001bd7f:	83 ec 0c             	sub    esp,0xc
c001bd82:	50                   	push   eax
c001bd83:	e8 9d 5c ff ff       	call   c0011a25 <getFromFileDescriptor(int)>
c001bd88:	89 c3                	mov    ebx,eax
c001bd8a:	89 04 24             	mov    DWORD PTR [esp],eax
c001bd8d:	e8 1c 7d ff ff       	call   c0013aae <Directory::close()>
c001bd92:	83 c4 10             	add    esp,0x10
c001bd95:	85 db                	test   ebx,ebx
c001bd97:	74 0c                	je     c001bda5 <sysCallCloseDir(regs*)+0x3d>
c001bd99:	83 ec 0c             	sub    esp,0xc
c001bd9c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd9e:	53                   	push   ebx
c001bd9f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bda2:	83 c4 10             	add    esp,0x10
c001bda5:	31 c0                	xor    eax,eax
c001bda7:	31 d2                	xor    edx,edx
c001bda9:	83 c4 08             	add    esp,0x8
c001bdac:	5b                   	pop    ebx
c001bdad:	c3                   	ret    
c001bdae:	83 ec 08             	sub    esp,0x8
c001bdb1:	50                   	push   eax
c001bdb2:	68 0c c0 02 c0       	push   0xc002c00c
c001bdb7:	e8 2e 72 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001bdbc:	83 c4 10             	add    esp,0x10
c001bdbf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bdc4:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bdc9:	83 c4 08             	add    esp,0x8
c001bdcc:	5b                   	pop    ebx
c001bdcd:	c3                   	ret    

c001bdce <sysCallMakeDir(regs*)>:
c001bdce:	56                   	push   esi
c001bdcf:	53                   	push   ebx
c001bdd0:	83 ec 10             	sub    esp,0x10
c001bdd3:	68 14 01 00 00       	push   0x114
c001bdd8:	e8 66 3a ff ff       	call   c000f843 <malloc>
c001bddd:	83 c4 0c             	add    esp,0xc
c001bde0:	89 c3                	mov    ebx,eax
c001bde2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bde7:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bdea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bdee:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bdf1:	53                   	push   ebx
c001bdf2:	e8 f7 7b ff ff       	call   c00139ee <Directory::Directory(char const*, Process*)>
c001bdf7:	83 c4 10             	add    esp,0x10
c001bdfa:	85 db                	test   ebx,ebx
c001bdfc:	74 32                	je     c001be30 <sysCallMakeDir(regs*)+0x62>
c001bdfe:	83 ec 0c             	sub    esp,0xc
c001be01:	53                   	push   ebx
c001be02:	e8 2b 7e ff ff       	call   c0013c32 <Directory::create()>
c001be07:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be0a:	89 c6                	mov    esi,eax
c001be0c:	e8 9d 7c ff ff       	call   c0013aae <Directory::close()>
c001be11:	8b 03                	mov    eax,DWORD PTR [ebx]
c001be13:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be16:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001be19:	83 c4 10             	add    esp,0x10
c001be1c:	31 c0                	xor    eax,eax
c001be1e:	59                   	pop    ecx
c001be1f:	85 f6                	test   esi,esi
c001be21:	5b                   	pop    ebx
c001be22:	0f 95 c0             	setne  al
c001be25:	5e                   	pop    esi
c001be26:	31 d2                	xor    edx,edx
c001be28:	f7 d8                	neg    eax
c001be2a:	83 d2 00             	adc    edx,0x0
c001be2d:	f7 da                	neg    edx
c001be2f:	c3                   	ret    
c001be30:	59                   	pop    ecx
c001be31:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be36:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be3b:	5b                   	pop    ebx
c001be3c:	5e                   	pop    esi
c001be3d:	c3                   	ret    

c001be3e <sysCallWait(regs*)>:
c001be3e:	83 ec 10             	sub    esp,0x10
c001be41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001be45:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001be48:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001be4b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001be4e:	e8 e8 24 00 00       	call   c001e33b <waitTask(int, int*, int)>
c001be53:	83 c4 1c             	add    esp,0x1c
c001be56:	99                   	cdq    
c001be57:	c3                   	ret    

c001be58 <sysCallNotImpl(regs*)>:
c001be58:	83 ec 18             	sub    esp,0x18
c001be5b:	68 1e bf 02 c0       	push   0xc002bf1e
c001be60:	e8 2a e8 ff ff       	call   c001a68f <Krnl::panic(char const*)>
c001be65:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be6a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be6f:	83 c4 1c             	add    esp,0x1c
c001be72:	c3                   	ret    

c001be73 <sysPanic(regs*)>:
c001be73:	83 ec 18             	sub    esp,0x18
c001be76:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001be7a:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001be7d:	e8 0d e8 ff ff       	call   c001a68f <Krnl::panic(char const*)>
c001be82:	c7 04 24 38 bf 02 c0 	mov    DWORD PTR [esp],0xc002bf38
c001be89:	e8 01 e8 ff ff       	call   c001a68f <Krnl::panic(char const*)>
c001be8e:	b8 01 00 00 00       	mov    eax,0x1
c001be93:	31 d2                	xor    edx,edx
c001be95:	83 c4 1c             	add    esp,0x1c
c001be98:	c3                   	ret    

c001be99 <sysCallRmdir(regs*)>:
c001be99:	56                   	push   esi
c001be9a:	53                   	push   ebx
c001be9b:	83 ec 20             	sub    esp,0x20
c001be9e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bea2:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bea5:	68 14 01 00 00       	push   0x114
c001beaa:	e8 94 39 ff ff       	call   c000f843 <malloc>
c001beaf:	83 c4 0c             	add    esp,0xc
c001beb2:	89 c3                	mov    ebx,eax
c001beb4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001beb9:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bebc:	56                   	push   esi
c001bebd:	53                   	push   ebx
c001bebe:	e8 7f 76 ff ff       	call   c0013542 <File::File(char const*, Process*)>
c001bec3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bec6:	e8 53 78 ff ff       	call   c001371e <File::unlink()>
c001becb:	83 c4 10             	add    esp,0x10
c001bece:	85 db                	test   ebx,ebx
c001bed0:	74 14                	je     c001bee6 <sysCallRmdir(regs*)+0x4d>
c001bed2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bed6:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bed8:	83 ec 0c             	sub    esp,0xc
c001bedb:	53                   	push   ebx
c001bedc:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bedf:	83 c4 10             	add    esp,0x10
c001bee2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bee6:	85 c0                	test   eax,eax
c001bee8:	0f 95 c0             	setne  al
c001beeb:	31 d2                	xor    edx,edx
c001beed:	0f b6 c0             	movzx  eax,al
c001bef0:	f7 d8                	neg    eax
c001bef2:	83 d2 00             	adc    edx,0x0
c001bef5:	83 c4 14             	add    esp,0x14
c001bef8:	f7 da                	neg    edx
c001befa:	5b                   	pop    ebx
c001befb:	5e                   	pop    esi
c001befc:	c3                   	ret    

c001befd <sysCallUnlink(regs*)>:
c001befd:	56                   	push   esi
c001befe:	53                   	push   ebx
c001beff:	83 ec 20             	sub    esp,0x20
c001bf02:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bf06:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bf09:	68 14 01 00 00       	push   0x114
c001bf0e:	e8 30 39 ff ff       	call   c000f843 <malloc>
c001bf13:	83 c4 0c             	add    esp,0xc
c001bf16:	89 c3                	mov    ebx,eax
c001bf18:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf1d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bf20:	56                   	push   esi
c001bf21:	53                   	push   ebx
c001bf22:	e8 1b 76 ff ff       	call   c0013542 <File::File(char const*, Process*)>
c001bf27:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bf2a:	e8 ef 77 ff ff       	call   c001371e <File::unlink()>
c001bf2f:	83 c4 10             	add    esp,0x10
c001bf32:	85 db                	test   ebx,ebx
c001bf34:	74 14                	je     c001bf4a <sysCallUnlink(regs*)+0x4d>
c001bf36:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bf3a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bf3c:	83 ec 0c             	sub    esp,0xc
c001bf3f:	53                   	push   ebx
c001bf40:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bf43:	83 c4 10             	add    esp,0x10
c001bf46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bf4a:	85 c0                	test   eax,eax
c001bf4c:	0f 95 c0             	setne  al
c001bf4f:	31 d2                	xor    edx,edx
c001bf51:	0f b6 c0             	movzx  eax,al
c001bf54:	f7 d8                	neg    eax
c001bf56:	83 d2 00             	adc    edx,0x0
c001bf59:	83 c4 14             	add    esp,0x14
c001bf5c:	f7 da                	neg    edx
c001bf5e:	5b                   	pop    ebx
c001bf5f:	5e                   	pop    esi
c001bf60:	c3                   	ret    

c001bf61 <sysCallGetArgv(regs*)>:
c001bf61:	83 ec 0c             	sub    esp,0xc
c001bf64:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bf68:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bf6b:	85 c0                	test   eax,eax
c001bf6d:	78 2b                	js     c001bf9a <sysCallGetArgv(regs*)+0x39>
c001bf6f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bf75:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bf78:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001bf7e:	7d 1a                	jge    c001bf9a <sysCallGetArgv(regs*)+0x39>
c001bf80:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001bf87:	85 c0                	test   eax,eax
c001bf89:	74 17                	je     c001bfa2 <sysCallGetArgv(regs*)+0x41>
c001bf8b:	83 ec 08             	sub    esp,0x8
c001bf8e:	50                   	push   eax
c001bf8f:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001bf92:	e8 9d 48 fe ff       	call   c0000834 <strcpy>
c001bf97:	83 c4 10             	add    esp,0x10
c001bf9a:	31 c0                	xor    eax,eax
c001bf9c:	31 d2                	xor    edx,edx
c001bf9e:	83 c4 0c             	add    esp,0xc
c001bfa1:	c3                   	ret    
c001bfa2:	b8 01 00 00 00       	mov    eax,0x1
c001bfa7:	31 d2                	xor    edx,edx
c001bfa9:	83 c4 0c             	add    esp,0xc
c001bfac:	c3                   	ret    

c001bfad <sysCallTTYName(regs*)>:
c001bfad:	56                   	push   esi
c001bfae:	53                   	push   ebx
c001bfaf:	53                   	push   ebx
c001bfb0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bfb4:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001bfb7:	85 c0                	test   eax,eax
c001bfb9:	74 5f                	je     c001c01a <sysCallTTYName(regs*)+0x6d>
c001bfbb:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bfbe:	83 f8 02             	cmp    eax,0x2
c001bfc1:	77 3e                	ja     c001c001 <sysCallTTYName(regs*)+0x54>
c001bfc3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bfc8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bfcb:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001bfd1:	85 db                	test   ebx,ebx
c001bfd3:	74 45                	je     c001c01a <sysCallTTYName(regs*)+0x6d>
c001bfd5:	83 ec 0c             	sub    esp,0xc
c001bfd8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bfda:	53                   	push   ebx
c001bfdb:	ff 10                	call   DWORD PTR [eax]
c001bfdd:	83 c4 10             	add    esp,0x10
c001bfe0:	84 c0                	test   al,al
c001bfe2:	74 41                	je     c001c025 <sysCallTTYName(regs*)+0x78>
c001bfe4:	83 ec 08             	sub    esp,0x8
c001bfe7:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001bfed:	53                   	push   ebx
c001bfee:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001bff1:	e8 3e 48 fe ff       	call   c0000834 <strcpy>
c001bff6:	83 c4 10             	add    esp,0x10
c001bff9:	31 c0                	xor    eax,eax
c001bffb:	59                   	pop    ecx
c001bffc:	31 d2                	xor    edx,edx
c001bffe:	5b                   	pop    ebx
c001bfff:	5e                   	pop    esi
c001c000:	c3                   	ret    
c001c001:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001c006:	74 bb                	je     c001bfc3 <sysCallTTYName(regs*)+0x16>
c001c008:	83 ec 0c             	sub    esp,0xc
c001c00b:	50                   	push   eax
c001c00c:	e8 14 5a ff ff       	call   c0011a25 <getFromFileDescriptor(int)>
c001c011:	83 c4 10             	add    esp,0x10
c001c014:	89 c3                	mov    ebx,eax
c001c016:	85 db                	test   ebx,ebx
c001c018:	75 bb                	jne    c001bfd5 <sysCallTTYName(regs*)+0x28>
c001c01a:	59                   	pop    ecx
c001c01b:	b8 01 00 00 00       	mov    eax,0x1
c001c020:	31 d2                	xor    edx,edx
c001c022:	5b                   	pop    ebx
c001c023:	5e                   	pop    esi
c001c024:	c3                   	ret    
c001c025:	59                   	pop    ecx
c001c026:	b8 02 00 00 00       	mov    eax,0x2
c001c02b:	31 d2                	xor    edx,edx
c001c02d:	5b                   	pop    ebx
c001c02e:	5e                   	pop    esi
c001c02f:	c3                   	ret    

c001c030 <sysCallUSleep(regs*)>:
c001c030:	83 ec 14             	sub    esp,0x14
c001c033:	b8 e8 03 00 00       	mov    eax,0x3e8
c001c038:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c03c:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001c043:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001c046:	01 ca                	add    edx,ecx
c001c048:	52                   	push   edx
c001c049:	50                   	push   eax
c001c04a:	e8 85 23 00 00       	call   c001e3d4 <nanoSleep(unsigned long long)>
c001c04f:	31 c0                	xor    eax,eax
c001c051:	31 d2                	xor    edx,edx
c001c053:	83 c4 1c             	add    esp,0x1c
c001c056:	c3                   	ret    

c001c057 <sysCallSpawn(regs*)>:
c001c057:	56                   	push   esi
c001c058:	53                   	push   ebx
c001c059:	53                   	push   ebx
c001c05a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c05e:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001c061:	85 f6                	test   esi,esi
c001c063:	75 08                	jne    c001c06d <sysCallSpawn(regs*)+0x16>
c001c065:	59                   	pop    ecx
c001c066:	31 c0                	xor    eax,eax
c001c068:	31 d2                	xor    edx,edx
c001c06a:	5b                   	pop    ebx
c001c06b:	5e                   	pop    esi
c001c06c:	c3                   	ret    
c001c06d:	83 ec 0c             	sub    esp,0xc
c001c070:	68 3f 07 00 00       	push   0x73f
c001c075:	e8 c9 37 ff ff       	call   c000f843 <malloc>
c001c07a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001c07d:	89 c6                	mov    esi,eax
c001c07f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c084:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c087:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c08a:	56                   	push   esi
c001c08b:	e8 44 1a 00 00       	call   c001dad4 <Process::Process(char const*, Process*, char**)>
c001c090:	83 c4 20             	add    esp,0x20
c001c093:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001c09a:	75 c9                	jne    c001c065 <sysCallSpawn(regs*)+0xe>
c001c09c:	83 ec 0c             	sub    esp,0xc
c001c09f:	56                   	push   esi
c001c0a0:	e8 f5 1f 00 00       	call   c001e09a <Process::createUserThread()>
c001c0a5:	8b 06                	mov    eax,DWORD PTR [esi]
c001c0a7:	83 c4 10             	add    esp,0x10
c001c0aa:	99                   	cdq    
c001c0ab:	59                   	pop    ecx
c001c0ac:	5b                   	pop    ebx
c001c0ad:	5e                   	pop    esi
c001c0ae:	c3                   	ret    

c001c0af <sysCallGetEnv(regs*)>:
c001c0af:	55                   	push   ebp
c001c0b0:	57                   	push   edi
c001c0b1:	56                   	push   esi
c001c0b2:	53                   	push   ebx
c001c0b3:	83 ec 28             	sub    esp,0x28
c001c0b6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c0ba:	68 47 bf 02 c0       	push   0xc002bf47
c001c0bf:	e8 26 6f ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001c0c4:	5f                   	pop    edi
c001c0c5:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001c0c8:	5d                   	pop    ebp
c001c0c9:	53                   	push   ebx
c001c0ca:	68 8d c2 02 c0       	push   0xc002c28d
c001c0cf:	e8 16 6f ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001c0d4:	58                   	pop    eax
c001c0d5:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001c0d8:	5a                   	pop    edx
c001c0d9:	57                   	push   edi
c001c0da:	68 50 bf 02 c0       	push   0xc002bf50
c001c0df:	e8 06 6f ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001c0e4:	59                   	pop    ecx
c001c0e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0ea:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c0ed:	e8 b9 e4 ff ff       	call   c001a5ab <Krnl::getProcessTotalEnvCount(Process*)>
c001c0f2:	5a                   	pop    edx
c001c0f3:	89 c5                	mov    ebp,eax
c001c0f5:	59                   	pop    ecx
c001c0f6:	50                   	push   eax
c001c0f7:	68 5a bf 02 c0       	push   0xc002bf5a
c001c0fc:	e8 e9 6e ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001c101:	83 c4 10             	add    esp,0x10
c001c104:	39 ef                	cmp    edi,ebp
c001c106:	7c 15                	jl     c001c11d <sysCallGetEnv(regs*)+0x6e>
c001c108:	85 db                	test   ebx,ebx
c001c10a:	75 0c                	jne    c001c118 <sysCallGetEnv(regs*)+0x69>
c001c10c:	83 c4 1c             	add    esp,0x1c
c001c10f:	31 c0                	xor    eax,eax
c001c111:	5b                   	pop    ebx
c001c112:	31 d2                	xor    edx,edx
c001c114:	5e                   	pop    esi
c001c115:	5f                   	pop    edi
c001c116:	5d                   	pop    ebp
c001c117:	c3                   	ret    
c001c118:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c11b:	eb ef                	jmp    c001c10c <sysCallGetEnv(regs*)+0x5d>
c001c11d:	83 ec 0c             	sub    esp,0xc
c001c120:	68 66 bf 02 c0       	push   0xc002bf66
c001c125:	e8 c0 6e ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001c12a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c12e:	83 c4 0c             	add    esp,0xc
c001c131:	57                   	push   edi
c001c132:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c138:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c13b:	50                   	push   eax
c001c13c:	e8 8a e4 ff ff       	call   c001a5cb <Krnl::getProcessEnvPair(Process*, int)>
c001c141:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c145:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c149:	68 0c c3 02 c0       	push   0xc002c30c
c001c14e:	e8 97 6e ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001c153:	83 c4 10             	add    esp,0x10
c001c156:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c159:	85 f6                	test   esi,esi
c001c15b:	75 47                	jne    c001c1a4 <sysCallGetEnv(regs*)+0xf5>
c001c15d:	83 ec 0c             	sub    esp,0xc
c001c160:	55                   	push   ebp
c001c161:	e8 2e 46 fe ff       	call   c0000794 <strlen>
c001c166:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c169:	89 c3                	mov    ebx,eax
c001c16b:	e8 24 46 fe ff       	call   c0000794 <strlen>
c001c170:	5a                   	pop    edx
c001c171:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c175:	59                   	pop    ecx
c001c176:	50                   	push   eax
c001c177:	68 69 bf 02 c0       	push   0xc002bf69
c001c17c:	e8 69 6e ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001c181:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c184:	e8 0b 46 fe ff       	call   c0000794 <strlen>
c001c189:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c18c:	89 c3                	mov    ebx,eax
c001c18e:	e8 01 46 fe ff       	call   c0000794 <strlen>
c001c193:	83 c4 10             	add    esp,0x10
c001c196:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c19a:	83 c4 1c             	add    esp,0x1c
c001c19d:	31 d2                	xor    edx,edx
c001c19f:	5b                   	pop    ebx
c001c1a0:	5e                   	pop    esi
c001c1a1:	5f                   	pop    edi
c001c1a2:	5d                   	pop    ebp
c001c1a3:	c3                   	ret    
c001c1a4:	83 ec 0c             	sub    esp,0xc
c001c1a7:	68 26 c3 02 c0       	push   0xc002c326
c001c1ac:	e8 39 6e ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001c1b1:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c1b4:	58                   	pop    eax
c001c1b5:	5a                   	pop    edx
c001c1b6:	55                   	push   ebp
c001c1b7:	53                   	push   ebx
c001c1b8:	e8 77 46 fe ff       	call   c0000834 <strcpy>
c001c1bd:	59                   	pop    ecx
c001c1be:	5e                   	pop    esi
c001c1bf:	68 73 bf 02 c0       	push   0xc002bf73
c001c1c4:	53                   	push   ebx
c001c1c5:	e8 aa 47 fe ff       	call   c0000974 <strcat>
c001c1ca:	5d                   	pop    ebp
c001c1cb:	58                   	pop    eax
c001c1cc:	57                   	push   edi
c001c1cd:	53                   	push   ebx
c001c1ce:	e8 a1 47 fe ff       	call   c0000974 <strcat>
c001c1d3:	c7 04 24 40 c3 02 c0 	mov    DWORD PTR [esp],0xc002c340
c001c1da:	e8 0b 6e ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001c1df:	83 c4 10             	add    esp,0x10
c001c1e2:	e9 25 ff ff ff       	jmp    c001c10c <sysCallGetEnv(regs*)+0x5d>

c001c1e7 <sysAppSettings(regs*)>:
c001c1e7:	53                   	push   ebx
c001c1e8:	83 ec 08             	sub    esp,0x8
c001c1eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1ef:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001c1f2:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001c1f8:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c1fd:	66 3d c0 09          	cmp    ax,0x9c0
c001c201:	75 2f                	jne    c001c232 <sysAppSettings(regs*)+0x4b>
c001c203:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001c209:	83 e0 1f             	and    eax,0x1f
c001c20c:	3c 01                	cmp    al,0x1
c001c20e:	74 2e                	je     c001c23e <sysAppSettings(regs*)+0x57>
c001c210:	3c 07                	cmp    al,0x7
c001c212:	0f 84 bd 00 00 00    	je     c001c2d5 <sysAppSettings(regs*)+0xee>
c001c218:	84 c0                	test   al,al
c001c21a:	0f 84 dc 00 00 00    	je     c001c2fc <sysAppSettings(regs*)+0x115>
c001c220:	3c 08                	cmp    al,0x8
c001c222:	74 6d                	je     c001c291 <sysAppSettings(regs*)+0xaa>
c001c224:	0f b6 c0             	movzx  eax,al
c001c227:	83 c4 08             	add    esp,0x8
c001c22a:	05 e8 03 00 00       	add    eax,0x3e8
c001c22f:	5b                   	pop    ebx
c001c230:	99                   	cdq    
c001c231:	c3                   	ret    
c001c232:	b8 01 00 00 00       	mov    eax,0x1
c001c237:	31 d2                	xor    edx,edx
c001c239:	83 c4 08             	add    esp,0x8
c001c23c:	5b                   	pop    ebx
c001c23d:	c3                   	ret    
c001c23e:	51                   	push   ecx
c001c23f:	68 00 01 00 00       	push   0x100
c001c244:	6a 00                	push   0x0
c001c246:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c24b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c24e:	83 c0 0c             	add    eax,0xc
c001c251:	50                   	push   eax
c001c252:	e8 21 45 fe ff       	call   c0000778 <memset>
c001c257:	83 c4 0c             	add    esp,0xc
c001c25a:	68 ff 00 00 00       	push   0xff
c001c25f:	53                   	push   ebx
c001c260:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c265:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c268:	83 c0 0c             	add    eax,0xc
c001c26b:	50                   	push   eax
c001c26c:	e8 d3 44 fe ff       	call   c0000744 <memcpy>
c001c271:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c276:	5b                   	pop    ebx
c001c277:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c27a:	5a                   	pop    edx
c001c27b:	8d 50 0c             	lea    edx,[eax+0xc]
c001c27e:	52                   	push   edx
c001c27f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c285:	e8 16 49 ff ff       	call   c0010ba0 <VgaText::setTitle(char*)>
c001c28a:	83 c4 10             	add    esp,0x10
c001c28d:	31 c0                	xor    eax,eax
c001c28f:	eb a6                	jmp    c001c237 <sysAppSettings(regs*)+0x50>
c001c291:	83 ec 08             	sub    esp,0x8
c001c294:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c29a:	83 e0 0f             	and    eax,0xf
c001c29d:	50                   	push   eax
c001c29e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2a3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2a6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c2ac:	e8 df 48 ff ff       	call   c0010b90 <VgaText::setTitleColour(VgaColour)>
c001c2b1:	58                   	pop    eax
c001c2b2:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c2b8:	5a                   	pop    edx
c001c2b9:	c1 e8 04             	shr    eax,0x4
c001c2bc:	83 e0 0f             	and    eax,0xf
c001c2bf:	50                   	push   eax
c001c2c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2c5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2c8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c2ce:	e8 ad 48 ff ff       	call   c0010b80 <VgaText::setTitleTextColour(VgaColour)>
c001c2d3:	eb b5                	jmp    c001c28a <sysAppSettings(regs*)+0xa3>
c001c2d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2da:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2dd:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c2e3:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001c2e9:	c0 e8 06             	shr    al,0x6
c001c2ec:	83 e0 01             	and    eax,0x1
c001c2ef:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001c2f5:	31 c0                	xor    eax,eax
c001c2f7:	e9 3b ff ff ff       	jmp    c001c237 <sysAppSettings(regs*)+0x50>
c001c2fc:	b8 02 00 00 00       	mov    eax,0x2
c001c301:	e9 31 ff ff ff       	jmp    c001c237 <sysAppSettings(regs*)+0x50>

c001c306 <sysSetFatAttrib(regs*)>:
c001c306:	57                   	push   edi
c001c307:	56                   	push   esi
c001c308:	53                   	push   ebx
c001c309:	83 ec 1c             	sub    esp,0x1c
c001c30c:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c310:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c313:	68 14 01 00 00       	push   0x114
c001c318:	e8 26 35 ff ff       	call   c000f843 <malloc>
c001c31d:	83 c4 0c             	add    esp,0xc
c001c320:	89 c3                	mov    ebx,eax
c001c322:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c327:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c32a:	57                   	push   edi
c001c32b:	53                   	push   ebx
c001c32c:	e8 11 72 ff ff       	call   c0013542 <File::File(char const*, Process*)>
c001c331:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c334:	83 c4 0c             	add    esp,0xc
c001c337:	0f b6 d4             	movzx  edx,ah
c001c33a:	0f b6 c0             	movzx  eax,al
c001c33d:	52                   	push   edx
c001c33e:	50                   	push   eax
c001c33f:	53                   	push   ebx
c001c340:	e8 73 74 ff ff       	call   c00137b8 <File::chfatattr(unsigned char, unsigned char)>
c001c345:	83 c4 10             	add    esp,0x10
c001c348:	85 db                	test   ebx,ebx
c001c34a:	74 14                	je     c001c360 <sysSetFatAttrib(regs*)+0x5a>
c001c34c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c350:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c352:	83 ec 0c             	sub    esp,0xc
c001c355:	53                   	push   ebx
c001c356:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c359:	83 c4 10             	add    esp,0x10
c001c35c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c360:	85 c0                	test   eax,eax
c001c362:	0f 95 c0             	setne  al
c001c365:	31 d2                	xor    edx,edx
c001c367:	0f b6 c0             	movzx  eax,al
c001c36a:	f7 d8                	neg    eax
c001c36c:	83 d2 00             	adc    edx,0x0
c001c36f:	83 c4 10             	add    esp,0x10
c001c372:	f7 da                	neg    edx
c001c374:	5b                   	pop    ebx
c001c375:	5e                   	pop    esi
c001c376:	5f                   	pop    edi
c001c377:	c3                   	ret    

c001c378 <sysPipe(regs*)>:
c001c378:	57                   	push   edi
c001c379:	56                   	push   esi
c001c37a:	53                   	push   ebx
c001c37b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c37f:	83 ec 0c             	sub    esp,0xc
c001c382:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c385:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c388:	6a 20                	push   0x20
c001c38a:	e8 b4 34 ff ff       	call   c000f843 <malloc>
c001c38f:	89 c3                	mov    ebx,eax
c001c391:	58                   	pop    eax
c001c392:	5a                   	pop    edx
c001c393:	68 00 50 00 00       	push   0x5000
c001c398:	53                   	push   ebx
c001c399:	e8 32 41 ff ff       	call   c00104d0 <Pipe::Pipe(int)>
c001c39e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c3a1:	e8 8a 53 ff ff       	call   c0011730 <UnixFile::getFileDescriptor()>
c001c3a6:	89 07                	mov    DWORD PTR [edi],eax
c001c3a8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c3ab:	e8 80 53 ff ff       	call   c0011730 <UnixFile::getFileDescriptor()>
c001c3b0:	83 c4 10             	add    esp,0x10
c001c3b3:	89 06                	mov    DWORD PTR [esi],eax
c001c3b5:	31 d2                	xor    edx,edx
c001c3b7:	5b                   	pop    ebx
c001c3b8:	31 c0                	xor    eax,eax
c001c3ba:	5e                   	pop    esi
c001c3bb:	5f                   	pop    edi
c001c3bc:	c3                   	ret    

c001c3bd <sysGetUnixTime(regs*)>:
c001c3bd:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c001c3c2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c3c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c3cc:	e9 5b 7b ff ff       	jmp    c0013f2c <Clock::timeInSecondsLocal()>

c001c3d1 <string_ends_with(char const*, char const*)>:
c001c3d1:	57                   	push   edi
c001c3d2:	56                   	push   esi
c001c3d3:	53                   	push   ebx
c001c3d4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c3d8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c3dc:	83 ec 0c             	sub    esp,0xc
c001c3df:	53                   	push   ebx
c001c3e0:	e8 af 43 fe ff       	call   c0000794 <strlen>
c001c3e5:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c3e8:	89 c6                	mov    esi,eax
c001c3ea:	e8 a5 43 fe ff       	call   c0000794 <strlen>
c001c3ef:	83 c4 10             	add    esp,0x10
c001c3f2:	39 c6                	cmp    esi,eax
c001c3f4:	7d 06                	jge    c001c3fc <string_ends_with(char const*, char const*)+0x2b>
c001c3f6:	5b                   	pop    ebx
c001c3f7:	31 c0                	xor    eax,eax
c001c3f9:	5e                   	pop    esi
c001c3fa:	5f                   	pop    edi
c001c3fb:	c3                   	ret    
c001c3fc:	83 ec 08             	sub    esp,0x8
c001c3ff:	29 c6                	sub    esi,eax
c001c401:	57                   	push   edi
c001c402:	01 f3                	add    ebx,esi
c001c404:	53                   	push   ebx
c001c405:	e8 b6 44 fe ff       	call   c00008c0 <strcmp>
c001c40a:	83 c4 10             	add    esp,0x10
c001c40d:	85 c0                	test   eax,eax
c001c40f:	5b                   	pop    ebx
c001c410:	0f 94 c0             	sete   al
c001c413:	5e                   	pop    esi
c001c414:	0f b6 c0             	movzx  eax,al
c001c417:	5f                   	pop    edi
c001c418:	c3                   	ret    

c001c419 <sysCallOpen(regs*)>:
c001c419:	56                   	push   esi
c001c41a:	53                   	push   ebx
c001c41b:	81 ec 04 01 00 00    	sub    esp,0x104
c001c421:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c428:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c42b:	85 c9                	test   ecx,ecx
c001c42d:	0f 84 b3 00 00 00    	je     c001c4e6 <sysCallOpen(regs*)+0xcd>
c001c433:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c436:	85 c0                	test   eax,eax
c001c438:	0f 84 a8 00 00 00    	je     c001c4e6 <sysCallOpen(regs*)+0xcd>
c001c43e:	52                   	push   edx
c001c43f:	68 75 bf 02 c0       	push   0xc002bf75
c001c444:	50                   	push   eax
c001c445:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c449:	56                   	push   esi
c001c44a:	e8 49 6f ff ff       	call   c0013398 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c44f:	89 34 24             	mov    DWORD PTR [esp],esi
c001c452:	e8 3d 43 fe ff       	call   c0000794 <strlen>
c001c457:	83 c4 10             	add    esp,0x10
c001c45a:	48                   	dec    eax
c001c45b:	74 1d                	je     c001c47a <sysCallOpen(regs*)+0x61>
c001c45d:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c460:	eb 0f                	jmp    c001c471 <sysCallOpen(regs*)+0x58>
c001c462:	80 fa 3a             	cmp    dl,0x3a
c001c465:	74 0f                	je     c001c476 <sysCallOpen(regs*)+0x5d>
c001c467:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c46b:	48                   	dec    eax
c001c46c:	74 0c                	je     c001c47a <sysCallOpen(regs*)+0x61>
c001c46e:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c471:	80 fa 2e             	cmp    dl,0x2e
c001c474:	75 ec                	jne    c001c462 <sysCallOpen(regs*)+0x49>
c001c476:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c47a:	83 ec 08             	sub    esp,0x8
c001c47d:	68 79 bf 02 c0       	push   0xc002bf79
c001c482:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c485:	e8 47 ff ff ff       	call   c001c3d1 <string_ends_with(char const*, char const*)>
c001c48a:	83 c4 10             	add    esp,0x10
c001c48d:	85 c0                	test   eax,eax
c001c48f:	75 17                	jne    c001c4a8 <sysCallOpen(regs*)+0x8f>
c001c491:	83 ec 08             	sub    esp,0x8
c001c494:	68 9a bf 02 c0       	push   0xc002bf9a
c001c499:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c49c:	e8 30 ff ff ff       	call   c001c3d1 <string_ends_with(char const*, char const*)>
c001c4a1:	83 c4 10             	add    esp,0x10
c001c4a4:	85 c0                	test   eax,eax
c001c4a6:	74 51                	je     c001c4f9 <sysCallOpen(regs*)+0xe0>
c001c4a8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c4ab:	83 ec 08             	sub    esp,0x8
c001c4ae:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c4b4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c4bb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c4be:	ff 30                	push   DWORD PTR [eax]
c001c4c0:	68 7e bf 02 c0       	push   0xc002bf7e
c001c4c5:	e8 20 6b ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001c4ca:	c7 04 24 8d bf 02 c0 	mov    DWORD PTR [esp],0xc002bf8d
c001c4d1:	e8 14 6b ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001c4d6:	83 c4 10             	add    esp,0x10
c001c4d9:	81 c4 04 01 00 00    	add    esp,0x104
c001c4df:	31 c0                	xor    eax,eax
c001c4e1:	31 d2                	xor    edx,edx
c001c4e3:	5b                   	pop    ebx
c001c4e4:	5e                   	pop    esi
c001c4e5:	c3                   	ret    
c001c4e6:	81 c4 04 01 00 00    	add    esp,0x104
c001c4ec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c4f1:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c4f6:	5b                   	pop    ebx
c001c4f7:	5e                   	pop    esi
c001c4f8:	c3                   	ret    
c001c4f9:	83 ec 08             	sub    esp,0x8
c001c4fc:	68 7a bf 02 c0       	push   0xc002bf7a
c001c501:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c504:	e8 b7 43 fe ff       	call   c00008c0 <strcmp>
c001c509:	83 c4 10             	add    esp,0x10
c001c50c:	85 c0                	test   eax,eax
c001c50e:	74 98                	je     c001c4a8 <sysCallOpen(regs*)+0x8f>
c001c510:	83 ec 08             	sub    esp,0x8
c001c513:	68 79 bf 02 c0       	push   0xc002bf79
c001c518:	56                   	push   esi
c001c519:	e8 b3 fe ff ff       	call   c001c3d1 <string_ends_with(char const*, char const*)>
c001c51e:	83 c4 10             	add    esp,0x10
c001c521:	85 c0                	test   eax,eax
c001c523:	75 83                	jne    c001c4a8 <sysCallOpen(regs*)+0x8f>
c001c525:	83 ec 08             	sub    esp,0x8
c001c528:	68 9f bf 02 c0       	push   0xc002bf9f
c001c52d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c530:	e8 9c fe ff ff       	call   c001c3d1 <string_ends_with(char const*, char const*)>
c001c535:	83 c4 10             	add    esp,0x10
c001c538:	85 c0                	test   eax,eax
c001c53a:	0f 85 d9 00 00 00    	jne    c001c619 <sysCallOpen(regs*)+0x200>
c001c540:	83 ec 08             	sub    esp,0x8
c001c543:	68 a4 bf 02 c0       	push   0xc002bfa4
c001c548:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c54b:	e8 81 fe ff ff       	call   c001c3d1 <string_ends_with(char const*, char const*)>
c001c550:	83 c4 10             	add    esp,0x10
c001c553:	85 c0                	test   eax,eax
c001c555:	0f 85 be 00 00 00    	jne    c001c619 <sysCallOpen(regs*)+0x200>
c001c55b:	83 ec 08             	sub    esp,0x8
c001c55e:	68 a0 bf 02 c0       	push   0xc002bfa0
c001c563:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c566:	e8 55 43 fe ff       	call   c00008c0 <strcmp>
c001c56b:	83 c4 10             	add    esp,0x10
c001c56e:	85 c0                	test   eax,eax
c001c570:	0f 84 a3 00 00 00    	je     c001c619 <sysCallOpen(regs*)+0x200>
c001c576:	83 ec 08             	sub    esp,0x8
c001c579:	68 9f bf 02 c0       	push   0xc002bf9f
c001c57e:	56                   	push   esi
c001c57f:	e8 4d fe ff ff       	call   c001c3d1 <string_ends_with(char const*, char const*)>
c001c584:	83 c4 10             	add    esp,0x10
c001c587:	85 c0                	test   eax,eax
c001c589:	0f 85 8a 00 00 00    	jne    c001c619 <sysCallOpen(regs*)+0x200>
c001c58f:	83 ec 0c             	sub    esp,0xc
c001c592:	68 14 01 00 00       	push   0x114
c001c597:	e8 a7 32 ff ff       	call   c000f843 <malloc>
c001c59c:	83 c4 0c             	add    esp,0xc
c001c59f:	89 c6                	mov    esi,eax
c001c5a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c5a6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c5a9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c5ac:	56                   	push   esi
c001c5ad:	e8 90 6f ff ff       	call   c0013542 <File::File(char const*, Process*)>
c001c5b2:	83 c4 10             	add    esp,0x10
c001c5b5:	85 f6                	test   esi,esi
c001c5b7:	0f 84 29 ff ff ff    	je     c001c4e6 <sysCallOpen(regs*)+0xcd>
c001c5bd:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c5c0:	0f b6 c2             	movzx  eax,dl
c001c5c3:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c5c6:	89 d0                	mov    eax,edx
c001c5c8:	83 e0 01             	and    eax,0x1
c001c5cb:	f6 c2 02             	test   dl,0x2
c001c5ce:	74 03                	je     c001c5d3 <sysCallOpen(regs*)+0x1ba>
c001c5d0:	83 c8 02             	or     eax,0x2
c001c5d3:	f6 c2 04             	test   dl,0x4
c001c5d6:	74 03                	je     c001c5db <sysCallOpen(regs*)+0x1c2>
c001c5d8:	83 c8 04             	or     eax,0x4
c001c5db:	f6 c2 08             	test   dl,0x8
c001c5de:	74 03                	je     c001c5e3 <sysCallOpen(regs*)+0x1ca>
c001c5e0:	83 c8 0a             	or     eax,0xa
c001c5e3:	83 e2 10             	and    edx,0x10
c001c5e6:	74 03                	je     c001c5eb <sysCallOpen(regs*)+0x1d2>
c001c5e8:	83 c8 12             	or     eax,0x12
c001c5eb:	83 ec 08             	sub    esp,0x8
c001c5ee:	50                   	push   eax
c001c5ef:	56                   	push   esi
c001c5f0:	e8 b1 6f ff ff       	call   c00135a6 <File::open(FileOpenMode)>
c001c5f5:	83 c4 10             	add    esp,0x10
c001c5f8:	85 c0                	test   eax,eax
c001c5fa:	0f 85 e6 fe ff ff    	jne    c001c4e6 <sysCallOpen(regs*)+0xcd>
c001c600:	83 ec 0c             	sub    esp,0xc
c001c603:	56                   	push   esi
c001c604:	e8 27 51 ff ff       	call   c0011730 <UnixFile::getFileDescriptor()>
c001c609:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c60c:	89 02                	mov    DWORD PTR [edx],eax
c001c60e:	c1 f8 1f             	sar    eax,0x1f
c001c611:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c614:	e9 bd fe ff ff       	jmp    c001c4d6 <sysCallOpen(regs*)+0xbd>
c001c619:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c61c:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c622:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c629:	e9 ab fe ff ff       	jmp    c001c4d9 <sysCallOpen(regs*)+0xc0>

c001c62e <Sys::loadSyscalls()>:
c001c62e:	c7 05 40 10 03 c0 3b b7 01 c0 	mov    DWORD PTR ds:0xc0031040,0xc001b73b
c001c638:	c7 05 44 10 03 c0 24 b3 01 c0 	mov    DWORD PTR ds:0xc0031044,0xc001b324
c001c642:	c7 05 48 10 03 c0 8e b4 01 c0 	mov    DWORD PTR ds:0xc0031048,0xc001b48e
c001c64c:	c7 05 4c 10 03 c0 71 b6 01 c0 	mov    DWORD PTR ds:0xc003104c,0xc001b671
c001c656:	c7 05 50 10 03 c0 26 b4 01 c0 	mov    DWORD PTR ds:0xc0031050,0xc001b426
c001c660:	c7 05 54 10 03 c0 5b b3 01 c0 	mov    DWORD PTR ds:0xc0031054,0xc001b35b
c001c66a:	c7 05 58 10 03 c0 3c b3 01 c0 	mov    DWORD PTR ds:0xc0031058,0xc001b33c
c001c674:	c7 05 5c 10 03 c0 e3 b4 01 c0 	mov    DWORD PTR ds:0xc003105c,0xc001b4e3
c001c67e:	c7 05 64 10 03 c0 6b bc 01 c0 	mov    DWORD PTR ds:0xc0031064,0xc001bc6b
c001c688:	c7 05 60 10 03 c0 19 c4 01 c0 	mov    DWORD PTR ds:0xc0031060,0xc001c419
c001c692:	c7 05 68 10 03 c0 f3 bc 01 c0 	mov    DWORD PTR ds:0xc0031068,0xc001bcf3
c001c69c:	c7 05 6c 10 03 c0 5a b9 01 c0 	mov    DWORD PTR ds:0xc003106c,0xc001b95a
c001c6a6:	c7 05 70 10 03 c0 76 b7 01 c0 	mov    DWORD PTR ds:0xc0031070,0xc001b776
c001c6b0:	c7 05 74 10 03 c0 7b b7 01 c0 	mov    DWORD PTR ds:0xc0031074,0xc001b77b
c001c6ba:	c7 05 78 10 03 c0 ce bd 01 c0 	mov    DWORD PTR ds:0xc0031078,0xc001bdce
c001c6c4:	c7 05 7c 10 03 c0 68 bd 01 c0 	mov    DWORD PTR ds:0xc003107c,0xc001bd68
c001c6ce:	c7 05 80 10 03 c0 42 ba 01 c0 	mov    DWORD PTR ds:0xc0031080,0xc001ba42
c001c6d8:	c7 05 84 10 03 c0 ab ba 01 c0 	mov    DWORD PTR ds:0xc0031084,0xc001baab
c001c6e2:	c7 05 88 10 03 c0 28 bb 01 c0 	mov    DWORD PTR ds:0xc0031088,0xc001bb28
c001c6ec:	c7 05 8c 10 03 c0 80 b7 01 c0 	mov    DWORD PTR ds:0xc003108c,0xc001b780
c001c6f6:	c7 05 90 10 03 c0 3e be 01 c0 	mov    DWORD PTR ds:0xc0031090,0xc001be3e
c001c700:	c7 05 94 10 03 c0 58 be 01 c0 	mov    DWORD PTR ds:0xc0031094,0xc001be58
c001c70a:	c7 05 98 10 03 c0 58 be 01 c0 	mov    DWORD PTR ds:0xc0031098,0xc001be58
c001c714:	c7 05 9c 10 03 c0 99 be 01 c0 	mov    DWORD PTR ds:0xc003109c,0xc001be99
c001c71e:	c7 05 a0 10 03 c0 fd be 01 c0 	mov    DWORD PTR ds:0xc00310a0,0xc001befd
c001c728:	c7 05 a4 10 03 c0 2c b9 01 c0 	mov    DWORD PTR ds:0xc00310a4,0xc001b92c
c001c732:	c7 05 a8 10 03 c0 61 bf 01 c0 	mov    DWORD PTR ds:0xc00310a8,0xc001bf61
c001c73c:	c7 05 ac 10 03 c0 e9 b8 01 c0 	mov    DWORD PTR ds:0xc00310ac,0xc001b8e9
c001c746:	c7 05 b0 10 03 c0 ad bf 01 c0 	mov    DWORD PTR ds:0xc00310b0,0xc001bfad
c001c750:	c7 05 b4 10 03 c0 e8 b9 01 c0 	mov    DWORD PTR ds:0xc00310b4,0xc001b9e8
c001c75a:	c7 05 b8 10 03 c0 30 c0 01 c0 	mov    DWORD PTR ds:0xc00310b8,0xc001c030
c001c764:	c7 05 bc 10 03 c0 ab bb 01 c0 	mov    DWORD PTR ds:0xc00310bc,0xc001bbab
c001c76e:	c7 05 c0 10 03 c0 57 c0 01 c0 	mov    DWORD PTR ds:0xc00310c0,0xc001c057
c001c778:	c7 05 c4 10 03 c0 af c0 01 c0 	mov    DWORD PTR ds:0xc00310c4,0xc001c0af
c001c782:	c7 05 c8 10 03 c0 e7 c1 01 c0 	mov    DWORD PTR ds:0xc00310c8,0xc001c1e7
c001c78c:	c7 05 cc 10 03 c0 8a b7 01 c0 	mov    DWORD PTR ds:0xc00310cc,0xc001b78a
c001c796:	c7 05 d0 10 03 c0 f4 b7 01 c0 	mov    DWORD PTR ds:0xc00310d0,0xc001b7f4
c001c7a0:	c7 05 d4 10 03 c0 3a b8 01 c0 	mov    DWORD PTR ds:0xc00310d4,0xc001b83a
c001c7aa:	c7 05 d8 10 03 c0 06 c3 01 c0 	mov    DWORD PTR ds:0xc00310d8,0xc001c306
c001c7b4:	c7 05 dc 10 03 c0 73 be 01 c0 	mov    DWORD PTR ds:0xc00310dc,0xc001be73
c001c7be:	c7 05 e0 10 03 c0 8b b8 01 c0 	mov    DWORD PTR ds:0xc00310e0,0xc001b88b
c001c7c8:	c7 05 e4 10 03 c0 78 c3 01 c0 	mov    DWORD PTR ds:0xc00310e4,0xc001c378
c001c7d2:	c7 05 e8 10 03 c0 bd c3 01 c0 	mov    DWORD PTR ds:0xc00310e8,0xc001c3bd
c001c7dc:	c7 05 ec 10 03 c0 7e b3 01 c0 	mov    DWORD PTR ds:0xc00310ec,0xc001b37e
c001c7e6:	c7 05 f0 10 03 c0 ff b4 01 c0 	mov    DWORD PTR ds:0xc00310f0,0xc001b4ff
c001c7f0:	c7 05 f4 10 03 c0 27 b6 01 c0 	mov    DWORD PTR ds:0xc00310f4,0xc001b627
c001c7fa:	c7 05 f8 10 03 c0 ee b2 01 c0 	mov    DWORD PTR ds:0xc00310f8,0xc001b2ee
c001c804:	c7 05 fc 10 03 c0 d9 b6 01 c0 	mov    DWORD PTR ds:0xc00310fc,0xc001b6d9
c001c80e:	c7 05 00 11 03 c0 67 b3 01 c0 	mov    DWORD PTR ds:0xc0031100,0xc001b367
c001c818:	c3                   	ret    

c001c819 <Sys::systemCall(regs*, void*)>:
c001c819:	53                   	push   ebx
c001c81a:	83 ec 08             	sub    esp,0x8
c001c81d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c821:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c824:	83 f8 7f             	cmp    eax,0x7f
c001c827:	77 16                	ja     c001c83f <Sys::systemCall(regs*, void*)+0x26>
c001c829:	8b 14 85 40 10 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcefc0]
c001c830:	85 d2                	test   edx,edx
c001c832:	74 0b                	je     c001c83f <Sys::systemCall(regs*, void*)+0x26>
c001c834:	83 ec 0c             	sub    esp,0xc
c001c837:	53                   	push   ebx
c001c838:	ff d2                	call   edx
c001c83a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c83d:	eb 0d                	jmp    c001c84c <Sys::systemCall(regs*, void*)+0x33>
c001c83f:	52                   	push   edx
c001c840:	52                   	push   edx
c001c841:	50                   	push   eax
c001c842:	68 a9 bf 02 c0       	push   0xc002bfa9
c001c847:	e8 9e 67 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001c84c:	83 c4 10             	add    esp,0x10
c001c84f:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c854:	31 d2                	xor    edx,edx
c001c856:	83 c4 08             	add    esp,0x8
c001c859:	5b                   	pop    ebx
c001c85a:	c3                   	ret    

c001c85b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c85b:	55                   	push   ebp
c001c85c:	57                   	push   edi
c001c85d:	56                   	push   esi
c001c85e:	53                   	push   ebx
c001c85f:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c865:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c86c:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c873:	85 c0                	test   eax,eax
c001c875:	0f 95 c1             	setne  cl
c001c878:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c880:	0f 94 c2             	sete   dl
c001c883:	84 d1                	test   cl,dl
c001c885:	74 23                	je     c001c8aa <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c887:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c88d:	74 1b                	je     c001c8aa <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c88f:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c895:	89 da                	mov    edx,ebx
c001c897:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c89d:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c8a3:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c8aa:	8b 8c 24 48 10 00 00 	mov    ecx,DWORD PTR [esp+0x1048]
c001c8b1:	05 ff 0f 00 00       	add    eax,0xfff
c001c8b6:	83 ec 0c             	sub    esp,0xc
c001c8b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c8bd:	8d a9 ff 0f 00 00    	lea    ebp,[ecx+0xfff]
c001c8c3:	c1 e8 0c             	shr    eax,0xc
c001c8c6:	89 ef                	mov    edi,ebp
c001c8c8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c8cc:	c1 ef 0c             	shr    edi,0xc
c001c8cf:	6a 01                	push   0x1
c001c8d1:	e8 15 54 ff ff       	call   c0011ceb <Virt::allocateKernelVirtualPages(int)>
c001c8d6:	89 c6                	mov    esi,eax
c001c8d8:	58                   	pop    eax
c001c8d9:	5a                   	pop    edx
c001c8da:	57                   	push   edi
c001c8db:	68 2f c0 02 c0       	push   0xc002c02f
c001c8e0:	e8 05 67 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001c8e5:	59                   	pop    ecx
c001c8e6:	58                   	pop    eax
c001c8e7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c8eb:	68 41 c0 02 c0       	push   0xc002c041
c001c8f0:	e8 f5 66 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001c8f5:	83 c4 10             	add    esp,0x10
c001c8f8:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001c8fe:	0f 86 24 01 00 00    	jbe    c001ca28 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cd>
c001c904:	c1 e7 0c             	shl    edi,0xc
c001c907:	8d 04 1f             	lea    eax,[edi+ebx*1]
c001c90a:	89 df                	mov    edi,ebx
c001c90c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c910:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001c917:	01 dd                	add    ebp,ebx
c001c919:	29 fd                	sub    ebp,edi
c001c91b:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001c91f:	0f 84 01 01 00 00    	je     c001ca26 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c925:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001c92b:	76 05                	jbe    c001c932 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xd7>
c001c92d:	bd 00 10 00 00       	mov    ebp,0x1000
c001c932:	83 ec 0c             	sub    esp,0xc
c001c935:	31 d2                	xor    edx,edx
c001c937:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c93e:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c940:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c944:	50                   	push   eax
c001c945:	8d 44 24 30          	lea    eax,[esp+0x30]
c001c949:	50                   	push   eax
c001c94a:	52                   	push   edx
c001c94b:	55                   	push   ebp
c001c94c:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c953:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c956:	83 c4 20             	add    esp,0x20
c001c959:	85 c0                	test   eax,eax
c001c95b:	74 0a                	je     c001c967 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x10c>
c001c95d:	53                   	push   ebx
c001c95e:	53                   	push   ebx
c001c95f:	50                   	push   eax
c001c960:	68 53 c0 02 c0       	push   0xc002c053
c001c965:	eb 0f                	jmp    c001c976 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x11b>
c001c967:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001c96b:	74 20                	je     c001c98d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x132>
c001c96d:	51                   	push   ecx
c001c96e:	51                   	push   ecx
c001c96f:	6a 00                	push   0x0
c001c971:	68 7e c0 02 c0       	push   0xc002c07e
c001c976:	e8 6f 66 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001c97b:	89 34 24             	mov    DWORD PTR [esp],esi
c001c97e:	e8 90 57 ff ff       	call   c0012113 <Virt::freeKernelVirtualPages(unsigned long)>
c001c983:	83 c4 10             	add    esp,0x10
c001c986:	31 c0                	xor    eax,eax
c001c988:	e9 55 01 00 00       	jmp    c001cae2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c001c98d:	e8 f2 14 00 00       	call   c001de84 <lockScheduler()>
c001c992:	e8 49 35 ff ff       	call   c000fee0 <Phys::allocatePage()>
c001c997:	6a 07                	push   0x7
c001c999:	89 c5                	mov    ebp,eax
c001c99b:	56                   	push   esi
c001c99c:	50                   	push   eax
c001c99d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9a2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9a5:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9ab:	e8 ca 5a ff ff       	call   c001247a <VAS::mapPage(unsigned long, unsigned long, int)>
c001c9b0:	83 c4 0c             	add    esp,0xc
c001c9b3:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c9ba:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9c0:	6a 00                	push   0x0
c001c9c2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9c7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9ca:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9d0:	e8 0f 59 ff ff       	call   c00122e4 <VAS::mapOtherVASIn(bool, VAS*)>
c001c9d5:	58                   	pop    eax
c001c9d6:	5a                   	pop    edx
c001c9d7:	68 07 0c 00 00       	push   0xc07
c001c9dc:	57                   	push   edi
c001c9dd:	81 c7 00 10 00 00    	add    edi,0x1000
c001c9e3:	55                   	push   ebp
c001c9e4:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c9eb:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9f1:	6a 00                	push   0x0
c001c9f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9f8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9fb:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca01:	e8 2e 5e ff ff       	call   c0012834 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001ca06:	83 c4 1c             	add    esp,0x1c
c001ca09:	68 00 10 00 00       	push   0x1000
c001ca0e:	8d 44 24 28          	lea    eax,[esp+0x28]
c001ca12:	50                   	push   eax
c001ca13:	56                   	push   esi
c001ca14:	e8 2b 3d fe ff       	call   c0000744 <memcpy>
c001ca19:	e8 68 14 00 00       	call   c001de86 <unlockScheduler()>
c001ca1e:	83 c4 10             	add    esp,0x10
c001ca21:	e9 ea fe ff ff       	jmp    c001c910 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb5>
c001ca26:	89 fb                	mov    ebx,edi
c001ca28:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001ca30:	0f 86 9e 00 00 00    	jbe    c001cad4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c001ca36:	e8 49 14 00 00       	call   c001de84 <lockScheduler()>
c001ca3b:	51                   	push   ecx
c001ca3c:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001ca43:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca49:	6a 00                	push   0x0
c001ca4b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca50:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca53:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca59:	e8 86 58 ff ff       	call   c00122e4 <VAS::mapOtherVASIn(bool, VAS*)>
c001ca5e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ca62:	c1 e7 0c             	shl    edi,0xc
c001ca65:	01 df                	add    edi,ebx
c001ca67:	83 c4 10             	add    esp,0x10
c001ca6a:	39 fb                	cmp    ebx,edi
c001ca6c:	74 61                	je     c001cacf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x274>
c001ca6e:	e8 6d 34 ff ff       	call   c000fee0 <Phys::allocatePage()>
c001ca73:	6a 07                	push   0x7
c001ca75:	89 c5                	mov    ebp,eax
c001ca77:	56                   	push   esi
c001ca78:	50                   	push   eax
c001ca79:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca7e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca81:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca87:	e8 ee 59 ff ff       	call   c001247a <VAS::mapPage(unsigned long, unsigned long, int)>
c001ca8c:	58                   	pop    eax
c001ca8d:	5a                   	pop    edx
c001ca8e:	68 07 0c 00 00       	push   0xc07
c001ca93:	53                   	push   ebx
c001ca94:	81 c3 00 10 00 00    	add    ebx,0x1000
c001ca9a:	55                   	push   ebp
c001ca9b:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001caa2:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001caa8:	6a 00                	push   0x0
c001caaa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001caaf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cab2:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cab8:	e8 77 5d ff ff       	call   c0012834 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001cabd:	83 c4 1c             	add    esp,0x1c
c001cac0:	68 00 10 00 00       	push   0x1000
c001cac5:	6a 00                	push   0x0
c001cac7:	56                   	push   esi
c001cac8:	e8 ab 3c fe ff       	call   c0000778 <memset>
c001cacd:	eb 98                	jmp    c001ca67 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x20c>
c001cacf:	e8 b2 13 00 00       	call   c001de86 <unlockScheduler()>
c001cad4:	83 ec 0c             	sub    esp,0xc
c001cad7:	56                   	push   esi
c001cad8:	e8 36 56 ff ff       	call   c0012113 <Virt::freeKernelVirtualPages(unsigned long)>
c001cadd:	83 c4 10             	add    esp,0x10
c001cae0:	b0 01                	mov    al,0x1
c001cae2:	81 c4 2c 10 00 00    	add    esp,0x102c
c001cae8:	5b                   	pop    ebx
c001cae9:	5e                   	pop    esi
c001caea:	5f                   	pop    edi
c001caeb:	5d                   	pop    ebp
c001caec:	c3                   	ret    

c001caed <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001caed:	55                   	push   ebp
c001caee:	57                   	push   edi
c001caef:	56                   	push   esi
c001caf0:	53                   	push   ebx
c001caf1:	83 ec 48             	sub    esp,0x48
c001caf4:	68 14 01 00 00       	push   0x114
c001caf9:	e8 45 2d ff ff       	call   c000f843 <malloc>
c001cafe:	83 c4 0c             	add    esp,0xc
c001cb01:	89 c6                	mov    esi,eax
c001cb03:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001cb07:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001cb0b:	50                   	push   eax
c001cb0c:	e8 31 6a ff ff       	call   c0013542 <File::File(char const*, Process*)>
c001cb11:	58                   	pop    eax
c001cb12:	5a                   	pop    edx
c001cb13:	6a 01                	push   0x1
c001cb15:	56                   	push   esi
c001cb16:	e8 8b 6a ff ff       	call   c00135a6 <File::open(FileOpenMode)>
c001cb1b:	83 c4 10             	add    esp,0x10
c001cb1e:	85 c0                	test   eax,eax
c001cb20:	0f 85 47 01 00 00    	jne    c001cc6d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb26:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001cb2e:	83 ec 0c             	sub    esp,0xc
c001cb31:	6a 34                	push   0x34
c001cb33:	e8 0b 2d ff ff       	call   c000f843 <malloc>
c001cb38:	89 c3                	mov    ebx,eax
c001cb3a:	58                   	pop    eax
c001cb3b:	8b 06                	mov    eax,DWORD PTR [esi]
c001cb3d:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001cb41:	57                   	push   edi
c001cb42:	53                   	push   ebx
c001cb43:	6a 00                	push   0x0
c001cb45:	6a 34                	push   0x34
c001cb47:	56                   	push   esi
c001cb48:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cb4b:	83 c4 20             	add    esp,0x20
c001cb4e:	85 c0                	test   eax,eax
c001cb50:	0f 85 17 01 00 00    	jne    c001cc6d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb56:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001cb5c:	0f 85 0b 01 00 00    	jne    c001cc6d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb62:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001cb65:	85 c0                	test   eax,eax
c001cb67:	0f 84 00 01 00 00    	je     c001cc6d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb6d:	31 d2                	xor    edx,edx
c001cb6f:	55                   	push   ebp
c001cb70:	52                   	push   edx
c001cb71:	50                   	push   eax
c001cb72:	56                   	push   esi
c001cb73:	e8 ec 6a ff ff       	call   c0013664 <File::seek(unsigned long long)>
c001cb78:	83 c4 10             	add    esp,0x10
c001cb7b:	85 c0                	test   eax,eax
c001cb7d:	0f 85 ea 00 00 00    	jne    c001cc6d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb83:	83 ec 0c             	sub    esp,0xc
c001cb86:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001cb89:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cb8d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cb91:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cb95:	0f af c2             	imul   eax,edx
c001cb98:	50                   	push   eax
c001cb99:	e8 a5 2c ff ff       	call   c000f843 <malloc>
c001cb9e:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cba0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cba4:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cba7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cbab:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cbaf:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cbb3:	0f af c2             	imul   eax,edx
c001cbb6:	99                   	cdq    
c001cbb7:	52                   	push   edx
c001cbb8:	50                   	push   eax
c001cbb9:	56                   	push   esi
c001cbba:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cbbd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001cbc0:	83 c4 20             	add    esp,0x20
c001cbc3:	85 c0                	test   eax,eax
c001cbc5:	0f 84 a2 00 00 00    	je     c001cc6d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cbcb:	31 d2                	xor    edx,edx
c001cbcd:	51                   	push   ecx
c001cbce:	52                   	push   edx
c001cbcf:	50                   	push   eax
c001cbd0:	56                   	push   esi
c001cbd1:	e8 8e 6a ff ff       	call   c0013664 <File::seek(unsigned long long)>
c001cbd6:	83 c4 10             	add    esp,0x10
c001cbd9:	85 c0                	test   eax,eax
c001cbdb:	0f 85 8c 00 00 00    	jne    c001cc6d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cbe1:	83 ec 0c             	sub    esp,0xc
c001cbe4:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cbe8:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cbec:	31 ed                	xor    ebp,ebp
c001cbee:	0f af c2             	imul   eax,edx
c001cbf1:	50                   	push   eax
c001cbf2:	e8 4c 2c ff ff       	call   c000f843 <malloc>
c001cbf7:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cbf9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cbfd:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cc00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc04:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cc08:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cc0c:	0f af c2             	imul   eax,edx
c001cc0f:	99                   	cdq    
c001cc10:	52                   	push   edx
c001cc11:	50                   	push   eax
c001cc12:	56                   	push   esi
c001cc13:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc16:	83 c4 20             	add    esp,0x20
c001cc19:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001cc21:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001cc25:	0f 86 80 00 00 00    	jbe    c001ccab <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001cc2b:	0f b7 fd             	movzx  edi,bp
c001cc2e:	c1 e7 05             	shl    edi,0x5
c001cc31:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cc35:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001cc38:	75 6b                	jne    c001cca5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cc3a:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001cc3d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cc41:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001cc44:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cc48:	52                   	push   edx
c001cc49:	31 d2                	xor    edx,edx
c001cc4b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001cc4e:	52                   	push   edx
c001cc4f:	50                   	push   eax
c001cc50:	56                   	push   esi
c001cc51:	e8 0e 6a ff ff       	call   c0013664 <File::seek(unsigned long long)>
c001cc56:	83 c4 10             	add    esp,0x10
c001cc59:	85 c0                	test   eax,eax
c001cc5b:	74 17                	je     c001cc74 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001cc5d:	83 ec 0c             	sub    esp,0xc
c001cc60:	68 aa c0 02 c0       	push   0xc002c0aa
c001cc65:	e8 80 63 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001cc6a:	83 c4 10             	add    esp,0x10
c001cc6d:	31 c0                	xor    eax,eax
c001cc6f:	e9 87 00 00 00       	jmp    c001ccfb <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cc74:	83 ec 0c             	sub    esp,0xc
c001cc77:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001cc7a:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001cc7d:	50                   	push   eax
c001cc7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cc82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cc86:	56                   	push   esi
c001cc87:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001cc8b:	e8 cb fb ff ff       	call   c001c85b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cc90:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cc94:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001cc98:	83 c4 20             	add    esp,0x20
c001cc9b:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cc9f:	73 04                	jae    c001cca5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cca1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cca5:	45                   	inc    ebp
c001cca6:	e9 76 ff ff ff       	jmp    c001cc21 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001ccab:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001ccaf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ccb3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ccb7:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001ccbd:	83 ec 0c             	sub    esp,0xc
c001ccc0:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001ccc6:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cccb:	05 00 10 00 00       	add    eax,0x1000
c001ccd0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001ccd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccd7:	e8 77 2b ff ff       	call   c000f853 <free>
c001ccdc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ccdf:	e8 6f 2b ff ff       	call   c000f853 <free>
c001cce4:	58                   	pop    eax
c001cce5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cce9:	e8 65 2b ff ff       	call   c000f853 <free>
c001ccee:	89 34 24             	mov    DWORD PTR [esp],esi
c001ccf1:	e8 0e 69 ff ff       	call   c0013604 <File::close()>
c001ccf6:	83 c4 10             	add    esp,0x10
c001ccf9:	b0 01                	mov    al,0x1
c001ccfb:	83 c4 3c             	add    esp,0x3c
c001ccfe:	5b                   	pop    ebx
c001ccff:	5e                   	pop    esi
c001cd00:	5f                   	pop    edi
c001cd01:	5d                   	pop    ebp
c001cd02:	c3                   	ret    

c001cd03 <Thr::runtimeReferenceHelper()>:
c001cd03:	83 ec 18             	sub    esp,0x18
c001cd06:	68 b2 c0 02 c0       	push   0xc002c0b2
c001cd0b:	e8 da 62 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001cd10:	fa                   	cli    
c001cd11:	83 c4 10             	add    esp,0x10
c001cd14:	eb fe                	jmp    c001cd14 <Thr::runtimeReferenceHelper()+0x11>

c001cd16 <Thr::getAddressOfKernelSymbol(char const*)>:
c001cd16:	57                   	push   edi
c001cd17:	56                   	push   esi
c001cd18:	53                   	push   ebx
c001cd19:	31 db                	xor    ebx,ebx
c001cd1b:	39 1d e0 19 03 c0    	cmp    DWORD PTR ds:0xc00319e0,ebx
c001cd21:	7e 3c                	jle    c001cd5f <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001cd23:	8b 34 9d 60 19 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffce6a0]
c001cd2a:	31 ff                	xor    edi,edi
c001cd2c:	39 3c 9d 60 18 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffce7a0],edi
c001cd33:	7e 27                	jle    c001cd5c <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001cd35:	50                   	push   eax
c001cd36:	50                   	push   eax
c001cd37:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd3b:	8b 06                	mov    eax,DWORD PTR [esi]
c001cd3d:	03 04 9d e0 18 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffce720]
c001cd44:	50                   	push   eax
c001cd45:	e8 76 3b fe ff       	call   c00008c0 <strcmp>
c001cd4a:	83 c4 10             	add    esp,0x10
c001cd4d:	85 c0                	test   eax,eax
c001cd4f:	75 05                	jne    c001cd56 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001cd51:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001cd54:	eb 0b                	jmp    c001cd61 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001cd56:	83 c6 10             	add    esi,0x10
c001cd59:	47                   	inc    edi
c001cd5a:	eb d0                	jmp    c001cd2c <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001cd5c:	43                   	inc    ebx
c001cd5d:	eb bc                	jmp    c001cd1b <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001cd5f:	31 c0                	xor    eax,eax
c001cd61:	5b                   	pop    ebx
c001cd62:	5e                   	pop    esi
c001cd63:	5f                   	pop    edi
c001cd64:	c3                   	ret    

c001cd65 <Thr::loadKernelSymbolTable(char const*)>:
c001cd65:	55                   	push   ebp
c001cd66:	57                   	push   edi
c001cd67:	56                   	push   esi
c001cd68:	53                   	push   ebx
c001cd69:	83 ec 68             	sub    esp,0x68
c001cd6c:	8b 35 34 1a 03 c0    	mov    esi,DWORD PTR ds:0xc0031a34
c001cd72:	68 14 01 00 00       	push   0x114
c001cd77:	e8 c7 2a ff ff       	call   c000f843 <malloc>
c001cd7c:	83 c4 0c             	add    esp,0xc
c001cd7f:	89 c3                	mov    ebx,eax
c001cd81:	56                   	push   esi
c001cd82:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001cd86:	50                   	push   eax
c001cd87:	e8 b6 67 ff ff       	call   c0013542 <File::File(char const*, Process*)>
c001cd8c:	5e                   	pop    esi
c001cd8d:	5f                   	pop    edi
c001cd8e:	6a 01                	push   0x1
c001cd90:	53                   	push   ebx
c001cd91:	e8 10 68 ff ff       	call   c00135a6 <File::open(FileOpenMode)>
c001cd96:	83 c4 10             	add    esp,0x10
c001cd99:	85 c0                	test   eax,eax
c001cd9b:	74 0a                	je     c001cda7 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001cd9d:	83 ec 0c             	sub    esp,0xc
c001cda0:	68 d4 c0 02 c0       	push   0xc002c0d4
c001cda5:	eb 34                	jmp    c001cddb <Thr::loadKernelSymbolTable(char const*)+0x76>
c001cda7:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001cdaf:	83 ec 0c             	sub    esp,0xc
c001cdb2:	6a 34                	push   0x34
c001cdb4:	e8 8a 2a ff ff       	call   c000f843 <malloc>
c001cdb9:	59                   	pop    ecx
c001cdba:	89 c7                	mov    edi,eax
c001cdbc:	8d 74 24 34          	lea    esi,[esp+0x34]
c001cdc0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cdc2:	56                   	push   esi
c001cdc3:	57                   	push   edi
c001cdc4:	6a 00                	push   0x0
c001cdc6:	6a 34                	push   0x34
c001cdc8:	53                   	push   ebx
c001cdc9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cdcc:	83 c4 20             	add    esp,0x20
c001cdcf:	85 c0                	test   eax,eax
c001cdd1:	74 17                	je     c001cdea <Thr::loadKernelSymbolTable(char const*)+0x85>
c001cdd3:	83 ec 0c             	sub    esp,0xc
c001cdd6:	68 eb c0 02 c0       	push   0xc002c0eb
c001cddb:	e8 af d8 ff ff       	call   c001a68f <Krnl::panic(char const*)>
c001cde0:	83 c4 10             	add    esp,0x10
c001cde3:	31 c0                	xor    eax,eax
c001cde5:	e9 31 02 00 00       	jmp    c001d01b <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001cdea:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cdf0:	75 e1                	jne    c001cdd3 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cdf2:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cdf5:	85 c0                	test   eax,eax
c001cdf7:	74 da                	je     c001cdd3 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cdf9:	52                   	push   edx
c001cdfa:	31 d2                	xor    edx,edx
c001cdfc:	52                   	push   edx
c001cdfd:	50                   	push   eax
c001cdfe:	53                   	push   ebx
c001cdff:	e8 60 68 ff ff       	call   c0013664 <File::seek(unsigned long long)>
c001ce04:	83 c4 10             	add    esp,0x10
c001ce07:	85 c0                	test   eax,eax
c001ce09:	75 c8                	jne    c001cdd3 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001ce0b:	83 ec 0c             	sub    esp,0xc
c001ce0e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ce12:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce16:	31 ed                	xor    ebp,ebp
c001ce18:	0f af c2             	imul   eax,edx
c001ce1b:	50                   	push   eax
c001ce1c:	e8 22 2a ff ff       	call   c000f843 <malloc>
c001ce21:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001ce23:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ce27:	89 34 24             	mov    DWORD PTR [esp],esi
c001ce2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ce2e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ce32:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce36:	0f af c2             	imul   eax,edx
c001ce39:	99                   	cdq    
c001ce3a:	52                   	push   edx
c001ce3b:	50                   	push   eax
c001ce3c:	53                   	push   ebx
c001ce3d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ce40:	83 c4 20             	add    esp,0x20
c001ce43:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ce4b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001ce53:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ce5b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ce63:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001ce67:	0f 86 aa 00 00 00    	jbe    c001cf17 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001ce6d:	0f b7 f5             	movzx  esi,bp
c001ce70:	6b f6 28             	imul   esi,esi,0x28
c001ce73:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ce77:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ce7a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ce7e:	50                   	push   eax
c001ce7f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ce83:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001ce87:	8b 16                	mov    edx,DWORD PTR [esi]
c001ce89:	6b c0 28             	imul   eax,eax,0x28
c001ce8c:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001ce90:	89 d0                	mov    eax,edx
c001ce92:	31 d2                	xor    edx,edx
c001ce94:	52                   	push   edx
c001ce95:	50                   	push   eax
c001ce96:	53                   	push   ebx
c001ce97:	e8 c8 67 ff ff       	call   c0013664 <File::seek(unsigned long long)>
c001ce9c:	83 c4 0c             	add    esp,0xc
c001ce9f:	6a 20                	push   0x20
c001cea1:	6a 00                	push   0x0
c001cea3:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cea7:	52                   	push   edx
c001cea8:	e8 cb 38 fe ff       	call   c0000778 <memset>
c001cead:	58                   	pop    eax
c001ceae:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ceb0:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001ceb4:	51                   	push   ecx
c001ceb5:	8d 54 24 40          	lea    edx,[esp+0x40]
c001ceb9:	52                   	push   edx
c001ceba:	6a 00                	push   0x0
c001cebc:	6a 1f                	push   0x1f
c001cebe:	53                   	push   ebx
c001cebf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cec2:	83 c4 18             	add    esp,0x18
c001cec5:	68 02 c1 02 c0       	push   0xc002c102
c001ceca:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cece:	52                   	push   edx
c001cecf:	e8 ec 39 fe ff       	call   c00008c0 <strcmp>
c001ced4:	83 c4 10             	add    esp,0x10
c001ced7:	85 c0                	test   eax,eax
c001ced9:	75 0f                	jne    c001ceea <Thr::loadKernelSymbolTable(char const*)+0x185>
c001cedb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cede:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cee2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cee6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ceea:	50                   	push   eax
c001ceeb:	50                   	push   eax
c001ceec:	68 0a c1 02 c0       	push   0xc002c10a
c001cef1:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001cef5:	50                   	push   eax
c001cef6:	e8 c5 39 fe ff       	call   c00008c0 <strcmp>
c001cefb:	83 c4 10             	add    esp,0x10
c001cefe:	85 c0                	test   eax,eax
c001cf00:	75 0f                	jne    c001cf11 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001cf02:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cf05:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cf09:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cf0d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cf11:	45                   	inc    ebp
c001cf12:	e9 4c ff ff ff       	jmp    c001ce63 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001cf17:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cf1c:	75 10                	jne    c001cf2e <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001cf1e:	83 ec 0c             	sub    esp,0xc
c001cf21:	68 12 c1 02 c0       	push   0xc002c112
c001cf26:	e8 64 d7 ff ff       	call   c001a68f <Krnl::panic(char const*)>
c001cf2b:	83 c4 10             	add    esp,0x10
c001cf2e:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001cf33:	75 10                	jne    c001cf45 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001cf35:	83 ec 0c             	sub    esp,0xc
c001cf38:	68 12 c1 02 c0       	push   0xc002c112
c001cf3d:	e8 4d d7 ff ff       	call   c001a68f <Krnl::panic(char const*)>
c001cf42:	83 c4 10             	add    esp,0x10
c001cf45:	31 d2                	xor    edx,edx
c001cf47:	50                   	push   eax
c001cf48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf4c:	52                   	push   edx
c001cf4d:	50                   	push   eax
c001cf4e:	53                   	push   ebx
c001cf4f:	e8 10 67 ff ff       	call   c0013664 <File::seek(unsigned long long)>
c001cf54:	5a                   	pop    edx
c001cf55:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cf59:	e8 e5 28 ff ff       	call   c000f843 <malloc>
c001cf5e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cf62:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cf66:	31 c9                	xor    ecx,ecx
c001cf68:	5e                   	pop    esi
c001cf69:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf6b:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001cf6f:	55                   	push   ebp
c001cf70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf74:	51                   	push   ecx
c001cf75:	52                   	push   edx
c001cf76:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cf7a:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001cf7e:	53                   	push   ebx
c001cf7f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf82:	83 c4 14             	add    esp,0x14
c001cf85:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cf89:	e8 b5 28 ff ff       	call   c000f843 <malloc>
c001cf8e:	89 c6                	mov    esi,eax
c001cf90:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf92:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf95:	56                   	push   esi
c001cf96:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cf9a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cf9e:	51                   	push   ecx
c001cf9f:	52                   	push   edx
c001cfa0:	53                   	push   ebx
c001cfa1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cfa4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cfa8:	8b 15 e0 19 03 c0    	mov    edx,DWORD PTR ds:0xc00319e0
c001cfae:	83 c4 1c             	add    esp,0x1c
c001cfb1:	c1 e8 04             	shr    eax,0x4
c001cfb4:	89 04 95 60 18 03 c0 	mov    DWORD PTR [edx*4-0x3ffce7a0],eax
c001cfbb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cfbf:	31 d2                	xor    edx,edx
c001cfc1:	52                   	push   edx
c001cfc2:	50                   	push   eax
c001cfc3:	53                   	push   ebx
c001cfc4:	e8 9b 66 ff ff       	call   c0013664 <File::seek(unsigned long long)>
c001cfc9:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cfcb:	31 d2                	xor    edx,edx
c001cfcd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cfd0:	56                   	push   esi
c001cfd1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cfd5:	52                   	push   edx
c001cfd6:	50                   	push   eax
c001cfd7:	53                   	push   ebx
c001cfd8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cfdb:	83 c4 14             	add    esp,0x14
c001cfde:	53                   	push   ebx
c001cfdf:	e8 20 66 ff ff       	call   c0013604 <File::close()>
c001cfe4:	5d                   	pop    ebp
c001cfe5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cfe9:	e8 65 28 ff ff       	call   c000f853 <free>
c001cfee:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cff1:	e8 5d 28 ff ff       	call   c000f853 <free>
c001cff6:	a1 e0 19 03 c0       	mov    eax,ds:0xc00319e0
c001cffb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cfff:	8d 50 01             	lea    edx,[eax+0x1]
c001d002:	89 0c 85 60 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce6a0],ecx
c001d009:	89 34 85 e0 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce720],esi
c001d010:	89 15 e0 19 03 c0    	mov    DWORD PTR ds:0xc00319e0,edx
c001d016:	83 c4 10             	add    esp,0x10
c001d019:	b0 01                	mov    al,0x1
c001d01b:	83 c4 5c             	add    esp,0x5c
c001d01e:	5b                   	pop    ebx
c001d01f:	5e                   	pop    esi
c001d020:	5f                   	pop    edi
c001d021:	5d                   	pop    ebp
c001d022:	c3                   	ret    

c001d023 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001d023:	55                   	push   ebp
c001d024:	57                   	push   edi
c001d025:	56                   	push   esi
c001d026:	53                   	push   ebx
c001d027:	81 ec 68 03 00 00    	sub    esp,0x368
c001d02d:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001d034:	8b 1d 34 1a 03 c0    	mov    ebx,DWORD PTR ds:0xc0031a34
c001d03a:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001d03e:	68 14 01 00 00       	push   0x114
c001d043:	e8 fb 27 ff ff       	call   c000f843 <malloc>
c001d048:	83 c4 0c             	add    esp,0xc
c001d04b:	89 c5                	mov    ebp,eax
c001d04d:	53                   	push   ebx
c001d04e:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001d055:	50                   	push   eax
c001d056:	e8 e7 64 ff ff       	call   c0013542 <File::File(char const*, Process*)>
c001d05b:	5e                   	pop    esi
c001d05c:	5f                   	pop    edi
c001d05d:	6a 01                	push   0x1
c001d05f:	55                   	push   ebp
c001d060:	e8 41 65 ff ff       	call   c00135a6 <File::open(FileOpenMode)>
c001d065:	83 c4 10             	add    esp,0x10
c001d068:	85 c0                	test   eax,eax
c001d06a:	0f 85 8d 06 00 00    	jne    c001d6fd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d070:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001d078:	83 ec 0c             	sub    esp,0xc
c001d07b:	6a 34                	push   0x34
c001d07d:	e8 c1 27 ff ff       	call   c000f843 <malloc>
c001d082:	5b                   	pop    ebx
c001d083:	89 c7                	mov    edi,eax
c001d085:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d089:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d08c:	53                   	push   ebx
c001d08d:	57                   	push   edi
c001d08e:	6a 00                	push   0x0
c001d090:	6a 34                	push   0x34
c001d092:	55                   	push   ebp
c001d093:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d096:	83 c4 20             	add    esp,0x20
c001d099:	85 c0                	test   eax,eax
c001d09b:	0f 85 5c 06 00 00    	jne    c001d6fd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0a1:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d0a7:	0f 85 50 06 00 00    	jne    c001d6fd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0ad:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d0b0:	85 c0                	test   eax,eax
c001d0b2:	0f 84 45 06 00 00    	je     c001d6fd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0b8:	31 d2                	xor    edx,edx
c001d0ba:	51                   	push   ecx
c001d0bb:	52                   	push   edx
c001d0bc:	50                   	push   eax
c001d0bd:	55                   	push   ebp
c001d0be:	e8 a1 65 ff ff       	call   c0013664 <File::seek(unsigned long long)>
c001d0c3:	83 c4 10             	add    esp,0x10
c001d0c6:	85 c0                	test   eax,eax
c001d0c8:	0f 85 2f 06 00 00    	jne    c001d6fd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0ce:	83 ec 0c             	sub    esp,0xc
c001d0d1:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001d0d4:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d0d8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d0dc:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d0e0:	0f af c2             	imul   eax,edx
c001d0e3:	50                   	push   eax
c001d0e4:	e8 5a 27 ff ff       	call   c000f843 <malloc>
c001d0e9:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d0ec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d0f0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d0f3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d0f7:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d0fb:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d0ff:	0f af c2             	imul   eax,edx
c001d102:	99                   	cdq    
c001d103:	52                   	push   edx
c001d104:	50                   	push   eax
c001d105:	55                   	push   ebp
c001d106:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d109:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d10c:	83 c4 20             	add    esp,0x20
c001d10f:	85 c0                	test   eax,eax
c001d111:	0f 84 e6 05 00 00    	je     c001d6fd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d117:	52                   	push   edx
c001d118:	31 d2                	xor    edx,edx
c001d11a:	52                   	push   edx
c001d11b:	50                   	push   eax
c001d11c:	55                   	push   ebp
c001d11d:	e8 42 65 ff ff       	call   c0013664 <File::seek(unsigned long long)>
c001d122:	83 c4 10             	add    esp,0x10
c001d125:	85 c0                	test   eax,eax
c001d127:	0f 85 d0 05 00 00    	jne    c001d6fd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d12d:	83 ec 0c             	sub    esp,0xc
c001d130:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d134:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d138:	31 f6                	xor    esi,esi
c001d13a:	0f af c2             	imul   eax,edx
c001d13d:	50                   	push   eax
c001d13e:	e8 00 27 ff ff       	call   c000f843 <malloc>
c001d143:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d146:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d14a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d14d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d151:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d155:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d159:	0f af c2             	imul   eax,edx
c001d15c:	99                   	cdq    
c001d15d:	52                   	push   edx
c001d15e:	50                   	push   eax
c001d15f:	55                   	push   ebp
c001d160:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d163:	83 c4 20             	add    esp,0x20
c001d166:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d16a:	0f 86 8a 00 00 00    	jbe    c001d1fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d170:	0f b7 de             	movzx  ebx,si
c001d173:	c1 e3 05             	shl    ebx,0x5
c001d176:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d17a:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d17d:	75 75                	jne    c001d1f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d17f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d182:	31 d2                	xor    edx,edx
c001d184:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d188:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d18b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d18f:	50                   	push   eax
c001d190:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d193:	52                   	push   edx
c001d194:	50                   	push   eax
c001d195:	55                   	push   ebp
c001d196:	e8 c9 64 ff ff       	call   c0013664 <File::seek(unsigned long long)>
c001d19b:	83 c4 10             	add    esp,0x10
c001d19e:	85 c0                	test   eax,eax
c001d1a0:	0f 85 57 05 00 00    	jne    c001d6fd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d1a6:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d1ad:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d1b0:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d1b4:	31 d2                	xor    edx,edx
c001d1b6:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d1ba:	83 ec 0c             	sub    esp,0xc
c001d1bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d1c1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d1c8:	50                   	push   eax
c001d1c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d1cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1d1:	52                   	push   edx
c001d1d2:	50                   	push   eax
c001d1d3:	55                   	push   ebp
c001d1d4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d1d7:	83 c4 1c             	add    esp,0x1c
c001d1da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d1dd:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d1e0:	50                   	push   eax
c001d1e1:	6a 00                	push   0x0
c001d1e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1e7:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d1eb:	50                   	push   eax
c001d1ec:	e8 87 35 fe ff       	call   c0000778 <memset>
c001d1f1:	83 c4 10             	add    esp,0x10
c001d1f4:	46                   	inc    esi
c001d1f5:	e9 6c ff ff ff       	jmp    c001d166 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d1fa:	53                   	push   ebx
c001d1fb:	31 db                	xor    ebx,ebx
c001d1fd:	68 00 01 00 00       	push   0x100
c001d202:	6a 00                	push   0x0
c001d204:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d208:	50                   	push   eax
c001d209:	e8 6a 35 fe ff       	call   c0000778 <memset>
c001d20e:	83 c4 0c             	add    esp,0xc
c001d211:	68 00 01 00 00       	push   0x100
c001d216:	6a 00                	push   0x0
c001d218:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d21f:	50                   	push   eax
c001d220:	e8 53 35 fe ff       	call   c0000778 <memset>
c001d225:	83 c4 10             	add    esp,0x10
c001d228:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d230:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d238:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d240:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d248:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d250:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d254:	0f 86 30 01 00 00    	jbe    c001d38a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d25a:	0f b7 f3             	movzx  esi,bx
c001d25d:	6b f6 28             	imul   esi,esi,0x28
c001d260:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d264:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d267:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d26b:	52                   	push   edx
c001d26c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d270:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d274:	8b 06                	mov    eax,DWORD PTR [esi]
c001d276:	6b d2 28             	imul   edx,edx,0x28
c001d279:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d27d:	31 d2                	xor    edx,edx
c001d27f:	52                   	push   edx
c001d280:	50                   	push   eax
c001d281:	55                   	push   ebp
c001d282:	e8 dd 63 ff ff       	call   c0013664 <File::seek(unsigned long long)>
c001d287:	83 c4 0c             	add    esp,0xc
c001d28a:	6a 20                	push   0x20
c001d28c:	6a 00                	push   0x0
c001d28e:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d295:	51                   	push   ecx
c001d296:	e8 dd 34 fe ff       	call   c0000778 <memset>
c001d29b:	59                   	pop    ecx
c001d29c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d29f:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d2a3:	52                   	push   edx
c001d2a4:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d2ab:	51                   	push   ecx
c001d2ac:	6a 00                	push   0x0
c001d2ae:	6a 1f                	push   0x1f
c001d2b0:	55                   	push   ebp
c001d2b1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d2b4:	83 c4 1c             	add    esp,0x1c
c001d2b7:	6a 09                	push   0x9
c001d2b9:	68 2c c1 02 c0       	push   0xc002c12c
c001d2be:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d2c5:	51                   	push   ecx
c001d2c6:	e8 75 33 fe ff       	call   c0000640 <memcmp>
c001d2cb:	83 c4 10             	add    esp,0x10
c001d2ce:	85 c0                	test   eax,eax
c001d2d0:	75 21                	jne    c001d2f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d2d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d2d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d2da:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d2de:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d2e2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d2e5:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d2ec:	89 d0                	mov    eax,edx
c001d2ee:	40                   	inc    eax
c001d2ef:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d2f3:	50                   	push   eax
c001d2f4:	6a 09                	push   0x9
c001d2f6:	68 36 c1 02 c0       	push   0xc002c136
c001d2fb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d302:	50                   	push   eax
c001d303:	e8 38 33 fe ff       	call   c0000640 <memcmp>
c001d308:	83 c4 10             	add    esp,0x10
c001d30b:	85 c0                	test   eax,eax
c001d30d:	75 21                	jne    c001d330 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d30f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d313:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d317:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d31b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d31f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d322:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d329:	89 d0                	mov    eax,edx
c001d32b:	40                   	inc    eax
c001d32c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d330:	50                   	push   eax
c001d331:	50                   	push   eax
c001d332:	68 02 c1 02 c0       	push   0xc002c102
c001d337:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d33e:	50                   	push   eax
c001d33f:	e8 7c 35 fe ff       	call   c00008c0 <strcmp>
c001d344:	83 c4 10             	add    esp,0x10
c001d347:	85 c0                	test   eax,eax
c001d349:	75 0f                	jne    c001d35a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d34b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d34e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d352:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d356:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d35a:	50                   	push   eax
c001d35b:	50                   	push   eax
c001d35c:	68 0a c1 02 c0       	push   0xc002c10a
c001d361:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d368:	50                   	push   eax
c001d369:	e8 52 35 fe ff       	call   c00008c0 <strcmp>
c001d36e:	83 c4 10             	add    esp,0x10
c001d371:	85 c0                	test   eax,eax
c001d373:	75 0f                	jne    c001d384 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d375:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d378:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d37c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d380:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d384:	43                   	inc    ebx
c001d385:	e9 c6 fe ff ff       	jmp    c001d250 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d38a:	31 d2                	xor    edx,edx
c001d38c:	50                   	push   eax
c001d38d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d391:	52                   	push   edx
c001d392:	50                   	push   eax
c001d393:	55                   	push   ebp
c001d394:	e8 cb 62 ff ff       	call   c0013664 <File::seek(unsigned long long)>
c001d399:	58                   	pop    eax
c001d39a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d39e:	e8 a0 24 ff ff       	call   c000f843 <malloc>
c001d3a3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d3a6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d3aa:	31 d2                	xor    edx,edx
c001d3ac:	58                   	pop    eax
c001d3ad:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d3b1:	53                   	push   ebx
c001d3b2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d3b6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d3ba:	52                   	push   edx
c001d3bb:	50                   	push   eax
c001d3bc:	55                   	push   ebp
c001d3bd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d3c0:	83 c4 14             	add    esp,0x14
c001d3c3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d3c7:	e8 77 24 ff ff       	call   c000f843 <malloc>
c001d3cc:	31 d2                	xor    edx,edx
c001d3ce:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d3d2:	83 c4 0c             	add    esp,0xc
c001d3d5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d3d9:	52                   	push   edx
c001d3da:	50                   	push   eax
c001d3db:	55                   	push   ebp
c001d3dc:	e8 83 62 ff ff       	call   c0013664 <File::seek(unsigned long long)>
c001d3e1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d3e4:	31 d2                	xor    edx,edx
c001d3e6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d3e9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d3ed:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d3f1:	52                   	push   edx
c001d3f2:	50                   	push   eax
c001d3f3:	55                   	push   ebp
c001d3f4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d3f7:	83 c4 20             	add    esp,0x20
c001d3fa:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d402:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d406:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d40a:	0f 84 f1 02 00 00    	je     c001d701 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001d410:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d417:	31 d2                	xor    edx,edx
c001d419:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d41d:	c1 e8 03             	shr    eax,0x3
c001d420:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d424:	51                   	push   ecx
c001d425:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d429:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d42d:	52                   	push   edx
c001d42e:	50                   	push   eax
c001d42f:	55                   	push   ebp
c001d430:	e8 2f 62 ff ff       	call   c0013664 <File::seek(unsigned long long)>
c001d435:	5b                   	pop    ebx
c001d436:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d43a:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d441:	e8 fd 23 ff ff       	call   c000f843 <malloc>
c001d446:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d449:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d44d:	31 d2                	xor    edx,edx
c001d44f:	5e                   	pop    esi
c001d450:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d454:	50                   	push   eax
c001d455:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d459:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d45d:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d464:	52                   	push   edx
c001d465:	50                   	push   eax
c001d466:	55                   	push   ebp
c001d467:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d46a:	83 c4 20             	add    esp,0x20
c001d46d:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d475:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d479:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d47d:	0f 8d 62 02 00 00    	jge    c001d6e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001d483:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d487:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d48b:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d490:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d493:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d497:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d49b:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d49f:	89 d8                	mov    eax,ebx
c001d4a1:	c1 e8 08             	shr    eax,0x8
c001d4a4:	89 c6                	mov    esi,eax
c001d4a6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d4aa:	c1 e6 04             	shl    esi,0x4
c001d4ad:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d4b1:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d4b4:	85 d2                	test   edx,edx
c001d4b6:	0f 85 bf 00 00 00    	jne    c001d57b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d4bc:	83 ec 0c             	sub    esp,0xc
c001d4bf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d4c3:	03 06                	add    eax,DWORD PTR [esi]
c001d4c5:	50                   	push   eax
c001d4c6:	e8 4b f8 ff ff       	call   c001cd16 <Thr::getAddressOfKernelSymbol(char const*)>
c001d4cb:	83 c4 10             	add    esp,0x10
c001d4ce:	89 c2                	mov    edx,eax
c001d4d0:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d4d5:	85 c0                	test   eax,eax
c001d4d7:	0f 85 9e 00 00 00    	jne    c001d57b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d4dd:	83 ec 0c             	sub    esp,0xc
c001d4e0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d4e4:	03 06                	add    eax,DWORD PTR [esi]
c001d4e6:	50                   	push   eax
c001d4e7:	e8 09 10 ff ff       	call   c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>
c001d4ec:	83 c4 10             	add    esp,0x10
c001d4ef:	89 c2                	mov    edx,eax
c001d4f1:	85 c0                	test   eax,eax
c001d4f3:	0f 85 82 00 00 00    	jne    c001d57b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d4f9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d4fd:	50                   	push   eax
c001d4fe:	50                   	push   eax
c001d4ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d503:	03 06                	add    eax,DWORD PTR [esi]
c001d505:	50                   	push   eax
c001d506:	68 40 c1 02 c0       	push   0xc002c140
c001d50b:	e8 da 5a ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001d510:	58                   	pop    eax
c001d511:	5a                   	pop    edx
c001d512:	68 5a c1 02 c0       	push   0xc002c15a
c001d517:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d51e:	50                   	push   eax
c001d51f:	e8 10 33 fe ff       	call   c0000834 <strcpy>
c001d524:	59                   	pop    ecx
c001d525:	58                   	pop    eax
c001d526:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d52a:	03 06                	add    eax,DWORD PTR [esi]
c001d52c:	50                   	push   eax
c001d52d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d534:	50                   	push   eax
c001d535:	e8 3a 34 fe ff       	call   c0000974 <strcat>
c001d53a:	58                   	pop    eax
c001d53b:	5a                   	pop    edx
c001d53c:	68 f0 c1 02 c0       	push   0xc002c1f0
c001d541:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d548:	50                   	push   eax
c001d549:	e8 26 34 fe ff       	call   c0000974 <strcat>
c001d54e:	83 c4 10             	add    esp,0x10
c001d551:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d556:	0f 84 43 01 00 00    	je     c001d69f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d55c:	83 ec 0c             	sub    esp,0xc
c001d55f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d566:	50                   	push   eax
c001d567:	e8 23 d1 ff ff       	call   c001a68f <Krnl::panic(char const*)>
c001d56c:	83 c4 10             	add    esp,0x10
c001d56f:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d573:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d577:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d57b:	80 fb 01             	cmp    bl,0x1
c001d57e:	75 7d                	jne    c001d5fd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001d580:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d587:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d58b:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d58f:	01 ce                	add    esi,ecx
c001d591:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d597:	0f 94 c0             	sete   al
c001d59a:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d5a0:	0f 94 c3             	sete   bl
c001d5a3:	09 c3                	or     ebx,eax
c001d5a5:	8b 06                	mov    eax,DWORD PTR [esi]
c001d5a7:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d5ac:	74 36                	je     c001d5e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001d5ae:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d5b1:	84 db                	test   bl,bl
c001d5b3:	75 0a                	jne    c001d5bf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001d5b5:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d5b9:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d5bd:	76 37                	jbe    c001d5f6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d5bf:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d5c3:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d5c8:	0f 84 d1 00 00 00    	je     c001d69f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d5ce:	83 ec 0c             	sub    esp,0xc
c001d5d1:	68 71 c1 02 c0       	push   0xc002c171
c001d5d6:	e8 b4 d0 ff ff       	call   c001a68f <Krnl::panic(char const*)>
c001d5db:	83 c4 10             	add    esp,0x10
c001d5de:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d5e2:	eb 12                	jmp    c001d5f6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d5e4:	01 c1                	add    ecx,eax
c001d5e6:	84 db                	test   bl,bl
c001d5e8:	75 0c                	jne    c001d5f6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d5ea:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d5ee:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d5f2:	77 02                	ja     c001d5f6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d5f4:	01 d1                	add    ecx,edx
c001d5f6:	89 0e                	mov    DWORD PTR [esi],ecx
c001d5f8:	e9 df 00 00 00       	jmp    c001d6dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d5fd:	80 fb 02             	cmp    bl,0x2
c001d600:	75 71                	jne    c001d673 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001d602:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d609:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d60d:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d611:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d617:	74 15                	je     c001d62e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d619:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d61f:	74 0d                	je     c001d62e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d621:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d625:	83 e8 04             	sub    eax,0x4
c001d628:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d62c:	76 1f                	jbe    c001d64d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001d62e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d632:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d637:	74 66                	je     c001d69f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d639:	83 ec 0c             	sub    esp,0xc
c001d63c:	68 8d c1 02 c0       	push   0xc002c18d
c001d641:	e8 49 d0 ff ff       	call   c001a68f <Krnl::panic(char const*)>
c001d646:	83 c4 10             	add    esp,0x10
c001d649:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d64d:	8b 06                	mov    eax,DWORD PTR [esi]
c001d64f:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d654:	74 13                	je     c001d669 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001d656:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d65a:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d661:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d665:	01 c8                	add    eax,ecx
c001d667:	eb 04                	jmp    c001d66d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001d669:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d66d:	01 c2                	add    edx,eax
c001d66f:	89 16                	mov    DWORD PTR [esi],edx
c001d671:	eb 69                	jmp    c001d6dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d673:	0f b6 db             	movzx  ebx,bl
c001d676:	50                   	push   eax
c001d677:	50                   	push   eax
c001d678:	53                   	push   ebx
c001d679:	68 a9 c1 02 c0       	push   0xc002c1a9
c001d67e:	e8 67 59 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001d683:	83 c4 10             	add    esp,0x10
c001d686:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d68b:	74 12                	je     c001d69f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d68d:	83 ec 0c             	sub    esp,0xc
c001d690:	68 b4 c1 02 c0       	push   0xc002c1b4
c001d695:	e8 f5 cf ff ff       	call   c001a68f <Krnl::panic(char const*)>
c001d69a:	83 c4 10             	add    esp,0x10
c001d69d:	eb 3d                	jmp    c001d6dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d69f:	83 ec 0c             	sub    esp,0xc
c001d6a2:	55                   	push   ebp
c001d6a3:	e8 5c 5f ff ff       	call   c0013604 <File::close()>
c001d6a8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d6ab:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d6ae:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d6b1:	59                   	pop    ecx
c001d6b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d6b6:	e8 98 21 ff ff       	call   c000f853 <free>
c001d6bb:	5b                   	pop    ebx
c001d6bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d6c0:	e8 8e 21 ff ff       	call   c000f853 <free>
c001d6c5:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d6c8:	e8 86 21 ff ff       	call   c000f853 <free>
c001d6cd:	5e                   	pop    esi
c001d6ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d6d2:	e8 7c 21 ff ff       	call   c000f853 <free>
c001d6d7:	83 c4 10             	add    esp,0x10
c001d6da:	eb 21                	jmp    c001d6fd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d6dc:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d6e0:	e9 90 fd ff ff       	jmp    c001d475 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d6e5:	83 ec 0c             	sub    esp,0xc
c001d6e8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d6ec:	e8 62 21 ff ff       	call   c000f853 <free>
c001d6f1:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d6f5:	83 c4 10             	add    esp,0x10
c001d6f8:	e9 05 fd ff ff       	jmp    c001d402 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d6fd:	31 c0                	xor    eax,eax
c001d6ff:	eb 33                	jmp    c001d734 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001d701:	83 ec 0c             	sub    esp,0xc
c001d704:	55                   	push   ebp
c001d705:	e8 fa 5e ff ff       	call   c0013604 <File::close()>
c001d70a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d70d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d710:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d713:	58                   	pop    eax
c001d714:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d718:	e8 36 21 ff ff       	call   c000f853 <free>
c001d71d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d720:	e8 2e 21 ff ff       	call   c000f853 <free>
c001d725:	5a                   	pop    edx
c001d726:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d72a:	e8 24 21 ff ff       	call   c000f853 <free>
c001d72f:	83 c4 10             	add    esp,0x10
c001d732:	b0 01                	mov    al,0x1
c001d734:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d73a:	5b                   	pop    ebx
c001d73b:	5e                   	pop    esi
c001d73c:	5f                   	pop    edi
c001d73d:	5d                   	pop    ebp
c001d73e:	c3                   	ret    

c001d73f <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d73f:	56                   	push   esi
c001d740:	31 d2                	xor    edx,edx
c001d742:	53                   	push   ebx
c001d743:	8b 1d 40 12 03 c0    	mov    ebx,DWORD PTR ds:0xc0031240
c001d749:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d74d:	39 d3                	cmp    ebx,edx
c001d74f:	7e 1b                	jle    c001d76c <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d751:	8b 04 95 60 14 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffceba0]
c001d758:	39 c8                	cmp    eax,ecx
c001d75a:	77 0d                	ja     c001d769 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d75c:	8b 34 95 60 12 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffceda0]
c001d763:	01 c6                	add    esi,eax
c001d765:	39 ce                	cmp    esi,ecx
c001d767:	77 05                	ja     c001d76e <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d769:	42                   	inc    edx
c001d76a:	eb e1                	jmp    c001d74d <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d76c:	31 c0                	xor    eax,eax
c001d76e:	5b                   	pop    ebx
c001d76f:	5e                   	pop    esi
c001d770:	c3                   	ret    

c001d771 <Thr::getDriverNameFromAddress(unsigned long)>:
c001d771:	53                   	push   ebx
c001d772:	31 c0                	xor    eax,eax
c001d774:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d778:	8b 1d 40 12 03 c0    	mov    ebx,DWORD PTR ds:0xc0031240
c001d77e:	39 c3                	cmp    ebx,eax
c001d780:	7e 22                	jle    c001d7a4 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d782:	8b 14 85 60 14 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffceba0]
c001d789:	39 ca                	cmp    edx,ecx
c001d78b:	77 14                	ja     c001d7a1 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d78d:	03 14 85 60 12 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffceda0]
c001d794:	39 ca                	cmp    edx,ecx
c001d796:	76 09                	jbe    c001d7a1 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d798:	8b 04 85 60 16 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce9a0]
c001d79f:	eb 05                	jmp    c001d7a6 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d7a1:	40                   	inc    eax
c001d7a2:	eb da                	jmp    c001d77e <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d7a4:	31 c0                	xor    eax,eax
c001d7a6:	5b                   	pop    ebx
c001d7a7:	c3                   	ret    

c001d7a8 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d7a8:	53                   	push   ebx
c001d7a9:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d7ad:	53                   	push   ebx
c001d7ae:	e8 8c ff ff ff       	call   c001d73f <Thr::getDriverBaseFromAddress(unsigned long)>
c001d7b3:	5a                   	pop    edx
c001d7b4:	31 d2                	xor    edx,edx
c001d7b6:	85 c0                	test   eax,eax
c001d7b8:	74 04                	je     c001d7be <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d7ba:	89 da                	mov    edx,ebx
c001d7bc:	29 c2                	sub    edx,eax
c001d7be:	89 d0                	mov    eax,edx
c001d7c0:	5b                   	pop    ebx
c001d7c1:	c3                   	ret    

c001d7c2 <Thr::loadDLL(char const*, bool)>:
c001d7c2:	55                   	push   ebp
c001d7c3:	57                   	push   edi
c001d7c4:	56                   	push   esi
c001d7c5:	53                   	push   ebx
c001d7c6:	81 ec 34 01 00 00    	sub    esp,0x134
c001d7cc:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d7d3:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001d7da:	56                   	push   esi
c001d7db:	68 cc c1 02 c0       	push   0xc002c1cc
c001d7e0:	e8 05 58 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001d7e5:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d7ec:	e8 52 20 ff ff       	call   c000f843 <malloc>
c001d7f1:	83 c4 0c             	add    esp,0xc
c001d7f4:	89 c3                	mov    ebx,eax
c001d7f6:	ff 35 34 1a 03 c0    	push   DWORD PTR ds:0xc0031a34
c001d7fc:	56                   	push   esi
c001d7fd:	50                   	push   eax
c001d7fe:	e8 3f 5d ff ff       	call   c0013542 <File::File(char const*, Process*)>
c001d803:	83 c4 10             	add    esp,0x10
c001d806:	85 db                	test   ebx,ebx
c001d808:	75 3c                	jne    c001d846 <Thr::loadDLL(char const*, bool)+0x84>
c001d80a:	89 e8                	mov    eax,ebp
c001d80c:	84 c0                	test   al,al
c001d80e:	0f 84 f0 01 00 00    	je     c001da04 <Thr::loadDLL(char const*, bool)+0x242>
c001d814:	50                   	push   eax
c001d815:	50                   	push   eax
c001d816:	68 dd c1 02 c0       	push   0xc002c1dd
c001d81b:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001d81f:	57                   	push   edi
c001d820:	e8 0f 30 fe ff       	call   c0000834 <strcpy>
c001d825:	58                   	pop    eax
c001d826:	5a                   	pop    edx
c001d827:	56                   	push   esi
c001d828:	57                   	push   edi
c001d829:	e8 46 31 fe ff       	call   c0000974 <strcat>
c001d82e:	59                   	pop    ecx
c001d82f:	58                   	pop    eax
c001d830:	68 f0 c1 02 c0       	push   0xc002c1f0
c001d835:	57                   	push   edi
c001d836:	e8 39 31 fe ff       	call   c0000974 <strcat>
c001d83b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d83e:	e8 4c ce ff ff       	call   c001a68f <Krnl::panic(char const*)>
c001d843:	83 c4 10             	add    esp,0x10
c001d846:	50                   	push   eax
c001d847:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d84b:	50                   	push   eax
c001d84c:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d850:	50                   	push   eax
c001d851:	53                   	push   ebx
c001d852:	e8 fb 5f ff ff       	call   c0013852 <File::stat(unsigned long long*, bool*)>
c001d857:	83 c4 10             	add    esp,0x10
c001d85a:	85 db                	test   ebx,ebx
c001d85c:	74 0c                	je     c001d86a <Thr::loadDLL(char const*, bool)+0xa8>
c001d85e:	83 ec 0c             	sub    esp,0xc
c001d861:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d863:	53                   	push   ebx
c001d864:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d867:	83 c4 10             	add    esp,0x10
c001d86a:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d86f:	75 0a                	jne    c001d87b <Thr::loadDLL(char const*, bool)+0xb9>
c001d871:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d875:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d879:	75 3c                	jne    c001d8b7 <Thr::loadDLL(char const*, bool)+0xf5>
c001d87b:	89 e8                	mov    eax,ebp
c001d87d:	84 c0                	test   al,al
c001d87f:	0f 84 67 01 00 00    	je     c001d9ec <Thr::loadDLL(char const*, bool)+0x22a>
c001d885:	50                   	push   eax
c001d886:	50                   	push   eax
c001d887:	68 dd c1 02 c0       	push   0xc002c1dd
c001d88c:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d890:	53                   	push   ebx
c001d891:	e8 9e 2f fe ff       	call   c0000834 <strcpy>
c001d896:	58                   	pop    eax
c001d897:	5a                   	pop    edx
c001d898:	56                   	push   esi
c001d899:	53                   	push   ebx
c001d89a:	e8 d5 30 fe ff       	call   c0000974 <strcat>
c001d89f:	59                   	pop    ecx
c001d8a0:	5f                   	pop    edi
c001d8a1:	68 f0 c1 02 c0       	push   0xc002c1f0
c001d8a6:	53                   	push   ebx
c001d8a7:	e8 c8 30 fe ff       	call   c0000974 <strcat>
c001d8ac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d8af:	e8 db cd ff ff       	call   c001a68f <Krnl::panic(char const*)>
c001d8b4:	83 c4 10             	add    esp,0x10
c001d8b7:	e8 6d 46 ff ff       	call   c0011f29 <Virt::getAKernelVAS()>
c001d8bc:	51                   	push   ecx
c001d8bd:	68 03 08 00 00       	push   0x803
c001d8c2:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d8c6:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d8ca:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001d8d0:	83 d3 00             	adc    ebx,0x0
c001d8d3:	89 ca                	mov    edx,ecx
c001d8d5:	89 d1                	mov    ecx,edx
c001d8d7:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001d8db:	51                   	push   ecx
c001d8dc:	50                   	push   eax
c001d8dd:	e8 98 4c ff ff       	call   c001257a <VAS::allocatePages(int, int)>
c001d8e2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001d8e6:	89 c3                	mov    ebx,eax
c001d8e8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d8ec:	05 ff 0f 00 00       	add    eax,0xfff
c001d8f1:	83 d2 00             	adc    edx,0x0
c001d8f4:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d8f8:	c1 ea 0c             	shr    edx,0xc
c001d8fb:	52                   	push   edx
c001d8fc:	50                   	push   eax
c001d8fd:	53                   	push   ebx
c001d8fe:	68 f2 c1 02 c0       	push   0xc002c1f2
c001d903:	e8 e2 56 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001d908:	83 c4 14             	add    esp,0x14
c001d90b:	56                   	push   esi
c001d90c:	e8 83 2e fe ff       	call   c0000794 <strlen>
c001d911:	8b 3d 40 12 03 c0    	mov    edi,DWORD PTR ds:0xc0031240
c001d917:	40                   	inc    eax
c001d918:	89 04 24             	mov    DWORD PTR [esp],eax
c001d91b:	e8 23 1f ff ff       	call   c000f843 <malloc>
c001d920:	89 04 bd 60 16 03 c0 	mov    DWORD PTR [edi*4-0x3ffce9a0],eax
c001d927:	5f                   	pop    edi
c001d928:	58                   	pop    eax
c001d929:	a1 40 12 03 c0       	mov    eax,ds:0xc0031240
c001d92e:	56                   	push   esi
c001d92f:	ff 34 85 60 16 03 c0 	push   DWORD PTR [eax*4-0x3ffce9a0]
c001d936:	e8 f9 2e fe ff       	call   c0000834 <strcpy>
c001d93b:	a1 40 12 03 c0       	mov    eax,ds:0xc0031240
c001d940:	8d 50 01             	lea    edx,[eax+0x1]
c001d943:	89 1c 85 60 14 03 c0 	mov    DWORD PTR [eax*4-0x3ffceba0],ebx
c001d94a:	89 15 40 12 03 c0    	mov    DWORD PTR ds:0xc0031240,edx
c001d950:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d954:	83 c4 0c             	add    esp,0xc
c001d957:	89 14 85 60 12 03 c0 	mov    DWORD PTR [eax*4-0x3ffceda0],edx
c001d95e:	6a 01                	push   0x1
c001d960:	53                   	push   ebx
c001d961:	56                   	push   esi
c001d962:	e8 bc f6 ff ff       	call   c001d023 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d967:	83 c4 10             	add    esp,0x10
c001d96a:	89 c7                	mov    edi,eax
c001d96c:	84 c0                	test   al,al
c001d96e:	0f 85 8c 00 00 00    	jne    c001da00 <Thr::loadDLL(char const*, bool)+0x23e>
c001d974:	89 e8                	mov    eax,ebp
c001d976:	84 c0                	test   al,al
c001d978:	74 76                	je     c001d9f0 <Thr::loadDLL(char const*, bool)+0x22e>
c001d97a:	83 ec 0c             	sub    esp,0xc
c001d97d:	68 16 c2 02 c0       	push   0xc002c216
c001d982:	e8 08 cd ff ff       	call   c001a68f <Krnl::panic(char const*)>
c001d987:	83 c4 10             	add    esp,0x10
c001d98a:	eb 64                	jmp    c001d9f0 <Thr::loadDLL(char const*, bool)+0x22e>
c001d98c:	e8 98 45 ff ff       	call   c0011f29 <Virt::getAKernelVAS()>
c001d991:	89 f5                	mov    ebp,esi
c001d993:	c1 e5 0c             	shl    ebp,0xc
c001d996:	52                   	push   edx
c001d997:	01 dd                	add    ebp,ebx
c001d999:	52                   	push   edx
c001d99a:	55                   	push   ebp
c001d99b:	50                   	push   eax
c001d99c:	e8 53 47 ff ff       	call   c00120f4 <VAS::getPageTableEntry(unsigned long)>
c001d9a1:	83 c4 10             	add    esp,0x10
c001d9a4:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d9a7:	75 0c                	jne    c001d9b5 <Thr::loadDLL(char const*, bool)+0x1f3>
c001d9a9:	83 ec 0c             	sub    esp,0xc
c001d9ac:	55                   	push   ebp
c001d9ad:	e8 a4 24 ff ff       	call   c000fe56 <Phys::freePage(unsigned long)>
c001d9b2:	83 c4 10             	add    esp,0x10
c001d9b5:	46                   	inc    esi
c001d9b6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d9ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d9be:	05 ff 0f 00 00       	add    eax,0xfff
c001d9c3:	83 d2 00             	adc    edx,0x0
c001d9c6:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d9ca:	c1 ea 0c             	shr    edx,0xc
c001d9cd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d9d1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d9d5:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001d9d9:	ba 00 00 00 00       	mov    edx,0x0
c001d9de:	89 d0                	mov    eax,edx
c001d9e0:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001d9e4:	72 a6                	jb     c001d98c <Thr::loadDLL(char const*, bool)+0x1ca>
c001d9e6:	89 f8                	mov    eax,edi
c001d9e8:	84 c0                	test   al,al
c001d9ea:	75 18                	jne    c001da04 <Thr::loadDLL(char const*, bool)+0x242>
c001d9ec:	31 db                	xor    ebx,ebx
c001d9ee:	eb 14                	jmp    c001da04 <Thr::loadDLL(char const*, bool)+0x242>
c001d9f0:	83 ec 0c             	sub    esp,0xc
c001d9f3:	68 35 c2 02 c0       	push   0xc002c235
c001d9f8:	e8 92 cc ff ff       	call   c001a68f <Krnl::panic(char const*)>
c001d9fd:	83 c4 10             	add    esp,0x10
c001da00:	31 f6                	xor    esi,esi
c001da02:	eb b2                	jmp    c001d9b6 <Thr::loadDLL(char const*, bool)+0x1f4>
c001da04:	81 c4 2c 01 00 00    	add    esp,0x12c
c001da0a:	89 d8                	mov    eax,ebx
c001da0c:	5b                   	pop    ebx
c001da0d:	5e                   	pop    esi
c001da0e:	5f                   	pop    edi
c001da0f:	5d                   	pop    ebp
c001da10:	c3                   	ret    

c001da11 <Thr::executeDLL(unsigned long, void*)>:
c001da11:	56                   	push   esi
c001da12:	53                   	push   ebx
c001da13:	52                   	push   edx
c001da14:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001da18:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001da1c:	85 db                	test   ebx,ebx
c001da1e:	75 10                	jne    c001da30 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001da20:	83 ec 0c             	sub    esp,0xc
c001da23:	68 51 c2 02 c0       	push   0xc002c251
c001da28:	e8 62 cc ff ff       	call   c001a68f <Krnl::panic(char const*)>
c001da2d:	83 c4 10             	add    esp,0x10
c001da30:	50                   	push   eax
c001da31:	50                   	push   eax
c001da32:	53                   	push   ebx
c001da33:	68 7b c2 02 c0       	push   0xc002c27b
c001da38:	e8 ad 55 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001da3d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001da41:	89 d8                	mov    eax,ebx
c001da43:	83 c4 14             	add    esp,0x14
c001da46:	5b                   	pop    ebx
c001da47:	5e                   	pop    esi
c001da48:	ff e0                	jmp    eax

c001da4a <changeTSS>:
c001da4a:	83 ec 14             	sub    esp,0x14
c001da4d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da52:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001da55:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001da5a:	c1 e2 15             	shl    edx,0x15
c001da5d:	29 d0                	sub    eax,edx
c001da5f:	50                   	push   eax
c001da60:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c001da65:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001da6b:	05 7c 11 00 00       	add    eax,0x117c
c001da70:	50                   	push   eax
c001da71:	e8 44 3a ff ff       	call   c00114ba <TSS::setESP(unsigned long)>
c001da76:	83 c4 1c             	add    esp,0x1c
c001da79:	c3                   	ret    

c001da7a <Process::addArgs(char**)>:
c001da7a:	57                   	push   edi
c001da7b:	56                   	push   esi
c001da7c:	53                   	push   ebx
c001da7d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001da81:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001da85:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001da8f:	85 ff                	test   edi,edi
c001da91:	74 3d                	je     c001dad0 <Process::addArgs(char**)+0x56>
c001da93:	8b 07                	mov    eax,DWORD PTR [edi]
c001da95:	85 c0                	test   eax,eax
c001da97:	74 37                	je     c001dad0 <Process::addArgs(char**)+0x56>
c001da99:	31 db                	xor    ebx,ebx
c001da9b:	83 ec 0c             	sub    esp,0xc
c001da9e:	50                   	push   eax
c001da9f:	e8 f0 2c fe ff       	call   c0000794 <strlen>
c001daa4:	40                   	inc    eax
c001daa5:	89 04 24             	mov    DWORD PTR [esp],eax
c001daa8:	e8 96 1d ff ff       	call   c000f843 <malloc>
c001daad:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001dab4:	5a                   	pop    edx
c001dab5:	59                   	pop    ecx
c001dab6:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001dab9:	43                   	inc    ebx
c001daba:	50                   	push   eax
c001dabb:	e8 74 2d fe ff       	call   c0000834 <strcpy>
c001dac0:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001dac6:	83 c4 10             	add    esp,0x10
c001dac9:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001dacc:	85 c0                	test   eax,eax
c001dace:	75 cb                	jne    c001da9b <Process::addArgs(char**)+0x21>
c001dad0:	5b                   	pop    ebx
c001dad1:	5e                   	pop    esi
c001dad2:	5f                   	pop    edi
c001dad3:	c3                   	ret    

c001dad4 <Process::Process(char const*, Process*, char**)>:
c001dad4:	56                   	push   esi
c001dad5:	53                   	push   ebx
c001dad6:	83 ec 14             	sub    esp,0x14
c001dad9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dadd:	05 0c 02 00 00       	add    eax,0x20c
c001dae2:	bb 07 00 00 00       	mov    ebx,0x7
c001dae7:	89 c6                	mov    esi,eax
c001dae9:	85 db                	test   ebx,ebx
c001daeb:	78 12                	js     c001daff <Process::Process(char const*, Process*, char**)+0x2b>
c001daed:	83 ec 0c             	sub    esp,0xc
c001daf0:	56                   	push   esi
c001daf1:	e8 1c b2 00 00       	call   c0028d12 <ThreadControlBlock::ThreadControlBlock()>
c001daf6:	83 c4 10             	add    esp,0x10
c001daf9:	83 c6 63             	add    esi,0x63
c001dafc:	4b                   	dec    ebx
c001dafd:	eb ea                	jmp    c001dae9 <Process::Process(char const*, Process*, char**)+0x15>
c001daff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db03:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001db0a:	83 ec 0c             	sub    esp,0xc
c001db0d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db11:	e8 ca c9 ff ff       	call   c001a4e0 <Krnl::newProcessEnv(Process*)>
c001db16:	83 c4 10             	add    esp,0x10
c001db19:	89 c2                	mov    edx,eax
c001db1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db1f:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001db25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db29:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001db32:	a1 50 da 02 c0       	mov    eax,ds:0xc002da50
c001db37:	8d 50 01             	lea    edx,[eax+0x1]
c001db3a:	89 15 50 da 02 c0    	mov    DWORD PTR ds:0xc002da50,edx
c001db40:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001db44:	89 02                	mov    DWORD PTR [edx],eax
c001db46:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001db4e:	83 ec 0c             	sub    esp,0xc
c001db51:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001db55:	e8 e9 1c ff ff       	call   c000f843 <malloc>
c001db5a:	83 c4 10             	add    esp,0x10
c001db5d:	89 c3                	mov    ebx,eax
c001db5f:	83 ec 08             	sub    esp,0x8
c001db62:	6a 00                	push   0x0
c001db64:	53                   	push   ebx
c001db65:	e8 b8 4d ff ff       	call   c0012922 <VAS::VAS(bool)>
c001db6a:	83 c4 10             	add    esp,0x10
c001db6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db71:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001db77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db7b:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001db85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db89:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001db8d:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001db93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db97:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db9d:	85 c0                	test   eax,eax
c001db9f:	74 42                	je     c001dbe3 <Process::Process(char const*, Process*, char**)+0x10f>
c001dba1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dba5:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dbab:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dbb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbb5:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dbbb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbbf:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dbc5:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dbcb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbcf:	05 0c 01 00 00       	add    eax,0x10c
c001dbd4:	83 ec 08             	sub    esp,0x8
c001dbd7:	52                   	push   edx
c001dbd8:	50                   	push   eax
c001dbd9:	e8 56 2c fe ff       	call   c0000834 <strcpy>
c001dbde:	83 c4 10             	add    esp,0x10
c001dbe1:	eb 63                	jmp    c001dc46 <Process::Process(char const*, Process*, char**)+0x172>
c001dbe3:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001dbeb:	83 ec 0c             	sub    esp,0xc
c001dbee:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001dbf2:	e8 4c 1c ff ff       	call   c000f843 <malloc>
c001dbf7:	83 c4 10             	add    esp,0x10
c001dbfa:	89 c3                	mov    ebx,eax
c001dbfc:	83 ec 08             	sub    esp,0x8
c001dbff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc03:	53                   	push   ebx
c001dc04:	e8 af 35 ff ff       	call   c00111b8 <VgaText::VgaText(char const*)>
c001dc09:	83 c4 10             	add    esp,0x10
c001dc0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc10:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dc16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc1a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dc20:	83 ec 0c             	sub    esp,0xc
c001dc23:	50                   	push   eax
c001dc24:	e8 82 29 ff ff       	call   c00105ab <addToTerminalCycle(VgaText*)>
c001dc29:	83 c4 10             	add    esp,0x10
c001dc2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc30:	05 0c 01 00 00       	add    eax,0x10c
c001dc35:	83 ec 08             	sub    esp,0x8
c001dc38:	68 9a c2 02 c0       	push   0xc002c29a
c001dc3d:	50                   	push   eax
c001dc3e:	e8 f1 2b fe ff       	call   c0000834 <strcpy>
c001dc43:	83 c4 10             	add    esp,0x10
c001dc46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc4a:	83 c0 0c             	add    eax,0xc
c001dc4d:	83 ec 08             	sub    esp,0x8
c001dc50:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc54:	50                   	push   eax
c001dc55:	e8 da 2b fe ff       	call   c0000834 <strcpy>
c001dc5a:	83 c4 10             	add    esp,0x10
c001dc5d:	83 ec 08             	sub    esp,0x8
c001dc60:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001dc64:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc68:	e8 0d fe ff ff       	call   c001da7a <Process::addArgs(char**)>
c001dc6d:	83 c4 10             	add    esp,0x10
c001dc70:	83 ec 08             	sub    esp,0x8
c001dc73:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc77:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc7b:	e8 6d ee ff ff       	call   c001caed <Thr::loadProgramIntoMemory(Process*, char const*)>
c001dc80:	83 c4 10             	add    esp,0x10
c001dc83:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dc87:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dc8b:	83 f0 01             	xor    eax,0x1
c001dc8e:	88 c2                	mov    dl,al
c001dc90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc94:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001dc9a:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dc9f:	83 ec 08             	sub    esp,0x8
c001dca2:	50                   	push   eax
c001dca3:	68 98 c3 02 c0       	push   0xc002c398
c001dca8:	e8 3d 53 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001dcad:	83 c4 10             	add    esp,0x10
c001dcb0:	90                   	nop
c001dcb1:	83 c4 14             	add    esp,0x14
c001dcb4:	5b                   	pop    ebx
c001dcb5:	5e                   	pop    esi
c001dcb6:	c3                   	ret    
c001dcb7:	90                   	nop

c001dcb8 <Process::Process(bool, char const*, Process*, char**)>:
c001dcb8:	56                   	push   esi
c001dcb9:	53                   	push   ebx
c001dcba:	83 ec 24             	sub    esp,0x24
c001dcbd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dcc1:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dcc5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcc9:	05 0c 02 00 00       	add    eax,0x20c
c001dcce:	bb 07 00 00 00       	mov    ebx,0x7
c001dcd3:	89 c6                	mov    esi,eax
c001dcd5:	85 db                	test   ebx,ebx
c001dcd7:	78 12                	js     c001dceb <Process::Process(bool, char const*, Process*, char**)+0x33>
c001dcd9:	83 ec 0c             	sub    esp,0xc
c001dcdc:	56                   	push   esi
c001dcdd:	e8 30 b0 00 00       	call   c0028d12 <ThreadControlBlock::ThreadControlBlock()>
c001dce2:	83 c4 10             	add    esp,0x10
c001dce5:	83 c6 63             	add    esi,0x63
c001dce8:	4b                   	dec    ebx
c001dce9:	eb ea                	jmp    c001dcd5 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001dceb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcef:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001dcf6:	83 ec 0c             	sub    esp,0xc
c001dcf9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dcfd:	e8 de c7 ff ff       	call   c001a4e0 <Krnl::newProcessEnv(Process*)>
c001dd02:	83 c4 10             	add    esp,0x10
c001dd05:	89 c2                	mov    edx,eax
c001dd07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd0b:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dd11:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd15:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dd1e:	a1 50 da 02 c0       	mov    eax,ds:0xc002da50
c001dd23:	8d 50 01             	lea    edx,[eax+0x1]
c001dd26:	89 15 50 da 02 c0    	mov    DWORD PTR ds:0xc002da50,edx
c001dd2c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dd30:	89 02                	mov    DWORD PTR [edx],eax
c001dd32:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001dd3a:	83 ec 0c             	sub    esp,0xc
c001dd3d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001dd41:	e8 fd 1a ff ff       	call   c000f843 <malloc>
c001dd46:	83 c4 10             	add    esp,0x10
c001dd49:	89 c3                	mov    ebx,eax
c001dd4b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dd50:	83 ec 08             	sub    esp,0x8
c001dd53:	50                   	push   eax
c001dd54:	53                   	push   ebx
c001dd55:	e8 c8 4b ff ff       	call   c0012922 <VAS::VAS(bool)>
c001dd5a:	83 c4 10             	add    esp,0x10
c001dd5d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd61:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dd67:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd6b:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dd75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd79:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dd7d:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dd83:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd87:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd8d:	85 c0                	test   eax,eax
c001dd8f:	74 42                	je     c001ddd3 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001dd91:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd95:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd9b:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dda1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dda5:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001ddab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddaf:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ddb5:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001ddbb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddbf:	05 0c 01 00 00       	add    eax,0x10c
c001ddc4:	83 ec 08             	sub    esp,0x8
c001ddc7:	52                   	push   edx
c001ddc8:	50                   	push   eax
c001ddc9:	e8 66 2a fe ff       	call   c0000834 <strcpy>
c001ddce:	83 c4 10             	add    esp,0x10
c001ddd1:	eb 63                	jmp    c001de36 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001ddd3:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001dddb:	83 ec 0c             	sub    esp,0xc
c001ddde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001dde2:	e8 5c 1a ff ff       	call   c000f843 <malloc>
c001dde7:	83 c4 10             	add    esp,0x10
c001ddea:	89 c3                	mov    ebx,eax
c001ddec:	83 ec 08             	sub    esp,0x8
c001ddef:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001ddf3:	53                   	push   ebx
c001ddf4:	e8 bf 33 ff ff       	call   c00111b8 <VgaText::VgaText(char const*)>
c001ddf9:	83 c4 10             	add    esp,0x10
c001ddfc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de00:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001de06:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de0a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001de10:	83 ec 0c             	sub    esp,0xc
c001de13:	50                   	push   eax
c001de14:	e8 92 27 ff ff       	call   c00105ab <addToTerminalCycle(VgaText*)>
c001de19:	83 c4 10             	add    esp,0x10
c001de1c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de20:	05 0c 01 00 00       	add    eax,0x10c
c001de25:	83 ec 08             	sub    esp,0x8
c001de28:	68 9a c2 02 c0       	push   0xc002c29a
c001de2d:	50                   	push   eax
c001de2e:	e8 01 2a fe ff       	call   c0000834 <strcpy>
c001de33:	83 c4 10             	add    esp,0x10
c001de36:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de3a:	83 c0 0c             	add    eax,0xc
c001de3d:	83 ec 08             	sub    esp,0x8
c001de40:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001de44:	50                   	push   eax
c001de45:	e8 ea 29 fe ff       	call   c0000834 <strcpy>
c001de4a:	83 c4 10             	add    esp,0x10
c001de4d:	83 ec 08             	sub    esp,0x8
c001de50:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001de54:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001de58:	e8 1d fc ff ff       	call   c001da7a <Process::addArgs(char**)>
c001de5d:	83 c4 10             	add    esp,0x10
c001de60:	90                   	nop
c001de61:	83 c4 24             	add    esp,0x24
c001de64:	5b                   	pop    ebx
c001de65:	5e                   	pop    esi
c001de66:	c3                   	ret    

c001de67 <disableIRQs()>:
c001de67:	fa                   	cli    
c001de68:	ff 05 0c 1a 03 c0    	inc    DWORD PTR ds:0xc0031a0c
c001de6e:	c3                   	ret    

c001de6f <getIRQNestingLevel()>:
c001de6f:	a1 0c 1a 03 c0       	mov    eax,ds:0xc0031a0c
c001de74:	c3                   	ret    

c001de75 <enableIRQs()>:
c001de75:	a1 0c 1a 03 c0       	mov    eax,ds:0xc0031a0c
c001de7a:	48                   	dec    eax
c001de7b:	a3 0c 1a 03 c0       	mov    ds:0xc0031a0c,eax
c001de80:	75 01                	jne    c001de83 <enableIRQs()+0xe>
c001de82:	fb                   	sti    
c001de83:	c3                   	ret    

c001de84 <lockScheduler()>:
c001de84:	eb e1                	jmp    c001de67 <disableIRQs()>

c001de86 <unlockScheduler()>:
c001de86:	eb ed                	jmp    c001de75 <enableIRQs()>

c001de88 <userModeEntryPoint(void*)>:
c001de88:	83 ec 0c             	sub    esp,0xc
c001de8b:	e8 f6 ff ff ff       	call   c001de86 <unlockScheduler()>
c001de90:	fb                   	sti    
c001de91:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de96:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001de99:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001de9f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001dea3:	83 c4 0c             	add    esp,0xc
c001dea6:	e9 7f 24 fe ff       	jmp    c000032a <goToUsermode>

c001deab <lockStuff()>:
c001deab:	e8 b7 ff ff ff       	call   c001de67 <disableIRQs()>
c001deb0:	ff 05 08 1a 03 c0    	inc    DWORD PTR ds:0xc0031a08
c001deb6:	c3                   	ret    

c001deb7 <taskStartupFunction>:
c001deb7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001debc:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001debf:	c3                   	ret    

c001dec0 <updateTimeUsed()>:
c001dec0:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c001dec5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001decb:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001ded2:	74 50                	je     c001df24 <updateTimeUsed()+0x64>
c001ded4:	57                   	push   edi
c001ded5:	56                   	push   esi
c001ded6:	53                   	push   ebx
c001ded7:	0f 31                	rdtsc  
c001ded9:	89 c1                	mov    ecx,eax
c001dedb:	a3 48 1a 03 c0       	mov    ds:0xc0031a48,eax
c001dee0:	2b 0d 38 1a 03 c0    	sub    ecx,DWORD PTR ds:0xc0031a38
c001dee6:	89 d3                	mov    ebx,edx
c001dee8:	89 0d 40 1a 03 c0    	mov    DWORD PTR ds:0xc0031a40,ecx
c001deee:	1b 1d 3c 1a 03 c0    	sbb    ebx,DWORD PTR ds:0xc0031a3c
c001def4:	a3 38 1a 03 c0       	mov    ds:0xc0031a38,eax
c001def9:	89 1d 44 1a 03 c0    	mov    DWORD PTR ds:0xc0031a44,ebx
c001deff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df04:	89 15 4c 1a 03 c0    	mov    DWORD PTR ds:0xc0031a4c,edx
c001df0a:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001df0d:	89 15 3c 1a 03 c0    	mov    DWORD PTR ds:0xc0031a3c,edx
c001df13:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001df16:	01 f1                	add    ecx,esi
c001df18:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001df1b:	11 fb                	adc    ebx,edi
c001df1d:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001df20:	5b                   	pop    ebx
c001df21:	5e                   	pop    esi
c001df22:	5f                   	pop    edi
c001df23:	c3                   	ret    
c001df24:	c3                   	ret    

c001df25 <switchToThread(ThreadControlBlock*)>:
c001df25:	53                   	push   ebx
c001df26:	83 ec 08             	sub    esp,0x8
c001df29:	a1 08 1a 03 c0       	mov    eax,ds:0xc0031a08
c001df2e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001df32:	85 c0                	test   eax,eax
c001df34:	75 30                	jne    c001df66 <switchToThread(ThreadControlBlock*)+0x41>
c001df36:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001df39:	3c ff                	cmp    al,0xff
c001df3b:	74 25                	je     c001df62 <switchToThread(ThreadControlBlock*)+0x3d>
c001df3d:	0f b6 d0             	movzx  edx,al
c001df40:	b8 84 03 00 00       	mov    eax,0x384
c001df45:	29 d0                	sub    eax,edx
c001df47:	c1 e0 10             	shl    eax,0x10
c001df4a:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001df4d:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001df50:	e8 6b ff ff ff       	call   c001dec0 <updateTimeUsed()>
c001df55:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001df59:	83 c4 08             	add    esp,0x8
c001df5c:	5b                   	pop    ebx
c001df5d:	e9 00 24 fe ff       	jmp    c0000362 <switchToThreadASM>
c001df62:	31 c0                	xor    eax,eax
c001df64:	eb e7                	jmp    c001df4d <switchToThread(ThreadControlBlock*)+0x28>
c001df66:	c7 05 04 1a 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031a04,0x1
c001df70:	83 c4 08             	add    esp,0x8
c001df73:	5b                   	pop    ebx
c001df74:	c3                   	ret    
c001df75:	90                   	nop

c001df76 <Semaphore::Semaphore(int)>:
c001df76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df7a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001df7e:	89 10                	mov    DWORD PTR [eax],edx
c001df80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df84:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001df8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df8f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001df96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df9a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001dfa1:	90                   	nop
c001dfa2:	c3                   	ret    
c001dfa3:	90                   	nop

c001dfa4 <Mutex::Mutex()>:
c001dfa4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dfa8:	6a 01                	push   0x1
c001dfaa:	50                   	push   eax
c001dfab:	e8 c6 ff ff ff       	call   c001df76 <Semaphore::Semaphore(int)>
c001dfb0:	83 c4 08             	add    esp,0x8
c001dfb3:	90                   	nop
c001dfb4:	c3                   	ret    
c001dfb5:	90                   	nop

c001dfb6 <Process::createThread(void (*)(void*), void*, int)>:
c001dfb6:	55                   	push   ebp
c001dfb7:	31 c9                	xor    ecx,ecx
c001dfb9:	57                   	push   edi
c001dfba:	56                   	push   esi
c001dfbb:	53                   	push   ebx
c001dfbc:	83 ec 1c             	sub    esp,0x1c
c001dfbf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dfc3:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001dfca:	89 f2                	mov    edx,esi
c001dfcc:	0f b7 c2             	movzx  eax,dx
c001dfcf:	83 e2 01             	and    edx,0x1
c001dfd2:	74 14                	je     c001dfe8 <Process::createThread(void (*)(void*), void*, int)+0x32>
c001dfd4:	d1 f8                	sar    eax,1
c001dfd6:	41                   	inc    ecx
c001dfd7:	89 c2                	mov    edx,eax
c001dfd9:	83 f9 10             	cmp    ecx,0x10
c001dfdc:	75 ee                	jne    c001dfcc <Process::createThread(void (*)(void*), void*, int)+0x16>
c001dfde:	83 c4 1c             	add    esp,0x1c
c001dfe1:	31 c0                	xor    eax,eax
c001dfe3:	5b                   	pop    ebx
c001dfe4:	5e                   	pop    esi
c001dfe5:	5f                   	pop    edi
c001dfe6:	5d                   	pop    ebp
c001dfe7:	c3                   	ret    
c001dfe8:	83 ec 08             	sub    esp,0x8
c001dfeb:	b8 01 00 00 00       	mov    eax,0x1
c001dff0:	d3 e0                	shl    eax,cl
c001dff2:	09 c6                	or     esi,eax
c001dff4:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001dffa:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001e001:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001e004:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e007:	01 ce                	add    esi,ecx
c001e009:	89 f0                	mov    eax,esi
c001e00b:	c1 e0 05             	shl    eax,0x5
c001e00e:	01 c6                	add    esi,eax
c001e010:	8d 04 33             	lea    eax,[ebx+esi*1]
c001e013:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001e019:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001e01f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001e023:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001e029:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001e02f:	89 ca                	mov    edx,ecx
c001e031:	f7 da                	neg    edx
c001e033:	c1 e2 15             	shl    edx,0x15
c001e036:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001e03c:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001e042:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001e046:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001e050:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001e056:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e05a:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001e060:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001e06a:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001e074:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001e07b:	50                   	push   eax
c001e07c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e080:	68 28 1a 03 c0       	push   0xc0031a28
c001e085:	e8 16 ab 00 00       	call   c0028ba0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e08a:	83 c4 10             	add    esp,0x10
c001e08d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e091:	83 c4 1c             	add    esp,0x1c
c001e094:	5b                   	pop    ebx
c001e095:	5e                   	pop    esi
c001e096:	5f                   	pop    edi
c001e097:	5d                   	pop    ebp
c001e098:	c3                   	ret    
c001e099:	90                   	nop

c001e09a <Process::createUserThread()>:
c001e09a:	83 ec 0c             	sub    esp,0xc
c001e09d:	68 80 00 00 00       	push   0x80
c001e0a2:	6a 00                	push   0x0
c001e0a4:	68 88 de 01 c0       	push   0xc001de88
c001e0a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e0ad:	e8 04 ff ff ff       	call   c001dfb6 <Process::createThread(void (*)(void*), void*, int)>
c001e0b2:	83 c4 1c             	add    esp,0x1c
c001e0b5:	c3                   	ret    

c001e0b6 <setupMultitasking(void (*)())>:
c001e0b6:	56                   	push   esi
c001e0b7:	53                   	push   ebx
c001e0b8:	53                   	push   ebx
c001e0b9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e0bd:	eb 10                	jmp    c001e0cf <setupMultitasking(void (*)())+0x19>
c001e0bf:	83 ec 0c             	sub    esp,0xc
c001e0c2:	68 28 1a 03 c0       	push   0xc0031a28
c001e0c7:	e8 26 aa 00 00       	call   c0028af2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e0cc:	83 c4 10             	add    esp,0x10
c001e0cf:	83 ec 0c             	sub    esp,0xc
c001e0d2:	68 28 1a 03 c0       	push   0xc0031a28
c001e0d7:	e8 fa a9 00 00       	call   c0028ad6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e0dc:	83 c4 10             	add    esp,0x10
c001e0df:	84 c0                	test   al,al
c001e0e1:	74 dc                	je     c001e0bf <setupMultitasking(void (*)())+0x9>
c001e0e3:	83 ec 0c             	sub    esp,0xc
c001e0e6:	68 3f 07 00 00       	push   0x73f
c001e0eb:	e8 53 17 ff ff       	call   c000f843 <malloc>
c001e0f0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e0f7:	89 c3                	mov    ebx,eax
c001e0f9:	6a 00                	push   0x0
c001e0fb:	68 9e c2 02 c0       	push   0xc002c29e
c001e100:	6a 01                	push   0x1
c001e102:	50                   	push   eax
c001e103:	e8 b0 fb ff ff       	call   c001dcb8 <Process::Process(bool, char const*, Process*, char**)>
c001e108:	83 c4 18             	add    esp,0x18
c001e10b:	89 1d 34 1a 03 c0    	mov    DWORD PTR ds:0xc0031a34,ebx
c001e111:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e117:	68 c0 c3 02 c0       	push   0xc002c3c0
c001e11c:	e8 c9 4e ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001e121:	58                   	pop    eax
c001e122:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e128:	e8 00 2c ff ff       	call   c0010d2d <setActiveTerminal(VgaText*)>
c001e12d:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e135:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e13b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e13e:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e148:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e14e:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e154:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e15e:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e168:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e172:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e178:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e17e:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e188:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e18e:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e198:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e19e:	5a                   	pop    edx
c001e19f:	59                   	pop    ecx
c001e1a0:	68 9a c2 02 c0       	push   0xc002c29a
c001e1a5:	50                   	push   eax
c001e1a6:	e8 89 26 fe ff       	call   c0000834 <strcpy>
c001e1ab:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e1b2:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e1b6:	83 c4 14             	add    esp,0x14
c001e1b9:	5b                   	pop    ebx
c001e1ba:	5e                   	pop    esi
c001e1bb:	e9 94 21 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e1c0 <schedule()>:
c001e1c0:	a1 08 1a 03 c0       	mov    eax,ds:0xc0031a08
c001e1c5:	85 c0                	test   eax,eax
c001e1c7:	74 0b                	je     c001e1d4 <schedule()+0x14>
c001e1c9:	c7 05 04 1a 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031a04,0x1
c001e1d3:	c3                   	ret    
c001e1d4:	53                   	push   ebx
c001e1d5:	83 ec 14             	sub    esp,0x14
c001e1d8:	68 28 1a 03 c0       	push   0xc0031a28
c001e1dd:	e8 f4 a8 00 00       	call   c0028ad6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e1e2:	83 c4 10             	add    esp,0x10
c001e1e5:	84 c0                	test   al,al
c001e1e7:	75 38                	jne    c001e221 <schedule()+0x61>
c001e1e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e1ee:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e1f1:	4a                   	dec    edx
c001e1f2:	74 32                	je     c001e226 <schedule()+0x66>
c001e1f4:	83 ec 0c             	sub    esp,0xc
c001e1f7:	68 28 1a 03 c0       	push   0xc0031a28
c001e1fc:	e8 cd a8 00 00       	call   c0028ace <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e201:	c7 04 24 28 1a 03 c0 	mov    DWORD PTR [esp],0xc0031a28
c001e208:	89 c3                	mov    ebx,eax
c001e20a:	e8 e3 a8 00 00       	call   c0028af2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e20f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e216:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e219:	e8 07 fd ff ff       	call   c001df25 <switchToThread(ThreadControlBlock*)>
c001e21e:	83 c4 10             	add    esp,0x10
c001e221:	83 c4 08             	add    esp,0x8
c001e224:	5b                   	pop    ebx
c001e225:	c3                   	ret    
c001e226:	83 ec 08             	sub    esp,0x8
c001e229:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e230:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e236:	68 28 1a 03 c0       	push   0xc0031a28
c001e23b:	e8 60 a9 00 00       	call   c0028ba0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e240:	83 c4 10             	add    esp,0x10
c001e243:	eb af                	jmp    c001e1f4 <schedule()+0x34>

c001e245 <unlockStuff()>:
c001e245:	a1 08 1a 03 c0       	mov    eax,ds:0xc0031a08
c001e24a:	48                   	dec    eax
c001e24b:	a3 08 1a 03 c0       	mov    ds:0xc0031a08,eax
c001e250:	75 09                	jne    c001e25b <unlockStuff()+0x16>
c001e252:	a1 04 1a 03 c0       	mov    eax,ds:0xc0031a04
c001e257:	85 c0                	test   eax,eax
c001e259:	75 05                	jne    c001e260 <unlockStuff()+0x1b>
c001e25b:	e9 15 fc ff ff       	jmp    c001de75 <enableIRQs()>
c001e260:	83 ec 0c             	sub    esp,0xc
c001e263:	c7 05 04 1a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031a04,0x0
c001e26d:	e8 4e ff ff ff       	call   c001e1c0 <schedule()>
c001e272:	83 c4 0c             	add    esp,0xc
c001e275:	e9 fb fb ff ff       	jmp    c001de75 <enableIRQs()>

c001e27a <Semaphore::tryAcquire()>:
c001e27a:	83 ec 0c             	sub    esp,0xc
c001e27d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e281:	e8 25 fc ff ff       	call   c001deab <lockStuff()>
c001e286:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e289:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e28b:	7c 0b                	jl     c001e298 <Semaphore::tryAcquire()+0x1e>
c001e28d:	e8 b3 ff ff ff       	call   c001e245 <unlockStuff()>
c001e292:	31 c0                	xor    eax,eax
c001e294:	83 c4 0c             	add    esp,0xc
c001e297:	c3                   	ret    
c001e298:	42                   	inc    edx
c001e299:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e29c:	e8 a4 ff ff ff       	call   c001e245 <unlockStuff()>
c001e2a1:	b0 01                	mov    al,0x1
c001e2a3:	83 c4 0c             	add    esp,0xc
c001e2a6:	c3                   	ret    
c001e2a7:	90                   	nop

c001e2a8 <Semaphore::assertLocked(char const*)>:
c001e2a8:	83 ec 0c             	sub    esp,0xc
c001e2ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2af:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e2b3:	e8 f3 fb ff ff       	call   c001deab <lockStuff()>
c001e2b8:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e2ba:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001e2bd:	7c 05                	jl     c001e2c4 <Semaphore::assertLocked(char const*)+0x1c>
c001e2bf:	83 c4 0c             	add    esp,0xc
c001e2c2:	eb 81                	jmp    c001e245 <unlockStuff()>
c001e2c4:	83 ec 0c             	sub    esp,0xc
c001e2c7:	52                   	push   edx
c001e2c8:	e8 c2 c3 ff ff       	call   c001a68f <Krnl::panic(char const*)>
c001e2cd:	83 c4 10             	add    esp,0x10
c001e2d0:	83 c4 0c             	add    esp,0xc
c001e2d3:	e9 6d ff ff ff       	jmp    c001e245 <unlockStuff()>

c001e2d8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e2d8:	83 ec 0c             	sub    esp,0xc
c001e2db:	e8 8f fb ff ff       	call   c001de6f <getIRQNestingLevel()>
c001e2e0:	83 ec 08             	sub    esp,0x8
c001e2e3:	50                   	push   eax
c001e2e4:	68 f4 c3 02 c0       	push   0xc002c3f4
c001e2e9:	e8 fc 4c ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001e2ee:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e2f2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2f7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e2fa:	e8 c1 fe ff ff       	call   c001e1c0 <schedule()>
c001e2ff:	e8 82 fb ff ff       	call   c001de86 <unlockScheduler()>
c001e304:	e8 66 fb ff ff       	call   c001de6f <getIRQNestingLevel()>
c001e309:	5a                   	pop    edx
c001e30a:	59                   	pop    ecx
c001e30b:	50                   	push   eax
c001e30c:	68 28 c4 02 c0       	push   0xc002c428
c001e311:	e8 d4 4c ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001e316:	83 c4 1c             	add    esp,0x1c
c001e319:	c3                   	ret    

c001e31a <blockTask(TaskState)>:
c001e31a:	83 ec 0c             	sub    esp,0xc
c001e31d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e321:	e8 5e fb ff ff       	call   c001de84 <lockScheduler()>
c001e326:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e32b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e32e:	e8 8d fe ff ff       	call   c001e1c0 <schedule()>
c001e333:	83 c4 0c             	add    esp,0xc
c001e336:	e9 4b fb ff ff       	jmp    c001de86 <unlockScheduler()>

c001e33b <waitTask(int, int*, int)>:
c001e33b:	83 ec 18             	sub    esp,0x18
c001e33e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e343:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e347:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e34a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e34e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e353:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e356:	6a 07                	push   0x7
c001e358:	e8 bd ff ff ff       	call   c001e31a <blockTask(TaskState)>
c001e35d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e362:	83 c4 10             	add    esp,0x10
c001e365:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e368:	85 d2                	test   edx,edx
c001e36a:	74 0a                	je     c001e376 <waitTask(int, int*, int)+0x3b>
c001e36c:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e36f:	89 02                	mov    DWORD PTR [edx],eax
c001e371:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e376:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e379:	83 c4 0c             	add    esp,0xc
c001e37c:	c3                   	ret    

c001e37d <nanoSleepUntil(unsigned long long)>:
c001e37d:	83 ec 0c             	sub    esp,0xc
c001e380:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e384:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e388:	3b 05 50 eb 02 c0    	cmp    eax,DWORD PTR ds:0xc002eb50
c001e38e:	89 d1                	mov    ecx,edx
c001e390:	1b 0d 54 eb 02 c0    	sbb    ecx,DWORD PTR ds:0xc002eb54
c001e396:	73 04                	jae    c001e39c <nanoSleepUntil(unsigned long long)+0x1f>
c001e398:	83 c4 0c             	add    esp,0xc
c001e39b:	c3                   	ret    
c001e39c:	e8 0a fb ff ff       	call   c001deab <lockStuff()>
c001e3a1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e3a7:	83 ec 08             	sub    esp,0x8
c001e3aa:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e3ad:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e3b0:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e3b6:	68 1c 1a 03 c0       	push   0xc0031a1c
c001e3bb:	e8 e0 a7 00 00       	call   c0028ba0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e3c0:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e3c7:	e8 4e ff ff ff       	call   c001e31a <blockTask(TaskState)>
c001e3cc:	83 c4 1c             	add    esp,0x1c
c001e3cf:	e9 71 fe ff ff       	jmp    c001e245 <unlockStuff()>

c001e3d4 <nanoSleep(unsigned long long)>:
c001e3d4:	a1 50 eb 02 c0       	mov    eax,ds:0xc002eb50
c001e3d9:	8b 15 54 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb54
c001e3df:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e3e3:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e3e7:	eb 94                	jmp    c001e37d <nanoSleepUntil(unsigned long long)>

c001e3e9 <sleep(unsigned long long)>:
c001e3e9:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e3f1:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e3f6:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e3fa:	01 ca                	add    edx,ecx
c001e3fc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e400:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e404:	eb ce                	jmp    c001e3d4 <nanoSleep(unsigned long long)>

c001e406 <Semaphore::acquire()>:
c001e406:	83 ec 0c             	sub    esp,0xc
c001e409:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e40d:	e8 99 fa ff ff       	call   c001deab <lockStuff()>
c001e412:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e415:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e417:	7d 0c                	jge    c001e425 <Semaphore::acquire()+0x1f>
c001e419:	42                   	inc    edx
c001e41a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e41d:	83 c4 0c             	add    esp,0xc
c001e420:	e9 20 fe ff ff       	jmp    c001e245 <unlockStuff()>
c001e425:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e42b:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001e432:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e435:	85 d2                	test   edx,edx
c001e437:	74 2a                	je     c001e463 <Semaphore::acquire()+0x5d>
c001e439:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e43c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e442:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001e445:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e44b:	83 ec 0c             	sub    esp,0xc
c001e44e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e451:	6a 05                	push   0x5
c001e453:	e8 c2 fe ff ff       	call   c001e31a <blockTask(TaskState)>
c001e458:	83 c4 10             	add    esp,0x10
c001e45b:	83 c4 0c             	add    esp,0xc
c001e45e:	e9 e2 fd ff ff       	jmp    c001e245 <unlockStuff()>
c001e463:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e469:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e46c:	eb d7                	jmp    c001e445 <Semaphore::acquire()+0x3f>

c001e46e <taskReturned>:
c001e46e:	83 ec 18             	sub    esp,0x18
c001e471:	68 5c c4 02 c0       	push   0xc002c45c
c001e476:	e8 14 c2 ff ff       	call   c001a68f <Krnl::panic(char const*)>
c001e47b:	83 c4 10             	add    esp,0x10
c001e47e:	83 ec 0c             	sub    esp,0xc
c001e481:	6a 02                	push   0x2
c001e483:	e8 92 fe ff ff       	call   c001e31a <blockTask(TaskState)>
c001e488:	e8 f7 f9 ff ff       	call   c001de84 <lockScheduler()>
c001e48d:	e8 2e fd ff ff       	call   c001e1c0 <schedule()>
c001e492:	e8 ef f9 ff ff       	call   c001de86 <unlockScheduler()>
c001e497:	83 c4 10             	add    esp,0x10
c001e49a:	eb e2                	jmp    c001e47e <taskReturned+0x10>

c001e49c <unblockTask(ThreadControlBlock*)>:
c001e49c:	53                   	push   ebx
c001e49d:	83 ec 08             	sub    esp,0x8
c001e4a0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e4a4:	e8 db f9 ff ff       	call   c001de84 <lockScheduler()>
c001e4a9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e4ac:	85 c0                	test   eax,eax
c001e4ae:	74 5c                	je     c001e50c <unblockTask(ThreadControlBlock*)+0x70>
c001e4b0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e4b3:	48                   	dec    eax
c001e4b4:	74 31                	je     c001e4e7 <unblockTask(ThreadControlBlock*)+0x4b>
c001e4b6:	83 ec 0c             	sub    esp,0xc
c001e4b9:	68 28 1a 03 c0       	push   0xc0031a28
c001e4be:	e8 0b a6 00 00       	call   c0028ace <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e4c3:	83 c4 10             	add    esp,0x10
c001e4c6:	85 c0                	test   eax,eax
c001e4c8:	75 17                	jne    c001e4e1 <unblockTask(ThreadControlBlock*)+0x45>
c001e4ca:	eb 65                	jmp    c001e531 <unblockTask(ThreadControlBlock*)+0x95>
c001e4cc:	83 ec 08             	sub    esp,0x8
c001e4cf:	50                   	push   eax
c001e4d0:	68 28 1a 03 c0       	push   0xc0031a28
c001e4d5:	e8 ce a8 00 00       	call   c0028da8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e4da:	83 c4 10             	add    esp,0x10
c001e4dd:	85 c0                	test   eax,eax
c001e4df:	74 50                	je     c001e531 <unblockTask(ThreadControlBlock*)+0x95>
c001e4e1:	39 c3                	cmp    ebx,eax
c001e4e3:	75 e7                	jne    c001e4cc <unblockTask(ThreadControlBlock*)+0x30>
c001e4e5:	eb 1c                	jmp    c001e503 <unblockTask(ThreadControlBlock*)+0x67>
c001e4e7:	83 ec 0c             	sub    esp,0xc
c001e4ea:	68 4c c5 02 c0       	push   0xc002c54c
c001e4ef:	e8 f6 4a ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001e4f4:	c7 04 24 d8 c4 02 c0 	mov    DWORD PTR [esp],0xc002c4d8
c001e4fb:	e8 ea 4a ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001e500:	83 c4 10             	add    esp,0x10
c001e503:	83 c4 08             	add    esp,0x8
c001e506:	5b                   	pop    ebx
c001e507:	e9 7a f9 ff ff       	jmp    c001de86 <unlockScheduler()>
c001e50c:	83 ec 0c             	sub    esp,0xc
c001e50f:	68 90 c4 02 c0       	push   0xc002c490
c001e514:	e8 d1 4a ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001e519:	c7 04 24 d8 c4 02 c0 	mov    DWORD PTR [esp],0xc002c4d8
c001e520:	e8 c5 4a ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001e525:	83 c4 10             	add    esp,0x10
c001e528:	83 c4 08             	add    esp,0x8
c001e52b:	5b                   	pop    ebx
c001e52c:	e9 55 f9 ff ff       	jmp    c001de86 <unlockScheduler()>
c001e531:	83 ec 08             	sub    esp,0x8
c001e534:	53                   	push   ebx
c001e535:	68 28 1a 03 c0       	push   0xc0031a28
c001e53a:	e8 61 a6 00 00       	call   c0028ba0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e53f:	83 c4 10             	add    esp,0x10
c001e542:	83 c4 08             	add    esp,0x8
c001e545:	5b                   	pop    ebx
c001e546:	e9 3b f9 ff ff       	jmp    c001de86 <unlockScheduler()>

c001e54b <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e54b:	55                   	push   ebp
c001e54c:	57                   	push   edi
c001e54d:	56                   	push   esi
c001e54e:	53                   	push   ebx
c001e54f:	83 ec 1c             	sub    esp,0x1c
c001e552:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e556:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e559:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e55f:	85 ff                	test   edi,edi
c001e561:	7e 20                	jle    c001e583 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e563:	31 f6                	xor    esi,esi
c001e565:	83 ec 0c             	sub    esp,0xc
c001e568:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e56f:	46                   	inc    esi
c001e570:	e8 de 12 ff ff       	call   c000f853 <free>
c001e575:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e578:	83 c4 10             	add    esp,0x10
c001e57b:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e581:	7f e2                	jg     c001e565 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e583:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e58d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e592:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e595:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e598:	d3 c0                	rol    eax,cl
c001e59a:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e5a1:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e5a4:	89 f7                	mov    edi,esi
c001e5a6:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e5ae:	0f 85 74 01 00 00    	jne    c001e728 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001e5b4:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e5ba:	85 ed                	test   ebp,ebp
c001e5bc:	74 1b                	je     c001e5d9 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e5be:	83 ec 0c             	sub    esp,0xc
c001e5c1:	55                   	push   ebp
c001e5c2:	e8 35 be ff ff       	call   c001a3fc <EnvVarContainer::~EnvVarContainer()>
c001e5c7:	59                   	pop    ecx
c001e5c8:	5e                   	pop    esi
c001e5c9:	6a 0c                	push   0xc
c001e5cb:	55                   	push   ebp
c001e5cc:	e8 39 49 ff ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c001e5d1:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e5d4:	83 c4 10             	add    esp,0x10
c001e5d7:	89 f7                	mov    edi,esi
c001e5d9:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e5df:	85 c0                	test   eax,eax
c001e5e1:	0f 84 aa 00 00 00    	je     c001e691 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e5e7:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e5ea:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e5ee:	31 c9                	xor    ecx,ecx
c001e5f0:	eb 10                	jmp    c001e602 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e5f2:	41                   	inc    ecx
c001e5f3:	83 f9 10             	cmp    ecx,0x10
c001e5f6:	0f 84 95 00 00 00    	je     c001e691 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e5fc:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e602:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e609:	d3 fa                	sar    edx,cl
c001e60b:	83 e2 01             	and    edx,0x1
c001e60e:	74 e2                	je     c001e5f2 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e610:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e613:	01 ca                	add    edx,ecx
c001e615:	89 d5                	mov    ebp,edx
c001e617:	c1 e5 05             	shl    ebp,0x5
c001e61a:	01 ea                	add    edx,ebp
c001e61c:	01 d0                	add    eax,edx
c001e61e:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e624:	83 fd 07             	cmp    ebp,0x7
c001e627:	75 c9                	jne    c001e5f2 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e629:	05 40 02 00 00       	add    eax,0x240
c001e62e:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e631:	83 fd ff             	cmp    ebp,0xffffffff
c001e634:	0f 8c 08 01 00 00    	jl     c001e742 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e63a:	0f 84 b9 01 00 00    	je     c001e7f9 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001e640:	85 ed                	test   ebp,ebp
c001e642:	0f 84 a0 01 00 00    	je     c001e7e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001e648:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e64a:	75 a6                	jne    c001e5f2 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e64c:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e652:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e656:	01 d0                	add    eax,edx
c001e658:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e65c:	83 ec 0c             	sub    esp,0xc
c001e65f:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e665:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e668:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e66e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e675:	50                   	push   eax
c001e676:	e8 21 fe ff ff       	call   c001e49c <unblockTask(ThreadControlBlock*)>
c001e67b:	83 c4 10             	add    esp,0x10
c001e67e:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e681:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e685:	89 f7                	mov    edi,esi
c001e687:	41                   	inc    ecx
c001e688:	83 f9 10             	cmp    ecx,0x10
c001e68b:	0f 85 6b ff ff ff    	jne    c001e5fc <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e691:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e697:	85 c0                	test   eax,eax
c001e699:	74 5d                	je     c001e6f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e69b:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e6a1:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e6a7:	74 4f                	je     c001e6f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e6a9:	83 ec 0c             	sub    esp,0xc
c001e6ac:	68 28 1a 03 c0       	push   0xc0031a28
c001e6b1:	e8 18 a4 00 00       	call   c0028ace <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e6b6:	c7 04 24 28 1a 03 c0 	mov    DWORD PTR [esp],0xc0031a28
c001e6bd:	89 c7                	mov    edi,eax
c001e6bf:	e8 12 a4 00 00       	call   c0028ad6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e6c4:	83 c4 10             	add    esp,0x10
c001e6c7:	84 c0                	test   al,al
c001e6c9:	0f 84 e4 00 00 00    	je     c001e7b3 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001e6cf:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e6d2:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e6d8:	85 d2                	test   edx,edx
c001e6da:	74 0f                	je     c001e6eb <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e6dc:	83 ec 0c             	sub    esp,0xc
c001e6df:	8b 02                	mov    eax,DWORD PTR [edx]
c001e6e1:	52                   	push   edx
c001e6e2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e6e5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e6e8:	83 c4 10             	add    esp,0x10
c001e6eb:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e6f5:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e6f8:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e6fe:	85 db                	test   ebx,ebx
c001e700:	74 16                	je     c001e718 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e702:	83 ec 0c             	sub    esp,0xc
c001e705:	53                   	push   ebx
c001e706:	e8 03 3c ff ff       	call   c001230e <VAS::~VAS()>
c001e70b:	58                   	pop    eax
c001e70c:	5a                   	pop    edx
c001e70d:	6a 14                	push   0x14
c001e70f:	53                   	push   ebx
c001e710:	e8 f5 47 ff ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c001e715:	83 c4 10             	add    esp,0x10
c001e718:	83 ec 0c             	sub    esp,0xc
c001e71b:	68 a5 c2 02 c0       	push   0xc002c2a5
c001e720:	e8 c5 48 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001e725:	83 c4 10             	add    esp,0x10
c001e728:	83 ec 08             	sub    esp,0x8
c001e72b:	68 3f 07 00 00       	push   0x73f
c001e730:	68 b3 c2 02 c0       	push   0xc002c2b3
c001e735:	e8 b0 48 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001e73a:	83 c4 2c             	add    esp,0x2c
c001e73d:	5b                   	pop    ebx
c001e73e:	5e                   	pop    esi
c001e73f:	5f                   	pop    edi
c001e740:	5d                   	pop    ebp
c001e741:	c3                   	ret    
c001e742:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e746:	83 ec 0c             	sub    esp,0xc
c001e749:	68 90 c5 02 c0       	push   0xc002c590
c001e74e:	e8 3c bf ff ff       	call   c001a68f <Krnl::panic(char const*)>
c001e753:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e756:	83 c4 10             	add    esp,0x10
c001e759:	89 f7                	mov    edi,esi
c001e75b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e75f:	e9 8e fe ff ff       	jmp    c001e5f2 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e764:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e76a:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e770:	75 1c                	jne    c001e78e <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e772:	83 ec 0c             	sub    esp,0xc
c001e775:	68 f8 c5 02 c0       	push   0xc002c5f8
c001e77a:	e8 6b 48 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001e77f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e786:	e8 8f fb ff ff       	call   c001e31a <blockTask(TaskState)>
c001e78b:	83 c4 10             	add    esp,0x10
c001e78e:	83 ec 08             	sub    esp,0x8
c001e791:	56                   	push   esi
c001e792:	68 28 1a 03 c0       	push   0xc0031a28
c001e797:	e8 04 a4 00 00       	call   c0028ba0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e79c:	c7 04 24 28 1a 03 c0 	mov    DWORD PTR [esp],0xc0031a28
c001e7a3:	e8 26 a3 00 00       	call   c0028ace <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e7a8:	83 c4 10             	add    esp,0x10
c001e7ab:	39 f8                	cmp    eax,edi
c001e7ad:	0f 84 1c ff ff ff    	je     c001e6cf <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e7b3:	83 ec 0c             	sub    esp,0xc
c001e7b6:	68 28 1a 03 c0       	push   0xc0031a28
c001e7bb:	e8 0e a3 00 00       	call   c0028ace <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e7c0:	c7 04 24 28 1a 03 c0 	mov    DWORD PTR [esp],0xc0031a28
c001e7c7:	89 c6                	mov    esi,eax
c001e7c9:	e8 24 a3 00 00       	call   c0028af2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e7ce:	83 c4 10             	add    esp,0x10
c001e7d1:	39 f3                	cmp    ebx,esi
c001e7d3:	74 b9                	je     c001e78e <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e7d5:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e7d8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e7db:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e7e1:	75 ab                	jne    c001e78e <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e7e3:	e9 7c ff ff ff       	jmp    c001e764 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001e7e8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e7ec:	83 ec 0c             	sub    esp,0xc
c001e7ef:	68 c4 c5 02 c0       	push   0xc002c5c4
c001e7f4:	e9 55 ff ff ff       	jmp    c001e74e <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001e7f9:	8b 36                	mov    esi,DWORD PTR [esi]
c001e7fb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e7ff:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e802:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e805:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e80b:	01 d7                	add    edi,edx
c001e80d:	89 f8                	mov    eax,edi
c001e80f:	e9 44 fe ff ff       	jmp    c001e658 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e814 <cleanerTaskFunction(void*)>:
c001e814:	53                   	push   ebx
c001e815:	83 ec 08             	sub    esp,0x8
c001e818:	e8 69 f6 ff ff       	call   c001de86 <unlockScheduler()>
c001e81d:	e8 62 f6 ff ff       	call   c001de84 <lockScheduler()>
c001e822:	80 3d ec 19 03 c0 00 	cmp    BYTE PTR ds:0xc00319ec,0x0
c001e829:	0f 85 8e 00 00 00    	jne    c001e8bd <cleanerTaskFunction(void*)+0xa9>
c001e82f:	83 ec 0c             	sub    esp,0xc
c001e832:	6a 02                	push   0x2
c001e834:	e8 9f fa ff ff       	call   c001e2d8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e839:	83 c4 10             	add    esp,0x10
c001e83c:	c6 05 ec 19 03 c0 00 	mov    BYTE PTR ds:0xc00319ec,0x0
c001e843:	e8 63 f6 ff ff       	call   c001deab <lockStuff()>
c001e848:	e8 37 f6 ff ff       	call   c001de84 <lockScheduler()>
c001e84d:	83 ec 0c             	sub    esp,0xc
c001e850:	68 10 1a 03 c0       	push   0xc0031a10
c001e855:	e8 7c a2 00 00       	call   c0028ad6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e85a:	83 c4 10             	add    esp,0x10
c001e85d:	84 c0                	test   al,al
c001e85f:	75 40                	jne    c001e8a1 <cleanerTaskFunction(void*)+0x8d>
c001e861:	83 ec 0c             	sub    esp,0xc
c001e864:	68 10 1a 03 c0       	push   0xc0031a10
c001e869:	e8 60 a2 00 00       	call   c0028ace <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e86e:	c7 04 24 10 1a 03 c0 	mov    DWORD PTR [esp],0xc0031a10
c001e875:	89 c3                	mov    ebx,eax
c001e877:	e8 76 a2 00 00       	call   c0028af2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e87c:	c7 04 24 c9 c2 02 c0 	mov    DWORD PTR [esp],0xc002c2c9
c001e883:	e8 62 47 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001e888:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e88b:	e8 bb fc ff ff       	call   c001e54b <cleanupTerminatedTask(ThreadControlBlock*)>
c001e890:	c7 04 24 e2 c2 02 c0 	mov    DWORD PTR [esp],0xc002c2e2
c001e897:	e8 4e 47 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001e89c:	83 c4 10             	add    esp,0x10
c001e89f:	eb ac                	jmp    c001e84d <cleanerTaskFunction(void*)+0x39>
c001e8a1:	e8 e0 f5 ff ff       	call   c001de86 <unlockScheduler()>
c001e8a6:	e8 9a f9 ff ff       	call   c001e245 <unlockStuff()>
c001e8ab:	e8 d4 f5 ff ff       	call   c001de84 <lockScheduler()>
c001e8b0:	80 3d ec 19 03 c0 00 	cmp    BYTE PTR ds:0xc00319ec,0x0
c001e8b7:	0f 84 72 ff ff ff    	je     c001e82f <cleanerTaskFunction(void*)+0x1b>
c001e8bd:	e8 c4 f5 ff ff       	call   c001de86 <unlockScheduler()>
c001e8c2:	e9 75 ff ff ff       	jmp    c001e83c <cleanerTaskFunction(void*)+0x28>

c001e8c7 <terminateTask(int)>:
c001e8c7:	83 ec 14             	sub    esp,0x14
c001e8ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8cf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e8d2:	83 c0 0c             	add    eax,0xc
c001e8d5:	50                   	push   eax
c001e8d6:	68 20 c6 02 c0       	push   0xc002c620
c001e8db:	e8 0a 47 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001e8e0:	e8 c6 f5 ff ff       	call   c001deab <lockStuff()>
c001e8e5:	e8 9a f5 ff ff       	call   c001de84 <lockScheduler()>
c001e8ea:	c7 04 24 f5 c2 02 c0 	mov    DWORD PTR [esp],0xc002c2f5
c001e8f1:	e8 f4 46 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001e8f6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e8fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8ff:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e902:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e907:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e90a:	5a                   	pop    edx
c001e90b:	59                   	pop    ecx
c001e90c:	50                   	push   eax
c001e90d:	68 10 1a 03 c0       	push   0xc0031a10
c001e912:	e8 89 a2 00 00       	call   c0028ba0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e917:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e91c:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e923:	c7 04 24 0f c3 02 c0 	mov    DWORD PTR [esp],0xc002c30f
c001e92a:	e8 bb 46 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001e92f:	83 c4 10             	add    esp,0x10
c001e932:	a1 e8 19 03 c0       	mov    eax,ds:0xc00319e8
c001e937:	85 c0                	test   eax,eax
c001e939:	74 5a                	je     c001e995 <terminateTask(int)+0xce>
c001e93b:	83 ec 0c             	sub    esp,0xc
c001e93e:	68 29 c3 02 c0       	push   0xc002c329
c001e943:	e8 a2 46 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001e948:	58                   	pop    eax
c001e949:	c6 05 ec 19 03 c0 01 	mov    BYTE PTR ds:0xc00319ec,0x1
c001e950:	ff 35 e8 19 03 c0    	push   DWORD PTR ds:0xc00319e8
c001e956:	e8 41 fb ff ff       	call   c001e49c <unblockTask(ThreadControlBlock*)>
c001e95b:	c7 04 24 43 c3 02 c0 	mov    DWORD PTR [esp],0xc002c343
c001e962:	e8 83 46 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001e967:	83 c4 10             	add    esp,0x10
c001e96a:	e8 17 f5 ff ff       	call   c001de86 <unlockScheduler()>
c001e96f:	e8 d1 f8 ff ff       	call   c001e245 <unlockStuff()>
c001e974:	83 ec 0c             	sub    esp,0xc
c001e977:	68 7b c3 02 c0       	push   0xc002c37b
c001e97c:	e8 69 46 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001e981:	83 c4 10             	add    esp,0x10
c001e984:	e8 fb f4 ff ff       	call   c001de84 <lockScheduler()>
c001e989:	e8 32 f8 ff ff       	call   c001e1c0 <schedule()>
c001e98e:	e8 f3 f4 ff ff       	call   c001de86 <unlockScheduler()>
c001e993:	eb ef                	jmp    c001e984 <terminateTask(int)+0xbd>
c001e995:	83 ec 0c             	sub    esp,0xc
c001e998:	68 5d c3 02 c0       	push   0xc002c35d
c001e99d:	e8 48 46 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001e9a2:	83 c4 10             	add    esp,0x10
c001e9a5:	eb c3                	jmp    c001e96a <terminateTask(int)+0xa3>

c001e9a7 <Thr::terminateFromIRQ(int)>:
c001e9a7:	83 ec 18             	sub    esp,0x18
c001e9aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e9ae:	e8 14 ff ff ff       	call   c001e8c7 <terminateTask(int)>
c001e9b3:	90                   	nop

c001e9b4 <Semaphore::release()>:
c001e9b4:	83 ec 0c             	sub    esp,0xc
c001e9b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9bb:	e8 eb f4 ff ff       	call   c001deab <lockStuff()>
c001e9c0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e9c3:	85 d2                	test   edx,edx
c001e9c5:	74 1a                	je     c001e9e1 <Semaphore::release()+0x2d>
c001e9c7:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001e9ca:	83 ec 0c             	sub    esp,0xc
c001e9cd:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001e9d0:	52                   	push   edx
c001e9d1:	e8 c6 fa ff ff       	call   c001e49c <unblockTask(ThreadControlBlock*)>
c001e9d6:	83 c4 10             	add    esp,0x10
c001e9d9:	83 c4 0c             	add    esp,0xc
c001e9dc:	e9 64 f8 ff ff       	jmp    c001e245 <unlockStuff()>
c001e9e1:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001e9e4:	83 c4 0c             	add    esp,0xc
c001e9e7:	e9 59 f8 ff ff       	jmp    c001e245 <unlockStuff()>

c001e9ec <__static_initialization_and_destruction_0(int, int)>:
c001e9ec:	83 ec 0c             	sub    esp,0xc
c001e9ef:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e9f4:	0f 85 88 00 00 00    	jne    c001ea82 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e9fa:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001ea02:	75 7e                	jne    c001ea82 <__static_initialization_and_destruction_0(int, int)+0x96>
c001ea04:	83 ec 0c             	sub    esp,0xc
c001ea07:	68 28 1a 03 c0       	push   0xc0031a28
c001ea0c:	e8 3f a3 00 00       	call   c0028d50 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ea11:	83 c4 10             	add    esp,0x10
c001ea14:	83 ec 04             	sub    esp,0x4
c001ea17:	68 d8 d3 02 c0       	push   0xc002d3d8
c001ea1c:	68 28 1a 03 c0       	push   0xc0031a28
c001ea21:	68 10 8d 02 c0       	push   0xc0028d10
c001ea26:	e8 59 44 ff ff       	call   c0012e84 <__cxa_atexit>
c001ea2b:	83 c4 10             	add    esp,0x10
c001ea2e:	83 ec 0c             	sub    esp,0xc
c001ea31:	68 1c 1a 03 c0       	push   0xc0031a1c
c001ea36:	e8 15 a3 00 00       	call   c0028d50 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ea3b:	83 c4 10             	add    esp,0x10
c001ea3e:	83 ec 04             	sub    esp,0x4
c001ea41:	68 d8 d3 02 c0       	push   0xc002d3d8
c001ea46:	68 1c 1a 03 c0       	push   0xc0031a1c
c001ea4b:	68 10 8d 02 c0       	push   0xc0028d10
c001ea50:	e8 2f 44 ff ff       	call   c0012e84 <__cxa_atexit>
c001ea55:	83 c4 10             	add    esp,0x10
c001ea58:	83 ec 0c             	sub    esp,0xc
c001ea5b:	68 10 1a 03 c0       	push   0xc0031a10
c001ea60:	e8 eb a2 00 00       	call   c0028d50 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ea65:	83 c4 10             	add    esp,0x10
c001ea68:	83 ec 04             	sub    esp,0x4
c001ea6b:	68 d8 d3 02 c0       	push   0xc002d3d8
c001ea70:	68 10 1a 03 c0       	push   0xc0031a10
c001ea75:	68 10 8d 02 c0       	push   0xc0028d10
c001ea7a:	e8 05 44 ff ff       	call   c0012e84 <__cxa_atexit>
c001ea7f:	83 c4 10             	add    esp,0x10
c001ea82:	90                   	nop
c001ea83:	83 c4 0c             	add    esp,0xc
c001ea86:	c3                   	ret    

c001ea87 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001ea87:	83 ec 0c             	sub    esp,0xc
c001ea8a:	83 ec 08             	sub    esp,0x8
c001ea8d:	68 ff ff 00 00       	push   0xffff
c001ea92:	6a 01                	push   0x1
c001ea94:	e8 53 ff ff ff       	call   c001e9ec <__static_initialization_and_destruction_0(int, int)>
c001ea99:	83 c4 10             	add    esp,0x10
c001ea9c:	83 c4 0c             	add    esp,0xc
c001ea9f:	c3                   	ret    

c001eaa0 <Vm::inbv(unsigned short)>:
c001eaa0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001eaa4:	66 81 fa fe fe       	cmp    dx,0xfefe
c001eaa9:	75 06                	jne    c001eab1 <Vm::inbv(unsigned short)+0x11>
c001eaab:	a0 6c 1a 03 c0       	mov    al,ds:0xc0031a6c
c001eab0:	c3                   	ret    
c001eab1:	ec                   	in     al,dx
c001eab2:	c3                   	ret    

c001eab3 <Vm::outbv(unsigned short, unsigned char)>:
c001eab3:	53                   	push   ebx
c001eab4:	83 ec 08             	sub    esp,0x8
c001eab7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eabb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001eabf:	66 81 fa fe fe       	cmp    dx,0xfefe
c001eac4:	75 38                	jne    c001eafe <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001eac6:	0f b6 c3             	movzx  eax,bl
c001eac9:	51                   	push   ecx
c001eaca:	51                   	push   ecx
c001eacb:	50                   	push   eax
c001eacc:	68 3f c6 02 c0       	push   0xc002c63f
c001ead1:	e8 14 45 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001ead6:	8b 15 6c 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031a6c
c001eadc:	83 c4 10             	add    esp,0x10
c001eadf:	8d 42 01             	lea    eax,[edx+0x1]
c001eae2:	88 9a 80 1a 03 c0    	mov    BYTE PTR [edx-0x3ffce580],bl
c001eae8:	a3 6c 1a 03 c0       	mov    ds:0xc0031a6c,eax
c001eaed:	83 f8 20             	cmp    eax,0x20
c001eaf0:	75 0f                	jne    c001eb01 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001eaf2:	c7 05 6c 1a 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0031a6c,0x1f
c001eafc:	eb 03                	jmp    c001eb01 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001eafe:	88 d8                	mov    al,bl
c001eb00:	ee                   	out    dx,al
c001eb01:	83 c4 08             	add    esp,0x8
c001eb04:	5b                   	pop    ebx
c001eb05:	c3                   	ret    

c001eb06 <Vm::realToLinear(unsigned short, unsigned short)>:
c001eb06:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eb0b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eb10:	c1 e0 04             	shl    eax,0x4
c001eb13:	01 d0                	add    eax,edx
c001eb15:	c3                   	ret    

c001eb16 <Vm::getSegment(unsigned int)>:
c001eb16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb1a:	c1 e8 10             	shr    eax,0x10
c001eb1d:	c3                   	ret    

c001eb1e <Vm::getOffset(unsigned int)>:
c001eb1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb22:	c3                   	ret    

c001eb23 <Vm::mainloop2()>:
c001eb23:	83 ec 0c             	sub    esp,0xc
c001eb26:	e8 59 f3 ff ff       	call   c001de84 <lockScheduler()>
c001eb2b:	83 ec 0c             	sub    esp,0xc
c001eb2e:	c6 05 65 1a 03 c0 01 	mov    BYTE PTR ds:0xc0031a65,0x1
c001eb35:	6a 02                	push   0x2
c001eb37:	e8 9c f7 ff ff       	call   c001e2d8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eb3c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eb41:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001eb45:	52                   	push   edx
c001eb46:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001eb4a:	52                   	push   edx
c001eb4b:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001eb4f:	52                   	push   edx
c001eb50:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001eb54:	50                   	push   eax
c001eb55:	e8 a0 17 fe ff       	call   c00002fa <goToVM86>
c001eb5a:	83 c4 2c             	add    esp,0x2c
c001eb5d:	c3                   	ret    

c001eb5e <Vm::mainVm8086Loop(void*)>:
c001eb5e:	83 ec 0c             	sub    esp,0xc
c001eb61:	e8 20 f3 ff ff       	call   c001de86 <unlockScheduler()>
c001eb66:	83 c4 0c             	add    esp,0xc
c001eb69:	eb b8                	jmp    c001eb23 <Vm::mainloop2()>

c001eb6b <Vm::mainloop3(unsigned long)>:
c001eb6b:	53                   	push   ebx
c001eb6c:	83 ec 08             	sub    esp,0x8
c001eb6f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001eb73:	e8 0c f3 ff ff       	call   c001de84 <lockScheduler()>
c001eb78:	83 ec 0c             	sub    esp,0xc
c001eb7b:	89 1d 60 1a 03 c0    	mov    DWORD PTR ds:0xc0031a60,ebx
c001eb81:	6a 02                	push   0x2
c001eb83:	c6 05 64 1a 03 c0 01 	mov    BYTE PTR ds:0xc0031a64,0x1
c001eb8a:	e8 49 f7 ff ff       	call   c001e2d8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eb8f:	83 c4 18             	add    esp,0x18
c001eb92:	5b                   	pop    ebx
c001eb93:	eb 8e                	jmp    c001eb23 <Vm::mainloop2()>

c001eb95 <Vm::initialise8086()>:
c001eb95:	83 ec 0c             	sub    esp,0xc
c001eb98:	68 80 00 00 00       	push   0x80
c001eb9d:	6a 00                	push   0x0
c001eb9f:	68 5e eb 01 c0       	push   0xc001eb5e
c001eba4:	ff 35 34 1a 03 c0    	push   DWORD PTR ds:0xc0031a34
c001ebaa:	e8 07 f4 ff ff       	call   c001dfb6 <Process::createThread(void (*)(void*), void*, int)>
c001ebaf:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001ebb6:	a3 68 1a 03 c0       	mov    ds:0xc0031a68,eax
c001ebbb:	68 00 01 00 00       	push   0x100
c001ebc0:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c001ebc5:	6a 00                	push   0x0
c001ebc7:	6a 00                	push   0x0
c001ebc9:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ebcf:	e8 9a 3b ff ff       	call   c001276e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001ebd4:	83 c4 2c             	add    esp,0x2c
c001ebd7:	c3                   	ret    

c001ebd8 <Vm::finish8086()>:
c001ebd8:	53                   	push   ebx
c001ebd9:	83 ec 08             	sub    esp,0x8
c001ebdc:	e8 a3 f2 ff ff       	call   c001de84 <lockScheduler()>
c001ebe1:	80 3d 64 1a 03 c0 00 	cmp    BYTE PTR ds:0xc0031a64,0x0
c001ebe8:	75 0c                	jne    c001ebf6 <Vm::finish8086()+0x1e>
c001ebea:	e8 d1 f5 ff ff       	call   c001e1c0 <schedule()>
c001ebef:	e8 92 f2 ff ff       	call   c001de86 <unlockScheduler()>
c001ebf4:	eb e6                	jmp    c001ebdc <Vm::finish8086()+0x4>
c001ebf6:	83 ec 0c             	sub    esp,0xc
c001ebf9:	8b 1d 60 1a 03 c0    	mov    ebx,DWORD PTR ds:0xc0031a60
c001ebff:	ff 35 68 1a 03 c0    	push   DWORD PTR ds:0xc0031a68
c001ec05:	c6 05 64 1a 03 c0 00 	mov    BYTE PTR ds:0xc0031a64,0x0
c001ec0c:	e8 8b f8 ff ff       	call   c001e49c <unblockTask(ThreadControlBlock*)>
c001ec11:	e8 70 f2 ff ff       	call   c001de86 <unlockScheduler()>
c001ec16:	89 d8                	mov    eax,ebx
c001ec18:	83 c4 18             	add    esp,0x18
c001ec1b:	5b                   	pop    ebx
c001ec1c:	c3                   	ret    

c001ec1d <Vm::getOutput8086(unsigned char*)>:
c001ec1d:	83 ec 10             	sub    esp,0x10
c001ec20:	ff 35 6c 1a 03 c0    	push   DWORD PTR ds:0xc0031a6c
c001ec26:	68 80 1a 03 c0       	push   0xc0031a80
c001ec2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec2f:	e8 10 1b fe ff       	call   c0000744 <memcpy>
c001ec34:	a1 6c 1a 03 c0       	mov    eax,ds:0xc0031a6c
c001ec39:	c7 05 6c 1a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031a6c,0x0
c001ec43:	83 c4 1c             	add    esp,0x1c
c001ec46:	c3                   	ret    

c001ec47 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001ec47:	55                   	push   ebp
c001ec48:	57                   	push   edi
c001ec49:	56                   	push   esi
c001ec4a:	53                   	push   ebx
c001ec4b:	83 ec 2c             	sub    esp,0x2c
c001ec4e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ec52:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001ec56:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001ec5a:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ec5e:	e8 21 f2 ff ff       	call   c001de84 <lockScheduler()>
c001ec63:	a0 65 1a 03 c0       	mov    al,ds:0xc0031a65
c001ec68:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ec6c:	84 c0                	test   al,al
c001ec6e:	75 0c                	jne    c001ec7c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001ec70:	e8 4b f5 ff ff       	call   c001e1c0 <schedule()>
c001ec75:	e8 0c f2 ff ff       	call   c001de86 <unlockScheduler()>
c001ec7a:	eb e2                	jmp    c001ec5e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ec7c:	a1 68 1a 03 c0       	mov    eax,ds:0xc0031a68
c001ec81:	c7 05 6c 1a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031a6c,0x0
c001ec8b:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001ec8f:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001ec93:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001ec97:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001ec9b:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001ec9f:	50                   	push   eax
c001eca0:	6a 20                	push   0x20
c001eca2:	6a 00                	push   0x0
c001eca4:	68 80 1a 03 c0       	push   0xc0031a80
c001eca9:	e8 ca 1a fe ff       	call   c0000778 <memset>
c001ecae:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ecb5:	e8 89 0b ff ff       	call   c000f843 <malloc>
c001ecba:	83 c4 0c             	add    esp,0xc
c001ecbd:	89 c7                	mov    edi,eax
c001ecbf:	ff 35 34 1a 03 c0    	push   DWORD PTR ds:0xc0031a34
c001ecc5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ecc9:	50                   	push   eax
c001ecca:	e8 73 48 ff ff       	call   c0013542 <File::File(char const*, Process*)>
c001eccf:	83 c4 10             	add    esp,0x10
c001ecd2:	85 ff                	test   edi,edi
c001ecd4:	75 0a                	jne    c001ece0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001ecd6:	83 ec 0c             	sub    esp,0xc
c001ecd9:	68 5b c6 02 c0       	push   0xc002c65b
c001ecde:	eb 27                	jmp    c001ed07 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001ece0:	50                   	push   eax
c001ece1:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ece5:	50                   	push   eax
c001ece6:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ecea:	50                   	push   eax
c001eceb:	57                   	push   edi
c001ecec:	e8 61 4b ff ff       	call   c0013852 <File::stat(unsigned long long*, bool*)>
c001ecf1:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001ecf6:	83 c4 10             	add    esp,0x10
c001ecf9:	89 e8                	mov    eax,ebp
c001ecfb:	84 c0                	test   al,al
c001ecfd:	74 19                	je     c001ed18 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001ecff:	83 ec 0c             	sub    esp,0xc
c001ed02:	68 6f c6 02 c0       	push   0xc002c66f
c001ed07:	e8 83 b9 ff ff       	call   c001a68f <Krnl::panic(char const*)>
c001ed0c:	31 ed                	xor    ebp,ebp
c001ed0e:	e8 73 f1 ff ff       	call   c001de86 <unlockScheduler()>
c001ed13:	83 c4 10             	add    esp,0x10
c001ed16:	eb 75                	jmp    c001ed8d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ed18:	50                   	push   eax
c001ed19:	50                   	push   eax
c001ed1a:	6a 01                	push   0x1
c001ed1c:	57                   	push   edi
c001ed1d:	e8 84 48 ff ff       	call   c00135a6 <File::open(FileOpenMode)>
c001ed22:	83 c4 10             	add    esp,0x10
c001ed25:	85 c0                	test   eax,eax
c001ed27:	74 17                	je     c001ed40 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001ed29:	83 ec 0c             	sub    esp,0xc
c001ed2c:	68 88 c6 02 c0       	push   0xc002c688
c001ed31:	e8 59 b9 ff ff       	call   c001a68f <Krnl::panic(char const*)>
c001ed36:	e8 4b f1 ff ff       	call   c001de86 <unlockScheduler()>
c001ed3b:	83 c4 10             	add    esp,0x10
c001ed3e:	eb 4d                	jmp    c001ed8d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ed40:	0f b7 f6             	movzx  esi,si
c001ed43:	50                   	push   eax
c001ed44:	0f b7 db             	movzx  ebx,bx
c001ed47:	50                   	push   eax
c001ed48:	56                   	push   esi
c001ed49:	53                   	push   ebx
c001ed4a:	e8 b7 fd ff ff       	call   c001eb06 <Vm::realToLinear(unsigned short, unsigned short)>
c001ed4f:	5a                   	pop    edx
c001ed50:	8b 17                	mov    edx,DWORD PTR [edi]
c001ed52:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001ed56:	51                   	push   ecx
c001ed57:	50                   	push   eax
c001ed58:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ed5c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ed60:	57                   	push   edi
c001ed61:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ed64:	83 c4 14             	add    esp,0x14
c001ed67:	57                   	push   edi
c001ed68:	e8 97 48 ff ff       	call   c0013604 <File::close()>
c001ed6d:	c6 05 65 1a 03 c0 00 	mov    BYTE PTR ds:0xc0031a65,0x0
c001ed74:	e8 0d f1 ff ff       	call   c001de86 <unlockScheduler()>
c001ed79:	59                   	pop    ecx
c001ed7a:	ff 35 68 1a 03 c0    	push   DWORD PTR ds:0xc0031a68
c001ed80:	e8 17 f7 ff ff       	call   c001e49c <unblockTask(ThreadControlBlock*)>
c001ed85:	83 c4 10             	add    esp,0x10
c001ed88:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001ed8d:	83 c4 2c             	add    esp,0x2c
c001ed90:	89 e8                	mov    eax,ebp
c001ed92:	5b                   	pop    ebx
c001ed93:	5e                   	pop    esi
c001ed94:	5f                   	pop    edi
c001ed95:	5d                   	pop    ebp
c001ed96:	c3                   	ret    

c001ed97 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001ed97:	57                   	push   edi
c001ed98:	56                   	push   esi
c001ed99:	53                   	push   ebx
c001ed9a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ed9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eda2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001eda6:	83 e8 06             	sub    eax,0x6
c001eda9:	0f b7 c0             	movzx  eax,ax
c001edac:	50                   	push   eax
c001edad:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001edb2:	50                   	push   eax
c001edb3:	e8 4e fd ff ff       	call   c001eb06 <Vm::realToLinear(unsigned short, unsigned short)>
c001edb8:	5a                   	pop    edx
c001edb9:	5e                   	pop    esi
c001edba:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001edbd:	8d 56 fa             	lea    edx,[esi-0x6]
c001edc0:	81 e2 ff ff 00 00    	and    edx,0xffff
c001edc6:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001edc9:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001edcc:	83 c2 02             	add    edx,0x2
c001edcf:	66 89 10             	mov    WORD PTR [eax],dx
c001edd2:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001edd5:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001edd9:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001eddc:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001ede0:	89 d6                	mov    esi,edx
c001ede2:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001ede8:	66 81 e6 ff fd       	and    si,0xfdff
c001eded:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001edf1:	74 07                	je     c001edfa <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001edf3:	89 d6                	mov    esi,edx
c001edf5:	66 81 ce 00 02       	or     si,0x200
c001edfa:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001edfe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ee03:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ee07:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001ee0f:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001ee12:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001ee1a:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001ee1d:	5b                   	pop    ebx
c001ee1e:	5e                   	pop    esi
c001ee1f:	5f                   	pop    edi
c001ee20:	c3                   	ret    

c001ee21 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001ee21:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee26:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee2b:	c1 e0 04             	shl    eax,0x4
c001ee2e:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001ee31:	c3                   	ret    

c001ee32 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001ee32:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee37:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee3c:	c1 e0 04             	shl    eax,0x4
c001ee3f:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001ee43:	c3                   	ret    

c001ee44 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001ee44:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee49:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee4e:	c1 e0 04             	shl    eax,0x4
c001ee51:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001ee54:	c3                   	ret    

c001ee55 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001ee55:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee5a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee5f:	c1 e0 04             	shl    eax,0x4
c001ee62:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee66:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001ee69:	c3                   	ret    

c001ee6a <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001ee6a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee6f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee74:	c1 e0 04             	shl    eax,0x4
c001ee77:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee7b:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001ee7f:	c3                   	ret    

c001ee80 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001ee80:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee85:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee8a:	c1 e0 04             	shl    eax,0x4
c001ee8d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee91:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001ee94:	c3                   	ret    

c001ee95 <Vm::faultHandler(regs*)>:
c001ee95:	55                   	push   ebp
c001ee96:	57                   	push   edi
c001ee97:	56                   	push   esi
c001ee98:	53                   	push   ebx
c001ee99:	83 ec 1c             	sub    esp,0x1c
c001ee9c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001eea0:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001eea3:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001eea6:	0f b7 c1             	movzx  eax,cx
c001eea9:	50                   	push   eax
c001eeaa:	0f b7 c3             	movzx  eax,bx
c001eead:	c1 e3 04             	shl    ebx,0x4
c001eeb0:	50                   	push   eax
c001eeb1:	e8 50 fc ff ff       	call   c001eb06 <Vm::realToLinear(unsigned short, unsigned short)>
c001eeb6:	5a                   	pop    edx
c001eeb7:	89 c5                	mov    ebp,eax
c001eeb9:	5e                   	pop    esi
c001eeba:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001eebe:	50                   	push   eax
c001eebf:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001eec3:	50                   	push   eax
c001eec4:	e8 3d fc ff ff       	call   c001eb06 <Vm::realToLinear(unsigned short, unsigned short)>
c001eec9:	01 cb                	add    ebx,ecx
c001eecb:	89 c6                	mov    esi,eax
c001eecd:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001eed1:	50                   	push   eax
c001eed2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eed6:	50                   	push   eax
c001eed7:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001eedb:	50                   	push   eax
c001eedc:	55                   	push   ebp
c001eedd:	53                   	push   ebx
c001eede:	b3 06                	mov    bl,0x6
c001eee0:	68 a1 c6 02 c0       	push   0xc002c6a1
c001eee5:	e8 00 41 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001eeea:	83 c4 20             	add    esp,0x20
c001eeed:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001eef2:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001eef7:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001eefb:	3c 9d                	cmp    al,0x9d
c001eefd:	0f 84 d7 02 00 00    	je     c001f1da <Vm::faultHandler(regs*)+0x345>
c001ef03:	0f 87 a3 00 00 00    	ja     c001efac <Vm::faultHandler(regs*)+0x117>
c001ef09:	3c 66                	cmp    al,0x66
c001ef0b:	0f 84 15 02 00 00    	je     c001f126 <Vm::faultHandler(regs*)+0x291>
c001ef11:	77 5f                	ja     c001ef72 <Vm::faultHandler(regs*)+0xdd>
c001ef13:	3c 36                	cmp    al,0x36
c001ef15:	0f 84 f1 01 00 00    	je     c001f10c <Vm::faultHandler(regs*)+0x277>
c001ef1b:	77 28                	ja     c001ef45 <Vm::faultHandler(regs*)+0xb0>
c001ef1d:	3c 26                	cmp    al,0x26
c001ef1f:	0f 84 99 01 00 00    	je     c001f0be <Vm::faultHandler(regs*)+0x229>
c001ef25:	3c 2e                	cmp    al,0x2e
c001ef27:	0f 85 3b 07 00 00    	jne    c001f668 <Vm::faultHandler(regs*)+0x7d3>
c001ef2d:	83 ec 0c             	sub    esp,0xc
c001ef30:	31 db                	xor    ebx,ebx
c001ef32:	68 b6 c6 02 c0       	push   0xc002c6b6
c001ef37:	e8 ae 40 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001ef3c:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef3f:	83 c4 10             	add    esp,0x10
c001ef42:	45                   	inc    ebp
c001ef43:	eb b2                	jmp    c001eef7 <Vm::faultHandler(regs*)+0x62>
c001ef45:	3c 64                	cmp    al,0x64
c001ef47:	0f 84 8b 01 00 00    	je     c001f0d8 <Vm::faultHandler(regs*)+0x243>
c001ef4d:	0f 87 9f 01 00 00    	ja     c001f0f2 <Vm::faultHandler(regs*)+0x25d>
c001ef53:	3c 3e                	cmp    al,0x3e
c001ef55:	0f 85 0d 07 00 00    	jne    c001f668 <Vm::faultHandler(regs*)+0x7d3>
c001ef5b:	83 ec 0c             	sub    esp,0xc
c001ef5e:	b3 01                	mov    bl,0x1
c001ef60:	68 ba c6 02 c0       	push   0xc002c6ba
c001ef65:	e8 80 40 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001ef6a:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef6d:	83 c4 10             	add    esp,0x10
c001ef70:	eb d0                	jmp    c001ef42 <Vm::faultHandler(regs*)+0xad>
c001ef72:	3c 6d                	cmp    al,0x6d
c001ef74:	0f 84 af 03 00 00    	je     c001f329 <Vm::faultHandler(regs*)+0x494>
c001ef7a:	77 15                	ja     c001ef91 <Vm::faultHandler(regs*)+0xfc>
c001ef7c:	3c 67                	cmp    al,0x67
c001ef7e:	0f 84 bf 01 00 00    	je     c001f143 <Vm::faultHandler(regs*)+0x2ae>
c001ef84:	3c 6c                	cmp    al,0x6c
c001ef86:	0f 84 3f 03 00 00    	je     c001f2cb <Vm::faultHandler(regs*)+0x436>
c001ef8c:	e9 d7 06 00 00       	jmp    c001f668 <Vm::faultHandler(regs*)+0x7d3>
c001ef91:	3c 6f                	cmp    al,0x6f
c001ef93:	0f 84 a4 04 00 00    	je     c001f43d <Vm::faultHandler(regs*)+0x5a8>
c001ef99:	0f 82 11 04 00 00    	jb     c001f3b0 <Vm::faultHandler(regs*)+0x51b>
c001ef9f:	3c 9c                	cmp    al,0x9c
c001efa1:	0f 84 ba 01 00 00    	je     c001f161 <Vm::faultHandler(regs*)+0x2cc>
c001efa7:	e9 bc 06 00 00       	jmp    c001f668 <Vm::faultHandler(regs*)+0x7d3>
c001efac:	3c ec                	cmp    al,0xec
c001efae:	0f 84 24 06 00 00    	je     c001f5d8 <Vm::faultHandler(regs*)+0x743>
c001efb4:	0f 87 93 00 00 00    	ja     c001f04d <Vm::faultHandler(regs*)+0x1b8>
c001efba:	3c e4                	cmp    al,0xe4
c001efbc:	0f 84 5c 05 00 00    	je     c001f51e <Vm::faultHandler(regs*)+0x689>
c001efc2:	77 6a                	ja     c001f02e <Vm::faultHandler(regs*)+0x199>
c001efc4:	3c cd                	cmp    al,0xcd
c001efc6:	0f 84 7e 02 00 00    	je     c001f24a <Vm::faultHandler(regs*)+0x3b5>
c001efcc:	3c cf                	cmp    al,0xcf
c001efce:	0f 85 94 06 00 00    	jne    c001f668 <Vm::faultHandler(regs*)+0x7d3>
c001efd4:	83 ec 0c             	sub    esp,0xc
c001efd7:	68 fe c6 02 c0       	push   0xc002c6fe
c001efdc:	e8 09 40 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001efe1:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001efe4:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001efe7:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001efeb:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001efee:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001eff2:	0d 00 02 02 00       	or     eax,0x20200
c001eff7:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001effa:	56                   	push   esi
c001effb:	53                   	push   ebx
c001effc:	52                   	push   edx
c001effd:	68 04 c7 02 c0       	push   0xc002c704
c001f002:	e8 e3 3f ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001f007:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001f00b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f011:	66 c1 e8 09          	shr    ax,0x9
c001f015:	83 e0 01             	and    eax,0x1
c001f018:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f01b:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f01e:	83 c0 06             	add    eax,0x6
c001f021:	25 ff ff 00 00       	and    eax,0xffff
c001f026:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f029:	e9 95 02 00 00       	jmp    c001f2c3 <Vm::faultHandler(regs*)+0x42e>
c001f02e:	3c e6                	cmp    al,0xe6
c001f030:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001f034:	0f 84 4e 05 00 00    	je     c001f588 <Vm::faultHandler(regs*)+0x6f3>
c001f03a:	0f 82 0a 05 00 00    	jb     c001f54a <Vm::faultHandler(regs*)+0x6b5>
c001f040:	3c e7                	cmp    al,0xe7
c001f042:	0f 84 69 05 00 00    	je     c001f5b1 <Vm::faultHandler(regs*)+0x71c>
c001f048:	e9 1b 06 00 00       	jmp    c001f668 <Vm::faultHandler(regs*)+0x7d3>
c001f04d:	3c ef                	cmp    al,0xef
c001f04f:	0f 84 e6 05 00 00    	je     c001f63b <Vm::faultHandler(regs*)+0x7a6>
c001f055:	77 37                	ja     c001f08e <Vm::faultHandler(regs*)+0x1f9>
c001f057:	3c ed                	cmp    al,0xed
c001f059:	0f 84 a3 05 00 00    	je     c001f602 <Vm::faultHandler(regs*)+0x76d>
c001f05f:	3c ee                	cmp    al,0xee
c001f061:	0f 85 01 06 00 00    	jne    c001f668 <Vm::faultHandler(regs*)+0x7d3>
c001f067:	52                   	push   edx
c001f068:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f06b:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f06e:	68 9f c7 02 c0       	push   0xc002c79f
c001f073:	e8 72 3f ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001f078:	59                   	pop    ecx
c001f079:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f07d:	5b                   	pop    ebx
c001f07e:	50                   	push   eax
c001f07f:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f083:	50                   	push   eax
c001f084:	e8 2a fa ff ff       	call   c001eab3 <Vm::outbv(unsigned short, unsigned char)>
c001f089:	e9 a5 05 00 00       	jmp    c001f633 <Vm::faultHandler(regs*)+0x79e>
c001f08e:	3c fa                	cmp    al,0xfa
c001f090:	0f 84 f7 01 00 00    	je     c001f28d <Vm::faultHandler(regs*)+0x3f8>
c001f096:	3c fb                	cmp    al,0xfb
c001f098:	0f 84 0a 02 00 00    	je     c001f2a8 <Vm::faultHandler(regs*)+0x413>
c001f09e:	3c f3                	cmp    al,0xf3
c001f0a0:	0f 85 c2 05 00 00    	jne    c001f668 <Vm::faultHandler(regs*)+0x7d3>
c001f0a6:	83 ec 0c             	sub    esp,0xc
c001f0a9:	68 d7 c6 02 c0       	push   0xc002c6d7
c001f0ae:	e8 37 3f ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001f0b3:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0b6:	83 c4 10             	add    esp,0x10
c001f0b9:	e9 84 fe ff ff       	jmp    c001ef42 <Vm::faultHandler(regs*)+0xad>
c001f0be:	83 ec 0c             	sub    esp,0xc
c001f0c1:	b3 02                	mov    bl,0x2
c001f0c3:	68 b2 c6 02 c0       	push   0xc002c6b2
c001f0c8:	e8 1d 3f ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001f0cd:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0d0:	83 c4 10             	add    esp,0x10
c001f0d3:	e9 6a fe ff ff       	jmp    c001ef42 <Vm::faultHandler(regs*)+0xad>
c001f0d8:	83 ec 0c             	sub    esp,0xc
c001f0db:	b3 03                	mov    bl,0x3
c001f0dd:	68 be c6 02 c0       	push   0xc002c6be
c001f0e2:	e8 03 3f ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001f0e7:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0ea:	83 c4 10             	add    esp,0x10
c001f0ed:	e9 50 fe ff ff       	jmp    c001ef42 <Vm::faultHandler(regs*)+0xad>
c001f0f2:	83 ec 0c             	sub    esp,0xc
c001f0f5:	b3 04                	mov    bl,0x4
c001f0f7:	68 c2 c6 02 c0       	push   0xc002c6c2
c001f0fc:	e8 e9 3e ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001f101:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f104:	83 c4 10             	add    esp,0x10
c001f107:	e9 36 fe ff ff       	jmp    c001ef42 <Vm::faultHandler(regs*)+0xad>
c001f10c:	83 ec 0c             	sub    esp,0xc
c001f10f:	b3 05                	mov    bl,0x5
c001f111:	68 c6 c6 02 c0       	push   0xc002c6c6
c001f116:	e8 cf 3e ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001f11b:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f11e:	83 c4 10             	add    esp,0x10
c001f121:	e9 1c fe ff ff       	jmp    c001ef42 <Vm::faultHandler(regs*)+0xad>
c001f126:	83 ec 0c             	sub    esp,0xc
c001f129:	68 ca c6 02 c0       	push   0xc002c6ca
c001f12e:	e8 b7 3e ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001f133:	83 c4 10             	add    esp,0x10
c001f136:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f139:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f13e:	e9 ff fd ff ff       	jmp    c001ef42 <Vm::faultHandler(regs*)+0xad>
c001f143:	50                   	push   eax
c001f144:	50                   	push   eax
c001f145:	6a 01                	push   0x1
c001f147:	68 cf c6 02 c0       	push   0xc002c6cf
c001f14c:	e8 99 3e ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001f151:	83 c4 10             	add    esp,0x10
c001f154:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f157:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001f15c:	e9 e1 fd ff ff       	jmp    c001ef42 <Vm::faultHandler(regs*)+0xad>
c001f161:	83 ec 0c             	sub    esp,0xc
c001f164:	68 dd c6 02 c0       	push   0xc002c6dd
c001f169:	e8 7c 3e ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001f16e:	83 c4 10             	add    esp,0x10
c001f171:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001f174:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f179:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001f17c:	74 2f                	je     c001f1ad <Vm::faultHandler(regs*)+0x318>
c001f17e:	83 ea 04             	sub    edx,0x4
c001f181:	25 ff 0d 00 00       	and    eax,0xdff
c001f186:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f18c:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f18f:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f192:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f198:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f19c:	0f 84 bf 04 00 00    	je     c001f661 <Vm::faultHandler(regs*)+0x7cc>
c001f1a2:	80 cc 02             	or     ah,0x2
c001f1a5:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f1a8:	e9 b4 04 00 00       	jmp    c001f661 <Vm::faultHandler(regs*)+0x7cc>
c001f1ad:	83 ea 02             	sub    edx,0x2
c001f1b0:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f1b6:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f1b9:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f1bd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f1c3:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f1c7:	74 05                	je     c001f1ce <Vm::faultHandler(regs*)+0x339>
c001f1c9:	80 cc 02             	or     ah,0x2
c001f1cc:	eb 03                	jmp    c001f1d1 <Vm::faultHandler(regs*)+0x33c>
c001f1ce:	80 e4 fd             	and    ah,0xfd
c001f1d1:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f1d5:	e9 87 04 00 00       	jmp    c001f661 <Vm::faultHandler(regs*)+0x7cc>
c001f1da:	83 ec 0c             	sub    esp,0xc
c001f1dd:	68 e4 c6 02 c0       	push   0xc002c6e4
c001f1e2:	e8 03 3e ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001f1e7:	83 c4 10             	add    esp,0x10
c001f1ea:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f1ef:	74 28                	je     c001f219 <Vm::faultHandler(regs*)+0x384>
c001f1f1:	8b 06                	mov    eax,DWORD PTR [esi]
c001f1f3:	25 ff 0d 00 00       	and    eax,0xdff
c001f1f8:	0d 00 02 02 00       	or     eax,0x20200
c001f1fd:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f200:	8b 06                	mov    eax,DWORD PTR [esi]
c001f202:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f208:	c1 e8 09             	shr    eax,0x9
c001f20b:	83 e0 01             	and    eax,0x1
c001f20e:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f211:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f214:	83 c0 04             	add    eax,0x4
c001f217:	eb 24                	jmp    c001f23d <Vm::faultHandler(regs*)+0x3a8>
c001f219:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f21c:	0d 00 02 02 00       	or     eax,0x20200
c001f221:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f224:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f227:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f22d:	66 c1 e8 09          	shr    ax,0x9
c001f231:	83 e0 01             	and    eax,0x1
c001f234:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f237:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f23a:	83 c0 02             	add    eax,0x2
c001f23d:	25 ff ff 00 00       	and    eax,0xffff
c001f242:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f245:	e9 17 04 00 00       	jmp    c001f661 <Vm::faultHandler(regs*)+0x7cc>
c001f24a:	53                   	push   ebx
c001f24b:	53                   	push   ebx
c001f24c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f250:	50                   	push   eax
c001f251:	68 ea c6 02 c0       	push   0xc002c6ea
c001f256:	e8 8f 3d ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001f25b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f25f:	83 c4 10             	add    esp,0x10
c001f262:	3c ee                	cmp    al,0xee
c001f264:	75 10                	jne    c001f276 <Vm::faultHandler(regs*)+0x3e1>
c001f266:	83 ec 0c             	sub    esp,0xc
c001f269:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f26c:	e8 fa f8 ff ff       	call   c001eb6b <Vm::mainloop3(unsigned long)>
c001f271:	e9 c0 03 00 00       	jmp    c001f636 <Vm::faultHandler(regs*)+0x7a1>
c001f276:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f27a:	83 ec 0c             	sub    esp,0xc
c001f27d:	53                   	push   ebx
c001f27e:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f282:	53                   	push   ebx
c001f283:	55                   	push   ebp
c001f284:	50                   	push   eax
c001f285:	57                   	push   edi
c001f286:	e8 0c fb ff ff       	call   c001ed97 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f28b:	eb 36                	jmp    c001f2c3 <Vm::faultHandler(regs*)+0x42e>
c001f28d:	83 ec 0c             	sub    esp,0xc
c001f290:	68 f4 c6 02 c0       	push   0xc002c6f4
c001f295:	e8 50 3d ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001f29a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f29f:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f2a3:	e9 8b 03 00 00       	jmp    c001f633 <Vm::faultHandler(regs*)+0x79e>
c001f2a8:	83 ec 0c             	sub    esp,0xc
c001f2ab:	68 f9 c6 02 c0       	push   0xc002c6f9
c001f2b0:	e8 35 3d ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001f2b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f2ba:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f2be:	e9 70 03 00 00       	jmp    c001f633 <Vm::faultHandler(regs*)+0x79e>
c001f2c3:	83 c4 20             	add    esp,0x20
c001f2c6:	e9 99 03 00 00       	jmp    c001f664 <Vm::faultHandler(regs*)+0x7cf>
c001f2cb:	83 ec 0c             	sub    esp,0xc
c001f2ce:	68 37 c7 02 c0       	push   0xc002c737
c001f2d3:	e8 12 3d ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001f2d8:	83 c4 10             	add    esp,0x10
c001f2db:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f2de:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f2e3:	74 0d                	je     c001f2f2 <Vm::faultHandler(regs*)+0x45d>
c001f2e5:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f2ec:	0f 87 9e 01 00 00    	ja     c001f490 <Vm::faultHandler(regs*)+0x5fb>
c001f2f2:	83 ec 0c             	sub    esp,0xc
c001f2f5:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f2f9:	0f b7 db             	movzx  ebx,bx
c001f2fc:	50                   	push   eax
c001f2fd:	e8 9e f7 ff ff       	call   c001eaa0 <Vm::inbv(unsigned short)>
c001f302:	83 c4 0c             	add    esp,0xc
c001f305:	0f b6 c0             	movzx  eax,al
c001f308:	50                   	push   eax
c001f309:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001f30d:	50                   	push   eax
c001f30e:	53                   	push   ebx
c001f30f:	e8 41 fb ff ff       	call   c001ee55 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f314:	83 c4 10             	add    esp,0x10
c001f317:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f31a:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f31e:	74 03                	je     c001f323 <Vm::faultHandler(regs*)+0x48e>
c001f320:	48                   	dec    eax
c001f321:	eb 01                	jmp    c001f324 <Vm::faultHandler(regs*)+0x48f>
c001f323:	40                   	inc    eax
c001f324:	0f b7 c0             	movzx  eax,ax
c001f327:	eb 7f                	jmp    c001f3a8 <Vm::faultHandler(regs*)+0x513>
c001f329:	83 ec 0c             	sub    esp,0xc
c001f32c:	68 69 c7 02 c0       	push   0xc002c769
c001f331:	e8 b4 3c ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001f336:	83 c4 10             	add    esp,0x10
c001f339:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f33c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f341:	74 0d                	je     c001f350 <Vm::faultHandler(regs*)+0x4bb>
c001f343:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f34a:	0f 87 40 01 00 00    	ja     c001f490 <Vm::faultHandler(regs*)+0x5fb>
c001f350:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f353:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001f357:	0f b7 db             	movzx  ebx,bx
c001f35a:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f35f:	74 20                	je     c001f381 <Vm::faultHandler(regs*)+0x4ec>
c001f361:	ed                   	in     eax,dx
c001f362:	51                   	push   ecx
c001f363:	50                   	push   eax
c001f364:	56                   	push   esi
c001f365:	53                   	push   ebx
c001f366:	e8 15 fb ff ff       	call   c001ee80 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f36b:	83 c4 10             	add    esp,0x10
c001f36e:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f371:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f375:	74 05                	je     c001f37c <Vm::faultHandler(regs*)+0x4e7>
c001f377:	83 e8 04             	sub    eax,0x4
c001f37a:	eb 27                	jmp    c001f3a3 <Vm::faultHandler(regs*)+0x50e>
c001f37c:	83 c0 04             	add    eax,0x4
c001f37f:	eb 22                	jmp    c001f3a3 <Vm::faultHandler(regs*)+0x50e>
c001f381:	66 ed                	in     ax,dx
c001f383:	0f b7 c0             	movzx  eax,ax
c001f386:	52                   	push   edx
c001f387:	50                   	push   eax
c001f388:	56                   	push   esi
c001f389:	53                   	push   ebx
c001f38a:	e8 db fa ff ff       	call   c001ee6a <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f38f:	83 c4 10             	add    esp,0x10
c001f392:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f395:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f399:	74 05                	je     c001f3a0 <Vm::faultHandler(regs*)+0x50b>
c001f39b:	83 e8 02             	sub    eax,0x2
c001f39e:	eb 03                	jmp    c001f3a3 <Vm::faultHandler(regs*)+0x50e>
c001f3a0:	83 c0 02             	add    eax,0x2
c001f3a3:	25 ff ff 00 00       	and    eax,0xffff
c001f3a8:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f3ab:	e9 b1 02 00 00       	jmp    c001f661 <Vm::faultHandler(regs*)+0x7cc>
c001f3b0:	83 ec 0c             	sub    esp,0xc
c001f3b3:	4b                   	dec    ebx
c001f3b4:	68 6f c7 02 c0       	push   0xc002c76f
c001f3b9:	e8 2c 3c ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001f3be:	83 c4 10             	add    esp,0x10
c001f3c1:	80 fb 05             	cmp    bl,0x5
c001f3c4:	77 0a                	ja     c001f3d0 <Vm::faultHandler(regs*)+0x53b>
c001f3c6:	0f b6 db             	movzx  ebx,bl
c001f3c9:	ff 24 9d e0 c7 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3820]
c001f3d0:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f3d4:	eb 1b                	jmp    c001f3f1 <Vm::faultHandler(regs*)+0x55c>
c001f3d6:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f3da:	eb 15                	jmp    c001f3f1 <Vm::faultHandler(regs*)+0x55c>
c001f3dc:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f3e0:	eb 0f                	jmp    c001f3f1 <Vm::faultHandler(regs*)+0x55c>
c001f3e2:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f3e6:	eb 09                	jmp    c001f3f1 <Vm::faultHandler(regs*)+0x55c>
c001f3e8:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f3eb:	eb 04                	jmp    c001f3f1 <Vm::faultHandler(regs*)+0x55c>
c001f3ed:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f3f1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f3f6:	74 0d                	je     c001f405 <Vm::faultHandler(regs*)+0x570>
c001f3f8:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001f3ff:	0f 87 8b 00 00 00    	ja     c001f490 <Vm::faultHandler(regs*)+0x5fb>
c001f405:	53                   	push   ebx
c001f406:	53                   	push   ebx
c001f407:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001f40b:	52                   	push   edx
c001f40c:	50                   	push   eax
c001f40d:	e8 0f fa ff ff       	call   c001ee21 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f412:	5e                   	pop    esi
c001f413:	0f b6 c0             	movzx  eax,al
c001f416:	5d                   	pop    ebp
c001f417:	50                   	push   eax
c001f418:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f41c:	50                   	push   eax
c001f41d:	e8 91 f6 ff ff       	call   c001eab3 <Vm::outbv(unsigned short, unsigned char)>
c001f422:	83 c4 10             	add    esp,0x10
c001f425:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001f428:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f42c:	74 03                	je     c001f431 <Vm::faultHandler(regs*)+0x59c>
c001f42e:	48                   	dec    eax
c001f42f:	eb 01                	jmp    c001f432 <Vm::faultHandler(regs*)+0x59d>
c001f431:	40                   	inc    eax
c001f432:	0f b7 c0             	movzx  eax,ax
c001f435:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001f438:	e9 24 02 00 00       	jmp    c001f661 <Vm::faultHandler(regs*)+0x7cc>
c001f43d:	83 ec 0c             	sub    esp,0xc
c001f440:	4b                   	dec    ebx
c001f441:	68 6f c7 02 c0       	push   0xc002c76f
c001f446:	e8 9f 3b ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001f44b:	83 c4 10             	add    esp,0x10
c001f44e:	80 fb 05             	cmp    bl,0x5
c001f451:	77 0a                	ja     c001f45d <Vm::faultHandler(regs*)+0x5c8>
c001f453:	0f b6 db             	movzx  ebx,bl
c001f456:	ff 24 9d f8 c7 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3808]
c001f45d:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f461:	eb 1b                	jmp    c001f47e <Vm::faultHandler(regs*)+0x5e9>
c001f463:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f467:	eb 15                	jmp    c001f47e <Vm::faultHandler(regs*)+0x5e9>
c001f469:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f46d:	eb 0f                	jmp    c001f47e <Vm::faultHandler(regs*)+0x5e9>
c001f46f:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f473:	eb 09                	jmp    c001f47e <Vm::faultHandler(regs*)+0x5e9>
c001f475:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f478:	eb 04                	jmp    c001f47e <Vm::faultHandler(regs*)+0x5e9>
c001f47a:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f47e:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001f481:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f486:	74 39                	je     c001f4c1 <Vm::faultHandler(regs*)+0x62c>
c001f488:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001f48e:	76 31                	jbe    c001f4c1 <Vm::faultHandler(regs*)+0x62c>
c001f490:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f494:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f498:	51                   	push   ecx
c001f499:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f49d:	51                   	push   ecx
c001f49e:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f4a2:	51                   	push   ecx
c001f4a3:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f4a7:	51                   	push   ecx
c001f4a8:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f4ac:	52                   	push   edx
c001f4ad:	50                   	push   eax
c001f4ae:	50                   	push   eax
c001f4af:	68 3c c7 02 c0       	push   0xc002c73c
c001f4b4:	e8 31 3b ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001f4b9:	83 c4 20             	add    esp,0x20
c001f4bc:	e9 fb 01 00 00       	jmp    c001f6bc <Vm::faultHandler(regs*)+0x827>
c001f4c1:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001f4c4:	0f b7 d3             	movzx  edx,bx
c001f4c7:	81 e6 00 04 00 00    	and    esi,0x400
c001f4cd:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001f4d0:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f4d5:	74 1d                	je     c001f4f4 <Vm::faultHandler(regs*)+0x65f>
c001f4d7:	51                   	push   ecx
c001f4d8:	51                   	push   ecx
c001f4d9:	52                   	push   edx
c001f4da:	50                   	push   eax
c001f4db:	e8 64 f9 ff ff       	call   c001ee44 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f4e0:	83 c4 10             	add    esp,0x10
c001f4e3:	89 ea                	mov    edx,ebp
c001f4e5:	ef                   	out    dx,eax
c001f4e6:	85 f6                	test   esi,esi
c001f4e8:	74 05                	je     c001f4ef <Vm::faultHandler(regs*)+0x65a>
c001f4ea:	83 eb 04             	sub    ebx,0x4
c001f4ed:	eb 21                	jmp    c001f510 <Vm::faultHandler(regs*)+0x67b>
c001f4ef:	83 c3 04             	add    ebx,0x4
c001f4f2:	eb 1c                	jmp    c001f510 <Vm::faultHandler(regs*)+0x67b>
c001f4f4:	51                   	push   ecx
c001f4f5:	51                   	push   ecx
c001f4f6:	52                   	push   edx
c001f4f7:	50                   	push   eax
c001f4f8:	e8 35 f9 ff ff       	call   c001ee32 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f4fd:	83 c4 10             	add    esp,0x10
c001f500:	89 ea                	mov    edx,ebp
c001f502:	66 ef                	out    dx,ax
c001f504:	85 f6                	test   esi,esi
c001f506:	74 05                	je     c001f50d <Vm::faultHandler(regs*)+0x678>
c001f508:	83 eb 02             	sub    ebx,0x2
c001f50b:	eb 03                	jmp    c001f510 <Vm::faultHandler(regs*)+0x67b>
c001f50d:	83 c3 02             	add    ebx,0x2
c001f510:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001f516:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001f519:	e9 43 01 00 00       	jmp    c001f661 <Vm::faultHandler(regs*)+0x7cc>
c001f51e:	53                   	push   ebx
c001f51f:	53                   	push   ebx
c001f520:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f524:	50                   	push   eax
c001f525:	68 75 c7 02 c0       	push   0xc002c775
c001f52a:	e8 bb 3a ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001f52f:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f536:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f53a:	89 04 24             	mov    DWORD PTR [esp],eax
c001f53d:	e8 5e f5 ff ff       	call   c001eaa0 <Vm::inbv(unsigned short)>
c001f542:	0f b6 c0             	movzx  eax,al
c001f545:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f548:	eb 5e                	jmp    c001f5a8 <Vm::faultHandler(regs*)+0x713>
c001f54a:	51                   	push   ecx
c001f54b:	51                   	push   ecx
c001f54c:	53                   	push   ebx
c001f54d:	68 7b c7 02 c0       	push   0xc002c77b
c001f552:	e8 93 3a ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001f557:	83 c4 10             	add    esp,0x10
c001f55a:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f55f:	74 07                	je     c001f568 <Vm::faultHandler(regs*)+0x6d3>
c001f561:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f565:	ed                   	in     eax,dx
c001f566:	eb 14                	jmp    c001f57c <Vm::faultHandler(regs*)+0x6e7>
c001f568:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001f56b:	66 31 db             	xor    bx,bx
c001f56e:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001f571:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f575:	66 ed                	in     ax,dx
c001f577:	0f b7 c0             	movzx  eax,ax
c001f57a:	09 d8                	or     eax,ebx
c001f57c:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f57f:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f583:	e9 dc 00 00 00       	jmp    c001f664 <Vm::faultHandler(regs*)+0x7cf>
c001f588:	50                   	push   eax
c001f589:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f58c:	53                   	push   ebx
c001f58d:	68 81 c7 02 c0       	push   0xc002c781
c001f592:	e8 53 3a ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001f597:	58                   	pop    eax
c001f598:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f59c:	5a                   	pop    edx
c001f59d:	50                   	push   eax
c001f59e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f5a2:	50                   	push   eax
c001f5a3:	e8 0b f5 ff ff       	call   c001eab3 <Vm::outbv(unsigned short, unsigned char)>
c001f5a8:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f5ac:	e9 85 00 00 00       	jmp    c001f636 <Vm::faultHandler(regs*)+0x7a1>
c001f5b1:	50                   	push   eax
c001f5b2:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f5b5:	53                   	push   ebx
c001f5b6:	68 8a c7 02 c0       	push   0xc002c78a
c001f5bb:	e8 2a 3a ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001f5c0:	83 c4 10             	add    esp,0x10
c001f5c3:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f5c7:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f5cc:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f5cf:	74 03                	je     c001f5d4 <Vm::faultHandler(regs*)+0x73f>
c001f5d1:	ef                   	out    dx,eax
c001f5d2:	eb ab                	jmp    c001f57f <Vm::faultHandler(regs*)+0x6ea>
c001f5d4:	66 ef                	out    dx,ax
c001f5d6:	eb a7                	jmp    c001f57f <Vm::faultHandler(regs*)+0x6ea>
c001f5d8:	55                   	push   ebp
c001f5d9:	55                   	push   ebp
c001f5da:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f5dd:	68 93 c7 02 c0       	push   0xc002c793
c001f5e2:	e8 03 3a ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001f5e7:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f5ee:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f5f2:	89 04 24             	mov    DWORD PTR [esp],eax
c001f5f5:	e8 a6 f4 ff ff       	call   c001eaa0 <Vm::inbv(unsigned short)>
c001f5fa:	0f b6 c0             	movzx  eax,al
c001f5fd:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f600:	eb 31                	jmp    c001f633 <Vm::faultHandler(regs*)+0x79e>
c001f602:	56                   	push   esi
c001f603:	56                   	push   esi
c001f604:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f607:	68 99 c7 02 c0       	push   0xc002c799
c001f60c:	e8 d9 39 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001f611:	83 c4 10             	add    esp,0x10
c001f614:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f617:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f61c:	74 03                	je     c001f621 <Vm::faultHandler(regs*)+0x78c>
c001f61e:	ed                   	in     eax,dx
c001f61f:	eb 0d                	jmp    c001f62e <Vm::faultHandler(regs*)+0x799>
c001f621:	66 ed                	in     ax,dx
c001f623:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001f626:	0f b7 c0             	movzx  eax,ax
c001f629:	66 31 d2             	xor    dx,dx
c001f62c:	09 d0                	or     eax,edx
c001f62e:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f631:	eb 2e                	jmp    c001f661 <Vm::faultHandler(regs*)+0x7cc>
c001f633:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f636:	83 c4 10             	add    esp,0x10
c001f639:	eb 29                	jmp    c001f664 <Vm::faultHandler(regs*)+0x7cf>
c001f63b:	50                   	push   eax
c001f63c:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f63f:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f642:	68 a8 c7 02 c0       	push   0xc002c7a8
c001f647:	e8 9e 39 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001f64c:	83 c4 10             	add    esp,0x10
c001f64f:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f652:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f657:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f65a:	74 03                	je     c001f65f <Vm::faultHandler(regs*)+0x7ca>
c001f65c:	ef                   	out    dx,eax
c001f65d:	eb 02                	jmp    c001f661 <Vm::faultHandler(regs*)+0x7cc>
c001f65f:	66 ef                	out    dx,ax
c001f661:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f664:	b0 01                	mov    al,0x1
c001f666:	eb 56                	jmp    c001f6be <Vm::faultHandler(regs*)+0x829>
c001f668:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f66c:	51                   	push   ecx
c001f66d:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f671:	51                   	push   ecx
c001f672:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f676:	51                   	push   ecx
c001f677:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f67b:	51                   	push   ecx
c001f67c:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f680:	52                   	push   edx
c001f681:	50                   	push   eax
c001f682:	50                   	push   eax
c001f683:	68 b1 c7 02 c0       	push   0xc002c7b1
c001f688:	e8 5d 39 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c001f68d:	83 c4 20             	add    esp,0x20
c001f690:	83 ec 0c             	sub    esp,0xc
c001f693:	6a 60                	push   0x60
c001f695:	e8 06 f4 ff ff       	call   c001eaa0 <Vm::inbv(unsigned short)>
c001f69a:	83 c4 10             	add    esp,0x10
c001f69d:	3c 1c                	cmp    al,0x1c
c001f69f:	74 04                	je     c001f6a5 <Vm::faultHandler(regs*)+0x810>
c001f6a1:	3c 5a                	cmp    al,0x5a
c001f6a3:	75 eb                	jne    c001f690 <Vm::faultHandler(regs*)+0x7fb>
c001f6a5:	3c 1c                	cmp    al,0x1c
c001f6a7:	74 04                	je     c001f6ad <Vm::faultHandler(regs*)+0x818>
c001f6a9:	3c 5a                	cmp    al,0x5a
c001f6ab:	75 0f                	jne    c001f6bc <Vm::faultHandler(regs*)+0x827>
c001f6ad:	83 ec 0c             	sub    esp,0xc
c001f6b0:	6a 60                	push   0x60
c001f6b2:	e8 e9 f3 ff ff       	call   c001eaa0 <Vm::inbv(unsigned short)>
c001f6b7:	83 c4 10             	add    esp,0x10
c001f6ba:	eb e9                	jmp    c001f6a5 <Vm::faultHandler(regs*)+0x810>
c001f6bc:	31 c0                	xor    eax,eax
c001f6be:	83 c4 1c             	add    esp,0x1c
c001f6c1:	5b                   	pop    ebx
c001f6c2:	5e                   	pop    esi
c001f6c3:	5f                   	pop    edi
c001f6c4:	5d                   	pop    ebp
c001f6c5:	c3                   	ret    

c001f6c6 <Vm::fpuInternalTo32(unsigned long long)>:
c001f6c6:	57                   	push   edi
c001f6c7:	56                   	push   esi
c001f6c8:	53                   	push   ebx
c001f6c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f6cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6d1:	89 d6                	mov    esi,edx
c001f6d3:	89 d7                	mov    edi,edx
c001f6d5:	89 c1                	mov    ecx,eax
c001f6d7:	c1 ef 14             	shr    edi,0x14
c001f6da:	89 d3                	mov    ebx,edx
c001f6dc:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f6e2:	31 d2                	xor    edx,edx
c001f6e4:	89 f8                	mov    eax,edi
c001f6e6:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f6ec:	bf ff 00 00 00       	mov    edi,0xff
c001f6f1:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f6f6:	83 d2 ff             	adc    edx,0xffffffff
c001f6f9:	39 c7                	cmp    edi,eax
c001f6fb:	bf 00 00 00 00       	mov    edi,0x0
c001f700:	19 d7                	sbb    edi,edx
c001f702:	72 15                	jb     c001f719 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f704:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f708:	c1 e0 17             	shl    eax,0x17
c001f70b:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f711:	09 f1                	or     ecx,esi
c001f713:	09 c1                	or     ecx,eax
c001f715:	89 cf                	mov    edi,ecx
c001f717:	eb 02                	jmp    c001f71b <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f719:	31 ff                	xor    edi,edi
c001f71b:	89 f8                	mov    eax,edi
c001f71d:	5b                   	pop    ebx
c001f71e:	5e                   	pop    esi
c001f71f:	5f                   	pop    edi
c001f720:	c3                   	ret    

c001f721 <Vm::fpuInternalTo64(unsigned long long)>:
c001f721:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f725:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f729:	c3                   	ret    

c001f72a <Vm::fpu32ToInternal(unsigned int)>:
c001f72a:	57                   	push   edi
c001f72b:	31 ff                	xor    edi,edi
c001f72d:	56                   	push   esi
c001f72e:	53                   	push   ebx
c001f72f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f733:	89 cb                	mov    ebx,ecx
c001f735:	89 ce                	mov    esi,ecx
c001f737:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f73d:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f743:	c1 e9 17             	shr    ecx,0x17
c001f746:	89 f0                	mov    eax,esi
c001f748:	0f b6 d1             	movzx  edx,cl
c001f74b:	81 c2 80 03 00 00    	add    edx,0x380
c001f751:	89 d1                	mov    ecx,edx
c001f753:	89 fa                	mov    edx,edi
c001f755:	c1 e1 14             	shl    ecx,0x14
c001f758:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f75c:	c1 e0 1d             	shl    eax,0x1d
c001f75f:	89 d7                	mov    edi,edx
c001f761:	89 c6                	mov    esi,eax
c001f763:	89 ca                	mov    edx,ecx
c001f765:	89 f0                	mov    eax,esi
c001f767:	09 fa                	or     edx,edi
c001f769:	09 da                	or     edx,ebx
c001f76b:	5b                   	pop    ebx
c001f76c:	5e                   	pop    esi
c001f76d:	5f                   	pop    edi
c001f76e:	c3                   	ret    

c001f76f <Vm::fpu64ToInternal(unsigned long long)>:
c001f76f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f773:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f777:	c3                   	ret    

c001f778 <Vm::fpuFloatToLong(unsigned long long)>:
c001f778:	57                   	push   edi
c001f779:	31 c0                	xor    eax,eax
c001f77b:	56                   	push   esi
c001f77c:	31 d2                	xor    edx,edx
c001f77e:	53                   	push   ebx
c001f77f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f783:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f787:	89 d9                	mov    ecx,ebx
c001f789:	c1 e9 14             	shr    ecx,0x14
c001f78c:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f792:	89 cf                	mov    edi,ecx
c001f794:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f79a:	78 33                	js     c001f7cf <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f79c:	89 d9                	mov    ecx,ebx
c001f79e:	89 f0                	mov    eax,esi
c001f7a0:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f7a6:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f7ac:	89 ca                	mov    edx,ecx
c001f7ae:	b9 34 00 00 00       	mov    ecx,0x34
c001f7b3:	29 f9                	sub    ecx,edi
c001f7b5:	0f ad d0             	shrd   eax,edx,cl
c001f7b8:	d3 fa                	sar    edx,cl
c001f7ba:	f6 c1 20             	test   cl,0x20
c001f7bd:	74 05                	je     c001f7c4 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f7bf:	89 d0                	mov    eax,edx
c001f7c1:	c1 fa 1f             	sar    edx,0x1f
c001f7c4:	85 db                	test   ebx,ebx
c001f7c6:	79 07                	jns    c001f7cf <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f7c8:	f7 d8                	neg    eax
c001f7ca:	83 d2 00             	adc    edx,0x0
c001f7cd:	f7 da                	neg    edx
c001f7cf:	5b                   	pop    ebx
c001f7d0:	5e                   	pop    esi
c001f7d1:	5f                   	pop    edi
c001f7d2:	c3                   	ret    

c001f7d3 <Vm::fpuULongToFloat(unsigned long long)>:
c001f7d3:	57                   	push   edi
c001f7d4:	31 c9                	xor    ecx,ecx
c001f7d6:	56                   	push   esi
c001f7d7:	53                   	push   ebx
c001f7d8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f7dc:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f7e0:	0f ba e7 14          	bt     edi,0x14
c001f7e4:	72 07                	jb     c001f7ed <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f7e6:	01 f6                	add    esi,esi
c001f7e8:	11 ff                	adc    edi,edi
c001f7ea:	41                   	inc    ecx
c001f7eb:	eb f3                	jmp    c001f7e0 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f7ed:	89 fa                	mov    edx,edi
c001f7ef:	89 f0                	mov    eax,esi
c001f7f1:	bb 33 04 00 00       	mov    ebx,0x433
c001f7f6:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f7fc:	29 cb                	sub    ebx,ecx
c001f7fe:	89 d9                	mov    ecx,ebx
c001f800:	5b                   	pop    ebx
c001f801:	c1 e1 14             	shl    ecx,0x14
c001f804:	5e                   	pop    esi
c001f805:	09 ca                	or     edx,ecx
c001f807:	5f                   	pop    edi
c001f808:	c3                   	ret    

c001f809 <Vm::fpuLongToFloat(long long)>:
c001f809:	56                   	push   esi
c001f80a:	31 c0                	xor    eax,eax
c001f80c:	53                   	push   ebx
c001f80d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f811:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f815:	39 c8                	cmp    eax,ecx
c001f817:	19 d8                	sbb    eax,ebx
c001f819:	7d 04                	jge    c001f81f <Vm::fpuLongToFloat(long long)+0x16>
c001f81b:	31 f6                	xor    esi,esi
c001f81d:	eb 0c                	jmp    c001f82b <Vm::fpuLongToFloat(long long)+0x22>
c001f81f:	f7 d9                	neg    ecx
c001f821:	be 01 00 00 00       	mov    esi,0x1
c001f826:	83 d3 00             	adc    ebx,0x0
c001f829:	f7 db                	neg    ebx
c001f82b:	31 c0                	xor    eax,eax
c001f82d:	0f ba e3 14          	bt     ebx,0x14
c001f831:	72 07                	jb     c001f83a <Vm::fpuLongToFloat(long long)+0x31>
c001f833:	01 c9                	add    ecx,ecx
c001f835:	11 db                	adc    ebx,ebx
c001f837:	40                   	inc    eax
c001f838:	eb f3                	jmp    c001f82d <Vm::fpuLongToFloat(long long)+0x24>
c001f83a:	ba 33 04 00 00       	mov    edx,0x433
c001f83f:	29 c2                	sub    edx,eax
c001f841:	89 c8                	mov    eax,ecx
c001f843:	c1 e2 14             	shl    edx,0x14
c001f846:	89 d9                	mov    ecx,ebx
c001f848:	89 f3                	mov    ebx,esi
c001f84a:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f850:	09 ca                	or     edx,ecx
c001f852:	84 db                	test   bl,bl
c001f854:	74 06                	je     c001f85c <Vm::fpuLongToFloat(long long)+0x53>
c001f856:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f85c:	5b                   	pop    ebx
c001f85d:	5e                   	pop    esi
c001f85e:	c3                   	ret    

c001f85f <Vm::fpuGet0()>:
c001f85f:	31 c0                	xor    eax,eax
c001f861:	31 d2                	xor    edx,edx
c001f863:	c3                   	ret    

c001f864 <Vm::fpuGet1()>:
c001f864:	b8 01 00 00 00       	mov    eax,0x1
c001f869:	31 d2                	xor    edx,edx
c001f86b:	c3                   	ret    

c001f86c <Vm::fpuGetPi()>:
c001f86c:	b8 03 00 00 00       	mov    eax,0x3
c001f871:	31 d2                	xor    edx,edx
c001f873:	c3                   	ret    

c001f874 <Vm::fpuGetLog2E()>:
c001f874:	83 ec 18             	sub    esp,0x18
c001f877:	68 10 c8 02 c0       	push   0xc002c810
c001f87c:	e8 0e ae ff ff       	call   c001a68f <Krnl::panic(char const*)>
c001f881:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f886:	31 d2                	xor    edx,edx
c001f888:	83 c4 1c             	add    esp,0x1c
c001f88b:	c3                   	ret    

c001f88c <Vm::fpuGetLogE2()>:
c001f88c:	83 ec 18             	sub    esp,0x18
c001f88f:	68 1c c8 02 c0       	push   0xc002c81c
c001f894:	e8 f6 ad ff ff       	call   c001a68f <Krnl::panic(char const*)>
c001f899:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f89e:	31 d2                	xor    edx,edx
c001f8a0:	83 c4 1c             	add    esp,0x1c
c001f8a3:	c3                   	ret    

c001f8a4 <Vm::fpuGetLog210()>:
c001f8a4:	83 ec 18             	sub    esp,0x18
c001f8a7:	68 28 c8 02 c0       	push   0xc002c828
c001f8ac:	e8 de ad ff ff       	call   c001a68f <Krnl::panic(char const*)>
c001f8b1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f8b6:	31 d2                	xor    edx,edx
c001f8b8:	83 c4 1c             	add    esp,0x1c
c001f8bb:	c3                   	ret    

c001f8bc <Vm::fpuGetLog102()>:
c001f8bc:	83 ec 18             	sub    esp,0x18
c001f8bf:	68 35 c8 02 c0       	push   0xc002c835
c001f8c4:	e8 c6 ad ff ff       	call   c001a68f <Krnl::panic(char const*)>
c001f8c9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f8ce:	31 d2                	xor    edx,edx
c001f8d0:	83 c4 1c             	add    esp,0x1c
c001f8d3:	c3                   	ret    

c001f8d4 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f8d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f8d8:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f8dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f8e0:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f8e4:	0f 92 c0             	setb   al
c001f8e7:	c3                   	ret    

c001f8e8 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f8e8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f8ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8f0:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f8f4:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f8f8:	09 c2                	or     edx,eax
c001f8fa:	0f 94 c0             	sete   al
c001f8fd:	c3                   	ret    

c001f8fe <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f8fe:	57                   	push   edi
c001f8ff:	56                   	push   esi
c001f900:	53                   	push   ebx
c001f901:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f905:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f909:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f90d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f911:	57                   	push   edi
c001f912:	56                   	push   esi
c001f913:	53                   	push   ebx
c001f914:	51                   	push   ecx
c001f915:	e8 ce ff ff ff       	call   c001f8e8 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f91a:	83 c4 10             	add    esp,0x10
c001f91d:	88 c2                	mov    dl,al
c001f91f:	31 c0                	xor    eax,eax
c001f921:	84 d2                	test   dl,dl
c001f923:	75 0c                	jne    c001f931 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f925:	57                   	push   edi
c001f926:	56                   	push   esi
c001f927:	53                   	push   ebx
c001f928:	51                   	push   ecx
c001f929:	e8 a6 ff ff ff       	call   c001f8d4 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f92e:	83 c4 10             	add    esp,0x10
c001f931:	83 e0 01             	and    eax,0x1
c001f934:	5b                   	pop    ebx
c001f935:	88 c1                	mov    cl,al
c001f937:	83 e2 01             	and    edx,0x1
c001f93a:	a0 a1 1a 03 c0       	mov    al,ds:0xc0031aa1
c001f93f:	c1 e2 06             	shl    edx,0x6
c001f942:	83 e0 ba             	and    eax,0xffffffba
c001f945:	5e                   	pop    esi
c001f946:	09 c8                	or     eax,ecx
c001f948:	5f                   	pop    edi
c001f949:	09 d0                	or     eax,edx
c001f94b:	a2 a1 1a 03 c0       	mov    ds:0xc0031aa1,al
c001f950:	c3                   	ret    

c001f951 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f951:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f955:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f959:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f95d:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f961:	c3                   	ret    

c001f962 <Vm::fpuAbs(unsigned long long)>:
c001f962:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f966:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f96a:	c3                   	ret    

c001f96b <Vm::fpuChs(unsigned long long)>:
c001f96b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f96f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f973:	f7 d8                	neg    eax
c001f975:	83 d2 00             	adc    edx,0x0
c001f978:	f7 da                	neg    edx
c001f97a:	c3                   	ret    

c001f97b <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f97b:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f97f:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f984:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f988:	eb c7                	jmp    c001f951 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f98a <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f98a:	53                   	push   ebx
c001f98b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f98f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f993:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f997:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f99b:	0f af ca             	imul   ecx,edx
c001f99e:	0f af d8             	imul   ebx,eax
c001f9a1:	f7 e2                	mul    edx
c001f9a3:	01 d9                	add    ecx,ebx
c001f9a5:	5b                   	pop    ebx
c001f9a6:	01 ca                	add    edx,ecx
c001f9a8:	c3                   	ret    

c001f9a9 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f9a9:	83 ec 0c             	sub    esp,0xc
c001f9ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9bc:	e8 9b 70 00 00       	call   c0026a5c <__udivdi3>
c001f9c1:	83 c4 1c             	add    esp,0x1c
c001f9c4:	c3                   	ret    

c001f9c5 <Vm::fpuSquare(unsigned long long)>:
c001f9c5:	50                   	push   eax
c001f9c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f9ca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f9ce:	52                   	push   edx
c001f9cf:	50                   	push   eax
c001f9d0:	52                   	push   edx
c001f9d1:	50                   	push   eax
c001f9d2:	e8 b3 ff ff ff       	call   c001f98a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f9d7:	83 c4 14             	add    esp,0x14
c001f9da:	c3                   	ret    

c001f9db <Vm::fpuGetReg(int)>:
c001f9db:	83 ec 0c             	sub    esp,0xc
c001f9de:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f9e3:	76 10                	jbe    c001f9f5 <Vm::fpuGetReg(int)+0x1a>
c001f9e5:	83 ec 0c             	sub    esp,0xc
c001f9e8:	68 42 c8 02 c0       	push   0xc002c842
c001f9ed:	e8 9d ac ff ff       	call   c001a68f <Krnl::panic(char const*)>
c001f9f2:	83 c4 10             	add    esp,0x10
c001f9f5:	a0 a1 1a 03 c0       	mov    al,ds:0xc0031aa1
c001f9fa:	b9 08 00 00 00       	mov    ecx,0x8
c001f9ff:	c0 e8 03             	shr    al,0x3
c001fa02:	83 e0 07             	and    eax,0x7
c001fa05:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001fa09:	99                   	cdq    
c001fa0a:	f7 f9                	idiv   ecx
c001fa0c:	8b 04 d5 a4 1a 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffce55c]
c001fa13:	8b 14 d5 a8 1a 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffce558]
c001fa1a:	83 c4 0c             	add    esp,0xc
c001fa1d:	c3                   	ret    

c001fa1e <Vm::fpuSetReg(int, unsigned long long)>:
c001fa1e:	57                   	push   edi
c001fa1f:	56                   	push   esi
c001fa20:	52                   	push   edx
c001fa21:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001fa25:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001fa29:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001fa2e:	76 10                	jbe    c001fa40 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001fa30:	83 ec 0c             	sub    esp,0xc
c001fa33:	68 55 c8 02 c0       	push   0xc002c855
c001fa38:	e8 52 ac ff ff       	call   c001a68f <Krnl::panic(char const*)>
c001fa3d:	83 c4 10             	add    esp,0x10
c001fa40:	a0 a1 1a 03 c0       	mov    al,ds:0xc0031aa1
c001fa45:	b9 08 00 00 00       	mov    ecx,0x8
c001fa4a:	c0 e8 03             	shr    al,0x3
c001fa4d:	83 e0 07             	and    eax,0x7
c001fa50:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001fa54:	99                   	cdq    
c001fa55:	f7 f9                	idiv   ecx
c001fa57:	89 34 d5 a4 1a 03 c0 	mov    DWORD PTR [edx*8-0x3ffce55c],esi
c001fa5e:	89 3c d5 a8 1a 03 c0 	mov    DWORD PTR [edx*8-0x3ffce558],edi
c001fa65:	58                   	pop    eax
c001fa66:	5e                   	pop    esi
c001fa67:	5f                   	pop    edi
c001fa68:	c3                   	ret    

c001fa69 <Vm::fpuPush(unsigned long long)>:
c001fa69:	a0 a1 1a 03 c0       	mov    al,ds:0xc0031aa1
c001fa6e:	c0 e8 03             	shr    al,0x3
c001fa71:	83 e0 07             	and    eax,0x7
c001fa74:	83 c0 07             	add    eax,0x7
c001fa77:	88 c2                	mov    dl,al
c001fa79:	83 e0 07             	and    eax,0x7
c001fa7c:	83 e2 07             	and    edx,0x7
c001fa7f:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001fa86:	8a 15 a1 1a 03 c0    	mov    dl,BYTE PTR ds:0xc0031aa1
c001fa8c:	83 e2 c7             	and    edx,0xffffffc7
c001fa8f:	09 ca                	or     edx,ecx
c001fa91:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fa95:	88 15 a1 1a 03 c0    	mov    BYTE PTR ds:0xc0031aa1,dl
c001fa9b:	89 0c c5 a8 1a 03 c0 	mov    DWORD PTR [eax*8-0x3ffce558],ecx
c001faa2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001faa6:	89 14 c5 a4 1a 03 c0 	mov    DWORD PTR [eax*8-0x3ffce55c],edx
c001faad:	a1 e4 1a 03 c0       	mov    eax,ds:0xc0031ae4
c001fab2:	83 f8 08             	cmp    eax,0x8
c001fab5:	75 08                	jne    c001fabf <Vm::fpuPush(unsigned long long)+0x56>
c001fab7:	80 0d a0 1a 03 c0 40 	or     BYTE PTR ds:0xc0031aa0,0x40
c001fabe:	c3                   	ret    
c001fabf:	40                   	inc    eax
c001fac0:	a3 e4 1a 03 c0       	mov    ds:0xc0031ae4,eax
c001fac5:	c3                   	ret    

c001fac6 <Vm::fpuPop()>:
c001fac6:	8a 0d a1 1a 03 c0    	mov    cl,BYTE PTR ds:0xc0031aa1
c001facc:	53                   	push   ebx
c001facd:	c0 e9 03             	shr    cl,0x3
c001fad0:	8a 1d a1 1a 03 c0    	mov    bl,BYTE PTR ds:0xc0031aa1
c001fad6:	83 e1 07             	and    ecx,0x7
c001fad9:	83 e3 c7             	and    ebx,0xffffffc7
c001fadc:	8b 04 cd a4 1a 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffce55c]
c001fae3:	8b 14 cd a8 1a 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffce558]
c001faea:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001faf1:	83 e1 38             	and    ecx,0x38
c001faf4:	09 d9                	or     ecx,ebx
c001faf6:	88 0d a1 1a 03 c0    	mov    BYTE PTR ds:0xc0031aa1,cl
c001fafc:	8b 0d e4 1a 03 c0    	mov    ecx,DWORD PTR ds:0xc0031ae4
c001fb02:	85 c9                	test   ecx,ecx
c001fb04:	74 09                	je     c001fb0f <Vm::fpuPop()+0x49>
c001fb06:	49                   	dec    ecx
c001fb07:	89 0d e4 1a 03 c0    	mov    DWORD PTR ds:0xc0031ae4,ecx
c001fb0d:	eb 07                	jmp    c001fb16 <Vm::fpuPop()+0x50>
c001fb0f:	80 0d a0 1a 03 c0 40 	or     BYTE PTR ds:0xc0031aa0,0x40
c001fb16:	5b                   	pop    ebx
c001fb17:	c3                   	ret    

c001fb18 <Vm::x87Handler(regs*)>:
c001fb18:	55                   	push   ebp
c001fb19:	57                   	push   edi
c001fb1a:	56                   	push   esi
c001fb1b:	53                   	push   ebx
c001fb1c:	83 ec 1c             	sub    esp,0x1c
c001fb1f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001fb23:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001fb28:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001fb2b:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001fb33:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001fb37:	50                   	push   eax
c001fb38:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001fb3c:	50                   	push   eax
c001fb3d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fb41:	50                   	push   eax
c001fb42:	53                   	push   ebx
c001fb43:	e8 0e a2 ff ff       	call   c0019d56 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001fb48:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001fb4b:	83 c4 10             	add    esp,0x10
c001fb4e:	89 c6                	mov    esi,eax
c001fb50:	80 fa d9             	cmp    dl,0xd9
c001fb53:	0f 85 52 01 00 00    	jne    c001fcab <Vm::x87Handler(regs*)+0x193>
c001fb59:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb5d:	8d 50 20             	lea    edx,[eax+0x20]
c001fb60:	80 fa 0e             	cmp    dl,0xe
c001fb63:	0f 87 86 00 00 00    	ja     c001fbef <Vm::x87Handler(regs*)+0xd7>
c001fb69:	0f b6 d2             	movzx  edx,dl
c001fb6c:	ff 24 95 68 c8 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd3798]
c001fb73:	e8 e7 fc ff ff       	call   c001f85f <Vm::fpuGet0()>
c001fb78:	eb 05                	jmp    c001fb7f <Vm::x87Handler(regs*)+0x67>
c001fb7a:	e8 e5 fc ff ff       	call   c001f864 <Vm::fpuGet1()>
c001fb7f:	57                   	push   edi
c001fb80:	57                   	push   edi
c001fb81:	52                   	push   edx
c001fb82:	50                   	push   eax
c001fb83:	e8 e1 fe ff ff       	call   c001fa69 <Vm::fpuPush(unsigned long long)>
c001fb88:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fb8c:	83 c4 10             	add    esp,0x10
c001fb8f:	b0 01                	mov    al,0x1
c001fb91:	e9 e3 09 00 00       	jmp    c0020579 <Vm::x87Handler(regs*)+0xa61>
c001fb96:	83 ec 0c             	sub    esp,0xc
c001fb99:	6a 00                	push   0x0
c001fb9b:	e8 3b fe ff ff       	call   c001f9db <Vm::fpuGetReg(int)>
c001fba0:	59                   	pop    ecx
c001fba1:	5e                   	pop    esi
c001fba2:	52                   	push   edx
c001fba3:	50                   	push   eax
c001fba4:	e8 c2 fd ff ff       	call   c001f96b <Vm::fpuChs(unsigned long long)>
c001fba9:	eb 13                	jmp    c001fbbe <Vm::x87Handler(regs*)+0xa6>
c001fbab:	83 ec 0c             	sub    esp,0xc
c001fbae:	6a 00                	push   0x0
c001fbb0:	e8 26 fe ff ff       	call   c001f9db <Vm::fpuGetReg(int)>
c001fbb5:	5f                   	pop    edi
c001fbb6:	5d                   	pop    ebp
c001fbb7:	52                   	push   edx
c001fbb8:	50                   	push   eax
c001fbb9:	e8 a4 fd ff ff       	call   c001f962 <Vm::fpuAbs(unsigned long long)>
c001fbbe:	83 c4 0c             	add    esp,0xc
c001fbc1:	52                   	push   edx
c001fbc2:	50                   	push   eax
c001fbc3:	6a 00                	push   0x0
c001fbc5:	e8 54 fe ff ff       	call   c001fa1e <Vm::fpuSetReg(int, unsigned long long)>
c001fbca:	eb bc                	jmp    c001fb88 <Vm::x87Handler(regs*)+0x70>
c001fbcc:	e8 d3 fc ff ff       	call   c001f8a4 <Vm::fpuGetLog210()>
c001fbd1:	eb ac                	jmp    c001fb7f <Vm::x87Handler(regs*)+0x67>
c001fbd3:	e8 9c fc ff ff       	call   c001f874 <Vm::fpuGetLog2E()>
c001fbd8:	eb a5                	jmp    c001fb7f <Vm::x87Handler(regs*)+0x67>
c001fbda:	e8 8d fc ff ff       	call   c001f86c <Vm::fpuGetPi()>
c001fbdf:	eb 9e                	jmp    c001fb7f <Vm::x87Handler(regs*)+0x67>
c001fbe1:	e8 d6 fc ff ff       	call   c001f8bc <Vm::fpuGetLog102()>
c001fbe6:	eb 97                	jmp    c001fb7f <Vm::x87Handler(regs*)+0x67>
c001fbe8:	e8 9f fc ff ff       	call   c001f88c <Vm::fpuGetLogE2()>
c001fbed:	eb 90                	jmp    c001fb7f <Vm::x87Handler(regs*)+0x67>
c001fbef:	8d 50 40             	lea    edx,[eax+0x40]
c001fbf2:	80 fa 07             	cmp    dl,0x7
c001fbf5:	77 15                	ja     c001fc0c <Vm::x87Handler(regs*)+0xf4>
c001fbf7:	83 ec 0c             	sub    esp,0xc
c001fbfa:	2d c0 00 00 00       	sub    eax,0xc0
c001fbff:	50                   	push   eax
c001fc00:	e8 d6 fd ff ff       	call   c001f9db <Vm::fpuGetReg(int)>
c001fc05:	59                   	pop    ecx
c001fc06:	5e                   	pop    esi
c001fc07:	e9 75 ff ff ff       	jmp    c001fb81 <Vm::x87Handler(regs*)+0x69>
c001fc0c:	8d 50 38             	lea    edx,[eax+0x38]
c001fc0f:	80 fa 07             	cmp    dl,0x7
c001fc12:	77 3c                	ja     c001fc50 <Vm::x87Handler(regs*)+0x138>
c001fc14:	83 ec 0c             	sub    esp,0xc
c001fc17:	2d c8 00 00 00       	sub    eax,0xc8
c001fc1c:	50                   	push   eax
c001fc1d:	e8 b9 fd ff ff       	call   c001f9db <Vm::fpuGetReg(int)>
c001fc22:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc29:	89 c6                	mov    esi,eax
c001fc2b:	89 d7                	mov    edi,edx
c001fc2d:	e8 a9 fd ff ff       	call   c001f9db <Vm::fpuGetReg(int)>
c001fc32:	83 c4 0c             	add    esp,0xc
c001fc35:	52                   	push   edx
c001fc36:	50                   	push   eax
c001fc37:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc3b:	2d c8 00 00 00       	sub    eax,0xc8
c001fc40:	50                   	push   eax
c001fc41:	e8 d8 fd ff ff       	call   c001fa1e <Vm::fpuSetReg(int, unsigned long long)>
c001fc46:	83 c4 0c             	add    esp,0xc
c001fc49:	57                   	push   edi
c001fc4a:	56                   	push   esi
c001fc4b:	e9 73 ff ff ff       	jmp    c001fbc3 <Vm::x87Handler(regs*)+0xab>
c001fc50:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc54:	84 d2                	test   dl,dl
c001fc56:	75 0f                	jne    c001fc67 <Vm::x87Handler(regs*)+0x14f>
c001fc58:	83 ec 0c             	sub    esp,0xc
c001fc5b:	ff 36                	push   DWORD PTR [esi]
c001fc5d:	e8 c8 fa ff ff       	call   c001f72a <Vm::fpu32ToInternal(unsigned int)>
c001fc62:	e9 bf 00 00 00       	jmp    c001fd26 <Vm::x87Handler(regs*)+0x20e>
c001fc67:	80 fa 03             	cmp    dl,0x3
c001fc6a:	75 13                	jne    c001fc7f <Vm::x87Handler(regs*)+0x167>
c001fc6c:	e8 55 fe ff ff       	call   c001fac6 <Vm::fpuPop()>
c001fc71:	55                   	push   ebp
c001fc72:	55                   	push   ebp
c001fc73:	52                   	push   edx
c001fc74:	50                   	push   eax
c001fc75:	e8 4c fa ff ff       	call   c001f6c6 <Vm::fpuInternalTo32(unsigned long long)>
c001fc7a:	e9 88 00 00 00       	jmp    c001fd07 <Vm::x87Handler(regs*)+0x1ef>
c001fc7f:	80 fa 05             	cmp    dl,0x5
c001fc82:	75 0e                	jne    c001fc92 <Vm::x87Handler(regs*)+0x17a>
c001fc84:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fc87:	66 a3 a2 1a 03 c0    	mov    ds:0xc0031aa2,ax
c001fc8d:	e9 df 00 00 00       	jmp    c001fd71 <Vm::x87Handler(regs*)+0x259>
c001fc92:	31 c0                	xor    eax,eax
c001fc94:	80 fa 07             	cmp    dl,0x7
c001fc97:	0f 85 dc 08 00 00    	jne    c0020579 <Vm::x87Handler(regs*)+0xa61>
c001fc9d:	66 a1 a2 1a 03 c0    	mov    ax,ds:0xc0031aa2
c001fca3:	66 89 06             	mov    WORD PTR [esi],ax
c001fca6:	e9 c6 00 00 00       	jmp    c001fd71 <Vm::x87Handler(regs*)+0x259>
c001fcab:	80 fa d8             	cmp    dl,0xd8
c001fcae:	0f 84 c9 00 00 00    	je     c001fd7d <Vm::x87Handler(regs*)+0x265>
c001fcb4:	80 fa dc             	cmp    dl,0xdc
c001fcb7:	0f 84 0d 02 00 00    	je     c001feca <Vm::x87Handler(regs*)+0x3b2>
c001fcbd:	80 fa de             	cmp    dl,0xde
c001fcc0:	0f 84 cd 02 00 00    	je     c001ff93 <Vm::x87Handler(regs*)+0x47b>
c001fcc6:	80 fa dd             	cmp    dl,0xdd
c001fcc9:	0f 84 5f 04 00 00    	je     c002012e <Vm::x87Handler(regs*)+0x616>
c001fccf:	80 fa da             	cmp    dl,0xda
c001fcd2:	0f 84 24 05 00 00    	je     c00201fc <Vm::x87Handler(regs*)+0x6e4>
c001fcd8:	80 fa df             	cmp    dl,0xdf
c001fcdb:	0f 84 68 05 00 00    	je     c0020249 <Vm::x87Handler(regs*)+0x731>
c001fce1:	31 c0                	xor    eax,eax
c001fce3:	80 fa db             	cmp    dl,0xdb
c001fce6:	0f 85 8d 08 00 00    	jne    c0020579 <Vm::x87Handler(regs*)+0xa61>
c001fcec:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fcf0:	80 fa 03             	cmp    dl,0x3
c001fcf3:	0f 85 70 06 00 00    	jne    c0020369 <Vm::x87Handler(regs*)+0x851>
c001fcf9:	e8 c8 fd ff ff       	call   c001fac6 <Vm::fpuPop()>
c001fcfe:	55                   	push   ebp
c001fcff:	55                   	push   ebp
c001fd00:	52                   	push   edx
c001fd01:	50                   	push   eax
c001fd02:	e8 71 fa ff ff       	call   c001f778 <Vm::fpuFloatToLong(unsigned long long)>
c001fd07:	83 c4 10             	add    esp,0x10
c001fd0a:	89 06                	mov    DWORD PTR [esi],eax
c001fd0c:	eb 63                	jmp    c001fd71 <Vm::x87Handler(regs*)+0x259>
c001fd0e:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fd12:	84 d2                	test   dl,dl
c001fd14:	0f 85 e6 05 00 00    	jne    c0020300 <Vm::x87Handler(regs*)+0x7e8>
c001fd1a:	57                   	push   edi
c001fd1b:	57                   	push   edi
c001fd1c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd1f:	ff 36                	push   DWORD PTR [esi]
c001fd21:	e8 49 fa ff ff       	call   c001f76f <Vm::fpu64ToInternal(unsigned long long)>
c001fd26:	5e                   	pop    esi
c001fd27:	5f                   	pop    edi
c001fd28:	52                   	push   edx
c001fd29:	50                   	push   eax
c001fd2a:	e8 3a fd ff ff       	call   c001fa69 <Vm::fpuPush(unsigned long long)>
c001fd2f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fd33:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fd36:	e9 51 fe ff ff       	jmp    c001fb8c <Vm::x87Handler(regs*)+0x74>
c001fd3b:	80 fa 03             	cmp    dl,0x3
c001fd3e:	0f 85 d7 06 00 00    	jne    c002041b <Vm::x87Handler(regs*)+0x903>
c001fd44:	57                   	push   edi
c001fd45:	57                   	push   edi
c001fd46:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd49:	ff 36                	push   DWORD PTR [esi]
c001fd4b:	e8 1f fa ff ff       	call   c001f76f <Vm::fpu64ToInternal(unsigned long long)>
c001fd50:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd57:	89 c6                	mov    esi,eax
c001fd59:	89 d7                	mov    edi,edx
c001fd5b:	e8 7b fc ff ff       	call   c001f9db <Vm::fpuGetReg(int)>
c001fd60:	57                   	push   edi
c001fd61:	56                   	push   esi
c001fd62:	52                   	push   edx
c001fd63:	50                   	push   eax
c001fd64:	e8 95 fb ff ff       	call   c001f8fe <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fd69:	83 c4 20             	add    esp,0x20
c001fd6c:	e8 55 fd ff ff       	call   c001fac6 <Vm::fpuPop()>
c001fd71:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fd75:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fd78:	e9 12 fe ff ff       	jmp    c001fb8f <Vm::x87Handler(regs*)+0x77>
c001fd7d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd81:	8d 50 40             	lea    edx,[eax+0x40]
c001fd84:	80 fa 07             	cmp    dl,0x7
c001fd87:	77 29                	ja     c001fdb2 <Vm::x87Handler(regs*)+0x29a>
c001fd89:	83 ec 0c             	sub    esp,0xc
c001fd8c:	2d c0 00 00 00       	sub    eax,0xc0
c001fd91:	50                   	push   eax
c001fd92:	e8 44 fc ff ff       	call   c001f9db <Vm::fpuGetReg(int)>
c001fd97:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd9e:	89 c6                	mov    esi,eax
c001fda0:	89 d7                	mov    edi,edx
c001fda2:	e8 34 fc ff ff       	call   c001f9db <Vm::fpuGetReg(int)>
c001fda7:	57                   	push   edi
c001fda8:	56                   	push   esi
c001fda9:	52                   	push   edx
c001fdaa:	50                   	push   eax
c001fdab:	e8 a1 fb ff ff       	call   c001f951 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fdb0:	eb 2f                	jmp    c001fde1 <Vm::x87Handler(regs*)+0x2c9>
c001fdb2:	8d 50 38             	lea    edx,[eax+0x38]
c001fdb5:	80 fa 07             	cmp    dl,0x7
c001fdb8:	77 2f                	ja     c001fde9 <Vm::x87Handler(regs*)+0x2d1>
c001fdba:	83 ec 0c             	sub    esp,0xc
c001fdbd:	2d c8 00 00 00       	sub    eax,0xc8
c001fdc2:	50                   	push   eax
c001fdc3:	e8 13 fc ff ff       	call   c001f9db <Vm::fpuGetReg(int)>
c001fdc8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fdcf:	89 c6                	mov    esi,eax
c001fdd1:	89 d7                	mov    edi,edx
c001fdd3:	e8 03 fc ff ff       	call   c001f9db <Vm::fpuGetReg(int)>
c001fdd8:	57                   	push   edi
c001fdd9:	56                   	push   esi
c001fdda:	52                   	push   edx
c001fddb:	50                   	push   eax
c001fddc:	e8 a9 fb ff ff       	call   c001f98a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fde1:	83 c4 1c             	add    esp,0x1c
c001fde4:	e9 d8 fd ff ff       	jmp    c001fbc1 <Vm::x87Handler(regs*)+0xa9>
c001fde9:	8d 50 30             	lea    edx,[eax+0x30]
c001fdec:	80 fa 07             	cmp    dl,0x7
c001fdef:	77 0d                	ja     c001fdfe <Vm::x87Handler(regs*)+0x2e6>
c001fdf1:	83 ec 0c             	sub    esp,0xc
c001fdf4:	2d d0 00 00 00       	sub    eax,0xd0
c001fdf9:	e9 99 03 00 00       	jmp    c0020197 <Vm::x87Handler(regs*)+0x67f>
c001fdfe:	8d 50 28             	lea    edx,[eax+0x28]
c001fe01:	80 fa 07             	cmp    dl,0x7
c001fe04:	77 0d                	ja     c001fe13 <Vm::x87Handler(regs*)+0x2fb>
c001fe06:	83 ec 0c             	sub    esp,0xc
c001fe09:	2d d8 00 00 00       	sub    eax,0xd8
c001fe0e:	e9 c0 03 00 00       	jmp    c00201d3 <Vm::x87Handler(regs*)+0x6bb>
c001fe13:	8d 50 20             	lea    edx,[eax+0x20]
c001fe16:	80 fa 07             	cmp    dl,0x7
c001fe19:	77 1b                	ja     c001fe36 <Vm::x87Handler(regs*)+0x31e>
c001fe1b:	83 ec 0c             	sub    esp,0xc
c001fe1e:	2d e0 00 00 00       	sub    eax,0xe0
c001fe23:	50                   	push   eax
c001fe24:	e8 b2 fb ff ff       	call   c001f9db <Vm::fpuGetReg(int)>
c001fe29:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe30:	89 c6                	mov    esi,eax
c001fe32:	89 d7                	mov    edi,edx
c001fe34:	eb 22                	jmp    c001fe58 <Vm::x87Handler(regs*)+0x340>
c001fe36:	8d 50 18             	lea    edx,[eax+0x18]
c001fe39:	80 fa 07             	cmp    dl,0x7
c001fe3c:	77 2d                	ja     c001fe6b <Vm::x87Handler(regs*)+0x353>
c001fe3e:	83 ec 0c             	sub    esp,0xc
c001fe41:	6a 00                	push   0x0
c001fe43:	e8 93 fb ff ff       	call   c001f9db <Vm::fpuGetReg(int)>
c001fe48:	89 c6                	mov    esi,eax
c001fe4a:	89 d7                	mov    edi,edx
c001fe4c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe50:	2d e8 00 00 00       	sub    eax,0xe8
c001fe55:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe58:	e8 7e fb ff ff       	call   c001f9db <Vm::fpuGetReg(int)>
c001fe5d:	57                   	push   edi
c001fe5e:	56                   	push   esi
c001fe5f:	52                   	push   edx
c001fe60:	50                   	push   eax
c001fe61:	e8 15 fb ff ff       	call   c001f97b <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fe66:	e9 76 ff ff ff       	jmp    c001fde1 <Vm::x87Handler(regs*)+0x2c9>
c001fe6b:	8d 50 10             	lea    edx,[eax+0x10]
c001fe6e:	80 fa 07             	cmp    dl,0x7
c001fe71:	77 1b                	ja     c001fe8e <Vm::x87Handler(regs*)+0x376>
c001fe73:	83 ec 0c             	sub    esp,0xc
c001fe76:	2d f0 00 00 00       	sub    eax,0xf0
c001fe7b:	50                   	push   eax
c001fe7c:	e8 5a fb ff ff       	call   c001f9db <Vm::fpuGetReg(int)>
c001fe81:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe88:	89 c6                	mov    esi,eax
c001fe8a:	89 d7                	mov    edi,edx
c001fe8c:	eb 22                	jmp    c001feb0 <Vm::x87Handler(regs*)+0x398>
c001fe8e:	3c f7                	cmp    al,0xf7
c001fe90:	0f 86 d1 03 00 00    	jbe    c0020267 <Vm::x87Handler(regs*)+0x74f>
c001fe96:	83 ec 0c             	sub    esp,0xc
c001fe99:	6a 00                	push   0x0
c001fe9b:	e8 3b fb ff ff       	call   c001f9db <Vm::fpuGetReg(int)>
c001fea0:	89 c6                	mov    esi,eax
c001fea2:	89 d7                	mov    edi,edx
c001fea4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fea8:	2d f8 00 00 00       	sub    eax,0xf8
c001fead:	89 04 24             	mov    DWORD PTR [esp],eax
c001feb0:	e8 26 fb ff ff       	call   c001f9db <Vm::fpuGetReg(int)>
c001feb5:	57                   	push   edi
c001feb6:	56                   	push   esi
c001feb7:	52                   	push   edx
c001feb8:	50                   	push   eax
c001feb9:	e8 eb fa ff ff       	call   c001f9a9 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001febe:	83 c4 1c             	add    esp,0x1c
c001fec1:	52                   	push   edx
c001fec2:	50                   	push   eax
c001fec3:	6a 00                	push   0x0
c001fec5:	e9 51 02 00 00       	jmp    c002011b <Vm::x87Handler(regs*)+0x603>
c001feca:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fece:	8d 50 40             	lea    edx,[eax+0x40]
c001fed1:	80 fa 07             	cmp    dl,0x7
c001fed4:	77 37                	ja     c001ff0d <Vm::x87Handler(regs*)+0x3f5>
c001fed6:	83 ec 0c             	sub    esp,0xc
c001fed9:	2d c0 00 00 00       	sub    eax,0xc0
c001fede:	50                   	push   eax
c001fedf:	e8 f7 fa ff ff       	call   c001f9db <Vm::fpuGetReg(int)>
c001fee4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001feeb:	89 c6                	mov    esi,eax
c001feed:	89 d7                	mov    edi,edx
c001feef:	e8 e7 fa ff ff       	call   c001f9db <Vm::fpuGetReg(int)>
c001fef4:	57                   	push   edi
c001fef5:	56                   	push   esi
c001fef6:	52                   	push   edx
c001fef7:	50                   	push   eax
c001fef8:	e8 54 fa ff ff       	call   c001f951 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fefd:	83 c4 1c             	add    esp,0x1c
c001ff00:	52                   	push   edx
c001ff01:	50                   	push   eax
c001ff02:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff06:	2d c0 00 00 00       	sub    eax,0xc0
c001ff0b:	eb 3d                	jmp    c001ff4a <Vm::x87Handler(regs*)+0x432>
c001ff0d:	8d 50 38             	lea    edx,[eax+0x38]
c001ff10:	80 fa 07             	cmp    dl,0x7
c001ff13:	77 3b                	ja     c001ff50 <Vm::x87Handler(regs*)+0x438>
c001ff15:	83 ec 0c             	sub    esp,0xc
c001ff18:	2d c8 00 00 00       	sub    eax,0xc8
c001ff1d:	50                   	push   eax
c001ff1e:	e8 b8 fa ff ff       	call   c001f9db <Vm::fpuGetReg(int)>
c001ff23:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff2a:	89 c6                	mov    esi,eax
c001ff2c:	89 d7                	mov    edi,edx
c001ff2e:	e8 a8 fa ff ff       	call   c001f9db <Vm::fpuGetReg(int)>
c001ff33:	57                   	push   edi
c001ff34:	56                   	push   esi
c001ff35:	52                   	push   edx
c001ff36:	50                   	push   eax
c001ff37:	e8 4e fa ff ff       	call   c001f98a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ff3c:	83 c4 1c             	add    esp,0x1c
c001ff3f:	52                   	push   edx
c001ff40:	50                   	push   eax
c001ff41:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff45:	2d c8 00 00 00       	sub    eax,0xc8
c001ff4a:	50                   	push   eax
c001ff4b:	e9 75 fc ff ff       	jmp    c001fbc5 <Vm::x87Handler(regs*)+0xad>
c001ff50:	83 c0 18             	add    eax,0x18
c001ff53:	3c 07                	cmp    al,0x7
c001ff55:	0f 87 3b 04 00 00    	ja     c0020396 <Vm::x87Handler(regs*)+0x87e>
c001ff5b:	83 ec 0c             	sub    esp,0xc
c001ff5e:	6a 00                	push   0x0
c001ff60:	e8 76 fa ff ff       	call   c001f9db <Vm::fpuGetReg(int)>
c001ff65:	89 c6                	mov    esi,eax
c001ff67:	89 d7                	mov    edi,edx
c001ff69:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff6d:	2d e8 00 00 00       	sub    eax,0xe8
c001ff72:	89 04 24             	mov    DWORD PTR [esp],eax
c001ff75:	e8 61 fa ff ff       	call   c001f9db <Vm::fpuGetReg(int)>
c001ff7a:	57                   	push   edi
c001ff7b:	56                   	push   esi
c001ff7c:	52                   	push   edx
c001ff7d:	50                   	push   eax
c001ff7e:	e8 f8 f9 ff ff       	call   c001f97b <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ff83:	83 c4 1c             	add    esp,0x1c
c001ff86:	52                   	push   edx
c001ff87:	50                   	push   eax
c001ff88:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff8c:	2d e8 00 00 00       	sub    eax,0xe8
c001ff91:	eb b7                	jmp    c001ff4a <Vm::x87Handler(regs*)+0x432>
c001ff93:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff97:	8d 50 40             	lea    edx,[eax+0x40]
c001ff9a:	80 fa 07             	cmp    dl,0x7
c001ff9d:	77 3a                	ja     c001ffd9 <Vm::x87Handler(regs*)+0x4c1>
c001ff9f:	83 ec 0c             	sub    esp,0xc
c001ffa2:	2d c0 00 00 00       	sub    eax,0xc0
c001ffa7:	50                   	push   eax
c001ffa8:	e8 2e fa ff ff       	call   c001f9db <Vm::fpuGetReg(int)>
c001ffad:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ffb4:	89 c6                	mov    esi,eax
c001ffb6:	89 d7                	mov    edi,edx
c001ffb8:	e8 1e fa ff ff       	call   c001f9db <Vm::fpuGetReg(int)>
c001ffbd:	57                   	push   edi
c001ffbe:	56                   	push   esi
c001ffbf:	52                   	push   edx
c001ffc0:	50                   	push   eax
c001ffc1:	e8 8b f9 ff ff       	call   c001f951 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ffc6:	83 c4 1c             	add    esp,0x1c
c001ffc9:	52                   	push   edx
c001ffca:	50                   	push   eax
c001ffcb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffcf:	2d c0 00 00 00       	sub    eax,0xc0
c001ffd4:	e9 9e 01 00 00       	jmp    c0020177 <Vm::x87Handler(regs*)+0x65f>
c001ffd9:	8d 50 20             	lea    edx,[eax+0x20]
c001ffdc:	80 fa 07             	cmp    dl,0x7
c001ffdf:	77 3a                	ja     c002001b <Vm::x87Handler(regs*)+0x503>
c001ffe1:	83 ec 0c             	sub    esp,0xc
c001ffe4:	2d e0 00 00 00       	sub    eax,0xe0
c001ffe9:	50                   	push   eax
c001ffea:	e8 ec f9 ff ff       	call   c001f9db <Vm::fpuGetReg(int)>
c001ffef:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fff6:	89 c6                	mov    esi,eax
c001fff8:	89 d7                	mov    edi,edx
c001fffa:	e8 dc f9 ff ff       	call   c001f9db <Vm::fpuGetReg(int)>
c001ffff:	57                   	push   edi
c0020000:	56                   	push   esi
c0020001:	52                   	push   edx
c0020002:	50                   	push   eax
c0020003:	e8 73 f9 ff ff       	call   c001f97b <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020008:	83 c4 1c             	add    esp,0x1c
c002000b:	52                   	push   edx
c002000c:	50                   	push   eax
c002000d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020011:	2d e0 00 00 00       	sub    eax,0xe0
c0020016:	e9 5c 01 00 00       	jmp    c0020177 <Vm::x87Handler(regs*)+0x65f>
c002001b:	8d 50 18             	lea    edx,[eax+0x18]
c002001e:	80 fa 07             	cmp    dl,0x7
c0020021:	77 3b                	ja     c002005e <Vm::x87Handler(regs*)+0x546>
c0020023:	83 ec 0c             	sub    esp,0xc
c0020026:	6a 00                	push   0x0
c0020028:	e8 ae f9 ff ff       	call   c001f9db <Vm::fpuGetReg(int)>
c002002d:	89 c6                	mov    esi,eax
c002002f:	89 d7                	mov    edi,edx
c0020031:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020035:	2d e8 00 00 00       	sub    eax,0xe8
c002003a:	89 04 24             	mov    DWORD PTR [esp],eax
c002003d:	e8 99 f9 ff ff       	call   c001f9db <Vm::fpuGetReg(int)>
c0020042:	57                   	push   edi
c0020043:	56                   	push   esi
c0020044:	52                   	push   edx
c0020045:	50                   	push   eax
c0020046:	e8 30 f9 ff ff       	call   c001f97b <Vm::fpuSub(unsigned long long, unsigned long long)>
c002004b:	83 c4 1c             	add    esp,0x1c
c002004e:	52                   	push   edx
c002004f:	50                   	push   eax
c0020050:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020054:	2d e8 00 00 00       	sub    eax,0xe8
c0020059:	e9 19 01 00 00       	jmp    c0020177 <Vm::x87Handler(regs*)+0x65f>
c002005e:	8d 50 38             	lea    edx,[eax+0x38]
c0020061:	80 fa 07             	cmp    dl,0x7
c0020064:	77 37                	ja     c002009d <Vm::x87Handler(regs*)+0x585>
c0020066:	83 ec 0c             	sub    esp,0xc
c0020069:	2d c8 00 00 00       	sub    eax,0xc8
c002006e:	50                   	push   eax
c002006f:	e8 67 f9 ff ff       	call   c001f9db <Vm::fpuGetReg(int)>
c0020074:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002007b:	89 c6                	mov    esi,eax
c002007d:	89 d7                	mov    edi,edx
c002007f:	e8 57 f9 ff ff       	call   c001f9db <Vm::fpuGetReg(int)>
c0020084:	57                   	push   edi
c0020085:	56                   	push   esi
c0020086:	52                   	push   edx
c0020087:	50                   	push   eax
c0020088:	e8 fd f8 ff ff       	call   c001f98a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c002008d:	83 c4 1c             	add    esp,0x1c
c0020090:	52                   	push   edx
c0020091:	50                   	push   eax
c0020092:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020096:	2d c8 00 00 00       	sub    eax,0xc8
c002009b:	eb 7d                	jmp    c002011a <Vm::x87Handler(regs*)+0x602>
c002009d:	3c f7                	cmp    al,0xf7
c002009f:	76 38                	jbe    c00200d9 <Vm::x87Handler(regs*)+0x5c1>
c00200a1:	83 ec 0c             	sub    esp,0xc
c00200a4:	6a 00                	push   0x0
c00200a6:	e8 30 f9 ff ff       	call   c001f9db <Vm::fpuGetReg(int)>
c00200ab:	89 c6                	mov    esi,eax
c00200ad:	89 d7                	mov    edi,edx
c00200af:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200b3:	2d f8 00 00 00       	sub    eax,0xf8
c00200b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00200bb:	e8 1b f9 ff ff       	call   c001f9db <Vm::fpuGetReg(int)>
c00200c0:	57                   	push   edi
c00200c1:	56                   	push   esi
c00200c2:	52                   	push   edx
c00200c3:	50                   	push   eax
c00200c4:	e8 e0 f8 ff ff       	call   c001f9a9 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00200c9:	83 c4 1c             	add    esp,0x1c
c00200cc:	52                   	push   edx
c00200cd:	50                   	push   eax
c00200ce:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200d2:	2d f8 00 00 00       	sub    eax,0xf8
c00200d7:	eb 41                	jmp    c002011a <Vm::x87Handler(regs*)+0x602>
c00200d9:	8d 50 10             	lea    edx,[eax+0x10]
c00200dc:	80 fa 07             	cmp    dl,0x7
c00200df:	0f 87 5a 01 00 00    	ja     c002023f <Vm::x87Handler(regs*)+0x727>
c00200e5:	83 ec 0c             	sub    esp,0xc
c00200e8:	2d f0 00 00 00       	sub    eax,0xf0
c00200ed:	50                   	push   eax
c00200ee:	e8 e8 f8 ff ff       	call   c001f9db <Vm::fpuGetReg(int)>
c00200f3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00200fa:	89 c6                	mov    esi,eax
c00200fc:	89 d7                	mov    edi,edx
c00200fe:	e8 d8 f8 ff ff       	call   c001f9db <Vm::fpuGetReg(int)>
c0020103:	57                   	push   edi
c0020104:	56                   	push   esi
c0020105:	52                   	push   edx
c0020106:	50                   	push   eax
c0020107:	e8 9d f8 ff ff       	call   c001f9a9 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002010c:	83 c4 1c             	add    esp,0x1c
c002010f:	52                   	push   edx
c0020110:	50                   	push   eax
c0020111:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020115:	2d f0 00 00 00       	sub    eax,0xf0
c002011a:	50                   	push   eax
c002011b:	e8 fe f8 ff ff       	call   c001fa1e <Vm::fpuSetReg(int, unsigned long long)>
c0020120:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020124:	e8 9d f9 ff ff       	call   c001fac6 <Vm::fpuPop()>
c0020129:	e9 5e fa ff ff       	jmp    c001fb8c <Vm::x87Handler(regs*)+0x74>
c002012e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020132:	8d 50 30             	lea    edx,[eax+0x30]
c0020135:	80 fa 07             	cmp    dl,0x7
c0020138:	77 1d                	ja     c0020157 <Vm::x87Handler(regs*)+0x63f>
c002013a:	83 ec 0c             	sub    esp,0xc
c002013d:	6a 00                	push   0x0
c002013f:	e8 97 f8 ff ff       	call   c001f9db <Vm::fpuGetReg(int)>
c0020144:	83 c4 0c             	add    esp,0xc
c0020147:	52                   	push   edx
c0020148:	50                   	push   eax
c0020149:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002014d:	2d d0 00 00 00       	sub    eax,0xd0
c0020152:	e9 f3 fd ff ff       	jmp    c001ff4a <Vm::x87Handler(regs*)+0x432>
c0020157:	8d 50 28             	lea    edx,[eax+0x28]
c002015a:	80 fa 07             	cmp    dl,0x7
c002015d:	77 28                	ja     c0020187 <Vm::x87Handler(regs*)+0x66f>
c002015f:	83 ec 0c             	sub    esp,0xc
c0020162:	6a 00                	push   0x0
c0020164:	e8 72 f8 ff ff       	call   c001f9db <Vm::fpuGetReg(int)>
c0020169:	83 c4 0c             	add    esp,0xc
c002016c:	52                   	push   edx
c002016d:	50                   	push   eax
c002016e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020172:	2d d8 00 00 00       	sub    eax,0xd8
c0020177:	50                   	push   eax
c0020178:	e8 a1 f8 ff ff       	call   c001fa1e <Vm::fpuSetReg(int, unsigned long long)>
c002017d:	e8 44 f9 ff ff       	call   c001fac6 <Vm::fpuPop()>
c0020182:	e9 01 fa ff ff       	jmp    c001fb88 <Vm::x87Handler(regs*)+0x70>
c0020187:	8d 50 20             	lea    edx,[eax+0x20]
c002018a:	80 fa 07             	cmp    dl,0x7
c002018d:	77 30                	ja     c00201bf <Vm::x87Handler(regs*)+0x6a7>
c002018f:	83 ec 0c             	sub    esp,0xc
c0020192:	2d e0 00 00 00       	sub    eax,0xe0
c0020197:	50                   	push   eax
c0020198:	e8 3e f8 ff ff       	call   c001f9db <Vm::fpuGetReg(int)>
c002019d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201a4:	89 c6                	mov    esi,eax
c00201a6:	89 d7                	mov    edi,edx
c00201a8:	e8 2e f8 ff ff       	call   c001f9db <Vm::fpuGetReg(int)>
c00201ad:	57                   	push   edi
c00201ae:	56                   	push   esi
c00201af:	52                   	push   edx
c00201b0:	50                   	push   eax
c00201b1:	e8 48 f7 ff ff       	call   c001f8fe <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00201b6:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00201ba:	e9 54 02 00 00       	jmp    c0020413 <Vm::x87Handler(regs*)+0x8fb>
c00201bf:	8d 50 18             	lea    edx,[eax+0x18]
c00201c2:	80 fa 07             	cmp    dl,0x7
c00201c5:	0f 87 43 fb ff ff    	ja     c001fd0e <Vm::x87Handler(regs*)+0x1f6>
c00201cb:	83 ec 0c             	sub    esp,0xc
c00201ce:	2d e8 00 00 00       	sub    eax,0xe8
c00201d3:	50                   	push   eax
c00201d4:	e8 02 f8 ff ff       	call   c001f9db <Vm::fpuGetReg(int)>
c00201d9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201e0:	89 c6                	mov    esi,eax
c00201e2:	89 d7                	mov    edi,edx
c00201e4:	e8 f2 f7 ff ff       	call   c001f9db <Vm::fpuGetReg(int)>
c00201e9:	57                   	push   edi
c00201ea:	56                   	push   esi
c00201eb:	52                   	push   edx
c00201ec:	50                   	push   eax
c00201ed:	e8 0c f7 ff ff       	call   c001f8fe <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00201f2:	83 c4 20             	add    esp,0x20
c00201f5:	e8 cc f8 ff ff       	call   c001fac6 <Vm::fpuPop()>
c00201fa:	eb 62                	jmp    c002025e <Vm::x87Handler(regs*)+0x746>
c00201fc:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c0020200:	0f 85 0f 01 00 00    	jne    c0020315 <Vm::x87Handler(regs*)+0x7fd>
c0020206:	83 ec 0c             	sub    esp,0xc
c0020209:	6a 01                	push   0x1
c002020b:	e8 cb f7 ff ff       	call   c001f9db <Vm::fpuGetReg(int)>
c0020210:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020217:	89 c6                	mov    esi,eax
c0020219:	89 d7                	mov    edi,edx
c002021b:	e8 bb f7 ff ff       	call   c001f9db <Vm::fpuGetReg(int)>
c0020220:	57                   	push   edi
c0020221:	56                   	push   esi
c0020222:	52                   	push   edx
c0020223:	50                   	push   eax
c0020224:	e8 d5 f6 ff ff       	call   c001f8fe <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020229:	83 c4 20             	add    esp,0x20
c002022c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020230:	e8 91 f8 ff ff       	call   c001fac6 <Vm::fpuPop()>
c0020235:	e8 8c f8 ff ff       	call   c001fac6 <Vm::fpuPop()>
c002023a:	e9 50 f9 ff ff       	jmp    c001fb8f <Vm::x87Handler(regs*)+0x77>
c002023f:	3c d9                	cmp    al,0xd9
c0020241:	0f 85 b5 02 00 00    	jne    c00204fc <Vm::x87Handler(regs*)+0x9e4>
c0020247:	eb bd                	jmp    c0020206 <Vm::x87Handler(regs*)+0x6ee>
c0020249:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c002024d:	0f 85 ea 02 00 00    	jne    c002053d <Vm::x87Handler(regs*)+0xa25>
c0020253:	0f b7 05 a0 1a 03 c0 	movzx  eax,WORD PTR ds:0xc0031aa0
c002025a:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c002025e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020262:	e9 28 f9 ff ff       	jmp    c001fb8f <Vm::x87Handler(regs*)+0x77>
c0020267:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002026b:	84 d2                	test   dl,dl
c002026d:	75 0f                	jne    c002027e <Vm::x87Handler(regs*)+0x766>
c002026f:	83 ec 0c             	sub    esp,0xc
c0020272:	ff 36                	push   DWORD PTR [esi]
c0020274:	e8 b1 f4 ff ff       	call   c001f72a <Vm::fpu32ToInternal(unsigned int)>
c0020279:	e9 2c 01 00 00       	jmp    c00203aa <Vm::x87Handler(regs*)+0x892>
c002027e:	80 fa 01             	cmp    dl,0x1
c0020281:	75 0f                	jne    c0020292 <Vm::x87Handler(regs*)+0x77a>
c0020283:	83 ec 0c             	sub    esp,0xc
c0020286:	ff 36                	push   DWORD PTR [esi]
c0020288:	e8 9d f4 ff ff       	call   c001f72a <Vm::fpu32ToInternal(unsigned int)>
c002028d:	e9 81 02 00 00       	jmp    c0020513 <Vm::x87Handler(regs*)+0x9fb>
c0020292:	80 fa 04             	cmp    dl,0x4
c0020295:	75 0f                	jne    c00202a6 <Vm::x87Handler(regs*)+0x78e>
c0020297:	83 ec 0c             	sub    esp,0xc
c002029a:	ff 36                	push   DWORD PTR [esi]
c002029c:	e8 89 f4 ff ff       	call   c001f72a <Vm::fpu32ToInternal(unsigned int)>
c00202a1:	e9 86 01 00 00       	jmp    c002042c <Vm::x87Handler(regs*)+0x914>
c00202a6:	80 fa 05             	cmp    dl,0x5
c00202a9:	75 1b                	jne    c00202c6 <Vm::x87Handler(regs*)+0x7ae>
c00202ab:	83 ec 0c             	sub    esp,0xc
c00202ae:	6a 00                	push   0x0
c00202b0:	e8 26 f7 ff ff       	call   c001f9db <Vm::fpuGetReg(int)>
c00202b5:	89 c7                	mov    edi,eax
c00202b7:	89 d5                	mov    ebp,edx
c00202b9:	58                   	pop    eax
c00202ba:	ff 36                	push   DWORD PTR [esi]
c00202bc:	e8 69 f4 ff ff       	call   c001f72a <Vm::fpu32ToInternal(unsigned int)>
c00202c1:	e9 a3 01 00 00       	jmp    c0020469 <Vm::x87Handler(regs*)+0x951>
c00202c6:	80 fa 06             	cmp    dl,0x6
c00202c9:	75 0f                	jne    c00202da <Vm::x87Handler(regs*)+0x7c2>
c00202cb:	83 ec 0c             	sub    esp,0xc
c00202ce:	ff 36                	push   DWORD PTR [esi]
c00202d0:	e8 55 f4 ff ff       	call   c001f72a <Vm::fpu32ToInternal(unsigned int)>
c00202d5:	e9 ae 01 00 00       	jmp    c0020488 <Vm::x87Handler(regs*)+0x970>
c00202da:	31 c0                	xor    eax,eax
c00202dc:	80 fa 07             	cmp    dl,0x7
c00202df:	0f 85 94 02 00 00    	jne    c0020579 <Vm::x87Handler(regs*)+0xa61>
c00202e5:	83 ec 0c             	sub    esp,0xc
c00202e8:	6a 00                	push   0x0
c00202ea:	e8 ec f6 ff ff       	call   c001f9db <Vm::fpuGetReg(int)>
c00202ef:	89 c7                	mov    edi,eax
c00202f1:	89 d5                	mov    ebp,edx
c00202f3:	58                   	pop    eax
c00202f4:	ff 36                	push   DWORD PTR [esi]
c00202f6:	e8 2f f4 ff ff       	call   c001f72a <Vm::fpu32ToInternal(unsigned int)>
c00202fb:	e9 cb 01 00 00       	jmp    c00204cb <Vm::x87Handler(regs*)+0x9b3>
c0020300:	80 fa 03             	cmp    dl,0x3
c0020303:	0f 85 d3 01 00 00    	jne    c00204dc <Vm::x87Handler(regs*)+0x9c4>
c0020309:	e8 b8 f7 ff ff       	call   c001fac6 <Vm::fpuPop()>
c002030e:	51                   	push   ecx
c002030f:	51                   	push   ecx
c0020310:	e9 de 01 00 00       	jmp    c00204f3 <Vm::x87Handler(regs*)+0x9db>
c0020315:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020319:	80 fa 01             	cmp    dl,0x1
c002031c:	75 09                	jne    c0020327 <Vm::x87Handler(regs*)+0x80f>
c002031e:	57                   	push   edi
c002031f:	57                   	push   edi
c0020320:	8b 06                	mov    eax,DWORD PTR [esi]
c0020322:	e9 e3 01 00 00       	jmp    c002050a <Vm::x87Handler(regs*)+0x9f2>
c0020327:	80 fa 04             	cmp    dl,0x4
c002032a:	75 12                	jne    c002033e <Vm::x87Handler(regs*)+0x826>
c002032c:	31 d2                	xor    edx,edx
c002032e:	51                   	push   ecx
c002032f:	51                   	push   ecx
c0020330:	8b 06                	mov    eax,DWORD PTR [esi]
c0020332:	52                   	push   edx
c0020333:	50                   	push   eax
c0020334:	e8 d0 f4 ff ff       	call   c001f809 <Vm::fpuLongToFloat(long long)>
c0020339:	e9 ee 00 00 00       	jmp    c002042c <Vm::x87Handler(regs*)+0x914>
c002033e:	31 c0                	xor    eax,eax
c0020340:	80 fa 07             	cmp    dl,0x7
c0020343:	0f 85 30 02 00 00    	jne    c0020579 <Vm::x87Handler(regs*)+0xa61>
c0020349:	83 ec 0c             	sub    esp,0xc
c002034c:	6a 00                	push   0x0
c002034e:	e8 88 f6 ff ff       	call   c001f9db <Vm::fpuGetReg(int)>
c0020353:	89 c7                	mov    edi,eax
c0020355:	89 d5                	mov    ebp,edx
c0020357:	58                   	pop    eax
c0020358:	8b 06                	mov    eax,DWORD PTR [esi]
c002035a:	5a                   	pop    edx
c002035b:	31 d2                	xor    edx,edx
c002035d:	52                   	push   edx
c002035e:	50                   	push   eax
c002035f:	e8 a5 f4 ff ff       	call   c001f809 <Vm::fpuLongToFloat(long long)>
c0020364:	e9 62 01 00 00       	jmp    c00204cb <Vm::x87Handler(regs*)+0x9b3>
c0020369:	84 d2                	test   dl,dl
c002036b:	75 0d                	jne    c002037a <Vm::x87Handler(regs*)+0x862>
c002036d:	31 d2                	xor    edx,edx
c002036f:	55                   	push   ebp
c0020370:	55                   	push   ebp
c0020371:	8b 06                	mov    eax,DWORD PTR [esi]
c0020373:	52                   	push   edx
c0020374:	50                   	push   eax
c0020375:	e9 d3 01 00 00       	jmp    c002054d <Vm::x87Handler(regs*)+0xa35>
c002037a:	31 c0                	xor    eax,eax
c002037c:	80 fa 02             	cmp    dl,0x2
c002037f:	0f 85 f4 01 00 00    	jne    c0020579 <Vm::x87Handler(regs*)+0xa61>
c0020385:	83 ec 0c             	sub    esp,0xc
c0020388:	6a 00                	push   0x0
c002038a:	e8 4c f6 ff ff       	call   c001f9db <Vm::fpuGetReg(int)>
c002038f:	59                   	pop    ecx
c0020390:	5f                   	pop    edi
c0020391:	e9 6a f9 ff ff       	jmp    c001fd00 <Vm::x87Handler(regs*)+0x1e8>
c0020396:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002039a:	84 d2                	test   dl,dl
c002039c:	75 2a                	jne    c00203c8 <Vm::x87Handler(regs*)+0x8b0>
c002039e:	50                   	push   eax
c002039f:	50                   	push   eax
c00203a0:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203a3:	ff 36                	push   DWORD PTR [esi]
c00203a5:	e8 c5 f3 ff ff       	call   c001f76f <Vm::fpu64ToInternal(unsigned long long)>
c00203aa:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203b1:	89 c6                	mov    esi,eax
c00203b3:	89 d7                	mov    edi,edx
c00203b5:	e8 21 f6 ff ff       	call   c001f9db <Vm::fpuGetReg(int)>
c00203ba:	57                   	push   edi
c00203bb:	56                   	push   esi
c00203bc:	52                   	push   edx
c00203bd:	50                   	push   eax
c00203be:	e8 8e f5 ff ff       	call   c001f951 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00203c3:	e9 64 01 00 00       	jmp    c002052c <Vm::x87Handler(regs*)+0xa14>
c00203c8:	80 fa 01             	cmp    dl,0x1
c00203cb:	75 11                	jne    c00203de <Vm::x87Handler(regs*)+0x8c6>
c00203cd:	50                   	push   eax
c00203ce:	50                   	push   eax
c00203cf:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203d2:	ff 36                	push   DWORD PTR [esi]
c00203d4:	e8 96 f3 ff ff       	call   c001f76f <Vm::fpu64ToInternal(unsigned long long)>
c00203d9:	e9 35 01 00 00       	jmp    c0020513 <Vm::x87Handler(regs*)+0x9fb>
c00203de:	80 fa 02             	cmp    dl,0x2
c00203e1:	0f 85 54 f9 ff ff    	jne    c001fd3b <Vm::x87Handler(regs*)+0x223>
c00203e7:	55                   	push   ebp
c00203e8:	55                   	push   ebp
c00203e9:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203ec:	ff 36                	push   DWORD PTR [esi]
c00203ee:	e8 7c f3 ff ff       	call   c001f76f <Vm::fpu64ToInternal(unsigned long long)>
c00203f3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203fa:	89 c6                	mov    esi,eax
c00203fc:	89 d7                	mov    edi,edx
c00203fe:	e8 d8 f5 ff ff       	call   c001f9db <Vm::fpuGetReg(int)>
c0020403:	57                   	push   edi
c0020404:	56                   	push   esi
c0020405:	52                   	push   edx
c0020406:	50                   	push   eax
c0020407:	e8 f2 f4 ff ff       	call   c001f8fe <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002040c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020410:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020413:	83 c4 20             	add    esp,0x20
c0020416:	e9 74 f7 ff ff       	jmp    c001fb8f <Vm::x87Handler(regs*)+0x77>
c002041b:	80 fa 04             	cmp    dl,0x4
c002041e:	75 2a                	jne    c002044a <Vm::x87Handler(regs*)+0x932>
c0020420:	51                   	push   ecx
c0020421:	51                   	push   ecx
c0020422:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020425:	ff 36                	push   DWORD PTR [esi]
c0020427:	e8 43 f3 ff ff       	call   c001f76f <Vm::fpu64ToInternal(unsigned long long)>
c002042c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020433:	89 c6                	mov    esi,eax
c0020435:	89 d7                	mov    edi,edx
c0020437:	e8 9f f5 ff ff       	call   c001f9db <Vm::fpuGetReg(int)>
c002043c:	57                   	push   edi
c002043d:	56                   	push   esi
c002043e:	52                   	push   edx
c002043f:	50                   	push   eax
c0020440:	e8 36 f5 ff ff       	call   c001f97b <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020445:	e9 e2 00 00 00       	jmp    c002052c <Vm::x87Handler(regs*)+0xa14>
c002044a:	80 fa 05             	cmp    dl,0x5
c002044d:	75 28                	jne    c0020477 <Vm::x87Handler(regs*)+0x95f>
c002044f:	83 ec 0c             	sub    esp,0xc
c0020452:	6a 00                	push   0x0
c0020454:	e8 82 f5 ff ff       	call   c001f9db <Vm::fpuGetReg(int)>
c0020459:	89 c7                	mov    edi,eax
c002045b:	89 d5                	mov    ebp,edx
c002045d:	58                   	pop    eax
c002045e:	5a                   	pop    edx
c002045f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020462:	ff 36                	push   DWORD PTR [esi]
c0020464:	e8 06 f3 ff ff       	call   c001f76f <Vm::fpu64ToInternal(unsigned long long)>
c0020469:	83 c4 10             	add    esp,0x10
c002046c:	55                   	push   ebp
c002046d:	57                   	push   edi
c002046e:	52                   	push   edx
c002046f:	50                   	push   eax
c0020470:	e8 06 f5 ff ff       	call   c001f97b <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020475:	eb 60                	jmp    c00204d7 <Vm::x87Handler(regs*)+0x9bf>
c0020477:	80 fa 06             	cmp    dl,0x6
c002047a:	75 2a                	jne    c00204a6 <Vm::x87Handler(regs*)+0x98e>
c002047c:	51                   	push   ecx
c002047d:	51                   	push   ecx
c002047e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020481:	ff 36                	push   DWORD PTR [esi]
c0020483:	e8 e7 f2 ff ff       	call   c001f76f <Vm::fpu64ToInternal(unsigned long long)>
c0020488:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002048f:	89 c6                	mov    esi,eax
c0020491:	89 d7                	mov    edi,edx
c0020493:	e8 43 f5 ff ff       	call   c001f9db <Vm::fpuGetReg(int)>
c0020498:	57                   	push   edi
c0020499:	56                   	push   esi
c002049a:	52                   	push   edx
c002049b:	50                   	push   eax
c002049c:	e8 08 f5 ff ff       	call   c001f9a9 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00204a1:	e9 86 00 00 00       	jmp    c002052c <Vm::x87Handler(regs*)+0xa14>
c00204a6:	31 c0                	xor    eax,eax
c00204a8:	80 fa 07             	cmp    dl,0x7
c00204ab:	0f 85 c8 00 00 00    	jne    c0020579 <Vm::x87Handler(regs*)+0xa61>
c00204b1:	83 ec 0c             	sub    esp,0xc
c00204b4:	6a 00                	push   0x0
c00204b6:	e8 20 f5 ff ff       	call   c001f9db <Vm::fpuGetReg(int)>
c00204bb:	89 c7                	mov    edi,eax
c00204bd:	89 d5                	mov    ebp,edx
c00204bf:	58                   	pop    eax
c00204c0:	5a                   	pop    edx
c00204c1:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00204c4:	ff 36                	push   DWORD PTR [esi]
c00204c6:	e8 a4 f2 ff ff       	call   c001f76f <Vm::fpu64ToInternal(unsigned long long)>
c00204cb:	83 c4 10             	add    esp,0x10
c00204ce:	55                   	push   ebp
c00204cf:	57                   	push   edi
c00204d0:	52                   	push   edx
c00204d1:	50                   	push   eax
c00204d2:	e8 d2 f4 ff ff       	call   c001f9a9 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00204d7:	83 c4 0c             	add    esp,0xc
c00204da:	eb 53                	jmp    c002052f <Vm::x87Handler(regs*)+0xa17>
c00204dc:	31 c0                	xor    eax,eax
c00204de:	80 fa 02             	cmp    dl,0x2
c00204e1:	0f 85 92 00 00 00    	jne    c0020579 <Vm::x87Handler(regs*)+0xa61>
c00204e7:	83 ec 0c             	sub    esp,0xc
c00204ea:	6a 00                	push   0x0
c00204ec:	e8 ea f4 ff ff       	call   c001f9db <Vm::fpuGetReg(int)>
c00204f1:	59                   	pop    ecx
c00204f2:	5f                   	pop    edi
c00204f3:	52                   	push   edx
c00204f4:	50                   	push   eax
c00204f5:	e8 27 f2 ff ff       	call   c001f721 <Vm::fpuInternalTo64(unsigned long long)>
c00204fa:	eb 70                	jmp    c002056c <Vm::x87Handler(regs*)+0xa54>
c00204fc:	31 c0                	xor    eax,eax
c00204fe:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0020503:	75 74                	jne    c0020579 <Vm::x87Handler(regs*)+0xa61>
c0020505:	50                   	push   eax
c0020506:	50                   	push   eax
c0020507:	0f b7 06             	movzx  eax,WORD PTR [esi]
c002050a:	31 d2                	xor    edx,edx
c002050c:	52                   	push   edx
c002050d:	50                   	push   eax
c002050e:	e8 f6 f2 ff ff       	call   c001f809 <Vm::fpuLongToFloat(long long)>
c0020513:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002051a:	89 c6                	mov    esi,eax
c002051c:	89 d7                	mov    edi,edx
c002051e:	e8 b8 f4 ff ff       	call   c001f9db <Vm::fpuGetReg(int)>
c0020523:	57                   	push   edi
c0020524:	56                   	push   esi
c0020525:	52                   	push   edx
c0020526:	50                   	push   eax
c0020527:	e8 5e f4 ff ff       	call   c001f98a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c002052c:	83 c4 1c             	add    esp,0x1c
c002052f:	52                   	push   edx
c0020530:	50                   	push   eax
c0020531:	6a 00                	push   0x0
c0020533:	e8 e6 f4 ff ff       	call   c001fa1e <Vm::fpuSetReg(int, unsigned long long)>
c0020538:	e9 f2 f7 ff ff       	jmp    c001fd2f <Vm::x87Handler(regs*)+0x217>
c002053d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020541:	80 fa 05             	cmp    dl,0x5
c0020544:	75 11                	jne    c0020557 <Vm::x87Handler(regs*)+0xa3f>
c0020546:	55                   	push   ebp
c0020547:	55                   	push   ebp
c0020548:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002054b:	ff 36                	push   DWORD PTR [esi]
c002054d:	e8 81 f2 ff ff       	call   c001f7d3 <Vm::fpuULongToFloat(unsigned long long)>
c0020552:	e9 cf f7 ff ff       	jmp    c001fd26 <Vm::x87Handler(regs*)+0x20e>
c0020557:	31 c0                	xor    eax,eax
c0020559:	80 fa 07             	cmp    dl,0x7
c002055c:	75 1b                	jne    c0020579 <Vm::x87Handler(regs*)+0xa61>
c002055e:	e8 63 f5 ff ff       	call   c001fac6 <Vm::fpuPop()>
c0020563:	51                   	push   ecx
c0020564:	51                   	push   ecx
c0020565:	52                   	push   edx
c0020566:	50                   	push   eax
c0020567:	e8 0c f2 ff ff       	call   c001f778 <Vm::fpuFloatToLong(unsigned long long)>
c002056c:	83 c4 10             	add    esp,0x10
c002056f:	89 06                	mov    DWORD PTR [esi],eax
c0020571:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0020574:	e9 f8 f7 ff ff       	jmp    c001fd71 <Vm::x87Handler(regs*)+0x259>
c0020579:	83 c4 1c             	add    esp,0x1c
c002057c:	5b                   	pop    ebx
c002057d:	5e                   	pop    esi
c002057e:	5f                   	pop    edi
c002057f:	5d                   	pop    ebp
c0020580:	c3                   	ret    

c0020581 <__static_initialization_and_destruction_0(int, int)>:
c0020581:	83 ec 0c             	sub    esp,0xc
c0020584:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0020589:	75 1a                	jne    c00205a5 <__static_initialization_and_destruction_0(int, int)+0x24>
c002058b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0020593:	75 10                	jne    c00205a5 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020595:	83 ec 0c             	sub    esp,0xc
c0020598:	68 a0 1a 03 c0       	push   0xc0031aa0
c002059d:	e8 0e 88 00 00       	call   c0028db0 <Vm::_FPUState::_FPUState()>
c00205a2:	83 c4 10             	add    esp,0x10
c00205a5:	90                   	nop
c00205a6:	83 c4 0c             	add    esp,0xc
c00205a9:	c3                   	ret    

c00205aa <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c00205aa:	83 ec 0c             	sub    esp,0xc
c00205ad:	83 ec 08             	sub    esp,0x8
c00205b0:	68 ff ff 00 00       	push   0xffff
c00205b5:	6a 01                	push   0x1
c00205b7:	e8 c5 ff ff ff       	call   c0020581 <__static_initialization_and_destruction_0(int, int)>
c00205bc:	83 c4 10             	add    esp,0x10
c00205bf:	83 c4 0c             	add    esp,0xc
c00205c2:	c3                   	ret    
c00205c3:	90                   	nop

c00205c4 <FAT::getName()>:
c00205c4:	b8 a4 c8 02 c0       	mov    eax,0xc002c8a4
c00205c9:	c3                   	ret    

c00205ca <FAT::tell(void*, unsigned long long*)>:
c00205ca:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00205cf:	75 06                	jne    c00205d7 <FAT::tell(void*, unsigned long long*)+0xd>
c00205d1:	b8 04 00 00 00       	mov    eax,0x4
c00205d6:	c3                   	ret    
c00205d7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00205dc:	75 06                	jne    c00205e4 <FAT::tell(void*, unsigned long long*)+0x1a>
c00205de:	b8 04 00 00 00       	mov    eax,0x4
c00205e3:	c3                   	ret    
c00205e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00205e8:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c00205eb:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00205ee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00205f2:	89 01                	mov    DWORD PTR [ecx],eax
c00205f4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00205f7:	b8 00 00 00 00       	mov    eax,0x0
c00205fc:	c3                   	ret    
c00205fd:	90                   	nop

c00205fe <FAT::stat(void*, unsigned long long*)>:
c00205fe:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020603:	75 06                	jne    c002060b <FAT::stat(void*, unsigned long long*)+0xd>
c0020605:	b8 04 00 00 00       	mov    eax,0x4
c002060a:	c3                   	ret    
c002060b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020610:	75 06                	jne    c0020618 <FAT::stat(void*, unsigned long long*)+0x1a>
c0020612:	b8 04 00 00 00       	mov    eax,0x4
c0020617:	c3                   	ret    
c0020618:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002061c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c002061f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020622:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020626:	89 01                	mov    DWORD PTR [ecx],eax
c0020628:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002062b:	b8 00 00 00 00       	mov    eax,0x0
c0020630:	c3                   	ret    
c0020631:	90                   	nop

c0020632 <FAT::~FAT()>:
c0020632:	83 ec 0c             	sub    esp,0xc
c0020635:	ba 28 c9 02 c0       	mov    edx,0xc002c928
c002063a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002063e:	89 10                	mov    DWORD PTR [eax],edx
c0020640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020644:	83 ec 0c             	sub    esp,0xc
c0020647:	50                   	push   eax
c0020648:	e8 c5 2c ff ff       	call   c0013312 <Filesystem::~Filesystem()>
c002064d:	83 c4 10             	add    esp,0x10
c0020650:	90                   	nop
c0020651:	83 c4 0c             	add    esp,0xc
c0020654:	c3                   	ret    
c0020655:	90                   	nop

c0020656 <FAT::~FAT()>:
c0020656:	83 ec 0c             	sub    esp,0xc
c0020659:	83 ec 0c             	sub    esp,0xc
c002065c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020660:	e8 cd ff ff ff       	call   c0020632 <FAT::~FAT()>
c0020665:	83 c4 10             	add    esp,0x10
c0020668:	83 ec 08             	sub    esp,0x8
c002066b:	6a 08                	push   0x8
c002066d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020671:	e8 94 28 ff ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c0020676:	83 c4 10             	add    esp,0x10
c0020679:	83 c4 0c             	add    esp,0xc
c002067c:	c3                   	ret    
c002067d:	90                   	nop

c002067e <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c002067e:	83 ec 1c             	sub    esp,0x1c
c0020681:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0020688:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c002068d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020691:	8b 04 85 20 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce4e0]
c0020698:	83 f8 ff             	cmp    eax,0xffffffff
c002069b:	75 34                	jne    c00206d1 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c002069d:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00206a1:	88 c2                	mov    dl,al
c00206a3:	a1 00 1b 03 c0       	mov    eax,ds:0xc0031b00
c00206a8:	01 d0                	add    eax,edx
c00206aa:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00206ae:	8b 15 00 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b00
c00206b4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00206b8:	89 14 85 20 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce4e0],edx
c00206bf:	a1 00 1b 03 c0       	mov    eax,ds:0xc0031b00
c00206c4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00206c8:	89 14 85 a0 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce460],edx
c00206cf:	eb 17                	jmp    c00206e8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c00206d1:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00206d5:	88 c2                	mov    dl,al
c00206d7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00206db:	8b 04 85 20 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce4e0]
c00206e2:	01 d0                	add    eax,edx
c00206e4:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00206e8:	83 ec 04             	sub    esp,0x4
c00206eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00206ef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00206f3:	8d 44 24 15          	lea    eax,[esp+0x15]
c00206f7:	50                   	push   eax
c00206f8:	e8 3b 66 fe ff       	call   c0006d38 <f_getlabel>
c00206fd:	83 c4 10             	add    esp,0x10
c0020700:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020704:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020709:	75 07                	jne    c0020712 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c002070b:	b8 00 00 00 00       	mov    eax,0x0
c0020710:	eb 05                	jmp    c0020717 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020712:	b8 01 00 00 00       	mov    eax,0x1
c0020717:	83 c4 1c             	add    esp,0x1c
c002071a:	c3                   	ret    
c002071b:	90                   	nop

c002071c <FAT::setlabel(LogicalDisk*, int, char*)>:
c002071c:	57                   	push   edi
c002071d:	83 ec 58             	sub    esp,0x58
c0020720:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0020728:	8d 54 24 10          	lea    edx,[esp+0x10]
c002072c:	b9 0f 00 00 00       	mov    ecx,0xf
c0020731:	b8 00 00 00 00       	mov    eax,0x0
c0020736:	fc                   	cld    
c0020737:	89 d7                	mov    edi,edx
c0020739:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002073b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002073f:	8b 04 85 20 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce4e0]
c0020746:	83 f8 ff             	cmp    eax,0xffffffff
c0020749:	75 34                	jne    c002077f <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c002074b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002074f:	88 c2                	mov    dl,al
c0020751:	a1 00 1b 03 c0       	mov    eax,ds:0xc0031b00
c0020756:	01 d0                	add    eax,edx
c0020758:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002075c:	8b 15 00 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b00
c0020762:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020766:	89 14 85 20 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce4e0],edx
c002076d:	a1 00 1b 03 c0       	mov    eax,ds:0xc0031b00
c0020772:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0020776:	89 14 85 a0 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce460],edx
c002077d:	eb 17                	jmp    c0020796 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c002077f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020783:	88 c2                	mov    dl,al
c0020785:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020789:	8b 04 85 20 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce4e0]
c0020790:	01 d0                	add    eax,edx
c0020792:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020796:	83 ec 08             	sub    esp,0x8
c0020799:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c002079d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00207a1:	50                   	push   eax
c00207a2:	e8 cd 01 fe ff       	call   c0000974 <strcat>
c00207a7:	83 c4 10             	add    esp,0x10
c00207aa:	83 ec 0c             	sub    esp,0xc
c00207ad:	8d 44 24 18          	lea    eax,[esp+0x18]
c00207b1:	50                   	push   eax
c00207b2:	e8 6f 67 fe ff       	call   c0006f26 <f_setlabel>
c00207b7:	83 c4 10             	add    esp,0x10
c00207ba:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00207be:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00207c3:	75 07                	jne    c00207cc <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c00207c5:	b8 00 00 00 00       	mov    eax,0x0
c00207ca:	eb 05                	jmp    c00207d1 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c00207cc:	b8 01 00 00 00       	mov    eax,0x1
c00207d1:	83 c4 58             	add    esp,0x58
c00207d4:	5f                   	pop    edi
c00207d5:	c3                   	ret    

c00207d6 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00207d6:	83 ec 2c             	sub    esp,0x2c
c00207d9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00207e1:	83 ec 08             	sub    esp,0x8
c00207e4:	68 c8 c8 02 c0       	push   0xc002c8c8
c00207e9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00207ed:	e8 ce 00 fe ff       	call   c00008c0 <strcmp>
c00207f2:	83 c4 10             	add    esp,0x10
c00207f5:	85 c0                	test   eax,eax
c00207f7:	0f 94 c0             	sete   al
c00207fa:	84 c0                	test   al,al
c00207fc:	74 0d                	je     c002080b <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c00207fe:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020806:	e9 a6 00 00 00       	jmp    c00208b1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002080b:	83 ec 08             	sub    esp,0x8
c002080e:	68 ba c8 02 c0       	push   0xc002c8ba
c0020813:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020817:	e8 a4 00 fe ff       	call   c00008c0 <strcmp>
c002081c:	83 c4 10             	add    esp,0x10
c002081f:	85 c0                	test   eax,eax
c0020821:	0f 94 c0             	sete   al
c0020824:	84 c0                	test   al,al
c0020826:	74 0a                	je     c0020832 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0020828:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020830:	eb 7f                	jmp    c00208b1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020832:	83 ec 08             	sub    esp,0x8
c0020835:	68 c0 c8 02 c0       	push   0xc002c8c0
c002083a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002083e:	e8 7d 00 fe ff       	call   c00008c0 <strcmp>
c0020843:	83 c4 10             	add    esp,0x10
c0020846:	85 c0                	test   eax,eax
c0020848:	0f 94 c0             	sete   al
c002084b:	84 c0                	test   al,al
c002084d:	74 0a                	je     c0020859 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c002084f:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020857:	eb 58                	jmp    c00208b1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020859:	83 ec 08             	sub    esp,0x8
c002085c:	68 0c 95 02 c0       	push   0xc002950c
c0020861:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020865:	e8 56 00 fe ff       	call   c00008c0 <strcmp>
c002086a:	83 c4 10             	add    esp,0x10
c002086d:	85 c0                	test   eax,eax
c002086f:	0f 94 c0             	sete   al
c0020872:	84 c0                	test   al,al
c0020874:	74 0a                	je     c0020880 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0020876:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c002087e:	eb 31                	jmp    c00208b1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020880:	83 ec 08             	sub    esp,0x8
c0020883:	68 c6 c8 02 c0       	push   0xc002c8c6
c0020888:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002088c:	e8 2f 00 fe ff       	call   c00008c0 <strcmp>
c0020891:	83 c4 10             	add    esp,0x10
c0020894:	85 c0                	test   eax,eax
c0020896:	0f 94 c0             	sete   al
c0020899:	84 c0                	test   al,al
c002089b:	74 0a                	je     c00208a7 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c002089d:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00208a5:	eb 0a                	jmp    c00208b1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00208a7:	b8 08 00 00 00       	mov    eax,0x8
c00208ac:	e9 04 01 00 00       	jmp    c00209b5 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00208b1:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00208b8:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00208bd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00208c1:	8b 04 85 20 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce4e0]
c00208c8:	83 f8 ff             	cmp    eax,0xffffffff
c00208cb:	75 34                	jne    c0020901 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c00208cd:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00208d1:	88 c2                	mov    dl,al
c00208d3:	a1 00 1b 03 c0       	mov    eax,ds:0xc0031b00
c00208d8:	01 d0                	add    eax,edx
c00208da:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00208de:	8b 15 00 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b00
c00208e4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00208e8:	89 14 85 20 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce4e0],edx
c00208ef:	a1 00 1b 03 c0       	mov    eax,ds:0xc0031b00
c00208f4:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00208f8:	89 14 85 a0 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce460],edx
c00208ff:	eb 17                	jmp    c0020918 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020901:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020905:	88 c2                	mov    dl,al
c0020907:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002090b:	8b 04 85 20 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce4e0]
c0020912:	01 d0                	add    eax,edx
c0020914:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020918:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002091c:	88 04 24             	mov    BYTE PTR [esp],al
c002091f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020923:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020927:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002092f:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0020934:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c002093c:	83 ec 0c             	sub    esp,0xc
c002093f:	68 00 20 00 00       	push   0x2000
c0020944:	e8 fa ee fe ff       	call   c000f843 <malloc>
c0020949:	83 c4 10             	add    esp,0x10
c002094c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020950:	68 00 20 00 00       	push   0x2000
c0020955:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020959:	8d 44 24 08          	lea    eax,[esp+0x8]
c002095d:	50                   	push   eax
c002095e:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0020962:	50                   	push   eax
c0020963:	e8 09 6a fe ff       	call   c0007371 <f_mkfs>
c0020968:	83 c4 10             	add    esp,0x10
c002096b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002096f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020974:	75 07                	jne    c002097d <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0020976:	b8 00 00 00 00       	mov    eax,0x0
c002097b:	eb 38                	jmp    c00209b5 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c002097d:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0020982:	75 17                	jne    c002099b <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0020984:	83 ec 0c             	sub    esp,0xc
c0020987:	68 f8 c8 02 c0       	push   0xc002c8f8
c002098c:	e8 59 26 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0020991:	83 c4 10             	add    esp,0x10
c0020994:	b8 09 00 00 00       	mov    eax,0x9
c0020999:	eb 1a                	jmp    c00209b5 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c002099b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002099f:	83 ec 08             	sub    esp,0x8
c00209a2:	50                   	push   eax
c00209a3:	68 cc c8 02 c0       	push   0xc002c8cc
c00209a8:	e8 3d 26 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c00209ad:	83 c4 10             	add    esp,0x10
c00209b0:	b8 01 00 00 00       	mov    eax,0x1
c00209b5:	83 c4 2c             	add    esp,0x2c
c00209b8:	c3                   	ret    
c00209b9:	90                   	nop

c00209ba <FAT::tryMount(LogicalDisk*, int)>:
c00209ba:	81 ec 6c 03 00 00    	sub    esp,0x36c
c00209c0:	a1 00 1b 03 c0       	mov    eax,ds:0xc0031b00
c00209c5:	83 f8 14             	cmp    eax,0x14
c00209c8:	75 17                	jne    c00209e1 <FAT::tryMount(LogicalDisk*, int)+0x27>
c00209ca:	83 ec 0c             	sub    esp,0xc
c00209cd:	68 de c8 02 c0       	push   0xc002c8de
c00209d2:	e8 b8 9c ff ff       	call   c001a68f <Krnl::panic(char const*)>
c00209d7:	83 c4 10             	add    esp,0x10
c00209da:	b0 00                	mov    al,0x0
c00209dc:	e9 d7 01 00 00       	jmp    c0020bb8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00209e1:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00209e8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00209ee:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00209f4:	3d 00 02 00 00       	cmp    eax,0x200
c00209f9:	74 07                	je     c0020a02 <FAT::tryMount(LogicalDisk*, int)+0x48>
c00209fb:	b0 00                	mov    al,0x0
c00209fd:	e9 b6 01 00 00       	jmp    c0020bb8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a02:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020a0a:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020a11:	8b 04 85 20 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce4e0]
c0020a18:	83 f8 ff             	cmp    eax,0xffffffff
c0020a1b:	74 07                	je     c0020a24 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020a1d:	b0 01                	mov    al,0x1
c0020a1f:	e9 94 01 00 00       	jmp    c0020bb8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a24:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020a2e:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020a36:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020a3d:	88 c2                	mov    dl,al
c0020a3f:	a1 00 1b 03 c0       	mov    eax,ds:0xc0031b00
c0020a44:	01 d0                	add    eax,edx
c0020a46:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020a4d:	8b 15 00 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b00
c0020a53:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020a5a:	89 14 85 20 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce4e0],edx
c0020a61:	a1 00 1b 03 c0       	mov    eax,ds:0xc0031b00
c0020a66:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0020a6d:	89 14 85 a0 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce460],edx
c0020a74:	83 ec 0c             	sub    esp,0xc
c0020a77:	68 54 02 00 00       	push   0x254
c0020a7c:	e8 c2 ed fe ff       	call   c000f843 <malloc>
c0020a81:	83 c4 10             	add    esp,0x10
c0020a84:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0020a8b:	83 ec 04             	sub    esp,0x4
c0020a8e:	6a 00                	push   0x0
c0020a90:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020a97:	50                   	push   eax
c0020a98:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020a9f:	e8 8b 44 fe ff       	call   c0004f2f <f_mount>
c0020aa4:	83 c4 10             	add    esp,0x10
c0020aa7:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020aae:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020ab6:	74 19                	je     c0020ad1 <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020ab8:	83 ec 0c             	sub    esp,0xc
c0020abb:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020ac2:	e8 9c ed fe ff       	call   c000f863 <rfree>
c0020ac7:	83 c4 10             	add    esp,0x10
c0020aca:	b0 00                	mov    al,0x0
c0020acc:	e9 e7 00 00 00       	jmp    c0020bb8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020ad1:	83 ec 04             	sub    esp,0x4
c0020ad4:	68 00 01 00 00       	push   0x100
c0020ad9:	6a 00                	push   0x0
c0020adb:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020ae2:	50                   	push   eax
c0020ae3:	e8 90 fc fd ff       	call   c0000778 <memset>
c0020ae8:	83 c4 10             	add    esp,0x10
c0020aeb:	83 ec 08             	sub    esp,0x8
c0020aee:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020af5:	50                   	push   eax
c0020af6:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020afd:	50                   	push   eax
c0020afe:	e8 71 fe fd ff       	call   c0000974 <strcat>
c0020b03:	83 c4 10             	add    esp,0x10
c0020b06:	83 ec 08             	sub    esp,0x8
c0020b09:	68 ec c8 02 c0       	push   0xc002c8ec
c0020b0e:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020b15:	50                   	push   eax
c0020b16:	e8 59 fe fd ff       	call   c0000974 <strcat>
c0020b1b:	83 c4 10             	add    esp,0x10
c0020b1e:	83 ec 04             	sub    esp,0x4
c0020b21:	6a 01                	push   0x1
c0020b23:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020b2a:	50                   	push   eax
c0020b2b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020b2f:	50                   	push   eax
c0020b30:	e8 5c 44 fe ff       	call   c0004f91 <f_open>
c0020b35:	83 c4 10             	add    esp,0x10
c0020b38:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020b3f:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020b46:	85 c0                	test   eax,eax
c0020b48:	74 0a                	je     c0020b54 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020b4a:	78 2d                	js     c0020b79 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020b4c:	83 e8 04             	sub    eax,0x4
c0020b4f:	83 f8 01             	cmp    eax,0x1
c0020b52:	77 25                	ja     c0020b79 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020b54:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020b5c:	83 ec 0c             	sub    esp,0xc
c0020b5f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020b63:	50                   	push   eax
c0020b64:	e8 7a 4f fe ff       	call   c0005ae3 <f_close>
c0020b69:	83 c4 10             	add    esp,0x10
c0020b6c:	90                   	nop
c0020b6d:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020b75:	74 3a                	je     c0020bb1 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020b77:	eb 2d                	jmp    c0020ba6 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020b79:	83 ec 0c             	sub    esp,0xc
c0020b7c:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020b83:	e8 db ec fe ff       	call   c000f863 <rfree>
c0020b88:	83 c4 10             	add    esp,0x10
c0020b8b:	83 ec 04             	sub    esp,0x4
c0020b8e:	6a 00                	push   0x0
c0020b90:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020b97:	50                   	push   eax
c0020b98:	6a 00                	push   0x0
c0020b9a:	e8 90 43 fe ff       	call   c0004f2f <f_mount>
c0020b9f:	83 c4 10             	add    esp,0x10
c0020ba2:	b0 00                	mov    al,0x0
c0020ba4:	eb 12                	jmp    c0020bb8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020ba6:	a1 00 1b 03 c0       	mov    eax,ds:0xc0031b00
c0020bab:	40                   	inc    eax
c0020bac:	a3 00 1b 03 c0       	mov    ds:0xc0031b00,eax
c0020bb1:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020bb8:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020bbe:	c3                   	ret    
c0020bbf:	90                   	nop

c0020bc0 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020bc0:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0020bc6:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0020bce:	74 0a                	je     c0020bda <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0020bd0:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0020bd8:	75 0a                	jne    c0020be4 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0020bda:	b8 04 00 00 00       	mov    eax,0x4
c0020bdf:	e9 db 00 00 00       	jmp    c0020cbf <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020be4:	83 ec 08             	sub    esp,0x8
c0020be7:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020bee:	50                   	push   eax
c0020bef:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0020bf6:	e8 f2 54 fe ff       	call   c00060ed <f_readdir>
c0020bfb:	83 c4 10             	add    esp,0x10
c0020bfe:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0020c05:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0020c0b:	83 ec 0c             	sub    esp,0xc
c0020c0e:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020c15:	83 c0 1a             	add    eax,0x1a
c0020c18:	50                   	push   eax
c0020c19:	e8 76 fb fd ff       	call   c0000794 <strlen>
c0020c1e:	83 c4 10             	add    esp,0x10
c0020c21:	ba 00 00 00 00       	mov    edx,0x0
c0020c26:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020c2a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020c2e:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0020c35:	0f b6 c0             	movzx  eax,al
c0020c38:	83 e0 10             	and    eax,0x10
c0020c3b:	74 07                	je     c0020c44 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0020c3d:	b8 02 00 00 00       	mov    eax,0x2
c0020c42:	eb 05                	jmp    c0020c49 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0020c44:	b8 01 00 00 00       	mov    eax,0x1
c0020c49:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c4d:	83 ec 08             	sub    esp,0x8
c0020c50:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020c57:	83 c0 1a             	add    eax,0x1a
c0020c5a:	50                   	push   eax
c0020c5b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020c5f:	83 c0 10             	add    eax,0x10
c0020c62:	50                   	push   eax
c0020c63:	e8 cc fb fd ff       	call   c0000834 <strcpy>
c0020c68:	83 c4 10             	add    esp,0x10
c0020c6b:	83 ec 04             	sub    esp,0x4
c0020c6e:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0020c75:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c79:	50                   	push   eax
c0020c7a:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0020c81:	e8 be fa fd ff       	call   c0000744 <memcpy>
c0020c86:	83 c4 10             	add    esp,0x10
c0020c89:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0020c90:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020c96:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0020c9d:	84 c0                	test   al,al
c0020c9f:	75 07                	jne    c0020ca8 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0020ca1:	b8 07 00 00 00       	mov    eax,0x7
c0020ca6:	eb 17                	jmp    c0020cbf <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020ca8:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0020caf:	85 c0                	test   eax,eax
c0020cb1:	75 07                	jne    c0020cba <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0020cb3:	b8 00 00 00 00       	mov    eax,0x0
c0020cb8:	eb 05                	jmp    c0020cbf <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020cba:	b8 01 00 00 00       	mov    eax,0x1
c0020cbf:	81 c4 3c 02 00 00    	add    esp,0x23c
c0020cc5:	c3                   	ret    

c0020cc6 <FAT::read(void*, unsigned long, void*, int*)>:
c0020cc6:	83 ec 1c             	sub    esp,0x1c
c0020cc9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020cce:	74 07                	je     c0020cd7 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020cd0:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020cd5:	75 07                	jne    c0020cde <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020cd7:	b8 04 00 00 00       	mov    eax,0x4
c0020cdc:	eb 3d                	jmp    c0020d1b <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020cde:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020ce2:	50                   	push   eax
c0020ce3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020ce7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020ceb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020cef:	e8 d9 46 fe ff       	call   c00053cd <f_read>
c0020cf4:	83 c4 10             	add    esp,0x10
c0020cf7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020cfb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020cff:	89 c2                	mov    edx,eax
c0020d01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020d05:	89 10                	mov    DWORD PTR [eax],edx
c0020d07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d0b:	85 c0                	test   eax,eax
c0020d0d:	75 07                	jne    c0020d16 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020d0f:	b8 00 00 00 00       	mov    eax,0x0
c0020d14:	eb 05                	jmp    c0020d1b <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020d16:	b8 01 00 00 00       	mov    eax,0x1
c0020d1b:	83 c4 1c             	add    esp,0x1c
c0020d1e:	c3                   	ret    
c0020d1f:	90                   	nop

c0020d20 <FAT::write(void*, unsigned long, void*, int*)>:
c0020d20:	83 ec 1c             	sub    esp,0x1c
c0020d23:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020d28:	74 07                	je     c0020d31 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020d2a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020d2f:	75 07                	jne    c0020d38 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020d31:	b8 04 00 00 00       	mov    eax,0x4
c0020d36:	eb 3d                	jmp    c0020d75 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020d38:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020d3c:	50                   	push   eax
c0020d3d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020d41:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020d45:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d49:	e8 ff 48 fe ff       	call   c000564d <f_write>
c0020d4e:	83 c4 10             	add    esp,0x10
c0020d51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d55:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020d59:	89 c2                	mov    edx,eax
c0020d5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020d5f:	89 10                	mov    DWORD PTR [eax],edx
c0020d61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d65:	85 c0                	test   eax,eax
c0020d67:	75 07                	jne    c0020d70 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020d69:	b8 00 00 00 00       	mov    eax,0x0
c0020d6e:	eb 05                	jmp    c0020d75 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020d70:	b8 01 00 00 00       	mov    eax,0x1
c0020d75:	83 c4 1c             	add    esp,0x1c
c0020d78:	c3                   	ret    
c0020d79:	90                   	nop

c0020d7a <FAT::close(void*)>:
c0020d7a:	83 ec 1c             	sub    esp,0x1c
c0020d7d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020d82:	75 07                	jne    c0020d8b <FAT::close(void*)+0x11>
c0020d84:	b8 04 00 00 00       	mov    eax,0x4
c0020d89:	eb 36                	jmp    c0020dc1 <FAT::close(void*)+0x47>
c0020d8b:	83 ec 0c             	sub    esp,0xc
c0020d8e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d92:	e8 4c 4d fe ff       	call   c0005ae3 <f_close>
c0020d97:	83 c4 10             	add    esp,0x10
c0020d9a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d9e:	83 ec 0c             	sub    esp,0xc
c0020da1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020da5:	e8 a9 ea fe ff       	call   c000f853 <free>
c0020daa:	83 c4 10             	add    esp,0x10
c0020dad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020db1:	85 c0                	test   eax,eax
c0020db3:	75 07                	jne    c0020dbc <FAT::close(void*)+0x42>
c0020db5:	b8 00 00 00 00       	mov    eax,0x0
c0020dba:	eb 05                	jmp    c0020dc1 <FAT::close(void*)+0x47>
c0020dbc:	b8 01 00 00 00       	mov    eax,0x1
c0020dc1:	83 c4 1c             	add    esp,0x1c
c0020dc4:	c3                   	ret    
c0020dc5:	90                   	nop

c0020dc6 <FAT::closeDir(void*)>:
c0020dc6:	83 ec 1c             	sub    esp,0x1c
c0020dc9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020dce:	75 07                	jne    c0020dd7 <FAT::closeDir(void*)+0x11>
c0020dd0:	b8 04 00 00 00       	mov    eax,0x4
c0020dd5:	eb 36                	jmp    c0020e0d <FAT::closeDir(void*)+0x47>
c0020dd7:	83 ec 0c             	sub    esp,0xc
c0020dda:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020dde:	e8 e8 52 fe ff       	call   c00060cb <f_closedir>
c0020de3:	83 c4 10             	add    esp,0x10
c0020de6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020dea:	83 ec 0c             	sub    esp,0xc
c0020ded:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020df1:	e8 5d ea fe ff       	call   c000f853 <free>
c0020df6:	83 c4 10             	add    esp,0x10
c0020df9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020dfd:	85 c0                	test   eax,eax
c0020dff:	75 07                	jne    c0020e08 <FAT::closeDir(void*)+0x42>
c0020e01:	b8 00 00 00 00       	mov    eax,0x0
c0020e06:	eb 05                	jmp    c0020e0d <FAT::closeDir(void*)+0x47>
c0020e08:	b8 01 00 00 00       	mov    eax,0x1
c0020e0d:	83 c4 1c             	add    esp,0x1c
c0020e10:	c3                   	ret    
c0020e11:	90                   	nop

c0020e12 <FAT::seek(void*, unsigned long long)>:
c0020e12:	83 ec 2c             	sub    esp,0x2c
c0020e15:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020e1d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020e21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020e25:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020e2a:	75 07                	jne    c0020e33 <FAT::seek(void*, unsigned long long)+0x21>
c0020e2c:	b8 04 00 00 00       	mov    eax,0x4
c0020e31:	eb 2f                	jmp    c0020e62 <FAT::seek(void*, unsigned long long)+0x50>
c0020e33:	83 ec 04             	sub    esp,0x4
c0020e36:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020e3a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020e3e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020e42:	e8 cb 4c fe ff       	call   c0005b12 <f_lseek>
c0020e47:	83 c4 10             	add    esp,0x10
c0020e4a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020e4e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020e52:	85 c0                	test   eax,eax
c0020e54:	75 07                	jne    c0020e5d <FAT::seek(void*, unsigned long long)+0x4b>
c0020e56:	b8 00 00 00 00       	mov    eax,0x0
c0020e5b:	eb 05                	jmp    c0020e62 <FAT::seek(void*, unsigned long long)+0x50>
c0020e5d:	b8 01 00 00 00       	mov    eax,0x1
c0020e62:	83 c4 2c             	add    esp,0x2c
c0020e65:	c3                   	ret    

c0020e66 <fatWrapperReadDisk>:
c0020e66:	83 ec 1c             	sub    esp,0x1c
c0020e69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e6d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020e71:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020e75:	89 04 24             	mov    DWORD PTR [esp],eax
c0020e78:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020e7c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020e80:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e85:	8b 04 85 e0 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1520]
c0020e8c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e90:	83 ec 0c             	sub    esp,0xc
c0020e93:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e97:	52                   	push   edx
c0020e98:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e9c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020ea0:	50                   	push   eax
c0020ea1:	e8 54 59 ff ff       	call   c00167fa <LogicalDisk::read(unsigned long long, int, void*)>
c0020ea6:	83 c4 20             	add    esp,0x20
c0020ea9:	83 c4 1c             	add    esp,0x1c
c0020eac:	c3                   	ret    

c0020ead <fatWrapperWriteDisk>:
c0020ead:	83 ec 1c             	sub    esp,0x1c
c0020eb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020eb4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020eb8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020ebc:	89 04 24             	mov    DWORD PTR [esp],eax
c0020ebf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020ec3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020ec7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020ecc:	8b 04 85 e0 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1520]
c0020ed3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020ed7:	83 ec 0c             	sub    esp,0xc
c0020eda:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020ede:	52                   	push   edx
c0020edf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020ee3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020ee7:	50                   	push   eax
c0020ee8:	e8 79 59 ff ff       	call   c0016866 <LogicalDisk::write(unsigned long long, int, void*)>
c0020eed:	83 c4 20             	add    esp,0x20
c0020ef0:	83 c4 1c             	add    esp,0x1c
c0020ef3:	c3                   	ret    

c0020ef4 <fatWrapperIoctl>:
c0020ef4:	53                   	push   ebx
c0020ef5:	83 ec 28             	sub    esp,0x28
c0020ef8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020efc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020f00:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020f04:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020f08:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020f0d:	75 31                	jne    c0020f40 <fatWrapperIoctl+0x4c>
c0020f0f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f13:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020f17:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020f1c:	8b 04 85 e0 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1520]
c0020f23:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020f29:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020f2f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020f33:	66 89 02             	mov    WORD PTR [edx],ax
c0020f36:	b8 00 00 00 00       	mov    eax,0x0
c0020f3b:	e9 b2 00 00 00       	jmp    c0020ff2 <fatWrapperIoctl+0xfe>
c0020f40:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020f45:	75 6a                	jne    c0020fb1 <fatWrapperIoctl+0xbd>
c0020f47:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f4b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020f4f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020f54:	8b 04 85 e0 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1520]
c0020f5b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020f61:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020f67:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020f6d:	89 c8                	mov    eax,ecx
c0020f6f:	89 da                	mov    edx,ebx
c0020f71:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020f75:	c1 e0 0a             	shl    eax,0xa
c0020f78:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020f7d:	8b 0c 8d e0 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1520]
c0020f84:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020f8a:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020f90:	89 cb                	mov    ebx,ecx
c0020f92:	c1 fb 1f             	sar    ebx,0x1f
c0020f95:	53                   	push   ebx
c0020f96:	51                   	push   ecx
c0020f97:	52                   	push   edx
c0020f98:	50                   	push   eax
c0020f99:	e8 be 5a 00 00       	call   c0026a5c <__udivdi3>
c0020f9e:	83 c4 10             	add    esp,0x10
c0020fa1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020fa5:	89 01                	mov    DWORD PTR [ecx],eax
c0020fa7:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020faa:	b8 00 00 00 00       	mov    eax,0x0
c0020faf:	eb 41                	jmp    c0020ff2 <fatWrapperIoctl+0xfe>
c0020fb1:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020fb6:	75 07                	jne    c0020fbf <fatWrapperIoctl+0xcb>
c0020fb8:	b8 00 00 00 00       	mov    eax,0x0
c0020fbd:	eb 33                	jmp    c0020ff2 <fatWrapperIoctl+0xfe>
c0020fbf:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020fc4:	75 19                	jne    c0020fdf <fatWrapperIoctl+0xeb>
c0020fc6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020fca:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020fce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020fd2:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020fd8:	b8 00 00 00 00       	mov    eax,0x0
c0020fdd:	eb 13                	jmp    c0020ff2 <fatWrapperIoctl+0xfe>
c0020fdf:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020fe4:	75 07                	jne    c0020fed <fatWrapperIoctl+0xf9>
c0020fe6:	b8 00 00 00 00       	mov    eax,0x0
c0020feb:	eb 05                	jmp    c0020ff2 <fatWrapperIoctl+0xfe>
c0020fed:	b8 04 00 00 00       	mov    eax,0x4
c0020ff2:	83 c4 28             	add    esp,0x28
c0020ff5:	5b                   	pop    ebx
c0020ff6:	c3                   	ret    
c0020ff7:	90                   	nop

c0020ff8 <FAT::FAT()>:
c0020ff8:	83 ec 1c             	sub    esp,0x1c
c0020ffb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020fff:	83 ec 0c             	sub    esp,0xc
c0021002:	50                   	push   eax
c0021003:	e8 e6 22 ff ff       	call   c00132ee <Filesystem::Filesystem()>
c0021008:	83 c4 10             	add    esp,0x10
c002100b:	ba 28 c9 02 c0       	mov    edx,0xc002c928
c0021010:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021014:	89 10                	mov    DWORD PTR [eax],edx
c0021016:	c7 05 00 1b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031b00,0x0
c0021020:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021028:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c002102d:	7f 15                	jg     c0021044 <FAT::FAT()+0x4c>
c002102f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021033:	c7 04 85 20 1b 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffce4e0],0xffffffff
c002103e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021042:	eb e4                	jmp    c0021028 <FAT::FAT()+0x30>
c0021044:	90                   	nop
c0021045:	83 c4 1c             	add    esp,0x1c
c0021048:	c3                   	ret    
c0021049:	90                   	nop

c002104a <FAT::fixFilepath(char*)>:
c002104a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002104e:	8a 00                	mov    al,BYTE PTR [eax]
c0021050:	3c 40                	cmp    al,0x40
c0021052:	7e 2c                	jle    c0021080 <FAT::fixFilepath(char*)+0x36>
c0021054:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021058:	8a 00                	mov    al,BYTE PTR [eax]
c002105a:	83 e8 41             	sub    eax,0x41
c002105d:	88 c2                	mov    dl,al
c002105f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021063:	88 10                	mov    BYTE PTR [eax],dl
c0021065:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021069:	8a 00                	mov    al,BYTE PTR [eax]
c002106b:	0f be c0             	movsx  eax,al
c002106e:	8b 04 85 20 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce4e0]
c0021075:	83 c0 30             	add    eax,0x30
c0021078:	88 c2                	mov    dl,al
c002107a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002107e:	88 10                	mov    BYTE PTR [eax],dl
c0021080:	90                   	nop
c0021081:	c3                   	ret    

c0021082 <FAT::open(char const*, void**, FileOpenMode)>:
c0021082:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021088:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021090:	74 0a                	je     c002109c <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0021092:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c002109a:	75 0a                	jne    c00210a6 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c002109c:	b8 04 00 00 00       	mov    eax,0x4
c00210a1:	e9 fd 00 00 00       	jmp    c00211a3 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00210a6:	83 ec 08             	sub    esp,0x8
c00210a9:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00210b0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00210b4:	50                   	push   eax
c00210b5:	e8 7a f7 fd ff       	call   c0000834 <strcpy>
c00210ba:	83 c4 10             	add    esp,0x10
c00210bd:	83 ec 08             	sub    esp,0x8
c00210c0:	8d 44 24 10          	lea    eax,[esp+0x10]
c00210c4:	50                   	push   eax
c00210c5:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00210cc:	e8 79 ff ff ff       	call   c002104a <FAT::fixFilepath(char*)>
c00210d1:	83 c4 10             	add    esp,0x10
c00210d4:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00210dc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00210e3:	83 e0 01             	and    eax,0x1
c00210e6:	74 08                	je     c00210f0 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c00210e8:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c00210f0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00210f7:	83 e0 04             	and    eax,0x4
c00210fa:	74 10                	je     c002110c <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c00210fc:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0021104:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c002110c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021113:	83 e0 02             	and    eax,0x2
c0021116:	74 08                	je     c0021120 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0021118:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021120:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021127:	83 e0 08             	and    eax,0x8
c002112a:	74 08                	je     c0021134 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c002112c:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0021134:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002113b:	83 e0 10             	and    eax,0x10
c002113e:	74 08                	je     c0021148 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0021140:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0021148:	83 ec 0c             	sub    esp,0xc
c002114b:	68 50 02 00 00       	push   0x250
c0021150:	e8 ee e6 fe ff       	call   c000f843 <malloc>
c0021155:	83 c4 10             	add    esp,0x10
c0021158:	89 c2                	mov    edx,eax
c002115a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021161:	89 10                	mov    DWORD PTR [eax],edx
c0021163:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c002116b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021172:	8b 00                	mov    eax,DWORD PTR [eax]
c0021174:	83 ec 04             	sub    esp,0x4
c0021177:	52                   	push   edx
c0021178:	8d 54 24 10          	lea    edx,[esp+0x10]
c002117c:	52                   	push   edx
c002117d:	50                   	push   eax
c002117e:	e8 0e 3e fe ff       	call   c0004f91 <f_open>
c0021183:	83 c4 10             	add    esp,0x10
c0021186:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c002118d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0021195:	74 07                	je     c002119e <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0021197:	b8 01 00 00 00       	mov    eax,0x1
c002119c:	eb 05                	jmp    c00211a3 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c002119e:	b8 00 00 00 00       	mov    eax,0x0
c00211a3:	81 c4 1c 01 00 00    	add    esp,0x11c
c00211a9:	c3                   	ret    

c00211aa <FAT::openDir(char const*, void**)>:
c00211aa:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00211b0:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00211b8:	74 0a                	je     c00211c4 <FAT::openDir(char const*, void**)+0x1a>
c00211ba:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00211c2:	75 07                	jne    c00211cb <FAT::openDir(char const*, void**)+0x21>
c00211c4:	b8 04 00 00 00       	mov    eax,0x4
c00211c9:	eb 7d                	jmp    c0021248 <FAT::openDir(char const*, void**)+0x9e>
c00211cb:	83 ec 08             	sub    esp,0x8
c00211ce:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00211d5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00211d9:	50                   	push   eax
c00211da:	e8 55 f6 fd ff       	call   c0000834 <strcpy>
c00211df:	83 c4 10             	add    esp,0x10
c00211e2:	83 ec 08             	sub    esp,0x8
c00211e5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00211e9:	50                   	push   eax
c00211ea:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00211f1:	e8 54 fe ff ff       	call   c002104a <FAT::fixFilepath(char*)>
c00211f6:	83 c4 10             	add    esp,0x10
c00211f9:	83 ec 0c             	sub    esp,0xc
c00211fc:	6a 4c                	push   0x4c
c00211fe:	e8 40 e6 fe ff       	call   c000f843 <malloc>
c0021203:	83 c4 10             	add    esp,0x10
c0021206:	89 c2                	mov    edx,eax
c0021208:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002120f:	89 10                	mov    DWORD PTR [eax],edx
c0021211:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021218:	8b 00                	mov    eax,DWORD PTR [eax]
c002121a:	83 ec 08             	sub    esp,0x8
c002121d:	8d 54 24 14          	lea    edx,[esp+0x14]
c0021221:	52                   	push   edx
c0021222:	50                   	push   eax
c0021223:	e8 a1 4d fe ff       	call   c0005fc9 <f_opendir>
c0021228:	83 c4 10             	add    esp,0x10
c002122b:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021232:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c002123a:	74 07                	je     c0021243 <FAT::openDir(char const*, void**)+0x99>
c002123c:	b8 01 00 00 00       	mov    eax,0x1
c0021241:	eb 05                	jmp    c0021248 <FAT::openDir(char const*, void**)+0x9e>
c0021243:	b8 00 00 00 00       	mov    eax,0x0
c0021248:	81 c4 1c 01 00 00    	add    esp,0x11c
c002124e:	c3                   	ret    
c002124f:	90                   	nop

c0021250 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0021250:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021256:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c002125e:	75 0a                	jne    c002126a <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0021260:	b8 04 00 00 00       	mov    eax,0x4
c0021265:	e9 c9 00 00 00       	jmp    c0021333 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002126a:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0021272:	75 0a                	jne    c002127e <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0021274:	b8 04 00 00 00       	mov    eax,0x4
c0021279:	e9 b5 00 00 00       	jmp    c0021333 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002127e:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0021286:	75 0a                	jne    c0021292 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0021288:	b8 04 00 00 00       	mov    eax,0x4
c002128d:	e9 a1 00 00 00       	jmp    c0021333 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021292:	83 ec 08             	sub    esp,0x8
c0021295:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002129c:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00212a3:	50                   	push   eax
c00212a4:	e8 8b f5 fd ff       	call   c0000834 <strcpy>
c00212a9:	83 c4 10             	add    esp,0x10
c00212ac:	83 ec 08             	sub    esp,0x8
c00212af:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00212b6:	50                   	push   eax
c00212b7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00212be:	e8 87 fd ff ff       	call   c002104a <FAT::fixFilepath(char*)>
c00212c3:	83 c4 10             	add    esp,0x10
c00212c6:	83 ec 08             	sub    esp,0x8
c00212c9:	8d 44 24 08          	lea    eax,[esp+0x8]
c00212cd:	50                   	push   eax
c00212ce:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00212d5:	50                   	push   eax
c00212d6:	e8 ad 4e fe ff       	call   c0006188 <f_stat>
c00212db:	83 c4 10             	add    esp,0x10
c00212de:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00212e5:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00212ec:	85 c0                	test   eax,eax
c00212ee:	74 07                	je     c00212f7 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c00212f0:	83 f8 04             	cmp    eax,0x4
c00212f3:	74 32                	je     c0021327 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c00212f5:	eb 37                	jmp    c002132e <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c00212f7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00212fb:	0f b6 c0             	movzx  eax,al
c00212fe:	83 e0 10             	and    eax,0x10
c0021301:	0f 95 c2             	setne  dl
c0021304:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c002130b:	88 10                	mov    BYTE PTR [eax],dl
c002130d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021310:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021314:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c002131b:	89 01                	mov    DWORD PTR [ecx],eax
c002131d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021320:	b8 00 00 00 00       	mov    eax,0x0
c0021325:	eb 0c                	jmp    c0021333 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021327:	b8 02 00 00 00       	mov    eax,0x2
c002132c:	eb 05                	jmp    c0021333 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002132e:	b8 01 00 00 00       	mov    eax,0x1
c0021333:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021339:	c3                   	ret    

c002133a <FAT::unlink(char const*)>:
c002133a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021340:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021348:	75 07                	jne    c0021351 <FAT::unlink(char const*)+0x17>
c002134a:	b8 04 00 00 00       	mov    eax,0x4
c002134f:	eb 5c                	jmp    c00213ad <FAT::unlink(char const*)+0x73>
c0021351:	83 ec 08             	sub    esp,0x8
c0021354:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002135b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002135f:	50                   	push   eax
c0021360:	e8 cf f4 fd ff       	call   c0000834 <strcpy>
c0021365:	83 c4 10             	add    esp,0x10
c0021368:	83 ec 08             	sub    esp,0x8
c002136b:	8d 44 24 14          	lea    eax,[esp+0x14]
c002136f:	50                   	push   eax
c0021370:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021377:	e8 ce fc ff ff       	call   c002104a <FAT::fixFilepath(char*)>
c002137c:	83 c4 10             	add    esp,0x10
c002137f:	83 ec 0c             	sub    esp,0xc
c0021382:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021386:	50                   	push   eax
c0021387:	e8 4e 51 fe ff       	call   c00064da <f_unlink>
c002138c:	83 c4 10             	add    esp,0x10
c002138f:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021396:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c002139d:	85 c0                	test   eax,eax
c002139f:	75 07                	jne    c00213a8 <FAT::unlink(char const*)+0x6e>
c00213a1:	b8 00 00 00 00       	mov    eax,0x0
c00213a6:	eb 05                	jmp    c00213ad <FAT::unlink(char const*)+0x73>
c00213a8:	b8 01 00 00 00       	mov    eax,0x1
c00213ad:	81 c4 1c 01 00 00    	add    esp,0x11c
c00213b3:	c3                   	ret    

c00213b4 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00213b4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00213ba:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00213c1:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00213c8:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00213cc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00213d0:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00213d8:	75 0a                	jne    c00213e4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00213da:	b8 04 00 00 00       	mov    eax,0x4
c00213df:	e9 1c 01 00 00       	jmp    c0021500 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00213e4:	83 ec 08             	sub    esp,0x8
c00213e7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00213ee:	8d 44 24 24          	lea    eax,[esp+0x24]
c00213f2:	50                   	push   eax
c00213f3:	e8 3c f4 fd ff       	call   c0000834 <strcpy>
c00213f8:	83 c4 10             	add    esp,0x10
c00213fb:	83 ec 08             	sub    esp,0x8
c00213fe:	8d 44 24 20          	lea    eax,[esp+0x20]
c0021402:	50                   	push   eax
c0021403:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c002140a:	e8 3b fc ff ff       	call   c002104a <FAT::fixFilepath(char*)>
c002140f:	83 c4 10             	add    esp,0x10
c0021412:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c002141a:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0021422:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021427:	83 e0 01             	and    eax,0x1
c002142a:	74 08                	je     c0021434 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c002142c:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0021434:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021439:	83 e0 02             	and    eax,0x2
c002143c:	74 08                	je     c0021446 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c002143e:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0021446:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002144b:	83 e0 04             	and    eax,0x4
c002144e:	74 08                	je     c0021458 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0021450:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0021458:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002145d:	83 e0 08             	and    eax,0x8
c0021460:	74 08                	je     c002146a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0021462:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c002146a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002146f:	83 e0 01             	and    eax,0x1
c0021472:	74 08                	je     c002147c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0021474:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c002147c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021481:	83 e0 02             	and    eax,0x2
c0021484:	74 08                	je     c002148e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0021486:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c002148e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021493:	83 e0 04             	and    eax,0x4
c0021496:	74 08                	je     c00214a0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0021498:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00214a0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00214a5:	83 e0 08             	and    eax,0x8
c00214a8:	74 08                	je     c00214b2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c00214aa:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00214b2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00214b9:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00214c0:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c00214c8:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c00214d0:	83 ec 04             	sub    esp,0x4
c00214d3:	52                   	push   edx
c00214d4:	50                   	push   eax
c00214d5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00214d9:	50                   	push   eax
c00214da:	e8 9d 56 fe ff       	call   c0006b7c <f_chmod>
c00214df:	83 c4 10             	add    esp,0x10
c00214e2:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00214e9:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00214f0:	85 c0                	test   eax,eax
c00214f2:	75 07                	jne    c00214fb <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c00214f4:	b8 00 00 00 00       	mov    eax,0x0
c00214f9:	eb 05                	jmp    c0021500 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00214fb:	b8 01 00 00 00       	mov    eax,0x1
c0021500:	81 c4 2c 01 00 00    	add    esp,0x12c
c0021506:	c3                   	ret    
c0021507:	90                   	nop

c0021508 <FAT::rename(char const*, char const*)>:
c0021508:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002150e:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0021516:	74 0a                	je     c0021522 <FAT::rename(char const*, char const*)+0x1a>
c0021518:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0021520:	75 0a                	jne    c002152c <FAT::rename(char const*, char const*)+0x24>
c0021522:	b8 04 00 00 00       	mov    eax,0x4
c0021527:	e9 98 00 00 00       	jmp    c00215c4 <FAT::rename(char const*, char const*)+0xbc>
c002152c:	83 ec 08             	sub    esp,0x8
c002152f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021536:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002153d:	50                   	push   eax
c002153e:	e8 f1 f2 fd ff       	call   c0000834 <strcpy>
c0021543:	83 c4 10             	add    esp,0x10
c0021546:	83 ec 08             	sub    esp,0x8
c0021549:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0021550:	50                   	push   eax
c0021551:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021558:	e8 ed fa ff ff       	call   c002104a <FAT::fixFilepath(char*)>
c002155d:	83 c4 10             	add    esp,0x10
c0021560:	83 ec 08             	sub    esp,0x8
c0021563:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c002156a:	8d 44 24 18          	lea    eax,[esp+0x18]
c002156e:	50                   	push   eax
c002156f:	e8 c0 f2 fd ff       	call   c0000834 <strcpy>
c0021574:	83 c4 10             	add    esp,0x10
c0021577:	83 ec 08             	sub    esp,0x8
c002157a:	8d 44 24 14          	lea    eax,[esp+0x14]
c002157e:	50                   	push   eax
c002157f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021586:	e8 bf fa ff ff       	call   c002104a <FAT::fixFilepath(char*)>
c002158b:	83 c4 10             	add    esp,0x10
c002158e:	83 ec 08             	sub    esp,0x8
c0021591:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021595:	50                   	push   eax
c0021596:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002159d:	50                   	push   eax
c002159e:	e8 e6 52 fe ff       	call   c0006889 <f_rename>
c00215a3:	83 c4 10             	add    esp,0x10
c00215a6:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00215ad:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00215b4:	85 c0                	test   eax,eax
c00215b6:	75 07                	jne    c00215bf <FAT::rename(char const*, char const*)+0xb7>
c00215b8:	b8 00 00 00 00       	mov    eax,0x0
c00215bd:	eb 05                	jmp    c00215c4 <FAT::rename(char const*, char const*)+0xbc>
c00215bf:	b8 01 00 00 00       	mov    eax,0x1
c00215c4:	81 c4 1c 02 00 00    	add    esp,0x21c
c00215ca:	c3                   	ret    
c00215cb:	90                   	nop

c00215cc <FAT::mkdir(char const*)>:
c00215cc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00215d2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00215da:	75 07                	jne    c00215e3 <FAT::mkdir(char const*)+0x17>
c00215dc:	b8 04 00 00 00       	mov    eax,0x4
c00215e1:	eb 5c                	jmp    c002163f <FAT::mkdir(char const*)+0x73>
c00215e3:	83 ec 08             	sub    esp,0x8
c00215e6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00215ed:	8d 44 24 18          	lea    eax,[esp+0x18]
c00215f1:	50                   	push   eax
c00215f2:	e8 3d f2 fd ff       	call   c0000834 <strcpy>
c00215f7:	83 c4 10             	add    esp,0x10
c00215fa:	83 ec 08             	sub    esp,0x8
c00215fd:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021601:	50                   	push   eax
c0021602:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021609:	e8 3c fa ff ff       	call   c002104a <FAT::fixFilepath(char*)>
c002160e:	83 c4 10             	add    esp,0x10
c0021611:	83 ec 0c             	sub    esp,0xc
c0021614:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021618:	50                   	push   eax
c0021619:	e8 3f 50 fe ff       	call   c000665d <f_mkdir>
c002161e:	83 c4 10             	add    esp,0x10
c0021621:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021628:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c002162f:	85 c0                	test   eax,eax
c0021631:	75 07                	jne    c002163a <FAT::mkdir(char const*)+0x6e>
c0021633:	b8 00 00 00 00       	mov    eax,0x0
c0021638:	eb 05                	jmp    c002163f <FAT::mkdir(char const*)+0x73>
c002163a:	b8 01 00 00 00       	mov    eax,0x1
c002163f:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021645:	c3                   	ret    

c0021646 <FAT::exists(char const*)>:
c0021646:	81 ec 2c 02 00 00    	sub    esp,0x22c
c002164c:	83 ec 08             	sub    esp,0x8
c002164f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021656:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002165a:	50                   	push   eax
c002165b:	e8 d4 f1 fd ff       	call   c0000834 <strcpy>
c0021660:	83 c4 10             	add    esp,0x10
c0021663:	83 ec 08             	sub    esp,0x8
c0021666:	8d 44 24 08          	lea    eax,[esp+0x8]
c002166a:	50                   	push   eax
c002166b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021672:	e8 d3 f9 ff ff       	call   c002104a <FAT::fixFilepath(char*)>
c0021677:	83 c4 10             	add    esp,0x10
c002167a:	83 ec 08             	sub    esp,0x8
c002167d:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0021684:	50                   	push   eax
c0021685:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021689:	50                   	push   eax
c002168a:	e8 f9 4a fe ff       	call   c0006188 <f_stat>
c002168f:	83 c4 10             	add    esp,0x10
c0021692:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021699:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00216a0:	85 c0                	test   eax,eax
c00216a2:	75 04                	jne    c00216a8 <FAT::exists(char const*)+0x62>
c00216a4:	b0 01                	mov    al,0x1
c00216a6:	eb 02                	jmp    c00216aa <FAT::exists(char const*)+0x64>
c00216a8:	b0 00                	mov    al,0x0
c00216aa:	81 c4 2c 02 00 00    	add    esp,0x22c
c00216b0:	c3                   	ret    
c00216b1:	90                   	nop

c00216b2 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00216b2:	b8 08 00 00 00       	mov    eax,0x8
c00216b7:	c3                   	ret    

c00216b8 <ISO9660::seek(void*, unsigned long long)>:
c00216b8:	53                   	push   ebx
c00216b9:	b8 04 00 00 00       	mov    eax,0x4
c00216be:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00216c2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00216c6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00216ca:	85 d2                	test   edx,edx
c00216cc:	74 17                	je     c00216e5 <ISO9660::seek(void*, unsigned long long)+0x2d>
c00216ce:	89 c8                	mov    eax,ecx
c00216d0:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c00216d3:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c00216d6:	b8 01 00 00 00       	mov    eax,0x1
c00216db:	73 08                	jae    c00216e5 <ISO9660::seek(void*, unsigned long long)+0x2d>
c00216dd:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c00216e0:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c00216e3:	31 c0                	xor    eax,eax
c00216e5:	5b                   	pop    ebx
c00216e6:	c3                   	ret    
c00216e7:	90                   	nop

c00216e8 <ISO9660::tell(void*, unsigned long long*)>:
c00216e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00216ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00216f0:	85 d2                	test   edx,edx
c00216f2:	74 12                	je     c0021706 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00216f4:	85 c0                	test   eax,eax
c00216f6:	74 0e                	je     c0021706 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00216f8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00216fb:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c00216fe:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021701:	89 10                	mov    DWORD PTR [eax],edx
c0021703:	31 c0                	xor    eax,eax
c0021705:	c3                   	ret    
c0021706:	b8 04 00 00 00       	mov    eax,0x4
c002170b:	c3                   	ret    

c002170c <ISO9660::getName()>:
c002170c:	b8 84 c9 02 c0       	mov    eax,0xc002c984
c0021711:	c3                   	ret    

c0021712 <ISO9660::stat(void*, unsigned long long*)>:
c0021712:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021716:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002171a:	85 d2                	test   edx,edx
c002171c:	74 12                	je     c0021730 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c002171e:	85 c0                	test   eax,eax
c0021720:	74 0e                	je     c0021730 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021722:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0021725:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0021728:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c002172b:	89 10                	mov    DWORD PTR [eax],edx
c002172d:	31 c0                	xor    eax,eax
c002172f:	c3                   	ret    
c0021730:	b8 04 00 00 00       	mov    eax,0x4
c0021735:	c3                   	ret    

c0021736 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0021736:	b8 01 00 00 00       	mov    eax,0x1
c002173b:	c3                   	ret    

c002173c <ISO9660::unlink(char const*)>:
c002173c:	b8 01 00 00 00       	mov    eax,0x1
c0021741:	c3                   	ret    

c0021742 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0021742:	b8 01 00 00 00       	mov    eax,0x1
c0021747:	c3                   	ret    

c0021748 <ISO9660::rename(char const*, char const*)>:
c0021748:	b8 01 00 00 00       	mov    eax,0x1
c002174d:	c3                   	ret    

c002174e <ISO9660::mkdir(char const*)>:
c002174e:	b8 01 00 00 00       	mov    eax,0x1
c0021753:	c3                   	ret    

c0021754 <ISO9660::close(void*)>:
c0021754:	83 ec 0c             	sub    esp,0xc
c0021757:	b8 04 00 00 00       	mov    eax,0x4
c002175c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021760:	85 d2                	test   edx,edx
c0021762:	74 0e                	je     c0021772 <ISO9660::close(void*)+0x1e>
c0021764:	83 ec 0c             	sub    esp,0xc
c0021767:	52                   	push   edx
c0021768:	e8 e6 e0 fe ff       	call   c000f853 <free>
c002176d:	83 c4 10             	add    esp,0x10
c0021770:	31 c0                	xor    eax,eax
c0021772:	83 c4 0c             	add    esp,0xc
c0021775:	c3                   	ret    

c0021776 <ISO9660::closeDir(void*)>:
c0021776:	83 ec 0c             	sub    esp,0xc
c0021779:	b8 04 00 00 00       	mov    eax,0x4
c002177e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021782:	85 d2                	test   edx,edx
c0021784:	74 0e                	je     c0021794 <ISO9660::closeDir(void*)+0x1e>
c0021786:	83 ec 0c             	sub    esp,0xc
c0021789:	52                   	push   edx
c002178a:	e8 c4 e0 fe ff       	call   c000f853 <free>
c002178f:	83 c4 10             	add    esp,0x10
c0021792:	31 c0                	xor    eax,eax
c0021794:	83 c4 0c             	add    esp,0xc
c0021797:	c3                   	ret    

c0021798 <ISO9660::~ISO9660()>:
c0021798:	83 ec 0c             	sub    esp,0xc
c002179b:	ba e8 c9 02 c0       	mov    edx,0xc002c9e8
c00217a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217a4:	89 10                	mov    DWORD PTR [eax],edx
c00217a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217aa:	83 ec 0c             	sub    esp,0xc
c00217ad:	50                   	push   eax
c00217ae:	e8 5f 1b ff ff       	call   c0013312 <Filesystem::~Filesystem()>
c00217b3:	83 c4 10             	add    esp,0x10
c00217b6:	90                   	nop
c00217b7:	83 c4 0c             	add    esp,0xc
c00217ba:	c3                   	ret    
c00217bb:	90                   	nop

c00217bc <ISO9660::~ISO9660()>:
c00217bc:	83 ec 0c             	sub    esp,0xc
c00217bf:	83 ec 0c             	sub    esp,0xc
c00217c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00217c6:	e8 cd ff ff ff       	call   c0021798 <ISO9660::~ISO9660()>
c00217cb:	83 c4 10             	add    esp,0x10
c00217ce:	83 ec 08             	sub    esp,0x8
c00217d1:	6a 08                	push   0x8
c00217d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00217d7:	e8 2e 17 ff ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c00217dc:	83 c4 10             	add    esp,0x10
c00217df:	83 c4 0c             	add    esp,0xc
c00217e2:	c3                   	ret    

c00217e3 <__memmem(unsigned char*, int, unsigned char*, int)>:
c00217e3:	55                   	push   ebp
c00217e4:	31 c9                	xor    ecx,ecx
c00217e6:	57                   	push   edi
c00217e7:	56                   	push   esi
c00217e8:	53                   	push   ebx
c00217e9:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00217ed:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00217f1:	89 eb                	mov    ebx,ebp
c00217f3:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c00217f7:	39 ce                	cmp    esi,ecx
c00217f9:	7e 17                	jle    c0021812 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c00217fb:	31 d2                	xor    edx,edx
c00217fd:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021801:	7d 13                	jge    c0021816 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021803:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021807:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c002180a:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c002180d:	75 0d                	jne    c002181c <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c002180f:	42                   	inc    edx
c0021810:	eb eb                	jmp    c00217fd <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021812:	31 c0                	xor    eax,eax
c0021814:	eb 0a                	jmp    c0021820 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021816:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c002181a:	eb 04                	jmp    c0021820 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002181c:	41                   	inc    ecx
c002181d:	43                   	inc    ebx
c002181e:	eb d7                	jmp    c00217f7 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021820:	5b                   	pop    ebx
c0021821:	5e                   	pop    esi
c0021822:	5f                   	pop    edi
c0021823:	5d                   	pop    ebp
c0021824:	c3                   	ret    

c0021825 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0021825:	56                   	push   esi
c0021826:	53                   	push   ebx
c0021827:	52                   	push   edx
c0021828:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002182c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021830:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021834:	39 0d 00 1c 03 c0    	cmp    DWORD PTR ds:0xc0031c00,ecx
c002183a:	75 08                	jne    c0021844 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c002183c:	38 05 54 da 02 c0    	cmp    BYTE PTR ds:0xc002da54,al
c0021842:	74 2b                	je     c002186f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c0021844:	83 ec 0c             	sub    esp,0xc
c0021847:	a2 54 da 02 c0       	mov    ds:0xc002da54,al
c002184c:	68 20 1c 03 c0       	push   0xc0031c20
c0021851:	0f be c0             	movsx  eax,al
c0021854:	6a 01                	push   0x1
c0021856:	89 0d 00 1c 03 c0    	mov    DWORD PTR ds:0xc0031c00,ecx
c002185c:	31 db                	xor    ebx,ebx
c002185e:	53                   	push   ebx
c002185f:	51                   	push   ecx
c0021860:	ff 34 85 dc e9 02 c0 	push   DWORD PTR [eax*4-0x3ffd1624]
c0021867:	e8 8e 4f ff ff       	call   c00167fa <LogicalDisk::read(unsigned long long, int, void*)>
c002186c:	83 c4 20             	add    esp,0x20
c002186f:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c0021877:	c7 44 24 14 20 1c 03 c0 	mov    DWORD PTR [esp+0x14],0xc0031c20
c002187f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021883:	58                   	pop    eax
c0021884:	5b                   	pop    ebx
c0021885:	5e                   	pop    esi
c0021886:	e9 b9 ee fd ff       	jmp    c0000744 <memcpy>
c002188b:	90                   	nop

c002188c <ISO9660::tryMount(LogicalDisk*, int)>:
c002188c:	81 ec 10 08 00 00    	sub    esp,0x810
c0021892:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0021899:	83 c0 41             	add    eax,0x41
c002189c:	0f be c0             	movsx  eax,al
c002189f:	50                   	push   eax
c00218a0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00218a4:	50                   	push   eax
c00218a5:	6a 10                	push   0x10
c00218a7:	e8 79 ff ff ff       	call   c0021825 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00218ac:	83 c4 10             	add    esp,0x10
c00218af:	31 c0                	xor    eax,eax
c00218b1:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00218b6:	75 1d                	jne    c00218d5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00218b8:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00218bd:	75 16                	jne    c00218d5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00218bf:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00218c4:	75 0f                	jne    c00218d5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00218c6:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c00218cb:	75 08                	jne    c00218d5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00218cd:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00218d2:	0f 94 c0             	sete   al
c00218d5:	81 c4 0c 08 00 00    	add    esp,0x80c
c00218db:	c3                   	ret    

c00218dc <ISO9660::read(void*, unsigned long, void*, int*)>:
c00218dc:	55                   	push   ebp
c00218dd:	57                   	push   edi
c00218de:	56                   	push   esi
c00218df:	53                   	push   ebx
c00218e0:	81 ec 2c 08 00 00    	sub    esp,0x82c
c00218e6:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c00218ed:	85 ed                	test   ebp,ebp
c00218ef:	0f 84 d6 01 00 00    	je     c0021acb <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c00218f5:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c00218fd:	0f 84 c8 01 00 00    	je     c0021acb <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021903:	b8 01 00 00 00       	mov    eax,0x1
c0021908:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c002190c:	0f 85 be 01 00 00    	jne    c0021ad0 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021912:	31 d2                	xor    edx,edx
c0021914:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c002191b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002191e:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0021921:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021925:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c0021928:	89 04 24             	mov    DWORD PTR [esp],eax
c002192b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002192f:	01 f0                	add    eax,esi
c0021931:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0021934:	11 fa                	adc    edx,edi
c0021936:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c002193a:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c002193e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021942:	19 d1                	sbb    ecx,edx
c0021944:	72 0a                	jb     c0021950 <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c0021946:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002194a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002194e:	eb 13                	jmp    c0021963 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021950:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021954:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021958:	29 f0                	sub    eax,esi
c002195a:	19 fa                	sbb    edx,edi
c002195c:	89 04 24             	mov    DWORD PTR [esp],eax
c002195f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021963:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021966:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0021969:	0f a4 c2 0b          	shld   edx,eax,0xb
c002196d:	51                   	push   ecx
c002196e:	c1 e0 0b             	shl    eax,0xb
c0021971:	01 c6                	add    esi,eax
c0021973:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021977:	11 d7                	adc    edi,edx
c0021979:	50                   	push   eax
c002197a:	89 fa                	mov    edx,edi
c002197c:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0021980:	89 f0                	mov    eax,esi
c0021982:	53                   	push   ebx
c0021983:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021987:	50                   	push   eax
c0021988:	e8 98 fe ff ff       	call   c0021825 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002198d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021991:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021994:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0021998:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002199e:	83 c4 10             	add    esp,0x10
c00219a1:	b8 00 08 00 00       	mov    eax,0x800
c00219a6:	29 d0                	sub    eax,edx
c00219a8:	39 c1                	cmp    ecx,eax
c00219aa:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00219ae:	83 d9 00             	sbb    ecx,0x0
c00219b1:	7d 1c                	jge    c00219cf <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c00219b3:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00219b8:	75 12                	jne    c00219cc <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c00219ba:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00219c1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00219c7:	e9 fb 00 00 00       	jmp    c0021ac7 <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c00219cc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00219cf:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c00219d2:	31 d2                	xor    edx,edx
c00219d4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00219d8:	39 c2                	cmp    edx,eax
c00219da:	7d 14                	jge    c00219f0 <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c00219dc:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c00219e3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00219e7:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c00219ea:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00219ed:	42                   	inc    edx
c00219ee:	eb e8                	jmp    c00219d8 <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c00219f0:	89 c3                	mov    ebx,eax
c00219f2:	85 c0                	test   eax,eax
c00219f4:	79 02                	jns    c00219f8 <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c00219f6:	31 db                	xor    ebx,ebx
c00219f8:	99                   	cdq    
c00219f9:	01 c3                	add    ebx,eax
c00219fb:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c0021a02:	01 c6                	add    esi,eax
c0021a04:	11 d7                	adc    edi,edx
c0021a06:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021a0a:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0021a0e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021a11:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0021a15:	29 c6                	sub    esi,eax
c0021a17:	19 d7                	sbb    edi,edx
c0021a19:	89 34 24             	mov    DWORD PTR [esp],esi
c0021a1c:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021a20:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021a25:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021a28:	b8 00 00 00 00       	mov    eax,0x0
c0021a2d:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021a31:	7d 3e                	jge    c0021a71 <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c0021a33:	52                   	push   edx
c0021a34:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021a38:	50                   	push   eax
c0021a39:	53                   	push   ebx
c0021a3a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021a3e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021a42:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021a46:	50                   	push   eax
c0021a47:	e8 d9 fd ff ff       	call   c0021825 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a4c:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0021a54:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0021a59:	81 c3 00 08 00 00    	add    ebx,0x800
c0021a5f:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0021a67:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0021a6c:	83 c4 10             	add    esp,0x10
c0021a6f:	eb af                	jmp    c0021a20 <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c0021a71:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a75:	0b 04 24             	or     eax,DWORD PTR [esp]
c0021a78:	74 32                	je     c0021aac <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c0021a7a:	50                   	push   eax
c0021a7b:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021a7f:	50                   	push   eax
c0021a80:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021a84:	50                   	push   eax
c0021a85:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0021a89:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0021a8d:	0f ac fe 0b          	shrd   esi,edi,0xb
c0021a91:	56                   	push   esi
c0021a92:	e8 8e fd ff ff       	call   c0021825 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a97:	83 c4 0c             	add    esp,0xc
c0021a9a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0021a9e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021aa2:	50                   	push   eax
c0021aa3:	53                   	push   ebx
c0021aa4:	e8 9b ec fd ff       	call   c0000744 <memcpy>
c0021aa9:	83 c4 10             	add    esp,0x10
c0021aac:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021ab3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021ab7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021abb:	89 38                	mov    DWORD PTR [eax],edi
c0021abd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021ac1:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021ac4:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021ac7:	31 c0                	xor    eax,eax
c0021ac9:	eb 05                	jmp    c0021ad0 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021acb:	b8 04 00 00 00       	mov    eax,0x4
c0021ad0:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021ad6:	5b                   	pop    ebx
c0021ad7:	5e                   	pop    esi
c0021ad8:	5f                   	pop    edi
c0021ad9:	5d                   	pop    ebp
c0021ada:	c3                   	ret    
c0021adb:	90                   	nop

c0021adc <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021adc:	55                   	push   ebp
c0021add:	57                   	push   edi
c0021ade:	56                   	push   esi
c0021adf:	53                   	push   ebx
c0021ae0:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021ae6:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0021aed:	85 f6                	test   esi,esi
c0021aef:	0f 84 64 02 00 00    	je     c0021d59 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021af5:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021afd:	0f 84 56 02 00 00    	je     c0021d59 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021b03:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0021b06:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0021b09:	75 0a                	jne    c0021b15 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021b0b:	b8 07 00 00 00       	mov    eax,0x7
c0021b10:	e9 49 02 00 00       	jmp    c0021d5e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021b15:	50                   	push   eax
c0021b16:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021b1a:	50                   	push   eax
c0021b1b:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021b22:	53                   	push   ebx
c0021b23:	8b 06                	mov    eax,DWORD PTR [esi]
c0021b25:	c1 e0 0b             	shl    eax,0xb
c0021b28:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0021b2b:	c1 e8 0b             	shr    eax,0xb
c0021b2e:	50                   	push   eax
c0021b2f:	e8 f1 fc ff ff       	call   c0021825 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021b34:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021b37:	83 c4 10             	add    esp,0x10
c0021b3a:	89 c1                	mov    ecx,eax
c0021b3c:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0021b3f:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021b45:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021b48:	84 db                	test   bl,bl
c0021b4a:	0f 85 90 00 00 00    	jne    c0021be0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0021b50:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0021b56:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021b5c:	29 c7                	sub    edi,eax
c0021b5e:	89 fb                	mov    ebx,edi
c0021b60:	c1 fb 1f             	sar    ebx,0x1f
c0021b63:	01 f8                	add    eax,edi
c0021b65:	11 da                	adc    edx,ebx
c0021b67:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021b6b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021b6f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0021b72:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0021b75:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021b78:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021b7b:	89 04 24             	mov    DWORD PTR [esp],eax
c0021b7e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021b82:	89 d8                	mov    eax,ebx
c0021b84:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0021b87:	ba 00 00 00 00       	mov    edx,0x0
c0021b8c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021b90:	b8 00 00 00 00       	mov    eax,0x0
c0021b95:	73 0b                	jae    c0021ba2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0021b97:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021b9a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021b9e:	29 f8                	sub    eax,edi
c0021ba0:	19 da                	sbb    edx,ebx
c0021ba2:	89 d3                	mov    ebx,edx
c0021ba4:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021ba7:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021baa:	09 c3                	or     ebx,eax
c0021bac:	0f 84 59 ff ff ff    	je     c0021b0b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021bb2:	55                   	push   ebp
c0021bb3:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021bb7:	50                   	push   eax
c0021bb8:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021bbf:	53                   	push   ebx
c0021bc0:	8b 06                	mov    eax,DWORD PTR [esi]
c0021bc2:	c1 e0 0b             	shl    eax,0xb
c0021bc5:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0021bc9:	c1 e8 0b             	shr    eax,0xb
c0021bcc:	50                   	push   eax
c0021bcd:	e8 53 fc ff ff       	call   c0021825 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021bd2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021bd5:	83 c4 10             	add    esp,0x10
c0021bd8:	25 ff 07 00 00       	and    eax,0x7ff
c0021bdd:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021be0:	57                   	push   edi
c0021be1:	6a 28                	push   0x28
c0021be3:	6a 00                	push   0x0
c0021be5:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021be9:	50                   	push   eax
c0021bea:	e8 89 eb fd ff       	call   c0000778 <memset>
c0021bef:	31 d2                	xor    edx,edx
c0021bf1:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0021bf4:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021bfa:	89 f8                	mov    eax,edi
c0021bfc:	83 c0 21             	add    eax,0x21
c0021bff:	83 d2 00             	adc    edx,0x0
c0021c02:	89 c7                	mov    edi,eax
c0021c04:	89 d5                	mov    ebp,edx
c0021c06:	83 c4 10             	add    esp,0x10
c0021c09:	31 c9                	xor    ecx,ecx
c0021c0b:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0021c12:	83 f9 28             	cmp    ecx,0x28
c0021c15:	88 04 24             	mov    BYTE PTR [esp],al
c0021c18:	0f 94 c2             	sete   dl
c0021c1b:	88 d0                	mov    al,dl
c0021c1d:	ba ff 07 00 00       	mov    edx,0x7ff
c0021c22:	39 fa                	cmp    edx,edi
c0021c24:	ba 00 00 00 00       	mov    edx,0x0
c0021c29:	19 ea                	sbb    edx,ebp
c0021c2b:	0f 92 c2             	setb   dl
c0021c2e:	09 c2                	or     edx,eax
c0021c30:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021c34:	0f 94 c0             	sete   al
c0021c37:	08 d0                	or     al,dl
c0021c39:	75 16                	jne    c0021c51 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021c3b:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021c3f:	74 10                	je     c0021c51 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021c41:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021c44:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021c48:	41                   	inc    ecx
c0021c49:	83 c7 01             	add    edi,0x1
c0021c4c:	83 d5 00             	adc    ebp,0x0
c0021c4f:	eb ba                	jmp    c0021c0b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0021c51:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021c58:	83 ec 0c             	sub    esp,0xc
c0021c5b:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021c5f:	57                   	push   edi
c0021c60:	e8 2f eb fd ff       	call   c0000794 <strlen>
c0021c65:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021c6d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021c71:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0021c78:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021c7b:	5a                   	pop    edx
c0021c7c:	25 ff 07 00 00       	and    eax,0x7ff
c0021c81:	01 c8                	add    eax,ecx
c0021c83:	59                   	pop    ecx
c0021c84:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021c8a:	83 e0 02             	and    eax,0x2
c0021c8d:	3c 01                	cmp    al,0x1
c0021c8f:	19 c0                	sbb    eax,eax
c0021c91:	83 c0 02             	add    eax,0x2
c0021c94:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021c98:	57                   	push   edi
c0021c99:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021c9d:	50                   	push   eax
c0021c9e:	e8 91 eb fd ff       	call   c0000834 <strcpy>
c0021ca3:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021ca7:	83 c4 10             	add    esp,0x10
c0021caa:	84 c0                	test   al,al
c0021cac:	75 21                	jne    c0021ccf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0021cae:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021cb6:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021cbe:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021cc6:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021ccd:	eb 28                	jmp    c0021cf7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021ccf:	fe c8                	dec    al
c0021cd1:	75 24                	jne    c0021cf7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021cd3:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021cdb:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021ce3:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021ceb:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021cf2:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021cf7:	0f b6 fb             	movzx  edi,bl
c0021cfa:	31 db                	xor    ebx,ebx
c0021cfc:	50                   	push   eax
c0021cfd:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0021d04:	8d 44 24 48          	lea    eax,[esp+0x48]
c0021d08:	50                   	push   eax
c0021d09:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0021d10:	e8 2f ea fd ff       	call   c0000744 <memcpy>
c0021d15:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0021d1c:	89 f9                	mov    ecx,edi
c0021d1e:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021d24:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0021d27:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021d2a:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0021d2d:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021d30:	83 c4 10             	add    esp,0x10
c0021d33:	39 c7                	cmp    edi,eax
c0021d35:	89 df                	mov    edi,ebx
c0021d37:	19 d7                	sbb    edi,edx
c0021d39:	72 10                	jb     c0021d4b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021d3b:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0021d42:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0021d49:	eb 0a                	jmp    c0021d55 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0021d4b:	29 c8                	sub    eax,ecx
c0021d4d:	19 da                	sbb    edx,ebx
c0021d4f:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021d52:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021d55:	31 c0                	xor    eax,eax
c0021d57:	eb 05                	jmp    c0021d5e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021d59:	b8 04 00 00 00       	mov    eax,0x4
c0021d5e:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021d64:	5b                   	pop    ebx
c0021d65:	5e                   	pop    esi
c0021d66:	5f                   	pop    edi
c0021d67:	5d                   	pop    ebp
c0021d68:	c3                   	ret    

c0021d69 <readRoot(unsigned int*, unsigned int*, char)>:
c0021d69:	81 ec 40 08 00 00    	sub    esp,0x840
c0021d6f:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021d77:	50                   	push   eax
c0021d78:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021d7c:	50                   	push   eax
c0021d7d:	6a 10                	push   0x10
c0021d7f:	e8 a1 fa ff ff       	call   c0021825 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021d84:	83 c4 0c             	add    esp,0xc
c0021d87:	6a 22                	push   0x22
c0021d89:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0021d90:	50                   	push   eax
c0021d91:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021d95:	50                   	push   eax
c0021d96:	e8 a9 e9 fd ff       	call   c0000744 <memcpy>
c0021d9b:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021da2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021da6:	89 10                	mov    DWORD PTR [eax],edx
c0021da8:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021daf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021db3:	89 10                	mov    DWORD PTR [eax],edx
c0021db5:	b0 01                	mov    al,0x1
c0021db7:	81 c4 4c 08 00 00    	add    esp,0x84c
c0021dbd:	c3                   	ret    

c0021dbe <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021dbe:	55                   	push   ebp
c0021dbf:	57                   	push   edi
c0021dc0:	56                   	push   esi
c0021dc1:	53                   	push   ebx
c0021dc2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021dc8:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021dcf:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021dd6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021dda:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021dde:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021de2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021de6:	75 03                	jne    c0021deb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021de8:	83 c3 02             	add    ebx,0x2
c0021deb:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021dee:	75 03                	jne    c0021df3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021df0:	43                   	inc    ebx
c0021df1:	eb f8                	jmp    c0021deb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021df3:	51                   	push   ecx
c0021df4:	68 00 01 00 00       	push   0x100
c0021df9:	6a 00                	push   0x0
c0021dfb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021dff:	50                   	push   eax
c0021e00:	e8 73 e9 fd ff       	call   c0000778 <memset>
c0021e05:	83 c4 10             	add    esp,0x10
c0021e08:	31 d2                	xor    edx,edx
c0021e0a:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021e0d:	84 c0                	test   al,al
c0021e0f:	74 21                	je     c0021e32 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021e11:	3c 2f                	cmp    al,0x2f
c0021e13:	75 0b                	jne    c0021e20 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021e15:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021e19:	bd 01 00 00 00       	mov    ebp,0x1
c0021e1e:	eb 14                	jmp    c0021e34 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021e20:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021e23:	80 f9 19             	cmp    cl,0x19
c0021e26:	77 03                	ja     c0021e2b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021e28:	83 e8 20             	sub    eax,0x20
c0021e2b:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021e2f:	42                   	inc    edx
c0021e30:	eb d8                	jmp    c0021e0a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021e32:	31 ed                	xor    ebp,ebp
c0021e34:	83 ec 0c             	sub    esp,0xc
c0021e37:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021e3e:	e8 00 da fe ff       	call   c000f843 <malloc>
c0021e43:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021e4a:	89 c6                	mov    esi,eax
c0021e4c:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021e52:	c1 ef 0b             	shr    edi,0xb
c0021e55:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021e5c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021e60:	83 c4 10             	add    esp,0x10
c0021e63:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021e68:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021e6c:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021e73:	74 28                	je     c0021e9d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021e75:	52                   	push   edx
c0021e76:	57                   	push   edi
c0021e77:	50                   	push   eax
c0021e78:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021e7c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021e83:	e8 9d f9 ff ff       	call   c0021825 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021e88:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021e8c:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021e93:	05 00 08 00 00       	add    eax,0x800
c0021e98:	83 c4 10             	add    esp,0x10
c0021e9b:	eb cb                	jmp    c0021e68 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021e9d:	83 ec 0c             	sub    esp,0xc
c0021ea0:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021ea4:	57                   	push   edi
c0021ea5:	e8 ea e8 fd ff       	call   c0000794 <strlen>
c0021eaa:	50                   	push   eax
c0021eab:	57                   	push   edi
c0021eac:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021eb3:	56                   	push   esi
c0021eb4:	e8 2a f9 ff ff       	call   c00217e3 <__memmem(unsigned char*, int, unsigned char*, int)>
c0021eb9:	83 c4 20             	add    esp,0x20
c0021ebc:	85 c0                	test   eax,eax
c0021ebe:	75 13                	jne    c0021ed3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021ec0:	83 ec 0c             	sub    esp,0xc
c0021ec3:	56                   	push   esi
c0021ec4:	e8 8a d9 fe ff       	call   c000f853 <free>
c0021ec9:	83 c4 10             	add    esp,0x10
c0021ecc:	31 c0                	xor    eax,eax
c0021ece:	e9 b3 00 00 00       	jmp    c0021f86 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021ed3:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021ed7:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021edb:	c1 e7 08             	shl    edi,0x8
c0021ede:	c1 e2 10             	shl    edx,0x10
c0021ee1:	09 d7                	or     edi,edx
c0021ee3:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021ee7:	09 d7                	or     edi,edx
c0021ee9:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021eed:	c1 e2 18             	shl    edx,0x18
c0021ef0:	09 d7                	or     edi,edx
c0021ef2:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021ef6:	89 d1                	mov    ecx,edx
c0021ef8:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021efc:	c1 e1 08             	shl    ecx,0x8
c0021eff:	c1 e2 10             	shl    edx,0x10
c0021f02:	09 ca                	or     edx,ecx
c0021f04:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021f08:	09 ca                	or     edx,ecx
c0021f0a:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021f0e:	c1 e1 18             	shl    ecx,0x18
c0021f11:	09 ca                	or     edx,ecx
c0021f13:	89 e9                	mov    ecx,ebp
c0021f15:	84 c9                	test   cl,cl
c0021f17:	74 3c                	je     c0021f55 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021f19:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021f1d:	83 ec 0c             	sub    esp,0xc
c0021f20:	56                   	push   esi
c0021f21:	e8 2d d9 fe ff       	call   c000f853 <free>
c0021f26:	83 c4 0c             	add    esp,0xc
c0021f29:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021f30:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021f35:	50                   	push   eax
c0021f36:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021f3d:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021f44:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021f48:	52                   	push   edx
c0021f49:	57                   	push   edi
c0021f4a:	53                   	push   ebx
c0021f4b:	e8 6e fe ff ff       	call   c0021dbe <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021f50:	83 c4 20             	add    esp,0x20
c0021f53:	eb 31                	jmp    c0021f86 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021f55:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021f58:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021f5f:	d0 e8                	shr    al,1
c0021f61:	89 3b                	mov    DWORD PTR [ebx],edi
c0021f63:	83 e0 01             	and    eax,0x1
c0021f66:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021f6d:	83 ec 0c             	sub    esp,0xc
c0021f70:	89 13                	mov    DWORD PTR [ebx],edx
c0021f72:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021f79:	89 03                	mov    DWORD PTR [ebx],eax
c0021f7b:	56                   	push   esi
c0021f7c:	e8 d2 d8 fe ff       	call   c000f853 <free>
c0021f81:	83 c4 10             	add    esp,0x10
c0021f84:	b0 01                	mov    al,0x1
c0021f86:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021f8c:	5b                   	pop    ebx
c0021f8d:	5e                   	pop    esi
c0021f8e:	5f                   	pop    edi
c0021f8f:	5d                   	pop    ebp
c0021f90:	c3                   	ret    

c0021f91 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021f91:	55                   	push   ebp
c0021f92:	57                   	push   edi
c0021f93:	56                   	push   esi
c0021f94:	53                   	push   ebx
c0021f95:	83 ec 20             	sub    esp,0x20
c0021f98:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021f9c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021fa0:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021fa4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021fac:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021fb4:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021fb9:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021fbf:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021fc5:	57                   	push   edi
c0021fc6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021fca:	50                   	push   eax
c0021fcb:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021fcf:	50                   	push   eax
c0021fd0:	e8 94 fd ff ff       	call   c0021d69 <readRoot(unsigned int*, unsigned int*, char)>
c0021fd5:	5a                   	pop    edx
c0021fd6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021fda:	e8 b5 e7 fd ff       	call   c0000794 <strlen>
c0021fdf:	83 c4 10             	add    esp,0x10
c0021fe2:	83 f8 03             	cmp    eax,0x3
c0021fe5:	77 17                	ja     c0021ffe <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021fe7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021feb:	89 03                	mov    DWORD PTR [ebx],eax
c0021fed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021ff1:	89 06                	mov    DWORD PTR [esi],eax
c0021ff3:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021ffa:	b0 01                	mov    al,0x1
c0021ffc:	eb 19                	jmp    c0022017 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021ffe:	50                   	push   eax
c0021fff:	55                   	push   ebp
c0022000:	57                   	push   edi
c0022001:	56                   	push   esi
c0022002:	53                   	push   ebx
c0022003:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022007:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002200b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002200f:	e8 aa fd ff ff       	call   c0021dbe <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0022014:	83 c4 20             	add    esp,0x20
c0022017:	83 c4 1c             	add    esp,0x1c
c002201a:	5b                   	pop    ebx
c002201b:	5e                   	pop    esi
c002201c:	5f                   	pop    edi
c002201d:	5d                   	pop    ebp
c002201e:	c3                   	ret    
c002201f:	90                   	nop

c0022020 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0022020:	57                   	push   edi
c0022021:	56                   	push   esi
c0022022:	53                   	push   ebx
c0022023:	83 ec 10             	sub    esp,0x10
c0022026:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002202a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002202e:	85 ff                	test   edi,edi
c0022030:	0f 84 9d 00 00 00    	je     c00220d3 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0022036:	85 f6                	test   esi,esi
c0022038:	0f 84 95 00 00 00    	je     c00220d3 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c002203e:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0022043:	74 17                	je     c002205c <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0022045:	83 ec 0c             	sub    esp,0xc
c0022048:	68 9f c9 02 c0       	push   0xc002c99f
c002204d:	e8 98 0f ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0022052:	83 c4 10             	add    esp,0x10
c0022055:	b8 03 00 00 00       	mov    eax,0x3
c002205a:	eb 7c                	jmp    c00220d8 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c002205c:	83 ec 0c             	sub    esp,0xc
c002205f:	6a 1c                	push   0x1c
c0022061:	e8 dd d7 fe ff       	call   c000f843 <malloc>
c0022066:	89 07                	mov    DWORD PTR [edi],eax
c0022068:	89 c3                	mov    ebx,eax
c002206a:	58                   	pop    eax
c002206b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002206f:	50                   	push   eax
c0022070:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022073:	50                   	push   eax
c0022074:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022078:	50                   	push   eax
c0022079:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002207d:	50                   	push   eax
c002207e:	56                   	push   esi
c002207f:	e8 0d ff ff ff       	call   c0021f91 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022084:	83 c4 20             	add    esp,0x20
c0022087:	84 c0                	test   al,al
c0022089:	74 07                	je     c0022092 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c002208b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022090:	74 0b                	je     c002209d <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0022092:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022096:	b8 01 00 00 00       	mov    eax,0x1
c002209b:	eb 3b                	jmp    c00220d8 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c002209d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220a1:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00220a5:	89 03                	mov    DWORD PTR [ebx],eax
c00220a7:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00220ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00220b2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00220b9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00220c0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00220c3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00220ca:	8a 06                	mov    al,BYTE PTR [esi]
c00220cc:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00220cf:	31 c0                	xor    eax,eax
c00220d1:	eb 05                	jmp    c00220d8 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00220d3:	b8 04 00 00 00       	mov    eax,0x4
c00220d8:	83 c4 10             	add    esp,0x10
c00220db:	5b                   	pop    ebx
c00220dc:	5e                   	pop    esi
c00220dd:	5f                   	pop    edi
c00220de:	c3                   	ret    
c00220df:	90                   	nop

c00220e0 <ISO9660::exists(char const*)>:
c00220e0:	83 ec 28             	sub    esp,0x28
c00220e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00220e7:	8d 54 24 18          	lea    edx,[esp+0x18]
c00220eb:	52                   	push   edx
c00220ec:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00220ef:	52                   	push   edx
c00220f0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00220f4:	52                   	push   edx
c00220f5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00220f9:	52                   	push   edx
c00220fa:	50                   	push   eax
c00220fb:	e8 91 fe ff ff       	call   c0021f91 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022100:	83 c4 3c             	add    esp,0x3c
c0022103:	c3                   	ret    

c0022104 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0022104:	56                   	push   esi
c0022105:	53                   	push   ebx
c0022106:	83 ec 14             	sub    esp,0x14
c0022109:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002210d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022111:	85 db                	test   ebx,ebx
c0022113:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0022117:	0f 94 c2             	sete   dl
c002211a:	85 f6                	test   esi,esi
c002211c:	0f 94 c0             	sete   al
c002211f:	08 c2                	or     dl,al
c0022121:	75 68                	jne    c002218b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022123:	85 c9                	test   ecx,ecx
c0022125:	74 64                	je     c002218b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022127:	83 ec 0c             	sub    esp,0xc
c002212a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c002212d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022131:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022137:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002213e:	50                   	push   eax
c002213f:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0022142:	50                   	push   eax
c0022143:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022147:	50                   	push   eax
c0022148:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002214c:	50                   	push   eax
c002214d:	51                   	push   ecx
c002214e:	e8 3e fe ff ff       	call   c0021f91 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022153:	83 c4 20             	add    esp,0x20
c0022156:	ba 01 00 00 00       	mov    edx,0x1
c002215b:	84 c0                	test   al,al
c002215d:	74 31                	je     c0022190 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002215f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022163:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002216a:	89 03                	mov    DWORD PTR [ebx],eax
c002216c:	ba 00 00 00 00       	mov    edx,0x0
c0022171:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022175:	85 c0                	test   eax,eax
c0022177:	0f 95 06             	setne  BYTE PTR [esi]
c002217a:	74 14                	je     c0022190 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002217c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022182:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022189:	eb 05                	jmp    c0022190 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002218b:	ba 04 00 00 00       	mov    edx,0x4
c0022190:	83 c4 14             	add    esp,0x14
c0022193:	89 d0                	mov    eax,edx
c0022195:	5b                   	pop    ebx
c0022196:	5e                   	pop    esi
c0022197:	c3                   	ret    

c0022198 <ISO9660::openDir(char const*, void**)>:
c0022198:	57                   	push   edi
c0022199:	56                   	push   esi
c002219a:	53                   	push   ebx
c002219b:	83 ec 10             	sub    esp,0x10
c002219e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00221a2:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00221a6:	85 ff                	test   edi,edi
c00221a8:	0f 84 95 00 00 00    	je     c0022243 <ISO9660::openDir(char const*, void**)+0xab>
c00221ae:	85 f6                	test   esi,esi
c00221b0:	0f 84 8d 00 00 00    	je     c0022243 <ISO9660::openDir(char const*, void**)+0xab>
c00221b6:	83 ec 0c             	sub    esp,0xc
c00221b9:	6a 1c                	push   0x1c
c00221bb:	e8 83 d6 fe ff       	call   c000f843 <malloc>
c00221c0:	89 07                	mov    DWORD PTR [edi],eax
c00221c2:	89 c3                	mov    ebx,eax
c00221c4:	59                   	pop    ecx
c00221c5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00221c9:	50                   	push   eax
c00221ca:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00221cd:	50                   	push   eax
c00221ce:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00221d2:	50                   	push   eax
c00221d3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00221d7:	50                   	push   eax
c00221d8:	56                   	push   esi
c00221d9:	e8 b3 fd ff ff       	call   c0021f91 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00221de:	83 c4 20             	add    esp,0x20
c00221e1:	84 c0                	test   al,al
c00221e3:	74 07                	je     c00221ec <ISO9660::openDir(char const*, void**)+0x54>
c00221e5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00221ea:	75 21                	jne    c002220d <ISO9660::openDir(char const*, void**)+0x75>
c00221ec:	0f b6 c0             	movzx  eax,al
c00221ef:	52                   	push   edx
c00221f0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00221f4:	50                   	push   eax
c00221f5:	68 c5 c9 02 c0       	push   0xc002c9c5
c00221fa:	e8 eb 0d ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c00221ff:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022203:	83 c4 10             	add    esp,0x10
c0022206:	b8 01 00 00 00       	mov    eax,0x1
c002220b:	eb 3b                	jmp    c0022248 <ISO9660::openDir(char const*, void**)+0xb0>
c002220d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022211:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022215:	89 03                	mov    DWORD PTR [ebx],eax
c0022217:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002221e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022222:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022229:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022230:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022233:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002223a:	8a 06                	mov    al,BYTE PTR [esi]
c002223c:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002223f:	31 c0                	xor    eax,eax
c0022241:	eb 05                	jmp    c0022248 <ISO9660::openDir(char const*, void**)+0xb0>
c0022243:	b8 04 00 00 00       	mov    eax,0x4
c0022248:	83 c4 10             	add    esp,0x10
c002224b:	5b                   	pop    ebx
c002224c:	5e                   	pop    esi
c002224d:	5f                   	pop    edi
c002224e:	c3                   	ret    
c002224f:	90                   	nop

c0022250 <ISO9660::ISO9660()>:
c0022250:	83 ec 0c             	sub    esp,0xc
c0022253:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022257:	83 ec 0c             	sub    esp,0xc
c002225a:	50                   	push   eax
c002225b:	e8 8e 10 ff ff       	call   c00132ee <Filesystem::Filesystem()>
c0022260:	83 c4 10             	add    esp,0x10
c0022263:	ba e8 c9 02 c0       	mov    edx,0xc002c9e8
c0022268:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002226c:	89 10                	mov    DWORD PTR [eax],edx
c002226e:	90                   	nop
c002226f:	83 c4 0c             	add    esp,0xc
c0022272:	c3                   	ret    
c0022273:	90                   	nop

c0022274 <SoundChannel::~SoundChannel()>:
c0022274:	83 ec 0c             	sub    esp,0xc
c0022277:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002227b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002227e:	83 ec 0c             	sub    esp,0xc
c0022281:	50                   	push   eax
c0022282:	e8 cc d5 fe ff       	call   c000f853 <free>
c0022287:	83 c4 10             	add    esp,0x10
c002228a:	90                   	nop
c002228b:	83 c4 0c             	add    esp,0xc
c002228e:	c3                   	ret    
c002228f:	90                   	nop

c0022290 <SoundChannel::setSpeed(float)>:
c0022290:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022294:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022298:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002229b:	c3                   	ret    

c002229c <SoundChannel::getSpeed()>:
c002229c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222a0:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00222a3:	c3                   	ret    

c00222a4 <SoundChannel::setVolume(int)>:
c00222a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00222a8:	83 f8 64             	cmp    eax,0x64
c00222ab:	7e 05                	jle    c00222b2 <SoundChannel::setVolume(int)+0xe>
c00222ad:	b8 64 00 00 00       	mov    eax,0x64
c00222b2:	85 c0                	test   eax,eax
c00222b4:	79 02                	jns    c00222b8 <SoundChannel::setVolume(int)+0x14>
c00222b6:	31 c0                	xor    eax,eax
c00222b8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00222bc:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c00222bf:	c3                   	ret    

c00222c0 <SoundChannel::getVolume()>:
c00222c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222c4:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00222c7:	c3                   	ret    

c00222c8 <SoundChannel::pause()>:
c00222c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222cc:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c00222d0:	c3                   	ret    
c00222d1:	90                   	nop

c00222d2 <SoundChannel::SoundChannel(int, int, int, int)>:
c00222d2:	83 ec 1c             	sub    esp,0x1c
c00222d5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00222d9:	e8 ea ff ff ff       	call   c00222c8 <SoundChannel::pause()>
c00222de:	83 c4 04             	add    esp,0x4
c00222e1:	6a 50                	push   0x50
c00222e3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00222e7:	e8 b8 ff ff ff       	call   c00222a4 <SoundChannel::setVolume(int)>
c00222ec:	83 c4 08             	add    esp,0x8
c00222ef:	a1 60 ca 02 c0       	mov    eax,ds:0xc002ca60
c00222f4:	50                   	push   eax
c00222f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00222f9:	e8 92 ff ff ff       	call   c0022290 <SoundChannel::setSpeed(float)>
c00222fe:	83 c4 08             	add    esp,0x8
c0022301:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022305:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022309:	89 10                	mov    DWORD PTR [eax],edx
c002230b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002230f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022313:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022316:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002231a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002231e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022321:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0022326:	75 23                	jne    c002234b <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c0022328:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002232c:	8b 10                	mov    edx,DWORD PTR [eax]
c002232e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022332:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022335:	0f af c2             	imul   eax,edx
c0022338:	85 c0                	test   eax,eax
c002233a:	79 03                	jns    c002233f <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c002233c:	83 c0 03             	add    eax,0x3
c002233f:	c1 f8 02             	sar    eax,0x2
c0022342:	05 a0 0f 00 00       	add    eax,0xfa0
c0022347:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002234b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002234f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022353:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0022356:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002235a:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0022361:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022365:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c002236c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022370:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022373:	c1 e0 02             	shl    eax,0x2
c0022376:	83 ec 0c             	sub    esp,0xc
c0022379:	50                   	push   eax
c002237a:	e8 c4 d4 fe ff       	call   c000f843 <malloc>
c002237f:	83 c4 10             	add    esp,0x10
c0022382:	89 c2                	mov    edx,eax
c0022384:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022388:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c002238b:	83 ec 04             	sub    esp,0x4
c002238e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0022392:	50                   	push   eax
c0022393:	6a 01                	push   0x1
c0022395:	6a 04                	push   0x4
c0022397:	e8 03 68 fe ff       	call   c0008b9f <src_new>
c002239c:	83 c4 10             	add    esp,0x10
c002239f:	89 c2                	mov    edx,eax
c00223a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223a5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00223a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223ac:	85 c0                	test   eax,eax
c00223ae:	74 10                	je     c00223c0 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c00223b0:	83 ec 0c             	sub    esp,0xc
c00223b3:	68 44 ca 02 c0       	push   0xc002ca44
c00223b8:	e8 d2 82 ff ff       	call   c001a68f <Krnl::panic(char const*)>
c00223bd:	83 c4 10             	add    esp,0x10
c00223c0:	a0 20 28 03 c0       	mov    al,ds:0xc0032820
c00223c5:	83 f0 01             	xor    eax,0x1
c00223c8:	84 c0                	test   al,al
c00223ca:	74 57                	je     c0022423 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c00223cc:	a1 64 ca 02 c0       	mov    eax,ds:0xc002ca64
c00223d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00223d5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00223dd:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00223e5:	7f 35                	jg     c002241c <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c00223e7:	83 ec 0c             	sub    esp,0xc
c00223ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00223ee:	e8 94 4f 00 00       	call   c0027387 <__floatsisf>
c00223f3:	83 c4 10             	add    esp,0x10
c00223f6:	8b 15 64 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca64
c00223fc:	83 ec 08             	sub    esp,0x8
c00223ff:	52                   	push   edx
c0022400:	50                   	push   eax
c0022401:	e8 93 4b 00 00       	call   c0026f99 <__mulsf3>
c0022406:	83 c4 10             	add    esp,0x10
c0022409:	89 c2                	mov    edx,eax
c002240b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002240f:	89 14 85 20 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdbe0],edx
c0022416:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002241a:	eb c1                	jmp    c00223dd <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c002241c:	c6 05 20 28 03 c0 01 	mov    BYTE PTR ds:0xc0032820,0x1
c0022423:	90                   	nop
c0022424:	83 c4 1c             	add    esp,0x1c
c0022427:	c3                   	ret    

c0022428 <SoundChannel::play()>:
c0022428:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002242c:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0022430:	c3                   	ret    
c0022431:	90                   	nop

c0022432 <SoundChannel::paused()>:
c0022432:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022436:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0022439:	c3                   	ret    

c002243a <SoundChannel::getSampleRate()>:
c002243a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002243e:	8b 00                	mov    eax,DWORD PTR [eax]
c0022440:	c3                   	ret    
c0022441:	90                   	nop

c0022442 <SoundChannel::getBits()>:
c0022442:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022446:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022449:	c3                   	ret    

c002244a <SoundChannel::getBufferUsed()>:
c002244a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002244e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0022451:	c3                   	ret    

c0022452 <SoundChannel::getBufferSize()>:
c0022452:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022456:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022459:	c3                   	ret    

c002245a <SoundChannel::unbuffer(float*, int, int)>:
c002245a:	56                   	push   esi
c002245b:	53                   	push   ebx
c002245c:	83 ec 40             	sub    esp,0x40
c002245f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0022463:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0022466:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002246a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c002246d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022471:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022475:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0022479:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002247d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022481:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022485:	e8 fd 4e 00 00       	call   c0027387 <__floatsisf>
c002248a:	5a                   	pop    edx
c002248b:	89 c6                	mov    esi,eax
c002248d:	ff 33                	push   DWORD PTR [ebx]
c002248f:	e8 f3 4e 00 00       	call   c0027387 <__floatsisf>
c0022494:	59                   	pop    ecx
c0022495:	5a                   	pop    edx
c0022496:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0022499:	50                   	push   eax
c002249a:	e8 fa 4a 00 00       	call   c0026f99 <__mulsf3>
c002249f:	59                   	pop    ecx
c00224a0:	5a                   	pop    edx
c00224a1:	50                   	push   eax
c00224a2:	56                   	push   esi
c00224a3:	e8 b4 4c 00 00       	call   c002715c <__divsf3>
c00224a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00224ab:	e8 a7 61 00 00       	call   c0028657 <__extendsfdf2>
c00224b0:	59                   	pop    ecx
c00224b1:	5e                   	pop    esi
c00224b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00224b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00224ba:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00224c2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00224c6:	50                   	push   eax
c00224c7:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00224ca:	e8 c5 62 fe ff       	call   c0008794 <src_process>
c00224cf:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00224d3:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00224d6:	83 c4 0c             	add    esp,0xc
c00224d9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00224dc:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c00224df:	29 d0                	sub    eax,edx
c00224e1:	c1 e0 02             	shl    eax,0x2
c00224e4:	50                   	push   eax
c00224e5:	8d 04 91             	lea    eax,[ecx+edx*4]
c00224e8:	50                   	push   eax
c00224e9:	51                   	push   ecx
c00224ea:	e8 8d e1 fd ff       	call   c000067c <memmove>
c00224ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00224f3:	83 c4 44             	add    esp,0x44
c00224f6:	5b                   	pop    ebx
c00224f7:	5e                   	pop    esi
c00224f8:	c3                   	ret    
c00224f9:	90                   	nop

c00224fa <SoundChannel::buffer8(unsigned char*, int)>:
c00224fa:	55                   	push   ebp
c00224fb:	57                   	push   edi
c00224fc:	56                   	push   esi
c00224fd:	53                   	push   ebx
c00224fe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022502:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0022506:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022509:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002250d:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022510:	74 7a                	je     c002258c <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022512:	85 ff                	test   edi,edi
c0022514:	7e 76                	jle    c002258c <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022516:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c002251a:	8d 70 01             	lea    esi,[eax+0x1]
c002251d:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022520:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022523:	8b 1c 9d 20 24 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdbe0]
c002252a:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c002252d:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022530:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022533:	74 5e                	je     c0022593 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0022535:	83 ff 01             	cmp    edi,0x1
c0022538:	74 4b                	je     c0022585 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c002253a:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c002253e:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022541:	8d 70 01             	lea    esi,[eax+0x1]
c0022544:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022547:	8b 1c 9d 20 24 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdbe0]
c002254e:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022551:	b8 02 00 00 00       	mov    eax,0x2
c0022556:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022559:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002255c:	75 23                	jne    c0022581 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c002255e:	eb 27                	jmp    c0022587 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022560:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0022565:	8d 71 01             	lea    esi,[ecx+0x1]
c0022568:	40                   	inc    eax
c0022569:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002256c:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c002256f:	8b 1c 9d 20 24 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdbe0]
c0022576:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0022579:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c002257c:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002257f:	74 06                	je     c0022587 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022581:	39 c7                	cmp    edi,eax
c0022583:	75 db                	jne    c0022560 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0022585:	89 f8                	mov    eax,edi
c0022587:	5b                   	pop    ebx
c0022588:	5e                   	pop    esi
c0022589:	5f                   	pop    edi
c002258a:	5d                   	pop    ebp
c002258b:	c3                   	ret    
c002258c:	5b                   	pop    ebx
c002258d:	31 c0                	xor    eax,eax
c002258f:	5e                   	pop    esi
c0022590:	5f                   	pop    edi
c0022591:	5d                   	pop    ebp
c0022592:	c3                   	ret    
c0022593:	b8 01 00 00 00       	mov    eax,0x1
c0022598:	eb ed                	jmp    c0022587 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c002259a <SoundDevice::SoundDevice(char const*)>:
c002259a:	83 ec 1c             	sub    esp,0x1c
c002259d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225a1:	83 ec 08             	sub    esp,0x8
c00225a4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00225a8:	50                   	push   eax
c00225a9:	e8 52 20 ff ff       	call   c0014600 <Device::Device(char const*)>
c00225ae:	83 c4 10             	add    esp,0x10
c00225b1:	ba 70 ca 02 c0       	mov    edx,0xc002ca70
c00225b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225ba:	89 10                	mov    DWORD PTR [eax],edx
c00225bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225c0:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c00225ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225ce:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00225d8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00225e0:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00225e5:	7f 19                	jg     c0022600 <SoundDevice::SoundDevice(char const*)+0x66>
c00225e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00225ef:	83 c2 54             	add    edx,0x54
c00225f2:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c00225fa:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00225fe:	eb e0                	jmp    c00225e0 <SoundDevice::SoundDevice(char const*)+0x46>
c0022600:	90                   	nop
c0022601:	83 c4 1c             	add    esp,0x1c
c0022604:	c3                   	ret    
c0022605:	90                   	nop

c0022606 <SoundDevice::~SoundDevice()>:
c0022606:	53                   	push   ebx
c0022607:	83 ec 18             	sub    esp,0x18
c002260a:	ba 70 ca 02 c0       	mov    edx,0xc002ca70
c002260f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022613:	89 10                	mov    DWORD PTR [eax],edx
c0022615:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002261d:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022622:	7f 46                	jg     c002266a <SoundDevice::~SoundDevice()+0x64>
c0022624:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022628:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002262c:	83 c2 54             	add    edx,0x54
c002262f:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022633:	85 c0                	test   eax,eax
c0022635:	74 2d                	je     c0022664 <SoundDevice::~SoundDevice()+0x5e>
c0022637:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002263b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002263f:	83 c2 54             	add    edx,0x54
c0022642:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0022646:	85 db                	test   ebx,ebx
c0022648:	74 1a                	je     c0022664 <SoundDevice::~SoundDevice()+0x5e>
c002264a:	83 ec 0c             	sub    esp,0xc
c002264d:	53                   	push   ebx
c002264e:	e8 21 fc ff ff       	call   c0022274 <SoundChannel::~SoundChannel()>
c0022653:	83 c4 10             	add    esp,0x10
c0022656:	83 ec 08             	sub    esp,0x8
c0022659:	6a 2c                	push   0x2c
c002265b:	53                   	push   ebx
c002265c:	e8 a9 08 ff ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c0022661:	83 c4 10             	add    esp,0x10
c0022664:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022668:	eb b3                	jmp    c002261d <SoundDevice::~SoundDevice()+0x17>
c002266a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002266e:	83 ec 0c             	sub    esp,0xc
c0022671:	50                   	push   eax
c0022672:	e8 6b 1c ff ff       	call   c00142e2 <Device::~Device()>
c0022677:	83 c4 10             	add    esp,0x10
c002267a:	90                   	nop
c002267b:	83 c4 18             	add    esp,0x18
c002267e:	5b                   	pop    ebx
c002267f:	c3                   	ret    

c0022680 <SoundDevice::~SoundDevice()>:
c0022680:	83 ec 0c             	sub    esp,0xc
c0022683:	83 ec 0c             	sub    esp,0xc
c0022686:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002268a:	e8 77 ff ff ff       	call   c0022606 <SoundDevice::~SoundDevice()>
c002268f:	83 c4 10             	add    esp,0x10
c0022692:	83 ec 08             	sub    esp,0x8
c0022695:	68 e4 01 00 00       	push   0x1e4
c002269a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002269e:	e8 67 08 ff ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c00226a3:	83 c4 10             	add    esp,0x10
c00226a6:	83 c4 0c             	add    esp,0xc
c00226a9:	c3                   	ret    

c00226aa <SoundDevice::getFreeChannelNum()>:
c00226aa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00226ae:	31 c0                	xor    eax,eax
c00226b0:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c00226b8:	74 09                	je     c00226c3 <SoundDevice::getFreeChannelNum()+0x19>
c00226ba:	40                   	inc    eax
c00226bb:	83 f8 20             	cmp    eax,0x20
c00226be:	75 f0                	jne    c00226b0 <SoundDevice::getFreeChannelNum()+0x6>
c00226c0:	83 c8 ff             	or     eax,0xffffffff
c00226c3:	c3                   	ret    

c00226c4 <SoundDevice::addChannel(SoundChannel*)>:
c00226c4:	56                   	push   esi
c00226c5:	53                   	push   ebx
c00226c6:	51                   	push   ecx
c00226c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00226cb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00226cf:	53                   	push   ebx
c00226d0:	e8 d5 ff ff ff       	call   c00226aa <SoundDevice::getFreeChannelNum()>
c00226d5:	5a                   	pop    edx
c00226d6:	83 f8 ff             	cmp    eax,0xffffffff
c00226d9:	74 51                	je     c002272c <SoundDevice::addChannel(SoundChannel*)+0x68>
c00226db:	85 f6                	test   esi,esi
c00226dd:	74 4d                	je     c002272c <SoundDevice::addChannel(SoundChannel*)+0x68>
c00226df:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c00226e6:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c00226ed:	75 30                	jne    c002271f <SoundDevice::addChannel(SoundChannel*)+0x5b>
c00226ef:	83 ec 0c             	sub    esp,0xc
c00226f2:	56                   	push   esi
c00226f3:	e8 42 fd ff ff       	call   c002243a <SoundChannel::getSampleRate()>
c00226f8:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c00226fe:	89 34 24             	mov    DWORD PTR [esp],esi
c0022701:	e8 3c fd ff ff       	call   c0022442 <SoundChannel::getBits()>
c0022706:	83 c4 0c             	add    esp,0xc
c0022709:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c002270f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022711:	50                   	push   eax
c0022712:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022718:	53                   	push   ebx
c0022719:	ff 52 28             	call   DWORD PTR [edx+0x28]
c002271c:	83 c4 10             	add    esp,0x10
c002271f:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0022725:	b8 01 00 00 00       	mov    eax,0x1
c002272a:	eb 03                	jmp    c002272f <SoundDevice::addChannel(SoundChannel*)+0x6b>
c002272c:	83 c8 ff             	or     eax,0xffffffff
c002272f:	5a                   	pop    edx
c0022730:	5b                   	pop    ebx
c0022731:	5e                   	pop    esi
c0022732:	c3                   	ret    
c0022733:	90                   	nop

c0022734 <SoundDevice::removeChannel(int)>:
c0022734:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022738:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002273c:	83 fa 1f             	cmp    edx,0x1f
c002273f:	77 23                	ja     c0022764 <SoundDevice::removeChannel(int)+0x30>
c0022741:	8d 14 90             	lea    edx,[eax+edx*4]
c0022744:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c002274b:	74 17                	je     c0022764 <SoundDevice::removeChannel(int)+0x30>
c002274d:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0022757:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c002275d:	75 05                	jne    c0022764 <SoundDevice::removeChannel(int)+0x30>
c002275f:	8b 00                	mov    eax,DWORD PTR [eax]
c0022761:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0022764:	c3                   	ret    
c0022765:	90                   	nop

c0022766 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0022766:	57                   	push   edi
c0022767:	56                   	push   esi
c0022768:	53                   	push   ebx
c0022769:	31 db                	xor    ebx,ebx
c002276b:	83 ec 10             	sub    esp,0x10
c002276e:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022772:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022776:	0f 8d cb 00 00 00    	jge    c0022847 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c002277c:	83 ec 0c             	sub    esp,0xc
c002277f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022783:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022786:	e8 cc 5e 00 00       	call   c0028657 <__extendsfdf2>
c002278b:	83 c4 10             	add    esp,0x10
c002278e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022792:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022796:	68 00 00 f0 3f       	push   0x3ff00000
c002279b:	6a 00                	push   0x0
c002279d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227a5:	e8 39 4e 00 00       	call   c00275e3 <__adddf3>
c00227aa:	83 c4 10             	add    esp,0x10
c00227ad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00227b1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00227b5:	68 00 00 e0 3f       	push   0x3fe00000
c00227ba:	6a 00                	push   0x0
c00227bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227c4:	e8 97 54 00 00       	call   c0027c60 <__muldf3>
c00227c9:	83 c4 10             	add    esp,0x10
c00227cc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00227d0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00227d4:	68 00 00 60 40       	push   0x40600000
c00227d9:	6a 00                	push   0x0
c00227db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227e3:	e8 78 54 00 00       	call   c0027c60 <__muldf3>
c00227e8:	59                   	pop    ecx
c00227e9:	5f                   	pop    edi
c00227ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00227ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00227f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227fa:	e8 34 5d 00 00       	call   c0028533 <__truncdfsf2>
c00227ff:	5a                   	pop    edx
c0022800:	89 c7                	mov    edi,eax
c0022802:	59                   	pop    ecx
c0022803:	68 00 00 fe 42       	push   0x42fe0000
c0022808:	50                   	push   eax
c0022809:	e8 cf 4d 00 00       	call   c00275dd <__gesf2>
c002280e:	83 c4 10             	add    esp,0x10
c0022811:	85 c0                	test   eax,eax
c0022813:	78 06                	js     c002281b <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022815:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022819:	eb 26                	jmp    c0022841 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c002281b:	50                   	push   eax
c002281c:	50                   	push   eax
c002281d:	6a 00                	push   0x0
c002281f:	57                   	push   edi
c0022820:	e8 bc 4d 00 00       	call   c00275e1 <__lesf2>
c0022825:	83 c4 10             	add    esp,0x10
c0022828:	85 c0                	test   eax,eax
c002282a:	7f 06                	jg     c0022832 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c002282c:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022830:	eb 0f                	jmp    c0022841 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022832:	83 ec 0c             	sub    esp,0xc
c0022835:	57                   	push   edi
c0022836:	e8 b1 5e 00 00       	call   c00286ec <lrintf>
c002283b:	83 c4 10             	add    esp,0x10
c002283e:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022841:	43                   	inc    ebx
c0022842:	e9 2b ff ff ff       	jmp    c0022772 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0022847:	83 c4 10             	add    esp,0x10
c002284a:	5b                   	pop    ebx
c002284b:	5e                   	pop    esi
c002284c:	5f                   	pop    edi
c002284d:	c3                   	ret    

c002284e <SoundDevice::getAudio(int, float*, float*)>:
c002284e:	55                   	push   ebp
c002284f:	57                   	push   edi
c0022850:	56                   	push   esi
c0022851:	53                   	push   ebx
c0022852:	31 db                	xor    ebx,ebx
c0022854:	83 ec 20             	sub    esp,0x20
c0022857:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002285b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002285f:	c1 e0 02             	shl    eax,0x2
c0022862:	50                   	push   eax
c0022863:	6a 00                	push   0x0
c0022865:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0022869:	e8 0a df fd ff       	call   c0000778 <memset>
c002286e:	83 c4 10             	add    esp,0x10
c0022871:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0022875:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c002287c:	85 c0                	test   eax,eax
c002287e:	0f 84 d7 00 00 00    	je     c002295b <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022884:	83 ec 0c             	sub    esp,0xc
c0022887:	50                   	push   eax
c0022888:	e8 a5 fb ff ff       	call   c0022432 <SoundChannel::paused()>
c002288d:	83 c4 10             	add    esp,0x10
c0022890:	84 c0                	test   al,al
c0022892:	0f 85 c3 00 00 00    	jne    c002295b <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022898:	83 ec 0c             	sub    esp,0xc
c002289b:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00228a2:	e8 19 fa ff ff       	call   c00222c0 <SoundChannel::getVolume()>
c00228a7:	83 c4 10             	add    esp,0x10
c00228aa:	85 c0                	test   eax,eax
c00228ac:	0f 84 a9 00 00 00    	je     c002295b <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00228b2:	83 ec 0c             	sub    esp,0xc
c00228b5:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00228bc:	e8 ff f9 ff ff       	call   c00222c0 <SoundChannel::getVolume()>
c00228c1:	83 ec 0c             	sub    esp,0xc
c00228c4:	50                   	push   eax
c00228c5:	e8 bd 4a 00 00       	call   c0027387 <__floatsisf>
c00228ca:	59                   	pop    ecx
c00228cb:	5d                   	pop    ebp
c00228cc:	31 ed                	xor    ebp,ebp
c00228ce:	68 00 00 c8 42       	push   0x42c80000
c00228d3:	50                   	push   eax
c00228d4:	e8 83 48 00 00       	call   c002715c <__divsf3>
c00228d9:	83 c4 10             	add    esp,0x10
c00228dc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00228e0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00228e4:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c00228ea:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00228ee:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00228f5:	e8 60 fb ff ff       	call   c002245a <SoundChannel::unbuffer(float*, int, int)>
c00228fa:	83 c4 20             	add    esp,0x20
c00228fd:	89 c1                	mov    ecx,eax
c00228ff:	39 cd                	cmp    ebp,ecx
c0022901:	7d 52                	jge    c0022955 <SoundDevice::getAudio(int, float*, float*)+0x107>
c0022903:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0022907:	50                   	push   eax
c0022908:	50                   	push   eax
c0022909:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002290d:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022910:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022914:	e8 80 46 00 00       	call   c0026f99 <__mulsf3>
c0022919:	5a                   	pop    edx
c002291a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002291e:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0022924:	e8 5e 4a 00 00       	call   c0027387 <__floatsisf>
c0022929:	59                   	pop    ecx
c002292a:	5a                   	pop    edx
c002292b:	50                   	push   eax
c002292c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022930:	e8 27 48 00 00       	call   c002715c <__divsf3>
c0022935:	59                   	pop    ecx
c0022936:	5a                   	pop    edx
c0022937:	50                   	push   eax
c0022938:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002293c:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c002293f:	e8 32 43 00 00       	call   c0026c76 <__addsf3>
c0022944:	83 c4 10             	add    esp,0x10
c0022947:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002294b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002294f:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0022952:	45                   	inc    ebp
c0022953:	eb aa                	jmp    c00228ff <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0022955:	39 cf                	cmp    edi,ecx
c0022957:	7e 02                	jle    c002295b <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022959:	89 cf                	mov    edi,ecx
c002295b:	43                   	inc    ebx
c002295c:	83 fb 20             	cmp    ebx,0x20
c002295f:	0f 85 10 ff ff ff    	jne    c0022875 <SoundDevice::getAudio(int, float*, float*)+0x27>
c0022965:	83 c4 1c             	add    esp,0x1c
c0022968:	89 f8                	mov    eax,edi
c002296a:	5b                   	pop    ebx
c002296b:	5e                   	pop    esi
c002296c:	5f                   	pop    edi
c002296d:	5d                   	pop    ebp
c002296e:	c3                   	ret    
c002296f:	90                   	nop

c0022970 <PCI::open(int, int, void*)>:
c0022970:	83 ec 18             	sub    esp,0x18
c0022973:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022977:	8b 10                	mov    edx,DWORD PTR [eax]
c0022979:	50                   	push   eax
c002297a:	ff 52 18             	call   DWORD PTR [edx+0x18]
c002297d:	31 c0                	xor    eax,eax
c002297f:	83 c4 1c             	add    esp,0x1c
c0022982:	c3                   	ret    
c0022983:	90                   	nop

c0022984 <PCI::close(int, int, void*)>:
c0022984:	31 c0                	xor    eax,eax
c0022986:	c3                   	ret    
c0022987:	90                   	nop

c0022988 <PCI::PCI()>:
c0022988:	83 ec 0c             	sub    esp,0xc
c002298b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002298f:	83 ec 08             	sub    esp,0x8
c0022992:	68 a0 ca 02 c0       	push   0xc002caa0
c0022997:	50                   	push   eax
c0022998:	e8 e7 12 ff ff       	call   c0013c84 <Bus::Bus(char const*)>
c002299d:	83 c4 10             	add    esp,0x10
c00229a0:	ba 0c cb 02 c0       	mov    edx,0xc002cb0c
c00229a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229a9:	89 10                	mov    DWORD PTR [eax],edx
c00229ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229af:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00229b5:	0f b6 d0             	movzx  edx,al
c00229b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229bc:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00229c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229c7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00229cd:	0f b6 d0             	movzx  edx,al
c00229d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229d4:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00229d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229dd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00229e3:	8d 50 01             	lea    edx,[eax+0x1]
c00229e6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00229ea:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00229f0:	0f b6 d0             	movzx  edx,al
c00229f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229f7:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00229fb:	83 c9 c0             	or     ecx,0xffffffc0
c00229fe:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022a02:	90                   	nop
c0022a03:	83 c4 0c             	add    esp,0xc
c0022a06:	c3                   	ret    
c0022a07:	90                   	nop

c0022a08 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022a08:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0022a0c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022a11:	89 ca                	mov    edx,ecx
c0022a13:	c1 e0 10             	shl    eax,0x10
c0022a16:	81 e2 fc 00 00 00    	and    edx,0xfc
c0022a1c:	09 d0                	or     eax,edx
c0022a1e:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0022a23:	c1 e2 08             	shl    edx,0x8
c0022a26:	09 d0                	or     eax,edx
c0022a28:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0022a2d:	c1 e2 0b             	shl    edx,0xb
c0022a30:	09 d0                	or     eax,edx
c0022a32:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022a37:	0d 00 00 00 80       	or     eax,0x80000000
c0022a3c:	ef                   	out    dx,eax
c0022a3d:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022a42:	ed                   	in     eax,dx
c0022a43:	83 e1 02             	and    ecx,0x2
c0022a46:	0f b6 c9             	movzx  ecx,cl
c0022a49:	c1 e1 03             	shl    ecx,0x3
c0022a4c:	d3 e8                	shr    eax,cl
c0022a4e:	c3                   	ret    
c0022a4f:	90                   	nop

c0022a50 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0022a50:	6a 00                	push   0x0
c0022a52:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a57:	50                   	push   eax
c0022a58:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a5d:	50                   	push   eax
c0022a5e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a63:	50                   	push   eax
c0022a64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a68:	e8 9b ff ff ff       	call   c0022a08 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a6d:	83 c4 14             	add    esp,0x14
c0022a70:	c3                   	ret    
c0022a71:	90                   	nop

c0022a72 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022a72:	6a 0e                	push   0xe
c0022a74:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a79:	50                   	push   eax
c0022a7a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a7f:	50                   	push   eax
c0022a80:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a85:	50                   	push   eax
c0022a86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a8a:	e8 79 ff ff ff       	call   c0022a08 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a8f:	83 c4 14             	add    esp,0x14
c0022a92:	0f b6 c0             	movzx  eax,al
c0022a95:	c3                   	ret    

c0022a96 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022a96:	55                   	push   ebp
c0022a97:	57                   	push   edi
c0022a98:	56                   	push   esi
c0022a99:	53                   	push   ebx
c0022a9a:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0022a9f:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0022aa4:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0022aa9:	6a 0a                	push   0xa
c0022aab:	56                   	push   esi
c0022aac:	55                   	push   ebp
c0022aad:	57                   	push   edi
c0022aae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022ab2:	e8 51 ff ff ff       	call   c0022a08 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ab7:	6a 0a                	push   0xa
c0022ab9:	89 c3                	mov    ebx,eax
c0022abb:	56                   	push   esi
c0022abc:	0f b6 db             	movzx  ebx,bl
c0022abf:	55                   	push   ebp
c0022ac0:	57                   	push   edi
c0022ac1:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022ac5:	e8 3e ff ff ff       	call   c0022a08 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022aca:	83 c4 28             	add    esp,0x28
c0022acd:	25 00 ff 00 00       	and    eax,0xff00
c0022ad2:	09 d8                	or     eax,ebx
c0022ad4:	5b                   	pop    ebx
c0022ad5:	5e                   	pop    esi
c0022ad6:	5f                   	pop    edi
c0022ad7:	5d                   	pop    ebp
c0022ad8:	c3                   	ret    
c0022ad9:	90                   	nop

c0022ada <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022ada:	6a 08                	push   0x8
c0022adc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ae1:	50                   	push   eax
c0022ae2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ae7:	50                   	push   eax
c0022ae8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022aed:	50                   	push   eax
c0022aee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022af2:	e8 11 ff ff ff       	call   c0022a08 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022af7:	83 c4 14             	add    esp,0x14
c0022afa:	0f b6 c4             	movzx  eax,ah
c0022afd:	c3                   	ret    

c0022afe <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022afe:	6a 08                	push   0x8
c0022b00:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b05:	50                   	push   eax
c0022b06:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b0b:	50                   	push   eax
c0022b0c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b11:	50                   	push   eax
c0022b12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b16:	e8 ed fe ff ff       	call   c0022a08 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b1b:	83 c4 14             	add    esp,0x14
c0022b1e:	c3                   	ret    
c0022b1f:	90                   	nop

c0022b20 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022b20:	6a 3c                	push   0x3c
c0022b22:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b27:	50                   	push   eax
c0022b28:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b2d:	50                   	push   eax
c0022b2e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b33:	50                   	push   eax
c0022b34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b38:	e8 cb fe ff ff       	call   c0022a08 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b3d:	83 c4 14             	add    esp,0x14
c0022b40:	c3                   	ret    
c0022b41:	90                   	nop

c0022b42 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022b42:	6a 18                	push   0x18
c0022b44:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b49:	50                   	push   eax
c0022b4a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b4f:	50                   	push   eax
c0022b50:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b55:	50                   	push   eax
c0022b56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b5a:	e8 a9 fe ff ff       	call   c0022a08 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b5f:	83 c4 14             	add    esp,0x14
c0022b62:	0f b6 c4             	movzx  eax,ah
c0022b65:	c3                   	ret    

c0022b66 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022b66:	55                   	push   ebp
c0022b67:	57                   	push   edi
c0022b68:	56                   	push   esi
c0022b69:	53                   	push   ebx
c0022b6a:	50                   	push   eax
c0022b6b:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0022b6f:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0022b74:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022b79:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0022b7e:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022b85:	8d 43 12             	lea    eax,[ebx+0x12]
c0022b88:	83 c3 10             	add    ebx,0x10
c0022b8b:	0f b6 c0             	movzx  eax,al
c0022b8e:	0f b6 db             	movzx  ebx,bl
c0022b91:	50                   	push   eax
c0022b92:	51                   	push   ecx
c0022b93:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022b97:	57                   	push   edi
c0022b98:	55                   	push   ebp
c0022b99:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0022b9d:	e8 66 fe ff ff       	call   c0022a08 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ba2:	53                   	push   ebx
c0022ba3:	89 c6                	mov    esi,eax
c0022ba5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022ba9:	c1 e6 10             	shl    esi,0x10
c0022bac:	51                   	push   ecx
c0022bad:	57                   	push   edi
c0022bae:	55                   	push   ebp
c0022baf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022bb3:	e8 50 fe ff ff       	call   c0022a08 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022bb8:	83 c4 2c             	add    esp,0x2c
c0022bbb:	0f b7 c0             	movzx  eax,ax
c0022bbe:	5b                   	pop    ebx
c0022bbf:	09 f0                	or     eax,esi
c0022bc1:	5e                   	pop    esi
c0022bc2:	5f                   	pop    edi
c0022bc3:	5d                   	pop    ebp
c0022bc4:	c3                   	ret    
c0022bc5:	90                   	nop

c0022bc6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022bc6:	53                   	push   ebx
c0022bc7:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022bcc:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0022bd1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022bd5:	c1 e1 10             	shl    ecx,0x10
c0022bd8:	25 fc 00 00 00       	and    eax,0xfc
c0022bdd:	09 c1                	or     ecx,eax
c0022bdf:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022be4:	c1 e0 08             	shl    eax,0x8
c0022be7:	09 c1                	or     ecx,eax
c0022be9:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0022bee:	c1 e0 0b             	shl    eax,0xb
c0022bf1:	09 c1                	or     ecx,eax
c0022bf3:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022bf9:	89 c8                	mov    eax,ecx
c0022bfb:	ef                   	out    dx,eax
c0022bfc:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022c01:	ed                   	in     eax,dx
c0022c02:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0022c07:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0022c0c:	74 0a                	je     c0022c18 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0022c0e:	0f b7 d8             	movzx  ebx,ax
c0022c11:	89 d0                	mov    eax,edx
c0022c13:	c1 e0 10             	shl    eax,0x10
c0022c16:	eb 05                	jmp    c0022c1d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0022c18:	66 31 c0             	xor    ax,ax
c0022c1b:	89 d3                	mov    ebx,edx
c0022c1d:	09 c3                	or     ebx,eax
c0022c1f:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022c24:	89 c8                	mov    eax,ecx
c0022c26:	ef                   	out    dx,eax
c0022c27:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022c2c:	89 d8                	mov    eax,ebx
c0022c2e:	ef                   	out    dx,eax
c0022c2f:	5b                   	pop    ebx
c0022c30:	c3                   	ret    
c0022c31:	90                   	nop

c0022c32 <PCI::checkBus(unsigned char)>:
c0022c32:	56                   	push   esi
c0022c33:	53                   	push   ebx
c0022c34:	31 db                	xor    ebx,ebx
c0022c36:	51                   	push   ecx
c0022c37:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022c3c:	52                   	push   edx
c0022c3d:	53                   	push   ebx
c0022c3e:	43                   	inc    ebx
c0022c3f:	56                   	push   esi
c0022c40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022c44:	e8 2b 03 00 00       	call   c0022f74 <PCI::checkDevice(unsigned char, unsigned char)>
c0022c49:	83 c4 10             	add    esp,0x10
c0022c4c:	83 fb 20             	cmp    ebx,0x20
c0022c4f:	75 eb                	jne    c0022c3c <PCI::checkBus(unsigned char)+0xa>
c0022c51:	58                   	pop    eax
c0022c52:	5b                   	pop    ebx
c0022c53:	5e                   	pop    esi
c0022c54:	c3                   	ret    
c0022c55:	90                   	nop

c0022c56 <PCI::foundDevice(PCIDeviceInfo)>:
c0022c56:	55                   	push   ebp
c0022c57:	57                   	push   edi
c0022c58:	56                   	push   esi
c0022c59:	53                   	push   ebx
c0022c5a:	83 ec 1c             	sub    esp,0x1c
c0022c5d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022c61:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022c67:	0f 84 52 01 00 00    	je     c0022dbf <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022c6d:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022c71:	66 81 f9 06 04       	cmp    cx,0x406
c0022c76:	75 2c                	jne    c0022ca4 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022c78:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022c7d:	50                   	push   eax
c0022c7e:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022c83:	50                   	push   eax
c0022c84:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022c89:	50                   	push   eax
c0022c8a:	56                   	push   esi
c0022c8b:	e8 b2 fe ff ff       	call   c0022b42 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022c90:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022c94:	0f b6 c0             	movzx  eax,al
c0022c97:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022c9b:	83 c4 2c             	add    esp,0x2c
c0022c9e:	5b                   	pop    ebx
c0022c9f:	5e                   	pop    esi
c0022ca0:	5f                   	pop    edi
c0022ca1:	5d                   	pop    ebp
c0022ca2:	eb 8e                	jmp    c0022c32 <PCI::checkBus(unsigned char)>
c0022ca4:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022ca8:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022cae:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022cb2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022cb6:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022cba:	88 d3                	mov    bl,dl
c0022cbc:	85 c0                	test   eax,eax
c0022cbe:	74 33                	je     c0022cf3 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022cc0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022cc3:	85 d2                	test   edx,edx
c0022cc5:	74 28                	je     c0022cef <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022cc7:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022ccd:	31 ef                	xor    edi,ebp
c0022ccf:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022cd5:	75 18                	jne    c0022cef <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022cd7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022cdb:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022ce1:	75 0c                	jne    c0022cef <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022ce3:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022ce9:	0f 84 d0 00 00 00    	je     c0022dbf <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022cef:	8b 00                	mov    eax,DWORD PTR [eax]
c0022cf1:	eb c9                	jmp    c0022cbc <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022cf3:	66 81 f9 01 06       	cmp    cx,0x601
c0022cf8:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022cfc:	75 19                	jne    c0022d17 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022cfe:	83 ec 0c             	sub    esp,0xc
c0022d01:	68 64 01 00 00       	push   0x164
c0022d06:	e8 38 cb fe ff       	call   c000f843 <malloc>
c0022d0b:	89 c5                	mov    ebp,eax
c0022d0d:	89 04 24             	mov    DWORD PTR [esp],eax
c0022d10:	e8 95 0f 00 00       	call   c0023caa <SATABus::SATABus()>
c0022d15:	eb 1e                	jmp    c0022d35 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022d17:	66 81 f9 01 01       	cmp    cx,0x101
c0022d1c:	75 60                	jne    c0022d7e <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022d1e:	83 ec 0c             	sub    esp,0xc
c0022d21:	68 70 02 00 00       	push   0x270
c0022d26:	e8 18 cb fe ff       	call   c000f843 <malloc>
c0022d2b:	89 c5                	mov    ebp,eax
c0022d2d:	89 04 24             	mov    DWORD PTR [esp],eax
c0022d30:	e8 03 03 00 00       	call   c0023038 <IDE::IDE()>
c0022d35:	58                   	pop    eax
c0022d36:	5a                   	pop    edx
c0022d37:	55                   	push   ebp
c0022d38:	56                   	push   esi
c0022d39:	e8 d2 16 ff ff       	call   c0014410 <Device::addChild(Device*)>
c0022d3e:	83 ec 1c             	sub    esp,0x1c
c0022d41:	b9 09 00 00 00       	mov    ecx,0x9
c0022d46:	fc                   	cld    
c0022d47:	89 e7                	mov    edi,esp
c0022d49:	89 de                	mov    esi,ebx
c0022d4b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022d4d:	55                   	push   ebp
c0022d4e:	e8 c7 15 ff ff       	call   c001431a <Device::preOpenPCI(PCIDeviceInfo)>
c0022d53:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022d56:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022d5a:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022d62:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022d6a:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022d72:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022d75:	83 c4 4c             	add    esp,0x4c
c0022d78:	5b                   	pop    ebx
c0022d79:	5e                   	pop    esi
c0022d7a:	5f                   	pop    edi
c0022d7b:	5d                   	pop    ebp
c0022d7c:	ff e0                	jmp    eax
c0022d7e:	83 ec 0c             	sub    esp,0xc
c0022d81:	68 58 01 00 00       	push   0x158
c0022d86:	e8 b8 ca fe ff       	call   c000f843 <malloc>
c0022d8b:	89 c5                	mov    ebp,eax
c0022d8d:	58                   	pop    eax
c0022d8e:	5a                   	pop    edx
c0022d8f:	68 a8 ca 02 c0       	push   0xc002caa8
c0022d94:	55                   	push   ebp
c0022d95:	e8 6c 19 ff ff       	call   c0014706 <DriverlessDevice::DriverlessDevice(char const*)>
c0022d9a:	59                   	pop    ecx
c0022d9b:	5f                   	pop    edi
c0022d9c:	55                   	push   ebp
c0022d9d:	56                   	push   esi
c0022d9e:	e8 6d 16 ff ff       	call   c0014410 <Device::addChild(Device*)>
c0022da3:	b9 09 00 00 00       	mov    ecx,0x9
c0022da8:	fc                   	cld    
c0022da9:	89 df                	mov    edi,ebx
c0022dab:	89 de                	mov    esi,ebx
c0022dad:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022daf:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022db3:	83 c4 2c             	add    esp,0x2c
c0022db6:	5b                   	pop    ebx
c0022db7:	5e                   	pop    esi
c0022db8:	5f                   	pop    edi
c0022db9:	5d                   	pop    ebp
c0022dba:	e9 5b 15 ff ff       	jmp    c001431a <Device::preOpenPCI(PCIDeviceInfo)>
c0022dbf:	83 c4 1c             	add    esp,0x1c
c0022dc2:	5b                   	pop    ebx
c0022dc3:	5e                   	pop    esi
c0022dc4:	5f                   	pop    edi
c0022dc5:	5d                   	pop    ebp
c0022dc6:	c3                   	ret    
c0022dc7:	90                   	nop

c0022dc8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022dc8:	55                   	push   ebp
c0022dc9:	57                   	push   edi
c0022dca:	56                   	push   esi
c0022dcb:	53                   	push   ebx
c0022dcc:	83 ec 5c             	sub    esp,0x5c
c0022dcf:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0022dd3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022dd7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0022ddb:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0022de0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022de4:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0022de8:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0022ded:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022df1:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0022df6:	6a 0c                	push   0xc
c0022df8:	55                   	push   ebp
c0022df9:	53                   	push   ebx
c0022dfa:	57                   	push   edi
c0022dfb:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0022e02:	e8 01 fc ff ff       	call   c0022a08 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e07:	55                   	push   ebp
c0022e08:	53                   	push   ebx
c0022e09:	57                   	push   edi
c0022e0a:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022e11:	e8 80 fc ff ff       	call   c0022a96 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022e16:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0022e1b:	83 c4 24             	add    esp,0x24
c0022e1e:	55                   	push   ebp
c0022e1f:	53                   	push   ebx
c0022e20:	57                   	push   edi
c0022e21:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022e25:	e8 f6 fc ff ff       	call   c0022b20 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022e2a:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0022e2e:	6a 3c                	push   0x3c
c0022e30:	55                   	push   ebp
c0022e31:	53                   	push   ebx
c0022e32:	57                   	push   edi
c0022e33:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022e3a:	e8 c9 fb ff ff       	call   c0022a08 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e3f:	0f b6 c4             	movzx  eax,ah
c0022e42:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022e46:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022e4a:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0022e4e:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0022e53:	83 c4 24             	add    esp,0x24
c0022e56:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022e5c:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022e63:	74 6c                	je     c0022ed1 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022e65:	31 f6                	xor    esi,esi
c0022e67:	8b 15 c8 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e4c8
c0022e6d:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022e73:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0022e79:	7e 56                	jle    c0022ed1 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022e7b:	8d 14 f2             	lea    edx,[edx+esi*8]
c0022e7e:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022e85:	39 cb                	cmp    ebx,ecx
c0022e87:	75 45                	jne    c0022ece <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022e89:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022e90:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0022e94:	75 38                	jne    c0022ece <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022e96:	83 ec 0c             	sub    esp,0xc
c0022e99:	68 c2 ca 02 c0       	push   0xc002cac2
c0022e9e:	e8 47 01 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0022ea3:	8b 15 c8 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e4c8
c0022ea9:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022eaf:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0022eb7:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0022ebb:	52                   	push   edx
c0022ebc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022ec0:	53                   	push   ebx
c0022ec1:	68 e7 ca 02 c0       	push   0xc002cae7
c0022ec6:	e8 1f 01 ff ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0022ecb:	83 c4 20             	add    esp,0x20
c0022ece:	46                   	inc    esi
c0022ecf:	eb 96                	jmp    c0022e67 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0022ed1:	31 d2                	xor    edx,edx
c0022ed3:	83 ec 0c             	sub    esp,0xc
c0022ed6:	55                   	push   ebp
c0022ed7:	53                   	push   ebx
c0022ed8:	57                   	push   edi
c0022ed9:	52                   	push   edx
c0022eda:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022ede:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022ee5:	e8 7c fc ff ff       	call   c0022b66 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022eea:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0022eee:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022ef2:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022ef6:	42                   	inc    edx
c0022ef7:	83 c4 20             	add    esp,0x20
c0022efa:	83 fa 06             	cmp    edx,0x6
c0022efd:	75 d4                	jne    c0022ed3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0022eff:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022f03:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0022f07:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0022f0b:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0022f0f:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0022f13:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0022f17:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0022f1c:	86 e0                	xchg   al,ah
c0022f1e:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0022f23:	55                   	push   ebp
c0022f24:	53                   	push   ebx
c0022f25:	57                   	push   edi
c0022f26:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022f2a:	e8 ab fb ff ff       	call   c0022ada <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022f2f:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022f33:	55                   	push   ebp
c0022f34:	53                   	push   ebx
c0022f35:	57                   	push   edi
c0022f36:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022f3d:	e8 0e fb ff ff       	call   c0022a50 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f42:	83 ec 0c             	sub    esp,0xc
c0022f45:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0022f4a:	b9 09 00 00 00       	mov    ecx,0x9
c0022f4f:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0022f53:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022f57:	fc                   	cld    
c0022f58:	89 e7                	mov    edi,esp
c0022f5a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022f5c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022f63:	e8 ee fc ff ff       	call   c0022c56 <PCI::foundDevice(PCIDeviceInfo)>
c0022f68:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022f6e:	5b                   	pop    ebx
c0022f6f:	5e                   	pop    esi
c0022f70:	5f                   	pop    edi
c0022f71:	5d                   	pop    ebp
c0022f72:	c3                   	ret    
c0022f73:	90                   	nop

c0022f74 <PCI::checkDevice(unsigned char, unsigned char)>:
c0022f74:	55                   	push   ebp
c0022f75:	57                   	push   edi
c0022f76:	56                   	push   esi
c0022f77:	53                   	push   ebx
c0022f78:	83 ec 0c             	sub    esp,0xc
c0022f7b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022f7f:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022f84:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022f89:	6a 00                	push   0x0
c0022f8b:	56                   	push   esi
c0022f8c:	57                   	push   edi
c0022f8d:	55                   	push   ebp
c0022f8e:	e8 bd fa ff ff       	call   c0022a50 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f93:	6a 00                	push   0x0
c0022f95:	56                   	push   esi
c0022f96:	57                   	push   edi
c0022f97:	55                   	push   ebp
c0022f98:	e8 2b fe ff ff       	call   c0022dc8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022f9d:	83 c4 20             	add    esp,0x20
c0022fa0:	6a 00                	push   0x0
c0022fa2:	56                   	push   esi
c0022fa3:	57                   	push   edi
c0022fa4:	55                   	push   ebp
c0022fa5:	e8 c8 fa ff ff       	call   c0022a72 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022faa:	83 c4 10             	add    esp,0x10
c0022fad:	84 c0                	test   al,al
c0022faf:	79 27                	jns    c0022fd8 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022fb1:	bb 01 00 00 00       	mov    ebx,0x1
c0022fb6:	53                   	push   ebx
c0022fb7:	56                   	push   esi
c0022fb8:	57                   	push   edi
c0022fb9:	55                   	push   ebp
c0022fba:	e8 91 fa ff ff       	call   c0022a50 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022fbf:	83 c4 10             	add    esp,0x10
c0022fc2:	66 40                	inc    ax
c0022fc4:	74 0c                	je     c0022fd2 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022fc6:	53                   	push   ebx
c0022fc7:	56                   	push   esi
c0022fc8:	57                   	push   edi
c0022fc9:	55                   	push   ebp
c0022fca:	e8 f9 fd ff ff       	call   c0022dc8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022fcf:	83 c4 10             	add    esp,0x10
c0022fd2:	43                   	inc    ebx
c0022fd3:	83 fb 08             	cmp    ebx,0x8
c0022fd6:	75 de                	jne    c0022fb6 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022fd8:	83 c4 0c             	add    esp,0xc
c0022fdb:	5b                   	pop    ebx
c0022fdc:	5e                   	pop    esi
c0022fdd:	5f                   	pop    edi
c0022fde:	5d                   	pop    ebp
c0022fdf:	c3                   	ret    

c0022fe0 <PCI::detect()>:
c0022fe0:	56                   	push   esi
c0022fe1:	53                   	push   ebx
c0022fe2:	53                   	push   ebx
c0022fe3:	31 db                	xor    ebx,ebx
c0022fe5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022fe9:	6a 00                	push   0x0
c0022feb:	6a 00                	push   0x0
c0022fed:	6a 00                	push   0x0
c0022fef:	56                   	push   esi
c0022ff0:	e8 7d fa ff ff       	call   c0022a72 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022ff5:	83 c4 10             	add    esp,0x10
c0022ff8:	a8 80                	test   al,0x80
c0022ffa:	75 21                	jne    c002301d <PCI::detect()+0x3d>
c0022ffc:	51                   	push   ecx
c0022ffd:	51                   	push   ecx
c0022ffe:	6a 00                	push   0x0
c0023000:	56                   	push   esi
c0023001:	e8 2c fc ff ff       	call   c0022c32 <PCI::checkBus(unsigned char)>
c0023006:	83 c4 10             	add    esp,0x10
c0023009:	eb 24                	jmp    c002302f <PCI::detect()+0x4f>
c002300b:	52                   	push   edx
c002300c:	52                   	push   edx
c002300d:	53                   	push   ebx
c002300e:	43                   	inc    ebx
c002300f:	56                   	push   esi
c0023010:	e8 1d fc ff ff       	call   c0022c32 <PCI::checkBus(unsigned char)>
c0023015:	83 c4 10             	add    esp,0x10
c0023018:	83 fb 08             	cmp    ebx,0x8
c002301b:	74 12                	je     c002302f <PCI::detect()+0x4f>
c002301d:	53                   	push   ebx
c002301e:	6a 00                	push   0x0
c0023020:	6a 00                	push   0x0
c0023022:	56                   	push   esi
c0023023:	e8 28 fa ff ff       	call   c0022a50 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023028:	83 c4 10             	add    esp,0x10
c002302b:	66 40                	inc    ax
c002302d:	74 dc                	je     c002300b <PCI::detect()+0x2b>
c002302f:	58                   	pop    eax
c0023030:	5b                   	pop    ebx
c0023031:	5e                   	pop    esi
c0023032:	c3                   	ret    
c0023033:	90                   	nop

c0023034 <IDE::close(int, int, void*)>:
c0023034:	83 c8 ff             	or     eax,0xffffffff
c0023037:	c3                   	ret    

c0023038 <IDE::IDE()>:
c0023038:	83 ec 0c             	sub    esp,0xc
c002303b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002303f:	83 ec 08             	sub    esp,0x8
c0023042:	68 30 cb 02 c0       	push   0xc002cb30
c0023047:	50                   	push   eax
c0023048:	e8 4f 17 ff ff       	call   c001479c <HardDiskController::HardDiskController(char const*)>
c002304d:	83 c4 10             	add    esp,0x10
c0023050:	ba 70 cd 02 c0       	mov    edx,0xc002cd70
c0023055:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023059:	89 10                	mov    DWORD PTR [eax],edx
c002305b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002305f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0023066:	90                   	nop
c0023067:	83 c4 0c             	add    esp,0xc
c002306a:	c3                   	ret    
c002306b:	90                   	nop

c002306c <IDE::prepareInterrupt(unsigned char)>:
c002306c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0023071:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023075:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c002307d:	c3                   	ret    

c002307e <selectDrive(unsigned char, unsigned char)>:
c002307e:	c3                   	ret    
c002307f:	90                   	nop

c0023080 <IDE::getBase(unsigned char)>:
c0023080:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0023085:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023089:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0023091:	c3                   	ret    

c0023092 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0023092:	55                   	push   ebp
c0023093:	57                   	push   edi
c0023094:	56                   	push   esi
c0023095:	53                   	push   ebx
c0023096:	83 ec 1c             	sub    esp,0x1c
c0023099:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002309d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00230a1:	8d 4b f8             	lea    ecx,[ebx-0x8]
c00230a4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00230a8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00230ac:	80 f9 03             	cmp    cl,0x3
c00230af:	77 51                	ja     c0023102 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c00230b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00230b5:	0f b6 f2             	movzx  esi,dl
c00230b8:	0f b6 db             	movzx  ebx,bl
c00230bb:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00230be:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c00230c2:	83 ca 80             	or     edx,0xffffff80
c00230c5:	0f b6 d2             	movzx  edx,dl
c00230c8:	52                   	push   edx
c00230c9:	6a 0c                	push   0xc
c00230cb:	56                   	push   esi
c00230cc:	57                   	push   edi
c00230cd:	e8 c0 ff ff ff       	call   c0023092 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230d2:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c00230d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00230db:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c00230df:	ee                   	out    dx,al
c00230e0:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c00230e5:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c00230e9:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00230ed:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00230f1:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00230f9:	83 c4 2c             	add    esp,0x2c
c00230fc:	5b                   	pop    ebx
c00230fd:	5e                   	pop    esi
c00230fe:	5f                   	pop    edi
c00230ff:	5d                   	pop    ebp
c0023100:	eb 90                	jmp    c0023092 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023102:	80 fb 07             	cmp    bl,0x7
c0023105:	77 12                	ja     c0023119 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0023107:	0f b6 d2             	movzx  edx,dl
c002310a:	0f b6 db             	movzx  ebx,bl
c002310d:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0023115:	89 da                	mov    edx,ebx
c0023117:	eb 2f                	jmp    c0023148 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023119:	80 fb 0d             	cmp    bl,0xd
c002311c:	77 13                	ja     c0023131 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c002311e:	0f b6 d2             	movzx  edx,dl
c0023121:	0f b6 db             	movzx  ebx,bl
c0023124:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c002312b:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c002312f:	eb 17                	jmp    c0023148 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023131:	80 fb 15             	cmp    bl,0x15
c0023134:	77 13                	ja     c0023149 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0023136:	0f b6 d2             	movzx  edx,dl
c0023139:	0f b6 db             	movzx  ebx,bl
c002313c:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0023144:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0023148:	ee                   	out    dx,al
c0023149:	83 c4 1c             	add    esp,0x1c
c002314c:	5b                   	pop    ebx
c002314d:	5e                   	pop    esi
c002314e:	5f                   	pop    edi
c002314f:	5d                   	pop    ebp
c0023150:	c3                   	ret    
c0023151:	90                   	nop

c0023152 <IDE::read(unsigned char, unsigned char)>:
c0023152:	55                   	push   ebp
c0023153:	57                   	push   edi
c0023154:	56                   	push   esi
c0023155:	53                   	push   ebx
c0023156:	83 ec 1c             	sub    esp,0x1c
c0023159:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002315d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023161:	8d 43 f8             	lea    eax,[ebx-0x8]
c0023164:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023168:	3c 03                	cmp    al,0x3
c002316a:	77 43                	ja     c00231af <IDE::read(unsigned char, unsigned char)+0x5d>
c002316c:	0f b6 f2             	movzx  esi,dl
c002316f:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023172:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0023176:	83 c8 80             	or     eax,0xffffff80
c0023179:	0f b6 c0             	movzx  eax,al
c002317c:	50                   	push   eax
c002317d:	6a 0c                	push   0xc
c002317f:	56                   	push   esi
c0023180:	57                   	push   edi
c0023181:	e8 0c ff ff ff       	call   c0023092 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023186:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c002318b:	0f b6 c3             	movzx  eax,bl
c002318e:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0023192:	ec                   	in     al,dx
c0023193:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023197:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c002319c:	52                   	push   edx
c002319d:	6a 0c                	push   0xc
c002319f:	56                   	push   esi
c00231a0:	57                   	push   edi
c00231a1:	e8 ec fe ff ff       	call   c0023092 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00231a6:	83 c4 20             	add    esp,0x20
c00231a9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00231ad:	eb 49                	jmp    c00231f8 <IDE::read(unsigned char, unsigned char)+0xa6>
c00231af:	80 fb 07             	cmp    bl,0x7
c00231b2:	77 12                	ja     c00231c6 <IDE::read(unsigned char, unsigned char)+0x74>
c00231b4:	0f b6 d2             	movzx  edx,dl
c00231b7:	0f b6 c3             	movzx  eax,bl
c00231ba:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00231c2:	89 c2                	mov    edx,eax
c00231c4:	eb 31                	jmp    c00231f7 <IDE::read(unsigned char, unsigned char)+0xa5>
c00231c6:	80 fb 0d             	cmp    bl,0xd
c00231c9:	77 13                	ja     c00231de <IDE::read(unsigned char, unsigned char)+0x8c>
c00231cb:	0f b6 d2             	movzx  edx,dl
c00231ce:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c00231d5:	0f b6 d3             	movzx  edx,bl
c00231d8:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00231dc:	eb 19                	jmp    c00231f7 <IDE::read(unsigned char, unsigned char)+0xa5>
c00231de:	31 c0                	xor    eax,eax
c00231e0:	80 fb 15             	cmp    bl,0x15
c00231e3:	77 13                	ja     c00231f8 <IDE::read(unsigned char, unsigned char)+0xa6>
c00231e5:	0f b6 d2             	movzx  edx,dl
c00231e8:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c00231f0:	0f b6 d3             	movzx  edx,bl
c00231f3:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c00231f7:	ec                   	in     al,dx
c00231f8:	83 c4 1c             	add    esp,0x1c
c00231fb:	5b                   	pop    ebx
c00231fc:	5e                   	pop    esi
c00231fd:	5f                   	pop    edi
c00231fe:	5d                   	pop    ebp
c00231ff:	c3                   	ret    

c0023200 <IDE::waitInterrupt(unsigned char)>:
c0023200:	55                   	push   ebp
c0023201:	57                   	push   edi
c0023202:	56                   	push   esi
c0023203:	53                   	push   ebx
c0023204:	31 db                	xor    ebx,ebx
c0023206:	83 ec 0c             	sub    esp,0xc
c0023209:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002320d:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023212:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c002321a:	89 e8                	mov    eax,ebp
c002321c:	84 c0                	test   al,al
c002321e:	75 34                	jne    c0023254 <IDE::waitInterrupt(unsigned char)+0x54>
c0023220:	52                   	push   edx
c0023221:	6a 0c                	push   0xc
c0023223:	56                   	push   esi
c0023224:	57                   	push   edi
c0023225:	e8 28 ff ff ff       	call   c0023152 <IDE::read(unsigned char, unsigned char)>
c002322a:	83 c4 10             	add    esp,0x10
c002322d:	a8 01                	test   al,0x1
c002322f:	75 2b                	jne    c002325c <IDE::waitInterrupt(unsigned char)+0x5c>
c0023231:	f6 c3 04             	test   bl,0x4
c0023234:	75 16                	jne    c002324c <IDE::waitInterrupt(unsigned char)+0x4c>
c0023236:	83 fb 32             	cmp    ebx,0x32
c0023239:	7e 11                	jle    c002324c <IDE::waitInterrupt(unsigned char)+0x4c>
c002323b:	50                   	push   eax
c002323c:	50                   	push   eax
c002323d:	6a 00                	push   0x0
c002323f:	68 80 96 98 00       	push   0x989680
c0023244:	e8 8b b1 ff ff       	call   c001e3d4 <nanoSleep(unsigned long long)>
c0023249:	83 c4 10             	add    esp,0x10
c002324c:	83 fb 3c             	cmp    ebx,0x3c
c002324f:	74 0b                	je     c002325c <IDE::waitInterrupt(unsigned char)+0x5c>
c0023251:	43                   	inc    ebx
c0023252:	eb be                	jmp    c0023212 <IDE::waitInterrupt(unsigned char)+0x12>
c0023254:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c002325c:	83 c4 0c             	add    esp,0xc
c002325f:	89 e8                	mov    eax,ebp
c0023261:	5b                   	pop    ebx
c0023262:	5e                   	pop    esi
c0023263:	5f                   	pop    edi
c0023264:	5d                   	pop    ebp
c0023265:	c3                   	ret    

c0023266 <ideChannel0IRQHandler(regs*, void*)>:
c0023266:	83 ec 10             	sub    esp,0x10
c0023269:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002326d:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0023274:	6a 07                	push   0x7
c0023276:	6a 00                	push   0x0
c0023278:	50                   	push   eax
c0023279:	e8 d4 fe ff ff       	call   c0023152 <IDE::read(unsigned char, unsigned char)>
c002327e:	83 c4 1c             	add    esp,0x1c
c0023281:	c3                   	ret    

c0023282 <ideChannel1IRQHandler(regs*, void*)>:
c0023282:	83 ec 10             	sub    esp,0x10
c0023285:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023289:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0023290:	6a 07                	push   0x7
c0023292:	6a 01                	push   0x1
c0023294:	50                   	push   eax
c0023295:	e8 b8 fe ff ff       	call   c0023152 <IDE::read(unsigned char, unsigned char)>
c002329a:	83 c4 1c             	add    esp,0x1c
c002329d:	c3                   	ret    

c002329e <IDE::enableIRQs(unsigned char, bool)>:
c002329e:	57                   	push   edi
c002329f:	56                   	push   esi
c00232a0:	be 04 00 00 00       	mov    esi,0x4
c00232a5:	53                   	push   ebx
c00232a6:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00232ab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00232af:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00232b4:	0f 94 c0             	sete   al
c00232b7:	d1 e0                	shl    eax,1
c00232b9:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00232c0:	0f b6 c0             	movzx  eax,al
c00232c3:	50                   	push   eax
c00232c4:	6a 0c                	push   0xc
c00232c6:	57                   	push   edi
c00232c7:	53                   	push   ebx
c00232c8:	e8 c5 fd ff ff       	call   c0023092 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00232cd:	83 c4 10             	add    esp,0x10
c00232d0:	50                   	push   eax
c00232d1:	6a 0c                	push   0xc
c00232d3:	57                   	push   edi
c00232d4:	53                   	push   ebx
c00232d5:	e8 78 fe ff ff       	call   c0023152 <IDE::read(unsigned char, unsigned char)>
c00232da:	83 c4 10             	add    esp,0x10
c00232dd:	4e                   	dec    esi
c00232de:	75 f0                	jne    c00232d0 <IDE::enableIRQs(unsigned char, bool)+0x32>
c00232e0:	5b                   	pop    ebx
c00232e1:	5e                   	pop    esi
c00232e2:	5f                   	pop    edi
c00232e3:	c3                   	ret    

c00232e4 <IDE::open(int, int, void*)>:
c00232e4:	55                   	push   ebp
c00232e5:	57                   	push   edi
c00232e6:	56                   	push   esi
c00232e7:	53                   	push   ebx
c00232e8:	83 ec 1c             	sub    esp,0x1c
c00232eb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00232ef:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c00232f8:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023301:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0023308:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c002330f:	0f 85 b0 02 00 00    	jne    c00235c5 <IDE::open(int, int, void*)+0x2e1>
c0023315:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c002331b:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c002331f:	83 e0 7f             	and    eax,0x7f
c0023322:	3c 05                	cmp    al,0x5
c0023324:	74 04                	je     c002332a <IDE::open(int, int, void*)+0x46>
c0023326:	3c 0f                	cmp    al,0xf
c0023328:	75 32                	jne    c002335c <IDE::open(int, int, void*)+0x78>
c002332a:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023330:	83 e0 fc             	and    eax,0xfffffffc
c0023333:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002333a:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023340:	83 e0 fc             	and    eax,0xfffffffc
c0023343:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002334a:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023350:	83 e0 fc             	and    eax,0xfffffffc
c0023353:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002335a:	eb 14                	jmp    c0023370 <IDE::open(int, int, void*)+0x8c>
c002335c:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023366:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023370:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023377:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c002337e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023382:	89 c6                	mov    esi,eax
c0023384:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023389:	c1 e6 10             	shl    esi,0x10
c002338c:	89 e8                	mov    eax,ebp
c002338e:	89 fa                	mov    edx,edi
c0023390:	c1 e0 0b             	shl    eax,0xb
c0023393:	09 f0                	or     eax,esi
c0023395:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c002339c:	c1 e6 08             	shl    esi,0x8
c002339f:	09 c6                	or     esi,eax
c00233a1:	89 f0                	mov    eax,esi
c00233a3:	0d 08 00 00 80       	or     eax,0x80000008
c00233a8:	ef                   	out    dx,eax
c00233a9:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00233ae:	89 ca                	mov    edx,ecx
c00233b0:	ed                   	in     eax,dx
c00233b1:	c1 e8 10             	shr    eax,0x10
c00233b4:	3d ff ff 00 00       	cmp    eax,0xffff
c00233b9:	0f 84 f5 00 00 00    	je     c00234b4 <IDE::open(int, int, void*)+0x1d0>
c00233bf:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c00233c5:	89 fa                	mov    edx,edi
c00233c7:	89 f0                	mov    eax,esi
c00233c9:	ef                   	out    dx,eax
c00233ca:	b0 fe                	mov    al,0xfe
c00233cc:	89 ca                	mov    edx,ecx
c00233ce:	ee                   	out    dx,al
c00233cf:	89 f0                	mov    eax,esi
c00233d1:	89 fa                	mov    edx,edi
c00233d3:	ef                   	out    dx,eax
c00233d4:	89 ca                	mov    edx,ecx
c00233d6:	ed                   	in     eax,dx
c00233d7:	3c fe                	cmp    al,0xfe
c00233d9:	0f 85 a9 00 00 00    	jne    c0023488 <IDE::open(int, int, void*)+0x1a4>
c00233df:	8b 15 c8 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e4c8
c00233e5:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c00233ec:	74 33                	je     c0023421 <IDE::open(int, int, void*)+0x13d>
c00233ee:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c00233f4:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c00233f8:	40                   	inc    eax
c00233f9:	83 ec 0c             	sub    esp,0xc
c00233fc:	0f b6 c0             	movzx  eax,al
c00233ff:	50                   	push   eax
c0023400:	55                   	push   ebp
c0023401:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023405:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c002340b:	51                   	push   ecx
c002340c:	e8 d3 4e ff ff       	call   c00182e4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023411:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0023416:	83 c4 1c             	add    esp,0x1c
c0023419:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002341f:	eb 0a                	jmp    c002342b <IDE::open(int, int, void*)+0x147>
c0023421:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c002342b:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023432:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0023439:	c1 e1 10             	shl    ecx,0x10
c002343c:	c1 e0 08             	shl    eax,0x8
c002343f:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023444:	09 c1                	or     ecx,eax
c0023446:	89 fa                	mov    edx,edi
c0023448:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c002344f:	c1 e0 0b             	shl    eax,0xb
c0023452:	09 c1                	or     ecx,eax
c0023454:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002345a:	89 c8                	mov    eax,ecx
c002345c:	ef                   	out    dx,eax
c002345d:	be fc 0c 00 00       	mov    esi,0xcfc
c0023462:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023468:	89 f2                	mov    edx,esi
c002346a:	ee                   	out    dx,al
c002346b:	89 c8                	mov    eax,ecx
c002346d:	89 fa                	mov    edx,edi
c002346f:	ef                   	out    dx,eax
c0023470:	89 f2                	mov    edx,esi
c0023472:	ed                   	in     eax,dx
c0023473:	0f b6 c0             	movzx  eax,al
c0023476:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c002347c:	74 46                	je     c00234c4 <IDE::open(int, int, void*)+0x1e0>
c002347e:	83 ec 0c             	sub    esp,0xc
c0023481:	68 48 cb 02 c0       	push   0xc002cb48
c0023486:	eb 34                	jmp    c00234bc <IDE::open(int, int, void*)+0x1d8>
c0023488:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023491:	75 17                	jne    c00234aa <IDE::open(int, int, void*)+0x1c6>
c0023493:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0023498:	74 07                	je     c00234a1 <IDE::open(int, int, void*)+0x1bd>
c002349a:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c002349f:	75 09                	jne    c00234aa <IDE::open(int, int, void*)+0x1c6>
c00234a1:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00234a8:	eb 1a                	jmp    c00234c4 <IDE::open(int, int, void*)+0x1e0>
c00234aa:	83 ec 0c             	sub    esp,0xc
c00234ad:	68 50 cb 02 c0       	push   0xc002cb50
c00234b2:	eb 08                	jmp    c00234bc <IDE::open(int, int, void*)+0x1d8>
c00234b4:	83 ec 0c             	sub    esp,0xc
c00234b7:	68 81 cb 02 c0       	push   0xc002cb81
c00234bc:	e8 ce 71 ff ff       	call   c001a68f <Krnl::panic(char const*)>
c00234c1:	83 c4 10             	add    esp,0x10
c00234c4:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c00234cb:	79 1a                	jns    c00234e7 <IDE::open(int, int, void*)+0x203>
c00234cd:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00234d3:	83 e0 fc             	and    eax,0xfffffffc
c00234d6:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00234dd:	83 c0 08             	add    eax,0x8
c00234e0:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00234e7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00234ed:	89 c2                	mov    edx,eax
c00234ef:	83 e2 0f             	and    edx,0xf
c00234f2:	66 83 fa 08          	cmp    dx,0x8
c00234f6:	75 0a                	jne    c0023502 <IDE::open(int, int, void*)+0x21e>
c00234f8:	83 e8 02             	sub    eax,0x2
c00234fb:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023502:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0023508:	89 c2                	mov    edx,eax
c002350a:	83 e2 0f             	and    edx,0xf
c002350d:	66 83 fa 08          	cmp    dx,0x8
c0023511:	75 0a                	jne    c002351d <IDE::open(int, int, void*)+0x239>
c0023513:	83 e8 02             	sub    eax,0x2
c0023516:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002351d:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023524:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c002352b:	89 d0                	mov    eax,edx
c002352d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023530:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023534:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0023538:	8d 4a 01             	lea    ecx,[edx+0x1]
c002353b:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023540:	0f b6 c9             	movzx  ecx,cl
c0023543:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c002354a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002354d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023551:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023555:	8d 50 02             	lea    edx,[eax+0x2]
c0023558:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002355d:	0f b6 d2             	movzx  edx,dl
c0023560:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023566:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023569:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002356d:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023571:	8d 48 03             	lea    ecx,[eax+0x3]
c0023574:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023579:	0f b6 c9             	movzx  ecx,cl
c002357c:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023582:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023585:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023589:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c002358d:	8d 50 04             	lea    edx,[eax+0x4]
c0023590:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023596:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002359b:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00235a2:	66 85 f6             	test   si,si
c00235a5:	74 3e                	je     c00235e5 <IDE::open(int, int, void*)+0x301>
c00235a7:	0f b6 d2             	movzx  edx,dl
c00235aa:	83 c0 05             	add    eax,0x5
c00235ad:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00235b0:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00235b4:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00235b8:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00235be:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00235c3:	eb 20                	jmp    c00235e5 <IDE::open(int, int, void*)+0x301>
c00235c5:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00235cf:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00235d9:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00235e0:	e9 02 ff ff ff       	jmp    c00234e7 <IDE::open(int, int, void*)+0x203>
c00235e5:	52                   	push   edx
c00235e6:	52                   	push   edx
c00235e7:	6a 00                	push   0x0
c00235e9:	53                   	push   ebx
c00235ea:	e8 7d fa ff ff       	call   c002306c <IDE::prepareInterrupt(unsigned char)>
c00235ef:	59                   	pop    ecx
c00235f0:	5e                   	pop    esi
c00235f1:	6a 01                	push   0x1
c00235f3:	53                   	push   ebx
c00235f4:	e8 73 fa ff ff       	call   c002306c <IDE::prepareInterrupt(unsigned char)>
c00235f9:	83 c4 0c             	add    esp,0xc
c00235fc:	6a 00                	push   0x0
c00235fe:	6a 00                	push   0x0
c0023600:	53                   	push   ebx
c0023601:	e8 98 fc ff ff       	call   c002329e <IDE::enableIRQs(unsigned char, bool)>
c0023606:	83 c4 0c             	add    esp,0xc
c0023609:	6a 00                	push   0x0
c002360b:	6a 01                	push   0x1
c002360d:	53                   	push   ebx
c002360e:	e8 8b fc ff ff       	call   c002329e <IDE::enableIRQs(unsigned char, bool)>
c0023613:	83 c4 10             	add    esp,0x10
c0023616:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c002361d:	74 40                	je     c002365f <IDE::open(int, int, void*)+0x37b>
c002361f:	83 ec 0c             	sub    esp,0xc
c0023622:	68 ab cb 02 c0       	push   0xc002cbab
c0023627:	e8 be f9 fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c002362c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002362f:	6a 01                	push   0x1
c0023631:	68 66 32 02 c0       	push   0xc0023266
c0023636:	6a 0e                	push   0xe
c0023638:	53                   	push   ebx
c0023639:	e8 56 0d ff ff       	call   c0014394 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002363e:	83 c4 14             	add    esp,0x14
c0023641:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023647:	53                   	push   ebx
c0023648:	6a 01                	push   0x1
c002364a:	68 82 32 02 c0       	push   0xc0023282
c002364f:	6a 0f                	push   0xf
c0023651:	53                   	push   ebx
c0023652:	e8 3d 0d ff ff       	call   c0014394 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023657:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c002365d:	eb 4a                	jmp    c00236a9 <IDE::open(int, int, void*)+0x3c5>
c002365f:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023669:	50                   	push   eax
c002366a:	6a 0f                	push   0xf
c002366c:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023672:	68 c7 cb 02 c0       	push   0xc002cbc7
c0023677:	e8 6e f9 fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c002367c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002367f:	6a 00                	push   0x0
c0023681:	68 66 32 02 c0       	push   0xc0023266
c0023686:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002368c:	53                   	push   ebx
c002368d:	e8 02 0d ff ff       	call   c0014394 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023692:	83 c4 14             	add    esp,0x14
c0023695:	53                   	push   ebx
c0023696:	6a 00                	push   0x0
c0023698:	68 82 32 02 c0       	push   0xc0023282
c002369d:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00236a3:	53                   	push   ebx
c00236a4:	e8 eb 0c ff ff       	call   c0014394 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00236a9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00236ab:	83 c4 20             	add    esp,0x20
c00236ae:	83 ec 0c             	sub    esp,0xc
c00236b1:	53                   	push   ebx
c00236b2:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00236b5:	83 c4 0c             	add    esp,0xc
c00236b8:	6a 07                	push   0x7
c00236ba:	6a 00                	push   0x0
c00236bc:	53                   	push   ebx
c00236bd:	e8 90 fa ff ff       	call   c0023152 <IDE::read(unsigned char, unsigned char)>
c00236c2:	83 c4 0c             	add    esp,0xc
c00236c5:	6a 07                	push   0x7
c00236c7:	6a 01                	push   0x1
c00236c9:	53                   	push   ebx
c00236ca:	e8 83 fa ff ff       	call   c0023152 <IDE::read(unsigned char, unsigned char)>
c00236cf:	83 c4 0c             	add    esp,0xc
c00236d2:	6a 01                	push   0x1
c00236d4:	6a 00                	push   0x0
c00236d6:	53                   	push   ebx
c00236d7:	e8 c2 fb ff ff       	call   c002329e <IDE::enableIRQs(unsigned char, bool)>
c00236dc:	83 c4 0c             	add    esp,0xc
c00236df:	6a 01                	push   0x1
c00236e1:	6a 01                	push   0x1
c00236e3:	53                   	push   ebx
c00236e4:	e8 b5 fb ff ff       	call   c002329e <IDE::enableIRQs(unsigned char, bool)>
c00236e9:	83 c4 2c             	add    esp,0x2c
c00236ec:	31 c0                	xor    eax,eax
c00236ee:	5b                   	pop    ebx
c00236ef:	5e                   	pop    esi
c00236f0:	5f                   	pop    edi
c00236f1:	5d                   	pop    ebp
c00236f2:	c3                   	ret    
c00236f3:	90                   	nop

c00236f4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c00236f4:	55                   	push   ebp
c00236f5:	57                   	push   edi
c00236f6:	56                   	push   esi
c00236f7:	53                   	push   ebx
c00236f8:	83 ec 1c             	sub    esp,0x1c
c00236fb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00236ff:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023703:	8d 50 f8             	lea    edx,[eax-0x8]
c0023706:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002370a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002370e:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023712:	80 fa 03             	cmp    dl,0x3
c0023715:	77 5d                	ja     c0023774 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0023717:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002371b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002371f:	0f b6 db             	movzx  ebx,bl
c0023722:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0023725:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0023729:	83 ca 80             	or     edx,0xffffff80
c002372c:	0f b6 d2             	movzx  edx,dl
c002372f:	52                   	push   edx
c0023730:	6a 0c                	push   0xc
c0023732:	53                   	push   ebx
c0023733:	56                   	push   esi
c0023734:	e8 59 f9 ff ff       	call   c0023092 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023739:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c002373e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023742:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023746:	0f b6 c0             	movzx  eax,al
c0023749:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c002374d:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002374f:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0023754:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0023758:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002375c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023760:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023768:	83 c4 2c             	add    esp,0x2c
c002376b:	5b                   	pop    ebx
c002376c:	5e                   	pop    esi
c002376d:	5f                   	pop    edi
c002376e:	5d                   	pop    ebp
c002376f:	e9 1e f9 ff ff       	jmp    c0023092 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023774:	3c 07                	cmp    al,0x7
c0023776:	77 10                	ja     c0023788 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023778:	0f b6 db             	movzx  ebx,bl
c002377b:	0f b6 d0             	movzx  edx,al
c002377e:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0023786:	eb 2d                	jmp    c00237b5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023788:	3c 0d                	cmp    al,0xd
c002378a:	77 13                	ja     c002379f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c002378c:	0f b6 db             	movzx  ebx,bl
c002378f:	0f b6 c0             	movzx  eax,al
c0023792:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0023799:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c002379d:	eb 16                	jmp    c00237b5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c002379f:	3c 15                	cmp    al,0x15
c00237a1:	77 14                	ja     c00237b7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00237a3:	0f b6 db             	movzx  ebx,bl
c00237a6:	0f b6 c0             	movzx  eax,al
c00237a9:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00237b1:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00237b5:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00237b7:	83 c4 1c             	add    esp,0x1c
c00237ba:	5b                   	pop    ebx
c00237bb:	5e                   	pop    esi
c00237bc:	5f                   	pop    edi
c00237bd:	5d                   	pop    ebp
c00237be:	c3                   	ret    
c00237bf:	90                   	nop

c00237c0 <IDE::detect()>:
c00237c0:	55                   	push   ebp
c00237c1:	57                   	push   edi
c00237c2:	56                   	push   esi
c00237c3:	53                   	push   ebx
c00237c4:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00237ca:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00237d1:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00237d8:	0f 85 be 02 00 00    	jne    c0023a9c <IDE::detect()+0x2dc>
c00237de:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00237e5:	31 f6                	xor    esi,esi
c00237e7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00237ef:	31 ed                	xor    ebp,ebp
c00237f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00237f5:	c1 e0 06             	shl    eax,0x6
c00237f8:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0023800:	89 e8                	mov    eax,ebp
c0023802:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0023806:	c1 e0 04             	shl    eax,0x4
c0023809:	83 c8 a0             	or     eax,0xffffffa0
c002380c:	0f b6 c0             	movzx  eax,al
c002380f:	50                   	push   eax
c0023810:	6a 06                	push   0x6
c0023812:	56                   	push   esi
c0023813:	53                   	push   ebx
c0023814:	e8 79 f8 ff ff       	call   c0023092 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023819:	83 c4 0c             	add    esp,0xc
c002381c:	6a 0c                	push   0xc
c002381e:	56                   	push   esi
c002381f:	53                   	push   ebx
c0023820:	e8 2d f9 ff ff       	call   c0023152 <IDE::read(unsigned char, unsigned char)>
c0023825:	83 c4 0c             	add    esp,0xc
c0023828:	6a 0c                	push   0xc
c002382a:	56                   	push   esi
c002382b:	53                   	push   ebx
c002382c:	e8 21 f9 ff ff       	call   c0023152 <IDE::read(unsigned char, unsigned char)>
c0023831:	83 c4 0c             	add    esp,0xc
c0023834:	6a 0c                	push   0xc
c0023836:	56                   	push   esi
c0023837:	53                   	push   ebx
c0023838:	e8 15 f9 ff ff       	call   c0023152 <IDE::read(unsigned char, unsigned char)>
c002383d:	83 c4 0c             	add    esp,0xc
c0023840:	6a 0c                	push   0xc
c0023842:	56                   	push   esi
c0023843:	53                   	push   ebx
c0023844:	e8 09 f9 ff ff       	call   c0023152 <IDE::read(unsigned char, unsigned char)>
c0023849:	68 ec 00 00 00       	push   0xec
c002384e:	6a 07                	push   0x7
c0023850:	56                   	push   esi
c0023851:	53                   	push   ebx
c0023852:	e8 3b f8 ff ff       	call   c0023092 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023857:	83 c4 1c             	add    esp,0x1c
c002385a:	6a 0c                	push   0xc
c002385c:	56                   	push   esi
c002385d:	53                   	push   ebx
c002385e:	e8 ef f8 ff ff       	call   c0023152 <IDE::read(unsigned char, unsigned char)>
c0023863:	83 c4 0c             	add    esp,0xc
c0023866:	6a 0c                	push   0xc
c0023868:	56                   	push   esi
c0023869:	53                   	push   ebx
c002386a:	e8 e3 f8 ff ff       	call   c0023152 <IDE::read(unsigned char, unsigned char)>
c002386f:	83 c4 0c             	add    esp,0xc
c0023872:	6a 0c                	push   0xc
c0023874:	56                   	push   esi
c0023875:	53                   	push   ebx
c0023876:	e8 d7 f8 ff ff       	call   c0023152 <IDE::read(unsigned char, unsigned char)>
c002387b:	83 c4 0c             	add    esp,0xc
c002387e:	6a 0c                	push   0xc
c0023880:	56                   	push   esi
c0023881:	53                   	push   ebx
c0023882:	e8 cb f8 ff ff       	call   c0023152 <IDE::read(unsigned char, unsigned char)>
c0023887:	83 c4 0c             	add    esp,0xc
c002388a:	6a 0c                	push   0xc
c002388c:	56                   	push   esi
c002388d:	53                   	push   ebx
c002388e:	e8 bf f8 ff ff       	call   c0023152 <IDE::read(unsigned char, unsigned char)>
c0023893:	83 c4 10             	add    esp,0x10
c0023896:	84 c0                	test   al,al
c0023898:	0f 84 8b 01 00 00    	je     c0023a29 <IDE::detect()+0x269>
c002389e:	31 ff                	xor    edi,edi
c00238a0:	50                   	push   eax
c00238a1:	6a 0c                	push   0xc
c00238a3:	56                   	push   esi
c00238a4:	53                   	push   ebx
c00238a5:	e8 a8 f8 ff ff       	call   c0023152 <IDE::read(unsigned char, unsigned char)>
c00238aa:	83 c4 10             	add    esp,0x10
c00238ad:	a8 01                	test   al,0x1
c00238af:	0f 85 8e 01 00 00    	jne    c0023a43 <IDE::detect()+0x283>
c00238b5:	84 c0                	test   al,al
c00238b7:	78 04                	js     c00238bd <IDE::detect()+0xfd>
c00238b9:	a8 08                	test   al,0x8
c00238bb:	75 27                	jne    c00238e4 <IDE::detect()+0x124>
c00238bd:	47                   	inc    edi
c00238be:	81 ff 17 01 00 00    	cmp    edi,0x117
c00238c4:	7e da                	jle    c00238a0 <IDE::detect()+0xe0>
c00238c6:	50                   	push   eax
c00238c7:	50                   	push   eax
c00238c8:	6a 00                	push   0x0
c00238ca:	68 40 4b 4c 00       	push   0x4c4b40
c00238cf:	e8 00 ab ff ff       	call   c001e3d4 <nanoSleep(unsigned long long)>
c00238d4:	83 c4 10             	add    esp,0x10
c00238d7:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00238dd:	75 c1                	jne    c00238a0 <IDE::detect()+0xe0>
c00238df:	e9 5f 01 00 00       	jmp    c0023a43 <IDE::detect()+0x283>
c00238e4:	31 c9                	xor    ecx,ecx
c00238e6:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00238ea:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00238ee:	83 ec 0c             	sub    esp,0xc
c00238f1:	68 80 00 00 00       	push   0x80
c00238f6:	57                   	push   edi
c00238f7:	6a 00                	push   0x0
c00238f9:	56                   	push   esi
c00238fa:	53                   	push   ebx
c00238fb:	e8 f4 fd ff ff       	call   c00236f4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0023900:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0023905:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023909:	89 d1                	mov    ecx,edx
c002390b:	c1 e0 06             	shl    eax,0x6
c002390e:	01 d8                	add    eax,ebx
c0023910:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0023917:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c002391e:	89 f2                	mov    edx,esi
c0023920:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0023926:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c002392a:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0023930:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023934:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c002393b:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0023943:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c002394a:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0023952:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0023958:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c002395f:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0023965:	8d 54 24 58          	lea    edx,[esp+0x58]
c0023969:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002396d:	83 c4 20             	add    esp,0x20
c0023970:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0023973:	83 c0 02             	add    eax,0x2
c0023976:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c002397c:	83 c7 02             	add    edi,0x2
c002397f:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0023982:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0023988:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c002398c:	75 e2                	jne    c0023970 <IDE::detect()+0x1b0>
c002398e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023992:	c1 e0 06             	shl    eax,0x6
c0023995:	01 d8                	add    eax,ebx
c0023997:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c002399d:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00239a4:	66 c1 ea 09          	shr    dx,0x9
c00239a8:	83 e2 01             	and    edx,0x1
c00239ab:	84 c9                	test   cl,cl
c00239ad:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00239b3:	75 2f                	jne    c00239e4 <IDE::detect()+0x224>
c00239b5:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c00239bb:	85 c0                	test   eax,eax
c00239bd:	74 66                	je     c0023a25 <IDE::detect()+0x265>
c00239bf:	50                   	push   eax
c00239c0:	55                   	push   ebp
c00239c1:	56                   	push   esi
c00239c2:	68 e3 cb 02 c0       	push   0xc002cbe3
c00239c7:	e8 1e f6 fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c00239cc:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00239d3:	e8 6b be fe ff       	call   c000f843 <malloc>
c00239d8:	89 c7                	mov    edi,eax
c00239da:	89 04 24             	mov    DWORD PTR [esp],eax
c00239dd:	e8 78 06 00 00       	call   c002405a <ATA::ATA()>
c00239e2:	eb 28                	jmp    c0023a0c <IDE::detect()+0x24c>
c00239e4:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c00239ea:	55                   	push   ebp
c00239eb:	56                   	push   esi
c00239ec:	68 12 cc 02 c0       	push   0xc002cc12
c00239f1:	e8 f4 f5 fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c00239f6:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c00239fd:	e8 41 be fe ff       	call   c000f843 <malloc>
c0023a02:	89 c7                	mov    edi,eax
c0023a04:	89 04 24             	mov    DWORD PTR [esp],eax
c0023a07:	e8 8e 0c 00 00       	call   c002469a <ATAPI::ATAPI()>
c0023a0c:	5a                   	pop    edx
c0023a0d:	59                   	pop    ecx
c0023a0e:	57                   	push   edi
c0023a0f:	53                   	push   ebx
c0023a10:	e8 fb 09 ff ff       	call   c0014410 <Device::addChild(Device*)>
c0023a15:	8b 07                	mov    eax,DWORD PTR [edi]
c0023a17:	53                   	push   ebx
c0023a18:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023a1c:	6a 00                	push   0x0
c0023a1e:	57                   	push   edi
c0023a1f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023a22:	83 c4 20             	add    esp,0x20
c0023a25:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0023a29:	4d                   	dec    ebp
c0023a2a:	74 0a                	je     c0023a36 <IDE::detect()+0x276>
c0023a2c:	bd 01 00 00 00       	mov    ebp,0x1
c0023a31:	e9 bb fd ff ff       	jmp    c00237f1 <IDE::detect()+0x31>
c0023a36:	4e                   	dec    esi
c0023a37:	74 63                	je     c0023a9c <IDE::detect()+0x2dc>
c0023a39:	be 01 00 00 00       	mov    esi,0x1
c0023a3e:	e9 ac fd ff ff       	jmp    c00237ef <IDE::detect()+0x2f>
c0023a43:	50                   	push   eax
c0023a44:	6a 04                	push   0x4
c0023a46:	56                   	push   esi
c0023a47:	53                   	push   ebx
c0023a48:	e8 05 f7 ff ff       	call   c0023152 <IDE::read(unsigned char, unsigned char)>
c0023a4d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023a51:	83 c4 0c             	add    esp,0xc
c0023a54:	6a 05                	push   0x5
c0023a56:	56                   	push   esi
c0023a57:	53                   	push   ebx
c0023a58:	e8 f5 f6 ff ff       	call   c0023152 <IDE::read(unsigned char, unsigned char)>
c0023a5d:	83 c4 10             	add    esp,0x10
c0023a60:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0023a64:	80 fa 14             	cmp    dl,0x14
c0023a67:	75 04                	jne    c0023a6d <IDE::detect()+0x2ad>
c0023a69:	3c eb                	cmp    al,0xeb
c0023a6b:	eb 07                	jmp    c0023a74 <IDE::detect()+0x2b4>
c0023a6d:	3c 96                	cmp    al,0x96
c0023a6f:	75 b8                	jne    c0023a29 <IDE::detect()+0x269>
c0023a71:	80 fa 69             	cmp    dl,0x69
c0023a74:	75 b3                	jne    c0023a29 <IDE::detect()+0x269>
c0023a76:	68 a1 00 00 00       	push   0xa1
c0023a7b:	6a 07                	push   0x7
c0023a7d:	56                   	push   esi
c0023a7e:	53                   	push   ebx
c0023a7f:	e8 0e f6 ff ff       	call   c0023092 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a84:	5f                   	pop    edi
c0023a85:	58                   	pop    eax
c0023a86:	6a 00                	push   0x0
c0023a88:	68 40 42 0f 00       	push   0xf4240
c0023a8d:	e8 42 a9 ff ff       	call   c001e3d4 <nanoSleep(unsigned long long)>
c0023a92:	83 c4 10             	add    esp,0x10
c0023a95:	b1 01                	mov    cl,0x1
c0023a97:	e9 4a fe ff ff       	jmp    c00238e6 <IDE::detect()+0x126>
c0023a9c:	81 c4 1c 02 00 00    	add    esp,0x21c
c0023aa2:	5b                   	pop    ebx
c0023aa3:	5e                   	pop    esi
c0023aa4:	5f                   	pop    edi
c0023aa5:	5d                   	pop    ebp
c0023aa6:	c3                   	ret    
c0023aa7:	90                   	nop

c0023aa8 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0023aa8:	55                   	push   ebp
c0023aa9:	57                   	push   edi
c0023aaa:	56                   	push   esi
c0023aab:	53                   	push   ebx
c0023aac:	83 ec 1c             	sub    esp,0x1c
c0023aaf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023ab3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023ab7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023abb:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023abf:	88 c3                	mov    bl,al
c0023ac1:	84 c0                	test   al,al
c0023ac3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023ac7:	0f 84 67 01 00 00    	je     c0023c34 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0023acd:	83 ec 0c             	sub    esp,0xc
c0023ad0:	68 43 cc 02 c0       	push   0xc002cc43
c0023ad5:	e8 10 f5 fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0023ada:	83 c4 10             	add    esp,0x10
c0023add:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023ae1:	3c 01                	cmp    al,0x1
c0023ae3:	75 17                	jne    c0023afc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0023ae5:	83 ec 0c             	sub    esp,0xc
c0023ae8:	b3 13                	mov    bl,0x13
c0023aea:	68 4f cc 02 c0       	push   0xc002cc4f
c0023aef:	e8 f6 f4 fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0023af4:	83 c4 10             	add    esp,0x10
c0023af7:	e9 25 01 00 00       	jmp    c0023c21 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023afc:	3c 02                	cmp    al,0x2
c0023afe:	0f 85 ef 00 00 00    	jne    c0023bf3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0023b04:	d1 e6                	shl    esi,1
c0023b06:	09 ee                	or     esi,ebp
c0023b08:	52                   	push   edx
c0023b09:	89 f0                	mov    eax,esi
c0023b0b:	6a 01                	push   0x1
c0023b0d:	0f b6 f0             	movzx  esi,al
c0023b10:	c1 e6 06             	shl    esi,0x6
c0023b13:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023b1b:	50                   	push   eax
c0023b1c:	57                   	push   edi
c0023b1d:	e8 30 f6 ff ff       	call   c0023152 <IDE::read(unsigned char, unsigned char)>
c0023b22:	83 c4 10             	add    esp,0x10
c0023b25:	89 c6                	mov    esi,eax
c0023b27:	a8 01                	test   al,0x1
c0023b29:	74 12                	je     c0023b3d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0023b2b:	83 ec 0c             	sub    esp,0xc
c0023b2e:	b3 07                	mov    bl,0x7
c0023b30:	68 64 cc 02 c0       	push   0xc002cc64
c0023b35:	e8 b0 f4 fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0023b3a:	83 c4 10             	add    esp,0x10
c0023b3d:	f7 c6 02 00 00 00    	test   esi,0x2
c0023b43:	74 12                	je     c0023b57 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0023b45:	83 ec 0c             	sub    esp,0xc
c0023b48:	b3 03                	mov    bl,0x3
c0023b4a:	68 82 cc 02 c0       	push   0xc002cc82
c0023b4f:	e8 96 f4 fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0023b54:	83 c4 10             	add    esp,0x10
c0023b57:	f7 c6 04 00 00 00    	test   esi,0x4
c0023b5d:	74 12                	je     c0023b71 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0023b5f:	83 ec 0c             	sub    esp,0xc
c0023b62:	b3 14                	mov    bl,0x14
c0023b64:	68 a2 cc 02 c0       	push   0xc002cca2
c0023b69:	e8 7c f4 fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0023b6e:	83 c4 10             	add    esp,0x10
c0023b71:	f7 c6 08 00 00 00    	test   esi,0x8
c0023b77:	74 12                	je     c0023b8b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0023b79:	83 ec 0c             	sub    esp,0xc
c0023b7c:	b3 03                	mov    bl,0x3
c0023b7e:	68 82 cc 02 c0       	push   0xc002cc82
c0023b83:	e8 62 f4 fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0023b88:	83 c4 10             	add    esp,0x10
c0023b8b:	f7 c6 10 00 00 00    	test   esi,0x10
c0023b91:	74 12                	je     c0023ba5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0023b93:	83 ec 0c             	sub    esp,0xc
c0023b96:	b3 15                	mov    bl,0x15
c0023b98:	68 ba cc 02 c0       	push   0xc002ccba
c0023b9d:	e8 48 f4 fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0023ba2:	83 c4 10             	add    esp,0x10
c0023ba5:	f7 c6 20 00 00 00    	test   esi,0x20
c0023bab:	74 12                	je     c0023bbf <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0023bad:	83 ec 0c             	sub    esp,0xc
c0023bb0:	b3 03                	mov    bl,0x3
c0023bb2:	68 82 cc 02 c0       	push   0xc002cc82
c0023bb7:	e8 2e f4 fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0023bbc:	83 c4 10             	add    esp,0x10
c0023bbf:	f7 c6 40 00 00 00    	test   esi,0x40
c0023bc5:	74 12                	je     c0023bd9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0023bc7:	83 ec 0c             	sub    esp,0xc
c0023bca:	b3 16                	mov    bl,0x16
c0023bcc:	68 d4 cc 02 c0       	push   0xc002ccd4
c0023bd1:	e8 14 f4 fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0023bd6:	83 c4 10             	add    esp,0x10
c0023bd9:	89 f0                	mov    eax,esi
c0023bdb:	84 c0                	test   al,al
c0023bdd:	79 42                	jns    c0023c21 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023bdf:	83 ec 0c             	sub    esp,0xc
c0023be2:	b3 0d                	mov    bl,0xd
c0023be4:	68 f5 cc 02 c0       	push   0xc002ccf5
c0023be9:	e8 fc f3 fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0023bee:	83 c4 10             	add    esp,0x10
c0023bf1:	eb 2e                	jmp    c0023c21 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023bf3:	3c 03                	cmp    al,0x3
c0023bf5:	75 14                	jne    c0023c0b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0023bf7:	83 ec 0c             	sub    esp,0xc
c0023bfa:	b3 17                	mov    bl,0x17
c0023bfc:	68 09 cd 02 c0       	push   0xc002cd09
c0023c01:	e8 e4 f3 fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0023c06:	83 c4 10             	add    esp,0x10
c0023c09:	eb 16                	jmp    c0023c21 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023c0b:	3c 04                	cmp    al,0x4
c0023c0d:	75 12                	jne    c0023c21 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023c0f:	83 ec 0c             	sub    esp,0xc
c0023c12:	b3 08                	mov    bl,0x8
c0023c14:	68 1f cd 02 c0       	push   0xc002cd1f
c0023c19:	e8 cc f3 fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0023c1e:	83 c4 10             	add    esp,0x10
c0023c21:	50                   	push   eax
c0023c22:	50                   	push   eax
c0023c23:	0f b6 c3             	movzx  eax,bl
c0023c26:	50                   	push   eax
c0023c27:	68 37 cd 02 c0       	push   0xc002cd37
c0023c2c:	e8 b9 f3 fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0023c31:	83 c4 10             	add    esp,0x10
c0023c34:	83 c4 1c             	add    esp,0x1c
c0023c37:	88 d8                	mov    al,bl
c0023c39:	5b                   	pop    ebx
c0023c3a:	5e                   	pop    esi
c0023c3b:	5f                   	pop    edi
c0023c3c:	5d                   	pop    ebp
c0023c3d:	c3                   	ret    

c0023c3e <IDE::polling(unsigned char, unsigned int)>:
c0023c3e:	57                   	push   edi
c0023c3f:	56                   	push   esi
c0023c40:	53                   	push   ebx
c0023c41:	bb 04 00 00 00       	mov    ebx,0x4
c0023c46:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023c4a:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023c4f:	52                   	push   edx
c0023c50:	6a 0c                	push   0xc
c0023c52:	56                   	push   esi
c0023c53:	57                   	push   edi
c0023c54:	e8 f9 f4 ff ff       	call   c0023152 <IDE::read(unsigned char, unsigned char)>
c0023c59:	83 c4 10             	add    esp,0x10
c0023c5c:	4b                   	dec    ebx
c0023c5d:	75 f0                	jne    c0023c4f <IDE::polling(unsigned char, unsigned int)+0x11>
c0023c5f:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023c64:	50                   	push   eax
c0023c65:	6a 0c                	push   0xc
c0023c67:	56                   	push   esi
c0023c68:	57                   	push   edi
c0023c69:	e8 e4 f4 ff ff       	call   c0023152 <IDE::read(unsigned char, unsigned char)>
c0023c6e:	83 c4 10             	add    esp,0x10
c0023c71:	a8 01                	test   al,0x1
c0023c73:	74 12                	je     c0023c87 <IDE::polling(unsigned char, unsigned int)+0x49>
c0023c75:	83 ec 0c             	sub    esp,0xc
c0023c78:	68 51 cd 02 c0       	push   0xc002cd51
c0023c7d:	e8 68 f3 fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0023c82:	83 c4 10             	add    esp,0x10
c0023c85:	eb 17                	jmp    c0023c9e <IDE::polling(unsigned char, unsigned int)+0x60>
c0023c87:	a8 20                	test   al,0x20
c0023c89:	75 0f                	jne    c0023c9a <IDE::polling(unsigned char, unsigned int)+0x5c>
c0023c8b:	4b                   	dec    ebx
c0023c8c:	74 10                	je     c0023c9e <IDE::polling(unsigned char, unsigned int)+0x60>
c0023c8e:	84 c0                	test   al,al
c0023c90:	78 d2                	js     c0023c64 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023c92:	a8 08                	test   al,0x8
c0023c94:	74 ce                	je     c0023c64 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023c96:	31 c0                	xor    eax,eax
c0023c98:	eb 06                	jmp    c0023ca0 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023c9a:	b0 01                	mov    al,0x1
c0023c9c:	eb 02                	jmp    c0023ca0 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023c9e:	b0 02                	mov    al,0x2
c0023ca0:	5b                   	pop    ebx
c0023ca1:	5e                   	pop    esi
c0023ca2:	5f                   	pop    edi
c0023ca3:	c3                   	ret    

c0023ca4 <SATABus::close(int, int, void*)>:
c0023ca4:	31 c0                	xor    eax,eax
c0023ca6:	c3                   	ret    
c0023ca7:	90                   	nop

c0023ca8 <SATABus::detect()>:
c0023ca8:	c3                   	ret    
c0023ca9:	90                   	nop

c0023caa <SATABus::SATABus()>:
c0023caa:	83 ec 0c             	sub    esp,0xc
c0023cad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cb1:	83 ec 08             	sub    esp,0x8
c0023cb4:	68 94 cd 02 c0       	push   0xc002cd94
c0023cb9:	50                   	push   eax
c0023cba:	e8 dd 0a ff ff       	call   c001479c <HardDiskController::HardDiskController(char const*)>
c0023cbf:	83 c4 10             	add    esp,0x10
c0023cc2:	ba 50 ce 02 c0       	mov    edx,0xc002ce50
c0023cc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ccb:	89 10                	mov    DWORD PTR [eax],edx
c0023ccd:	83 ec 0c             	sub    esp,0xc
c0023cd0:	6a 50                	push   0x50
c0023cd2:	e8 2a c3 fe ff       	call   c0010001 <Phys::allocateContiguousPages(int)>
c0023cd7:	83 c4 10             	add    esp,0x10
c0023cda:	89 c2                	mov    edx,eax
c0023cdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ce0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023ce6:	83 ec 0c             	sub    esp,0xc
c0023ce9:	6a 50                	push   0x50
c0023ceb:	e8 fb df fe ff       	call   c0011ceb <Virt::allocateKernelVirtualPages(int)>
c0023cf0:	83 c4 10             	add    esp,0x10
c0023cf3:	89 c2                	mov    edx,eax
c0023cf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cf9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023cff:	e8 25 e2 fe ff       	call   c0011f29 <Virt::getAKernelVAS()>
c0023d04:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023d08:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023d0e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023d12:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023d18:	83 ec 0c             	sub    esp,0xc
c0023d1b:	6a 03                	push   0x3
c0023d1d:	6a 50                	push   0x50
c0023d1f:	51                   	push   ecx
c0023d20:	52                   	push   edx
c0023d21:	50                   	push   eax
c0023d22:	e8 47 ea fe ff       	call   c001276e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023d27:	83 c4 20             	add    esp,0x20
c0023d2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d2e:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0023d34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d38:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023d3e:	83 ec 04             	sub    esp,0x4
c0023d41:	52                   	push   edx
c0023d42:	50                   	push   eax
c0023d43:	68 b8 cd 02 c0       	push   0xc002cdb8
c0023d48:	e8 9d f2 fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0023d4d:	83 c4 10             	add    esp,0x10
c0023d50:	90                   	nop
c0023d51:	83 c4 0c             	add    esp,0xc
c0023d54:	c3                   	ret    
c0023d55:	90                   	nop

c0023d56 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023d56:	83 ec 0c             	sub    esp,0xc
c0023d59:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023d5d:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023d60:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023d63:	09 c2                	or     edx,eax
c0023d65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d69:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023d6f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023d71:	31 c0                	xor    eax,eax
c0023d73:	c1 e9 08             	shr    ecx,0x8
c0023d76:	83 e1 0f             	and    ecx,0xf
c0023d79:	39 c8                	cmp    eax,ecx
c0023d7b:	74 0a                	je     c0023d87 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023d7d:	f6 c2 01             	test   dl,0x1
c0023d80:	74 18                	je     c0023d9a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023d82:	d1 ea                	shr    edx,1
c0023d84:	40                   	inc    eax
c0023d85:	eb f2                	jmp    c0023d79 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023d87:	83 ec 0c             	sub    esp,0xc
c0023d8a:	68 dc cd 02 c0       	push   0xc002cddc
c0023d8f:	e8 fb 68 ff ff       	call   c001a68f <Krnl::panic(char const*)>
c0023d94:	83 c4 10             	add    esp,0x10
c0023d97:	83 c8 ff             	or     eax,0xffffffff
c0023d9a:	83 c4 0c             	add    esp,0xc
c0023d9d:	c3                   	ret    

c0023d9e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023d9e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023da2:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023da5:	89 c2                	mov    edx,eax
c0023da7:	c1 ea 08             	shr    edx,0x8
c0023daa:	83 e2 0f             	and    edx,0xf
c0023dad:	fe ca                	dec    dl
c0023daf:	75 31                	jne    c0023de2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023db1:	83 e0 0f             	and    eax,0xf
c0023db4:	3c 03                	cmp    al,0x3
c0023db6:	75 2a                	jne    c0023de2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023db8:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023dbb:	b8 02 00 00 00       	mov    eax,0x2
c0023dc0:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023dc6:	74 1c                	je     c0023de4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023dc8:	b8 04 00 00 00       	mov    eax,0x4
c0023dcd:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023dd3:	74 0f                	je     c0023de4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023dd5:	31 c0                	xor    eax,eax
c0023dd7:	83 fa 03             	cmp    edx,0x3
c0023dda:	0f 94 c0             	sete   al
c0023ddd:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023de1:	c3                   	ret    
c0023de2:	31 c0                	xor    eax,eax
c0023de4:	c3                   	ret    
c0023de5:	90                   	nop

c0023de6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023de6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023dea:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023ded:	0f ba e2 0f          	bt     edx,0xf
c0023df1:	72 f7                	jb     c0023dea <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023df3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023df6:	83 ca 10             	or     edx,0x10
c0023df9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023dfc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023dff:	83 ca 01             	or     edx,0x1
c0023e02:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023e05:	c3                   	ret    

c0023e06 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023e06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023e0a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e0d:	83 e2 fe             	and    edx,0xfffffffe
c0023e10:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023e13:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e16:	83 e2 ef             	and    edx,0xffffffef
c0023e19:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023e1c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e1f:	0f ba e2 0e          	bt     edx,0xe
c0023e23:	72 f7                	jb     c0023e1c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023e25:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e28:	0f ba e2 0f          	bt     edx,0xf
c0023e2c:	72 ee                	jb     c0023e1c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023e2e:	c3                   	ret    
c0023e2f:	90                   	nop

c0023e30 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023e30:	55                   	push   ebp
c0023e31:	57                   	push   edi
c0023e32:	56                   	push   esi
c0023e33:	53                   	push   ebx
c0023e34:	83 ec 1c             	sub    esp,0x1c
c0023e37:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023e3b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023e3f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023e43:	53                   	push   ebx
c0023e44:	89 fd                	mov    ebp,edi
c0023e46:	56                   	push   esi
c0023e47:	c1 e5 0a             	shl    ebp,0xa
c0023e4a:	e8 b7 ff ff ff       	call   c0023e06 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023e4f:	83 ec 0c             	sub    esp,0xc
c0023e52:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023e58:	01 e8                	add    eax,ebp
c0023e5a:	89 03                	mov    DWORD PTR [ebx],eax
c0023e5c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023e5e:	68 00 04 00 00       	push   0x400
c0023e63:	6a 00                	push   0x0
c0023e65:	50                   	push   eax
c0023e66:	e8 0d c9 fd ff       	call   c0000778 <memset>
c0023e6b:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023e71:	89 fa                	mov    edx,edi
c0023e73:	01 e8                	add    eax,ebp
c0023e75:	c1 e7 0d             	shl    edi,0xd
c0023e78:	89 03                	mov    DWORD PTR [ebx],eax
c0023e7a:	c1 e2 08             	shl    edx,0x8
c0023e7d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023e84:	81 c2 00 80 00 00    	add    edx,0x8000
c0023e8a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023e8e:	89 d0                	mov    eax,edx
c0023e90:	83 c4 1c             	add    esp,0x1c
c0023e93:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023e99:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023e9c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023e9f:	68 00 01 00 00       	push   0x100
c0023ea4:	6a 00                	push   0x0
c0023ea6:	50                   	push   eax
c0023ea7:	e8 cc c8 fd ff       	call   c0000778 <memset>
c0023eac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023eb0:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023eb6:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023ebc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023ec0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023ec3:	83 c4 10             	add    esp,0x10
c0023ec6:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023ecd:	31 ff                	xor    edi,edi
c0023ecf:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023ed5:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023edb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023edf:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023ee5:	83 c5 20             	add    ebp,0x20
c0023ee8:	01 f8                	add    eax,edi
c0023eea:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023eed:	52                   	push   edx
c0023eee:	68 00 01 00 00       	push   0x100
c0023ef3:	6a 00                	push   0x0
c0023ef5:	50                   	push   eax
c0023ef6:	e8 7d c8 fd ff       	call   c0000778 <memset>
c0023efb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023eff:	83 c4 10             	add    esp,0x10
c0023f02:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023f08:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023f0f:	01 f8                	add    eax,edi
c0023f11:	81 c7 00 01 00 00    	add    edi,0x100
c0023f17:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023f1a:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023f20:	75 b3                	jne    c0023ed5 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023f22:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023f26:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023f2a:	83 c4 1c             	add    esp,0x1c
c0023f2d:	5b                   	pop    ebx
c0023f2e:	5e                   	pop    esi
c0023f2f:	5f                   	pop    edi
c0023f30:	5d                   	pop    ebp
c0023f31:	e9 b0 fe ff ff       	jmp    c0023de6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023f36 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023f36:	55                   	push   ebp
c0023f37:	57                   	push   edi
c0023f38:	56                   	push   esi
c0023f39:	53                   	push   ebx
c0023f3a:	31 db                	xor    ebx,ebx
c0023f3c:	83 ec 0c             	sub    esp,0xc
c0023f3f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023f43:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023f47:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023f4a:	f7 c7 01 00 00 00    	test   edi,0x1
c0023f50:	0f 84 aa 00 00 00    	je     c0024000 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023f56:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023f5a:	89 d8                	mov    eax,ebx
c0023f5c:	c1 e0 07             	shl    eax,0x7
c0023f5f:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0023f66:	55                   	push   ebp
c0023f67:	56                   	push   esi
c0023f68:	e8 31 fe ff ff       	call   c0023d9e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023f6d:	5a                   	pop    edx
c0023f6e:	83 f8 01             	cmp    eax,0x1
c0023f71:	59                   	pop    ecx
c0023f72:	75 30                	jne    c0023fa4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0023f74:	50                   	push   eax
c0023f75:	50                   	push   eax
c0023f76:	53                   	push   ebx
c0023f77:	68 01 ce 02 c0       	push   0xc002ce01
c0023f7c:	e8 69 f0 fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0023f81:	83 c4 0c             	add    esp,0xc
c0023f84:	53                   	push   ebx
c0023f85:	55                   	push   ebp
c0023f86:	56                   	push   esi
c0023f87:	e8 a4 fe ff ff       	call   c0023e30 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023f8c:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023f93:	e8 ab b8 fe ff       	call   c000f843 <malloc>
c0023f98:	89 c5                	mov    ebp,eax
c0023f9a:	89 04 24             	mov    DWORD PTR [esp],eax
c0023f9d:	e8 60 0d 00 00       	call   c0024d02 <SATA::SATA()>
c0023fa2:	eb 33                	jmp    c0023fd7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0023fa4:	83 f8 04             	cmp    eax,0x4
c0023fa7:	75 47                	jne    c0023ff0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c0023fa9:	50                   	push   eax
c0023faa:	50                   	push   eax
c0023fab:	53                   	push   ebx
c0023fac:	68 18 ce 02 c0       	push   0xc002ce18
c0023fb1:	e8 34 f0 fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0023fb6:	83 c4 0c             	add    esp,0xc
c0023fb9:	53                   	push   ebx
c0023fba:	55                   	push   ebp
c0023fbb:	56                   	push   esi
c0023fbc:	e8 6f fe ff ff       	call   c0023e30 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023fc1:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023fc8:	e8 76 b8 fe ff       	call   c000f843 <malloc>
c0023fcd:	89 c5                	mov    ebp,eax
c0023fcf:	89 04 24             	mov    DWORD PTR [esp],eax
c0023fd2:	e8 d7 10 00 00       	call   c00250ae <SATAPI::SATAPI()>
c0023fd7:	5a                   	pop    edx
c0023fd8:	59                   	pop    ecx
c0023fd9:	55                   	push   ebp
c0023fda:	56                   	push   esi
c0023fdb:	e8 30 04 ff ff       	call   c0014410 <Device::addChild(Device*)>
c0023fe0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023fe3:	56                   	push   esi
c0023fe4:	6a 00                	push   0x0
c0023fe6:	53                   	push   ebx
c0023fe7:	55                   	push   ebp
c0023fe8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023feb:	83 c4 20             	add    esp,0x20
c0023fee:	eb 10                	jmp    c0024000 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023ff0:	50                   	push   eax
c0023ff1:	50                   	push   eax
c0023ff2:	53                   	push   ebx
c0023ff3:	68 31 ce 02 c0       	push   0xc002ce31
c0023ff8:	e8 ed ef fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0023ffd:	83 c4 10             	add    esp,0x10
c0024000:	d1 ef                	shr    edi,1
c0024002:	43                   	inc    ebx
c0024003:	83 fb 20             	cmp    ebx,0x20
c0024006:	0f 85 3e ff ff ff    	jne    c0023f4a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c002400c:	83 c4 0c             	add    esp,0xc
c002400f:	5b                   	pop    ebx
c0024010:	5e                   	pop    esi
c0024011:	5f                   	pop    edi
c0024012:	5d                   	pop    ebp
c0024013:	c3                   	ret    

c0024014 <SATABus::open(int, int, void*)>:
c0024014:	83 ec 14             	sub    esp,0x14
c0024017:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002401b:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0024021:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0024027:	52                   	push   edx
c0024028:	50                   	push   eax
c0024029:	e8 08 ff ff ff       	call   c0023f36 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c002402e:	31 c0                	xor    eax,eax
c0024030:	83 c4 1c             	add    esp,0x1c
c0024033:	c3                   	ret    

c0024034 <ATA::close(int, int, void*)>:
c0024034:	83 ec 0c             	sub    esp,0xc
c0024037:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002403b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024041:	85 c0                	test   eax,eax
c0024043:	74 0c                	je     c0024051 <ATA::close(int, int, void*)+0x1d>
c0024045:	83 ec 0c             	sub    esp,0xc
c0024048:	8b 10                	mov    edx,DWORD PTR [eax]
c002404a:	50                   	push   eax
c002404b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002404e:	83 c4 10             	add    esp,0x10
c0024051:	31 c0                	xor    eax,eax
c0024053:	83 c4 0c             	add    esp,0xc
c0024056:	c3                   	ret    
c0024057:	90                   	nop

c0024058 <ATA::powerSaving(PowerSavingLevel)>:
c0024058:	c3                   	ret    
c0024059:	90                   	nop

c002405a <ATA::ATA()>:
c002405a:	83 ec 0c             	sub    esp,0xc
c002405d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024061:	83 ec 04             	sub    esp,0x4
c0024064:	68 00 02 00 00       	push   0x200
c0024069:	68 19 cf 02 c0       	push   0xc002cf19
c002406e:	50                   	push   eax
c002406f:	e8 c0 07 ff ff       	call   c0014834 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024074:	83 c4 10             	add    esp,0x10
c0024077:	ba 9c ce 02 c0       	mov    edx,0xc002ce9c
c002407c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024080:	89 10                	mov    DWORD PTR [eax],edx
c0024082:	90                   	nop
c0024083:	83 c4 0c             	add    esp,0xc
c0024086:	c3                   	ret    
c0024087:	90                   	nop

c0024088 <ATA::flush(bool)>:
c0024088:	53                   	push   ebx
c0024089:	83 ec 08             	sub    esp,0x8
c002408c:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0024091:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024095:	19 c0                	sbb    eax,eax
c0024097:	83 e0 fd             	and    eax,0xfffffffd
c002409a:	05 ea 00 00 00       	add    eax,0xea
c002409f:	50                   	push   eax
c00240a0:	6a 07                	push   0x7
c00240a2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240a9:	50                   	push   eax
c00240aa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240b0:	e8 dd ef ff ff       	call   c0023092 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240b5:	83 c4 0c             	add    esp,0xc
c00240b8:	6a 00                	push   0x0
c00240ba:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240c1:	50                   	push   eax
c00240c2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240c8:	e8 71 fb ff ff       	call   c0023c3e <IDE::polling(unsigned char, unsigned int)>
c00240cd:	83 c4 18             	add    esp,0x18
c00240d0:	5b                   	pop    ebx
c00240d1:	c3                   	ret    

c00240d2 <ATA::readyForCommand()>:
c00240d2:	56                   	push   esi
c00240d3:	53                   	push   ebx
c00240d4:	31 db                	xor    ebx,ebx
c00240d6:	50                   	push   eax
c00240d7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00240db:	50                   	push   eax
c00240dc:	6a 0c                	push   0xc
c00240de:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00240e5:	50                   	push   eax
c00240e6:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00240ec:	e8 61 f0 ff ff       	call   c0023152 <IDE::read(unsigned char, unsigned char)>
c00240f1:	83 c4 10             	add    esp,0x10
c00240f4:	a8 88                	test   al,0x88
c00240f6:	74 23                	je     c002411b <ATA::readyForCommand()+0x49>
c00240f8:	43                   	inc    ebx
c00240f9:	83 fb 63             	cmp    ebx,0x63
c00240fc:	7e dd                	jle    c00240db <ATA::readyForCommand()+0x9>
c00240fe:	51                   	push   ecx
c00240ff:	51                   	push   ecx
c0024100:	6a 00                	push   0x0
c0024102:	68 40 42 0f 00       	push   0xf4240
c0024107:	e8 c8 a2 ff ff       	call   c001e3d4 <nanoSleep(unsigned long long)>
c002410c:	83 c4 10             	add    esp,0x10
c002410f:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024115:	75 c4                	jne    c00240db <ATA::readyForCommand()+0x9>
c0024117:	31 c0                	xor    eax,eax
c0024119:	eb 02                	jmp    c002411d <ATA::readyForCommand()+0x4b>
c002411b:	b0 01                	mov    al,0x1
c002411d:	5a                   	pop    edx
c002411e:	5b                   	pop    ebx
c002411f:	5e                   	pop    esi
c0024120:	c3                   	ret    
c0024121:	90                   	nop

c0024122 <ATA::access(unsigned long long, int, void*, bool)>:
c0024122:	55                   	push   ebp
c0024123:	57                   	push   edi
c0024124:	56                   	push   esi
c0024125:	53                   	push   ebx
c0024126:	83 ec 2c             	sub    esp,0x2c
c0024129:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002412d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024131:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024135:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024139:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c002413d:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0024141:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024145:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002414b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002414f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024155:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024159:	c1 e0 06             	shl    eax,0x6
c002415c:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0024164:	74 5d                	je     c00241c3 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0024166:	89 fa                	mov    edx,edi
c0024168:	89 f0                	mov    eax,esi
c002416a:	0f ac d0 1c          	shrd   eax,edx,0x1c
c002416e:	c1 ea 1c             	shr    edx,0x1c
c0024171:	89 d1                	mov    ecx,edx
c0024173:	09 c1                	or     ecx,eax
c0024175:	74 25                	je     c002419c <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0024177:	31 ed                	xor    ebp,ebp
c0024179:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0024180:	89 fa                	mov    edx,edi
c0024182:	89 f0                	mov    eax,esi
c0024184:	0f ad d0             	shrd   eax,edx,cl
c0024187:	d3 ea                	shr    edx,cl
c0024189:	f6 c1 20             	test   cl,0x20
c002418c:	74 02                	je     c0024190 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c002418e:	89 d0                	mov    eax,edx
c0024190:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0024194:	45                   	inc    ebp
c0024195:	83 fd 06             	cmp    ebp,0x6
c0024198:	75 df                	jne    c0024179 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c002419a:	eb 76                	jmp    c0024212 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c002419c:	89 f0                	mov    eax,esi
c002419e:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00241a3:	89 fa                	mov    edx,edi
c00241a5:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00241ac:	0f ac d0 10          	shrd   eax,edx,0x10
c00241b0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00241b5:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00241b9:	c1 ee 18             	shr    esi,0x18
c00241bc:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c00241c1:	eb 56                	jmp    c0024219 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00241c3:	6a 00                	push   0x0
c00241c5:	6a 3f                	push   0x3f
c00241c7:	57                   	push   edi
c00241c8:	56                   	push   esi
c00241c9:	e8 8e 29 00 00       	call   c0026b5c <__umoddi3>
c00241ce:	83 c4 10             	add    esp,0x10
c00241d1:	40                   	inc    eax
c00241d2:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00241d6:	6a 00                	push   0x0
c00241d8:	68 f0 03 00 00       	push   0x3f0
c00241dd:	57                   	push   edi
c00241de:	56                   	push   esi
c00241df:	e8 78 28 00 00       	call   c0026a5c <__udivdi3>
c00241e4:	83 c4 10             	add    esp,0x10
c00241e7:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c00241ec:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00241f3:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00241f8:	6a 00                	push   0x0
c00241fa:	6a 3f                	push   0x3f
c00241fc:	57                   	push   edi
c00241fd:	56                   	push   esi
c00241fe:	e8 59 28 00 00       	call   c0026a5c <__udivdi3>
c0024203:	83 c4 10             	add    esp,0x10
c0024206:	89 c6                	mov    esi,eax
c0024208:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c002420d:	83 e6 0f             	and    esi,0xf
c0024210:	eb 07                	jmp    c0024219 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024212:	31 f6                	xor    esi,esi
c0024214:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0024219:	bf 01 00 00 00       	mov    edi,0x1
c002421e:	50                   	push   eax
c002421f:	6a 00                	push   0x0
c0024221:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024228:	50                   	push   eax
c0024229:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002422d:	e8 6c f0 ff ff       	call   c002329e <IDE::enableIRQs(unsigned char, bool)>
c0024232:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024235:	e8 98 fe ff ff       	call   c00240d2 <ATA::readyForCommand()>
c002423a:	83 c4 10             	add    esp,0x10
c002423d:	84 c0                	test   al,al
c002423f:	0f 84 5a 02 00 00    	je     c002449f <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024245:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002424b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024251:	c1 e0 04             	shl    eax,0x4
c0024254:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c002425b:	09 c6                	or     esi,eax
c002425d:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0024262:	75 05                	jne    c0024269 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0024264:	83 ce a0             	or     esi,0xffffffa0
c0024267:	eb 03                	jmp    c002426c <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0024269:	83 ce e0             	or     esi,0xffffffe0
c002426c:	89 f0                	mov    eax,esi
c002426e:	0f b6 f0             	movzx  esi,al
c0024271:	56                   	push   esi
c0024272:	6a 06                	push   0x6
c0024274:	51                   	push   ecx
c0024275:	52                   	push   edx
c0024276:	e8 17 ee ff ff       	call   c0023092 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002427b:	83 c4 10             	add    esp,0x10
c002427e:	6a 00                	push   0x0
c0024280:	6a 01                	push   0x1
c0024282:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024289:	50                   	push   eax
c002428a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024290:	e8 fd ed ff ff       	call   c0023092 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024295:	83 c4 10             	add    esp,0x10
c0024298:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c002429d:	75 6e                	jne    c002430d <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c002429f:	6a 00                	push   0x0
c00242a1:	6a 08                	push   0x8
c00242a3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242aa:	50                   	push   eax
c00242ab:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242b1:	e8 dc ed ff ff       	call   c0023092 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242b6:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00242bb:	50                   	push   eax
c00242bc:	6a 09                	push   0x9
c00242be:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242c5:	50                   	push   eax
c00242c6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242cc:	e8 c1 ed ff ff       	call   c0023092 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242d1:	83 c4 20             	add    esp,0x20
c00242d4:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c00242d9:	50                   	push   eax
c00242da:	6a 0a                	push   0xa
c00242dc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242e3:	50                   	push   eax
c00242e4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242ea:	e8 a3 ed ff ff       	call   c0023092 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242ef:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c00242f4:	50                   	push   eax
c00242f5:	6a 0b                	push   0xb
c00242f7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242fe:	50                   	push   eax
c00242ff:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024305:	e8 88 ed ff ff       	call   c0023092 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002430a:	83 c4 20             	add    esp,0x20
c002430d:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024312:	50                   	push   eax
c0024313:	6a 02                	push   0x2
c0024315:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002431c:	50                   	push   eax
c002431d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024323:	e8 6a ed ff ff       	call   c0023092 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024328:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c002432d:	50                   	push   eax
c002432e:	6a 03                	push   0x3
c0024330:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024337:	50                   	push   eax
c0024338:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002433e:	e8 4f ed ff ff       	call   c0023092 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024343:	83 c4 20             	add    esp,0x20
c0024346:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c002434b:	50                   	push   eax
c002434c:	6a 04                	push   0x4
c002434e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024355:	50                   	push   eax
c0024356:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002435c:	e8 31 ed ff ff       	call   c0023092 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024361:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0024366:	50                   	push   eax
c0024367:	6a 05                	push   0x5
c0024369:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024370:	50                   	push   eax
c0024371:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024377:	e8 16 ed ff ff       	call   c0023092 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002437c:	83 c4 20             	add    esp,0x20
c002437f:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024384:	0f 94 c0             	sete   al
c0024387:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002438c:	74 09                	je     c0024397 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c002438e:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0024395:	eb 07                	jmp    c002439e <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0024397:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c002439e:	0f b6 c0             	movzx  eax,al
c00243a1:	50                   	push   eax
c00243a2:	6a 07                	push   0x7
c00243a4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243ab:	50                   	push   eax
c00243ac:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243b2:	e8 db ec ff ff       	call   c0023092 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243b7:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00243bb:	83 c4 10             	add    esp,0x10
c00243be:	85 f6                	test   esi,esi
c00243c0:	0f 84 ba 00 00 00    	je     c0024480 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c00243c6:	50                   	push   eax
c00243c7:	6a 01                	push   0x1
c00243c9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243d0:	50                   	push   eax
c00243d1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243d7:	e8 62 f8 ff ff       	call   c0023c3e <IDE::polling(unsigned char, unsigned int)>
c00243dc:	83 c4 10             	add    esp,0x10
c00243df:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c00243e5:	84 c0                	test   al,al
c00243e7:	74 2c                	je     c0024415 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c00243e9:	0f b6 f8             	movzx  edi,al
c00243ec:	0f b6 d2             	movzx  edx,dl
c00243ef:	57                   	push   edi
c00243f0:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c00243f7:	50                   	push   eax
c00243f8:	52                   	push   edx
c00243f9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243ff:	e8 a4 f6 ff ff       	call   c0023aa8 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024404:	c7 04 24 74 ce 02 c0 	mov    DWORD PTR [esp],0xc002ce74
c002440b:	e8 da eb fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0024410:	e9 87 00 00 00       	jmp    c002449c <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0024415:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c002441a:	74 33                	je     c002444f <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c002441c:	31 ed                	xor    ebp,ebp
c002441e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024422:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024426:	50                   	push   eax
c0024427:	50                   	push   eax
c0024428:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002442f:	50                   	push   eax
c0024430:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024436:	e8 45 ec ff ff       	call   c0023080 <IDE::getBase(unsigned char)>
c002443b:	89 c2                	mov    edx,eax
c002443d:	89 f8                	mov    eax,edi
c002443f:	66 ef                	out    dx,ax
c0024441:	45                   	inc    ebp
c0024442:	83 c4 10             	add    esp,0x10
c0024445:	81 fd 00 01 00 00    	cmp    ebp,0x100
c002444b:	75 d1                	jne    c002441e <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c002444d:	eb 23                	jmp    c0024472 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c002444f:	0f b6 d2             	movzx  edx,dl
c0024452:	51                   	push   ecx
c0024453:	51                   	push   ecx
c0024454:	52                   	push   edx
c0024455:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002445b:	e8 20 ec ff ff       	call   c0023080 <IDE::getBase(unsigned char)>
c0024460:	b9 00 01 00 00       	mov    ecx,0x100
c0024465:	89 c2                	mov    edx,eax
c0024467:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002446b:	fc                   	cld    
c002446c:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002446f:	83 c4 10             	add    esp,0x10
c0024472:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c002447a:	4e                   	dec    esi
c002447b:	e9 3e ff ff ff       	jmp    c00243be <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0024480:	31 ff                	xor    edi,edi
c0024482:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024487:	74 16                	je     c002449f <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024489:	50                   	push   eax
c002448a:	50                   	push   eax
c002448b:	31 c0                	xor    eax,eax
c002448d:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0024492:	0f 94 c0             	sete   al
c0024495:	50                   	push   eax
c0024496:	53                   	push   ebx
c0024497:	e8 ec fb ff ff       	call   c0024088 <ATA::flush(bool)>
c002449c:	83 c4 10             	add    esp,0x10
c002449f:	83 c4 2c             	add    esp,0x2c
c00244a2:	89 f8                	mov    eax,edi
c00244a4:	5b                   	pop    ebx
c00244a5:	5e                   	pop    esi
c00244a6:	5f                   	pop    edi
c00244a7:	5d                   	pop    ebp
c00244a8:	c3                   	ret    
c00244a9:	90                   	nop

c00244aa <ATA::read(unsigned long long, int, void*)>:
c00244aa:	57                   	push   edi
c00244ab:	b8 04 00 00 00       	mov    eax,0x4
c00244b0:	56                   	push   esi
c00244b1:	53                   	push   ebx
c00244b2:	83 ec 10             	sub    esp,0x10
c00244b5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00244b9:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00244bd:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00244c0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00244c4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00244c8:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00244ce:	77 3b                	ja     c002450b <ATA::read(unsigned long long, int, void*)+0x61>
c00244d0:	b8 06 00 00 00       	mov    eax,0x6
c00244d5:	85 d2                	test   edx,edx
c00244d7:	74 32                	je     c002450b <ATA::read(unsigned long long, int, void*)+0x61>
c00244d9:	50                   	push   eax
c00244da:	50                   	push   eax
c00244db:	6a 00                	push   0x0
c00244dd:	52                   	push   edx
c00244de:	53                   	push   ebx
c00244df:	57                   	push   edi
c00244e0:	56                   	push   esi
c00244e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00244e5:	e8 38 fc ff ff       	call   c0024122 <ATA::access(unsigned long long, int, void*, bool)>
c00244ea:	83 c4 20             	add    esp,0x20
c00244ed:	85 c0                	test   eax,eax
c00244ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00244f3:	75 11                	jne    c0024506 <ATA::read(unsigned long long, int, void*)+0x5c>
c00244f5:	01 1d 28 28 03 c0    	add    DWORD PTR ds:0xc0032828,ebx
c00244fb:	e8 d0 c4 fe ff       	call   c00109d0 <VgaText::updateDiskUsage()>
c0024500:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024504:	eb 05                	jmp    c002450b <ATA::read(unsigned long long, int, void*)+0x61>
c0024506:	b8 01 00 00 00       	mov    eax,0x1
c002450b:	83 c4 10             	add    esp,0x10
c002450e:	5b                   	pop    ebx
c002450f:	5e                   	pop    esi
c0024510:	5f                   	pop    edi
c0024511:	c3                   	ret    

c0024512 <ATA::write(unsigned long long, int, void*)>:
c0024512:	57                   	push   edi
c0024513:	b8 04 00 00 00       	mov    eax,0x4
c0024518:	56                   	push   esi
c0024519:	53                   	push   ebx
c002451a:	83 ec 10             	sub    esp,0x10
c002451d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024521:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024525:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024528:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002452c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024530:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024536:	77 3b                	ja     c0024573 <ATA::write(unsigned long long, int, void*)+0x61>
c0024538:	b8 06 00 00 00       	mov    eax,0x6
c002453d:	85 d2                	test   edx,edx
c002453f:	74 32                	je     c0024573 <ATA::write(unsigned long long, int, void*)+0x61>
c0024541:	50                   	push   eax
c0024542:	50                   	push   eax
c0024543:	6a 01                	push   0x1
c0024545:	52                   	push   edx
c0024546:	53                   	push   ebx
c0024547:	57                   	push   edi
c0024548:	56                   	push   esi
c0024549:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002454d:	e8 d0 fb ff ff       	call   c0024122 <ATA::access(unsigned long long, int, void*, bool)>
c0024552:	83 c4 20             	add    esp,0x20
c0024555:	85 c0                	test   eax,eax
c0024557:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002455b:	75 11                	jne    c002456e <ATA::write(unsigned long long, int, void*)+0x5c>
c002455d:	01 1d 24 28 03 c0    	add    DWORD PTR ds:0xc0032824,ebx
c0024563:	e8 68 c4 fe ff       	call   c00109d0 <VgaText::updateDiskUsage()>
c0024568:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002456c:	eb 05                	jmp    c0024573 <ATA::write(unsigned long long, int, void*)+0x61>
c002456e:	b8 01 00 00 00       	mov    eax,0x1
c0024573:	83 c4 10             	add    esp,0x10
c0024576:	5b                   	pop    ebx
c0024577:	5e                   	pop    esi
c0024578:	5f                   	pop    edi
c0024579:	c3                   	ret    

c002457a <ATA::detectCHS()>:
c002457a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002457e:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024584:	c1 e0 06             	shl    eax,0x6
c0024587:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c002458d:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0024597:	c7 44 24 04 7f ce 02 c0 	mov    DWORD PTR [esp+0x4],0xc002ce7f
c002459f:	e9 eb 60 ff ff       	jmp    c001a68f <Krnl::panic(char const*)>

c00245a4 <ATA::open(int, int, void*)>:
c00245a4:	53                   	push   ebx
c00245a5:	83 ec 08             	sub    esp,0x8
c00245a8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00245ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00245b0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00245b4:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00245ba:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00245c0:	c1 e0 06             	shl    eax,0x6
c00245c3:	01 d0                	add    eax,edx
c00245c5:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c00245cc:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00245d2:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00245d9:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00245e3:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00245e9:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00245f0:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c00245f7:	75 0c                	jne    c0024605 <ATA::open(int, int, void*)+0x61>
c00245f9:	83 ec 0c             	sub    esp,0xc
c00245fc:	53                   	push   ebx
c00245fd:	e8 78 ff ff ff       	call   c002457a <ATA::detectCHS()>
c0024602:	83 c4 10             	add    esp,0x10
c0024605:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002460b:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024611:	c1 e0 06             	shl    eax,0x6
c0024614:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c002461b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024625:	d1 e8                	shr    eax,1
c0024627:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002462d:	6a 04                	push   0x4
c002462f:	6a 0c                	push   0xc
c0024631:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024638:	50                   	push   eax
c0024639:	52                   	push   edx
c002463a:	e8 53 ea ff ff       	call   c0023092 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002463f:	90                   	nop
c0024640:	90                   	nop
c0024641:	6a 00                	push   0x0
c0024643:	6a 0c                	push   0xc
c0024645:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002464c:	50                   	push   eax
c002464d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024653:	e8 3a ea ff ff       	call   c0023092 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024658:	83 c4 14             	add    esp,0x14
c002465b:	53                   	push   ebx
c002465c:	e8 3b 02 ff ff       	call   c001489c <PhysicalDisk::startCache()>
c0024661:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024664:	e8 a9 23 ff ff       	call   c0016a12 <createPartitionsForDisk(PhysicalDisk*)>
c0024669:	31 c0                	xor    eax,eax
c002466b:	83 c4 18             	add    esp,0x18
c002466e:	5b                   	pop    ebx
c002466f:	c3                   	ret    

c0024670 <ATAPI::write(unsigned long long, int, void*)>:
c0024670:	b8 03 00 00 00       	mov    eax,0x3
c0024675:	c3                   	ret    

c0024676 <ATAPI::close(int, int, void*)>:
c0024676:	83 ec 0c             	sub    esp,0xc
c0024679:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002467d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024683:	85 c0                	test   eax,eax
c0024685:	74 0c                	je     c0024693 <ATAPI::close(int, int, void*)+0x1d>
c0024687:	83 ec 0c             	sub    esp,0xc
c002468a:	8b 10                	mov    edx,DWORD PTR [eax]
c002468c:	50                   	push   eax
c002468d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024690:	83 c4 10             	add    esp,0x10
c0024693:	31 c0                	xor    eax,eax
c0024695:	83 c4 0c             	add    esp,0xc
c0024698:	c3                   	ret    
c0024699:	90                   	nop

c002469a <ATAPI::ATAPI()>:
c002469a:	83 ec 0c             	sub    esp,0xc
c002469d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00246a1:	83 ec 04             	sub    esp,0x4
c00246a4:	68 00 08 00 00       	push   0x800
c00246a9:	68 b9 cf 02 c0       	push   0xc002cfb9
c00246ae:	50                   	push   eax
c00246af:	e8 80 01 ff ff       	call   c0014834 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00246b4:	83 c4 10             	add    esp,0x10
c00246b7:	ba d4 ce 02 c0       	mov    edx,0xc002ced4
c00246bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00246c0:	89 10                	mov    DWORD PTR [eax],edx
c00246c2:	90                   	nop
c00246c3:	83 c4 0c             	add    esp,0xc
c00246c6:	c3                   	ret    
c00246c7:	90                   	nop

c00246c8 <ATAPI::readyForCommand()>:
c00246c8:	56                   	push   esi
c00246c9:	53                   	push   ebx
c00246ca:	31 db                	xor    ebx,ebx
c00246cc:	50                   	push   eax
c00246cd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00246d1:	50                   	push   eax
c00246d2:	6a 0c                	push   0xc
c00246d4:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00246db:	50                   	push   eax
c00246dc:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00246e2:	e8 6b ea ff ff       	call   c0023152 <IDE::read(unsigned char, unsigned char)>
c00246e7:	83 c4 10             	add    esp,0x10
c00246ea:	a8 88                	test   al,0x88
c00246ec:	74 23                	je     c0024711 <ATAPI::readyForCommand()+0x49>
c00246ee:	43                   	inc    ebx
c00246ef:	83 fb 63             	cmp    ebx,0x63
c00246f2:	7e dd                	jle    c00246d1 <ATAPI::readyForCommand()+0x9>
c00246f4:	51                   	push   ecx
c00246f5:	51                   	push   ecx
c00246f6:	6a 00                	push   0x0
c00246f8:	68 40 42 0f 00       	push   0xf4240
c00246fd:	e8 d2 9c ff ff       	call   c001e3d4 <nanoSleep(unsigned long long)>
c0024702:	83 c4 10             	add    esp,0x10
c0024705:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002470b:	75 c4                	jne    c00246d1 <ATAPI::readyForCommand()+0x9>
c002470d:	31 c0                	xor    eax,eax
c002470f:	eb 02                	jmp    c0024713 <ATAPI::readyForCommand()+0x4b>
c0024711:	b0 01                	mov    al,0x1
c0024713:	5a                   	pop    edx
c0024714:	5b                   	pop    ebx
c0024715:	5e                   	pop    esi
c0024716:	c3                   	ret    
c0024717:	90                   	nop

c0024718 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0024718:	55                   	push   ebp
c0024719:	57                   	push   edi
c002471a:	56                   	push   esi
c002471b:	53                   	push   ebx
c002471c:	83 ec 20             	sub    esp,0x20
c002471f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024723:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0024727:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c002472b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002472f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024733:	6a 01                	push   0x1
c0024735:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002473c:	50                   	push   eax
c002473d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024743:	e8 56 eb ff ff       	call   c002329e <IDE::enableIRQs(unsigned char, bool)>
c0024748:	5e                   	pop    esi
c0024749:	58                   	pop    eax
c002474a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024751:	50                   	push   eax
c0024752:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024758:	e8 0f e9 ff ff       	call   c002306c <IDE::prepareInterrupt(unsigned char)>
c002475d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024760:	e8 63 ff ff ff       	call   c00246c8 <ATAPI::readyForCommand()>
c0024765:	83 c4 10             	add    esp,0x10
c0024768:	84 c0                	test   al,al
c002476a:	75 0a                	jne    c0024776 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c002476c:	bb 01 00 00 00       	mov    ebx,0x1
c0024771:	e9 57 02 00 00       	jmp    c00249cd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024776:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c002477c:	c1 e0 04             	shl    eax,0x4
c002477f:	0f b6 c0             	movzx  eax,al
c0024782:	50                   	push   eax
c0024783:	6a 06                	push   0x6
c0024785:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002478c:	50                   	push   eax
c002478d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024793:	e8 fa e8 ff ff       	call   c0023092 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024798:	6a 00                	push   0x0
c002479a:	6a 01                	push   0x1
c002479c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247a3:	50                   	push   eax
c00247a4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247aa:	e8 e3 e8 ff ff       	call   c0023092 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00247af:	83 c4 20             	add    esp,0x20
c00247b2:	0f b6 c3             	movzx  eax,bl
c00247b5:	0f b6 df             	movzx  ebx,bh
c00247b8:	50                   	push   eax
c00247b9:	6a 04                	push   0x4
c00247bb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247c2:	50                   	push   eax
c00247c3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247c9:	e8 c4 e8 ff ff       	call   c0023092 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00247ce:	53                   	push   ebx
c00247cf:	6a 05                	push   0x5
c00247d1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247d8:	50                   	push   eax
c00247d9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247df:	e8 ae e8 ff ff       	call   c0023092 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00247e4:	83 c4 20             	add    esp,0x20
c00247e7:	68 a0 00 00 00       	push   0xa0
c00247ec:	6a 07                	push   0x7
c00247ee:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247f5:	50                   	push   eax
c00247f6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247fc:	e8 91 e8 ff ff       	call   c0023092 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024801:	83 c4 0c             	add    esp,0xc
c0024804:	6a 01                	push   0x1
c0024806:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002480d:	50                   	push   eax
c002480e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024814:	e8 25 f4 ff ff       	call   c0023c3e <IDE::polling(unsigned char, unsigned int)>
c0024819:	83 c4 10             	add    esp,0x10
c002481c:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024822:	84 c0                	test   al,al
c0024824:	74 23                	je     c0024849 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0024826:	0f b6 d8             	movzx  ebx,al
c0024829:	0f b6 d2             	movzx  edx,dl
c002482c:	53                   	push   ebx
c002482d:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0024834:	50                   	push   eax
c0024835:	52                   	push   edx
c0024836:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002483c:	e8 67 f2 ff ff       	call   c0023aa8 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024841:	83 c4 10             	add    esp,0x10
c0024844:	e9 84 01 00 00       	jmp    c00249cd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024849:	0f b6 d2             	movzx  edx,dl
c002484c:	53                   	push   ebx
c002484d:	53                   	push   ebx
c002484e:	52                   	push   edx
c002484f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024855:	e8 26 e8 ff ff       	call   c0023080 <IDE::getBase(unsigned char)>
c002485a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002485e:	b9 06 00 00 00       	mov    ecx,0x6
c0024863:	89 c2                	mov    edx,eax
c0024865:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0024868:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002486c:	83 c4 10             	add    esp,0x10
c002486f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024875:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002487c:	85 db                	test   ebx,ebx
c002487e:	0f 84 ec 00 00 00    	je     c0024970 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0024884:	51                   	push   ecx
c0024885:	51                   	push   ecx
c0024886:	52                   	push   edx
c0024887:	50                   	push   eax
c0024888:	e8 73 e9 ff ff       	call   c0023200 <IDE::waitInterrupt(unsigned char)>
c002488d:	83 c4 10             	add    esp,0x10
c0024890:	84 c0                	test   al,al
c0024892:	0f 84 d4 fe ff ff    	je     c002476c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024898:	56                   	push   esi
c0024899:	56                   	push   esi
c002489a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248a1:	50                   	push   eax
c00248a2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248a8:	e8 bf e7 ff ff       	call   c002306c <IDE::prepareInterrupt(unsigned char)>
c00248ad:	83 c4 0c             	add    esp,0xc
c00248b0:	6a 04                	push   0x4
c00248b2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248b9:	50                   	push   eax
c00248ba:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248c0:	e8 8d e8 ff ff       	call   c0023152 <IDE::read(unsigned char, unsigned char)>
c00248c5:	83 c4 0c             	add    esp,0xc
c00248c8:	89 c6                	mov    esi,eax
c00248ca:	6a 05                	push   0x5
c00248cc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248d3:	50                   	push   eax
c00248d4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248da:	e8 73 e8 ff ff       	call   c0023152 <IDE::read(unsigned char, unsigned char)>
c00248df:	89 f1                	mov    ecx,esi
c00248e1:	0f b6 c0             	movzx  eax,al
c00248e4:	0f b6 f1             	movzx  esi,cl
c00248e7:	c1 e0 08             	shl    eax,0x8
c00248ea:	09 c6                	or     esi,eax
c00248ec:	d1 fe                	sar    esi,1
c00248ee:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00248f2:	83 c4 10             	add    esp,0x10
c00248f5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00248fa:	74 41                	je     c002493d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c00248fc:	31 c9                	xor    ecx,ecx
c00248fe:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024904:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002490b:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c002490f:	75 0a                	jne    c002491b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0024911:	01 c9                	add    ecx,ecx
c0024913:	01 cd                	add    ebp,ecx
c0024915:	4b                   	dec    ebx
c0024916:	e9 54 ff ff ff       	jmp    c002486f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c002491b:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0024920:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0024924:	51                   	push   ecx
c0024925:	51                   	push   ecx
c0024926:	52                   	push   edx
c0024927:	50                   	push   eax
c0024928:	e8 53 e7 ff ff       	call   c0023080 <IDE::getBase(unsigned char)>
c002492d:	89 c2                	mov    edx,eax
c002492f:	89 f0                	mov    eax,esi
c0024931:	66 ef                	out    dx,ax
c0024933:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024937:	83 c4 10             	add    esp,0x10
c002493a:	41                   	inc    ecx
c002493b:	eb c1                	jmp    c00248fe <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c002493d:	31 f6                	xor    esi,esi
c002493f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024945:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002494c:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0024950:	75 06                	jne    c0024958 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0024952:	01 f6                	add    esi,esi
c0024954:	01 f5                	add    ebp,esi
c0024956:	eb bd                	jmp    c0024915 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0024958:	51                   	push   ecx
c0024959:	51                   	push   ecx
c002495a:	52                   	push   edx
c002495b:	50                   	push   eax
c002495c:	e8 1f e7 ff ff       	call   c0023080 <IDE::getBase(unsigned char)>
c0024961:	89 c2                	mov    edx,eax
c0024963:	66 ed                	in     ax,dx
c0024965:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c002496a:	83 c4 10             	add    esp,0x10
c002496d:	46                   	inc    esi
c002496e:	eb cf                	jmp    c002493f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0024970:	51                   	push   ecx
c0024971:	51                   	push   ecx
c0024972:	52                   	push   edx
c0024973:	50                   	push   eax
c0024974:	e8 87 e8 ff ff       	call   c0023200 <IDE::waitInterrupt(unsigned char)>
c0024979:	83 c4 10             	add    esp,0x10
c002497c:	84 c0                	test   al,al
c002497e:	0f 84 e8 fd ff ff    	je     c002476c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024984:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024989:	52                   	push   edx
c002498a:	52                   	push   edx
c002498b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024992:	50                   	push   eax
c0024993:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024999:	e8 ce e6 ff ff       	call   c002306c <IDE::prepareInterrupt(unsigned char)>
c002499e:	83 c4 10             	add    esp,0x10
c00249a1:	50                   	push   eax
c00249a2:	50                   	push   eax
c00249a3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00249aa:	50                   	push   eax
c00249ab:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00249b1:	e8 ca e6 ff ff       	call   c0023080 <IDE::getBase(unsigned char)>
c00249b6:	8d 50 07             	lea    edx,[eax+0x7]
c00249b9:	ec                   	in     al,dx
c00249ba:	83 c4 10             	add    esp,0x10
c00249bd:	a8 88                	test   al,0x88
c00249bf:	74 0a                	je     c00249cb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c00249c1:	4b                   	dec    ebx
c00249c2:	75 dd                	jne    c00249a1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c00249c4:	bb 02 00 00 00       	mov    ebx,0x2
c00249c9:	eb 02                	jmp    c00249cd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00249cb:	31 db                	xor    ebx,ebx
c00249cd:	83 c4 1c             	add    esp,0x1c
c00249d0:	89 d8                	mov    eax,ebx
c00249d2:	5b                   	pop    ebx
c00249d3:	5e                   	pop    esi
c00249d4:	5f                   	pop    edi
c00249d5:	5d                   	pop    ebp
c00249d6:	c3                   	ret    
c00249d7:	90                   	nop

c00249d8 <ATAPI::diskRemoved()>:
c00249d8:	83 ec 18             	sub    esp,0x18
c00249db:	68 c5 cf 02 c0       	push   0xc002cfc5
c00249e0:	e8 05 e6 fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c00249e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00249e9:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c00249f0:	83 c4 1c             	add    esp,0x1c
c00249f3:	c3                   	ret    

c00249f4 <ATAPI::eject()>:
c00249f4:	57                   	push   edi
c00249f5:	b9 03 00 00 00       	mov    ecx,0x3
c00249fa:	53                   	push   ebx
c00249fb:	83 ec 14             	sub    esp,0x14
c00249fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024a02:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024a06:	fc                   	cld    
c0024a07:	31 c0                	xor    eax,eax
c0024a09:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024a0b:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024a10:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024a15:	50                   	push   eax
c0024a16:	50                   	push   eax
c0024a17:	6a 00                	push   0x0
c0024a19:	6a 00                	push   0x0
c0024a1b:	6a 00                	push   0x0
c0024a1d:	6a 02                	push   0x2
c0024a1f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024a23:	50                   	push   eax
c0024a24:	53                   	push   ebx
c0024a25:	e8 ee fc ff ff       	call   c0024718 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024a2a:	83 c4 14             	add    esp,0x14
c0024a2d:	53                   	push   ebx
c0024a2e:	e8 a5 ff ff ff       	call   c00249d8 <ATAPI::diskRemoved()>
c0024a33:	83 c4 24             	add    esp,0x24
c0024a36:	31 c0                	xor    eax,eax
c0024a38:	5b                   	pop    ebx
c0024a39:	5f                   	pop    edi
c0024a3a:	c3                   	ret    
c0024a3b:	90                   	nop

c0024a3c <ATAPI::diskInserted()>:
c0024a3c:	53                   	push   ebx
c0024a3d:	83 ec 14             	sub    esp,0x14
c0024a40:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024a44:	68 dc cf 02 c0       	push   0xc002cfdc
c0024a49:	e8 9c e5 fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0024a4e:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0024a55:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024a58:	e8 3f fe fe ff       	call   c001489c <PhysicalDisk::startCache()>
c0024a5d:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024a61:	83 c4 18             	add    esp,0x18
c0024a64:	5b                   	pop    ebx
c0024a65:	e9 a8 1f ff ff       	jmp    c0016a12 <createPartitionsForDisk(PhysicalDisk*)>

c0024a6a <ATAPI::detectMedia()>:
c0024a6a:	56                   	push   esi
c0024a6b:	53                   	push   ebx
c0024a6c:	83 ec 28             	sub    esp,0x28
c0024a6f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024a73:	6a 0c                	push   0xc
c0024a75:	6a 00                	push   0x0
c0024a77:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024a7b:	56                   	push   esi
c0024a7c:	e8 f7 bc fd ff       	call   c0000778 <memset>
c0024a81:	58                   	pop    eax
c0024a82:	5a                   	pop    edx
c0024a83:	6a 00                	push   0x0
c0024a85:	6a 00                	push   0x0
c0024a87:	6a 00                	push   0x0
c0024a89:	6a 00                	push   0x0
c0024a8b:	56                   	push   esi
c0024a8c:	53                   	push   ebx
c0024a8d:	e8 86 fc ff ff       	call   c0024718 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024a92:	83 c4 1c             	add    esp,0x1c
c0024a95:	6a 0c                	push   0xc
c0024a97:	6a 00                	push   0x0
c0024a99:	56                   	push   esi
c0024a9a:	e8 d9 bc fd ff       	call   c0000778 <memset>
c0024a9f:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024aa4:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024aa9:	59                   	pop    ecx
c0024aaa:	58                   	pop    eax
c0024aab:	6a 01                	push   0x1
c0024aad:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0024ab1:	50                   	push   eax
c0024ab2:	6a 00                	push   0x0
c0024ab4:	6a 12                	push   0x12
c0024ab6:	56                   	push   esi
c0024ab7:	53                   	push   ebx
c0024ab8:	e8 5b fc ff ff       	call   c0024718 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024abd:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024ac1:	83 c4 20             	add    esp,0x20
c0024ac4:	83 e0 7f             	and    eax,0x7f
c0024ac7:	3c 70                	cmp    al,0x70
c0024ac9:	74 15                	je     c0024ae0 <ATAPI::detectMedia()+0x76>
c0024acb:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024ad2:	75 0c                	jne    c0024ae0 <ATAPI::detectMedia()+0x76>
c0024ad4:	83 ec 0c             	sub    esp,0xc
c0024ad7:	53                   	push   ebx
c0024ad8:	e8 5f ff ff ff       	call   c0024a3c <ATAPI::diskInserted()>
c0024add:	83 c4 10             	add    esp,0x10
c0024ae0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024ae4:	83 e0 0f             	and    eax,0xf
c0024ae7:	3c 02                	cmp    al,0x2
c0024ae9:	75 1b                	jne    c0024b06 <ATAPI::detectMedia()+0x9c>
c0024aeb:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024af0:	75 2d                	jne    c0024b1f <ATAPI::detectMedia()+0xb5>
c0024af2:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024af9:	74 24                	je     c0024b1f <ATAPI::detectMedia()+0xb5>
c0024afb:	83 ec 0c             	sub    esp,0xc
c0024afe:	53                   	push   ebx
c0024aff:	e8 d4 fe ff ff       	call   c00249d8 <ATAPI::diskRemoved()>
c0024b04:	eb 16                	jmp    c0024b1c <ATAPI::detectMedia()+0xb2>
c0024b06:	84 c0                	test   al,al
c0024b08:	75 15                	jne    c0024b1f <ATAPI::detectMedia()+0xb5>
c0024b0a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024b11:	75 0c                	jne    c0024b1f <ATAPI::detectMedia()+0xb5>
c0024b13:	83 ec 0c             	sub    esp,0xc
c0024b16:	53                   	push   ebx
c0024b17:	e8 20 ff ff ff       	call   c0024a3c <ATAPI::diskInserted()>
c0024b1c:	83 c4 10             	add    esp,0x10
c0024b1f:	83 c4 24             	add    esp,0x24
c0024b22:	5b                   	pop    ebx
c0024b23:	5e                   	pop    esi
c0024b24:	c3                   	ret    
c0024b25:	90                   	nop

c0024b26 <ATAPI::open(int, int, void*)>:
c0024b26:	53                   	push   ebx
c0024b27:	83 ec 08             	sub    esp,0x8
c0024b2a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024b2e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024b32:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024b36:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024b3c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024b42:	c1 e0 06             	shl    eax,0x6
c0024b45:	01 d0                	add    eax,edx
c0024b47:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024b4e:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024b54:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024b5b:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024b65:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024b6b:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024b72:	6a 04                	push   0x4
c0024b74:	6a 0c                	push   0xc
c0024b76:	51                   	push   ecx
c0024b77:	52                   	push   edx
c0024b78:	e8 15 e5 ff ff       	call   c0023092 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b7d:	90                   	nop
c0024b7e:	90                   	nop
c0024b7f:	6a 00                	push   0x0
c0024b81:	6a 0c                	push   0xc
c0024b83:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b8a:	50                   	push   eax
c0024b8b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b91:	e8 fc e4 ff ff       	call   c0023092 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b96:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024b9d:	83 c4 14             	add    esp,0x14
c0024ba0:	53                   	push   ebx
c0024ba1:	e8 c4 fe ff ff       	call   c0024a6a <ATAPI::detectMedia()>
c0024ba6:	31 c0                	xor    eax,eax
c0024ba8:	83 c4 18             	add    esp,0x18
c0024bab:	5b                   	pop    ebx
c0024bac:	c3                   	ret    
c0024bad:	90                   	nop

c0024bae <ATAPI::read(unsigned long long, int, void*)>:
c0024bae:	55                   	push   ebp
c0024baf:	57                   	push   edi
c0024bb0:	56                   	push   esi
c0024bb1:	53                   	push   ebx
c0024bb2:	83 ec 1c             	sub    esp,0x1c
c0024bb5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024bb9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024bbd:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024bc1:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024bc8:	74 41                	je     c0024c0b <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024bca:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024bce:	b9 03 00 00 00       	mov    ecx,0x3
c0024bd3:	fc                   	cld    
c0024bd4:	31 c0                	xor    eax,eax
c0024bd6:	86 fb                	xchg   bl,bh
c0024bd8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024bda:	c1 c3 10             	rol    ebx,0x10
c0024bdd:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024be2:	89 e8                	mov    eax,ebp
c0024be4:	86 fb                	xchg   bl,bh
c0024be6:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024bea:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024bee:	50                   	push   eax
c0024bef:	50                   	push   eax
c0024bf0:	55                   	push   ebp
c0024bf1:	c1 e5 0b             	shl    ebp,0xb
c0024bf4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024bf8:	6a 00                	push   0x0
c0024bfa:	55                   	push   ebp
c0024bfb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024bff:	50                   	push   eax
c0024c00:	56                   	push   esi
c0024c01:	e8 12 fb ff ff       	call   c0024718 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024c06:	83 c4 20             	add    esp,0x20
c0024c09:	eb 1a                	jmp    c0024c25 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024c0b:	83 ec 0c             	sub    esp,0xc
c0024c0e:	56                   	push   esi
c0024c0f:	e8 56 fe ff ff       	call   c0024a6a <ATAPI::detectMedia()>
c0024c14:	83 c4 10             	add    esp,0x10
c0024c17:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024c1e:	75 aa                	jne    c0024bca <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024c20:	b8 02 00 00 00       	mov    eax,0x2
c0024c25:	83 c4 1c             	add    esp,0x1c
c0024c28:	5b                   	pop    ebx
c0024c29:	5e                   	pop    esi
c0024c2a:	5f                   	pop    edi
c0024c2b:	5d                   	pop    ebp
c0024c2c:	c3                   	ret    
c0024c2d:	90                   	nop

c0024c2e <SATA::close(int, int, void*)>:
c0024c2e:	83 ec 0c             	sub    esp,0xc
c0024c31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c35:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024c3b:	85 c0                	test   eax,eax
c0024c3d:	74 0c                	je     c0024c4b <SATA::close(int, int, void*)+0x1d>
c0024c3f:	83 ec 0c             	sub    esp,0xc
c0024c42:	8b 10                	mov    edx,DWORD PTR [eax]
c0024c44:	50                   	push   eax
c0024c45:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024c48:	83 c4 10             	add    esp,0x10
c0024c4b:	31 c0                	xor    eax,eax
c0024c4d:	83 c4 0c             	add    esp,0xc
c0024c50:	c3                   	ret    
c0024c51:	90                   	nop

c0024c52 <SATA::powerSaving(PowerSavingLevel)>:
c0024c52:	c3                   	ret    
c0024c53:	90                   	nop

c0024c54 <SATA::open(int, int, void*)>:
c0024c54:	56                   	push   esi
c0024c55:	53                   	push   ebx
c0024c56:	50                   	push   eax
c0024c57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024c5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024c5f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024c69:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024c6f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024c79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024c7d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024c87:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024c8d:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024c94:	e8 47 b2 fe ff       	call   c000fee0 <Phys::allocatePage()>
c0024c99:	89 c6                	mov    esi,eax
c0024c9b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024ca1:	81 c6 00 10 00 00    	add    esi,0x1000
c0024ca7:	e8 34 b2 fe ff       	call   c000fee0 <Phys::allocatePage()>
c0024cac:	39 c6                	cmp    esi,eax
c0024cae:	74 10                	je     c0024cc0 <SATA::open(int, int, void*)+0x6c>
c0024cb0:	83 ec 0c             	sub    esp,0xc
c0024cb3:	68 04 cf 02 c0       	push   0xc002cf04
c0024cb8:	e8 d2 59 ff ff       	call   c001a68f <Krnl::panic(char const*)>
c0024cbd:	83 c4 10             	add    esp,0x10
c0024cc0:	83 ec 0c             	sub    esp,0xc
c0024cc3:	6a 02                	push   0x2
c0024cc5:	e8 21 d0 fe ff       	call   c0011ceb <Virt::allocateKernelVirtualPages(int)>
c0024cca:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024cd0:	e8 54 d2 fe ff       	call   c0011f29 <Virt::getAKernelVAS()>
c0024cd5:	6a 03                	push   0x3
c0024cd7:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024cdd:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024ce3:	50                   	push   eax
c0024ce4:	e8 91 d7 fe ff       	call   c001247a <VAS::mapPage(unsigned long, unsigned long, int)>
c0024ce9:	83 c4 14             	add    esp,0x14
c0024cec:	53                   	push   ebx
c0024ced:	e8 aa fb fe ff       	call   c001489c <PhysicalDisk::startCache()>
c0024cf2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024cf5:	e8 18 1d ff ff       	call   c0016a12 <createPartitionsForDisk(PhysicalDisk*)>
c0024cfa:	83 c4 14             	add    esp,0x14
c0024cfd:	31 c0                	xor    eax,eax
c0024cff:	5b                   	pop    ebx
c0024d00:	5e                   	pop    esi
c0024d01:	c3                   	ret    

c0024d02 <SATA::SATA()>:
c0024d02:	83 ec 0c             	sub    esp,0xc
c0024d05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d09:	83 ec 04             	sub    esp,0x4
c0024d0c:	68 00 02 00 00       	push   0x200
c0024d11:	68 18 cf 02 c0       	push   0xc002cf18
c0024d16:	50                   	push   eax
c0024d17:	e8 18 fb fe ff       	call   c0014834 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024d1c:	83 c4 10             	add    esp,0x10
c0024d1f:	ba 88 cf 02 c0       	mov    edx,0xc002cf88
c0024d24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d28:	89 10                	mov    DWORD PTR [eax],edx
c0024d2a:	90                   	nop
c0024d2b:	83 c4 0c             	add    esp,0xc
c0024d2e:	c3                   	ret    
c0024d2f:	90                   	nop

c0024d30 <SATA::access(unsigned long long, int, void*, bool)>:
c0024d30:	55                   	push   ebp
c0024d31:	57                   	push   edi
c0024d32:	56                   	push   esi
c0024d33:	53                   	push   ebx
c0024d34:	83 ec 2c             	sub    esp,0x2c
c0024d37:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024d3b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0024d3f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024d43:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0024d47:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024d4b:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024d50:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024d54:	7e 10                	jle    c0024d66 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024d56:	83 ec 0c             	sub    esp,0xc
c0024d59:	68 28 cf 02 c0       	push   0xc002cf28
c0024d5e:	e8 2c 59 ff ff       	call   c001a68f <Krnl::panic(char const*)>
c0024d63:	83 c4 10             	add    esp,0x10
c0024d66:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c0024d6c:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024d72:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024d78:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024d7c:	89 f0                	mov    eax,esi
c0024d7e:	c1 e0 07             	shl    eax,0x7
c0024d81:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024d85:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024d8f:	53                   	push   ebx
c0024d90:	8d 46 02             	lea    eax,[esi+0x2]
c0024d93:	53                   	push   ebx
c0024d94:	c1 e0 07             	shl    eax,0x7
c0024d97:	bb 01 00 00 00       	mov    ebx,0x1
c0024d9c:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0024da0:	50                   	push   eax
c0024da1:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024da7:	e8 aa ef ff ff       	call   c0023d56 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024dac:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0024db0:	83 c4 10             	add    esp,0x10
c0024db3:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0024db8:	0f 84 ce 01 00 00    	je     c0024f8c <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024dbe:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024dc2:	c1 e0 09             	shl    eax,0x9
c0024dc5:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024dca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024dce:	74 17                	je     c0024de7 <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c0024dd0:	51                   	push   ecx
c0024dd1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024dd5:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0024dd9:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024ddf:	e8 60 b9 fd ff       	call   c0000744 <memcpy>
c0024de4:	83 c4 10             	add    esp,0x10
c0024de7:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024ded:	8d 46 02             	lea    eax,[esi+0x2]
c0024df0:	c1 e0 07             	shl    eax,0x7
c0024df3:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024df7:	8b 00                	mov    eax,DWORD PTR [eax]
c0024df9:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024dff:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024e05:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024e09:	c1 e1 05             	shl    ecx,0x5
c0024e0c:	01 c8                	add    eax,ecx
c0024e0e:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024e12:	8a 18                	mov    bl,BYTE PTR [eax]
c0024e14:	83 e1 01             	and    ecx,0x1
c0024e17:	83 e3 bf             	and    ebx,0xffffffbf
c0024e1a:	c1 e1 06             	shl    ecx,0x6
c0024e1d:	09 d9                	or     ecx,ebx
c0024e1f:	88 08                	mov    BYTE PTR [eax],cl
c0024e21:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024e23:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024e29:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024e2f:	89 08                	mov    DWORD PTR [eax],ecx
c0024e31:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024e37:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024e3d:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024e43:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024e46:	52                   	push   edx
c0024e47:	68 90 00 00 00       	push   0x90
c0024e4c:	6a 00                	push   0x0
c0024e4e:	53                   	push   ebx
c0024e4f:	e8 24 b9 fd ff       	call   c0000778 <memset>
c0024e54:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c0024e5a:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c0024e5e:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024e64:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024e68:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024e6c:	83 c4 10             	add    esp,0x10
c0024e6f:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024e72:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024e78:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024e7e:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024e83:	09 c8                	or     eax,ecx
c0024e85:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024e8b:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024e8e:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024e95:	66 25 00 7f          	and    ax,0x7f00
c0024e99:	66 0d 27 80          	or     ax,0x8027
c0024e9d:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c0024ea2:	66 89 03             	mov    WORD PTR [ebx],ax
c0024ea5:	19 c0                	sbb    eax,eax
c0024ea7:	83 e0 f0             	and    eax,0xfffffff0
c0024eaa:	83 c0 35             	add    eax,0x35
c0024ead:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0024eb0:	89 f8                	mov    eax,edi
c0024eb2:	c1 e8 10             	shr    eax,0x10
c0024eb5:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024eb8:	89 f8                	mov    eax,edi
c0024eba:	c1 e8 18             	shr    eax,0x18
c0024ebd:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0024ec0:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024ec4:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024ec7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024ecb:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024ece:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024ed2:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024ed6:	89 f3                	mov    ebx,esi
c0024ed8:	31 c0                	xor    eax,eax
c0024eda:	c1 e3 07             	shl    ebx,0x7
c0024edd:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0024ee1:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0024ee7:	80 e1 88             	and    cl,0x88
c0024eea:	74 0a                	je     c0024ef6 <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c0024eec:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024ef1:	74 0a                	je     c0024efd <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c0024ef3:	40                   	inc    eax
c0024ef4:	eb eb                	jmp    c0024ee1 <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c0024ef6:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024efb:	75 0a                	jne    c0024f07 <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c0024efd:	83 ec 0c             	sub    esp,0xc
c0024f00:	68 61 cf 02 c0       	push   0xc002cf61
c0024f05:	eb 56                	jmp    c0024f5d <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c0024f07:	b8 01 00 00 00       	mov    eax,0x1
c0024f0c:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c0024f10:	c1 e6 07             	shl    esi,0x7
c0024f13:	d3 e0                	shl    eax,cl
c0024f15:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0024f19:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0024f1f:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c0024f25:	85 c8                	test   eax,ecx
c0024f27:	74 20                	je     c0024f49 <SATA::access(unsigned long long, int, void*, bool)+0x219>
c0024f29:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c0024f2f:	0f ba e1 1e          	bt     ecx,0x1e
c0024f33:	73 ea                	jae    c0024f1f <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c0024f35:	83 ec 0c             	sub    esp,0xc
c0024f38:	31 db                	xor    ebx,ebx
c0024f3a:	68 6f cf 02 c0       	push   0xc002cf6f
c0024f3f:	e8 4b 57 ff ff       	call   c001a68f <Krnl::panic(char const*)>
c0024f44:	83 c4 10             	add    esp,0x10
c0024f47:	eb 43                	jmp    c0024f8c <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024f49:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c0024f4f:	0f ba e0 1e          	bt     eax,0x1e
c0024f53:	73 17                	jae    c0024f6c <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0024f55:	83 ec 0c             	sub    esp,0xc
c0024f58:	68 6f cf 02 c0       	push   0xc002cf6f
c0024f5d:	e8 2d 57 ff ff       	call   c001a68f <Krnl::panic(char const*)>
c0024f62:	bb 01 00 00 00       	mov    ebx,0x1
c0024f67:	83 c4 10             	add    esp,0x10
c0024f6a:	eb 20                	jmp    c0024f8c <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024f6c:	31 db                	xor    ebx,ebx
c0024f6e:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024f73:	75 17                	jne    c0024f8c <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024f75:	50                   	push   eax
c0024f76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024f7a:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024f80:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0024f84:	e8 bb b7 fd ff       	call   c0000744 <memcpy>
c0024f89:	83 c4 10             	add    esp,0x10
c0024f8c:	83 c4 2c             	add    esp,0x2c
c0024f8f:	89 d8                	mov    eax,ebx
c0024f91:	5b                   	pop    ebx
c0024f92:	5e                   	pop    esi
c0024f93:	5f                   	pop    edi
c0024f94:	5d                   	pop    ebp
c0024f95:	c3                   	ret    

c0024f96 <SATA::read(unsigned long long, int, void*)>:
c0024f96:	57                   	push   edi
c0024f97:	b8 04 00 00 00       	mov    eax,0x4
c0024f9c:	56                   	push   esi
c0024f9d:	53                   	push   ebx
c0024f9e:	83 ec 10             	sub    esp,0x10
c0024fa1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024fa5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024fa9:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024fac:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024fb0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024fb4:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024fba:	77 3b                	ja     c0024ff7 <SATA::read(unsigned long long, int, void*)+0x61>
c0024fbc:	b8 06 00 00 00       	mov    eax,0x6
c0024fc1:	85 d2                	test   edx,edx
c0024fc3:	74 32                	je     c0024ff7 <SATA::read(unsigned long long, int, void*)+0x61>
c0024fc5:	50                   	push   eax
c0024fc6:	50                   	push   eax
c0024fc7:	6a 00                	push   0x0
c0024fc9:	52                   	push   edx
c0024fca:	53                   	push   ebx
c0024fcb:	57                   	push   edi
c0024fcc:	56                   	push   esi
c0024fcd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024fd1:	e8 5a fd ff ff       	call   c0024d30 <SATA::access(unsigned long long, int, void*, bool)>
c0024fd6:	83 c4 20             	add    esp,0x20
c0024fd9:	85 c0                	test   eax,eax
c0024fdb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024fdf:	75 11                	jne    c0024ff2 <SATA::read(unsigned long long, int, void*)+0x5c>
c0024fe1:	01 1d 28 28 03 c0    	add    DWORD PTR ds:0xc0032828,ebx
c0024fe7:	e8 e4 b9 fe ff       	call   c00109d0 <VgaText::updateDiskUsage()>
c0024fec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024ff0:	eb 05                	jmp    c0024ff7 <SATA::read(unsigned long long, int, void*)+0x61>
c0024ff2:	b8 01 00 00 00       	mov    eax,0x1
c0024ff7:	83 c4 10             	add    esp,0x10
c0024ffa:	5b                   	pop    ebx
c0024ffb:	5e                   	pop    esi
c0024ffc:	5f                   	pop    edi
c0024ffd:	c3                   	ret    

c0024ffe <SATA::write(unsigned long long, int, void*)>:
c0024ffe:	55                   	push   ebp
c0024fff:	b8 04 00 00 00       	mov    eax,0x4
c0025004:	57                   	push   edi
c0025005:	56                   	push   esi
c0025006:	53                   	push   ebx
c0025007:	83 ec 1c             	sub    esp,0x1c
c002500a:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002500e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0025012:	8d 75 ff             	lea    esi,[ebp-0x1]
c0025015:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0025019:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c002501d:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0025023:	77 56                	ja     c002507b <SATA::write(unsigned long long, int, void*)+0x7d>
c0025025:	b8 06 00 00 00       	mov    eax,0x6
c002502a:	85 ff                	test   edi,edi
c002502c:	74 4d                	je     c002507b <SATA::write(unsigned long long, int, void*)+0x7d>
c002502e:	89 ee                	mov    esi,ebp
c0025030:	c1 e6 09             	shl    esi,0x9
c0025033:	01 fe                	add    esi,edi
c0025035:	89 c8                	mov    eax,ecx
c0025037:	89 da                	mov    edx,ebx
c0025039:	83 c0 01             	add    eax,0x1
c002503c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025040:	83 d2 00             	adc    edx,0x0
c0025043:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0025047:	50                   	push   eax
c0025048:	50                   	push   eax
c0025049:	6a 01                	push   0x1
c002504b:	57                   	push   edi
c002504c:	81 c7 00 02 00 00    	add    edi,0x200
c0025052:	6a 01                	push   0x1
c0025054:	53                   	push   ebx
c0025055:	51                   	push   ecx
c0025056:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002505a:	e8 d1 fc ff ff       	call   c0024d30 <SATA::access(unsigned long long, int, void*, bool)>
c002505f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0025063:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0025067:	83 c4 20             	add    esp,0x20
c002506a:	39 f7                	cmp    edi,esi
c002506c:	75 c7                	jne    c0025035 <SATA::write(unsigned long long, int, void*)+0x37>
c002506e:	01 2d 24 28 03 c0    	add    DWORD PTR ds:0xc0032824,ebp
c0025074:	e8 57 b9 fe ff       	call   c00109d0 <VgaText::updateDiskUsage()>
c0025079:	31 c0                	xor    eax,eax
c002507b:	83 c4 1c             	add    esp,0x1c
c002507e:	5b                   	pop    ebx
c002507f:	5e                   	pop    esi
c0025080:	5f                   	pop    edi
c0025081:	5d                   	pop    ebp
c0025082:	c3                   	ret    
c0025083:	90                   	nop

c0025084 <SATAPI::write(unsigned long long, int, void*)>:
c0025084:	b8 03 00 00 00       	mov    eax,0x3
c0025089:	c3                   	ret    

c002508a <SATAPI::close(int, int, void*)>:
c002508a:	83 ec 0c             	sub    esp,0xc
c002508d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025091:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025097:	85 c0                	test   eax,eax
c0025099:	74 0c                	je     c00250a7 <SATAPI::close(int, int, void*)+0x1d>
c002509b:	83 ec 0c             	sub    esp,0xc
c002509e:	8b 10                	mov    edx,DWORD PTR [eax]
c00250a0:	50                   	push   eax
c00250a1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00250a4:	83 c4 10             	add    esp,0x10
c00250a7:	31 c0                	xor    eax,eax
c00250a9:	83 c4 0c             	add    esp,0xc
c00250ac:	c3                   	ret    
c00250ad:	90                   	nop

c00250ae <SATAPI::SATAPI()>:
c00250ae:	83 ec 0c             	sub    esp,0xc
c00250b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250b5:	83 ec 04             	sub    esp,0x4
c00250b8:	68 00 08 00 00       	push   0x800
c00250bd:	68 b8 cf 02 c0       	push   0xc002cfb8
c00250c2:	50                   	push   eax
c00250c3:	e8 6c f7 fe ff       	call   c0014834 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00250c8:	83 c4 10             	add    esp,0x10
c00250cb:	ba 64 d0 02 c0       	mov    edx,0xc002d064
c00250d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250d4:	89 10                	mov    DWORD PTR [eax],edx
c00250d6:	90                   	nop
c00250d7:	83 c4 0c             	add    esp,0xc
c00250da:	c3                   	ret    
c00250db:	90                   	nop

c00250dc <SATAPI::diskRemoved()>:
c00250dc:	83 ec 18             	sub    esp,0x18
c00250df:	68 c4 cf 02 c0       	push   0xc002cfc4
c00250e4:	e8 01 df fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c00250e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00250ed:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c00250f4:	83 c4 1c             	add    esp,0x1c
c00250f7:	c3                   	ret    

c00250f8 <SATAPI::diskInserted()>:
c00250f8:	53                   	push   ebx
c00250f9:	83 ec 14             	sub    esp,0x14
c00250fc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025100:	68 db cf 02 c0       	push   0xc002cfdb
c0025105:	e8 e0 de fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c002510a:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0025111:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025114:	e8 83 f7 fe ff       	call   c001489c <PhysicalDisk::startCache()>
c0025119:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002511d:	83 c4 18             	add    esp,0x18
c0025120:	5b                   	pop    ebx
c0025121:	e9 ec 18 ff ff       	jmp    c0016a12 <createPartitionsForDisk(PhysicalDisk*)>

c0025126 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0025126:	55                   	push   ebp
c0025127:	57                   	push   edi
c0025128:	56                   	push   esi
c0025129:	53                   	push   ebx
c002512a:	83 ec 24             	sub    esp,0x24
c002512d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025131:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025135:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c002513b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002513f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0025143:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c0025149:	8d 5f 02             	lea    ebx,[edi+0x2]
c002514c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025152:	c1 e3 07             	shl    ebx,0x7
c0025155:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025159:	89 f8                	mov    eax,edi
c002515b:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c002515f:	c1 e0 07             	shl    eax,0x7
c0025162:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025166:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002516a:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025174:	53                   	push   ebx
c0025175:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c002517b:	e8 d6 eb ff ff       	call   c0023d56 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025180:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025184:	83 c4 10             	add    esp,0x10
c0025187:	b8 01 00 00 00       	mov    eax,0x1
c002518c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0025191:	0f 84 8a 01 00 00    	je     c0025321 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0025197:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c002519d:	8b 03                	mov    eax,DWORD PTR [ebx]
c002519f:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00251a5:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00251ab:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00251af:	c1 e1 05             	shl    ecx,0x5
c00251b2:	01 c8                	add    eax,ecx
c00251b4:	8b 08                	mov    ecx,DWORD PTR [eax]
c00251b6:	81 e1 80 ff 00 00    	and    ecx,0xff80
c00251bc:	81 c9 25 00 01 00    	or     ecx,0x10025
c00251c2:	89 08                	mov    DWORD PTR [eax],ecx
c00251c4:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c00251ca:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c00251d0:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c00251d6:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c00251d9:	52                   	push   edx
c00251da:	68 90 00 00 00       	push   0x90
c00251df:	6a 00                	push   0x0
c00251e1:	53                   	push   ebx
c00251e2:	e8 91 b5 fd ff       	call   c0000778 <memset>
c00251e7:	83 c4 0c             	add    esp,0xc
c00251ea:	8d 43 40             	lea    eax,[ebx+0x40]
c00251ed:	6a 0c                	push   0xc
c00251ef:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00251f3:	50                   	push   eax
c00251f4:	e8 4b b5 fd ff       	call   c0000744 <memcpy>
c00251f9:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c00251ff:	89 ea                	mov    edx,ebp
c0025201:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0025207:	c1 ea 18             	shr    edx,0x18
c002520a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002520e:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0025211:	8d 48 ff             	lea    ecx,[eax-0x1]
c0025214:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0025218:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c002521e:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0025224:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025229:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c002522d:	09 c8                	or     eax,ecx
c002522f:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0025233:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0025239:	66 8b 03             	mov    ax,WORD PTR [ebx]
c002523c:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0025243:	66 25 00 7f          	and    ax,0x7f00
c0025247:	66 0d 27 80          	or     ax,0x8027
c002524b:	66 89 03             	mov    WORD PTR [ebx],ax
c002524e:	89 e8                	mov    eax,ebp
c0025250:	c1 e8 10             	shr    eax,0x10
c0025253:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0025256:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c002525a:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c002525d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025261:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0025264:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025268:	83 c4 10             	add    esp,0x10
c002526b:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c002526f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025273:	31 c0                	xor    eax,eax
c0025275:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c002527b:	80 e1 88             	and    cl,0x88
c002527e:	74 0a                	je     c002528a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c0025280:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025285:	74 0a                	je     c0025291 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0025287:	40                   	inc    eax
c0025288:	eb eb                	jmp    c0025275 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c002528a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002528f:	75 0f                	jne    c00252a0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c0025291:	83 ec 0c             	sub    esp,0xc
c0025294:	68 61 cf 02 c0       	push   0xc002cf61
c0025299:	e8 f1 53 ff ff       	call   c001a68f <Krnl::panic(char const*)>
c002529e:	eb 3a                	jmp    c00252da <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c00252a0:	b8 01 00 00 00       	mov    eax,0x1
c00252a5:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00252a9:	c1 e7 07             	shl    edi,0x7
c00252ac:	d3 e0                	shl    eax,cl
c00252ae:	03 3c 24             	add    edi,DWORD PTR [esp]
c00252b1:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c00252b7:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c00252bd:	85 d0                	test   eax,edx
c00252bf:	74 23                	je     c00252e4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c00252c1:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c00252c7:	0f ba e2 1e          	bt     edx,0x1e
c00252cb:	73 ea                	jae    c00252b7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c00252cd:	83 ec 0c             	sub    esp,0xc
c00252d0:	68 f3 cf 02 c0       	push   0xc002cff3
c00252d5:	e8 10 dd fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c00252da:	83 c4 10             	add    esp,0x10
c00252dd:	b8 01 00 00 00       	mov    eax,0x1
c00252e2:	eb 3d                	jmp    c0025321 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c00252e4:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c00252ea:	0f ba e0 1e          	bt     eax,0x1e
c00252ee:	73 0a                	jae    c00252fa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c00252f0:	83 ec 0c             	sub    esp,0xc
c00252f3:	68 06 d0 02 c0       	push   0xc002d006
c00252f8:	eb db                	jmp    c00252d5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c00252fa:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00252ff:	74 1e                	je     c002531f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0025301:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0025306:	74 17                	je     c002531f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0025308:	50                   	push   eax
c0025309:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002530d:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c0025313:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0025317:	e8 28 b4 fd ff       	call   c0000744 <memcpy>
c002531c:	83 c4 10             	add    esp,0x10
c002531f:	31 c0                	xor    eax,eax
c0025321:	83 c4 1c             	add    esp,0x1c
c0025324:	5b                   	pop    ebx
c0025325:	5e                   	pop    esi
c0025326:	5f                   	pop    edi
c0025327:	5d                   	pop    ebp
c0025328:	c3                   	ret    
c0025329:	90                   	nop

c002532a <SATAPI::eject()>:
c002532a:	57                   	push   edi
c002532b:	b9 03 00 00 00       	mov    ecx,0x3
c0025330:	53                   	push   ebx
c0025331:	83 ec 14             	sub    esp,0x14
c0025334:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025338:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002533c:	fc                   	cld    
c002533d:	31 c0                	xor    eax,eax
c002533f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025341:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025346:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002534b:	50                   	push   eax
c002534c:	6a 00                	push   0x0
c002534e:	6a 00                	push   0x0
c0025350:	6a 00                	push   0x0
c0025352:	6a 00                	push   0x0
c0025354:	6a 02                	push   0x2
c0025356:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002535a:	50                   	push   eax
c002535b:	53                   	push   ebx
c002535c:	e8 c5 fd ff ff       	call   c0025126 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025361:	83 c4 14             	add    esp,0x14
c0025364:	53                   	push   ebx
c0025365:	e8 72 fd ff ff       	call   c00250dc <SATAPI::diskRemoved()>
c002536a:	83 c4 24             	add    esp,0x24
c002536d:	31 c0                	xor    eax,eax
c002536f:	5b                   	pop    ebx
c0025370:	5f                   	pop    edi
c0025371:	c3                   	ret    

c0025372 <SATAPI::detectMedia()>:
c0025372:	56                   	push   esi
c0025373:	53                   	push   ebx
c0025374:	83 ec 28             	sub    esp,0x28
c0025377:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002537b:	6a 0c                	push   0xc
c002537d:	6a 00                	push   0x0
c002537f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025383:	56                   	push   esi
c0025384:	e8 ef b3 fd ff       	call   c0000778 <memset>
c0025389:	83 c4 0c             	add    esp,0xc
c002538c:	6a 00                	push   0x0
c002538e:	6a 00                	push   0x0
c0025390:	6a 00                	push   0x0
c0025392:	6a 00                	push   0x0
c0025394:	6a 00                	push   0x0
c0025396:	56                   	push   esi
c0025397:	53                   	push   ebx
c0025398:	e8 89 fd ff ff       	call   c0025126 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002539d:	83 c4 1c             	add    esp,0x1c
c00253a0:	6a 0c                	push   0xc
c00253a2:	6a 00                	push   0x0
c00253a4:	56                   	push   esi
c00253a5:	e8 ce b3 fd ff       	call   c0000778 <memset>
c00253aa:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00253af:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00253b4:	83 c4 0c             	add    esp,0xc
c00253b7:	6a 01                	push   0x1
c00253b9:	8d 44 24 16          	lea    eax,[esp+0x16]
c00253bd:	50                   	push   eax
c00253be:	6a 00                	push   0x0
c00253c0:	6a 00                	push   0x0
c00253c2:	6a 12                	push   0x12
c00253c4:	56                   	push   esi
c00253c5:	53                   	push   ebx
c00253c6:	e8 5b fd ff ff       	call   c0025126 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00253cb:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00253cf:	83 c4 20             	add    esp,0x20
c00253d2:	83 e0 7f             	and    eax,0x7f
c00253d5:	3c 70                	cmp    al,0x70
c00253d7:	74 15                	je     c00253ee <SATAPI::detectMedia()+0x7c>
c00253d9:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00253e0:	75 0c                	jne    c00253ee <SATAPI::detectMedia()+0x7c>
c00253e2:	83 ec 0c             	sub    esp,0xc
c00253e5:	53                   	push   ebx
c00253e6:	e8 0d fd ff ff       	call   c00250f8 <SATAPI::diskInserted()>
c00253eb:	83 c4 10             	add    esp,0x10
c00253ee:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00253f2:	83 e0 0f             	and    eax,0xf
c00253f5:	3c 02                	cmp    al,0x2
c00253f7:	75 1b                	jne    c0025414 <SATAPI::detectMedia()+0xa2>
c00253f9:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00253fe:	75 2d                	jne    c002542d <SATAPI::detectMedia()+0xbb>
c0025400:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025407:	74 24                	je     c002542d <SATAPI::detectMedia()+0xbb>
c0025409:	83 ec 0c             	sub    esp,0xc
c002540c:	53                   	push   ebx
c002540d:	e8 ca fc ff ff       	call   c00250dc <SATAPI::diskRemoved()>
c0025412:	eb 16                	jmp    c002542a <SATAPI::detectMedia()+0xb8>
c0025414:	84 c0                	test   al,al
c0025416:	75 15                	jne    c002542d <SATAPI::detectMedia()+0xbb>
c0025418:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002541f:	75 0c                	jne    c002542d <SATAPI::detectMedia()+0xbb>
c0025421:	83 ec 0c             	sub    esp,0xc
c0025424:	53                   	push   ebx
c0025425:	e8 ce fc ff ff       	call   c00250f8 <SATAPI::diskInserted()>
c002542a:	83 c4 10             	add    esp,0x10
c002542d:	83 c4 24             	add    esp,0x24
c0025430:	5b                   	pop    ebx
c0025431:	5e                   	pop    esi
c0025432:	c3                   	ret    
c0025433:	90                   	nop

c0025434 <SATAPI::open(int, int, void*)>:
c0025434:	56                   	push   esi
c0025435:	53                   	push   ebx
c0025436:	50                   	push   eax
c0025437:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002543b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002543f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025449:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002544f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025459:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002545d:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025467:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002546d:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025474:	e8 67 aa fe ff       	call   c000fee0 <Phys::allocatePage()>
c0025479:	89 c6                	mov    esi,eax
c002547b:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025481:	81 c6 00 10 00 00    	add    esi,0x1000
c0025487:	e8 54 aa fe ff       	call   c000fee0 <Phys::allocatePage()>
c002548c:	39 c6                	cmp    esi,eax
c002548e:	74 10                	je     c00254a0 <SATAPI::open(int, int, void*)+0x6c>
c0025490:	83 ec 0c             	sub    esp,0xc
c0025493:	68 1b d0 02 c0       	push   0xc002d01b
c0025498:	e8 f2 51 ff ff       	call   c001a68f <Krnl::panic(char const*)>
c002549d:	83 c4 10             	add    esp,0x10
c00254a0:	83 ec 0c             	sub    esp,0xc
c00254a3:	6a 02                	push   0x2
c00254a5:	e8 41 c8 fe ff       	call   c0011ceb <Virt::allocateKernelVirtualPages(int)>
c00254aa:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c00254b0:	e8 74 ca fe ff       	call   c0011f29 <Virt::getAKernelVAS()>
c00254b5:	6a 03                	push   0x3
c00254b7:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c00254bd:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c00254c3:	50                   	push   eax
c00254c4:	e8 b1 cf fe ff       	call   c001247a <VAS::mapPage(unsigned long, unsigned long, int)>
c00254c9:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c00254d0:	83 c4 14             	add    esp,0x14
c00254d3:	53                   	push   ebx
c00254d4:	e8 99 fe ff ff       	call   c0025372 <SATAPI::detectMedia()>
c00254d9:	83 c4 14             	add    esp,0x14
c00254dc:	31 c0                	xor    eax,eax
c00254de:	5b                   	pop    ebx
c00254df:	5e                   	pop    esi
c00254e0:	c3                   	ret    
c00254e1:	90                   	nop

c00254e2 <SATAPI::read(unsigned long long, int, void*)>:
c00254e2:	55                   	push   ebp
c00254e3:	57                   	push   edi
c00254e4:	56                   	push   esi
c00254e5:	53                   	push   ebx
c00254e6:	83 ec 1c             	sub    esp,0x1c
c00254e9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00254ed:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00254f1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00254f5:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00254fc:	74 19                	je     c0025517 <SATAPI::read(unsigned long long, int, void*)+0x35>
c00254fe:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025503:	7e 2e                	jle    c0025533 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025505:	83 ec 0c             	sub    esp,0xc
c0025508:	68 31 d0 02 c0       	push   0xc002d031
c002550d:	e8 7d 51 ff ff       	call   c001a68f <Krnl::panic(char const*)>
c0025512:	83 c4 10             	add    esp,0x10
c0025515:	eb 1c                	jmp    c0025533 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025517:	83 ec 0c             	sub    esp,0xc
c002551a:	55                   	push   ebp
c002551b:	e8 52 fe ff ff       	call   c0025372 <SATAPI::detectMedia()>
c0025520:	83 c4 10             	add    esp,0x10
c0025523:	b8 02 00 00 00       	mov    eax,0x2
c0025528:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c002552f:	75 cd                	jne    c00254fe <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025531:	eb 49                	jmp    c002557c <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025533:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025537:	b9 03 00 00 00       	mov    ecx,0x3
c002553c:	fc                   	cld    
c002553d:	31 c0                	xor    eax,eax
c002553f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025541:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025546:	89 d8                	mov    eax,ebx
c0025548:	86 e0                	xchg   al,ah
c002554a:	c1 c0 10             	rol    eax,0x10
c002554d:	86 e0                	xchg   al,ah
c002554f:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025553:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025557:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002555b:	50                   	push   eax
c002555c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025560:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025564:	56                   	push   esi
c0025565:	53                   	push   ebx
c0025566:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002556a:	c1 e0 0b             	shl    eax,0xb
c002556d:	50                   	push   eax
c002556e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025572:	50                   	push   eax
c0025573:	55                   	push   ebp
c0025574:	e8 ad fb ff ff       	call   c0025126 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025579:	83 c4 20             	add    esp,0x20
c002557c:	83 c4 1c             	add    esp,0x1c
c002557f:	5b                   	pop    ebx
c0025580:	5e                   	pop    esi
c0025581:	5f                   	pop    edi
c0025582:	5d                   	pop    ebp
c0025583:	c3                   	ret    

c0025584 <AVX::open(int, int, void*)>:
c0025584:	83 ec 0c             	sub    esp,0xc
c0025587:	e8 3c 11 00 00       	call   c00266c8 <avxInit>
c002558c:	b8 00 00 00 00       	mov    eax,0x0
c0025591:	83 c4 0c             	add    esp,0xc
c0025594:	c3                   	ret    
c0025595:	90                   	nop

c0025596 <AVX::close(int, int, void*)>:
c0025596:	83 ec 0c             	sub    esp,0xc
c0025599:	e8 2b 11 00 00       	call   c00266c9 <avxClose>
c002559e:	b8 00 00 00 00       	mov    eax,0x0
c00255a3:	83 c4 0c             	add    esp,0xc
c00255a6:	c3                   	ret    
c00255a7:	90                   	nop

c00255a8 <AVX::available()>:
c00255a8:	83 ec 0c             	sub    esp,0xc
c00255ab:	e8 10 11 00 00       	call   c00266c0 <avxDetect>
c00255b0:	85 c0                	test   eax,eax
c00255b2:	0f 95 c0             	setne  al
c00255b5:	83 c4 0c             	add    esp,0xc
c00255b8:	c3                   	ret    
c00255b9:	90                   	nop

c00255ba <AVX::save(void*)>:
c00255ba:	83 ec 0c             	sub    esp,0xc
c00255bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00255c1:	83 ec 0c             	sub    esp,0xc
c00255c4:	50                   	push   eax
c00255c5:	e8 fc 10 00 00       	call   c00266c6 <avxSave>
c00255ca:	83 c4 10             	add    esp,0x10
c00255cd:	90                   	nop
c00255ce:	83 c4 0c             	add    esp,0xc
c00255d1:	c3                   	ret    

c00255d2 <AVX::load(void*)>:
c00255d2:	83 ec 0c             	sub    esp,0xc
c00255d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00255d9:	83 ec 0c             	sub    esp,0xc
c00255dc:	50                   	push   eax
c00255dd:	e8 e5 10 00 00       	call   c00266c7 <avxLoad>
c00255e2:	83 c4 10             	add    esp,0x10
c00255e5:	90                   	nop
c00255e6:	83 c4 0c             	add    esp,0xc
c00255e9:	c3                   	ret    

c00255ea <AVX::AVX()>:
c00255ea:	83 ec 0c             	sub    esp,0xc
c00255ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255f1:	83 ec 08             	sub    esp,0x8
c00255f4:	68 94 d0 02 c0       	push   0xc002d094
c00255f9:	50                   	push   eax
c00255fa:	e8 13 f3 fe ff       	call   c0014912 <FPU::FPU(char const*)>
c00255ff:	83 c4 10             	add    esp,0x10
c0025602:	ba a4 d0 02 c0       	mov    edx,0xc002d0a4
c0025607:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002560b:	89 10                	mov    DWORD PTR [eax],edx
c002560d:	90                   	nop
c002560e:	83 c4 0c             	add    esp,0xc
c0025611:	c3                   	ret    

c0025612 <MMX::available()>:
c0025612:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0025617:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002561d:	83 e0 20             	and    eax,0x20
c0025620:	84 c0                	test   al,al
c0025622:	0f 95 c0             	setne  al
c0025625:	c3                   	ret    

c0025626 <MMX::open(int, int, void*)>:
c0025626:	83 ec 0c             	sub    esp,0xc
c0025629:	e8 1e 11 00 00       	call   c002674c <x87Init>
c002562e:	b8 00 00 00 00       	mov    eax,0x0
c0025633:	83 c4 0c             	add    esp,0xc
c0025636:	c3                   	ret    
c0025637:	90                   	nop

c0025638 <MMX::close(int, int, void*)>:
c0025638:	83 ec 0c             	sub    esp,0xc
c002563b:	e8 26 11 00 00       	call   c0026766 <x87Close>
c0025640:	b8 00 00 00 00       	mov    eax,0x0
c0025645:	83 c4 0c             	add    esp,0xc
c0025648:	c3                   	ret    
c0025649:	90                   	nop

c002564a <MMX::save(void*)>:
c002564a:	83 ec 0c             	sub    esp,0xc
c002564d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025651:	83 ec 0c             	sub    esp,0xc
c0025654:	50                   	push   eax
c0025655:	e8 e7 10 00 00       	call   c0026741 <x87Save>
c002565a:	83 c4 10             	add    esp,0x10
c002565d:	90                   	nop
c002565e:	83 c4 0c             	add    esp,0xc
c0025661:	c3                   	ret    

c0025662 <MMX::load(void*)>:
c0025662:	83 ec 0c             	sub    esp,0xc
c0025665:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025669:	83 ec 0c             	sub    esp,0xc
c002566c:	50                   	push   eax
c002566d:	e8 d5 10 00 00       	call   c0026747 <x87Load>
c0025672:	83 c4 10             	add    esp,0x10
c0025675:	90                   	nop
c0025676:	83 c4 0c             	add    esp,0xc
c0025679:	c3                   	ret    

c002567a <MMX::MMX()>:
c002567a:	83 ec 0c             	sub    esp,0xc
c002567d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025681:	83 ec 08             	sub    esp,0x8
c0025684:	68 d4 d0 02 c0       	push   0xc002d0d4
c0025689:	50                   	push   eax
c002568a:	e8 83 f2 fe ff       	call   c0014912 <FPU::FPU(char const*)>
c002568f:	83 c4 10             	add    esp,0x10
c0025692:	ba e4 d0 02 c0       	mov    edx,0xc002d0e4
c0025697:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002569b:	89 10                	mov    DWORD PTR [eax],edx
c002569d:	90                   	nop
c002569e:	83 c4 0c             	add    esp,0xc
c00256a1:	c3                   	ret    

c00256a2 <SSE::open(int, int, void*)>:
c00256a2:	83 ec 0c             	sub    esp,0xc
c00256a5:	e8 5a 10 00 00       	call   c0026704 <sseInit>
c00256aa:	b8 00 00 00 00       	mov    eax,0x0
c00256af:	83 c4 0c             	add    esp,0xc
c00256b2:	c3                   	ret    
c00256b3:	90                   	nop

c00256b4 <SSE::close(int, int, void*)>:
c00256b4:	83 ec 0c             	sub    esp,0xc
c00256b7:	e8 58 10 00 00       	call   c0026714 <sseClose>
c00256bc:	b8 00 00 00 00       	mov    eax,0x0
c00256c1:	83 c4 0c             	add    esp,0xc
c00256c4:	c3                   	ret    
c00256c5:	90                   	nop

c00256c6 <SSE::available()>:
c00256c6:	83 ec 1c             	sub    esp,0x1c
c00256c9:	e8 12 10 00 00       	call   c00266e0 <absolutelyNoChanceInHell>
c00256ce:	85 c0                	test   eax,eax
c00256d0:	0f 95 c0             	setne  al
c00256d3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00256d7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00256db:	83 c4 1c             	add    esp,0x1c
c00256de:	c3                   	ret    
c00256df:	90                   	nop

c00256e0 <SSE::save(void*)>:
c00256e0:	83 ec 0c             	sub    esp,0xc
c00256e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00256e7:	83 ec 0c             	sub    esp,0xc
c00256ea:	50                   	push   eax
c00256eb:	e8 08 10 00 00       	call   c00266f8 <sseSave>
c00256f0:	83 c4 10             	add    esp,0x10
c00256f3:	90                   	nop
c00256f4:	83 c4 0c             	add    esp,0xc
c00256f7:	c3                   	ret    

c00256f8 <SSE::load(void*)>:
c00256f8:	83 ec 0c             	sub    esp,0xc
c00256fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00256ff:	83 ec 0c             	sub    esp,0xc
c0025702:	50                   	push   eax
c0025703:	e8 f6 0f 00 00       	call   c00266fe <sseLoad>
c0025708:	83 c4 10             	add    esp,0x10
c002570b:	90                   	nop
c002570c:	83 c4 0c             	add    esp,0xc
c002570f:	c3                   	ret    

c0025710 <SSE::SSE()>:
c0025710:	83 ec 0c             	sub    esp,0xc
c0025713:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025717:	83 ec 08             	sub    esp,0x8
c002571a:	68 14 d1 02 c0       	push   0xc002d114
c002571f:	50                   	push   eax
c0025720:	e8 ed f1 fe ff       	call   c0014912 <FPU::FPU(char const*)>
c0025725:	83 c4 10             	add    esp,0x10
c0025728:	ba 24 d1 02 c0       	mov    edx,0xc002d124
c002572d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025731:	89 10                	mov    DWORD PTR [eax],edx
c0025733:	90                   	nop
c0025734:	83 c4 0c             	add    esp,0xc
c0025737:	c3                   	ret    

c0025738 <x87::open(int, int, void*)>:
c0025738:	83 ec 0c             	sub    esp,0xc
c002573b:	e8 0c 10 00 00       	call   c002674c <x87Init>
c0025740:	b8 00 00 00 00       	mov    eax,0x0
c0025745:	83 c4 0c             	add    esp,0xc
c0025748:	c3                   	ret    
c0025749:	90                   	nop

c002574a <x87::close(int, int, void*)>:
c002574a:	83 ec 0c             	sub    esp,0xc
c002574d:	e8 14 10 00 00       	call   c0026766 <x87Close>
c0025752:	b8 00 00 00 00       	mov    eax,0x0
c0025757:	83 c4 0c             	add    esp,0xc
c002575a:	c3                   	ret    
c002575b:	90                   	nop

c002575c <x87::available()>:
c002575c:	83 ec 0c             	sub    esp,0xc
c002575f:	e8 c2 0f 00 00       	call   c0026726 <x87Detect>
c0025764:	85 c0                	test   eax,eax
c0025766:	0f 95 c0             	setne  al
c0025769:	83 c4 0c             	add    esp,0xc
c002576c:	c3                   	ret    
c002576d:	90                   	nop

c002576e <x87::save(void*)>:
c002576e:	83 ec 0c             	sub    esp,0xc
c0025771:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025775:	83 ec 0c             	sub    esp,0xc
c0025778:	50                   	push   eax
c0025779:	e8 c3 0f 00 00       	call   c0026741 <x87Save>
c002577e:	83 c4 10             	add    esp,0x10
c0025781:	90                   	nop
c0025782:	83 c4 0c             	add    esp,0xc
c0025785:	c3                   	ret    

c0025786 <x87::load(void*)>:
c0025786:	83 ec 0c             	sub    esp,0xc
c0025789:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002578d:	83 ec 0c             	sub    esp,0xc
c0025790:	50                   	push   eax
c0025791:	e8 b1 0f 00 00       	call   c0026747 <x87Load>
c0025796:	83 c4 10             	add    esp,0x10
c0025799:	90                   	nop
c002579a:	83 c4 0c             	add    esp,0xc
c002579d:	c3                   	ret    

c002579e <x87::x87()>:
c002579e:	83 ec 0c             	sub    esp,0xc
c00257a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257a5:	83 ec 08             	sub    esp,0x8
c00257a8:	68 54 d1 02 c0       	push   0xc002d154
c00257ad:	50                   	push   eax
c00257ae:	e8 5f f1 fe ff       	call   c0014912 <FPU::FPU(char const*)>
c00257b3:	83 c4 10             	add    esp,0x10
c00257b6:	ba 64 d1 02 c0       	mov    edx,0xc002d164
c00257bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257bf:	89 10                	mov    DWORD PTR [eax],edx
c00257c1:	90                   	nop
c00257c2:	83 c4 0c             	add    esp,0xc
c00257c5:	c3                   	ret    

c00257c6 <APIC::disable()>:
c00257c6:	90                   	nop
c00257c7:	c3                   	ret    

c00257c8 <APIC::close(int, int, void*)>:
c00257c8:	55                   	push   ebp
c00257c9:	89 e5                	mov    ebp,esp
c00257cb:	83 ec 08             	sub    esp,0x8
c00257ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00257d3:	83 c0 3c             	add    eax,0x3c
c00257d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00257d8:	83 ec 0c             	sub    esp,0xc
c00257db:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00257de:	ff d0                	call   eax
c00257e0:	83 c4 10             	add    esp,0x10
c00257e3:	b8 00 00 00 00       	mov    eax,0x0
c00257e8:	c9                   	leave  
c00257e9:	c3                   	ret    

c00257ea <IOAPIC::close(int, int, void*)>:
c00257ea:	b8 00 00 00 00       	mov    eax,0x0
c00257ef:	c3                   	ret    

c00257f0 <APIC::io_wait()>:
c00257f0:	eb 00                	jmp    c00257f2 <APIC::io_wait()+0x2>
c00257f2:	eb 00                	jmp    c00257f4 <APIC::io_wait()+0x4>
c00257f4:	90                   	nop
c00257f5:	c3                   	ret    

c00257f6 <APIC::getBase()>:
c00257f6:	55                   	push   ebp
c00257f7:	89 e5                	mov    ebp,esp
c00257f9:	83 ec 18             	sub    esp,0x18
c00257fc:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0025801:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025807:	83 e0 08             	and    eax,0x8
c002580a:	84 c0                	test   al,al
c002580c:	75 07                	jne    c0025815 <APIC::getBase()+0x1f>
c002580e:	b8 00 00 00 00       	mov    eax,0x0
c0025813:	eb 21                	jmp    c0025836 <APIC::getBase()+0x40>
c0025815:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c002581a:	83 ec 08             	sub    esp,0x8
c002581d:	6a 1b                	push   0x1b
c002581f:	50                   	push   eax
c0025820:	e8 c3 95 fe ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0025825:	83 c4 10             	add    esp,0x10
c0025828:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002582b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002582e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025831:	25 00 f0 ff ff       	and    eax,0xfffff000
c0025836:	c9                   	leave  
c0025837:	c3                   	ret    

c0025838 <APIC::eoi(unsigned char)>:
c0025838:	55                   	push   ebp
c0025839:	89 e5                	mov    ebp,esp
c002583b:	83 ec 28             	sub    esp,0x28
c002583e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025841:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025844:	83 ec 0c             	sub    esp,0xc
c0025847:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002584a:	e8 a7 ff ff ff       	call   c00257f6 <APIC::getBase()>
c002584f:	83 c4 10             	add    esp,0x10
c0025852:	05 b0 00 00 00       	add    eax,0xb0
c0025857:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002585a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002585d:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0025863:	90                   	nop
c0025864:	c9                   	leave  
c0025865:	c3                   	ret    

c0025866 <APIC::open(int, int, void*)>:
c0025866:	55                   	push   ebp
c0025867:	89 e5                	mov    ebp,esp
c0025869:	57                   	push   edi
c002586a:	56                   	push   esi
c002586b:	53                   	push   ebx
c002586c:	83 ec 2c             	sub    esp,0x2c
c002586f:	83 ec 0c             	sub    esp,0xc
c0025872:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025875:	e8 7c ff ff ff       	call   c00257f6 <APIC::getBase()>
c002587a:	83 c4 10             	add    esp,0x10
c002587d:	89 c2                	mov    edx,eax
c002587f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025882:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025888:	0f b6 f8             	movzx  edi,al
c002588b:	89 d0                	mov    eax,edx
c002588d:	ba 00 00 00 00       	mov    edx,0x0
c0025892:	89 c1                	mov    ecx,eax
c0025894:	80 e5 ff             	and    ch,0xff
c0025897:	89 cb                	mov    ebx,ecx
c0025899:	0f b6 f2             	movzx  esi,dl
c002589c:	89 d8                	mov    eax,ebx
c002589e:	89 f2                	mov    edx,esi
c00258a0:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00258a3:	8d 5f 08             	lea    ebx,[edi+0x8]
c00258a6:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00258aa:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00258ae:	83 e0 00             	and    eax,0x0
c00258b1:	09 d0                	or     eax,edx
c00258b3:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00258b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258ba:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00258c0:	8d 50 01             	lea    edx,[eax+0x1]
c00258c3:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00258c6:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00258cc:	0f b6 d0             	movzx  edx,al
c00258cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258d2:	83 c2 08             	add    edx,0x8
c00258d5:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00258d9:	0f b6 c9             	movzx  ecx,cl
c00258dc:	81 c9 00 00 01 00    	or     ecx,0x10000
c00258e2:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00258e6:	83 ec 0c             	sub    esp,0xc
c00258e9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258ec:	e8 05 ff ff ff       	call   c00257f6 <APIC::getBase()>
c00258f1:	83 c4 10             	add    esp,0x10
c00258f4:	05 f0 00 00 00       	add    eax,0xf0
c00258f9:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00258fc:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00258ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0025901:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025904:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c002590b:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0025912:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025915:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025918:	89 10                	mov    DWORD PTR [eax],edx
c002591a:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0025921:	a1 b0 0d 03 c0       	mov    eax,ds:0xc0030db0
c0025926:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0025929:	7d 7c                	jge    c00259a7 <APIC::open(int, int, void*)+0x141>
c002592b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002592e:	8b 04 85 c0 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf240]
c0025935:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0025938:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002593b:	8b 04 85 c0 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf240]
c0025942:	c1 e8 08             	shr    eax,0x8
c0025945:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0025949:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002594c:	8b 04 85 c0 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf240]
c0025953:	c1 e8 18             	shr    eax,0x18
c0025956:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0025959:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c002595d:	75 40                	jne    c002599f <APIC::open(int, int, void*)+0x139>
c002595f:	83 ec 0c             	sub    esp,0xc
c0025962:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025965:	e8 8c fe ff ff       	call   c00257f6 <APIC::getBase()>
c002596a:	83 c4 10             	add    esp,0x10
c002596d:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0025971:	75 07                	jne    c002597a <APIC::open(int, int, void*)+0x114>
c0025973:	ba 60 03 00 00       	mov    edx,0x360
c0025978:	eb 05                	jmp    c002597f <APIC::open(int, int, void*)+0x119>
c002597a:	ba 50 03 00 00       	mov    edx,0x350
c002597f:	01 d0                	add    eax,edx
c0025981:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025984:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025987:	8b 00                	mov    eax,DWORD PTR [eax]
c0025989:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002598c:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0025993:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0025997:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002599a:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002599d:	89 10                	mov    DWORD PTR [eax],edx
c002599f:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00259a2:	e9 7a ff ff ff       	jmp    c0025921 <APIC::open(int, int, void*)+0xbb>
c00259a7:	b8 00 00 00 00       	mov    eax,0x0
c00259ac:	8d 65 f4             	lea    esp,[ebp-0xc]
c00259af:	5b                   	pop    ebx
c00259b0:	5e                   	pop    esi
c00259b1:	5f                   	pop    edi
c00259b2:	5d                   	pop    ebp
c00259b3:	c3                   	ret    

c00259b4 <IOAPIC::IOAPIC()>:
c00259b4:	83 ec 0c             	sub    esp,0xc
c00259b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259bb:	83 ec 08             	sub    esp,0x8
c00259be:	68 94 d1 02 c0       	push   0xc002d194
c00259c3:	50                   	push   eax
c00259c4:	e8 37 ec fe ff       	call   c0014600 <Device::Device(char const*)>
c00259c9:	83 c4 10             	add    esp,0x10
c00259cc:	ba bc d2 02 c0       	mov    edx,0xc002d2bc
c00259d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259d5:	89 10                	mov    DWORD PTR [eax],edx
c00259d7:	90                   	nop
c00259d8:	83 c4 0c             	add    esp,0xc
c00259db:	c3                   	ret    

c00259dc <APIC::APIC()>:
c00259dc:	53                   	push   ebx
c00259dd:	83 ec 18             	sub    esp,0x18
c00259e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00259e4:	83 ec 08             	sub    esp,0x8
c00259e7:	68 9c d1 02 c0       	push   0xc002d19c
c00259ec:	50                   	push   eax
c00259ed:	e8 7a f3 fe ff       	call   c0014d6c <InterruptController::InterruptController(char const*)>
c00259f2:	83 c4 10             	add    esp,0x10
c00259f5:	ba 74 d2 02 c0       	mov    edx,0xc002d274
c00259fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00259fe:	89 10                	mov    DWORD PTR [eax],edx
c0025a00:	a0 80 28 03 c0       	mov    al,ds:0xc0032880
c0025a05:	83 f0 01             	xor    eax,0x1
c0025a08:	84 c0                	test   al,al
c0025a0a:	0f 84 a1 00 00 00    	je     c0025ab1 <APIC::APIC()+0xd5>
c0025a10:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0025a15:	a0 60 0e 03 c0       	mov    al,ds:0xc0030e60
c0025a1a:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0025a1e:	0f 83 86 00 00 00    	jae    c0025aaa <APIC::APIC()+0xce>
c0025a24:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0025a2c:	83 ec 0c             	sub    esp,0xc
c0025a2f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025a33:	e8 0b 9e fe ff       	call   c000f843 <malloc>
c0025a38:	83 c4 10             	add    esp,0x10
c0025a3b:	89 c3                	mov    ebx,eax
c0025a3d:	83 ec 0c             	sub    esp,0xc
c0025a40:	53                   	push   ebx
c0025a41:	e8 6e ff ff ff       	call   c00259b4 <IOAPIC::IOAPIC()>
c0025a46:	83 c4 10             	add    esp,0x10
c0025a49:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0025a4d:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0025a52:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025a56:	89 14 85 60 28 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd7a0],edx
c0025a5d:	a1 40 28 03 c0       	mov    eax,ds:0xc0032840
c0025a62:	40                   	inc    eax
c0025a63:	a3 40 28 03 c0       	mov    ds:0xc0032840,eax
c0025a68:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0025a6d:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025a73:	83 ec 08             	sub    esp,0x8
c0025a76:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025a7a:	50                   	push   eax
c0025a7b:	e8 90 e9 fe ff       	call   c0014410 <Device::addChild(Device*)>
c0025a80:	83 c4 10             	add    esp,0x10
c0025a83:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025a87:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a89:	83 c0 08             	add    eax,0x8
c0025a8c:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a8e:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025a93:	6a 00                	push   0x0
c0025a95:	6a 00                	push   0x0
c0025a97:	52                   	push   edx
c0025a98:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0025a9c:	ff d0                	call   eax
c0025a9e:	83 c4 10             	add    esp,0x10
c0025aa1:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025aa5:	e9 6b ff ff ff       	jmp    c0025a15 <APIC::APIC()+0x39>
c0025aaa:	c6 05 80 28 03 c0 01 	mov    BYTE PTR ds:0xc0032880,0x1
c0025ab1:	90                   	nop
c0025ab2:	83 c4 18             	add    esp,0x18
c0025ab5:	5b                   	pop    ebx
c0025ab6:	c3                   	ret    
c0025ab7:	90                   	nop

c0025ab8 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025ab8:	55                   	push   ebp
c0025ab9:	89 e5                	mov    ebp,esp
c0025abb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025abe:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025ac4:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025ac7:	72 1d                	jb     c0025ae6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025ac9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025acc:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025ad2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ad5:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025adb:	01 d0                	add    eax,edx
c0025add:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025ae0:	73 04                	jae    c0025ae6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025ae2:	b0 01                	mov    al,0x1
c0025ae4:	eb 02                	jmp    c0025ae8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025ae6:	b0 00                	mov    al,0x0
c0025ae8:	5d                   	pop    ebp
c0025ae9:	c3                   	ret    

c0025aea <IOAPIC::read(int)>:
c0025aea:	55                   	push   ebp
c0025aeb:	89 e5                	mov    ebp,esp
c0025aed:	83 ec 10             	sub    esp,0x10
c0025af0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025af3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025af9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025afc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025aff:	0f b6 d0             	movzx  edx,al
c0025b02:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025b05:	89 10                	mov    DWORD PTR [eax],edx
c0025b07:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025b0a:	83 c0 10             	add    eax,0x10
c0025b0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0025b0f:	c9                   	leave  
c0025b10:	c3                   	ret    
c0025b11:	90                   	nop

c0025b12 <IOAPIC::open(int, int, void*)>:
c0025b12:	55                   	push   ebp
c0025b13:	89 e5                	mov    ebp,esp
c0025b15:	57                   	push   edi
c0025b16:	56                   	push   esi
c0025b17:	53                   	push   ebx
c0025b18:	83 ec 0c             	sub    esp,0xc
c0025b1b:	83 ec 0c             	sub    esp,0xc
c0025b1e:	68 c7 d1 02 c0       	push   0xc002d1c7
c0025b23:	e8 c2 d4 fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0025b28:	83 c4 10             	add    esp,0x10
c0025b2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b2e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025b31:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025b37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b3a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025b40:	8b 14 85 a0 0e 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf160]
c0025b47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b4a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025b50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b53:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025b59:	8b 14 85 20 0f 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf0e0]
c0025b60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b63:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025b69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b6c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025b72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b75:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025b7b:	0f b6 f8             	movzx  edi,al
c0025b7e:	89 d0                	mov    eax,edx
c0025b80:	ba 00 00 00 00       	mov    edx,0x0
c0025b85:	89 c1                	mov    ecx,eax
c0025b87:	80 e5 ff             	and    ch,0xff
c0025b8a:	89 cb                	mov    ebx,ecx
c0025b8c:	0f b6 f2             	movzx  esi,dl
c0025b8f:	89 d8                	mov    eax,ebx
c0025b91:	89 f2                	mov    edx,esi
c0025b93:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025b96:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025b99:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025b9d:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025ba1:	83 e0 00             	and    eax,0x0
c0025ba4:	09 d0                	or     eax,edx
c0025ba6:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025baa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bad:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025bb3:	8d 50 01             	lea    edx,[eax+0x1]
c0025bb6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025bb9:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025bbf:	0f b6 d0             	movzx  edx,al
c0025bc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bc5:	83 c2 08             	add    edx,0x8
c0025bc8:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025bcc:	0f b6 c9             	movzx  ecx,cl
c0025bcf:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025bd5:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025bd9:	83 ec 08             	sub    esp,0x8
c0025bdc:	6a 01                	push   0x1
c0025bde:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025be1:	e8 04 ff ff ff       	call   c0025aea <IOAPIC::read(int)>
c0025be6:	83 c4 10             	add    esp,0x10
c0025be9:	c1 f8 10             	sar    eax,0x10
c0025bec:	0f b6 c0             	movzx  eax,al
c0025bef:	8d 50 01             	lea    edx,[eax+0x1]
c0025bf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bf5:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025bfb:	b8 00 00 00 00       	mov    eax,0x0
c0025c00:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025c03:	5b                   	pop    ebx
c0025c04:	5e                   	pop    esi
c0025c05:	5f                   	pop    edi
c0025c06:	5d                   	pop    ebp
c0025c07:	c3                   	ret    

c0025c08 <IOAPIC::write(int, int)>:
c0025c08:	55                   	push   ebp
c0025c09:	89 e5                	mov    ebp,esp
c0025c0b:	83 ec 10             	sub    esp,0x10
c0025c0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c11:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025c17:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025c1a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c1d:	0f b6 d0             	movzx  edx,al
c0025c20:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025c23:	89 10                	mov    DWORD PTR [eax],edx
c0025c25:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025c28:	8d 50 10             	lea    edx,[eax+0x10]
c0025c2b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025c2e:	89 02                	mov    DWORD PTR [edx],eax
c0025c30:	90                   	nop
c0025c31:	c9                   	leave  
c0025c32:	c3                   	ret    
c0025c33:	90                   	nop

c0025c34 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025c34:	55                   	push   ebp
c0025c35:	89 e5                	mov    ebp,esp
c0025c37:	53                   	push   ebx
c0025c38:	83 ec 2c             	sub    esp,0x2c
c0025c3b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c3e:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025c41:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025c44:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025c47:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025c4a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025c4d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025c50:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025c53:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025c56:	88 d8                	mov    al,bl
c0025c58:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025c5b:	88 c8                	mov    al,cl
c0025c5d:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025c60:	88 d0                	mov    al,dl
c0025c62:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025c65:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025c69:	83 c0 08             	add    eax,0x8
c0025c6c:	01 c0                	add    eax,eax
c0025c6e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025c71:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025c75:	83 c0 08             	add    eax,0x8
c0025c78:	01 c0                	add    eax,eax
c0025c7a:	40                   	inc    eax
c0025c7b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025c7e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025c81:	50                   	push   eax
c0025c82:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c85:	e8 60 fe ff ff       	call   c0025aea <IOAPIC::read(int)>
c0025c8a:	83 c4 08             	add    esp,0x8
c0025c8d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025c90:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025c97:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025c9a:	c1 e0 18             	shl    eax,0x18
c0025c9d:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025ca0:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025ca3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025ca6:	52                   	push   edx
c0025ca7:	50                   	push   eax
c0025ca8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025cab:	e8 58 ff ff ff       	call   c0025c08 <IOAPIC::write(int, int)>
c0025cb0:	83 c4 0c             	add    esp,0xc
c0025cb3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025cb6:	50                   	push   eax
c0025cb7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025cba:	e8 2b fe ff ff       	call   c0025aea <IOAPIC::read(int)>
c0025cbf:	83 c4 08             	add    esp,0x8
c0025cc2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025cc5:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025ccc:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025cd3:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025cda:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025cde:	74 09                	je     c0025ce9 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025ce0:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025ce7:	eb 07                	jmp    c0025cf0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025ce9:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025cf0:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025cf4:	74 09                	je     c0025cff <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025cf6:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025cfd:	eb 07                	jmp    c0025d06 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025cff:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025d06:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025d0d:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025d11:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025d14:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025d17:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025d1a:	52                   	push   edx
c0025d1b:	50                   	push   eax
c0025d1c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d1f:	e8 e4 fe ff ff       	call   c0025c08 <IOAPIC::write(int, int)>
c0025d24:	83 c4 0c             	add    esp,0xc
c0025d27:	90                   	nop
c0025d28:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025d2b:	c9                   	leave  
c0025d2c:	c3                   	ret    
c0025d2d:	90                   	nop

c0025d2e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025d2e:	55                   	push   ebp
c0025d2f:	89 e5                	mov    ebp,esp
c0025d31:	57                   	push   edi
c0025d32:	56                   	push   esi
c0025d33:	53                   	push   ebx
c0025d34:	83 ec 2c             	sub    esp,0x2c
c0025d37:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025d3a:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025d3d:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025d41:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025d45:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025d49:	74 5a                	je     c0025da5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025d4b:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025d4f:	7f 44                	jg     c0025d95 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025d51:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d54:	05 20 d7 02 c0       	add    eax,0xc002d720
c0025d59:	8a 00                	mov    al,BYTE PTR [eax]
c0025d5b:	0f b6 c0             	movzx  eax,al
c0025d5e:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025d61:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d64:	66 8b 84 00 40 0e 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf1c0]
c0025d6c:	0f b7 c0             	movzx  eax,ax
c0025d6f:	83 e0 02             	and    eax,0x2
c0025d72:	85 c0                	test   eax,eax
c0025d74:	74 04                	je     c0025d7a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025d76:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025d7a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d7d:	66 8b 84 00 40 0e 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf1c0]
c0025d85:	0f b7 c0             	movzx  eax,ax
c0025d88:	83 e0 08             	and    eax,0x8
c0025d8b:	85 c0                	test   eax,eax
c0025d8d:	74 16                	je     c0025da5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025d8f:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025d93:	eb 10                	jmp    c0025da5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025d95:	83 ec 0c             	sub    esp,0xc
c0025d98:	68 d8 d1 02 c0       	push   0xc002d1d8
c0025d9d:	e8 ed 48 ff ff       	call   c001a68f <Krnl::panic(char const*)>
c0025da2:	83 c4 10             	add    esp,0x10
c0025da5:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025da9:	a1 40 28 03 c0       	mov    eax,ds:0xc0032840
c0025dae:	83 ec 08             	sub    esp,0x8
c0025db1:	50                   	push   eax
c0025db2:	68 10 d2 02 c0       	push   0xc002d210
c0025db7:	e8 2e d2 fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0025dbc:	83 c4 10             	add    esp,0x10
c0025dbf:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025dc6:	a1 40 28 03 c0       	mov    eax,ds:0xc0032840
c0025dcb:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025dce:	7d 67                	jge    c0025e37 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025dd0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025dd3:	8b 04 85 60 28 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd7a0]
c0025dda:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025ddd:	83 ec 08             	sub    esp,0x8
c0025de0:	52                   	push   edx
c0025de1:	50                   	push   eax
c0025de2:	e8 d1 fc ff ff       	call   c0025ab8 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025de7:	83 c4 10             	add    esp,0x10
c0025dea:	84 c0                	test   al,al
c0025dec:	74 44                	je     c0025e32 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025dee:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025df1:	8b 1c 85 60 28 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcd7a0]
c0025df8:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025dfc:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025dff:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025e03:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e06:	83 c0 20             	add    eax,0x20
c0025e09:	0f b6 f0             	movzx  esi,al
c0025e0c:	b8 00 00 00 00       	mov    eax,0x0
c0025e11:	99                   	cdq    
c0025e12:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025e15:	0f b6 c9             	movzx  ecx,cl
c0025e18:	83 ec 04             	sub    esp,0x4
c0025e1b:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025e1e:	57                   	push   edi
c0025e1f:	56                   	push   esi
c0025e20:	52                   	push   edx
c0025e21:	50                   	push   eax
c0025e22:	51                   	push   ecx
c0025e23:	53                   	push   ebx
c0025e24:	e8 0b fe ff ff       	call   c0025c34 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025e29:	83 c4 20             	add    esp,0x20
c0025e2c:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025e30:	eb 05                	jmp    c0025e37 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025e32:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025e35:	eb 8f                	jmp    c0025dc6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025e37:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025e3a:	83 f0 01             	xor    eax,0x1
c0025e3d:	84 c0                	test   al,al
c0025e3f:	74 10                	je     c0025e51 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025e41:	83 ec 0c             	sub    esp,0xc
c0025e44:	68 27 d2 02 c0       	push   0xc002d227
c0025e49:	e8 41 48 ff ff       	call   c001a68f <Krnl::panic(char const*)>
c0025e4e:	83 c4 10             	add    esp,0x10
c0025e51:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025e55:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025e5c:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025e60:	7f 65                	jg     c0025ec7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025e62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e65:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025e68:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025e6f:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025e72:	01 ca                	add    edx,ecx
c0025e74:	83 c2 54             	add    edx,0x54
c0025e77:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025e7b:	85 c0                	test   eax,eax
c0025e7d:	75 43                	jne    c0025ec2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025e7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e82:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025e85:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025e8c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025e8f:	01 ca                	add    edx,ecx
c0025e91:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025e94:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025e97:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025e9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e9e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025ea1:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025ea8:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025eab:	01 ca                	add    edx,ecx
c0025ead:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025eb3:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025eb6:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025eba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ebd:	83 e8 20             	sub    eax,0x20
c0025ec0:	eb 1a                	jmp    c0025edc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025ec2:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025ec5:	eb 95                	jmp    c0025e5c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025ec7:	83 ec 0c             	sub    esp,0xc
c0025eca:	68 34 d2 02 c0       	push   0xc002d234
c0025ecf:	e8 bb 47 ff ff       	call   c001a68f <Krnl::panic(char const*)>
c0025ed4:	83 c4 10             	add    esp,0x10
c0025ed7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025edc:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025edf:	5b                   	pop    ebx
c0025ee0:	5e                   	pop    esi
c0025ee1:	5f                   	pop    edi
c0025ee2:	5d                   	pop    ebp
c0025ee3:	c3                   	ret    

c0025ee4 <PIC::disable()>:
c0025ee4:	55                   	push   ebp
c0025ee5:	89 e5                	mov    ebp,esp
c0025ee7:	83 ec 10             	sub    esp,0x10
c0025eea:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025ef0:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025ef4:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025ef7:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025efb:	ee                   	out    dx,al
c0025efc:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025f02:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025f06:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025f09:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025f0d:	ee                   	out    dx,al
c0025f0e:	90                   	nop
c0025f0f:	c9                   	leave  
c0025f10:	c3                   	ret    
c0025f11:	90                   	nop

c0025f12 <PIC::close(int, int, void*)>:
c0025f12:	55                   	push   ebp
c0025f13:	89 e5                	mov    ebp,esp
c0025f15:	83 ec 08             	sub    esp,0x8
c0025f18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025f1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f1d:	83 c0 3c             	add    eax,0x3c
c0025f20:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f22:	83 ec 0c             	sub    esp,0xc
c0025f25:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f28:	ff d0                	call   eax
c0025f2a:	83 c4 10             	add    esp,0x10
c0025f2d:	b8 00 00 00 00       	mov    eax,0x0
c0025f32:	c9                   	leave  
c0025f33:	c3                   	ret    

c0025f34 <PIC::PIC()>:
c0025f34:	83 ec 0c             	sub    esp,0xc
c0025f37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f3b:	83 ec 08             	sub    esp,0x8
c0025f3e:	68 e0 d2 02 c0       	push   0xc002d2e0
c0025f43:	50                   	push   eax
c0025f44:	e8 23 ee fe ff       	call   c0014d6c <InterruptController::InterruptController(char const*)>
c0025f49:	83 c4 10             	add    esp,0x10
c0025f4c:	ba 0c d3 02 c0       	mov    edx,0xc002d30c
c0025f51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f55:	89 10                	mov    DWORD PTR [eax],edx
c0025f57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f5b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f61:	0f b6 d0             	movzx  edx,al
c0025f64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f68:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025f6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f73:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f79:	0f b6 d0             	movzx  edx,al
c0025f7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f80:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025f85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f89:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f8f:	8d 50 01             	lea    edx,[eax+0x1]
c0025f92:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025f96:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025f9c:	0f b6 d0             	movzx  edx,al
c0025f9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fa3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025fa7:	83 e1 3f             	and    ecx,0x3f
c0025faa:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025fae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fb2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025fb8:	0f b6 d0             	movzx  edx,al
c0025fbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fbf:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025fc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fca:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025fd0:	0f b6 d0             	movzx  edx,al
c0025fd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fd7:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025fdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fe0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025fe6:	8d 50 01             	lea    edx,[eax+0x1]
c0025fe9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025fed:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025ff3:	0f b6 d0             	movzx  edx,al
c0025ff6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ffa:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025ffe:	83 e1 3f             	and    ecx,0x3f
c0026001:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026005:	90                   	nop
c0026006:	83 c4 0c             	add    esp,0xc
c0026009:	c3                   	ret    

c002600a <PIC::ioWait()>:
c002600a:	eb 00                	jmp    c002600c <PIC::ioWait()+0x2>
c002600c:	eb 00                	jmp    c002600e <PIC::ioWait()+0x4>
c002600e:	90                   	nop
c002600f:	c3                   	ret    

c0026010 <PIC::getIRQReg(int)>:
c0026010:	55                   	push   ebp
c0026011:	89 e5                	mov    ebp,esp
c0026013:	83 ec 10             	sub    esp,0x10
c0026016:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026019:	0f b6 c0             	movzx  eax,al
c002601c:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026022:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0026025:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026028:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002602c:	ee                   	out    dx,al
c002602d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026030:	0f b6 c0             	movzx  eax,al
c0026033:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026039:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c002603c:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002603f:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026043:	ee                   	out    dx,al
c0026044:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c002604a:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c002604e:	89 c2                	mov    edx,eax
c0026050:	ec                   	in     al,dx
c0026051:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0026054:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026057:	0f b6 c0             	movzx  eax,al
c002605a:	c1 e0 08             	shl    eax,0x8
c002605d:	89 c1                	mov    ecx,eax
c002605f:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0026065:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0026069:	89 c2                	mov    edx,eax
c002606b:	ec                   	in     al,dx
c002606c:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c002606f:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0026072:	0f b6 c0             	movzx  eax,al
c0026075:	09 c8                	or     eax,ecx
c0026077:	c9                   	leave  
c0026078:	c3                   	ret    
c0026079:	90                   	nop

c002607a <PIC::eoi(unsigned char)>:
c002607a:	55                   	push   ebp
c002607b:	89 e5                	mov    ebp,esp
c002607d:	83 ec 14             	sub    esp,0x14
c0026080:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026083:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0026086:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c002608a:	75 1e                	jne    c00260aa <PIC::eoi(unsigned char)+0x30>
c002608c:	6a 0b                	push   0xb
c002608e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026091:	e8 7a ff ff ff       	call   c0026010 <PIC::getIRQReg(int)>
c0026096:	83 c4 08             	add    esp,0x8
c0026099:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c002609d:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c00260a1:	25 80 00 00 00       	and    eax,0x80
c00260a6:	85 c0                	test   eax,eax
c00260a8:	74 5f                	je     c0026109 <PIC::eoi(unsigned char)+0x8f>
c00260aa:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c00260ae:	75 2d                	jne    c00260dd <PIC::eoi(unsigned char)+0x63>
c00260b0:	6a 0b                	push   0xb
c00260b2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260b5:	e8 56 ff ff ff       	call   c0026010 <PIC::getIRQReg(int)>
c00260ba:	83 c4 08             	add    esp,0x8
c00260bd:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c00260c1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00260c4:	66 85 c0             	test   ax,ax
c00260c7:	78 14                	js     c00260dd <PIC::eoi(unsigned char)+0x63>
c00260c9:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c00260cf:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c00260d3:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00260d6:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00260da:	ee                   	out    dx,al
c00260db:	eb 2d                	jmp    c002610a <PIC::eoi(unsigned char)+0x90>
c00260dd:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00260e1:	76 12                	jbe    c00260f5 <PIC::eoi(unsigned char)+0x7b>
c00260e3:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00260e9:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c00260ed:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00260f0:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00260f4:	ee                   	out    dx,al
c00260f5:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00260fb:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c00260ff:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026102:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026106:	ee                   	out    dx,al
c0026107:	eb 01                	jmp    c002610a <PIC::eoi(unsigned char)+0x90>
c0026109:	90                   	nop
c002610a:	c9                   	leave  
c002610b:	c3                   	ret    

c002610c <PIC::remap()>:
c002610c:	55                   	push   ebp
c002610d:	89 e5                	mov    ebp,esp
c002610f:	83 ec 48             	sub    esp,0x48
c0026112:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0026119:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0026120:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0026126:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0026129:	89 c2                	mov    edx,eax
c002612b:	ec                   	in     al,dx
c002612c:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c002612f:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0026132:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0026135:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c002613b:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c002613e:	89 c2                	mov    edx,eax
c0026140:	ec                   	in     al,dx
c0026141:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0026144:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0026147:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c002614a:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0026150:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0026154:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0026157:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c002615a:	ee                   	out    dx,al
c002615b:	83 ec 0c             	sub    esp,0xc
c002615e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026161:	e8 a4 fe ff ff       	call   c002600a <PIC::ioWait()>
c0026166:	83 c4 10             	add    esp,0x10
c0026169:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c002616f:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0026173:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0026176:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0026179:	ee                   	out    dx,al
c002617a:	83 ec 0c             	sub    esp,0xc
c002617d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026180:	e8 85 fe ff ff       	call   c002600a <PIC::ioWait()>
c0026185:	83 c4 10             	add    esp,0x10
c0026188:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002618b:	0f b6 c0             	movzx  eax,al
c002618e:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0026194:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0026197:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c002619a:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c002619d:	ee                   	out    dx,al
c002619e:	83 ec 0c             	sub    esp,0xc
c00261a1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261a4:	e8 61 fe ff ff       	call   c002600a <PIC::ioWait()>
c00261a9:	83 c4 10             	add    esp,0x10
c00261ac:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00261af:	0f b6 c0             	movzx  eax,al
c00261b2:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c00261b8:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c00261bb:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c00261be:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00261c1:	ee                   	out    dx,al
c00261c2:	83 ec 0c             	sub    esp,0xc
c00261c5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261c8:	e8 3d fe ff ff       	call   c002600a <PIC::ioWait()>
c00261cd:	83 c4 10             	add    esp,0x10
c00261d0:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c00261d6:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c00261da:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c00261dd:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c00261e0:	ee                   	out    dx,al
c00261e1:	83 ec 0c             	sub    esp,0xc
c00261e4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261e7:	e8 1e fe ff ff       	call   c002600a <PIC::ioWait()>
c00261ec:	83 c4 10             	add    esp,0x10
c00261ef:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c00261f5:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c00261f9:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c00261fc:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00261ff:	ee                   	out    dx,al
c0026200:	83 ec 0c             	sub    esp,0xc
c0026203:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026206:	e8 ff fd ff ff       	call   c002600a <PIC::ioWait()>
c002620b:	83 c4 10             	add    esp,0x10
c002620e:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0026214:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0026218:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c002621b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002621e:	ee                   	out    dx,al
c002621f:	83 ec 0c             	sub    esp,0xc
c0026222:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026225:	e8 e0 fd ff ff       	call   c002600a <PIC::ioWait()>
c002622a:	83 c4 10             	add    esp,0x10
c002622d:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0026233:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0026237:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c002623a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002623d:	ee                   	out    dx,al
c002623e:	83 ec 0c             	sub    esp,0xc
c0026241:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026244:	e8 c1 fd ff ff       	call   c002600a <PIC::ioWait()>
c0026249:	83 c4 10             	add    esp,0x10
c002624c:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0026250:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0026256:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0026259:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c002625c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002625f:	ee                   	out    dx,al
c0026260:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0026264:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c002626a:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c002626d:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0026270:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026273:	ee                   	out    dx,al
c0026274:	90                   	nop
c0026275:	c9                   	leave  
c0026276:	c3                   	ret    
c0026277:	90                   	nop

c0026278 <PIC::open(int, int, void*)>:
c0026278:	55                   	push   ebp
c0026279:	89 e5                	mov    ebp,esp
c002627b:	83 ec 18             	sub    esp,0x18
c002627e:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0026284:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0026288:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002628b:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002628f:	ee                   	out    dx,al
c0026290:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0026296:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c002629a:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002629d:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00262a1:	ee                   	out    dx,al
c00262a2:	83 ec 0c             	sub    esp,0xc
c00262a5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00262a8:	e8 5f fe ff ff       	call   c002610c <PIC::remap()>
c00262ad:	83 c4 10             	add    esp,0x10
c00262b0:	b8 00 00 00 00       	mov    eax,0x0
c00262b5:	c9                   	leave  
c00262b6:	c3                   	ret    
c00262b7:	90                   	nop

c00262b8 <APICTimer::close(int, int, void*)>:
c00262b8:	b8 00 00 00 00       	mov    eax,0x0
c00262bd:	c3                   	ret    

c00262be <apicTimerHandler(regs*, void*)>:
c00262be:	83 ec 0c             	sub    esp,0xc
c00262c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00262c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00262c7:	99                   	cdq    
c00262c8:	52                   	push   edx
c00262c9:	50                   	push   eax
c00262ca:	6a 00                	push   0x0
c00262cc:	68 00 ca 9a 3b       	push   0x3b9aca00
c00262d1:	e8 86 07 00 00       	call   c0026a5c <__udivdi3>
c00262d6:	83 c4 10             	add    esp,0x10
c00262d9:	83 ec 08             	sub    esp,0x8
c00262dc:	52                   	push   edx
c00262dd:	50                   	push   eax
c00262de:	e8 d4 0a ff ff       	call   c0016db7 <timerHandler(unsigned long long)>
c00262e3:	83 c4 10             	add    esp,0x10
c00262e6:	90                   	nop
c00262e7:	83 c4 0c             	add    esp,0xc
c00262ea:	c3                   	ret    
c00262eb:	90                   	nop

c00262ec <APICTimer::write(int)>:
c00262ec:	53                   	push   ebx
c00262ed:	83 ec 28             	sub    esp,0x28
c00262f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00262f4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00262f8:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00262fe:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0026303:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026309:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002630f:	83 ec 0c             	sub    esp,0xc
c0026312:	50                   	push   eax
c0026313:	e8 de f4 ff ff       	call   c00257f6 <APIC::getBase()>
c0026318:	83 c4 10             	add    esp,0x10
c002631b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002631f:	a1 50 eb 02 c0       	mov    eax,ds:0xc002eb50
c0026324:	8b 15 54 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb54
c002632a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002632e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026332:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026336:	05 e0 03 00 00       	add    eax,0x3e0
c002633b:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026341:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026345:	05 80 03 00 00       	add    eax,0x380
c002634a:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0026350:	fb                   	sti    
c0026351:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026355:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026359:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c002635e:	83 d2 00             	adc    edx,0x0
c0026361:	89 c1                	mov    ecx,eax
c0026363:	89 d3                	mov    ebx,edx
c0026365:	a1 50 eb 02 c0       	mov    eax,ds:0xc002eb50
c002636a:	8b 15 54 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb54
c0026370:	39 c8                	cmp    eax,ecx
c0026372:	89 d0                	mov    eax,edx
c0026374:	19 d8                	sbb    eax,ebx
c0026376:	73 02                	jae    c002637a <APICTimer::write(int)+0x8e>
c0026378:	eb d7                	jmp    c0026351 <APICTimer::write(int)+0x65>
c002637a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002637e:	05 20 03 00 00       	add    eax,0x320
c0026383:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0026389:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002638d:	05 90 03 00 00       	add    eax,0x390
c0026392:	8b 00                	mov    eax,DWORD PTR [eax]
c0026394:	f7 d0                	not    eax
c0026396:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002639a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002639e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00263a2:	ba 00 00 00 00       	mov    edx,0x0
c00263a7:	f7 f3                	div    ebx
c00263a9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00263ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00263b1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00263b7:	0d 00 00 02 00       	or     eax,0x20000
c00263bc:	89 c2                	mov    edx,eax
c00263be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00263c2:	05 20 03 00 00       	add    eax,0x320
c00263c7:	89 10                	mov    DWORD PTR [eax],edx
c00263c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00263cd:	05 e0 03 00 00       	add    eax,0x3e0
c00263d2:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00263d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00263dc:	05 80 03 00 00       	add    eax,0x380
c00263e1:	89 c2                	mov    edx,eax
c00263e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00263e7:	89 02                	mov    DWORD PTR [edx],eax
c00263e9:	90                   	nop
c00263ea:	83 c4 28             	add    esp,0x28
c00263ed:	5b                   	pop    ebx
c00263ee:	c3                   	ret    
c00263ef:	90                   	nop

c00263f0 <APICTimer::open(int, int, void*)>:
c00263f0:	57                   	push   edi
c00263f1:	56                   	push   esi
c00263f2:	53                   	push   ebx
c00263f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00263f9:	83 c0 24             	add    eax,0x24
c00263fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00263fe:	83 ec 08             	sub    esp,0x8
c0026401:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026405:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026409:	ff d0                	call   eax
c002640b:	83 c4 10             	add    esp,0x10
c002640e:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0026413:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026419:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002641f:	83 ec 0c             	sub    esp,0xc
c0026422:	50                   	push   eax
c0026423:	e8 ce f3 ff ff       	call   c00257f6 <APIC::getBase()>
c0026428:	83 c4 10             	add    esp,0x10
c002642b:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026431:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026435:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002643b:	0f b6 f8             	movzx  edi,al
c002643e:	89 d0                	mov    eax,edx
c0026440:	ba 00 00 00 00       	mov    edx,0x0
c0026445:	89 c1                	mov    ecx,eax
c0026447:	80 e5 ff             	and    ch,0xff
c002644a:	89 cb                	mov    ebx,ecx
c002644c:	0f b6 f2             	movzx  esi,dl
c002644f:	89 d8                	mov    eax,ebx
c0026451:	89 f2                	mov    edx,esi
c0026453:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026457:	8d 5f 08             	lea    ebx,[edi+0x8]
c002645a:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002645e:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026462:	83 e0 00             	and    eax,0x0
c0026465:	09 d0                	or     eax,edx
c0026467:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002646b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002646f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026475:	8d 50 01             	lea    edx,[eax+0x1]
c0026478:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002647c:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026482:	0f b6 d0             	movzx  edx,al
c0026485:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026489:	83 c2 08             	add    edx,0x8
c002648c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026490:	0f b6 c9             	movzx  ecx,cl
c0026493:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026499:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002649d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264a1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00264a5:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00264ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264af:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00264b3:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00264b9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00264bd:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00264c3:	83 ec 0c             	sub    esp,0xc
c00264c6:	51                   	push   ecx
c00264c7:	6a 01                	push   0x1
c00264c9:	68 be 62 02 c0       	push   0xc00262be
c00264ce:	52                   	push   edx
c00264cf:	50                   	push   eax
c00264d0:	e8 bf de fe ff       	call   c0014394 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00264d5:	83 c4 20             	add    esp,0x20
c00264d8:	89 c2                	mov    edx,eax
c00264da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264de:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00264e4:	b8 00 00 00 00       	mov    eax,0x0
c00264e9:	5b                   	pop    ebx
c00264ea:	5e                   	pop    esi
c00264eb:	5f                   	pop    edi
c00264ec:	c3                   	ret    
c00264ed:	90                   	nop

c00264ee <APICTimer::APICTimer()>:
c00264ee:	83 ec 0c             	sub    esp,0xc
c00264f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264f5:	83 ec 08             	sub    esp,0x8
c00264f8:	68 4c d3 02 c0       	push   0xc002d34c
c00264fd:	50                   	push   eax
c00264fe:	e8 25 08 ff ff       	call   c0016d28 <Timer::Timer(char const*)>
c0026503:	83 c4 10             	add    esp,0x10
c0026506:	ba 60 d3 02 c0       	mov    edx,0xc002d360
c002650b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002650f:	89 10                	mov    DWORD PTR [eax],edx
c0026511:	90                   	nop
c0026512:	83 c4 0c             	add    esp,0xc
c0026515:	c3                   	ret    

c0026516 <PIT::write(int)>:
c0026516:	83 ec 10             	sub    esp,0x10
c0026519:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002651d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026521:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026527:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002652b:	a3 84 28 03 c0       	mov    ds:0xc0032884,eax
c0026530:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026535:	99                   	cdq    
c0026536:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c002653a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002653e:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026545:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c002654a:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c002654e:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026553:	ee                   	out    dx,al
c0026554:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026558:	0f b6 c0             	movzx  eax,al
c002655b:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026562:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026566:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002656a:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002656f:	ee                   	out    dx,al
c0026570:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026574:	c1 f8 08             	sar    eax,0x8
c0026577:	0f b6 c0             	movzx  eax,al
c002657a:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026581:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026585:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026589:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002658e:	ee                   	out    dx,al
c002658f:	90                   	nop
c0026590:	83 c4 10             	add    esp,0x10
c0026593:	c3                   	ret    

c0026594 <pitHandler(regs*, void*)>:
c0026594:	83 ec 0c             	sub    esp,0xc
c0026597:	a1 84 28 03 c0       	mov    eax,ds:0xc0032884
c002659c:	99                   	cdq    
c002659d:	52                   	push   edx
c002659e:	50                   	push   eax
c002659f:	6a 00                	push   0x0
c00265a1:	68 00 ca 9a 3b       	push   0x3b9aca00
c00265a6:	e8 b1 04 00 00       	call   c0026a5c <__udivdi3>
c00265ab:	83 c4 10             	add    esp,0x10
c00265ae:	83 ec 08             	sub    esp,0x8
c00265b1:	52                   	push   edx
c00265b2:	50                   	push   eax
c00265b3:	e8 ff 07 ff ff       	call   c0016db7 <timerHandler(unsigned long long)>
c00265b8:	83 c4 10             	add    esp,0x10
c00265bb:	90                   	nop
c00265bc:	83 c4 0c             	add    esp,0xc
c00265bf:	c3                   	ret    

c00265c0 <PIT::open(int, int, void*)>:
c00265c0:	83 ec 0c             	sub    esp,0xc
c00265c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00265c9:	83 c0 24             	add    eax,0x24
c00265cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00265ce:	83 ec 08             	sub    esp,0x8
c00265d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00265d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00265d9:	ff d0                	call   eax
c00265db:	83 c4 10             	add    esp,0x10
c00265de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265e2:	83 ec 0c             	sub    esp,0xc
c00265e5:	6a 00                	push   0x0
c00265e7:	6a 01                	push   0x1
c00265e9:	68 94 65 02 c0       	push   0xc0026594
c00265ee:	6a 00                	push   0x0
c00265f0:	50                   	push   eax
c00265f1:	e8 9e dd fe ff       	call   c0014394 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00265f6:	83 c4 20             	add    esp,0x20
c00265f9:	89 c2                	mov    edx,eax
c00265fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265ff:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026605:	b8 00 00 00 00       	mov    eax,0x0
c002660a:	83 c4 0c             	add    esp,0xc
c002660d:	c3                   	ret    

c002660e <PIT::close(int, int, void*)>:
c002660e:	83 ec 0c             	sub    esp,0xc
c0026611:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026615:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c002661f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026623:	6a 01                	push   0x1
c0026625:	68 94 65 02 c0       	push   0xc0026594
c002662a:	6a 00                	push   0x0
c002662c:	50                   	push   eax
c002662d:	e8 a0 dd fe ff       	call   c00143d2 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0026632:	83 c4 10             	add    esp,0x10
c0026635:	b8 00 00 00 00       	mov    eax,0x0
c002663a:	83 c4 0c             	add    esp,0xc
c002663d:	c3                   	ret    

c002663e <PIT::PIT()>:
c002663e:	83 ec 0c             	sub    esp,0xc
c0026641:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026645:	83 ec 08             	sub    esp,0x8
c0026648:	68 88 d3 02 c0       	push   0xc002d388
c002664d:	50                   	push   eax
c002664e:	e8 d5 06 ff ff       	call   c0016d28 <Timer::Timer(char const*)>
c0026653:	83 c4 10             	add    esp,0x10
c0026656:	ba b0 d3 02 c0       	mov    edx,0xc002d3b0
c002665b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002665f:	89 10                	mov    DWORD PTR [eax],edx
c0026661:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026665:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002666b:	0f b6 d0             	movzx  edx,al
c002666e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026672:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026679:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002667d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026683:	0f b6 d0             	movzx  edx,al
c0026686:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002668a:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002668f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026693:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026699:	8d 50 01             	lea    edx,[eax+0x1]
c002669c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00266a0:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00266a6:	0f b6 d0             	movzx  edx,al
c00266a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266ad:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00266b1:	83 e1 3f             	and    ecx,0x3f
c00266b4:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00266b8:	90                   	nop
c00266b9:	83 c4 0c             	add    esp,0xc
c00266bc:	c3                   	ret    
c00266bd:	66 90                	xchg   ax,ax
c00266bf:	90                   	nop

c00266c0 <avxDetect>:
c00266c0:	b8 00 00 00 00       	mov    eax,0x0
c00266c5:	c3                   	ret    

c00266c6 <avxSave>:
c00266c6:	c3                   	ret    

c00266c7 <avxLoad>:
c00266c7:	c3                   	ret    

c00266c8 <avxInit>:
c00266c8:	c3                   	ret    

c00266c9 <avxClose>:
c00266c9:	c3                   	ret    

c00266ca <wouldSheSayYes>:
c00266ca:	c3                   	ret    
c00266cb:	49                   	dec    ecx
c00266cc:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c00266d0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c00266d4:	75 20                	jne    c00266f6 <sseDetect.noSSE+0x1>
c00266d6:	4e                   	dec    esi
c00266d7:	79 61                	jns    c002673a <x87Detect+0x14>
c00266d9:	68 2e 2e 2e 00       	push   0x2e2e2e
c00266de:	66 90                	xchg   ax,ax

c00266e0 <absolutelyNoChanceInHell>:
c00266e0:	b8 01 00 00 00       	mov    eax,0x1
c00266e5:	0f a2                	cpuid  
c00266e7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c00266ed:	74 06                	je     c00266f5 <sseDetect.noSSE>
c00266ef:	b8 01 00 00 00       	mov    eax,0x1
c00266f4:	c3                   	ret    

c00266f5 <sseDetect.noSSE>:
c00266f5:	31 c0                	xor    eax,eax
c00266f7:	c3                   	ret    

c00266f8 <sseSave>:
c00266f8:	0f ae 44 24 08       	fxsave [esp+0x8]
c00266fd:	c3                   	ret    

c00266fe <sseLoad>:
c00266fe:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0026703:	c3                   	ret    

c0026704 <sseInit>:
c0026704:	e8 43 00 00 00       	call   c002674c <x87Init>
c0026709:	0f 20 e0             	mov    eax,cr4
c002670c:	66 0d 00 06          	or     ax,0x600
c0026710:	0f 22 e0             	mov    cr4,eax
c0026713:	c3                   	ret    

c0026714 <sseClose>:
c0026714:	c3                   	ret    
c0026715:	66 90                	xchg   ax,ax
c0026717:	66 90                	xchg   ax,ax
c0026719:	66 90                	xchg   ax,ax
c002671b:	66 90                	xchg   ax,ax
c002671d:	66 90                	xchg   ax,ax
c002671f:	90                   	nop

c0026720 <value_37F>:
c0026720:	7f 03                	jg     c0026725 <value_37A+0x1>

c0026722 <value_37E>:
c0026722:	7e 03                	jle    c0026727 <x87Detect+0x1>

c0026724 <value_37A>:
c0026724:	7a 03                	jp     c0026729 <x87Detect+0x3>

c0026726 <x87Detect>:
c0026726:	b8 01 00 00 00       	mov    eax,0x1
c002672b:	0f a2                	cpuid  
c002672d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026733:	74 06                	je     c002673b <x87Detect.nox87>
c0026735:	b8 01 00 00 00       	mov    eax,0x1
c002673a:	c3                   	ret    

c002673b <x87Detect.nox87>:
c002673b:	b8 00 00 00 00       	mov    eax,0x0
c0026740:	c3                   	ret    

c0026741 <x87Save>:
c0026741:	9b dd 74 24 08       	fsave  [esp+0x8]
c0026746:	c3                   	ret    

c0026747 <x87Load>:
c0026747:	dd 64 24 08          	frstor [esp+0x8]
c002674b:	c3                   	ret    

c002674c <x87Init>:
c002674c:	9b db e3             	finit  
c002674f:	0f 20 c0             	mov    eax,cr0
c0026752:	66 25 fb ff          	and    ax,0xfffb
c0026756:	66 0d 22 00          	or     ax,0x22
c002675a:	0f 22 c0             	mov    cr0,eax
c002675d:	0f 06                	clts   
c002675f:	d9 2d 24 67 02 c0    	fldcw  WORD PTR ds:0xc0026724
c0026765:	c3                   	ret    

c0026766 <x87Close>:
c0026766:	c3                   	ret    
c0026767:	90                   	nop

c0026768 <__do_global_ctors_aux>:
c0026768:	a1 ac 92 02 c0       	mov    eax,ds:0xc00292ac
c002676d:	83 f8 ff             	cmp    eax,0xffffffff
c0026770:	74 1a                	je     c002678c <__do_global_ctors_aux+0x24>
c0026772:	55                   	push   ebp
c0026773:	89 e5                	mov    ebp,esp
c0026775:	53                   	push   ebx
c0026776:	52                   	push   edx
c0026777:	bb ac 92 02 c0       	mov    ebx,0xc00292ac
c002677c:	ff d0                	call   eax
c002677e:	83 eb 04             	sub    ebx,0x4
c0026781:	8b 03                	mov    eax,DWORD PTR [ebx]
c0026783:	83 f8 ff             	cmp    eax,0xffffffff
c0026786:	75 f4                	jne    c002677c <__do_global_ctors_aux+0x14>
c0026788:	58                   	pop    eax
c0026789:	5b                   	pop    ebx
c002678a:	5d                   	pop    ebp
c002678b:	c3                   	ret    
c002678c:	c3                   	ret    
c002678d:	66 90                	xchg   ax,ax
c002678f:	90                   	nop

c0026790 <__divdi3>:
c0026790:	55                   	push   ebp
c0026791:	57                   	push   edi
c0026792:	56                   	push   esi
c0026793:	53                   	push   ebx
c0026794:	83 ec 1c             	sub    esp,0x1c
c0026797:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002679b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002679f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00267a2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00267a6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00267aa:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00267ae:	85 db                	test   ebx,ebx
c00267b0:	0f 88 8e 00 00 00    	js     c0026844 <__divdi3+0xb4>
c00267b6:	89 dd                	mov    ebp,ebx
c00267b8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00267c0:	89 d3                	mov    ebx,edx
c00267c2:	85 d2                	test   edx,edx
c00267c4:	79 0d                	jns    c00267d3 <__divdi3+0x43>
c00267c6:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00267ca:	f7 d8                	neg    eax
c00267cc:	83 d2 00             	adc    edx,0x0
c00267cf:	f7 da                	neg    edx
c00267d1:	89 d3                	mov    ebx,edx
c00267d3:	89 c7                	mov    edi,eax
c00267d5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00267d8:	85 db                	test   ebx,ebx
c00267da:	75 48                	jne    c0026824 <__divdi3+0x94>
c00267dc:	39 ef                	cmp    edi,ebp
c00267de:	76 24                	jbe    c0026804 <__divdi3+0x74>
c00267e0:	89 ea                	mov    edx,ebp
c00267e2:	f7 f7                	div    edi
c00267e4:	89 c1                	mov    ecx,eax
c00267e6:	31 f6                	xor    esi,esi
c00267e8:	89 c8                	mov    eax,ecx
c00267ea:	89 f2                	mov    edx,esi
c00267ec:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00267f0:	85 c9                	test   ecx,ecx
c00267f2:	74 07                	je     c00267fb <__divdi3+0x6b>
c00267f4:	f7 d8                	neg    eax
c00267f6:	83 d2 00             	adc    edx,0x0
c00267f9:	f7 da                	neg    edx
c00267fb:	83 c4 1c             	add    esp,0x1c
c00267fe:	5b                   	pop    ebx
c00267ff:	5e                   	pop    esi
c0026800:	5f                   	pop    edi
c0026801:	5d                   	pop    ebp
c0026802:	c3                   	ret    
c0026803:	90                   	nop
c0026804:	85 ff                	test   edi,edi
c0026806:	75 0b                	jne    c0026813 <__divdi3+0x83>
c0026808:	b8 01 00 00 00       	mov    eax,0x1
c002680d:	31 d2                	xor    edx,edx
c002680f:	f7 f3                	div    ebx
c0026811:	89 c7                	mov    edi,eax
c0026813:	31 d2                	xor    edx,edx
c0026815:	89 e8                	mov    eax,ebp
c0026817:	f7 f7                	div    edi
c0026819:	89 c6                	mov    esi,eax
c002681b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002681e:	f7 f7                	div    edi
c0026820:	89 c1                	mov    ecx,eax
c0026822:	eb c4                	jmp    c00267e8 <__divdi3+0x58>
c0026824:	39 eb                	cmp    ebx,ebp
c0026826:	77 3c                	ja     c0026864 <__divdi3+0xd4>
c0026828:	0f bd f3             	bsr    esi,ebx
c002682b:	83 f6 1f             	xor    esi,0x1f
c002682e:	75 40                	jne    c0026870 <__divdi3+0xe0>
c0026830:	39 eb                	cmp    ebx,ebp
c0026832:	72 09                	jb     c002683d <__divdi3+0xad>
c0026834:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0026837:	0f 87 97 00 00 00    	ja     c00268d4 <__divdi3+0x144>
c002683d:	b9 01 00 00 00       	mov    ecx,0x1
c0026842:	eb a4                	jmp    c00267e8 <__divdi3+0x58>
c0026844:	f7 d9                	neg    ecx
c0026846:	83 d3 00             	adc    ebx,0x0
c0026849:	f7 db                	neg    ebx
c002684b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002684e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026852:	89 dd                	mov    ebp,ebx
c0026854:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002685c:	e9 5f ff ff ff       	jmp    c00267c0 <__divdi3+0x30>
c0026861:	8d 76 00             	lea    esi,[esi+0x0]
c0026864:	31 f6                	xor    esi,esi
c0026866:	31 c9                	xor    ecx,ecx
c0026868:	e9 7b ff ff ff       	jmp    c00267e8 <__divdi3+0x58>
c002686d:	8d 76 00             	lea    esi,[esi+0x0]
c0026870:	b8 20 00 00 00       	mov    eax,0x20
c0026875:	29 f0                	sub    eax,esi
c0026877:	89 f1                	mov    ecx,esi
c0026879:	d3 e3                	shl    ebx,cl
c002687b:	89 fa                	mov    edx,edi
c002687d:	88 c1                	mov    cl,al
c002687f:	d3 ea                	shr    edx,cl
c0026881:	09 da                	or     edx,ebx
c0026883:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026887:	89 f1                	mov    ecx,esi
c0026889:	d3 e7                	shl    edi,cl
c002688b:	89 eb                	mov    ebx,ebp
c002688d:	88 c1                	mov    cl,al
c002688f:	d3 eb                	shr    ebx,cl
c0026891:	89 f1                	mov    ecx,esi
c0026893:	d3 e5                	shl    ebp,cl
c0026895:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026898:	88 c1                	mov    cl,al
c002689a:	d3 ea                	shr    edx,cl
c002689c:	09 d5                	or     ebp,edx
c002689e:	89 e8                	mov    eax,ebp
c00268a0:	89 da                	mov    edx,ebx
c00268a2:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00268a6:	89 d3                	mov    ebx,edx
c00268a8:	89 c5                	mov    ebp,eax
c00268aa:	f7 e7                	mul    edi
c00268ac:	39 d3                	cmp    ebx,edx
c00268ae:	72 18                	jb     c00268c8 <__divdi3+0x138>
c00268b0:	74 0a                	je     c00268bc <__divdi3+0x12c>
c00268b2:	89 e9                	mov    ecx,ebp
c00268b4:	31 f6                	xor    esi,esi
c00268b6:	e9 2d ff ff ff       	jmp    c00267e8 <__divdi3+0x58>
c00268bb:	90                   	nop
c00268bc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00268bf:	89 f1                	mov    ecx,esi
c00268c1:	d3 e7                	shl    edi,cl
c00268c3:	39 c7                	cmp    edi,eax
c00268c5:	73 eb                	jae    c00268b2 <__divdi3+0x122>
c00268c7:	90                   	nop
c00268c8:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00268cb:	31 f6                	xor    esi,esi
c00268cd:	e9 16 ff ff ff       	jmp    c00267e8 <__divdi3+0x58>
c00268d2:	66 90                	xchg   ax,ax
c00268d4:	31 c9                	xor    ecx,ecx
c00268d6:	e9 0d ff ff ff       	jmp    c00267e8 <__divdi3+0x58>
c00268db:	90                   	nop

c00268dc <__moddi3>:
c00268dc:	55                   	push   ebp
c00268dd:	57                   	push   edi
c00268de:	56                   	push   esi
c00268df:	53                   	push   ebx
c00268e0:	83 ec 2c             	sub    esp,0x2c
c00268e3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00268e7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00268eb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00268ef:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00268f3:	85 db                	test   ebx,ebx
c00268f5:	0f 88 85 00 00 00    	js     c0026980 <__moddi3+0xa4>
c00268fb:	89 de                	mov    esi,ebx
c00268fd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0026905:	89 d7                	mov    edi,edx
c0026907:	85 d2                	test   edx,edx
c0026909:	79 09                	jns    c0026914 <__moddi3+0x38>
c002690b:	f7 d8                	neg    eax
c002690d:	83 d2 00             	adc    edx,0x0
c0026910:	f7 da                	neg    edx
c0026912:	89 d7                	mov    edi,edx
c0026914:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026918:	89 cd                	mov    ebp,ecx
c002691a:	85 ff                	test   edi,edi
c002691c:	75 52                	jne    c0026970 <__moddi3+0x94>
c002691e:	89 c3                	mov    ebx,eax
c0026920:	39 f0                	cmp    eax,esi
c0026922:	76 24                	jbe    c0026948 <__moddi3+0x6c>
c0026924:	89 c8                	mov    eax,ecx
c0026926:	89 f2                	mov    edx,esi
c0026928:	f7 f3                	div    ebx
c002692a:	89 d6                	mov    esi,edx
c002692c:	89 f0                	mov    eax,esi
c002692e:	31 d2                	xor    edx,edx
c0026930:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026934:	85 c9                	test   ecx,ecx
c0026936:	74 07                	je     c002693f <__moddi3+0x63>
c0026938:	f7 d8                	neg    eax
c002693a:	83 d2 00             	adc    edx,0x0
c002693d:	f7 da                	neg    edx
c002693f:	83 c4 2c             	add    esp,0x2c
c0026942:	5b                   	pop    ebx
c0026943:	5e                   	pop    esi
c0026944:	5f                   	pop    edi
c0026945:	5d                   	pop    ebp
c0026946:	c3                   	ret    
c0026947:	90                   	nop
c0026948:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002694c:	85 db                	test   ebx,ebx
c002694e:	75 0d                	jne    c002695d <__moddi3+0x81>
c0026950:	b8 01 00 00 00       	mov    eax,0x1
c0026955:	31 d2                	xor    edx,edx
c0026957:	f7 f7                	div    edi
c0026959:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002695d:	89 f0                	mov    eax,esi
c002695f:	31 d2                	xor    edx,edx
c0026961:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026965:	f7 f7                	div    edi
c0026967:	89 e8                	mov    eax,ebp
c0026969:	f7 f7                	div    edi
c002696b:	89 d6                	mov    esi,edx
c002696d:	eb bd                	jmp    c002692c <__moddi3+0x50>
c002696f:	90                   	nop
c0026970:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026974:	39 f7                	cmp    edi,esi
c0026976:	76 20                	jbe    c0026998 <__moddi3+0xbc>
c0026978:	89 c8                	mov    eax,ecx
c002697a:	89 f2                	mov    edx,esi
c002697c:	eb b2                	jmp    c0026930 <__moddi3+0x54>
c002697e:	66 90                	xchg   ax,ax
c0026980:	f7 d9                	neg    ecx
c0026982:	83 d3 00             	adc    ebx,0x0
c0026985:	f7 db                	neg    ebx
c0026987:	89 de                	mov    esi,ebx
c0026989:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026991:	e9 6f ff ff ff       	jmp    c0026905 <__moddi3+0x29>
c0026996:	66 90                	xchg   ax,ax
c0026998:	0f bd c7             	bsr    eax,edi
c002699b:	83 f0 1f             	xor    eax,0x1f
c002699e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00269a2:	75 24                	jne    c00269c8 <__moddi3+0xec>
c00269a4:	39 f7                	cmp    edi,esi
c00269a6:	72 06                	jb     c00269ae <__moddi3+0xd2>
c00269a8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00269ac:	77 0c                	ja     c00269ba <__moddi3+0xde>
c00269ae:	89 e9                	mov    ecx,ebp
c00269b0:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00269b4:	19 fe                	sbb    esi,edi
c00269b6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00269ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00269be:	89 f2                	mov    edx,esi
c00269c0:	e9 6b ff ff ff       	jmp    c0026930 <__moddi3+0x54>
c00269c5:	8d 76 00             	lea    esi,[esi+0x0]
c00269c8:	b8 20 00 00 00       	mov    eax,0x20
c00269cd:	89 c2                	mov    edx,eax
c00269cf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00269d3:	29 da                	sub    edx,ebx
c00269d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00269d9:	88 d9                	mov    cl,bl
c00269db:	d3 e7                	shl    edi,cl
c00269dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00269e1:	88 d1                	mov    cl,dl
c00269e3:	d3 e8                	shr    eax,cl
c00269e5:	09 c7                	or     edi,eax
c00269e7:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00269eb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00269ef:	89 d8                	mov    eax,ebx
c00269f1:	88 d9                	mov    cl,bl
c00269f3:	d3 e7                	shl    edi,cl
c00269f5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00269f9:	89 f3                	mov    ebx,esi
c00269fb:	88 d1                	mov    cl,dl
c00269fd:	d3 eb                	shr    ebx,cl
c00269ff:	89 c7                	mov    edi,eax
c0026a01:	88 c1                	mov    cl,al
c0026a03:	d3 e6                	shl    esi,cl
c0026a05:	89 e8                	mov    eax,ebp
c0026a07:	88 d1                	mov    cl,dl
c0026a09:	d3 e8                	shr    eax,cl
c0026a0b:	09 f0                	or     eax,esi
c0026a0d:	89 f9                	mov    ecx,edi
c0026a0f:	d3 e5                	shl    ebp,cl
c0026a11:	89 da                	mov    edx,ebx
c0026a13:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0026a17:	89 d3                	mov    ebx,edx
c0026a19:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026a1d:	89 c6                	mov    esi,eax
c0026a1f:	89 d1                	mov    ecx,edx
c0026a21:	39 d3                	cmp    ebx,edx
c0026a23:	72 27                	jb     c0026a4c <__moddi3+0x170>
c0026a25:	74 21                	je     c0026a48 <__moddi3+0x16c>
c0026a27:	29 f5                	sub    ebp,esi
c0026a29:	19 cb                	sbb    ebx,ecx
c0026a2b:	89 de                	mov    esi,ebx
c0026a2d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026a31:	d3 e6                	shl    esi,cl
c0026a33:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0026a37:	89 f9                	mov    ecx,edi
c0026a39:	d3 ed                	shr    ebp,cl
c0026a3b:	09 ee                	or     esi,ebp
c0026a3d:	89 f0                	mov    eax,esi
c0026a3f:	d3 eb                	shr    ebx,cl
c0026a41:	89 da                	mov    edx,ebx
c0026a43:	e9 e8 fe ff ff       	jmp    c0026930 <__moddi3+0x54>
c0026a48:	39 c5                	cmp    ebp,eax
c0026a4a:	73 db                	jae    c0026a27 <__moddi3+0x14b>
c0026a4c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026a50:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0026a54:	89 d1                	mov    ecx,edx
c0026a56:	89 c6                	mov    esi,eax
c0026a58:	eb cd                	jmp    c0026a27 <__moddi3+0x14b>
c0026a5a:	66 90                	xchg   ax,ax

c0026a5c <__udivdi3>:
c0026a5c:	55                   	push   ebp
c0026a5d:	57                   	push   edi
c0026a5e:	56                   	push   esi
c0026a5f:	53                   	push   ebx
c0026a60:	83 ec 1c             	sub    esp,0x1c
c0026a63:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0026a67:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0026a6b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026a6f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026a73:	85 d2                	test   edx,edx
c0026a75:	75 41                	jne    c0026ab8 <__udivdi3+0x5c>
c0026a77:	39 f7                	cmp    edi,esi
c0026a79:	76 15                	jbe    c0026a90 <__udivdi3+0x34>
c0026a7b:	89 e8                	mov    eax,ebp
c0026a7d:	89 f2                	mov    edx,esi
c0026a7f:	f7 f7                	div    edi
c0026a81:	31 db                	xor    ebx,ebx
c0026a83:	89 da                	mov    edx,ebx
c0026a85:	83 c4 1c             	add    esp,0x1c
c0026a88:	5b                   	pop    ebx
c0026a89:	5e                   	pop    esi
c0026a8a:	5f                   	pop    edi
c0026a8b:	5d                   	pop    ebp
c0026a8c:	c3                   	ret    
c0026a8d:	8d 76 00             	lea    esi,[esi+0x0]
c0026a90:	89 f9                	mov    ecx,edi
c0026a92:	85 ff                	test   edi,edi
c0026a94:	75 0b                	jne    c0026aa1 <__udivdi3+0x45>
c0026a96:	b8 01 00 00 00       	mov    eax,0x1
c0026a9b:	31 d2                	xor    edx,edx
c0026a9d:	f7 f7                	div    edi
c0026a9f:	89 c1                	mov    ecx,eax
c0026aa1:	31 d2                	xor    edx,edx
c0026aa3:	89 f0                	mov    eax,esi
c0026aa5:	f7 f1                	div    ecx
c0026aa7:	89 c3                	mov    ebx,eax
c0026aa9:	89 e8                	mov    eax,ebp
c0026aab:	f7 f1                	div    ecx
c0026aad:	89 da                	mov    edx,ebx
c0026aaf:	83 c4 1c             	add    esp,0x1c
c0026ab2:	5b                   	pop    ebx
c0026ab3:	5e                   	pop    esi
c0026ab4:	5f                   	pop    edi
c0026ab5:	5d                   	pop    ebp
c0026ab6:	c3                   	ret    
c0026ab7:	90                   	nop
c0026ab8:	39 f2                	cmp    edx,esi
c0026aba:	77 1c                	ja     c0026ad8 <__udivdi3+0x7c>
c0026abc:	0f bd da             	bsr    ebx,edx
c0026abf:	83 f3 1f             	xor    ebx,0x1f
c0026ac2:	75 24                	jne    c0026ae8 <__udivdi3+0x8c>
c0026ac4:	39 f2                	cmp    edx,esi
c0026ac6:	72 08                	jb     c0026ad0 <__udivdi3+0x74>
c0026ac8:	39 ef                	cmp    edi,ebp
c0026aca:	0f 87 84 00 00 00    	ja     c0026b54 <__udivdi3+0xf8>
c0026ad0:	b8 01 00 00 00       	mov    eax,0x1
c0026ad5:	eb ac                	jmp    c0026a83 <__udivdi3+0x27>
c0026ad7:	90                   	nop
c0026ad8:	31 db                	xor    ebx,ebx
c0026ada:	31 c0                	xor    eax,eax
c0026adc:	89 da                	mov    edx,ebx
c0026ade:	83 c4 1c             	add    esp,0x1c
c0026ae1:	5b                   	pop    ebx
c0026ae2:	5e                   	pop    esi
c0026ae3:	5f                   	pop    edi
c0026ae4:	5d                   	pop    ebp
c0026ae5:	c3                   	ret    
c0026ae6:	66 90                	xchg   ax,ax
c0026ae8:	b8 20 00 00 00       	mov    eax,0x20
c0026aed:	29 d8                	sub    eax,ebx
c0026aef:	88 d9                	mov    cl,bl
c0026af1:	d3 e2                	shl    edx,cl
c0026af3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026af7:	89 fa                	mov    edx,edi
c0026af9:	88 c1                	mov    cl,al
c0026afb:	d3 ea                	shr    edx,cl
c0026afd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026b01:	09 d1                	or     ecx,edx
c0026b03:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026b07:	88 d9                	mov    cl,bl
c0026b09:	d3 e7                	shl    edi,cl
c0026b0b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026b0f:	89 f7                	mov    edi,esi
c0026b11:	88 c1                	mov    cl,al
c0026b13:	d3 ef                	shr    edi,cl
c0026b15:	88 d9                	mov    cl,bl
c0026b17:	d3 e6                	shl    esi,cl
c0026b19:	89 ea                	mov    edx,ebp
c0026b1b:	88 c1                	mov    cl,al
c0026b1d:	d3 ea                	shr    edx,cl
c0026b1f:	09 d6                	or     esi,edx
c0026b21:	89 f0                	mov    eax,esi
c0026b23:	89 fa                	mov    edx,edi
c0026b25:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026b29:	89 d7                	mov    edi,edx
c0026b2b:	89 c6                	mov    esi,eax
c0026b2d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026b31:	39 d7                	cmp    edi,edx
c0026b33:	72 13                	jb     c0026b48 <__udivdi3+0xec>
c0026b35:	74 09                	je     c0026b40 <__udivdi3+0xe4>
c0026b37:	89 f0                	mov    eax,esi
c0026b39:	31 db                	xor    ebx,ebx
c0026b3b:	e9 43 ff ff ff       	jmp    c0026a83 <__udivdi3+0x27>
c0026b40:	88 d9                	mov    cl,bl
c0026b42:	d3 e5                	shl    ebp,cl
c0026b44:	39 c5                	cmp    ebp,eax
c0026b46:	73 ef                	jae    c0026b37 <__udivdi3+0xdb>
c0026b48:	8d 46 ff             	lea    eax,[esi-0x1]
c0026b4b:	31 db                	xor    ebx,ebx
c0026b4d:	e9 31 ff ff ff       	jmp    c0026a83 <__udivdi3+0x27>
c0026b52:	66 90                	xchg   ax,ax
c0026b54:	31 c0                	xor    eax,eax
c0026b56:	e9 28 ff ff ff       	jmp    c0026a83 <__udivdi3+0x27>
c0026b5b:	90                   	nop

c0026b5c <__umoddi3>:
c0026b5c:	55                   	push   ebp
c0026b5d:	57                   	push   edi
c0026b5e:	56                   	push   esi
c0026b5f:	53                   	push   ebx
c0026b60:	83 ec 1c             	sub    esp,0x1c
c0026b63:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026b67:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026b6b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026b6f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026b73:	89 da                	mov    edx,ebx
c0026b75:	85 c0                	test   eax,eax
c0026b77:	75 37                	jne    c0026bb0 <__umoddi3+0x54>
c0026b79:	39 df                	cmp    edi,ebx
c0026b7b:	76 13                	jbe    c0026b90 <__umoddi3+0x34>
c0026b7d:	89 f0                	mov    eax,esi
c0026b7f:	f7 f7                	div    edi
c0026b81:	89 d0                	mov    eax,edx
c0026b83:	31 d2                	xor    edx,edx
c0026b85:	83 c4 1c             	add    esp,0x1c
c0026b88:	5b                   	pop    ebx
c0026b89:	5e                   	pop    esi
c0026b8a:	5f                   	pop    edi
c0026b8b:	5d                   	pop    ebp
c0026b8c:	c3                   	ret    
c0026b8d:	8d 76 00             	lea    esi,[esi+0x0]
c0026b90:	89 fd                	mov    ebp,edi
c0026b92:	85 ff                	test   edi,edi
c0026b94:	75 0b                	jne    c0026ba1 <__umoddi3+0x45>
c0026b96:	b8 01 00 00 00       	mov    eax,0x1
c0026b9b:	31 d2                	xor    edx,edx
c0026b9d:	f7 f7                	div    edi
c0026b9f:	89 c5                	mov    ebp,eax
c0026ba1:	89 d8                	mov    eax,ebx
c0026ba3:	31 d2                	xor    edx,edx
c0026ba5:	f7 f5                	div    ebp
c0026ba7:	89 f0                	mov    eax,esi
c0026ba9:	f7 f5                	div    ebp
c0026bab:	89 d0                	mov    eax,edx
c0026bad:	eb d4                	jmp    c0026b83 <__umoddi3+0x27>
c0026baf:	90                   	nop
c0026bb0:	89 f1                	mov    ecx,esi
c0026bb2:	39 d8                	cmp    eax,ebx
c0026bb4:	76 0a                	jbe    c0026bc0 <__umoddi3+0x64>
c0026bb6:	89 f0                	mov    eax,esi
c0026bb8:	83 c4 1c             	add    esp,0x1c
c0026bbb:	5b                   	pop    ebx
c0026bbc:	5e                   	pop    esi
c0026bbd:	5f                   	pop    edi
c0026bbe:	5d                   	pop    ebp
c0026bbf:	c3                   	ret    
c0026bc0:	0f bd e8             	bsr    ebp,eax
c0026bc3:	83 f5 1f             	xor    ebp,0x1f
c0026bc6:	75 1c                	jne    c0026be4 <__umoddi3+0x88>
c0026bc8:	39 d8                	cmp    eax,ebx
c0026bca:	72 04                	jb     c0026bd0 <__umoddi3+0x74>
c0026bcc:	39 f7                	cmp    edi,esi
c0026bce:	77 08                	ja     c0026bd8 <__umoddi3+0x7c>
c0026bd0:	89 da                	mov    edx,ebx
c0026bd2:	29 fe                	sub    esi,edi
c0026bd4:	19 c2                	sbb    edx,eax
c0026bd6:	89 f1                	mov    ecx,esi
c0026bd8:	89 c8                	mov    eax,ecx
c0026bda:	83 c4 1c             	add    esp,0x1c
c0026bdd:	5b                   	pop    ebx
c0026bde:	5e                   	pop    esi
c0026bdf:	5f                   	pop    edi
c0026be0:	5d                   	pop    ebp
c0026be1:	c3                   	ret    
c0026be2:	66 90                	xchg   ax,ax
c0026be4:	ba 20 00 00 00       	mov    edx,0x20
c0026be9:	29 ea                	sub    edx,ebp
c0026beb:	89 e9                	mov    ecx,ebp
c0026bed:	d3 e0                	shl    eax,cl
c0026bef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026bf3:	89 f8                	mov    eax,edi
c0026bf5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026bf9:	88 d1                	mov    cl,dl
c0026bfb:	d3 e8                	shr    eax,cl
c0026bfd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026c01:	09 c1                	or     ecx,eax
c0026c03:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026c07:	89 e9                	mov    ecx,ebp
c0026c09:	d3 e7                	shl    edi,cl
c0026c0b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026c0f:	89 d8                	mov    eax,ebx
c0026c11:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026c15:	88 d1                	mov    cl,dl
c0026c17:	d3 e8                	shr    eax,cl
c0026c19:	89 c7                	mov    edi,eax
c0026c1b:	89 e9                	mov    ecx,ebp
c0026c1d:	d3 e3                	shl    ebx,cl
c0026c1f:	89 f0                	mov    eax,esi
c0026c21:	88 d1                	mov    cl,dl
c0026c23:	d3 e8                	shr    eax,cl
c0026c25:	09 d8                	or     eax,ebx
c0026c27:	89 e9                	mov    ecx,ebp
c0026c29:	d3 e6                	shl    esi,cl
c0026c2b:	89 f3                	mov    ebx,esi
c0026c2d:	89 fa                	mov    edx,edi
c0026c2f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026c33:	89 d1                	mov    ecx,edx
c0026c35:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026c39:	89 c6                	mov    esi,eax
c0026c3b:	89 d7                	mov    edi,edx
c0026c3d:	39 d1                	cmp    ecx,edx
c0026c3f:	72 27                	jb     c0026c68 <__umoddi3+0x10c>
c0026c41:	74 21                	je     c0026c64 <__umoddi3+0x108>
c0026c43:	89 ca                	mov    edx,ecx
c0026c45:	29 f3                	sub    ebx,esi
c0026c47:	19 fa                	sbb    edx,edi
c0026c49:	89 d0                	mov    eax,edx
c0026c4b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026c4f:	d3 e0                	shl    eax,cl
c0026c51:	89 e9                	mov    ecx,ebp
c0026c53:	d3 eb                	shr    ebx,cl
c0026c55:	09 d8                	or     eax,ebx
c0026c57:	d3 ea                	shr    edx,cl
c0026c59:	83 c4 1c             	add    esp,0x1c
c0026c5c:	5b                   	pop    ebx
c0026c5d:	5e                   	pop    esi
c0026c5e:	5f                   	pop    edi
c0026c5f:	5d                   	pop    ebp
c0026c60:	c3                   	ret    
c0026c61:	8d 76 00             	lea    esi,[esi+0x0]
c0026c64:	39 c3                	cmp    ebx,eax
c0026c66:	73 db                	jae    c0026c43 <__umoddi3+0xe7>
c0026c68:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026c6c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026c70:	89 d7                	mov    edi,edx
c0026c72:	89 c6                	mov    esi,eax
c0026c74:	eb cd                	jmp    c0026c43 <__umoddi3+0xe7>

c0026c76 <__addsf3>:
c0026c76:	55                   	push   ebp
c0026c77:	89 e5                	mov    ebp,esp
c0026c79:	57                   	push   edi
c0026c7a:	56                   	push   esi
c0026c7b:	53                   	push   ebx
c0026c7c:	83 ec 08             	sub    esp,0x8
c0026c7f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026c82:	89 fa                	mov    edx,edi
c0026c84:	89 f8                	mov    eax,edi
c0026c86:	c1 f8 17             	sar    eax,0x17
c0026c89:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026c8c:	c1 e2 08             	shl    edx,0x8
c0026c8f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026c95:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026c98:	89 de                	mov    esi,ebx
c0026c9a:	c1 fe 17             	sar    esi,0x17
c0026c9d:	c1 e3 08             	shl    ebx,0x8
c0026ca0:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026ca6:	31 f0                	xor    eax,esi
c0026ca8:	0f 88 3b 01 00 00    	js     c0026de9 <__addsf3+0x173>
c0026cae:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026cb1:	29 f1                	sub    ecx,esi
c0026cb3:	85 c9                	test   ecx,ecx
c0026cb5:	7e 54                	jle    c0026d0b <__addsf3+0x95>
c0026cb7:	89 f0                	mov    eax,esi
c0026cb9:	84 c0                	test   al,al
c0026cbb:	75 10                	jne    c0026ccd <__addsf3+0x57>
c0026cbd:	85 db                	test   ebx,ebx
c0026cbf:	0f 84 aa 02 00 00    	je     c0026f6f <__addsf3+0x2f9>
c0026cc5:	49                   	dec    ecx
c0026cc6:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026cc9:	74 38                	je     c0026d03 <__addsf3+0x8d>
c0026ccb:	eb 13                	jmp    c0026ce0 <__addsf3+0x6a>
c0026ccd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026cd0:	f7 d0                	not    eax
c0026cd2:	84 c0                	test   al,al
c0026cd4:	0f 84 95 02 00 00    	je     c0026f6f <__addsf3+0x2f9>
c0026cda:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026ce0:	83 f9 1f             	cmp    ecx,0x1f
c0026ce3:	0f 8f 86 02 00 00    	jg     c0026f6f <__addsf3+0x2f9>
c0026ce9:	89 de                	mov    esi,ebx
c0026ceb:	d3 ee                	shr    esi,cl
c0026ced:	b8 20 00 00 00       	mov    eax,0x20
c0026cf2:	29 c8                	sub    eax,ecx
c0026cf4:	89 c1                	mov    ecx,eax
c0026cf6:	d3 e3                	shl    ebx,cl
c0026cf8:	31 c0                	xor    eax,eax
c0026cfa:	85 db                	test   ebx,ebx
c0026cfc:	0f 95 c0             	setne  al
c0026cff:	09 f0                	or     eax,esi
c0026d01:	01 d0                	add    eax,edx
c0026d03:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026d06:	e9 b6 00 00 00       	jmp    c0026dc1 <__addsf3+0x14b>
c0026d0b:	74 5c                	je     c0026d69 <__addsf3+0xf3>
c0026d0d:	89 f1                	mov    ecx,esi
c0026d0f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026d12:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026d15:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026d19:	75 14                	jne    c0026d2f <__addsf3+0xb9>
c0026d1b:	85 d2                	test   edx,edx
c0026d1d:	0f 84 4c 02 00 00    	je     c0026f6f <__addsf3+0x2f9>
c0026d23:	49                   	dec    ecx
c0026d24:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026d27:	0f 84 94 00 00 00    	je     c0026dc1 <__addsf3+0x14b>
c0026d2d:	eb 12                	jmp    c0026d41 <__addsf3+0xcb>
c0026d2f:	89 f0                	mov    eax,esi
c0026d31:	f7 d0                	not    eax
c0026d33:	84 c0                	test   al,al
c0026d35:	0f 84 34 02 00 00    	je     c0026f6f <__addsf3+0x2f9>
c0026d3b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026d41:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026d44:	83 f9 1f             	cmp    ecx,0x1f
c0026d47:	0f 8f 22 02 00 00    	jg     c0026f6f <__addsf3+0x2f9>
c0026d4d:	89 d7                	mov    edi,edx
c0026d4f:	d3 ef                	shr    edi,cl
c0026d51:	b8 20 00 00 00       	mov    eax,0x20
c0026d56:	29 c8                	sub    eax,ecx
c0026d58:	89 c1                	mov    ecx,eax
c0026d5a:	d3 e2                	shl    edx,cl
c0026d5c:	31 c0                	xor    eax,eax
c0026d5e:	85 d2                	test   edx,edx
c0026d60:	0f 95 c0             	setne  al
c0026d63:	09 f8                	or     eax,edi
c0026d65:	01 d8                	add    eax,ebx
c0026d67:	eb 58                	jmp    c0026dc1 <__addsf3+0x14b>
c0026d69:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026d6c:	8d 70 01             	lea    esi,[eax+0x1]
c0026d6f:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026d75:	75 32                	jne    c0026da9 <__addsf3+0x133>
c0026d77:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026d7b:	75 1f                	jne    c0026d9c <__addsf3+0x126>
c0026d7d:	85 d2                	test   edx,edx
c0026d7f:	0f 84 e0 01 00 00    	je     c0026f65 <__addsf3+0x2ef>
c0026d85:	85 db                	test   ebx,ebx
c0026d87:	0f 84 e2 01 00 00    	je     c0026f6f <__addsf3+0x2f9>
c0026d8d:	89 d0                	mov    eax,edx
c0026d8f:	01 d8                	add    eax,ebx
c0026d91:	0f 89 a9 01 00 00    	jns    c0026f40 <__addsf3+0x2ca>
c0026d97:	e9 9d 01 00 00       	jmp    c0026f39 <__addsf3+0x2c3>
c0026d9c:	85 d2                	test   edx,edx
c0026d9e:	0f 85 cb 01 00 00    	jne    c0026f6f <__addsf3+0x2f9>
c0026da4:	e9 bc 01 00 00       	jmp    c0026f65 <__addsf3+0x2ef>
c0026da9:	31 c0                	xor    eax,eax
c0026dab:	89 f1                	mov    ecx,esi
c0026dad:	f7 d1                	not    ecx
c0026daf:	84 c9                	test   cl,cl
c0026db1:	0f 84 90 01 00 00    	je     c0026f47 <__addsf3+0x2d1>
c0026db7:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026dba:	d1 e8                	shr    eax,1
c0026dbc:	e9 86 01 00 00       	jmp    c0026f47 <__addsf3+0x2d1>
c0026dc1:	85 c0                	test   eax,eax
c0026dc3:	0f 89 7e 01 00 00    	jns    c0026f47 <__addsf3+0x2d1>
c0026dc9:	46                   	inc    esi
c0026dca:	89 f2                	mov    edx,esi
c0026dcc:	f7 d2                	not    edx
c0026dce:	84 d2                	test   dl,dl
c0026dd0:	0f 84 6f 01 00 00    	je     c0026f45 <__addsf3+0x2cf>
c0026dd6:	89 c2                	mov    edx,eax
c0026dd8:	83 e2 01             	and    edx,0x1
c0026ddb:	d1 e8                	shr    eax,1
c0026ddd:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026de2:	09 d0                	or     eax,edx
c0026de4:	e9 5e 01 00 00       	jmp    c0026f47 <__addsf3+0x2d1>
c0026de9:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026ded:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026df0:	89 f0                	mov    eax,esi
c0026df2:	0f b6 c0             	movzx  eax,al
c0026df5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026df8:	29 c1                	sub    ecx,eax
c0026dfa:	85 c9                	test   ecx,ecx
c0026dfc:	7e 55                	jle    c0026e53 <__addsf3+0x1dd>
c0026dfe:	85 c0                	test   eax,eax
c0026e00:	75 11                	jne    c0026e13 <__addsf3+0x19d>
c0026e02:	85 db                	test   ebx,ebx
c0026e04:	0f 84 65 01 00 00    	je     c0026f6f <__addsf3+0x2f9>
c0026e0a:	49                   	dec    ecx
c0026e0b:	75 19                	jne    c0026e26 <__addsf3+0x1b0>
c0026e0d:	89 d0                	mov    eax,edx
c0026e0f:	29 d8                	sub    eax,ebx
c0026e11:	eb 38                	jmp    c0026e4b <__addsf3+0x1d5>
c0026e13:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026e16:	f7 d0                	not    eax
c0026e18:	84 c0                	test   al,al
c0026e1a:	0f 84 4f 01 00 00    	je     c0026f6f <__addsf3+0x2f9>
c0026e20:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026e26:	83 f9 1f             	cmp    ecx,0x1f
c0026e29:	0f 8f 40 01 00 00    	jg     c0026f6f <__addsf3+0x2f9>
c0026e2f:	89 de                	mov    esi,ebx
c0026e31:	d3 ee                	shr    esi,cl
c0026e33:	b8 20 00 00 00       	mov    eax,0x20
c0026e38:	29 c8                	sub    eax,ecx
c0026e3a:	89 c1                	mov    ecx,eax
c0026e3c:	d3 e3                	shl    ebx,cl
c0026e3e:	31 c0                	xor    eax,eax
c0026e40:	85 db                	test   ebx,ebx
c0026e42:	0f 95 c0             	setne  al
c0026e45:	09 f0                	or     eax,esi
c0026e47:	29 c2                	sub    edx,eax
c0026e49:	89 d0                	mov    eax,edx
c0026e4b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026e4e:	e9 af 00 00 00       	jmp    c0026f02 <__addsf3+0x28c>
c0026e53:	74 5c                	je     c0026eb1 <__addsf3+0x23b>
c0026e55:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026e58:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e5b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026e5f:	75 14                	jne    c0026e75 <__addsf3+0x1ff>
c0026e61:	85 d2                	test   edx,edx
c0026e63:	0f 84 06 01 00 00    	je     c0026f6f <__addsf3+0x2f9>
c0026e69:	48                   	dec    eax
c0026e6a:	75 1b                	jne    c0026e87 <__addsf3+0x211>
c0026e6c:	89 d8                	mov    eax,ebx
c0026e6e:	29 d0                	sub    eax,edx
c0026e70:	e9 8d 00 00 00       	jmp    c0026f02 <__addsf3+0x28c>
c0026e75:	89 f1                	mov    ecx,esi
c0026e77:	f7 d1                	not    ecx
c0026e79:	84 c9                	test   cl,cl
c0026e7b:	0f 84 ee 00 00 00    	je     c0026f6f <__addsf3+0x2f9>
c0026e81:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026e87:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e8a:	83 f8 1f             	cmp    eax,0x1f
c0026e8d:	0f 8f dc 00 00 00    	jg     c0026f6f <__addsf3+0x2f9>
c0026e93:	89 d7                	mov    edi,edx
c0026e95:	88 c1                	mov    cl,al
c0026e97:	d3 ef                	shr    edi,cl
c0026e99:	b9 20 00 00 00       	mov    ecx,0x20
c0026e9e:	29 c1                	sub    ecx,eax
c0026ea0:	d3 e2                	shl    edx,cl
c0026ea2:	31 c0                	xor    eax,eax
c0026ea4:	85 d2                	test   edx,edx
c0026ea6:	0f 95 c0             	setne  al
c0026ea9:	09 f8                	or     eax,edi
c0026eab:	29 c3                	sub    ebx,eax
c0026ead:	89 d8                	mov    eax,ebx
c0026eaf:	eb 51                	jmp    c0026f02 <__addsf3+0x28c>
c0026eb1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026eb4:	40                   	inc    eax
c0026eb5:	a8 fe                	test   al,0xfe
c0026eb7:	75 3d                	jne    c0026ef6 <__addsf3+0x280>
c0026eb9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026ebd:	0f 85 a7 00 00 00    	jne    c0026f6a <__addsf3+0x2f4>
c0026ec3:	85 d2                	test   edx,edx
c0026ec5:	75 12                	jne    c0026ed9 <__addsf3+0x263>
c0026ec7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026eca:	85 db                	test   ebx,ebx
c0026ecc:	0f 85 9d 00 00 00    	jne    c0026f6f <__addsf3+0x2f9>
c0026ed2:	31 ff                	xor    edi,edi
c0026ed4:	e9 96 00 00 00       	jmp    c0026f6f <__addsf3+0x2f9>
c0026ed9:	85 db                	test   ebx,ebx
c0026edb:	0f 84 8e 00 00 00    	je     c0026f6f <__addsf3+0x2f9>
c0026ee1:	89 d0                	mov    eax,edx
c0026ee3:	29 d8                	sub    eax,ebx
c0026ee5:	79 06                	jns    c0026eed <__addsf3+0x277>
c0026ee7:	89 d8                	mov    eax,ebx
c0026ee9:	29 d0                	sub    eax,edx
c0026eeb:	eb 5a                	jmp    c0026f47 <__addsf3+0x2d1>
c0026eed:	bf 00 00 00 00       	mov    edi,0x0
c0026ef2:	74 7b                	je     c0026f6f <__addsf3+0x2f9>
c0026ef4:	eb 4a                	jmp    c0026f40 <__addsf3+0x2ca>
c0026ef6:	89 d0                	mov    eax,edx
c0026ef8:	29 d8                	sub    eax,ebx
c0026efa:	79 12                	jns    c0026f0e <__addsf3+0x298>
c0026efc:	89 d8                	mov    eax,ebx
c0026efe:	29 d0                	sub    eax,edx
c0026f00:	eb 09                	jmp    c0026f0b <__addsf3+0x295>
c0026f02:	85 c0                	test   eax,eax
c0026f04:	79 41                	jns    c0026f47 <__addsf3+0x2d1>
c0026f06:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026f0b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026f0e:	31 f6                	xor    esi,esi
c0026f10:	85 c0                	test   eax,eax
c0026f12:	74 33                	je     c0026f47 <__addsf3+0x2d1>
c0026f14:	0f bd c8             	bsr    ecx,eax
c0026f17:	83 f1 1f             	xor    ecx,0x1f
c0026f1a:	d3 e0                	shl    eax,cl
c0026f1c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026f20:	39 ca                	cmp    edx,ecx
c0026f22:	7f 10                	jg     c0026f34 <__addsf3+0x2be>
c0026f24:	29 d1                	sub    ecx,edx
c0026f26:	41                   	inc    ecx
c0026f27:	d3 e8                	shr    eax,cl
c0026f29:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026f2c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026f32:	eb 13                	jmp    c0026f47 <__addsf3+0x2d1>
c0026f34:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026f37:	29 ce                	sub    esi,ecx
c0026f39:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026f3e:	eb 07                	jmp    c0026f47 <__addsf3+0x2d1>
c0026f40:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026f43:	eb 02                	jmp    c0026f47 <__addsf3+0x2d1>
c0026f45:	31 c0                	xor    eax,eax
c0026f47:	89 c2                	mov    edx,eax
c0026f49:	c1 ea 08             	shr    edx,0x8
c0026f4c:	a8 7f                	test   al,0x7f
c0026f4e:	0f 95 c1             	setne  cl
c0026f51:	09 d1                	or     ecx,edx
c0026f53:	83 e1 01             	and    ecx,0x1
c0026f56:	c1 e8 07             	shr    eax,0x7
c0026f59:	21 c8                	and    eax,ecx
c0026f5b:	c1 e6 17             	shl    esi,0x17
c0026f5e:	09 d6                	or     esi,edx
c0026f60:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026f63:	eb 0a                	jmp    c0026f6f <__addsf3+0x2f9>
c0026f65:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026f68:	eb 05                	jmp    c0026f6f <__addsf3+0x2f9>
c0026f6a:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026f6f:	89 f8                	mov    eax,edi
c0026f71:	5a                   	pop    edx
c0026f72:	59                   	pop    ecx
c0026f73:	5b                   	pop    ebx
c0026f74:	5e                   	pop    esi
c0026f75:	5f                   	pop    edi
c0026f76:	5d                   	pop    ebp
c0026f77:	c3                   	ret    

c0026f78 <__subsf3>:
c0026f78:	55                   	push   ebp
c0026f79:	89 e5                	mov    ebp,esp
c0026f7b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026f7e:	05 00 00 00 80       	add    eax,0x80000000
c0026f83:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026f86:	5d                   	pop    ebp
c0026f87:	e9 ea fc ff ff       	jmp    c0026c76 <__addsf3>

c0026f8c <__negsf2>:
c0026f8c:	55                   	push   ebp
c0026f8d:	89 e5                	mov    ebp,esp
c0026f8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026f92:	05 00 00 00 80       	add    eax,0x80000000
c0026f97:	5d                   	pop    ebp
c0026f98:	c3                   	ret    

c0026f99 <__mulsf3>:
c0026f99:	55                   	push   ebp
c0026f9a:	89 e5                	mov    ebp,esp
c0026f9c:	57                   	push   edi
c0026f9d:	56                   	push   esi
c0026f9e:	53                   	push   ebx
c0026f9f:	83 ec 1c             	sub    esp,0x1c
c0026fa2:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026fa5:	89 f0                	mov    eax,esi
c0026fa7:	89 f1                	mov    ecx,esi
c0026fa9:	c1 f9 17             	sar    ecx,0x17
c0026fac:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026faf:	c1 e0 08             	shl    eax,0x8
c0026fb2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026fb7:	89 c1                	mov    ecx,eax
c0026fb9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026fbc:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026fbf:	89 c7                	mov    edi,eax
c0026fc1:	c1 ff 17             	sar    edi,0x17
c0026fc4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026fc8:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026fcb:	89 f8                	mov    eax,edi
c0026fcd:	0f b6 c0             	movzx  eax,al
c0026fd0:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026fd3:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026fd7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026fda:	42                   	inc    edx
c0026fdb:	80 e2 fe             	and    dl,0xfe
c0026fde:	75 7b                	jne    c002705b <__mulsf3+0xc2>
c0026fe0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026fe4:	74 54                	je     c002703a <__mulsf3+0xa1>
c0026fe6:	85 c9                	test   ecx,ecx
c0026fe8:	0f 85 64 01 00 00    	jne    c0027152 <__mulsf3+0x1b9>
c0026fee:	8d 57 01             	lea    edx,[edi+0x1]
c0026ff1:	80 e2 fe             	and    dl,0xfe
c0026ff4:	75 1f                	jne    c0027015 <__mulsf3+0x7c>
c0026ff6:	85 c0                	test   eax,eax
c0026ff8:	b8 00 00 00 00       	mov    eax,0x0
c0026ffd:	74 29                	je     c0027028 <__mulsf3+0x8f>
c0026fff:	53                   	push   ebx
c0027000:	53                   	push   ebx
c0027001:	50                   	push   eax
c0027002:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027005:	e8 96 05 00 00       	call   c00275a0 <__nesf2>
c002700a:	83 c4 10             	add    esp,0x10
c002700d:	85 c0                	test   eax,eax
c002700f:	0f 85 3a 01 00 00    	jne    c002714f <__mulsf3+0x1b6>
c0027015:	85 ff                	test   edi,edi
c0027017:	0f 89 35 01 00 00    	jns    c0027152 <__mulsf3+0x1b9>
c002701d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0027023:	e9 2a 01 00 00       	jmp    c0027152 <__mulsf3+0x1b9>
c0027028:	51                   	push   ecx
c0027029:	51                   	push   ecx
c002702a:	50                   	push   eax
c002702b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002702e:	e8 6d 05 00 00       	call   c00275a0 <__nesf2>
c0027033:	83 c4 10             	add    esp,0x10
c0027036:	85 c0                	test   eax,eax
c0027038:	eb 15                	jmp    c002704f <__mulsf3+0xb6>
c002703a:	85 c9                	test   ecx,ecx
c002703c:	74 0b                	je     c0027049 <__mulsf3+0xb0>
c002703e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0027041:	01 c9                	add    ecx,ecx
c0027043:	78 16                	js     c002705b <__mulsf3+0xc2>
c0027045:	89 d3                	mov    ebx,edx
c0027047:	eb f5                	jmp    c002703e <__mulsf3+0xa5>
c0027049:	89 f8                	mov    eax,edi
c002704b:	f7 d0                	not    eax
c002704d:	84 c0                	test   al,al
c002704f:	75 c4                	jne    c0027015 <__mulsf3+0x7c>
c0027051:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0027056:	e9 f7 00 00 00       	jmp    c0027152 <__mulsf3+0x1b9>
c002705b:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002705e:	c1 e6 08             	shl    esi,0x8
c0027061:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0027067:	8d 57 01             	lea    edx,[edi+0x1]
c002706a:	80 e2 fe             	and    dl,0xfe
c002706d:	75 63                	jne    c00270d2 <__mulsf3+0x139>
c002706f:	85 c0                	test   eax,eax
c0027071:	74 2f                	je     c00270a2 <__mulsf3+0x109>
c0027073:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027077:	0f 89 d2 00 00 00    	jns    c002714f <__mulsf3+0x1b6>
c002707d:	52                   	push   edx
c002707e:	52                   	push   edx
c002707f:	6a 00                	push   0x0
c0027081:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027084:	e8 dc 04 00 00       	call   c0027565 <__eqsf2>
c0027089:	83 c4 10             	add    esp,0x10
c002708c:	85 c0                	test   eax,eax
c002708e:	0f 85 bb 00 00 00    	jne    c002714f <__mulsf3+0x1b6>
c0027094:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027097:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c002709d:	e9 b0 00 00 00       	jmp    c0027152 <__mulsf3+0x1b9>
c00270a2:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00270a5:	50                   	push   eax
c00270a6:	50                   	push   eax
c00270a7:	6a 00                	push   0x0
c00270a9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00270ac:	e8 b4 04 00 00       	call   c0027565 <__eqsf2>
c00270b1:	83 c4 10             	add    esp,0x10
c00270b4:	85 c0                	test   eax,eax
c00270b6:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00270b9:	75 0c                	jne    c00270c7 <__mulsf3+0x12e>
c00270bb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00270bf:	0f 89 8a 00 00 00    	jns    c002714f <__mulsf3+0x1b6>
c00270c5:	eb cd                	jmp    c0027094 <__mulsf3+0xfb>
c00270c7:	8d 43 ff             	lea    eax,[ebx-0x1]
c00270ca:	01 f6                	add    esi,esi
c00270cc:	78 04                	js     c00270d2 <__mulsf3+0x139>
c00270ce:	89 c3                	mov    ebx,eax
c00270d0:	eb f5                	jmp    c00270c7 <__mulsf3+0x12e>
c00270d2:	89 c8                	mov    eax,ecx
c00270d4:	0d 00 00 00 80       	or     eax,0x80000000
c00270d9:	81 ce 00 00 00 80    	or     esi,0x80000000
c00270df:	f7 e6                	mul    esi
c00270e1:	85 c0                	test   eax,eax
c00270e3:	0f 95 c0             	setne  al
c00270e6:	0f b6 c0             	movzx  eax,al
c00270e9:	09 c2                	or     edx,eax
c00270eb:	78 03                	js     c00270f0 <__mulsf3+0x157>
c00270ed:	01 d2                	add    edx,edx
c00270ef:	4b                   	dec    ebx
c00270f0:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c00270f6:	7f 22                	jg     c002711a <__mulsf3+0x181>
c00270f8:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00270fe:	85 db                	test   ebx,ebx
c0027100:	7f 23                	jg     c0027125 <__mulsf3+0x18c>
c0027102:	83 fb e9             	cmp    ebx,0xffffffe9
c0027105:	7c 1a                	jl     c0027121 <__mulsf3+0x188>
c0027107:	81 ca 00 00 00 80    	or     edx,0x80000000
c002710d:	b9 01 00 00 00       	mov    ecx,0x1
c0027112:	29 d9                	sub    ecx,ebx
c0027114:	d3 ea                	shr    edx,cl
c0027116:	31 db                	xor    ebx,ebx
c0027118:	eb 0b                	jmp    c0027125 <__mulsf3+0x18c>
c002711a:	bb ff 00 00 00       	mov    ebx,0xff
c002711f:	eb 02                	jmp    c0027123 <__mulsf3+0x18a>
c0027121:	31 db                	xor    ebx,ebx
c0027123:	31 d2                	xor    edx,edx
c0027125:	89 d0                	mov    eax,edx
c0027127:	c1 e8 08             	shr    eax,0x8
c002712a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c002712d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027133:	09 fb                	or     ebx,edi
c0027135:	c1 e3 17             	shl    ebx,0x17
c0027138:	09 c3                	or     ebx,eax
c002713a:	f6 c2 7f             	test   dl,0x7f
c002713d:	0f 95 c1             	setne  cl
c0027140:	09 c8                	or     eax,ecx
c0027142:	83 e0 01             	and    eax,0x1
c0027145:	c1 ea 07             	shr    edx,0x7
c0027148:	21 c2                	and    edx,eax
c002714a:	8d 34 13             	lea    esi,[ebx+edx*1]
c002714d:	eb 03                	jmp    c0027152 <__mulsf3+0x1b9>
c002714f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0027152:	89 f0                	mov    eax,esi
c0027154:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027157:	5b                   	pop    ebx
c0027158:	5e                   	pop    esi
c0027159:	5f                   	pop    edi
c002715a:	5d                   	pop    ebp
c002715b:	c3                   	ret    

c002715c <__divsf3>:
c002715c:	55                   	push   ebp
c002715d:	89 e5                	mov    ebp,esp
c002715f:	57                   	push   edi
c0027160:	56                   	push   esi
c0027161:	53                   	push   ebx
c0027162:	83 ec 1c             	sub    esp,0x1c
c0027165:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027168:	89 d8                	mov    eax,ebx
c002716a:	89 d9                	mov    ecx,ebx
c002716c:	c1 f9 17             	sar    ecx,0x17
c002716f:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027172:	c1 e0 08             	shl    eax,0x8
c0027175:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002717a:	89 c1                	mov    ecx,eax
c002717c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002717f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027182:	89 c7                	mov    edi,eax
c0027184:	c1 ff 17             	sar    edi,0x17
c0027187:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002718b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002718e:	89 f8                	mov    eax,edi
c0027190:	0f b6 c0             	movzx  eax,al
c0027193:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027196:	29 c6                	sub    esi,eax
c0027198:	83 c6 7f             	add    esi,0x7f
c002719b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002719e:	42                   	inc    edx
c002719f:	80 e2 fe             	and    dl,0xfe
c00271a2:	0f 85 9c 00 00 00    	jne    c0027244 <__divsf3+0xe8>
c00271a8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00271ac:	74 33                	je     c00271e1 <__divsf3+0x85>
c00271ae:	85 c9                	test   ecx,ecx
c00271b0:	0f 85 c7 01 00 00    	jne    c002737d <__divsf3+0x221>
c00271b6:	8d 57 01             	lea    edx,[edi+0x1]
c00271b9:	80 e2 fe             	and    dl,0xfe
c00271bc:	75 2f                	jne    c00271ed <__divsf3+0x91>
c00271be:	85 c0                	test   eax,eax
c00271c0:	74 2b                	je     c00271ed <__divsf3+0x91>
c00271c2:	51                   	push   ecx
c00271c3:	51                   	push   ecx
c00271c4:	6a 00                	push   0x0
c00271c6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271c9:	e8 d2 03 00 00       	call   c00275a0 <__nesf2>
c00271ce:	83 c4 10             	add    esp,0x10
c00271d1:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00271d4:	85 c0                	test   eax,eax
c00271d6:	0f 85 a1 01 00 00    	jne    c002737d <__divsf3+0x221>
c00271dc:	e9 92 01 00 00       	jmp    c0027373 <__divsf3+0x217>
c00271e1:	85 c9                	test   ecx,ecx
c00271e3:	75 1b                	jne    c0027200 <__divsf3+0xa4>
c00271e5:	8d 57 01             	lea    edx,[edi+0x1]
c00271e8:	80 e2 fe             	and    dl,0xfe
c00271eb:	74 1e                	je     c002720b <__divsf3+0xaf>
c00271ed:	85 ff                	test   edi,edi
c00271ef:	0f 89 88 01 00 00    	jns    c002737d <__divsf3+0x221>
c00271f5:	81 c3 00 00 00 80    	add    ebx,0x80000000
c00271fb:	e9 7d 01 00 00       	jmp    c002737d <__divsf3+0x221>
c0027200:	8d 56 ff             	lea    edx,[esi-0x1]
c0027203:	01 c9                	add    ecx,ecx
c0027205:	78 3d                	js     c0027244 <__divsf3+0xe8>
c0027207:	89 d6                	mov    esi,edx
c0027209:	eb f5                	jmp    c0027200 <__divsf3+0xa4>
c002720b:	85 c0                	test   eax,eax
c002720d:	b8 00 00 00 00       	mov    eax,0x0
c0027212:	74 18                	je     c002722c <__divsf3+0xd0>
c0027214:	52                   	push   edx
c0027215:	52                   	push   edx
c0027216:	50                   	push   eax
c0027217:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002721a:	e8 81 03 00 00       	call   c00275a0 <__nesf2>
c002721f:	83 c4 10             	add    esp,0x10
c0027222:	85 c0                	test   eax,eax
c0027224:	0f 85 50 01 00 00    	jne    c002737a <__divsf3+0x21e>
c002722a:	eb c1                	jmp    c00271ed <__divsf3+0x91>
c002722c:	56                   	push   esi
c002722d:	56                   	push   esi
c002722e:	50                   	push   eax
c002722f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027232:	e8 69 03 00 00       	call   c00275a0 <__nesf2>
c0027237:	83 c4 10             	add    esp,0x10
c002723a:	85 c0                	test   eax,eax
c002723c:	0f 84 31 01 00 00    	je     c0027373 <__divsf3+0x217>
c0027242:	eb a9                	jmp    c00271ed <__divsf3+0x91>
c0027244:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0027247:	c1 e3 08             	shl    ebx,0x8
c002724a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027250:	8d 57 01             	lea    edx,[edi+0x1]
c0027253:	80 e2 fe             	and    dl,0xfe
c0027256:	75 71                	jne    c00272c9 <__divsf3+0x16d>
c0027258:	85 c0                	test   eax,eax
c002725a:	ba 00 00 00 00       	mov    edx,0x0
c002725f:	74 2f                	je     c0027290 <__divsf3+0x134>
c0027261:	51                   	push   ecx
c0027262:	51                   	push   ecx
c0027263:	52                   	push   edx
c0027264:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027267:	e8 f9 02 00 00       	call   c0027565 <__eqsf2>
c002726c:	83 c4 10             	add    esp,0x10
c002726f:	85 c0                	test   eax,eax
c0027271:	0f 85 03 01 00 00    	jne    c002737a <__divsf3+0x21e>
c0027277:	31 d2                	xor    edx,edx
c0027279:	89 d3                	mov    ebx,edx
c002727b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002727e:	31 f8                	xor    eax,edi
c0027280:	0f 89 f7 00 00 00    	jns    c002737d <__divsf3+0x221>
c0027286:	bb 00 00 00 80       	mov    ebx,0x80000000
c002728b:	e9 ed 00 00 00       	jmp    c002737d <__divsf3+0x221>
c0027290:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027293:	50                   	push   eax
c0027294:	50                   	push   eax
c0027295:	52                   	push   edx
c0027296:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027299:	e8 c7 02 00 00       	call   c0027565 <__eqsf2>
c002729e:	83 c4 10             	add    esp,0x10
c00272a1:	85 c0                	test   eax,eax
c00272a3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00272a6:	75 16                	jne    c00272be <__divsf3+0x162>
c00272a8:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00272ab:	31 fb                	xor    ebx,edi
c00272ad:	81 e3 00 00 00 80    	and    ebx,0x80000000
c00272b3:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c00272b9:	e9 bf 00 00 00       	jmp    c002737d <__divsf3+0x221>
c00272be:	8d 46 01             	lea    eax,[esi+0x1]
c00272c1:	01 db                	add    ebx,ebx
c00272c3:	78 04                	js     c00272c9 <__divsf3+0x16d>
c00272c5:	89 c6                	mov    esi,eax
c00272c7:	eb f5                	jmp    c00272be <__divsf3+0x162>
c00272c9:	89 c8                	mov    eax,ecx
c00272cb:	0d 00 00 00 80       	or     eax,0x80000000
c00272d0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00272d6:	31 d2                	xor    edx,edx
c00272d8:	39 d8                	cmp    eax,ebx
c00272da:	72 07                	jb     c00272e3 <__divsf3+0x187>
c00272dc:	29 d8                	sub    eax,ebx
c00272de:	ba 01 00 00 00       	mov    edx,0x1
c00272e3:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c00272ea:	01 d2                	add    edx,edx
c00272ec:	89 c1                	mov    ecx,eax
c00272ee:	01 c0                	add    eax,eax
c00272f0:	85 c9                	test   ecx,ecx
c00272f2:	78 04                	js     c00272f8 <__divsf3+0x19c>
c00272f4:	39 c3                	cmp    ebx,eax
c00272f6:	77 05                	ja     c00272fd <__divsf3+0x1a1>
c00272f8:	29 d8                	sub    eax,ebx
c00272fa:	83 ca 01             	or     edx,0x1
c00272fd:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027300:	75 e8                	jne    c00272ea <__divsf3+0x18e>
c0027302:	85 c0                	test   eax,eax
c0027304:	0f 95 c0             	setne  al
c0027307:	0f b6 c0             	movzx  eax,al
c002730a:	c1 e2 06             	shl    edx,0x6
c002730d:	09 c2                	or     edx,eax
c002730f:	78 03                	js     c0027314 <__divsf3+0x1b8>
c0027311:	01 d2                	add    edx,edx
c0027313:	4e                   	dec    esi
c0027314:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002731a:	7f 22                	jg     c002733e <__divsf3+0x1e2>
c002731c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027322:	85 f6                	test   esi,esi
c0027324:	7f 23                	jg     c0027349 <__divsf3+0x1ed>
c0027326:	83 fe e9             	cmp    esi,0xffffffe9
c0027329:	7c 1a                	jl     c0027345 <__divsf3+0x1e9>
c002732b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027331:	b9 01 00 00 00       	mov    ecx,0x1
c0027336:	29 f1                	sub    ecx,esi
c0027338:	d3 ea                	shr    edx,cl
c002733a:	31 f6                	xor    esi,esi
c002733c:	eb 0b                	jmp    c0027349 <__divsf3+0x1ed>
c002733e:	be ff 00 00 00       	mov    esi,0xff
c0027343:	eb 02                	jmp    c0027347 <__divsf3+0x1eb>
c0027345:	31 f6                	xor    esi,esi
c0027347:	31 d2                	xor    edx,edx
c0027349:	89 d0                	mov    eax,edx
c002734b:	c1 e8 08             	shr    eax,0x8
c002734e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027351:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027357:	09 fe                	or     esi,edi
c0027359:	c1 e6 17             	shl    esi,0x17
c002735c:	09 c6                	or     esi,eax
c002735e:	f6 c2 7f             	test   dl,0x7f
c0027361:	0f 95 c1             	setne  cl
c0027364:	09 c8                	or     eax,ecx
c0027366:	83 e0 01             	and    eax,0x1
c0027369:	c1 ea 07             	shr    edx,0x7
c002736c:	21 c2                	and    edx,eax
c002736e:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027371:	eb 0a                	jmp    c002737d <__divsf3+0x221>
c0027373:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027378:	eb 03                	jmp    c002737d <__divsf3+0x221>
c002737a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002737d:	89 d8                	mov    eax,ebx
c002737f:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027382:	5b                   	pop    ebx
c0027383:	5e                   	pop    esi
c0027384:	5f                   	pop    edi
c0027385:	5d                   	pop    ebp
c0027386:	c3                   	ret    

c0027387 <__floatsisf>:
c0027387:	55                   	push   ebp
c0027388:	89 e5                	mov    ebp,esp
c002738a:	53                   	push   ebx
c002738b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002738e:	85 d2                	test   edx,edx
c0027390:	7e 2b                	jle    c00273bd <__floatsisf+0x36>
c0027392:	0f bd ca             	bsr    ecx,edx
c0027395:	83 f1 1f             	xor    ecx,0x1f
c0027398:	d3 e2                	shl    edx,cl
c002739a:	89 d0                	mov    eax,edx
c002739c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00273a1:	89 c3                	mov    ebx,eax
c00273a3:	c1 eb 08             	shr    ebx,0x8
c00273a6:	80 e2 7f             	and    dl,0x7f
c00273a9:	0f 95 c2             	setne  dl
c00273ac:	09 da                	or     edx,ebx
c00273ae:	83 e2 01             	and    edx,0x1
c00273b1:	c1 e8 07             	shr    eax,0x7
c00273b4:	21 c2                	and    edx,eax
c00273b6:	b8 9e 00 00 00       	mov    eax,0x9e
c00273bb:	eb 32                	jmp    c00273ef <__floatsisf+0x68>
c00273bd:	b8 00 00 00 00       	mov    eax,0x0
c00273c2:	74 34                	je     c00273f8 <__floatsisf+0x71>
c00273c4:	f7 da                	neg    edx
c00273c6:	0f bd ca             	bsr    ecx,edx
c00273c9:	83 f1 1f             	xor    ecx,0x1f
c00273cc:	d3 e2                	shl    edx,cl
c00273ce:	89 d0                	mov    eax,edx
c00273d0:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00273d5:	89 c3                	mov    ebx,eax
c00273d7:	c1 eb 08             	shr    ebx,0x8
c00273da:	80 e2 7f             	and    dl,0x7f
c00273dd:	0f 95 c2             	setne  dl
c00273e0:	09 da                	or     edx,ebx
c00273e2:	83 e2 01             	and    edx,0x1
c00273e5:	c1 e8 07             	shr    eax,0x7
c00273e8:	21 c2                	and    edx,eax
c00273ea:	b8 9e 01 00 00       	mov    eax,0x19e
c00273ef:	29 c8                	sub    eax,ecx
c00273f1:	c1 e0 17             	shl    eax,0x17
c00273f4:	09 d8                	or     eax,ebx
c00273f6:	01 d0                	add    eax,edx
c00273f8:	5b                   	pop    ebx
c00273f9:	5d                   	pop    ebp
c00273fa:	c3                   	ret    

c00273fb <__floatunsisf>:
c00273fb:	55                   	push   ebp
c00273fc:	89 e5                	mov    ebp,esp
c00273fe:	53                   	push   ebx
c00273ff:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027402:	31 c0                	xor    eax,eax
c0027404:	85 d2                	test   edx,edx
c0027406:	74 32                	je     c002743a <__floatunsisf+0x3f>
c0027408:	0f bd ca             	bsr    ecx,edx
c002740b:	83 f1 1f             	xor    ecx,0x1f
c002740e:	d3 e2                	shl    edx,cl
c0027410:	89 d0                	mov    eax,edx
c0027412:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027417:	89 c3                	mov    ebx,eax
c0027419:	c1 eb 08             	shr    ebx,0x8
c002741c:	80 e2 7f             	and    dl,0x7f
c002741f:	0f 95 c2             	setne  dl
c0027422:	09 da                	or     edx,ebx
c0027424:	83 e2 01             	and    edx,0x1
c0027427:	c1 e8 07             	shr    eax,0x7
c002742a:	21 c2                	and    edx,eax
c002742c:	b8 9e 00 00 00       	mov    eax,0x9e
c0027431:	29 c8                	sub    eax,ecx
c0027433:	c1 e0 17             	shl    eax,0x17
c0027436:	09 d8                	or     eax,ebx
c0027438:	01 d0                	add    eax,edx
c002743a:	5b                   	pop    ebx
c002743b:	5d                   	pop    ebp
c002743c:	c3                   	ret    

c002743d <__fixsfsi>:
c002743d:	55                   	push   ebp
c002743e:	89 e5                	mov    ebp,esp
c0027440:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027443:	89 d1                	mov    ecx,edx
c0027445:	c1 e1 08             	shl    ecx,0x8
c0027448:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c002744e:	c1 fa 17             	sar    edx,0x17
c0027451:	78 1c                	js     c002746f <__fixsfsi+0x32>
c0027453:	83 ea 7f             	sub    edx,0x7f
c0027456:	31 c0                	xor    eax,eax
c0027458:	83 fa 1e             	cmp    edx,0x1e
c002745b:	77 40                	ja     c002749d <__fixsfsi+0x60>
c002745d:	89 c8                	mov    eax,ecx
c002745f:	0d 00 00 00 80       	or     eax,0x80000000
c0027464:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027469:	29 d1                	sub    ecx,edx
c002746b:	d3 e8                	shr    eax,cl
c002746d:	eb 2e                	jmp    c002749d <__fixsfsi+0x60>
c002746f:	31 c0                	xor    eax,eax
c0027471:	81 c2 81 00 00 00    	add    edx,0x81
c0027477:	78 24                	js     c002749d <__fixsfsi+0x60>
c0027479:	83 fa 1e             	cmp    edx,0x1e
c002747c:	7e 09                	jle    c0027487 <__fixsfsi+0x4a>
c002747e:	83 fa 1f             	cmp    edx,0x1f
c0027481:	75 18                	jne    c002749b <__fixsfsi+0x5e>
c0027483:	85 c9                	test   ecx,ecx
c0027485:	75 14                	jne    c002749b <__fixsfsi+0x5e>
c0027487:	89 c8                	mov    eax,ecx
c0027489:	0d 00 00 00 80       	or     eax,0x80000000
c002748e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027493:	29 d1                	sub    ecx,edx
c0027495:	d3 e8                	shr    eax,cl
c0027497:	f7 d8                	neg    eax
c0027499:	eb 02                	jmp    c002749d <__fixsfsi+0x60>
c002749b:	31 c0                	xor    eax,eax
c002749d:	5d                   	pop    ebp
c002749e:	c3                   	ret    

c002749f <__fixunssfsi>:
c002749f:	55                   	push   ebp
c00274a0:	89 e5                	mov    ebp,esp
c00274a2:	53                   	push   ebx
c00274a3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00274a6:	89 d3                	mov    ebx,edx
c00274a8:	c1 fb 17             	sar    ebx,0x17
c00274ab:	83 eb 7f             	sub    ebx,0x7f
c00274ae:	31 c0                	xor    eax,eax
c00274b0:	83 fb 1f             	cmp    ebx,0x1f
c00274b3:	77 18                	ja     c00274cd <__fixunssfsi+0x2e>
c00274b5:	89 d0                	mov    eax,edx
c00274b7:	c1 e0 08             	shl    eax,0x8
c00274ba:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00274bf:	0d 00 00 00 80       	or     eax,0x80000000
c00274c4:	b9 1f 00 00 00       	mov    ecx,0x1f
c00274c9:	29 d9                	sub    ecx,ebx
c00274cb:	d3 e8                	shr    eax,cl
c00274cd:	5b                   	pop    ebx
c00274ce:	5d                   	pop    ebp
c00274cf:	c3                   	ret    

c00274d0 <__cmpsf2>:
c00274d0:	55                   	push   ebp
c00274d1:	89 e5                	mov    ebp,esp
c00274d3:	57                   	push   edi
c00274d4:	56                   	push   esi
c00274d5:	53                   	push   ebx
c00274d6:	83 ec 24             	sub    esp,0x24
c00274d9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00274dc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00274df:	e8 4f 10 00 00       	call   c0028533 <__truncdfsf2>
c00274e4:	5a                   	pop    edx
c00274e5:	59                   	pop    ecx
c00274e6:	89 c3                	mov    ebx,eax
c00274e8:	c1 e8 17             	shr    eax,0x17
c00274eb:	0f b6 f0             	movzx  esi,al
c00274ee:	89 d8                	mov    eax,ebx
c00274f0:	c1 e8 1f             	shr    eax,0x1f
c00274f3:	31 c6                	xor    esi,eax
c00274f5:	c1 e3 08             	shl    ebx,0x8
c00274f8:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00274fb:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00274fe:	e8 30 10 00 00       	call   c0028533 <__truncdfsf2>
c0027503:	83 c4 10             	add    esp,0x10
c0027506:	89 c1                	mov    ecx,eax
c0027508:	c1 e9 17             	shr    ecx,0x17
c002750b:	0f b6 c9             	movzx  ecx,cl
c002750e:	89 c7                	mov    edi,eax
c0027510:	c1 ef 1f             	shr    edi,0x1f
c0027513:	89 ca                	mov    edx,ecx
c0027515:	31 fa                	xor    edx,edi
c0027517:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002751a:	c1 e0 08             	shl    eax,0x8
c002751d:	89 c2                	mov    edx,eax
c002751f:	89 d8                	mov    eax,ebx
c0027521:	09 d0                	or     eax,edx
c0027523:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027528:	09 f0                	or     eax,esi
c002752a:	75 08                	jne    c0027534 <__cmpsf2+0x64>
c002752c:	31 c0                	xor    eax,eax
c002752e:	39 f9                	cmp    ecx,edi
c0027530:	75 0c                	jne    c002753e <__cmpsf2+0x6e>
c0027532:	eb 29                	jmp    c002755d <__cmpsf2+0x8d>
c0027534:	b8 01 00 00 00       	mov    eax,0x1
c0027539:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002753c:	7f 1f                	jg     c002755d <__cmpsf2+0x8d>
c002753e:	83 c8 ff             	or     eax,0xffffffff
c0027541:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027544:	7c 17                	jl     c002755d <__cmpsf2+0x8d>
c0027546:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002754c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027552:	b8 01 00 00 00       	mov    eax,0x1
c0027557:	39 d3                	cmp    ebx,edx
c0027559:	77 02                	ja     c002755d <__cmpsf2+0x8d>
c002755b:	19 c0                	sbb    eax,eax
c002755d:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027560:	5b                   	pop    ebx
c0027561:	5e                   	pop    esi
c0027562:	5f                   	pop    edi
c0027563:	5d                   	pop    ebp
c0027564:	c3                   	ret    

c0027565 <__eqsf2>:
c0027565:	55                   	push   ebp
c0027566:	89 e5                	mov    ebp,esp
c0027568:	83 ec 24             	sub    esp,0x24
c002756b:	6a 01                	push   0x1
c002756d:	83 ec 0c             	sub    esp,0xc
c0027570:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027573:	e8 df 10 00 00       	call   c0028657 <__extendsfdf2>
c0027578:	83 c4 10             	add    esp,0x10
c002757b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002757e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027581:	52                   	push   edx
c0027582:	50                   	push   eax
c0027583:	50                   	push   eax
c0027584:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027587:	e8 cb 10 00 00       	call   c0028657 <__extendsfdf2>
c002758c:	59                   	pop    ecx
c002758d:	59                   	pop    ecx
c002758e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027591:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027594:	52                   	push   edx
c0027595:	50                   	push   eax
c0027596:	e8 35 ff ff ff       	call   c00274d0 <__cmpsf2>
c002759b:	83 c4 20             	add    esp,0x20
c002759e:	c9                   	leave  
c002759f:	c3                   	ret    

c00275a0 <__nesf2>:
c00275a0:	eb c3                	jmp    c0027565 <__eqsf2>

c00275a2 <__gtsf2>:
c00275a2:	55                   	push   ebp
c00275a3:	89 e5                	mov    ebp,esp
c00275a5:	83 ec 24             	sub    esp,0x24
c00275a8:	6a ff                	push   0xffffffff
c00275aa:	83 ec 0c             	sub    esp,0xc
c00275ad:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00275b0:	e8 a2 10 00 00       	call   c0028657 <__extendsfdf2>
c00275b5:	83 c4 10             	add    esp,0x10
c00275b8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00275bb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00275be:	52                   	push   edx
c00275bf:	50                   	push   eax
c00275c0:	50                   	push   eax
c00275c1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00275c4:	e8 8e 10 00 00       	call   c0028657 <__extendsfdf2>
c00275c9:	59                   	pop    ecx
c00275ca:	59                   	pop    ecx
c00275cb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00275ce:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00275d1:	52                   	push   edx
c00275d2:	50                   	push   eax
c00275d3:	e8 f8 fe ff ff       	call   c00274d0 <__cmpsf2>
c00275d8:	83 c4 20             	add    esp,0x20
c00275db:	c9                   	leave  
c00275dc:	c3                   	ret    

c00275dd <__gesf2>:
c00275dd:	eb c3                	jmp    c00275a2 <__gtsf2>

c00275df <__ltsf2>:
c00275df:	eb 84                	jmp    c0027565 <__eqsf2>

c00275e1 <__lesf2>:
c00275e1:	eb 82                	jmp    c0027565 <__eqsf2>

c00275e3 <__adddf3>:
c00275e3:	55                   	push   ebp
c00275e4:	89 e5                	mov    ebp,esp
c00275e6:	57                   	push   edi
c00275e7:	56                   	push   esi
c00275e8:	53                   	push   ebx
c00275e9:	83 ec 24             	sub    esp,0x24
c00275ec:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00275ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00275f2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00275f5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00275f8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00275fb:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00275fe:	89 c8                	mov    eax,ecx
c0027600:	89 ce                	mov    esi,ecx
c0027602:	c1 fe 14             	sar    esi,0x14
c0027605:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027608:	89 fb                	mov    ebx,edi
c002760a:	89 fa                	mov    edx,edi
c002760c:	c1 e2 0b             	shl    edx,0xb
c002760f:	c1 e0 0b             	shl    eax,0xb
c0027612:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027617:	c1 eb 15             	shr    ebx,0x15
c002761a:	09 d8                	or     eax,ebx
c002761c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c002761f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027622:	c1 fe 14             	sar    esi,0x14
c0027625:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027628:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002762b:	89 f3                	mov    ebx,esi
c002762d:	c1 e3 0b             	shl    ebx,0xb
c0027630:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027633:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027636:	c1 e3 0b             	shl    ebx,0xb
c0027639:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c002763f:	c1 ee 15             	shr    esi,0x15
c0027642:	09 f3                	or     ebx,esi
c0027644:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0027647:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002764a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c002764d:	0f 88 5f 02 00 00    	js     c00278b2 <__adddf3+0x2cf>
c0027653:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027656:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027659:	85 db                	test   ebx,ebx
c002765b:	0f 8e c7 00 00 00    	jle    c0027728 <__adddf3+0x145>
c0027661:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027668:	75 1a                	jne    c0027684 <__adddf3+0xa1>
c002766a:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002766d:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027670:	0f 84 b2 05 00 00    	je     c0027c28 <__adddf3+0x645>
c0027676:	4b                   	dec    ebx
c0027677:	75 23                	jne    c002769c <__adddf3+0xb9>
c0027679:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002767c:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c002767f:	e9 99 00 00 00       	jmp    c002771d <__adddf3+0x13a>
c0027684:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027687:	f7 d6                	not    esi
c0027689:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002768f:	0f 84 93 05 00 00    	je     c0027c28 <__adddf3+0x645>
c0027695:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002769c:	83 fb 1f             	cmp    ebx,0x1f
c002769f:	7e 42                	jle    c00276e3 <__adddf3+0x100>
c00276a1:	83 fb 3f             	cmp    ebx,0x3f
c00276a4:	0f 8f 7e 05 00 00    	jg     c0027c28 <__adddf3+0x645>
c00276aa:	83 e3 1f             	and    ebx,0x1f
c00276ad:	89 d9                	mov    ecx,ebx
c00276af:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00276b2:	d3 ef                	shr    edi,cl
c00276b4:	31 db                	xor    ebx,ebx
c00276b6:	85 c9                	test   ecx,ecx
c00276b8:	74 15                	je     c00276cf <__adddf3+0xec>
c00276ba:	be 20 00 00 00       	mov    esi,0x20
c00276bf:	29 ce                	sub    esi,ecx
c00276c1:	89 f1                	mov    ecx,esi
c00276c3:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00276c6:	d3 e6                	shl    esi,cl
c00276c8:	31 db                	xor    ebx,ebx
c00276ca:	85 f6                	test   esi,esi
c00276cc:	0f 95 c3             	setne  bl
c00276cf:	31 c9                	xor    ecx,ecx
c00276d1:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00276d5:	0f 95 c1             	setne  cl
c00276d8:	09 cf                	or     edi,ecx
c00276da:	09 fb                	or     ebx,edi
c00276dc:	01 da                	add    edx,ebx
c00276de:	83 d0 00             	adc    eax,0x0
c00276e1:	eb 3a                	jmp    c002771d <__adddf3+0x13a>
c00276e3:	bf 20 00 00 00       	mov    edi,0x20
c00276e8:	29 df                	sub    edi,ebx
c00276ea:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00276ed:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00276f0:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00276f3:	d3 e6                	shl    esi,cl
c00276f5:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00276f8:	88 d9                	mov    cl,bl
c00276fa:	d3 ef                	shr    edi,cl
c00276fc:	09 fe                	or     esi,edi
c00276fe:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027701:	88 d9                	mov    cl,bl
c0027703:	d3 ef                	shr    edi,cl
c0027705:	89 fb                	mov    ebx,edi
c0027707:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002770a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002770d:	d3 e7                	shl    edi,cl
c002770f:	85 ff                	test   edi,edi
c0027711:	0f 95 c1             	setne  cl
c0027714:	0f b6 c9             	movzx  ecx,cl
c0027717:	09 ce                	or     esi,ecx
c0027719:	01 f2                	add    edx,esi
c002771b:	11 d8                	adc    eax,ebx
c002771d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027720:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027723:	e9 52 01 00 00       	jmp    c002787a <__adddf3+0x297>
c0027728:	0f 84 d5 00 00 00    	je     c0027803 <__adddf3+0x220>
c002772e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027731:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027734:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027737:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002773a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027741:	75 20                	jne    c0027763 <__adddf3+0x180>
c0027743:	89 d6                	mov    esi,edx
c0027745:	09 c6                	or     esi,eax
c0027747:	0f 84 db 04 00 00    	je     c0027c28 <__adddf3+0x645>
c002774d:	4b                   	dec    ebx
c002774e:	75 29                	jne    c0027779 <__adddf3+0x196>
c0027750:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027753:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027756:	01 d1                	add    ecx,edx
c0027758:	11 c6                	adc    esi,eax
c002775a:	89 f0                	mov    eax,esi
c002775c:	89 ca                	mov    edx,ecx
c002775e:	e9 17 01 00 00       	jmp    c002787a <__adddf3+0x297>
c0027763:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027766:	f7 d6                	not    esi
c0027768:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002776e:	0f 84 b4 04 00 00    	je     c0027c28 <__adddf3+0x645>
c0027774:	0d 00 00 00 80       	or     eax,0x80000000
c0027779:	83 fb 1f             	cmp    ebx,0x1f
c002777c:	7e 48                	jle    c00277c6 <__adddf3+0x1e3>
c002777e:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027781:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027784:	83 fb 3f             	cmp    ebx,0x3f
c0027787:	0f 8f 9b 04 00 00    	jg     c0027c28 <__adddf3+0x645>
c002778d:	83 e3 1f             	and    ebx,0x1f
c0027790:	89 d9                	mov    ecx,ebx
c0027792:	89 c7                	mov    edi,eax
c0027794:	d3 ef                	shr    edi,cl
c0027796:	31 db                	xor    ebx,ebx
c0027798:	85 c9                	test   ecx,ecx
c002779a:	74 12                	je     c00277ae <__adddf3+0x1cb>
c002779c:	be 20 00 00 00       	mov    esi,0x20
c00277a1:	29 ce                	sub    esi,ecx
c00277a3:	89 f1                	mov    ecx,esi
c00277a5:	d3 e0                	shl    eax,cl
c00277a7:	31 db                	xor    ebx,ebx
c00277a9:	85 c0                	test   eax,eax
c00277ab:	0f 95 c3             	setne  bl
c00277ae:	31 c0                	xor    eax,eax
c00277b0:	85 d2                	test   edx,edx
c00277b2:	0f 95 c0             	setne  al
c00277b5:	09 c7                	or     edi,eax
c00277b7:	09 fb                	or     ebx,edi
c00277b9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00277bc:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00277bf:	01 da                	add    edx,ebx
c00277c1:	83 d6 00             	adc    esi,0x0
c00277c4:	eb 39                	jmp    c00277ff <__adddf3+0x21c>
c00277c6:	be 20 00 00 00       	mov    esi,0x20
c00277cb:	29 de                	sub    esi,ebx
c00277cd:	89 c7                	mov    edi,eax
c00277cf:	89 f1                	mov    ecx,esi
c00277d1:	d3 e7                	shl    edi,cl
c00277d3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00277d6:	89 d7                	mov    edi,edx
c00277d8:	88 d9                	mov    cl,bl
c00277da:	d3 ef                	shr    edi,cl
c00277dc:	89 f9                	mov    ecx,edi
c00277de:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00277e1:	09 cf                	or     edi,ecx
c00277e3:	88 d9                	mov    cl,bl
c00277e5:	d3 e8                	shr    eax,cl
c00277e7:	89 f1                	mov    ecx,esi
c00277e9:	d3 e2                	shl    edx,cl
c00277eb:	85 d2                	test   edx,edx
c00277ed:	0f 95 c2             	setne  dl
c00277f0:	0f b6 d2             	movzx  edx,dl
c00277f3:	09 d7                	or     edi,edx
c00277f5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00277f8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00277fb:	01 fa                	add    edx,edi
c00277fd:	11 c6                	adc    esi,eax
c00277ff:	89 f0                	mov    eax,esi
c0027801:	eb 77                	jmp    c002787a <__adddf3+0x297>
c0027803:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027806:	46                   	inc    esi
c0027807:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002780a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027810:	75 41                	jne    c0027853 <__adddf3+0x270>
c0027812:	89 d3                	mov    ebx,edx
c0027814:	09 c3                	or     ebx,eax
c0027816:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002781d:	75 27                	jne    c0027846 <__adddf3+0x263>
c002781f:	85 db                	test   ebx,ebx
c0027821:	0f 84 fb 03 00 00    	je     c0027c22 <__adddf3+0x63f>
c0027827:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002782a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002782d:	0f 84 f5 03 00 00    	je     c0027c28 <__adddf3+0x645>
c0027833:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027836:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027839:	85 c0                	test   eax,eax
c002783b:	0f 89 91 03 00 00    	jns    c0027bd2 <__adddf3+0x5ef>
c0027841:	e9 85 03 00 00       	jmp    c0027bcb <__adddf3+0x5e8>
c0027846:	85 db                	test   ebx,ebx
c0027848:	0f 85 da 03 00 00    	jne    c0027c28 <__adddf3+0x645>
c002784e:	e9 cf 03 00 00       	jmp    c0027c22 <__adddf3+0x63f>
c0027853:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027856:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027859:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002785c:	f7 d1                	not    ecx
c002785e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027864:	0f 84 70 03 00 00    	je     c0027bda <__adddf3+0x5f7>
c002786a:	d1 ea                	shr    edx,1
c002786c:	89 c1                	mov    ecx,eax
c002786e:	c1 e1 1f             	shl    ecx,0x1f
c0027871:	09 ca                	or     edx,ecx
c0027873:	d1 e8                	shr    eax,1
c0027875:	e9 6f 03 00 00       	jmp    c0027be9 <__adddf3+0x606>
c002787a:	85 c0                	test   eax,eax
c002787c:	0f 89 67 03 00 00    	jns    c0027be9 <__adddf3+0x606>
c0027882:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0027885:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027888:	f7 d1                	not    ecx
c002788a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027890:	0f 84 44 03 00 00    	je     c0027bda <__adddf3+0x5f7>
c0027896:	89 d1                	mov    ecx,edx
c0027898:	d1 e9                	shr    ecx,1
c002789a:	83 e2 01             	and    edx,0x1
c002789d:	09 ca                	or     edx,ecx
c002789f:	89 c1                	mov    ecx,eax
c00278a1:	c1 e1 1f             	shl    ecx,0x1f
c00278a4:	09 ca                	or     edx,ecx
c00278a6:	d1 e8                	shr    eax,1
c00278a8:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00278ad:	e9 37 03 00 00       	jmp    c0027be9 <__adddf3+0x606>
c00278b2:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00278b5:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00278bb:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c00278be:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00278c1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00278c7:	29 de                	sub    esi,ebx
c00278c9:	85 f6                	test   esi,esi
c00278cb:	0f 8e bd 00 00 00    	jle    c002798e <__adddf3+0x3ab>
c00278d1:	85 db                	test   ebx,ebx
c00278d3:	75 17                	jne    c00278ec <__adddf3+0x309>
c00278d5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00278d8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00278db:	0f 84 47 03 00 00    	je     c0027c28 <__adddf3+0x645>
c00278e1:	4e                   	dec    esi
c00278e2:	75 20                	jne    c0027904 <__adddf3+0x321>
c00278e4:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00278e7:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00278ea:	eb 5b                	jmp    c0027947 <__adddf3+0x364>
c00278ec:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00278ef:	f7 d3                	not    ebx
c00278f1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00278f7:	0f 84 2b 03 00 00    	je     c0027c28 <__adddf3+0x645>
c00278fd:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027904:	83 fe 1f             	cmp    esi,0x1f
c0027907:	7e 49                	jle    c0027952 <__adddf3+0x36f>
c0027909:	83 fe 3f             	cmp    esi,0x3f
c002790c:	0f 8f 16 03 00 00    	jg     c0027c28 <__adddf3+0x645>
c0027912:	83 e6 1f             	and    esi,0x1f
c0027915:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027918:	89 f1                	mov    ecx,esi
c002791a:	d3 ef                	shr    edi,cl
c002791c:	31 db                	xor    ebx,ebx
c002791e:	85 f6                	test   esi,esi
c0027920:	74 13                	je     c0027935 <__adddf3+0x352>
c0027922:	b9 20 00 00 00       	mov    ecx,0x20
c0027927:	29 f1                	sub    ecx,esi
c0027929:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002792c:	d3 e6                	shl    esi,cl
c002792e:	31 db                	xor    ebx,ebx
c0027930:	85 f6                	test   esi,esi
c0027932:	0f 95 c3             	setne  bl
c0027935:	31 c9                	xor    ecx,ecx
c0027937:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002793b:	0f 95 c1             	setne  cl
c002793e:	09 cf                	or     edi,ecx
c0027940:	09 fb                	or     ebx,edi
c0027942:	29 da                	sub    edx,ebx
c0027944:	83 d8 00             	sbb    eax,0x0
c0027947:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002794a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002794d:	e9 aa 01 00 00       	jmp    c0027afc <__adddf3+0x519>
c0027952:	bf 20 00 00 00       	mov    edi,0x20
c0027957:	29 f7                	sub    edi,esi
c0027959:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002795c:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002795f:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027962:	d3 e3                	shl    ebx,cl
c0027964:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027967:	89 f1                	mov    ecx,esi
c0027969:	d3 ef                	shr    edi,cl
c002796b:	09 fb                	or     ebx,edi
c002796d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027970:	89 f1                	mov    ecx,esi
c0027972:	d3 ef                	shr    edi,cl
c0027974:	89 fe                	mov    esi,edi
c0027976:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027979:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002797c:	d3 e7                	shl    edi,cl
c002797e:	85 ff                	test   edi,edi
c0027980:	0f 95 c1             	setne  cl
c0027983:	0f b6 c9             	movzx  ecx,cl
c0027986:	09 cb                	or     ebx,ecx
c0027988:	29 da                	sub    edx,ebx
c002798a:	19 f0                	sbb    eax,esi
c002798c:	eb b9                	jmp    c0027947 <__adddf3+0x364>
c002798e:	0f 84 cd 00 00 00    	je     c0027a61 <__adddf3+0x47e>
c0027994:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0027997:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002799a:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002799d:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00279a1:	75 1b                	jne    c00279be <__adddf3+0x3db>
c00279a3:	89 d6                	mov    esi,edx
c00279a5:	09 c6                	or     esi,eax
c00279a7:	0f 84 7b 02 00 00    	je     c0027c28 <__adddf3+0x645>
c00279ad:	4b                   	dec    ebx
c00279ae:	75 24                	jne    c00279d4 <__adddf3+0x3f1>
c00279b0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00279b3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00279b6:	29 d1                	sub    ecx,edx
c00279b8:	19 c6                	sbb    esi,eax
c00279ba:	89 ca                	mov    edx,ecx
c00279bc:	eb 61                	jmp    c0027a1f <__adddf3+0x43c>
c00279be:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00279c1:	f7 d6                	not    esi
c00279c3:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00279c9:	0f 84 59 02 00 00    	je     c0027c28 <__adddf3+0x645>
c00279cf:	0d 00 00 00 80       	or     eax,0x80000000
c00279d4:	83 fb 1f             	cmp    ebx,0x1f
c00279d7:	7e 4d                	jle    c0027a26 <__adddf3+0x443>
c00279d9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00279dc:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00279df:	83 fb 3f             	cmp    ebx,0x3f
c00279e2:	0f 8f 40 02 00 00    	jg     c0027c28 <__adddf3+0x645>
c00279e8:	83 e3 1f             	and    ebx,0x1f
c00279eb:	89 d9                	mov    ecx,ebx
c00279ed:	89 c7                	mov    edi,eax
c00279ef:	d3 ef                	shr    edi,cl
c00279f1:	31 db                	xor    ebx,ebx
c00279f3:	85 c9                	test   ecx,ecx
c00279f5:	74 12                	je     c0027a09 <__adddf3+0x426>
c00279f7:	be 20 00 00 00       	mov    esi,0x20
c00279fc:	29 ce                	sub    esi,ecx
c00279fe:	89 f1                	mov    ecx,esi
c0027a00:	d3 e0                	shl    eax,cl
c0027a02:	31 db                	xor    ebx,ebx
c0027a04:	85 c0                	test   eax,eax
c0027a06:	0f 95 c3             	setne  bl
c0027a09:	31 c0                	xor    eax,eax
c0027a0b:	85 d2                	test   edx,edx
c0027a0d:	0f 95 c0             	setne  al
c0027a10:	09 c7                	or     edi,eax
c0027a12:	09 fb                	or     ebx,edi
c0027a14:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027a17:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027a1a:	29 da                	sub    edx,ebx
c0027a1c:	83 de 00             	sbb    esi,0x0
c0027a1f:	89 f0                	mov    eax,esi
c0027a21:	e9 d6 00 00 00       	jmp    c0027afc <__adddf3+0x519>
c0027a26:	be 20 00 00 00       	mov    esi,0x20
c0027a2b:	29 de                	sub    esi,ebx
c0027a2d:	89 c7                	mov    edi,eax
c0027a2f:	89 f1                	mov    ecx,esi
c0027a31:	d3 e7                	shl    edi,cl
c0027a33:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027a36:	89 d7                	mov    edi,edx
c0027a38:	88 d9                	mov    cl,bl
c0027a3a:	d3 ef                	shr    edi,cl
c0027a3c:	89 f9                	mov    ecx,edi
c0027a3e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027a41:	09 cf                	or     edi,ecx
c0027a43:	88 d9                	mov    cl,bl
c0027a45:	d3 e8                	shr    eax,cl
c0027a47:	89 f1                	mov    ecx,esi
c0027a49:	d3 e2                	shl    edx,cl
c0027a4b:	85 d2                	test   edx,edx
c0027a4d:	0f 95 c2             	setne  dl
c0027a50:	0f b6 d2             	movzx  edx,dl
c0027a53:	09 d7                	or     edi,edx
c0027a55:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027a58:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027a5b:	29 fa                	sub    edx,edi
c0027a5d:	19 c6                	sbb    esi,eax
c0027a5f:	eb be                	jmp    c0027a1f <__adddf3+0x43c>
c0027a61:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027a64:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027a67:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0027a6d:	75 6a                	jne    c0027ad9 <__adddf3+0x4f6>
c0027a6f:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027a73:	75 58                	jne    c0027acd <__adddf3+0x4ea>
c0027a75:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027a78:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027a7b:	89 d6                	mov    esi,edx
c0027a7d:	09 c6                	or     esi,eax
c0027a7f:	75 17                	jne    c0027a98 <__adddf3+0x4b5>
c0027a81:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027a84:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027a87:	85 db                	test   ebx,ebx
c0027a89:	0f 85 99 01 00 00    	jne    c0027c28 <__adddf3+0x645>
c0027a8f:	31 ff                	xor    edi,edi
c0027a91:	31 c9                	xor    ecx,ecx
c0027a93:	e9 90 01 00 00       	jmp    c0027c28 <__adddf3+0x645>
c0027a98:	85 db                	test   ebx,ebx
c0027a9a:	0f 84 88 01 00 00    	je     c0027c28 <__adddf3+0x645>
c0027aa0:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027aa3:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027aa6:	85 c0                	test   eax,eax
c0027aa8:	79 10                	jns    c0027aba <__adddf3+0x4d7>
c0027aaa:	31 c9                	xor    ecx,ecx
c0027aac:	f7 da                	neg    edx
c0027aae:	0f 95 c1             	setne  cl
c0027ab1:	01 c8                	add    eax,ecx
c0027ab3:	f7 d8                	neg    eax
c0027ab5:	e9 2f 01 00 00       	jmp    c0027be9 <__adddf3+0x606>
c0027aba:	31 ff                	xor    edi,edi
c0027abc:	31 c9                	xor    ecx,ecx
c0027abe:	89 c3                	mov    ebx,eax
c0027ac0:	09 d3                	or     ebx,edx
c0027ac2:	0f 84 60 01 00 00    	je     c0027c28 <__adddf3+0x645>
c0027ac8:	e9 05 01 00 00       	jmp    c0027bd2 <__adddf3+0x5ef>
c0027acd:	31 ff                	xor    edi,edi
c0027acf:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027ad4:	e9 4f 01 00 00       	jmp    c0027c28 <__adddf3+0x645>
c0027ad9:	89 c1                	mov    ecx,eax
c0027adb:	89 d0                	mov    eax,edx
c0027add:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027ae0:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0027ae3:	89 ca                	mov    edx,ecx
c0027ae5:	85 c9                	test   ecx,ecx
c0027ae7:	79 2c                	jns    c0027b15 <__adddf3+0x532>
c0027ae9:	31 c9                	xor    ecx,ecx
c0027aeb:	f7 d8                	neg    eax
c0027aed:	0f 95 c1             	setne  cl
c0027af0:	01 ca                	add    edx,ecx
c0027af2:	f7 da                	neg    edx
c0027af4:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027af7:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027afa:	eb 19                	jmp    c0027b15 <__adddf3+0x532>
c0027afc:	85 c0                	test   eax,eax
c0027afe:	0f 89 e5 00 00 00    	jns    c0027be9 <__adddf3+0x606>
c0027b04:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027b09:	89 c1                	mov    ecx,eax
c0027b0b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027b0e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027b11:	89 d0                	mov    eax,edx
c0027b13:	89 ca                	mov    edx,ecx
c0027b15:	85 d2                	test   edx,edx
c0027b17:	74 59                	je     c0027b72 <__adddf3+0x58f>
c0027b19:	0f bd da             	bsr    ebx,edx
c0027b1c:	83 f3 1f             	xor    ebx,0x1f
c0027b1f:	88 d9                	mov    cl,bl
c0027b21:	d3 e2                	shl    edx,cl
c0027b23:	bf 20 00 00 00       	mov    edi,0x20
c0027b28:	89 f9                	mov    ecx,edi
c0027b2a:	29 d9                	sub    ecx,ebx
c0027b2c:	89 c6                	mov    esi,eax
c0027b2e:	d3 ee                	shr    esi,cl
c0027b30:	09 d6                	or     esi,edx
c0027b32:	88 d9                	mov    cl,bl
c0027b34:	d3 e0                	shl    eax,cl
c0027b36:	89 c2                	mov    edx,eax
c0027b38:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b3b:	25 ff 07 00 00       	and    eax,0x7ff
c0027b40:	39 d8                	cmp    eax,ebx
c0027b42:	7f 22                	jg     c0027b66 <__adddf3+0x583>
c0027b44:	29 c3                	sub    ebx,eax
c0027b46:	43                   	inc    ebx
c0027b47:	88 d9                	mov    cl,bl
c0027b49:	d3 ea                	shr    edx,cl
c0027b4b:	29 df                	sub    edi,ebx
c0027b4d:	89 f9                	mov    ecx,edi
c0027b4f:	89 f0                	mov    eax,esi
c0027b51:	d3 e0                	shl    eax,cl
c0027b53:	09 c2                	or     edx,eax
c0027b55:	89 f0                	mov    eax,esi
c0027b57:	88 d9                	mov    cl,bl
c0027b59:	d3 e8                	shr    eax,cl
c0027b5b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b5e:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027b64:	eb 6f                	jmp    c0027bd5 <__adddf3+0x5f2>
c0027b66:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b69:	29 d8                	sub    eax,ebx
c0027b6b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b6e:	89 f0                	mov    eax,esi
c0027b70:	eb 59                	jmp    c0027bcb <__adddf3+0x5e8>
c0027b72:	85 c0                	test   eax,eax
c0027b74:	74 6a                	je     c0027be0 <__adddf3+0x5fd>
c0027b76:	0f bd c8             	bsr    ecx,eax
c0027b79:	83 f1 1f             	xor    ecx,0x1f
c0027b7c:	d3 e0                	shl    eax,cl
c0027b7e:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027b81:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027b87:	83 c1 20             	add    ecx,0x20
c0027b8a:	39 cb                	cmp    ebx,ecx
c0027b8c:	7f 35                	jg     c0027bc3 <__adddf3+0x5e0>
c0027b8e:	29 d9                	sub    ecx,ebx
c0027b90:	8d 71 01             	lea    esi,[ecx+0x1]
c0027b93:	83 fe 1f             	cmp    esi,0x1f
c0027b96:	7e 09                	jle    c0027ba1 <__adddf3+0x5be>
c0027b98:	83 e9 1f             	sub    ecx,0x1f
c0027b9b:	d3 e8                	shr    eax,cl
c0027b9d:	89 c3                	mov    ebx,eax
c0027b9f:	eb 11                	jmp    c0027bb2 <__adddf3+0x5cf>
c0027ba1:	b9 20 00 00 00       	mov    ecx,0x20
c0027ba6:	29 f1                	sub    ecx,esi
c0027ba8:	89 c3                	mov    ebx,eax
c0027baa:	d3 e3                	shl    ebx,cl
c0027bac:	89 f1                	mov    ecx,esi
c0027bae:	d3 e8                	shr    eax,cl
c0027bb0:	89 c2                	mov    edx,eax
c0027bb2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027bb5:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027bba:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027bbd:	89 d0                	mov    eax,edx
c0027bbf:	89 da                	mov    edx,ebx
c0027bc1:	eb 26                	jmp    c0027be9 <__adddf3+0x606>
c0027bc3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027bc6:	29 cf                	sub    edi,ecx
c0027bc8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027bcb:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027bd0:	eb 17                	jmp    c0027be9 <__adddf3+0x606>
c0027bd2:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027bd5:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027bd8:	eb 0f                	jmp    c0027be9 <__adddf3+0x606>
c0027bda:	31 d2                	xor    edx,edx
c0027bdc:	31 c0                	xor    eax,eax
c0027bde:	eb 09                	jmp    c0027be9 <__adddf3+0x606>
c0027be0:	89 c2                	mov    edx,eax
c0027be2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027be9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027bec:	c1 e1 14             	shl    ecx,0x14
c0027bef:	89 c3                	mov    ebx,eax
c0027bf1:	c1 eb 0b             	shr    ebx,0xb
c0027bf4:	09 d9                	or     ecx,ebx
c0027bf6:	89 d3                	mov    ebx,edx
c0027bf8:	c1 eb 0b             	shr    ebx,0xb
c0027bfb:	c1 e0 15             	shl    eax,0x15
c0027bfe:	09 d8                	or     eax,ebx
c0027c00:	89 c7                	mov    edi,eax
c0027c02:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027c08:	0f 95 c0             	setne  al
c0027c0b:	89 c6                	mov    esi,eax
c0027c0d:	09 f3                	or     ebx,esi
c0027c0f:	83 e3 01             	and    ebx,0x1
c0027c12:	c1 ea 0a             	shr    edx,0xa
c0027c15:	21 da                	and    edx,ebx
c0027c17:	89 f8                	mov    eax,edi
c0027c19:	01 d0                	add    eax,edx
c0027c1b:	83 d1 00             	adc    ecx,0x0
c0027c1e:	89 c7                	mov    edi,eax
c0027c20:	eb 06                	jmp    c0027c28 <__adddf3+0x645>
c0027c22:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027c25:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027c28:	89 f8                	mov    eax,edi
c0027c2a:	89 ca                	mov    edx,ecx
c0027c2c:	83 c4 24             	add    esp,0x24
c0027c2f:	5b                   	pop    ebx
c0027c30:	5e                   	pop    esi
c0027c31:	5f                   	pop    edi
c0027c32:	5d                   	pop    ebp
c0027c33:	c3                   	ret    

c0027c34 <__subdf3>:
c0027c34:	55                   	push   ebp
c0027c35:	89 e5                	mov    ebp,esp
c0027c37:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027c3a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027c3d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027c43:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027c46:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027c49:	5d                   	pop    ebp
c0027c4a:	e9 94 f9 ff ff       	jmp    c00275e3 <__adddf3>

c0027c4f <__negdf2>:
c0027c4f:	55                   	push   ebp
c0027c50:	89 e5                	mov    ebp,esp
c0027c52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027c55:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027c58:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027c5e:	5d                   	pop    ebp
c0027c5f:	c3                   	ret    

c0027c60 <__muldf3>:
c0027c60:	55                   	push   ebp
c0027c61:	89 e5                	mov    ebp,esp
c0027c63:	57                   	push   edi
c0027c64:	56                   	push   esi
c0027c65:	53                   	push   ebx
c0027c66:	83 ec 24             	sub    esp,0x24
c0027c69:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027c6c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027c6f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027c72:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027c75:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027c78:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027c7b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027c7e:	89 c8                	mov    eax,ecx
c0027c80:	c1 f8 14             	sar    eax,0x14
c0027c83:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027c86:	89 f8                	mov    eax,edi
c0027c88:	89 fb                	mov    ebx,edi
c0027c8a:	c1 e3 0b             	shl    ebx,0xb
c0027c8d:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027c90:	c1 e1 0b             	shl    ecx,0xb
c0027c93:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027c99:	c1 e8 15             	shr    eax,0x15
c0027c9c:	09 c1                	or     ecx,eax
c0027c9e:	89 d6                	mov    esi,edx
c0027ca0:	89 d0                	mov    eax,edx
c0027ca2:	c1 f8 14             	sar    eax,0x14
c0027ca5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027ca8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027cab:	89 c3                	mov    ebx,eax
c0027cad:	c1 e3 0b             	shl    ebx,0xb
c0027cb0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027cb3:	c1 e6 0b             	shl    esi,0xb
c0027cb6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027cbc:	c1 e8 15             	shr    eax,0x15
c0027cbf:	09 c6                	or     esi,eax
c0027cc1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027cc4:	25 ff 07 00 00       	and    eax,0x7ff
c0027cc9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027ccc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027ccf:	25 ff 07 00 00       	and    eax,0x7ff
c0027cd4:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027cd7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027cda:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027cdd:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027ce4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027ce7:	40                   	inc    eax
c0027ce8:	a9 fe 07 00 00       	test   eax,0x7fe
c0027ced:	0f 85 8d 00 00 00    	jne    c0027d80 <__muldf3+0x120>
c0027cf3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027cf6:	09 c8                	or     eax,ecx
c0027cf8:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027cfc:	74 44                	je     c0027d42 <__muldf3+0xe2>
c0027cfe:	85 c0                	test   eax,eax
c0027d00:	0f 85 31 02 00 00    	jne    c0027f37 <__muldf3+0x2d7>
c0027d06:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d09:	40                   	inc    eax
c0027d0a:	a9 fe 07 00 00       	test   eax,0x7fe
c0027d0f:	75 13                	jne    c0027d24 <__muldf3+0xc4>
c0027d11:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027d14:	09 f1                	or     ecx,esi
c0027d16:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027d1a:	74 22                	je     c0027d3e <__muldf3+0xde>
c0027d1c:	85 c9                	test   ecx,ecx
c0027d1e:	0f 85 0d 02 00 00    	jne    c0027f31 <__muldf3+0x2d1>
c0027d24:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027d28:	0f 89 09 02 00 00    	jns    c0027f37 <__muldf3+0x2d7>
c0027d2e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027d31:	05 00 00 00 80       	add    eax,0x80000000
c0027d36:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027d39:	e9 f9 01 00 00       	jmp    c0027f37 <__muldf3+0x2d7>
c0027d3e:	85 c9                	test   ecx,ecx
c0027d40:	eb 2e                	jmp    c0027d70 <__muldf3+0x110>
c0027d42:	85 c0                	test   eax,eax
c0027d44:	74 20                	je     c0027d66 <__muldf3+0x106>
c0027d46:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027d49:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027d4c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027d4f:	c1 ef 1f             	shr    edi,0x1f
c0027d52:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027d55:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027d58:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027d5b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027d5e:	09 f9                	or     ecx,edi
c0027d60:	78 1e                	js     c0027d80 <__muldf3+0x120>
c0027d62:	89 c3                	mov    ebx,eax
c0027d64:	eb e0                	jmp    c0027d46 <__muldf3+0xe6>
c0027d66:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d69:	f7 d0                	not    eax
c0027d6b:	a9 ff 07 00 00       	test   eax,0x7ff
c0027d70:	75 b2                	jne    c0027d24 <__muldf3+0xc4>
c0027d72:	31 ff                	xor    edi,edi
c0027d74:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027d7b:	e9 b7 01 00 00       	jmp    c0027f37 <__muldf3+0x2d7>
c0027d80:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d83:	40                   	inc    eax
c0027d84:	a9 fe 07 00 00       	test   eax,0x7fe
c0027d89:	75 57                	jne    c0027de2 <__muldf3+0x182>
c0027d8b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027d8e:	09 f0                	or     eax,esi
c0027d90:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027d94:	74 23                	je     c0027db9 <__muldf3+0x159>
c0027d96:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027d9a:	0f 89 91 01 00 00    	jns    c0027f31 <__muldf3+0x2d1>
c0027da0:	85 c0                	test   eax,eax
c0027da2:	0f 85 89 01 00 00    	jne    c0027f31 <__muldf3+0x2d1>
c0027da8:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027dab:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027db1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027db4:	e9 7e 01 00 00       	jmp    c0027f37 <__muldf3+0x2d7>
c0027db9:	85 c0                	test   eax,eax
c0027dbb:	75 0c                	jne    c0027dc9 <__muldf3+0x169>
c0027dbd:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027dc1:	0f 89 6a 01 00 00    	jns    c0027f31 <__muldf3+0x2d1>
c0027dc7:	eb df                	jmp    c0027da8 <__muldf3+0x148>
c0027dc9:	01 f6                	add    esi,esi
c0027dcb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027dce:	c1 ea 1f             	shr    edx,0x1f
c0027dd1:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027dd4:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027dd7:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027dda:	09 d6                	or     esi,edx
c0027ddc:	78 04                	js     c0027de2 <__muldf3+0x182>
c0027dde:	89 c3                	mov    ebx,eax
c0027de0:	eb e7                	jmp    c0027dc9 <__muldf3+0x169>
c0027de2:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027de8:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027dee:	89 c8                	mov    eax,ecx
c0027df0:	f7 e6                	mul    esi
c0027df2:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027df5:	89 c7                	mov    edi,eax
c0027df7:	89 c8                	mov    eax,ecx
c0027df9:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027dfc:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027dff:	89 c1                	mov    ecx,eax
c0027e01:	89 f0                	mov    eax,esi
c0027e03:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027e06:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027e09:	89 c6                	mov    esi,eax
c0027e0b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027e0e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027e11:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027e14:	31 c0                	xor    eax,eax
c0027e16:	01 f1                	add    ecx,esi
c0027e18:	0f 92 c0             	setb   al
c0027e1b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027e1e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027e21:	83 d6 00             	adc    esi,0x0
c0027e24:	01 c7                	add    edi,eax
c0027e26:	83 d6 00             	adc    esi,0x0
c0027e29:	01 ca                	add    edx,ecx
c0027e2b:	0f 92 c1             	setb   cl
c0027e2e:	0f b6 c9             	movzx  ecx,cl
c0027e31:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027e34:	83 d6 00             	adc    esi,0x0
c0027e37:	01 cf                	add    edi,ecx
c0027e39:	83 d6 00             	adc    esi,0x0
c0027e3c:	31 c9                	xor    ecx,ecx
c0027e3e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027e41:	0f 95 c1             	setne  cl
c0027e44:	09 cf                	or     edi,ecx
c0027e46:	85 f6                	test   esi,esi
c0027e48:	78 0c                	js     c0027e56 <__muldf3+0x1f6>
c0027e4a:	01 f6                	add    esi,esi
c0027e4c:	89 f8                	mov    eax,edi
c0027e4e:	c1 e8 1f             	shr    eax,0x1f
c0027e51:	09 c6                	or     esi,eax
c0027e53:	01 ff                	add    edi,edi
c0027e55:	4b                   	dec    ebx
c0027e56:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027e5c:	0f 8f 85 00 00 00    	jg     c0027ee7 <__muldf3+0x287>
c0027e62:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027e68:	85 db                	test   ebx,ebx
c0027e6a:	0f 8f 84 00 00 00    	jg     c0027ef4 <__muldf3+0x294>
c0027e70:	83 fb cc             	cmp    ebx,0xffffffcc
c0027e73:	7c 79                	jl     c0027eee <__muldf3+0x28e>
c0027e75:	ba 01 00 00 00       	mov    edx,0x1
c0027e7a:	29 da                	sub    edx,ebx
c0027e7c:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027e82:	83 fa 1f             	cmp    edx,0x1f
c0027e85:	7e 30                	jle    c0027eb7 <__muldf3+0x257>
c0027e87:	83 fa 20             	cmp    edx,0x20
c0027e8a:	75 0b                	jne    c0027e97 <__muldf3+0x237>
c0027e8c:	31 c0                	xor    eax,eax
c0027e8e:	85 ff                	test   edi,edi
c0027e90:	0f 95 c0             	setne  al
c0027e93:	89 c7                	mov    edi,eax
c0027e95:	eb 1a                	jmp    c0027eb1 <__muldf3+0x251>
c0027e97:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027e9a:	89 f0                	mov    eax,esi
c0027e9c:	d3 e0                	shl    eax,cl
c0027e9e:	09 f8                	or     eax,edi
c0027ea0:	0f 95 c0             	setne  al
c0027ea3:	0f b6 c0             	movzx  eax,al
c0027ea6:	89 c7                	mov    edi,eax
c0027ea8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027ead:	29 d9                	sub    ecx,ebx
c0027eaf:	d3 ee                	shr    esi,cl
c0027eb1:	09 f7                	or     edi,esi
c0027eb3:	31 db                	xor    ebx,ebx
c0027eb5:	eb 3b                	jmp    c0027ef2 <__muldf3+0x292>
c0027eb7:	83 c3 1f             	add    ebx,0x1f
c0027eba:	89 f0                	mov    eax,esi
c0027ebc:	88 d9                	mov    cl,bl
c0027ebe:	d3 e0                	shl    eax,cl
c0027ec0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027ec3:	89 f8                	mov    eax,edi
c0027ec5:	88 d1                	mov    cl,dl
c0027ec7:	d3 e8                	shr    eax,cl
c0027ec9:	89 c1                	mov    ecx,eax
c0027ecb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027ece:	09 c8                	or     eax,ecx
c0027ed0:	88 d9                	mov    cl,bl
c0027ed2:	d3 e7                	shl    edi,cl
c0027ed4:	31 db                	xor    ebx,ebx
c0027ed6:	85 ff                	test   edi,edi
c0027ed8:	0f 95 c3             	setne  bl
c0027edb:	89 df                	mov    edi,ebx
c0027edd:	09 c7                	or     edi,eax
c0027edf:	88 d1                	mov    cl,dl
c0027ee1:	d3 ee                	shr    esi,cl
c0027ee3:	31 db                	xor    ebx,ebx
c0027ee5:	eb 0d                	jmp    c0027ef4 <__muldf3+0x294>
c0027ee7:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027eec:	eb 02                	jmp    c0027ef0 <__muldf3+0x290>
c0027eee:	31 db                	xor    ebx,ebx
c0027ef0:	31 ff                	xor    edi,edi
c0027ef2:	31 f6                	xor    esi,esi
c0027ef4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027ef7:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027efa:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027eff:	09 c3                	or     ebx,eax
c0027f01:	c1 e3 14             	shl    ebx,0x14
c0027f04:	89 f0                	mov    eax,esi
c0027f06:	c1 e8 0b             	shr    eax,0xb
c0027f09:	09 c3                	or     ebx,eax
c0027f0b:	89 f8                	mov    eax,edi
c0027f0d:	c1 e8 0b             	shr    eax,0xb
c0027f10:	c1 e6 15             	shl    esi,0x15
c0027f13:	09 c6                	or     esi,eax
c0027f15:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027f1b:	0f 95 c1             	setne  cl
c0027f1e:	09 c8                	or     eax,ecx
c0027f20:	83 e0 01             	and    eax,0x1
c0027f23:	c1 ef 0a             	shr    edi,0xa
c0027f26:	21 c7                	and    edi,eax
c0027f28:	01 f7                	add    edi,esi
c0027f2a:	83 d3 00             	adc    ebx,0x0
c0027f2d:	89 da                	mov    edx,ebx
c0027f2f:	eb 03                	jmp    c0027f34 <__muldf3+0x2d4>
c0027f31:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027f34:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027f37:	89 f8                	mov    eax,edi
c0027f39:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027f3c:	83 c4 24             	add    esp,0x24
c0027f3f:	5b                   	pop    ebx
c0027f40:	5e                   	pop    esi
c0027f41:	5f                   	pop    edi
c0027f42:	5d                   	pop    ebp
c0027f43:	c3                   	ret    

c0027f44 <__divdf3>:
c0027f44:	55                   	push   ebp
c0027f45:	89 e5                	mov    ebp,esp
c0027f47:	57                   	push   edi
c0027f48:	56                   	push   esi
c0027f49:	53                   	push   ebx
c0027f4a:	83 ec 2c             	sub    esp,0x2c
c0027f4d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027f50:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027f53:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027f56:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027f59:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027f5c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027f5f:	89 ce                	mov    esi,ecx
c0027f61:	89 c8                	mov    eax,ecx
c0027f63:	c1 f8 14             	sar    eax,0x14
c0027f66:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027f69:	89 f8                	mov    eax,edi
c0027f6b:	89 fb                	mov    ebx,edi
c0027f6d:	c1 e3 0b             	shl    ebx,0xb
c0027f70:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027f73:	c1 e6 0b             	shl    esi,0xb
c0027f76:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027f7c:	c1 e8 15             	shr    eax,0x15
c0027f7f:	09 c6                	or     esi,eax
c0027f81:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027f84:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027f87:	89 c2                	mov    edx,eax
c0027f89:	c1 fa 14             	sar    edx,0x14
c0027f8c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027f8f:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027f92:	89 de                	mov    esi,ebx
c0027f94:	c1 e6 0b             	shl    esi,0xb
c0027f97:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027f9a:	c1 e0 0b             	shl    eax,0xb
c0027f9d:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027fa2:	c1 eb 15             	shr    ebx,0x15
c0027fa5:	09 d8                	or     eax,ebx
c0027fa7:	89 c2                	mov    edx,eax
c0027fa9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027fac:	25 ff 07 00 00       	and    eax,0x7ff
c0027fb1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027fb4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027fb7:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027fbd:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027fc0:	29 d8                	sub    eax,ebx
c0027fc2:	05 ff 03 00 00       	add    eax,0x3ff
c0027fc7:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027fca:	46                   	inc    esi
c0027fcb:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027fd1:	0f 85 a5 00 00 00    	jne    c002807c <__divdf3+0x138>
c0027fd7:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027fda:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027fdd:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027fe1:	74 2a                	je     c002800d <__divdf3+0xc9>
c0027fe3:	85 f6                	test   esi,esi
c0027fe5:	0f 85 cc 02 00 00    	jne    c00282b7 <__divdf3+0x373>
c0027feb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027fee:	40                   	inc    eax
c0027fef:	a9 fe 07 00 00       	test   eax,0x7fe
c0027ff4:	75 26                	jne    c002801c <__divdf3+0xd8>
c0027ff6:	85 db                	test   ebx,ebx
c0027ff8:	74 22                	je     c002801c <__divdf3+0xd8>
c0027ffa:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027ffd:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028000:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028003:	09 d0                	or     eax,edx
c0028005:	0f 85 ac 02 00 00    	jne    c00282b7 <__divdf3+0x373>
c002800b:	eb 63                	jmp    c0028070 <__divdf3+0x12c>
c002800d:	85 f6                	test   esi,esi
c002800f:	75 22                	jne    c0028033 <__divdf3+0xef>
c0028011:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028014:	40                   	inc    eax
c0028015:	a9 fe 07 00 00       	test   eax,0x7fe
c002801a:	74 36                	je     c0028052 <__divdf3+0x10e>
c002801c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0028020:	0f 89 91 02 00 00    	jns    c00282b7 <__divdf3+0x373>
c0028026:	89 f8                	mov    eax,edi
c0028028:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002802e:	e9 80 02 00 00       	jmp    c00282b3 <__divdf3+0x36f>
c0028033:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028036:	01 f6                	add    esi,esi
c0028038:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002803b:	c1 ef 1f             	shr    edi,0x1f
c002803e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028041:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0028044:	8d 48 ff             	lea    ecx,[eax-0x1]
c0028047:	09 f7                	or     edi,esi
c0028049:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c002804c:	78 2e                	js     c002807c <__divdf3+0x138>
c002804e:	89 c8                	mov    eax,ecx
c0028050:	eb e1                	jmp    c0028033 <__divdf3+0xef>
c0028052:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028055:	09 d0                	or     eax,edx
c0028057:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c002805b:	74 0f                	je     c002806c <__divdf3+0x128>
c002805d:	85 c0                	test   eax,eax
c002805f:	74 bb                	je     c002801c <__divdf3+0xd8>
c0028061:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028064:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028067:	e9 4b 02 00 00       	jmp    c00282b7 <__divdf3+0x373>
c002806c:	85 c0                	test   eax,eax
c002806e:	75 ac                	jne    c002801c <__divdf3+0xd8>
c0028070:	31 ff                	xor    edi,edi
c0028072:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0028077:	e9 3b 02 00 00       	jmp    c00282b7 <__divdf3+0x373>
c002807c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002807f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0028082:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0028088:	75 6b                	jne    c00280f5 <__divdf3+0x1b1>
c002808a:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002808d:	09 d6                	or     esi,edx
c002808f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0028093:	74 28                	je     c00280bd <__divdf3+0x179>
c0028095:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028098:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c002809b:	85 f6                	test   esi,esi
c002809d:	0f 85 14 02 00 00    	jne    c00282b7 <__divdf3+0x373>
c00280a3:	31 ff                	xor    edi,edi
c00280a5:	31 c9                	xor    ecx,ecx
c00280a7:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00280aa:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00280ad:	0f 89 04 02 00 00    	jns    c00282b7 <__divdf3+0x373>
c00280b3:	b9 00 00 00 80       	mov    ecx,0x80000000
c00280b8:	e9 fa 01 00 00       	jmp    c00282b7 <__divdf3+0x373>
c00280bd:	85 f6                	test   esi,esi
c00280bf:	75 1b                	jne    c00280dc <__divdf3+0x198>
c00280c1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00280c4:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00280c7:	25 00 00 00 80       	and    eax,0x80000000
c00280cc:	31 c9                	xor    ecx,ecx
c00280ce:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c00280d3:	89 cf                	mov    edi,ecx
c00280d5:	89 c1                	mov    ecx,eax
c00280d7:	e9 db 01 00 00       	jmp    c00282b7 <__divdf3+0x373>
c00280dc:	01 d2                	add    edx,edx
c00280de:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00280e1:	c1 eb 1f             	shr    ebx,0x1f
c00280e4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00280e7:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c00280ea:	8d 48 01             	lea    ecx,[eax+0x1]
c00280ed:	09 da                	or     edx,ebx
c00280ef:	78 04                	js     c00280f5 <__divdf3+0x1b1>
c00280f1:	89 c8                	mov    eax,ecx
c00280f3:	eb e7                	jmp    c00280dc <__divdf3+0x198>
c00280f5:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00280f8:	81 ce 00 00 00 80    	or     esi,0x80000000
c00280fe:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028104:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0028107:	39 d6                	cmp    esi,edx
c0028109:	77 0d                	ja     c0028118 <__divdf3+0x1d4>
c002810b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002810e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028111:	72 1b                	jb     c002812e <__divdf3+0x1ea>
c0028113:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0028116:	75 16                	jne    c002812e <__divdf3+0x1ea>
c0028118:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002811b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002811e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0028121:	83 de 00             	sbb    esi,0x0
c0028124:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0028127:	ba 01 00 00 00       	mov    edx,0x1
c002812c:	eb 02                	jmp    c0028130 <__divdf3+0x1ec>
c002812e:	31 d2                	xor    edx,edx
c0028130:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0028137:	31 ff                	xor    edi,edi
c0028139:	01 ff                	add    edi,edi
c002813b:	89 d1                	mov    ecx,edx
c002813d:	c1 e9 1f             	shr    ecx,0x1f
c0028140:	09 cf                	or     edi,ecx
c0028142:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0028145:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0028148:	89 da                	mov    edx,ebx
c002814a:	89 f3                	mov    ebx,esi
c002814c:	8d 34 36             	lea    esi,[esi+esi*1]
c002814f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028152:	c1 e9 1f             	shr    ecx,0x1f
c0028155:	09 ce                	or     esi,ecx
c0028157:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002815a:	01 c9                	add    ecx,ecx
c002815c:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c002815f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028162:	85 db                	test   ebx,ebx
c0028164:	78 29                	js     c002818f <__divdf3+0x24b>
c0028166:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0028169:	72 07                	jb     c0028172 <__divdf3+0x22e>
c002816b:	75 3c                	jne    c00281a9 <__divdf3+0x265>
c002816d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028170:	77 37                	ja     c00281a9 <__divdf3+0x265>
c0028172:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028175:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0028178:	31 d2                	xor    edx,edx
c002817a:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c002817d:	0f 97 c2             	seta   dl
c0028180:	29 d6                	sub    esi,edx
c0028182:	89 d9                	mov    ecx,ebx
c0028184:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0028187:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c002818a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002818d:	eb 17                	jmp    c00281a6 <__divdf3+0x262>
c002818f:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028192:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028195:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028198:	0f 97 c1             	seta   cl
c002819b:	0f b6 c9             	movzx  ecx,cl
c002819e:	29 ce                	sub    esi,ecx
c00281a0:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c00281a3:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c00281a6:	83 ca 01             	or     edx,0x1
c00281a9:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c00281ac:	75 8b                	jne    c0028139 <__divdf3+0x1f5>
c00281ae:	c1 e7 09             	shl    edi,0x9
c00281b1:	89 d1                	mov    ecx,edx
c00281b3:	c1 e9 17             	shr    ecx,0x17
c00281b6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00281b9:	09 f3                	or     ebx,esi
c00281bb:	0f 95 c3             	setne  bl
c00281be:	0f b6 db             	movzx  ebx,bl
c00281c1:	c1 e2 09             	shl    edx,0x9
c00281c4:	09 d3                	or     ebx,edx
c00281c6:	89 ca                	mov    edx,ecx
c00281c8:	09 fa                	or     edx,edi
c00281ca:	78 0c                	js     c00281d8 <__divdf3+0x294>
c00281cc:	01 d2                	add    edx,edx
c00281ce:	89 d9                	mov    ecx,ebx
c00281d0:	c1 e9 1f             	shr    ecx,0x1f
c00281d3:	09 ca                	or     edx,ecx
c00281d5:	01 db                	add    ebx,ebx
c00281d7:	48                   	dec    eax
c00281d8:	3d fe 07 00 00       	cmp    eax,0x7fe
c00281dd:	0f 8f 83 00 00 00    	jg     c0028266 <__divdf3+0x322>
c00281e3:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00281e9:	85 c0                	test   eax,eax
c00281eb:	0f 8f 82 00 00 00    	jg     c0028273 <__divdf3+0x32f>
c00281f1:	83 f8 cc             	cmp    eax,0xffffffcc
c00281f4:	7c 77                	jl     c002826d <__divdf3+0x329>
c00281f6:	be 01 00 00 00       	mov    esi,0x1
c00281fb:	29 c6                	sub    esi,eax
c00281fd:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028203:	83 fe 1f             	cmp    esi,0x1f
c0028206:	7e 2f                	jle    c0028237 <__divdf3+0x2f3>
c0028208:	83 fe 20             	cmp    esi,0x20
c002820b:	75 0a                	jne    c0028217 <__divdf3+0x2d3>
c002820d:	85 db                	test   ebx,ebx
c002820f:	0f 95 c3             	setne  bl
c0028212:	0f b6 db             	movzx  ebx,bl
c0028215:	eb 1a                	jmp    c0028231 <__divdf3+0x2ed>
c0028217:	8d 48 3f             	lea    ecx,[eax+0x3f]
c002821a:	89 d7                	mov    edi,edx
c002821c:	d3 e7                	shl    edi,cl
c002821e:	89 f9                	mov    ecx,edi
c0028220:	09 d9                	or     ecx,ebx
c0028222:	0f 95 c3             	setne  bl
c0028225:	0f b6 db             	movzx  ebx,bl
c0028228:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002822d:	29 c1                	sub    ecx,eax
c002822f:	d3 ea                	shr    edx,cl
c0028231:	09 d3                	or     ebx,edx
c0028233:	31 c0                	xor    eax,eax
c0028235:	eb 3a                	jmp    c0028271 <__divdf3+0x32d>
c0028237:	83 c0 1f             	add    eax,0x1f
c002823a:	89 d7                	mov    edi,edx
c002823c:	88 c1                	mov    cl,al
c002823e:	d3 e7                	shl    edi,cl
c0028240:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028243:	89 df                	mov    edi,ebx
c0028245:	89 f1                	mov    ecx,esi
c0028247:	d3 ef                	shr    edi,cl
c0028249:	89 f9                	mov    ecx,edi
c002824b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002824e:	09 cf                	or     edi,ecx
c0028250:	88 c1                	mov    cl,al
c0028252:	d3 e3                	shl    ebx,cl
c0028254:	85 db                	test   ebx,ebx
c0028256:	0f 95 c3             	setne  bl
c0028259:	0f b6 db             	movzx  ebx,bl
c002825c:	09 fb                	or     ebx,edi
c002825e:	89 f1                	mov    ecx,esi
c0028260:	d3 ea                	shr    edx,cl
c0028262:	31 c0                	xor    eax,eax
c0028264:	eb 0d                	jmp    c0028273 <__divdf3+0x32f>
c0028266:	b8 ff 07 00 00       	mov    eax,0x7ff
c002826b:	eb 02                	jmp    c002826f <__divdf3+0x32b>
c002826d:	31 c0                	xor    eax,eax
c002826f:	31 db                	xor    ebx,ebx
c0028271:	31 d2                	xor    edx,edx
c0028273:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0028276:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028279:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c002827f:	09 c8                	or     eax,ecx
c0028281:	c1 e0 14             	shl    eax,0x14
c0028284:	89 d1                	mov    ecx,edx
c0028286:	c1 e9 0b             	shr    ecx,0xb
c0028289:	09 c8                	or     eax,ecx
c002828b:	89 c6                	mov    esi,eax
c002828d:	89 d9                	mov    ecx,ebx
c002828f:	c1 e9 0b             	shr    ecx,0xb
c0028292:	c1 e2 15             	shl    edx,0x15
c0028295:	09 ca                	or     edx,ecx
c0028297:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c002829d:	0f 95 c0             	setne  al
c00282a0:	09 c1                	or     ecx,eax
c00282a2:	83 e1 01             	and    ecx,0x1
c00282a5:	c1 eb 0a             	shr    ebx,0xa
c00282a8:	21 cb                	and    ebx,ecx
c00282aa:	01 d3                	add    ebx,edx
c00282ac:	89 d8                	mov    eax,ebx
c00282ae:	83 d6 00             	adc    esi,0x0
c00282b1:	89 f2                	mov    edx,esi
c00282b3:	89 c7                	mov    edi,eax
c00282b5:	89 d1                	mov    ecx,edx
c00282b7:	89 f8                	mov    eax,edi
c00282b9:	89 ca                	mov    edx,ecx
c00282bb:	83 c4 2c             	add    esp,0x2c
c00282be:	5b                   	pop    ebx
c00282bf:	5e                   	pop    esi
c00282c0:	5f                   	pop    edi
c00282c1:	5d                   	pop    ebp
c00282c2:	c3                   	ret    

c00282c3 <__floatsidf>:
c00282c3:	55                   	push   ebp
c00282c4:	89 e5                	mov    ebp,esp
c00282c6:	56                   	push   esi
c00282c7:	53                   	push   ebx
c00282c8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00282cb:	85 db                	test   ebx,ebx
c00282cd:	7e 15                	jle    c00282e4 <__floatsidf+0x21>
c00282cf:	0f bd cb             	bsr    ecx,ebx
c00282d2:	83 f1 1f             	xor    ecx,0x1f
c00282d5:	d3 e3                	shl    ebx,cl
c00282d7:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00282dd:	b8 1e 04 00 00       	mov    eax,0x41e
c00282e2:	eb 21                	jmp    c0028305 <__floatsidf+0x42>
c00282e4:	b8 00 00 00 00       	mov    eax,0x0
c00282e9:	ba 00 00 00 00       	mov    edx,0x0
c00282ee:	74 2a                	je     c002831a <__floatsidf+0x57>
c00282f0:	f7 db                	neg    ebx
c00282f2:	0f bd cb             	bsr    ecx,ebx
c00282f5:	83 f1 1f             	xor    ecx,0x1f
c00282f8:	d3 e3                	shl    ebx,cl
c00282fa:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028300:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028305:	29 c8                	sub    eax,ecx
c0028307:	c1 e0 14             	shl    eax,0x14
c002830a:	89 c1                	mov    ecx,eax
c002830c:	89 de                	mov    esi,ebx
c002830e:	c1 ee 0b             	shr    esi,0xb
c0028311:	09 f1                	or     ecx,esi
c0028313:	89 ca                	mov    edx,ecx
c0028315:	c1 e3 15             	shl    ebx,0x15
c0028318:	89 d8                	mov    eax,ebx
c002831a:	5b                   	pop    ebx
c002831b:	5e                   	pop    esi
c002831c:	5d                   	pop    ebp
c002831d:	c3                   	ret    

c002831e <__floatunsidf>:
c002831e:	55                   	push   ebp
c002831f:	89 e5                	mov    ebp,esp
c0028321:	56                   	push   esi
c0028322:	53                   	push   ebx
c0028323:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028326:	85 db                	test   ebx,ebx
c0028328:	74 2a                	je     c0028354 <__floatunsidf+0x36>
c002832a:	0f bd cb             	bsr    ecx,ebx
c002832d:	83 f1 1f             	xor    ecx,0x1f
c0028330:	d3 e3                	shl    ebx,cl
c0028332:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028338:	b8 1e 04 00 00       	mov    eax,0x41e
c002833d:	29 c8                	sub    eax,ecx
c002833f:	c1 e0 14             	shl    eax,0x14
c0028342:	89 c1                	mov    ecx,eax
c0028344:	89 de                	mov    esi,ebx
c0028346:	c1 ee 0b             	shr    esi,0xb
c0028349:	09 f1                	or     ecx,esi
c002834b:	89 ca                	mov    edx,ecx
c002834d:	c1 e3 15             	shl    ebx,0x15
c0028350:	89 d8                	mov    eax,ebx
c0028352:	eb 04                	jmp    c0028358 <__floatunsidf+0x3a>
c0028354:	31 c0                	xor    eax,eax
c0028356:	31 d2                	xor    edx,edx
c0028358:	5b                   	pop    ebx
c0028359:	5e                   	pop    esi
c002835a:	5d                   	pop    ebp
c002835b:	c3                   	ret    

c002835c <__fixdfsi>:
c002835c:	55                   	push   ebp
c002835d:	89 e5                	mov    ebp,esp
c002835f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028362:	89 d1                	mov    ecx,edx
c0028364:	c1 e1 0b             	shl    ecx,0xb
c0028367:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002836d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028370:	c1 e8 15             	shr    eax,0x15
c0028373:	09 c1                	or     ecx,eax
c0028375:	c1 fa 14             	sar    edx,0x14
c0028378:	78 1f                	js     c0028399 <__fixdfsi+0x3d>
c002837a:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028380:	31 c0                	xor    eax,eax
c0028382:	83 fa 1e             	cmp    edx,0x1e
c0028385:	77 40                	ja     c00283c7 <__fixdfsi+0x6b>
c0028387:	89 c8                	mov    eax,ecx
c0028389:	0d 00 00 00 80       	or     eax,0x80000000
c002838e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028393:	29 d1                	sub    ecx,edx
c0028395:	d3 e8                	shr    eax,cl
c0028397:	eb 2e                	jmp    c00283c7 <__fixdfsi+0x6b>
c0028399:	31 c0                	xor    eax,eax
c002839b:	81 c2 01 04 00 00    	add    edx,0x401
c00283a1:	78 24                	js     c00283c7 <__fixdfsi+0x6b>
c00283a3:	83 fa 1e             	cmp    edx,0x1e
c00283a6:	7e 09                	jle    c00283b1 <__fixdfsi+0x55>
c00283a8:	83 fa 1f             	cmp    edx,0x1f
c00283ab:	75 18                	jne    c00283c5 <__fixdfsi+0x69>
c00283ad:	85 c9                	test   ecx,ecx
c00283af:	75 14                	jne    c00283c5 <__fixdfsi+0x69>
c00283b1:	89 c8                	mov    eax,ecx
c00283b3:	0d 00 00 00 80       	or     eax,0x80000000
c00283b8:	b9 1f 00 00 00       	mov    ecx,0x1f
c00283bd:	29 d1                	sub    ecx,edx
c00283bf:	d3 e8                	shr    eax,cl
c00283c1:	f7 d8                	neg    eax
c00283c3:	eb 02                	jmp    c00283c7 <__fixdfsi+0x6b>
c00283c5:	31 c0                	xor    eax,eax
c00283c7:	5d                   	pop    ebp
c00283c8:	c3                   	ret    

c00283c9 <__fixunsdfsi>:
c00283c9:	55                   	push   ebp
c00283ca:	89 e5                	mov    ebp,esp
c00283cc:	53                   	push   ebx
c00283cd:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00283d0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00283d3:	89 d3                	mov    ebx,edx
c00283d5:	c1 fb 14             	sar    ebx,0x14
c00283d8:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c00283de:	31 c0                	xor    eax,eax
c00283e0:	83 fb 1f             	cmp    ebx,0x1f
c00283e3:	77 1d                	ja     c0028402 <__fixunsdfsi+0x39>
c00283e5:	89 d0                	mov    eax,edx
c00283e7:	c1 e0 0b             	shl    eax,0xb
c00283ea:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00283ef:	c1 e9 15             	shr    ecx,0x15
c00283f2:	09 c8                	or     eax,ecx
c00283f4:	0d 00 00 00 80       	or     eax,0x80000000
c00283f9:	b9 1f 00 00 00       	mov    ecx,0x1f
c00283fe:	29 d9                	sub    ecx,ebx
c0028400:	d3 e8                	shr    eax,cl
c0028402:	5b                   	pop    ebx
c0028403:	5d                   	pop    ebp
c0028404:	c3                   	ret    

c0028405 <__cmpdf2>:
c0028405:	55                   	push   ebp
c0028406:	89 e5                	mov    ebp,esp
c0028408:	57                   	push   edi
c0028409:	56                   	push   esi
c002840a:	53                   	push   ebx
c002840b:	83 ec 0c             	sub    esp,0xc
c002840e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028411:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028414:	89 ca                	mov    edx,ecx
c0028416:	c1 ea 14             	shr    edx,0x14
c0028419:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002841f:	89 cb                	mov    ebx,ecx
c0028421:	c1 fb 1f             	sar    ebx,0x1f
c0028424:	31 da                	xor    edx,ebx
c0028426:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028429:	89 df                	mov    edi,ebx
c002842b:	c1 e7 0b             	shl    edi,0xb
c002842e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028431:	c1 e1 0b             	shl    ecx,0xb
c0028434:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002843a:	c1 eb 15             	shr    ebx,0x15
c002843d:	09 d9                	or     ecx,ebx
c002843f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0028442:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028445:	89 ce                	mov    esi,ecx
c0028447:	c1 ee 14             	shr    esi,0x14
c002844a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028450:	89 cb                	mov    ebx,ecx
c0028452:	c1 fb 1f             	sar    ebx,0x1f
c0028455:	31 de                	xor    esi,ebx
c0028457:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c002845a:	89 df                	mov    edi,ebx
c002845c:	c1 e7 0b             	shl    edi,0xb
c002845f:	c1 e1 0b             	shl    ecx,0xb
c0028462:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028468:	c1 eb 15             	shr    ebx,0x15
c002846b:	09 d9                	or     ecx,ebx
c002846d:	89 d3                	mov    ebx,edx
c002846f:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028475:	43                   	inc    ebx
c0028476:	83 fb 01             	cmp    ebx,0x1
c0028479:	77 08                	ja     c0028483 <__cmpdf2+0x7e>
c002847b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c002847e:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028481:	75 68                	jne    c00284eb <__cmpdf2+0xe6>
c0028483:	89 f3                	mov    ebx,esi
c0028485:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002848b:	43                   	inc    ebx
c002848c:	83 fb 01             	cmp    ebx,0x1
c002848f:	77 06                	ja     c0028497 <__cmpdf2+0x92>
c0028491:	89 fb                	mov    ebx,edi
c0028493:	09 cb                	or     ebx,ecx
c0028495:	75 54                	jne    c00284eb <__cmpdf2+0xe6>
c0028497:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002849a:	09 f8                	or     eax,edi
c002849c:	09 c8                	or     eax,ecx
c002849e:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c00284a1:	75 12                	jne    c00284b5 <__cmpdf2+0xb0>
c00284a3:	8d 42 01             	lea    eax,[edx+0x1]
c00284a6:	83 f8 01             	cmp    eax,0x1
c00284a9:	77 0a                	ja     c00284b5 <__cmpdf2+0xb0>
c00284ab:	8d 5e 01             	lea    ebx,[esi+0x1]
c00284ae:	31 c0                	xor    eax,eax
c00284b0:	83 fb 01             	cmp    ebx,0x1
c00284b3:	76 36                	jbe    c00284eb <__cmpdf2+0xe6>
c00284b5:	b8 01 00 00 00       	mov    eax,0x1
c00284ba:	39 f2                	cmp    edx,esi
c00284bc:	7f 2d                	jg     c00284eb <__cmpdf2+0xe6>
c00284be:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00284c3:	7c 26                	jl     c00284eb <__cmpdf2+0xe6>
c00284c5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00284c8:	77 07                	ja     c00284d1 <__cmpdf2+0xcc>
c00284ca:	72 16                	jb     c00284e2 <__cmpdf2+0xdd>
c00284cc:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c00284cf:	76 0a                	jbe    c00284db <__cmpdf2+0xd6>
c00284d1:	89 d0                	mov    eax,edx
c00284d3:	c1 f8 1f             	sar    eax,0x1f
c00284d6:	83 c8 01             	or     eax,0x1
c00284d9:	eb 10                	jmp    c00284eb <__cmpdf2+0xe6>
c00284db:	b8 00 00 00 00       	mov    eax,0x0
c00284e0:	73 09                	jae    c00284eb <__cmpdf2+0xe6>
c00284e2:	89 d0                	mov    eax,edx
c00284e4:	c1 f8 1f             	sar    eax,0x1f
c00284e7:	83 e0 02             	and    eax,0x2
c00284ea:	48                   	dec    eax
c00284eb:	83 c4 0c             	add    esp,0xc
c00284ee:	5b                   	pop    ebx
c00284ef:	5e                   	pop    esi
c00284f0:	5f                   	pop    edi
c00284f1:	5d                   	pop    ebp
c00284f2:	c3                   	ret    

c00284f3 <__eqdf2>:
c00284f3:	55                   	push   ebp
c00284f4:	89 e5                	mov    ebp,esp
c00284f6:	50                   	push   eax
c00284f7:	6a 01                	push   0x1
c00284f9:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00284fc:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00284ff:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028502:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028505:	e8 fb fe ff ff       	call   c0028405 <__cmpdf2>
c002850a:	83 c4 18             	add    esp,0x18
c002850d:	c9                   	leave  
c002850e:	c3                   	ret    

c002850f <__nedf2>:
c002850f:	eb e2                	jmp    c00284f3 <__eqdf2>

c0028511 <__gtdf2>:
c0028511:	55                   	push   ebp
c0028512:	89 e5                	mov    ebp,esp
c0028514:	50                   	push   eax
c0028515:	6a ff                	push   0xffffffff
c0028517:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002851a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002851d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028520:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028523:	e8 dd fe ff ff       	call   c0028405 <__cmpdf2>
c0028528:	83 c4 18             	add    esp,0x18
c002852b:	c9                   	leave  
c002852c:	c3                   	ret    

c002852d <__gedf2>:
c002852d:	eb e2                	jmp    c0028511 <__gtdf2>

c002852f <__ltdf2>:
c002852f:	eb c2                	jmp    c00284f3 <__eqdf2>

c0028531 <__ledf2>:
c0028531:	eb c0                	jmp    c00284f3 <__eqdf2>

c0028533 <__truncdfsf2>:
c0028533:	55                   	push   ebp
c0028534:	89 e5                	mov    ebp,esp
c0028536:	57                   	push   edi
c0028537:	56                   	push   esi
c0028538:	53                   	push   ebx
c0028539:	83 ec 0c             	sub    esp,0xc
c002853c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002853f:	89 d1                	mov    ecx,edx
c0028541:	c1 f9 14             	sar    ecx,0x14
c0028544:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028547:	89 df                	mov    edi,ebx
c0028549:	c1 e7 0b             	shl    edi,0xb
c002854c:	89 d0                	mov    eax,edx
c002854e:	c1 e0 0b             	shl    eax,0xb
c0028551:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028556:	c1 eb 15             	shr    ebx,0x15
c0028559:	09 d8                	or     eax,ebx
c002855b:	89 cb                	mov    ebx,ecx
c002855d:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028563:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028569:	81 fe fd 00 00 00    	cmp    esi,0xfd
c002856f:	0f 86 9e 00 00 00    	jbe    c0028613 <__truncdfsf2+0xe0>
c0028575:	85 db                	test   ebx,ebx
c0028577:	75 0a                	jne    c0028583 <__truncdfsf2+0x50>
c0028579:	c1 fa 17             	sar    edx,0x17
c002857c:	30 d2                	xor    dl,dl
c002857e:	e9 84 00 00 00       	jmp    c0028607 <__truncdfsf2+0xd4>
c0028583:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028589:	83 fe 83             	cmp    esi,0xffffff83
c002858c:	7d 4b                	jge    c00285d9 <__truncdfsf2+0xa6>
c002858e:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0028593:	29 f1                	sub    ecx,esi
c0028595:	83 f9 1f             	cmp    ecx,0x1f
c0028598:	7f 6b                	jg     c0028605 <__truncdfsf2+0xd2>
c002859a:	0d 00 00 00 80       	or     eax,0x80000000
c002859f:	89 c3                	mov    ebx,eax
c00285a1:	d3 eb                	shr    ebx,cl
c00285a3:	be 01 00 00 00       	mov    esi,0x1
c00285a8:	d3 e6                	shl    esi,cl
c00285aa:	4e                   	dec    esi
c00285ab:	21 f0                	and    eax,esi
c00285ad:	09 f8                	or     eax,edi
c00285af:	0f 95 c0             	setne  al
c00285b2:	0f b6 c0             	movzx  eax,al
c00285b5:	09 c3                	or     ebx,eax
c00285b7:	89 d9                	mov    ecx,ebx
c00285b9:	c1 e9 08             	shr    ecx,0x8
c00285bc:	f6 c3 7f             	test   bl,0x7f
c00285bf:	0f 95 c0             	setne  al
c00285c2:	09 c8                	or     eax,ecx
c00285c4:	83 e0 01             	and    eax,0x1
c00285c7:	c1 eb 07             	shr    ebx,0x7
c00285ca:	21 c3                	and    ebx,eax
c00285cc:	81 e2 00 00 00 80    	and    edx,0x80000000
c00285d2:	09 d1                	or     ecx,edx
c00285d4:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c00285d7:	eb 76                	jmp    c002864f <__truncdfsf2+0x11c>
c00285d9:	83 c6 80             	add    esi,0xffffff80
c00285dc:	7e 1d                	jle    c00285fb <__truncdfsf2+0xc8>
c00285de:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c00285e4:	75 0b                	jne    c00285f1 <__truncdfsf2+0xbe>
c00285e6:	09 f8                	or     eax,edi
c00285e8:	74 09                	je     c00285f3 <__truncdfsf2+0xc0>
c00285ea:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c00285ef:	eb 02                	jmp    c00285f3 <__truncdfsf2+0xc0>
c00285f1:	31 c0                	xor    eax,eax
c00285f3:	c1 fa 17             	sar    edx,0x17
c00285f6:	80 ca ff             	or     dl,0xff
c00285f9:	eb 0e                	jmp    c0028609 <__truncdfsf2+0xd6>
c00285fb:	c1 fa 1f             	sar    edx,0x1f
c00285fe:	c1 e2 08             	shl    edx,0x8
c0028601:	09 ca                	or     edx,ecx
c0028603:	eb 04                	jmp    c0028609 <__truncdfsf2+0xd6>
c0028605:	31 d2                	xor    edx,edx
c0028607:	31 c0                	xor    eax,eax
c0028609:	c1 e2 17             	shl    edx,0x17
c002860c:	c1 e8 08             	shr    eax,0x8
c002860f:	09 d0                	or     eax,edx
c0028611:	eb 3c                	jmp    c002864f <__truncdfsf2+0x11c>
c0028613:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028619:	89 ca                	mov    edx,ecx
c002861b:	c1 fa 0b             	sar    edx,0xb
c002861e:	c1 e2 08             	shl    edx,0x8
c0028621:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028624:	31 db                	xor    ebx,ebx
c0028626:	85 ff                	test   edi,edi
c0028628:	0f 95 c3             	setne  bl
c002862b:	09 d8                	or     eax,ebx
c002862d:	89 c3                	mov    ebx,eax
c002862f:	c1 eb 08             	shr    ebx,0x8
c0028632:	a8 7f                	test   al,0x7f
c0028634:	0f 95 c2             	setne  dl
c0028637:	89 d6                	mov    esi,edx
c0028639:	09 de                	or     esi,ebx
c002863b:	83 e6 01             	and    esi,0x1
c002863e:	c1 e8 07             	shr    eax,0x7
c0028641:	21 f0                	and    eax,esi
c0028643:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028646:	09 ca                	or     edx,ecx
c0028648:	c1 e2 17             	shl    edx,0x17
c002864b:	09 da                	or     edx,ebx
c002864d:	01 d0                	add    eax,edx
c002864f:	83 c4 0c             	add    esp,0xc
c0028652:	5b                   	pop    ebx
c0028653:	5e                   	pop    esi
c0028654:	5f                   	pop    edi
c0028655:	5d                   	pop    ebp
c0028656:	c3                   	ret    

c0028657 <__extendsfdf2>:
c0028657:	55                   	push   ebp
c0028658:	89 e5                	mov    ebp,esp
c002865a:	57                   	push   edi
c002865b:	56                   	push   esi
c002865c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002865f:	89 d1                	mov    ecx,edx
c0028661:	c1 f9 17             	sar    ecx,0x17
c0028664:	c1 e2 08             	shl    edx,0x8
c0028667:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002866d:	89 c8                	mov    eax,ecx
c002866f:	80 e4 f8             	and    ah,0xf8
c0028672:	8d 71 01             	lea    esi,[ecx+0x1]
c0028675:	81 e6 fe 00 00 00    	and    esi,0xfe
c002867b:	75 27                	jne    c00286a4 <__extendsfdf2+0x4d>
c002867d:	81 e1 ff 00 00 00    	and    ecx,0xff
c0028683:	75 18                	jne    c002869d <__extendsfdf2+0x46>
c0028685:	85 d2                	test   edx,edx
c0028687:	74 20                	je     c00286a9 <__extendsfdf2+0x52>
c0028689:	41                   	inc    ecx
c002868a:	01 d2                	add    edx,edx
c002868c:	79 fb                	jns    c0028689 <__extendsfdf2+0x32>
c002868e:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028694:	29 c8                	sub    eax,ecx
c0028696:	05 81 03 00 00       	add    eax,0x381
c002869b:	eb 0c                	jmp    c00286a9 <__extendsfdf2+0x52>
c002869d:	05 00 07 00 00       	add    eax,0x700
c00286a2:	eb 05                	jmp    c00286a9 <__extendsfdf2+0x52>
c00286a4:	05 80 03 00 00       	add    eax,0x380
c00286a9:	c1 e0 14             	shl    eax,0x14
c00286ac:	89 c1                	mov    ecx,eax
c00286ae:	89 d0                	mov    eax,edx
c00286b0:	c1 e8 0b             	shr    eax,0xb
c00286b3:	09 c1                	or     ecx,eax
c00286b5:	c1 e2 15             	shl    edx,0x15
c00286b8:	89 d0                	mov    eax,edx
c00286ba:	89 ca                	mov    edx,ecx
c00286bc:	5e                   	pop    esi
c00286bd:	5f                   	pop    edi
c00286be:	5d                   	pop    ebp
c00286bf:	c3                   	ret    

c00286c0 <fabs>:
c00286c0:	83 ec 0c             	sub    esp,0xc
c00286c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00286ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00286ce:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00286d3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00286d7:	dd 04 24             	fld    QWORD PTR [esp]
c00286da:	83 c4 0c             	add    esp,0xc
c00286dd:	c3                   	ret    
c00286de:	66 90                	xchg   ax,ax

c00286e0 <lrint>:
c00286e0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00286e4:	83 ec 04             	sub    esp,0x4
c00286e7:	db 1c 24             	fistp  DWORD PTR [esp]
c00286ea:	58                   	pop    eax
c00286eb:	c3                   	ret    

c00286ec <lrintf>:
c00286ec:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c00286f0:	83 ec 04             	sub    esp,0x4
c00286f3:	db 1c 24             	fistp  DWORD PTR [esp]
c00286f6:	58                   	pop    eax
c00286f7:	c3                   	ret    

Disassembly of section .init:

c00286f8 <_init>:
c00286f8:	55                   	push   ebp
c00286f9:	89 e5                	mov    ebp,esp
c00286fb:	e8 18 7a fd ff       	call   c0000118 <frame_dummy>
c0028700:	e8 63 e0 ff ff       	call   c0026768 <__do_global_ctors_aux>
c0028705:	5d                   	pop    ebp
c0028706:	c3                   	ret    

Disassembly of section .fini:

c0028707 <_fini>:
c0028707:	55                   	push   ebp
c0028708:	89 e5                	mov    ebp,esp
c002870a:	e8 99 79 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002870f:	5d                   	pop    ebp
c0028710:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028712 <Computer::~Computer()>:
c0028712:	83 ec 0c             	sub    esp,0xc
c0028715:	ba 48 a2 02 c0       	mov    edx,0xc002a248
c002871a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002871e:	89 10                	mov    DWORD PTR [eax],edx
c0028720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028724:	83 ec 0c             	sub    esp,0xc
c0028727:	50                   	push   eax
c0028728:	e8 b5 bb fe ff       	call   c00142e2 <Device::~Device()>
c002872d:	83 c4 10             	add    esp,0x10
c0028730:	90                   	nop
c0028731:	83 c4 0c             	add    esp,0xc
c0028734:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028736 <Computer::~Computer()>:
c0028736:	83 ec 0c             	sub    esp,0xc
c0028739:	83 ec 0c             	sub    esp,0xc
c002873c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028740:	e8 cd ff ff ff       	call   c0028712 <Computer::~Computer()>
c0028745:	83 c4 10             	add    esp,0x10
c0028748:	83 ec 08             	sub    esp,0x8
c002874b:	68 ec 01 00 00       	push   0x1ec
c0028750:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028754:	e8 b1 a7 fe ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c0028759:	83 c4 10             	add    esp,0x10
c002875c:	83 c4 0c             	add    esp,0xc
c002875f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028760 <idleCommon()>:
c0028760:	83 ec 0c             	sub    esp,0xc
c0028763:	e8 1c 57 ff ff       	call   c001de84 <lockScheduler()>
c0028768:	e8 53 5a ff ff       	call   c001e1c0 <schedule()>
c002876d:	83 c4 0c             	add    esp,0xc
c0028770:	e9 11 57 ff ff       	jmp    c001de86 <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028776 <LinkedList<UnixFile>::~LinkedList()>:
c0028776:	90                   	nop
c0028777:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028778 <LinkedList<UnixFile>::LinkedList()>:
c0028778:	83 ec 0c             	sub    esp,0xc
c002877b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002877f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028785:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028789:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028790:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028794:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002879b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002879f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00287a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287a9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00287b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287b4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00287bb:	83 ec 0c             	sub    esp,0xc
c00287be:	68 12 a5 02 c0       	push   0xc002a512
c00287c3:	e8 22 a8 fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c00287c8:	83 c4 10             	add    esp,0x10
c00287cb:	90                   	nop
c00287cc:	83 c4 0c             	add    esp,0xc
c00287cf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00287d0 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00287d0:	83 ec 0c             	sub    esp,0xc
c00287d3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00287d8:	75 10                	jne    c00287ea <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00287da:	83 ec 0c             	sub    esp,0xc
c00287dd:	68 2c a5 02 c0       	push   0xc002a52c
c00287e2:	e8 a8 1e ff ff       	call   c001a68f <Krnl::panic(char const*)>
c00287e7:	83 c4 10             	add    esp,0x10
c00287ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00287f0:	85 c0                	test   eax,eax
c00287f2:	74 34                	je     c0028828 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00287f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287fb:	85 c0                	test   eax,eax
c00287fd:	74 29                	je     c0028828 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00287ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028803:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028806:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002880a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002880d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028811:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028815:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002881c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002881f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028826:	eb 65                	jmp    c002888d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002882c:	8b 00                	mov    eax,DWORD PTR [eax]
c002882e:	85 c0                	test   eax,eax
c0028830:	75 4b                	jne    c002887d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028832:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028836:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028839:	85 c0                	test   eax,eax
c002883b:	75 40                	jne    c002887d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002883d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028841:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028845:	89 10                	mov    DWORD PTR [eax],edx
c0028847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002884b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002884f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028856:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028859:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028864:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028867:	85 c0                	test   eax,eax
c0028869:	74 22                	je     c002888d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002886b:	83 ec 0c             	sub    esp,0xc
c002886e:	68 4e a5 02 c0       	push   0xc002a54e
c0028873:	e8 17 1e ff ff       	call   c001a68f <Krnl::panic(char const*)>
c0028878:	83 c4 10             	add    esp,0x10
c002887b:	eb 10                	jmp    c002888d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002887d:	83 ec 0c             	sub    esp,0xc
c0028880:	68 58 a5 02 c0       	push   0xc002a558
c0028885:	e8 05 1e ff ff       	call   c001a68f <Krnl::panic(char const*)>
c002888a:	83 c4 10             	add    esp,0x10
c002888d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028891:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028894:	8d 50 01             	lea    edx,[eax+0x1]
c0028897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002889b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002889e:	90                   	nop
c002889f:	83 c4 0c             	add    esp,0xc
c00288a2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00288a4 <LinkedList<UnixFile>::getFirstElement()>:
c00288a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00288aa:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00288ac <LinkedList<UnixFile>::removeFirst()>:
c00288ac:	83 ec 0c             	sub    esp,0xc
c00288af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00288b5:	85 c0                	test   eax,eax
c00288b7:	75 12                	jne    c00288cb <LinkedList<UnixFile>::removeFirst()+0x1f>
c00288b9:	83 ec 0c             	sub    esp,0xc
c00288bc:	68 64 a5 02 c0       	push   0xc002a564
c00288c1:	e8 c9 1d ff ff       	call   c001a68f <Krnl::panic(char const*)>
c00288c6:	83 c4 10             	add    esp,0x10
c00288c9:	eb 7e                	jmp    c0028949 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00288cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288cf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288d2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288d5:	85 c0                	test   eax,eax
c00288d7:	74 10                	je     c00288e9 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00288d9:	83 ec 0c             	sub    esp,0xc
c00288dc:	68 af a5 02 c0       	push   0xc002a5af
c00288e1:	e8 a9 1d ff ff       	call   c001a68f <Krnl::panic(char const*)>
c00288e6:	83 c4 10             	add    esp,0x10
c00288e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00288ef:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288f2:	85 c0                	test   eax,eax
c00288f4:	75 33                	jne    c0028929 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00288f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028904:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002890b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002890f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028912:	83 f8 01             	cmp    eax,0x1
c0028915:	74 21                	je     c0028938 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028917:	83 ec 0c             	sub    esp,0xc
c002891a:	68 88 a5 02 c0       	push   0xc002a588
c002891f:	e8 6b 1d ff ff       	call   c001a68f <Krnl::panic(char const*)>
c0028924:	83 c4 10             	add    esp,0x10
c0028927:	eb 0f                	jmp    c0028938 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028929:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002892d:	8b 00                	mov    eax,DWORD PTR [eax]
c002892f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028936:	89 10                	mov    DWORD PTR [eax],edx
c0028938:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002893c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002893f:	8d 50 ff             	lea    edx,[eax-0x1]
c0028942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028946:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028949:	83 c4 0c             	add    esp,0xc
c002894c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002894e <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002894e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028952:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028955:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0028956 <DriverlessDevice::~DriverlessDevice()>:
c0028956:	ba 44 ad 02 c0       	mov    edx,0xc002ad44
c002895b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002895f:	89 10                	mov    DWORD PTR [eax],edx
c0028961:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028965:	50                   	push   eax
c0028966:	e8 77 b9 fe ff       	call   c00142e2 <Device::~Device()>
c002896b:	83 c4 04             	add    esp,0x4
c002896e:	90                   	nop
c002896f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028970 <DriverlessDevice::~DriverlessDevice()>:
c0028970:	83 ec 0c             	sub    esp,0xc
c0028973:	83 ec 0c             	sub    esp,0xc
c0028976:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002897a:	e8 d7 ff ff ff       	call   c0028956 <DriverlessDevice::~DriverlessDevice()>
c002897f:	83 c4 10             	add    esp,0x10
c0028982:	83 ec 08             	sub    esp,0x8
c0028985:	68 58 01 00 00       	push   0x158
c002898a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002898e:	e8 77 a5 fe ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c0028993:	83 c4 10             	add    esp,0x10
c0028996:	83 c4 0c             	add    esp,0xc
c0028999:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002899a <LinkedList<Device>::addElement(Device*)>:
c002899a:	83 ec 0c             	sub    esp,0xc
c002899d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00289a2:	75 10                	jne    c00289b4 <LinkedList<Device>::addElement(Device*)+0x1a>
c00289a4:	83 ec 0c             	sub    esp,0xc
c00289a7:	68 2c a5 02 c0       	push   0xc002a52c
c00289ac:	e8 de 1c ff ff       	call   c001a68f <Krnl::panic(char const*)>
c00289b1:	83 c4 10             	add    esp,0x10
c00289b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00289ba:	85 c0                	test   eax,eax
c00289bc:	74 3a                	je     c00289f8 <LinkedList<Device>::addElement(Device*)+0x5e>
c00289be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289c5:	85 c0                	test   eax,eax
c00289c7:	74 2f                	je     c00289f8 <LinkedList<Device>::addElement(Device*)+0x5e>
c00289c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289cd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289d0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00289d4:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00289da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289de:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00289e2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00289e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289e9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289ec:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00289f6:	eb 68                	jmp    c0028a60 <LinkedList<Device>::addElement(Device*)+0xc6>
c00289f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00289fe:	85 c0                	test   eax,eax
c0028a00:	75 4e                	jne    c0028a50 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a06:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a09:	85 c0                	test   eax,eax
c0028a0b:	75 43                	jne    c0028a50 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028a0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a11:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a15:	89 10                	mov    DWORD PTR [eax],edx
c0028a17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a1f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028a22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a26:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a29:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028a33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a37:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a3a:	85 c0                	test   eax,eax
c0028a3c:	74 22                	je     c0028a60 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028a3e:	83 ec 0c             	sub    esp,0xc
c0028a41:	68 4e a5 02 c0       	push   0xc002a54e
c0028a46:	e8 44 1c ff ff       	call   c001a68f <Krnl::panic(char const*)>
c0028a4b:	83 c4 10             	add    esp,0x10
c0028a4e:	eb 10                	jmp    c0028a60 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028a50:	83 ec 0c             	sub    esp,0xc
c0028a53:	68 58 a5 02 c0       	push   0xc002a558
c0028a58:	e8 32 1c ff ff       	call   c001a68f <Krnl::panic(char const*)>
c0028a5d:	83 c4 10             	add    esp,0x10
c0028a60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a64:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a67:	8d 50 01             	lea    edx,[eax+0x1]
c0028a6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a6e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028a71:	90                   	nop
c0028a72:	83 c4 0c             	add    esp,0xc
c0028a75:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0028a76 <LinkedList<Device>::LinkedList()>:
c0028a76:	83 ec 0c             	sub    esp,0xc
c0028a79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a7d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028a83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a87:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a92:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028a99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a9d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028aa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aa7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028aae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ab2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028ab9:	83 ec 0c             	sub    esp,0xc
c0028abc:	68 12 a5 02 c0       	push   0xc002a512
c0028ac1:	e8 24 a5 fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0028ac6:	83 c4 10             	add    esp,0x10
c0028ac9:	90                   	nop
c0028aca:	83 c4 0c             	add    esp,0xc
c0028acd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0028ace <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0028ace:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ad2:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ad4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0028ad6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0028ad6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ada:	8b 00                	mov    eax,DWORD PTR [eax]
c0028adc:	85 c0                	test   eax,eax
c0028ade:	75 0e                	jne    c0028aee <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028ae0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ae4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028ae7:	85 c0                	test   eax,eax
c0028ae9:	75 03                	jne    c0028aee <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028aeb:	b0 01                	mov    al,0x1
c0028aed:	c3                   	ret    
c0028aee:	b0 00                	mov    al,0x0
c0028af0:	90                   	nop
c0028af1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028af2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028af2:	83 ec 0c             	sub    esp,0xc
c0028af5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028af9:	8b 00                	mov    eax,DWORD PTR [eax]
c0028afb:	85 c0                	test   eax,eax
c0028afd:	75 15                	jne    c0028b14 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0028aff:	83 ec 0c             	sub    esp,0xc
c0028b02:	68 64 a5 02 c0       	push   0xc002a564
c0028b07:	e8 83 1b ff ff       	call   c001a68f <Krnl::panic(char const*)>
c0028b0c:	83 c4 10             	add    esp,0x10
c0028b0f:	e9 88 00 00 00       	jmp    c0028b9c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028b14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b18:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b1b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028b1e:	85 c0                	test   eax,eax
c0028b20:	0f 95 c0             	setne  al
c0028b23:	84 c0                	test   al,al
c0028b25:	74 10                	je     c0028b37 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028b27:	83 ec 0c             	sub    esp,0xc
c0028b2a:	68 af a5 02 c0       	push   0xc002a5af
c0028b2f:	e8 5b 1b ff ff       	call   c001a68f <Krnl::panic(char const*)>
c0028b34:	83 c4 10             	add    esp,0x10
c0028b37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b3b:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b3d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028b40:	85 c0                	test   eax,eax
c0028b42:	0f 94 c0             	sete   al
c0028b45:	84 c0                	test   al,al
c0028b47:	74 33                	je     c0028b7c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028b49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b4d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028b53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b57:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028b5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b62:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b65:	83 f8 01             	cmp    eax,0x1
c0028b68:	74 21                	je     c0028b8b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028b6a:	83 ec 0c             	sub    esp,0xc
c0028b6d:	68 88 a5 02 c0       	push   0xc002a588
c0028b72:	e8 18 1b ff ff       	call   c001a68f <Krnl::panic(char const*)>
c0028b77:	83 c4 10             	add    esp,0x10
c0028b7a:	eb 0f                	jmp    c0028b8b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028b7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b80:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b82:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028b85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b89:	89 10                	mov    DWORD PTR [eax],edx
c0028b8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b8f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b92:	8d 50 ff             	lea    edx,[eax-0x1]
c0028b95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b99:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028b9c:	83 c4 0c             	add    esp,0xc
c0028b9f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028ba0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028ba0:	83 ec 0c             	sub    esp,0xc
c0028ba3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028ba8:	75 10                	jne    c0028bba <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0028baa:	83 ec 0c             	sub    esp,0xc
c0028bad:	68 2c a5 02 c0       	push   0xc002a52c
c0028bb2:	e8 d8 1a ff ff       	call   c001a68f <Krnl::panic(char const*)>
c0028bb7:	83 c4 10             	add    esp,0x10
c0028bba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bbe:	8b 00                	mov    eax,DWORD PTR [eax]
c0028bc0:	85 c0                	test   eax,eax
c0028bc2:	74 34                	je     c0028bf8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028bc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028bcb:	85 c0                	test   eax,eax
c0028bcd:	74 29                	je     c0028bf8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028bcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bd3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028bd6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028bda:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0028bdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028be1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028be5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028be8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028bef:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028bf6:	eb 65                	jmp    c0028c5d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028bf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bfc:	8b 00                	mov    eax,DWORD PTR [eax]
c0028bfe:	85 c0                	test   eax,eax
c0028c00:	75 4b                	jne    c0028c4d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028c02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c06:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c09:	85 c0                	test   eax,eax
c0028c0b:	75 40                	jne    c0028c4d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028c0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c11:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028c15:	89 10                	mov    DWORD PTR [eax],edx
c0028c17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028c1f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028c22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c26:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c29:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028c30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c34:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c37:	85 c0                	test   eax,eax
c0028c39:	74 22                	je     c0028c5d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028c3b:	83 ec 0c             	sub    esp,0xc
c0028c3e:	68 4e a5 02 c0       	push   0xc002a54e
c0028c43:	e8 47 1a ff ff       	call   c001a68f <Krnl::panic(char const*)>
c0028c48:	83 c4 10             	add    esp,0x10
c0028c4b:	eb 10                	jmp    c0028c5d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028c4d:	83 ec 0c             	sub    esp,0xc
c0028c50:	68 58 a5 02 c0       	push   0xc002a558
c0028c55:	e8 35 1a ff ff       	call   c001a68f <Krnl::panic(char const*)>
c0028c5a:	83 c4 10             	add    esp,0x10
c0028c5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c61:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c64:	8d 50 01             	lea    edx,[eax+0x1]
c0028c67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c6b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028c6e:	90                   	nop
c0028c6f:	83 c4 0c             	add    esp,0xc
c0028c72:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028c74 <ACPI::~ACPI()>:
c0028c74:	83 ec 0c             	sub    esp,0xc
c0028c77:	ba 90 b6 02 c0       	mov    edx,0xc002b690
c0028c7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c80:	89 10                	mov    DWORD PTR [eax],edx
c0028c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c86:	83 ec 0c             	sub    esp,0xc
c0028c89:	50                   	push   eax
c0028c8a:	e8 53 b6 fe ff       	call   c00142e2 <Device::~Device()>
c0028c8f:	83 c4 10             	add    esp,0x10
c0028c92:	90                   	nop
c0028c93:	83 c4 0c             	add    esp,0xc
c0028c96:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028c98 <ACPI::~ACPI()>:
c0028c98:	83 ec 0c             	sub    esp,0xc
c0028c9b:	83 ec 0c             	sub    esp,0xc
c0028c9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ca2:	e8 cd ff ff ff       	call   c0028c74 <ACPI::~ACPI()>
c0028ca7:	83 c4 10             	add    esp,0x10
c0028caa:	83 ec 08             	sub    esp,0x8
c0028cad:	68 68 12 00 00       	push   0x1268
c0028cb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cb6:	e8 4f a2 fe ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c0028cbb:	83 c4 10             	add    esp,0x10
c0028cbe:	83 c4 0c             	add    esp,0xc
c0028cc1:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028cc2 <CPU::~CPU()>:
c0028cc2:	83 ec 0c             	sub    esp,0xc
c0028cc5:	ba 80 ba 02 c0       	mov    edx,0xc002ba80
c0028cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cce:	89 10                	mov    DWORD PTR [eax],edx
c0028cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cd4:	83 ec 0c             	sub    esp,0xc
c0028cd7:	50                   	push   eax
c0028cd8:	e8 05 b6 fe ff       	call   c00142e2 <Device::~Device()>
c0028cdd:	83 c4 10             	add    esp,0x10
c0028ce0:	90                   	nop
c0028ce1:	83 c4 0c             	add    esp,0xc
c0028ce4:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028ce6 <CPU::~CPU()>:
c0028ce6:	83 ec 0c             	sub    esp,0xc
c0028ce9:	83 ec 0c             	sub    esp,0xc
c0028cec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cf0:	e8 cd ff ff ff       	call   c0028cc2 <CPU::~CPU()>
c0028cf5:	83 c4 10             	add    esp,0x10
c0028cf8:	83 ec 08             	sub    esp,0x8
c0028cfb:	68 98 11 00 00       	push   0x1198
c0028d00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d04:	e8 01 a2 fe ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c0028d09:	83 c4 10             	add    esp,0x10
c0028d0c:	83 c4 0c             	add    esp,0xc
c0028d0f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028d10 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028d10:	90                   	nop
c0028d11:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028d12 <ThreadControlBlock::ThreadControlBlock()>:
c0028d12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d16:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028d1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d21:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028d28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d2c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028d33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d37:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028d3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d42:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028d46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d4a:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028d4e:	90                   	nop
c0028d4f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028d50 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028d50:	83 ec 0c             	sub    esp,0xc
c0028d53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d57:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028d5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d61:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d6c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028d73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d77:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028d7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d81:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028d88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d8c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028d93:	83 ec 0c             	sub    esp,0xc
c0028d96:	68 12 a5 02 c0       	push   0xc002a512
c0028d9b:	e8 4a a2 fe ff       	call   c0012fea <Dbg::kprintf(char const*, ...)>
c0028da0:	83 c4 10             	add    esp,0x10
c0028da3:	90                   	nop
c0028da4:	83 c4 0c             	add    esp,0xc
c0028da7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028da8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028da8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028dac:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028daf:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028db0 <Vm::_FPUState::_FPUState()>:
c0028db0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028db4:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028dbb:	90                   	nop
c0028dbc:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028dbe <PCI::~PCI()>:
c0028dbe:	83 ec 0c             	sub    esp,0xc
c0028dc1:	ba 0c cb 02 c0       	mov    edx,0xc002cb0c
c0028dc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dca:	89 10                	mov    DWORD PTR [eax],edx
c0028dcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dd0:	83 ec 0c             	sub    esp,0xc
c0028dd3:	50                   	push   eax
c0028dd4:	e8 e1 ae fe ff       	call   c0013cba <Bus::~Bus()>
c0028dd9:	83 c4 10             	add    esp,0x10
c0028ddc:	90                   	nop
c0028ddd:	83 c4 0c             	add    esp,0xc
c0028de0:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028de2 <PCI::~PCI()>:
c0028de2:	83 ec 0c             	sub    esp,0xc
c0028de5:	83 ec 0c             	sub    esp,0xc
c0028de8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dec:	e8 cd ff ff ff       	call   c0028dbe <PCI::~PCI()>
c0028df1:	83 c4 10             	add    esp,0x10
c0028df4:	83 ec 08             	sub    esp,0x8
c0028df7:	68 58 01 00 00       	push   0x158
c0028dfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e00:	e8 05 a1 fe ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c0028e05:	83 c4 10             	add    esp,0x10
c0028e08:	83 c4 0c             	add    esp,0xc
c0028e0b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028e0c <IDE::~IDE()>:
c0028e0c:	83 ec 0c             	sub    esp,0xc
c0028e0f:	ba 70 cd 02 c0       	mov    edx,0xc002cd70
c0028e14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e18:	89 10                	mov    DWORD PTR [eax],edx
c0028e1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e1e:	83 ec 0c             	sub    esp,0xc
c0028e21:	50                   	push   eax
c0028e22:	e8 ab b9 fe ff       	call   c00147d2 <HardDiskController::~HardDiskController()>
c0028e27:	83 c4 10             	add    esp,0x10
c0028e2a:	90                   	nop
c0028e2b:	83 c4 0c             	add    esp,0xc
c0028e2e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028e30 <IDE::~IDE()>:
c0028e30:	83 ec 0c             	sub    esp,0xc
c0028e33:	83 ec 0c             	sub    esp,0xc
c0028e36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e3a:	e8 cd ff ff ff       	call   c0028e0c <IDE::~IDE()>
c0028e3f:	83 c4 10             	add    esp,0x10
c0028e42:	83 ec 08             	sub    esp,0x8
c0028e45:	68 70 02 00 00       	push   0x270
c0028e4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e4e:	e8 b7 a0 fe ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c0028e53:	83 c4 10             	add    esp,0x10
c0028e56:	83 c4 0c             	add    esp,0xc
c0028e59:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028e5a <SATABus::~SATABus()>:
c0028e5a:	83 ec 0c             	sub    esp,0xc
c0028e5d:	ba 50 ce 02 c0       	mov    edx,0xc002ce50
c0028e62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e66:	89 10                	mov    DWORD PTR [eax],edx
c0028e68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e6c:	83 ec 0c             	sub    esp,0xc
c0028e6f:	50                   	push   eax
c0028e70:	e8 5d b9 fe ff       	call   c00147d2 <HardDiskController::~HardDiskController()>
c0028e75:	83 c4 10             	add    esp,0x10
c0028e78:	90                   	nop
c0028e79:	83 c4 0c             	add    esp,0xc
c0028e7c:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028e7e <SATABus::~SATABus()>:
c0028e7e:	83 ec 0c             	sub    esp,0xc
c0028e81:	83 ec 0c             	sub    esp,0xc
c0028e84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e88:	e8 cd ff ff ff       	call   c0028e5a <SATABus::~SATABus()>
c0028e8d:	83 c4 10             	add    esp,0x10
c0028e90:	83 ec 08             	sub    esp,0x8
c0028e93:	68 64 01 00 00       	push   0x164
c0028e98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e9c:	e8 69 a0 fe ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c0028ea1:	83 c4 10             	add    esp,0x10
c0028ea4:	83 c4 0c             	add    esp,0xc
c0028ea7:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028ea8 <ATA::~ATA()>:
c0028ea8:	83 ec 0c             	sub    esp,0xc
c0028eab:	ba 9c ce 02 c0       	mov    edx,0xc002ce9c
c0028eb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eb4:	89 10                	mov    DWORD PTR [eax],edx
c0028eb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eba:	83 ec 0c             	sub    esp,0xc
c0028ebd:	50                   	push   eax
c0028ebe:	e8 01 ba fe ff       	call   c00148c4 <PhysicalDisk::~PhysicalDisk()>
c0028ec3:	83 c4 10             	add    esp,0x10
c0028ec6:	90                   	nop
c0028ec7:	83 c4 0c             	add    esp,0xc
c0028eca:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028ecc <ATA::~ATA()>:
c0028ecc:	83 ec 0c             	sub    esp,0xc
c0028ecf:	83 ec 0c             	sub    esp,0xc
c0028ed2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ed6:	e8 cd ff ff ff       	call   c0028ea8 <ATA::~ATA()>
c0028edb:	83 c4 10             	add    esp,0x10
c0028ede:	83 ec 08             	sub    esp,0x8
c0028ee1:	68 7c 01 00 00       	push   0x17c
c0028ee6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028eea:	e8 1b a0 fe ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c0028eef:	83 c4 10             	add    esp,0x10
c0028ef2:	83 c4 0c             	add    esp,0xc
c0028ef5:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028ef6 <ATAPI::~ATAPI()>:
c0028ef6:	83 ec 0c             	sub    esp,0xc
c0028ef9:	ba d4 ce 02 c0       	mov    edx,0xc002ced4
c0028efe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f02:	89 10                	mov    DWORD PTR [eax],edx
c0028f04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f08:	83 ec 0c             	sub    esp,0xc
c0028f0b:	50                   	push   eax
c0028f0c:	e8 b3 b9 fe ff       	call   c00148c4 <PhysicalDisk::~PhysicalDisk()>
c0028f11:	83 c4 10             	add    esp,0x10
c0028f14:	90                   	nop
c0028f15:	83 c4 0c             	add    esp,0xc
c0028f18:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028f1a <ATAPI::~ATAPI()>:
c0028f1a:	83 ec 0c             	sub    esp,0xc
c0028f1d:	83 ec 0c             	sub    esp,0xc
c0028f20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f24:	e8 cd ff ff ff       	call   c0028ef6 <ATAPI::~ATAPI()>
c0028f29:	83 c4 10             	add    esp,0x10
c0028f2c:	83 ec 08             	sub    esp,0x8
c0028f2f:	68 80 01 00 00       	push   0x180
c0028f34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f38:	e8 cd 9f fe ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c0028f3d:	83 c4 10             	add    esp,0x10
c0028f40:	83 c4 0c             	add    esp,0xc
c0028f43:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028f44 <SATA::~SATA()>:
c0028f44:	83 ec 0c             	sub    esp,0xc
c0028f47:	ba 88 cf 02 c0       	mov    edx,0xc002cf88
c0028f4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f50:	89 10                	mov    DWORD PTR [eax],edx
c0028f52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f56:	83 ec 0c             	sub    esp,0xc
c0028f59:	50                   	push   eax
c0028f5a:	e8 65 b9 fe ff       	call   c00148c4 <PhysicalDisk::~PhysicalDisk()>
c0028f5f:	83 c4 10             	add    esp,0x10
c0028f62:	90                   	nop
c0028f63:	83 c4 0c             	add    esp,0xc
c0028f66:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028f68 <SATA::~SATA()>:
c0028f68:	83 ec 0c             	sub    esp,0xc
c0028f6b:	83 ec 0c             	sub    esp,0xc
c0028f6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f72:	e8 cd ff ff ff       	call   c0028f44 <SATA::~SATA()>
c0028f77:	83 c4 10             	add    esp,0x10
c0028f7a:	83 ec 08             	sub    esp,0x8
c0028f7d:	68 7c 01 00 00       	push   0x17c
c0028f82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f86:	e8 7f 9f fe ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c0028f8b:	83 c4 10             	add    esp,0x10
c0028f8e:	83 c4 0c             	add    esp,0xc
c0028f91:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028f92 <SATAPI::~SATAPI()>:
c0028f92:	83 ec 0c             	sub    esp,0xc
c0028f95:	ba 64 d0 02 c0       	mov    edx,0xc002d064
c0028f9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f9e:	89 10                	mov    DWORD PTR [eax],edx
c0028fa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fa4:	83 ec 0c             	sub    esp,0xc
c0028fa7:	50                   	push   eax
c0028fa8:	e8 17 b9 fe ff       	call   c00148c4 <PhysicalDisk::~PhysicalDisk()>
c0028fad:	83 c4 10             	add    esp,0x10
c0028fb0:	90                   	nop
c0028fb1:	83 c4 0c             	add    esp,0xc
c0028fb4:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028fb6 <SATAPI::~SATAPI()>:
c0028fb6:	83 ec 0c             	sub    esp,0xc
c0028fb9:	83 ec 0c             	sub    esp,0xc
c0028fbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fc0:	e8 cd ff ff ff       	call   c0028f92 <SATAPI::~SATAPI()>
c0028fc5:	83 c4 10             	add    esp,0x10
c0028fc8:	83 ec 08             	sub    esp,0x8
c0028fcb:	68 80 01 00 00       	push   0x180
c0028fd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fd4:	e8 31 9f fe ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c0028fd9:	83 c4 10             	add    esp,0x10
c0028fdc:	83 c4 0c             	add    esp,0xc
c0028fdf:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028fe0 <AVX::~AVX()>:
c0028fe0:	83 ec 0c             	sub    esp,0xc
c0028fe3:	ba a4 d0 02 c0       	mov    edx,0xc002d0a4
c0028fe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fec:	89 10                	mov    DWORD PTR [eax],edx
c0028fee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ff2:	83 ec 0c             	sub    esp,0xc
c0028ff5:	50                   	push   eax
c0028ff6:	e8 4d b9 fe ff       	call   c0014948 <FPU::~FPU()>
c0028ffb:	83 c4 10             	add    esp,0x10
c0028ffe:	90                   	nop
c0028fff:	83 c4 0c             	add    esp,0xc
c0029002:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0029004 <AVX::~AVX()>:
c0029004:	83 ec 0c             	sub    esp,0xc
c0029007:	83 ec 0c             	sub    esp,0xc
c002900a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002900e:	e8 cd ff ff ff       	call   c0028fe0 <AVX::~AVX()>
c0029013:	83 c4 10             	add    esp,0x10
c0029016:	83 ec 08             	sub    esp,0x8
c0029019:	68 58 01 00 00       	push   0x158
c002901e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029022:	e8 e3 9e fe ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c0029027:	83 c4 10             	add    esp,0x10
c002902a:	83 c4 0c             	add    esp,0xc
c002902d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c002902e <MMX::~MMX()>:
c002902e:	83 ec 0c             	sub    esp,0xc
c0029031:	ba e4 d0 02 c0       	mov    edx,0xc002d0e4
c0029036:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002903a:	89 10                	mov    DWORD PTR [eax],edx
c002903c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029040:	83 ec 0c             	sub    esp,0xc
c0029043:	50                   	push   eax
c0029044:	e8 ff b8 fe ff       	call   c0014948 <FPU::~FPU()>
c0029049:	83 c4 10             	add    esp,0x10
c002904c:	90                   	nop
c002904d:	83 c4 0c             	add    esp,0xc
c0029050:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0029052 <MMX::~MMX()>:
c0029052:	83 ec 0c             	sub    esp,0xc
c0029055:	83 ec 0c             	sub    esp,0xc
c0029058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002905c:	e8 cd ff ff ff       	call   c002902e <MMX::~MMX()>
c0029061:	83 c4 10             	add    esp,0x10
c0029064:	83 ec 08             	sub    esp,0x8
c0029067:	68 58 01 00 00       	push   0x158
c002906c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029070:	e8 95 9e fe ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c0029075:	83 c4 10             	add    esp,0x10
c0029078:	83 c4 0c             	add    esp,0xc
c002907b:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c002907c <SSE::~SSE()>:
c002907c:	83 ec 0c             	sub    esp,0xc
c002907f:	ba 24 d1 02 c0       	mov    edx,0xc002d124
c0029084:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029088:	89 10                	mov    DWORD PTR [eax],edx
c002908a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002908e:	83 ec 0c             	sub    esp,0xc
c0029091:	50                   	push   eax
c0029092:	e8 b1 b8 fe ff       	call   c0014948 <FPU::~FPU()>
c0029097:	83 c4 10             	add    esp,0x10
c002909a:	90                   	nop
c002909b:	83 c4 0c             	add    esp,0xc
c002909e:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c00290a0 <SSE::~SSE()>:
c00290a0:	83 ec 0c             	sub    esp,0xc
c00290a3:	83 ec 0c             	sub    esp,0xc
c00290a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290aa:	e8 cd ff ff ff       	call   c002907c <SSE::~SSE()>
c00290af:	83 c4 10             	add    esp,0x10
c00290b2:	83 ec 08             	sub    esp,0x8
c00290b5:	68 58 01 00 00       	push   0x158
c00290ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290be:	e8 47 9e fe ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c00290c3:	83 c4 10             	add    esp,0x10
c00290c6:	83 c4 0c             	add    esp,0xc
c00290c9:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c00290ca <x87::~x87()>:
c00290ca:	83 ec 0c             	sub    esp,0xc
c00290cd:	ba 64 d1 02 c0       	mov    edx,0xc002d164
c00290d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290d6:	89 10                	mov    DWORD PTR [eax],edx
c00290d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290dc:	83 ec 0c             	sub    esp,0xc
c00290df:	50                   	push   eax
c00290e0:	e8 63 b8 fe ff       	call   c0014948 <FPU::~FPU()>
c00290e5:	83 c4 10             	add    esp,0x10
c00290e8:	90                   	nop
c00290e9:	83 c4 0c             	add    esp,0xc
c00290ec:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c00290ee <x87::~x87()>:
c00290ee:	83 ec 0c             	sub    esp,0xc
c00290f1:	83 ec 0c             	sub    esp,0xc
c00290f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290f8:	e8 cd ff ff ff       	call   c00290ca <x87::~x87()>
c00290fd:	83 c4 10             	add    esp,0x10
c0029100:	83 ec 08             	sub    esp,0x8
c0029103:	68 58 01 00 00       	push   0x158
c0029108:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002910c:	e8 f9 9d fe ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c0029111:	83 c4 10             	add    esp,0x10
c0029114:	83 c4 0c             	add    esp,0xc
c0029117:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029118 <IOAPIC::~IOAPIC()>:
c0029118:	83 ec 0c             	sub    esp,0xc
c002911b:	ba bc d2 02 c0       	mov    edx,0xc002d2bc
c0029120:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029124:	89 10                	mov    DWORD PTR [eax],edx
c0029126:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002912a:	83 ec 0c             	sub    esp,0xc
c002912d:	50                   	push   eax
c002912e:	e8 af b1 fe ff       	call   c00142e2 <Device::~Device()>
c0029133:	83 c4 10             	add    esp,0x10
c0029136:	90                   	nop
c0029137:	83 c4 0c             	add    esp,0xc
c002913a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002913c <IOAPIC::~IOAPIC()>:
c002913c:	83 ec 0c             	sub    esp,0xc
c002913f:	83 ec 0c             	sub    esp,0xc
c0029142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029146:	e8 cd ff ff ff       	call   c0029118 <IOAPIC::~IOAPIC()>
c002914b:	83 c4 10             	add    esp,0x10
c002914e:	83 ec 08             	sub    esp,0x8
c0029151:	68 68 01 00 00       	push   0x168
c0029156:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002915a:	e8 ab 9d fe ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c002915f:	83 c4 10             	add    esp,0x10
c0029162:	83 c4 0c             	add    esp,0xc
c0029165:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0029166 <APIC::~APIC()>:
c0029166:	83 ec 0c             	sub    esp,0xc
c0029169:	ba 74 d2 02 c0       	mov    edx,0xc002d274
c002916e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029172:	89 10                	mov    DWORD PTR [eax],edx
c0029174:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029178:	83 ec 0c             	sub    esp,0xc
c002917b:	50                   	push   eax
c002917c:	e8 91 bc fe ff       	call   c0014e12 <InterruptController::~InterruptController()>
c0029181:	83 c4 10             	add    esp,0x10
c0029184:	90                   	nop
c0029185:	83 c4 0c             	add    esp,0xc
c0029188:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c002918a <APIC::~APIC()>:
c002918a:	83 ec 0c             	sub    esp,0xc
c002918d:	83 ec 0c             	sub    esp,0xc
c0029190:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029194:	e8 cd ff ff ff       	call   c0029166 <APIC::~APIC()>
c0029199:	83 c4 10             	add    esp,0x10
c002919c:	83 ec 08             	sub    esp,0x8
c002919f:	68 58 21 00 00       	push   0x2158
c00291a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291a8:	e8 5d 9d fe ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c00291ad:	83 c4 10             	add    esp,0x10
c00291b0:	83 c4 0c             	add    esp,0xc
c00291b3:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c00291b4 <PIC::~PIC()>:
c00291b4:	83 ec 0c             	sub    esp,0xc
c00291b7:	ba 0c d3 02 c0       	mov    edx,0xc002d30c
c00291bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291c0:	89 10                	mov    DWORD PTR [eax],edx
c00291c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291c6:	83 ec 0c             	sub    esp,0xc
c00291c9:	50                   	push   eax
c00291ca:	e8 43 bc fe ff       	call   c0014e12 <InterruptController::~InterruptController()>
c00291cf:	83 c4 10             	add    esp,0x10
c00291d2:	90                   	nop
c00291d3:	83 c4 0c             	add    esp,0xc
c00291d6:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c00291d8 <PIC::~PIC()>:
c00291d8:	83 ec 0c             	sub    esp,0xc
c00291db:	83 ec 0c             	sub    esp,0xc
c00291de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291e2:	e8 cd ff ff ff       	call   c00291b4 <PIC::~PIC()>
c00291e7:	83 c4 10             	add    esp,0x10
c00291ea:	83 ec 08             	sub    esp,0x8
c00291ed:	68 58 21 00 00       	push   0x2158
c00291f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291f6:	e8 0f 9d fe ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c00291fb:	83 c4 10             	add    esp,0x10
c00291fe:	83 c4 0c             	add    esp,0xc
c0029201:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029202 <APICTimer::~APICTimer()>:
c0029202:	83 ec 0c             	sub    esp,0xc
c0029205:	ba 60 d3 02 c0       	mov    edx,0xc002d360
c002920a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002920e:	89 10                	mov    DWORD PTR [eax],edx
c0029210:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029214:	83 ec 0c             	sub    esp,0xc
c0029217:	50                   	push   eax
c0029218:	e8 41 db fe ff       	call   c0016d5e <Timer::~Timer()>
c002921d:	83 c4 10             	add    esp,0x10
c0029220:	90                   	nop
c0029221:	83 c4 0c             	add    esp,0xc
c0029224:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029226 <APICTimer::~APICTimer()>:
c0029226:	83 ec 0c             	sub    esp,0xc
c0029229:	83 ec 0c             	sub    esp,0xc
c002922c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029230:	e8 cd ff ff ff       	call   c0029202 <APICTimer::~APICTimer()>
c0029235:	83 c4 10             	add    esp,0x10
c0029238:	83 ec 08             	sub    esp,0x8
c002923b:	68 60 01 00 00       	push   0x160
c0029240:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029244:	e8 c1 9c fe ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c0029249:	83 c4 10             	add    esp,0x10
c002924c:	83 c4 0c             	add    esp,0xc
c002924f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0029250 <PIT::~PIT()>:
c0029250:	83 ec 0c             	sub    esp,0xc
c0029253:	ba b0 d3 02 c0       	mov    edx,0xc002d3b0
c0029258:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002925c:	89 10                	mov    DWORD PTR [eax],edx
c002925e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029262:	83 ec 0c             	sub    esp,0xc
c0029265:	50                   	push   eax
c0029266:	e8 f3 da fe ff       	call   c0016d5e <Timer::~Timer()>
c002926b:	83 c4 10             	add    esp,0x10
c002926e:	90                   	nop
c002926f:	83 c4 0c             	add    esp,0xc
c0029272:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0029274 <PIT::~PIT()>:
c0029274:	83 ec 0c             	sub    esp,0xc
c0029277:	83 ec 0c             	sub    esp,0xc
c002927a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002927e:	e8 cd ff ff ff       	call   c0029250 <PIT::~PIT()>
c0029283:	83 c4 10             	add    esp,0x10
c0029286:	83 ec 08             	sub    esp,0x8
c0029289:	68 5c 01 00 00       	push   0x15c
c002928e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029292:	e8 73 9c fe ff       	call   c0012f0a <operator delete(void*, unsigned long)>
c0029297:	83 c4 10             	add    esp,0x10
c002929a:	83 c4 0c             	add    esp,0xc
c002929d:	c3                   	ret    
