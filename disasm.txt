
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 b0 fb 00 00       	call   c000fbd0 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 43 86 02 00       	call   c0028668 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 1e 92 02 c0       	mov    ebx,0xc002921e
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 2c 92 02 c0    	cmp    ebx,0xc002922c
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 f8 d9 02 c0       	mov    eax,0xc002d9f8
c0000049:	3d f8 d9 02 c0       	cmp    eax,0xc002d9f8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 f8 d9 02 c0       	push   0xc002d9f8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 f8 d9 02 c0       	mov    eax,0xc002d9f8
c0000075:	2d f8 d9 02 c0       	sub    eax,0xc002d9f8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 f8 d9 02 c0       	push   0xc002d9f8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 28 e0 02 c0 00 	cmp    BYTE PTR ds:0xc002e028,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 34 92 02 c0       	mov    ebx,0xc0029234
c00000bb:	81 eb 30 92 02 c0    	sub    ebx,0xc0029230
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 30 92 02 c0       	mov    esi,0xc0029230
c00000ca:	a1 2c e0 02 c0       	mov    eax,ds:0xc002e02c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 2c e0 02 c0       	mov    ds:0xc002e02c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 2c e0 02 c0       	mov    eax,ds:0xc002e02c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 f8 d9 02 c0       	push   0xc002d9f8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 28 e0 02 c0 01 	mov    BYTE PTR ds:0xc002e028,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 30 e0 02 c0       	push   0xc002e030
c000012c:	68 f8 d9 02 c0       	push   0xc002d9f8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 ff d4 01 00       	call   c001d8a2 <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 e6 27 01 00       	call   c0012ba1 <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 dd d4 01 00       	call   c001d8a2 <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 2b d9 01 00       	call   c001dd0f <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 13 df 01 00       	call   c001e300 <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 70 e4 02 c0 	lgdtd  ds:0xc002e470
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	e8 ca 44 01 00       	call   c0014aab <int_handler>
c00005e1:	81 c4 04 00 00 00    	add    esp,0x4
c00005e7:	0f a9                	pop    gs
c00005e9:	0f a1                	pop    fs
c00005eb:	07                   	pop    es
c00005ec:	1f                   	pop    ds
c00005ed:	61                   	popa   
c00005ee:	81 c4 08 00 00 00    	add    esp,0x8
c00005f4:	cf                   	iret   

c00005f5 <irq16>:
c00005f5:	fa                   	cli    
c00005f6:	6a 00                	push   0x0
c00005f8:	6a 30                	push   0x30
c00005fa:	e9 c5 ff ff ff       	jmp    c00005c4 <int_common_stub>

c00005ff <irq17>:
c00005ff:	fa                   	cli    
c0000600:	6a 00                	push   0x0
c0000602:	6a 31                	push   0x31
c0000604:	e9 bb ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000609 <irq18>:
c0000609:	fa                   	cli    
c000060a:	6a 00                	push   0x0
c000060c:	6a 32                	push   0x32
c000060e:	e9 b1 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000613 <irq19>:
c0000613:	fa                   	cli    
c0000614:	6a 00                	push   0x0
c0000616:	6a 33                	push   0x33
c0000618:	e9 a7 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061d <irq20>:
c000061d:	fa                   	cli    
c000061e:	6a 00                	push   0x0
c0000620:	6a 34                	push   0x34
c0000622:	e9 9d ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000627 <irq21>:
c0000627:	fa                   	cli    
c0000628:	6a 00                	push   0x0
c000062a:	6a 35                	push   0x35
c000062c:	e9 93 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000631 <irq22>:
c0000631:	fa                   	cli    
c0000632:	6a 00                	push   0x0
c0000634:	6a 36                	push   0x36
c0000636:	e9 89 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063b <irq23>:
c000063b:	fa                   	cli    
c000063c:	6a 00                	push   0x0
c000063e:	6a 37                	push   0x37
c0000640:	e9 7f ff ff ff       	jmp    c00005c4 <int_common_stub>
c0000645:	66 90                	xchg   ax,ax
c0000647:	90                   	nop

c0000648 <memcmp>:
c0000648:	56                   	push   esi
c0000649:	53                   	push   ebx
c000064a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000064e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000652:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000656:	85 f6                	test   esi,esi
c0000658:	74 1d                	je     c0000677 <memcmp+0x2f>
c000065a:	8a 08                	mov    cl,BYTE PTR [eax]
c000065c:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c000065f:	38 cb                	cmp    bl,cl
c0000661:	75 19                	jne    c000067c <memcmp+0x34>
c0000663:	01 c6                	add    esi,eax
c0000665:	eb 0a                	jmp    c0000671 <memcmp+0x29>
c0000667:	90                   	nop
c0000668:	8a 08                	mov    cl,BYTE PTR [eax]
c000066a:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c000066d:	38 d9                	cmp    cl,bl
c000066f:	75 0b                	jne    c000067c <memcmp+0x34>
c0000671:	40                   	inc    eax
c0000672:	42                   	inc    edx
c0000673:	39 f0                	cmp    eax,esi
c0000675:	75 f1                	jne    c0000668 <memcmp+0x20>
c0000677:	31 c0                	xor    eax,eax
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	c3                   	ret    
c000067c:	0f b6 c1             	movzx  eax,cl
c000067f:	29 d8                	sub    eax,ebx
c0000681:	5b                   	pop    ebx
c0000682:	5e                   	pop    esi
c0000683:	c3                   	ret    

c0000684 <memmove>:
c0000684:	55                   	push   ebp
c0000685:	57                   	push   edi
c0000686:	56                   	push   esi
c0000687:	53                   	push   ebx
c0000688:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000068c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000690:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000694:	39 dd                	cmp    ebp,ebx
c0000696:	0f 83 80 00 00 00    	jae    c000071c <memmove+0x98>
c000069c:	85 d2                	test   edx,edx
c000069e:	74 74                	je     c0000714 <memmove+0x90>
c00006a0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a3:	8d 75 04             	lea    esi,[ebp+0x4]
c00006a6:	39 cd                	cmp    ebp,ecx
c00006a8:	0f 93 c1             	setae  cl
c00006ab:	39 f3                	cmp    ebx,esi
c00006ad:	0f 93 c0             	setae  al
c00006b0:	89 c6                	mov    esi,eax
c00006b2:	09 ce                	or     esi,ecx
c00006b4:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006b7:	89 f0                	mov    eax,esi
c00006b9:	83 f9 0c             	cmp    ecx,0xc
c00006bc:	0f 97 c1             	seta   cl
c00006bf:	84 c8                	test   al,cl
c00006c1:	74 75                	je     c0000738 <memmove+0xb4>
c00006c3:	89 e9                	mov    ecx,ebp
c00006c5:	09 d9                	or     ecx,ebx
c00006c7:	83 e1 03             	and    ecx,0x3
c00006ca:	75 6c                	jne    c0000738 <memmove+0xb4>
c00006cc:	89 d7                	mov    edi,edx
c00006ce:	89 d9                	mov    ecx,ebx
c00006d0:	83 e7 fc             	and    edi,0xfffffffc
c00006d3:	89 ee                	mov    esi,ebp
c00006d5:	01 df                	add    edi,ebx
c00006d7:	90                   	nop
c00006d8:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006da:	83 c6 04             	add    esi,0x4
c00006dd:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e0:	83 c1 04             	add    ecx,0x4
c00006e3:	39 f9                	cmp    ecx,edi
c00006e5:	75 f1                	jne    c00006d8 <memmove+0x54>
c00006e7:	89 d1                	mov    ecx,edx
c00006e9:	89 d7                	mov    edi,edx
c00006eb:	83 e1 fc             	and    ecx,0xfffffffc
c00006ee:	29 cf                	sub    edi,ecx
c00006f0:	01 cb                	add    ebx,ecx
c00006f2:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006f6:	39 ca                	cmp    edx,ecx
c00006f8:	74 1a                	je     c0000714 <memmove+0x90>
c00006fa:	8a 03                	mov    al,BYTE PTR [ebx]
c00006fc:	83 ff 01             	cmp    edi,0x1
c00006ff:	88 06                	mov    BYTE PTR [esi],al
c0000701:	74 11                	je     c0000714 <memmove+0x90>
c0000703:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0000706:	83 ff 02             	cmp    edi,0x2
c0000709:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c000070c:	74 06                	je     c0000714 <memmove+0x90>
c000070e:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000711:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000714:	5b                   	pop    ebx
c0000715:	89 e8                	mov    eax,ebp
c0000717:	5e                   	pop    esi
c0000718:	5f                   	pop    edi
c0000719:	5d                   	pop    ebp
c000071a:	c3                   	ret    
c000071b:	90                   	nop
c000071c:	76 f6                	jbe    c0000714 <memmove+0x90>
c000071e:	85 d2                	test   edx,edx
c0000720:	74 f2                	je     c0000714 <memmove+0x90>
c0000722:	4b                   	dec    ebx
c0000723:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000726:	66 90                	xchg   ax,ax
c0000728:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072b:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c000072e:	4a                   	dec    edx
c000072f:	75 f7                	jne    c0000728 <memmove+0xa4>
c0000731:	5b                   	pop    ebx
c0000732:	89 e8                	mov    eax,ebp
c0000734:	5e                   	pop    esi
c0000735:	5f                   	pop    edi
c0000736:	5d                   	pop    ebp
c0000737:	c3                   	ret    
c0000738:	01 ea                	add    edx,ebp
c000073a:	89 e9                	mov    ecx,ebp
c000073c:	8a 03                	mov    al,BYTE PTR [ebx]
c000073e:	41                   	inc    ecx
c000073f:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000742:	43                   	inc    ebx
c0000743:	39 d1                	cmp    ecx,edx
c0000745:	75 f5                	jne    c000073c <memmove+0xb8>
c0000747:	eb cb                	jmp    c0000714 <memmove+0x90>
c0000749:	8d 76 00             	lea    esi,[esi+0x0]

c000074c <memcpy>:
c000074c:	57                   	push   edi
c000074d:	56                   	push   esi
c000074e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0000752:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000756:	a8 03                	test   al,0x3
c0000758:	74 12                	je     c000076c <memcpy+0x20>
c000075a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000075e:	89 c1                	mov    ecx,eax
c0000760:	fc                   	cld    
c0000761:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000763:	29 c7                	sub    edi,eax
c0000765:	5e                   	pop    esi
c0000766:	89 f8                	mov    eax,edi
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax
c000076c:	89 c1                	mov    ecx,eax
c000076e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000772:	c1 e9 02             	shr    ecx,0x2
c0000775:	fc                   	cld    
c0000776:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000778:	29 c7                	sub    edi,eax
c000077a:	5e                   	pop    esi
c000077b:	89 f8                	mov    eax,edi
c000077d:	5f                   	pop    edi
c000077e:	c3                   	ret    
c000077f:	90                   	nop

c0000780 <memset>:
c0000780:	57                   	push   edi
c0000781:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000785:	85 c9                	test   ecx,ecx
c0000787:	74 0b                	je     c0000794 <memset+0x14>
c0000789:	fc                   	cld    
c000078a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000078e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000792:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000798:	5f                   	pop    edi
c0000799:	c3                   	ret    
c000079a:	66 90                	xchg   ax,ax

c000079c <strlen>:
c000079c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00007a0:	31 c0                	xor    eax,eax
c00007a2:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00007a5:	74 09                	je     c00007b0 <strlen+0x14>
c00007a7:	90                   	nop
c00007a8:	40                   	inc    eax
c00007a9:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007ad:	75 f9                	jne    c00007a8 <strlen+0xc>
c00007af:	c3                   	ret    
c00007b0:	c3                   	ret    
c00007b1:	8d 76 00             	lea    esi,[esi+0x0]

c00007b4 <strpbrk>:
c00007b4:	57                   	push   edi
c00007b5:	56                   	push   esi
c00007b6:	53                   	push   ebx
c00007b7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007bb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007bf:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007c1:	84 db                	test   bl,bl
c00007c3:	74 21                	je     c00007e6 <strpbrk+0x32>
c00007c5:	8a 07                	mov    al,BYTE PTR [edi]
c00007c7:	84 c0                	test   al,al
c00007c9:	74 14                	je     c00007df <strpbrk+0x2b>
c00007cb:	38 d8                	cmp    al,bl
c00007cd:	74 19                	je     c00007e8 <strpbrk+0x34>
c00007cf:	89 fa                	mov    edx,edi
c00007d1:	eb 05                	jmp    c00007d8 <strpbrk+0x24>
c00007d3:	90                   	nop
c00007d4:	38 d9                	cmp    cl,bl
c00007d6:	74 10                	je     c00007e8 <strpbrk+0x34>
c00007d8:	42                   	inc    edx
c00007d9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007db:	84 c9                	test   cl,cl
c00007dd:	75 f5                	jne    c00007d4 <strpbrk+0x20>
c00007df:	46                   	inc    esi
c00007e0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007e2:	84 db                	test   bl,bl
c00007e4:	75 e1                	jne    c00007c7 <strpbrk+0x13>
c00007e6:	31 f6                	xor    esi,esi
c00007e8:	89 f0                	mov    eax,esi
c00007ea:	5b                   	pop    ebx
c00007eb:	5e                   	pop    esi
c00007ec:	5f                   	pop    edi
c00007ed:	c3                   	ret    
c00007ee:	66 90                	xchg   ax,ax

c00007f0 <strtok>:
c00007f0:	56                   	push   esi
c00007f1:	53                   	push   ebx
c00007f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007fa:	85 db                	test   ebx,ebx
c00007fc:	75 07                	jne    c0000805 <strtok+0x15>
c00007fe:	eb 2c                	jmp    c000082c <strtok+0x3c>
c0000800:	43                   	inc    ebx
c0000801:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000805:	56                   	push   esi
c0000806:	53                   	push   ebx
c0000807:	e8 a8 ff ff ff       	call   c00007b4 <strpbrk>
c000080c:	5a                   	pop    edx
c000080d:	a3 48 e0 02 c0       	mov    ds:0xc002e048,eax
c0000812:	59                   	pop    ecx
c0000813:	39 d8                	cmp    eax,ebx
c0000815:	74 e9                	je     c0000800 <strtok+0x10>
c0000817:	85 c0                	test   eax,eax
c0000819:	74 1b                	je     c0000836 <strtok+0x46>
c000081b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000081e:	8d 50 01             	lea    edx,[eax+0x1]
c0000821:	89 d8                	mov    eax,ebx
c0000823:	89 15 48 e0 02 c0    	mov    DWORD PTR ds:0xc002e048,edx
c0000829:	5b                   	pop    ebx
c000082a:	5e                   	pop    esi
c000082b:	c3                   	ret    
c000082c:	8b 1d 48 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e048
c0000832:	85 db                	test   ebx,ebx
c0000834:	75 cf                	jne    c0000805 <strtok+0x15>
c0000836:	31 c0                	xor    eax,eax
c0000838:	5b                   	pop    ebx
c0000839:	5e                   	pop    esi
c000083a:	c3                   	ret    
c000083b:	90                   	nop

c000083c <strcpy>:
c000083c:	53                   	push   ebx
c000083d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000841:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000845:	89 c3                	mov    ebx,eax
c0000847:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000849:	84 d2                	test   dl,dl
c000084b:	74 0d                	je     c000085a <strcpy+0x1e>
c000084d:	8d 76 00             	lea    esi,[esi+0x0]
c0000850:	88 13                	mov    BYTE PTR [ebx],dl
c0000852:	41                   	inc    ecx
c0000853:	43                   	inc    ebx
c0000854:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000856:	84 d2                	test   dl,dl
c0000858:	75 f6                	jne    c0000850 <strcpy+0x14>
c000085a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000085d:	5b                   	pop    ebx
c000085e:	c3                   	ret    
c000085f:	90                   	nop

c0000860 <strncpy>:
c0000860:	55                   	push   ebp
c0000861:	57                   	push   edi
c0000862:	56                   	push   esi
c0000863:	53                   	push   ebx
c0000864:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000868:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000086c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000870:	85 c0                	test   eax,eax
c0000872:	74 39                	je     c00008ad <strncpy+0x4d>
c0000874:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000876:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000879:	8d 55 01             	lea    edx,[ebp+0x1]
c000087c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000087f:	84 db                	test   bl,bl
c0000881:	74 31                	je     c00008b4 <strncpy+0x54>
c0000883:	85 c9                	test   ecx,ecx
c0000885:	74 26                	je     c00008ad <strncpy+0x4d>
c0000887:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000088a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000088d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000890:	8d 46 02             	lea    eax,[esi+0x2]
c0000893:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000896:	84 db                	test   bl,bl
c0000898:	75 0f                	jne    c00008a9 <strncpy+0x49>
c000089a:	eb 18                	jmp    c00008b4 <strncpy+0x54>
c000089c:	40                   	inc    eax
c000089d:	42                   	inc    edx
c000089e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c00008a1:	49                   	dec    ecx
c00008a2:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008a5:	84 db                	test   bl,bl
c00008a7:	74 0b                	je     c00008b4 <strncpy+0x54>
c00008a9:	85 c9                	test   ecx,ecx
c00008ab:	75 ef                	jne    c000089c <strncpy+0x3c>
c00008ad:	5b                   	pop    ebx
c00008ae:	89 e8                	mov    eax,ebp
c00008b0:	5e                   	pop    esi
c00008b1:	5f                   	pop    edi
c00008b2:	5d                   	pop    ebp
c00008b3:	c3                   	ret    
c00008b4:	85 c9                	test   ecx,ecx
c00008b6:	74 f5                	je     c00008ad <strncpy+0x4d>
c00008b8:	fc                   	cld    
c00008b9:	31 c0                	xor    eax,eax
c00008bb:	89 d7                	mov    edi,edx
c00008bd:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008bf:	89 e8                	mov    eax,ebp
c00008c1:	5b                   	pop    ebx
c00008c2:	5e                   	pop    esi
c00008c3:	5f                   	pop    edi
c00008c4:	5d                   	pop    ebp
c00008c5:	c3                   	ret    
c00008c6:	66 90                	xchg   ax,ax

c00008c8 <strcmp>:
c00008c8:	56                   	push   esi
c00008c9:	53                   	push   ebx
c00008ca:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008ce:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008d4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008d7:	38 d1                	cmp    cl,dl
c00008d9:	75 1d                	jne    c00008f8 <strcmp+0x30>
c00008db:	84 c9                	test   cl,cl
c00008dd:	74 21                	je     c0000900 <strcmp+0x38>
c00008df:	b8 01 00 00 00       	mov    eax,0x1
c00008e4:	eb 07                	jmp    c00008ed <strcmp+0x25>
c00008e6:	66 90                	xchg   ax,ax
c00008e8:	40                   	inc    eax
c00008e9:	84 d2                	test   dl,dl
c00008eb:	74 13                	je     c0000900 <strcmp+0x38>
c00008ed:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008f0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008f4:	38 ca                	cmp    dl,cl
c00008f6:	74 f0                	je     c00008e8 <strcmp+0x20>
c00008f8:	0f b6 c2             	movzx  eax,dl
c00008fb:	5b                   	pop    ebx
c00008fc:	29 c8                	sub    eax,ecx
c00008fe:	5e                   	pop    esi
c00008ff:	c3                   	ret    
c0000900:	31 c0                	xor    eax,eax
c0000902:	5b                   	pop    ebx
c0000903:	5e                   	pop    esi
c0000904:	c3                   	ret    
c0000905:	8d 76 00             	lea    esi,[esi+0x0]

c0000908 <strchr>:
c0000908:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000090c:	8a 10                	mov    dl,BYTE PTR [eax]
c000090e:	84 d2                	test   dl,dl
c0000910:	74 15                	je     c0000927 <strchr+0x1f>
c0000912:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0000916:	38 ca                	cmp    dl,cl
c0000918:	75 06                	jne    c0000920 <strchr+0x18>
c000091a:	eb 0e                	jmp    c000092a <strchr+0x22>
c000091c:	38 ca                	cmp    dl,cl
c000091e:	74 09                	je     c0000929 <strchr+0x21>
c0000920:	40                   	inc    eax
c0000921:	8a 10                	mov    dl,BYTE PTR [eax]
c0000923:	84 d2                	test   dl,dl
c0000925:	75 f5                	jne    c000091c <strchr+0x14>
c0000927:	31 c0                	xor    eax,eax
c0000929:	c3                   	ret    
c000092a:	c3                   	ret    
c000092b:	90                   	nop

c000092c <strncmp>:
c000092c:	57                   	push   edi
c000092d:	56                   	push   esi
c000092e:	53                   	push   ebx
c000092f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000933:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000937:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000093b:	85 ff                	test   edi,edi
c000093d:	74 28                	je     c0000967 <strncmp+0x3b>
c000093f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000941:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000944:	38 d1                	cmp    cl,dl
c0000946:	75 28                	jne    c0000970 <strncmp+0x44>
c0000948:	8d 46 01             	lea    eax,[esi+0x1]
c000094b:	84 c9                	test   cl,cl
c000094d:	74 18                	je     c0000967 <strncmp+0x3b>
c000094f:	01 fe                	add    esi,edi
c0000951:	eb 0f                	jmp    c0000962 <strncmp+0x36>
c0000953:	90                   	nop
c0000954:	8a 10                	mov    dl,BYTE PTR [eax]
c0000956:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000959:	38 ca                	cmp    dl,cl
c000095b:	75 13                	jne    c0000970 <strncmp+0x44>
c000095d:	40                   	inc    eax
c000095e:	84 d2                	test   dl,dl
c0000960:	74 05                	je     c0000967 <strncmp+0x3b>
c0000962:	43                   	inc    ebx
c0000963:	39 c6                	cmp    esi,eax
c0000965:	75 ed                	jne    c0000954 <strncmp+0x28>
c0000967:	5b                   	pop    ebx
c0000968:	31 c0                	xor    eax,eax
c000096a:	5e                   	pop    esi
c000096b:	5f                   	pop    edi
c000096c:	c3                   	ret    
c000096d:	8d 76 00             	lea    esi,[esi+0x0]
c0000970:	5b                   	pop    ebx
c0000971:	0f b6 c2             	movzx  eax,dl
c0000974:	5e                   	pop    esi
c0000975:	29 c8                	sub    eax,ecx
c0000977:	5f                   	pop    edi
c0000978:	c3                   	ret    
c0000979:	8d 76 00             	lea    esi,[esi+0x0]

c000097c <strcat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000982:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000986:	89 c3                	mov    ebx,eax
c0000988:	eb 04                	jmp    c000098e <strcat+0x12>
c000098a:	66 90                	xchg   ax,ax
c000098c:	89 d3                	mov    ebx,edx
c000098e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f5                	jne    c000098c <strcat+0x10>
c0000997:	31 d2                	xor    edx,edx
c0000999:	8d 76 00             	lea    esi,[esi+0x0]
c000099c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000099f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00009a2:	42                   	inc    edx
c00009a3:	84 c9                	test   cl,cl
c00009a5:	75 f5                	jne    c000099c <strcat+0x20>
c00009a7:	5b                   	pop    ebx
c00009a8:	5e                   	pop    esi
c00009a9:	c3                   	ret    
c00009aa:	66 90                	xchg   ax,ax

c00009ac <strncat>:
c00009ac:	56                   	push   esi
c00009ad:	53                   	push   ebx
c00009ae:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009b6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009ba:	85 f6                	test   esi,esi
c00009bc:	74 1e                	je     c00009dc <strncat+0x30>
c00009be:	89 c2                	mov    edx,eax
c00009c0:	42                   	inc    edx
c00009c1:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009c5:	75 f9                	jne    c00009c0 <strncat+0x14>
c00009c7:	01 ce                	add    esi,ecx
c00009c9:	eb 06                	jmp    c00009d1 <strncat+0x25>
c00009cb:	90                   	nop
c00009cc:	39 f1                	cmp    ecx,esi
c00009ce:	74 10                	je     c00009e0 <strncat+0x34>
c00009d0:	42                   	inc    edx
c00009d1:	41                   	inc    ecx
c00009d2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009d5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009d8:	84 db                	test   bl,bl
c00009da:	75 f0                	jne    c00009cc <strncat+0x20>
c00009dc:	5b                   	pop    ebx
c00009dd:	5e                   	pop    esi
c00009de:	c3                   	ret    
c00009df:	90                   	nop
c00009e0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009e3:	5b                   	pop    ebx
c00009e4:	5e                   	pop    esi
c00009e5:	c3                   	ret    
c00009e6:	66 90                	xchg   ax,ax

c00009e8 <strstr>:
c00009e8:	57                   	push   edi
c00009e9:	56                   	push   esi
c00009ea:	53                   	push   ebx
c00009eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009ef:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009f3:	57                   	push   edi
c00009f4:	e8 a3 fd ff ff       	call   c000079c <strlen>
c00009f9:	59                   	pop    ecx
c00009fa:	85 c0                	test   eax,eax
c00009fc:	74 2a                	je     c0000a28 <strstr+0x40>
c00009fe:	89 c6                	mov    esi,eax
c0000a00:	eb 12                	jmp    c0000a14 <strstr+0x2c>
c0000a02:	66 90                	xchg   ax,ax
c0000a04:	56                   	push   esi
c0000a05:	57                   	push   edi
c0000a06:	53                   	push   ebx
c0000a07:	e8 3c fc ff ff       	call   c0000648 <memcmp>
c0000a0c:	83 c4 0c             	add    esp,0xc
c0000a0f:	85 c0                	test   eax,eax
c0000a11:	74 15                	je     c0000a28 <strstr+0x40>
c0000a13:	43                   	inc    ebx
c0000a14:	53                   	push   ebx
c0000a15:	e8 82 fd ff ff       	call   c000079c <strlen>
c0000a1a:	5a                   	pop    edx
c0000a1b:	39 f0                	cmp    eax,esi
c0000a1d:	73 e5                	jae    c0000a04 <strstr+0x1c>
c0000a1f:	5b                   	pop    ebx
c0000a20:	31 c0                	xor    eax,eax
c0000a22:	5e                   	pop    esi
c0000a23:	5f                   	pop    edi
c0000a24:	c3                   	ret    
c0000a25:	8d 76 00             	lea    esi,[esi+0x0]
c0000a28:	89 d8                	mov    eax,ebx
c0000a2a:	5b                   	pop    ebx
c0000a2b:	5e                   	pop    esi
c0000a2c:	5f                   	pop    edi
c0000a2d:	c3                   	ret    
c0000a2e:	66 90                	xchg   ax,ax

c0000a30 <toupper>:
c0000a30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a34:	0f b6 d0             	movzx  edx,al
c0000a37:	f6 82 40 92 02 c0 02 	test   BYTE PTR [edx-0x3ffd6dc0],0x2
c0000a3e:	74 03                	je     c0000a43 <toupper+0x13>
c0000a40:	83 e8 20             	sub    eax,0x20
c0000a43:	c3                   	ret    

c0000a44 <tolower>:
c0000a44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a48:	0f b6 d0             	movzx  edx,al
c0000a4b:	f6 82 40 92 02 c0 01 	test   BYTE PTR [edx-0x3ffd6dc0],0x1
c0000a52:	74 03                	je     c0000a57 <tolower+0x13>
c0000a54:	83 c0 20             	add    eax,0x20
c0000a57:	c3                   	ret    

c0000a58 <simple_strtoul>:
c0000a58:	55                   	push   ebp
c0000a59:	57                   	push   edi
c0000a5a:	56                   	push   esi
c0000a5b:	53                   	push   ebx
c0000a5c:	83 ec 08             	sub    esp,0x8
c0000a5f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a63:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a67:	90                   	nop
c0000a68:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a6b:	f6 82 40 92 02 c0 08 	test   BYTE PTR [edx-0x3ffd6dc0],0x8
c0000a72:	75 05                	jne    c0000a79 <simple_strtoul+0x21>
c0000a74:	80 fa 09             	cmp    dl,0x9
c0000a77:	75 03                	jne    c0000a7c <simple_strtoul+0x24>
c0000a79:	41                   	inc    ecx
c0000a7a:	eb ec                	jmp    c0000a68 <simple_strtoul+0x10>
c0000a7c:	80 fa 2d             	cmp    dl,0x2d
c0000a7f:	0f 84 1b 01 00 00    	je     c0000ba0 <simple_strtoul+0x148>
c0000a85:	80 fa 2b             	cmp    dl,0x2b
c0000a88:	0f 84 c2 00 00 00    	je     c0000b50 <simple_strtoul+0xf8>
c0000a8e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a96:	85 f6                	test   esi,esi
c0000a98:	0f 85 c3 00 00 00    	jne    c0000b61 <simple_strtoul+0x109>
c0000a9e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aa0:	80 fa 30             	cmp    dl,0x30
c0000aa3:	0f 84 47 01 00 00    	je     c0000bf0 <simple_strtoul+0x198>
c0000aa9:	be 0a 00 00 00       	mov    esi,0xa
c0000aae:	84 d2                	test   dl,dl
c0000ab0:	0f 84 6f 01 00 00    	je     c0000c25 <simple_strtoul+0x1cd>
c0000ab6:	31 ed                	xor    ebp,ebp
c0000ab8:	31 ff                	xor    edi,edi
c0000aba:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000ac1:	eb 2b                	jmp    c0000aee <simple_strtoul+0x96>
c0000ac3:	90                   	nop
c0000ac4:	83 eb 30             	sub    ebx,0x30
c0000ac7:	39 f3                	cmp    ebx,esi
c0000ac9:	73 4d                	jae    c0000b18 <simple_strtoul+0xc0>
c0000acb:	31 d2                	xor    edx,edx
c0000acd:	89 d8                	mov    eax,ebx
c0000acf:	f7 d0                	not    eax
c0000ad1:	f7 f6                	div    esi
c0000ad3:	39 f8                	cmp    eax,edi
c0000ad5:	0f 82 b1 00 00 00    	jb     c0000b8c <simple_strtoul+0x134>
c0000adb:	0f af fe             	imul   edi,esi
c0000ade:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ae5:	01 df                	add    edi,ebx
c0000ae7:	41                   	inc    ecx
c0000ae8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aea:	84 d2                	test   dl,dl
c0000aec:	74 2a                	je     c0000b18 <simple_strtoul+0xc0>
c0000aee:	0f b6 da             	movzx  ebx,dl
c0000af1:	f6 83 40 92 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6dc0],0x4
c0000af8:	75 ca                	jne    c0000ac4 <simple_strtoul+0x6c>
c0000afa:	0f be d2             	movsx  edx,dl
c0000afd:	52                   	push   edx
c0000afe:	e8 2d ff ff ff       	call   c0000a30 <toupper>
c0000b03:	5b                   	pop    ebx
c0000b04:	0f b6 d0             	movzx  edx,al
c0000b07:	f6 82 40 92 02 c0 01 	test   BYTE PTR [edx-0x3ffd6dc0],0x1
c0000b0e:	74 08                	je     c0000b18 <simple_strtoul+0xc0>
c0000b10:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b13:	39 f3                	cmp    ebx,esi
c0000b15:	72 b4                	jb     c0000acb <simple_strtoul+0x73>
c0000b17:	90                   	nop
c0000b18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b1c:	85 c0                	test   eax,eax
c0000b1e:	74 14                	je     c0000b34 <simple_strtoul+0xdc>
c0000b20:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b23:	09 f8                	or     eax,edi
c0000b25:	75 71                	jne    c0000b98 <simple_strtoul+0x140>
c0000b27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b2b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b2f:	31 ff                	xor    edi,edi
c0000b31:	89 30                	mov    DWORD PTR [eax],esi
c0000b33:	90                   	nop
c0000b34:	4d                   	dec    ebp
c0000b35:	75 05                	jne    c0000b3c <simple_strtoul+0xe4>
c0000b37:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b3c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b41:	75 02                	jne    c0000b45 <simple_strtoul+0xed>
c0000b43:	f7 df                	neg    edi
c0000b45:	83 c4 08             	add    esp,0x8
c0000b48:	89 f8                	mov    eax,edi
c0000b4a:	5b                   	pop    ebx
c0000b4b:	5e                   	pop    esi
c0000b4c:	5f                   	pop    edi
c0000b4d:	5d                   	pop    ebp
c0000b4e:	c3                   	ret    
c0000b4f:	90                   	nop
c0000b50:	41                   	inc    ecx
c0000b51:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b59:	85 f6                	test   esi,esi
c0000b5b:	0f 84 3d ff ff ff    	je     c0000a9e <simple_strtoul+0x46>
c0000b61:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b64:	83 f8 22             	cmp    eax,0x22
c0000b67:	77 6a                	ja     c0000bd3 <simple_strtoul+0x17b>
c0000b69:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b6b:	83 fe 08             	cmp    esi,0x8
c0000b6e:	0f 84 a2 00 00 00    	je     c0000c16 <simple_strtoul+0x1be>
c0000b74:	83 fe 10             	cmp    esi,0x10
c0000b77:	0f 85 31 ff ff ff    	jne    c0000aae <simple_strtoul+0x56>
c0000b7d:	80 fa 30             	cmp    dl,0x30
c0000b80:	74 2c                	je     c0000bae <simple_strtoul+0x156>
c0000b82:	be 10 00 00 00       	mov    esi,0x10
c0000b87:	e9 22 ff ff ff       	jmp    c0000aae <simple_strtoul+0x56>
c0000b8c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b91:	31 ff                	xor    edi,edi
c0000b93:	e9 4f ff ff ff       	jmp    c0000ae7 <simple_strtoul+0x8f>
c0000b98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b9c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b9e:	eb 94                	jmp    c0000b34 <simple_strtoul+0xdc>
c0000ba0:	41                   	inc    ecx
c0000ba1:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ba9:	e9 e8 fe ff ff       	jmp    c0000a96 <simple_strtoul+0x3e>
c0000bae:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bb2:	88 04 24             	mov    BYTE PTR [esp],al
c0000bb5:	50                   	push   eax
c0000bb6:	e8 89 fe ff ff       	call   c0000a44 <tolower>
c0000bbb:	5e                   	pop    esi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	0f 84 84 00 00 00    	je     c0000c49 <simple_strtoul+0x1f1>
c0000bc5:	41                   	inc    ecx
c0000bc6:	be 10 00 00 00       	mov    esi,0x10
c0000bcb:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bce:	e9 db fe ff ff       	jmp    c0000aae <simple_strtoul+0x56>
c0000bd3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bd7:	85 ff                	test   edi,edi
c0000bd9:	74 5c                	je     c0000c37 <simple_strtoul+0x1df>
c0000bdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bdf:	85 c9                	test   ecx,ecx
c0000be1:	75 4e                	jne    c0000c31 <simple_strtoul+0x1d9>
c0000be3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000be9:	31 ff                	xor    edi,edi
c0000beb:	e9 4c ff ff ff       	jmp    c0000b3c <simple_strtoul+0xe4>
c0000bf0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bf4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bf7:	50                   	push   eax
c0000bf8:	e8 47 fe ff ff       	call   c0000a44 <tolower>
c0000bfd:	5d                   	pop    ebp
c0000bfe:	83 f8 78             	cmp    eax,0x78
c0000c01:	74 3b                	je     c0000c3e <simple_strtoul+0x1e6>
c0000c03:	41                   	inc    ecx
c0000c04:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000c07:	80 fa 30             	cmp    dl,0x30
c0000c0a:	74 13                	je     c0000c1f <simple_strtoul+0x1c7>
c0000c0c:	be 08 00 00 00       	mov    esi,0x8
c0000c11:	e9 98 fe ff ff       	jmp    c0000aae <simple_strtoul+0x56>
c0000c16:	80 fa 30             	cmp    dl,0x30
c0000c19:	0f 85 8f fe ff ff    	jne    c0000aae <simple_strtoul+0x56>
c0000c1f:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c22:	41                   	inc    ecx
c0000c23:	eb e7                	jmp    c0000c0c <simple_strtoul+0x1b4>
c0000c25:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c29:	85 d2                	test   edx,edx
c0000c2b:	74 0a                	je     c0000c37 <simple_strtoul+0x1df>
c0000c2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c31:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c35:	89 30                	mov    DWORD PTR [eax],esi
c0000c37:	31 ff                	xor    edi,edi
c0000c39:	e9 fe fe ff ff       	jmp    c0000b3c <simple_strtoul+0xe4>
c0000c3e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c41:	83 c1 02             	add    ecx,0x2
c0000c44:	e9 34 ff ff ff       	jmp    c0000b7d <simple_strtoul+0x125>
c0000c49:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c4c:	be 10 00 00 00       	mov    esi,0x10
c0000c51:	83 c1 02             	add    ecx,0x2
c0000c54:	e9 55 fe ff ff       	jmp    c0000aae <simple_strtoul+0x56>

c0000c59 <largebin_index>:
c0000c59:	89 c2                	mov    edx,eax
c0000c5b:	c1 ea 08             	shr    edx,0x8
c0000c5e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c64:	77 10                	ja     c0000c76 <largebin_index+0x1d>
c0000c66:	0f bd d2             	bsr    edx,edx
c0000c69:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c6c:	d3 e8                	shr    eax,cl
c0000c6e:	83 e0 03             	and    eax,0x3
c0000c71:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c75:	c3                   	ret    
c0000c76:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c7b:	c3                   	ret    

c0000c7c <malloc_init_state>:
c0000c7c:	53                   	push   ebx
c0000c7d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c80:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c86:	89 d1                	mov    ecx,edx
c0000c88:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c8b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c8e:	83 c2 08             	add    edx,0x8
c0000c91:	39 da                	cmp    edx,ebx
c0000c93:	75 f3                	jne    c0000c88 <malloc_init_state+0xc>
c0000c95:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c97:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000ca1:	83 e2 03             	and    edx,0x3
c0000ca4:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000cae:	83 ca 48             	or     edx,0x48
c0000cb1:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cbb:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cc5:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000ccc:	89 10                	mov    DWORD PTR [eax],edx
c0000cce:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cd1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cdb:	5b                   	pop    ebx
c0000cdc:	c3                   	ret    

c0000cdd <malloc_consolidate>:
c0000cdd:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cdf:	85 d2                	test   edx,edx
c0000ce1:	0f 84 d8 00 00 00    	je     c0000dbf <malloc_consolidate+0xe2>
c0000ce7:	55                   	push   ebp
c0000ce8:	83 e2 fd             	and    edx,0xfffffffd
c0000ceb:	57                   	push   edi
c0000cec:	89 c5                	mov    ebp,eax
c0000cee:	56                   	push   esi
c0000cef:	8d 78 34             	lea    edi,[eax+0x34]
c0000cf2:	53                   	push   ebx
c0000cf3:	83 ec 10             	sub    esp,0x10
c0000cf6:	89 10                	mov    DWORD PTR [eax],edx
c0000cf8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cfc:	c1 ea 03             	shr    edx,0x3
c0000cff:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000d03:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000d07:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d0a:	85 d2                	test   edx,edx
c0000d0c:	0f 84 98 00 00 00    	je     c0000daa <malloc_consolidate+0xcd>
c0000d12:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d19:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d1c:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d1f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d23:	89 f9                	mov    ecx,edi
c0000d25:	83 e1 fe             	and    ecx,0xfffffffe
c0000d28:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d2b:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d2e:	83 e3 fc             	and    ebx,0xfffffffc
c0000d31:	83 e7 01             	and    edi,0x1
c0000d34:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d37:	75 14                	jne    c0000d4d <malloc_consolidate+0x70>
c0000d39:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d3b:	29 fa                	sub    edx,edi
c0000d3d:	01 f9                	add    ecx,edi
c0000d3f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d42:	89 fb                	mov    ebx,edi
c0000d44:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d47:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d4a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d4d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d50:	74 40                	je     c0000d92 <malloc_consolidate+0xb5>
c0000d52:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d55:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d58:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d5c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d5f:	83 e7 01             	and    edi,0x1
c0000d62:	75 0e                	jne    c0000d72 <malloc_consolidate+0x95>
c0000d64:	01 d9                	add    ecx,ebx
c0000d66:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d69:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d6c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d6f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d72:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d75:	89 ce                	mov    esi,ecx
c0000d77:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d7a:	83 ce 01             	or     esi,0x1
c0000d7d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d80:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d83:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d86:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d8a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d8d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d90:	eb 0c                	jmp    c0000d9e <malloc_consolidate+0xc1>
c0000d92:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d95:	83 c9 01             	or     ecx,0x1
c0000d98:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d9b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d9e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000da2:	85 d2                	test   edx,edx
c0000da4:	0f 85 6f ff ff ff    	jne    c0000d19 <malloc_consolidate+0x3c>
c0000daa:	83 c5 04             	add    ebp,0x4
c0000dad:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000db1:	0f 85 50 ff ff ff    	jne    c0000d07 <malloc_consolidate+0x2a>
c0000db7:	83 c4 10             	add    esp,0x10
c0000dba:	5b                   	pop    ebx
c0000dbb:	5e                   	pop    esi
c0000dbc:	5f                   	pop    edi
c0000dbd:	5d                   	pop    ebp
c0000dbe:	c3                   	ret    
c0000dbf:	e9 b8 fe ff ff       	jmp    c0000c7c <malloc_init_state>

c0000dc4 <dlfree>:
c0000dc4:	57                   	push   edi
c0000dc5:	56                   	push   esi
c0000dc6:	53                   	push   ebx
c0000dc7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dcb:	85 db                	test   ebx,ebx
c0000dcd:	0f 84 e2 00 00 00    	je     c0000eb5 <dlfree+0xf1>
c0000dd3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dd6:	8b 0d 60 e0 02 c0    	mov    ecx,DWORD PTR ds:0xc002e060
c0000ddc:	89 f0                	mov    eax,esi
c0000dde:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000de1:	83 e0 fc             	and    eax,0xfffffffc
c0000de4:	39 c1                	cmp    ecx,eax
c0000de6:	72 24                	jb     c0000e0c <dlfree+0x48>
c0000de8:	83 c9 03             	or     ecx,0x3
c0000deb:	c1 e8 03             	shr    eax,0x3
c0000dee:	89 0d 60 e0 02 c0    	mov    DWORD PTR ds:0xc002e060,ecx
c0000df4:	83 e8 02             	sub    eax,0x2
c0000df7:	8b 0c 85 64 e0 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1f9c]
c0000dfe:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000e00:	89 14 85 64 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1f9c],edx
c0000e07:	e9 a9 00 00 00       	jmp    c0000eb5 <dlfree+0xf1>
c0000e0c:	83 e6 02             	and    esi,0x2
c0000e0f:	0f 85 a0 00 00 00    	jne    c0000eb5 <dlfree+0xf1>
c0000e15:	83 c9 01             	or     ecx,0x1
c0000e18:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e1b:	89 0d 60 e0 02 c0    	mov    DWORD PTR ds:0xc002e060,ecx
c0000e21:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e24:	83 e1 fc             	and    ecx,0xfffffffc
c0000e27:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e2b:	75 13                	jne    c0000e40 <dlfree+0x7c>
c0000e2d:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e30:	29 da                	sub    edx,ebx
c0000e32:	01 d8                	add    eax,ebx
c0000e34:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e37:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e3a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e3d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e40:	39 35 8c e0 02 c0    	cmp    DWORD PTR ds:0xc002e08c,esi
c0000e46:	74 40                	je     c0000e88 <dlfree+0xc4>
c0000e48:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e4c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e4f:	80 e3 01             	and    bl,0x1
c0000e52:	75 0e                	jne    c0000e62 <dlfree+0x9e>
c0000e54:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e57:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e5a:	01 c8                	add    eax,ecx
c0000e5c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e5f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e62:	8b 0d 9c e0 02 c0    	mov    ecx,DWORD PTR ds:0xc002e09c
c0000e68:	c7 42 0c 94 e0 02 c0 	mov    DWORD PTR [edx+0xc],0xc002e094
c0000e6f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e72:	89 15 9c e0 02 c0    	mov    DWORD PTR ds:0xc002e09c,edx
c0000e78:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e7b:	89 c1                	mov    ecx,eax
c0000e7d:	83 c9 01             	or     ecx,0x1
c0000e80:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e83:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e86:	eb 10                	jmp    c0000e98 <dlfree+0xd4>
c0000e88:	01 c8                	add    eax,ecx
c0000e8a:	89 c1                	mov    ecx,eax
c0000e8c:	83 c9 01             	or     ecx,0x1
c0000e8f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e92:	89 15 8c e0 02 c0    	mov    DWORD PTR ds:0xc002e08c,edx
c0000e98:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e9d:	76 16                	jbe    c0000eb5 <dlfree+0xf1>
c0000e9f:	f6 05 60 e0 02 c0 02 	test   BYTE PTR ds:0xc002e060,0x2
c0000ea6:	74 0d                	je     c0000eb5 <dlfree+0xf1>
c0000ea8:	5b                   	pop    ebx
c0000ea9:	b8 60 e0 02 c0       	mov    eax,0xc002e060
c0000eae:	5e                   	pop    esi
c0000eaf:	5f                   	pop    edi
c0000eb0:	e9 28 fe ff ff       	jmp    c0000cdd <malloc_consolidate>
c0000eb5:	5b                   	pop    ebx
c0000eb6:	5e                   	pop    esi
c0000eb7:	5f                   	pop    edi
c0000eb8:	c3                   	ret    

c0000eb9 <sYSMALLOc>:
c0000eb9:	55                   	push   ebp
c0000eba:	57                   	push   edi
c0000ebb:	56                   	push   esi
c0000ebc:	53                   	push   ebx
c0000ebd:	89 d3                	mov    ebx,edx
c0000ebf:	83 ec 2c             	sub    esp,0x2c
c0000ec2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ec6:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ecc:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ecf:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ed2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ed6:	74 1f                	je     c0000ef7 <sYSMALLOc+0x3e>
c0000ed8:	89 d8                	mov    eax,ebx
c0000eda:	e8 fe fd ff ff       	call   c0000cdd <malloc_consolidate>
c0000edf:	83 ec 0c             	sub    esp,0xc
c0000ee2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ee6:	83 e8 07             	sub    eax,0x7
c0000ee9:	50                   	push   eax
c0000eea:	e8 30 02 00 00       	call   c000111f <dlmalloc>
c0000eef:	83 c4 10             	add    esp,0x10
c0000ef2:	e9 20 02 00 00       	jmp    c0001117 <sYSMALLOc+0x25e>
c0000ef7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000efa:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000f00:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000f03:	83 e0 fc             	and    eax,0xfffffffc
c0000f06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f0a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f0e:	83 c0 10             	add    eax,0x10
c0000f11:	01 c1                	add    ecx,eax
c0000f13:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f17:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f1e:	74 04                	je     c0000f24 <sYSMALLOc+0x6b>
c0000f20:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f24:	f7 da                	neg    edx
c0000f26:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f2a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f2e:	21 d1                	and    ecx,edx
c0000f30:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f34:	7f 07                	jg     c0000f3d <sYSMALLOc+0x84>
c0000f36:	31 c0                	xor    eax,eax
c0000f38:	e9 da 01 00 00       	jmp    c0001117 <sYSMALLOc+0x25e>
c0000f3d:	83 ec 0c             	sub    esp,0xc
c0000f40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f44:	e8 56 e7 00 00       	call   c000f69f <sbrk>
c0000f49:	83 c4 10             	add    esp,0x10
c0000f4c:	89 c6                	mov    esi,eax
c0000f4e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f51:	74 e3                	je     c0000f36 <sYSMALLOc+0x7d>
c0000f53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f57:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f5b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f5e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f64:	39 f1                	cmp    ecx,esi
c0000f66:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f6c:	75 13                	jne    c0000f81 <sYSMALLOc+0xc8>
c0000f6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f72:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f76:	83 c8 01             	or     eax,0x1
c0000f79:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f7c:	e9 3e 01 00 00       	jmp    c00010bf <sYSMALLOc+0x206>
c0000f81:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f87:	88 d0                	mov    al,dl
c0000f89:	83 e0 01             	and    eax,0x1
c0000f8c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f91:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f95:	0f 95 c0             	setne  al
c0000f98:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f9c:	39 f1                	cmp    ecx,esi
c0000f9e:	76 12                	jbe    c0000fb2 <sYSMALLOc+0xf9>
c0000fa0:	84 c0                	test   al,al
c0000fa2:	74 0e                	je     c0000fb2 <sYSMALLOc+0xf9>
c0000fa4:	83 e2 fe             	and    edx,0xfffffffe
c0000fa7:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fad:	e9 83 00 00 00       	jmp    c0001035 <sYSMALLOc+0x17c>
c0000fb2:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000fb7:	74 7c                	je     c0001035 <sYSMALLOc+0x17c>
c0000fb9:	84 c0                	test   al,al
c0000fbb:	74 0c                	je     c0000fc9 <sYSMALLOc+0x110>
c0000fbd:	89 f0                	mov    eax,esi
c0000fbf:	29 c8                	sub    eax,ecx
c0000fc1:	01 e8                	add    eax,ebp
c0000fc3:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fc9:	89 f2                	mov    edx,esi
c0000fcb:	83 e2 07             	and    edx,0x7
c0000fce:	74 0c                	je     c0000fdc <sYSMALLOc+0x123>
c0000fd0:	b8 08 00 00 00       	mov    eax,0x8
c0000fd5:	29 d0                	sub    eax,edx
c0000fd7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fda:	eb 04                	jmp    c0000fe0 <sYSMALLOc+0x127>
c0000fdc:	89 f5                	mov    ebp,esi
c0000fde:	31 c0                	xor    eax,eax
c0000fe0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fe4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fe8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fec:	01 c1                	add    ecx,eax
c0000fee:	83 ec 0c             	sub    esp,0xc
c0000ff1:	01 f1                	add    ecx,esi
c0000ff3:	01 ca                	add    edx,ecx
c0000ff5:	29 c8                	sub    eax,ecx
c0000ff7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ffb:	01 c2                	add    edx,eax
c0000ffd:	52                   	push   edx
c0000ffe:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0001002:	e8 98 e6 00 00       	call   c000f69f <sbrk>
c0001007:	83 c4 10             	add    esp,0x10
c000100a:	83 f8 ff             	cmp    eax,0xffffffff
c000100d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001011:	75 0f                	jne    c0001022 <sYSMALLOc+0x169>
c0001013:	83 ec 0c             	sub    esp,0xc
c0001016:	6a 00                	push   0x0
c0001018:	e8 82 e6 00 00       	call   c000f69f <sbrk>
c000101d:	83 c4 10             	add    esp,0x10
c0001020:	eb 30                	jmp    c0001052 <sYSMALLOc+0x199>
c0001022:	39 c6                	cmp    esi,eax
c0001024:	76 33                	jbe    c0001059 <sYSMALLOc+0x1a0>
c0001026:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000102a:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001031:	01 f0                	add    eax,esi
c0001033:	eb 1d                	jmp    c0001052 <sYSMALLOc+0x199>
c0001035:	83 ec 0c             	sub    esp,0xc
c0001038:	89 f5                	mov    ebp,esi
c000103a:	6a 00                	push   0x0
c000103c:	e8 5e e6 00 00       	call   c000f69f <sbrk>
c0001041:	89 c2                	mov    edx,eax
c0001043:	29 f2                	sub    edx,esi
c0001045:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001049:	83 c4 10             	add    esp,0x10
c000104c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001052:	31 d2                	xor    edx,edx
c0001054:	83 f8 ff             	cmp    eax,0xffffffff
c0001057:	74 66                	je     c00010bf <sYSMALLOc+0x206>
c0001059:	29 e8                	sub    eax,ebp
c000105b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000105e:	01 d0                	add    eax,edx
c0001060:	83 c8 01             	or     eax,0x1
c0001063:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001066:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000106c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001071:	74 4c                	je     c00010bf <sYSMALLOc+0x206>
c0001073:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001077:	83 e8 0c             	sub    eax,0xc
c000107a:	83 e0 f8             	and    eax,0xfffffff8
c000107d:	89 c2                	mov    edx,eax
c000107f:	83 ca 01             	or     edx,0x1
c0001082:	83 f8 0f             	cmp    eax,0xf
c0001085:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001088:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001090:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001098:	76 25                	jbe    c00010bf <sYSMALLOc+0x206>
c000109a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c00010a0:	83 ec 0c             	sub    esp,0xc
c00010a3:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010ad:	83 c7 08             	add    edi,0x8
c00010b0:	57                   	push   edi
c00010b1:	e8 0e fd ff ff       	call   c0000dc4 <dlfree>
c00010b6:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010bc:	83 c4 10             	add    esp,0x10
c00010bf:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010c5:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010cb:	73 06                	jae    c00010d3 <sYSMALLOc+0x21a>
c00010cd:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010d3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010d9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010df:	73 06                	jae    c00010e7 <sYSMALLOc+0x22e>
c00010e1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010e7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ea:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010ed:	83 e2 fc             	and    edx,0xfffffffc
c00010f0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010f4:	0f 82 3c fe ff ff    	jb     c0000f36 <sYSMALLOc+0x7d>
c00010fa:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010fe:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001101:	29 fa                	sub    edx,edi
c0001103:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001106:	83 ca 01             	or     edx,0x1
c0001109:	89 fb                	mov    ebx,edi
c000110b:	83 c0 08             	add    eax,0x8
c000110e:	83 cb 01             	or     ebx,0x1
c0001111:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001114:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001117:	83 c4 2c             	add    esp,0x2c
c000111a:	5b                   	pop    ebx
c000111b:	5e                   	pop    esi
c000111c:	5f                   	pop    edi
c000111d:	5d                   	pop    ebp
c000111e:	c3                   	ret    

c000111f <dlmalloc>:
c000111f:	55                   	push   ebp
c0001120:	57                   	push   edi
c0001121:	56                   	push   esi
c0001122:	53                   	push   ebx
c0001123:	83 ec 1c             	sub    esp,0x1c
c0001126:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000112a:	83 f8 df             	cmp    eax,0xffffffdf
c000112d:	0f 87 70 03 00 00    	ja     c00014a3 <dlmalloc+0x384>
c0001133:	83 c0 0b             	add    eax,0xb
c0001136:	be 10 00 00 00       	mov    esi,0x10
c000113b:	83 f8 0f             	cmp    eax,0xf
c000113e:	76 05                	jbe    c0001145 <dlmalloc+0x26>
c0001140:	83 e0 f8             	and    eax,0xfffffff8
c0001143:	89 c6                	mov    esi,eax
c0001145:	8b 3d 60 e0 02 c0    	mov    edi,DWORD PTR ds:0xc002e060
c000114b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001151:	75 17                	jne    c000116a <dlmalloc+0x4b>
c0001153:	85 ff                	test   edi,edi
c0001155:	0f 85 05 03 00 00    	jne    c0001460 <dlmalloc+0x341>
c000115b:	b8 60 e0 02 c0       	mov    eax,0xc002e060
c0001160:	e8 78 fb ff ff       	call   c0000cdd <malloc_consolidate>
c0001165:	e9 f6 02 00 00       	jmp    c0001460 <dlmalloc+0x341>
c000116a:	39 f7                	cmp    edi,esi
c000116c:	72 1f                	jb     c000118d <dlmalloc+0x6e>
c000116e:	89 f2                	mov    edx,esi
c0001170:	c1 ea 03             	shr    edx,0x3
c0001173:	83 ea 02             	sub    edx,0x2
c0001176:	8b 04 95 64 e0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1f9c]
c000117d:	85 c0                	test   eax,eax
c000117f:	74 0c                	je     c000118d <dlmalloc+0x6e>
c0001181:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001184:	89 0c 95 64 e0 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1f9c],ecx
c000118b:	eb 30                	jmp    c00011bd <dlmalloc+0x9e>
c000118d:	89 f0                	mov    eax,esi
c000118f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001195:	77 2e                	ja     c00011c5 <dlmalloc+0xa6>
c0001197:	c1 e8 03             	shr    eax,0x3
c000119a:	8d 14 c5 94 e0 02 c0 	lea    edx,[eax*8-0x3ffd1f6c]
c00011a1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a5:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011a8:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011ab:	39 c3                	cmp    ebx,eax
c00011ad:	74 2e                	je     c00011dd <dlmalloc+0xbe>
c00011af:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011b2:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011b7:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011ba:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011bd:	83 c0 08             	add    eax,0x8
c00011c0:	e9 e0 02 00 00       	jmp    c00014a5 <dlmalloc+0x386>
c00011c5:	e8 8f fa ff ff       	call   c0000c59 <largebin_index>
c00011ca:	83 e7 02             	and    edi,0x2
c00011cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011d1:	74 0a                	je     c00011dd <dlmalloc+0xbe>
c00011d3:	b8 60 e0 02 c0       	mov    eax,0xc002e060
c00011d8:	e8 00 fb ff ff       	call   c0000cdd <malloc_consolidate>
c00011dd:	8d 46 10             	lea    eax,[esi+0x10]
c00011e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011e4:	8b 1d a0 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e0a0
c00011ea:	81 fb 94 e0 02 c0    	cmp    ebx,0xc002e094
c00011f0:	0f 84 13 01 00 00    	je     c0001309 <dlmalloc+0x1ea>
c00011f6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011f9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011fc:	83 e7 fc             	and    edi,0xfffffffc
c00011ff:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001205:	77 4c                	ja     c0001253 <dlmalloc+0x134>
c0001207:	3d 94 e0 02 c0       	cmp    eax,0xc002e094
c000120c:	75 45                	jne    c0001253 <dlmalloc+0x134>
c000120e:	39 1d 90 e0 02 c0    	cmp    DWORD PTR ds:0xc002e090,ebx
c0001214:	75 3d                	jne    c0001253 <dlmalloc+0x134>
c0001216:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000121a:	73 37                	jae    c0001253 <dlmalloc+0x134>
c000121c:	8d 04 33             	lea    eax,[ebx+esi*1]
c000121f:	89 fa                	mov    edx,edi
c0001221:	a3 9c e0 02 c0       	mov    ds:0xc002e09c,eax
c0001226:	a3 a0 e0 02 c0       	mov    ds:0xc002e0a0,eax
c000122b:	a3 90 e0 02 c0       	mov    ds:0xc002e090,eax
c0001230:	29 f2                	sub    edx,esi
c0001232:	c7 40 08 94 e0 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e094
c0001239:	c7 40 0c 94 e0 02 c0 	mov    DWORD PTR [eax+0xc],0xc002e094
c0001240:	83 ce 01             	or     esi,0x1
c0001243:	89 d1                	mov    ecx,edx
c0001245:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001248:	83 c9 01             	or     ecx,0x1
c000124b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000124e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001251:	eb 15                	jmp    c0001268 <dlmalloc+0x149>
c0001253:	a3 a0 e0 02 c0       	mov    ds:0xc002e0a0,eax
c0001258:	39 fe                	cmp    esi,edi
c000125a:	c7 40 08 94 e0 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e094
c0001261:	75 0d                	jne    c0001270 <dlmalloc+0x151>
c0001263:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001268:	8d 43 08             	lea    eax,[ebx+0x8]
c000126b:	e9 35 02 00 00       	jmp    c00014a5 <dlmalloc+0x386>
c0001270:	89 f8                	mov    eax,edi
c0001272:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001278:	77 19                	ja     c0001293 <dlmalloc+0x174>
c000127a:	c1 e8 03             	shr    eax,0x3
c000127d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001280:	83 c2 0d             	add    edx,0xd
c0001283:	8d 2c 95 58 e0 02 c0 	lea    ebp,[edx*4-0x3ffd1fa8]
c000128a:	8b 14 95 60 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1fa0]
c0001291:	eb 46                	jmp    c00012d9 <dlmalloc+0x1ba>
c0001293:	e8 c1 f9 ff ff       	call   c0000c59 <largebin_index>
c0001298:	8d 14 00             	lea    edx,[eax+eax*1]
c000129b:	83 c2 0d             	add    edx,0xd
c000129e:	8d 0c 95 60 e0 02 c0 	lea    ecx,[edx*4-0x3ffd1fa0]
c00012a5:	8b 14 95 60 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1fa0]
c00012ac:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012af:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012b3:	89 d5                	mov    ebp,edx
c00012b5:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012b9:	74 1e                	je     c00012d9 <dlmalloc+0x1ba>
c00012bb:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012be:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012c1:	77 12                	ja     c00012d5 <dlmalloc+0x1b6>
c00012c3:	83 cf 01             	or     edi,0x1
c00012c6:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012c9:	76 05                	jbe    c00012d0 <dlmalloc+0x1b1>
c00012cb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012ce:	eb f6                	jmp    c00012c6 <dlmalloc+0x1a7>
c00012d0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012d3:	eb 04                	jmp    c00012d9 <dlmalloc+0x1ba>
c00012d5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012d9:	89 c7                	mov    edi,eax
c00012db:	88 c1                	mov    cl,al
c00012dd:	c1 ff 05             	sar    edi,0x5
c00012e0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012e4:	bf 01 00 00 00       	mov    edi,0x1
c00012e9:	d3 e7                	shl    edi,cl
c00012eb:	89 f8                	mov    eax,edi
c00012ed:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012f1:	09 04 bd 94 e3 02 c0 	or     DWORD PTR [edi*4-0x3ffd1c6c],eax
c00012f8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012fb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012fe:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001301:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001304:	e9 db fe ff ff       	jmp    c00011e4 <dlmalloc+0xc5>
c0001309:	81 fe ff 00 00 00    	cmp    esi,0xff
c000130f:	76 78                	jbe    c0001389 <dlmalloc+0x26a>
c0001311:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001315:	8d 04 c5 94 e0 02 c0 	lea    eax,[eax*8-0x3ffd1f6c]
c000131c:	8d 48 f8             	lea    ecx,[eax-0x8]
c000131f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001322:	39 ca                	cmp    edx,ecx
c0001324:	74 63                	je     c0001389 <dlmalloc+0x26a>
c0001326:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001329:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000132c:	83 e3 fc             	and    ebx,0xfffffffc
c000132f:	39 de                	cmp    esi,ebx
c0001331:	77 52                	ja     c0001385 <dlmalloc+0x266>
c0001333:	89 df                	mov    edi,ebx
c0001335:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001338:	29 f7                	sub    edi,esi
c000133a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000133d:	01 d3                	add    ebx,edx
c000133f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001342:	83 ff 0f             	cmp    edi,0xf
c0001345:	8d 42 08             	lea    eax,[edx+0x8]
c0001348:	77 09                	ja     c0001353 <dlmalloc+0x234>
c000134a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000134e:	e9 52 01 00 00       	jmp    c00014a5 <dlmalloc+0x386>
c0001353:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001356:	83 ce 01             	or     esi,0x1
c0001359:	89 0d 9c e0 02 c0    	mov    DWORD PTR ds:0xc002e09c,ecx
c000135f:	89 0d a0 e0 02 c0    	mov    DWORD PTR ds:0xc002e0a0,ecx
c0001365:	c7 41 08 94 e0 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002e094
c000136c:	c7 41 0c 94 e0 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002e094
c0001373:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001376:	89 fa                	mov    edx,edi
c0001378:	83 ca 01             	or     edx,0x1
c000137b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000137e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001380:	e9 20 01 00 00       	jmp    c00014a5 <dlmalloc+0x386>
c0001385:	89 c2                	mov    edx,eax
c0001387:	eb 99                	jmp    c0001322 <dlmalloc+0x203>
c0001389:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000138d:	b8 01 00 00 00       	mov    eax,0x1
c0001392:	41                   	inc    ecx
c0001393:	89 cb                	mov    ebx,ecx
c0001395:	8d 14 cd 8c e0 02 c0 	lea    edx,[ecx*8-0x3ffd1f74]
c000139c:	c1 eb 05             	shr    ebx,0x5
c000139f:	d3 e0                	shl    eax,cl
c00013a1:	8b 3c 9d 94 e3 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1c6c]
c00013a8:	39 f8                	cmp    eax,edi
c00013aa:	77 04                	ja     c00013b0 <dlmalloc+0x291>
c00013ac:	85 c0                	test   eax,eax
c00013ae:	75 26                	jne    c00013d6 <dlmalloc+0x2b7>
c00013b0:	43                   	inc    ebx
c00013b1:	83 fb 02             	cmp    ebx,0x2
c00013b4:	0f 87 a6 00 00 00    	ja     c0001460 <dlmalloc+0x341>
c00013ba:	8b 3c 9d 94 e3 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1c6c]
c00013c1:	85 ff                	test   edi,edi
c00013c3:	74 eb                	je     c00013b0 <dlmalloc+0x291>
c00013c5:	89 d8                	mov    eax,ebx
c00013c7:	c1 e0 06             	shl    eax,0x6
c00013ca:	8d 14 85 8c e0 02 c0 	lea    edx,[eax*4-0x3ffd1f74]
c00013d1:	b8 01 00 00 00       	mov    eax,0x1
c00013d6:	85 f8                	test   eax,edi
c00013d8:	75 07                	jne    c00013e1 <dlmalloc+0x2c2>
c00013da:	83 c2 08             	add    edx,0x8
c00013dd:	01 c0                	add    eax,eax
c00013df:	eb f5                	jmp    c00013d6 <dlmalloc+0x2b7>
c00013e1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013e4:	39 ca                	cmp    edx,ecx
c00013e6:	75 14                	jne    c00013fc <dlmalloc+0x2dd>
c00013e8:	89 c1                	mov    ecx,eax
c00013ea:	83 c2 08             	add    edx,0x8
c00013ed:	f7 d1                	not    ecx
c00013ef:	01 c0                	add    eax,eax
c00013f1:	21 cf                	and    edi,ecx
c00013f3:	89 3c 9d 94 e3 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd1c6c],edi
c00013fa:	eb ac                	jmp    c00013a8 <dlmalloc+0x289>
c00013fc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013ff:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001402:	83 e0 fc             	and    eax,0xfffffffc
c0001405:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001408:	89 c3                	mov    ebx,eax
c000140a:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000140d:	29 f3                	sub    ebx,esi
c000140f:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001412:	83 fb 0f             	cmp    ebx,0xf
c0001415:	8d 41 08             	lea    eax,[ecx+0x8]
c0001418:	77 09                	ja     c0001423 <dlmalloc+0x304>
c000141a:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c000141e:	e9 82 00 00 00       	jmp    c00014a5 <dlmalloc+0x386>
c0001423:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001426:	81 fe ff 00 00 00    	cmp    esi,0xff
c000142c:	89 3d 9c e0 02 c0    	mov    DWORD PTR ds:0xc002e09c,edi
c0001432:	89 3d a0 e0 02 c0    	mov    DWORD PTR ds:0xc002e0a0,edi
c0001438:	c7 47 08 94 e0 02 c0 	mov    DWORD PTR [edi+0x8],0xc002e094
c000143f:	c7 47 0c 94 e0 02 c0 	mov    DWORD PTR [edi+0xc],0xc002e094
c0001446:	77 06                	ja     c000144e <dlmalloc+0x32f>
c0001448:	89 3d 90 e0 02 c0    	mov    DWORD PTR ds:0xc002e090,edi
c000144e:	83 ce 01             	or     esi,0x1
c0001451:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001454:	89 d9                	mov    ecx,ebx
c0001456:	83 c9 01             	or     ecx,0x1
c0001459:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000145c:	89 1a                	mov    DWORD PTR [edx],ebx
c000145e:	eb 45                	jmp    c00014a5 <dlmalloc+0x386>
c0001460:	a1 8c e0 02 c0       	mov    eax,ds:0xc002e08c
c0001465:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001468:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000146b:	83 e2 fc             	and    edx,0xfffffffc
c000146e:	39 d1                	cmp    ecx,edx
c0001470:	77 1e                	ja     c0001490 <dlmalloc+0x371>
c0001472:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001475:	89 f3                	mov    ebx,esi
c0001477:	89 0d 8c e0 02 c0    	mov    DWORD PTR ds:0xc002e08c,ecx
c000147d:	83 cb 01             	or     ebx,0x1
c0001480:	29 f2                	sub    edx,esi
c0001482:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001485:	83 ca 01             	or     edx,0x1
c0001488:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000148b:	e9 2d fd ff ff       	jmp    c00011bd <dlmalloc+0x9e>
c0001490:	83 c4 1c             	add    esp,0x1c
c0001493:	89 f0                	mov    eax,esi
c0001495:	5b                   	pop    ebx
c0001496:	ba 60 e0 02 c0       	mov    edx,0xc002e060
c000149b:	5e                   	pop    esi
c000149c:	5f                   	pop    edi
c000149d:	5d                   	pop    ebp
c000149e:	e9 16 fa ff ff       	jmp    c0000eb9 <sYSMALLOc>
c00014a3:	31 c0                	xor    eax,eax
c00014a5:	83 c4 1c             	add    esp,0x1c
c00014a8:	5b                   	pop    ebx
c00014a9:	5e                   	pop    esi
c00014aa:	5f                   	pop    edi
c00014ab:	5d                   	pop    ebp
c00014ac:	c3                   	ret    

c00014ad <iALLOc>:
c00014ad:	55                   	push   ebp
c00014ae:	89 c5                	mov    ebp,eax
c00014b0:	57                   	push   edi
c00014b1:	56                   	push   esi
c00014b2:	53                   	push   ebx
c00014b3:	83 ec 2c             	sub    esp,0x2c
c00014b6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014ba:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014c2:	83 3d 60 e0 02 c0 00 	cmp    DWORD PTR ds:0xc002e060,0x0
c00014c9:	75 12                	jne    c00014dd <iALLOc+0x30>
c00014cb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014cf:	b8 60 e0 02 c0       	mov    eax,0xc002e060
c00014d4:	e8 04 f8 ff ff       	call   c0000cdd <malloc_consolidate>
c00014d9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014dd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014e2:	74 12                	je     c00014f6 <iALLOc+0x49>
c00014e4:	85 ed                	test   ebp,ebp
c00014e6:	0f 84 64 01 00 00    	je     c0001650 <iALLOc+0x1a3>
c00014ec:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014f4:	eb 33                	jmp    c0001529 <iALLOc+0x7c>
c00014f6:	85 ed                	test   ebp,ebp
c00014f8:	75 14                	jne    c000150e <iALLOc+0x61>
c00014fa:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001502:	83 c4 2c             	add    esp,0x2c
c0001505:	5b                   	pop    ebx
c0001506:	5e                   	pop    esi
c0001507:	5f                   	pop    edi
c0001508:	5d                   	pop    ebp
c0001509:	e9 11 fc ff ff       	jmp    c000111f <dlmalloc>
c000150e:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001515:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c000151d:	83 f8 0f             	cmp    eax,0xf
c0001520:	76 07                	jbe    c0001529 <iALLOc+0x7c>
c0001522:	83 e0 f8             	and    eax,0xfffffff8
c0001525:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001529:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c000152e:	75 09                	jne    c0001539 <iALLOc+0x8c>
c0001530:	89 d0                	mov    eax,edx
c0001532:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001535:	31 f6                	xor    esi,esi
c0001537:	eb 3b                	jmp    c0001574 <iALLOc+0xc7>
c0001539:	8b 02                	mov    eax,DWORD PTR [edx]
c000153b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001543:	83 c0 0b             	add    eax,0xb
c0001546:	83 f8 0f             	cmp    eax,0xf
c0001549:	76 07                	jbe    c0001552 <iALLOc+0xa5>
c000154b:	83 e0 f8             	and    eax,0xfffffff8
c000154e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001552:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001556:	0f af f5             	imul   esi,ebp
c0001559:	eb 25                	jmp    c0001580 <iALLOc+0xd3>
c000155b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000155d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001560:	bb 10 00 00 00       	mov    ebx,0x10
c0001565:	83 f9 0f             	cmp    ecx,0xf
c0001568:	76 05                	jbe    c000156f <iALLOc+0xc2>
c000156a:	83 e1 f8             	and    ecx,0xfffffff8
c000156d:	89 cb                	mov    ebx,ecx
c000156f:	01 de                	add    esi,ebx
c0001571:	83 c0 04             	add    eax,0x4
c0001574:	39 c7                	cmp    edi,eax
c0001576:	75 e3                	jne    c000155b <iALLOc+0xae>
c0001578:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001580:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001584:	8b 1d b4 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e3b4
c000158a:	83 ec 0c             	sub    esp,0xc
c000158d:	c7 05 b4 e3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e3b4,0x0
c0001597:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000159b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000159f:	50                   	push   eax
c00015a0:	e8 7a fb ff ff       	call   c000111f <dlmalloc>
c00015a5:	83 c4 10             	add    esp,0x10
c00015a8:	89 1d b4 e3 02 c0    	mov    DWORD PTR ds:0xc002e3b4,ebx
c00015ae:	85 c0                	test   eax,eax
c00015b0:	0f 84 92 00 00 00    	je     c0001648 <iALLOc+0x19b>
c00015b6:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015b9:	8d 78 f8             	lea    edi,[eax-0x8]
c00015bc:	83 e3 fc             	and    ebx,0xfffffffc
c00015bf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015c3:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015c8:	74 1e                	je     c00015e8 <iALLOc+0x13b>
c00015ca:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015ce:	89 d9                	mov    ecx,ebx
c00015d0:	52                   	push   edx
c00015d1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015d5:	83 e9 04             	sub    ecx,0x4
c00015d8:	51                   	push   ecx
c00015d9:	6a 00                	push   0x0
c00015db:	50                   	push   eax
c00015dc:	e8 9f f1 ff ff       	call   c0000780 <memset>
c00015e1:	83 c4 10             	add    esp,0x10
c00015e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015ed:	75 14                	jne    c0001603 <iALLOc+0x156>
c00015ef:	8d 04 37             	lea    eax,[edi+esi*1]
c00015f2:	29 f3                	sub    ebx,esi
c00015f4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015f7:	83 cb 01             	or     ebx,0x1
c00015fa:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015fe:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001601:	89 f3                	mov    ebx,esi
c0001603:	31 c0                	xor    eax,eax
c0001605:	4d                   	dec    ebp
c0001606:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001609:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000160d:	39 c5                	cmp    ebp,eax
c000160f:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001612:	74 2c                	je     c0001640 <iALLOc+0x193>
c0001614:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001618:	85 c9                	test   ecx,ecx
c000161a:	75 15                	jne    c0001631 <iALLOc+0x184>
c000161c:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000161f:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001622:	b9 10 00 00 00       	mov    ecx,0x10
c0001627:	83 fe 0f             	cmp    esi,0xf
c000162a:	76 05                	jbe    c0001631 <iALLOc+0x184>
c000162c:	83 e6 f8             	and    esi,0xfffffff8
c000162f:	89 f1                	mov    ecx,esi
c0001631:	89 ce                	mov    esi,ecx
c0001633:	29 cb                	sub    ebx,ecx
c0001635:	83 ce 01             	or     esi,0x1
c0001638:	40                   	inc    eax
c0001639:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000163c:	01 cf                	add    edi,ecx
c000163e:	eb c6                	jmp    c0001606 <iALLOc+0x159>
c0001640:	83 cb 01             	or     ebx,0x1
c0001643:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001646:	eb 08                	jmp    c0001650 <iALLOc+0x1a3>
c0001648:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001654:	83 c4 2c             	add    esp,0x2c
c0001657:	5b                   	pop    ebx
c0001658:	5e                   	pop    esi
c0001659:	5f                   	pop    edi
c000165a:	5d                   	pop    ebp
c000165b:	c3                   	ret    

c000165c <dlrealloc>:
c000165c:	55                   	push   ebp
c000165d:	57                   	push   edi
c000165e:	56                   	push   esi
c000165f:	53                   	push   ebx
c0001660:	83 ec 1c             	sub    esp,0x1c
c0001663:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001667:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000166b:	85 db                	test   ebx,ebx
c000166d:	75 10                	jne    c000167f <dlrealloc+0x23>
c000166f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001673:	83 c4 1c             	add    esp,0x1c
c0001676:	5b                   	pop    ebx
c0001677:	5e                   	pop    esi
c0001678:	5f                   	pop    edi
c0001679:	5d                   	pop    ebp
c000167a:	e9 a0 fa ff ff       	jmp    c000111f <dlmalloc>
c000167f:	83 f8 df             	cmp    eax,0xffffffdf
c0001682:	76 07                	jbe    c000168b <dlrealloc+0x2f>
c0001684:	31 db                	xor    ebx,ebx
c0001686:	e9 7c 01 00 00       	jmp    c0001807 <dlrealloc+0x1ab>
c000168b:	83 c0 0b             	add    eax,0xb
c000168e:	bf 10 00 00 00       	mov    edi,0x10
c0001693:	83 f8 0f             	cmp    eax,0xf
c0001696:	76 05                	jbe    c000169d <dlrealloc+0x41>
c0001698:	83 e0 f8             	and    eax,0xfffffff8
c000169b:	89 c7                	mov    edi,eax
c000169d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00016a0:	8d 6b f8             	lea    ebp,[ebx-0x8]
c00016a3:	89 c6                	mov    esi,eax
c00016a5:	83 e6 fc             	and    esi,0xfffffffc
c00016a8:	a8 02                	test   al,0x2
c00016aa:	75 d8                	jne    c0001684 <dlrealloc+0x28>
c00016ac:	39 f7                	cmp    edi,esi
c00016ae:	0f 86 15 01 00 00    	jbe    c00017c9 <dlrealloc+0x16d>
c00016b4:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016b8:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016bb:	39 15 8c e0 02 c0    	cmp    DWORD PTR ds:0xc002e08c,edx
c00016c1:	75 33                	jne    c00016f6 <dlrealloc+0x9a>
c00016c3:	83 e1 fc             	and    ecx,0xfffffffc
c00016c6:	01 f1                	add    ecx,esi
c00016c8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016cc:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016cf:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016d3:	77 49                	ja     c000171e <dlrealloc+0xc2>
c00016d5:	01 fd                	add    ebp,edi
c00016d7:	83 e0 01             	and    eax,0x1
c00016da:	09 f8                	or     eax,edi
c00016dc:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016df:	89 2d 8c e0 02 c0    	mov    DWORD PTR ds:0xc002e08c,ebp
c00016e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e9:	29 f8                	sub    eax,edi
c00016eb:	83 c8 01             	or     eax,0x1
c00016ee:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016f1:	e9 11 01 00 00       	jmp    c0001807 <dlrealloc+0x1ab>
c00016f6:	89 c8                	mov    eax,ecx
c00016f8:	83 e0 fe             	and    eax,0xfffffffe
c00016fb:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001700:	75 1c                	jne    c000171e <dlrealloc+0xc2>
c0001702:	83 e1 fc             	and    ecx,0xfffffffc
c0001705:	01 f1                	add    ecx,esi
c0001707:	39 cf                	cmp    edi,ecx
c0001709:	77 13                	ja     c000171e <dlrealloc+0xc2>
c000170b:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c000170e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001711:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001714:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001717:	89 ce                	mov    esi,ecx
c0001719:	e9 ab 00 00 00       	jmp    c00017c9 <dlrealloc+0x16d>
c000171e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001722:	8d 47 f9             	lea    eax,[edi-0x7]
c0001725:	83 ec 0c             	sub    esp,0xc
c0001728:	50                   	push   eax
c0001729:	e8 f1 f9 ff ff       	call   c000111f <dlmalloc>
c000172e:	83 c4 10             	add    esp,0x10
c0001731:	89 c1                	mov    ecx,eax
c0001733:	85 c0                	test   eax,eax
c0001735:	0f 84 49 ff ff ff    	je     c0001684 <dlrealloc+0x28>
c000173b:	8d 40 f8             	lea    eax,[eax-0x8]
c000173e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001742:	39 c2                	cmp    edx,eax
c0001744:	75 0a                	jne    c0001750 <dlrealloc+0xf4>
c0001746:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001749:	83 e0 fc             	and    eax,0xfffffffc
c000174c:	01 c6                	add    esi,eax
c000174e:	eb 79                	jmp    c00017c9 <dlrealloc+0x16d>
c0001750:	83 ee 04             	sub    esi,0x4
c0001753:	83 fe 27             	cmp    esi,0x27
c0001756:	76 16                	jbe    c000176e <dlrealloc+0x112>
c0001758:	50                   	push   eax
c0001759:	56                   	push   esi
c000175a:	53                   	push   ebx
c000175b:	51                   	push   ecx
c000175c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001760:	e8 e7 ef ff ff       	call   c000074c <memcpy>
c0001765:	83 c4 10             	add    esp,0x10
c0001768:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000176c:	eb 43                	jmp    c00017b1 <dlrealloc+0x155>
c000176e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001770:	83 fe 13             	cmp    esi,0x13
c0001773:	89 01                	mov    DWORD PTR [ecx],eax
c0001775:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001778:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c000177b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000177e:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001781:	76 2e                	jbe    c00017b1 <dlrealloc+0x155>
c0001783:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001786:	83 fe 1b             	cmp    esi,0x1b
c0001789:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000178c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000178f:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c0001792:	76 1d                	jbe    c00017b1 <dlrealloc+0x155>
c0001794:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0001797:	83 fe 23             	cmp    esi,0x23
c000179a:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000179d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00017a0:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c00017a3:	76 0c                	jbe    c00017b1 <dlrealloc+0x155>
c00017a5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017a8:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017ab:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017ae:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017b1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017b5:	83 ec 0c             	sub    esp,0xc
c00017b8:	53                   	push   ebx
c00017b9:	e8 06 f6 ff ff       	call   c0000dc4 <dlfree>
c00017be:	83 c4 10             	add    esp,0x10
c00017c1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017c5:	89 cb                	mov    ebx,ecx
c00017c7:	eb 3e                	jmp    c0001807 <dlrealloc+0x1ab>
c00017c9:	89 f2                	mov    edx,esi
c00017cb:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017ce:	29 fa                	sub    edx,edi
c00017d0:	83 e1 01             	and    ecx,0x1
c00017d3:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017d7:	83 fa 0f             	cmp    edx,0xf
c00017da:	77 0b                	ja     c00017e7 <dlrealloc+0x18b>
c00017dc:	09 ce                	or     esi,ecx
c00017de:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017e1:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017e5:	eb 20                	jmp    c0001807 <dlrealloc+0x1ab>
c00017e7:	01 fd                	add    ebp,edi
c00017e9:	83 ec 0c             	sub    esp,0xc
c00017ec:	09 cf                	or     edi,ecx
c00017ee:	83 ca 01             	or     edx,0x1
c00017f1:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017f4:	83 c5 08             	add    ebp,0x8
c00017f7:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00017fa:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017fe:	55                   	push   ebp
c00017ff:	e8 c0 f5 ff ff       	call   c0000dc4 <dlfree>
c0001804:	83 c4 10             	add    esp,0x10
c0001807:	83 c4 1c             	add    esp,0x1c
c000180a:	89 d8                	mov    eax,ebx
c000180c:	5b                   	pop    ebx
c000180d:	5e                   	pop    esi
c000180e:	5f                   	pop    edi
c000180f:	5d                   	pop    ebp
c0001810:	c3                   	ret    

c0001811 <dlmemalign>:
c0001811:	55                   	push   ebp
c0001812:	57                   	push   edi
c0001813:	56                   	push   esi
c0001814:	53                   	push   ebx
c0001815:	83 ec 0c             	sub    esp,0xc
c0001818:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000181c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001820:	83 fa 08             	cmp    edx,0x8
c0001823:	77 10                	ja     c0001835 <dlmemalign+0x24>
c0001825:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001829:	83 c4 0c             	add    esp,0xc
c000182c:	5b                   	pop    ebx
c000182d:	5e                   	pop    esi
c000182e:	5f                   	pop    edi
c000182f:	5d                   	pop    ebp
c0001830:	e9 ea f8 ff ff       	jmp    c000111f <dlmalloc>
c0001835:	bf 10 00 00 00       	mov    edi,0x10
c000183a:	83 fa 0f             	cmp    edx,0xf
c000183d:	76 13                	jbe    c0001852 <dlmemalign+0x41>
c000183f:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001842:	85 d1                	test   ecx,edx
c0001844:	75 04                	jne    c000184a <dlmemalign+0x39>
c0001846:	89 d7                	mov    edi,edx
c0001848:	eb 08                	jmp    c0001852 <dlmemalign+0x41>
c000184a:	39 d7                	cmp    edi,edx
c000184c:	73 04                	jae    c0001852 <dlmemalign+0x41>
c000184e:	01 ff                	add    edi,edi
c0001850:	eb f8                	jmp    c000184a <dlmemalign+0x39>
c0001852:	83 f8 df             	cmp    eax,0xffffffdf
c0001855:	76 07                	jbe    c000185e <dlmemalign+0x4d>
c0001857:	31 c0                	xor    eax,eax
c0001859:	e9 ce 00 00 00       	jmp    c000192c <dlmemalign+0x11b>
c000185e:	83 c0 0b             	add    eax,0xb
c0001861:	bd 10 00 00 00       	mov    ebp,0x10
c0001866:	83 f8 0f             	cmp    eax,0xf
c0001869:	76 05                	jbe    c0001870 <dlmemalign+0x5f>
c000186b:	83 e0 f8             	and    eax,0xfffffff8
c000186e:	89 c5                	mov    ebp,eax
c0001870:	83 ec 0c             	sub    esp,0xc
c0001873:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001877:	50                   	push   eax
c0001878:	e8 a2 f8 ff ff       	call   c000111f <dlmalloc>
c000187d:	83 c4 10             	add    esp,0x10
c0001880:	89 c1                	mov    ecx,eax
c0001882:	85 c0                	test   eax,eax
c0001884:	74 d1                	je     c0001857 <dlmemalign+0x46>
c0001886:	31 d2                	xor    edx,edx
c0001888:	8d 70 f8             	lea    esi,[eax-0x8]
c000188b:	f7 f7                	div    edi
c000188d:	85 d2                	test   edx,edx
c000188f:	74 62                	je     c00018f3 <dlmemalign+0xe2>
c0001891:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001895:	89 f8                	mov    eax,edi
c0001897:	f7 d8                	neg    eax
c0001899:	21 c3                	and    ebx,eax
c000189b:	83 eb 08             	sub    ebx,0x8
c000189e:	89 d8                	mov    eax,ebx
c00018a0:	29 f0                	sub    eax,esi
c00018a2:	83 f8 0f             	cmp    eax,0xf
c00018a5:	77 02                	ja     c00018a9 <dlmemalign+0x98>
c00018a7:	01 fb                	add    ebx,edi
c00018a9:	89 d8                	mov    eax,ebx
c00018ab:	29 f0                	sub    eax,esi
c00018ad:	89 c6                	mov    esi,eax
c00018af:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018b2:	89 c2                	mov    edx,eax
c00018b4:	83 e2 fc             	and    edx,0xfffffffc
c00018b7:	29 f2                	sub    edx,esi
c00018b9:	a8 02                	test   al,0x2
c00018bb:	74 10                	je     c00018cd <dlmemalign+0xbc>
c00018bd:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018c0:	83 ca 02             	or     edx,0x2
c00018c3:	8d 43 08             	lea    eax,[ebx+0x8]
c00018c6:	89 33                	mov    DWORD PTR [ebx],esi
c00018c8:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018cb:	eb 5f                	jmp    c000192c <dlmemalign+0x11b>
c00018cd:	83 ec 0c             	sub    esp,0xc
c00018d0:	89 d0                	mov    eax,edx
c00018d2:	83 c8 01             	or     eax,0x1
c00018d5:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018d8:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018dd:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018e0:	83 e0 01             	and    eax,0x1
c00018e3:	09 f0                	or     eax,esi
c00018e5:	89 de                	mov    esi,ebx
c00018e7:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018ea:	51                   	push   ecx
c00018eb:	e8 d4 f4 ff ff       	call   c0000dc4 <dlfree>
c00018f0:	83 c4 10             	add    esp,0x10
c00018f3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018f6:	a8 02                	test   al,0x2
c00018f8:	75 2f                	jne    c0001929 <dlmemalign+0x118>
c00018fa:	83 e0 fc             	and    eax,0xfffffffc
c00018fd:	8d 55 10             	lea    edx,[ebp+0x10]
c0001900:	39 c2                	cmp    edx,eax
c0001902:	73 25                	jae    c0001929 <dlmemalign+0x118>
c0001904:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001907:	83 ec 0c             	sub    esp,0xc
c000190a:	29 e8                	sub    eax,ebp
c000190c:	83 c2 08             	add    edx,0x8
c000190f:	83 c8 01             	or     eax,0x1
c0001912:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001915:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001918:	83 e0 01             	and    eax,0x1
c000191b:	09 c5                	or     ebp,eax
c000191d:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001920:	52                   	push   edx
c0001921:	e8 9e f4 ff ff       	call   c0000dc4 <dlfree>
c0001926:	83 c4 10             	add    esp,0x10
c0001929:	8d 46 08             	lea    eax,[esi+0x8]
c000192c:	83 c4 0c             	add    esp,0xc
c000192f:	5b                   	pop    ebx
c0001930:	5e                   	pop    esi
c0001931:	5f                   	pop    edi
c0001932:	5d                   	pop    ebp
c0001933:	c3                   	ret    

c0001934 <dlcalloc>:
c0001934:	53                   	push   ebx
c0001935:	83 ec 14             	sub    esp,0x14
c0001938:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000193c:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001941:	50                   	push   eax
c0001942:	e8 d8 f7 ff ff       	call   c000111f <dlmalloc>
c0001947:	83 c4 10             	add    esp,0x10
c000194a:	89 c3                	mov    ebx,eax
c000194c:	85 c0                	test   eax,eax
c000194e:	74 77                	je     c00019c7 <dlcalloc+0x93>
c0001950:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001953:	89 d0                	mov    eax,edx
c0001955:	83 e0 fc             	and    eax,0xfffffffc
c0001958:	80 e2 02             	and    dl,0x2
c000195b:	75 5a                	jne    c00019b7 <dlcalloc+0x83>
c000195d:	83 e8 04             	sub    eax,0x4
c0001960:	83 f8 27             	cmp    eax,0x27
c0001963:	76 03                	jbe    c0001968 <dlcalloc+0x34>
c0001965:	51                   	push   ecx
c0001966:	eb 53                	jmp    c00019bb <dlcalloc+0x87>
c0001968:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000196e:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001975:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000197c:	83 f8 13             	cmp    eax,0x13
c000197f:	76 46                	jbe    c00019c7 <dlcalloc+0x93>
c0001981:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001988:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000198f:	83 f8 1b             	cmp    eax,0x1b
c0001992:	76 33                	jbe    c00019c7 <dlcalloc+0x93>
c0001994:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000199b:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00019a2:	83 f8 23             	cmp    eax,0x23
c00019a5:	76 20                	jbe    c00019c7 <dlcalloc+0x93>
c00019a7:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019ae:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019b5:	eb 10                	jmp    c00019c7 <dlcalloc+0x93>
c00019b7:	83 e8 08             	sub    eax,0x8
c00019ba:	52                   	push   edx
c00019bb:	50                   	push   eax
c00019bc:	6a 00                	push   0x0
c00019be:	53                   	push   ebx
c00019bf:	e8 bc ed ff ff       	call   c0000780 <memset>
c00019c4:	83 c4 10             	add    esp,0x10
c00019c7:	89 d8                	mov    eax,ebx
c00019c9:	83 c4 08             	add    esp,0x8
c00019cc:	5b                   	pop    ebx
c00019cd:	c3                   	ret    

c00019ce <dlcfree>:
c00019ce:	e9 f1 f3 ff ff       	jmp    c0000dc4 <dlfree>

c00019d3 <dlindependent_calloc>:
c00019d3:	83 ec 28             	sub    esp,0x28
c00019d6:	b9 03 00 00 00       	mov    ecx,0x3
c00019db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019df:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ef:	e8 b9 fa ff ff       	call   c00014ad <iALLOc>
c00019f4:	83 c4 2c             	add    esp,0x2c
c00019f7:	c3                   	ret    

c00019f8 <dlindependent_comalloc>:
c00019f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a00:	31 c9                	xor    ecx,ecx
c0001a02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001a06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a0a:	e9 9e fa ff ff       	jmp    c00014ad <iALLOc>

c0001a0f <dlvalloc>:
c0001a0f:	83 ec 0c             	sub    esp,0xc
c0001a12:	83 3d 60 e0 02 c0 00 	cmp    DWORD PTR ds:0xc002e060,0x0
c0001a19:	75 0a                	jne    c0001a25 <dlvalloc+0x16>
c0001a1b:	b8 60 e0 02 c0       	mov    eax,0xc002e060
c0001a20:	e8 b8 f2 ff ff       	call   c0000cdd <malloc_consolidate>
c0001a25:	50                   	push   eax
c0001a26:	50                   	push   eax
c0001a27:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a2b:	ff 35 bc e3 02 c0    	push   DWORD PTR ds:0xc002e3bc
c0001a31:	e8 db fd ff ff       	call   c0001811 <dlmemalign>
c0001a36:	83 c4 1c             	add    esp,0x1c
c0001a39:	c3                   	ret    

c0001a3a <dlpvalloc>:
c0001a3a:	83 ec 0c             	sub    esp,0xc
c0001a3d:	83 3d 60 e0 02 c0 00 	cmp    DWORD PTR ds:0xc002e060,0x0
c0001a44:	75 0a                	jne    c0001a50 <dlpvalloc+0x16>
c0001a46:	b8 60 e0 02 c0       	mov    eax,0xc002e060
c0001a4b:	e8 8d f2 ff ff       	call   c0000cdd <malloc_consolidate>
c0001a50:	a1 bc e3 02 c0       	mov    eax,ds:0xc002e3bc
c0001a55:	89 c1                	mov    ecx,eax
c0001a57:	52                   	push   edx
c0001a58:	f7 d9                	neg    ecx
c0001a5a:	52                   	push   edx
c0001a5b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a5f:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a63:	21 ca                	and    edx,ecx
c0001a65:	52                   	push   edx
c0001a66:	50                   	push   eax
c0001a67:	e8 a5 fd ff ff       	call   c0001811 <dlmemalign>
c0001a6c:	83 c4 1c             	add    esp,0x1c
c0001a6f:	c3                   	ret    

c0001a70 <dlmalloc_trim>:
c0001a70:	b8 60 e0 02 c0       	mov    eax,0xc002e060
c0001a75:	e8 63 f2 ff ff       	call   c0000cdd <malloc_consolidate>
c0001a7a:	31 c0                	xor    eax,eax
c0001a7c:	c3                   	ret    

c0001a7d <dlmalloc_usable_size>:
c0001a7d:	53                   	push   ebx
c0001a7e:	31 c0                	xor    eax,eax
c0001a80:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a84:	85 c9                	test   ecx,ecx
c0001a86:	74 24                	je     c0001aac <dlmalloc_usable_size+0x2f>
c0001a88:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a8b:	f6 c2 02             	test   dl,0x2
c0001a8e:	74 08                	je     c0001a98 <dlmalloc_usable_size+0x1b>
c0001a90:	83 e2 fc             	and    edx,0xfffffffc
c0001a93:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a96:	eb 14                	jmp    c0001aac <dlmalloc_usable_size+0x2f>
c0001a98:	89 d3                	mov    ebx,edx
c0001a9a:	31 c0                	xor    eax,eax
c0001a9c:	83 e3 fe             	and    ebx,0xfffffffe
c0001a9f:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001aa4:	74 06                	je     c0001aac <dlmalloc_usable_size+0x2f>
c0001aa6:	83 e2 fc             	and    edx,0xfffffffc
c0001aa9:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aac:	5b                   	pop    ebx
c0001aad:	c3                   	ret    

c0001aae <dlmallinfo>:
c0001aae:	55                   	push   ebp
c0001aaf:	57                   	push   edi
c0001ab0:	56                   	push   esi
c0001ab1:	53                   	push   ebx
c0001ab2:	83 ec 08             	sub    esp,0x8
c0001ab5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ab9:	83 3d 8c e0 02 c0 00 	cmp    DWORD PTR ds:0xc002e08c,0x0
c0001ac0:	75 0a                	jne    c0001acc <dlmallinfo+0x1e>
c0001ac2:	b8 60 e0 02 c0       	mov    eax,0xc002e060
c0001ac7:	e8 11 f2 ff ff       	call   c0000cdd <malloc_consolidate>
c0001acc:	a1 8c e0 02 c0       	mov    eax,ds:0xc002e08c
c0001ad1:	31 ed                	xor    ebp,ebp
c0001ad3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ad6:	31 c9                	xor    ecx,ecx
c0001ad8:	83 e0 fc             	and    eax,0xfffffffc
c0001adb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001adf:	31 c0                	xor    eax,eax
c0001ae1:	8b 14 85 64 e0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1f9c]
c0001ae8:	85 d2                	test   edx,edx
c0001aea:	74 0e                	je     c0001afa <dlmallinfo+0x4c>
c0001aec:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aef:	45                   	inc    ebp
c0001af0:	83 e6 fc             	and    esi,0xfffffffc
c0001af3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001af6:	01 f1                	add    ecx,esi
c0001af8:	eb ee                	jmp    c0001ae8 <dlmallinfo+0x3a>
c0001afa:	40                   	inc    eax
c0001afb:	83 f8 0a             	cmp    eax,0xa
c0001afe:	75 e1                	jne    c0001ae1 <dlmallinfo+0x33>
c0001b00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b04:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b0b:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b0e:	b8 94 e0 02 c0       	mov    eax,0xc002e094
c0001b13:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b16:	39 f0                	cmp    eax,esi
c0001b18:	74 10                	je     c0001b2a <dlmallinfo+0x7c>
c0001b1a:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b1d:	ff 04 24             	inc    DWORD PTR [esp]
c0001b20:	83 e7 fc             	and    edi,0xfffffffc
c0001b23:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b26:	01 fa                	add    edx,edi
c0001b28:	eb ec                	jmp    c0001b16 <dlmallinfo+0x68>
c0001b2a:	83 c0 08             	add    eax,0x8
c0001b2d:	3d 8c e3 02 c0       	cmp    eax,0xc002e38c
c0001b32:	75 df                	jne    c0001b13 <dlmallinfo+0x65>
c0001b34:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b37:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b3a:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b3d:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c0001b42:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b45:	89 03                	mov    DWORD PTR [ebx],eax
c0001b47:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b4a:	8b 35 b0 e3 02 c0    	mov    esi,DWORD PTR ds:0xc002e3b0
c0001b50:	29 d0                	sub    eax,edx
c0001b52:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b55:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b58:	8b 35 c4 e3 02 c0    	mov    esi,DWORD PTR ds:0xc002e3c4
c0001b5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b62:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b65:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b68:	8b 35 d4 e3 02 c0    	mov    esi,DWORD PTR ds:0xc002e3d4
c0001b6e:	89 d8                	mov    eax,ebx
c0001b70:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b73:	83 c4 08             	add    esp,0x8
c0001b76:	5b                   	pop    ebx
c0001b77:	5e                   	pop    esi
c0001b78:	5f                   	pop    edi
c0001b79:	5d                   	pop    ebp
c0001b7a:	c2 04 00             	ret    0x4

c0001b7d <dlmalloc_stats>:
c0001b7d:	83 ec 30             	sub    esp,0x30
c0001b80:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b84:	50                   	push   eax
c0001b85:	e8 24 ff ff ff       	call   c0001aae <dlmallinfo>
c0001b8a:	83 c4 30             	add    esp,0x30
c0001b8d:	c3                   	ret    

c0001b8e <dlmallopt>:
c0001b8e:	56                   	push   esi
c0001b8f:	b8 60 e0 02 c0       	mov    eax,0xc002e060
c0001b94:	53                   	push   ebx
c0001b95:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b99:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b9d:	e8 3b f1 ff ff       	call   c0000cdd <malloc_consolidate>
c0001ba2:	8d 46 04             	lea    eax,[esi+0x4]
c0001ba5:	83 f8 05             	cmp    eax,0x5
c0001ba8:	77 67                	ja     c0001c11 <dlmallopt+0x83>
c0001baa:	ff 24 85 44 93 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6cbc]
c0001bb1:	83 fb 50             	cmp    ebx,0x50
c0001bb4:	77 5b                	ja     c0001c11 <dlmallopt+0x83>
c0001bb6:	ba 08 00 00 00       	mov    edx,0x8
c0001bbb:	85 db                	test   ebx,ebx
c0001bbd:	74 12                	je     c0001bd1 <dlmallopt+0x43>
c0001bbf:	83 c3 0b             	add    ebx,0xb
c0001bc2:	ba 10 00 00 00       	mov    edx,0x10
c0001bc7:	83 fb 0f             	cmp    ebx,0xf
c0001bca:	76 05                	jbe    c0001bd1 <dlmallopt+0x43>
c0001bcc:	89 da                	mov    edx,ebx
c0001bce:	83 e2 f8             	and    edx,0xfffffff8
c0001bd1:	a1 60 e0 02 c0       	mov    eax,ds:0xc002e060
c0001bd6:	83 e0 03             	and    eax,0x3
c0001bd9:	09 d0                	or     eax,edx
c0001bdb:	a3 60 e0 02 c0       	mov    ds:0xc002e060,eax
c0001be0:	eb 31                	jmp    c0001c13 <dlmallopt+0x85>
c0001be2:	89 1d a4 e3 02 c0    	mov    DWORD PTR ds:0xc002e3a4,ebx
c0001be8:	eb 06                	jmp    c0001bf0 <dlmallopt+0x62>
c0001bea:	89 1d a8 e3 02 c0    	mov    DWORD PTR ds:0xc002e3a8,ebx
c0001bf0:	be 01 00 00 00       	mov    esi,0x1
c0001bf5:	eb 1c                	jmp    c0001c13 <dlmallopt+0x85>
c0001bf7:	89 1d ac e3 02 c0    	mov    DWORD PTR ds:0xc002e3ac,ebx
c0001bfd:	eb f1                	jmp    c0001bf0 <dlmallopt+0x62>
c0001bff:	31 f6                	xor    esi,esi
c0001c01:	85 db                	test   ebx,ebx
c0001c03:	75 0e                	jne    c0001c13 <dlmallopt+0x85>
c0001c05:	c7 05 b4 e3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e3b4,0x0
c0001c0f:	eb df                	jmp    c0001bf0 <dlmallopt+0x62>
c0001c11:	31 f6                	xor    esi,esi
c0001c13:	89 f0                	mov    eax,esi
c0001c15:	5b                   	pop    ebx
c0001c16:	5e                   	pop    esi
c0001c17:	c3                   	ret    

c0001c18 <disk_status>:
c0001c18:	31 c0                	xor    eax,eax
c0001c1a:	c3                   	ret    

c0001c1b <disk_initialize>:
c0001c1b:	31 c0                	xor    eax,eax
c0001c1d:	c3                   	ret    

c0001c1e <disk_read>:
c0001c1e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c23:	0f b6 04 85 40 1b 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce4c0]
c0001c2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c2f:	e9 86 f1 01 00       	jmp    c0020dba <fatWrapperReadDisk>

c0001c34 <disk_write>:
c0001c34:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c39:	0f b6 04 85 40 1b 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce4c0]
c0001c41:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c45:	e9 b7 f1 01 00       	jmp    c0020e01 <fatWrapperWriteDisk>

c0001c4a <disk_ioctl>:
c0001c4a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c4f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c53:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c58:	0f b6 04 85 40 1b 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce4c0]
c0001c60:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c64:	e9 df f1 01 00       	jmp    c0020e48 <fatWrapperIoctl>

c0001c69 <ld_word>:
c0001c69:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c6d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c70:	c1 e2 08             	shl    edx,0x8
c0001c73:	09 d0                	or     eax,edx
c0001c75:	c3                   	ret    

c0001c76 <ld_dword>:
c0001c76:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c7a:	89 d1                	mov    ecx,edx
c0001c7c:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c80:	c1 e1 08             	shl    ecx,0x8
c0001c83:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c86:	09 ca                	or     edx,ecx
c0001c88:	c1 e2 08             	shl    edx,0x8
c0001c8b:	09 d0                	or     eax,edx
c0001c8d:	c3                   	ret    

c0001c8e <ld_qword>:
c0001c8e:	57                   	push   edi
c0001c8f:	56                   	push   esi
c0001c90:	53                   	push   ebx
c0001c91:	31 db                	xor    ebx,ebx
c0001c93:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c96:	89 df                	mov    edi,ebx
c0001c98:	89 ce                	mov    esi,ecx
c0001c9a:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c9e:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca2:	c1 e6 08             	shl    esi,0x8
c0001ca5:	09 f2                	or     edx,esi
c0001ca7:	89 d6                	mov    esi,edx
c0001ca9:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001cad:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb1:	c1 e6 08             	shl    esi,0x8
c0001cb4:	09 f2                	or     edx,esi
c0001cb6:	89 d6                	mov    esi,edx
c0001cb8:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cbc:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cc0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cc3:	c1 e6 08             	shl    esi,0x8
c0001cc6:	89 fb                	mov    ebx,edi
c0001cc8:	09 f2                	or     edx,esi
c0001cca:	89 d1                	mov    ecx,edx
c0001ccc:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cd0:	c1 e1 08             	shl    ecx,0x8
c0001cd3:	89 da                	mov    edx,ebx
c0001cd5:	09 c8                	or     eax,ecx
c0001cd7:	5b                   	pop    ebx
c0001cd8:	5e                   	pop    esi
c0001cd9:	5f                   	pop    edi
c0001cda:	c3                   	ret    

c0001cdb <st_word>:
c0001cdb:	66 89 10             	mov    WORD PTR [eax],dx
c0001cde:	c3                   	ret    

c0001cdf <st_dword>:
c0001cdf:	89 10                	mov    DWORD PTR [eax],edx
c0001ce1:	c3                   	ret    

c0001ce2 <st_qword>:
c0001ce2:	89 10                	mov    DWORD PTR [eax],edx
c0001ce4:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ce7:	c3                   	ret    

c0001ce8 <mem_cpy>:
c0001ce8:	85 c9                	test   ecx,ecx
c0001cea:	74 10                	je     c0001cfc <mem_cpy+0x14>
c0001cec:	57                   	push   edi
c0001ced:	01 c1                	add    ecx,eax
c0001cef:	56                   	push   esi
c0001cf0:	89 c7                	mov    edi,eax
c0001cf2:	89 d6                	mov    esi,edx
c0001cf4:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cf5:	39 f9                	cmp    ecx,edi
c0001cf7:	75 fb                	jne    c0001cf4 <mem_cpy+0xc>
c0001cf9:	5e                   	pop    esi
c0001cfa:	5f                   	pop    edi
c0001cfb:	c3                   	ret    
c0001cfc:	c3                   	ret    

c0001cfd <mem_set>:
c0001cfd:	01 c1                	add    ecx,eax
c0001cff:	40                   	inc    eax
c0001d00:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d03:	39 c8                	cmp    eax,ecx
c0001d05:	75 f8                	jne    c0001cff <mem_set+0x2>
c0001d07:	c3                   	ret    

c0001d08 <mem_cmp>:
c0001d08:	57                   	push   edi
c0001d09:	56                   	push   esi
c0001d0a:	89 c6                	mov    esi,eax
c0001d0c:	53                   	push   ebx
c0001d0d:	46                   	inc    esi
c0001d0e:	42                   	inc    edx
c0001d0f:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d13:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d17:	29 fb                	sub    ebx,edi
c0001d19:	89 cf                	mov    edi,ecx
c0001d1b:	29 f7                	sub    edi,esi
c0001d1d:	01 c7                	add    edi,eax
c0001d1f:	74 04                	je     c0001d25 <mem_cmp+0x1d>
c0001d21:	85 db                	test   ebx,ebx
c0001d23:	74 e8                	je     c0001d0d <mem_cmp+0x5>
c0001d25:	89 d8                	mov    eax,ebx
c0001d27:	5b                   	pop    ebx
c0001d28:	5e                   	pop    esi
c0001d29:	5f                   	pop    edi
c0001d2a:	c3                   	ret    

c0001d2b <chk_chr>:
c0001d2b:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d2e:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d31:	74 07                	je     c0001d3a <chk_chr+0xf>
c0001d33:	39 d1                	cmp    ecx,edx
c0001d35:	74 03                	je     c0001d3a <chk_chr+0xf>
c0001d37:	40                   	inc    eax
c0001d38:	eb f1                	jmp    c0001d2b <chk_chr>
c0001d3a:	89 c8                	mov    eax,ecx
c0001d3c:	c3                   	ret    

c0001d3d <dbc_1st>:
c0001d3d:	31 c0                	xor    eax,eax
c0001d3f:	c3                   	ret    

c0001d40 <dbc_2nd>:
c0001d40:	31 c0                	xor    eax,eax
c0001d42:	c3                   	ret    

c0001d43 <tchar2uni>:
c0001d43:	57                   	push   edi
c0001d44:	89 c7                	mov    edi,eax
c0001d46:	56                   	push   esi
c0001d47:	53                   	push   ebx
c0001d48:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d4a:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d4c:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d4f:	84 c9                	test   cl,cl
c0001d51:	78 0a                	js     c0001d5d <tchar2uni+0x1a>
c0001d53:	0f b6 d1             	movzx  edx,cl
c0001d56:	89 f3                	mov    ebx,esi
c0001d58:	e9 9f 00 00 00       	jmp    c0001dfc <tchar2uni+0xb9>
c0001d5d:	88 ca                	mov    dl,cl
c0001d5f:	83 e2 e0             	and    edx,0xffffffe0
c0001d62:	80 fa c0             	cmp    dl,0xc0
c0001d65:	75 0c                	jne    c0001d73 <tchar2uni+0x30>
c0001d67:	89 ca                	mov    edx,ecx
c0001d69:	b9 01 00 00 00       	mov    ecx,0x1
c0001d6e:	83 e2 1f             	and    edx,0x1f
c0001d71:	eb 2e                	jmp    c0001da1 <tchar2uni+0x5e>
c0001d73:	88 ca                	mov    dl,cl
c0001d75:	83 e2 f0             	and    edx,0xfffffff0
c0001d78:	80 fa e0             	cmp    dl,0xe0
c0001d7b:	75 0c                	jne    c0001d89 <tchar2uni+0x46>
c0001d7d:	89 ca                	mov    edx,ecx
c0001d7f:	b9 02 00 00 00       	mov    ecx,0x2
c0001d84:	83 e2 0f             	and    edx,0xf
c0001d87:	eb 18                	jmp    c0001da1 <tchar2uni+0x5e>
c0001d89:	88 ca                	mov    dl,cl
c0001d8b:	83 e2 f8             	and    edx,0xfffffff8
c0001d8e:	88 d0                	mov    al,dl
c0001d90:	83 ca ff             	or     edx,0xffffffff
c0001d93:	3c f0                	cmp    al,0xf0
c0001d95:	75 6c                	jne    c0001e03 <tchar2uni+0xc0>
c0001d97:	89 ca                	mov    edx,ecx
c0001d99:	b9 03 00 00 00       	mov    ecx,0x3
c0001d9e:	83 e2 07             	and    edx,0x7
c0001da1:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001da5:	46                   	inc    esi
c0001da6:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001da9:	88 c8                	mov    al,cl
c0001dab:	83 e0 c0             	and    eax,0xffffffc0
c0001dae:	3c 80                	cmp    al,0x80
c0001db0:	75 4e                	jne    c0001e00 <tchar2uni+0xbd>
c0001db2:	c1 e2 06             	shl    edx,0x6
c0001db5:	83 e1 3f             	and    ecx,0x3f
c0001db8:	09 ca                	or     edx,ecx
c0001dba:	39 de                	cmp    esi,ebx
c0001dbc:	75 e7                	jne    c0001da5 <tchar2uni+0x62>
c0001dbe:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001dc1:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dc7:	77 37                	ja     c0001e00 <tchar2uni+0xbd>
c0001dc9:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001dcf:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dd5:	76 29                	jbe    c0001e00 <tchar2uni+0xbd>
c0001dd7:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001ddd:	76 1d                	jbe    c0001dfc <tchar2uni+0xb9>
c0001ddf:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001de5:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001deb:	c1 e1 06             	shl    ecx,0x6
c0001dee:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001df4:	09 ca                	or     edx,ecx
c0001df6:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dfc:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dfe:	eb 03                	jmp    c0001e03 <tchar2uni+0xc0>
c0001e00:	83 ca ff             	or     edx,0xffffffff
c0001e03:	5b                   	pop    ebx
c0001e04:	89 d0                	mov    eax,edx
c0001e06:	5e                   	pop    esi
c0001e07:	5f                   	pop    edi
c0001e08:	c3                   	ret    

c0001e09 <put_utf>:
c0001e09:	53                   	push   ebx
c0001e0a:	83 f8 7f             	cmp    eax,0x7f
c0001e0d:	89 c3                	mov    ebx,eax
c0001e0f:	b0 00                	mov    al,0x0
c0001e11:	77 11                	ja     c0001e24 <put_utf+0x1b>
c0001e13:	85 c9                	test   ecx,ecx
c0001e15:	0f 84 e5 00 00 00    	je     c0001f00 <put_utf+0xf7>
c0001e1b:	88 1a                	mov    BYTE PTR [edx],bl
c0001e1d:	b0 01                	mov    al,0x1
c0001e1f:	e9 dc 00 00 00       	jmp    c0001f00 <put_utf+0xf7>
c0001e24:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e2a:	77 23                	ja     c0001e4f <put_utf+0x46>
c0001e2c:	83 f9 01             	cmp    ecx,0x1
c0001e2f:	0f 86 cb 00 00 00    	jbe    c0001f00 <put_utf+0xf7>
c0001e35:	89 d8                	mov    eax,ebx
c0001e37:	83 e3 3f             	and    ebx,0x3f
c0001e3a:	c1 e8 06             	shr    eax,0x6
c0001e3d:	83 cb 80             	or     ebx,0xffffff80
c0001e40:	83 c8 c0             	or     eax,0xffffffc0
c0001e43:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e46:	88 02                	mov    BYTE PTR [edx],al
c0001e48:	b0 02                	mov    al,0x2
c0001e4a:	e9 b1 00 00 00       	jmp    c0001f00 <put_utf+0xf7>
c0001e4f:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e55:	77 40                	ja     c0001e97 <put_utf+0x8e>
c0001e57:	83 f9 02             	cmp    ecx,0x2
c0001e5a:	0f 86 a0 00 00 00    	jbe    c0001f00 <put_utf+0xf7>
c0001e60:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e66:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e6c:	0f 86 8e 00 00 00    	jbe    c0001f00 <put_utf+0xf7>
c0001e72:	89 d8                	mov    eax,ebx
c0001e74:	c1 e8 0c             	shr    eax,0xc
c0001e77:	83 c8 e0             	or     eax,0xffffffe0
c0001e7a:	88 02                	mov    BYTE PTR [edx],al
c0001e7c:	89 d8                	mov    eax,ebx
c0001e7e:	83 e3 3f             	and    ebx,0x3f
c0001e81:	c1 e8 06             	shr    eax,0x6
c0001e84:	83 cb 80             	or     ebx,0xffffff80
c0001e87:	83 e0 3f             	and    eax,0x3f
c0001e8a:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e8d:	83 c8 80             	or     eax,0xffffff80
c0001e90:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e93:	b0 03                	mov    al,0x3
c0001e95:	eb 69                	jmp    c0001f00 <put_utf+0xf7>
c0001e97:	83 f9 03             	cmp    ecx,0x3
c0001e9a:	76 64                	jbe    c0001f00 <put_utf+0xf7>
c0001e9c:	89 d9                	mov    ecx,ebx
c0001e9e:	0f b7 c3             	movzx  eax,bx
c0001ea1:	66 31 c9             	xor    cx,cx
c0001ea4:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001eaa:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001eb0:	c1 e9 06             	shr    ecx,0x6
c0001eb3:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001eb9:	77 43                	ja     c0001efe <put_utf+0xf5>
c0001ebb:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001ec1:	77 3b                	ja     c0001efe <put_utf+0xf5>
c0001ec3:	09 cb                	or     ebx,ecx
c0001ec5:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ecb:	89 d8                	mov    eax,ebx
c0001ecd:	c1 e8 12             	shr    eax,0x12
c0001ed0:	83 c8 f0             	or     eax,0xfffffff0
c0001ed3:	88 02                	mov    BYTE PTR [edx],al
c0001ed5:	89 d8                	mov    eax,ebx
c0001ed7:	c1 e8 0c             	shr    eax,0xc
c0001eda:	83 e0 3f             	and    eax,0x3f
c0001edd:	83 c8 80             	or     eax,0xffffff80
c0001ee0:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ee3:	89 d8                	mov    eax,ebx
c0001ee5:	83 e3 3f             	and    ebx,0x3f
c0001ee8:	c1 e8 06             	shr    eax,0x6
c0001eeb:	83 cb 80             	or     ebx,0xffffff80
c0001eee:	83 e0 3f             	and    eax,0x3f
c0001ef1:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001ef4:	83 c8 80             	or     eax,0xffffff80
c0001ef7:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001efa:	b0 04                	mov    al,0x4
c0001efc:	eb 02                	jmp    c0001f00 <put_utf+0xf7>
c0001efe:	31 c0                	xor    eax,eax
c0001f00:	5b                   	pop    ebx
c0001f01:	c3                   	ret    

c0001f02 <clst2sect>:
c0001f02:	89 c1                	mov    ecx,eax
c0001f04:	83 ea 02             	sub    edx,0x2
c0001f07:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f0a:	83 e8 02             	sub    eax,0x2
c0001f0d:	39 d0                	cmp    eax,edx
c0001f0f:	76 0d                	jbe    c0001f1e <clst2sect+0x1c>
c0001f11:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f15:	f7 e2                	mul    edx
c0001f17:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f1a:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f1d:	c3                   	ret    
c0001f1e:	31 c0                	xor    eax,eax
c0001f20:	31 d2                	xor    edx,edx
c0001f22:	c3                   	ret    

c0001f23 <clmt_clust>:
c0001f23:	57                   	push   edi
c0001f24:	89 cf                	mov    edi,ecx
c0001f26:	56                   	push   esi
c0001f27:	89 d6                	mov    esi,edx
c0001f29:	53                   	push   ebx
c0001f2a:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f2e:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f31:	89 f2                	mov    edx,esi
c0001f33:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f35:	c1 ef 09             	shr    edi,0x9
c0001f38:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f3c:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f3f:	89 f9                	mov    ecx,edi
c0001f41:	31 ff                	xor    edi,edi
c0001f43:	57                   	push   edi
c0001f44:	56                   	push   esi
c0001f45:	51                   	push   ecx
c0001f46:	52                   	push   edx
c0001f47:	e8 78 4a 02 00       	call   c00269c4 <__udivdi3>
c0001f4c:	83 c4 10             	add    esp,0x10
c0001f4f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f51:	85 d2                	test   edx,edx
c0001f53:	74 10                	je     c0001f65 <clmt_clust+0x42>
c0001f55:	39 d0                	cmp    eax,edx
c0001f57:	72 07                	jb     c0001f60 <clmt_clust+0x3d>
c0001f59:	29 d0                	sub    eax,edx
c0001f5b:	83 c3 08             	add    ebx,0x8
c0001f5e:	eb ef                	jmp    c0001f4f <clmt_clust+0x2c>
c0001f60:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f63:	89 c2                	mov    edx,eax
c0001f65:	5b                   	pop    ebx
c0001f66:	89 d0                	mov    eax,edx
c0001f68:	5e                   	pop    esi
c0001f69:	5f                   	pop    edi
c0001f6a:	c3                   	ret    

c0001f6b <pick_lfn>:
c0001f6b:	55                   	push   ebp
c0001f6c:	57                   	push   edi
c0001f6d:	56                   	push   esi
c0001f6e:	89 d6                	mov    esi,edx
c0001f70:	53                   	push   ebx
c0001f71:	89 c3                	mov    ebx,eax
c0001f73:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f76:	e8 ee fc ff ff       	call   c0001c69 <ld_word>
c0001f7b:	66 85 c0             	test   ax,ax
c0001f7e:	74 04                	je     c0001f84 <pick_lfn+0x19>
c0001f80:	31 c0                	xor    eax,eax
c0001f82:	eb 5c                	jmp    c0001fe0 <pick_lfn+0x75>
c0001f84:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f87:	bd 01 00 00 00       	mov    ebp,0x1
c0001f8c:	83 e1 bf             	and    ecx,0xffffffbf
c0001f8f:	31 ff                	xor    edi,edi
c0001f91:	49                   	dec    ecx
c0001f92:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f95:	0f b6 87 60 94 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6ba0]
c0001f9c:	01 f0                	add    eax,esi
c0001f9e:	e8 c6 fc ff ff       	call   c0001c69 <ld_word>
c0001fa3:	66 85 ed             	test   bp,bp
c0001fa6:	74 11                	je     c0001fb9 <pick_lfn+0x4e>
c0001fa8:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fae:	77 d0                	ja     c0001f80 <pick_lfn+0x15>
c0001fb0:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fb4:	89 c5                	mov    ebp,eax
c0001fb6:	41                   	inc    ecx
c0001fb7:	eb 04                	jmp    c0001fbd <pick_lfn+0x52>
c0001fb9:	66 40                	inc    ax
c0001fbb:	75 c3                	jne    c0001f80 <pick_lfn+0x15>
c0001fbd:	47                   	inc    edi
c0001fbe:	83 ff 0d             	cmp    edi,0xd
c0001fc1:	75 d2                	jne    c0001f95 <pick_lfn+0x2a>
c0001fc3:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fc6:	74 13                	je     c0001fdb <pick_lfn+0x70>
c0001fc8:	66 85 ed             	test   bp,bp
c0001fcb:	74 0e                	je     c0001fdb <pick_lfn+0x70>
c0001fcd:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fd3:	77 ab                	ja     c0001f80 <pick_lfn+0x15>
c0001fd5:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fdb:	b8 01 00 00 00       	mov    eax,0x1
c0001fe0:	5b                   	pop    ebx
c0001fe1:	5e                   	pop    esi
c0001fe2:	5f                   	pop    edi
c0001fe3:	5d                   	pop    ebp
c0001fe4:	c3                   	ret    

c0001fe5 <put_lfn>:
c0001fe5:	55                   	push   ebp
c0001fe6:	31 ed                	xor    ebp,ebp
c0001fe8:	57                   	push   edi
c0001fe9:	89 d7                	mov    edi,edx
c0001feb:	56                   	push   esi
c0001fec:	31 f6                	xor    esi,esi
c0001fee:	53                   	push   ebx
c0001fef:	83 ec 08             	sub    esp,0x8
c0001ff2:	89 04 24             	mov    DWORD PTR [esp],eax
c0001ff5:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ff9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ffd:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0002003:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002006:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002009:	31 d2                	xor    edx,edx
c000200b:	e8 cb fc ff ff       	call   c0001cdb <st_word>
c0002010:	0f b6 d9             	movzx  ebx,cl
c0002013:	4b                   	dec    ebx
c0002014:	6b db 0d             	imul   ebx,ebx,0xd
c0002017:	66 83 fe ff          	cmp    si,0xffff
c000201b:	74 08                	je     c0002025 <put_lfn+0x40>
c000201d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002020:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0002024:	43                   	inc    ebx
c0002025:	0f b6 85 60 94 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6ba0]
c000202c:	0f b7 d6             	movzx  edx,si
c000202f:	01 f8                	add    eax,edi
c0002031:	e8 a5 fc ff ff       	call   c0001cdb <st_word>
c0002036:	66 85 f6             	test   si,si
c0002039:	75 03                	jne    c000203e <put_lfn+0x59>
c000203b:	83 ce ff             	or     esi,0xffffffff
c000203e:	45                   	inc    ebp
c000203f:	83 fd 0d             	cmp    ebp,0xd
c0002042:	75 d3                	jne    c0002017 <put_lfn+0x32>
c0002044:	66 46                	inc    si
c0002046:	74 0a                	je     c0002052 <put_lfn+0x6d>
c0002048:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000204b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002050:	75 09                	jne    c000205b <put_lfn+0x76>
c0002052:	88 c8                	mov    al,cl
c0002054:	83 c8 40             	or     eax,0x40
c0002057:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000205b:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000205f:	88 07                	mov    BYTE PTR [edi],al
c0002061:	83 c4 08             	add    esp,0x8
c0002064:	5b                   	pop    ebx
c0002065:	5e                   	pop    esi
c0002066:	5f                   	pop    edi
c0002067:	5d                   	pop    ebp
c0002068:	c3                   	ret    

c0002069 <gen_numname>:
c0002069:	57                   	push   edi
c000206a:	89 cf                	mov    edi,ecx
c000206c:	56                   	push   esi
c000206d:	b9 0b 00 00 00       	mov    ecx,0xb
c0002072:	53                   	push   ebx
c0002073:	89 c6                	mov    esi,eax
c0002075:	83 ec 10             	sub    esp,0x10
c0002078:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000207c:	e8 67 fc ff ff       	call   c0001ce8 <mem_cpy>
c0002081:	83 fb 05             	cmp    ebx,0x5
c0002084:	76 2d                	jbe    c00020b3 <gen_numname+0x4a>
c0002086:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002089:	66 85 c0             	test   ax,ax
c000208c:	74 25                	je     c00020b3 <gen_numname+0x4a>
c000208e:	83 c7 02             	add    edi,0x2
c0002091:	ba 10 00 00 00       	mov    edx,0x10
c0002096:	01 db                	add    ebx,ebx
c0002098:	89 c1                	mov    ecx,eax
c000209a:	66 d1 e8             	shr    ax,1
c000209d:	83 e1 01             	and    ecx,0x1
c00020a0:	01 cb                	add    ebx,ecx
c00020a2:	0f ba e3 10          	bt     ebx,0x10
c00020a6:	73 06                	jae    c00020ae <gen_numname+0x45>
c00020a8:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020ae:	4a                   	dec    edx
c00020af:	75 e5                	jne    c0002096 <gen_numname+0x2d>
c00020b1:	eb d3                	jmp    c0002086 <gen_numname+0x1d>
c00020b3:	b8 07 00 00 00       	mov    eax,0x7
c00020b8:	88 d9                	mov    cl,bl
c00020ba:	83 e1 0f             	and    ecx,0xf
c00020bd:	8d 51 30             	lea    edx,[ecx+0x30]
c00020c0:	80 fa 39             	cmp    dl,0x39
c00020c3:	76 03                	jbe    c00020c8 <gen_numname+0x5f>
c00020c5:	8d 51 37             	lea    edx,[ecx+0x37]
c00020c8:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020cb:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020cf:	89 da                	mov    edx,ebx
c00020d1:	c1 ea 04             	shr    edx,0x4
c00020d4:	83 fb 0f             	cmp    ebx,0xf
c00020d7:	76 06                	jbe    c00020df <gen_numname+0x76>
c00020d9:	89 c8                	mov    eax,ecx
c00020db:	89 d3                	mov    ebx,edx
c00020dd:	eb d9                	jmp    c00020b8 <gen_numname+0x4f>
c00020df:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020e4:	31 d2                	xor    edx,edx
c00020e6:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020e9:	8d 04 16             	lea    eax,[esi+edx*1]
c00020ec:	39 ca                	cmp    edx,ecx
c00020ee:	73 18                	jae    c0002108 <gen_numname+0x9f>
c00020f0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020f3:	3c 20                	cmp    al,0x20
c00020f5:	74 11                	je     c0002108 <gen_numname+0x9f>
c00020f7:	e8 41 fc ff ff       	call   c0001d3d <dbc_1st>
c00020fc:	85 c0                	test   eax,eax
c00020fe:	74 05                	je     c0002105 <gen_numname+0x9c>
c0002100:	39 d3                	cmp    ebx,edx
c0002102:	74 04                	je     c0002108 <gen_numname+0x9f>
c0002104:	42                   	inc    edx
c0002105:	42                   	inc    edx
c0002106:	eb e1                	jmp    c00020e9 <gen_numname+0x80>
c0002108:	b0 20                	mov    al,0x20
c000210a:	83 f9 07             	cmp    ecx,0x7
c000210d:	77 05                	ja     c0002114 <gen_numname+0xab>
c000210f:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002113:	41                   	inc    ecx
c0002114:	42                   	inc    edx
c0002115:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002119:	83 fa 07             	cmp    edx,0x7
c000211c:	76 ea                	jbe    c0002108 <gen_numname+0x9f>
c000211e:	83 c4 10             	add    esp,0x10
c0002121:	5b                   	pop    ebx
c0002122:	5e                   	pop    esi
c0002123:	5f                   	pop    edi
c0002124:	c3                   	ret    

c0002125 <sum_sfn>:
c0002125:	31 c9                	xor    ecx,ecx
c0002127:	31 d2                	xor    edx,edx
c0002129:	d0 ca                	ror    dl,1
c000212b:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c000212e:	41                   	inc    ecx
c000212f:	83 f9 0b             	cmp    ecx,0xb
c0002132:	75 f5                	jne    c0002129 <sum_sfn+0x4>
c0002134:	88 d0                	mov    al,dl
c0002136:	c3                   	ret    

c0002137 <xdir_sum>:
c0002137:	56                   	push   esi
c0002138:	31 c9                	xor    ecx,ecx
c000213a:	53                   	push   ebx
c000213b:	31 d2                	xor    edx,edx
c000213d:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002141:	43                   	inc    ebx
c0002142:	c1 e3 05             	shl    ebx,0x5
c0002145:	83 fa 02             	cmp    edx,0x2
c0002148:	74 0b                	je     c0002155 <xdir_sum+0x1e>
c000214a:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000214e:	66 d1 c9             	ror    cx,1
c0002151:	01 f1                	add    ecx,esi
c0002153:	eb 05                	jmp    c000215a <xdir_sum+0x23>
c0002155:	ba 03 00 00 00       	mov    edx,0x3
c000215a:	42                   	inc    edx
c000215b:	39 d3                	cmp    ebx,edx
c000215d:	77 e6                	ja     c0002145 <xdir_sum+0xe>
c000215f:	89 c8                	mov    eax,ecx
c0002161:	5b                   	pop    ebx
c0002162:	5e                   	pop    esi
c0002163:	c3                   	ret    

c0002164 <xsum32>:
c0002164:	d1 ca                	ror    edx,1
c0002166:	0f b6 c0             	movzx  eax,al
c0002169:	01 d0                	add    eax,edx
c000216b:	c3                   	ret    

c000216c <get_xfileinfo>:
c000216c:	55                   	push   ebp
c000216d:	31 c9                	xor    ecx,ecx
c000216f:	57                   	push   edi
c0002170:	bd 40 00 00 00       	mov    ebp,0x40
c0002175:	56                   	push   esi
c0002176:	31 ff                	xor    edi,edi
c0002178:	53                   	push   ebx
c0002179:	89 c6                	mov    esi,eax
c000217b:	83 ec 0c             	sub    esp,0xc
c000217e:	89 d3                	mov    ebx,edx
c0002180:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002187:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c000218b:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000218e:	76 6d                	jbe    c00021fd <get_xfileinfo+0x91>
c0002190:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002196:	76 0b                	jbe    c00021a3 <get_xfileinfo+0x37>
c0002198:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000219c:	bf 01 00 00 00       	mov    edi,0x1
c00021a1:	eb 63                	jmp    c0002206 <get_xfileinfo+0x9a>
c00021a3:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021a9:	75 03                	jne    c00021ae <get_xfileinfo+0x42>
c00021ab:	83 c5 02             	add    ebp,0x2
c00021ae:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021b1:	83 c5 02             	add    ebp,0x2
c00021b4:	e8 b0 fa ff ff       	call   c0001c69 <ld_word>
c00021b9:	ff 04 24             	inc    DWORD PTR [esp]
c00021bc:	66 85 c9             	test   cx,cx
c00021bf:	75 0d                	jne    c00021ce <get_xfileinfo+0x62>
c00021c1:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021c7:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021cc:	76 2b                	jbe    c00021f9 <get_xfileinfo+0x8d>
c00021ce:	c1 e1 10             	shl    ecx,0x10
c00021d1:	ba ff 00 00 00       	mov    edx,0xff
c00021d6:	0f b7 c0             	movzx  eax,ax
c00021d9:	29 fa                	sub    edx,edi
c00021db:	09 c8                	or     eax,ecx
c00021dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021e1:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021e5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021e9:	e8 1b fc ff ff       	call   c0001e09 <put_utf>
c00021ee:	84 c0                	test   al,al
c00021f0:	74 a6                	je     c0002198 <get_xfileinfo+0x2c>
c00021f2:	0f b6 c0             	movzx  eax,al
c00021f5:	01 c7                	add    edi,eax
c00021f7:	31 c0                	xor    eax,eax
c00021f9:	89 c1                	mov    ecx,eax
c00021fb:	eb 8a                	jmp    c0002187 <get_xfileinfo+0x1b>
c00021fd:	85 ff                	test   edi,edi
c00021ff:	74 97                	je     c0002198 <get_xfileinfo+0x2c>
c0002201:	66 85 c9             	test   cx,cx
c0002204:	75 92                	jne    c0002198 <get_xfileinfo+0x2c>
c0002206:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c000220b:	31 c0                	xor    eax,eax
c000220d:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002211:	31 d2                	xor    edx,edx
c0002213:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002216:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002219:	80 e1 10             	and    cl,0x10
c000221c:	75 08                	jne    c0002226 <get_xfileinfo+0xba>
c000221e:	8d 46 38             	lea    eax,[esi+0x38]
c0002221:	e8 68 fa ff ff       	call   c0001c8e <ld_qword>
c0002226:	89 03                	mov    DWORD PTR [ebx],eax
c0002228:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000222b:	8d 46 0c             	lea    eax,[esi+0xc]
c000222e:	e8 36 fa ff ff       	call   c0001c69 <ld_word>
c0002233:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002237:	8d 46 0e             	lea    eax,[esi+0xe]
c000223a:	e8 2a fa ff ff       	call   c0001c69 <ld_word>
c000223f:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002243:	83 c4 0c             	add    esp,0xc
c0002246:	5b                   	pop    ebx
c0002247:	5e                   	pop    esi
c0002248:	5f                   	pop    edi
c0002249:	5d                   	pop    ebp
c000224a:	c3                   	ret    

c000224b <get_ldnumber>:
c000224b:	8b 10                	mov    edx,DWORD PTR [eax]
c000224d:	85 d2                	test   edx,edx
c000224f:	74 14                	je     c0002265 <get_ldnumber+0x1a>
c0002251:	56                   	push   esi
c0002252:	53                   	push   ebx
c0002253:	89 d3                	mov    ebx,edx
c0002255:	43                   	inc    ebx
c0002256:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002259:	80 f9 1f             	cmp    cl,0x1f
c000225c:	76 0d                	jbe    c000226b <get_ldnumber+0x20>
c000225e:	80 f9 3a             	cmp    cl,0x3a
c0002261:	75 f2                	jne    c0002255 <get_ldnumber+0xa>
c0002263:	eb 0a                	jmp    c000226f <get_ldnumber+0x24>
c0002265:	83 c9 ff             	or     ecx,0xffffffff
c0002268:	89 c8                	mov    eax,ecx
c000226a:	c3                   	ret    
c000226b:	31 c9                	xor    ecx,ecx
c000226d:	eb 24                	jmp    c0002293 <get_ldnumber+0x48>
c000226f:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002272:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002275:	80 f9 09             	cmp    cl,0x9
c0002278:	77 16                	ja     c0002290 <get_ldnumber+0x45>
c000227a:	83 c2 02             	add    edx,0x2
c000227d:	83 c9 ff             	or     ecx,0xffffffff
c0002280:	39 d3                	cmp    ebx,edx
c0002282:	75 0f                	jne    c0002293 <get_ldnumber+0x48>
c0002284:	89 f2                	mov    edx,esi
c0002286:	89 18                	mov    DWORD PTR [eax],ebx
c0002288:	0f be ca             	movsx  ecx,dl
c000228b:	83 e9 30             	sub    ecx,0x30
c000228e:	eb 03                	jmp    c0002293 <get_ldnumber+0x48>
c0002290:	83 c9 ff             	or     ecx,0xffffffff
c0002293:	89 c8                	mov    eax,ecx
c0002295:	5b                   	pop    ebx
c0002296:	5e                   	pop    esi
c0002297:	c3                   	ret    

c0002298 <crc32>:
c0002298:	56                   	push   esi
c0002299:	89 d6                	mov    esi,edx
c000229b:	53                   	push   ebx
c000229c:	b2 01                	mov    dl,0x1
c000229e:	bb 08 00 00 00       	mov    ebx,0x8
c00022a3:	89 f1                	mov    ecx,esi
c00022a5:	84 d1                	test   cl,dl
c00022a7:	0f 95 c1             	setne  cl
c00022aa:	0f b6 c9             	movzx  ecx,cl
c00022ad:	31 c1                	xor    ecx,eax
c00022af:	89 c8                	mov    eax,ecx
c00022b1:	d1 e8                	shr    eax,1
c00022b3:	80 e1 01             	and    cl,0x1
c00022b6:	74 05                	je     c00022bd <crc32+0x25>
c00022b8:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022bd:	d1 e2                	shl    edx,1
c00022bf:	4b                   	dec    ebx
c00022c0:	75 e1                	jne    c00022a3 <crc32+0xb>
c00022c2:	5b                   	pop    ebx
c00022c3:	5e                   	pop    esi
c00022c4:	c3                   	ret    

c00022c5 <test_gpt_header>:
c00022c5:	55                   	push   ebp
c00022c6:	b9 10 00 00 00       	mov    ecx,0x10
c00022cb:	57                   	push   edi
c00022cc:	ba 60 93 02 c0       	mov    edx,0xc0029360
c00022d1:	56                   	push   esi
c00022d2:	31 ff                	xor    edi,edi
c00022d4:	53                   	push   ebx
c00022d5:	89 c3                	mov    ebx,eax
c00022d7:	e8 2c fa ff ff       	call   c0001d08 <mem_cmp>
c00022dc:	85 c0                	test   eax,eax
c00022de:	75 55                	jne    c0002335 <test_gpt_header+0x70>
c00022e0:	89 c7                	mov    edi,eax
c00022e2:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022e7:	83 ce ff             	or     esi,0xffffffff
c00022ea:	31 d2                	xor    edx,edx
c00022ec:	83 fd 03             	cmp    ebp,0x3
c00022ef:	76 05                	jbe    c00022f6 <test_gpt_header+0x31>
c00022f1:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022f6:	89 f0                	mov    eax,esi
c00022f8:	45                   	inc    ebp
c00022f9:	e8 9a ff ff ff       	call   c0002298 <crc32>
c00022fe:	83 fd 4c             	cmp    ebp,0x4c
c0002301:	89 c6                	mov    esi,eax
c0002303:	75 e5                	jne    c00022ea <test_gpt_header+0x25>
c0002305:	8d 43 10             	lea    eax,[ebx+0x10]
c0002308:	f7 d6                	not    esi
c000230a:	e8 67 f9 ff ff       	call   c0001c76 <ld_dword>
c000230f:	39 c6                	cmp    esi,eax
c0002311:	75 22                	jne    c0002335 <test_gpt_header+0x70>
c0002313:	8d 43 54             	lea    eax,[ebx+0x54]
c0002316:	e8 5b f9 ff ff       	call   c0001c76 <ld_dword>
c000231b:	83 c0 80             	add    eax,0xffffff80
c000231e:	75 15                	jne    c0002335 <test_gpt_header+0x70>
c0002320:	8d 43 50             	lea    eax,[ebx+0x50]
c0002323:	e8 4e f9 ff ff       	call   c0001c76 <ld_dword>
c0002328:	3d 80 00 00 00       	cmp    eax,0x80
c000232d:	0f 96 c0             	setbe  al
c0002330:	0f b6 c0             	movzx  eax,al
c0002333:	89 c7                	mov    edi,eax
c0002335:	5b                   	pop    ebx
c0002336:	89 f8                	mov    eax,edi
c0002338:	5e                   	pop    esi
c0002339:	5f                   	pop    edi
c000233a:	5d                   	pop    ebp
c000233b:	c3                   	ret    

c000233c <make_rand>:
c000233c:	56                   	push   esi
c000233d:	85 c0                	test   eax,eax
c000233f:	53                   	push   ebx
c0002340:	75 05                	jne    c0002347 <make_rand+0xb>
c0002342:	b8 01 00 00 00       	mov    eax,0x1
c0002347:	01 d1                	add    ecx,edx
c0002349:	bb 08 00 00 00       	mov    ebx,0x8
c000234e:	89 c6                	mov    esi,eax
c0002350:	d1 e8                	shr    eax,1
c0002352:	83 e6 01             	and    esi,0x1
c0002355:	85 f6                	test   esi,esi
c0002357:	74 05                	je     c000235e <make_rand+0x22>
c0002359:	35 00 00 00 a3       	xor    eax,0xa3000000
c000235e:	4b                   	dec    ebx
c000235f:	75 ed                	jne    c000234e <make_rand+0x12>
c0002361:	42                   	inc    edx
c0002362:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002365:	39 ca                	cmp    edx,ecx
c0002367:	75 e0                	jne    c0002349 <make_rand+0xd>
c0002369:	5b                   	pop    ebx
c000236a:	5e                   	pop    esi
c000236b:	c3                   	ret    

c000236c <validate>:
c000236c:	56                   	push   esi
c000236d:	53                   	push   ebx
c000236e:	89 d6                	mov    esi,edx
c0002370:	51                   	push   ecx
c0002371:	85 c0                	test   eax,eax
c0002373:	75 09                	jne    c000237e <validate+0x12>
c0002375:	b8 09 00 00 00       	mov    eax,0x9
c000237a:	31 c9                	xor    ecx,ecx
c000237c:	eb 2f                	jmp    c00023ad <validate+0x41>
c000237e:	89 c3                	mov    ebx,eax
c0002380:	8b 00                	mov    eax,DWORD PTR [eax]
c0002382:	85 c0                	test   eax,eax
c0002384:	74 ef                	je     c0002375 <validate+0x9>
c0002386:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002389:	74 ea                	je     c0002375 <validate+0x9>
c000238b:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000238f:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002393:	75 e0                	jne    c0002375 <validate+0x9>
c0002395:	83 ec 0c             	sub    esp,0xc
c0002398:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000239c:	50                   	push   eax
c000239d:	e8 76 f8 ff ff       	call   c0001c18 <disk_status>
c00023a2:	83 c4 10             	add    esp,0x10
c00023a5:	a8 01                	test   al,0x1
c00023a7:	75 cc                	jne    c0002375 <validate+0x9>
c00023a9:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023ab:	31 c0                	xor    eax,eax
c00023ad:	89 0e                	mov    DWORD PTR [esi],ecx
c00023af:	5a                   	pop    edx
c00023b0:	5b                   	pop    ebx
c00023b1:	5e                   	pop    esi
c00023b2:	c3                   	ret    

c00023b3 <sync_window>:
c00023b3:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023b7:	0f 84 85 00 00 00    	je     c0002442 <sync_window+0x8f>
c00023bd:	55                   	push   ebp
c00023be:	8d 68 54             	lea    ebp,[eax+0x54]
c00023c1:	57                   	push   edi
c00023c2:	56                   	push   esi
c00023c3:	53                   	push   ebx
c00023c4:	89 c3                	mov    ebx,eax
c00023c6:	83 ec 28             	sub    esp,0x28
c00023c9:	6a 01                	push   0x1
c00023cb:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023ce:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023d1:	55                   	push   ebp
c00023d2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023d6:	50                   	push   eax
c00023d7:	e8 58 f8 ff ff       	call   c0001c34 <disk_write>
c00023dc:	83 c4 20             	add    esp,0x20
c00023df:	ba 01 00 00 00       	mov    edx,0x1
c00023e4:	85 c0                	test   eax,eax
c00023e6:	75 50                	jne    c0002438 <sync_window+0x85>
c00023e8:	31 ff                	xor    edi,edi
c00023ea:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ed:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023f1:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023f5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023f8:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023fb:	89 c6                	mov    esi,eax
c00023fd:	89 d7                	mov    edi,edx
c00023ff:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c0002402:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002406:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002409:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c000240d:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002411:	73 23                	jae    c0002436 <sync_window+0x83>
c0002413:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002417:	75 1d                	jne    c0002436 <sync_window+0x83>
c0002419:	83 ec 0c             	sub    esp,0xc
c000241c:	6a 01                	push   0x1
c000241e:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002422:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002426:	52                   	push   edx
c0002427:	50                   	push   eax
c0002428:	55                   	push   ebp
c0002429:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000242d:	50                   	push   eax
c000242e:	e8 01 f8 ff ff       	call   c0001c34 <disk_write>
c0002433:	83 c4 20             	add    esp,0x20
c0002436:	31 d2                	xor    edx,edx
c0002438:	83 c4 1c             	add    esp,0x1c
c000243b:	89 d0                	mov    eax,edx
c000243d:	5b                   	pop    ebx
c000243e:	5e                   	pop    esi
c000243f:	5f                   	pop    edi
c0002440:	5d                   	pop    ebp
c0002441:	c3                   	ret    
c0002442:	31 d2                	xor    edx,edx
c0002444:	89 d0                	mov    eax,edx
c0002446:	c3                   	ret    

c0002447 <move_window>:
c0002447:	56                   	push   esi
c0002448:	53                   	push   ebx
c0002449:	89 c3                	mov    ebx,eax
c000244b:	83 ec 14             	sub    esp,0x14
c000244e:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002451:	75 07                	jne    c000245a <move_window+0x13>
c0002453:	31 f6                	xor    esi,esi
c0002455:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002458:	74 59                	je     c00024b3 <move_window+0x6c>
c000245a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000245e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002462:	89 d8                	mov    eax,ebx
c0002464:	e8 4a ff ff ff       	call   c00023b3 <sync_window>
c0002469:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000246d:	89 c6                	mov    esi,eax
c000246f:	85 c0                	test   eax,eax
c0002471:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002475:	75 3c                	jne    c00024b3 <move_window+0x6c>
c0002477:	83 ec 0c             	sub    esp,0xc
c000247a:	8d 43 54             	lea    eax,[ebx+0x54]
c000247d:	6a 01                	push   0x1
c000247f:	51                   	push   ecx
c0002480:	52                   	push   edx
c0002481:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002485:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002489:	50                   	push   eax
c000248a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000248e:	50                   	push   eax
c000248f:	e8 8a f7 ff ff       	call   c0001c1e <disk_read>
c0002494:	83 c4 20             	add    esp,0x20
c0002497:	85 c0                	test   eax,eax
c0002499:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000249d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00024a1:	74 0a                	je     c00024ad <move_window+0x66>
c00024a3:	83 ca ff             	or     edx,0xffffffff
c00024a6:	be 01 00 00 00       	mov    esi,0x1
c00024ab:	89 d1                	mov    ecx,edx
c00024ad:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024b0:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024b3:	89 f0                	mov    eax,esi
c00024b5:	83 c4 14             	add    esp,0x14
c00024b8:	5b                   	pop    ebx
c00024b9:	5e                   	pop    esi
c00024ba:	c3                   	ret    

c00024bb <check_fs>:
c00024bb:	53                   	push   ebx
c00024bc:	89 c3                	mov    ebx,eax
c00024be:	83 ec 08             	sub    esp,0x8
c00024c1:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024c5:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024cc:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024d3:	e8 6f ff ff ff       	call   c0002447 <move_window>
c00024d8:	ba 04 00 00 00       	mov    edx,0x4
c00024dd:	85 c0                	test   eax,eax
c00024df:	0f 85 89 00 00 00    	jne    c000256e <check_fs+0xb3>
c00024e5:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024eb:	e8 79 f7 ff ff       	call   c0001c69 <ld_word>
c00024f0:	ba 03 00 00 00       	mov    edx,0x3
c00024f5:	66 3d 55 aa          	cmp    ax,0xaa55
c00024f9:	75 73                	jne    c000256e <check_fs+0xb3>
c00024fb:	ba 80 94 02 c0       	mov    edx,0xc0029480
c0002500:	8d 43 54             	lea    eax,[ebx+0x54]
c0002503:	b9 0b 00 00 00       	mov    ecx,0xb
c0002508:	e8 fb f7 ff ff       	call   c0001d08 <mem_cmp>
c000250d:	ba 01 00 00 00       	mov    edx,0x1
c0002512:	85 c0                	test   eax,eax
c0002514:	74 58                	je     c000256e <check_fs+0xb3>
c0002516:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002519:	8d 50 18             	lea    edx,[eax+0x18]
c000251c:	80 fa 01             	cmp    dl,0x1
c000251f:	76 09                	jbe    c000252a <check_fs+0x6f>
c0002521:	ba 02 00 00 00       	mov    edx,0x2
c0002526:	3c eb                	cmp    al,0xeb
c0002528:	75 44                	jne    c000256e <check_fs+0xb3>
c000252a:	ba 60 c8 02 c0       	mov    edx,0xc002c860
c000252f:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002535:	b9 03 00 00 00       	mov    ecx,0x3
c000253a:	e8 c9 f7 ff ff       	call   c0001d08 <mem_cmp>
c000253f:	31 d2                	xor    edx,edx
c0002541:	85 c0                	test   eax,eax
c0002543:	74 29                	je     c000256e <check_fs+0xb3>
c0002545:	ba 8c 94 02 c0       	mov    edx,0xc002948c
c000254a:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002550:	b9 05 00 00 00       	mov    ecx,0x5
c0002555:	e8 ae f7 ff ff       	call   c0001d08 <mem_cmp>
c000255a:	31 d2                	xor    edx,edx
c000255c:	85 c0                	test   eax,eax
c000255e:	74 0e                	je     c000256e <check_fs+0xb3>
c0002560:	31 d2                	xor    edx,edx
c0002562:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002569:	0f 95 c2             	setne  dl
c000256c:	01 d2                	add    edx,edx
c000256e:	89 d0                	mov    eax,edx
c0002570:	83 c4 08             	add    esp,0x8
c0002573:	5b                   	pop    ebx
c0002574:	c3                   	ret    

c0002575 <find_volume>:
c0002575:	55                   	push   ebp
c0002576:	31 c9                	xor    ecx,ecx
c0002578:	57                   	push   edi
c0002579:	56                   	push   esi
c000257a:	89 d6                	mov    esi,edx
c000257c:	53                   	push   ebx
c000257d:	31 d2                	xor    edx,edx
c000257f:	83 ec 3c             	sub    esp,0x3c
c0002582:	89 c3                	mov    ebx,eax
c0002584:	e8 32 ff ff ff       	call   c00024bb <check_fs>
c0002589:	83 f8 02             	cmp    eax,0x2
c000258c:	74 0e                	je     c000259c <find_volume+0x27>
c000258e:	0f 87 5d 01 00 00    	ja     c00026f1 <find_volume+0x17c>
c0002594:	85 f6                	test   esi,esi
c0002596:	0f 84 55 01 00 00    	je     c00026f1 <find_volume+0x17c>
c000259c:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c00025a3:	0f 85 dd 00 00 00    	jne    c0002686 <find_volume+0x111>
c00025a9:	31 c9                	xor    ecx,ecx
c00025ab:	ba 01 00 00 00       	mov    edx,0x1
c00025b0:	89 d8                	mov    eax,ebx
c00025b2:	e8 90 fe ff ff       	call   c0002447 <move_window>
c00025b7:	85 c0                	test   eax,eax
c00025b9:	74 0a                	je     c00025c5 <find_volume+0x50>
c00025bb:	b8 04 00 00 00       	mov    eax,0x4
c00025c0:	e9 2c 01 00 00       	jmp    c00026f1 <find_volume+0x17c>
c00025c5:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025c8:	89 e8                	mov    eax,ebp
c00025ca:	e8 f6 fc ff ff       	call   c00022c5 <test_gpt_header>
c00025cf:	85 c0                	test   eax,eax
c00025d1:	75 0a                	jne    c00025dd <find_volume+0x68>
c00025d3:	b8 03 00 00 00       	mov    eax,0x3
c00025d8:	e9 14 01 00 00       	jmp    c00026f1 <find_volume+0x17c>
c00025dd:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025e3:	e8 8e f6 ff ff       	call   c0001c76 <ld_dword>
c00025e8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025ec:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025f2:	e8 97 f6 ff ff       	call   c0001c8e <ld_qword>
c00025f7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025ff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002603:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002607:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000260f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002613:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002617:	74 ba                	je     c00025d3 <find_volume+0x5e>
c0002619:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000261d:	31 c9                	xor    ecx,ecx
c000261f:	c1 e7 07             	shl    edi,0x7
c0002622:	89 d8                	mov    eax,ebx
c0002624:	89 fa                	mov    edx,edi
c0002626:	c1 ea 09             	shr    edx,0x9
c0002629:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000262d:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002631:	e8 11 fe ff ff       	call   c0002447 <move_window>
c0002636:	85 c0                	test   eax,eax
c0002638:	75 81                	jne    c00025bb <find_volume+0x46>
c000263a:	81 e7 80 01 00 00    	and    edi,0x180
c0002640:	b9 10 00 00 00       	mov    ecx,0x10
c0002645:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002649:	ba 70 94 02 c0       	mov    edx,0xc0029470
c000264e:	e8 b5 f6 ff ff       	call   c0001d08 <mem_cmp>
c0002653:	85 c0                	test   eax,eax
c0002655:	75 29                	jne    c0002680 <find_volume+0x10b>
c0002657:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000265b:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000265f:	e8 2a f6 ff ff       	call   c0001c8e <ld_qword>
c0002664:	89 d1                	mov    ecx,edx
c0002666:	89 c2                	mov    edx,eax
c0002668:	89 d8                	mov    eax,ebx
c000266a:	e8 4c fe ff ff       	call   c00024bb <check_fs>
c000266f:	85 f6                	test   esi,esi
c0002671:	75 07                	jne    c000267a <find_volume+0x105>
c0002673:	83 f8 01             	cmp    eax,0x1
c0002676:	77 08                	ja     c0002680 <find_volume+0x10b>
c0002678:	eb 77                	jmp    c00026f1 <find_volume+0x17c>
c000267a:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000267e:	74 71                	je     c00026f1 <find_volume+0x17c>
c0002680:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002684:	eb 89                	jmp    c000260f <find_volume+0x9a>
c0002686:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000268a:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002690:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002696:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000269a:	89 cd                	mov    ebp,ecx
c000269c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00026a0:	89 f8                	mov    eax,edi
c00026a2:	83 c7 10             	add    edi,0x10
c00026a5:	e8 cc f5 ff ff       	call   c0001c76 <ld_dword>
c00026aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026ae:	89 01                	mov    DWORD PTR [ecx],eax
c00026b0:	83 c1 04             	add    ecx,0x4
c00026b3:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026b7:	75 e3                	jne    c000269c <find_volume+0x127>
c00026b9:	31 ff                	xor    edi,edi
c00026bb:	85 f6                	test   esi,esi
c00026bd:	74 03                	je     c00026c2 <find_volume+0x14d>
c00026bf:	8d 7e ff             	lea    edi,[esi-0x1]
c00026c2:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026c6:	85 d2                	test   edx,edx
c00026c8:	74 14                	je     c00026de <find_volume+0x169>
c00026ca:	31 c9                	xor    ecx,ecx
c00026cc:	89 d8                	mov    eax,ebx
c00026ce:	e8 e8 fd ff ff       	call   c00024bb <check_fs>
c00026d3:	83 f8 01             	cmp    eax,0x1
c00026d6:	76 19                	jbe    c00026f1 <find_volume+0x17c>
c00026d8:	85 f6                	test   esi,esi
c00026da:	74 0f                	je     c00026eb <find_volume+0x176>
c00026dc:	eb 13                	jmp    c00026f1 <find_volume+0x17c>
c00026de:	85 f6                	test   esi,esi
c00026e0:	0f 85 ed fe ff ff    	jne    c00025d3 <find_volume+0x5e>
c00026e6:	b8 03 00 00 00       	mov    eax,0x3
c00026eb:	47                   	inc    edi
c00026ec:	83 ff 03             	cmp    edi,0x3
c00026ef:	76 d1                	jbe    c00026c2 <find_volume+0x14d>
c00026f1:	83 c4 3c             	add    esp,0x3c
c00026f4:	5b                   	pop    ebx
c00026f5:	5e                   	pop    esi
c00026f6:	5f                   	pop    edi
c00026f7:	5d                   	pop    ebp
c00026f8:	c3                   	ret    

c00026f9 <mount_volume>:
c00026f9:	55                   	push   ebp
c00026fa:	57                   	push   edi
c00026fb:	89 cf                	mov    edi,ecx
c00026fd:	56                   	push   esi
c00026fe:	53                   	push   ebx
c00026ff:	bb 0b 00 00 00       	mov    ebx,0xb
c0002704:	83 ec 3c             	sub    esp,0x3c
c0002707:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000270d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002711:	e8 35 fb ff ff       	call   c000224b <get_ldnumber>
c0002716:	85 c0                	test   eax,eax
c0002718:	0f 88 3a 05 00 00    	js     c0002c58 <mount_volume+0x55f>
c000271e:	8b 2c 85 00 e4 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1c00]
c0002725:	89 c6                	mov    esi,eax
c0002727:	bb 0c 00 00 00       	mov    ebx,0xc
c000272c:	85 ed                	test   ebp,ebp
c000272e:	0f 84 24 05 00 00    	je     c0002c58 <mount_volume+0x55f>
c0002734:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002738:	83 e7 fe             	and    edi,0xfffffffe
c000273b:	89 2a                	mov    DWORD PTR [edx],ebp
c000273d:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002741:	74 32                	je     c0002775 <mount_volume+0x7c>
c0002743:	83 ec 0c             	sub    esp,0xc
c0002746:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000274a:	50                   	push   eax
c000274b:	e8 c8 f4 ff ff       	call   c0001c18 <disk_status>
c0002750:	83 c4 10             	add    esp,0x10
c0002753:	a8 01                	test   al,0x1
c0002755:	75 1e                	jne    c0002775 <mount_volume+0x7c>
c0002757:	31 db                	xor    ebx,ebx
c0002759:	89 f9                	mov    ecx,edi
c000275b:	84 c9                	test   cl,cl
c000275d:	0f 84 f5 04 00 00    	je     c0002c58 <mount_volume+0x55f>
c0002763:	a8 04                	test   al,0x4
c0002765:	0f 84 ed 04 00 00    	je     c0002c58 <mount_volume+0x55f>
c000276b:	bb 0a 00 00 00       	mov    ebx,0xa
c0002770:	e9 e3 04 00 00       	jmp    c0002c58 <mount_volume+0x55f>
c0002775:	83 ec 0c             	sub    esp,0xc
c0002778:	89 f0                	mov    eax,esi
c000277a:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000277e:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002781:	0f b6 f0             	movzx  esi,al
c0002784:	bb 03 00 00 00       	mov    ebx,0x3
c0002789:	56                   	push   esi
c000278a:	e8 8c f4 ff ff       	call   c0001c1b <disk_initialize>
c000278f:	83 c4 10             	add    esp,0x10
c0002792:	a8 01                	test   al,0x1
c0002794:	0f 85 be 04 00 00    	jne    c0002c58 <mount_volume+0x55f>
c000279a:	89 f9                	mov    ecx,edi
c000279c:	84 c9                	test   cl,cl
c000279e:	74 04                	je     c00027a4 <mount_volume+0xab>
c00027a0:	a8 04                	test   al,0x4
c00027a2:	75 c7                	jne    c000276b <mount_volume+0x72>
c00027a4:	31 d2                	xor    edx,edx
c00027a6:	89 e8                	mov    eax,ebp
c00027a8:	e8 c8 fd ff ff       	call   c0002575 <find_volume>
c00027ad:	83 f8 04             	cmp    eax,0x4
c00027b0:	75 0a                	jne    c00027bc <mount_volume+0xc3>
c00027b2:	bb 01 00 00 00       	mov    ebx,0x1
c00027b7:	e9 9c 04 00 00       	jmp    c0002c58 <mount_volume+0x55f>
c00027bc:	83 f8 01             	cmp    eax,0x1
c00027bf:	76 0a                	jbe    c00027cb <mount_volume+0xd2>
c00027c1:	bb 0d 00 00 00       	mov    ebx,0xd
c00027c6:	e9 8d 04 00 00       	jmp    c0002c58 <mount_volume+0x55f>
c00027cb:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027ce:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027d5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027d9:	75 17                	jne    c00027f2 <mount_volume+0xf9>
c00027db:	b8 0b 00 00 00       	mov    eax,0xb
c00027e0:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027e5:	75 da                	jne    c00027c1 <mount_volume+0xc8>
c00027e7:	40                   	inc    eax
c00027e8:	83 f8 40             	cmp    eax,0x40
c00027eb:	75 f3                	jne    c00027e0 <mount_volume+0xe7>
c00027ed:	e9 5a 02 00 00       	jmp    c0002a4c <mount_volume+0x353>
c00027f2:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027f5:	e8 6f f4 ff ff       	call   c0001c69 <ld_word>
c00027fa:	66 3d 00 02          	cmp    ax,0x200
c00027fe:	75 c1                	jne    c00027c1 <mount_volume+0xc8>
c0002800:	8d 45 6a             	lea    eax,[ebp+0x6a]
c0002803:	e8 61 f4 ff ff       	call   c0001c69 <ld_word>
c0002808:	0f b7 c0             	movzx  eax,ax
c000280b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000280f:	85 c0                	test   eax,eax
c0002811:	75 0c                	jne    c000281f <mount_volume+0x126>
c0002813:	8d 45 78             	lea    eax,[ebp+0x78]
c0002816:	e8 5b f4 ff ff       	call   c0001c76 <ld_dword>
c000281b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000281f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002823:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002826:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002829:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000282d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002830:	48                   	dec    eax
c0002831:	3c 01                	cmp    al,0x1
c0002833:	77 8c                	ja     c00027c1 <mount_volume+0xc8>
c0002835:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002839:	89 c3                	mov    ebx,eax
c000283b:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c000283f:	66 85 c0             	test   ax,ax
c0002842:	0f 84 79 ff ff ff    	je     c00027c1 <mount_volume+0xc8>
c0002848:	8d 40 ff             	lea    eax,[eax-0x1]
c000284b:	85 d8                	test   eax,ebx
c000284d:	0f 85 6e ff ff ff    	jne    c00027c1 <mount_volume+0xc8>
c0002853:	8d 45 65             	lea    eax,[ebp+0x65]
c0002856:	e8 0e f4 ff ff       	call   c0001c69 <ld_word>
c000285b:	89 c7                	mov    edi,eax
c000285d:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002861:	a8 0f                	test   al,0xf
c0002863:	0f 85 58 ff ff ff    	jne    c00027c1 <mount_volume+0xc8>
c0002869:	8d 45 67             	lea    eax,[ebp+0x67]
c000286c:	e8 f8 f3 ff ff       	call   c0001c69 <ld_word>
c0002871:	0f b7 f0             	movzx  esi,ax
c0002874:	85 f6                	test   esi,esi
c0002876:	75 0a                	jne    c0002882 <mount_volume+0x189>
c0002878:	8d 45 74             	lea    eax,[ebp+0x74]
c000287b:	e8 f6 f3 ff ff       	call   c0001c76 <ld_dword>
c0002880:	89 c6                	mov    esi,eax
c0002882:	8d 45 62             	lea    eax,[ebp+0x62]
c0002885:	e8 df f3 ff ff       	call   c0001c69 <ld_word>
c000288a:	66 85 c0             	test   ax,ax
c000288d:	0f 84 2e ff ff ff    	je     c00027c1 <mount_volume+0xc8>
c0002893:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002898:	0f b7 c8             	movzx  ecx,ax
c000289b:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c00028a0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00028a4:	89 fa                	mov    edx,edi
c00028a6:	66 c1 ea 04          	shr    dx,0x4
c00028aa:	0f b7 d2             	movzx  edx,dx
c00028ad:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028b1:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028b8:	39 c6                	cmp    esi,eax
c00028ba:	0f 82 01 ff ff ff    	jb     c00027c1 <mount_volume+0xc8>
c00028c0:	29 c6                	sub    esi,eax
c00028c2:	31 d2                	xor    edx,edx
c00028c4:	89 f0                	mov    eax,esi
c00028c6:	f7 f3                	div    ebx
c00028c8:	39 de                	cmp    esi,ebx
c00028ca:	0f 82 f1 fe ff ff    	jb     c00027c1 <mount_volume+0xc8>
c00028d0:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028d5:	0f 87 e6 fe ff ff    	ja     c00027c1 <mount_volume+0xc8>
c00028db:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028e0:	0f 86 63 03 00 00    	jbe    c0002c49 <mount_volume+0x550>
c00028e6:	bb 03 00 00 00       	mov    ebx,0x3
c00028eb:	8d 70 02             	lea    esi,[eax+0x2]
c00028ee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028f6:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028f9:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028fc:	31 d2                	xor    edx,edx
c00028fe:	89 c8                	mov    eax,ecx
c0002900:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c0002903:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002907:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000290b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000290f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002913:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002916:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002919:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000291d:	31 d2                	xor    edx,edx
c000291f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002923:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002927:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000292a:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000292d:	83 fb 03             	cmp    ebx,0x3
c0002930:	75 2b                	jne    c000295d <mount_volume+0x264>
c0002932:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002935:	e8 2f f3 ff ff       	call   c0001c69 <ld_word>
c000293a:	66 09 c7             	or     di,ax
c000293d:	0f 85 7e fe ff ff    	jne    c00027c1 <mount_volume+0xc8>
c0002943:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002949:	c1 e6 02             	shl    esi,0x2
c000294c:	e8 25 f3 ff ff       	call   c0001c76 <ld_dword>
c0002951:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002958:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000295b:	eb 30                	jmp    c000298d <mount_volume+0x294>
c000295d:	66 85 ff             	test   di,di
c0002960:	0f 84 5b fe ff ff    	je     c00027c1 <mount_volume+0xc8>
c0002966:	31 d2                	xor    edx,edx
c0002968:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000296c:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002970:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002974:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002977:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000297a:	83 fb 02             	cmp    ebx,0x2
c000297d:	75 04                	jne    c0002983 <mount_volume+0x28a>
c000297f:	01 f6                	add    esi,esi
c0002981:	eb 0a                	jmp    c000298d <mount_volume+0x294>
c0002983:	8d 04 76             	lea    eax,[esi+esi*2]
c0002986:	83 e6 01             	and    esi,0x1
c0002989:	d1 e8                	shr    eax,1
c000298b:	01 c6                	add    esi,eax
c000298d:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002993:	c1 ee 09             	shr    esi,0x9
c0002996:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000299a:	0f 87 21 fe ff ff    	ja     c00027c1 <mount_volume+0xc8>
c00029a0:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00029a7:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029ae:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029b2:	83 fb 03             	cmp    ebx,0x3
c00029b5:	75 7a                	jne    c0002a31 <mount_volume+0x338>
c00029b7:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029bd:	e8 a7 f2 ff ff       	call   c0001c69 <ld_word>
c00029c2:	66 48                	dec    ax
c00029c4:	75 6b                	jne    c0002a31 <mount_volume+0x338>
c00029c6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029ca:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029ce:	83 c2 01             	add    edx,0x1
c00029d1:	89 e8                	mov    eax,ebp
c00029d3:	83 d1 00             	adc    ecx,0x0
c00029d6:	e8 6c fa ff ff       	call   c0002447 <move_window>
c00029db:	85 c0                	test   eax,eax
c00029dd:	75 52                	jne    c0002a31 <mount_volume+0x338>
c00029df:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029e3:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029e9:	e8 7b f2 ff ff       	call   c0001c69 <ld_word>
c00029ee:	66 3d 55 aa          	cmp    ax,0xaa55
c00029f2:	75 3d                	jne    c0002a31 <mount_volume+0x338>
c00029f4:	8d 45 54             	lea    eax,[ebp+0x54]
c00029f7:	e8 7a f2 ff ff       	call   c0001c76 <ld_dword>
c00029fc:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002a01:	75 2e                	jne    c0002a31 <mount_volume+0x338>
c0002a03:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a09:	e8 68 f2 ff ff       	call   c0001c76 <ld_dword>
c0002a0e:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a13:	75 1c                	jne    c0002a31 <mount_volume+0x338>
c0002a15:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a1b:	e8 56 f2 ff ff       	call   c0001c76 <ld_dword>
c0002a20:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a23:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a29:	e8 48 f2 ff ff       	call   c0001c76 <ld_dword>
c0002a2e:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a31:	66 a1 e0 e3 02 c0    	mov    ax,ds:0xc002e3e0
c0002a37:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a3a:	40                   	inc    eax
c0002a3b:	31 db                	xor    ebx,ebx
c0002a3d:	66 a3 e0 e3 02 c0    	mov    ds:0xc002e3e0,ax
c0002a43:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a47:	e9 0c 02 00 00       	jmp    c0002c58 <mount_volume+0x55f>
c0002a4c:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a52:	e8 12 f2 ff ff       	call   c0001c69 <ld_word>
c0002a57:	66 3d 00 01          	cmp    ax,0x100
c0002a5b:	0f 85 60 fd ff ff    	jne    c00027c1 <mount_volume+0xc8>
c0002a61:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a68:	0f 85 53 fd ff ff    	jne    c00027c1 <mount_volume+0xc8>
c0002a6e:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a74:	e8 15 f2 ff ff       	call   c0001c8e <ld_qword>
c0002a79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a7d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a81:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a87:	e8 ea f1 ff ff       	call   c0001c76 <ld_dword>
c0002a8c:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a8f:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a95:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a98:	fe c8                	dec    al
c0002a9a:	0f 85 21 fd ff ff    	jne    c00027c1 <mount_volume+0xc8>
c0002aa0:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002aa7:	bb 01 00 00 00       	mov    ebx,0x1
c0002aac:	d3 e3                	shl    ebx,cl
c0002aae:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002ab2:	66 85 db             	test   bx,bx
c0002ab5:	0f 84 06 fd ff ff    	je     c00027c1 <mount_volume+0xc8>
c0002abb:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ac1:	e8 b0 f1 ff ff       	call   c0001c76 <ld_dword>
c0002ac6:	89 c6                	mov    esi,eax
c0002ac8:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002acd:	0f 87 ee fc ff ff    	ja     c00027c1 <mount_volume+0xc8>
c0002ad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ad7:	8d 40 02             	lea    eax,[eax+0x2]
c0002ada:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002add:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ae0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ae4:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002ae7:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aed:	e8 84 f1 ff ff       	call   c0001c76 <ld_dword>
c0002af2:	31 d2                	xor    edx,edx
c0002af4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af8:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002afc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b00:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002b04:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002b07:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b0a:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b10:	e8 61 f1 ff ff       	call   c0001c76 <ld_dword>
c0002b15:	31 d2                	xor    edx,edx
c0002b17:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b1b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b1f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b23:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b26:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b29:	0f b7 c3             	movzx  eax,bx
c0002b2c:	31 d2                	xor    edx,edx
c0002b2e:	0f af f0             	imul   esi,eax
c0002b31:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b35:	89 f0                	mov    eax,esi
c0002b37:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b3b:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b3f:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b43:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b47:	39 c1                	cmp    ecx,eax
c0002b49:	89 df                	mov    edi,ebx
c0002b4b:	19 d7                	sbb    edi,edx
c0002b4d:	0f 82 6e fc ff ff    	jb     c00027c1 <mount_volume+0xc8>
c0002b53:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b59:	31 db                	xor    ebx,ebx
c0002b5b:	e8 16 f1 ff ff       	call   c0001c76 <ld_dword>
c0002b60:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b67:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b6a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b72:	85 db                	test   ebx,ebx
c0002b74:	75 39                	jne    c0002baf <mount_volume+0x4b6>
c0002b76:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b7a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b7e:	0f 86 3d fc ff ff    	jbe    c00027c1 <mount_volume+0xc8>
c0002b84:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b87:	31 ff                	xor    edi,edi
c0002b89:	89 e8                	mov    eax,ebp
c0002b8b:	e8 72 f3 ff ff       	call   c0001f02 <clst2sect>
c0002b90:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b94:	01 c6                	add    esi,eax
c0002b96:	89 e8                	mov    eax,ebp
c0002b98:	11 d7                	adc    edi,edx
c0002b9a:	89 f2                	mov    edx,esi
c0002b9c:	89 f9                	mov    ecx,edi
c0002b9e:	e8 a4 f8 ff ff       	call   c0002447 <move_window>
c0002ba3:	85 c0                	test   eax,eax
c0002ba5:	0f 85 07 fc ff ff    	jne    c00027b2 <mount_volume+0xb9>
c0002bab:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002baf:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bb4:	74 0b                	je     c0002bc1 <mount_volume+0x4c8>
c0002bb6:	83 c3 20             	add    ebx,0x20
c0002bb9:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bbf:	eb b1                	jmp    c0002b72 <mount_volume+0x479>
c0002bc1:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bc4:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bc8:	e8 a9 f0 ff ff       	call   c0001c76 <ld_dword>
c0002bcd:	89 c3                	mov    ebx,eax
c0002bcf:	83 f8 01             	cmp    eax,0x1
c0002bd2:	0f 86 e9 fb ff ff    	jbe    c00027c1 <mount_volume+0xc8>
c0002bd8:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bdb:	0f 86 e0 fb ff ff    	jbe    c00027c1 <mount_volume+0xc8>
c0002be1:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002be4:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002be8:	0f af c2             	imul   eax,edx
c0002beb:	31 d2                	xor    edx,edx
c0002bed:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bf0:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bf3:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bf6:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bf9:	31 c9                	xor    ecx,ecx
c0002bfb:	89 da                	mov    edx,ebx
c0002bfd:	89 e8                	mov    eax,ebp
c0002bff:	c1 ea 07             	shr    edx,0x7
c0002c02:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002c05:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c08:	e8 3a f8 ff ff       	call   c0002447 <move_window>
c0002c0d:	85 c0                	test   eax,eax
c0002c0f:	0f 85 9d fb ff ff    	jne    c00027b2 <mount_volume+0xb9>
c0002c15:	89 d8                	mov    eax,ebx
c0002c17:	83 e0 7f             	and    eax,0x7f
c0002c1a:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c1d:	e8 54 f0 ff ff       	call   c0001c76 <ld_dword>
c0002c22:	83 f8 ff             	cmp    eax,0xffffffff
c0002c25:	74 0a                	je     c0002c31 <mount_volume+0x538>
c0002c27:	43                   	inc    ebx
c0002c28:	39 d8                	cmp    eax,ebx
c0002c2a:	74 cd                	je     c0002bf9 <mount_volume+0x500>
c0002c2c:	e9 90 fb ff ff       	jmp    c00027c1 <mount_volume+0xc8>
c0002c31:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c38:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c3f:	bb 04 00 00 00       	mov    ebx,0x4
c0002c44:	e9 e8 fd ff ff       	jmp    c0002a31 <mount_volume+0x338>
c0002c49:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c4e:	19 db                	sbb    ebx,ebx
c0002c50:	83 c3 02             	add    ebx,0x2
c0002c53:	e9 93 fc ff ff       	jmp    c00028eb <mount_volume+0x1f2>
c0002c58:	83 c4 3c             	add    esp,0x3c
c0002c5b:	89 d8                	mov    eax,ebx
c0002c5d:	5b                   	pop    ebx
c0002c5e:	5e                   	pop    esi
c0002c5f:	5f                   	pop    edi
c0002c60:	5d                   	pop    ebp
c0002c61:	c3                   	ret    

c0002c62 <find_bitmap>:
c0002c62:	55                   	push   ebp
c0002c63:	57                   	push   edi
c0002c64:	89 c7                	mov    edi,eax
c0002c66:	56                   	push   esi
c0002c67:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c6a:	53                   	push   ebx
c0002c6b:	83 ec 1c             	sub    esp,0x1c
c0002c6e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c71:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c75:	83 e8 02             	sub    eax,0x2
c0002c78:	39 f0                	cmp    eax,esi
c0002c7a:	77 02                	ja     c0002c7e <find_bitmap+0x1c>
c0002c7c:	31 f6                	xor    esi,esi
c0002c7e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c82:	89 f3                	mov    ebx,esi
c0002c84:	31 ed                	xor    ebp,ebp
c0002c86:	31 c9                	xor    ecx,ecx
c0002c88:	89 da                	mov    edx,ebx
c0002c8a:	89 f8                	mov    eax,edi
c0002c8c:	c1 ea 0c             	shr    edx,0xc
c0002c8f:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c92:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c95:	e8 ad f7 ff ff       	call   c0002447 <move_window>
c0002c9a:	85 c0                	test   eax,eax
c0002c9c:	75 68                	jne    c0002d06 <find_bitmap+0xa4>
c0002c9e:	89 da                	mov    edx,ebx
c0002ca0:	89 d9                	mov    ecx,ebx
c0002ca2:	c1 ea 03             	shr    edx,0x3
c0002ca5:	83 e1 07             	and    ecx,0x7
c0002ca8:	b8 01 00 00 00       	mov    eax,0x1
c0002cad:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cb3:	d3 e0                	shl    eax,cl
c0002cb5:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cb8:	83 e9 02             	sub    ecx,0x2
c0002cbb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cbf:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cc3:	43                   	inc    ebx
c0002cc4:	21 c1                	and    ecx,eax
c0002cc6:	d1 e0                	shl    eax,1
c0002cc8:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002ccc:	77 09                	ja     c0002cd7 <find_bitmap+0x75>
c0002cce:	31 db                	xor    ebx,ebx
c0002cd0:	ba 00 02 00 00       	mov    edx,0x200
c0002cd5:	31 c0                	xor    eax,eax
c0002cd7:	84 c9                	test   cl,cl
c0002cd9:	75 10                	jne    c0002ceb <find_bitmap+0x89>
c0002cdb:	45                   	inc    ebp
c0002cdc:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002ce0:	75 0f                	jne    c0002cf1 <find_bitmap+0x8f>
c0002ce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ce6:	83 c0 02             	add    eax,0x2
c0002ce9:	eb 22                	jmp    c0002d0d <find_bitmap+0xab>
c0002ceb:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cef:	31 ed                	xor    ebp,ebp
c0002cf1:	39 de                	cmp    esi,ebx
c0002cf3:	74 16                	je     c0002d0b <find_bitmap+0xa9>
c0002cf5:	84 c0                	test   al,al
c0002cf7:	75 c6                	jne    c0002cbf <find_bitmap+0x5d>
c0002cf9:	42                   	inc    edx
c0002cfa:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002d00:	77 84                	ja     c0002c86 <find_bitmap+0x24>
c0002d02:	b0 01                	mov    al,0x1
c0002d04:	eb b9                	jmp    c0002cbf <find_bitmap+0x5d>
c0002d06:	83 c8 ff             	or     eax,0xffffffff
c0002d09:	eb 02                	jmp    c0002d0d <find_bitmap+0xab>
c0002d0b:	31 c0                	xor    eax,eax
c0002d0d:	83 c4 1c             	add    esp,0x1c
c0002d10:	5b                   	pop    ebx
c0002d11:	5e                   	pop    esi
c0002d12:	5f                   	pop    edi
c0002d13:	5d                   	pop    ebp
c0002d14:	c3                   	ret    

c0002d15 <change_bitmap>:
c0002d15:	55                   	push   ebp
c0002d16:	89 cd                	mov    ebp,ecx
c0002d18:	57                   	push   edi
c0002d19:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d1c:	56                   	push   esi
c0002d1d:	89 c7                	mov    edi,eax
c0002d1f:	53                   	push   ebx
c0002d20:	89 c8                	mov    eax,ecx
c0002d22:	83 ec 1c             	sub    esp,0x1c
c0002d25:	31 d2                	xor    edx,edx
c0002d27:	89 ce                	mov    esi,ecx
c0002d29:	c1 e8 0c             	shr    eax,0xc
c0002d2c:	bb 01 00 00 00       	mov    ebx,0x1
c0002d31:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d34:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d37:	c1 ee 03             	shr    esi,0x3
c0002d3a:	83 e1 07             	and    ecx,0x7
c0002d3d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d43:	d3 e3                	shl    ebx,cl
c0002d45:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d49:	89 c1                	mov    ecx,eax
c0002d4b:	89 d3                	mov    ebx,edx
c0002d4d:	83 c1 01             	add    ecx,0x1
c0002d50:	83 d3 00             	adc    ebx,0x0
c0002d53:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d57:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d5b:	89 d1                	mov    ecx,edx
c0002d5d:	89 c2                	mov    edx,eax
c0002d5f:	89 f8                	mov    eax,edi
c0002d61:	e8 e1 f6 ff ff       	call   c0002447 <move_window>
c0002d66:	89 c1                	mov    ecx,eax
c0002d68:	85 c0                	test   eax,eax
c0002d6a:	75 48                	jne    c0002db4 <change_bitmap+0x9f>
c0002d6c:	31 d2                	xor    edx,edx
c0002d6e:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d72:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d76:	0f 95 c2             	setne  dl
c0002d79:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d7d:	74 3c                	je     c0002dbb <change_bitmap+0xa6>
c0002d7f:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d83:	4d                   	dec    ebp
c0002d84:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d88:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d8c:	74 32                	je     c0002dc0 <change_bitmap+0xab>
c0002d8e:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d92:	75 d8                	jne    c0002d6c <change_bitmap+0x57>
c0002d94:	8d 46 01             	lea    eax,[esi+0x1]
c0002d97:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d9c:	89 c3                	mov    ebx,eax
c0002d9e:	31 f6                	xor    esi,esi
c0002da0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002da8:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002dae:	74 99                	je     c0002d49 <change_bitmap+0x34>
c0002db0:	89 de                	mov    esi,ebx
c0002db2:	eb b8                	jmp    c0002d6c <change_bitmap+0x57>
c0002db4:	b9 01 00 00 00       	mov    ecx,0x1
c0002db9:	eb 05                	jmp    c0002dc0 <change_bitmap+0xab>
c0002dbb:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc0:	83 c4 1c             	add    esp,0x1c
c0002dc3:	89 c8                	mov    eax,ecx
c0002dc5:	5b                   	pop    ebx
c0002dc6:	5e                   	pop    esi
c0002dc7:	5f                   	pop    edi
c0002dc8:	5d                   	pop    ebp
c0002dc9:	c3                   	ret    

c0002dca <put_fat>:
c0002dca:	83 fa 01             	cmp    edx,0x1
c0002dcd:	0f 86 7b 01 00 00    	jbe    c0002f4e <put_fat+0x184>
c0002dd3:	55                   	push   ebp
c0002dd4:	57                   	push   edi
c0002dd5:	89 cf                	mov    edi,ecx
c0002dd7:	56                   	push   esi
c0002dd8:	b9 02 00 00 00       	mov    ecx,0x2
c0002ddd:	53                   	push   ebx
c0002dde:	89 c6                	mov    esi,eax
c0002de0:	83 ec 1c             	sub    esp,0x1c
c0002de3:	89 d3                	mov    ebx,edx
c0002de5:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002de8:	0f 86 68 01 00 00    	jbe    c0002f56 <put_fat+0x18c>
c0002dee:	8a 00                	mov    al,BYTE PTR [eax]
c0002df0:	3c 02                	cmp    al,0x2
c0002df2:	0f 84 c7 00 00 00    	je     c0002ebf <put_fat+0xf5>
c0002df8:	77 09                	ja     c0002e03 <put_fat+0x39>
c0002dfa:	fe c8                	dec    al
c0002dfc:	74 17                	je     c0002e15 <put_fat+0x4b>
c0002dfe:	e9 53 01 00 00       	jmp    c0002f56 <put_fat+0x18c>
c0002e03:	b9 02 00 00 00       	mov    ecx,0x2
c0002e08:	3c 04                	cmp    al,0x4
c0002e0a:	0f 86 e1 00 00 00    	jbe    c0002ef1 <put_fat+0x127>
c0002e10:	e9 41 01 00 00       	jmp    c0002f56 <put_fat+0x18c>
c0002e15:	89 d5                	mov    ebp,edx
c0002e17:	31 c9                	xor    ecx,ecx
c0002e19:	d1 ed                	shr    ebp,1
c0002e1b:	89 f0                	mov    eax,esi
c0002e1d:	01 d5                	add    ebp,edx
c0002e1f:	89 ea                	mov    edx,ebp
c0002e21:	c1 ea 09             	shr    edx,0x9
c0002e24:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e27:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e2a:	e8 18 f6 ff ff       	call   c0002447 <move_window>
c0002e2f:	89 c1                	mov    ecx,eax
c0002e31:	85 c0                	test   eax,eax
c0002e33:	0f 85 1d 01 00 00    	jne    c0002f56 <put_fat+0x18c>
c0002e39:	8d 46 54             	lea    eax,[esi+0x54]
c0002e3c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e40:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e43:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e49:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e4d:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e51:	89 f8                	mov    eax,edi
c0002e53:	83 e3 01             	and    ebx,0x1
c0002e56:	74 0d                	je     c0002e65 <put_fat+0x9b>
c0002e58:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e5b:	89 fa                	mov    edx,edi
c0002e5d:	83 e0 0f             	and    eax,0xf
c0002e60:	c1 e2 04             	shl    edx,0x4
c0002e63:	09 d0                	or     eax,edx
c0002e65:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e68:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e6c:	31 c9                	xor    ecx,ecx
c0002e6e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e72:	c1 ea 09             	shr    edx,0x9
c0002e75:	89 f0                	mov    eax,esi
c0002e77:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e7a:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e7d:	e8 c5 f5 ff ff       	call   c0002447 <move_window>
c0002e82:	89 c1                	mov    ecx,eax
c0002e84:	85 c0                	test   eax,eax
c0002e86:	0f 85 ca 00 00 00    	jne    c0002f56 <put_fat+0x18c>
c0002e8c:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e90:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e96:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e9a:	85 db                	test   ebx,ebx
c0002e9c:	74 07                	je     c0002ea5 <put_fat+0xdb>
c0002e9e:	c1 ef 04             	shr    edi,0x4
c0002ea1:	89 fa                	mov    edx,edi
c0002ea3:	eb 0e                	jmp    c0002eb3 <put_fat+0xe9>
c0002ea5:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ea8:	c1 ef 08             	shr    edi,0x8
c0002eab:	83 e2 f0             	and    edx,0xfffffff0
c0002eae:	83 e7 0f             	and    edi,0xf
c0002eb1:	09 fa                	or     edx,edi
c0002eb3:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002eb6:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eba:	e9 97 00 00 00       	jmp    c0002f56 <put_fat+0x18c>
c0002ebf:	31 c9                	xor    ecx,ecx
c0002ec1:	c1 ea 08             	shr    edx,0x8
c0002ec4:	89 f0                	mov    eax,esi
c0002ec6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ec9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ecc:	e8 76 f5 ff ff       	call   c0002447 <move_window>
c0002ed1:	89 c1                	mov    ecx,eax
c0002ed3:	85 c0                	test   eax,eax
c0002ed5:	75 7f                	jne    c0002f56 <put_fat+0x18c>
c0002ed7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edb:	01 db                	add    ebx,ebx
c0002edd:	0f b7 d7             	movzx  edx,di
c0002ee0:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ee6:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002eea:	e8 ec ed ff ff       	call   c0001cdb <st_word>
c0002eef:	eb 53                	jmp    c0002f44 <put_fat+0x17a>
c0002ef1:	31 c9                	xor    ecx,ecx
c0002ef3:	c1 ea 07             	shr    edx,0x7
c0002ef6:	89 f0                	mov    eax,esi
c0002ef8:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002efb:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002efe:	e8 44 f5 ff ff       	call   c0002447 <move_window>
c0002f03:	89 c1                	mov    ecx,eax
c0002f05:	85 c0                	test   eax,eax
c0002f07:	75 4d                	jne    c0002f56 <put_fat+0x18c>
c0002f09:	c1 e3 02             	shl    ebx,0x2
c0002f0c:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f12:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f15:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f19:	74 1c                	je     c0002f37 <put_fat+0x16d>
c0002f1b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f1f:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f25:	89 d8                	mov    eax,ebx
c0002f27:	e8 4a ed ff ff       	call   c0001c76 <ld_dword>
c0002f2c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f30:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f35:	09 c7                	or     edi,eax
c0002f37:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f3b:	89 fa                	mov    edx,edi
c0002f3d:	89 d8                	mov    eax,ebx
c0002f3f:	e8 9b ed ff ff       	call   c0001cdf <st_dword>
c0002f44:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f48:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f4c:	eb 08                	jmp    c0002f56 <put_fat+0x18c>
c0002f4e:	b9 02 00 00 00       	mov    ecx,0x2
c0002f53:	89 c8                	mov    eax,ecx
c0002f55:	c3                   	ret    
c0002f56:	83 c4 1c             	add    esp,0x1c
c0002f59:	89 c8                	mov    eax,ecx
c0002f5b:	5b                   	pop    ebx
c0002f5c:	5e                   	pop    esi
c0002f5d:	5f                   	pop    edi
c0002f5e:	5d                   	pop    ebp
c0002f5f:	c3                   	ret    

c0002f60 <fill_last_frag>:
c0002f60:	57                   	push   edi
c0002f61:	89 cf                	mov    edi,ecx
c0002f63:	56                   	push   esi
c0002f64:	89 d6                	mov    esi,edx
c0002f66:	53                   	push   ebx
c0002f67:	89 c3                	mov    ebx,eax
c0002f69:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f6c:	85 c0                	test   eax,eax
c0002f6e:	74 21                	je     c0002f91 <fill_last_frag+0x31>
c0002f70:	89 f9                	mov    ecx,edi
c0002f72:	83 f8 01             	cmp    eax,0x1
c0002f75:	76 05                	jbe    c0002f7c <fill_last_frag+0x1c>
c0002f77:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f7a:	29 c1                	sub    ecx,eax
c0002f7c:	8d 56 01             	lea    edx,[esi+0x1]
c0002f7f:	29 c2                	sub    edx,eax
c0002f81:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f83:	e8 42 fe ff ff       	call   c0002dca <put_fat>
c0002f88:	85 c0                	test   eax,eax
c0002f8a:	75 05                	jne    c0002f91 <fill_last_frag+0x31>
c0002f8c:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f8f:	eb d8                	jmp    c0002f69 <fill_last_frag+0x9>
c0002f91:	5b                   	pop    ebx
c0002f92:	5e                   	pop    esi
c0002f93:	5f                   	pop    edi
c0002f94:	c3                   	ret    

c0002f95 <fill_first_frag>:
c0002f95:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f99:	75 2d                	jne    c0002fc8 <fill_first_frag+0x33>
c0002f9b:	57                   	push   edi
c0002f9c:	56                   	push   esi
c0002f9d:	53                   	push   ebx
c0002f9e:	89 c3                	mov    ebx,eax
c0002fa0:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002fa3:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002fa6:	01 d7                	add    edi,edx
c0002fa8:	39 fa                	cmp    edx,edi
c0002faa:	74 14                	je     c0002fc0 <fill_first_frag+0x2b>
c0002fac:	8d 72 01             	lea    esi,[edx+0x1]
c0002faf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fb1:	89 f1                	mov    ecx,esi
c0002fb3:	e8 12 fe ff ff       	call   c0002dca <put_fat>
c0002fb8:	89 f2                	mov    edx,esi
c0002fba:	85 c0                	test   eax,eax
c0002fbc:	74 ea                	je     c0002fa8 <fill_first_frag+0x13>
c0002fbe:	eb 0b                	jmp    c0002fcb <fill_first_frag+0x36>
c0002fc0:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fc4:	31 c0                	xor    eax,eax
c0002fc6:	eb 03                	jmp    c0002fcb <fill_first_frag+0x36>
c0002fc8:	31 c0                	xor    eax,eax
c0002fca:	c3                   	ret    
c0002fcb:	5b                   	pop    ebx
c0002fcc:	5e                   	pop    esi
c0002fcd:	5f                   	pop    edi
c0002fce:	c3                   	ret    

c0002fcf <get_fat>:
c0002fcf:	83 fa 01             	cmp    edx,0x1
c0002fd2:	0f 86 db 01 00 00    	jbe    c00031b3 <get_fat+0x1e4>
c0002fd8:	55                   	push   ebp
c0002fd9:	b9 01 00 00 00       	mov    ecx,0x1
c0002fde:	57                   	push   edi
c0002fdf:	56                   	push   esi
c0002fe0:	53                   	push   ebx
c0002fe1:	83 ec 1c             	sub    esp,0x1c
c0002fe4:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fe6:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fe9:	0f 86 cc 01 00 00    	jbe    c00031bb <get_fat+0x1ec>
c0002fef:	89 c3                	mov    ebx,eax
c0002ff1:	89 d6                	mov    esi,edx
c0002ff3:	8a 07                	mov    al,BYTE PTR [edi]
c0002ff5:	3c 02                	cmp    al,0x2
c0002ff7:	0f 84 99 00 00 00    	je     c0003096 <get_fat+0xc7>
c0002ffd:	77 09                	ja     c0003008 <get_fat+0x39>
c0002fff:	fe c8                	dec    al
c0003001:	74 1a                	je     c000301d <get_fat+0x4e>
c0003003:	e9 b3 01 00 00       	jmp    c00031bb <get_fat+0x1ec>
c0003008:	3c 03                	cmp    al,0x3
c000300a:	0f 84 b5 00 00 00    	je     c00030c5 <get_fat+0xf6>
c0003010:	3c 04                	cmp    al,0x4
c0003012:	0f 84 e3 00 00 00    	je     c00030fb <get_fat+0x12c>
c0003018:	e9 9e 01 00 00       	jmp    c00031bb <get_fat+0x1ec>
c000301d:	89 d3                	mov    ebx,edx
c000301f:	31 c9                	xor    ecx,ecx
c0003021:	d1 eb                	shr    ebx,1
c0003023:	89 f8                	mov    eax,edi
c0003025:	01 d3                	add    ebx,edx
c0003027:	89 da                	mov    edx,ebx
c0003029:	c1 ea 09             	shr    edx,0x9
c000302c:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000302f:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003032:	e8 10 f4 ff ff       	call   c0002447 <move_window>
c0003037:	85 c0                	test   eax,eax
c0003039:	74 08                	je     c0003043 <get_fat+0x74>
c000303b:	83 c9 ff             	or     ecx,0xffffffff
c000303e:	e9 78 01 00 00       	jmp    c00031bb <get_fat+0x1ec>
c0003043:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003046:	31 c9                	xor    ecx,ecx
c0003048:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000304e:	89 ea                	mov    edx,ebp
c0003050:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003054:	c1 ea 09             	shr    edx,0x9
c0003057:	89 f8                	mov    eax,edi
c0003059:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305c:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000305f:	e8 e3 f3 ff ff       	call   c0002447 <move_window>
c0003064:	85 c0                	test   eax,eax
c0003066:	75 d3                	jne    c000303b <get_fat+0x6c>
c0003068:	0f b6 c3             	movzx  eax,bl
c000306b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003071:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003076:	c1 e3 08             	shl    ebx,0x8
c0003079:	09 c3                	or     ebx,eax
c000307b:	89 d9                	mov    ecx,ebx
c000307d:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003083:	83 e6 01             	and    esi,0x1
c0003086:	0f 84 2f 01 00 00    	je     c00031bb <get_fat+0x1ec>
c000308c:	89 d9                	mov    ecx,ebx
c000308e:	c1 e9 04             	shr    ecx,0x4
c0003091:	e9 25 01 00 00       	jmp    c00031bb <get_fat+0x1ec>
c0003096:	31 c9                	xor    ecx,ecx
c0003098:	c1 ea 08             	shr    edx,0x8
c000309b:	89 f8                	mov    eax,edi
c000309d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030a0:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030a3:	e8 9f f3 ff ff       	call   c0002447 <move_window>
c00030a8:	85 c0                	test   eax,eax
c00030aa:	75 8f                	jne    c000303b <get_fat+0x6c>
c00030ac:	01 f6                	add    esi,esi
c00030ae:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030b4:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030b8:	e8 ac eb ff ff       	call   c0001c69 <ld_word>
c00030bd:	0f b7 c8             	movzx  ecx,ax
c00030c0:	e9 f6 00 00 00       	jmp    c00031bb <get_fat+0x1ec>
c00030c5:	31 c9                	xor    ecx,ecx
c00030c7:	c1 ea 07             	shr    edx,0x7
c00030ca:	89 f8                	mov    eax,edi
c00030cc:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030cf:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030d2:	e8 70 f3 ff ff       	call   c0002447 <move_window>
c00030d7:	85 c0                	test   eax,eax
c00030d9:	0f 85 5c ff ff ff    	jne    c000303b <get_fat+0x6c>
c00030df:	c1 e6 02             	shl    esi,0x2
c00030e2:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030e8:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030ec:	e8 85 eb ff ff       	call   c0001c76 <ld_dword>
c00030f1:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030f6:	e9 b4 00 00 00       	jmp    c00031af <get_fat+0x1e0>
c00030fb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030fe:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003101:	89 d1                	mov    ecx,edx
c0003103:	09 c1                	or     ecx,eax
c0003105:	74 06                	je     c000310d <get_fat+0x13e>
c0003107:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000310b:	75 0f                	jne    c000311c <get_fat+0x14d>
c000310d:	b9 01 00 00 00       	mov    ecx,0x1
c0003112:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003116:	0f 85 9f 00 00 00    	jne    c00031bb <get_fat+0x1ec>
c000311c:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003120:	89 f5                	mov    ebp,esi
c0003122:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003127:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c000312a:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c000312d:	80 f9 02             	cmp    cl,0x2
c0003130:	75 35                	jne    c0003167 <get_fat+0x198>
c0003132:	83 c0 ff             	add    eax,0xffffffff
c0003135:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c000313a:	83 d2 ff             	adc    edx,0xffffffff
c000313d:	31 db                	xor    ebx,ebx
c000313f:	0f ac d0 09          	shrd   eax,edx,0x9
c0003143:	53                   	push   ebx
c0003144:	c1 ea 09             	shr    edx,0x9
c0003147:	51                   	push   ecx
c0003148:	52                   	push   edx
c0003149:	50                   	push   eax
c000314a:	e8 75 38 02 00       	call   c00269c4 <__udivdi3>
c000314f:	83 c4 10             	add    esp,0x10
c0003152:	b9 01 00 00 00       	mov    ecx,0x1
c0003157:	39 c5                	cmp    ebp,eax
c0003159:	77 60                	ja     c00031bb <get_fat+0x1ec>
c000315b:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003160:	74 59                	je     c00031bb <get_fat+0x1ec>
c0003162:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003165:	eb 54                	jmp    c00031bb <get_fat+0x1ec>
c0003167:	80 f9 03             	cmp    cl,0x3
c000316a:	75 05                	jne    c0003171 <get_fat+0x1a2>
c000316c:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000316f:	77 f1                	ja     c0003162 <get_fat+0x193>
c0003171:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003176:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c000317a:	75 3f                	jne    c00031bb <get_fat+0x1ec>
c000317c:	31 c9                	xor    ecx,ecx
c000317e:	89 f2                	mov    edx,esi
c0003180:	89 f8                	mov    eax,edi
c0003182:	c1 ea 07             	shr    edx,0x7
c0003185:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003188:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000318b:	e8 b7 f2 ff ff       	call   c0002447 <move_window>
c0003190:	85 c0                	test   eax,eax
c0003192:	0f 85 a3 fe ff ff    	jne    c000303b <get_fat+0x6c>
c0003198:	c1 e6 02             	shl    esi,0x2
c000319b:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031a1:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00031a5:	e8 cc ea ff ff       	call   c0001c76 <ld_dword>
c00031aa:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031af:	89 c1                	mov    ecx,eax
c00031b1:	eb 08                	jmp    c00031bb <get_fat+0x1ec>
c00031b3:	b9 01 00 00 00       	mov    ecx,0x1
c00031b8:	89 c8                	mov    eax,ecx
c00031ba:	c3                   	ret    
c00031bb:	83 c4 1c             	add    esp,0x1c
c00031be:	89 c8                	mov    eax,ecx
c00031c0:	5b                   	pop    ebx
c00031c1:	5e                   	pop    esi
c00031c2:	5f                   	pop    edi
c00031c3:	5d                   	pop    ebp
c00031c4:	c3                   	ret    

c00031c5 <dir_sdi>:
c00031c5:	55                   	push   ebp
c00031c6:	57                   	push   edi
c00031c7:	56                   	push   esi
c00031c8:	53                   	push   ebx
c00031c9:	89 c3                	mov    ebx,eax
c00031cb:	83 ec 1c             	sub    esp,0x1c
c00031ce:	8b 38                	mov    edi,DWORD PTR [eax]
c00031d0:	31 c0                	xor    eax,eax
c00031d2:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031d5:	0f 94 c0             	sete   al
c00031d8:	48                   	dec    eax
c00031d9:	25 00 00 20 f0       	and    eax,0xf0200000
c00031de:	05 00 00 00 10       	add    eax,0x10000000
c00031e3:	39 d0                	cmp    eax,edx
c00031e5:	77 0a                	ja     c00031f1 <dir_sdi+0x2c>
c00031e7:	b8 02 00 00 00       	mov    eax,0x2
c00031ec:	e9 c4 00 00 00       	jmp    c00032b5 <dir_sdi+0xf0>
c00031f1:	89 d6                	mov    esi,edx
c00031f3:	f6 c2 1f             	test   dl,0x1f
c00031f6:	75 ef                	jne    c00031e7 <dir_sdi+0x22>
c00031f8:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031fb:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031fe:	85 c9                	test   ecx,ecx
c0003200:	75 2d                	jne    c000322f <dir_sdi+0x6a>
c0003202:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003205:	77 1b                	ja     c0003222 <dir_sdi+0x5d>
c0003207:	89 f2                	mov    edx,esi
c0003209:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000320d:	c1 ea 05             	shr    edx,0x5
c0003210:	39 c2                	cmp    edx,eax
c0003212:	73 d3                	jae    c00031e7 <dir_sdi+0x22>
c0003214:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003217:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c000321a:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000321d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003220:	eb 4b                	jmp    c000326d <dir_sdi+0xa8>
c0003222:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003225:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003229:	85 c0                	test   eax,eax
c000322b:	74 da                	je     c0003207 <dir_sdi+0x42>
c000322d:	89 c1                	mov    ecx,eax
c000322f:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003233:	c1 e5 09             	shl    ebp,0x9
c0003236:	89 ca                	mov    edx,ecx
c0003238:	39 ee                	cmp    esi,ebp
c000323a:	72 1c                	jb     c0003258 <dir_sdi+0x93>
c000323c:	89 d8                	mov    eax,ebx
c000323e:	e8 8c fd ff ff       	call   c0002fcf <get_fat>
c0003243:	89 c1                	mov    ecx,eax
c0003245:	83 f8 ff             	cmp    eax,0xffffffff
c0003248:	74 66                	je     c00032b0 <dir_sdi+0xeb>
c000324a:	83 f8 01             	cmp    eax,0x1
c000324d:	76 98                	jbe    c00031e7 <dir_sdi+0x22>
c000324f:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003252:	76 93                	jbe    c00031e7 <dir_sdi+0x22>
c0003254:	29 ee                	sub    esi,ebp
c0003256:	eb de                	jmp    c0003236 <dir_sdi+0x71>
c0003258:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000325c:	89 f8                	mov    eax,edi
c000325e:	e8 9f ec ff ff       	call   c0001f02 <clst2sect>
c0003263:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003267:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000326a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000326d:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003270:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003273:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003276:	89 d1                	mov    ecx,edx
c0003278:	09 c1                	or     ecx,eax
c000327a:	0f 84 67 ff ff ff    	je     c00031e7 <dir_sdi+0x22>
c0003280:	89 f1                	mov    ecx,esi
c0003282:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000328a:	c1 e9 09             	shr    ecx,0x9
c000328d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003291:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003295:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003299:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000329c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00032a2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00032a5:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032a9:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032ac:	31 c0                	xor    eax,eax
c00032ae:	eb 05                	jmp    c00032b5 <dir_sdi+0xf0>
c00032b0:	b8 01 00 00 00       	mov    eax,0x1
c00032b5:	83 c4 1c             	add    esp,0x1c
c00032b8:	5b                   	pop    ebx
c00032b9:	5e                   	pop    esi
c00032ba:	5f                   	pop    edi
c00032bb:	5d                   	pop    ebp
c00032bc:	c3                   	ret    

c00032bd <create_chain>:
c00032bd:	55                   	push   ebp
c00032be:	89 c5                	mov    ebp,eax
c00032c0:	57                   	push   edi
c00032c1:	56                   	push   esi
c00032c2:	53                   	push   ebx
c00032c3:	83 ec 1c             	sub    esp,0x1c
c00032c6:	85 d2                	test   edx,edx
c00032c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032cc:	8b 30                	mov    esi,DWORD PTR [eax]
c00032ce:	75 0e                	jne    c00032de <create_chain+0x21>
c00032d0:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032d3:	85 ff                	test   edi,edi
c00032d5:	74 39                	je     c0003310 <create_chain+0x53>
c00032d7:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032da:	77 39                	ja     c0003315 <create_chain+0x58>
c00032dc:	eb 32                	jmp    c0003310 <create_chain+0x53>
c00032de:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032e2:	e8 e8 fc ff ff       	call   c0002fcf <get_fat>
c00032e7:	89 c3                	mov    ebx,eax
c00032e9:	83 f8 01             	cmp    eax,0x1
c00032ec:	77 0a                	ja     c00032f8 <create_chain+0x3b>
c00032ee:	bb 01 00 00 00       	mov    ebx,0x1
c00032f3:	e9 ba 01 00 00       	jmp    c00034b2 <create_chain+0x1f5>
c00032f8:	83 f8 ff             	cmp    eax,0xffffffff
c00032fb:	0f 84 62 01 00 00    	je     c0003463 <create_chain+0x1a6>
c0003301:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003304:	0f 87 a8 01 00 00    	ja     c00034b2 <create_chain+0x1f5>
c000330a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000330e:	eb 05                	jmp    c0003315 <create_chain+0x58>
c0003310:	bf 01 00 00 00       	mov    edi,0x1
c0003315:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003319:	75 07                	jne    c0003322 <create_chain+0x65>
c000331b:	31 db                	xor    ebx,ebx
c000331d:	e9 90 01 00 00       	jmp    c00034b2 <create_chain+0x1f5>
c0003322:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003325:	75 74                	jne    c000339b <create_chain+0xde>
c0003327:	b9 01 00 00 00       	mov    ecx,0x1
c000332c:	89 fa                	mov    edx,edi
c000332e:	89 f0                	mov    eax,esi
c0003330:	e8 2d f9 ff ff       	call   c0002c62 <find_bitmap>
c0003335:	89 c3                	mov    ebx,eax
c0003337:	8d 40 ff             	lea    eax,[eax-0x1]
c000333a:	83 f8 fd             	cmp    eax,0xfffffffd
c000333d:	0f 87 6f 01 00 00    	ja     c00034b2 <create_chain+0x1f5>
c0003343:	83 ec 0c             	sub    esp,0xc
c0003346:	b9 01 00 00 00       	mov    ecx,0x1
c000334b:	6a 01                	push   0x1
c000334d:	89 da                	mov    edx,ebx
c000334f:	89 f0                	mov    eax,esi
c0003351:	e8 bf f9 ff ff       	call   c0002d15 <change_bitmap>
c0003356:	83 c4 10             	add    esp,0x10
c0003359:	83 f8 02             	cmp    eax,0x2
c000335c:	74 90                	je     c00032ee <create_chain+0x31>
c000335e:	83 f8 01             	cmp    eax,0x1
c0003361:	0f 84 fc 00 00 00    	je     c0003463 <create_chain+0x1a6>
c0003367:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000336c:	75 09                	jne    c0003377 <create_chain+0xba>
c000336e:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003372:	e9 0c 01 00 00       	jmp    c0003483 <create_chain+0x1c6>
c0003377:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000337b:	0f 85 e7 00 00 00    	jne    c0003468 <create_chain+0x1ab>
c0003381:	8d 57 01             	lea    edx,[edi+0x1]
c0003384:	39 da                	cmp    edx,ebx
c0003386:	0f 84 f7 00 00 00    	je     c0003483 <create_chain+0x1c6>
c000338c:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000338f:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003393:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003396:	e9 cd 00 00 00       	jmp    c0003468 <create_chain+0x1ab>
c000339b:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000339f:	75 41                	jne    c00033e2 <create_chain+0x125>
c00033a1:	8d 5f 01             	lea    ebx,[edi+0x1]
c00033a4:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a7:	77 05                	ja     c00033ae <create_chain+0xf1>
c00033a9:	bb 02 00 00 00       	mov    ebx,0x2
c00033ae:	89 da                	mov    edx,ebx
c00033b0:	89 e8                	mov    eax,ebp
c00033b2:	e8 18 fc ff ff       	call   c0002fcf <get_fat>
c00033b7:	83 f8 01             	cmp    eax,0x1
c00033ba:	0f 84 2e ff ff ff    	je     c00032ee <create_chain+0x31>
c00033c0:	83 f8 ff             	cmp    eax,0xffffffff
c00033c3:	0f 84 9a 00 00 00    	je     c0003463 <create_chain+0x1a6>
c00033c9:	85 c0                	test   eax,eax
c00033cb:	74 11                	je     c00033de <create_chain+0x121>
c00033cd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033d0:	83 f8 01             	cmp    eax,0x1
c00033d3:	76 0d                	jbe    c00033e2 <create_chain+0x125>
c00033d5:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033d8:	76 08                	jbe    c00033e2 <create_chain+0x125>
c00033da:	89 c7                	mov    edi,eax
c00033dc:	eb 04                	jmp    c00033e2 <create_chain+0x125>
c00033de:	85 db                	test   ebx,ebx
c00033e0:	75 38                	jne    c000341a <create_chain+0x15d>
c00033e2:	89 fb                	mov    ebx,edi
c00033e4:	43                   	inc    ebx
c00033e5:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e8:	77 0e                	ja     c00033f8 <create_chain+0x13b>
c00033ea:	83 ff 01             	cmp    edi,0x1
c00033ed:	0f 86 28 ff ff ff    	jbe    c000331b <create_chain+0x5e>
c00033f3:	bb 02 00 00 00       	mov    ebx,0x2
c00033f8:	89 da                	mov    edx,ebx
c00033fa:	89 e8                	mov    eax,ebp
c00033fc:	e8 ce fb ff ff       	call   c0002fcf <get_fat>
c0003401:	85 c0                	test   eax,eax
c0003403:	74 15                	je     c000341a <create_chain+0x15d>
c0003405:	83 f8 01             	cmp    eax,0x1
c0003408:	0f 84 e0 fe ff ff    	je     c00032ee <create_chain+0x31>
c000340e:	40                   	inc    eax
c000340f:	74 52                	je     c0003463 <create_chain+0x1a6>
c0003411:	39 fb                	cmp    ebx,edi
c0003413:	75 cf                	jne    c00033e4 <create_chain+0x127>
c0003415:	e9 01 ff ff ff       	jmp    c000331b <create_chain+0x5e>
c000341a:	83 c9 ff             	or     ecx,0xffffffff
c000341d:	89 da                	mov    edx,ebx
c000341f:	89 f0                	mov    eax,esi
c0003421:	e8 a4 f9 ff ff       	call   c0002dca <put_fat>
c0003426:	85 c0                	test   eax,eax
c0003428:	75 32                	jne    c000345c <create_chain+0x19f>
c000342a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000342f:	74 11                	je     c0003442 <create_chain+0x185>
c0003431:	89 d9                	mov    ecx,ebx
c0003433:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003437:	89 f0                	mov    eax,esi
c0003439:	e8 8c f9 ff ff       	call   c0002dca <put_fat>
c000343e:	85 c0                	test   eax,eax
c0003440:	75 1a                	jne    c000345c <create_chain+0x19f>
c0003442:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003445:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003448:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000344b:	8d 51 fe             	lea    edx,[ecx-0x2]
c000344e:	39 d0                	cmp    eax,edx
c0003450:	77 04                	ja     c0003456 <create_chain+0x199>
c0003452:	48                   	dec    eax
c0003453:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003456:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000345a:	eb 56                	jmp    c00034b2 <create_chain+0x1f5>
c000345c:	48                   	dec    eax
c000345d:	0f 85 8b fe ff ff    	jne    c00032ee <create_chain+0x31>
c0003463:	83 cb ff             	or     ebx,0xffffffff
c0003466:	eb 4a                	jmp    c00034b2 <create_chain+0x1f5>
c0003468:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000346c:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000346f:	41                   	inc    ecx
c0003470:	39 d9                	cmp    ecx,ebx
c0003472:	75 19                	jne    c000348d <create_chain+0x1d0>
c0003474:	b9 02 00 00 00       	mov    ecx,0x2
c0003479:	85 d2                	test   edx,edx
c000347b:	74 03                	je     c0003480 <create_chain+0x1c3>
c000347d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003480:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003483:	85 c0                	test   eax,eax
c0003485:	0f 85 63 fe ff ff    	jne    c00032ee <create_chain+0x31>
c000348b:	eb b5                	jmp    c0003442 <create_chain+0x185>
c000348d:	85 d2                	test   edx,edx
c000348f:	75 07                	jne    c0003498 <create_chain+0x1db>
c0003491:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003498:	89 d9                	mov    ecx,ebx
c000349a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000349e:	89 e8                	mov    eax,ebp
c00034a0:	e8 bb fa ff ff       	call   c0002f60 <fill_last_frag>
c00034a5:	85 c0                	test   eax,eax
c00034a7:	75 b3                	jne    c000345c <create_chain+0x19f>
c00034a9:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034b0:	eb 90                	jmp    c0003442 <create_chain+0x185>
c00034b2:	83 c4 1c             	add    esp,0x1c
c00034b5:	89 d8                	mov    eax,ebx
c00034b7:	5b                   	pop    ebx
c00034b8:	5e                   	pop    esi
c00034b9:	5f                   	pop    edi
c00034ba:	5d                   	pop    ebp
c00034bb:	c3                   	ret    

c00034bc <remove_chain>:
c00034bc:	55                   	push   ebp
c00034bd:	57                   	push   edi
c00034be:	56                   	push   esi
c00034bf:	53                   	push   ebx
c00034c0:	83 ec 1c             	sub    esp,0x1c
c00034c3:	83 fa 01             	cmp    edx,0x1
c00034c6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034ca:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034cc:	77 0a                	ja     c00034d8 <remove_chain+0x1c>
c00034ce:	b8 02 00 00 00       	mov    eax,0x2
c00034d3:	e9 24 01 00 00       	jmp    c00035fc <remove_chain+0x140>
c00034d8:	89 d6                	mov    esi,edx
c00034da:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034dd:	76 ef                	jbe    c00034ce <remove_chain+0x12>
c00034df:	89 c7                	mov    edi,eax
c00034e1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034e6:	75 06                	jne    c00034ee <remove_chain+0x32>
c00034e8:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034ec:	eb 54                	jmp    c0003542 <remove_chain+0x86>
c00034ee:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034f1:	75 06                	jne    c00034f9 <remove_chain+0x3d>
c00034f3:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034f7:	74 ef                	je     c00034e8 <remove_chain+0x2c>
c00034f9:	83 c9 ff             	or     ecx,0xffffffff
c00034fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003500:	89 d8                	mov    eax,ebx
c0003502:	e8 c3 f8 ff ff       	call   c0002dca <put_fat>
c0003507:	85 c0                	test   eax,eax
c0003509:	74 dd                	je     c00034e8 <remove_chain+0x2c>
c000350b:	e9 ec 00 00 00       	jmp    c00035fc <remove_chain+0x140>
c0003510:	83 f8 01             	cmp    eax,0x1
c0003513:	74 b9                	je     c00034ce <remove_chain+0x12>
c0003515:	83 f8 ff             	cmp    eax,0xffffffff
c0003518:	74 6d                	je     c0003587 <remove_chain+0xcb>
c000351a:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000351d:	75 6f                	jne    c000358e <remove_chain+0xd2>
c000351f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003522:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003525:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003528:	39 d0                	cmp    eax,edx
c000352a:	73 08                	jae    c0003534 <remove_chain+0x78>
c000352c:	40                   	inc    eax
c000352d:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003531:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003534:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003537:	39 e9                	cmp    ecx,ebp
c0003539:	75 64                	jne    c000359f <remove_chain+0xe3>
c000353b:	89 ee                	mov    esi,ebp
c000353d:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003540:	76 0f                	jbe    c0003551 <remove_chain+0x95>
c0003542:	89 f2                	mov    edx,esi
c0003544:	89 f8                	mov    eax,edi
c0003546:	e8 84 fa ff ff       	call   c0002fcf <get_fat>
c000354b:	89 c5                	mov    ebp,eax
c000354d:	85 c0                	test   eax,eax
c000354f:	75 bf                	jne    c0003510 <remove_chain+0x54>
c0003551:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003554:	0f 85 a0 00 00 00    	jne    c00035fa <remove_chain+0x13e>
c000355a:	eb 6c                	jmp    c00035c8 <remove_chain+0x10c>
c000355c:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000355f:	84 c0                	test   al,al
c0003561:	75 7d                	jne    c00035e0 <remove_chain+0x124>
c0003563:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003566:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000356a:	0f 84 86 00 00 00    	je     c00035f6 <remove_chain+0x13a>
c0003570:	89 da                	mov    edx,ebx
c0003572:	89 f8                	mov    eax,edi
c0003574:	e8 56 fa ff ff       	call   c0002fcf <get_fat>
c0003579:	83 f8 01             	cmp    eax,0x1
c000357c:	0f 86 4c ff ff ff    	jbe    c00034ce <remove_chain+0x12>
c0003582:	83 f8 ff             	cmp    eax,0xffffffff
c0003585:	75 4e                	jne    c00035d5 <remove_chain+0x119>
c0003587:	b8 01 00 00 00       	mov    eax,0x1
c000358c:	eb 6e                	jmp    c00035fc <remove_chain+0x140>
c000358e:	31 c9                	xor    ecx,ecx
c0003590:	89 f2                	mov    edx,esi
c0003592:	89 d8                	mov    eax,ebx
c0003594:	e8 31 f8 ff ff       	call   c0002dca <put_fat>
c0003599:	85 c0                	test   eax,eax
c000359b:	74 82                	je     c000351f <remove_chain+0x63>
c000359d:	eb 5d                	jmp    c00035fc <remove_chain+0x140>
c000359f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00035a2:	75 1b                	jne    c00035bf <remove_chain+0x103>
c00035a4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035a8:	89 d8                	mov    eax,ebx
c00035aa:	83 ec 0c             	sub    esp,0xc
c00035ad:	6a 00                	push   0x0
c00035af:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035b3:	e8 5d f7 ff ff       	call   c0002d15 <change_bitmap>
c00035b8:	83 c4 10             	add    esp,0x10
c00035bb:	85 c0                	test   eax,eax
c00035bd:	75 3d                	jne    c00035fc <remove_chain+0x140>
c00035bf:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035c3:	e9 73 ff ff ff       	jmp    c000353b <remove_chain+0x7f>
c00035c8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035cd:	75 8d                	jne    c000355c <remove_chain+0xa0>
c00035cf:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035d3:	eb 25                	jmp    c00035fa <remove_chain+0x13e>
c00035d5:	8d 53 01             	lea    edx,[ebx+0x1]
c00035d8:	89 c3                	mov    ebx,eax
c00035da:	39 c2                	cmp    edx,eax
c00035dc:	74 88                	je     c0003566 <remove_chain+0xaa>
c00035de:	eb 1a                	jmp    c00035fa <remove_chain+0x13e>
c00035e0:	3c 03                	cmp    al,0x3
c00035e2:	75 16                	jne    c00035fa <remove_chain+0x13e>
c00035e4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035e7:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035eb:	77 0d                	ja     c00035fa <remove_chain+0x13e>
c00035ed:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035f0:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035f4:	72 04                	jb     c00035fa <remove_chain+0x13e>
c00035f6:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035fa:	31 c0                	xor    eax,eax
c00035fc:	83 c4 1c             	add    esp,0x1c
c00035ff:	5b                   	pop    ebx
c0003600:	5e                   	pop    esi
c0003601:	5f                   	pop    edi
c0003602:	5d                   	pop    ebp
c0003603:	c3                   	ret    

c0003604 <dir_clear>:
c0003604:	55                   	push   ebp
c0003605:	57                   	push   edi
c0003606:	56                   	push   esi
c0003607:	89 c6                	mov    esi,eax
c0003609:	53                   	push   ebx
c000360a:	83 ec 1c             	sub    esp,0x1c
c000360d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003611:	e8 9d ed ff ff       	call   c00023b3 <sync_window>
c0003616:	85 c0                	test   eax,eax
c0003618:	0f 85 de 00 00 00    	jne    c00036fc <dir_clear+0xf8>
c000361e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003622:	89 f0                	mov    eax,esi
c0003624:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003627:	e8 d6 e8 ff ff       	call   c0001f02 <clst2sect>
c000362c:	b9 00 02 00 00       	mov    ecx,0x200
c0003631:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003635:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003639:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000363c:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c000363f:	89 e8                	mov    eax,ebp
c0003641:	31 d2                	xor    edx,edx
c0003643:	e8 b5 e6 ff ff       	call   c0001cfd <mem_set>
c0003648:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000364c:	c1 e3 09             	shl    ebx,0x9
c000364f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003655:	76 1f                	jbe    c0003676 <dir_clear+0x72>
c0003657:	bb 00 80 00 00       	mov    ebx,0x8000
c000365c:	eb 18                	jmp    c0003676 <dir_clear+0x72>
c000365e:	83 ec 0c             	sub    esp,0xc
c0003661:	53                   	push   ebx
c0003662:	e8 35 4e 00 00       	call   c000849c <ff_memalloc>
c0003667:	83 c4 10             	add    esp,0x10
c000366a:	89 c7                	mov    edi,eax
c000366c:	85 c0                	test   eax,eax
c000366e:	0f 85 8f 00 00 00    	jne    c0003703 <dir_clear+0xff>
c0003674:	d1 eb                	shr    ebx,1
c0003676:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000367c:	77 e0                	ja     c000365e <dir_clear+0x5a>
c000367e:	31 db                	xor    ebx,ebx
c0003680:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003684:	39 d8                	cmp    eax,ebx
c0003686:	76 66                	jbe    c00036ee <dir_clear+0xea>
c0003688:	83 ec 0c             	sub    esp,0xc
c000368b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000368f:	6a 01                	push   0x1
c0003691:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003695:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003699:	55                   	push   ebp
c000369a:	50                   	push   eax
c000369b:	e8 94 e5 ff ff       	call   c0001c34 <disk_write>
c00036a0:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c00036a5:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036aa:	83 c4 20             	add    esp,0x20
c00036ad:	85 c0                	test   eax,eax
c00036af:	75 3d                	jne    c00036ee <dir_clear+0xea>
c00036b1:	43                   	inc    ebx
c00036b2:	eb cc                	jmp    c0003680 <dir_clear+0x7c>
c00036b4:	83 ec 0c             	sub    esp,0xc
c00036b7:	31 d2                	xor    edx,edx
c00036b9:	55                   	push   ebp
c00036ba:	89 d8                	mov    eax,ebx
c00036bc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036c0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036c4:	52                   	push   edx
c00036c5:	50                   	push   eax
c00036c6:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036ca:	57                   	push   edi
c00036cb:	50                   	push   eax
c00036cc:	e8 63 e5 ff ff       	call   c0001c34 <disk_write>
c00036d1:	83 c4 20             	add    esp,0x20
c00036d4:	85 c0                	test   eax,eax
c00036d6:	75 0a                	jne    c00036e2 <dir_clear+0xde>
c00036d8:	01 eb                	add    ebx,ebp
c00036da:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036de:	39 d8                	cmp    eax,ebx
c00036e0:	77 d2                	ja     c00036b4 <dir_clear+0xb0>
c00036e2:	83 ec 0c             	sub    esp,0xc
c00036e5:	57                   	push   edi
c00036e6:	e8 c7 4d 00 00       	call   c00084b2 <ff_memfree>
c00036eb:	83 c4 10             	add    esp,0x10
c00036ee:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036f2:	39 d8                	cmp    eax,ebx
c00036f4:	0f 95 c0             	setne  al
c00036f7:	0f b6 c0             	movzx  eax,al
c00036fa:	eb 19                	jmp    c0003715 <dir_clear+0x111>
c00036fc:	b8 01 00 00 00       	mov    eax,0x1
c0003701:	eb 12                	jmp    c0003715 <dir_clear+0x111>
c0003703:	89 d9                	mov    ecx,ebx
c0003705:	31 d2                	xor    edx,edx
c0003707:	c1 eb 09             	shr    ebx,0x9
c000370a:	e8 ee e5 ff ff       	call   c0001cfd <mem_set>
c000370f:	89 dd                	mov    ebp,ebx
c0003711:	31 db                	xor    ebx,ebx
c0003713:	eb c5                	jmp    c00036da <dir_clear+0xd6>
c0003715:	83 c4 1c             	add    esp,0x1c
c0003718:	5b                   	pop    ebx
c0003719:	5e                   	pop    esi
c000371a:	5f                   	pop    edi
c000371b:	5d                   	pop    ebp
c000371c:	c3                   	ret    

c000371d <dir_next>:
c000371d:	55                   	push   ebp
c000371e:	57                   	push   edi
c000371f:	56                   	push   esi
c0003720:	53                   	push   ebx
c0003721:	89 c3                	mov    ebx,eax
c0003723:	83 ec 1c             	sub    esp,0x1c
c0003726:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003728:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000372c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000372f:	8d 78 20             	lea    edi,[eax+0x20]
c0003732:	31 c0                	xor    eax,eax
c0003734:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003738:	0f 94 c0             	sete   al
c000373b:	48                   	dec    eax
c000373c:	25 00 00 20 f0       	and    eax,0xf0200000
c0003741:	05 00 00 00 10       	add    eax,0x10000000
c0003746:	39 f8                	cmp    eax,edi
c0003748:	77 0e                	ja     c0003758 <dir_next+0x3b>
c000374a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003751:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003758:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000375b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000375e:	b8 04 00 00 00       	mov    eax,0x4
c0003763:	89 ce                	mov    esi,ecx
c0003765:	09 d6                	or     esi,edx
c0003767:	0f 84 da 00 00 00    	je     c0003847 <dir_next+0x12a>
c000376d:	89 f8                	mov    eax,edi
c000376f:	25 ff 01 00 00       	and    eax,0x1ff
c0003774:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003778:	0f 85 b9 00 00 00    	jne    c0003837 <dir_next+0x11a>
c000377e:	83 c2 01             	add    edx,0x1
c0003781:	83 d1 00             	adc    ecx,0x0
c0003784:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003787:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000378a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000378d:	85 d2                	test   edx,edx
c000378f:	75 29                	jne    c00037ba <dir_next+0x9d>
c0003791:	89 fa                	mov    edx,edi
c0003793:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003797:	c1 ea 05             	shr    edx,0x5
c000379a:	39 c2                	cmp    edx,eax
c000379c:	0f 82 95 00 00 00    	jb     c0003837 <dir_next+0x11a>
c00037a2:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037a9:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037b0:	b8 04 00 00 00       	mov    eax,0x4
c00037b5:	e9 8d 00 00 00       	jmp    c0003847 <dir_next+0x12a>
c00037ba:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037be:	89 f9                	mov    ecx,edi
c00037c0:	48                   	dec    eax
c00037c1:	c1 e9 09             	shr    ecx,0x9
c00037c4:	85 c8                	test   eax,ecx
c00037c6:	75 6f                	jne    c0003837 <dir_next+0x11a>
c00037c8:	89 d8                	mov    eax,ebx
c00037ca:	e8 00 f8 ff ff       	call   c0002fcf <get_fat>
c00037cf:	89 c6                	mov    esi,eax
c00037d1:	83 f8 01             	cmp    eax,0x1
c00037d4:	77 07                	ja     c00037dd <dir_next+0xc0>
c00037d6:	b8 02 00 00 00       	mov    eax,0x2
c00037db:	eb 6a                	jmp    c0003847 <dir_next+0x12a>
c00037dd:	83 f8 ff             	cmp    eax,0xffffffff
c00037e0:	75 07                	jne    c00037e9 <dir_next+0xcc>
c00037e2:	b8 01 00 00 00       	mov    eax,0x1
c00037e7:	eb 5e                	jmp    c0003847 <dir_next+0x12a>
c00037e9:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037ec:	77 37                	ja     c0003825 <dir_next+0x108>
c00037ee:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037f3:	74 ad                	je     c00037a2 <dir_next+0x85>
c00037f5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037f8:	89 d8                	mov    eax,ebx
c00037fa:	e8 be fa ff ff       	call   c00032bd <create_chain>
c00037ff:	89 c6                	mov    esi,eax
c0003801:	b8 07 00 00 00       	mov    eax,0x7
c0003806:	85 f6                	test   esi,esi
c0003808:	74 3d                	je     c0003847 <dir_next+0x12a>
c000380a:	83 fe 01             	cmp    esi,0x1
c000380d:	74 c7                	je     c00037d6 <dir_next+0xb9>
c000380f:	83 fe ff             	cmp    esi,0xffffffff
c0003812:	74 ce                	je     c00037e2 <dir_next+0xc5>
c0003814:	89 f2                	mov    edx,esi
c0003816:	89 e8                	mov    eax,ebp
c0003818:	e8 e7 fd ff ff       	call   c0003604 <dir_clear>
c000381d:	85 c0                	test   eax,eax
c000381f:	75 c1                	jne    c00037e2 <dir_next+0xc5>
c0003821:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003825:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003828:	89 f2                	mov    edx,esi
c000382a:	89 e8                	mov    eax,ebp
c000382c:	e8 d1 e6 ff ff       	call   c0001f02 <clst2sect>
c0003831:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003834:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003837:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000383b:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c000383e:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003842:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003845:	31 c0                	xor    eax,eax
c0003847:	83 c4 1c             	add    esp,0x1c
c000384a:	5b                   	pop    ebx
c000384b:	5e                   	pop    esi
c000384c:	5f                   	pop    edi
c000384d:	5d                   	pop    ebp
c000384e:	c3                   	ret    

c000384f <load_xdir>:
c000384f:	55                   	push   ebp
c0003850:	57                   	push   edi
c0003851:	56                   	push   esi
c0003852:	89 c6                	mov    esi,eax
c0003854:	53                   	push   ebx
c0003855:	83 ec 1c             	sub    esp,0x1c
c0003858:	8b 00                	mov    eax,DWORD PTR [eax]
c000385a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000385d:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003860:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003863:	e8 df eb ff ff       	call   c0002447 <move_window>
c0003868:	89 c3                	mov    ebx,eax
c000386a:	85 c0                	test   eax,eax
c000386c:	0f 85 0c 01 00 00    	jne    c000397e <load_xdir+0x12f>
c0003872:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003875:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003878:	0f 85 fb 00 00 00    	jne    c0003979 <load_xdir+0x12a>
c000387e:	89 f8                	mov    eax,edi
c0003880:	b9 20 00 00 00       	mov    ecx,0x20
c0003885:	e8 5e e4 ff ff       	call   c0001ce8 <mem_cpy>
c000388a:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000388e:	40                   	inc    eax
c000388f:	c1 e0 05             	shl    eax,0x5
c0003892:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003896:	83 e8 60             	sub    eax,0x60
c0003899:	3d 00 02 00 00       	cmp    eax,0x200
c000389e:	0f 87 d5 00 00 00    	ja     c0003979 <load_xdir+0x12a>
c00038a4:	31 d2                	xor    edx,edx
c00038a6:	89 f0                	mov    eax,esi
c00038a8:	e8 70 fe ff ff       	call   c000371d <dir_next>
c00038ad:	89 c3                	mov    ebx,eax
c00038af:	83 f8 04             	cmp    eax,0x4
c00038b2:	0f 84 c1 00 00 00    	je     c0003979 <load_xdir+0x12a>
c00038b8:	85 c0                	test   eax,eax
c00038ba:	0f 85 be 00 00 00    	jne    c000397e <load_xdir+0x12f>
c00038c0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038c3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038c6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038c8:	e8 7a eb ff ff       	call   c0002447 <move_window>
c00038cd:	89 c3                	mov    ebx,eax
c00038cf:	85 c0                	test   eax,eax
c00038d1:	0f 85 a7 00 00 00    	jne    c000397e <load_xdir+0x12f>
c00038d7:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038da:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038dd:	0f 85 96 00 00 00    	jne    c0003979 <load_xdir+0x12a>
c00038e3:	8d 47 20             	lea    eax,[edi+0x20]
c00038e6:	b9 20 00 00 00       	mov    ecx,0x20
c00038eb:	e8 f8 e3 ff ff       	call   c0001ce8 <mem_cpy>
c00038f0:	31 d2                	xor    edx,edx
c00038f2:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038f6:	b9 0f 00 00 00       	mov    ecx,0xf
c00038fb:	83 c0 2c             	add    eax,0x2c
c00038fe:	f7 f1                	div    ecx
c0003900:	c1 e0 05             	shl    eax,0x5
c0003903:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003907:	77 70                	ja     c0003979 <load_xdir+0x12a>
c0003909:	bd 40 00 00 00       	mov    ebp,0x40
c000390e:	31 d2                	xor    edx,edx
c0003910:	89 f0                	mov    eax,esi
c0003912:	e8 06 fe ff ff       	call   c000371d <dir_next>
c0003917:	89 c3                	mov    ebx,eax
c0003919:	83 f8 04             	cmp    eax,0x4
c000391c:	74 5b                	je     c0003979 <load_xdir+0x12a>
c000391e:	85 c0                	test   eax,eax
c0003920:	75 5c                	jne    c000397e <load_xdir+0x12f>
c0003922:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003925:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003928:	8b 06                	mov    eax,DWORD PTR [esi]
c000392a:	e8 18 eb ff ff       	call   c0002447 <move_window>
c000392f:	89 c3                	mov    ebx,eax
c0003931:	85 c0                	test   eax,eax
c0003933:	75 49                	jne    c000397e <load_xdir+0x12f>
c0003935:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003938:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000393b:	75 3c                	jne    c0003979 <load_xdir+0x12a>
c000393d:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003943:	77 0d                	ja     c0003952 <load_xdir+0x103>
c0003945:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003948:	b9 20 00 00 00       	mov    ecx,0x20
c000394d:	e8 96 e3 ff ff       	call   c0001ce8 <mem_cpy>
c0003952:	83 c5 20             	add    ebp,0x20
c0003955:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003959:	77 b3                	ja     c000390e <load_xdir+0xbf>
c000395b:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003961:	77 1b                	ja     c000397e <load_xdir+0x12f>
c0003963:	89 f8                	mov    eax,edi
c0003965:	e8 cd e7 ff ff       	call   c0002137 <xdir_sum>
c000396a:	89 c1                	mov    ecx,eax
c000396c:	8d 47 02             	lea    eax,[edi+0x2]
c000396f:	e8 f5 e2 ff ff       	call   c0001c69 <ld_word>
c0003974:	66 39 c1             	cmp    cx,ax
c0003977:	74 05                	je     c000397e <load_xdir+0x12f>
c0003979:	bb 02 00 00 00       	mov    ebx,0x2
c000397e:	83 c4 1c             	add    esp,0x1c
c0003981:	89 d8                	mov    eax,ebx
c0003983:	5b                   	pop    ebx
c0003984:	5e                   	pop    esi
c0003985:	5f                   	pop    edi
c0003986:	5d                   	pop    ebp
c0003987:	c3                   	ret    

c0003988 <load_obj_xdir>:
c0003988:	53                   	push   ebx
c0003989:	89 c3                	mov    ebx,eax
c000398b:	83 ec 08             	sub    esp,0x8
c000398e:	8b 02                	mov    eax,DWORD PTR [edx]
c0003990:	89 03                	mov    DWORD PTR [ebx],eax
c0003992:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003995:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003998:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000399b:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000399e:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00039a1:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039a8:	30 c0                	xor    al,al
c00039aa:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039b1:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039b4:	89 d8                	mov    eax,ebx
c00039b6:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039b9:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039bc:	e8 04 f8 ff ff       	call   c00031c5 <dir_sdi>
c00039c1:	85 c0                	test   eax,eax
c00039c3:	75 0b                	jne    c00039d0 <load_obj_xdir+0x48>
c00039c5:	89 d8                	mov    eax,ebx
c00039c7:	83 c4 08             	add    esp,0x8
c00039ca:	5b                   	pop    ebx
c00039cb:	e9 7f fe ff ff       	jmp    c000384f <load_xdir>
c00039d0:	83 c4 08             	add    esp,0x8
c00039d3:	5b                   	pop    ebx
c00039d4:	c3                   	ret    

c00039d5 <dir_read>:
c00039d5:	55                   	push   ebp
c00039d6:	bd 04 00 00 00       	mov    ebp,0x4
c00039db:	57                   	push   edi
c00039dc:	56                   	push   esi
c00039dd:	be ff ff ff ff       	mov    esi,0xffffffff
c00039e2:	53                   	push   ebx
c00039e3:	89 c3                	mov    ebx,eax
c00039e5:	83 ec 1c             	sub    esp,0x1c
c00039e8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039ec:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ee:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039f3:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039f6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039f9:	89 c8                	mov    eax,ecx
c00039fb:	09 d0                	or     eax,edx
c00039fd:	0f 84 25 01 00 00    	je     c0003b28 <dir_read+0x153>
c0003a03:	89 f8                	mov    eax,edi
c0003a05:	e8 3d ea ff ff       	call   c0002447 <move_window>
c0003a0a:	89 c5                	mov    ebp,eax
c0003a0c:	85 c0                	test   eax,eax
c0003a0e:	0f 85 23 01 00 00    	jne    c0003b37 <dir_read+0x162>
c0003a14:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a17:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a19:	84 c9                	test   cl,cl
c0003a1b:	0f 84 11 01 00 00    	je     c0003b32 <dir_read+0x15d>
c0003a21:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a24:	75 48                	jne    c0003a6e <dir_read+0x99>
c0003a26:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a2b:	74 10                	je     c0003a3d <dir_read+0x68>
c0003a2d:	80 f9 83             	cmp    cl,0x83
c0003a30:	0f 85 dd 00 00 00    	jne    c0003b13 <dir_read+0x13e>
c0003a36:	31 ed                	xor    ebp,ebp
c0003a38:	e9 08 01 00 00       	jmp    c0003b45 <dir_read+0x170>
c0003a3d:	80 f9 85             	cmp    cl,0x85
c0003a40:	0f 85 cd 00 00 00    	jne    c0003b13 <dir_read+0x13e>
c0003a46:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a49:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a4c:	89 d8                	mov    eax,ebx
c0003a4e:	e8 fc fd ff ff       	call   c000384f <load_xdir>
c0003a53:	89 c5                	mov    ebp,eax
c0003a55:	85 c0                	test   eax,eax
c0003a57:	0f 85 da 00 00 00    	jne    c0003b37 <dir_read+0x162>
c0003a5d:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a60:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a63:	83 e0 3f             	and    eax,0x3f
c0003a66:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a69:	e9 d7 00 00 00       	jmp    c0003b45 <dir_read+0x170>
c0003a6e:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a71:	83 e0 3f             	and    eax,0x3f
c0003a74:	80 f9 2e             	cmp    cl,0x2e
c0003a77:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a7b:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a7e:	0f 84 8a 00 00 00    	je     c0003b0e <dir_read+0x139>
c0003a84:	80 f9 e5             	cmp    cl,0xe5
c0003a87:	0f 84 81 00 00 00    	je     c0003b0e <dir_read+0x139>
c0003a8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a91:	83 e0 1f             	and    eax,0x1f
c0003a94:	83 f8 08             	cmp    eax,0x8
c0003a97:	0f 94 c0             	sete   al
c0003a9a:	0f b6 c0             	movzx  eax,al
c0003a9d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003aa1:	75 6b                	jne    c0003b0e <dir_read+0x139>
c0003aa3:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aa8:	75 44                	jne    c0003aee <dir_read+0x119>
c0003aaa:	f6 c1 40             	test   cl,0x40
c0003aad:	74 12                	je     c0003ac1 <dir_read+0xec>
c0003aaf:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003ab2:	83 e1 bf             	and    ecx,0xffffffbf
c0003ab5:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ab9:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003abc:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003abf:	eb 06                	jmp    c0003ac7 <dir_read+0xf2>
c0003ac1:	89 f0                	mov    eax,esi
c0003ac3:	38 c8                	cmp    al,cl
c0003ac5:	75 47                	jne    c0003b0e <dir_read+0x139>
c0003ac7:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003acb:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad0:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003ad3:	75 3e                	jne    c0003b13 <dir_read+0x13e>
c0003ad5:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ad9:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003adc:	e8 8a e4 ff ff       	call   c0001f6b <pick_lfn>
c0003ae1:	85 c0                	test   eax,eax
c0003ae3:	74 2e                	je     c0003b13 <dir_read+0x13e>
c0003ae5:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ae9:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aec:	eb 25                	jmp    c0003b13 <dir_read+0x13e>
c0003aee:	89 f0                	mov    eax,esi
c0003af0:	84 c0                	test   al,al
c0003af2:	75 11                	jne    c0003b05 <dir_read+0x130>
c0003af4:	89 d0                	mov    eax,edx
c0003af6:	e8 2a e6 ff ff       	call   c0002125 <sum_sfn>
c0003afb:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003aff:	0f 84 31 ff ff ff    	je     c0003a36 <dir_read+0x61>
c0003b05:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b0c:	eb 37                	jmp    c0003b45 <dir_read+0x170>
c0003b0e:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b13:	31 d2                	xor    edx,edx
c0003b15:	89 d8                	mov    eax,ebx
c0003b17:	e8 01 fc ff ff       	call   c000371d <dir_next>
c0003b1c:	89 c5                	mov    ebp,eax
c0003b1e:	85 c0                	test   eax,eax
c0003b20:	0f 84 cd fe ff ff    	je     c00039f3 <dir_read+0x1e>
c0003b26:	eb 0f                	jmp    c0003b37 <dir_read+0x162>
c0003b28:	85 ed                	test   ebp,ebp
c0003b2a:	0f 84 06 ff ff ff    	je     c0003a36 <dir_read+0x61>
c0003b30:	eb 05                	jmp    c0003b37 <dir_read+0x162>
c0003b32:	bd 04 00 00 00       	mov    ebp,0x4
c0003b37:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b3e:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b45:	83 c4 1c             	add    esp,0x1c
c0003b48:	89 e8                	mov    eax,ebp
c0003b4a:	5b                   	pop    ebx
c0003b4b:	5e                   	pop    esi
c0003b4c:	5f                   	pop    edi
c0003b4d:	5d                   	pop    ebp
c0003b4e:	c3                   	ret    

c0003b4f <dir_alloc>:
c0003b4f:	55                   	push   ebp
c0003b50:	89 d5                	mov    ebp,edx
c0003b52:	57                   	push   edi
c0003b53:	31 d2                	xor    edx,edx
c0003b55:	56                   	push   esi
c0003b56:	53                   	push   ebx
c0003b57:	89 c3                	mov    ebx,eax
c0003b59:	83 ec 0c             	sub    esp,0xc
c0003b5c:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b5e:	e8 62 f6 ff ff       	call   c00031c5 <dir_sdi>
c0003b63:	85 c0                	test   eax,eax
c0003b65:	75 4e                	jne    c0003bb5 <dir_alloc+0x66>
c0003b67:	31 f6                	xor    esi,esi
c0003b69:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b6c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b6f:	89 f8                	mov    eax,edi
c0003b71:	e8 d1 e8 ff ff       	call   c0002447 <move_window>
c0003b76:	85 c0                	test   eax,eax
c0003b78:	75 3b                	jne    c0003bb5 <dir_alloc+0x66>
c0003b7a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b7d:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b80:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b82:	75 07                	jne    c0003b8b <dir_alloc+0x3c>
c0003b84:	f7 d2                	not    edx
c0003b86:	c0 ea 07             	shr    dl,0x7
c0003b89:	eb 0d                	jmp    c0003b98 <dir_alloc+0x49>
c0003b8b:	84 d2                	test   dl,dl
c0003b8d:	0f 94 c1             	sete   cl
c0003b90:	80 fa e5             	cmp    dl,0xe5
c0003b93:	0f 94 c2             	sete   dl
c0003b96:	09 ca                	or     edx,ecx
c0003b98:	84 d2                	test   dl,dl
c0003b9a:	74 07                	je     c0003ba3 <dir_alloc+0x54>
c0003b9c:	46                   	inc    esi
c0003b9d:	39 ee                	cmp    esi,ebp
c0003b9f:	75 04                	jne    c0003ba5 <dir_alloc+0x56>
c0003ba1:	eb 1c                	jmp    c0003bbf <dir_alloc+0x70>
c0003ba3:	31 f6                	xor    esi,esi
c0003ba5:	ba 01 00 00 00       	mov    edx,0x1
c0003baa:	89 d8                	mov    eax,ebx
c0003bac:	e8 6c fb ff ff       	call   c000371d <dir_next>
c0003bb1:	85 c0                	test   eax,eax
c0003bb3:	74 b4                	je     c0003b69 <dir_alloc+0x1a>
c0003bb5:	83 f8 04             	cmp    eax,0x4
c0003bb8:	75 05                	jne    c0003bbf <dir_alloc+0x70>
c0003bba:	b8 07 00 00 00       	mov    eax,0x7
c0003bbf:	83 c4 0c             	add    esp,0xc
c0003bc2:	5b                   	pop    ebx
c0003bc3:	5e                   	pop    esi
c0003bc4:	5f                   	pop    edi
c0003bc5:	5d                   	pop    ebp
c0003bc6:	c3                   	ret    

c0003bc7 <store_xdir>:
c0003bc7:	55                   	push   ebp
c0003bc8:	57                   	push   edi
c0003bc9:	89 c7                	mov    edi,eax
c0003bcb:	56                   	push   esi
c0003bcc:	53                   	push   ebx
c0003bcd:	83 ec 0c             	sub    esp,0xc
c0003bd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bd2:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bd5:	89 e8                	mov    eax,ebp
c0003bd7:	e8 5b e5 ff ff       	call   c0002137 <xdir_sum>
c0003bdc:	0f b7 d0             	movzx  edx,ax
c0003bdf:	8d 45 02             	lea    eax,[ebp+0x2]
c0003be2:	e8 f4 e0 ff ff       	call   c0001cdb <st_word>
c0003be7:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003beb:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bee:	89 f8                	mov    eax,edi
c0003bf0:	e8 d0 f5 ff ff       	call   c00031c5 <dir_sdi>
c0003bf5:	89 c6                	mov    esi,eax
c0003bf7:	85 f6                	test   esi,esi
c0003bf9:	75 3d                	jne    c0003c38 <store_xdir+0x71>
c0003bfb:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bfe:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003c01:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c03:	e8 3f e8 ff ff       	call   c0002447 <move_window>
c0003c08:	89 c6                	mov    esi,eax
c0003c0a:	85 c0                	test   eax,eax
c0003c0c:	75 2a                	jne    c0003c38 <store_xdir+0x71>
c0003c0e:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c11:	b9 20 00 00 00       	mov    ecx,0x20
c0003c16:	89 ea                	mov    edx,ebp
c0003c18:	e8 cb e0 ff ff       	call   c0001ce8 <mem_cpy>
c0003c1d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c1f:	85 db                	test   ebx,ebx
c0003c21:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c25:	74 11                	je     c0003c38 <store_xdir+0x71>
c0003c27:	31 d2                	xor    edx,edx
c0003c29:	89 f8                	mov    eax,edi
c0003c2b:	83 c5 20             	add    ebp,0x20
c0003c2e:	e8 ea fa ff ff       	call   c000371d <dir_next>
c0003c33:	4b                   	dec    ebx
c0003c34:	89 c6                	mov    esi,eax
c0003c36:	eb bf                	jmp    c0003bf7 <store_xdir+0x30>
c0003c38:	89 f0                	mov    eax,esi
c0003c3a:	83 fe 02             	cmp    esi,0x2
c0003c3d:	76 05                	jbe    c0003c44 <store_xdir+0x7d>
c0003c3f:	b8 02 00 00 00       	mov    eax,0x2
c0003c44:	83 c4 0c             	add    esp,0xc
c0003c47:	5b                   	pop    ebx
c0003c48:	5e                   	pop    esi
c0003c49:	5f                   	pop    edi
c0003c4a:	5d                   	pop    ebp
c0003c4b:	c3                   	ret    

c0003c4c <dir_remove>:
c0003c4c:	57                   	push   edi
c0003c4d:	56                   	push   esi
c0003c4e:	53                   	push   ebx
c0003c4f:	89 c3                	mov    ebx,eax
c0003c51:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c54:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c56:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c59:	83 fa ff             	cmp    edx,0xffffffff
c0003c5c:	74 09                	je     c0003c67 <dir_remove+0x1b>
c0003c5e:	e8 62 f5 ff ff       	call   c00031c5 <dir_sdi>
c0003c63:	85 c0                	test   eax,eax
c0003c65:	75 41                	jne    c0003ca8 <dir_remove+0x5c>
c0003c67:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c6a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c6d:	89 f0                	mov    eax,esi
c0003c6f:	e8 d3 e7 ff ff       	call   c0002447 <move_window>
c0003c74:	85 c0                	test   eax,eax
c0003c76:	75 26                	jne    c0003c9e <dir_remove+0x52>
c0003c78:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c7b:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c7e:	75 05                	jne    c0003c85 <dir_remove+0x39>
c0003c80:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c83:	eb 03                	jmp    c0003c88 <dir_remove+0x3c>
c0003c85:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c88:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c8c:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c8f:	73 17                	jae    c0003ca8 <dir_remove+0x5c>
c0003c91:	31 d2                	xor    edx,edx
c0003c93:	89 d8                	mov    eax,ebx
c0003c95:	e8 83 fa ff ff       	call   c000371d <dir_next>
c0003c9a:	85 c0                	test   eax,eax
c0003c9c:	74 c9                	je     c0003c67 <dir_remove+0x1b>
c0003c9e:	83 f8 04             	cmp    eax,0x4
c0003ca1:	75 05                	jne    c0003ca8 <dir_remove+0x5c>
c0003ca3:	b8 02 00 00 00       	mov    eax,0x2
c0003ca8:	5b                   	pop    ebx
c0003ca9:	5e                   	pop    esi
c0003caa:	5f                   	pop    edi
c0003cab:	c3                   	ret    

c0003cac <create_name>:
c0003cac:	55                   	push   ebp
c0003cad:	89 d5                	mov    ebp,edx
c0003caf:	57                   	push   edi
c0003cb0:	89 c7                	mov    edi,eax
c0003cb2:	56                   	push   esi
c0003cb3:	31 f6                	xor    esi,esi
c0003cb5:	53                   	push   ebx
c0003cb6:	83 ec 3c             	sub    esp,0x3c
c0003cb9:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cbb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cc1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cc4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cc8:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003ccc:	e8 72 e0 ff ff       	call   c0001d43 <tchar2uni>
c0003cd1:	89 c3                	mov    ebx,eax
c0003cd3:	83 f8 ff             	cmp    eax,0xffffffff
c0003cd6:	75 0a                	jne    c0003ce2 <create_name+0x36>
c0003cd8:	b8 06 00 00 00       	mov    eax,0x6
c0003cdd:	e9 9e 02 00 00       	jmp    c0003f80 <create_name+0x2d4>
c0003ce2:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ce7:	76 0c                	jbe    c0003cf5 <create_name+0x49>
c0003ce9:	c1 e8 10             	shr    eax,0x10
c0003cec:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cf0:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cf4:	46                   	inc    esi
c0003cf5:	66 83 fb 1f          	cmp    bx,0x1f
c0003cf9:	76 4f                	jbe    c0003d4a <create_name+0x9e>
c0003cfb:	66 83 fb 5c          	cmp    bx,0x5c
c0003cff:	74 35                	je     c0003d36 <create_name+0x8a>
c0003d01:	66 83 fb 2f          	cmp    bx,0x2f
c0003d05:	74 2f                	je     c0003d36 <create_name+0x8a>
c0003d07:	66 83 fb 7f          	cmp    bx,0x7f
c0003d0b:	77 11                	ja     c0003d1e <create_name+0x72>
c0003d0d:	0f b7 d3             	movzx  edx,bx
c0003d10:	b8 92 94 02 c0       	mov    eax,0xc0029492
c0003d15:	e8 11 e0 ff ff       	call   c0001d2b <chk_chr>
c0003d1a:	85 c0                	test   eax,eax
c0003d1c:	75 ba                	jne    c0003cd8 <create_name+0x2c>
c0003d1e:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d24:	77 b2                	ja     c0003cd8 <create_name+0x2c>
c0003d26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d2a:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d2e:	46                   	inc    esi
c0003d2f:	eb 97                	jmp    c0003cc8 <create_name+0x1c>
c0003d31:	40                   	inc    eax
c0003d32:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d36:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d3a:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d3c:	80 fa 2f             	cmp    dl,0x2f
c0003d3f:	74 f0                	je     c0003d31 <create_name+0x85>
c0003d41:	80 fa 5c             	cmp    dl,0x5c
c0003d44:	74 eb                	je     c0003d31 <create_name+0x85>
c0003d46:	31 db                	xor    ebx,ebx
c0003d48:	eb 02                	jmp    c0003d4c <create_name+0xa0>
c0003d4a:	b3 04                	mov    bl,0x4
c0003d4c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d50:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d53:	85 f6                	test   esi,esi
c0003d55:	74 18                	je     c0003d6f <create_name+0xc3>
c0003d57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d5b:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d60:	66 83 f8 20          	cmp    ax,0x20
c0003d64:	74 06                	je     c0003d6c <create_name+0xc0>
c0003d66:	66 83 f8 2e          	cmp    ax,0x2e
c0003d6a:	75 03                	jne    c0003d6f <create_name+0xc3>
c0003d6c:	4e                   	dec    esi
c0003d6d:	eb e4                	jmp    c0003d53 <create_name+0xa7>
c0003d6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d73:	31 ed                	xor    ebp,ebp
c0003d75:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d7b:	85 f6                	test   esi,esi
c0003d7d:	0f 84 55 ff ff ff    	je     c0003cd8 <create_name+0x2c>
c0003d83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d87:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d8a:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d8e:	66 83 f8 20          	cmp    ax,0x20
c0003d92:	75 04                	jne    c0003d98 <create_name+0xec>
c0003d94:	89 d5                	mov    ebp,edx
c0003d96:	eb eb                	jmp    c0003d83 <create_name+0xd7>
c0003d98:	85 ed                	test   ebp,ebp
c0003d9a:	75 06                	jne    c0003da2 <create_name+0xf6>
c0003d9c:	66 83 f8 2e          	cmp    ax,0x2e
c0003da0:	75 08                	jne    c0003daa <create_name+0xfe>
c0003da2:	83 cb 03             	or     ebx,0x3
c0003da5:	eb 03                	jmp    c0003daa <create_name+0xfe>
c0003da7:	4e                   	dec    esi
c0003da8:	74 0c                	je     c0003db6 <create_name+0x10a>
c0003daa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dae:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003db4:	75 f1                	jne    c0003da7 <create_name+0xfb>
c0003db6:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dbb:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003dbe:	ba 20 00 00 00       	mov    edx,0x20
c0003dc3:	e8 35 df ff ff       	call   c0001cfd <mem_set>
c0003dc8:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dd0:	31 c9                	xor    ecx,ecx
c0003dd2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dd7:	8d 45 01             	lea    eax,[ebp+0x1]
c0003dda:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003de2:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003de6:	66 85 ed             	test   bp,bp
c0003de9:	0f 84 30 01 00 00    	je     c0003f1f <create_name+0x273>
c0003def:	66 83 fd 20          	cmp    bp,0x20
c0003df3:	74 10                	je     c0003e05 <create_name+0x159>
c0003df5:	66 83 fd 2e          	cmp    bp,0x2e
c0003df9:	75 13                	jne    c0003e0e <create_name+0x162>
c0003dfb:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dff:	0f 84 6b 01 00 00    	je     c0003f70 <create_name+0x2c4>
c0003e05:	83 cb 03             	or     ebx,0x3
c0003e08:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e0c:	eb c9                	jmp    c0003dd7 <create_name+0x12b>
c0003e0e:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e12:	73 0b                	jae    c0003e1f <create_name+0x173>
c0003e14:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e18:	75 47                	jne    c0003e61 <create_name+0x1b5>
c0003e1a:	e9 51 01 00 00       	jmp    c0003f70 <create_name+0x2c4>
c0003e1f:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e24:	75 10                	jne    c0003e36 <create_name+0x18a>
c0003e26:	83 cb 03             	or     ebx,0x3
c0003e29:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e31:	e9 e9 00 00 00       	jmp    c0003f1f <create_name+0x273>
c0003e36:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e3a:	74 0d                	je     c0003e49 <create_name+0x19d>
c0003e3c:	83 cb 03             	or     ebx,0x3
c0003e3f:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e43:	0f 87 d6 00 00 00    	ja     c0003f1f <create_name+0x273>
c0003e49:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e4e:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e52:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e5a:	b9 08 00 00 00       	mov    ecx,0x8
c0003e5f:	eb a7                	jmp    c0003e08 <create_name+0x15c>
c0003e61:	66 83 fd 7f          	cmp    bp,0x7f
c0003e65:	76 68                	jbe    c0003ecf <create_name+0x223>
c0003e67:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e6b:	88 da                	mov    dl,bl
c0003e6d:	83 ca 02             	or     edx,0x2
c0003e70:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e74:	50                   	push   eax
c0003e75:	50                   	push   eax
c0003e76:	68 b5 01 00 00       	push   0x1b5
c0003e7b:	55                   	push   ebp
c0003e7c:	e8 48 46 00 00       	call   c00084c9 <ff_uni2oem>
c0003e81:	83 c4 10             	add    esp,0x10
c0003e84:	89 c5                	mov    ebp,eax
c0003e86:	a8 80                	test   al,0x80
c0003e88:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e8c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e90:	74 0c                	je     c0003e9e <create_name+0x1f2>
c0003e92:	83 e5 7f             	and    ebp,0x7f
c0003e95:	0f b6 ad e0 93 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6c20]
c0003e9c:	eb 2a                	jmp    c0003ec8 <create_name+0x21c>
c0003e9e:	66 3d ff 00          	cmp    ax,0xff
c0003ea2:	76 24                	jbe    c0003ec8 <create_name+0x21c>
c0003ea4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea8:	48                   	dec    eax
c0003ea9:	39 c8                	cmp    eax,ecx
c0003eab:	77 0c                	ja     c0003eb9 <create_name+0x20d>
c0003ead:	83 cb 03             	or     ebx,0x3
c0003eb0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eb4:	e9 4f ff ff ff       	jmp    c0003e08 <create_name+0x15c>
c0003eb9:	89 e8                	mov    eax,ebp
c0003ebb:	88 d3                	mov    bl,dl
c0003ebd:	66 c1 e8 08          	shr    ax,0x8
c0003ec1:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ec5:	41                   	inc    ecx
c0003ec6:	eb 4b                	jmp    c0003f13 <create_name+0x267>
c0003ec8:	88 d3                	mov    bl,dl
c0003eca:	66 85 ed             	test   bp,bp
c0003ecd:	74 19                	je     c0003ee8 <create_name+0x23c>
c0003ecf:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ed3:	0f b7 d5             	movzx  edx,bp
c0003ed6:	b8 9b 94 02 c0       	mov    eax,0xc002949b
c0003edb:	e8 4b de ff ff       	call   c0001d2b <chk_chr>
c0003ee0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ee4:	85 c0                	test   eax,eax
c0003ee6:	74 0a                	je     c0003ef2 <create_name+0x246>
c0003ee8:	83 cb 03             	or     ebx,0x3
c0003eeb:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ef0:	eb 21                	jmp    c0003f13 <create_name+0x267>
c0003ef2:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003ef5:	66 83 f8 19          	cmp    ax,0x19
c0003ef9:	77 07                	ja     c0003f02 <create_name+0x256>
c0003efb:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003f00:	eb 11                	jmp    c0003f13 <create_name+0x267>
c0003f02:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003f05:	66 83 f8 19          	cmp    ax,0x19
c0003f09:	77 08                	ja     c0003f13 <create_name+0x267>
c0003f0b:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f10:	83 ed 20             	sub    ebp,0x20
c0003f13:	89 e8                	mov    eax,ebp
c0003f15:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f19:	41                   	inc    ecx
c0003f1a:	e9 e9 fe ff ff       	jmp    c0003e08 <create_name+0x15c>
c0003f1f:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f23:	75 04                	jne    c0003f29 <create_name+0x27d>
c0003f25:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f29:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f2e:	75 05                	jne    c0003f35 <create_name+0x289>
c0003f30:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f35:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f39:	83 e0 0c             	and    eax,0xc
c0003f3c:	3c 0c                	cmp    al,0xc
c0003f3e:	74 0b                	je     c0003f4b <create_name+0x29f>
c0003f40:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f44:	83 e0 03             	and    eax,0x3
c0003f47:	3c 03                	cmp    al,0x3
c0003f49:	75 05                	jne    c0003f50 <create_name+0x2a4>
c0003f4b:	83 cb 02             	or     ebx,0x2
c0003f4e:	eb 19                	jmp    c0003f69 <create_name+0x2bd>
c0003f50:	f6 c3 02             	test   bl,0x2
c0003f53:	75 14                	jne    c0003f69 <create_name+0x2bd>
c0003f55:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f5a:	74 03                	je     c0003f5f <create_name+0x2b3>
c0003f5c:	83 cb 10             	or     ebx,0x10
c0003f5f:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f64:	74 03                	je     c0003f69 <create_name+0x2bd>
c0003f66:	83 cb 08             	or     ebx,0x8
c0003f69:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f6c:	31 c0                	xor    eax,eax
c0003f6e:	eb 10                	jmp    c0003f80 <create_name+0x2d4>
c0003f70:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f75:	0f 85 ce fe ff ff    	jne    c0003e49 <create_name+0x19d>
c0003f7b:	e9 a6 fe ff ff       	jmp    c0003e26 <create_name+0x17a>
c0003f80:	83 c4 3c             	add    esp,0x3c
c0003f83:	5b                   	pop    ebx
c0003f84:	5e                   	pop    esi
c0003f85:	5f                   	pop    edi
c0003f86:	5d                   	pop    ebp
c0003f87:	c3                   	ret    

c0003f88 <xname_sum>:
c0003f88:	56                   	push   esi
c0003f89:	53                   	push   ebx
c0003f8a:	89 c6                	mov    esi,eax
c0003f8c:	51                   	push   ecx
c0003f8d:	31 db                	xor    ebx,ebx
c0003f8f:	83 c6 02             	add    esi,0x2
c0003f92:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f96:	66 85 c0             	test   ax,ax
c0003f99:	74 1f                	je     c0003fba <xname_sum+0x32>
c0003f9b:	83 ec 0c             	sub    esp,0xc
c0003f9e:	66 d1 cb             	ror    bx,1
c0003fa1:	50                   	push   eax
c0003fa2:	e8 1e 46 00 00       	call   c00085c5 <ff_wtoupper>
c0003fa7:	83 c4 10             	add    esp,0x10
c0003faa:	0f b6 d0             	movzx  edx,al
c0003fad:	66 c1 e8 08          	shr    ax,0x8
c0003fb1:	01 d3                	add    ebx,edx
c0003fb3:	66 d1 cb             	ror    bx,1
c0003fb6:	01 c3                	add    ebx,eax
c0003fb8:	eb d5                	jmp    c0003f8f <xname_sum+0x7>
c0003fba:	89 d8                	mov    eax,ebx
c0003fbc:	5a                   	pop    edx
c0003fbd:	5b                   	pop    ebx
c0003fbe:	5e                   	pop    esi
c0003fbf:	c3                   	ret    

c0003fc0 <create_xdir>:
c0003fc0:	55                   	push   ebp
c0003fc1:	b9 40 00 00 00       	mov    ecx,0x40
c0003fc6:	57                   	push   edi
c0003fc7:	bd 01 00 00 00       	mov    ebp,0x1
c0003fcc:	56                   	push   esi
c0003fcd:	31 ff                	xor    edi,edi
c0003fcf:	53                   	push   ebx
c0003fd0:	be 40 00 00 00       	mov    esi,0x40
c0003fd5:	89 c3                	mov    ebx,eax
c0003fd7:	83 ec 1c             	sub    esp,0x1c
c0003fda:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fde:	31 d2                	xor    edx,edx
c0003fe0:	e8 18 dd ff ff       	call   c0001cfd <mem_set>
c0003fe5:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fe8:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fec:	31 c9                	xor    ecx,ecx
c0003fee:	8d 46 01             	lea    eax,[esi+0x1]
c0003ff1:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003ff5:	83 c6 02             	add    esi,0x2
c0003ff8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ffc:	66 85 ed             	test   bp,bp
c0003fff:	74 12                	je     c0004013 <create_xdir+0x53>
c0004001:	0f b6 c1             	movzx  eax,cl
c0004004:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004008:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c000400c:	66 83 fd 01          	cmp    bp,0x1
c0004010:	80 d9 ff             	sbb    cl,0xff
c0004013:	8d 04 33             	lea    eax,[ebx+esi*1]
c0004016:	0f b7 d5             	movzx  edx,bp
c0004019:	83 c6 02             	add    esi,0x2
c000401c:	e8 ba dc ff ff       	call   c0001cdb <st_word>
c0004021:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0004027:	75 d3                	jne    c0003ffc <create_xdir+0x3c>
c0004029:	8d 47 01             	lea    eax,[edi+0x1]
c000402c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004030:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0004034:	0f b6 c1             	movzx  eax,cl
c0004037:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c000403c:	74 07                	je     c0004045 <create_xdir+0x85>
c000403e:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004043:	eb a9                	jmp    c0003fee <create_xdir+0x2e>
c0004045:	8d 47 02             	lea    eax,[edi+0x2]
c0004048:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c000404b:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000404e:	89 d0                	mov    eax,edx
c0004050:	e8 33 ff ff ff       	call   c0003f88 <xname_sum>
c0004055:	83 c4 1c             	add    esp,0x1c
c0004058:	0f b7 d0             	movzx  edx,ax
c000405b:	8d 43 24             	lea    eax,[ebx+0x24]
c000405e:	5b                   	pop    ebx
c000405f:	5e                   	pop    esi
c0004060:	5f                   	pop    edi
c0004061:	5d                   	pop    ebp
c0004062:	e9 74 dc ff ff       	jmp    c0001cdb <st_word>

c0004067 <cmp_lfn>:
c0004067:	55                   	push   ebp
c0004068:	57                   	push   edi
c0004069:	89 d7                	mov    edi,edx
c000406b:	56                   	push   esi
c000406c:	53                   	push   ebx
c000406d:	83 ec 1c             	sub    esp,0x1c
c0004070:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004074:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004077:	e8 ed db ff ff       	call   c0001c69 <ld_word>
c000407c:	66 85 c0             	test   ax,ax
c000407f:	74 07                	je     c0004088 <cmp_lfn+0x21>
c0004081:	31 c0                	xor    eax,eax
c0004083:	e9 9a 00 00 00       	jmp    c0004122 <cmp_lfn+0xbb>
c0004088:	8a 1f                	mov    bl,BYTE PTR [edi]
c000408a:	bd 01 00 00 00       	mov    ebp,0x1
c000408f:	83 e3 3f             	and    ebx,0x3f
c0004092:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000409a:	4b                   	dec    ebx
c000409b:	6b db 0d             	imul   ebx,ebx,0xd
c000409e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00040a2:	0f b6 80 60 94 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6ba0]
c00040a9:	01 f8                	add    eax,edi
c00040ab:	e8 b9 db ff ff       	call   c0001c69 <ld_word>
c00040b0:	66 85 ed             	test   bp,bp
c00040b3:	89 c6                	mov    esi,eax
c00040b5:	74 3c                	je     c00040f3 <cmp_lfn+0x8c>
c00040b7:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040bd:	77 c2                	ja     c0004081 <cmp_lfn+0x1a>
c00040bf:	83 ec 0c             	sub    esp,0xc
c00040c2:	0f b7 c0             	movzx  eax,ax
c00040c5:	50                   	push   eax
c00040c6:	e8 fa 44 00 00       	call   c00085c5 <ff_wtoupper>
c00040cb:	89 c5                	mov    ebp,eax
c00040cd:	8d 43 01             	lea    eax,[ebx+0x1]
c00040d0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040d8:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040dc:	89 04 24             	mov    DWORD PTR [esp],eax
c00040df:	e8 e1 44 00 00       	call   c00085c5 <ff_wtoupper>
c00040e4:	83 c4 10             	add    esp,0x10
c00040e7:	39 c5                	cmp    ebp,eax
c00040e9:	75 96                	jne    c0004081 <cmp_lfn+0x1a>
c00040eb:	89 f5                	mov    ebp,esi
c00040ed:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040f1:	eb 04                	jmp    c00040f7 <cmp_lfn+0x90>
c00040f3:	66 46                	inc    si
c00040f5:	75 8a                	jne    c0004081 <cmp_lfn+0x1a>
c00040f7:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040fb:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0004100:	75 9c                	jne    c000409e <cmp_lfn+0x37>
c0004102:	f6 07 40             	test   BYTE PTR [edi],0x40
c0004105:	74 16                	je     c000411d <cmp_lfn+0xb6>
c0004107:	66 85 ed             	test   bp,bp
c000410a:	74 11                	je     c000411d <cmp_lfn+0xb6>
c000410c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004110:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0004115:	0f 94 c0             	sete   al
c0004118:	0f b6 c0             	movzx  eax,al
c000411b:	eb 05                	jmp    c0004122 <cmp_lfn+0xbb>
c000411d:	b8 01 00 00 00       	mov    eax,0x1
c0004122:	83 c4 1c             	add    esp,0x1c
c0004125:	5b                   	pop    ebx
c0004126:	5e                   	pop    esi
c0004127:	5f                   	pop    edi
c0004128:	5d                   	pop    ebp
c0004129:	c3                   	ret    

c000412a <dir_find>:
c000412a:	55                   	push   ebp
c000412b:	31 d2                	xor    edx,edx
c000412d:	57                   	push   edi
c000412e:	56                   	push   esi
c000412f:	53                   	push   ebx
c0004130:	89 c3                	mov    ebx,eax
c0004132:	83 ec 1c             	sub    esp,0x1c
c0004135:	8b 30                	mov    esi,DWORD PTR [eax]
c0004137:	e8 89 f0 ff ff       	call   c00031c5 <dir_sdi>
c000413c:	89 04 24             	mov    DWORD PTR [esp],eax
c000413f:	85 c0                	test   eax,eax
c0004141:	0f 85 9e 01 00 00    	jne    c00042e5 <dir_find+0x1bb>
c0004147:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000414a:	0f 85 8d 00 00 00    	jne    c00041dd <dir_find+0xb3>
c0004150:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004153:	e8 30 fe ff ff       	call   c0003f88 <xname_sum>
c0004158:	89 c7                	mov    edi,eax
c000415a:	31 d2                	xor    edx,edx
c000415c:	89 d8                	mov    eax,ebx
c000415e:	e8 72 f8 ff ff       	call   c00039d5 <dir_read>
c0004163:	85 c0                	test   eax,eax
c0004165:	0f 85 5e 01 00 00    	jne    c00042c9 <dir_find+0x19f>
c000416b:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000416e:	8d 41 24             	lea    eax,[ecx+0x24]
c0004171:	e8 f3 da ff ff       	call   c0001c69 <ld_word>
c0004176:	66 39 f8             	cmp    ax,di
c0004179:	75 df                	jne    c000415a <dir_find+0x30>
c000417b:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000417e:	31 ed                	xor    ebp,ebp
c0004180:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004184:	ba 40 00 00 00       	mov    edx,0x40
c0004189:	89 e9                	mov    ecx,ebp
c000418b:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000418f:	0f 84 42 01 00 00    	je     c00042d7 <dir_find+0x1ad>
c0004195:	f6 c2 1f             	test   dl,0x1f
c0004198:	75 03                	jne    c000419d <dir_find+0x73>
c000419a:	83 c2 02             	add    edx,0x2
c000419d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00041a1:	89 d0                	mov    eax,edx
c00041a3:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c00041a6:	e8 be da ff ff       	call   c0001c69 <ld_word>
c00041ab:	83 ec 0c             	sub    esp,0xc
c00041ae:	0f b7 c0             	movzx  eax,ax
c00041b1:	50                   	push   eax
c00041b2:	e8 0e 44 00 00       	call   c00085c5 <ff_wtoupper>
c00041b7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041bb:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041be:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041c2:	89 04 24             	mov    DWORD PTR [esp],eax
c00041c5:	e8 fb 43 00 00       	call   c00085c5 <ff_wtoupper>
c00041ca:	83 c4 10             	add    esp,0x10
c00041cd:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041d1:	75 87                	jne    c000415a <dir_find+0x30>
c00041d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041d7:	45                   	inc    ebp
c00041d8:	83 c2 02             	add    edx,0x2
c00041db:	eb ac                	jmp    c0004189 <dir_find+0x5f>
c00041dd:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041e4:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041e9:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ee:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041f1:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041f4:	89 f0                	mov    eax,esi
c00041f6:	e8 4c e2 ff ff       	call   c0002447 <move_window>
c00041fb:	85 c0                	test   eax,eax
c00041fd:	0f 85 c6 00 00 00    	jne    c00042c9 <dir_find+0x19f>
c0004203:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0004206:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004209:	84 c9                	test   cl,cl
c000420b:	0f 84 bd 00 00 00    	je     c00042ce <dir_find+0x1a4>
c0004211:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0004214:	88 d0                	mov    al,dl
c0004216:	83 e0 3f             	and    eax,0x3f
c0004219:	80 f9 e5             	cmp    cl,0xe5
c000421c:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000421f:	0f 84 87 00 00 00    	je     c00042ac <dir_find+0x182>
c0004225:	80 e2 08             	and    dl,0x8
c0004228:	74 06                	je     c0004230 <dir_find+0x106>
c000422a:	3c 0f                	cmp    al,0xf
c000422c:	75 7e                	jne    c00042ac <dir_find+0x182>
c000422e:	eb 04                	jmp    c0004234 <dir_find+0x10a>
c0004230:	3c 0f                	cmp    al,0xf
c0004232:	75 4c                	jne    c0004280 <dir_find+0x156>
c0004234:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004238:	75 7e                	jne    c00042b8 <dir_find+0x18e>
c000423a:	f6 c1 40             	test   cl,0x40
c000423d:	74 12                	je     c0004251 <dir_find+0x127>
c000423f:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004242:	83 e1 bf             	and    ecx,0xffffffbf
c0004245:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004249:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000424c:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000424f:	eb 06                	jmp    c0004257 <dir_find+0x12d>
c0004251:	89 f8                	mov    eax,edi
c0004253:	38 c8                	cmp    al,cl
c0004255:	75 5c                	jne    c00042b3 <dir_find+0x189>
c0004257:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000425b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004260:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004263:	75 53                	jne    c00042b8 <dir_find+0x18e>
c0004265:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004269:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000426c:	89 ea                	mov    edx,ebp
c000426e:	e8 f4 fd ff ff       	call   c0004067 <cmp_lfn>
c0004273:	85 c0                	test   eax,eax
c0004275:	74 41                	je     c00042b8 <dir_find+0x18e>
c0004277:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000427b:	8d 79 ff             	lea    edi,[ecx-0x1]
c000427e:	eb 38                	jmp    c00042b8 <dir_find+0x18e>
c0004280:	89 f8                	mov    eax,edi
c0004282:	84 c0                	test   al,al
c0004284:	75 0d                	jne    c0004293 <dir_find+0x169>
c0004286:	89 e8                	mov    eax,ebp
c0004288:	e8 98 de ff ff       	call   c0002125 <sum_sfn>
c000428d:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004291:	74 52                	je     c00042e5 <dir_find+0x1bb>
c0004293:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004297:	75 13                	jne    c00042ac <dir_find+0x182>
c0004299:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000429c:	b9 0b 00 00 00       	mov    ecx,0xb
c00042a1:	89 e8                	mov    eax,ebp
c00042a3:	e8 60 da ff ff       	call   c0001d08 <mem_cmp>
c00042a8:	85 c0                	test   eax,eax
c00042aa:	74 39                	je     c00042e5 <dir_find+0x1bb>
c00042ac:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042b3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042b8:	31 d2                	xor    edx,edx
c00042ba:	89 d8                	mov    eax,ebx
c00042bc:	e8 5c f4 ff ff       	call   c000371d <dir_next>
c00042c1:	85 c0                	test   eax,eax
c00042c3:	0f 84 25 ff ff ff    	je     c00041ee <dir_find+0xc4>
c00042c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00042cc:	eb 17                	jmp    c00042e5 <dir_find+0x1bb>
c00042ce:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042d5:	eb 0e                	jmp    c00042e5 <dir_find+0x1bb>
c00042d7:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042da:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042df:	0f 85 75 fe ff ff    	jne    c000415a <dir_find+0x30>
c00042e5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042e8:	83 c4 1c             	add    esp,0x1c
c00042eb:	5b                   	pop    ebx
c00042ec:	5e                   	pop    esi
c00042ed:	5f                   	pop    edi
c00042ee:	5d                   	pop    ebp
c00042ef:	c3                   	ret    

c00042f0 <dir_register>:
c00042f0:	55                   	push   ebp
c00042f1:	57                   	push   edi
c00042f2:	56                   	push   esi
c00042f3:	be 06 00 00 00       	mov    esi,0x6
c00042f8:	53                   	push   ebx
c00042f9:	83 ec 6c             	sub    esp,0x6c
c00042fc:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c0004300:	0f 85 62 02 00 00    	jne    c0004568 <dir_register+0x278>
c0004306:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004308:	31 ff                	xor    edi,edi
c000430a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000430d:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004312:	74 03                	je     c0004317 <dir_register+0x27>
c0004314:	47                   	inc    edi
c0004315:	eb f6                	jmp    c000430d <dir_register+0x1d>
c0004317:	89 c3                	mov    ebx,eax
c0004319:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000431d:	0f 85 e1 00 00 00    	jne    c0004404 <dir_register+0x114>
c0004323:	83 c7 0e             	add    edi,0xe
c0004326:	b9 0f 00 00 00       	mov    ecx,0xf
c000432b:	89 f8                	mov    eax,edi
c000432d:	31 d2                	xor    edx,edx
c000432f:	f7 f1                	div    ecx
c0004331:	8d 50 02             	lea    edx,[eax+0x2]
c0004334:	89 c7                	mov    edi,eax
c0004336:	89 d8                	mov    eax,ebx
c0004338:	e8 12 f8 ff ff       	call   c0003b4f <dir_alloc>
c000433d:	89 c6                	mov    esi,eax
c000433f:	85 c0                	test   eax,eax
c0004341:	0f 85 21 02 00 00    	jne    c0004568 <dir_register+0x278>
c0004347:	81 c7 01 00 00 08    	add    edi,0x8000001
c000434d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004350:	c1 e7 05             	shl    edi,0x5
c0004353:	29 f8                	sub    eax,edi
c0004355:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004358:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000435b:	a8 04                	test   al,0x4
c000435d:	0f 84 91 00 00 00    	je     c00043f4 <dir_register+0x104>
c0004363:	83 e0 fb             	and    eax,0xfffffffb
c0004366:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004369:	89 d8                	mov    eax,ebx
c000436b:	e8 25 ec ff ff       	call   c0002f95 <fill_first_frag>
c0004370:	85 c0                	test   eax,eax
c0004372:	0f 85 ee 01 00 00    	jne    c0004566 <dir_register+0x276>
c0004378:	83 c9 ff             	or     ecx,0xffffffff
c000437b:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000437e:	89 d8                	mov    eax,ebx
c0004380:	e8 db eb ff ff       	call   c0002f60 <fill_last_frag>
c0004385:	85 c0                	test   eax,eax
c0004387:	0f 85 d9 01 00 00    	jne    c0004566 <dir_register+0x276>
c000438d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004391:	74 61                	je     c00043f4 <dir_register+0x104>
c0004393:	89 da                	mov    edx,ebx
c0004395:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004399:	e8 ea f5 ff ff       	call   c0003988 <load_obj_xdir>
c000439e:	85 c0                	test   eax,eax
c00043a0:	0f 85 c0 01 00 00    	jne    c0004566 <dir_register+0x276>
c00043a6:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043aa:	31 c9                	xor    ecx,ecx
c00043ac:	c1 e2 09             	shl    edx,0x9
c00043af:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043b2:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043b5:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043b8:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043bb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043be:	83 c0 38             	add    eax,0x38
c00043c1:	e8 1c d9 ff ff       	call   c0001ce2 <st_qword>
c00043c6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043c9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043cc:	83 c0 28             	add    eax,0x28
c00043cf:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043d2:	e8 0b d9 ff ff       	call   c0001ce2 <st_qword>
c00043d7:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043da:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043dd:	83 c8 01             	or     eax,0x1
c00043e0:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043e3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043e7:	e8 db f7 ff ff       	call   c0003bc7 <store_xdir>
c00043ec:	85 c0                	test   eax,eax
c00043ee:	0f 85 72 01 00 00    	jne    c0004566 <dir_register+0x276>
c00043f4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043f7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043fa:	e8 c1 fb ff ff       	call   c0003fc0 <create_xdir>
c00043ff:	e9 64 01 00 00       	jmp    c0004568 <dir_register+0x278>
c0004404:	8d 40 3c             	lea    eax,[eax+0x3c]
c0004407:	b9 0c 00 00 00       	mov    ecx,0xc
c000440c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004410:	89 c2                	mov    edx,eax
c0004412:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004416:	e8 cd d8 ff ff       	call   c0001ce8 <mem_cpy>
c000441b:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004420:	74 58                	je     c000447a <dir_register+0x18a>
c0004422:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004426:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000442e:	83 ec 0c             	sub    esp,0xc
c0004431:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004434:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004438:	8d 54 24 24          	lea    edx,[esp+0x24]
c000443c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004440:	e8 24 dc ff ff       	call   c0002069 <gen_numname>
c0004445:	89 d8                	mov    eax,ebx
c0004447:	e8 de fc ff ff       	call   c000412a <dir_find>
c000444c:	83 c4 10             	add    esp,0x10
c000444f:	89 c6                	mov    esi,eax
c0004451:	85 c0                	test   eax,eax
c0004453:	75 15                	jne    c000446a <dir_register+0x17a>
c0004455:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004459:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000445e:	75 ce                	jne    c000442e <dir_register+0x13e>
c0004460:	be 07 00 00 00       	mov    esi,0x7
c0004465:	e9 fe 00 00 00       	jmp    c0004568 <dir_register+0x278>
c000446a:	83 f8 04             	cmp    eax,0x4
c000446d:	0f 85 f5 00 00 00    	jne    c0004568 <dir_register+0x278>
c0004473:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004477:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000447a:	b9 01 00 00 00       	mov    ecx,0x1
c000447f:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004484:	74 0f                	je     c0004495 <dir_register+0x1a5>
c0004486:	b9 0d 00 00 00       	mov    ecx,0xd
c000448b:	8d 47 0c             	lea    eax,[edi+0xc]
c000448e:	31 d2                	xor    edx,edx
c0004490:	f7 f1                	div    ecx
c0004492:	8d 48 01             	lea    ecx,[eax+0x1]
c0004495:	89 ca                	mov    edx,ecx
c0004497:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000449b:	89 d8                	mov    eax,ebx
c000449d:	e8 ad f6 ff ff       	call   c0003b4f <dir_alloc>
c00044a2:	89 c6                	mov    esi,eax
c00044a4:	85 c0                	test   eax,eax
c00044a6:	0f 85 bc 00 00 00    	jne    c0004568 <dir_register+0x278>
c00044ac:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044b0:	49                   	dec    ecx
c00044b1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044b5:	74 6a                	je     c0004521 <dir_register+0x231>
c00044b7:	89 c8                	mov    eax,ecx
c00044b9:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044bc:	c1 e0 05             	shl    eax,0x5
c00044bf:	29 c2                	sub    edx,eax
c00044c1:	89 d8                	mov    eax,ebx
c00044c3:	e8 fd ec ff ff       	call   c00031c5 <dir_sdi>
c00044c8:	89 c6                	mov    esi,eax
c00044ca:	85 c0                	test   eax,eax
c00044cc:	0f 85 96 00 00 00    	jne    c0004568 <dir_register+0x278>
c00044d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044d6:	e8 4a dc ff ff       	call   c0002125 <sum_sfn>
c00044db:	0f b6 f8             	movzx  edi,al
c00044de:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e1:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e4:	89 e8                	mov    eax,ebp
c00044e6:	e8 5c df ff ff       	call   c0002447 <move_window>
c00044eb:	89 c6                	mov    esi,eax
c00044ed:	85 c0                	test   eax,eax
c00044ef:	75 77                	jne    c0004568 <dir_register+0x278>
c00044f1:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044f6:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044f9:	83 ec 0c             	sub    esp,0xc
c00044fc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044ff:	57                   	push   edi
c0004500:	e8 e0 da ff ff       	call   c0001fe5 <put_lfn>
c0004505:	31 d2                	xor    edx,edx
c0004507:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000450b:	89 d8                	mov    eax,ebx
c000450d:	e8 0b f2 ff ff       	call   c000371d <dir_next>
c0004512:	83 c4 10             	add    esp,0x10
c0004515:	89 c6                	mov    esi,eax
c0004517:	85 c0                	test   eax,eax
c0004519:	75 4d                	jne    c0004568 <dir_register+0x278>
c000451b:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c000451f:	75 bd                	jne    c00044de <dir_register+0x1ee>
c0004521:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004524:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004527:	89 e8                	mov    eax,ebp
c0004529:	e8 19 df ff ff       	call   c0002447 <move_window>
c000452e:	89 c6                	mov    esi,eax
c0004530:	85 c0                	test   eax,eax
c0004532:	75 34                	jne    c0004568 <dir_register+0x278>
c0004534:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004537:	b9 20 00 00 00       	mov    ecx,0x20
c000453c:	31 d2                	xor    edx,edx
c000453e:	e8 ba d7 ff ff       	call   c0001cfd <mem_set>
c0004543:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004546:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000454a:	b9 0b 00 00 00       	mov    ecx,0xb
c000454f:	e8 94 d7 ff ff       	call   c0001ce8 <mem_cpy>
c0004554:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004557:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000455a:	83 e0 18             	and    eax,0x18
c000455d:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004560:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004564:	eb 02                	jmp    c0004568 <dir_register+0x278>
c0004566:	89 c6                	mov    esi,eax
c0004568:	83 c4 6c             	add    esp,0x6c
c000456b:	89 f0                	mov    eax,esi
c000456d:	5b                   	pop    ebx
c000456e:	5e                   	pop    esi
c000456f:	5f                   	pop    edi
c0004570:	5d                   	pop    ebp
c0004571:	c3                   	ret    

c0004572 <sync_fs>:
c0004572:	56                   	push   esi
c0004573:	53                   	push   ebx
c0004574:	53                   	push   ebx
c0004575:	89 c3                	mov    ebx,eax
c0004577:	e8 37 de ff ff       	call   c00023b3 <sync_window>
c000457c:	85 c0                	test   eax,eax
c000457e:	0f 85 b1 00 00 00    	jne    c0004635 <sync_fs+0xc3>
c0004584:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004587:	0f 85 8e 00 00 00    	jne    c000461b <sync_fs+0xa9>
c000458d:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004591:	0f 85 84 00 00 00    	jne    c000461b <sync_fs+0xa9>
c0004597:	b9 00 02 00 00       	mov    ecx,0x200
c000459c:	8d 73 54             	lea    esi,[ebx+0x54]
c000459f:	31 d2                	xor    edx,edx
c00045a1:	89 f0                	mov    eax,esi
c00045a3:	e8 55 d7 ff ff       	call   c0001cfd <mem_set>
c00045a8:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045ae:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045b3:	e8 23 d7 ff ff       	call   c0001cdb <st_word>
c00045b8:	ba 52 52 61 41       	mov    edx,0x41615252
c00045bd:	89 f0                	mov    eax,esi
c00045bf:	e8 1b d7 ff ff       	call   c0001cdf <st_dword>
c00045c4:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045ca:	ba 72 72 41 61       	mov    edx,0x61417272
c00045cf:	e8 0b d7 ff ff       	call   c0001cdf <st_dword>
c00045d4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045d7:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045dd:	e8 fd d6 ff ff       	call   c0001cdf <st_dword>
c00045e2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045e5:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045eb:	e8 ef d6 ff ff       	call   c0001cdf <st_dword>
c00045f0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045f3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045f6:	83 c0 01             	add    eax,0x1
c00045f9:	83 d2 00             	adc    edx,0x0
c00045fc:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045ff:	83 ec 0c             	sub    esp,0xc
c0004602:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c0004605:	6a 01                	push   0x1
c0004607:	52                   	push   edx
c0004608:	50                   	push   eax
c0004609:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000460d:	56                   	push   esi
c000460e:	50                   	push   eax
c000460f:	e8 20 d6 ff ff       	call   c0001c34 <disk_write>
c0004614:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004618:	83 c4 20             	add    esp,0x20
c000461b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000461f:	51                   	push   ecx
c0004620:	6a 00                	push   0x0
c0004622:	6a 00                	push   0x0
c0004624:	50                   	push   eax
c0004625:	e8 20 d6 ff ff       	call   c0001c4a <disk_ioctl>
c000462a:	83 c4 10             	add    esp,0x10
c000462d:	85 c0                	test   eax,eax
c000462f:	0f 95 c0             	setne  al
c0004632:	0f b6 c0             	movzx  eax,al
c0004635:	5a                   	pop    edx
c0004636:	5b                   	pop    ebx
c0004637:	5e                   	pop    esi
c0004638:	c3                   	ret    

c0004639 <create_partition>:
c0004639:	55                   	push   ebp
c000463a:	0f b6 c0             	movzx  eax,al
c000463d:	57                   	push   edi
c000463e:	56                   	push   esi
c000463f:	53                   	push   ebx
c0004640:	83 ec 60             	sub    esp,0x60
c0004643:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004647:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000464b:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000464f:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004653:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004657:	50                   	push   eax
c0004658:	6a 01                	push   0x1
c000465a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000465e:	e8 e7 d5 ff ff       	call   c0001c4a <disk_ioctl>
c0004663:	83 c4 10             	add    esp,0x10
c0004666:	85 c0                	test   eax,eax
c0004668:	74 0a                	je     c0004674 <create_partition+0x3b>
c000466a:	b8 01 00 00 00       	mov    eax,0x1
c000466f:	e9 67 05 00 00       	jmp    c0004bdb <create_partition+0x5a2>
c0004674:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004678:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000467c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004680:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004684:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004689:	0f 86 ed 03 00 00    	jbe    c0004a7c <create_partition+0x443>
c000468f:	83 c0 df             	add    eax,0xffffffdf
c0004692:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000469a:	83 d2 ff             	adc    edx,0xffffffff
c000469d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00046a1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00046a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046a9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046ad:	83 c0 bd             	add    eax,0xffffffbd
c00046b0:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046b7:	83 d2 ff             	adc    edx,0xffffffff
c00046ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046c2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046ca:	be 22 00 00 00       	mov    esi,0x22
c00046cf:	31 ff                	xor    edi,edi
c00046d1:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046d9:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046e1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046e9:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ed:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046f3:	75 0e                	jne    c0004703 <create_partition+0xca>
c00046f5:	b9 00 02 00 00       	mov    ecx,0x200
c00046fa:	31 d2                	xor    edx,edx
c00046fc:	89 d8                	mov    eax,ebx
c00046fe:	e8 fa d5 ff ff       	call   c0001cfd <mem_set>
c0004703:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004707:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000470b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000470f:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004712:	0f 84 23 01 00 00    	je     c000483b <create_partition+0x202>
c0004718:	89 f0                	mov    eax,esi
c000471a:	89 fa                	mov    edx,edi
c000471c:	05 ff 07 00 00       	add    eax,0x7ff
c0004721:	83 d2 00             	adc    edx,0x0
c0004724:	89 c1                	mov    ecx,eax
c0004726:	89 d7                	mov    edi,edx
c0004728:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000472e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004732:	89 ce                	mov    esi,ecx
c0004734:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004738:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000473c:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004740:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004743:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004747:	89 04 24             	mov    DWORD PTR [esp],eax
c000474a:	b8 64 00 00 00       	mov    eax,0x64
c000474f:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004752:	b8 00 00 00 00       	mov    eax,0x0
c0004757:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000475b:	72 41                	jb     c000479e <create_partition+0x165>
c000475d:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004761:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004765:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004769:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000476e:	01 c1                	add    ecx,eax
c0004770:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004774:	f7 24 24             	mul    DWORD PTR [esp]
c0004777:	6a 00                	push   0x0
c0004779:	01 ca                	add    edx,ecx
c000477b:	6a 64                	push   0x64
c000477d:	52                   	push   edx
c000477e:	50                   	push   eax
c000477f:	e8 40 22 02 00       	call   c00269c4 <__udivdi3>
c0004784:	83 c4 10             	add    esp,0x10
c0004787:	05 ff 07 00 00       	add    eax,0x7ff
c000478c:	83 d2 00             	adc    edx,0x0
c000478f:	89 c1                	mov    ecx,eax
c0004791:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004795:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000479b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000479e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047a1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00047a5:	01 f0                	add    eax,esi
c00047a7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047ab:	11 fa                	adc    edx,edi
c00047ad:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047b1:	19 d1                	sbb    ecx,edx
c00047b3:	73 2e                	jae    c00047e3 <create_partition+0x1aa>
c00047b5:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047b9:	89 f8                	mov    eax,edi
c00047bb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047c2:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047c6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047ce:	73 6b                	jae    c000483b <create_partition+0x202>
c00047d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047d4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047d8:	29 f0                	sub    eax,esi
c00047da:	19 fa                	sbb    edx,edi
c00047dc:	89 04 24             	mov    DWORD PTR [esp],eax
c00047df:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047e7:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047ea:	74 4f                	je     c000483b <create_partition+0x202>
c00047ec:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ef:	b9 10 00 00 00       	mov    ecx,0x10
c00047f4:	ba 70 94 02 c0       	mov    edx,0xc0029470
c00047f9:	e8 ea d4 ff ff       	call   c0001ce8 <mem_cpy>
c00047fe:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c0004802:	b9 10 00 00 00       	mov    ecx,0x10
c0004807:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000480b:	e8 2c db ff ff       	call   c000233c <make_rand>
c0004810:	89 f2                	mov    edx,esi
c0004812:	89 f9                	mov    ecx,edi
c0004814:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004818:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c000481c:	e8 c1 d4 ff ff       	call   c0001ce2 <st_qword>
c0004821:	03 34 24             	add    esi,DWORD PTR [esp]
c0004824:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004828:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000482c:	89 f2                	mov    edx,esi
c000482e:	89 f9                	mov    ecx,edi
c0004830:	83 c2 ff             	add    edx,0xffffffff
c0004833:	83 d1 ff             	adc    ecx,0xffffffff
c0004836:	e8 a7 d4 ff ff       	call   c0001ce2 <st_qword>
c000483b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000483f:	83 e8 80             	sub    eax,0xffffff80
c0004842:	89 c5                	mov    ebp,eax
c0004844:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004848:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000484e:	75 6b                	jne    c00048bb <create_partition+0x282>
c0004850:	45                   	inc    ebp
c0004851:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004855:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000485a:	e8 39 da ff ff       	call   c0002298 <crc32>
c000485f:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004865:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004869:	75 e5                	jne    c0004850 <create_partition+0x217>
c000486b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000486f:	31 d2                	xor    edx,edx
c0004871:	83 ec 0c             	sub    esp,0xc
c0004874:	c1 ed 09             	shr    ebp,0x9
c0004877:	6a 01                	push   0x1
c0004879:	8d 45 02             	lea    eax,[ebp+0x2]
c000487c:	52                   	push   edx
c000487d:	50                   	push   eax
c000487e:	53                   	push   ebx
c000487f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004883:	e8 ac d3 ff ff       	call   c0001c34 <disk_write>
c0004888:	83 c4 20             	add    esp,0x20
c000488b:	85 c0                	test   eax,eax
c000488d:	0f 85 d7 fd ff ff    	jne    c000466a <create_partition+0x31>
c0004893:	83 ec 0c             	sub    esp,0xc
c0004896:	31 d2                	xor    edx,edx
c0004898:	6a 01                	push   0x1
c000489a:	89 e8                	mov    eax,ebp
c000489c:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00048a0:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00048a4:	52                   	push   edx
c00048a5:	50                   	push   eax
c00048a6:	53                   	push   ebx
c00048a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048ab:	e8 84 d3 ff ff       	call   c0001c34 <disk_write>
c00048b0:	83 c4 20             	add    esp,0x20
c00048b3:	85 c0                	test   eax,eax
c00048b5:	0f 85 af fd ff ff    	jne    c000466a <create_partition+0x31>
c00048bb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048c3:	3d 00 40 00 00       	cmp    eax,0x4000
c00048c8:	74 0d                	je     c00048d7 <create_partition+0x29e>
c00048ca:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048ce:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048d2:	e9 12 fe ff ff       	jmp    c00046e9 <create_partition+0xb0>
c00048d7:	31 d2                	xor    edx,edx
c00048d9:	b9 00 02 00 00       	mov    ecx,0x200
c00048de:	89 d8                	mov    eax,ebx
c00048e0:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048e3:	e8 15 d4 ff ff       	call   c0001cfd <mem_set>
c00048e8:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048eb:	b9 10 00 00 00       	mov    ecx,0x10
c00048f0:	ba 60 93 02 c0       	mov    edx,0xc0029360
c00048f5:	89 d8                	mov    eax,ebx
c00048f7:	e8 ec d3 ff ff       	call   c0001ce8 <mem_cpy>
c00048fc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0004900:	8d 43 58             	lea    eax,[ebx+0x58]
c0004903:	f7 d2                	not    edx
c0004905:	e8 d5 d3 ff ff       	call   c0001cdf <st_dword>
c000490a:	8d 43 18             	lea    eax,[ebx+0x18]
c000490d:	31 c9                	xor    ecx,ecx
c000490f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004912:	ba 01 00 00 00       	mov    edx,0x1
c0004917:	e8 c6 d3 ff ff       	call   c0001ce2 <st_qword>
c000491c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004920:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004924:	83 c2 ff             	add    edx,0xffffffff
c0004927:	89 e8                	mov    eax,ebp
c0004929:	83 d1 ff             	adc    ecx,0xffffffff
c000492c:	e8 b1 d3 ff ff       	call   c0001ce2 <st_qword>
c0004931:	31 c9                	xor    ecx,ecx
c0004933:	8d 43 28             	lea    eax,[ebx+0x28]
c0004936:	ba 22 00 00 00       	mov    edx,0x22
c000493b:	e8 a2 d3 ff ff       	call   c0001ce2 <st_qword>
c0004940:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004944:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004948:	83 c2 de             	add    edx,0xffffffde
c000494b:	8d 43 30             	lea    eax,[ebx+0x30]
c000494e:	83 d1 ff             	adc    ecx,0xffffffff
c0004951:	31 f6                	xor    esi,esi
c0004953:	e8 8a d3 ff ff       	call   c0001ce2 <st_qword>
c0004958:	8d 43 54             	lea    eax,[ebx+0x54]
c000495b:	ba 80 00 00 00       	mov    edx,0x80
c0004960:	e8 7a d3 ff ff       	call   c0001cdf <st_dword>
c0004965:	8d 43 50             	lea    eax,[ebx+0x50]
c0004968:	ba 80 00 00 00       	mov    edx,0x80
c000496d:	e8 6d d3 ff ff       	call   c0001cdf <st_dword>
c0004972:	ba 02 00 00 00       	mov    edx,0x2
c0004977:	89 f8                	mov    eax,edi
c0004979:	e8 61 d3 ff ff       	call   c0001cdf <st_dword>
c000497e:	8d 53 38             	lea    edx,[ebx+0x38]
c0004981:	b9 10 00 00 00       	mov    ecx,0x10
c0004986:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000498a:	e8 ad d9 ff ff       	call   c000233c <make_rand>
c000498f:	83 c8 ff             	or     eax,0xffffffff
c0004992:	46                   	inc    esi
c0004993:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004998:	e8 fb d8 ff ff       	call   c0002298 <crc32>
c000499d:	83 fe 5c             	cmp    esi,0x5c
c00049a0:	75 f0                	jne    c0004992 <create_partition+0x359>
c00049a2:	f7 d0                	not    eax
c00049a4:	8d 73 10             	lea    esi,[ebx+0x10]
c00049a7:	89 c2                	mov    edx,eax
c00049a9:	89 f0                	mov    eax,esi
c00049ab:	e8 2f d3 ff ff       	call   c0001cdf <st_dword>
c00049b0:	83 ec 0c             	sub    esp,0xc
c00049b3:	6a 01                	push   0x1
c00049b5:	6a 00                	push   0x0
c00049b7:	6a 01                	push   0x1
c00049b9:	53                   	push   ebx
c00049ba:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049be:	e8 71 d2 ff ff       	call   c0001c34 <disk_write>
c00049c3:	83 c4 20             	add    esp,0x20
c00049c6:	85 c0                	test   eax,eax
c00049c8:	0f 85 9c fc ff ff    	jne    c000466a <create_partition+0x31>
c00049ce:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049d2:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049d6:	83 c2 ff             	add    edx,0xffffffff
c00049d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049dc:	83 d1 ff             	adc    ecx,0xffffffff
c00049df:	e8 fe d2 ff ff       	call   c0001ce2 <st_qword>
c00049e4:	ba 01 00 00 00       	mov    edx,0x1
c00049e9:	31 c9                	xor    ecx,ecx
c00049eb:	89 e8                	mov    eax,ebp
c00049ed:	e8 f0 d2 ff ff       	call   c0001ce2 <st_qword>
c00049f2:	89 f8                	mov    eax,edi
c00049f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049f8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049fc:	31 ff                	xor    edi,edi
c00049fe:	e8 df d2 ff ff       	call   c0001ce2 <st_qword>
c0004a03:	89 f0                	mov    eax,esi
c0004a05:	31 d2                	xor    edx,edx
c0004a07:	e8 d3 d2 ff ff       	call   c0001cdf <st_dword>
c0004a0c:	83 c8 ff             	or     eax,0xffffffff
c0004a0f:	47                   	inc    edi
c0004a10:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a15:	e8 7e d8 ff ff       	call   c0002298 <crc32>
c0004a1a:	83 ff 5c             	cmp    edi,0x5c
c0004a1d:	75 f0                	jne    c0004a0f <create_partition+0x3d6>
c0004a1f:	f7 d0                	not    eax
c0004a21:	89 c2                	mov    edx,eax
c0004a23:	89 f0                	mov    eax,esi
c0004a25:	e8 b5 d2 ff ff       	call   c0001cdf <st_dword>
c0004a2a:	83 ec 0c             	sub    esp,0xc
c0004a2d:	6a 01                	push   0x1
c0004a2f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a33:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a37:	83 c0 ff             	add    eax,0xffffffff
c0004a3a:	83 d2 ff             	adc    edx,0xffffffff
c0004a3d:	52                   	push   edx
c0004a3e:	50                   	push   eax
c0004a3f:	53                   	push   ebx
c0004a40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a44:	e8 eb d1 ff ff       	call   c0001c34 <disk_write>
c0004a49:	83 c4 20             	add    esp,0x20
c0004a4c:	85 c0                	test   eax,eax
c0004a4e:	0f 85 16 fc ff ff    	jne    c000466a <create_partition+0x31>
c0004a54:	31 d2                	xor    edx,edx
c0004a56:	89 d8                	mov    eax,ebx
c0004a58:	b9 00 02 00 00       	mov    ecx,0x200
c0004a5d:	e8 9b d2 ff ff       	call   c0001cfd <mem_set>
c0004a62:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a68:	b9 10 00 00 00       	mov    ecx,0x10
c0004a6d:	ba 70 93 02 c0       	mov    edx,0xc0029370
c0004a72:	e8 71 d2 ff ff       	call   c0001ce8 <mem_cpy>
c0004a77:	e9 21 01 00 00       	jmp    c0004b9d <create_partition+0x564>
c0004a7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a80:	b9 05 00 00 00       	mov    ecx,0x5
c0004a85:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a88:	bf 08 00 00 00       	mov    edi,0x8
c0004a8d:	89 f8                	mov    eax,edi
c0004a8f:	31 d2                	xor    edx,edx
c0004a91:	0f b6 f0             	movzx  esi,al
c0004a94:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a97:	f7 f6                	div    esi
c0004a99:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a9e:	76 0a                	jbe    c0004aaa <create_partition+0x471>
c0004aa0:	d1 e7                	shl    edi,1
c0004aa2:	49                   	dec    ecx
c0004aa3:	75 e8                	jne    c0004a8d <create_partition+0x454>
c0004aa5:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aaa:	b9 00 02 00 00       	mov    ecx,0x200
c0004aaf:	31 d2                	xor    edx,edx
c0004ab1:	89 d8                	mov    eax,ebx
c0004ab3:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ab9:	e8 3f d2 ff ff       	call   c0001cfd <mem_set>
c0004abe:	b9 64 00 00 00       	mov    ecx,0x64
c0004ac3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004ac6:	31 d2                	xor    edx,edx
c0004ac8:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ad0:	f7 f1                	div    ecx
c0004ad2:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004ad7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004adb:	89 f8                	mov    eax,edi
c0004add:	0f b6 c0             	movzx  eax,al
c0004ae0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004ae4:	e9 80 00 00 00       	jmp    c0004b69 <create_partition+0x530>
c0004ae9:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aec:	29 cf                	sub    edi,ecx
c0004aee:	89 ca                	mov    edx,ecx
c0004af0:	89 f0                	mov    eax,esi
c0004af2:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004af7:	e8 e3 d1 ff ff       	call   c0001cdf <st_dword>
c0004afc:	8d 46 04             	lea    eax,[esi+0x4]
c0004aff:	89 fa                	mov    edx,edi
c0004b01:	83 c6 10             	add    esi,0x10
c0004b04:	e8 d6 d1 ff ff       	call   c0001cdf <st_dword>
c0004b09:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b0d:	31 d2                	xor    edx,edx
c0004b0f:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b12:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b16:	89 c8                	mov    eax,ecx
c0004b18:	01 f9                	add    ecx,edi
c0004b1a:	f7 f5                	div    ebp
c0004b1c:	89 d5                	mov    ebp,edx
c0004b1e:	31 d2                	xor    edx,edx
c0004b20:	45                   	inc    ebp
c0004b21:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b25:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b28:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b2b:	89 c2                	mov    edx,eax
c0004b2d:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b30:	c1 ea 02             	shr    edx,0x2
c0004b33:	83 e2 c0             	and    edx,0xffffffc0
c0004b36:	09 ea                	or     edx,ebp
c0004b38:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b3d:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b40:	31 d2                	xor    edx,edx
c0004b42:	f7 f5                	div    ebp
c0004b44:	89 d7                	mov    edi,edx
c0004b46:	31 d2                	xor    edx,edx
c0004b48:	47                   	inc    edi
c0004b49:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b4d:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b50:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b53:	89 c5                	mov    ebp,eax
c0004b55:	c1 ed 02             	shr    ebp,0x2
c0004b58:	83 e5 c0             	and    ebp,0xffffffc0
c0004b5b:	09 ef                	or     edi,ebp
c0004b5d:	89 fa                	mov    edx,edi
c0004b5f:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b62:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b67:	74 34                	je     c0004b9d <create_partition+0x564>
c0004b69:	85 c9                	test   ecx,ecx
c0004b6b:	74 30                	je     c0004b9d <create_partition+0x564>
c0004b6d:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b70:	76 2b                	jbe    c0004b9d <create_partition+0x564>
c0004b72:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b76:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b7a:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b7d:	83 ff 64             	cmp    edi,0x64
c0004b80:	76 4b                	jbe    c0004bcd <create_partition+0x594>
c0004b82:	89 f8                	mov    eax,edi
c0004b84:	01 c8                	add    eax,ecx
c0004b86:	0f 82 5d ff ff ff    	jb     c0004ae9 <create_partition+0x4b0>
c0004b8c:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b8f:	0f 87 54 ff ff ff    	ja     c0004ae9 <create_partition+0x4b0>
c0004b95:	85 ff                	test   edi,edi
c0004b97:	0f 85 51 ff ff ff    	jne    c0004aee <create_partition+0x4b5>
c0004b9d:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004ba3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004ba8:	e8 2e d1 ff ff       	call   c0001cdb <st_word>
c0004bad:	83 ec 0c             	sub    esp,0xc
c0004bb0:	6a 01                	push   0x1
c0004bb2:	6a 00                	push   0x0
c0004bb4:	6a 00                	push   0x0
c0004bb6:	53                   	push   ebx
c0004bb7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bbb:	e8 74 d0 ff ff       	call   c0001c34 <disk_write>
c0004bc0:	83 c4 20             	add    esp,0x20
c0004bc3:	85 c0                	test   eax,eax
c0004bc5:	0f 95 c0             	setne  al
c0004bc8:	0f b6 c0             	movzx  eax,al
c0004bcb:	eb 0e                	jmp    c0004bdb <create_partition+0x5a2>
c0004bcd:	74 07                	je     c0004bd6 <create_partition+0x59d>
c0004bcf:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bd4:	eb ac                	jmp    c0004b82 <create_partition+0x549>
c0004bd6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bd9:	eb a7                	jmp    c0004b82 <create_partition+0x549>
c0004bdb:	83 c4 5c             	add    esp,0x5c
c0004bde:	5b                   	pop    ebx
c0004bdf:	5e                   	pop    esi
c0004be0:	5f                   	pop    edi
c0004be1:	5d                   	pop    ebp
c0004be2:	c3                   	ret    

c0004be3 <get_fileinfo>:
c0004be3:	55                   	push   ebp
c0004be4:	57                   	push   edi
c0004be5:	56                   	push   esi
c0004be6:	53                   	push   ebx
c0004be7:	83 ec 1c             	sub    esp,0x1c
c0004bea:	8b 30                	mov    esi,DWORD PTR [eax]
c0004bec:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bf0:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bf4:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bf7:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bfa:	0f 84 dc 01 00 00    	je     c0004ddc <get_fileinfo+0x1f9>
c0004c00:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004c03:	75 0f                	jne    c0004c14 <get_fileinfo+0x31>
c0004c05:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c08:	83 c4 1c             	add    esp,0x1c
c0004c0b:	5b                   	pop    ebx
c0004c0c:	5e                   	pop    esi
c0004c0d:	5f                   	pop    edi
c0004c0e:	5d                   	pop    ebp
c0004c0f:	e9 58 d5 ff ff       	jmp    c000216c <get_xfileinfo>
c0004c14:	89 d3                	mov    ebx,edx
c0004c16:	89 c6                	mov    esi,eax
c0004c18:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c1c:	74 6a                	je     c0004c88 <get_fileinfo+0xa5>
c0004c1e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c26:	31 ed                	xor    ebp,ebp
c0004c28:	31 ff                	xor    edi,edi
c0004c2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c2e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c32:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c35:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c39:	66 85 d2             	test   dx,dx
c0004c3c:	74 3e                	je     c0004c7c <get_fileinfo+0x99>
c0004c3e:	66 85 ed             	test   bp,bp
c0004c41:	75 0c                	jne    c0004c4f <get_fileinfo+0x6c>
c0004c43:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c49:	66 3d ff 07          	cmp    ax,0x7ff
c0004c4d:	76 22                	jbe    c0004c71 <get_fileinfo+0x8e>
c0004c4f:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c54:	89 e8                	mov    eax,ebp
c0004c56:	29 f9                	sub    ecx,edi
c0004c58:	c1 e0 10             	shl    eax,0x10
c0004c5b:	09 d0                	or     eax,edx
c0004c5d:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c61:	e8 a3 d1 ff ff       	call   c0001e09 <put_utf>
c0004c66:	84 c0                	test   al,al
c0004c68:	74 10                	je     c0004c7a <get_fileinfo+0x97>
c0004c6a:	0f b6 c0             	movzx  eax,al
c0004c6d:	31 d2                	xor    edx,edx
c0004c6f:	01 c7                	add    edi,eax
c0004c71:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c76:	89 d5                	mov    ebp,edx
c0004c78:	eb b0                	jmp    c0004c2a <get_fileinfo+0x47>
c0004c7a:	31 ff                	xor    edi,edi
c0004c7c:	66 85 ed             	test   bp,bp
c0004c7f:	74 02                	je     c0004c83 <get_fileinfo+0xa0>
c0004c81:	31 ff                	xor    edi,edi
c0004c83:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c88:	31 ff                	xor    edi,edi
c0004c8a:	31 c9                	xor    ecx,ecx
c0004c8c:	83 f9 0a             	cmp    ecx,0xa
c0004c8f:	0f 87 ad 00 00 00    	ja     c0004d42 <get_fileinfo+0x15f>
c0004c95:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c98:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c9b:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c9f:	66 83 fa 20          	cmp    dx,0x20
c0004ca3:	0f 84 92 00 00 00    	je     c0004d3b <get_fileinfo+0x158>
c0004ca9:	66 83 fa 05          	cmp    dx,0x5
c0004cad:	75 05                	jne    c0004cb4 <get_fileinfo+0xd1>
c0004caf:	ba e5 00 00 00       	mov    edx,0xe5
c0004cb4:	83 ff 0b             	cmp    edi,0xb
c0004cb7:	77 0b                	ja     c0004cc4 <get_fileinfo+0xe1>
c0004cb9:	83 fd 09             	cmp    ebp,0x9
c0004cbc:	75 06                	jne    c0004cc4 <get_fileinfo+0xe1>
c0004cbe:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cc3:	47                   	inc    edi
c0004cc4:	0f b7 c2             	movzx  eax,dx
c0004cc7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ccb:	e8 6d d0 ff ff       	call   c0001d3d <dbc_1st>
c0004cd0:	85 c0                	test   eax,eax
c0004cd2:	74 2f                	je     c0004d03 <get_fileinfo+0x120>
c0004cd4:	83 fd 08             	cmp    ebp,0x8
c0004cd7:	74 2a                	je     c0004d03 <get_fileinfo+0x120>
c0004cd9:	83 fd 0b             	cmp    ebp,0xb
c0004cdc:	74 25                	je     c0004d03 <get_fileinfo+0x120>
c0004cde:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ce1:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ce5:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ce9:	e8 52 d0 ff ff       	call   c0001d40 <dbc_2nd>
c0004cee:	85 c0                	test   eax,eax
c0004cf0:	74 11                	je     c0004d03 <get_fileinfo+0x120>
c0004cf2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cf6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cfb:	c1 e2 08             	shl    edx,0x8
c0004cfe:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004d01:	09 c2                	or     edx,eax
c0004d03:	0f b7 d2             	movzx  edx,dx
c0004d06:	50                   	push   eax
c0004d07:	50                   	push   eax
c0004d08:	68 b5 01 00 00       	push   0x1b5
c0004d0d:	52                   	push   edx
c0004d0e:	e8 46 38 00 00       	call   c0008559 <ff_oem2uni>
c0004d13:	83 c4 10             	add    esp,0x10
c0004d16:	66 85 c0             	test   ax,ax
c0004d19:	75 04                	jne    c0004d1f <get_fileinfo+0x13c>
c0004d1b:	31 ff                	xor    edi,edi
c0004d1d:	eb 23                	jmp    c0004d42 <get_fileinfo+0x15f>
c0004d1f:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d24:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d28:	29 f9                	sub    ecx,edi
c0004d2a:	0f b7 c0             	movzx  eax,ax
c0004d2d:	e8 d7 d0 ff ff       	call   c0001e09 <put_utf>
c0004d32:	84 c0                	test   al,al
c0004d34:	74 e5                	je     c0004d1b <get_fileinfo+0x138>
c0004d36:	0f b6 c0             	movzx  eax,al
c0004d39:	01 c7                	add    edi,eax
c0004d3b:	89 e9                	mov    ecx,ebp
c0004d3d:	e9 4a ff ff ff       	jmp    c0004c8c <get_fileinfo+0xa9>
c0004d42:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d47:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d4b:	75 54                	jne    c0004da1 <get_fileinfo+0x1be>
c0004d4d:	85 ff                	test   edi,edi
c0004d4f:	75 0b                	jne    c0004d5c <get_fileinfo+0x179>
c0004d51:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d55:	ba 01 00 00 00       	mov    edx,0x1
c0004d5a:	eb 33                	jmp    c0004d8f <get_fileinfo+0x1ac>
c0004d5c:	b1 08                	mov    cl,0x8
c0004d5e:	31 d2                	xor    edx,edx
c0004d60:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d66:	84 c0                	test   al,al
c0004d68:	74 25                	je     c0004d8f <get_fileinfo+0x1ac>
c0004d6a:	66 83 f8 2e          	cmp    ax,0x2e
c0004d6e:	74 16                	je     c0004d86 <get_fileinfo+0x1a3>
c0004d70:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d73:	66 83 ff 19          	cmp    di,0x19
c0004d77:	77 0f                	ja     c0004d88 <get_fileinfo+0x1a5>
c0004d79:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d7c:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d7f:	74 07                	je     c0004d88 <get_fileinfo+0x1a5>
c0004d81:	83 c0 20             	add    eax,0x20
c0004d84:	eb 02                	jmp    c0004d88 <get_fileinfo+0x1a5>
c0004d86:	b1 10                	mov    cl,0x10
c0004d88:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d8c:	42                   	inc    edx
c0004d8d:	eb d1                	jmp    c0004d60 <get_fileinfo+0x17d>
c0004d8f:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d94:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d97:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d9b:	75 04                	jne    c0004da1 <get_fileinfo+0x1be>
c0004d9d:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004da1:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da4:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004da7:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004daa:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dad:	83 c0 1c             	add    eax,0x1c
c0004db0:	e8 c1 ce ff ff       	call   c0001c76 <ld_dword>
c0004db5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004dbc:	89 03                	mov    DWORD PTR [ebx],eax
c0004dbe:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc1:	83 c0 16             	add    eax,0x16
c0004dc4:	e8 a0 ce ff ff       	call   c0001c69 <ld_word>
c0004dc9:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004dcd:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dd0:	83 c0 18             	add    eax,0x18
c0004dd3:	e8 91 ce ff ff       	call   c0001c69 <ld_word>
c0004dd8:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004ddc:	83 c4 1c             	add    esp,0x1c
c0004ddf:	5b                   	pop    ebx
c0004de0:	5e                   	pop    esi
c0004de1:	5f                   	pop    edi
c0004de2:	5d                   	pop    ebp
c0004de3:	c3                   	ret    

c0004de4 <ld_clust.isra.0>:
c0004de4:	56                   	push   esi
c0004de5:	89 c6                	mov    esi,eax
c0004de7:	53                   	push   ebx
c0004de8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004deb:	89 d3                	mov    ebx,edx
c0004ded:	e8 77 ce ff ff       	call   c0001c69 <ld_word>
c0004df2:	0f b7 c8             	movzx  ecx,ax
c0004df5:	89 f0                	mov    eax,esi
c0004df7:	3c 03                	cmp    al,0x3
c0004df9:	75 0d                	jne    c0004e08 <ld_clust.isra.0+0x24>
c0004dfb:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dfe:	e8 66 ce ff ff       	call   c0001c69 <ld_word>
c0004e03:	c1 e0 10             	shl    eax,0x10
c0004e06:	09 c1                	or     ecx,eax
c0004e08:	89 c8                	mov    eax,ecx
c0004e0a:	5b                   	pop    ebx
c0004e0b:	5e                   	pop    esi
c0004e0c:	c3                   	ret    

c0004e0d <st_clust.isra.1>:
c0004e0d:	56                   	push   esi
c0004e0e:	89 c6                	mov    esi,eax
c0004e10:	53                   	push   ebx
c0004e11:	89 d3                	mov    ebx,edx
c0004e13:	0f b7 d1             	movzx  edx,cx
c0004e16:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e19:	e8 bd ce ff ff       	call   c0001cdb <st_word>
c0004e1e:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e21:	75 0f                	jne    c0004e32 <st_clust.isra.1+0x25>
c0004e23:	c1 e9 10             	shr    ecx,0x10
c0004e26:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e29:	89 ca                	mov    edx,ecx
c0004e2b:	5b                   	pop    ebx
c0004e2c:	5e                   	pop    esi
c0004e2d:	e9 a9 ce ff ff       	jmp    c0001cdb <st_word>
c0004e32:	5b                   	pop    ebx
c0004e33:	5e                   	pop    esi
c0004e34:	c3                   	ret    

c0004e35 <init_alloc_info.isra.2>:
c0004e35:	56                   	push   esi
c0004e36:	53                   	push   ebx
c0004e37:	89 c6                	mov    esi,eax
c0004e39:	89 d3                	mov    ebx,edx
c0004e3b:	51                   	push   ecx
c0004e3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e3e:	83 c0 34             	add    eax,0x34
c0004e41:	e8 30 ce ff ff       	call   c0001c76 <ld_dword>
c0004e46:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e49:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e4b:	83 c0 38             	add    eax,0x38
c0004e4e:	e8 3b ce ff ff       	call   c0001c8e <ld_qword>
c0004e53:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e56:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e59:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e5b:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e5e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e65:	83 e0 02             	and    eax,0x2
c0004e68:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e6b:	5b                   	pop    ebx
c0004e6c:	5b                   	pop    ebx
c0004e6d:	5e                   	pop    esi
c0004e6e:	c3                   	ret    

c0004e6f <follow_path>:
c0004e6f:	56                   	push   esi
c0004e70:	53                   	push   ebx
c0004e71:	89 c3                	mov    ebx,eax
c0004e73:	83 ec 14             	sub    esp,0x14
c0004e76:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e7a:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e80:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e82:	80 fa 5c             	cmp    dl,0x5c
c0004e85:	75 07                	jne    c0004e8e <follow_path+0x1f>
c0004e87:	40                   	inc    eax
c0004e88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e8c:	eb ee                	jmp    c0004e7c <follow_path+0xd>
c0004e8e:	80 fa 2f             	cmp    dl,0x2f
c0004e91:	74 f4                	je     c0004e87 <follow_path+0x18>
c0004e93:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e9a:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004ea1:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004ea4:	77 52                	ja     c0004ef8 <follow_path+0x89>
c0004ea6:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004eaa:	31 d2                	xor    edx,edx
c0004eac:	89 d8                	mov    eax,ebx
c0004eae:	e8 12 e3 ff ff       	call   c00031c5 <dir_sdi>
c0004eb3:	eb 7c                	jmp    c0004f31 <follow_path+0xc2>
c0004eb5:	89 d8                	mov    eax,ebx
c0004eb7:	e8 6e f2 ff ff       	call   c000412a <dir_find>
c0004ebc:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004ebf:	85 c0                	test   eax,eax
c0004ec1:	75 46                	jne    c0004f09 <follow_path+0x9a>
c0004ec3:	80 e2 04             	and    dl,0x4
c0004ec6:	75 69                	jne    c0004f31 <follow_path+0xc2>
c0004ec8:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ecc:	74 5e                	je     c0004f2c <follow_path+0xbd>
c0004ece:	8a 06                	mov    al,BYTE PTR [esi]
c0004ed0:	3c 04                	cmp    al,0x4
c0004ed2:	75 41                	jne    c0004f15 <follow_path+0xa6>
c0004ed4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ed7:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004edb:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ede:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ee1:	30 c0                	xor    al,al
c0004ee3:	09 d0                	or     eax,edx
c0004ee5:	89 da                	mov    edx,ebx
c0004ee7:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004eea:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eed:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ef0:	8d 46 10             	lea    eax,[esi+0x10]
c0004ef3:	e8 3d ff ff ff       	call   c0004e35 <init_alloc_info.isra.2>
c0004ef8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004efc:	89 d8                	mov    eax,ebx
c0004efe:	e8 a9 ed ff ff       	call   c0003cac <create_name>
c0004f03:	85 c0                	test   eax,eax
c0004f05:	74 ae                	je     c0004eb5 <follow_path+0x46>
c0004f07:	eb 28                	jmp    c0004f31 <follow_path+0xc2>
c0004f09:	83 f8 04             	cmp    eax,0x4
c0004f0c:	75 23                	jne    c0004f31 <follow_path+0xc2>
c0004f0e:	80 e2 04             	and    dl,0x4
c0004f11:	74 19                	je     c0004f2c <follow_path+0xbd>
c0004f13:	eb 1c                	jmp    c0004f31 <follow_path+0xc2>
c0004f15:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f18:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f1e:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f22:	e8 bd fe ff ff       	call   c0004de4 <ld_clust.isra.0>
c0004f27:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f2a:	eb cc                	jmp    c0004ef8 <follow_path+0x89>
c0004f2c:	b8 05 00 00 00       	mov    eax,0x5
c0004f31:	83 c4 14             	add    esp,0x14
c0004f34:	5b                   	pop    ebx
c0004f35:	5e                   	pop    esi
c0004f36:	c3                   	ret    

c0004f37 <f_mount>:
c0004f37:	53                   	push   ebx
c0004f38:	83 ec 18             	sub    esp,0x18
c0004f3b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f3f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f43:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f47:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f4b:	e8 fb d2 ff ff       	call   c000224b <get_ldnumber>
c0004f50:	89 c2                	mov    edx,eax
c0004f52:	b8 0b 00 00 00       	mov    eax,0xb
c0004f57:	85 d2                	test   edx,edx
c0004f59:	78 39                	js     c0004f94 <f_mount+0x5d>
c0004f5b:	8b 04 95 00 e4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1c00]
c0004f62:	85 c0                	test   eax,eax
c0004f64:	74 03                	je     c0004f69 <f_mount+0x32>
c0004f66:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f6d:	85 c0                	test   eax,eax
c0004f6f:	74 03                	je     c0004f74 <f_mount+0x3d>
c0004f71:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f78:	89 04 95 00 e4 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1c00],eax
c0004f7f:	31 c0                	xor    eax,eax
c0004f81:	84 db                	test   bl,bl
c0004f83:	74 0f                	je     c0004f94 <f_mount+0x5d>
c0004f85:	31 c9                	xor    ecx,ecx
c0004f87:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f8b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f8f:	e8 65 d7 ff ff       	call   c00026f9 <mount_volume>
c0004f94:	83 c4 18             	add    esp,0x18
c0004f97:	5b                   	pop    ebx
c0004f98:	c3                   	ret    

c0004f99 <f_open>:
c0004f99:	55                   	push   ebp
c0004f9a:	bd 09 00 00 00       	mov    ebp,0x9
c0004f9f:	57                   	push   edi
c0004fa0:	56                   	push   esi
c0004fa1:	53                   	push   ebx
c0004fa2:	83 ec 7c             	sub    esp,0x7c
c0004fa5:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fac:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fb3:	85 db                	test   ebx,ebx
c0004fb5:	0f 84 10 04 00 00    	je     c00053cb <f_open+0x432>
c0004fbb:	89 fe                	mov    esi,edi
c0004fbd:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fc1:	83 e6 3f             	and    esi,0x3f
c0004fc4:	89 f0                	mov    eax,esi
c0004fc6:	0f b6 c8             	movzx  ecx,al
c0004fc9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fd0:	e8 24 d7 ff ff       	call   c00026f9 <mount_volume>
c0004fd5:	89 c5                	mov    ebp,eax
c0004fd7:	85 c0                	test   eax,eax
c0004fd9:	0f 85 e6 03 00 00    	jne    c00053c5 <f_open+0x42c>
c0004fdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fe3:	bd 11 00 00 00       	mov    ebp,0x11
c0004fe8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fec:	83 ec 0c             	sub    esp,0xc
c0004fef:	68 60 04 00 00       	push   0x460
c0004ff4:	e8 a3 34 00 00       	call   c000849c <ff_memalloc>
c0004ff9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ffd:	83 c4 10             	add    esp,0x10
c0005000:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0005005:	0f 84 c0 03 00 00    	je     c00053cb <f_open+0x432>
c000500b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000500f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005013:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005019:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c000501c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000501f:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0005026:	8d 44 24 24          	lea    eax,[esp+0x24]
c000502a:	e8 40 fe ff ff       	call   c0004e6f <follow_path>
c000502f:	89 c5                	mov    ebp,eax
c0005031:	85 c0                	test   eax,eax
c0005033:	75 0c                	jne    c0005041 <f_open+0xa8>
c0005035:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c000503a:	79 05                	jns    c0005041 <f_open+0xa8>
c000503c:	bd 06 00 00 00       	mov    ebp,0x6
c0005041:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005047:	0f 84 84 01 00 00    	je     c00051d1 <f_open+0x238>
c000504d:	85 ed                	test   ebp,ebp
c000504f:	74 20                	je     c0005071 <f_open+0xd8>
c0005051:	83 fd 04             	cmp    ebp,0x4
c0005054:	0f 85 58 03 00 00    	jne    c00053b2 <f_open+0x419>
c000505a:	8d 44 24 24          	lea    eax,[esp+0x24]
c000505e:	83 ce 08             	or     esi,0x8
c0005061:	e8 8a f2 ff ff       	call   c00042f0 <dir_register>
c0005066:	89 c5                	mov    ebp,eax
c0005068:	85 c0                	test   eax,eax
c000506a:	74 2f                	je     c000509b <f_open+0x102>
c000506c:	e9 41 03 00 00       	jmp    c00053b2 <f_open+0x419>
c0005071:	bd 07 00 00 00       	mov    ebp,0x7
c0005076:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c000507b:	0f 85 31 03 00 00    	jne    c00053b2 <f_open+0x419>
c0005081:	bd 08 00 00 00       	mov    ebp,0x8
c0005086:	f7 c7 04 00 00 00    	test   edi,0x4
c000508c:	0f 85 20 03 00 00    	jne    c00053b2 <f_open+0x419>
c0005092:	83 e7 08             	and    edi,0x8
c0005095:	0f 84 65 01 00 00    	je     c0005200 <f_open+0x267>
c000509b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000509f:	8a 02                	mov    al,BYTE PTR [edx]
c00050a1:	3c 04                	cmp    al,0x4
c00050a3:	0f 85 97 00 00 00    	jne    c0005140 <f_open+0x1a7>
c00050a9:	8d 42 10             	lea    eax,[edx+0x10]
c00050ac:	89 13                	mov    DWORD PTR [ebx],edx
c00050ae:	89 da                	mov    edx,ebx
c00050b0:	e8 80 fd ff ff       	call   c0004e35 <init_alloc_info.isra.2>
c00050b5:	31 d2                	xor    edx,edx
c00050b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050bb:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050c0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c3:	83 c0 02             	add    eax,0x2
c00050c6:	e8 32 cc ff ff       	call   c0001cfd <mem_set>
c00050cb:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050d0:	31 d2                	xor    edx,edx
c00050d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050d6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050d9:	83 c0 26             	add    eax,0x26
c00050dc:	e8 1c cc ff ff       	call   c0001cfd <mem_set>
c00050e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050e5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050e8:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050ec:	ba 00 00 21 50       	mov    edx,0x50210000
c00050f1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050f4:	83 c0 08             	add    eax,0x8
c00050f7:	e8 e3 cb ff ff       	call   c0001cdf <st_dword>
c00050fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005100:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005103:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0005107:	8d 44 24 24          	lea    eax,[esp+0x24]
c000510b:	e8 b7 ea ff ff       	call   c0003bc7 <store_xdir>
c0005110:	89 c5                	mov    ebp,eax
c0005112:	85 c0                	test   eax,eax
c0005114:	0f 85 98 02 00 00    	jne    c00053b2 <f_open+0x419>
c000511a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000511d:	85 d2                	test   edx,edx
c000511f:	0f 84 db 00 00 00    	je     c0005200 <f_open+0x267>
c0005125:	31 c9                	xor    ecx,ecx
c0005127:	89 d8                	mov    eax,ebx
c0005129:	e8 8e e3 ff ff       	call   c00034bc <remove_chain>
c000512e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005132:	89 c5                	mov    ebp,eax
c0005134:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005137:	48                   	dec    eax
c0005138:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000513b:	e9 b8 00 00 00       	jmp    c00051f8 <f_open+0x25f>
c0005140:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005144:	89 ea                	mov    edx,ebp
c0005146:	e8 99 fc ff ff       	call   c0004de4 <ld_clust.isra.0>
c000514b:	ba 00 00 21 50       	mov    edx,0x50210000
c0005150:	89 c7                	mov    edi,eax
c0005152:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005155:	e8 85 cb ff ff       	call   c0001cdf <st_dword>
c000515a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000515e:	31 c9                	xor    ecx,ecx
c0005160:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005164:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005168:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000516c:	e8 9c fc ff ff       	call   c0004e0d <st_clust.isra.1>
c0005171:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005175:	31 d2                	xor    edx,edx
c0005177:	83 c0 1c             	add    eax,0x1c
c000517a:	e8 60 cb ff ff       	call   c0001cdf <st_dword>
c000517f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005183:	85 ff                	test   edi,edi
c0005185:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005189:	74 75                	je     c0005200 <f_open+0x267>
c000518b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518f:	31 c9                	xor    ecx,ecx
c0005191:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005194:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005197:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000519b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000519f:	89 fa                	mov    edx,edi
c00051a1:	8d 44 24 24          	lea    eax,[esp+0x24]
c00051a5:	e8 12 e3 ff ff       	call   c00034bc <remove_chain>
c00051aa:	89 c5                	mov    ebp,eax
c00051ac:	85 c0                	test   eax,eax
c00051ae:	0f 85 fe 01 00 00    	jne    c00053b2 <f_open+0x419>
c00051b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c0:	4f                   	dec    edi
c00051c1:	e8 81 d2 ff ff       	call   c0002447 <move_window>
c00051c6:	89 c5                	mov    ebp,eax
c00051c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051cc:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051cf:	eb 27                	jmp    c00051f8 <f_open+0x25f>
c00051d1:	85 ed                	test   ebp,ebp
c00051d3:	0f 85 d9 01 00 00    	jne    c00053b2 <f_open+0x419>
c00051d9:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051dd:	bd 04 00 00 00       	mov    ebp,0x4
c00051e2:	a8 10                	test   al,0x10
c00051e4:	0f 85 c8 01 00 00    	jne    c00053b2 <f_open+0x419>
c00051ea:	83 e7 02             	and    edi,0x2
c00051ed:	74 11                	je     c0005200 <f_open+0x267>
c00051ef:	bd 07 00 00 00       	mov    ebp,0x7
c00051f4:	a8 01                	test   al,0x1
c00051f6:	eb 02                	jmp    c00051fa <f_open+0x261>
c00051f8:	85 ed                	test   ebp,ebp
c00051fa:	0f 85 b2 01 00 00    	jne    c00053b2 <f_open+0x419>
c0005200:	f7 c6 08 00 00 00    	test   esi,0x8
c0005206:	74 03                	je     c000520b <f_open+0x272>
c0005208:	83 ce 40             	or     esi,0x40
c000520b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000520f:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0005212:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0005215:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005218:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c000521b:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000521f:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005222:	8a 02                	mov    al,BYTE PTR [edx]
c0005224:	3c 04                	cmp    al,0x4
c0005226:	75 2a                	jne    c0005252 <f_open+0x2b9>
c0005228:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000522c:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005231:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005234:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005238:	30 c0                	xor    al,al
c000523a:	09 c8                	or     eax,ecx
c000523c:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000523f:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005243:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005246:	8d 42 10             	lea    eax,[edx+0x10]
c0005249:	89 da                	mov    edx,ebx
c000524b:	e8 e5 fb ff ff       	call   c0004e35 <init_alloc_info.isra.2>
c0005250:	eb 1c                	jmp    c000526e <f_open+0x2d5>
c0005252:	89 fa                	mov    edx,edi
c0005254:	e8 8b fb ff ff       	call   c0004de4 <ld_clust.isra.0>
c0005259:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000525c:	8d 47 1c             	lea    eax,[edi+0x1c]
c000525f:	e8 12 ca ff ff       	call   c0001c76 <ld_dword>
c0005264:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000526b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000526e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005272:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005279:	89 03                	mov    DWORD PTR [ebx],eax
c000527b:	31 d2                	xor    edx,edx
c000527d:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005281:	b9 00 02 00 00       	mov    ecx,0x200
c0005286:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000528a:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000528e:	89 f0                	mov    eax,esi
c0005290:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005297:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000529a:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c00052a1:	8d 43 50             	lea    eax,[ebx+0x50]
c00052a4:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052ab:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052b6:	e8 42 ca ff ff       	call   c0001cfd <mem_set>
c00052bb:	83 e6 20             	and    esi,0x20
c00052be:	75 07                	jne    c00052c7 <f_open+0x32e>
c00052c0:	31 ed                	xor    ebp,ebp
c00052c2:	e9 eb 00 00 00       	jmp    c00053b2 <f_open+0x419>
c00052c7:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052ca:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052cd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052d1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052d9:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052dd:	74 e1                	je     c00052c0 <f_open+0x327>
c00052df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052e3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052e7:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052ea:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052f1:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052f4:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052f8:	31 ff                	xor    edi,edi
c00052fa:	c1 e5 09             	shl    ebp,0x9
c00052fd:	89 ee                	mov    esi,ebp
c00052ff:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0005303:	89 f8                	mov    eax,edi
c0005305:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005309:	73 22                	jae    c000532d <f_open+0x394>
c000530b:	89 d8                	mov    eax,ebx
c000530d:	e8 bd dc ff ff       	call   c0002fcf <get_fat>
c0005312:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005316:	89 c2                	mov    edx,eax
c0005318:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c000531c:	83 f8 01             	cmp    eax,0x1
c000531f:	76 10                	jbe    c0005331 <f_open+0x398>
c0005321:	83 f8 ff             	cmp    eax,0xffffffff
c0005324:	75 d9                	jne    c00052ff <f_open+0x366>
c0005326:	bd 01 00 00 00       	mov    ebp,0x1
c000532b:	eb 09                	jmp    c0005336 <f_open+0x39d>
c000532d:	31 ed                	xor    ebp,ebp
c000532f:	eb 05                	jmp    c0005336 <f_open+0x39d>
c0005331:	bd 02 00 00 00       	mov    ebp,0x2
c0005336:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005339:	85 ed                	test   ebp,ebp
c000533b:	75 75                	jne    c00053b2 <f_open+0x419>
c000533d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005341:	25 ff 01 00 00       	and    eax,0x1ff
c0005346:	0f 84 74 ff ff ff    	je     c00052c0 <f_open+0x327>
c000534c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005350:	bd 02 00 00 00       	mov    ebp,0x2
c0005355:	89 c8                	mov    eax,ecx
c0005357:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000535b:	e8 a2 cb ff ff       	call   c0001f02 <clst2sect>
c0005360:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005364:	89 d7                	mov    edi,edx
c0005366:	09 c7                	or     edi,eax
c0005368:	74 48                	je     c00053b2 <f_open+0x419>
c000536a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000536e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005372:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000537a:	0f ac fe 09          	shrd   esi,edi,0x9
c000537e:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005382:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005386:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005389:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000538d:	83 ec 0c             	sub    esp,0xc
c0005390:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005393:	6a 01                	push   0x1
c0005395:	52                   	push   edx
c0005396:	50                   	push   eax
c0005397:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000539b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000539f:	50                   	push   eax
c00053a0:	e8 79 c8 ff ff       	call   c0001c1e <disk_read>
c00053a5:	83 c4 20             	add    esp,0x20
c00053a8:	85 c0                	test   eax,eax
c00053aa:	0f 95 c0             	setne  al
c00053ad:	0f b6 c0             	movzx  eax,al
c00053b0:	89 c5                	mov    ebp,eax
c00053b2:	83 ec 0c             	sub    esp,0xc
c00053b5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053b9:	e8 f4 30 00 00       	call   c00084b2 <ff_memfree>
c00053be:	83 c4 10             	add    esp,0x10
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	74 06                	je     c00053cb <f_open+0x432>
c00053c5:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053cb:	83 c4 7c             	add    esp,0x7c
c00053ce:	89 e8                	mov    eax,ebp
c00053d0:	5b                   	pop    ebx
c00053d1:	5e                   	pop    esi
c00053d2:	5f                   	pop    edi
c00053d3:	5d                   	pop    ebp
c00053d4:	c3                   	ret    

c00053d5 <f_read>:
c00053d5:	55                   	push   ebp
c00053d6:	57                   	push   edi
c00053d7:	56                   	push   esi
c00053d8:	53                   	push   ebx
c00053d9:	83 ec 2c             	sub    esp,0x2c
c00053dc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053e0:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053e4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053ea:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ee:	89 d8                	mov    eax,ebx
c00053f0:	e8 77 cf ff ff       	call   c000236c <validate>
c00053f5:	89 c5                	mov    ebp,eax
c00053f7:	85 c0                	test   eax,eax
c00053f9:	0f 85 4c 02 00 00    	jne    c000564b <f_read+0x276>
c00053ff:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005403:	85 ed                	test   ebp,ebp
c0005405:	0f 85 40 02 00 00    	jne    c000564b <f_read+0x276>
c000540b:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c000540f:	0f 84 31 02 00 00    	je     c0005646 <f_read+0x271>
c0005415:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005418:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000541b:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c000541e:	bf 00 00 00 00       	mov    edi,0x0
c0005423:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005426:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000542a:	89 d1                	mov    ecx,edx
c000542c:	19 f9                	sbb    ecx,edi
c000542e:	0f 83 cf 00 00 00    	jae    c0005503 <f_read+0x12e>
c0005434:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005438:	e9 c6 00 00 00       	jmp    c0005503 <f_read+0x12e>
c000543d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005440:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005443:	89 d0                	mov    eax,edx
c0005445:	25 ff 01 00 00       	and    eax,0x1ff
c000544a:	0f 85 c9 01 00 00    	jne    c0005619 <f_read+0x244>
c0005450:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005454:	89 d6                	mov    esi,edx
c0005456:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000545a:	89 cf                	mov    edi,ecx
c000545c:	48                   	dec    eax
c000545d:	0f ac fe 09          	shrd   esi,edi,0x9
c0005461:	21 f0                	and    eax,esi
c0005463:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005467:	0f 84 a6 00 00 00    	je     c0005513 <f_read+0x13e>
c000546d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005471:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005474:	89 c8                	mov    eax,ecx
c0005476:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005479:	e8 84 ca ff ff       	call   c0001f02 <clst2sect>
c000547e:	89 d7                	mov    edi,edx
c0005480:	09 c7                	or     edi,eax
c0005482:	0f 84 b4 00 00 00    	je     c000553c <f_read+0x167>
c0005488:	31 ff                	xor    edi,edi
c000548a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000548e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005491:	01 c6                	add    esi,eax
c0005493:	11 d7                	adc    edi,edx
c0005495:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000549d:	0f 86 fd 00 00 00    	jbe    c00055a0 <f_read+0x1cb>
c00054a3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054ab:	c1 e8 09             	shr    eax,0x9
c00054ae:	89 04 24             	mov    DWORD PTR [esp],eax
c00054b1:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054b5:	03 14 24             	add    edx,DWORD PTR [esp]
c00054b8:	39 c2                	cmp    edx,eax
c00054ba:	76 07                	jbe    c00054c3 <f_read+0xee>
c00054bc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054c0:	89 04 24             	mov    DWORD PTR [esp],eax
c00054c3:	83 ec 0c             	sub    esp,0xc
c00054c6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054ca:	57                   	push   edi
c00054cb:	56                   	push   esi
c00054cc:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054d0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054d4:	50                   	push   eax
c00054d5:	e8 44 c7 ff ff       	call   c0001c1e <disk_read>
c00054da:	83 c4 20             	add    esp,0x20
c00054dd:	85 c0                	test   eax,eax
c00054df:	75 6e                	jne    c000554f <f_read+0x17a>
c00054e1:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054e5:	78 7e                	js     c0005565 <f_read+0x190>
c00054e7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054ea:	c1 e6 09             	shl    esi,0x9
c00054ed:	31 ff                	xor    edi,edi
c00054ef:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054f3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054f7:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054fb:	01 30                	add    DWORD PTR [eax],esi
c00054fd:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c0005500:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0005503:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005508:	0f 85 2f ff ff ff    	jne    c000543d <f_read+0x68>
c000550e:	e9 38 01 00 00       	jmp    c000564b <f_read+0x276>
c0005513:	89 c8                	mov    eax,ecx
c0005515:	09 d0                	or     eax,edx
c0005517:	75 05                	jne    c000551e <f_read+0x149>
c0005519:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000551c:	eb 19                	jmp    c0005537 <f_read+0x162>
c000551e:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005522:	74 09                	je     c000552d <f_read+0x158>
c0005524:	89 d8                	mov    eax,ebx
c0005526:	e8 f8 c9 ff ff       	call   c0001f23 <clmt_clust>
c000552b:	eb 0a                	jmp    c0005537 <f_read+0x162>
c000552d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005530:	89 d8                	mov    eax,ebx
c0005532:	e8 98 da ff ff       	call   c0002fcf <get_fat>
c0005537:	83 f8 01             	cmp    eax,0x1
c000553a:	77 0e                	ja     c000554a <f_read+0x175>
c000553c:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005540:	bd 02 00 00 00       	mov    ebp,0x2
c0005545:	e9 01 01 00 00       	jmp    c000564b <f_read+0x276>
c000554a:	83 f8 ff             	cmp    eax,0xffffffff
c000554d:	75 0e                	jne    c000555d <f_read+0x188>
c000554f:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005553:	bd 01 00 00 00       	mov    ebp,0x1
c0005558:	e9 ee 00 00 00       	jmp    c000564b <f_read+0x276>
c000555d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005560:	e9 08 ff ff ff       	jmp    c000546d <f_read+0x98>
c0005565:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005568:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000556b:	29 f0                	sub    eax,esi
c000556d:	19 fa                	sbb    edx,edi
c000556f:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005572:	89 d7                	mov    edi,edx
c0005574:	ba 00 00 00 00       	mov    edx,0x0
c0005579:	89 f9                	mov    ecx,edi
c000557b:	19 d1                	sbb    ecx,edx
c000557d:	0f 83 64 ff ff ff    	jae    c00054e7 <f_read+0x112>
c0005583:	89 c7                	mov    edi,eax
c0005585:	8d 53 50             	lea    edx,[ebx+0x50]
c0005588:	c1 e7 09             	shl    edi,0x9
c000558b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000558f:	b9 00 02 00 00       	mov    ecx,0x200
c0005594:	01 f8                	add    eax,edi
c0005596:	e8 4d c7 ff ff       	call   c0001ce8 <mem_cpy>
c000559b:	e9 47 ff ff ff       	jmp    c00054e7 <f_read+0x112>
c00055a0:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00055a3:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00055a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00055a9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055ad:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055b1:	75 05                	jne    c00055b8 <f_read+0x1e3>
c00055b3:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055b6:	74 5b                	je     c0005613 <f_read+0x23e>
c00055b8:	8d 43 50             	lea    eax,[ebx+0x50]
c00055bb:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055c3:	79 2a                	jns    c00055ef <f_read+0x21a>
c00055c5:	83 ec 0c             	sub    esp,0xc
c00055c8:	6a 01                	push   0x1
c00055ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055d6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055da:	50                   	push   eax
c00055db:	e8 54 c6 ff ff       	call   c0001c34 <disk_write>
c00055e0:	83 c4 20             	add    esp,0x20
c00055e3:	85 c0                	test   eax,eax
c00055e5:	0f 85 64 ff ff ff    	jne    c000554f <f_read+0x17a>
c00055eb:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ef:	83 ec 0c             	sub    esp,0xc
c00055f2:	6a 01                	push   0x1
c00055f4:	57                   	push   edi
c00055f5:	56                   	push   esi
c00055f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055fa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055fe:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005602:	50                   	push   eax
c0005603:	e8 16 c6 ff ff       	call   c0001c1e <disk_read>
c0005608:	83 c4 20             	add    esp,0x20
c000560b:	85 c0                	test   eax,eax
c000560d:	0f 85 3c ff ff ff    	jne    c000554f <f_read+0x17a>
c0005613:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005616:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005619:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000561c:	ba 00 02 00 00       	mov    edx,0x200
c0005621:	25 ff 01 00 00       	and    eax,0x1ff
c0005626:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000562a:	29 c2                	sub    edx,eax
c000562c:	39 d6                	cmp    esi,edx
c000562e:	76 02                	jbe    c0005632 <f_read+0x25d>
c0005630:	89 d6                	mov    esi,edx
c0005632:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005636:	89 f1                	mov    ecx,esi
c0005638:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000563c:	e8 a7 c6 ff ff       	call   c0001ce8 <mem_cpy>
c0005641:	e9 a7 fe ff ff       	jmp    c00054ed <f_read+0x118>
c0005646:	bd 07 00 00 00       	mov    ebp,0x7
c000564b:	83 c4 2c             	add    esp,0x2c
c000564e:	89 e8                	mov    eax,ebp
c0005650:	5b                   	pop    ebx
c0005651:	5e                   	pop    esi
c0005652:	5f                   	pop    edi
c0005653:	5d                   	pop    ebp
c0005654:	c3                   	ret    

c0005655 <f_write>:
c0005655:	55                   	push   ebp
c0005656:	57                   	push   edi
c0005657:	56                   	push   esi
c0005658:	53                   	push   ebx
c0005659:	83 ec 2c             	sub    esp,0x2c
c000565c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005660:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005664:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000566a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000566e:	89 d8                	mov    eax,ebx
c0005670:	e8 f7 cc ff ff       	call   c000236c <validate>
c0005675:	89 c5                	mov    ebp,eax
c0005677:	85 c0                	test   eax,eax
c0005679:	0f 85 86 02 00 00    	jne    c0005905 <f_write+0x2b0>
c000567f:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005683:	85 ed                	test   ebp,ebp
c0005685:	0f 85 7a 02 00 00    	jne    c0005905 <f_write+0x2b0>
c000568b:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000568f:	0f 84 6b 02 00 00    	je     c0005900 <f_write+0x2ab>
c0005695:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005699:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000569c:	0f 84 43 01 00 00    	je     c00057e5 <f_write+0x190>
c00056a2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00056a5:	89 c1                	mov    ecx,eax
c00056a7:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056ab:	0f 83 34 01 00 00    	jae    c00057e5 <f_write+0x190>
c00056b1:	f7 d0                	not    eax
c00056b3:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056b7:	e9 29 01 00 00       	jmp    c00057e5 <f_write+0x190>
c00056bc:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056bf:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056c2:	89 d0                	mov    eax,edx
c00056c4:	25 ff 01 00 00       	and    eax,0x1ff
c00056c9:	0f 85 00 02 00 00    	jne    c00058cf <f_write+0x27a>
c00056cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056d3:	89 d6                	mov    esi,edx
c00056d5:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056d9:	89 cf                	mov    edi,ecx
c00056db:	48                   	dec    eax
c00056dc:	0f ac fe 09          	shrd   esi,edi,0x9
c00056e0:	21 f0                	and    eax,esi
c00056e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056e6:	0f 84 06 01 00 00    	je     c00057f2 <f_write+0x19d>
c00056ec:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056f0:	0f 88 6e 01 00 00    	js     c0005864 <f_write+0x20f>
c00056f6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056fa:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056fd:	89 c8                	mov    eax,ecx
c00056ff:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0005703:	e8 fa c7 ff ff       	call   c0001f02 <clst2sect>
c0005708:	89 d1                	mov    ecx,edx
c000570a:	09 c1                	or     ecx,eax
c000570c:	0f 84 1c 01 00 00    	je     c000582e <f_write+0x1d9>
c0005712:	31 ff                	xor    edi,edi
c0005714:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005718:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000571c:	01 c6                	add    esi,eax
c000571e:	11 d7                	adc    edi,edx
c0005720:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005728:	0f 86 63 01 00 00    	jbe    c0005891 <f_write+0x23c>
c000572e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005732:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005736:	c1 e8 09             	shr    eax,0x9
c0005739:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000573d:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005741:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005745:	39 c2                	cmp    edx,eax
c0005747:	76 08                	jbe    c0005751 <f_write+0xfc>
c0005749:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000574d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005751:	83 ec 0c             	sub    esp,0xc
c0005754:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005758:	57                   	push   edi
c0005759:	56                   	push   esi
c000575a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000575e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005762:	50                   	push   eax
c0005763:	e8 cc c4 ff ff       	call   c0001c34 <disk_write>
c0005768:	83 c4 20             	add    esp,0x20
c000576b:	85 c0                	test   eax,eax
c000576d:	0f 85 ce 00 00 00    	jne    c0005841 <f_write+0x1ec>
c0005773:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005776:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005779:	29 f0                	sub    eax,esi
c000577b:	19 fa                	sbb    edx,edi
c000577d:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005781:	89 d7                	mov    edi,edx
c0005783:	ba 00 00 00 00       	mov    edx,0x0
c0005788:	89 f9                	mov    ecx,edi
c000578a:	19 d1                	sbb    ecx,edx
c000578c:	73 1c                	jae    c00057aa <f_write+0x155>
c000578e:	89 c7                	mov    edi,eax
c0005790:	b9 00 02 00 00       	mov    ecx,0x200
c0005795:	c1 e7 09             	shl    edi,0x9
c0005798:	8d 43 50             	lea    eax,[ebx+0x50]
c000579b:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000579f:	89 fa                	mov    edx,edi
c00057a1:	e8 42 c5 ff ff       	call   c0001ce8 <mem_cpy>
c00057a6:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057aa:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057ae:	c1 e6 09             	shl    esi,0x9
c00057b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057b5:	31 ff                	xor    edi,edi
c00057b7:	01 30                	add    DWORD PTR [eax],esi
c00057b9:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057bd:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057c1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057c4:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057c7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057ca:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057cd:	89 c1                	mov    ecx,eax
c00057cf:	39 f2                	cmp    edx,esi
c00057d1:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057d4:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057d7:	19 f9                	sbb    ecx,edi
c00057d9:	73 04                	jae    c00057df <f_write+0x18a>
c00057db:	89 f2                	mov    edx,esi
c00057dd:	89 f8                	mov    eax,edi
c00057df:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057e2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057e5:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057ea:	0f 85 cc fe ff ff    	jne    c00056bc <f_write+0x67>
c00057f0:	eb 2e                	jmp    c0005820 <f_write+0x1cb>
c00057f2:	89 c8                	mov    eax,ecx
c00057f4:	09 d0                	or     eax,edx
c00057f6:	75 0b                	jne    c0005803 <f_write+0x1ae>
c00057f8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057fb:	31 d2                	xor    edx,edx
c00057fd:	85 c0                	test   eax,eax
c00057ff:	75 28                	jne    c0005829 <f_write+0x1d4>
c0005801:	eb 12                	jmp    c0005815 <f_write+0x1c0>
c0005803:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005807:	74 09                	je     c0005812 <f_write+0x1bd>
c0005809:	89 d8                	mov    eax,ebx
c000580b:	e8 13 c7 ff ff       	call   c0001f23 <clmt_clust>
c0005810:	eb 0a                	jmp    c000581c <f_write+0x1c7>
c0005812:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005815:	89 d8                	mov    eax,ebx
c0005817:	e8 a1 da ff ff       	call   c00032bd <create_chain>
c000581c:	85 c0                	test   eax,eax
c000581e:	75 09                	jne    c0005829 <f_write+0x1d4>
c0005820:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005824:	e9 dc 00 00 00       	jmp    c0005905 <f_write+0x2b0>
c0005829:	83 f8 01             	cmp    eax,0x1
c000582c:	75 0e                	jne    c000583c <f_write+0x1e7>
c000582e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005832:	bd 02 00 00 00       	mov    ebp,0x2
c0005837:	e9 c9 00 00 00       	jmp    c0005905 <f_write+0x2b0>
c000583c:	83 f8 ff             	cmp    eax,0xffffffff
c000583f:	75 0e                	jne    c000584f <f_write+0x1fa>
c0005841:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005845:	bd 01 00 00 00       	mov    ebp,0x1
c000584a:	e9 b6 00 00 00       	jmp    c0005905 <f_write+0x2b0>
c000584f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005852:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005856:	0f 85 90 fe ff ff    	jne    c00056ec <f_write+0x97>
c000585c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000585f:	e9 88 fe ff ff       	jmp    c00056ec <f_write+0x97>
c0005864:	83 ec 0c             	sub    esp,0xc
c0005867:	8d 43 50             	lea    eax,[ebx+0x50]
c000586a:	6a 01                	push   0x1
c000586c:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000586f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005872:	50                   	push   eax
c0005873:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005877:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000587b:	50                   	push   eax
c000587c:	e8 b3 c3 ff ff       	call   c0001c34 <disk_write>
c0005881:	83 c4 20             	add    esp,0x20
c0005884:	85 c0                	test   eax,eax
c0005886:	75 b9                	jne    c0005841 <f_write+0x1ec>
c0005888:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000588c:	e9 65 fe ff ff       	jmp    c00056f6 <f_write+0xa1>
c0005891:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005894:	75 05                	jne    c000589b <f_write+0x246>
c0005896:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005899:	74 2e                	je     c00058c9 <f_write+0x274>
c000589b:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000589e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058a1:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c00058a4:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c00058a7:	73 20                	jae    c00058c9 <f_write+0x274>
c00058a9:	83 ec 0c             	sub    esp,0xc
c00058ac:	8d 43 50             	lea    eax,[ebx+0x50]
c00058af:	6a 01                	push   0x1
c00058b1:	57                   	push   edi
c00058b2:	56                   	push   esi
c00058b3:	50                   	push   eax
c00058b4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058b8:	50                   	push   eax
c00058b9:	e8 60 c3 ff ff       	call   c0001c1e <disk_read>
c00058be:	83 c4 20             	add    esp,0x20
c00058c1:	85 c0                	test   eax,eax
c00058c3:	0f 85 78 ff ff ff    	jne    c0005841 <f_write+0x1ec>
c00058c9:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058cc:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058cf:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058d2:	ba 00 02 00 00       	mov    edx,0x200
c00058d7:	25 ff 01 00 00       	and    eax,0x1ff
c00058dc:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058e0:	29 c2                	sub    edx,eax
c00058e2:	39 d6                	cmp    esi,edx
c00058e4:	76 02                	jbe    c00058e8 <f_write+0x293>
c00058e6:	89 d6                	mov    esi,edx
c00058e8:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058ec:	89 f1                	mov    ecx,esi
c00058ee:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058f2:	e8 f1 c3 ff ff       	call   c0001ce8 <mem_cpy>
c00058f7:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058fb:	e9 b1 fe ff ff       	jmp    c00057b1 <f_write+0x15c>
c0005900:	bd 07 00 00 00       	mov    ebp,0x7
c0005905:	83 c4 2c             	add    esp,0x2c
c0005908:	89 e8                	mov    eax,ebp
c000590a:	5b                   	pop    ebx
c000590b:	5e                   	pop    esi
c000590c:	5f                   	pop    edi
c000590d:	5d                   	pop    ebp
c000590e:	c3                   	ret    

c000590f <f_sync>:
c000590f:	56                   	push   esi
c0005910:	53                   	push   ebx
c0005911:	83 ec 64             	sub    esp,0x64
c0005914:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005918:	8d 54 24 10          	lea    edx,[esp+0x10]
c000591c:	89 d8                	mov    eax,ebx
c000591e:	e8 49 ca ff ff       	call   c000236c <validate>
c0005923:	85 c0                	test   eax,eax
c0005925:	0f 85 ba 01 00 00    	jne    c0005ae5 <f_sync+0x1d6>
c000592b:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000592e:	f6 c2 40             	test   dl,0x40
c0005931:	0f 84 ae 01 00 00    	je     c0005ae5 <f_sync+0x1d6>
c0005937:	84 d2                	test   dl,dl
c0005939:	79 33                	jns    c000596e <f_sync+0x5f>
c000593b:	83 ec 0c             	sub    esp,0xc
c000593e:	8d 43 50             	lea    eax,[ebx+0x50]
c0005941:	6a 01                	push   0x1
c0005943:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005946:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005949:	50                   	push   eax
c000594a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000594e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005952:	50                   	push   eax
c0005953:	e8 dc c2 ff ff       	call   c0001c34 <disk_write>
c0005958:	83 c4 20             	add    esp,0x20
c000595b:	89 c2                	mov    edx,eax
c000595d:	b8 01 00 00 00       	mov    eax,0x1
c0005962:	85 d2                	test   edx,edx
c0005964:	0f 85 7b 01 00 00    	jne    c0005ae5 <f_sync+0x1d6>
c000596a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000596e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005972:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005975:	0f 85 11 01 00 00    	jne    c0005a8c <f_sync+0x17d>
c000597b:	89 d8                	mov    eax,ebx
c000597d:	e8 13 d6 ff ff       	call   c0002f95 <fill_first_frag>
c0005982:	85 c0                	test   eax,eax
c0005984:	0f 85 5b 01 00 00    	jne    c0005ae5 <f_sync+0x1d6>
c000598a:	83 c9 ff             	or     ecx,0xffffffff
c000598d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005990:	89 d8                	mov    eax,ebx
c0005992:	e8 c9 d5 ff ff       	call   c0002f60 <fill_last_frag>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 46 01 00 00    	jne    c0005ae5 <f_sync+0x1d6>
c000599f:	83 ec 0c             	sub    esp,0xc
c00059a2:	68 60 04 00 00       	push   0x460
c00059a7:	e8 f0 2a 00 00       	call   c000849c <ff_memalloc>
c00059ac:	83 c4 10             	add    esp,0x10
c00059af:	89 c6                	mov    esi,eax
c00059b1:	b8 11 00 00 00       	mov    eax,0x11
c00059b6:	85 f6                	test   esi,esi
c00059b8:	0f 84 27 01 00 00    	je     c0005ae5 <f_sync+0x1d6>
c00059be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c2:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059c8:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059cb:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059ce:	89 da                	mov    edx,ebx
c00059d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059d4:	e8 af df ff ff       	call   c0003988 <load_obj_xdir>
c00059d9:	85 c0                	test   eax,eax
c00059db:	0f 85 95 00 00 00    	jne    c0005a76 <f_sync+0x167>
c00059e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059e8:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059ec:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ef:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059f2:	83 ca 01             	or     edx,0x1
c00059f5:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059f8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059fb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fe:	83 c0 34             	add    eax,0x34
c0005a01:	e8 d9 c2 ff ff       	call   c0001cdf <st_dword>
c0005a06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a0a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a0d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a10:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a13:	83 c0 38             	add    eax,0x38
c0005a16:	e8 c7 c2 ff ff       	call   c0001ce2 <st_qword>
c0005a1b:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a22:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a25:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a28:	83 c0 28             	add    eax,0x28
c0005a2b:	e8 b2 c2 ff ff       	call   c0001ce2 <st_qword>
c0005a30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a34:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a39:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a3c:	83 c0 0c             	add    eax,0xc
c0005a3f:	e8 9b c2 ff ff       	call   c0001cdf <st_dword>
c0005a44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a48:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a4b:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a4f:	31 d2                	xor    edx,edx
c0005a51:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a54:	83 c0 10             	add    eax,0x10
c0005a57:	e8 83 c2 ff ff       	call   c0001cdf <st_dword>
c0005a5c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a60:	e8 62 e1 ff ff       	call   c0003bc7 <store_xdir>
c0005a65:	85 c0                	test   eax,eax
c0005a67:	75 0d                	jne    c0005a76 <f_sync+0x167>
c0005a69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a6d:	e8 00 eb ff ff       	call   c0004572 <sync_fs>
c0005a72:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a76:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a7a:	83 ec 0c             	sub    esp,0xc
c0005a7d:	56                   	push   esi
c0005a7e:	e8 2f 2a 00 00       	call   c00084b2 <ff_memfree>
c0005a83:	83 c4 10             	add    esp,0x10
c0005a86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a8a:	eb 59                	jmp    c0005ae5 <f_sync+0x1d6>
c0005a8c:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a8f:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a92:	e8 b0 c9 ff ff       	call   c0002447 <move_window>
c0005a97:	85 c0                	test   eax,eax
c0005a99:	75 4a                	jne    c0005ae5 <f_sync+0x1d6>
c0005a9b:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a9e:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005aa2:	89 f2                	mov    edx,esi
c0005aa4:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005aa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aa9:	e8 5f f3 ff ff       	call   c0004e0d <st_clust.isra.1>
c0005aae:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005ab1:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005ab4:	e8 26 c2 ff ff       	call   c0001cdf <st_dword>
c0005ab9:	8d 46 16             	lea    eax,[esi+0x16]
c0005abc:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ac1:	e8 19 c2 ff ff       	call   c0001cdf <st_dword>
c0005ac6:	8d 46 12             	lea    eax,[esi+0x12]
c0005ac9:	31 d2                	xor    edx,edx
c0005acb:	e8 0b c2 ff ff       	call   c0001cdb <st_word>
c0005ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ad4:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ad8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005adc:	e8 91 ea ff ff       	call   c0004572 <sync_fs>
c0005ae1:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005ae5:	83 c4 64             	add    esp,0x64
c0005ae8:	5b                   	pop    ebx
c0005ae9:	5e                   	pop    esi
c0005aea:	c3                   	ret    

c0005aeb <f_close>:
c0005aeb:	53                   	push   ebx
c0005aec:	83 ec 24             	sub    esp,0x24
c0005aef:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005af3:	53                   	push   ebx
c0005af4:	e8 16 fe ff ff       	call   c000590f <f_sync>
c0005af9:	83 c4 10             	add    esp,0x10
c0005afc:	85 c0                	test   eax,eax
c0005afe:	75 15                	jne    c0005b15 <f_close+0x2a>
c0005b00:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005b04:	89 d8                	mov    eax,ebx
c0005b06:	e8 61 c8 ff ff       	call   c000236c <validate>
c0005b0b:	85 c0                	test   eax,eax
c0005b0d:	75 06                	jne    c0005b15 <f_close+0x2a>
c0005b0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b15:	83 c4 18             	add    esp,0x18
c0005b18:	5b                   	pop    ebx
c0005b19:	c3                   	ret    

c0005b1a <f_lseek>:
c0005b1a:	55                   	push   ebp
c0005b1b:	57                   	push   edi
c0005b1c:	56                   	push   esi
c0005b1d:	53                   	push   ebx
c0005b1e:	83 ec 3c             	sub    esp,0x3c
c0005b21:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b25:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b29:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b2d:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b30:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b3a:	e8 2d c8 ff ff       	call   c000236c <validate>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	85 c0                	test   eax,eax
c0005b45:	0f 85 7a 04 00 00    	jne    c0005fc5 <f_lseek+0x4ab>
c0005b4b:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b4f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b53:	85 c0                	test   eax,eax
c0005b55:	0f 85 6a 04 00 00    	jne    c0005fc5 <f_lseek+0x4ab>
c0005b5b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b5f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b62:	74 0c                	je     c0005b70 <f_lseek+0x56>
c0005b64:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b67:	85 c0                	test   eax,eax
c0005b69:	75 1f                	jne    c0005b8a <f_lseek+0x70>
c0005b6b:	e9 b5 01 00 00       	jmp    c0005d25 <f_lseek+0x20b>
c0005b70:	83 c9 ff             	or     ecx,0xffffffff
c0005b73:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b76:	89 d8                	mov    eax,ebx
c0005b78:	e8 e3 d3 ff ff       	call   c0002f60 <fill_last_frag>
c0005b7d:	85 c0                	test   eax,eax
c0005b7f:	74 e3                	je     c0005b64 <f_lseek+0x4a>
c0005b81:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b85:	e9 3b 04 00 00       	jmp    c0005fc5 <f_lseek+0x4ab>
c0005b8a:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b8f:	0f 85 ac 00 00 00    	jne    c0005c41 <f_lseek+0x127>
c0005b95:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b99:	0f 85 a2 00 00 00    	jne    c0005c41 <f_lseek+0x127>
c0005b9f:	8d 78 04             	lea    edi,[eax+0x4]
c0005ba2:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005ba5:	8b 00                	mov    eax,DWORD PTR [eax]
c0005ba7:	be 02 00 00 00       	mov    esi,0x2
c0005bac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005bb0:	85 ed                	test   ebp,ebp
c0005bb2:	74 73                	je     c0005c27 <f_lseek+0x10d>
c0005bb4:	89 e9                	mov    ecx,ebp
c0005bb6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bbd:	ff 04 24             	inc    DWORD PTR [esp]
c0005bc0:	89 ca                	mov    edx,ecx
c0005bc2:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bc6:	89 d8                	mov    eax,ebx
c0005bc8:	e8 02 d4 ff ff       	call   c0002fcf <get_fat>
c0005bcd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bd1:	83 f8 01             	cmp    eax,0x1
c0005bd4:	77 11                	ja     c0005be7 <f_lseek+0xcd>
c0005bd6:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bda:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005be2:	e9 de 03 00 00       	jmp    c0005fc5 <f_lseek+0x4ab>
c0005be7:	83 f8 ff             	cmp    eax,0xffffffff
c0005bea:	75 11                	jne    c0005bfd <f_lseek+0xe3>
c0005bec:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bf0:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bf8:	e9 c8 03 00 00       	jmp    c0005fc5 <f_lseek+0x4ab>
c0005bfd:	8d 51 01             	lea    edx,[ecx+0x1]
c0005c00:	89 c1                	mov    ecx,eax
c0005c02:	39 c2                	cmp    edx,eax
c0005c04:	74 b7                	je     c0005bbd <f_lseek+0xa3>
c0005c06:	83 c6 02             	add    esi,0x2
c0005c09:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c0d:	72 0b                	jb     c0005c1a <f_lseek+0x100>
c0005c0f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c12:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c15:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c17:	83 c7 08             	add    edi,0x8
c0005c1a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c1e:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c21:	76 04                	jbe    c0005c27 <f_lseek+0x10d>
c0005c23:	89 c5                	mov    ebp,eax
c0005c25:	eb 8d                	jmp    c0005bb4 <f_lseek+0x9a>
c0005c27:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c2a:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c2e:	89 30                	mov    DWORD PTR [eax],esi
c0005c30:	0f 87 87 03 00 00    	ja     c0005fbd <f_lseek+0x4a3>
c0005c36:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c3c:	e9 84 03 00 00       	jmp    c0005fc5 <f_lseek+0x4ab>
c0005c41:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c44:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c4b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c53:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c5a:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c5e:	73 0f                	jae    c0005c6f <f_lseek+0x155>
c0005c60:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c63:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c67:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c6b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c6f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c77:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c7a:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c81:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c85:	0f 84 3a 03 00 00    	je     c0005fc5 <f_lseek+0x4ab>
c0005c8b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c8f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c93:	83 c6 ff             	add    esi,0xffffffff
c0005c96:	89 d8                	mov    eax,ebx
c0005c98:	83 d7 ff             	adc    edi,0xffffffff
c0005c9b:	89 f2                	mov    edx,esi
c0005c9d:	89 f9                	mov    ecx,edi
c0005c9f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005ca3:	89 34 24             	mov    DWORD PTR [esp],esi
c0005ca6:	e8 78 c2 ff ff       	call   c0001f23 <clmt_clust>
c0005cab:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005caf:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005cb2:	89 c2                	mov    edx,eax
c0005cb4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cb8:	89 c8                	mov    eax,ecx
c0005cba:	e8 43 c2 ff ff       	call   c0001f02 <clst2sect>
c0005cbf:	89 d7                	mov    edi,edx
c0005cc1:	09 c7                	or     edi,eax
c0005cc3:	0f 84 0d ff ff ff    	je     c0005bd6 <f_lseek+0xbc>
c0005cc9:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005ccd:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005cd3:	0f 84 ec 02 00 00    	je     c0005fc5 <f_lseek+0x4ab>
c0005cd9:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cdd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ce1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ce4:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ce8:	0f ac fe 09          	shrd   esi,edi,0x9
c0005cec:	4d                   	dec    ebp
c0005ced:	31 ff                	xor    edi,edi
c0005cef:	21 ee                	and    esi,ebp
c0005cf1:	01 c6                	add    esi,eax
c0005cf3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cf6:	11 d7                	adc    edi,edx
c0005cf8:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cfb:	39 fa                	cmp    edx,edi
c0005cfd:	75 08                	jne    c0005d07 <f_lseek+0x1ed>
c0005cff:	39 f0                	cmp    eax,esi
c0005d01:	0f 84 be 02 00 00    	je     c0005fc5 <f_lseek+0x4ab>
c0005d07:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d0a:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d0e:	0f 89 80 02 00 00    	jns    c0005f94 <f_lseek+0x47a>
c0005d14:	83 ec 0c             	sub    esp,0xc
c0005d17:	6a 01                	push   0x1
c0005d19:	52                   	push   edx
c0005d1a:	50                   	push   eax
c0005d1b:	55                   	push   ebp
c0005d1c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d20:	e9 5a 02 00 00       	jmp    c0005f7f <f_lseek+0x465>
c0005d25:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d29:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d2c:	74 16                	je     c0005d44 <f_lseek+0x22a>
c0005d2e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d33:	76 0f                	jbe    c0005d44 <f_lseek+0x22a>
c0005d35:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d3c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d44:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d47:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d4a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d4d:	89 c7                	mov    edi,eax
c0005d4f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d53:	73 0d                	jae    c0005d62 <f_lseek+0x248>
c0005d55:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d59:	75 07                	jne    c0005d62 <f_lseek+0x248>
c0005d5b:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d5e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d62:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d65:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d68:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d6c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d73:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d7a:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d7d:	75 09                	jne    c0005d88 <f_lseek+0x26e>
c0005d7f:	31 f6                	xor    esi,esi
c0005d81:	31 ff                	xor    edi,edi
c0005d83:	e9 af 01 00 00       	jmp    c0005f37 <f_lseek+0x41d>
c0005d88:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d8c:	89 d7                	mov    edi,edx
c0005d8e:	c1 e1 09             	shl    ecx,0x9
c0005d91:	09 c7                	or     edi,eax
c0005d93:	89 cd                	mov    ebp,ecx
c0005d95:	74 6d                	je     c0005e04 <f_lseek+0x2ea>
c0005d97:	83 c0 ff             	add    eax,0xffffffff
c0005d9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d9e:	83 d2 ff             	adc    edx,0xffffffff
c0005da1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005da4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005da8:	83 c0 ff             	add    eax,0xffffffff
c0005dab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005daf:	83 d2 ff             	adc    edx,0xffffffff
c0005db2:	31 ff                	xor    edi,edi
c0005db4:	57                   	push   edi
c0005db5:	51                   	push   ecx
c0005db6:	52                   	push   edx
c0005db7:	50                   	push   eax
c0005db8:	e8 07 0c 02 00       	call   c00269c4 <__udivdi3>
c0005dbd:	83 c4 10             	add    esp,0x10
c0005dc0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dc4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dc8:	57                   	push   edi
c0005dc9:	55                   	push   ebp
c0005dca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dd2:	e8 ed 0b 02 00       	call   c00269c4 <__udivdi3>
c0005dd7:	83 c4 10             	add    esp,0x10
c0005dda:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dde:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005de2:	19 d1                	sbb    ecx,edx
c0005de4:	72 1e                	jb     c0005e04 <f_lseek+0x2ea>
c0005de6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005dea:	89 e9                	mov    ecx,ebp
c0005dec:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005def:	f7 d9                	neg    ecx
c0005df1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005df4:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005df8:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005dfb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dfe:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005e02:	eb 28                	jmp    c0005e2c <f_lseek+0x312>
c0005e04:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005e07:	85 c0                	test   eax,eax
c0005e09:	75 1e                	jne    c0005e29 <f_lseek+0x30f>
c0005e0b:	31 d2                	xor    edx,edx
c0005e0d:	89 d8                	mov    eax,ebx
c0005e0f:	e8 a9 d4 ff ff       	call   c00032bd <create_chain>
c0005e14:	83 f8 01             	cmp    eax,0x1
c0005e17:	0f 84 b9 fd ff ff    	je     c0005bd6 <f_lseek+0xbc>
c0005e1d:	83 f8 ff             	cmp    eax,0xffffffff
c0005e20:	0f 84 c6 fd ff ff    	je     c0005bec <f_lseek+0xd2>
c0005e26:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e29:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e2c:	85 c0                	test   eax,eax
c0005e2e:	0f 84 4b ff ff ff    	je     c0005d7f <f_lseek+0x265>
c0005e34:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e38:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e40:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e43:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e47:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e4a:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e4d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e51:	0f 83 9d 00 00 00    	jae    c0005ef4 <f_lseek+0x3da>
c0005e57:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e5b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e5f:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e62:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e66:	01 f2                	add    edx,esi
c0005e68:	11 f9                	adc    ecx,edi
c0005e6a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e6e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e72:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e75:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e78:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e7b:	f6 c1 02             	test   cl,0x2
c0005e7e:	74 35                	je     c0005eb5 <f_lseek+0x39b>
c0005e80:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e84:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e87:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e8a:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e8e:	73 16                	jae    c0005ea6 <f_lseek+0x38c>
c0005e90:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e94:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e98:	88 ca                	mov    dl,cl
c0005e9a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e9d:	83 ca 40             	or     edx,0x40
c0005ea0:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005ea3:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005ea6:	89 c2                	mov    edx,eax
c0005ea8:	89 d8                	mov    eax,ebx
c0005eaa:	e8 0e d4 ff ff       	call   c00032bd <create_chain>
c0005eaf:	85 c0                	test   eax,eax
c0005eb1:	75 0b                	jne    c0005ebe <f_lseek+0x3a4>
c0005eb3:	eb 30                	jmp    c0005ee5 <f_lseek+0x3cb>
c0005eb5:	89 c2                	mov    edx,eax
c0005eb7:	89 d8                	mov    eax,ebx
c0005eb9:	e8 11 d1 ff ff       	call   c0002fcf <get_fat>
c0005ebe:	83 f8 ff             	cmp    eax,0xffffffff
c0005ec1:	0f 84 25 fd ff ff    	je     c0005bec <f_lseek+0xd2>
c0005ec7:	83 f8 01             	cmp    eax,0x1
c0005eca:	0f 86 06 fd ff ff    	jbe    c0005bd6 <f_lseek+0xbc>
c0005ed0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ed4:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ed7:	0f 86 f9 fc ff ff    	jbe    c0005bd6 <f_lseek+0xbc>
c0005edd:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ee0:	e9 5b ff ff ff       	jmp    c0005e40 <f_lseek+0x326>
c0005ee5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eec:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005ef4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005ef7:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005efb:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005efe:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005f01:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005f04:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f0a:	0f 84 6f fe ff ff    	je     c0005d7f <f_lseek+0x265>
c0005f10:	89 c2                	mov    edx,eax
c0005f12:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f16:	e8 e7 bf ff ff       	call   c0001f02 <clst2sect>
c0005f1b:	89 d7                	mov    edi,edx
c0005f1d:	09 c7                	or     edi,eax
c0005f1f:	0f 84 b1 fc ff ff    	je     c0005bd6 <f_lseek+0xbc>
c0005f25:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f29:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f2c:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f30:	c1 ef 09             	shr    edi,0x9
c0005f33:	01 c6                	add    esi,eax
c0005f35:	11 d7                	adc    edi,edx
c0005f37:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f3a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f3d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f40:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f43:	19 d1                	sbb    ecx,edx
c0005f45:	73 0a                	jae    c0005f51 <f_lseek+0x437>
c0005f47:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f4a:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f4d:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f51:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f56:	74 6d                	je     c0005fc5 <f_lseek+0x4ab>
c0005f58:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f5b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f5e:	39 fa                	cmp    edx,edi
c0005f60:	75 04                	jne    c0005f66 <f_lseek+0x44c>
c0005f62:	39 f0                	cmp    eax,esi
c0005f64:	74 5f                	je     c0005fc5 <f_lseek+0x4ab>
c0005f66:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f69:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f6d:	79 25                	jns    c0005f94 <f_lseek+0x47a>
c0005f6f:	83 ec 0c             	sub    esp,0xc
c0005f72:	6a 01                	push   0x1
c0005f74:	52                   	push   edx
c0005f75:	50                   	push   eax
c0005f76:	55                   	push   ebp
c0005f77:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f7b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f7f:	50                   	push   eax
c0005f80:	e8 af bc ff ff       	call   c0001c34 <disk_write>
c0005f85:	83 c4 20             	add    esp,0x20
c0005f88:	85 c0                	test   eax,eax
c0005f8a:	0f 85 5c fc ff ff    	jne    c0005bec <f_lseek+0xd2>
c0005f90:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f94:	83 ec 0c             	sub    esp,0xc
c0005f97:	6a 01                	push   0x1
c0005f99:	57                   	push   edi
c0005f9a:	56                   	push   esi
c0005f9b:	55                   	push   ebp
c0005f9c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005fa0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005fa4:	50                   	push   eax
c0005fa5:	e8 74 bc ff ff       	call   c0001c1e <disk_read>
c0005faa:	83 c4 20             	add    esp,0x20
c0005fad:	85 c0                	test   eax,eax
c0005faf:	0f 85 37 fc ff ff    	jne    c0005bec <f_lseek+0xd2>
c0005fb5:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fb8:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fbb:	eb 08                	jmp    c0005fc5 <f_lseek+0x4ab>
c0005fbd:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fc5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc9:	83 c4 3c             	add    esp,0x3c
c0005fcc:	5b                   	pop    ebx
c0005fcd:	5e                   	pop    esi
c0005fce:	5f                   	pop    edi
c0005fcf:	5d                   	pop    ebp
c0005fd0:	c3                   	ret    

c0005fd1 <f_opendir>:
c0005fd1:	56                   	push   esi
c0005fd2:	b8 09 00 00 00       	mov    eax,0x9
c0005fd7:	53                   	push   ebx
c0005fd8:	83 ec 24             	sub    esp,0x24
c0005fdb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fdf:	85 db                	test   ebx,ebx
c0005fe1:	0f 84 e6 00 00 00    	je     c00060cd <f_opendir+0xfc>
c0005fe7:	31 c9                	xor    ecx,ecx
c0005fe9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fed:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005ff1:	e8 03 c7 ff ff       	call   c00026f9 <mount_volume>
c0005ff6:	85 c0                	test   eax,eax
c0005ff8:	0f 85 c9 00 00 00    	jne    c00060c7 <f_opendir+0xf6>
c0005ffe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006002:	83 ec 0c             	sub    esp,0xc
c0006005:	89 03                	mov    DWORD PTR [ebx],eax
c0006007:	68 60 04 00 00       	push   0x460
c000600c:	e8 8b 24 00 00       	call   c000849c <ff_memalloc>
c0006011:	83 c4 10             	add    esp,0x10
c0006014:	89 c6                	mov    esi,eax
c0006016:	b8 11 00 00 00       	mov    eax,0x11
c000601b:	85 f6                	test   esi,esi
c000601d:	0f 84 aa 00 00 00    	je     c00060cd <f_opendir+0xfc>
c0006023:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006027:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000602d:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006030:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006033:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0006037:	89 d8                	mov    eax,ebx
c0006039:	e8 31 ee ff ff       	call   c0004e6f <follow_path>
c000603e:	85 c0                	test   eax,eax
c0006040:	75 61                	jne    c00060a3 <f_opendir+0xd2>
c0006042:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006046:	78 46                	js     c000608e <f_opendir+0xbd>
c0006048:	b8 05 00 00 00       	mov    eax,0x5
c000604d:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006051:	74 50                	je     c00060a3 <f_opendir+0xd2>
c0006053:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006057:	8a 01                	mov    al,BYTE PTR [ecx]
c0006059:	3c 04                	cmp    al,0x4
c000605b:	75 26                	jne    c0006083 <f_opendir+0xb2>
c000605d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006060:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006063:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006066:	30 d2                	xor    dl,dl
c0006068:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000606c:	09 c2                	or     edx,eax
c000606e:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006071:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006074:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006077:	89 da                	mov    edx,ebx
c0006079:	8d 41 10             	lea    eax,[ecx+0x10]
c000607c:	e8 b4 ed ff ff       	call   c0004e35 <init_alloc_info.isra.2>
c0006081:	eb 0b                	jmp    c000608e <f_opendir+0xbd>
c0006083:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006086:	e8 59 ed ff ff       	call   c0004de4 <ld_clust.isra.0>
c000608b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000608e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006092:	31 d2                	xor    edx,edx
c0006094:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006098:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000609c:	89 d8                	mov    eax,ebx
c000609e:	e8 22 d1 ff ff       	call   c00031c5 <dir_sdi>
c00060a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00060a7:	83 ec 0c             	sub    esp,0xc
c00060aa:	56                   	push   esi
c00060ab:	e8 02 24 00 00       	call   c00084b2 <ff_memfree>
c00060b0:	83 c4 10             	add    esp,0x10
c00060b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060b7:	83 f8 04             	cmp    eax,0x4
c00060ba:	74 06                	je     c00060c2 <f_opendir+0xf1>
c00060bc:	85 c0                	test   eax,eax
c00060be:	74 0d                	je     c00060cd <f_opendir+0xfc>
c00060c0:	eb 05                	jmp    c00060c7 <f_opendir+0xf6>
c00060c2:	b8 05 00 00 00       	mov    eax,0x5
c00060c7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060cd:	83 c4 24             	add    esp,0x24
c00060d0:	5b                   	pop    ebx
c00060d1:	5e                   	pop    esi
c00060d2:	c3                   	ret    

c00060d3 <f_closedir>:
c00060d3:	53                   	push   ebx
c00060d4:	83 ec 18             	sub    esp,0x18
c00060d7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060db:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060df:	89 d8                	mov    eax,ebx
c00060e1:	e8 86 c2 ff ff       	call   c000236c <validate>
c00060e6:	85 c0                	test   eax,eax
c00060e8:	75 06                	jne    c00060f0 <f_closedir+0x1d>
c00060ea:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060f0:	83 c4 18             	add    esp,0x18
c00060f3:	5b                   	pop    ebx
c00060f4:	c3                   	ret    

c00060f5 <f_readdir>:
c00060f5:	57                   	push   edi
c00060f6:	56                   	push   esi
c00060f7:	53                   	push   ebx
c00060f8:	83 ec 20             	sub    esp,0x20
c00060fb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060ff:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006103:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006107:	89 d8                	mov    eax,ebx
c0006109:	e8 5e c2 ff ff       	call   c000236c <validate>
c000610e:	85 c0                	test   eax,eax
c0006110:	75 77                	jne    c0006189 <f_readdir+0x94>
c0006112:	85 ff                	test   edi,edi
c0006114:	75 0b                	jne    c0006121 <f_readdir+0x2c>
c0006116:	31 d2                	xor    edx,edx
c0006118:	89 d8                	mov    eax,ebx
c000611a:	e8 a6 d0 ff ff       	call   c00031c5 <dir_sdi>
c000611f:	eb 68                	jmp    c0006189 <f_readdir+0x94>
c0006121:	83 ec 0c             	sub    esp,0xc
c0006124:	68 60 04 00 00       	push   0x460
c0006129:	e8 6e 23 00 00       	call   c000849c <ff_memalloc>
c000612e:	83 c4 10             	add    esp,0x10
c0006131:	89 c6                	mov    esi,eax
c0006133:	b8 11 00 00 00       	mov    eax,0x11
c0006138:	85 f6                	test   esi,esi
c000613a:	74 4d                	je     c0006189 <f_readdir+0x94>
c000613c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006140:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006146:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006149:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000614c:	31 d2                	xor    edx,edx
c000614e:	89 d8                	mov    eax,ebx
c0006150:	e8 80 d8 ff ff       	call   c00039d5 <dir_read>
c0006155:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000615a:	75 19                	jne    c0006175 <f_readdir+0x80>
c000615c:	89 fa                	mov    edx,edi
c000615e:	89 d8                	mov    eax,ebx
c0006160:	e8 7e ea ff ff       	call   c0004be3 <get_fileinfo>
c0006165:	31 d2                	xor    edx,edx
c0006167:	89 d8                	mov    eax,ebx
c0006169:	e8 af d5 ff ff       	call   c000371d <dir_next>
c000616e:	83 f8 04             	cmp    eax,0x4
c0006171:	75 02                	jne    c0006175 <f_readdir+0x80>
c0006173:	31 c0                	xor    eax,eax
c0006175:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006179:	83 ec 0c             	sub    esp,0xc
c000617c:	56                   	push   esi
c000617d:	e8 30 23 00 00       	call   c00084b2 <ff_memfree>
c0006182:	83 c4 10             	add    esp,0x10
c0006185:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006189:	83 c4 20             	add    esp,0x20
c000618c:	5b                   	pop    ebx
c000618d:	5e                   	pop    esi
c000618e:	5f                   	pop    edi
c000618f:	c3                   	ret    

c0006190 <f_stat>:
c0006190:	57                   	push   edi
c0006191:	31 c9                	xor    ecx,ecx
c0006193:	56                   	push   esi
c0006194:	53                   	push   ebx
c0006195:	83 ec 50             	sub    esp,0x50
c0006198:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000619c:	8d 54 24 04          	lea    edx,[esp+0x4]
c00061a0:	8d 44 24 60          	lea    eax,[esp+0x60]
c00061a4:	e8 50 c5 ff ff       	call   c00026f9 <mount_volume>
c00061a9:	89 c3                	mov    ebx,eax
c00061ab:	85 c0                	test   eax,eax
c00061ad:	75 67                	jne    c0006216 <f_stat+0x86>
c00061af:	83 ec 0c             	sub    esp,0xc
c00061b2:	bb 11 00 00 00       	mov    ebx,0x11
c00061b7:	68 60 04 00 00       	push   0x460
c00061bc:	e8 db 22 00 00       	call   c000849c <ff_memalloc>
c00061c1:	83 c4 10             	add    esp,0x10
c00061c4:	89 c6                	mov    esi,eax
c00061c6:	85 c0                	test   eax,eax
c00061c8:	74 4c                	je     c0006216 <f_stat+0x86>
c00061ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061ce:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061d4:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061d7:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061da:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061de:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061e2:	e8 88 ec ff ff       	call   c0004e6f <follow_path>
c00061e7:	89 c3                	mov    ebx,eax
c00061e9:	85 c0                	test   eax,eax
c00061eb:	75 1d                	jne    c000620a <f_stat+0x7a>
c00061ed:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061f2:	78 11                	js     c0006205 <f_stat+0x75>
c00061f4:	85 ff                	test   edi,edi
c00061f6:	74 12                	je     c000620a <f_stat+0x7a>
c00061f8:	89 fa                	mov    edx,edi
c00061fa:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061fe:	e8 e0 e9 ff ff       	call   c0004be3 <get_fileinfo>
c0006203:	eb 05                	jmp    c000620a <f_stat+0x7a>
c0006205:	bb 06 00 00 00       	mov    ebx,0x6
c000620a:	83 ec 0c             	sub    esp,0xc
c000620d:	56                   	push   esi
c000620e:	e8 9f 22 00 00       	call   c00084b2 <ff_memfree>
c0006213:	83 c4 10             	add    esp,0x10
c0006216:	83 c4 50             	add    esp,0x50
c0006219:	89 d8                	mov    eax,ebx
c000621b:	5b                   	pop    ebx
c000621c:	5e                   	pop    esi
c000621d:	5f                   	pop    edi
c000621e:	c3                   	ret    

c000621f <f_getfree>:
c000621f:	55                   	push   ebp
c0006220:	31 c9                	xor    ecx,ecx
c0006222:	57                   	push   edi
c0006223:	56                   	push   esi
c0006224:	53                   	push   ebx
c0006225:	83 ec 5c             	sub    esp,0x5c
c0006228:	8d 54 24 24          	lea    edx,[esp+0x24]
c000622c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006230:	e8 c4 c4 ff ff       	call   c00026f9 <mount_volume>
c0006235:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006239:	85 c0                	test   eax,eax
c000623b:	0f 85 9d 01 00 00    	jne    c00063de <f_getfree+0x1bf>
c0006241:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006245:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006249:	89 02                	mov    DWORD PTR [edx],eax
c000624b:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000624e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006251:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006254:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006258:	39 f2                	cmp    edx,esi
c000625a:	77 0b                	ja     c0006267 <f_getfree+0x48>
c000625c:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006260:	89 10                	mov    DWORD PTR [eax],edx
c0006262:	e9 77 01 00 00       	jmp    c00063de <f_getfree+0x1bf>
c0006267:	8a 10                	mov    dl,BYTE PTR [eax]
c0006269:	80 fa 01             	cmp    dl,0x1
c000626c:	75 3a                	jne    c00062a8 <f_getfree+0x89>
c000626e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006272:	be 02 00 00 00       	mov    esi,0x2
c0006277:	31 db                	xor    ebx,ebx
c0006279:	89 f2                	mov    edx,esi
c000627b:	8d 44 24 28          	lea    eax,[esp+0x28]
c000627f:	e8 4b cd ff ff       	call   c0002fcf <get_fat>
c0006284:	83 f8 ff             	cmp    eax,0xffffffff
c0006287:	0f 84 28 01 00 00    	je     c00063b5 <f_getfree+0x196>
c000628d:	83 f8 01             	cmp    eax,0x1
c0006290:	0f 84 29 01 00 00    	je     c00063bf <f_getfree+0x1a0>
c0006296:	83 d3 00             	adc    ebx,0x0
c0006299:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000629d:	46                   	inc    esi
c000629e:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c00062a1:	77 d6                	ja     c0006279 <f_getfree+0x5a>
c00062a3:	e9 25 01 00 00       	jmp    c00063cd <f_getfree+0x1ae>
c00062a8:	80 fa 04             	cmp    dl,0x4
c00062ab:	0f 85 88 00 00 00    	jne    c0006339 <f_getfree+0x11a>
c00062b1:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062b4:	31 ed                	xor    ebp,ebp
c00062b6:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c1:	31 db                	xor    ebx,ebx
c00062c3:	85 ed                	test   ebp,ebp
c00062c5:	75 3f                	jne    c0006306 <f_getfree+0xe7>
c00062c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062cf:	83 c0 01             	add    eax,0x1
c00062d2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062d6:	83 d2 00             	adc    edx,0x0
c00062d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062dd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062e1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062e5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062e9:	e8 59 c1 ff ff       	call   c0002447 <move_window>
c00062ee:	85 c0                	test   eax,eax
c00062f0:	0f 85 d3 00 00 00    	jne    c00063c9 <f_getfree+0x1aa>
c00062f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062fa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006302:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006306:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000630a:	8d 4e f8             	lea    ecx,[esi-0x8]
c000630d:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006311:	89 cf                	mov    edi,ecx
c0006313:	85 f6                	test   esi,esi
c0006315:	74 12                	je     c0006329 <f_getfree+0x10a>
c0006317:	88 c1                	mov    cl,al
c0006319:	83 e1 01             	and    ecx,0x1
c000631c:	80 f9 01             	cmp    cl,0x1
c000631f:	83 d3 00             	adc    ebx,0x0
c0006322:	d0 e8                	shr    al,1
c0006324:	4e                   	dec    esi
c0006325:	39 fe                	cmp    esi,edi
c0006327:	75 ea                	jne    c0006313 <f_getfree+0xf4>
c0006329:	45                   	inc    ebp
c000632a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006330:	85 f6                	test   esi,esi
c0006332:	75 8f                	jne    c00062c3 <f_getfree+0xa4>
c0006334:	e9 94 00 00 00       	jmp    c00063cd <f_getfree+0x1ae>
c0006339:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000633c:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000633f:	31 f6                	xor    esi,esi
c0006341:	31 db                	xor    ebx,ebx
c0006343:	85 f6                	test   esi,esi
c0006345:	75 1b                	jne    c0006362 <f_getfree+0x143>
c0006347:	89 d7                	mov    edi,edx
c0006349:	89 cd                	mov    ebp,ecx
c000634b:	83 c7 01             	add    edi,0x1
c000634e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006352:	83 d5 00             	adc    ebp,0x0
c0006355:	e8 ed c0 ff ff       	call   c0002447 <move_window>
c000635a:	85 c0                	test   eax,eax
c000635c:	75 6b                	jne    c00063c9 <f_getfree+0x1aa>
c000635e:	89 fa                	mov    edx,edi
c0006360:	89 e9                	mov    ecx,ebp
c0006362:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006366:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000636a:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000636e:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006371:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006375:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006379:	75 11                	jne    c000638c <f_getfree+0x16d>
c000637b:	e8 e9 b8 ff ff       	call   c0001c69 <ld_word>
c0006380:	66 83 f8 01          	cmp    ax,0x1
c0006384:	83 d3 00             	adc    ebx,0x0
c0006387:	83 c6 02             	add    esi,0x2
c000638a:	eb 13                	jmp    c000639f <f_getfree+0x180>
c000638c:	e8 e5 b8 ff ff       	call   c0001c76 <ld_dword>
c0006391:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006396:	83 f8 01             	cmp    eax,0x1
c0006399:	83 d3 00             	adc    ebx,0x0
c000639c:	83 c6 04             	add    esi,0x4
c000639f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00063a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063ad:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063b1:	75 90                	jne    c0006343 <f_getfree+0x124>
c00063b3:	eb 18                	jmp    c00063cd <f_getfree+0x1ae>
c00063b5:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063bd:	eb 0e                	jmp    c00063cd <f_getfree+0x1ae>
c00063bf:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063c7:	eb 04                	jmp    c00063cd <f_getfree+0x1ae>
c00063c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063cd:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063d1:	89 18                	mov    DWORD PTR [eax],ebx
c00063d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063d7:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063da:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063e2:	83 c4 5c             	add    esp,0x5c
c00063e5:	5b                   	pop    ebx
c00063e6:	5e                   	pop    esi
c00063e7:	5f                   	pop    edi
c00063e8:	5d                   	pop    ebp
c00063e9:	c3                   	ret    

c00063ea <f_truncate>:
c00063ea:	56                   	push   esi
c00063eb:	53                   	push   ebx
c00063ec:	83 ec 14             	sub    esp,0x14
c00063ef:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063f3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063f7:	89 d8                	mov    eax,ebx
c00063f9:	e8 6e bf ff ff       	call   c000236c <validate>
c00063fe:	89 c6                	mov    esi,eax
c0006400:	85 c0                	test   eax,eax
c0006402:	0f 85 d2 00 00 00    	jne    c00064da <f_truncate+0xf0>
c0006408:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c000640c:	85 f6                	test   esi,esi
c000640e:	0f 85 c6 00 00 00    	jne    c00064da <f_truncate+0xf0>
c0006414:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006418:	0f 84 b7 00 00 00    	je     c00064d5 <f_truncate+0xeb>
c000641e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006421:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006424:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006427:	89 d1                	mov    ecx,edx
c0006429:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000642c:	0f 83 a8 00 00 00    	jae    c00064da <f_truncate+0xf0>
c0006432:	09 c2                	or     edx,eax
c0006434:	75 15                	jne    c000644b <f_truncate+0x61>
c0006436:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006439:	31 c9                	xor    ecx,ecx
c000643b:	89 d8                	mov    eax,ebx
c000643d:	e8 7a d0 ff ff       	call   c00034bc <remove_chain>
c0006442:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006449:	eb 35                	jmp    c0006480 <f_truncate+0x96>
c000644b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000644e:	89 d8                	mov    eax,ebx
c0006450:	e8 7a cb ff ff       	call   c0002fcf <get_fat>
c0006455:	89 c2                	mov    edx,eax
c0006457:	b8 01 00 00 00       	mov    eax,0x1
c000645c:	83 fa ff             	cmp    edx,0xffffffff
c000645f:	74 1f                	je     c0006480 <f_truncate+0x96>
c0006461:	b8 02 00 00 00       	mov    eax,0x2
c0006466:	83 fa 01             	cmp    edx,0x1
c0006469:	74 15                	je     c0006480 <f_truncate+0x96>
c000646b:	31 c0                	xor    eax,eax
c000646d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006471:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006474:	76 0a                	jbe    c0006480 <f_truncate+0x96>
c0006476:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006479:	89 d8                	mov    eax,ebx
c000647b:	e8 3c d0 ff ff       	call   c00034bc <remove_chain>
c0006480:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006483:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006486:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006489:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000648c:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000648f:	83 ca 40             	or     edx,0x40
c0006492:	85 c0                	test   eax,eax
c0006494:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006497:	75 35                	jne    c00064ce <f_truncate+0xe4>
c0006499:	84 d2                	test   dl,dl
c000649b:	79 3d                	jns    c00064da <f_truncate+0xf0>
c000649d:	83 ec 0c             	sub    esp,0xc
c00064a0:	8d 43 50             	lea    eax,[ebx+0x50]
c00064a3:	6a 01                	push   0x1
c00064a5:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064a8:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064ab:	50                   	push   eax
c00064ac:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064b0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064b4:	50                   	push   eax
c00064b5:	e8 7a b7 ff ff       	call   c0001c34 <disk_write>
c00064ba:	83 c4 20             	add    esp,0x20
c00064bd:	85 c0                	test   eax,eax
c00064bf:	75 08                	jne    c00064c9 <f_truncate+0xdf>
c00064c1:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064c5:	31 f6                	xor    esi,esi
c00064c7:	eb 11                	jmp    c00064da <f_truncate+0xf0>
c00064c9:	b8 01 00 00 00       	mov    eax,0x1
c00064ce:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064d1:	89 c6                	mov    esi,eax
c00064d3:	eb 05                	jmp    c00064da <f_truncate+0xf0>
c00064d5:	be 07 00 00 00       	mov    esi,0x7
c00064da:	89 f0                	mov    eax,esi
c00064dc:	83 c4 14             	add    esp,0x14
c00064df:	5b                   	pop    ebx
c00064e0:	5e                   	pop    esi
c00064e1:	c3                   	ret    

c00064e2 <f_unlink>:
c00064e2:	56                   	push   esi
c00064e3:	b9 02 00 00 00       	mov    ecx,0x2
c00064e8:	53                   	push   ebx
c00064e9:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ef:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064f3:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064fa:	e8 fa c1 ff ff       	call   c00026f9 <mount_volume>
c00064ff:	85 c0                	test   eax,eax
c0006501:	0f 85 55 01 00 00    	jne    c000665c <f_unlink+0x17a>
c0006507:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000650b:	83 ec 0c             	sub    esp,0xc
c000650e:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006512:	68 60 04 00 00       	push   0x460
c0006517:	e8 80 1f 00 00       	call   c000849c <ff_memalloc>
c000651c:	83 c4 10             	add    esp,0x10
c000651f:	89 c3                	mov    ebx,eax
c0006521:	b8 11 00 00 00       	mov    eax,0x11
c0006526:	85 db                	test   ebx,ebx
c0006528:	0f 84 2e 01 00 00    	je     c000665c <f_unlink+0x17a>
c000652e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006532:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006538:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000653b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000653e:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006545:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006549:	e8 21 e9 ff ff       	call   c0004e6f <follow_path>
c000654e:	85 c0                	test   eax,eax
c0006550:	0f 85 f2 00 00 00    	jne    c0006648 <f_unlink+0x166>
c0006556:	b8 06 00 00 00       	mov    eax,0x6
c000655b:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006563:	0f 88 df 00 00 00    	js     c0006648 <f_unlink+0x166>
c0006569:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000656e:	74 0a                	je     c000657a <f_unlink+0x98>
c0006570:	b8 07 00 00 00       	mov    eax,0x7
c0006575:	e9 ce 00 00 00       	jmp    c0006648 <f_unlink+0x166>
c000657a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000657e:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006582:	8a 02                	mov    al,BYTE PTR [edx]
c0006584:	3c 04                	cmp    al,0x4
c0006586:	75 12                	jne    c000659a <f_unlink+0xb8>
c0006588:	8d 42 10             	lea    eax,[edx+0x10]
c000658b:	8d 54 24 20          	lea    edx,[esp+0x20]
c000658f:	e8 a1 e8 ff ff       	call   c0004e35 <init_alloc_info.isra.2>
c0006594:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006598:	eb 0e                	jmp    c00065a8 <f_unlink+0xc6>
c000659a:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00065a1:	e8 3e e8 ff ff       	call   c0004de4 <ld_clust.isra.0>
c00065a6:	89 c6                	mov    esi,eax
c00065a8:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065ad:	75 12                	jne    c00065c1 <f_unlink+0xdf>
c00065af:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065b3:	e8 94 d6 ff ff       	call   c0003c4c <dir_remove>
c00065b8:	85 c0                	test   eax,eax
c00065ba:	74 6c                	je     c0006628 <f_unlink+0x146>
c00065bc:	e9 87 00 00 00       	jmp    c0006648 <f_unlink+0x166>
c00065c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065c5:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065cc:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065d3:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065d6:	75 21                	jne    c00065f9 <f_unlink+0x117>
c00065d8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065dc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065e0:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065e7:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ee:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065f2:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065f9:	31 d2                	xor    edx,edx
c00065fb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006602:	e8 be cb ff ff       	call   c00031c5 <dir_sdi>
c0006607:	85 c0                	test   eax,eax
c0006609:	75 3d                	jne    c0006648 <f_unlink+0x166>
c000660b:	31 d2                	xor    edx,edx
c000660d:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006614:	e8 bc d3 ff ff       	call   c00039d5 <dir_read>
c0006619:	85 c0                	test   eax,eax
c000661b:	0f 84 4f ff ff ff    	je     c0006570 <f_unlink+0x8e>
c0006621:	83 f8 04             	cmp    eax,0x4
c0006624:	75 22                	jne    c0006648 <f_unlink+0x166>
c0006626:	eb 87                	jmp    c00065af <f_unlink+0xcd>
c0006628:	85 f6                	test   esi,esi
c000662a:	75 0b                	jne    c0006637 <f_unlink+0x155>
c000662c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006630:	e8 3d df ff ff       	call   c0004572 <sync_fs>
c0006635:	eb 11                	jmp    c0006648 <f_unlink+0x166>
c0006637:	31 c9                	xor    ecx,ecx
c0006639:	89 f2                	mov    edx,esi
c000663b:	8d 44 24 20          	lea    eax,[esp+0x20]
c000663f:	e8 78 ce ff ff       	call   c00034bc <remove_chain>
c0006644:	85 c0                	test   eax,eax
c0006646:	74 e4                	je     c000662c <f_unlink+0x14a>
c0006648:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000664c:	83 ec 0c             	sub    esp,0xc
c000664f:	53                   	push   ebx
c0006650:	e8 5d 1e 00 00       	call   c00084b2 <ff_memfree>
c0006655:	83 c4 10             	add    esp,0x10
c0006658:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000665c:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006662:	5b                   	pop    ebx
c0006663:	5e                   	pop    esi
c0006664:	c3                   	ret    

c0006665 <f_mkdir>:
c0006665:	57                   	push   edi
c0006666:	b9 02 00 00 00       	mov    ecx,0x2
c000666b:	56                   	push   esi
c000666c:	53                   	push   ebx
c000666d:	83 c4 80             	add    esp,0xffffff80
c0006670:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006674:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000667b:	e8 79 c0 ff ff       	call   c00026f9 <mount_volume>
c0006680:	89 c3                	mov    ebx,eax
c0006682:	85 c0                	test   eax,eax
c0006684:	0f 85 fe 01 00 00    	jne    c0006888 <f_mkdir+0x223>
c000668a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000668e:	bb 11 00 00 00       	mov    ebx,0x11
c0006693:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006697:	83 ec 0c             	sub    esp,0xc
c000669a:	68 60 04 00 00       	push   0x460
c000669f:	e8 f8 1d 00 00       	call   c000849c <ff_memalloc>
c00066a4:	83 c4 10             	add    esp,0x10
c00066a7:	89 c7                	mov    edi,eax
c00066a9:	85 c0                	test   eax,eax
c00066ab:	0f 84 d7 01 00 00    	je     c0006888 <f_mkdir+0x223>
c00066b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066b5:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066bb:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066be:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066c1:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066c8:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066cc:	e8 9e e7 ff ff       	call   c0004e6f <follow_path>
c00066d1:	89 c3                	mov    ebx,eax
c00066d3:	85 c0                	test   eax,eax
c00066d5:	74 3e                	je     c0006715 <f_mkdir+0xb0>
c00066d7:	83 f8 04             	cmp    eax,0x4
c00066da:	75 3e                	jne    c000671a <f_mkdir+0xb5>
c00066dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066e0:	31 d2                	xor    edx,edx
c00066e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066e6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066ea:	e8 ce cb ff ff       	call   c00032bd <create_chain>
c00066ef:	89 c6                	mov    esi,eax
c00066f1:	85 c0                	test   eax,eax
c00066f3:	74 0c                	je     c0006701 <f_mkdir+0x9c>
c00066f5:	bb 02 00 00 00       	mov    ebx,0x2
c00066fa:	83 f8 01             	cmp    eax,0x1
c00066fd:	74 07                	je     c0006706 <f_mkdir+0xa1>
c00066ff:	eb 2a                	jmp    c000672b <f_mkdir+0xc6>
c0006701:	bb 07 00 00 00       	mov    ebx,0x7
c0006706:	31 c9                	xor    ecx,ecx
c0006708:	89 f2                	mov    edx,esi
c000670a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000670e:	e8 a9 cd ff ff       	call   c00034bc <remove_chain>
c0006713:	eb 05                	jmp    c000671a <f_mkdir+0xb5>
c0006715:	bb 08 00 00 00       	mov    ebx,0x8
c000671a:	83 ec 0c             	sub    esp,0xc
c000671d:	57                   	push   edi
c000671e:	e8 8f 1d 00 00       	call   c00084b2 <ff_memfree>
c0006723:	83 c4 10             	add    esp,0x10
c0006726:	e9 5d 01 00 00       	jmp    c0006888 <f_mkdir+0x223>
c000672b:	bb 01 00 00 00       	mov    ebx,0x1
c0006730:	83 f8 ff             	cmp    eax,0xffffffff
c0006733:	74 d1                	je     c0006706 <f_mkdir+0xa1>
c0006735:	89 f2                	mov    edx,esi
c0006737:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673b:	e8 c4 ce ff ff       	call   c0003604 <dir_clear>
c0006740:	89 c3                	mov    ebx,eax
c0006742:	85 c0                	test   eax,eax
c0006744:	75 c0                	jne    c0006706 <f_mkdir+0xa1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000674d:	74 69                	je     c00067b8 <f_mkdir+0x153>
c000674f:	b9 0b 00 00 00       	mov    ecx,0xb
c0006754:	83 c0 54             	add    eax,0x54
c0006757:	ba 20 00 00 00       	mov    edx,0x20
c000675c:	e8 9c b5 ff ff       	call   c0001cfd <mem_set>
c0006761:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006765:	ba 00 00 21 50       	mov    edx,0x50210000
c000676a:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000676e:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006772:	83 c0 6a             	add    eax,0x6a
c0006775:	e8 65 b5 ff ff       	call   c0001cdf <st_dword>
c000677a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000677e:	89 f1                	mov    ecx,esi
c0006780:	8d 50 54             	lea    edx,[eax+0x54]
c0006783:	e8 85 e6 ff ff       	call   c0004e0d <st_clust.isra.1>
c0006788:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678c:	b9 20 00 00 00       	mov    ecx,0x20
c0006791:	8d 50 54             	lea    edx,[eax+0x54]
c0006794:	83 c0 74             	add    eax,0x74
c0006797:	e8 4c b5 ff ff       	call   c0001ce8 <mem_cpy>
c000679c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a0:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00067a4:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067a8:	8d 50 74             	lea    edx,[eax+0x74]
c00067ab:	e8 5d e6 ff ff       	call   c0004e0d <st_clust.isra.1>
c00067b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b4:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067b8:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067bc:	e8 2f db ff ff       	call   c00042f0 <dir_register>
c00067c1:	89 c3                	mov    ebx,eax
c00067c3:	85 c0                	test   eax,eax
c00067c5:	0f 85 3b ff ff ff    	jne    c0006706 <f_mkdir+0xa1>
c00067cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cf:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067d2:	75 74                	jne    c0006848 <f_mkdir+0x1e3>
c00067d4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d7:	ba 00 00 21 50       	mov    edx,0x50210000
c00067dc:	83 c0 0c             	add    eax,0xc
c00067df:	e8 fb b4 ff ff       	call   c0001cdf <st_dword>
c00067e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e8:	89 f2                	mov    edx,esi
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	83 c0 34             	add    eax,0x34
c00067f0:	e8 ea b4 ff ff       	call   c0001cdf <st_dword>
c00067f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f9:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067fd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006800:	c1 e2 09             	shl    edx,0x9
c0006803:	83 c0 38             	add    eax,0x38
c0006806:	e8 d4 b4 ff ff       	call   c0001cdf <st_dword>
c000680b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000680f:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006813:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006816:	c1 e2 09             	shl    edx,0x9
c0006819:	83 c0 28             	add    eax,0x28
c000681c:	e8 be b4 ff ff       	call   c0001cdf <st_dword>
c0006821:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006825:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006828:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000682c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000682f:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006833:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006837:	e8 8b d3 ff ff       	call   c0003bc7 <store_xdir>
c000683c:	89 c3                	mov    ebx,eax
c000683e:	85 c0                	test   eax,eax
c0006840:	0f 85 d4 fe ff ff    	jne    c000671a <f_mkdir+0xb5>
c0006846:	eb 30                	jmp    c0006878 <f_mkdir+0x213>
c0006848:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000684c:	ba 00 00 21 50       	mov    edx,0x50210000
c0006851:	83 c0 16             	add    eax,0x16
c0006854:	e8 86 b4 ff ff       	call   c0001cdf <st_dword>
c0006859:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000685d:	89 f1                	mov    ecx,esi
c000685f:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006863:	e8 a5 e5 ff ff       	call   c0004e0d <st_clust.isra.1>
c0006868:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000686c:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006874:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006878:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000687c:	e8 f1 dc ff ff       	call   c0004572 <sync_fs>
c0006881:	89 c3                	mov    ebx,eax
c0006883:	e9 92 fe ff ff       	jmp    c000671a <f_mkdir+0xb5>
c0006888:	83 ec 80             	sub    esp,0xffffff80
c000688b:	89 d8                	mov    eax,ebx
c000688d:	5b                   	pop    ebx
c000688e:	5e                   	pop    esi
c000688f:	5f                   	pop    edi
c0006890:	c3                   	ret    

c0006891 <f_rename>:
c0006891:	55                   	push   ebp
c0006892:	57                   	push   edi
c0006893:	56                   	push   esi
c0006894:	53                   	push   ebx
c0006895:	81 ec fc 00 00 00    	sub    esp,0xfc
c000689b:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00068a2:	e8 a4 b9 ff ff       	call   c000224b <get_ldnumber>
c00068a7:	b9 02 00 00 00       	mov    ecx,0x2
c00068ac:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068b0:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068b7:	e8 3d be ff ff       	call   c00026f9 <mount_volume>
c00068bc:	85 c0                	test   eax,eax
c00068be:	0f 85 b5 02 00 00    	jne    c0006b79 <f_rename+0x2e8>
c00068c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c8:	83 ec 0c             	sub    esp,0xc
c00068cb:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068cf:	68 60 04 00 00       	push   0x460
c00068d4:	e8 c3 1b 00 00       	call   c000849c <ff_memalloc>
c00068d9:	83 c4 10             	add    esp,0x10
c00068dc:	89 c3                	mov    ebx,eax
c00068de:	b8 11 00 00 00       	mov    eax,0x11
c00068e3:	85 db                	test   ebx,ebx
c00068e5:	0f 84 8e 02 00 00    	je     c0006b79 <f_rename+0x2e8>
c00068eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ef:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068f5:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068f8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068fb:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c0006902:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006906:	e8 64 e5 ff ff       	call   c0004e6f <follow_path>
c000690b:	85 c0                	test   eax,eax
c000690d:	0f 85 52 02 00 00    	jne    c0006b65 <f_rename+0x2d4>
c0006913:	b8 06 00 00 00       	mov    eax,0x6
c0006918:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006920:	0f 85 3f 02 00 00    	jne    c0006b65 <f_rename+0x2d4>
c0006926:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000692a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000692d:	0f 85 05 01 00 00    	jne    c0006a38 <f_rename+0x1a7>
c0006933:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006936:	b9 40 00 00 00       	mov    ecx,0x40
c000693b:	8d 44 24 18          	lea    eax,[esp+0x18]
c000693f:	e8 a4 b3 ff ff       	call   c0001ce8 <mem_cpy>
c0006944:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006949:	8d 54 24 58          	lea    edx,[esp+0x58]
c000694d:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006954:	e8 8f b3 ff ff       	call   c0001ce8 <mem_cpy>
c0006959:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 03 e5 ff ff       	call   c0004e6f <follow_path>
c000696c:	85 c0                	test   eax,eax
c000696e:	75 29                	jne    c0006999 <f_rename+0x108>
c0006970:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006974:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000697b:	74 0a                	je     c0006987 <f_rename+0xf6>
c000697d:	b8 08 00 00 00       	mov    eax,0x8
c0006982:	e9 de 01 00 00       	jmp    c0006b65 <f_rename+0x2d4>
c0006987:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000698e:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006995:	75 e6                	jne    c000697d <f_rename+0xec>
c0006997:	eb 09                	jmp    c00069a2 <f_rename+0x111>
c0006999:	83 f8 04             	cmp    eax,0x4
c000699c:	0f 85 c3 01 00 00    	jne    c0006b65 <f_rename+0x2d4>
c00069a2:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a9:	e8 42 d9 ff ff       	call   c00042f0 <dir_register>
c00069ae:	85 c0                	test   eax,eax
c00069b0:	0f 85 af 01 00 00    	jne    c0006b65 <f_rename+0x2d4>
c00069b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ba:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069bd:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069c0:	89 c5                	mov    ebp,eax
c00069c2:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069c5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069c9:	8d 46 24             	lea    eax,[esi+0x24]
c00069cc:	e8 98 b2 ff ff       	call   c0001c69 <ld_word>
c00069d1:	b9 40 00 00 00       	mov    ecx,0x40
c00069d6:	89 c7                	mov    edi,eax
c00069d8:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069dc:	89 f0                	mov    eax,esi
c00069de:	e8 05 b3 ff ff       	call   c0001ce8 <mem_cpy>
c00069e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069e7:	89 e9                	mov    ecx,ebp
c00069e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069ec:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ef:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069f7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069fa:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069fd:	0f b7 d7             	movzx  edx,di
c0006a00:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a03:	83 c0 24             	add    eax,0x24
c0006a06:	e8 d0 b2 ff ff       	call   c0001cdb <st_word>
c0006a0b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a0f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a12:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a15:	a8 10                	test   al,0x10
c0006a17:	75 06                	jne    c0006a1f <f_rename+0x18e>
c0006a19:	83 c8 20             	or     eax,0x20
c0006a1c:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a1f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a26:	e8 9c d1 ff ff       	call   c0003bc7 <store_xdir>
c0006a2b:	85 c0                	test   eax,eax
c0006a2d:	0f 84 1c 01 00 00    	je     c0006b4f <f_rename+0x2be>
c0006a33:	e9 2d 01 00 00       	jmp    c0006b65 <f_rename+0x2d4>
c0006a38:	b9 20 00 00 00       	mov    ecx,0x20
c0006a3d:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a44:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a48:	e8 9b b2 ff ff       	call   c0001ce8 <mem_cpy>
c0006a4d:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a52:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a56:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a5d:	e8 86 b2 ff ff       	call   c0001ce8 <mem_cpy>
c0006a62:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a69:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a70:	e8 fa e3 ff ff       	call   c0004e6f <follow_path>
c0006a75:	85 c0                	test   eax,eax
c0006a77:	75 27                	jne    c0006aa0 <f_rename+0x20f>
c0006a79:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a7d:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a84:	0f 85 f3 fe ff ff    	jne    c000697d <f_rename+0xec>
c0006a8a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a91:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a98:	0f 85 df fe ff ff    	jne    c000697d <f_rename+0xec>
c0006a9e:	eb 09                	jmp    c0006aa9 <f_rename+0x218>
c0006aa0:	83 f8 04             	cmp    eax,0x4
c0006aa3:	0f 85 bc 00 00 00    	jne    c0006b65 <f_rename+0x2d4>
c0006aa9:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006ab0:	e8 3b d8 ff ff       	call   c00042f0 <dir_register>
c0006ab5:	85 c0                	test   eax,eax
c0006ab7:	0f 85 a8 00 00 00    	jne    c0006b65 <f_rename+0x2d4>
c0006abd:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006ac4:	b9 13 00 00 00       	mov    ecx,0x13
c0006ac9:	8d 46 0d             	lea    eax,[esi+0xd]
c0006acc:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ad0:	e8 13 b2 ff ff       	call   c0001ce8 <mem_cpy>
c0006ad5:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ad9:	a8 10                	test   al,0x10
c0006adb:	75 03                	jne    c0006ae0 <f_rename+0x24f>
c0006add:	83 c8 20             	or     eax,0x20
c0006ae0:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006ae3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006ae7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aeb:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aef:	74 5e                	je     c0006b4f <f_rename+0x2be>
c0006af1:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006af8:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006afc:	74 51                	je     c0006b4f <f_rename+0x2be>
c0006afe:	89 f2                	mov    edx,esi
c0006b00:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006b04:	8a 07                	mov    al,BYTE PTR [edi]
c0006b06:	e8 d9 e2 ff ff       	call   c0004de4 <ld_clust.isra.0>
c0006b0b:	89 c2                	mov    edx,eax
c0006b0d:	89 f8                	mov    eax,edi
c0006b0f:	e8 ee b3 ff ff       	call   c0001f02 <clst2sect>
c0006b14:	89 c6                	mov    esi,eax
c0006b16:	89 d1                	mov    ecx,edx
c0006b18:	b8 02 00 00 00       	mov    eax,0x2
c0006b1d:	09 f2                	or     edx,esi
c0006b1f:	74 44                	je     c0006b65 <f_rename+0x2d4>
c0006b21:	89 f2                	mov    edx,esi
c0006b23:	89 f8                	mov    eax,edi
c0006b25:	e8 1d b9 ff ff       	call   c0002447 <move_window>
c0006b2a:	85 c0                	test   eax,eax
c0006b2c:	75 37                	jne    c0006b65 <f_rename+0x2d4>
c0006b2e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b32:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b36:	75 17                	jne    c0006b4f <f_rename+0x2be>
c0006b38:	8d 50 74             	lea    edx,[eax+0x74]
c0006b3b:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b42:	e8 c6 e2 ff ff       	call   c0004e0d <st_clust.isra.1>
c0006b47:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b4b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b4f:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b53:	e8 f4 d0 ff ff       	call   c0003c4c <dir_remove>
c0006b58:	85 c0                	test   eax,eax
c0006b5a:	75 09                	jne    c0006b65 <f_rename+0x2d4>
c0006b5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b60:	e8 0d da ff ff       	call   c0004572 <sync_fs>
c0006b65:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b69:	83 ec 0c             	sub    esp,0xc
c0006b6c:	53                   	push   ebx
c0006b6d:	e8 40 19 00 00       	call   c00084b2 <ff_memfree>
c0006b72:	83 c4 10             	add    esp,0x10
c0006b75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b79:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b7f:	5b                   	pop    ebx
c0006b80:	5e                   	pop    esi
c0006b81:	5f                   	pop    edi
c0006b82:	5d                   	pop    ebp
c0006b83:	c3                   	ret    

c0006b84 <f_chmod>:
c0006b84:	57                   	push   edi
c0006b85:	b9 02 00 00 00       	mov    ecx,0x2
c0006b8a:	56                   	push   esi
c0006b8b:	53                   	push   ebx
c0006b8c:	83 ec 60             	sub    esp,0x60
c0006b8f:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b93:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b97:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b9b:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b9f:	e8 55 bb ff ff       	call   c00026f9 <mount_volume>
c0006ba4:	85 c0                	test   eax,eax
c0006ba6:	0f 85 af 00 00 00    	jne    c0006c5b <f_chmod+0xd7>
c0006bac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bb0:	83 ec 0c             	sub    esp,0xc
c0006bb3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006bb7:	68 60 04 00 00       	push   0x460
c0006bbc:	e8 db 18 00 00       	call   c000849c <ff_memalloc>
c0006bc1:	83 c4 10             	add    esp,0x10
c0006bc4:	89 c6                	mov    esi,eax
c0006bc6:	b8 11 00 00 00       	mov    eax,0x11
c0006bcb:	85 f6                	test   esi,esi
c0006bcd:	0f 84 88 00 00 00    	je     c0006c5b <f_chmod+0xd7>
c0006bd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bd7:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bdd:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006be0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006be3:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006be7:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006beb:	e8 7f e2 ff ff       	call   c0004e6f <follow_path>
c0006bf0:	85 c0                	test   eax,eax
c0006bf2:	75 53                	jne    c0006c47 <f_chmod+0xc3>
c0006bf4:	b8 06 00 00 00       	mov    eax,0x6
c0006bf9:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bfe:	75 47                	jne    c0006c47 <f_chmod+0xc3>
c0006c00:	89 f9                	mov    ecx,edi
c0006c02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c06:	83 e1 27             	and    ecx,0x27
c0006c09:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c0c:	75 1d                	jne    c0006c2b <f_chmod+0xa7>
c0006c0e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c11:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c14:	21 cb                	and    ebx,ecx
c0006c16:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c19:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c1c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c20:	e8 a2 cf ff ff       	call   c0003bc7 <store_xdir>
c0006c25:	85 c0                	test   eax,eax
c0006c27:	75 1e                	jne    c0006c47 <f_chmod+0xc3>
c0006c29:	eb 13                	jmp    c0006c3e <f_chmod+0xba>
c0006c2b:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c2f:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c32:	21 cb                	and    ebx,ecx
c0006c34:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c37:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c3a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c42:	e8 2b d9 ff ff       	call   c0004572 <sync_fs>
c0006c47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c4b:	83 ec 0c             	sub    esp,0xc
c0006c4e:	56                   	push   esi
c0006c4f:	e8 5e 18 00 00       	call   c00084b2 <ff_memfree>
c0006c54:	83 c4 10             	add    esp,0x10
c0006c57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c5b:	83 c4 60             	add    esp,0x60
c0006c5e:	5b                   	pop    ebx
c0006c5f:	5e                   	pop    esi
c0006c60:	5f                   	pop    edi
c0006c61:	c3                   	ret    

c0006c62 <f_utime>:
c0006c62:	56                   	push   esi
c0006c63:	b9 02 00 00 00       	mov    ecx,0x2
c0006c68:	53                   	push   ebx
c0006c69:	83 ec 64             	sub    esp,0x64
c0006c6c:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c70:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c74:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c78:	e8 7c ba ff ff       	call   c00026f9 <mount_volume>
c0006c7d:	85 c0                	test   eax,eax
c0006c7f:	0f 85 b5 00 00 00    	jne    c0006d3a <f_utime+0xd8>
c0006c85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c89:	83 ec 0c             	sub    esp,0xc
c0006c8c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c90:	68 60 04 00 00       	push   0x460
c0006c95:	e8 02 18 00 00       	call   c000849c <ff_memalloc>
c0006c9a:	83 c4 10             	add    esp,0x10
c0006c9d:	89 c3                	mov    ebx,eax
c0006c9f:	b8 11 00 00 00       	mov    eax,0x11
c0006ca4:	85 db                	test   ebx,ebx
c0006ca6:	0f 84 8e 00 00 00    	je     c0006d3a <f_utime+0xd8>
c0006cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cb0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cb6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cb9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cbc:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cc0:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cc4:	e8 a6 e1 ff ff       	call   c0004e6f <follow_path>
c0006cc9:	85 c0                	test   eax,eax
c0006ccb:	75 59                	jne    c0006d26 <f_utime+0xc4>
c0006ccd:	b8 06 00 00 00       	mov    eax,0x6
c0006cd2:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006cd7:	75 4d                	jne    c0006d26 <f_utime+0xc4>
c0006cd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdd:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006ce1:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ce5:	c1 e2 10             	shl    edx,0x10
c0006ce8:	09 ca                	or     edx,ecx
c0006cea:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ced:	75 1a                	jne    c0006d09 <f_utime+0xa7>
c0006cef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cf2:	83 c0 0c             	add    eax,0xc
c0006cf5:	e8 e5 af ff ff       	call   c0001cdf <st_dword>
c0006cfa:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cfe:	e8 c4 ce ff ff       	call   c0003bc7 <store_xdir>
c0006d03:	85 c0                	test   eax,eax
c0006d05:	75 1f                	jne    c0006d26 <f_utime+0xc4>
c0006d07:	eb 14                	jmp    c0006d1d <f_utime+0xbb>
c0006d09:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d0d:	83 c0 16             	add    eax,0x16
c0006d10:	e8 ca af ff ff       	call   c0001cdf <st_dword>
c0006d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d19:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d21:	e8 4c d8 ff ff       	call   c0004572 <sync_fs>
c0006d26:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d2a:	83 ec 0c             	sub    esp,0xc
c0006d2d:	53                   	push   ebx
c0006d2e:	e8 7f 17 00 00       	call   c00084b2 <ff_memfree>
c0006d33:	83 c4 10             	add    esp,0x10
c0006d36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d3a:	83 c4 64             	add    esp,0x64
c0006d3d:	5b                   	pop    ebx
c0006d3e:	5e                   	pop    esi
c0006d3f:	c3                   	ret    

c0006d40 <f_getlabel>:
c0006d40:	55                   	push   ebp
c0006d41:	31 c9                	xor    ecx,ecx
c0006d43:	57                   	push   edi
c0006d44:	56                   	push   esi
c0006d45:	53                   	push   ebx
c0006d46:	83 ec 6c             	sub    esp,0x6c
c0006d49:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d4d:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d54:	e8 a0 b9 ff ff       	call   c00026f9 <mount_volume>
c0006d59:	89 c6                	mov    esi,eax
c0006d5b:	85 c0                	test   eax,eax
c0006d5d:	0f 85 c1 01 00 00    	jne    c0006f24 <f_getlabel+0x1e4>
c0006d63:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d6b:	0f 84 5f 01 00 00    	je     c0006ed0 <f_getlabel+0x190>
c0006d71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d75:	31 d2                	xor    edx,edx
c0006d77:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d7b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d83:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d87:	e8 39 c4 ff ff       	call   c00031c5 <dir_sdi>
c0006d8c:	85 c0                	test   eax,eax
c0006d8e:	0f 85 2d 01 00 00    	jne    c0006ec1 <f_getlabel+0x181>
c0006d94:	ba 01 00 00 00       	mov    edx,0x1
c0006d99:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d9d:	e8 33 cc ff ff       	call   c00039d5 <dir_read>
c0006da2:	85 c0                	test   eax,eax
c0006da4:	0f 85 17 01 00 00    	jne    c0006ec1 <f_getlabel+0x181>
c0006daa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dae:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006db1:	74 09                	je     c0006dbc <f_getlabel+0x7c>
c0006db3:	31 db                	xor    ebx,ebx
c0006db5:	31 c9                	xor    ecx,ecx
c0006db7:	e9 c8 00 00 00       	jmp    c0006e84 <f_getlabel+0x144>
c0006dbc:	31 ed                	xor    ebp,ebp
c0006dbe:	31 db                	xor    ebx,ebx
c0006dc0:	31 ff                	xor    edi,edi
c0006dc2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dc6:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dca:	39 fa                	cmp    edx,edi
c0006dcc:	76 4b                	jbe    c0006e19 <f_getlabel+0xd9>
c0006dce:	47                   	inc    edi
c0006dcf:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dd2:	01 d0                	add    eax,edx
c0006dd4:	e8 90 ae ff ff       	call   c0001c69 <ld_word>
c0006dd9:	66 85 ed             	test   bp,bp
c0006ddc:	75 0d                	jne    c0006deb <f_getlabel+0xab>
c0006dde:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006de4:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006de9:	76 28                	jbe    c0006e13 <f_getlabel+0xd3>
c0006deb:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006df2:	89 e9                	mov    ecx,ebp
c0006df4:	01 da                	add    edx,ebx
c0006df6:	c1 e1 10             	shl    ecx,0x10
c0006df9:	0f b7 c0             	movzx  eax,ax
c0006dfc:	09 c8                	or     eax,ecx
c0006dfe:	b9 04 00 00 00       	mov    ecx,0x4
c0006e03:	e8 01 b0 ff ff       	call   c0001e09 <put_utf>
c0006e08:	84 c0                	test   al,al
c0006e0a:	74 0b                	je     c0006e17 <f_getlabel+0xd7>
c0006e0c:	0f b6 c0             	movzx  eax,al
c0006e0f:	01 c3                	add    ebx,eax
c0006e11:	31 c0                	xor    eax,eax
c0006e13:	89 c5                	mov    ebp,eax
c0006e15:	eb ab                	jmp    c0006dc2 <f_getlabel+0x82>
c0006e17:	31 db                	xor    ebx,ebx
c0006e19:	66 85 ed             	test   bp,bp
c0006e1c:	74 02                	je     c0006e20 <f_getlabel+0xe0>
c0006e1e:	31 db                	xor    ebx,ebx
c0006e20:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e27:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e2b:	e9 a0 00 00 00       	jmp    c0006ed0 <f_getlabel+0x190>
c0006e30:	83 ff 0b             	cmp    edi,0xb
c0006e33:	74 11                	je     c0006e46 <f_getlabel+0x106>
c0006e35:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e3e:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e41:	c1 e0 08             	shl    eax,0x8
c0006e44:	09 c2                	or     edx,eax
c0006e46:	0f b7 d2             	movzx  edx,dx
c0006e49:	50                   	push   eax
c0006e4a:	50                   	push   eax
c0006e4b:	68 b5 01 00 00       	push   0x1b5
c0006e50:	52                   	push   edx
c0006e51:	e8 03 17 00 00       	call   c0008559 <ff_oem2uni>
c0006e56:	83 c4 10             	add    esp,0x10
c0006e59:	66 85 c0             	test   ax,ax
c0006e5c:	74 46                	je     c0006ea4 <f_getlabel+0x164>
c0006e5e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e65:	0f b7 c0             	movzx  eax,ax
c0006e68:	01 da                	add    edx,ebx
c0006e6a:	b9 04 00 00 00       	mov    ecx,0x4
c0006e6f:	e8 95 af ff ff       	call   c0001e09 <put_utf>
c0006e74:	84 c0                	test   al,al
c0006e76:	74 2c                	je     c0006ea4 <f_getlabel+0x164>
c0006e78:	0f b6 c0             	movzx  eax,al
c0006e7b:	01 c3                	add    ebx,eax
c0006e7d:	83 ff 0b             	cmp    edi,0xb
c0006e80:	74 24                	je     c0006ea6 <f_getlabel+0x166>
c0006e82:	89 f9                	mov    ecx,edi
c0006e84:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e88:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e8b:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e90:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e99:	e8 9f ae ff ff       	call   c0001d3d <dbc_1st>
c0006e9e:	85 c0                	test   eax,eax
c0006ea0:	74 a4                	je     c0006e46 <f_getlabel+0x106>
c0006ea2:	eb 8c                	jmp    c0006e30 <f_getlabel+0xf0>
c0006ea4:	31 db                	xor    ebx,ebx
c0006ea6:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ead:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006eb0:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006eb7:	74 17                	je     c0006ed0 <f_getlabel+0x190>
c0006eb9:	4b                   	dec    ebx
c0006eba:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006ebd:	74 ee                	je     c0006ead <f_getlabel+0x16d>
c0006ebf:	eb 0f                	jmp    c0006ed0 <f_getlabel+0x190>
c0006ec1:	83 f8 04             	cmp    eax,0x4
c0006ec4:	75 5c                	jne    c0006f22 <f_getlabel+0x1e2>
c0006ec6:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ecd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ed0:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ed8:	74 4a                	je     c0006f24 <f_getlabel+0x1e4>
c0006eda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ede:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ee1:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ee4:	e8 5e b5 ff ff       	call   c0002447 <move_window>
c0006ee9:	89 c6                	mov    esi,eax
c0006eeb:	85 c0                	test   eax,eax
c0006eed:	75 35                	jne    c0006f24 <f_getlabel+0x1e4>
c0006eef:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006ef3:	b8 43 00 00 00       	mov    eax,0x43
c0006ef8:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006efa:	80 f9 03             	cmp    cl,0x3
c0006efd:	74 0f                	je     c0006f0e <f_getlabel+0x1ce>
c0006eff:	31 c0                	xor    eax,eax
c0006f01:	80 f9 04             	cmp    cl,0x4
c0006f04:	0f 94 c0             	sete   al
c0006f07:	48                   	dec    eax
c0006f08:	83 e0 c3             	and    eax,0xffffffc3
c0006f0b:	83 c0 64             	add    eax,0x64
c0006f0e:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f12:	e8 5f ad ff ff       	call   c0001c76 <ld_dword>
c0006f17:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f1e:	89 07                	mov    DWORD PTR [edi],eax
c0006f20:	eb 02                	jmp    c0006f24 <f_getlabel+0x1e4>
c0006f22:	89 c6                	mov    esi,eax
c0006f24:	83 c4 6c             	add    esp,0x6c
c0006f27:	89 f0                	mov    eax,esi
c0006f29:	5b                   	pop    ebx
c0006f2a:	5e                   	pop    esi
c0006f2b:	5f                   	pop    edi
c0006f2c:	5d                   	pop    ebp
c0006f2d:	c3                   	ret    

c0006f2e <f_setlabel>:
c0006f2e:	56                   	push   esi
c0006f2f:	b9 02 00 00 00       	mov    ecx,0x2
c0006f34:	53                   	push   ebx
c0006f35:	83 ec 74             	sub    esp,0x74
c0006f38:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f3c:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f43:	e8 b1 b7 ff ff       	call   c00026f9 <mount_volume>
c0006f48:	89 c6                	mov    esi,eax
c0006f4a:	85 c0                	test   eax,eax
c0006f4c:	0f 85 41 02 00 00    	jne    c0007193 <f_setlabel+0x265>
c0006f52:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f56:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f59:	0f 85 8e 00 00 00    	jne    c0006fed <f_setlabel+0xbf>
c0006f5f:	b9 16 00 00 00       	mov    ecx,0x16
c0006f64:	31 d2                	xor    edx,edx
c0006f66:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f6a:	31 db                	xor    ebx,ebx
c0006f6c:	e8 8c ad ff ff       	call   c0001cfd <mem_set>
c0006f71:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f78:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f7b:	0f 86 0a 01 00 00    	jbe    c000708b <f_setlabel+0x15d>
c0006f81:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f88:	e8 b6 ad ff ff       	call   c0001d43 <tchar2uni>
c0006f8d:	89 c6                	mov    esi,eax
c0006f8f:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f94:	76 2a                	jbe    c0006fc0 <f_setlabel+0x92>
c0006f96:	83 f8 ff             	cmp    eax,0xffffffff
c0006f99:	74 05                	je     c0006fa0 <f_setlabel+0x72>
c0006f9b:	83 fb 09             	cmp    ebx,0x9
c0006f9e:	76 0a                	jbe    c0006faa <f_setlabel+0x7c>
c0006fa0:	be 06 00 00 00       	mov    esi,0x6
c0006fa5:	e9 e9 01 00 00       	jmp    c0007193 <f_setlabel+0x265>
c0006faa:	89 c2                	mov    edx,eax
c0006fac:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fb0:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fb3:	c1 ea 10             	shr    edx,0x10
c0006fb6:	01 c8                	add    eax,ecx
c0006fb8:	43                   	inc    ebx
c0006fb9:	e8 1d ad ff ff       	call   c0001cdb <st_word>
c0006fbe:	eb 04                	jmp    c0006fc4 <f_setlabel+0x96>
c0006fc0:	85 c0                	test   eax,eax
c0006fc2:	74 dc                	je     c0006fa0 <f_setlabel+0x72>
c0006fc4:	89 f2                	mov    edx,esi
c0006fc6:	b8 b7 93 02 c0       	mov    eax,0xc00293b7
c0006fcb:	e8 5b ad ff ff       	call   c0001d2b <chk_chr>
c0006fd0:	85 c0                	test   eax,eax
c0006fd2:	75 cc                	jne    c0006fa0 <f_setlabel+0x72>
c0006fd4:	83 fb 0a             	cmp    ebx,0xa
c0006fd7:	77 c7                	ja     c0006fa0 <f_setlabel+0x72>
c0006fd9:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fdc:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fe0:	0f b7 d6             	movzx  edx,si
c0006fe3:	01 c8                	add    eax,ecx
c0006fe5:	43                   	inc    ebx
c0006fe6:	e8 f0 ac ff ff       	call   c0001cdb <st_word>
c0006feb:	eb 84                	jmp    c0006f71 <f_setlabel+0x43>
c0006fed:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ff2:	ba 20 00 00 00       	mov    edx,0x20
c0006ff7:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ffb:	31 db                	xor    ebx,ebx
c0006ffd:	e8 fb ac ff ff       	call   c0001cfd <mem_set>
c0007002:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007009:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000700c:	76 60                	jbe    c000706e <f_setlabel+0x140>
c000700e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0007015:	e8 29 ad ff ff       	call   c0001d43 <tchar2uni>
c000701a:	3d ff ff 00 00       	cmp    eax,0xffff
c000701f:	0f 87 7b ff ff ff    	ja     c0006fa0 <f_setlabel+0x72>
c0007025:	83 ec 0c             	sub    esp,0xc
c0007028:	50                   	push   eax
c0007029:	e8 97 15 00 00       	call   c00085c5 <ff_wtoupper>
c000702e:	5a                   	pop    edx
c000702f:	59                   	pop    ecx
c0007030:	68 b5 01 00 00       	push   0x1b5
c0007035:	50                   	push   eax
c0007036:	e8 8e 14 00 00       	call   c00084c9 <ff_uni2oem>
c000703b:	83 c4 10             	add    esp,0x10
c000703e:	89 c6                	mov    esi,eax
c0007040:	66 85 c0             	test   ax,ax
c0007043:	0f 84 57 ff ff ff    	je     c0006fa0 <f_setlabel+0x72>
c0007049:	0f b7 d0             	movzx  edx,ax
c000704c:	b8 b0 93 02 c0       	mov    eax,0xc00293b0
c0007051:	e8 d5 ac ff ff       	call   c0001d2b <chk_chr>
c0007056:	85 c0                	test   eax,eax
c0007058:	0f 85 42 ff ff ff    	jne    c0006fa0 <f_setlabel+0x72>
c000705e:	66 81 fe ff 00       	cmp    si,0xff
c0007063:	0f 87 14 01 00 00    	ja     c000717d <f_setlabel+0x24f>
c0007069:	e9 fa 00 00 00       	jmp    c0007168 <f_setlabel+0x23a>
c000706e:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007073:	0f 84 27 ff ff ff    	je     c0006fa0 <f_setlabel+0x72>
c0007079:	85 db                	test   ebx,ebx
c000707b:	74 0e                	je     c000708b <f_setlabel+0x15d>
c000707d:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007080:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007085:	75 04                	jne    c000708b <f_setlabel+0x15d>
c0007087:	89 c3                	mov    ebx,eax
c0007089:	eb ee                	jmp    c0007079 <f_setlabel+0x14b>
c000708b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000708f:	31 d2                	xor    edx,edx
c0007091:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007095:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000709d:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070a1:	e8 1f c1 ff ff       	call   c00031c5 <dir_sdi>
c00070a6:	89 c6                	mov    esi,eax
c00070a8:	85 c0                	test   eax,eax
c00070aa:	0f 85 e3 00 00 00    	jne    c0007193 <f_setlabel+0x265>
c00070b0:	ba 01 00 00 00       	mov    edx,0x1
c00070b5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b9:	e8 17 c9 ff ff       	call   c00039d5 <dir_read>
c00070be:	85 c0                	test   eax,eax
c00070c0:	75 21                	jne    c00070e3 <f_setlabel+0x1b5>
c00070c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070c6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ca:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070cd:	74 5d                	je     c000712c <f_setlabel+0x1fe>
c00070cf:	85 db                	test   ebx,ebx
c00070d1:	74 0b                	je     c00070de <f_setlabel+0x1b0>
c00070d3:	b9 0b 00 00 00       	mov    ecx,0xb
c00070d8:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070dc:	eb 70                	jmp    c000714e <f_setlabel+0x220>
c00070de:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070e1:	eb 70                	jmp    c0007153 <f_setlabel+0x225>
c00070e3:	83 f8 04             	cmp    eax,0x4
c00070e6:	75 7c                	jne    c0007164 <f_setlabel+0x236>
c00070e8:	85 db                	test   ebx,ebx
c00070ea:	0f 84 a3 00 00 00    	je     c0007193 <f_setlabel+0x265>
c00070f0:	ba 01 00 00 00       	mov    edx,0x1
c00070f5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070f9:	e8 51 ca ff ff       	call   c0003b4f <dir_alloc>
c00070fe:	89 c6                	mov    esi,eax
c0007100:	85 c0                	test   eax,eax
c0007102:	0f 85 8b 00 00 00    	jne    c0007193 <f_setlabel+0x265>
c0007108:	31 d2                	xor    edx,edx
c000710a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710e:	b9 20 00 00 00       	mov    ecx,0x20
c0007113:	e8 e5 ab ff ff       	call   c0001cfd <mem_set>
c0007118:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000711f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007123:	75 18                	jne    c000713d <f_setlabel+0x20f>
c0007125:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007128:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000712c:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c000712f:	b9 16 00 00 00       	mov    ecx,0x16
c0007134:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007138:	83 c0 02             	add    eax,0x2
c000713b:	eb 9b                	jmp    c00070d8 <f_setlabel+0x1aa>
c000713d:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007141:	b9 0b 00 00 00       	mov    ecx,0xb
c0007146:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000714a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000714e:	e8 95 ab ff ff       	call   c0001ce8 <mem_cpy>
c0007153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007157:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000715b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000715f:	e8 0e d4 ff ff       	call   c0004572 <sync_fs>
c0007164:	89 c6                	mov    esi,eax
c0007166:	eb 2b                	jmp    c0007193 <f_setlabel+0x265>
c0007168:	83 fb 0a             	cmp    ebx,0xa
c000716b:	0f 87 2f fe ff ff    	ja     c0006fa0 <f_setlabel+0x72>
c0007171:	89 f0                	mov    eax,esi
c0007173:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007177:	43                   	inc    ebx
c0007178:	e9 85 fe ff ff       	jmp    c0007002 <f_setlabel+0xd4>
c000717d:	83 fb 09             	cmp    ebx,0x9
c0007180:	0f 87 1a fe ff ff    	ja     c0006fa0 <f_setlabel+0x72>
c0007186:	89 f0                	mov    eax,esi
c0007188:	66 c1 e8 08          	shr    ax,0x8
c000718c:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007190:	43                   	inc    ebx
c0007191:	eb de                	jmp    c0007171 <f_setlabel+0x243>
c0007193:	89 f0                	mov    eax,esi
c0007195:	83 c4 74             	add    esp,0x74
c0007198:	5b                   	pop    ebx
c0007199:	5e                   	pop    esi
c000719a:	c3                   	ret    

c000719b <f_forward>:
c000719b:	55                   	push   ebp
c000719c:	57                   	push   edi
c000719d:	56                   	push   esi
c000719e:	53                   	push   ebx
c000719f:	83 ec 2c             	sub    esp,0x2c
c00071a2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00071a6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071aa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071b0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071b4:	89 d8                	mov    eax,ebx
c00071b6:	e8 b1 b1 ff ff       	call   c000236c <validate>
c00071bb:	89 c5                	mov    ebp,eax
c00071bd:	85 c0                	test   eax,eax
c00071bf:	0f 85 aa 01 00 00    	jne    c000736f <f_forward+0x1d4>
c00071c5:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071c9:	85 ed                	test   ebp,ebp
c00071cb:	0f 85 9e 01 00 00    	jne    c000736f <f_forward+0x1d4>
c00071d1:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071d5:	0f 84 8f 01 00 00    	je     c000736a <f_forward+0x1cf>
c00071db:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071de:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071e1:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071e4:	bf 00 00 00 00       	mov    edi,0x0
c00071e9:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071ec:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071f0:	89 d1                	mov    ecx,edx
c00071f2:	19 f9                	sbb    ecx,edi
c00071f4:	0f 83 cf 00 00 00    	jae    c00072c9 <f_forward+0x12e>
c00071fa:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071fe:	e9 c6 00 00 00       	jmp    c00072c9 <f_forward+0x12e>
c0007203:	50                   	push   eax
c0007204:	50                   	push   eax
c0007205:	6a 00                	push   0x0
c0007207:	6a 00                	push   0x0
c0007209:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000720d:	83 c4 10             	add    esp,0x10
c0007210:	85 c0                	test   eax,eax
c0007212:	0f 84 57 01 00 00    	je     c000736f <f_forward+0x1d4>
c0007218:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000721b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000721f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0007222:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0007226:	89 d7                	mov    edi,edx
c0007228:	8d 4e ff             	lea    ecx,[esi-0x1]
c000722b:	89 c6                	mov    esi,eax
c000722d:	0f ac fe 09          	shrd   esi,edi,0x9
c0007231:	21 ce                	and    esi,ecx
c0007233:	89 c1                	mov    ecx,eax
c0007235:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000723b:	0f 84 98 00 00 00    	je     c00072d9 <f_forward+0x13e>
c0007241:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007245:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007248:	89 c8                	mov    eax,ecx
c000724a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000724e:	e8 af ac ff ff       	call   c0001f02 <clst2sect>
c0007253:	89 d7                	mov    edi,edx
c0007255:	09 c7                	or     edi,eax
c0007257:	0f 84 9e 00 00 00    	je     c00072fb <f_forward+0x160>
c000725d:	31 ff                	xor    edi,edi
c000725f:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007262:	01 c6                	add    esi,eax
c0007264:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007268:	11 d7                	adc    edi,edx
c000726a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000726d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007270:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007274:	39 fa                	cmp    edx,edi
c0007276:	0f 85 a2 00 00 00    	jne    c000731e <f_forward+0x183>
c000727c:	39 f0                	cmp    eax,esi
c000727e:	0f 85 9a 00 00 00    	jne    c000731e <f_forward+0x183>
c0007284:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007287:	ba 00 02 00 00       	mov    edx,0x200
c000728c:	25 ff 01 00 00       	and    eax,0x1ff
c0007291:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007295:	29 c2                	sub    edx,eax
c0007297:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000729a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000729d:	39 d1                	cmp    ecx,edx
c000729f:	76 02                	jbe    c00072a3 <f_forward+0x108>
c00072a1:	89 d1                	mov    ecx,edx
c00072a3:	8d 73 50             	lea    esi,[ebx+0x50]
c00072a6:	52                   	push   edx
c00072a7:	01 c6                	add    esi,eax
c00072a9:	52                   	push   edx
c00072aa:	51                   	push   ecx
c00072ab:	56                   	push   esi
c00072ac:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072b0:	83 c4 10             	add    esp,0x10
c00072b3:	85 c0                	test   eax,eax
c00072b5:	74 44                	je     c00072fb <f_forward+0x160>
c00072b7:	31 ff                	xor    edi,edi
c00072b9:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072bc:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072bf:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072c3:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072c7:	01 07                	add    DWORD PTR [edi],eax
c00072c9:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072ce:	0f 85 2f ff ff ff    	jne    c0007203 <f_forward+0x68>
c00072d4:	e9 96 00 00 00       	jmp    c000736f <f_forward+0x1d4>
c00072d9:	85 f6                	test   esi,esi
c00072db:	0f 85 60 ff ff ff    	jne    c0007241 <f_forward+0xa6>
c00072e1:	89 d7                	mov    edi,edx
c00072e3:	09 c7                	or     edi,eax
c00072e5:	75 05                	jne    c00072ec <f_forward+0x151>
c00072e7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072ea:	eb 0a                	jmp    c00072f6 <f_forward+0x15b>
c00072ec:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072ef:	89 d8                	mov    eax,ebx
c00072f1:	e8 d9 bc ff ff       	call   c0002fcf <get_fat>
c00072f6:	83 f8 01             	cmp    eax,0x1
c00072f9:	77 0b                	ja     c0007306 <f_forward+0x16b>
c00072fb:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072ff:	bd 02 00 00 00       	mov    ebp,0x2
c0007304:	eb 69                	jmp    c000736f <f_forward+0x1d4>
c0007306:	83 f8 ff             	cmp    eax,0xffffffff
c0007309:	75 0b                	jne    c0007316 <f_forward+0x17b>
c000730b:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000730f:	bd 01 00 00 00       	mov    ebp,0x1
c0007314:	eb 59                	jmp    c000736f <f_forward+0x1d4>
c0007316:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007319:	e9 23 ff ff ff       	jmp    c0007241 <f_forward+0xa6>
c000731e:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007322:	79 20                	jns    c0007344 <f_forward+0x1a9>
c0007324:	83 ec 0c             	sub    esp,0xc
c0007327:	6a 01                	push   0x1
c0007329:	52                   	push   edx
c000732a:	50                   	push   eax
c000732b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000732f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007333:	50                   	push   eax
c0007334:	e8 fb a8 ff ff       	call   c0001c34 <disk_write>
c0007339:	83 c4 20             	add    esp,0x20
c000733c:	85 c0                	test   eax,eax
c000733e:	75 cb                	jne    c000730b <f_forward+0x170>
c0007340:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007344:	83 ec 0c             	sub    esp,0xc
c0007347:	6a 01                	push   0x1
c0007349:	57                   	push   edi
c000734a:	56                   	push   esi
c000734b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000734f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007353:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007357:	50                   	push   eax
c0007358:	e8 c1 a8 ff ff       	call   c0001c1e <disk_read>
c000735d:	83 c4 20             	add    esp,0x20
c0007360:	85 c0                	test   eax,eax
c0007362:	0f 84 1c ff ff ff    	je     c0007284 <f_forward+0xe9>
c0007368:	eb a1                	jmp    c000730b <f_forward+0x170>
c000736a:	bd 07 00 00 00       	mov    ebp,0x7
c000736f:	83 c4 2c             	add    esp,0x2c
c0007372:	89 e8                	mov    eax,ebp
c0007374:	5b                   	pop    ebx
c0007375:	5e                   	pop    esi
c0007376:	5f                   	pop    edi
c0007377:	5d                   	pop    ebp
c0007378:	c3                   	ret    

c0007379 <f_mkfs>:
c0007379:	55                   	push   ebp
c000737a:	57                   	push   edi
c000737b:	56                   	push   esi
c000737c:	53                   	push   ebx
c000737d:	bb 0b 00 00 00       	mov    ebx,0xb
c0007382:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007388:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c000738f:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007396:	e8 b0 ae ff ff       	call   c000224b <get_ldnumber>
c000739b:	85 c0                	test   eax,eax
c000739d:	0f 88 ec 10 00 00    	js     c000848f <f_mkfs+0x1116>
c00073a3:	8b 14 85 00 e4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1c00]
c00073aa:	85 d2                	test   edx,edx
c00073ac:	74 03                	je     c00073b1 <f_mkfs+0x38>
c00073ae:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073b1:	85 f6                	test   esi,esi
c00073b3:	75 05                	jne    c00073ba <f_mkfs+0x41>
c00073b5:	be a0 93 02 c0       	mov    esi,0xc00293a0
c00073ba:	83 ec 0c             	sub    esp,0xc
c00073bd:	0f b6 c0             	movzx  eax,al
c00073c0:	bb 03 00 00 00       	mov    ebx,0x3
c00073c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073c9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073cd:	e8 49 a8 ff ff       	call   c0001c1b <disk_initialize>
c00073d2:	83 c4 10             	add    esp,0x10
c00073d5:	a8 01                	test   al,0x1
c00073d7:	0f 85 b2 10 00 00    	jne    c000848f <f_mkfs+0x1116>
c00073dd:	bb 0a 00 00 00       	mov    ebx,0xa
c00073e2:	a8 04                	test   al,0x4
c00073e4:	0f 85 a5 10 00 00    	jne    c000848f <f_mkfs+0x1116>
c00073ea:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073ed:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073f1:	85 c0                	test   eax,eax
c00073f3:	75 20                	jne    c0007415 <f_mkfs+0x9c>
c00073f5:	51                   	push   ecx
c00073f6:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073fa:	50                   	push   eax
c00073fb:	6a 03                	push   0x3
c00073fd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007401:	e8 44 a8 ff ff       	call   c0001c4a <disk_ioctl>
c0007406:	83 c4 10             	add    esp,0x10
c0007409:	85 c0                	test   eax,eax
c000740b:	74 08                	je     c0007415 <f_mkfs+0x9c>
c000740d:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007415:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007419:	8d 42 ff             	lea    eax,[edx-0x1]
c000741c:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007421:	77 04                	ja     c0007427 <f_mkfs+0xae>
c0007423:	85 c2                	test   edx,eax
c0007425:	74 08                	je     c000742f <f_mkfs+0xb6>
c0007427:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000742f:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007432:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0007436:	48                   	dec    eax
c0007437:	3c 01                	cmp    al,0x1
c0007439:	76 05                	jbe    c0007440 <f_mkfs+0xc7>
c000743b:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007440:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007447:	48                   	dec    eax
c0007448:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000744d:	77 07                	ja     c0007456 <f_mkfs+0xdd>
c000744f:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007454:	74 08                	je     c000745e <f_mkfs+0xe5>
c0007456:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000745e:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007461:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007467:	77 07                	ja     c0007470 <f_mkfs+0xf7>
c0007469:	8d 43 ff             	lea    eax,[ebx-0x1]
c000746c:	85 d8                	test   eax,ebx
c000746e:	74 02                	je     c0007472 <f_mkfs+0xf9>
c0007470:	31 db                	xor    ebx,ebx
c0007472:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000747d:	77 0a                	ja     c0007489 <f_mkfs+0x110>
c000747f:	bb 11 00 00 00       	mov    ebx,0x11
c0007484:	e9 06 10 00 00       	jmp    c000848f <f_mkfs+0x1116>
c0007489:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007490:	8b 36                	mov    esi,DWORD PTR [esi]
c0007492:	85 ed                	test   ebp,ebp
c0007494:	75 1e                	jne    c00074b4 <f_mkfs+0x13b>
c0007496:	83 ec 0c             	sub    esp,0xc
c0007499:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00074a0:	25 00 fe ff ff       	and    eax,0xfffffe00
c00074a5:	50                   	push   eax
c00074a6:	e8 f1 0f 00 00       	call   c000849c <ff_memalloc>
c00074ab:	83 c4 10             	add    esp,0x10
c00074ae:	89 c5                	mov    ebp,eax
c00074b0:	85 c0                	test   eax,eax
c00074b2:	74 cb                	je     c000747f <f_mkfs+0x106>
c00074b4:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074bc:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074c4:	52                   	push   edx
c00074c5:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074c9:	50                   	push   eax
c00074ca:	6a 01                	push   0x1
c00074cc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074d0:	e8 75 a7 ff ff       	call   c0001c4a <disk_ioctl>
c00074d5:	83 c4 10             	add    esp,0x10
c00074d8:	85 c0                	test   eax,eax
c00074da:	0f 85 4a 0f 00 00    	jne    c000842a <f_mkfs+0x10b1>
c00074e0:	89 f1                	mov    ecx,esi
c00074e2:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074ea:	83 e1 0f             	and    ecx,0xf
c00074ed:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074f5:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074f9:	83 e6 08             	and    esi,0x8
c00074fc:	75 56                	jne    c0007554 <f_mkfs+0x1db>
c00074fe:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c0007502:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c0007506:	83 ff 00             	cmp    edi,0x0
c0007509:	76 20                	jbe    c000752b <f_mkfs+0x1b2>
c000750b:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007510:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007518:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c000751e:	83 d7 ff             	adc    edi,0xffffffff
c0007521:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007525:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007529:	eb 21                	jmp    c000754c <f_mkfs+0x1d3>
c000752b:	ba 3f 00 00 00       	mov    edx,0x3f
c0007530:	39 f2                	cmp    edx,esi
c0007532:	19 f8                	sbb    eax,edi
c0007534:	73 1e                	jae    c0007554 <f_mkfs+0x1db>
c0007536:	83 c6 c1             	add    esi,0xffffffc1
c0007539:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007541:	83 d7 ff             	adc    edi,0xffffffff
c0007544:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007548:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000754c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007554:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007558:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000755c:	89 04 24             	mov    DWORD PTR [esp],eax
c000755f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007563:	31 c0                	xor    eax,eax
c0007565:	ba 7f 00 00 00       	mov    edx,0x7f
c000756a:	89 c7                	mov    edi,eax
c000756c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000756f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007573:	0f 83 c5 0a 00 00    	jae    c000803e <f_mkfs+0xcc5>
c0007579:	89 df                	mov    edi,ebx
c000757b:	c1 ef 09             	shr    edi,0x9
c000757e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007582:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007589:	c1 ef 09             	shr    edi,0x9
c000758c:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007591:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007595:	74 29                	je     c00075c0 <f_mkfs+0x247>
c0007597:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000759d:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00075a2:	0f 97 c2             	seta   dl
c00075a5:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075a8:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075ac:	0f 92 c0             	setb   al
c00075af:	08 c2                	or     dl,al
c00075b1:	75 5b                	jne    c000760e <f_mkfs+0x295>
c00075b3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075b7:	83 e0 07             	and    eax,0x7
c00075ba:	3c 04                	cmp    al,0x4
c00075bc:	74 50                	je     c000760e <f_mkfs+0x295>
c00075be:	eb 1b                	jmp    c00075db <f_mkfs+0x262>
c00075c0:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075c5:	0f 87 73 0a 00 00    	ja     c000803e <f_mkfs+0xcc5>
c00075cb:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075d1:	76 08                	jbe    c00075db <f_mkfs+0x262>
c00075d3:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075db:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075df:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075e3:	83 e0 01             	and    eax,0x1
c00075e6:	80 e1 02             	and    cl,0x2
c00075e9:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075ed:	74 0d                	je     c00075fc <f_mkfs+0x283>
c00075ef:	84 c0                	test   al,al
c00075f1:	0f 84 53 09 00 00    	je     c0007f4a <f_mkfs+0xbd1>
c00075f7:	e9 12 08 00 00       	jmp    c0007e0e <f_mkfs+0xa95>
c00075fc:	bb 13 00 00 00       	mov    ebx,0x13
c0007601:	84 c0                	test   al,al
c0007603:	0f 85 05 08 00 00    	jne    c0007e0e <f_mkfs+0xa95>
c0007609:	e9 39 0e 00 00       	jmp    c0008447 <f_mkfs+0x10ce>
c000760e:	31 c0                	xor    eax,eax
c0007610:	ba ff 0f 00 00       	mov    edx,0xfff
c0007615:	89 c7                	mov    edi,eax
c0007617:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000761a:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000761e:	0f 83 1a 0a 00 00    	jae    c000803e <f_mkfs+0xcc5>
c0007624:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000762a:	77 39                	ja     c0007665 <f_mkfs+0x2ec>
c000762c:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007631:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007639:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000763c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007640:	73 08                	jae    c000764a <f_mkfs+0x2d1>
c0007642:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000764a:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000764f:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007652:	b8 00 00 00 00       	mov    eax,0x0
c0007657:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000765b:	73 08                	jae    c0007665 <f_mkfs+0x2ec>
c000765d:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007665:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007669:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000766d:	83 c0 20             	add    eax,0x20
c0007670:	83 d2 00             	adc    edx,0x0
c0007673:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007677:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000767b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000767f:	31 d2                	xor    edx,edx
c0007681:	31 ff                	xor    edi,edi
c0007683:	52                   	push   edx
c0007684:	89 fb                	mov    ebx,edi
c0007686:	50                   	push   eax
c0007687:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000768b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000768f:	e8 30 f3 01 00       	call   c00269c4 <__udivdi3>
c0007694:	83 c4 10             	add    esp,0x10
c0007697:	c1 e0 02             	shl    eax,0x2
c000769a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000769e:	05 07 02 00 00       	add    eax,0x207
c00076a3:	89 f1                	mov    ecx,esi
c00076a5:	c1 e8 09             	shr    eax,0x9
c00076a8:	83 c1 ff             	add    ecx,0xffffffff
c00076ab:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076af:	83 d3 ff             	adc    ebx,0xffffffff
c00076b2:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076b6:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076ba:	31 d2                	xor    edx,edx
c00076bc:	01 c8                	add    eax,ecx
c00076be:	11 da                	adc    edx,ebx
c00076c0:	89 c1                	mov    ecx,eax
c00076c2:	f7 de                	neg    esi
c00076c4:	89 d0                	mov    eax,edx
c00076c6:	83 d7 00             	adc    edi,0x0
c00076c9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076cd:	f7 df                	neg    edi
c00076cf:	21 f1                	and    ecx,esi
c00076d1:	21 f8                	and    eax,edi
c00076d3:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076d7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076db:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076df:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076e3:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076e7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076ea:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076ee:	0f ac d0 01          	shrd   eax,edx,0x1
c00076f2:	89 df                	mov    edi,ebx
c00076f4:	d1 ea                	shr    edx,1
c00076f6:	39 c1                	cmp    ecx,eax
c00076f8:	19 d7                	sbb    edi,edx
c00076fa:	0f 83 3e 09 00 00    	jae    c000803e <f_mkfs+0xcc5>
c0007700:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007704:	31 d2                	xor    edx,edx
c0007706:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c000770a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000770e:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007712:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007715:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007719:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c000771d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007721:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007725:	83 f8 0f             	cmp    eax,0xf
c0007728:	0f 86 10 09 00 00    	jbe    c000803e <f_mkfs+0xcc5>
c000772e:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c0007736:	0f 87 02 09 00 00    	ja     c000803e <f_mkfs+0xcc5>
c000773c:	31 d2                	xor    edx,edx
c000773e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007742:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000774a:	83 c0 07             	add    eax,0x7
c000774d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007755:	c1 e8 03             	shr    eax,0x3
c0007758:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000775f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007763:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007767:	c1 e0 09             	shl    eax,0x9
c000776a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000776e:	48                   	dec    eax
c000776f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007773:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007777:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c000777b:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000777f:	31 d2                	xor    edx,edx
c0007781:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007785:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000778c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007790:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007795:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007799:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000779d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00077a1:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00077a5:	31 ff                	xor    edi,edi
c00077a7:	31 f6                	xor    esi,esi
c00077a9:	31 db                	xor    ebx,ebx
c00077ab:	85 ff                	test   edi,edi
c00077ad:	74 05                	je     c00077b4 <f_mkfs+0x43b>
c00077af:	4f                   	dec    edi
c00077b0:	74 44                	je     c00077f6 <f_mkfs+0x47d>
c00077b2:	eb 4f                	jmp    c0007803 <f_mkfs+0x48a>
c00077b4:	83 ec 0c             	sub    esp,0xc
c00077b7:	0f b7 c3             	movzx  eax,bx
c00077ba:	50                   	push   eax
c00077bb:	e8 05 0e 00 00       	call   c00085c5 <ff_wtoupper>
c00077c0:	83 c4 10             	add    esp,0x10
c00077c3:	89 c1                	mov    ecx,eax
c00077c5:	8d 53 01             	lea    edx,[ebx+0x1]
c00077c8:	66 39 c3             	cmp    bx,ax
c00077cb:	75 3e                	jne    c000780b <f_mkfs+0x492>
c00077cd:	be 01 00 00 00       	mov    esi,0x1
c00077d2:	89 df                	mov    edi,ebx
c00077d4:	66 01 f7             	add    di,si
c00077d7:	75 07                	jne    c00077e0 <f_mkfs+0x467>
c00077d9:	83 fe 7f             	cmp    esi,0x7f
c00077dc:	77 31                	ja     c000780f <f_mkfs+0x496>
c00077de:	eb 16                	jmp    c00077f6 <f_mkfs+0x47d>
c00077e0:	83 ec 0c             	sub    esp,0xc
c00077e3:	0f b7 ff             	movzx  edi,di
c00077e6:	57                   	push   edi
c00077e7:	e8 d9 0d 00 00       	call   c00085c5 <ff_wtoupper>
c00077ec:	83 c4 10             	add    esp,0x10
c00077ef:	39 c7                	cmp    edi,eax
c00077f1:	75 e6                	jne    c00077d9 <f_mkfs+0x460>
c00077f3:	46                   	inc    esi
c00077f4:	eb dc                	jmp    c00077d2 <f_mkfs+0x459>
c00077f6:	31 c0                	xor    eax,eax
c00077f8:	89 d9                	mov    ecx,ebx
c00077fa:	4e                   	dec    esi
c00077fb:	0f 95 c0             	setne  al
c00077fe:	43                   	inc    ebx
c00077ff:	89 c7                	mov    edi,eax
c0007801:	eb 14                	jmp    c0007817 <f_mkfs+0x49e>
c0007803:	89 f1                	mov    ecx,esi
c0007805:	01 f3                	add    ebx,esi
c0007807:	31 ff                	xor    edi,edi
c0007809:	eb 0c                	jmp    c0007817 <f_mkfs+0x49e>
c000780b:	89 d3                	mov    ebx,edx
c000780d:	eb 08                	jmp    c0007817 <f_mkfs+0x49e>
c000780f:	bf 02 00 00 00       	mov    edi,0x2
c0007814:	83 c9 ff             	or     ecx,0xffffffff
c0007817:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000781b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000781e:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007822:	0f b6 c1             	movzx  eax,cl
c0007825:	e8 3a a9 ff ff       	call   c0002164 <xsum32>
c000782a:	66 c1 e9 08          	shr    cx,0x8
c000782e:	89 c2                	mov    edx,eax
c0007830:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007833:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007837:	0f b7 c1             	movzx  eax,cx
c000783a:	e8 25 a9 ff ff       	call   c0002164 <xsum32>
c000783f:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007844:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007848:	66 85 db             	test   bx,bx
c000784b:	74 1f                	je     c000786c <f_mkfs+0x4f3>
c000784d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007850:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007857:	83 c0 02             	add    eax,0x2
c000785a:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007860:	39 c2                	cmp    edx,eax
c0007862:	74 08                	je     c000786c <f_mkfs+0x4f3>
c0007864:	89 04 24             	mov    DWORD PTR [esp],eax
c0007867:	e9 3f ff ff ff       	jmp    c00077ab <f_mkfs+0x432>
c000786c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000786f:	83 ec 0c             	sub    esp,0xc
c0007872:	05 01 02 00 00       	add    eax,0x201
c0007877:	c1 e8 09             	shr    eax,0x9
c000787a:	50                   	push   eax
c000787b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000787f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007883:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007887:	55                   	push   ebp
c0007888:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000788c:	e8 a3 a3 ff ff       	call   c0001c34 <disk_write>
c0007891:	83 c4 20             	add    esp,0x20
c0007894:	85 c0                	test   eax,eax
c0007896:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007899:	0f 85 8b 0b 00 00    	jne    c000842a <f_mkfs+0x10b1>
c000789f:	89 d0                	mov    eax,edx
c00078a1:	31 d2                	xor    edx,edx
c00078a3:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00078a7:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078ab:	66 85 db             	test   bx,bx
c00078ae:	74 04                	je     c00078b4 <f_mkfs+0x53b>
c00078b0:	31 c0                	xor    eax,eax
c00078b2:	eb b0                	jmp    c0007864 <f_mkfs+0x4eb>
c00078b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b8:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078bc:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078c0:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078c6:	31 d2                	xor    edx,edx
c00078c8:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078d3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078d7:	c1 eb 09             	shr    ebx,0x9
c00078da:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078e1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078e5:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078e9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078ed:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078f1:	8d 70 01             	lea    esi,[eax+0x1]
c00078f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078fc:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007903:	31 d2                	xor    edx,edx
c0007905:	25 00 fe ff ff       	and    eax,0xfffffe00
c000790a:	89 04 24             	mov    DWORD PTR [esp],eax
c000790d:	89 c1                	mov    ecx,eax
c000790f:	89 e8                	mov    eax,ebp
c0007911:	e8 e7 a3 ff ff       	call   c0001cfd <mem_set>
c0007916:	31 c0                	xor    eax,eax
c0007918:	39 04 24             	cmp    DWORD PTR [esp],eax
c000791b:	76 10                	jbe    c000792d <f_mkfs+0x5b4>
c000791d:	83 fe 07             	cmp    esi,0x7
c0007920:	76 0b                	jbe    c000792d <f_mkfs+0x5b4>
c0007922:	40                   	inc    eax
c0007923:	83 ee 08             	sub    esi,0x8
c0007926:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c000792b:	eb eb                	jmp    c0007918 <f_mkfs+0x59f>
c000792d:	b2 01                	mov    dl,0x1
c000792f:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007933:	85 f6                	test   esi,esi
c0007935:	74 0c                	je     c0007943 <f_mkfs+0x5ca>
c0007937:	39 04 24             	cmp    DWORD PTR [esp],eax
c000793a:	76 07                	jbe    c0007943 <f_mkfs+0x5ca>
c000793c:	08 11                	or     BYTE PTR [ecx],dl
c000793e:	4e                   	dec    esi
c000793f:	d1 e2                	shl    edx,1
c0007941:	eb f0                	jmp    c0007933 <f_mkfs+0x5ba>
c0007943:	89 df                	mov    edi,ebx
c0007945:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007949:	76 04                	jbe    c000794f <f_mkfs+0x5d6>
c000794b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000794f:	83 ec 0c             	sub    esp,0xc
c0007952:	57                   	push   edi
c0007953:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007957:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000795b:	55                   	push   ebp
c000795c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007960:	e8 cf a2 ff ff       	call   c0001c34 <disk_write>
c0007965:	83 c4 20             	add    esp,0x20
c0007968:	85 c0                	test   eax,eax
c000796a:	0f 85 ba 0a 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007970:	31 d2                	xor    edx,edx
c0007972:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007976:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c000797a:	29 fb                	sub    ebx,edi
c000797c:	0f 85 7a ff ff ff    	jne    c00078fc <f_mkfs+0x583>
c0007982:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007986:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000798e:	31 f6                	xor    esi,esi
c0007990:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007994:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007997:	31 d2                	xor    edx,edx
c0007999:	89 e8                	mov    eax,ebp
c000799b:	e8 5d a3 ff ff       	call   c0001cfd <mem_set>
c00079a0:	31 c9                	xor    ecx,ecx
c00079a2:	85 db                	test   ebx,ebx
c00079a4:	75 40                	jne    c00079e6 <f_mkfs+0x66d>
c00079a6:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079ab:	89 e8                	mov    eax,ebp
c00079ad:	bb 02 00 00 00       	mov    ebx,0x2
c00079b2:	e8 28 a3 ff ff       	call   c0001cdf <st_dword>
c00079b7:	8d 45 04             	lea    eax,[ebp+0x4]
c00079ba:	83 ca ff             	or     edx,0xffffffff
c00079bd:	e8 1d a3 ff ff       	call   c0001cdf <st_dword>
c00079c2:	b9 08 00 00 00       	mov    ecx,0x8
c00079c7:	eb 1d                	jmp    c00079e6 <f_mkfs+0x66d>
c00079c9:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079cc:	76 3b                	jbe    c0007a09 <f_mkfs+0x690>
c00079ce:	43                   	inc    ebx
c00079cf:	83 fe 01             	cmp    esi,0x1
c00079d2:	89 da                	mov    edx,ebx
c00079d4:	77 03                	ja     c00079d9 <f_mkfs+0x660>
c00079d6:	83 ca ff             	or     edx,0xffffffff
c00079d9:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079dd:	4e                   	dec    esi
c00079de:	e8 fc a2 ff ff       	call   c0001cdf <st_dword>
c00079e3:	83 c1 04             	add    ecx,0x4
c00079e6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079ea:	85 f6                	test   esi,esi
c00079ec:	75 db                	jne    c00079c9 <f_mkfs+0x650>
c00079ee:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079f3:	77 14                	ja     c0007a09 <f_mkfs+0x690>
c00079f5:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079f9:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007a00:	85 f6                	test   esi,esi
c0007a02:	74 05                	je     c0007a09 <f_mkfs+0x690>
c0007a04:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007a07:	77 dd                	ja     c00079e6 <f_mkfs+0x66d>
c0007a09:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a0d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a11:	39 cf                	cmp    edi,ecx
c0007a13:	76 02                	jbe    c0007a17 <f_mkfs+0x69e>
c0007a15:	89 cf                	mov    edi,ecx
c0007a17:	83 ec 0c             	sub    esp,0xc
c0007a1a:	57                   	push   edi
c0007a1b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a1f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a23:	55                   	push   ebp
c0007a24:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a28:	e8 07 a2 ff ff       	call   c0001c34 <disk_write>
c0007a2d:	83 c4 20             	add    esp,0x20
c0007a30:	85 c0                	test   eax,eax
c0007a32:	0f 85 f2 09 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007a38:	31 d2                	xor    edx,edx
c0007a3a:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a3e:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a42:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a46:	0f 85 48 ff ff ff    	jne    c0007994 <f_mkfs+0x61b>
c0007a4c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a4f:	31 d2                	xor    edx,edx
c0007a51:	89 e8                	mov    eax,ebp
c0007a53:	31 ff                	xor    edi,edi
c0007a55:	e8 a3 a2 ff ff       	call   c0001cfd <mem_set>
c0007a5a:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a5d:	ba 02 00 00 00       	mov    edx,0x2
c0007a62:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a66:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a6a:	e8 70 a2 ff ff       	call   c0001cdf <st_dword>
c0007a6f:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a72:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a76:	e8 64 a2 ff ff       	call   c0001cdf <st_dword>
c0007a7b:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a7e:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a82:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a86:	e8 54 a2 ff ff       	call   c0001cdf <st_dword>
c0007a8b:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a8e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a92:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a96:	83 c2 02             	add    edx,0x2
c0007a99:	e8 41 a2 ff ff       	call   c0001cdf <st_dword>
c0007a9e:	8d 45 58             	lea    eax,[ebp+0x58]
c0007aa1:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007aa5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aa9:	e8 31 a2 ff ff       	call   c0001cdf <st_dword>
c0007aae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ab2:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007ab7:	89 c6                	mov    esi,eax
c0007ab9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007abd:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ac1:	89 04 24             	mov    DWORD PTR [esp],eax
c0007ac4:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ac8:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007acb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007acf:	39 cb                	cmp    ebx,ecx
c0007ad1:	76 02                	jbe    c0007ad5 <f_mkfs+0x75c>
c0007ad3:	89 cb                	mov    ebx,ecx
c0007ad5:	83 ec 0c             	sub    esp,0xc
c0007ad8:	53                   	push   ebx
c0007ad9:	57                   	push   edi
c0007ada:	56                   	push   esi
c0007adb:	55                   	push   ebp
c0007adc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ae0:	e8 4f a1 ff ff       	call   c0001c34 <disk_write>
c0007ae5:	83 c4 20             	add    esp,0x20
c0007ae8:	85 c0                	test   eax,eax
c0007aea:	0f 85 3a 09 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007af0:	31 d2                	xor    edx,edx
c0007af2:	b9 00 02 00 00       	mov    ecx,0x200
c0007af7:	89 e8                	mov    eax,ebp
c0007af9:	e8 ff a1 ff ff       	call   c0001cfd <mem_set>
c0007afe:	31 d2                	xor    edx,edx
c0007b00:	01 de                	add    esi,ebx
c0007b02:	11 d7                	adc    edi,edx
c0007b04:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007b07:	75 bf                	jne    c0007ac8 <f_mkfs+0x74f>
c0007b09:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b0d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b11:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b19:	b9 00 02 00 00       	mov    ecx,0x200
c0007b1e:	31 d2                	xor    edx,edx
c0007b20:	89 e8                	mov    eax,ebp
c0007b22:	e8 d6 a1 ff ff       	call   c0001cfd <mem_set>
c0007b27:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b2c:	ba 80 94 02 c0       	mov    edx,0xc0029480
c0007b31:	89 e8                	mov    eax,ebp
c0007b33:	e8 b0 a1 ff ff       	call   c0001ce8 <mem_cpy>
c0007b38:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b3b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b3f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b43:	e8 9a a1 ff ff       	call   c0001ce2 <st_qword>
c0007b48:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b4c:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b4f:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b53:	e8 8a a1 ff ff       	call   c0001ce2 <st_qword>
c0007b58:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b5b:	ba 20 00 00 00       	mov    edx,0x20
c0007b60:	e8 7a a1 ff ff       	call   c0001cdf <st_dword>
c0007b65:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b69:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b6d:	e8 6d a1 ff ff       	call   c0001cdf <st_dword>
c0007b72:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b76:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b7a:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b7e:	e8 5c a1 ff ff       	call   c0001cdf <st_dword>
c0007b83:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b86:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b8a:	e8 50 a1 ff ff       	call   c0001cdf <st_dword>
c0007b8f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b93:	8d 50 02             	lea    edx,[eax+0x2]
c0007b96:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b99:	e8 41 a1 ff ff       	call   c0001cdf <st_dword>
c0007b9e:	8d 45 64             	lea    eax,[ebp+0x64]
c0007ba1:	ba 00 00 21 50       	mov    edx,0x50210000
c0007ba6:	e8 34 a1 ff ff       	call   c0001cdf <st_dword>
c0007bab:	8d 45 68             	lea    eax,[ebp+0x68]
c0007bae:	ba 00 01 00 00       	mov    edx,0x100
c0007bb3:	e8 23 a1 ff ff       	call   c0001cdb <st_word>
c0007bb8:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bbc:	b8 0a 00 00 00       	mov    eax,0xa
c0007bc1:	48                   	dec    eax
c0007bc2:	74 05                	je     c0007bc9 <f_mkfs+0x850>
c0007bc4:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bc7:	eb f8                	jmp    c0007bc1 <f_mkfs+0x848>
c0007bc9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bcd:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bd1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bd5:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bd9:	74 05                	je     c0007be0 <f_mkfs+0x867>
c0007bdb:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bde:	eb f5                	jmp    c0007bd5 <f_mkfs+0x85c>
c0007be0:	8d 45 78             	lea    eax,[ebp+0x78]
c0007be3:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007be8:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bee:	31 db                	xor    ebx,ebx
c0007bf0:	e8 e6 a0 ff ff       	call   c0001cdb <st_word>
c0007bf5:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bfb:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c00:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c03:	e8 d3 a0 ff ff       	call   c0001cdb <st_word>
c0007c08:	31 c9                	xor    ecx,ecx
c0007c0a:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c0d:	83 f8 01             	cmp    eax,0x1
c0007c10:	76 13                	jbe    c0007c25 <f_mkfs+0x8ac>
c0007c12:	83 f9 70             	cmp    ecx,0x70
c0007c15:	74 0e                	je     c0007c25 <f_mkfs+0x8ac>
c0007c17:	89 da                	mov    edx,ebx
c0007c19:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c1e:	e8 41 a5 ff ff       	call   c0002164 <xsum32>
c0007c23:	89 c3                	mov    ebx,eax
c0007c25:	41                   	inc    ecx
c0007c26:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c2c:	75 dc                	jne    c0007c0a <f_mkfs+0x891>
c0007c2e:	89 f0                	mov    eax,esi
c0007c30:	89 fa                	mov    edx,edi
c0007c32:	83 c0 01             	add    eax,0x1
c0007c35:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c39:	83 d2 00             	adc    edx,0x0
c0007c3c:	83 ec 0c             	sub    esp,0xc
c0007c3f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c43:	6a 01                	push   0x1
c0007c45:	57                   	push   edi
c0007c46:	56                   	push   esi
c0007c47:	55                   	push   ebp
c0007c48:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c4c:	e8 e3 9f ff ff       	call   c0001c34 <disk_write>
c0007c51:	83 c4 20             	add    esp,0x20
c0007c54:	85 c0                	test   eax,eax
c0007c56:	0f 85 ce 07 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007c5c:	31 d2                	xor    edx,edx
c0007c5e:	b9 00 02 00 00       	mov    ecx,0x200
c0007c63:	89 e8                	mov    eax,ebp
c0007c65:	e8 93 a0 ff ff       	call   c0001cfd <mem_set>
c0007c6a:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c6f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c72:	e8 64 a0 ff ff       	call   c0001cdb <st_word>
c0007c77:	89 f0                	mov    eax,esi
c0007c79:	89 fa                	mov    edx,edi
c0007c7b:	83 c0 09             	add    eax,0x9
c0007c7e:	83 d2 00             	adc    edx,0x0
c0007c81:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c88:	31 c9                	xor    ecx,ecx
c0007c8a:	41                   	inc    ecx
c0007c8b:	89 da                	mov    edx,ebx
c0007c8d:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c92:	e8 cd a4 ff ff       	call   c0002164 <xsum32>
c0007c97:	89 c3                	mov    ebx,eax
c0007c99:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c9f:	75 e9                	jne    c0007c8a <f_mkfs+0x911>
c0007ca1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007ca5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ca9:	83 c0 01             	add    eax,0x1
c0007cac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007cb0:	83 d2 00             	adc    edx,0x0
c0007cb3:	83 ec 0c             	sub    esp,0xc
c0007cb6:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cba:	6a 01                	push   0x1
c0007cbc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cc0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cc4:	55                   	push   ebp
c0007cc5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cc9:	e8 66 9f ff ff       	call   c0001c34 <disk_write>
c0007cce:	83 c4 20             	add    esp,0x20
c0007cd1:	85 c0                	test   eax,eax
c0007cd3:	0f 85 51 07 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007cd9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cdd:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007ce1:	75 09                	jne    c0007cec <f_mkfs+0x973>
c0007ce3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ce6:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007cea:	74 12                	je     c0007cfe <f_mkfs+0x985>
c0007cec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cf0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cf4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cf8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cfc:	eb 8a                	jmp    c0007c88 <f_mkfs+0x90f>
c0007cfe:	31 d2                	xor    edx,edx
c0007d00:	b9 00 02 00 00       	mov    ecx,0x200
c0007d05:	89 e8                	mov    eax,ebp
c0007d07:	e8 f1 9f ff ff       	call   c0001cfd <mem_set>
c0007d0c:	83 c6 0b             	add    esi,0xb
c0007d0f:	83 d7 00             	adc    edi,0x0
c0007d12:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d16:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d1a:	31 c9                	xor    ecx,ecx
c0007d1c:	41                   	inc    ecx
c0007d1d:	89 da                	mov    edx,ebx
c0007d1f:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d24:	e8 3b a4 ff ff       	call   c0002164 <xsum32>
c0007d29:	89 c3                	mov    ebx,eax
c0007d2b:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d31:	75 e9                	jne    c0007d1c <f_mkfs+0x9a3>
c0007d33:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d36:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d3a:	83 c6 01             	add    esi,0x1
c0007d3d:	83 d7 00             	adc    edi,0x0
c0007d40:	83 ec 0c             	sub    esp,0xc
c0007d43:	6a 01                	push   0x1
c0007d45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d4d:	55                   	push   ebp
c0007d4e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d52:	e8 dd 9e ff ff       	call   c0001c34 <disk_write>
c0007d57:	83 c4 20             	add    esp,0x20
c0007d5a:	85 c0                	test   eax,eax
c0007d5c:	0f 85 c8 06 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007d62:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d66:	75 06                	jne    c0007d6e <f_mkfs+0x9f5>
c0007d68:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d6c:	74 09                	je     c0007d77 <f_mkfs+0x9fe>
c0007d6e:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d71:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d75:	eb a3                	jmp    c0007d1a <f_mkfs+0x9a1>
c0007d77:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d7b:	89 da                	mov    edx,ebx
c0007d7d:	01 e8                	add    eax,ebp
c0007d7f:	e8 5b 9f ff ff       	call   c0001cdf <st_dword>
c0007d84:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d89:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d91:	75 e4                	jne    c0007d77 <f_mkfs+0x9fe>
c0007d93:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d96:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d9a:	83 c6 02             	add    esi,0x2
c0007d9d:	83 d7 00             	adc    edi,0x0
c0007da0:	83 ec 0c             	sub    esp,0xc
c0007da3:	6a 01                	push   0x1
c0007da5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007dad:	55                   	push   ebp
c0007dae:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007db2:	e8 7d 9e ff ff       	call   c0001c34 <disk_write>
c0007db7:	83 c4 20             	add    esp,0x20
c0007dba:	85 c0                	test   eax,eax
c0007dbc:	0f 85 68 06 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007dc2:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dc7:	74 0d                	je     c0007dd6 <f_mkfs+0xa5d>
c0007dc9:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dd1:	e9 43 fd ff ff       	jmp    c0007b19 <f_mkfs+0x7a0>
c0007dd6:	b1 07                	mov    cl,0x7
c0007dd8:	e9 e3 05 00 00       	jmp    c00083c0 <f_mkfs+0x1047>
c0007ddd:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007de2:	0f 85 4f 02 00 00    	jne    c0008037 <f_mkfs+0xcbe>
c0007de8:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007ded:	0f 86 22 02 00 00    	jbe    c0008015 <f_mkfs+0xc9c>
c0007df3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df8:	0f 85 81 06 00 00    	jne    c000847f <f_mkfs+0x1106>
c0007dfe:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007e01:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007e05:	83 f8 40             	cmp    eax,0x40
c0007e08:	0f 87 51 06 00 00    	ja     c000845f <f_mkfs+0x10e6>
c0007e0e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e12:	85 ff                	test   edi,edi
c0007e14:	75 1c                	jne    c0007e32 <f_mkfs+0xab9>
c0007e16:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e19:	ba 80 93 02 c0       	mov    edx,0xc0029380
c0007e1e:	c1 e9 0c             	shr    ecx,0xc
c0007e21:	bf 01 00 00 00       	mov    edi,0x1
c0007e26:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e29:	66 85 c0             	test   ax,ax
c0007e2c:	0f 85 95 01 00 00    	jne    c0007fc7 <f_mkfs+0xc4e>
c0007e32:	31 d2                	xor    edx,edx
c0007e34:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e37:	f7 f7                	div    edi
c0007e39:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e3e:	0f 86 95 01 00 00    	jbe    c0007fd9 <f_mkfs+0xc60>
c0007e44:	83 c0 02             	add    eax,0x2
c0007e47:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e4c:	01 c0                	add    eax,eax
c0007e4e:	05 ff 01 00 00       	add    eax,0x1ff
c0007e53:	be 01 00 00 00       	mov    esi,0x1
c0007e58:	c1 e8 09             	shr    eax,0x9
c0007e5b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e63:	c1 e0 05             	shl    eax,0x5
c0007e66:	c1 e8 09             	shr    eax,0x9
c0007e69:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e6d:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e72:	31 d2                	xor    edx,edx
c0007e74:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e78:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e7c:	89 f0                	mov    eax,esi
c0007e7e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e82:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e86:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e8a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e8e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e92:	31 d2                	xor    edx,edx
c0007e94:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e99:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e9d:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007ea1:	31 db                	xor    ebx,ebx
c0007ea3:	01 c8                	add    eax,ecx
c0007ea5:	11 da                	adc    edx,ebx
c0007ea7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007eab:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007eaf:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007eb3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007eb7:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007ebb:	f7 da                	neg    edx
c0007ebd:	21 d1                	and    ecx,edx
c0007ebf:	29 d9                	sub    ecx,ebx
c0007ec1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ec6:	0f 85 20 01 00 00    	jne    c0007fec <f_mkfs+0xc73>
c0007ecc:	31 db                	xor    ebx,ebx
c0007ece:	01 ce                	add    esi,ecx
c0007ed0:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ed4:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ed8:	31 d2                	xor    edx,edx
c0007eda:	89 f8                	mov    eax,edi
c0007edc:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ee0:	c1 e0 04             	shl    eax,0x4
c0007ee3:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ee7:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007eeb:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007eef:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007ef3:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007ef6:	19 d3                	sbb    ebx,edx
c0007ef8:	0f 82 40 01 00 00    	jb     c000803e <f_mkfs+0xcc5>
c0007efe:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f01:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007f05:	89 c8                	mov    eax,ecx
c0007f07:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f0c:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f10:	29 f0                	sub    eax,esi
c0007f12:	29 d0                	sub    eax,edx
c0007f14:	31 d2                	xor    edx,edx
c0007f16:	f7 f7                	div    edi
c0007f18:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f1d:	89 c3                	mov    ebx,eax
c0007f1f:	0f 85 b8 fe ff ff    	jne    c0007ddd <f_mkfs+0xa64>
c0007f25:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f2a:	0f 87 1d 01 00 00    	ja     c000804d <f_mkfs+0xcd4>
c0007f30:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f35:	0f 85 03 01 00 00    	jne    c000803e <f_mkfs+0xcc5>
c0007f3b:	83 ff 01             	cmp    edi,0x1
c0007f3e:	0f 86 fa 00 00 00    	jbe    c000803e <f_mkfs+0xcc5>
c0007f44:	d1 ef                	shr    edi,1
c0007f46:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f4a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f4e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f51:	85 db                	test   ebx,ebx
c0007f53:	75 2d                	jne    c0007f82 <f_mkfs+0xc09>
c0007f55:	89 cb                	mov    ebx,ecx
c0007f57:	ba 90 93 02 c0       	mov    edx,0xc0029390
c0007f5c:	c1 eb 11             	shr    ebx,0x11
c0007f5f:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f67:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f6a:	66 85 c0             	test   ax,ax
c0007f6d:	74 11                	je     c0007f80 <f_mkfs+0xc07>
c0007f6f:	83 c2 02             	add    edx,0x2
c0007f72:	39 d8                	cmp    eax,ebx
c0007f74:	77 0a                	ja     c0007f80 <f_mkfs+0xc07>
c0007f76:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f7a:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f7e:	eb e7                	jmp    c0007f67 <f_mkfs+0xbee>
c0007f80:	31 db                	xor    ebx,ebx
c0007f82:	31 d2                	xor    edx,edx
c0007f84:	89 c8                	mov    eax,ecx
c0007f86:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f8a:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f91:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f96:	c1 ea 09             	shr    edx,0x9
c0007f99:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f9e:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007fa2:	0f 87 96 00 00 00    	ja     c000803e <f_mkfs+0xcc5>
c0007fa8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fac:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fb4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fb8:	be 20 00 00 00       	mov    esi,0x20
c0007fbd:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fc2:	e9 a6 fe ff ff       	jmp    c0007e6d <f_mkfs+0xaf4>
c0007fc7:	83 c2 02             	add    edx,0x2
c0007fca:	39 c8                	cmp    eax,ecx
c0007fcc:	0f 87 60 fe ff ff    	ja     c0007e32 <f_mkfs+0xab9>
c0007fd2:	01 ff                	add    edi,edi
c0007fd4:	e9 4d fe ff ff       	jmp    c0007e26 <f_mkfs+0xaad>
c0007fd9:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fdc:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fe1:	40                   	inc    eax
c0007fe2:	d1 e8                	shr    eax,1
c0007fe4:	83 c0 03             	add    eax,0x3
c0007fe7:	e9 62 fe ff ff       	jmp    c0007e4e <f_mkfs+0xad5>
c0007fec:	31 d2                	xor    edx,edx
c0007fee:	89 c8                	mov    eax,ecx
c0007ff0:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007ff4:	85 d2                	test   edx,edx
c0007ff6:	74 0c                	je     c0008004 <f_mkfs+0xc8b>
c0007ff8:	49                   	dec    ecx
c0007ff9:	46                   	inc    esi
c0007ffa:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fff:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0008004:	89 c8                	mov    eax,ecx
c0008006:	31 d2                	xor    edx,edx
c0008008:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c000800c:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008010:	e9 c3 fe ff ff       	jmp    c0007ed8 <f_mkfs+0xb5f>
c0008015:	3d f5 0f 00 00       	cmp    eax,0xff5
c000801a:	77 31                	ja     c000804d <f_mkfs+0xcd4>
c000801c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008021:	75 1b                	jne    c000803e <f_mkfs+0xcc5>
c0008023:	8d 04 3f             	lea    eax,[edi+edi*1]
c0008026:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000802a:	3d 80 00 00 00       	cmp    eax,0x80
c000802f:	0f 86 d9 fd ff ff    	jbe    c0007e0e <f_mkfs+0xa95>
c0008035:	eb 07                	jmp    c000803e <f_mkfs+0xcc5>
c0008037:	3d f5 0f 00 00       	cmp    eax,0xff5
c000803c:	76 0a                	jbe    c0008048 <f_mkfs+0xccf>
c000803e:	bb 0e 00 00 00       	mov    ebx,0xe
c0008043:	e9 ff 03 00 00       	jmp    c0008447 <f_mkfs+0x10ce>
c0008048:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000804d:	31 d2                	xor    edx,edx
c000804f:	b9 00 02 00 00       	mov    ecx,0x200
c0008054:	89 e8                	mov    eax,ebp
c0008056:	e8 a2 9c ff ff       	call   c0001cfd <mem_set>
c000805b:	b9 0b 00 00 00       	mov    ecx,0xb
c0008060:	ba a2 94 02 c0       	mov    edx,0xc00294a2
c0008065:	89 e8                	mov    eax,ebp
c0008067:	e8 7c 9c ff ff       	call   c0001ce8 <mem_cpy>
c000806c:	8d 45 0b             	lea    eax,[ebp+0xb]
c000806f:	ba 00 02 00 00       	mov    edx,0x200
c0008074:	e8 62 9c ff ff       	call   c0001cdb <st_word>
c0008079:	89 f8                	mov    eax,edi
c000807b:	0f b7 d6             	movzx  edx,si
c000807e:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008081:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008084:	e8 52 9c ff ff       	call   c0001cdb <st_word>
c0008089:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c000808d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008092:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008095:	75 08                	jne    c000809f <f_mkfs+0xd26>
c0008097:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000809f:	8d 45 11             	lea    eax,[ebp+0x11]
c00080a2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00080a6:	e8 30 9c ff ff       	call   c0001cdb <st_word>
c00080ab:	b8 ff ff 00 00       	mov    eax,0xffff
c00080b0:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080b4:	39 d0                	cmp    eax,edx
c00080b6:	b8 00 00 00 00       	mov    eax,0x0
c00080bb:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080bf:	72 0a                	jb     c00080cb <f_mkfs+0xd52>
c00080c1:	8d 45 13             	lea    eax,[ebp+0x13]
c00080c4:	e8 12 9c ff ff       	call   c0001cdb <st_word>
c00080c9:	eb 08                	jmp    c00080d3 <f_mkfs+0xd5a>
c00080cb:	8d 45 20             	lea    eax,[ebp+0x20]
c00080ce:	e8 0c 9c ff ff       	call   c0001cdf <st_dword>
c00080d3:	8d 45 18             	lea    eax,[ebp+0x18]
c00080d6:	ba 3f 00 00 00       	mov    edx,0x3f
c00080db:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080df:	e8 f7 9b ff ff       	call   c0001cdb <st_word>
c00080e4:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080e7:	ba ff 00 00 00       	mov    edx,0xff
c00080ec:	e8 ea 9b ff ff       	call   c0001cdb <st_word>
c00080f1:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080f8:	e8 e2 9b ff ff       	call   c0001cdf <st_dword>
c00080fd:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008102:	75 57                	jne    c000815b <f_mkfs+0xde2>
c0008104:	8d 45 43             	lea    eax,[ebp+0x43]
c0008107:	ba 00 00 21 50       	mov    edx,0x50210000
c000810c:	e8 ce 9b ff ff       	call   c0001cdf <st_dword>
c0008111:	8d 45 24             	lea    eax,[ebp+0x24]
c0008114:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008118:	e8 c2 9b ff ff       	call   c0001cdf <st_dword>
c000811d:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008120:	ba 02 00 00 00       	mov    edx,0x2
c0008125:	e8 b5 9b ff ff       	call   c0001cdf <st_dword>
c000812a:	8d 45 30             	lea    eax,[ebp+0x30]
c000812d:	ba 01 00 00 00       	mov    edx,0x1
c0008132:	e8 a4 9b ff ff       	call   c0001cdb <st_word>
c0008137:	8d 45 32             	lea    eax,[ebp+0x32]
c000813a:	ba 06 00 00 00       	mov    edx,0x6
c000813f:	e8 97 9b ff ff       	call   c0001cdb <st_word>
c0008144:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008148:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000814c:	8d 45 47             	lea    eax,[ebp+0x47]
c000814f:	b9 13 00 00 00       	mov    ecx,0x13
c0008154:	ba ae 94 02 c0       	mov    edx,0xc00294ae
c0008159:	eb 2f                	jmp    c000818a <f_mkfs+0xe11>
c000815b:	8d 45 27             	lea    eax,[ebp+0x27]
c000815e:	ba 00 00 21 50       	mov    edx,0x50210000
c0008163:	e8 77 9b ff ff       	call   c0001cdf <st_dword>
c0008168:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000816d:	8d 45 16             	lea    eax,[ebp+0x16]
c0008170:	e8 66 9b ff ff       	call   c0001cdb <st_word>
c0008175:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008179:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000817d:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008180:	b9 13 00 00 00       	mov    ecx,0x13
c0008185:	ba c2 94 02 c0       	mov    edx,0xc00294c2
c000818a:	e8 59 9b ff ff       	call   c0001ce8 <mem_cpy>
c000818f:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008195:	ba 55 aa 00 00       	mov    edx,0xaa55
c000819a:	89 f0                	mov    eax,esi
c000819c:	e8 3a 9b ff ff       	call   c0001cdb <st_word>
c00081a1:	83 ec 0c             	sub    esp,0xc
c00081a4:	6a 01                	push   0x1
c00081a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081ae:	55                   	push   ebp
c00081af:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081b3:	e8 7c 9a ff ff       	call   c0001c34 <disk_write>
c00081b8:	83 c4 20             	add    esp,0x20
c00081bb:	85 c0                	test   eax,eax
c00081bd:	0f 85 67 02 00 00    	jne    c000842a <f_mkfs+0x10b1>
c00081c3:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081c8:	0f 85 b7 00 00 00    	jne    c0008285 <f_mkfs+0xf0c>
c00081ce:	83 ec 0c             	sub    esp,0xc
c00081d1:	6a 01                	push   0x1
c00081d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081d7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081db:	83 c0 06             	add    eax,0x6
c00081de:	83 d2 00             	adc    edx,0x0
c00081e1:	52                   	push   edx
c00081e2:	50                   	push   eax
c00081e3:	55                   	push   ebp
c00081e4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081e8:	e8 47 9a ff ff       	call   c0001c34 <disk_write>
c00081ed:	83 c4 20             	add    esp,0x20
c00081f0:	b9 00 02 00 00       	mov    ecx,0x200
c00081f5:	31 d2                	xor    edx,edx
c00081f7:	89 e8                	mov    eax,ebp
c00081f9:	e8 ff 9a ff ff       	call   c0001cfd <mem_set>
c00081fe:	ba 52 52 61 41       	mov    edx,0x41615252
c0008203:	89 e8                	mov    eax,ebp
c0008205:	e8 d5 9a ff ff       	call   c0001cdf <st_dword>
c000820a:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008210:	ba 72 72 41 61       	mov    edx,0x61417272
c0008215:	e8 c5 9a ff ff       	call   c0001cdf <st_dword>
c000821a:	8d 53 ff             	lea    edx,[ebx-0x1]
c000821d:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0008223:	e8 b7 9a ff ff       	call   c0001cdf <st_dword>
c0008228:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c000822e:	ba 02 00 00 00       	mov    edx,0x2
c0008233:	e8 a7 9a ff ff       	call   c0001cdf <st_dword>
c0008238:	ba 55 aa 00 00       	mov    edx,0xaa55
c000823d:	89 f0                	mov    eax,esi
c000823f:	e8 97 9a ff ff       	call   c0001cdb <st_word>
c0008244:	83 ec 0c             	sub    esp,0xc
c0008247:	6a 01                	push   0x1
c0008249:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000824d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008251:	83 c0 07             	add    eax,0x7
c0008254:	83 d2 00             	adc    edx,0x0
c0008257:	52                   	push   edx
c0008258:	50                   	push   eax
c0008259:	55                   	push   ebp
c000825a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000825e:	e8 d1 99 ff ff       	call   c0001c34 <disk_write>
c0008263:	83 c4 14             	add    esp,0x14
c0008266:	6a 01                	push   0x1
c0008268:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000826c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008270:	83 c0 01             	add    eax,0x1
c0008273:	83 d2 00             	adc    edx,0x0
c0008276:	52                   	push   edx
c0008277:	50                   	push   eax
c0008278:	55                   	push   ebp
c0008279:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000827d:	e8 b2 99 ff ff       	call   c0001c34 <disk_write>
c0008282:	83 c4 20             	add    esp,0x20
c0008285:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000828c:	31 d2                	xor    edx,edx
c000828e:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008294:	31 db                	xor    ebx,ebx
c0008296:	89 e8                	mov    eax,ebp
c0008298:	e8 60 9a ff ff       	call   c0001cfd <mem_set>
c000829d:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00082a2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082a9:	0f 94 c3             	sete   bl
c00082ac:	4b                   	dec    ebx
c00082ad:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082b3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082b9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082be:	75 21                	jne    c00082e1 <f_mkfs+0xf68>
c00082c0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082c5:	89 e8                	mov    eax,ebp
c00082c7:	e8 13 9a ff ff       	call   c0001cdf <st_dword>
c00082cc:	8d 45 04             	lea    eax,[ebp+0x4]
c00082cf:	83 ca ff             	or     edx,0xffffffff
c00082d2:	e8 08 9a ff ff       	call   c0001cdf <st_dword>
c00082d7:	8d 45 08             	lea    eax,[ebp+0x8]
c00082da:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082df:	eb 04                	jmp    c00082e5 <f_mkfs+0xf6c>
c00082e1:	89 da                	mov    edx,ebx
c00082e3:	89 e8                	mov    eax,ebp
c00082e5:	e8 f5 99 ff ff       	call   c0001cdf <st_dword>
c00082ea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082f2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082f6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082fa:	39 ce                	cmp    esi,ecx
c00082fc:	76 02                	jbe    c0008300 <f_mkfs+0xf87>
c00082fe:	89 ce                	mov    esi,ecx
c0008300:	83 ec 0c             	sub    esp,0xc
c0008303:	56                   	push   esi
c0008304:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008308:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000830c:	55                   	push   ebp
c000830d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008311:	e8 1e 99 ff ff       	call   c0001c34 <disk_write>
c0008316:	83 c4 20             	add    esp,0x20
c0008319:	85 c0                	test   eax,eax
c000831b:	0f 85 09 01 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0008321:	31 d2                	xor    edx,edx
c0008323:	b9 00 02 00 00       	mov    ecx,0x200
c0008328:	89 e8                	mov    eax,ebp
c000832a:	e8 ce 99 ff ff       	call   c0001cfd <mem_set>
c000832f:	31 d2                	xor    edx,edx
c0008331:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008335:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008339:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000833d:	75 b3                	jne    c00082f2 <f_mkfs+0xf79>
c000833f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008342:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008349:	40                   	inc    eax
c000834a:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000834e:	0f 87 65 ff ff ff    	ja     c00082b9 <f_mkfs+0xf40>
c0008354:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008359:	74 04                	je     c000835f <f_mkfs+0xfe6>
c000835b:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000835f:	89 fb                	mov    ebx,edi
c0008361:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008365:	76 04                	jbe    c000836b <f_mkfs+0xff2>
c0008367:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000836b:	83 ec 0c             	sub    esp,0xc
c000836e:	53                   	push   ebx
c000836f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008373:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008377:	55                   	push   ebp
c0008378:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000837c:	e8 b3 98 ff ff       	call   c0001c34 <disk_write>
c0008381:	83 c4 20             	add    esp,0x20
c0008384:	85 c0                	test   eax,eax
c0008386:	0f 85 9e 00 00 00    	jne    c000842a <f_mkfs+0x10b1>
c000838c:	31 d2                	xor    edx,edx
c000838e:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008392:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008396:	29 df                	sub    edi,ebx
c0008398:	75 c5                	jne    c000835f <f_mkfs+0xfe6>
c000839a:	b1 0c                	mov    cl,0xc
c000839c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083a1:	74 1d                	je     c00083c0 <f_mkfs+0x1047>
c00083a3:	b8 ff ff 00 00       	mov    eax,0xffff
c00083a8:	b1 06                	mov    cl,0x6
c00083aa:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083ae:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083b2:	72 0c                	jb     c00083c0 <f_mkfs+0x1047>
c00083b4:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083b9:	0f 94 c1             	sete   cl
c00083bc:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083c0:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083c5:	75 4c                	jne    c0008413 <f_mkfs+0x109a>
c00083c7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083cb:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083cf:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083d6:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083dd:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083e8:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083f3:	0f b6 c9             	movzx  ecx,cl
c00083f6:	83 ec 0c             	sub    esp,0xc
c00083f9:	55                   	push   ebp
c00083fa:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008401:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008405:	e8 2f c2 ff ff       	call   c0004639 <create_partition>
c000840a:	83 c4 10             	add    esp,0x10
c000840d:	89 c3                	mov    ebx,eax
c000840f:	85 c0                	test   eax,eax
c0008411:	75 34                	jne    c0008447 <f_mkfs+0x10ce>
c0008413:	31 db                	xor    ebx,ebx
c0008415:	50                   	push   eax
c0008416:	6a 00                	push   0x0
c0008418:	6a 00                	push   0x0
c000841a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000841e:	e8 27 98 ff ff       	call   c0001c4a <disk_ioctl>
c0008423:	83 c4 10             	add    esp,0x10
c0008426:	85 c0                	test   eax,eax
c0008428:	74 1d                	je     c0008447 <f_mkfs+0x10ce>
c000842a:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008432:	75 0c                	jne    c0008440 <f_mkfs+0x10c7>
c0008434:	83 ec 0c             	sub    esp,0xc
c0008437:	55                   	push   ebp
c0008438:	e8 75 00 00 00       	call   c00084b2 <ff_memfree>
c000843d:	83 c4 10             	add    esp,0x10
c0008440:	bb 01 00 00 00       	mov    ebx,0x1
c0008445:	eb 48                	jmp    c000848f <f_mkfs+0x1116>
c0008447:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000844f:	75 3e                	jne    c000848f <f_mkfs+0x1116>
c0008451:	83 ec 0c             	sub    esp,0xc
c0008454:	55                   	push   ebp
c0008455:	e8 58 00 00 00       	call   c00084b2 <ff_memfree>
c000845a:	83 c4 10             	add    esp,0x10
c000845d:	eb 30                	jmp    c000848f <f_mkfs+0x1116>
c000845f:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008464:	0f 85 eb fa ff ff    	jne    c0007f55 <f_mkfs+0xbdc>
c000846a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000846e:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008474:	0f 86 b8 f9 ff ff    	jbe    c0007e32 <f_mkfs+0xab9>
c000847a:	e9 bf fb ff ff       	jmp    c000803e <f_mkfs+0xcc5>
c000847f:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008484:	0f 85 c0 fa ff ff    	jne    c0007f4a <f_mkfs+0xbd1>
c000848a:	e9 af fb ff ff       	jmp    c000803e <f_mkfs+0xcc5>
c000848f:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008495:	89 d8                	mov    eax,ebx
c0008497:	5b                   	pop    ebx
c0008498:	5e                   	pop    esi
c0008499:	5f                   	pop    edi
c000849a:	5d                   	pop    ebp
c000849b:	c3                   	ret    

c000849c <ff_memalloc>:
c000849c:	83 ec 0c             	sub    esp,0xc
c000849f:	83 ec 0c             	sub    esp,0xc
c00084a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084a6:	e8 a0 73 00 00       	call   c000f84b <malloc>
c00084ab:	83 c4 10             	add    esp,0x10
c00084ae:	83 c4 0c             	add    esp,0xc
c00084b1:	c3                   	ret    

c00084b2 <ff_memfree>:
c00084b2:	83 ec 0c             	sub    esp,0xc
c00084b5:	83 ec 0c             	sub    esp,0xc
c00084b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084bc:	e8 9a 73 00 00       	call   c000f85b <free>
c00084c1:	83 c4 10             	add    esp,0x10
c00084c4:	90                   	nop
c00084c5:	83 c4 0c             	add    esp,0xc
c00084c8:	c3                   	ret    

c00084c9 <ff_uni2oem>:
c00084c9:	83 ec 14             	sub    esp,0x14
c00084cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084d0:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084d4:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084db:	c7 44 24 0c e0 97 02 c0 	mov    DWORD PTR [esp+0xc],0xc00297e0
c00084e3:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084e8:	77 0b                	ja     c00084f5 <ff_uni2oem+0x2c>
c00084ea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084ee:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084f3:	eb 5b                	jmp    c0008550 <ff_uni2oem+0x87>
c00084f5:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084fd:	77 51                	ja     c0008550 <ff_uni2oem+0x87>
c00084ff:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008505:	75 49                	jne    c0008550 <ff_uni2oem+0x87>
c0008507:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c000850e:	eb 0b                	jmp    c000851b <ff_uni2oem+0x52>
c0008510:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008515:	40                   	inc    eax
c0008516:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000851b:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008521:	77 1b                	ja     c000853e <ff_uni2oem+0x75>
c0008523:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008528:	01 c0                	add    eax,eax
c000852a:	89 c2                	mov    edx,eax
c000852c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008530:	01 d0                	add    eax,edx
c0008532:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008535:	0f b7 c0             	movzx  eax,ax
c0008538:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000853c:	75 d2                	jne    c0008510 <ff_uni2oem+0x47>
c000853e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008543:	83 e8 80             	sub    eax,0xffffff80
c0008546:	25 ff 00 00 00       	and    eax,0xff
c000854b:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008550:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008555:	83 c4 14             	add    esp,0x14
c0008558:	c3                   	ret    

c0008559 <ff_oem2uni>:
c0008559:	83 ec 18             	sub    esp,0x18
c000855c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008560:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008564:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008569:	66 89 04 24          	mov    WORD PTR [esp],ax
c000856d:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008574:	c7 44 24 10 e0 97 02 c0 	mov    DWORD PTR [esp+0x10],0xc00297e0
c000857c:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008582:	77 0b                	ja     c000858f <ff_oem2uni+0x36>
c0008584:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008588:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000858d:	eb 2d                	jmp    c00085bc <ff_oem2uni+0x63>
c000858f:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008595:	75 25                	jne    c00085bc <ff_oem2uni+0x63>
c0008597:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000859e:	77 1c                	ja     c00085bc <ff_oem2uni+0x63>
c00085a0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00085a5:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085aa:	01 c0                	add    eax,eax
c00085ac:	89 c2                	mov    edx,eax
c00085ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085b2:	01 d0                	add    eax,edx
c00085b4:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085b7:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085bc:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085c1:	83 c4 18             	add    esp,0x18
c00085c4:	c3                   	ret    

c00085c5 <ff_wtoupper>:
c00085c5:	83 ec 10             	sub    esp,0x10
c00085c8:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085d0:	0f 87 3e 01 00 00    	ja     c0008714 <ff_wtoupper+0x14f>
c00085d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085da:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085df:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085e6:	77 07                	ja     c00085ef <ff_wtoupper+0x2a>
c00085e8:	b8 e0 95 02 c0       	mov    eax,0xc00295e0
c00085ed:	eb 05                	jmp    c00085f4 <ff_wtoupper+0x2f>
c00085ef:	b8 20 95 02 c0       	mov    eax,0xc0029520
c00085f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085fc:	8d 50 02             	lea    edx,[eax+0x2]
c00085ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008603:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008606:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000860b:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008611:	0f 84 f4 00 00 00    	je     c000870b <ff_wtoupper+0x146>
c0008617:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000861c:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008621:	0f 82 e4 00 00 00    	jb     c000870b <ff_wtoupper+0x146>
c0008627:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000862b:	8d 50 02             	lea    edx,[eax+0x2]
c000862e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008632:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008635:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000863a:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000863f:	66 c1 e8 08          	shr    ax,0x8
c0008643:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008648:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000864f:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008654:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008659:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000865e:	01 ca                	add    edx,ecx
c0008660:	39 d0                	cmp    eax,edx
c0008662:	0f 8d 86 00 00 00    	jge    c00086ee <ff_wtoupper+0x129>
c0008668:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000866d:	83 f8 08             	cmp    eax,0x8
c0008670:	0f 87 94 00 00 00    	ja     c000870a <ff_wtoupper+0x145>
c0008676:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c000867d:	ff e0                	jmp    eax
c000867f:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008684:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008689:	29 c2                	sub    edx,eax
c000868b:	89 d0                	mov    eax,edx
c000868d:	01 c0                	add    eax,eax
c000868f:	89 c2                	mov    edx,eax
c0008691:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008695:	01 d0                	add    eax,edx
c0008697:	66 8b 00             	mov    ax,WORD PTR [eax]
c000869a:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000869f:	eb 4b                	jmp    c00086ec <ff_wtoupper+0x127>
c00086a1:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00086a6:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086aa:	83 e0 01             	and    eax,0x1
c00086ad:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086b2:	eb 38                	jmp    c00086ec <ff_wtoupper+0x127>
c00086b4:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086ba:	eb 30                	jmp    c00086ec <ff_wtoupper+0x127>
c00086bc:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086c2:	eb 28                	jmp    c00086ec <ff_wtoupper+0x127>
c00086c4:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086ca:	eb 20                	jmp    c00086ec <ff_wtoupper+0x127>
c00086cc:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086d2:	eb 18                	jmp    c00086ec <ff_wtoupper+0x127>
c00086d4:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086da:	eb 10                	jmp    c00086ec <ff_wtoupper+0x127>
c00086dc:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086e2:	eb 08                	jmp    c00086ec <ff_wtoupper+0x127>
c00086e4:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086eb:	90                   	nop
c00086ec:	eb 1c                	jmp    c000870a <ff_wtoupper+0x145>
c00086ee:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086f4:	0f 85 fe fe ff ff    	jne    c00085f8 <ff_wtoupper+0x33>
c00086fa:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086ff:	01 c0                	add    eax,eax
c0008701:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0008705:	e9 ee fe ff ff       	jmp    c00085f8 <ff_wtoupper+0x33>
c000870a:	90                   	nop
c000870b:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008710:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008714:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008718:	83 c4 10             	add    esp,0x10
c000871b:	c3                   	ret    

c000871c <psrc_set_converter>:
c000871c:	56                   	push   esi
c000871d:	89 d6                	mov    esi,edx
c000871f:	53                   	push   ebx
c0008720:	89 c3                	mov    ebx,eax
c0008722:	83 ec 0c             	sub    esp,0xc
c0008725:	52                   	push   edx
c0008726:	50                   	push   eax
c0008727:	e8 6f 55 00 00       	call   c000dc9b <sinc_set_converter>
c000872c:	83 c4 10             	add    esp,0x10
c000872f:	85 c0                	test   eax,eax
c0008731:	74 25                	je     c0008758 <psrc_set_converter+0x3c>
c0008733:	50                   	push   eax
c0008734:	50                   	push   eax
c0008735:	56                   	push   esi
c0008736:	53                   	push   ebx
c0008737:	e8 17 5d 00 00       	call   c000e453 <zoh_set_converter>
c000873c:	83 c4 10             	add    esp,0x10
c000873f:	85 c0                	test   eax,eax
c0008741:	74 15                	je     c0008758 <psrc_set_converter+0x3c>
c0008743:	51                   	push   ecx
c0008744:	51                   	push   ecx
c0008745:	56                   	push   esi
c0008746:	53                   	push   ebx
c0008747:	e8 0f 11 00 00       	call   c000985b <linear_set_converter>
c000874c:	83 c4 10             	add    esp,0x10
c000874f:	ba 0a 00 00 00       	mov    edx,0xa
c0008754:	85 c0                	test   eax,eax
c0008756:	75 02                	jne    c000875a <psrc_set_converter+0x3e>
c0008758:	31 d2                	xor    edx,edx
c000875a:	89 d0                	mov    eax,edx
c000875c:	5a                   	pop    edx
c000875d:	5b                   	pop    ebx
c000875e:	5e                   	pop    esi
c000875f:	c3                   	ret    

c0008760 <src_delete>:
c0008760:	53                   	push   ebx
c0008761:	83 ec 08             	sub    esp,0x8
c0008764:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008768:	85 db                	test   ebx,ebx
c000876a:	74 29                	je     c0008795 <src_delete+0x35>
c000876c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000876f:	85 c0                	test   eax,eax
c0008771:	74 0c                	je     c000877f <src_delete+0x1f>
c0008773:	83 ec 0c             	sub    esp,0xc
c0008776:	50                   	push   eax
c0008777:	e8 df 70 00 00       	call   c000f85b <free>
c000877c:	83 c4 10             	add    esp,0x10
c000877f:	50                   	push   eax
c0008780:	6a 3c                	push   0x3c
c0008782:	6a 00                	push   0x0
c0008784:	53                   	push   ebx
c0008785:	e8 f6 7f ff ff       	call   c0000780 <memset>
c000878a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000878d:	e8 c9 70 00 00       	call   c000f85b <free>
c0008792:	83 c4 10             	add    esp,0x10
c0008795:	31 c0                	xor    eax,eax
c0008797:	83 c4 08             	add    esp,0x8
c000879a:	5b                   	pop    ebx
c000879b:	c3                   	ret    

c000879c <src_process>:
c000879c:	55                   	push   ebp
c000879d:	57                   	push   edi
c000879e:	56                   	push   esi
c000879f:	53                   	push   ebx
c00087a0:	83 ec 1c             	sub    esp,0x1c
c00087a3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00087a7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087ab:	85 ed                	test   ebp,ebp
c00087ad:	0f 84 6f 01 00 00    	je     c0008922 <src_process+0x186>
c00087b3:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087b7:	0f 84 6c 01 00 00    	je     c0008929 <src_process+0x18d>
c00087bd:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087c1:	0f 84 62 01 00 00    	je     c0008929 <src_process+0x18d>
c00087c7:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087ce:	0f 85 5c 01 00 00    	jne    c0008930 <src_process+0x194>
c00087d4:	85 db                	test   ebx,ebx
c00087d6:	0f 84 5b 01 00 00    	je     c0008937 <src_process+0x19b>
c00087dc:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087de:	85 f6                	test   esi,esi
c00087e0:	0f 84 58 01 00 00    	je     c000893e <src_process+0x1a2>
c00087e6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087e9:	85 ff                	test   edi,edi
c00087eb:	0f 84 4d 01 00 00    	je     c000893e <src_process+0x1a2>
c00087f1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087f4:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087ff:	68 00 00 70 3f       	push   0x3f700000
c0008804:	6a 00                	push   0x0
c0008806:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000880a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000880e:	e8 84 fc 01 00       	call   c0028497 <__ltdf2>
c0008813:	83 c4 10             	add    esp,0x10
c0008816:	85 c0                	test   eax,eax
c0008818:	0f 88 27 01 00 00    	js     c0008945 <src_process+0x1a9>
c000881e:	68 00 00 70 40       	push   0x40700000
c0008823:	6a 00                	push   0x0
c0008825:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008829:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000882d:	e8 47 fc 01 00       	call   c0028479 <__gtdf2>
c0008832:	83 c4 10             	add    esp,0x10
c0008835:	85 c0                	test   eax,eax
c0008837:	0f 8f 08 01 00 00    	jg     c0008945 <src_process+0x1a9>
c000883d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008841:	79 07                	jns    c000884a <src_process+0xae>
c0008843:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000884a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000884d:	85 c0                	test   eax,eax
c000884f:	79 50                	jns    c00088a1 <src_process+0x105>
c0008851:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008858:	39 fe                	cmp    esi,edi
c000885a:	72 37                	jb     c0008893 <src_process+0xf7>
c000885c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008863:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000886a:	68 00 00 70 3f       	push   0x3f700000
c000886f:	6a 00                	push   0x0
c0008871:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008874:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008877:	e8 1b fc 01 00       	call   c0028497 <__ltdf2>
c000887c:	83 c4 10             	add    esp,0x10
c000887f:	85 c0                	test   eax,eax
c0008881:	79 37                	jns    c00088ba <src_process+0x11e>
c0008883:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008887:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000888b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000888e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008891:	eb 27                	jmp    c00088ba <src_process+0x11e>
c0008893:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008896:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c000889a:	8d 04 86             	lea    eax,[esi+eax*4]
c000889d:	39 c7                	cmp    edi,eax
c000889f:	eb 0d                	jmp    c00088ae <src_process+0x112>
c00088a1:	39 fe                	cmp    esi,edi
c00088a3:	72 ee                	jb     c0008893 <src_process+0xf7>
c00088a5:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088a9:	8d 04 87             	lea    eax,[edi+eax*4]
c00088ac:	39 c6                	cmp    esi,eax
c00088ae:	73 ac                	jae    c000885c <src_process+0xc0>
c00088b0:	b8 10 00 00 00       	mov    eax,0x10
c00088b5:	e9 90 00 00 00       	jmp    c000894a <src_process+0x1ae>
c00088ba:	83 ec 10             	sub    esp,0x10
c00088bd:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088c0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088c3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088c6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088c9:	e8 ce f2 01 00       	call   c0027b9c <__subdf3>
c00088ce:	83 c4 18             	add    esp,0x18
c00088d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088d5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088d9:	52                   	push   edx
c00088da:	50                   	push   eax
c00088db:	e8 50 fd 01 00       	call   c0028630 <fabs>
c00088e0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088e4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088e8:	83 c4 10             	add    esp,0x10
c00088eb:	68 af 03 d2 3c       	push   0x3cd203af
c00088f0:	68 16 56 e7 9e       	push   0x9ee75616
c00088f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088fd:	e8 95 fb 01 00       	call   c0028497 <__ltdf2>
c0008902:	83 c4 10             	add    esp,0x10
c0008905:	85 c0                	test   eax,eax
c0008907:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c000890b:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c000890f:	79 05                	jns    c0008916 <src_process+0x17a>
c0008911:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c0008914:	eb 03                	jmp    c0008919 <src_process+0x17d>
c0008916:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008919:	83 c4 1c             	add    esp,0x1c
c000891c:	5b                   	pop    ebx
c000891d:	5e                   	pop    esi
c000891e:	5f                   	pop    edi
c000891f:	5d                   	pop    ebp
c0008920:	ff e0                	jmp    eax
c0008922:	b8 02 00 00 00       	mov    eax,0x2
c0008927:	eb 21                	jmp    c000894a <src_process+0x1ae>
c0008929:	b8 07 00 00 00       	mov    eax,0x7
c000892e:	eb 1a                	jmp    c000894a <src_process+0x1ae>
c0008930:	b8 12 00 00 00       	mov    eax,0x12
c0008935:	eb 13                	jmp    c000894a <src_process+0x1ae>
c0008937:	b8 03 00 00 00       	mov    eax,0x3
c000893c:	eb 0c                	jmp    c000894a <src_process+0x1ae>
c000893e:	b8 04 00 00 00       	mov    eax,0x4
c0008943:	eb 05                	jmp    c000894a <src_process+0x1ae>
c0008945:	b8 06 00 00 00       	mov    eax,0x6
c000894a:	83 c4 1c             	add    esp,0x1c
c000894d:	5b                   	pop    ebx
c000894e:	5e                   	pop    esi
c000894f:	5f                   	pop    edi
c0008950:	5d                   	pop    ebp
c0008951:	c3                   	ret    

c0008952 <src_callback_read>:
c0008952:	55                   	push   ebp
c0008953:	57                   	push   edi
c0008954:	56                   	push   esi
c0008955:	53                   	push   ebx
c0008956:	83 ec 3c             	sub    esp,0x3c
c0008959:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000895d:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008961:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008965:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008969:	85 ed                	test   ebp,ebp
c000896b:	0f 8e 52 01 00 00    	jle    c0008ac3 <src_callback_read+0x171>
c0008971:	85 db                	test   ebx,ebx
c0008973:	0f 84 4a 01 00 00    	je     c0008ac3 <src_callback_read+0x171>
c0008979:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008980:	74 0c                	je     c000898e <src_callback_read+0x3c>
c0008982:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008989:	e9 35 01 00 00       	jmp    c0008ac3 <src_callback_read+0x171>
c000898e:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008992:	75 0c                	jne    c00089a0 <src_callback_read+0x4e>
c0008994:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c000899b:	e9 23 01 00 00       	jmp    c0008ac3 <src_callback_read+0x171>
c00089a0:	51                   	push   ecx
c00089a1:	6a 24                	push   0x24
c00089a3:	6a 00                	push   0x0
c00089a5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089a9:	50                   	push   eax
c00089aa:	e8 d1 7d ff ff       	call   c0000780 <memset>
c00089af:	83 c4 10             	add    esp,0x10
c00089b2:	68 00 00 70 3f       	push   0x3f700000
c00089b7:	6a 00                	push   0x0
c00089b9:	57                   	push   edi
c00089ba:	56                   	push   esi
c00089bb:	e8 d7 fa 01 00       	call   c0028497 <__ltdf2>
c00089c0:	83 c4 10             	add    esp,0x10
c00089c3:	85 c0                	test   eax,eax
c00089c5:	78 3e                	js     c0008a05 <src_callback_read+0xb3>
c00089c7:	68 00 00 70 40       	push   0x40700000
c00089cc:	6a 00                	push   0x0
c00089ce:	57                   	push   edi
c00089cf:	56                   	push   esi
c00089d0:	e8 a4 fa 01 00       	call   c0028479 <__gtdf2>
c00089d5:	83 c4 10             	add    esp,0x10
c00089d8:	85 c0                	test   eax,eax
c00089da:	7f 29                	jg     c0008a05 <src_callback_read+0xb3>
c00089dc:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089e0:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089e8:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089ec:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089ef:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089f7:	31 f6                	xor    esi,esi
c00089f9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089fc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008a00:	e9 97 00 00 00       	jmp    c0008a9c <src_callback_read+0x14a>
c0008a05:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a0c:	e9 b2 00 00 00       	jmp    c0008ac3 <src_callback_read+0x171>
c0008a11:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a19:	52                   	push   edx
c0008a1a:	52                   	push   edx
c0008a1b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a1f:	50                   	push   eax
c0008a20:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a23:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a26:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a2a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a2e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a32:	83 c4 10             	add    esp,0x10
c0008a35:	85 c0                	test   eax,eax
c0008a37:	75 08                	jne    c0008a41 <src_callback_read+0xef>
c0008a39:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a41:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a48:	50                   	push   eax
c0008a49:	50                   	push   eax
c0008a4a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a4e:	50                   	push   eax
c0008a4f:	53                   	push   ebx
c0008a50:	e8 47 fd ff ff       	call   c000879c <src_process>
c0008a55:	83 c4 10             	add    esp,0x10
c0008a58:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a5f:	85 c0                	test   eax,eax
c0008a61:	75 49                	jne    c0008aac <src_callback_read+0x15a>
c0008a63:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a67:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a6a:	89 f9                	mov    ecx,edi
c0008a6c:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a70:	0f af ca             	imul   ecx,edx
c0008a73:	c1 e1 02             	shl    ecx,0x2
c0008a76:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a7a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a7e:	0f af d1             	imul   edx,ecx
c0008a81:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a85:	c1 e2 02             	shl    edx,0x2
c0008a88:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a8c:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a8f:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a94:	74 12                	je     c0008aa8 <src_callback_read+0x156>
c0008a96:	39 d5                	cmp    ebp,edx
c0008a98:	7e 14                	jle    c0008aae <src_callback_read+0x15c>
c0008a9a:	89 d6                	mov    esi,edx
c0008a9c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008aa1:	75 9e                	jne    c0008a41 <src_callback_read+0xef>
c0008aa3:	e9 69 ff ff ff       	jmp    c0008a11 <src_callback_read+0xbf>
c0008aa8:	85 c9                	test   ecx,ecx
c0008aaa:	75 ea                	jne    c0008a96 <src_callback_read+0x144>
c0008aac:	89 f2                	mov    edx,esi
c0008aae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008ab2:	85 c0                	test   eax,eax
c0008ab4:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008ab7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008abb:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008abe:	74 05                	je     c0008ac5 <src_callback_read+0x173>
c0008ac0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008ac3:	31 d2                	xor    edx,edx
c0008ac5:	83 c4 3c             	add    esp,0x3c
c0008ac8:	89 d0                	mov    eax,edx
c0008aca:	5b                   	pop    ebx
c0008acb:	5e                   	pop    esi
c0008acc:	5f                   	pop    edi
c0008acd:	5d                   	pop    ebp
c0008ace:	c3                   	ret    

c0008acf <src_set_ratio>:
c0008acf:	57                   	push   edi
c0008ad0:	ba 02 00 00 00       	mov    edx,0x2
c0008ad5:	56                   	push   esi
c0008ad6:	53                   	push   ebx
c0008ad7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008adb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008adf:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008ae3:	85 db                	test   ebx,ebx
c0008ae5:	74 4c                	je     c0008b33 <src_set_ratio+0x64>
c0008ae7:	ba 07 00 00 00       	mov    edx,0x7
c0008aec:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008af0:	74 41                	je     c0008b33 <src_set_ratio+0x64>
c0008af2:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008af6:	74 3b                	je     c0008b33 <src_set_ratio+0x64>
c0008af8:	68 00 00 70 3f       	push   0x3f700000
c0008afd:	6a 00                	push   0x0
c0008aff:	57                   	push   edi
c0008b00:	56                   	push   esi
c0008b01:	e8 91 f9 01 00       	call   c0028497 <__ltdf2>
c0008b06:	83 c4 10             	add    esp,0x10
c0008b09:	ba 06 00 00 00       	mov    edx,0x6
c0008b0e:	85 c0                	test   eax,eax
c0008b10:	78 21                	js     c0008b33 <src_set_ratio+0x64>
c0008b12:	68 00 00 70 40       	push   0x40700000
c0008b17:	6a 00                	push   0x0
c0008b19:	57                   	push   edi
c0008b1a:	56                   	push   esi
c0008b1b:	e8 59 f9 01 00       	call   c0028479 <__gtdf2>
c0008b20:	83 c4 10             	add    esp,0x10
c0008b23:	ba 06 00 00 00       	mov    edx,0x6
c0008b28:	85 c0                	test   eax,eax
c0008b2a:	7f 07                	jg     c0008b33 <src_set_ratio+0x64>
c0008b2c:	89 33                	mov    DWORD PTR [ebx],esi
c0008b2e:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b31:	31 d2                	xor    edx,edx
c0008b33:	5b                   	pop    ebx
c0008b34:	89 d0                	mov    eax,edx
c0008b36:	5e                   	pop    esi
c0008b37:	5f                   	pop    edi
c0008b38:	c3                   	ret    

c0008b39 <src_get_channels>:
c0008b39:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b3d:	b8 02 00 00 00       	mov    eax,0x2
c0008b42:	85 d2                	test   edx,edx
c0008b44:	74 14                	je     c0008b5a <src_get_channels+0x21>
c0008b46:	b8 07 00 00 00       	mov    eax,0x7
c0008b4b:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b4f:	74 09                	je     c0008b5a <src_get_channels+0x21>
c0008b51:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b55:	74 03                	je     c0008b5a <src_get_channels+0x21>
c0008b57:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b5a:	c3                   	ret    

c0008b5b <src_reset>:
c0008b5b:	53                   	push   ebx
c0008b5c:	b8 02 00 00 00       	mov    eax,0x2
c0008b61:	83 ec 08             	sub    esp,0x8
c0008b64:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b68:	85 db                	test   ebx,ebx
c0008b6a:	74 36                	je     c0008ba2 <src_reset+0x47>
c0008b6c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b6f:	85 c0                	test   eax,eax
c0008b71:	74 09                	je     c0008b7c <src_reset+0x21>
c0008b73:	83 ec 0c             	sub    esp,0xc
c0008b76:	53                   	push   ebx
c0008b77:	ff d0                	call   eax
c0008b79:	83 c4 10             	add    esp,0x10
c0008b7c:	31 c0                	xor    eax,eax
c0008b7e:	31 d2                	xor    edx,edx
c0008b80:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b83:	89 03                	mov    DWORD PTR [ebx],eax
c0008b85:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b88:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b8b:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b92:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b99:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008ba0:	31 c0                	xor    eax,eax
c0008ba2:	83 c4 08             	add    esp,0x8
c0008ba5:	5b                   	pop    ebx
c0008ba6:	c3                   	ret    

c0008ba7 <src_new>:
c0008ba7:	57                   	push   edi
c0008ba8:	56                   	push   esi
c0008ba9:	53                   	push   ebx
c0008baa:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008bae:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008bb2:	85 f6                	test   esi,esi
c0008bb4:	74 73                	je     c0008c29 <src_new+0x82>
c0008bb6:	85 ff                	test   edi,edi
c0008bb8:	7f 08                	jg     c0008bc2 <src_new+0x1b>
c0008bba:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bc0:	eb 1e                	jmp    c0008be0 <src_new+0x39>
c0008bc2:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bc8:	50                   	push   eax
c0008bc9:	50                   	push   eax
c0008bca:	6a 3c                	push   0x3c
c0008bcc:	6a 01                	push   0x1
c0008bce:	e8 a8 6c 00 00       	call   c000f87b <calloc>
c0008bd3:	83 c4 10             	add    esp,0x10
c0008bd6:	89 c3                	mov    ebx,eax
c0008bd8:	85 c0                	test   eax,eax
c0008bda:	75 10                	jne    c0008bec <src_new+0x45>
c0008bdc:	85 f6                	test   esi,esi
c0008bde:	75 04                	jne    c0008be4 <src_new+0x3d>
c0008be0:	31 db                	xor    ebx,ebx
c0008be2:	eb 4b                	jmp    c0008c2f <src_new+0x88>
c0008be4:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008bea:	eb 43                	jmp    c0008c2f <src_new+0x88>
c0008bec:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bef:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bf6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bfa:	e8 1d fb ff ff       	call   c000871c <psrc_set_converter>
c0008bff:	85 c0                	test   eax,eax
c0008c01:	74 18                	je     c0008c1b <src_new+0x74>
c0008c03:	85 f6                	test   esi,esi
c0008c05:	74 06                	je     c0008c0d <src_new+0x66>
c0008c07:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c0d:	83 ec 0c             	sub    esp,0xc
c0008c10:	53                   	push   ebx
c0008c11:	31 db                	xor    ebx,ebx
c0008c13:	e8 43 6c 00 00       	call   c000f85b <free>
c0008c18:	83 c4 10             	add    esp,0x10
c0008c1b:	83 ec 0c             	sub    esp,0xc
c0008c1e:	53                   	push   ebx
c0008c1f:	e8 37 ff ff ff       	call   c0008b5b <src_reset>
c0008c24:	83 c4 10             	add    esp,0x10
c0008c27:	eb 06                	jmp    c0008c2f <src_new+0x88>
c0008c29:	85 ff                	test   edi,edi
c0008c2b:	7f 9b                	jg     c0008bc8 <src_new+0x21>
c0008c2d:	eb b1                	jmp    c0008be0 <src_new+0x39>
c0008c2f:	89 d8                	mov    eax,ebx
c0008c31:	5b                   	pop    ebx
c0008c32:	5e                   	pop    esi
c0008c33:	5f                   	pop    edi
c0008c34:	c3                   	ret    

c0008c35 <src_callback_new>:
c0008c35:	56                   	push   esi
c0008c36:	53                   	push   ebx
c0008c37:	53                   	push   ebx
c0008c38:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c3c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c40:	85 f6                	test   esi,esi
c0008c42:	75 0e                	jne    c0008c52 <src_callback_new+0x1d>
c0008c44:	31 db                	xor    ebx,ebx
c0008c46:	85 c0                	test   eax,eax
c0008c48:	74 47                	je     c0008c91 <src_callback_new+0x5c>
c0008c4a:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c50:	eb 3f                	jmp    c0008c91 <src_callback_new+0x5c>
c0008c52:	85 c0                	test   eax,eax
c0008c54:	74 06                	je     c0008c5c <src_callback_new+0x27>
c0008c56:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c5c:	51                   	push   ecx
c0008c5d:	50                   	push   eax
c0008c5e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c62:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c66:	e8 3c ff ff ff       	call   c0008ba7 <src_new>
c0008c6b:	83 c4 10             	add    esp,0x10
c0008c6e:	89 c3                	mov    ebx,eax
c0008c70:	85 c0                	test   eax,eax
c0008c72:	74 1d                	je     c0008c91 <src_callback_new+0x5c>
c0008c74:	83 ec 0c             	sub    esp,0xc
c0008c77:	50                   	push   eax
c0008c78:	e8 de fe ff ff       	call   c0008b5b <src_reset>
c0008c7d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c81:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c88:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c8b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c8e:	83 c4 10             	add    esp,0x10
c0008c91:	89 d8                	mov    eax,ebx
c0008c93:	5a                   	pop    edx
c0008c94:	5b                   	pop    ebx
c0008c95:	5e                   	pop    esi
c0008c96:	c3                   	ret    

c0008c97 <src_get_name>:
c0008c97:	53                   	push   ebx
c0008c98:	83 ec 14             	sub    esp,0x14
c0008c9b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c9f:	53                   	push   ebx
c0008ca0:	e8 d0 4f 00 00       	call   c000dc75 <sinc_get_name>
c0008ca5:	83 c4 10             	add    esp,0x10
c0008ca8:	85 c0                	test   eax,eax
c0008caa:	75 1d                	jne    c0008cc9 <src_get_name+0x32>
c0008cac:	83 ec 0c             	sub    esp,0xc
c0008caf:	53                   	push   ebx
c0008cb0:	e8 80 57 00 00       	call   c000e435 <zoh_get_name>
c0008cb5:	83 c4 10             	add    esp,0x10
c0008cb8:	85 c0                	test   eax,eax
c0008cba:	75 0d                	jne    c0008cc9 <src_get_name+0x32>
c0008cbc:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cc0:	83 c4 08             	add    esp,0x8
c0008cc3:	5b                   	pop    ebx
c0008cc4:	e9 74 0b 00 00       	jmp    c000983d <linear_get_name>
c0008cc9:	83 c4 08             	add    esp,0x8
c0008ccc:	5b                   	pop    ebx
c0008ccd:	c3                   	ret    

c0008cce <src_get_description>:
c0008cce:	53                   	push   ebx
c0008ccf:	83 ec 14             	sub    esp,0x14
c0008cd2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cd6:	53                   	push   ebx
c0008cd7:	e8 ac 4f 00 00       	call   c000dc88 <sinc_get_description>
c0008cdc:	83 c4 10             	add    esp,0x10
c0008cdf:	85 c0                	test   eax,eax
c0008ce1:	75 1d                	jne    c0008d00 <src_get_description+0x32>
c0008ce3:	83 ec 0c             	sub    esp,0xc
c0008ce6:	53                   	push   ebx
c0008ce7:	e8 58 57 00 00       	call   c000e444 <zoh_get_description>
c0008cec:	83 c4 10             	add    esp,0x10
c0008cef:	85 c0                	test   eax,eax
c0008cf1:	75 0d                	jne    c0008d00 <src_get_description+0x32>
c0008cf3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cf7:	83 c4 08             	add    esp,0x8
c0008cfa:	5b                   	pop    ebx
c0008cfb:	e9 4c 0b 00 00       	jmp    c000984c <linear_get_description>
c0008d00:	83 c4 08             	add    esp,0x8
c0008d03:	5b                   	pop    ebx
c0008d04:	c3                   	ret    

c0008d05 <src_get_version>:
c0008d05:	b8 e0 98 02 c0       	mov    eax,0xc00298e0
c0008d0a:	c3                   	ret    

c0008d0b <src_is_valid_ratio>:
c0008d0b:	83 ec 1c             	sub    esp,0x1c
c0008d0e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d16:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d1a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d1e:	68 00 00 70 3f       	push   0x3f700000
c0008d23:	6a 00                	push   0x0
c0008d25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d2d:	e8 65 f7 01 00       	call   c0028497 <__ltdf2>
c0008d32:	83 c4 10             	add    esp,0x10
c0008d35:	31 d2                	xor    edx,edx
c0008d37:	85 c0                	test   eax,eax
c0008d39:	78 1e                	js     c0008d59 <src_is_valid_ratio+0x4e>
c0008d3b:	68 00 00 70 40       	push   0x40700000
c0008d40:	6a 00                	push   0x0
c0008d42:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d46:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d4a:	e8 2a f7 01 00       	call   c0028479 <__gtdf2>
c0008d4f:	31 d2                	xor    edx,edx
c0008d51:	83 c4 10             	add    esp,0x10
c0008d54:	85 c0                	test   eax,eax
c0008d56:	0f 9e c2             	setle  dl
c0008d59:	89 d0                	mov    eax,edx
c0008d5b:	83 c4 1c             	add    esp,0x1c
c0008d5e:	c3                   	ret    

c0008d5f <src_error>:
c0008d5f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d63:	31 c0                	xor    eax,eax
c0008d65:	85 d2                	test   edx,edx
c0008d67:	74 03                	je     c0008d6c <src_error+0xd>
c0008d69:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d6c:	c3                   	ret    

c0008d6d <src_strerror>:
c0008d6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d71:	31 c0                	xor    eax,eax
c0008d73:	83 fa 17             	cmp    edx,0x17
c0008d76:	77 07                	ja     c0008d7f <src_strerror+0x12>
c0008d78:	8b 04 95 40 9d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd62c0]
c0008d7f:	c3                   	ret    

c0008d80 <src_simple>:
c0008d80:	56                   	push   esi
c0008d81:	53                   	push   ebx
c0008d82:	83 ec 18             	sub    esp,0x18
c0008d85:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d89:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d8d:	50                   	push   eax
c0008d8e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d92:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d96:	e8 0c fe ff ff       	call   c0008ba7 <src_new>
c0008d9b:	83 c4 10             	add    esp,0x10
c0008d9e:	85 c0                	test   eax,eax
c0008da0:	75 06                	jne    c0008da8 <src_simple+0x28>
c0008da2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008da6:	eb 25                	jmp    c0008dcd <src_simple+0x4d>
c0008da8:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008daf:	89 c3                	mov    ebx,eax
c0008db1:	50                   	push   eax
c0008db2:	50                   	push   eax
c0008db3:	56                   	push   esi
c0008db4:	53                   	push   ebx
c0008db5:	e8 e2 f9 ff ff       	call   c000879c <src_process>
c0008dba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008dbd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008dc1:	e8 9a f9 ff ff       	call   c0008760 <src_delete>
c0008dc6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dca:	83 c4 10             	add    esp,0x10
c0008dcd:	83 c4 14             	add    esp,0x14
c0008dd0:	5b                   	pop    ebx
c0008dd1:	5e                   	pop    esi
c0008dd2:	c3                   	ret    

c0008dd3 <src_short_to_float_array>:
c0008dd3:	53                   	push   ebx
c0008dd4:	83 ec 18             	sub    esp,0x18
c0008dd7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ddb:	85 db                	test   ebx,ebx
c0008ddd:	74 54                	je     c0008e33 <src_short_to_float_array+0x60>
c0008ddf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008de3:	4b                   	dec    ebx
c0008de4:	83 ec 0c             	sub    esp,0xc
c0008de7:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008deb:	50                   	push   eax
c0008dec:	e8 3a f4 01 00       	call   c002822b <__floatsidf>
c0008df1:	83 c4 10             	add    esp,0x10
c0008df4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008df8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dfc:	68 00 00 00 3f       	push   0x3f000000
c0008e01:	6a 00                	push   0x0
c0008e03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e0b:	e8 b8 ed 01 00       	call   c0027bc8 <__muldf3>
c0008e10:	59                   	pop    ecx
c0008e11:	59                   	pop    ecx
c0008e12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e16:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e22:	e8 74 f6 01 00       	call   c002849b <__truncdfsf2>
c0008e27:	83 c4 10             	add    esp,0x10
c0008e2a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e2e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e31:	eb a8                	jmp    c0008ddb <src_short_to_float_array+0x8>
c0008e33:	83 c4 18             	add    esp,0x18
c0008e36:	5b                   	pop    ebx
c0008e37:	c3                   	ret    

c0008e38 <src_float_to_short_array>:
c0008e38:	56                   	push   esi
c0008e39:	53                   	push   ebx
c0008e3a:	83 ec 14             	sub    esp,0x14
c0008e3d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e41:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e45:	85 db                	test   ebx,ebx
c0008e47:	0f 84 a4 00 00 00    	je     c0008ef1 <src_float_to_short_array+0xb9>
c0008e4d:	83 ec 0c             	sub    esp,0xc
c0008e50:	4b                   	dec    ebx
c0008e51:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e55:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e58:	e8 62 f7 01 00       	call   c00285bf <__extendsfdf2>
c0008e5d:	83 c4 10             	add    esp,0x10
c0008e60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e68:	68 00 00 e0 41       	push   0x41e00000
c0008e6d:	6a 00                	push   0x0
c0008e6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e77:	e8 4c ed 01 00       	call   c0027bc8 <__muldf3>
c0008e7c:	83 c4 10             	add    esp,0x10
c0008e7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e83:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e87:	68 ff ff df 41       	push   0x41dfffff
c0008e8c:	68 00 00 c0 ff       	push   0xffc00000
c0008e91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e99:	e8 f7 f5 01 00       	call   c0028495 <__gedf2>
c0008e9e:	83 c4 10             	add    esp,0x10
c0008ea1:	85 c0                	test   eax,eax
c0008ea3:	78 08                	js     c0008ead <src_float_to_short_array+0x75>
c0008ea5:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008eab:	eb 98                	jmp    c0008e45 <src_float_to_short_array+0xd>
c0008ead:	68 00 00 e0 c1       	push   0xc1e00000
c0008eb2:	6a 00                	push   0x0
c0008eb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ebc:	e8 d8 f5 01 00       	call   c0028499 <__ledf2>
c0008ec1:	83 c4 10             	add    esp,0x10
c0008ec4:	85 c0                	test   eax,eax
c0008ec6:	7f 0b                	jg     c0008ed3 <src_float_to_short_array+0x9b>
c0008ec8:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ece:	e9 72 ff ff ff       	jmp    c0008e45 <src_float_to_short_array+0xd>
c0008ed3:	50                   	push   eax
c0008ed4:	50                   	push   eax
c0008ed5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008edd:	e8 6e f7 01 00       	call   c0028650 <lrint>
c0008ee2:	83 c4 10             	add    esp,0x10
c0008ee5:	c1 f8 10             	sar    eax,0x10
c0008ee8:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008eec:	e9 54 ff ff ff       	jmp    c0008e45 <src_float_to_short_array+0xd>
c0008ef1:	83 c4 14             	add    esp,0x14
c0008ef4:	5b                   	pop    ebx
c0008ef5:	5e                   	pop    esi
c0008ef6:	c3                   	ret    

c0008ef7 <src_int_to_float_array>:
c0008ef7:	53                   	push   ebx
c0008ef8:	83 ec 18             	sub    esp,0x18
c0008efb:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008eff:	85 db                	test   ebx,ebx
c0008f01:	74 52                	je     c0008f55 <src_int_to_float_array+0x5e>
c0008f03:	83 ec 0c             	sub    esp,0xc
c0008f06:	4b                   	dec    ebx
c0008f07:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f0b:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f0e:	e8 18 f3 01 00       	call   c002822b <__floatsidf>
c0008f13:	83 c4 10             	add    esp,0x10
c0008f16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f1e:	68 00 00 00 3e       	push   0x3e000000
c0008f23:	6a 00                	push   0x0
c0008f25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f2d:	e8 96 ec 01 00       	call   c0027bc8 <__muldf3>
c0008f32:	59                   	pop    ecx
c0008f33:	59                   	pop    ecx
c0008f34:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f38:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f44:	e8 52 f5 01 00       	call   c002849b <__truncdfsf2>
c0008f49:	83 c4 10             	add    esp,0x10
c0008f4c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f50:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f53:	eb aa                	jmp    c0008eff <src_int_to_float_array+0x8>
c0008f55:	83 c4 18             	add    esp,0x18
c0008f58:	5b                   	pop    ebx
c0008f59:	c3                   	ret    

c0008f5a <src_float_to_int_array>:
c0008f5a:	56                   	push   esi
c0008f5b:	53                   	push   ebx
c0008f5c:	83 ec 14             	sub    esp,0x14
c0008f5f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f63:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f67:	85 db                	test   ebx,ebx
c0008f69:	0f 84 a2 00 00 00    	je     c0009011 <src_float_to_int_array+0xb7>
c0008f6f:	83 ec 0c             	sub    esp,0xc
c0008f72:	4b                   	dec    ebx
c0008f73:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f77:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f7a:	e8 40 f6 01 00       	call   c00285bf <__extendsfdf2>
c0008f7f:	83 c4 10             	add    esp,0x10
c0008f82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f8a:	68 00 00 e0 41       	push   0x41e00000
c0008f8f:	6a 00                	push   0x0
c0008f91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f99:	e8 2a ec 01 00       	call   c0027bc8 <__muldf3>
c0008f9e:	83 c4 10             	add    esp,0x10
c0008fa1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008fa5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa9:	68 ff ff df 41       	push   0x41dfffff
c0008fae:	68 00 00 c0 ff       	push   0xffc00000
c0008fb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbb:	e8 d5 f4 01 00       	call   c0028495 <__gedf2>
c0008fc0:	83 c4 10             	add    esp,0x10
c0008fc3:	85 c0                	test   eax,eax
c0008fc5:	78 09                	js     c0008fd0 <src_float_to_int_array+0x76>
c0008fc7:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fce:	eb 97                	jmp    c0008f67 <src_float_to_int_array+0xd>
c0008fd0:	68 00 00 e0 c1       	push   0xc1e00000
c0008fd5:	6a 00                	push   0x0
c0008fd7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fdb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fdf:	e8 b5 f4 01 00       	call   c0028499 <__ledf2>
c0008fe4:	83 c4 10             	add    esp,0x10
c0008fe7:	85 c0                	test   eax,eax
c0008fe9:	7f 0c                	jg     c0008ff7 <src_float_to_int_array+0x9d>
c0008feb:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008ff2:	e9 70 ff ff ff       	jmp    c0008f67 <src_float_to_int_array+0xd>
c0008ff7:	50                   	push   eax
c0008ff8:	50                   	push   eax
c0008ff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ffd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009001:	e8 4a f6 01 00       	call   c0028650 <lrint>
c0009006:	83 c4 10             	add    esp,0x10
c0009009:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c000900c:	e9 56 ff ff ff       	jmp    c0008f67 <src_float_to_int_array+0xd>
c0009011:	83 c4 14             	add    esp,0x14
c0009014:	5b                   	pop    ebx
c0009015:	5e                   	pop    esi
c0009016:	c3                   	ret    

c0009017 <linear_vari_process>:
c0009017:	55                   	push   ebp
c0009018:	31 d2                	xor    edx,edx
c000901a:	57                   	push   edi
c000901b:	56                   	push   esi
c000901c:	53                   	push   ebx
c000901d:	83 ec 3c             	sub    esp,0x3c
c0009020:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0009024:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009028:	0f 8e d3 07 00 00    	jle    c0009801 <linear_vari_process+0x7ea>
c000902e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009032:	ba 05 00 00 00       	mov    edx,0x5
c0009037:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000903a:	85 db                	test   ebx,ebx
c000903c:	0f 84 bf 07 00 00    	je     c0009801 <linear_vari_process+0x7ea>
c0009042:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009045:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009049:	74 19                	je     c0009064 <linear_vari_process+0x4d>
c000904b:	31 d2                	xor    edx,edx
c000904d:	39 c2                	cmp    edx,eax
c000904f:	7d 0c                	jge    c000905d <linear_vari_process+0x46>
c0009051:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009053:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009056:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000905a:	42                   	inc    edx
c000905b:	eb f0                	jmp    c000904d <linear_vari_process+0x36>
c000905d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009064:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009067:	0f af d0             	imul   edx,eax
c000906a:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000906d:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009071:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009078:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000907b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009082:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009086:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009089:	8b 00                	mov    eax,DWORD PTR [eax]
c000908b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000908f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009093:	68 00 00 70 3f       	push   0x3f700000
c0009098:	6a 00                	push   0x0
c000909a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090a2:	e8 f0 f3 01 00       	call   c0028497 <__ltdf2>
c00090a7:	83 c4 10             	add    esp,0x10
c00090aa:	ba 16 00 00 00       	mov    edx,0x16
c00090af:	85 c0                	test   eax,eax
c00090b1:	0f 88 4a 07 00 00    	js     c0009801 <linear_vari_process+0x7ea>
c00090b7:	68 00 00 70 40       	push   0x40700000
c00090bc:	6a 00                	push   0x0
c00090be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c6:	e8 ae f3 01 00       	call   c0028479 <__gtdf2>
c00090cb:	83 c4 10             	add    esp,0x10
c00090ce:	ba 16 00 00 00       	mov    edx,0x16
c00090d3:	85 c0                	test   eax,eax
c00090d5:	0f 8f 26 07 00 00    	jg     c0009801 <linear_vari_process+0x7ea>
c00090db:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090df:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090e2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090e9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090ed:	68 00 00 f0 3f       	push   0x3ff00000
c00090f2:	6a 00                	push   0x0
c00090f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fc:	e8 96 f3 01 00       	call   c0028497 <__ltdf2>
c0009101:	83 c4 10             	add    esp,0x10
c0009104:	85 c0                	test   eax,eax
c0009106:	0f 89 89 02 00 00    	jns    c0009395 <linear_vari_process+0x37e>
c000910c:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c000910f:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0009112:	0f 8d 7d 02 00 00    	jge    c0009395 <linear_vari_process+0x37e>
c0009118:	83 ec 0c             	sub    esp,0xc
c000911b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000911e:	e8 08 f1 01 00       	call   c002822b <__floatsidf>
c0009123:	83 c4 10             	add    esp,0x10
c0009126:	89 04 24             	mov    DWORD PTR [esp],eax
c0009129:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000912d:	68 00 00 f0 3f       	push   0x3ff00000
c0009132:	6a 00                	push   0x0
c0009134:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009138:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000913c:	e8 0a e4 01 00       	call   c002754b <__adddf3>
c0009141:	83 c4 10             	add    esp,0x10
c0009144:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009148:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000914c:	52                   	push   edx
c000914d:	50                   	push   eax
c000914e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009152:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009156:	e8 6d ea 01 00       	call   c0027bc8 <__muldf3>
c000915b:	5d                   	pop    ebp
c000915c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009160:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009164:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009167:	e8 bf f0 01 00       	call   c002822b <__floatsidf>
c000916c:	83 c4 10             	add    esp,0x10
c000916f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009173:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009177:	52                   	push   edx
c0009178:	50                   	push   eax
c0009179:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000917d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009181:	e8 c5 e3 01 00       	call   c002754b <__adddf3>
c0009186:	59                   	pop    ecx
c0009187:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000918b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000918f:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009192:	e8 94 f0 01 00       	call   c002822b <__floatsidf>
c0009197:	83 c4 10             	add    esp,0x10
c000919a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000919e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00091a2:	52                   	push   edx
c00091a3:	50                   	push   eax
c00091a4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091ac:	e8 e4 f2 01 00       	call   c0028495 <__gedf2>
c00091b1:	83 c4 10             	add    esp,0x10
c00091b4:	85 c0                	test   eax,eax
c00091b6:	0f 89 d9 01 00 00    	jns    c0009395 <linear_vari_process+0x37e>
c00091bc:	85 ff                	test   edi,edi
c00091be:	0f 8e f4 00 00 00    	jle    c00092b8 <linear_vari_process+0x2a1>
c00091c4:	83 ec 10             	sub    esp,0x10
c00091c7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091ca:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091cd:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091d1:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091d4:	ff 30                	push   DWORD PTR [eax]
c00091d6:	e8 c1 e9 01 00       	call   c0027b9c <__subdf3>
c00091db:	83 c4 18             	add    esp,0x18
c00091de:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091e6:	52                   	push   edx
c00091e7:	50                   	push   eax
c00091e8:	e8 43 f4 01 00       	call   c0028630 <fabs>
c00091ed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091f1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091f5:	83 c4 10             	add    esp,0x10
c00091f8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091fd:	68 23 42 92 0c       	push   0xc924223
c0009202:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009206:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000920a:	e8 6a f2 01 00       	call   c0028479 <__gtdf2>
c000920f:	83 c4 10             	add    esp,0x10
c0009212:	85 c0                	test   eax,eax
c0009214:	0f 8e 9e 00 00 00    	jle    c00092b8 <linear_vari_process+0x2a1>
c000921a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000921e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009221:	8b 00                	mov    eax,DWORD PTR [eax]
c0009223:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009227:	89 04 24             	mov    DWORD PTR [esp],eax
c000922a:	52                   	push   edx
c000922b:	50                   	push   eax
c000922c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000922f:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009232:	e8 65 e9 01 00       	call   c0027b9c <__subdf3>
c0009237:	59                   	pop    ecx
c0009238:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000923c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009240:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009243:	e8 e3 ef 01 00       	call   c002822b <__floatsidf>
c0009248:	83 c4 10             	add    esp,0x10
c000924b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000924f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009253:	52                   	push   edx
c0009254:	50                   	push   eax
c0009255:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009259:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000925d:	e8 66 e9 01 00       	call   c0027bc8 <__muldf3>
c0009262:	5f                   	pop    edi
c0009263:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009267:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000926b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000926e:	e8 b8 ef 01 00       	call   c002822b <__floatsidf>
c0009273:	83 c4 10             	add    esp,0x10
c0009276:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000927a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000927e:	52                   	push   edx
c000927f:	50                   	push   eax
c0009280:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009284:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009288:	e8 1f ec 01 00       	call   c0027eac <__divdf3>
c000928d:	83 c4 10             	add    esp,0x10
c0009290:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009294:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009298:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000929c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00092a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a8:	e8 9e e2 01 00       	call   c002754b <__adddf3>
c00092ad:	83 c4 10             	add    esp,0x10
c00092b0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b8:	31 ff                	xor    edi,edi
c00092ba:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092bd:	0f 8e 9d 00 00 00    	jle    c0009360 <linear_vari_process+0x349>
c00092c3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092c6:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092ca:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092cd:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092d1:	89 04 24             	mov    DWORD PTR [esp],eax
c00092d4:	8b 06                	mov    eax,DWORD PTR [esi]
c00092d6:	52                   	push   edx
c00092d7:	52                   	push   edx
c00092d8:	55                   	push   ebp
c00092d9:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092dc:	47                   	inc    edi
c00092dd:	e8 fe db 01 00       	call   c0026ee0 <__subsf3>
c00092e2:	89 04 24             	mov    DWORD PTR [esp],eax
c00092e5:	e8 d5 f2 01 00       	call   c00285bf <__extendsfdf2>
c00092ea:	83 c4 10             	add    esp,0x10
c00092ed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092f1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092f5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009301:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009305:	e8 be e8 01 00       	call   c0027bc8 <__muldf3>
c000930a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000930d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009311:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009315:	e8 a5 f2 01 00       	call   c00285bf <__extendsfdf2>
c000931a:	83 c4 10             	add    esp,0x10
c000931d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009321:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009325:	52                   	push   edx
c0009326:	50                   	push   eax
c0009327:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000932b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000932f:	e8 17 e2 01 00       	call   c002754b <__adddf3>
c0009334:	59                   	pop    ecx
c0009335:	5d                   	pop    ebp
c0009336:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000933a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000933e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009342:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009346:	e8 50 f1 01 00       	call   c002849b <__truncdfsf2>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009351:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009355:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009358:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000935b:	e9 5a ff ff ff       	jmp    c00092ba <linear_vari_process+0x2a3>
c0009360:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009364:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009368:	68 00 00 f0 3f       	push   0x3ff00000
c000936d:	6a 00                	push   0x0
c000936f:	e8 38 eb 01 00       	call   c0027eac <__divdf3>
c0009374:	83 c4 10             	add    esp,0x10
c0009377:	89 04 24             	mov    DWORD PTR [esp],eax
c000937a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000937e:	52                   	push   edx
c000937f:	50                   	push   eax
c0009380:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009384:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009388:	e8 be e1 01 00       	call   c002754b <__adddf3>
c000938d:	83 c4 10             	add    esp,0x10
c0009390:	e9 50 fd ff ff       	jmp    c00090e5 <linear_vari_process+0xce>
c0009395:	50                   	push   eax
c0009396:	50                   	push   eax
c0009397:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000939b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000939f:	e8 ac f2 01 00       	call   c0028650 <lrint>
c00093a4:	83 ec 0c             	sub    esp,0xc
c00093a7:	50                   	push   eax
c00093a8:	e8 7e ee 01 00       	call   c002822b <__floatsidf>
c00093ad:	83 c4 10             	add    esp,0x10
c00093b0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b8:	52                   	push   edx
c00093b9:	50                   	push   eax
c00093ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093c2:	e8 d5 e7 01 00       	call   c0027b9c <__subdf3>
c00093c7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093cb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093cf:	83 c4 20             	add    esp,0x20
c00093d2:	6a 00                	push   0x0
c00093d4:	6a 00                	push   0x0
c00093d6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093da:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093de:	e8 b4 f0 01 00       	call   c0028497 <__ltdf2>
c00093e3:	83 c4 10             	add    esp,0x10
c00093e6:	85 c0                	test   eax,eax
c00093e8:	79 1e                	jns    c0009408 <linear_vari_process+0x3f1>
c00093ea:	68 00 00 f0 3f       	push   0x3ff00000
c00093ef:	6a 00                	push   0x0
c00093f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f9:	e8 4d e1 01 00       	call   c002754b <__adddf3>
c00093fe:	83 c4 10             	add    esp,0x10
c0009401:	89 04 24             	mov    DWORD PTR [esp],eax
c0009404:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009408:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000940b:	83 ec 10             	sub    esp,0x10
c000940e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009412:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009416:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000941a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000941e:	e8 79 e7 01 00       	call   c0027b9c <__subdf3>
c0009423:	83 c4 18             	add    esp,0x18
c0009426:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000942a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000942e:	52                   	push   edx
c000942f:	50                   	push   eax
c0009430:	e8 1b f2 01 00       	call   c0028650 <lrint>
c0009435:	83 c4 10             	add    esp,0x10
c0009438:	0f af f8             	imul   edi,eax
c000943b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000943e:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009441:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009444:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009447:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000944a:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000944e:	0f 8d 13 03 00 00    	jge    c0009767 <linear_vari_process+0x750>
c0009454:	83 ec 0c             	sub    esp,0xc
c0009457:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000945a:	e8 cc ed 01 00       	call   c002822b <__floatsidf>
c000945f:	83 c4 10             	add    esp,0x10
c0009462:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009466:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000946a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000946e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009472:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009476:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000947a:	e8 49 e7 01 00       	call   c0027bc8 <__muldf3>
c000947f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009482:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009486:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000948a:	e8 9c ed 01 00       	call   c002822b <__floatsidf>
c000948f:	83 c4 10             	add    esp,0x10
c0009492:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009496:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000949a:	52                   	push   edx
c000949b:	50                   	push   eax
c000949c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094a4:	e8 a2 e0 01 00       	call   c002754b <__adddf3>
c00094a9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094b4:	e8 72 ed 01 00       	call   c002822b <__floatsidf>
c00094b9:	83 c4 10             	add    esp,0x10
c00094bc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094c0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094c4:	52                   	push   edx
c00094c5:	50                   	push   eax
c00094c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ce:	e8 c4 ef 01 00       	call   c0028497 <__ltdf2>
c00094d3:	83 c4 10             	add    esp,0x10
c00094d6:	85 c0                	test   eax,eax
c00094d8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094dc:	0f 89 85 02 00 00    	jns    c0009767 <linear_vari_process+0x750>
c00094e2:	85 c9                	test   ecx,ecx
c00094e4:	0f 8e f5 00 00 00    	jle    c00095df <linear_vari_process+0x5c8>
c00094ea:	83 ec 10             	sub    esp,0x10
c00094ed:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094f0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094f3:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094f7:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094fa:	ff 30                	push   DWORD PTR [eax]
c00094fc:	e8 9b e6 01 00       	call   c0027b9c <__subdf3>
c0009501:	83 c4 18             	add    esp,0x18
c0009504:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009508:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000950c:	52                   	push   edx
c000950d:	50                   	push   eax
c000950e:	e8 1d f1 01 00       	call   c0028630 <fabs>
c0009513:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009517:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000951b:	83 c4 10             	add    esp,0x10
c000951e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0009523:	68 23 42 92 0c       	push   0xc924223
c0009528:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000952c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009530:	e8 44 ef 01 00       	call   c0028479 <__gtdf2>
c0009535:	83 c4 10             	add    esp,0x10
c0009538:	85 c0                	test   eax,eax
c000953a:	0f 8e 9f 00 00 00    	jle    c00095df <linear_vari_process+0x5c8>
c0009540:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009544:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009547:	8b 00                	mov    eax,DWORD PTR [eax]
c0009549:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000954d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009551:	52                   	push   edx
c0009552:	50                   	push   eax
c0009553:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009556:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009559:	e8 3e e6 01 00       	call   c0027b9c <__subdf3>
c000955e:	5f                   	pop    edi
c000955f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009563:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009567:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000956a:	e8 bc ec 01 00       	call   c002822b <__floatsidf>
c000956f:	83 c4 10             	add    esp,0x10
c0009572:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009576:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000957a:	52                   	push   edx
c000957b:	50                   	push   eax
c000957c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009580:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009584:	e8 3f e6 01 00       	call   c0027bc8 <__muldf3>
c0009589:	5d                   	pop    ebp
c000958a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000958e:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009592:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009595:	e8 91 ec 01 00       	call   c002822b <__floatsidf>
c000959a:	83 c4 10             	add    esp,0x10
c000959d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00095a1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00095a5:	52                   	push   edx
c00095a6:	50                   	push   eax
c00095a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095af:	e8 f8 e8 01 00       	call   c0027eac <__divdf3>
c00095b4:	83 c4 10             	add    esp,0x10
c00095b7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095bb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095bf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095c3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095cf:	e8 77 df 01 00       	call   c002754b <__adddf3>
c00095d4:	83 c4 10             	add    esp,0x10
c00095d7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095db:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095df:	31 ff                	xor    edi,edi
c00095e1:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095e4:	39 f8                	cmp    eax,edi
c00095e6:	0f 8e ac 00 00 00    	jle    c0009698 <linear_vari_process+0x681>
c00095ec:	8b 16                	mov    edx,DWORD PTR [esi]
c00095ee:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095f1:	29 c1                	sub    ecx,eax
c00095f3:	89 c8                	mov    eax,ecx
c00095f5:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095f8:	01 f8                	add    eax,edi
c00095fa:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095fe:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c0009601:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009604:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009608:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000960b:	51                   	push   ecx
c000960c:	01 f8                	add    eax,edi
c000960e:	51                   	push   ecx
c000960f:	47                   	inc    edi
c0009610:	55                   	push   ebp
c0009611:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c0009614:	e8 c7 d8 01 00       	call   c0026ee0 <__subsf3>
c0009619:	89 04 24             	mov    DWORD PTR [esp],eax
c000961c:	e8 9e ef 01 00       	call   c00285bf <__extendsfdf2>
c0009621:	83 c4 10             	add    esp,0x10
c0009624:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009628:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000962c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009630:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009634:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009638:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963c:	e8 87 e5 01 00       	call   c0027bc8 <__muldf3>
c0009641:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009644:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009648:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000964c:	e8 6e ef 01 00       	call   c00285bf <__extendsfdf2>
c0009651:	83 c4 10             	add    esp,0x10
c0009654:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009658:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000965c:	52                   	push   edx
c000965d:	50                   	push   eax
c000965e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009662:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009666:	e8 e0 de 01 00       	call   c002754b <__adddf3>
c000966b:	5d                   	pop    ebp
c000966c:	59                   	pop    ecx
c000966d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009671:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009675:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009679:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000967d:	e8 19 ee 01 00       	call   c002849b <__truncdfsf2>
c0009682:	83 c4 10             	add    esp,0x10
c0009685:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009689:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000968d:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009690:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009693:	e9 49 ff ff ff       	jmp    c00095e1 <linear_vari_process+0x5ca>
c0009698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096a0:	68 00 00 f0 3f       	push   0x3ff00000
c00096a5:	6a 00                	push   0x0
c00096a7:	e8 00 e8 01 00       	call   c0027eac <__divdf3>
c00096ac:	83 c4 10             	add    esp,0x10
c00096af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096b7:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096bb:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096c7:	e8 7f de 01 00       	call   c002754b <__adddf3>
c00096cc:	59                   	pop    ecx
c00096cd:	5f                   	pop    edi
c00096ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096de:	e8 6d ef 01 00       	call   c0028650 <lrint>
c00096e3:	83 ec 0c             	sub    esp,0xc
c00096e6:	50                   	push   eax
c00096e7:	e8 3f eb 01 00       	call   c002822b <__floatsidf>
c00096ec:	83 c4 10             	add    esp,0x10
c00096ef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096f3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096f7:	52                   	push   edx
c00096f8:	50                   	push   eax
c00096f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009701:	e8 96 e4 01 00       	call   c0027b9c <__subdf3>
c0009706:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000970a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000970e:	83 c4 20             	add    esp,0x20
c0009711:	6a 00                	push   0x0
c0009713:	6a 00                	push   0x0
c0009715:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009719:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000971d:	e8 75 ed 01 00       	call   c0028497 <__ltdf2>
c0009722:	83 c4 10             	add    esp,0x10
c0009725:	85 c0                	test   eax,eax
c0009727:	79 1e                	jns    c0009747 <linear_vari_process+0x730>
c0009729:	68 00 00 f0 3f       	push   0x3ff00000
c000972e:	6a 00                	push   0x0
c0009730:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009734:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009738:	e8 0e de 01 00       	call   c002754b <__adddf3>
c000973d:	83 c4 10             	add    esp,0x10
c0009740:	89 04 24             	mov    DWORD PTR [esp],eax
c0009743:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009747:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000974a:	83 ec 10             	sub    esp,0x10
c000974d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009755:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009759:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000975d:	e8 3a e4 01 00       	call   c0027b9c <__subdf3>
c0009762:	e9 bc fc ff ff       	jmp    c0009423 <linear_vari_process+0x40c>
c0009767:	39 fd                	cmp    ebp,edi
c0009769:	7d 38                	jge    c00097a3 <linear_vari_process+0x78c>
c000976b:	83 ec 0c             	sub    esp,0xc
c000976e:	89 f8                	mov    eax,edi
c0009770:	29 e8                	sub    eax,ebp
c0009772:	99                   	cdq    
c0009773:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009776:	50                   	push   eax
c0009777:	e8 af ea 01 00       	call   c002822b <__floatsidf>
c000977c:	83 c4 10             	add    esp,0x10
c000977f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009783:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009787:	52                   	push   edx
c0009788:	50                   	push   eax
c0009789:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000978d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009791:	e8 b5 dd 01 00       	call   c002754b <__adddf3>
c0009796:	83 c4 10             	add    esp,0x10
c0009799:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000979c:	89 04 24             	mov    DWORD PTR [esp],eax
c000979f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00097a3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097a7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097aa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097ae:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097b1:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097b4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097b7:	85 c0                	test   eax,eax
c00097b9:	7f 29                	jg     c00097e4 <linear_vari_process+0x7cd>
c00097bb:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097c7:	89 01                	mov    DWORD PTR [ecx],eax
c00097c9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097cc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097cf:	99                   	cdq    
c00097d0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097d3:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097d6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097d9:	99                   	cdq    
c00097da:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097dd:	31 d2                	xor    edx,edx
c00097df:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097e2:	eb 1d                	jmp    c0009801 <linear_vari_process+0x7ea>
c00097e4:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097e7:	31 d2                	xor    edx,edx
c00097e9:	29 c8                	sub    eax,ecx
c00097eb:	c1 e0 02             	shl    eax,0x2
c00097ee:	39 d1                	cmp    ecx,edx
c00097f0:	7e c9                	jle    c00097bb <linear_vari_process+0x7a4>
c00097f2:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097f4:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097f7:	83 c0 04             	add    eax,0x4
c00097fa:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097fe:	42                   	inc    edx
c00097ff:	eb ed                	jmp    c00097ee <linear_vari_process+0x7d7>
c0009801:	83 c4 3c             	add    esp,0x3c
c0009804:	89 d0                	mov    eax,edx
c0009806:	5b                   	pop    ebx
c0009807:	5e                   	pop    esi
c0009808:	5f                   	pop    edi
c0009809:	5d                   	pop    ebp
c000980a:	c3                   	ret    

c000980b <linear_reset>:
c000980b:	83 ec 0c             	sub    esp,0xc
c000980e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009812:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0009815:	85 c0                	test   eax,eax
c0009817:	74 20                	je     c0009839 <linear_reset+0x2e>
c0009819:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000981c:	83 c0 1c             	add    eax,0x1c
c000981f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c0009822:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009829:	c1 e2 02             	shl    edx,0x2
c000982c:	51                   	push   ecx
c000982d:	52                   	push   edx
c000982e:	6a 00                	push   0x0
c0009830:	50                   	push   eax
c0009831:	e8 4a 6f ff ff       	call   c0000780 <memset>
c0009836:	83 c4 10             	add    esp,0x10
c0009839:	83 c4 0c             	add    esp,0xc
c000983c:	c3                   	ret    

c000983d <linear_get_name>:
c000983d:	31 c0                	xor    eax,eax
c000983f:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009844:	75 05                	jne    c000984b <linear_get_name+0xe>
c0009846:	b8 a0 9d 02 c0       	mov    eax,0xc0029da0
c000984b:	c3                   	ret    

c000984c <linear_get_description>:
c000984c:	31 c0                	xor    eax,eax
c000984e:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009853:	75 05                	jne    c000985a <linear_get_description+0xe>
c0009855:	b8 b4 9d 02 c0       	mov    eax,0xc0029db4
c000985a:	c3                   	ret    

c000985b <linear_set_converter>:
c000985b:	53                   	push   ebx
c000985c:	b8 0a 00 00 00       	mov    eax,0xa
c0009861:	83 ec 08             	sub    esp,0x8
c0009864:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009868:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000986d:	75 6e                	jne    c00098dd <linear_set_converter+0x82>
c000986f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009872:	85 c0                	test   eax,eax
c0009874:	74 13                	je     c0009889 <linear_set_converter+0x2e>
c0009876:	83 ec 0c             	sub    esp,0xc
c0009879:	50                   	push   eax
c000987a:	e8 dc 5f 00 00       	call   c000f85b <free>
c000987f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009886:	83 c4 10             	add    esp,0x10
c0009889:	50                   	push   eax
c000988a:	50                   	push   eax
c000988b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000988e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009895:	50                   	push   eax
c0009896:	6a 01                	push   0x1
c0009898:	e8 de 5f 00 00       	call   c000f87b <calloc>
c000989d:	83 c4 10             	add    esp,0x10
c00098a0:	89 c2                	mov    edx,eax
c00098a2:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00098a5:	85 d2                	test   edx,edx
c00098a7:	b8 01 00 00 00       	mov    eax,0x1
c00098ac:	74 2f                	je     c00098dd <linear_set_converter+0x82>
c00098ae:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098b1:	83 ec 0c             	sub    esp,0xc
c00098b4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098b7:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098bd:	c7 43 24 17 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009017
c00098c4:	c7 43 20 17 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009017
c00098cb:	c7 43 28 0b 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000980b
c00098d2:	53                   	push   ebx
c00098d3:	e8 33 ff ff ff       	call   c000980b <linear_reset>
c00098d8:	83 c4 10             	add    esp,0x10
c00098db:	31 c0                	xor    eax,eax
c00098dd:	83 c4 08             	add    esp,0x8
c00098e0:	5b                   	pop    ebx
c00098e1:	c3                   	ret    

c00098e2 <int_to_fp>:
c00098e2:	c1 e0 0c             	shl    eax,0xc
c00098e5:	c3                   	ret    

c00098e6 <fp_to_int>:
c00098e6:	c1 f8 0c             	sar    eax,0xc
c00098e9:	c3                   	ret    

c00098ea <fp_fraction_part>:
c00098ea:	25 ff 0f 00 00       	and    eax,0xfff
c00098ef:	c3                   	ret    

c00098f0 <fp_to_double>:
c00098f0:	83 ec 1c             	sub    esp,0x1c
c00098f3:	e8 f2 ff ff ff       	call   c00098ea <fp_fraction_part>
c00098f8:	83 ec 0c             	sub    esp,0xc
c00098fb:	50                   	push   eax
c00098fc:	e8 2a e9 01 00       	call   c002822b <__floatsidf>
c0009901:	83 c4 10             	add    esp,0x10
c0009904:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009908:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000990c:	68 00 00 30 3f       	push   0x3f300000
c0009911:	6a 00                	push   0x0
c0009913:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009917:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000991b:	e8 a8 e2 01 00       	call   c0027bc8 <__muldf3>
c0009920:	83 c4 2c             	add    esp,0x2c
c0009923:	c3                   	ret    

c0009924 <calc_output_single>:
c0009924:	55                   	push   ebp
c0009925:	57                   	push   edi
c0009926:	56                   	push   esi
c0009927:	89 c6                	mov    esi,eax
c0009929:	53                   	push   ebx
c000992a:	89 d3                	mov    ebx,edx
c000992c:	83 ec 4c             	sub    esp,0x4c
c000992f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009933:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009936:	e8 a7 ff ff ff       	call   c00098e2 <int_to_fp>
c000993b:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c000993e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009942:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009946:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c000994a:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000994d:	99                   	cdq    
c000994e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009956:	f7 fb                	idiv   ebx
c0009958:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009960:	89 da                	mov    edx,ebx
c0009962:	0f af d0             	imul   edx,eax
c0009965:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009969:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000996d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009971:	29 c2                	sub    edx,eax
c0009973:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009976:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000997a:	83 c5 04             	add    ebp,0x4
c000997d:	e8 6e ff ff ff       	call   c00098f0 <fp_to_double>
c0009982:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009986:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000998a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000998e:	e8 53 ff ff ff       	call   c00098e6 <fp_to_int>
c0009993:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009996:	52                   	push   edx
c0009997:	52                   	push   edx
c0009998:	51                   	push   ecx
c0009999:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000999d:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c00099a1:	e8 3a d5 01 00       	call   c0026ee0 <__subsf3>
c00099a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00099a9:	e8 11 ec 01 00       	call   c00285bf <__extendsfdf2>
c00099ae:	83 c4 10             	add    esp,0x10
c00099b1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099b5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c9:	e8 fa e1 01 00       	call   c0027bc8 <__muldf3>
c00099ce:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099d2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099d6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099d9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099dd:	e8 dd eb 01 00       	call   c00285bf <__extendsfdf2>
c00099e2:	83 c4 10             	add    esp,0x10
c00099e5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099e9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099ed:	52                   	push   edx
c00099ee:	50                   	push   eax
c00099ef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099f7:	e8 4f db 01 00       	call   c002754b <__adddf3>
c00099fc:	59                   	pop    ecx
c00099fd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0009a01:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009a05:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a0b:	e8 af eb 01 00       	call   c00285bf <__extendsfdf2>
c0009a10:	83 c4 10             	add    esp,0x10
c0009a13:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a1b:	52                   	push   edx
c0009a1c:	50                   	push   eax
c0009a1d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a21:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a25:	e8 9e e1 01 00       	call   c0027bc8 <__muldf3>
c0009a2a:	83 c4 10             	add    esp,0x10
c0009a2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a31:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a35:	52                   	push   edx
c0009a36:	50                   	push   eax
c0009a37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a3f:	e8 07 db 01 00       	call   c002754b <__adddf3>
c0009a44:	83 c4 10             	add    esp,0x10
c0009a47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a4b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a4f:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a53:	0f 89 1d ff ff ff    	jns    c0009976 <calc_output_single+0x52>
c0009a59:	89 d9                	mov    ecx,ebx
c0009a5b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a5f:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a63:	89 dd                	mov    ebp,ebx
c0009a65:	29 c8                	sub    eax,ecx
c0009a67:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a6f:	99                   	cdq    
c0009a70:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a78:	f7 fb                	idiv   ebx
c0009a7a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a7e:	0f af e8             	imul   ebp,eax
c0009a81:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a85:	01 cd                	add    ebp,ecx
c0009a87:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a8a:	89 e8                	mov    eax,ebp
c0009a8c:	83 ee 04             	sub    esi,0x4
c0009a8f:	e8 5c fe ff ff       	call   c00098f0 <fp_to_double>
c0009a94:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a98:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a9c:	89 e8                	mov    eax,ebp
c0009a9e:	29 dd                	sub    ebp,ebx
c0009aa0:	e8 41 fe ff ff       	call   c00098e6 <fp_to_int>
c0009aa5:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009aa8:	52                   	push   edx
c0009aa9:	52                   	push   edx
c0009aaa:	51                   	push   ecx
c0009aab:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009aaf:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009ab3:	e8 28 d4 01 00       	call   c0026ee0 <__subsf3>
c0009ab8:	89 04 24             	mov    DWORD PTR [esp],eax
c0009abb:	e8 ff ea 01 00       	call   c00285bf <__extendsfdf2>
c0009ac0:	83 c4 10             	add    esp,0x10
c0009ac3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ac7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009acb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009acf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ad3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ad7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009adb:	e8 e8 e0 01 00       	call   c0027bc8 <__muldf3>
c0009ae0:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009ae4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ae8:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009aeb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009aef:	e8 cb ea 01 00       	call   c00285bf <__extendsfdf2>
c0009af4:	83 c4 10             	add    esp,0x10
c0009af7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009afb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aff:	52                   	push   edx
c0009b00:	50                   	push   eax
c0009b01:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b05:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b09:	e8 3d da 01 00       	call   c002754b <__adddf3>
c0009b0e:	59                   	pop    ecx
c0009b0f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b13:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b17:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b1d:	e8 9d ea 01 00       	call   c00285bf <__extendsfdf2>
c0009b22:	83 c4 10             	add    esp,0x10
c0009b25:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b29:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b2d:	52                   	push   edx
c0009b2e:	50                   	push   eax
c0009b2f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b33:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b37:	e8 8c e0 01 00       	call   c0027bc8 <__muldf3>
c0009b3c:	83 c4 10             	add    esp,0x10
c0009b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b43:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b47:	52                   	push   edx
c0009b48:	50                   	push   eax
c0009b49:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b4d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b51:	e8 f5 d9 01 00       	call   c002754b <__adddf3>
c0009b56:	83 c4 10             	add    esp,0x10
c0009b59:	85 ed                	test   ebp,ebp
c0009b5b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b5f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b63:	0f 8f 21 ff ff ff    	jg     c0009a8a <calc_output_single+0x166>
c0009b69:	52                   	push   edx
c0009b6a:	50                   	push   eax
c0009b6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b73:	e8 d3 d9 01 00       	call   c002754b <__adddf3>
c0009b78:	83 c4 5c             	add    esp,0x5c
c0009b7b:	5b                   	pop    ebx
c0009b7c:	5e                   	pop    esi
c0009b7d:	5f                   	pop    edi
c0009b7e:	5d                   	pop    ebp
c0009b7f:	c3                   	ret    

c0009b80 <calc_output_stereo>:
c0009b80:	55                   	push   ebp
c0009b81:	89 cd                	mov    ebp,ecx
c0009b83:	57                   	push   edi
c0009b84:	56                   	push   esi
c0009b85:	53                   	push   ebx
c0009b86:	89 c3                	mov    ebx,eax
c0009b88:	83 ec 6c             	sub    esp,0x6c
c0009b8b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b8f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b96:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b9d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009ba1:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009ba5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009ba8:	e8 35 fd ff ff       	call   c00098e2 <int_to_fp>
c0009bad:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bb5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bc1:	29 c8                	sub    eax,ecx
c0009bc3:	99                   	cdq    
c0009bc4:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bc8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bcc:	0f af d0             	imul   edx,eax
c0009bcf:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bd2:	31 d2                	xor    edx,edx
c0009bd4:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bd8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bdc:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bdf:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009be3:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009be6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009bea:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bee:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009bf1:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bf6:	29 c1                	sub    ecx,eax
c0009bf8:	31 c0                	xor    eax,eax
c0009bfa:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bfd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c01:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c05:	83 c7 08             	add    edi,0x8
c0009c08:	e8 e3 fc ff ff       	call   c00098f0 <fp_to_double>
c0009c0d:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c11:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c15:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c19:	e8 c8 fc ff ff       	call   c00098e6 <fp_to_int>
c0009c1e:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c21:	52                   	push   edx
c0009c22:	52                   	push   edx
c0009c23:	51                   	push   ecx
c0009c24:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c28:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c2c:	e8 af d2 01 00       	call   c0026ee0 <__subsf3>
c0009c31:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c34:	e8 86 e9 01 00       	call   c00285bf <__extendsfdf2>
c0009c39:	83 c4 10             	add    esp,0x10
c0009c3c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c40:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c44:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c48:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c4c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c50:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c54:	e8 6f df 01 00       	call   c0027bc8 <__muldf3>
c0009c59:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c5d:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c61:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c64:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c68:	e8 52 e9 01 00       	call   c00285bf <__extendsfdf2>
c0009c6d:	83 c4 10             	add    esp,0x10
c0009c70:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c74:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c78:	52                   	push   edx
c0009c79:	50                   	push   eax
c0009c7a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c7e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c82:	e8 c4 d8 01 00       	call   c002754b <__adddf3>
c0009c87:	59                   	pop    ecx
c0009c88:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c8c:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c90:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c96:	e8 24 e9 01 00       	call   c00285bf <__extendsfdf2>
c0009c9b:	83 c4 10             	add    esp,0x10
c0009c9e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ca2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009ca6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009caa:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cae:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cb2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cb6:	e8 0d df 01 00       	call   c0027bc8 <__muldf3>
c0009cbb:	83 c4 10             	add    esp,0x10
c0009cbe:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cc2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cc6:	52                   	push   edx
c0009cc7:	50                   	push   eax
c0009cc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ccc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cd0:	e8 76 d8 01 00       	call   c002754b <__adddf3>
c0009cd5:	59                   	pop    ecx
c0009cd6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cda:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cde:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ce4:	e8 d6 e8 01 00       	call   c00285bf <__extendsfdf2>
c0009ce9:	83 c4 10             	add    esp,0x10
c0009cec:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cf0:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cf4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cfc:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009d00:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009d04:	e8 bf de 01 00       	call   c0027bc8 <__muldf3>
c0009d09:	83 c4 10             	add    esp,0x10
c0009d0c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d10:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d14:	52                   	push   edx
c0009d15:	50                   	push   eax
c0009d16:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d1a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d1e:	e8 28 d8 01 00       	call   c002754b <__adddf3>
c0009d23:	83 c4 10             	add    esp,0x10
c0009d26:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d2a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d2e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d32:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d36:	0f 89 c5 fe ff ff    	jns    c0009c01 <calc_output_stereo+0x81>
c0009d3c:	29 e9                	sub    ecx,ebp
c0009d3e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d42:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d46:	29 c8                	sub    eax,ecx
c0009d48:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d50:	99                   	cdq    
c0009d51:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d55:	31 d2                	xor    edx,edx
c0009d57:	0f af f8             	imul   edi,eax
c0009d5a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d5e:	40                   	inc    eax
c0009d5f:	01 cf                	add    edi,ecx
c0009d61:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d66:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d6a:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d72:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d75:	31 c0                	xor    eax,eax
c0009d77:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d7b:	89 f8                	mov    eax,edi
c0009d7d:	83 eb 08             	sub    ebx,0x8
c0009d80:	e8 6b fb ff ff       	call   c00098f0 <fp_to_double>
c0009d85:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d89:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d8d:	89 f8                	mov    eax,edi
c0009d8f:	e8 52 fb ff ff       	call   c00098e6 <fp_to_int>
c0009d94:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d97:	52                   	push   edx
c0009d98:	52                   	push   edx
c0009d99:	55                   	push   ebp
c0009d9a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d9e:	e8 3d d1 01 00       	call   c0026ee0 <__subsf3>
c0009da3:	89 04 24             	mov    DWORD PTR [esp],eax
c0009da6:	e8 14 e8 01 00       	call   c00285bf <__extendsfdf2>
c0009dab:	83 c4 10             	add    esp,0x10
c0009dae:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009db2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009db6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dbe:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dc2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dc6:	e8 fd dd 01 00       	call   c0027bc8 <__muldf3>
c0009dcb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dce:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dd2:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dd6:	e8 e4 e7 01 00       	call   c00285bf <__extendsfdf2>
c0009ddb:	83 c4 10             	add    esp,0x10
c0009dde:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009de2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009de6:	52                   	push   edx
c0009de7:	50                   	push   eax
c0009de8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dec:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009df0:	e8 56 d7 01 00       	call   c002754b <__adddf3>
c0009df5:	59                   	pop    ecx
c0009df6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009dfa:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009dfe:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009e04:	e8 b6 e7 01 00       	call   c00285bf <__extendsfdf2>
c0009e09:	83 c4 10             	add    esp,0x10
c0009e0c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e10:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e14:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e18:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e24:	e8 9f dd 01 00       	call   c0027bc8 <__muldf3>
c0009e29:	83 c4 10             	add    esp,0x10
c0009e2c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e30:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e34:	52                   	push   edx
c0009e35:	50                   	push   eax
c0009e36:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e3a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e3e:	e8 08 d7 01 00       	call   c002754b <__adddf3>
c0009e43:	5d                   	pop    ebp
c0009e44:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e48:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e4c:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e52:	e8 68 e7 01 00       	call   c00285bf <__extendsfdf2>
c0009e57:	83 c4 10             	add    esp,0x10
c0009e5a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e5e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e62:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e66:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e6a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e6e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e72:	e8 51 dd 01 00       	call   c0027bc8 <__muldf3>
c0009e77:	83 c4 10             	add    esp,0x10
c0009e7a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e7e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e82:	52                   	push   edx
c0009e83:	50                   	push   eax
c0009e84:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e88:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e8c:	e8 ba d6 01 00       	call   c002754b <__adddf3>
c0009e91:	83 c4 10             	add    esp,0x10
c0009e94:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e98:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e9c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ea0:	85 ff                	test   edi,edi
c0009ea2:	0f 8f d3 fe ff ff    	jg     c0009d7b <calc_output_stereo+0x1fb>
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb8:	e8 8e d6 01 00       	call   c002754b <__adddf3>
c0009ebd:	83 c4 10             	add    esp,0x10
c0009ec0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ec4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ec8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ecc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ed0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed8:	e8 eb dc 01 00       	call   c0027bc8 <__muldf3>
c0009edd:	59                   	pop    ecx
c0009ede:	5b                   	pop    ebx
c0009edf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ee3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ee7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eeb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eef:	e8 a7 e5 01 00       	call   c002849b <__truncdfsf2>
c0009ef4:	83 c4 10             	add    esp,0x10
c0009ef7:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009efe:	89 03                	mov    DWORD PTR [ebx],eax
c0009f00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f08:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f0c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f10:	e8 36 d6 01 00       	call   c002754b <__adddf3>
c0009f15:	83 c4 10             	add    esp,0x10
c0009f18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f1c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f2c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f30:	e8 93 dc 01 00       	call   c0027bc8 <__muldf3>
c0009f35:	5e                   	pop    esi
c0009f36:	5f                   	pop    edi
c0009f37:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f3b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f47:	e8 4f e5 01 00       	call   c002849b <__truncdfsf2>
c0009f4c:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f53:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f56:	83 c4 7c             	add    esp,0x7c
c0009f59:	5b                   	pop    ebx
c0009f5a:	5e                   	pop    esi
c0009f5b:	5f                   	pop    edi
c0009f5c:	5d                   	pop    ebp
c0009f5d:	c3                   	ret    

c0009f5e <calc_output_quad>:
c0009f5e:	55                   	push   ebp
c0009f5f:	57                   	push   edi
c0009f60:	56                   	push   esi
c0009f61:	89 c6                	mov    esi,eax
c0009f63:	53                   	push   ebx
c0009f64:	83 ec 7c             	sub    esp,0x7c
c0009f67:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f6b:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f6f:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f76:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f7d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f85:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f88:	e8 55 f9 ff ff       	call   c00098e2 <int_to_fp>
c0009f8d:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f90:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f93:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f97:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f9b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f9f:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009fa3:	99                   	cdq    
c0009fa4:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fa8:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fac:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009faf:	31 d2                	xor    edx,edx
c0009fb1:	0f af d8             	imul   ebx,eax
c0009fb4:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fbc:	0f af c7             	imul   eax,edi
c0009fbf:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fc3:	29 c1                	sub    ecx,eax
c0009fc5:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fcd:	31 c0                	xor    eax,eax
c0009fcf:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fd2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fd6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fda:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fde:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fe2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fe6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fea:	89 d8                	mov    eax,ebx
c0009fec:	83 c7 10             	add    edi,0x10
c0009fef:	e8 fc f8 ff ff       	call   c00098f0 <fp_to_double>
c0009ff4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ffc:	89 d8                	mov    eax,ebx
c0009ffe:	e8 e3 f8 ff ff       	call   c00098e6 <fp_to_int>
c000a003:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c000a007:	52                   	push   edx
c000a008:	52                   	push   edx
c000a009:	51                   	push   ecx
c000a00a:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a00e:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a012:	e8 c9 ce 01 00       	call   c0026ee0 <__subsf3>
c000a017:	89 04 24             	mov    DWORD PTR [esp],eax
c000a01a:	e8 a0 e5 01 00       	call   c00285bf <__extendsfdf2>
c000a01f:	83 c4 10             	add    esp,0x10
c000a022:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a026:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a02a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a032:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a036:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a03a:	e8 89 db 01 00       	call   c0027bc8 <__muldf3>
c000a03f:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a043:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a047:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a04a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a04e:	e8 6c e5 01 00       	call   c00285bf <__extendsfdf2>
c000a053:	83 c4 10             	add    esp,0x10
c000a056:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a05a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a05e:	52                   	push   edx
c000a05f:	50                   	push   eax
c000a060:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a064:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a068:	e8 de d4 01 00       	call   c002754b <__adddf3>
c000a06d:	59                   	pop    ecx
c000a06e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a072:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a076:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a07c:	e8 3e e5 01 00       	call   c00285bf <__extendsfdf2>
c000a081:	83 c4 10             	add    esp,0x10
c000a084:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a088:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a08c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a090:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a094:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a098:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a09c:	e8 27 db 01 00       	call   c0027bc8 <__muldf3>
c000a0a1:	83 c4 10             	add    esp,0x10
c000a0a4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a8:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0ac:	52                   	push   edx
c000a0ad:	50                   	push   eax
c000a0ae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0b6:	e8 90 d4 01 00       	call   c002754b <__adddf3>
c000a0bb:	59                   	pop    ecx
c000a0bc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0c0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0c4:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0ca:	e8 f0 e4 01 00       	call   c00285bf <__extendsfdf2>
c000a0cf:	83 c4 10             	add    esp,0x10
c000a0d2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0d6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0e2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0ea:	e8 d9 da 01 00       	call   c0027bc8 <__muldf3>
c000a0ef:	83 c4 10             	add    esp,0x10
c000a0f2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0f6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0fa:	52                   	push   edx
c000a0fb:	50                   	push   eax
c000a0fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a100:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a104:	e8 42 d4 01 00       	call   c002754b <__adddf3>
c000a109:	59                   	pop    ecx
c000a10a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a10e:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a112:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a118:	e8 a2 e4 01 00       	call   c00285bf <__extendsfdf2>
c000a11d:	83 c4 10             	add    esp,0x10
c000a120:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a124:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a128:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a12c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a130:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a134:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a138:	e8 8b da 01 00       	call   c0027bc8 <__muldf3>
c000a13d:	83 c4 10             	add    esp,0x10
c000a140:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a144:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a148:	52                   	push   edx
c000a149:	50                   	push   eax
c000a14a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a14e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a152:	e8 f4 d3 01 00       	call   c002754b <__adddf3>
c000a157:	59                   	pop    ecx
c000a158:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a15c:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a160:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a166:	e8 54 e4 01 00       	call   c00285bf <__extendsfdf2>
c000a16b:	83 c4 10             	add    esp,0x10
c000a16e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a172:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a176:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a17a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a17e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a182:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a186:	e8 3d da 01 00       	call   c0027bc8 <__muldf3>
c000a18b:	83 c4 10             	add    esp,0x10
c000a18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a192:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a196:	52                   	push   edx
c000a197:	50                   	push   eax
c000a198:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a19c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a1a0:	e8 a6 d3 01 00       	call   c002754b <__adddf3>
c000a1a5:	83 c4 10             	add    esp,0x10
c000a1a8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1ac:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1b0:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1b4:	0f 89 30 fe ff ff    	jns    c0009fea <calc_output_quad+0x8c>
c000a1ba:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1be:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1c2:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1c6:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1ca:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1d2:	29 c8                	sub    eax,ecx
c000a1d4:	99                   	cdq    
c000a1d5:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1d9:	31 d2                	xor    edx,edx
c000a1db:	0f af d8             	imul   ebx,eax
c000a1de:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1e2:	40                   	inc    eax
c000a1e3:	01 cb                	add    ebx,ecx
c000a1e5:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1ea:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1ee:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1f2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1f6:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1f9:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a201:	31 c0                	xor    eax,eax
c000a203:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a207:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a20b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a20f:	89 d8                	mov    eax,ebx
c000a211:	83 ee 10             	sub    esi,0x10
c000a214:	e8 d7 f6 ff ff       	call   c00098f0 <fp_to_double>
c000a219:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a21d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a221:	89 d8                	mov    eax,ebx
c000a223:	e8 be f6 ff ff       	call   c00098e6 <fp_to_int>
c000a228:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a22c:	52                   	push   edx
c000a22d:	52                   	push   edx
c000a22e:	57                   	push   edi
c000a22f:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a233:	e8 a8 cc 01 00       	call   c0026ee0 <__subsf3>
c000a238:	89 04 24             	mov    DWORD PTR [esp],eax
c000a23b:	e8 7f e3 01 00       	call   c00285bf <__extendsfdf2>
c000a240:	83 c4 10             	add    esp,0x10
c000a243:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a247:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a24b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a24f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a253:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a257:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a25b:	e8 68 d9 01 00       	call   c0027bc8 <__muldf3>
c000a260:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a267:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a26b:	e8 4f e3 01 00       	call   c00285bf <__extendsfdf2>
c000a270:	83 c4 10             	add    esp,0x10
c000a273:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a277:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a27b:	52                   	push   edx
c000a27c:	50                   	push   eax
c000a27d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a281:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a285:	e8 c1 d2 01 00       	call   c002754b <__adddf3>
c000a28a:	59                   	pop    ecx
c000a28b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a28f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a293:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a299:	e8 21 e3 01 00       	call   c00285bf <__extendsfdf2>
c000a29e:	83 c4 10             	add    esp,0x10
c000a2a1:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2a5:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b9:	e8 0a d9 01 00       	call   c0027bc8 <__muldf3>
c000a2be:	83 c4 10             	add    esp,0x10
c000a2c1:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2c5:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c9:	52                   	push   edx
c000a2ca:	50                   	push   eax
c000a2cb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2d3:	e8 73 d2 01 00       	call   c002754b <__adddf3>
c000a2d8:	5f                   	pop    edi
c000a2d9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2dd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2e1:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2e7:	e8 d3 e2 01 00       	call   c00285bf <__extendsfdf2>
c000a2ec:	83 c4 10             	add    esp,0x10
c000a2ef:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2f3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2ff:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a303:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a307:	e8 bc d8 01 00       	call   c0027bc8 <__muldf3>
c000a30c:	83 c4 10             	add    esp,0x10
c000a30f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a313:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a317:	52                   	push   edx
c000a318:	50                   	push   eax
c000a319:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a31d:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a321:	e8 25 d2 01 00       	call   c002754b <__adddf3>
c000a326:	59                   	pop    ecx
c000a327:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a32b:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a32f:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a335:	e8 85 e2 01 00       	call   c00285bf <__extendsfdf2>
c000a33a:	83 c4 10             	add    esp,0x10
c000a33d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a341:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a345:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a349:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a34d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a351:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a355:	e8 6e d8 01 00       	call   c0027bc8 <__muldf3>
c000a35a:	83 c4 10             	add    esp,0x10
c000a35d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a361:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a365:	52                   	push   edx
c000a366:	50                   	push   eax
c000a367:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a36b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a36f:	e8 d7 d1 01 00       	call   c002754b <__adddf3>
c000a374:	5f                   	pop    edi
c000a375:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a379:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a37d:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a383:	e8 37 e2 01 00       	call   c00285bf <__extendsfdf2>
c000a388:	83 c4 10             	add    esp,0x10
c000a38b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a38f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a393:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a397:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a39b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a39f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3a3:	e8 20 d8 01 00       	call   c0027bc8 <__muldf3>
c000a3a8:	83 c4 10             	add    esp,0x10
c000a3ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3b3:	52                   	push   edx
c000a3b4:	50                   	push   eax
c000a3b5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3bd:	e8 89 d1 01 00       	call   c002754b <__adddf3>
c000a3c2:	83 c4 10             	add    esp,0x10
c000a3c5:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3c9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3cd:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3d1:	85 db                	test   ebx,ebx
c000a3d3:	0f 8f 36 fe ff ff    	jg     c000a20f <calc_output_quad+0x2b1>
c000a3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e9:	e8 5d d1 01 00       	call   c002754b <__adddf3>
c000a3ee:	83 c4 10             	add    esp,0x10
c000a3f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a401:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a405:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a409:	e8 ba d7 01 00       	call   c0027bc8 <__muldf3>
c000a40e:	59                   	pop    ecx
c000a40f:	5b                   	pop    ebx
c000a410:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a414:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a418:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a420:	e8 76 e0 01 00       	call   c002849b <__truncdfsf2>
c000a425:	83 c4 10             	add    esp,0x10
c000a428:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a42f:	89 06                	mov    DWORD PTR [esi],eax
c000a431:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a435:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a439:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a43d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a441:	e8 05 d1 01 00       	call   c002754b <__adddf3>
c000a446:	83 c4 10             	add    esp,0x10
c000a449:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a44d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a451:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a459:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a45d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a461:	e8 62 d7 01 00       	call   c0027bc8 <__muldf3>
c000a466:	5e                   	pop    esi
c000a467:	5f                   	pop    edi
c000a468:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a46c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a478:	e8 1e e0 01 00       	call   c002849b <__truncdfsf2>
c000a47d:	83 c4 10             	add    esp,0x10
c000a480:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a487:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a48a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a48e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a492:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a496:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a49a:	e8 ac d0 01 00       	call   c002754b <__adddf3>
c000a49f:	83 c4 10             	add    esp,0x10
c000a4a2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ba:	e8 09 d7 01 00       	call   c0027bc8 <__muldf3>
c000a4bf:	5d                   	pop    ebp
c000a4c0:	59                   	pop    ecx
c000a4c1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d1:	e8 c5 df 01 00       	call   c002849b <__truncdfsf2>
c000a4d6:	83 c4 10             	add    esp,0x10
c000a4d9:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4e0:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4eb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ef:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4f3:	e8 53 d0 01 00       	call   c002754b <__adddf3>
c000a4f8:	83 c4 10             	add    esp,0x10
c000a4fb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a513:	e8 b0 d6 01 00       	call   c0027bc8 <__muldf3>
c000a518:	5b                   	pop    ebx
c000a519:	5e                   	pop    esi
c000a51a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a51e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a522:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a526:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a52a:	e8 6c df 01 00       	call   c002849b <__truncdfsf2>
c000a52f:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a536:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a539:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a53f:	5b                   	pop    ebx
c000a540:	5e                   	pop    esi
c000a541:	5f                   	pop    edi
c000a542:	5d                   	pop    ebp
c000a543:	c3                   	ret    

c000a544 <calc_output_hex>:
c000a544:	55                   	push   ebp
c000a545:	89 cd                	mov    ebp,ecx
c000a547:	57                   	push   edi
c000a548:	56                   	push   esi
c000a549:	53                   	push   ebx
c000a54a:	89 c3                	mov    ebx,eax
c000a54c:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a552:	89 14 24             	mov    DWORD PTR [esp],edx
c000a555:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a55c:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a563:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a567:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a56b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a56e:	e8 6f f3 ff ff       	call   c00098e2 <int_to_fp>
c000a573:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a576:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a57a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a57d:	29 c8                	sub    eax,ecx
c000a57f:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a583:	99                   	cdq    
c000a584:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a58c:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a58f:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a597:	0f af f8             	imul   edi,eax
c000a59a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a59d:	01 cf                	add    edi,ecx
c000a59f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a5a3:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a5a6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5aa:	0f af c2             	imul   eax,edx
c000a5ad:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5b1:	29 c1                	sub    ecx,eax
c000a5b3:	31 d2                	xor    edx,edx
c000a5b5:	31 c0                	xor    eax,eax
c000a5b7:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5ba:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5be:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5c2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5c6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5ce:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5d2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5d6:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5da:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5de:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5e2:	89 f8                	mov    eax,edi
c000a5e4:	e8 07 f3 ff ff       	call   c00098f0 <fp_to_double>
c000a5e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5ed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5f1:	89 f8                	mov    eax,edi
c000a5f3:	e8 ee f2 ff ff       	call   c00098e6 <fp_to_int>
c000a5f8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5fc:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5ff:	52                   	push   edx
c000a600:	52                   	push   edx
c000a601:	51                   	push   ecx
c000a602:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a606:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a60d:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a611:	e8 ca c8 01 00       	call   c0026ee0 <__subsf3>
c000a616:	89 04 24             	mov    DWORD PTR [esp],eax
c000a619:	e8 a1 df 01 00       	call   c00285bf <__extendsfdf2>
c000a61e:	83 c4 10             	add    esp,0x10
c000a621:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a625:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a631:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a635:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a639:	e8 8a d5 01 00       	call   c0027bc8 <__muldf3>
c000a63e:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a642:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a646:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a649:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a64d:	e8 6d df 01 00       	call   c00285bf <__extendsfdf2>
c000a652:	83 c4 10             	add    esp,0x10
c000a655:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a659:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a65d:	52                   	push   edx
c000a65e:	50                   	push   eax
c000a65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a663:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a667:	e8 df ce 01 00       	call   c002754b <__adddf3>
c000a66c:	59                   	pop    ecx
c000a66d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a671:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a675:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a67b:	e8 3f df 01 00       	call   c00285bf <__extendsfdf2>
c000a680:	83 c4 10             	add    esp,0x10
c000a683:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a687:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a68b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a693:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a697:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a69b:	e8 28 d5 01 00       	call   c0027bc8 <__muldf3>
c000a6a0:	83 c4 10             	add    esp,0x10
c000a6a3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6a7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6ab:	52                   	push   edx
c000a6ac:	50                   	push   eax
c000a6ad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6b1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6b5:	e8 91 ce 01 00       	call   c002754b <__adddf3>
c000a6ba:	59                   	pop    ecx
c000a6bb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6bf:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6c3:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6c9:	e8 f1 de 01 00       	call   c00285bf <__extendsfdf2>
c000a6ce:	83 c4 10             	add    esp,0x10
c000a6d1:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6d5:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6e1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e9:	e8 da d4 01 00       	call   c0027bc8 <__muldf3>
c000a6ee:	83 c4 10             	add    esp,0x10
c000a6f1:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6f5:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f9:	52                   	push   edx
c000a6fa:	50                   	push   eax
c000a6fb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6ff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a703:	e8 43 ce 01 00       	call   c002754b <__adddf3>
c000a708:	59                   	pop    ecx
c000a709:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a70d:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a711:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a717:	e8 a3 de 01 00       	call   c00285bf <__extendsfdf2>
c000a71c:	83 c4 10             	add    esp,0x10
c000a71f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a723:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a727:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a72b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a72f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a733:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a737:	e8 8c d4 01 00       	call   c0027bc8 <__muldf3>
c000a73c:	83 c4 10             	add    esp,0x10
c000a73f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a743:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a747:	52                   	push   edx
c000a748:	50                   	push   eax
c000a749:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a74d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a751:	e8 f5 cd 01 00       	call   c002754b <__adddf3>
c000a756:	59                   	pop    ecx
c000a757:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a75b:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a75f:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a765:	e8 55 de 01 00       	call   c00285bf <__extendsfdf2>
c000a76a:	83 c4 10             	add    esp,0x10
c000a76d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a771:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a775:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a779:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a77d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a781:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a785:	e8 3e d4 01 00       	call   c0027bc8 <__muldf3>
c000a78a:	83 c4 10             	add    esp,0x10
c000a78d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a791:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a795:	52                   	push   edx
c000a796:	50                   	push   eax
c000a797:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a79b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a79f:	e8 a7 cd 01 00       	call   c002754b <__adddf3>
c000a7a4:	59                   	pop    ecx
c000a7a5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7a9:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7ad:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7b3:	e8 07 de 01 00       	call   c00285bf <__extendsfdf2>
c000a7b8:	83 c4 10             	add    esp,0x10
c000a7bb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7bf:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7cb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7cf:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7d3:	e8 f0 d3 01 00       	call   c0027bc8 <__muldf3>
c000a7d8:	83 c4 10             	add    esp,0x10
c000a7db:	83 c6 18             	add    esi,0x18
c000a7de:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7e2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7e6:	52                   	push   edx
c000a7e7:	50                   	push   eax
c000a7e8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7ec:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7f0:	e8 56 cd 01 00       	call   c002754b <__adddf3>
c000a7f5:	59                   	pop    ecx
c000a7f6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7fa:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7fe:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a804:	e8 b6 dd 01 00       	call   c00285bf <__extendsfdf2>
c000a809:	83 c4 10             	add    esp,0x10
c000a80c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a810:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a814:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a818:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a81c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a820:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a824:	e8 9f d3 01 00       	call   c0027bc8 <__muldf3>
c000a829:	83 c4 10             	add    esp,0x10
c000a82c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a830:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a834:	52                   	push   edx
c000a835:	50                   	push   eax
c000a836:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a83a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a83e:	e8 08 cd 01 00       	call   c002754b <__adddf3>
c000a843:	83 c4 10             	add    esp,0x10
c000a846:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a84a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a84e:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a851:	0f 89 8b fd ff ff    	jns    c000a5e2 <calc_output_hex+0x9e>
c000a857:	31 f6                	xor    esi,esi
c000a859:	31 ff                	xor    edi,edi
c000a85b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a85f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a862:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a866:	29 e9                	sub    ecx,ebp
c000a868:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a86c:	29 c8                	sub    eax,ecx
c000a86e:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a871:	99                   	cdq    
c000a872:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a876:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a879:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a87d:	0f af e8             	imul   ebp,eax
c000a880:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a884:	40                   	inc    eax
c000a885:	01 cd                	add    ebp,ecx
c000a887:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a88c:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a890:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a894:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a898:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a89b:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a89f:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a8a3:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a8a7:	89 e8                	mov    eax,ebp
c000a8a9:	e8 42 f0 ff ff       	call   c00098f0 <fp_to_double>
c000a8ae:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8b6:	89 e8                	mov    eax,ebp
c000a8b8:	e8 29 f0 ff ff       	call   c00098e6 <fp_to_int>
c000a8bd:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8c1:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8c4:	52                   	push   edx
c000a8c5:	52                   	push   edx
c000a8c6:	51                   	push   ecx
c000a8c7:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8ce:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8d5:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8d9:	e8 02 c6 01 00       	call   c0026ee0 <__subsf3>
c000a8de:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8e1:	e8 d9 dc 01 00       	call   c00285bf <__extendsfdf2>
c000a8e6:	83 c4 10             	add    esp,0x10
c000a8e9:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8ed:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8fd:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a901:	e8 c2 d2 01 00       	call   c0027bc8 <__muldf3>
c000a906:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a90d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a911:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a914:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a918:	e8 a2 dc 01 00       	call   c00285bf <__extendsfdf2>
c000a91d:	83 c4 10             	add    esp,0x10
c000a920:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a924:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a928:	52                   	push   edx
c000a929:	50                   	push   eax
c000a92a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a932:	e8 14 cc 01 00       	call   c002754b <__adddf3>
c000a937:	59                   	pop    ecx
c000a938:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a93c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a940:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a946:	e8 74 dc 01 00       	call   c00285bf <__extendsfdf2>
c000a94b:	83 c4 10             	add    esp,0x10
c000a94e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a952:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a956:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a95a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a95e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a962:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a966:	e8 5d d2 01 00       	call   c0027bc8 <__muldf3>
c000a96b:	83 c4 10             	add    esp,0x10
c000a96e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a972:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a976:	52                   	push   edx
c000a977:	50                   	push   eax
c000a978:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a97c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a980:	e8 c6 cb 01 00       	call   c002754b <__adddf3>
c000a985:	59                   	pop    ecx
c000a986:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a98a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a98e:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a994:	e8 26 dc 01 00       	call   c00285bf <__extendsfdf2>
c000a999:	83 c4 10             	add    esp,0x10
c000a99c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9a0:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ac:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9b0:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9b4:	e8 0f d2 01 00       	call   c0027bc8 <__muldf3>
c000a9b9:	83 c4 10             	add    esp,0x10
c000a9bc:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9c0:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9c4:	52                   	push   edx
c000a9c5:	50                   	push   eax
c000a9c6:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9ca:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9ce:	e8 78 cb 01 00       	call   c002754b <__adddf3>
c000a9d3:	59                   	pop    ecx
c000a9d4:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9d8:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9dc:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9e2:	e8 d8 db 01 00       	call   c00285bf <__extendsfdf2>
c000a9e7:	83 c4 10             	add    esp,0x10
c000a9ea:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9ee:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9fa:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9fe:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa02:	e8 c1 d1 01 00       	call   c0027bc8 <__muldf3>
c000aa07:	83 c4 10             	add    esp,0x10
c000aa0a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa0e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa12:	52                   	push   edx
c000aa13:	50                   	push   eax
c000aa14:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa18:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa1c:	e8 2a cb 01 00       	call   c002754b <__adddf3>
c000aa21:	59                   	pop    ecx
c000aa22:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa26:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa2a:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa30:	e8 8a db 01 00       	call   c00285bf <__extendsfdf2>
c000aa35:	83 c4 10             	add    esp,0x10
c000aa38:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa3c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa48:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa4c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa50:	e8 73 d1 01 00       	call   c0027bc8 <__muldf3>
c000aa55:	83 c4 10             	add    esp,0x10
c000aa58:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa5c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa60:	52                   	push   edx
c000aa61:	50                   	push   eax
c000aa62:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa66:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa6a:	e8 dc ca 01 00       	call   c002754b <__adddf3>
c000aa6f:	59                   	pop    ecx
c000aa70:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa74:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa78:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa7e:	e8 3c db 01 00       	call   c00285bf <__extendsfdf2>
c000aa83:	83 c4 10             	add    esp,0x10
c000aa86:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa8a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa96:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa9a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa9e:	e8 25 d1 01 00       	call   c0027bc8 <__muldf3>
c000aaa3:	83 c4 10             	add    esp,0x10
c000aaa6:	83 eb 18             	sub    ebx,0x18
c000aaa9:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaad:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aab1:	52                   	push   edx
c000aab2:	50                   	push   eax
c000aab3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aab7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aabb:	e8 8b ca 01 00       	call   c002754b <__adddf3>
c000aac0:	59                   	pop    ecx
c000aac1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aac5:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aac9:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aacf:	e8 eb da 01 00       	call   c00285bf <__extendsfdf2>
c000aad4:	83 c4 10             	add    esp,0x10
c000aad7:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aadb:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aadf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aae3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aae7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaeb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaef:	e8 d4 d0 01 00       	call   c0027bc8 <__muldf3>
c000aaf4:	83 c4 10             	add    esp,0x10
c000aaf7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aafb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaff:	52                   	push   edx
c000ab00:	50                   	push   eax
c000ab01:	57                   	push   edi
c000ab02:	56                   	push   esi
c000ab03:	e8 43 ca 01 00       	call   c002754b <__adddf3>
c000ab08:	83 c4 10             	add    esp,0x10
c000ab0b:	89 c6                	mov    esi,eax
c000ab0d:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab10:	89 d7                	mov    edi,edx
c000ab12:	85 ed                	test   ebp,ebp
c000ab14:	0f 8f 8d fd ff ff    	jg     c000a8a7 <calc_output_hex+0x363>
c000ab1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab22:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab2a:	e8 1c ca 01 00       	call   c002754b <__adddf3>
c000ab2f:	83 c4 10             	add    esp,0x10
c000ab32:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab35:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab41:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab45:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab49:	e8 7a d0 01 00       	call   c0027bc8 <__muldf3>
c000ab4e:	59                   	pop    ecx
c000ab4f:	5b                   	pop    ebx
c000ab50:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab54:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab58:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab60:	e8 36 d9 01 00       	call   c002849b <__truncdfsf2>
c000ab65:	83 c4 10             	add    esp,0x10
c000ab68:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab6f:	89 03                	mov    DWORD PTR [ebx],eax
c000ab71:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab75:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab79:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab7d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab81:	e8 c5 c9 01 00       	call   c002754b <__adddf3>
c000ab86:	83 c4 10             	add    esp,0x10
c000ab89:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aba0:	e8 23 d0 01 00       	call   c0027bc8 <__muldf3>
c000aba5:	5d                   	pop    ebp
c000aba6:	59                   	pop    ecx
c000aba7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb7:	e8 df d8 01 00       	call   c002849b <__truncdfsf2>
c000abbc:	83 c4 10             	add    esp,0x10
c000abbf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abc6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abc9:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abcd:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abd1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd9:	e8 6d c9 01 00       	call   c002754b <__adddf3>
c000abde:	83 c4 10             	add    esp,0x10
c000abe1:	89 04 24             	mov    DWORD PTR [esp],eax
c000abe4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf8:	e8 cb cf 01 00       	call   c0027bc8 <__muldf3>
c000abfd:	5b                   	pop    ebx
c000abfe:	5d                   	pop    ebp
c000abff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac03:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac07:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0f:	e8 87 d8 01 00       	call   c002849b <__truncdfsf2>
c000ac14:	83 c4 10             	add    esp,0x10
c000ac17:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac1e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac21:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac25:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac29:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac2d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac31:	e8 15 c9 01 00       	call   c002754b <__adddf3>
c000ac36:	83 c4 10             	add    esp,0x10
c000ac39:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac48:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac4c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac50:	e8 73 cf 01 00       	call   c0027bc8 <__muldf3>
c000ac55:	59                   	pop    ecx
c000ac56:	5b                   	pop    ebx
c000ac57:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac5f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac63:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac67:	e8 2f d8 01 00       	call   c002849b <__truncdfsf2>
c000ac6c:	83 c4 10             	add    esp,0x10
c000ac6f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac76:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac79:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac7d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac89:	e8 bd c8 01 00       	call   c002754b <__adddf3>
c000ac8e:	83 c4 10             	add    esp,0x10
c000ac91:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac94:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca8:	e8 1b cf 01 00       	call   c0027bc8 <__muldf3>
c000acad:	5d                   	pop    ebp
c000acae:	59                   	pop    ecx
c000acaf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acb3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acb7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acbb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acbf:	e8 d7 d7 01 00       	call   c002849b <__truncdfsf2>
c000acc4:	83 c4 10             	add    esp,0x10
c000acc7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acce:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acd1:	57                   	push   edi
c000acd2:	56                   	push   esi
c000acd3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acd7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acdb:	e8 6b c8 01 00       	call   c002754b <__adddf3>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	89 04 24             	mov    DWORD PTR [esp],eax
c000ace6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000acea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acfa:	e8 c9 ce 01 00       	call   c0027bc8 <__muldf3>
c000acff:	5b                   	pop    ebx
c000ad00:	5e                   	pop    esi
c000ad01:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad05:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad09:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad0d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad11:	e8 85 d7 01 00       	call   c002849b <__truncdfsf2>
c000ad16:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad1d:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad20:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad26:	5b                   	pop    ebx
c000ad27:	5e                   	pop    esi
c000ad28:	5f                   	pop    edi
c000ad29:	5d                   	pop    ebp
c000ad2a:	c3                   	ret    

c000ad2b <sinc_reset>:
c000ad2b:	56                   	push   esi
c000ad2c:	53                   	push   ebx
c000ad2d:	51                   	push   ecx
c000ad2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad32:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad35:	85 db                	test   ebx,ebx
c000ad37:	74 59                	je     c000ad92 <sinc_reset+0x67>
c000ad39:	31 d2                	xor    edx,edx
c000ad3b:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad42:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad45:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad48:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad4f:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad56:	31 c0                	xor    eax,eax
c000ad58:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad5e:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad61:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad64:	52                   	push   edx
c000ad65:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad68:	c1 e0 02             	shl    eax,0x2
c000ad6b:	50                   	push   eax
c000ad6c:	6a 00                	push   0x0
c000ad6e:	56                   	push   esi
c000ad6f:	e8 0c 5a ff ff       	call   c0000780 <memset>
c000ad74:	83 c4 0c             	add    esp,0xc
c000ad77:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad7a:	c1 e0 02             	shl    eax,0x2
c000ad7d:	50                   	push   eax
c000ad7e:	68 aa 00 00 00       	push   0xaa
c000ad83:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad86:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad89:	50                   	push   eax
c000ad8a:	e8 f1 59 ff ff       	call   c0000780 <memset>
c000ad8f:	83 c4 10             	add    esp,0x10
c000ad92:	58                   	pop    eax
c000ad93:	5b                   	pop    ebx
c000ad94:	5e                   	pop    esi
c000ad95:	c3                   	ret    

c000ad96 <calc_output_multi>:
c000ad96:	55                   	push   ebp
c000ad97:	57                   	push   edi
c000ad98:	56                   	push   esi
c000ad99:	89 c6                	mov    esi,eax
c000ad9b:	53                   	push   ebx
c000ad9c:	83 ec 4c             	sub    esp,0x4c
c000ad9f:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ada3:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ada7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000adab:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000adaf:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adb3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000adb7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000adbb:	8d 46 44             	lea    eax,[esi+0x44]
c000adbe:	89 04 24             	mov    DWORD PTR [esp],eax
c000adc1:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adc7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adcb:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adce:	e8 0f eb ff ff       	call   c00098e2 <int_to_fp>
c000add3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000add6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000adda:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000adde:	99                   	cdq    
c000addf:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ade3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ade7:	0f af d0             	imul   edx,eax
c000adea:	0f af c3             	imul   eax,ebx
c000aded:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adf1:	29 c1                	sub    ecx,eax
c000adf3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adf7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adfb:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000ae02:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ae06:	57                   	push   edi
c000ae07:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae0b:	6a 00                	push   0x0
c000ae0d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae11:	e8 6a 59 ff ff       	call   c0000780 <memset>
c000ae16:	83 c4 10             	add    esp,0x10
c000ae19:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae1d:	89 df                	mov    edi,ebx
c000ae1f:	e8 cc ea ff ff       	call   c00098f0 <fp_to_double>
c000ae24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae2c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae30:	e8 b1 ea ff ff       	call   c00098e6 <fp_to_int>
c000ae35:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae38:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae3b:	51                   	push   ecx
c000ae3c:	51                   	push   ecx
c000ae3d:	55                   	push   ebp
c000ae3e:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae42:	e8 99 c0 01 00       	call   c0026ee0 <__subsf3>
c000ae47:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae4a:	e8 70 d7 01 00       	call   c00285bf <__extendsfdf2>
c000ae4f:	83 c4 10             	add    esp,0x10
c000ae52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae5a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae6a:	e8 59 cd 01 00       	call   c0027bc8 <__muldf3>
c000ae6f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae72:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae76:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae7a:	e8 40 d7 01 00       	call   c00285bf <__extendsfdf2>
c000ae7f:	83 c4 10             	add    esp,0x10
c000ae82:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae86:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae8a:	52                   	push   edx
c000ae8b:	50                   	push   eax
c000ae8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae94:	e8 b2 c6 01 00       	call   c002754b <__adddf3>
c000ae99:	83 c4 10             	add    esp,0x10
c000ae9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aea0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aea4:	89 f8                	mov    eax,edi
c000aea6:	b9 08 00 00 00       	mov    ecx,0x8
c000aeab:	99                   	cdq    
c000aeac:	f7 f9                	idiv   ecx
c000aeae:	4a                   	dec    edx
c000aeaf:	83 fa 06             	cmp    edx,0x6
c000aeb2:	77 07                	ja     c000aebb <calc_output_multi+0x125>
c000aeb4:	ff 24 95 e4 9d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd621c]
c000aebb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aebe:	4f                   	dec    edi
c000aebf:	83 ec 0c             	sub    esp,0xc
c000aec2:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aec5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aec9:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aed0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aed4:	e8 e6 d6 01 00       	call   c00285bf <__extendsfdf2>
c000aed9:	83 c4 10             	add    esp,0x10
c000aedc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aee0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aee4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeec:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aef0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aef4:	e8 cf cc 01 00       	call   c0027bc8 <__muldf3>
c000aef9:	83 c4 10             	add    esp,0x10
c000aefc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af00:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af04:	52                   	push   edx
c000af05:	50                   	push   eax
c000af06:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af09:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af0c:	e8 3a c6 01 00       	call   c002754b <__adddf3>
c000af11:	83 c4 10             	add    esp,0x10
c000af14:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af17:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af1a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af1d:	4f                   	dec    edi
c000af1e:	83 ec 0c             	sub    esp,0xc
c000af21:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af28:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af2f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af33:	e8 87 d6 01 00       	call   c00285bf <__extendsfdf2>
c000af38:	83 c4 10             	add    esp,0x10
c000af3b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af3f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af4b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af4f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af53:	e8 70 cc 01 00       	call   c0027bc8 <__muldf3>
c000af58:	83 c4 10             	add    esp,0x10
c000af5b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af63:	52                   	push   edx
c000af64:	50                   	push   eax
c000af65:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af68:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af6b:	e8 db c5 01 00       	call   c002754b <__adddf3>
c000af70:	83 c4 10             	add    esp,0x10
c000af73:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af76:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af7c:	4f                   	dec    edi
c000af7d:	83 ec 0c             	sub    esp,0xc
c000af80:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af87:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af92:	e8 28 d6 01 00       	call   c00285bf <__extendsfdf2>
c000af97:	83 c4 10             	add    esp,0x10
c000af9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af9e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afaa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afb2:	e8 11 cc 01 00       	call   c0027bc8 <__muldf3>
c000afb7:	83 c4 10             	add    esp,0x10
c000afba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afbe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afc2:	52                   	push   edx
c000afc3:	50                   	push   eax
c000afc4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afc7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afca:	e8 7c c5 01 00       	call   c002754b <__adddf3>
c000afcf:	83 c4 10             	add    esp,0x10
c000afd2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afd5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afd8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afdb:	4f                   	dec    edi
c000afdc:	83 ec 0c             	sub    esp,0xc
c000afdf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afe2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afe6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afed:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aff1:	e8 c9 d5 01 00       	call   c00285bf <__extendsfdf2>
c000aff6:	83 c4 10             	add    esp,0x10
c000aff9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000affd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b001:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b005:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b009:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b00d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b011:	e8 b2 cb 01 00       	call   c0027bc8 <__muldf3>
c000b016:	83 c4 10             	add    esp,0x10
c000b019:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b01d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b021:	52                   	push   edx
c000b022:	50                   	push   eax
c000b023:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b026:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b029:	e8 1d c5 01 00       	call   c002754b <__adddf3>
c000b02e:	83 c4 10             	add    esp,0x10
c000b031:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b034:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b037:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b03a:	4f                   	dec    edi
c000b03b:	83 ec 0c             	sub    esp,0xc
c000b03e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b041:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b045:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b04c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b050:	e8 6a d5 01 00       	call   c00285bf <__extendsfdf2>
c000b055:	83 c4 10             	add    esp,0x10
c000b058:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b05c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b064:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b068:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b06c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b070:	e8 53 cb 01 00       	call   c0027bc8 <__muldf3>
c000b075:	83 c4 10             	add    esp,0x10
c000b078:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b07c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b080:	52                   	push   edx
c000b081:	50                   	push   eax
c000b082:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b085:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b088:	e8 be c4 01 00       	call   c002754b <__adddf3>
c000b08d:	83 c4 10             	add    esp,0x10
c000b090:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b093:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b096:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b099:	4f                   	dec    edi
c000b09a:	83 ec 0c             	sub    esp,0xc
c000b09d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0a4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0ab:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0af:	e8 0b d5 01 00       	call   c00285bf <__extendsfdf2>
c000b0b4:	83 c4 10             	add    esp,0x10
c000b0b7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0bb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0c7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0cb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0cf:	e8 f4 ca 01 00       	call   c0027bc8 <__muldf3>
c000b0d4:	83 c4 10             	add    esp,0x10
c000b0d7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0db:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0df:	52                   	push   edx
c000b0e0:	50                   	push   eax
c000b0e1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0e4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0e7:	e8 5f c4 01 00       	call   c002754b <__adddf3>
c000b0ec:	83 c4 10             	add    esp,0x10
c000b0ef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0f2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0f5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0f8:	4f                   	dec    edi
c000b0f9:	83 ec 0c             	sub    esp,0xc
c000b0fc:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b103:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b10a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b10e:	e8 ac d4 01 00       	call   c00285bf <__extendsfdf2>
c000b113:	83 c4 10             	add    esp,0x10
c000b116:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b11a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b11e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b122:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b126:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b12a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b12e:	e8 95 ca 01 00       	call   c0027bc8 <__muldf3>
c000b133:	83 c4 10             	add    esp,0x10
c000b136:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b13a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b13e:	52                   	push   edx
c000b13f:	50                   	push   eax
c000b140:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b143:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b146:	e8 00 c4 01 00       	call   c002754b <__adddf3>
c000b14b:	83 c4 10             	add    esp,0x10
c000b14e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b151:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b154:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b157:	4f                   	dec    edi
c000b158:	83 ec 0c             	sub    esp,0xc
c000b15b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b15e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b162:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b169:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b16d:	e8 4d d4 01 00       	call   c00285bf <__extendsfdf2>
c000b172:	83 c4 10             	add    esp,0x10
c000b175:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b179:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b17d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b181:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b185:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b189:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b18d:	e8 36 ca 01 00       	call   c0027bc8 <__muldf3>
c000b192:	83 c4 10             	add    esp,0x10
c000b195:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b199:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b19d:	52                   	push   edx
c000b19e:	50                   	push   eax
c000b19f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1a2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1a5:	e8 a1 c3 01 00       	call   c002754b <__adddf3>
c000b1aa:	83 c4 10             	add    esp,0x10
c000b1ad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1b0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1b3:	85 ff                	test   edi,edi
c000b1b5:	0f 8f e9 fc ff ff    	jg     c000aea4 <calc_output_multi+0x10e>
c000b1bb:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1bf:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1c3:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1c7:	0f 89 4c fc ff ff    	jns    c000ae19 <calc_output_multi+0x83>
c000b1cd:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1d1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1d5:	29 c8                	sub    eax,ecx
c000b1d7:	99                   	cdq    
c000b1d8:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1dc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1e0:	0f af d0             	imul   edx,eax
c000b1e3:	40                   	inc    eax
c000b1e4:	01 d1                	add    ecx,edx
c000b1e6:	0f af c3             	imul   eax,ebx
c000b1e9:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1ed:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1f0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1f4:	55                   	push   ebp
c000b1f5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f9:	6a 00                	push   0x0
c000b1fb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1ff:	e8 7c 55 ff ff       	call   c0000780 <memset>
c000b204:	83 c4 10             	add    esp,0x10
c000b207:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b20b:	e8 e0 e6 ff ff       	call   c00098f0 <fp_to_double>
c000b210:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b214:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b218:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b21c:	e8 c5 e6 ff ff       	call   c00098e6 <fp_to_int>
c000b221:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b224:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b227:	57                   	push   edi
c000b228:	57                   	push   edi
c000b229:	89 df                	mov    edi,ebx
c000b22b:	55                   	push   ebp
c000b22c:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b230:	e8 ab bc 01 00       	call   c0026ee0 <__subsf3>
c000b235:	89 04 24             	mov    DWORD PTR [esp],eax
c000b238:	e8 82 d3 01 00       	call   c00285bf <__extendsfdf2>
c000b23d:	83 c4 10             	add    esp,0x10
c000b240:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b244:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b248:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b24c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b250:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b254:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b258:	e8 6b c9 01 00       	call   c0027bc8 <__muldf3>
c000b25d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b260:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b264:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b268:	e8 52 d3 01 00       	call   c00285bf <__extendsfdf2>
c000b26d:	83 c4 10             	add    esp,0x10
c000b270:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b274:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b278:	52                   	push   edx
c000b279:	50                   	push   eax
c000b27a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b282:	e8 c4 c2 01 00       	call   c002754b <__adddf3>
c000b287:	83 c4 10             	add    esp,0x10
c000b28a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b28e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b292:	89 f8                	mov    eax,edi
c000b294:	b9 08 00 00 00       	mov    ecx,0x8
c000b299:	99                   	cdq    
c000b29a:	f7 f9                	idiv   ecx
c000b29c:	4a                   	dec    edx
c000b29d:	83 fa 06             	cmp    edx,0x6
c000b2a0:	77 07                	ja     c000b2a9 <calc_output_multi+0x513>
c000b2a2:	ff 24 95 00 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6200]
c000b2a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2ad:	4f                   	dec    edi
c000b2ae:	83 ec 0c             	sub    esp,0xc
c000b2b1:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2b8:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2bf:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2c3:	e8 f7 d2 01 00       	call   c00285bf <__extendsfdf2>
c000b2c8:	83 c4 10             	add    esp,0x10
c000b2cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2e3:	e8 e0 c8 01 00       	call   c0027bc8 <__muldf3>
c000b2e8:	83 c4 10             	add    esp,0x10
c000b2eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f3:	52                   	push   edx
c000b2f4:	50                   	push   eax
c000b2f5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2f8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2fb:	e8 4b c2 01 00       	call   c002754b <__adddf3>
c000b300:	83 c4 10             	add    esp,0x10
c000b303:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b306:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b30d:	4f                   	dec    edi
c000b30e:	83 ec 0c             	sub    esp,0xc
c000b311:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b314:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b318:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b31f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b323:	e8 97 d2 01 00       	call   c00285bf <__extendsfdf2>
c000b328:	83 c4 10             	add    esp,0x10
c000b32b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b32f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b333:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b337:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b33b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b343:	e8 80 c8 01 00       	call   c0027bc8 <__muldf3>
c000b348:	83 c4 10             	add    esp,0x10
c000b34b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b34f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b353:	52                   	push   edx
c000b354:	50                   	push   eax
c000b355:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b358:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b35b:	e8 eb c1 01 00       	call   c002754b <__adddf3>
c000b360:	83 c4 10             	add    esp,0x10
c000b363:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b366:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b369:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b36d:	4f                   	dec    edi
c000b36e:	83 ec 0c             	sub    esp,0xc
c000b371:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b374:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b378:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b37f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b383:	e8 37 d2 01 00       	call   c00285bf <__extendsfdf2>
c000b388:	83 c4 10             	add    esp,0x10
c000b38b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b38f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b397:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b39b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3a3:	e8 20 c8 01 00       	call   c0027bc8 <__muldf3>
c000b3a8:	83 c4 10             	add    esp,0x10
c000b3ab:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3af:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3b3:	52                   	push   edx
c000b3b4:	50                   	push   eax
c000b3b5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3b8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3bb:	e8 8b c1 01 00       	call   c002754b <__adddf3>
c000b3c0:	83 c4 10             	add    esp,0x10
c000b3c3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3c6:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3cd:	4f                   	dec    edi
c000b3ce:	83 ec 0c             	sub    esp,0xc
c000b3d1:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3d8:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3df:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3e3:	e8 d7 d1 01 00       	call   c00285bf <__extendsfdf2>
c000b3e8:	83 c4 10             	add    esp,0x10
c000b3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3ff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b403:	e8 c0 c7 01 00       	call   c0027bc8 <__muldf3>
c000b408:	83 c4 10             	add    esp,0x10
c000b40b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b40f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b413:	52                   	push   edx
c000b414:	50                   	push   eax
c000b415:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b418:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b41b:	e8 2b c1 01 00       	call   c002754b <__adddf3>
c000b420:	83 c4 10             	add    esp,0x10
c000b423:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b426:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b429:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b42d:	4f                   	dec    edi
c000b42e:	83 ec 0c             	sub    esp,0xc
c000b431:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b434:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b438:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b43f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b443:	e8 77 d1 01 00       	call   c00285bf <__extendsfdf2>
c000b448:	83 c4 10             	add    esp,0x10
c000b44b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b44f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b453:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b457:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b45b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b45f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b463:	e8 60 c7 01 00       	call   c0027bc8 <__muldf3>
c000b468:	83 c4 10             	add    esp,0x10
c000b46b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b46f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b473:	52                   	push   edx
c000b474:	50                   	push   eax
c000b475:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b478:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b47b:	e8 cb c0 01 00       	call   c002754b <__adddf3>
c000b480:	83 c4 10             	add    esp,0x10
c000b483:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b486:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b489:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b48d:	4f                   	dec    edi
c000b48e:	83 ec 0c             	sub    esp,0xc
c000b491:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b494:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b498:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b49f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4a3:	e8 17 d1 01 00       	call   c00285bf <__extendsfdf2>
c000b4a8:	83 c4 10             	add    esp,0x10
c000b4ab:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4af:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4bb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4bf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4c3:	e8 00 c7 01 00       	call   c0027bc8 <__muldf3>
c000b4c8:	83 c4 10             	add    esp,0x10
c000b4cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4d3:	52                   	push   edx
c000b4d4:	50                   	push   eax
c000b4d5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4d8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4db:	e8 6b c0 01 00       	call   c002754b <__adddf3>
c000b4e0:	83 c4 10             	add    esp,0x10
c000b4e3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4e6:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ed:	4f                   	dec    edi
c000b4ee:	83 ec 0c             	sub    esp,0xc
c000b4f1:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4f4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4f8:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4ff:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b503:	e8 b7 d0 01 00       	call   c00285bf <__extendsfdf2>
c000b508:	83 c4 10             	add    esp,0x10
c000b50b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b50f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b513:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b517:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b51b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b51f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b523:	e8 a0 c6 01 00       	call   c0027bc8 <__muldf3>
c000b528:	83 c4 10             	add    esp,0x10
c000b52b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b52f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b533:	52                   	push   edx
c000b534:	50                   	push   eax
c000b535:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b538:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b53b:	e8 0b c0 01 00       	call   c002754b <__adddf3>
c000b540:	83 c4 10             	add    esp,0x10
c000b543:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b546:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b549:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b54d:	4f                   	dec    edi
c000b54e:	83 ec 0c             	sub    esp,0xc
c000b551:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b554:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b558:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b55f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b563:	e8 57 d0 01 00       	call   c00285bf <__extendsfdf2>
c000b568:	83 c4 10             	add    esp,0x10
c000b56b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b56f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b573:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b577:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b57b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b57f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b583:	e8 40 c6 01 00       	call   c0027bc8 <__muldf3>
c000b588:	83 c4 10             	add    esp,0x10
c000b58b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b58f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b593:	52                   	push   edx
c000b594:	50                   	push   eax
c000b595:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b598:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b59b:	e8 ab bf 01 00       	call   c002754b <__adddf3>
c000b5a0:	83 c4 10             	add    esp,0x10
c000b5a3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b5a6:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5a9:	85 ff                	test   edi,edi
c000b5ab:	0f 8f e1 fc ff ff    	jg     c000b292 <calc_output_multi+0x4fc>
c000b5b1:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5b5:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5b9:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5bd:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5c2:	0f 8f 3f fc ff ff    	jg     c000b207 <calc_output_multi+0x471>
c000b5c8:	be 08 00 00 00       	mov    esi,0x8
c000b5cd:	89 d8                	mov    eax,ebx
c000b5cf:	99                   	cdq    
c000b5d0:	f7 fe                	idiv   esi
c000b5d2:	4a                   	dec    edx
c000b5d3:	83 fa 06             	cmp    edx,0x6
c000b5d6:	77 07                	ja     c000b5df <calc_output_multi+0x849>
c000b5d8:	ff 24 95 1c 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd61e4]
c000b5df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5e3:	4b                   	dec    ebx
c000b5e4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5eb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5ef:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5f3:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5f6:	e8 50 bf 01 00       	call   c002754b <__adddf3>
c000b5fb:	83 c4 10             	add    esp,0x10
c000b5fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b602:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b606:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b60e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b612:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b616:	e8 ad c5 01 00       	call   c0027bc8 <__muldf3>
c000b61b:	5d                   	pop    ebp
c000b61c:	59                   	pop    ecx
c000b61d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b621:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b625:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62d:	e8 69 ce 01 00       	call   c002849b <__truncdfsf2>
c000b632:	83 c4 10             	add    esp,0x10
c000b635:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b639:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b63c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b640:	4b                   	dec    ebx
c000b641:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b645:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b64c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b650:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b653:	e8 f3 be 01 00       	call   c002754b <__adddf3>
c000b658:	83 c4 10             	add    esp,0x10
c000b65b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b65f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b663:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b667:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b66b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b673:	e8 50 c5 01 00       	call   c0027bc8 <__muldf3>
c000b678:	59                   	pop    ecx
c000b679:	5f                   	pop    edi
c000b67a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b67e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b682:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b686:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68a:	e8 0c ce 01 00       	call   c002849b <__truncdfsf2>
c000b68f:	83 c4 10             	add    esp,0x10
c000b692:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b696:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b699:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b69d:	4b                   	dec    ebx
c000b69e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a2:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6a9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6ad:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6b0:	e8 96 be 01 00       	call   c002754b <__adddf3>
c000b6b5:	83 c4 10             	add    esp,0x10
c000b6b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6bc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6d0:	e8 f3 c4 01 00       	call   c0027bc8 <__muldf3>
c000b6d5:	5f                   	pop    edi
c000b6d6:	5d                   	pop    ebp
c000b6d7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6db:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e7:	e8 af cd 01 00       	call   c002849b <__truncdfsf2>
c000b6ec:	83 c4 10             	add    esp,0x10
c000b6ef:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6f3:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6fa:	4b                   	dec    ebx
c000b6fb:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6ff:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b702:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b706:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b70a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b70d:	e8 39 be 01 00       	call   c002754b <__adddf3>
c000b712:	83 c4 10             	add    esp,0x10
c000b715:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b719:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b71d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b721:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b725:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b729:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b72d:	e8 96 c4 01 00       	call   c0027bc8 <__muldf3>
c000b732:	5d                   	pop    ebp
c000b733:	59                   	pop    ecx
c000b734:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b738:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b73c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b744:	e8 52 cd 01 00       	call   c002849b <__truncdfsf2>
c000b749:	83 c4 10             	add    esp,0x10
c000b74c:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b750:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b753:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b757:	4b                   	dec    ebx
c000b758:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b75c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b75f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b763:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b767:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b76a:	e8 dc bd 01 00       	call   c002754b <__adddf3>
c000b76f:	83 c4 10             	add    esp,0x10
c000b772:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b776:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b782:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b786:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b78a:	e8 39 c4 01 00       	call   c0027bc8 <__muldf3>
c000b78f:	59                   	pop    ecx
c000b790:	5f                   	pop    edi
c000b791:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b795:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a1:	e8 f5 cc 01 00       	call   c002849b <__truncdfsf2>
c000b7a6:	83 c4 10             	add    esp,0x10
c000b7a9:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7ad:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7b4:	4b                   	dec    ebx
c000b7b5:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7b9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7c0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7c4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7c7:	e8 7f bd 01 00       	call   c002754b <__adddf3>
c000b7cc:	83 c4 10             	add    esp,0x10
c000b7cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7e7:	e8 dc c3 01 00       	call   c0027bc8 <__muldf3>
c000b7ec:	5f                   	pop    edi
c000b7ed:	5d                   	pop    ebp
c000b7ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7f2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fe:	e8 98 cc 01 00       	call   c002849b <__truncdfsf2>
c000b803:	83 c4 10             	add    esp,0x10
c000b806:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b80a:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b80d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b811:	4b                   	dec    ebx
c000b812:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b816:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b81d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b821:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b824:	e8 22 bd 01 00       	call   c002754b <__adddf3>
c000b829:	83 c4 10             	add    esp,0x10
c000b82c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b830:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b834:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b838:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b83c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b840:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b844:	e8 7f c3 01 00       	call   c0027bc8 <__muldf3>
c000b849:	5d                   	pop    ebp
c000b84a:	59                   	pop    ecx
c000b84b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b84f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b853:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b857:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85b:	e8 3b cc 01 00       	call   c002849b <__truncdfsf2>
c000b860:	83 c4 10             	add    esp,0x10
c000b863:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b867:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b86a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b86e:	4b                   	dec    ebx
c000b86f:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b873:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b876:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b87a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b87e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b881:	e8 c5 bc 01 00       	call   c002754b <__adddf3>
c000b886:	83 c4 10             	add    esp,0x10
c000b889:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b88d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b891:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b895:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b899:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b89d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8a1:	e8 22 c3 01 00       	call   c0027bc8 <__muldf3>
c000b8a6:	59                   	pop    ecx
c000b8a7:	5f                   	pop    edi
c000b8a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b8:	e8 de cb 01 00       	call   c002849b <__truncdfsf2>
c000b8bd:	83 c4 10             	add    esp,0x10
c000b8c0:	85 db                	test   ebx,ebx
c000b8c2:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8c6:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8c9:	0f 8f fe fc ff ff    	jg     c000b5cd <calc_output_multi+0x837>
c000b8cf:	83 c4 4c             	add    esp,0x4c
c000b8d2:	5b                   	pop    ebx
c000b8d3:	5e                   	pop    esi
c000b8d4:	5f                   	pop    edi
c000b8d5:	5d                   	pop    ebp
c000b8d6:	c3                   	ret    

c000b8d7 <double_to_fp>:
c000b8d7:	83 ec 0c             	sub    esp,0xc
c000b8da:	68 00 00 b0 40       	push   0x40b00000
c000b8df:	6a 00                	push   0x0
c000b8e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e9:	e8 da c2 01 00       	call   c0027bc8 <__muldf3>
c000b8ee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8f2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8f6:	83 c4 1c             	add    esp,0x1c
c000b8f9:	e9 52 cd 01 00       	jmp    c0028650 <lrint>

c000b8fe <prepare_data>:
c000b8fe:	55                   	push   ebp
c000b8ff:	57                   	push   edi
c000b900:	56                   	push   esi
c000b901:	53                   	push   ebx
c000b902:	83 ec 1c             	sub    esp,0x1c
c000b905:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b909:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b90d:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b911:	0f 89 57 01 00 00    	jns    c000ba6e <prepare_data+0x170>
c000b917:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b91a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b91d:	85 d2                	test   edx,edx
c000b91f:	75 0d                	jne    c000b92e <prepare_data+0x30>
c000b921:	8d 14 36             	lea    edx,[esi+esi*1]
c000b924:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b927:	29 d0                	sub    eax,edx
c000b929:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b92c:	eb 44                	jmp    c000b972 <prepare_data+0x74>
c000b92e:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b931:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b934:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b937:	39 c1                	cmp    ecx,eax
c000b939:	7d 04                	jge    c000b93f <prepare_data+0x41>
c000b93b:	29 d0                	sub    eax,edx
c000b93d:	eb 2d                	jmp    c000b96c <prepare_data+0x6e>
c000b93f:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b945:	29 d7                	sub    edi,edx
c000b947:	01 f7                	add    edi,esi
c000b949:	51                   	push   ecx
c000b94a:	29 f2                	sub    edx,esi
c000b94c:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b953:	8d 14 90             	lea    edx,[eax+edx*4]
c000b956:	51                   	push   ecx
c000b957:	52                   	push   edx
c000b958:	50                   	push   eax
c000b959:	e8 26 4d ff ff       	call   c0000684 <memmove>
c000b95e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b961:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b964:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b967:	29 f0                	sub    eax,esi
c000b969:	83 c4 10             	add    esp,0x10
c000b96c:	29 f0                	sub    eax,esi
c000b96e:	79 02                	jns    c000b972 <prepare_data+0x74>
c000b970:	31 c0                	xor    eax,eax
c000b972:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b975:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b978:	29 ef                	sub    edi,ebp
c000b97a:	39 c7                	cmp    edi,eax
c000b97c:	7e 02                	jle    c000b980 <prepare_data+0x82>
c000b97e:	89 c7                	mov    edi,eax
c000b980:	89 f8                	mov    eax,edi
c000b982:	99                   	cdq    
c000b983:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b986:	b8 15 00 00 00       	mov    eax,0x15
c000b98b:	29 d7                	sub    edi,edx
c000b98d:	0f 88 dd 00 00 00    	js     c000ba70 <prepare_data+0x172>
c000b993:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b996:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b999:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b99c:	0f 8f ce 00 00 00    	jg     c000ba70 <prepare_data+0x172>
c000b9a2:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9a8:	50                   	push   eax
c000b9a9:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9b0:	50                   	push   eax
c000b9b1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9b5:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9b7:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9ba:	50                   	push   eax
c000b9bb:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9be:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9c2:	50                   	push   eax
c000b9c3:	e8 84 4d ff ff       	call   c000074c <memcpy>
c000b9c8:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9cb:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9ce:	01 fd                	add    ebp,edi
c000b9d0:	01 f9                	add    ecx,edi
c000b9d2:	83 c4 10             	add    esp,0x10
c000b9d5:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9d8:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9db:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9de:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9e2:	0f 85 86 00 00 00    	jne    c000ba6e <prepare_data+0x170>
c000b9e8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9eb:	89 e8                	mov    eax,ebp
c000b9ed:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9f0:	29 c8                	sub    eax,ecx
c000b9f2:	39 f8                	cmp    eax,edi
c000b9f4:	7d 78                	jge    c000ba6e <prepare_data+0x170>
c000b9f6:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9fa:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9fe:	74 6e                	je     c000ba6e <prepare_data+0x170>
c000ba00:	8d 7e 04             	lea    edi,[esi+0x4]
c000ba03:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000ba07:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba0a:	29 ef                	sub    edi,ebp
c000ba0c:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba10:	7c 29                	jl     c000ba3b <prepare_data+0x13d>
c000ba12:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba15:	29 f1                	sub    ecx,esi
c000ba17:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba1e:	55                   	push   ebp
c000ba1f:	50                   	push   eax
c000ba20:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba23:	50                   	push   eax
c000ba24:	52                   	push   edx
c000ba25:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba29:	e8 56 4c ff ff       	call   c0000684 <memmove>
c000ba2e:	83 c4 10             	add    esp,0x10
c000ba31:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba34:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba37:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba3b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba3e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba41:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba44:	83 c6 05             	add    esi,0x5
c000ba47:	78 07                	js     c000ba50 <prepare_data+0x152>
c000ba49:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba4c:	39 cf                	cmp    edi,ecx
c000ba4e:	7e 04                	jle    c000ba54 <prepare_data+0x156>
c000ba50:	89 ce                	mov    esi,ecx
c000ba52:	29 c6                	sub    esi,eax
c000ba54:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba57:	51                   	push   ecx
c000ba58:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba5f:	51                   	push   ecx
c000ba60:	6a 00                	push   0x0
c000ba62:	50                   	push   eax
c000ba63:	e8 18 4d ff ff       	call   c0000780 <memset>
c000ba68:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba6b:	83 c4 10             	add    esp,0x10
c000ba6e:	31 c0                	xor    eax,eax
c000ba70:	83 c4 1c             	add    esp,0x1c
c000ba73:	5b                   	pop    ebx
c000ba74:	5e                   	pop    esi
c000ba75:	5f                   	pop    edi
c000ba76:	5d                   	pop    ebp
c000ba77:	c3                   	ret    

c000ba78 <sinc_multichan_vari_process>:
c000ba78:	55                   	push   ebp
c000ba79:	ba 05 00 00 00       	mov    edx,0x5
c000ba7e:	57                   	push   edi
c000ba7f:	56                   	push   esi
c000ba80:	53                   	push   ebx
c000ba81:	83 ec 4c             	sub    esp,0x4c
c000ba84:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba88:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba8c:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba8f:	85 db                	test   ebx,ebx
c000ba91:	0f 84 9b 06 00 00    	je     c000c132 <sinc_multichan_vari_process+0x6ba>
c000ba97:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba9a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba9d:	0f af c5             	imul   eax,ebp
c000baa0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000baa3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000baa6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000baad:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bab4:	0f af c5             	imul   eax,ebp
c000bab7:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000baba:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000babd:	8b 06                	mov    eax,DWORD PTR [esi]
c000babf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bac3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bac7:	68 00 00 70 3f       	push   0x3f700000
c000bacc:	6a 00                	push   0x0
c000bace:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bad2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bad6:	e8 bc c9 01 00       	call   c0028497 <__ltdf2>
c000badb:	83 c4 10             	add    esp,0x10
c000bade:	ba 16 00 00 00       	mov    edx,0x16
c000bae3:	85 c0                	test   eax,eax
c000bae5:	0f 88 47 06 00 00    	js     c000c132 <sinc_multichan_vari_process+0x6ba>
c000baeb:	68 00 00 70 40       	push   0x40700000
c000baf0:	6a 00                	push   0x0
c000baf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bafa:	e8 7a c9 01 00       	call   c0028479 <__gtdf2>
c000baff:	83 c4 10             	add    esp,0x10
c000bb02:	ba 16 00 00 00       	mov    edx,0x16
c000bb07:	85 c0                	test   eax,eax
c000bb09:	0f 8f 23 06 00 00    	jg     c000c132 <sinc_multichan_vari_process+0x6ba>
c000bb0f:	83 ec 0c             	sub    esp,0xc
c000bb12:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb15:	e8 11 c7 01 00       	call   c002822b <__floatsidf>
c000bb1a:	83 c4 10             	add    esp,0x10
c000bb1d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb21:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb25:	68 00 00 00 40       	push   0x40000000
c000bb2a:	6a 00                	push   0x0
c000bb2c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb30:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb34:	e8 12 ba 01 00       	call   c002754b <__adddf3>
c000bb39:	59                   	pop    ecx
c000bb3a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb3e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb42:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb45:	e8 e1 c6 01 00       	call   c002822b <__floatsidf>
c000bb4a:	83 c4 10             	add    esp,0x10
c000bb4d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb51:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb55:	52                   	push   edx
c000bb56:	50                   	push   eax
c000bb57:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb5f:	e8 48 c3 01 00       	call   c0027eac <__divdf3>
c000bb64:	83 c4 10             	add    esp,0x10
c000bb67:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb6b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb6f:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb72:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb75:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb79:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb85:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb8d:	e8 e7 c8 01 00       	call   c0028479 <__gtdf2>
c000bb92:	83 c4 10             	add    esp,0x10
c000bb95:	85 c0                	test   eax,eax
c000bb97:	7e 2d                	jle    c000bbc6 <sinc_multichan_vari_process+0x14e>
c000bb99:	68 00 00 f0 3f       	push   0x3ff00000
c000bb9e:	6a 00                	push   0x0
c000bba0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba8:	e8 ea c8 01 00       	call   c0028497 <__ltdf2>
c000bbad:	83 c4 10             	add    esp,0x10
c000bbb0:	85 c0                	test   eax,eax
c000bbb2:	79 4d                	jns    c000bc01 <sinc_multichan_vari_process+0x189>
c000bbb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbb8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbc4:	eb 1b                	jmp    c000bbe1 <sinc_multichan_vari_process+0x169>
c000bbc6:	68 00 00 f0 3f       	push   0x3ff00000
c000bbcb:	6a 00                	push   0x0
c000bbcd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbd1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbd5:	e8 bd c8 01 00       	call   c0028497 <__ltdf2>
c000bbda:	83 c4 10             	add    esp,0x10
c000bbdd:	85 c0                	test   eax,eax
c000bbdf:	79 20                	jns    c000bc01 <sinc_multichan_vari_process+0x189>
c000bbe1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbf1:	e8 b6 c2 01 00       	call   c0027eac <__divdf3>
c000bbf6:	83 c4 10             	add    esp,0x10
c000bbf9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbfd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc01:	50                   	push   eax
c000bc02:	50                   	push   eax
c000bc03:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc0b:	e8 40 ca 01 00       	call   c0028650 <lrint>
c000bc10:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc13:	40                   	inc    eax
c000bc14:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc18:	0f af c5             	imul   eax,ebp
c000bc1b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc1f:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc26:	58                   	pop    eax
c000bc27:	5a                   	pop    edx
c000bc28:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc2c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc30:	e8 1b ca 01 00       	call   c0028650 <lrint>
c000bc35:	83 ec 0c             	sub    esp,0xc
c000bc38:	50                   	push   eax
c000bc39:	e8 ed c5 01 00       	call   c002822b <__floatsidf>
c000bc3e:	83 c4 10             	add    esp,0x10
c000bc41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc45:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc49:	52                   	push   edx
c000bc4a:	50                   	push   eax
c000bc4b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc53:	e8 44 bf 01 00       	call   c0027b9c <__subdf3>
c000bc58:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc5c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc60:	83 c4 20             	add    esp,0x20
c000bc63:	6a 00                	push   0x0
c000bc65:	6a 00                	push   0x0
c000bc67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc6f:	e8 23 c8 01 00       	call   c0028497 <__ltdf2>
c000bc74:	83 c4 10             	add    esp,0x10
c000bc77:	85 c0                	test   eax,eax
c000bc79:	79 1f                	jns    c000bc9a <sinc_multichan_vari_process+0x222>
c000bc7b:	68 00 00 f0 3f       	push   0x3ff00000
c000bc80:	6a 00                	push   0x0
c000bc82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc8a:	e8 bc b8 01 00       	call   c002754b <__adddf3>
c000bc8f:	83 c4 10             	add    esp,0x10
c000bc92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc96:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc9a:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc9d:	83 ec 10             	sub    esp,0x10
c000bca0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bca4:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bca7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcb3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcb7:	e8 e0 be 01 00       	call   c0027b9c <__subdf3>
c000bcbc:	83 c4 18             	add    esp,0x18
c000bcbf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcc7:	52                   	push   edx
c000bcc8:	50                   	push   eax
c000bcc9:	e8 82 c9 01 00       	call   c0028650 <lrint>
c000bcce:	0f af e8             	imul   ebp,eax
c000bcd1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bcd5:	01 e8                	add    eax,ebp
c000bcd7:	99                   	cdq    
c000bcd8:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcdb:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bce2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bce6:	68 00 00 f0 3f       	push   0x3ff00000
c000bceb:	6a 00                	push   0x0
c000bced:	e8 ba c1 01 00       	call   c0027eac <__divdf3>
c000bcf2:	83 c4 10             	add    esp,0x10
c000bcf5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcf9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcfd:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bd02:	68 23 42 92 0c       	push   0xc924223
c000bd07:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd0b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd0f:	e8 37 b8 01 00       	call   c002754b <__adddf3>
c000bd14:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd18:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd1c:	83 c4 20             	add    esp,0x20
c000bd1f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd27:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd2f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd32:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd35:	7d 50                	jge    c000bd87 <sinc_multichan_vari_process+0x30f>
c000bd37:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd3a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd3d:	01 c8                	add    eax,ecx
c000bd3f:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd42:	99                   	cdq    
c000bd43:	f7 f9                	idiv   ecx
c000bd45:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd49:	7d 0c                	jge    c000bd57 <sinc_multichan_vari_process+0x2df>
c000bd4b:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd4e:	85 ed                	test   ebp,ebp
c000bd50:	79 6b                	jns    c000bdbd <sinc_multichan_vari_process+0x345>
c000bd52:	e9 e6 00 00 00       	jmp    c000be3d <sinc_multichan_vari_process+0x3c5>
c000bd57:	50                   	push   eax
c000bd58:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd5c:	57                   	push   edi
c000bd5d:	53                   	push   ebx
c000bd5e:	e8 9b fb ff ff       	call   c000b8fe <prepare_data>
c000bd63:	83 c4 10             	add    esp,0x10
c000bd66:	89 c2                	mov    edx,eax
c000bd68:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd6b:	85 c0                	test   eax,eax
c000bd6d:	0f 85 bf 03 00 00    	jne    c000c132 <sinc_multichan_vari_process+0x6ba>
c000bd73:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd76:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd79:	01 c8                	add    eax,ecx
c000bd7b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd7e:	99                   	cdq    
c000bd7f:	f7 f9                	idiv   ecx
c000bd81:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd85:	7c c4                	jl     c000bd4b <sinc_multichan_vari_process+0x2d3>
c000bd87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd8f:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd92:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd99:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd9d:	89 06                	mov    DWORD PTR [esi],eax
c000bd9f:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bda2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bda5:	99                   	cdq    
c000bda6:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bda9:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bdac:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bdaf:	99                   	cdq    
c000bdb0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdb3:	31 d2                	xor    edx,edx
c000bdb5:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdb8:	e9 75 03 00 00       	jmp    c000c132 <sinc_multichan_vari_process+0x6ba>
c000bdbd:	83 ec 0c             	sub    esp,0xc
c000bdc0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bdc3:	e8 63 c4 01 00       	call   c002822b <__floatsidf>
c000bdc8:	83 c4 10             	add    esp,0x10
c000bdcb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdcf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdd3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bddb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde3:	e8 63 b7 01 00       	call   c002754b <__adddf3>
c000bde8:	83 c4 10             	add    esp,0x10
c000bdeb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdef:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdf3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdf7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdfb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be03:	e8 43 b7 01 00       	call   c002754b <__adddf3>
c000be08:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be13:	e8 13 c4 01 00       	call   c002822b <__floatsidf>
c000be18:	83 c4 10             	add    esp,0x10
c000be1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be23:	52                   	push   edx
c000be24:	50                   	push   eax
c000be25:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be29:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be2d:	e8 63 c6 01 00       	call   c0028495 <__gedf2>
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	85 c0                	test   eax,eax
c000be37:	0f 89 4a ff ff ff    	jns    c000bd87 <sinc_multichan_vari_process+0x30f>
c000be3d:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be41:	0f 8e ed 00 00 00    	jle    c000bf34 <sinc_multichan_vari_process+0x4bc>
c000be47:	83 ec 10             	sub    esp,0x10
c000be4a:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be4d:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be50:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be53:	ff 36                	push   DWORD PTR [esi]
c000be55:	e8 42 bd 01 00       	call   c0027b9c <__subdf3>
c000be5a:	83 c4 18             	add    esp,0x18
c000be5d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be61:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be65:	52                   	push   edx
c000be66:	50                   	push   eax
c000be67:	e8 c4 c7 01 00       	call   c0028630 <fabs>
c000be6c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be70:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be74:	83 c4 10             	add    esp,0x10
c000be77:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be7c:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be89:	e8 eb c5 01 00       	call   c0028479 <__gtdf2>
c000be8e:	83 c4 10             	add    esp,0x10
c000be91:	85 c0                	test   eax,eax
c000be93:	0f 8e 9b 00 00 00    	jle    c000bf34 <sinc_multichan_vari_process+0x4bc>
c000be99:	8b 06                	mov    eax,DWORD PTR [esi]
c000be9b:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be9e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bea2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bea6:	52                   	push   edx
c000bea7:	50                   	push   eax
c000bea8:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000beab:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000beae:	e8 e9 bc 01 00       	call   c0027b9c <__subdf3>
c000beb3:	59                   	pop    ecx
c000beb4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beb8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bebc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000bebf:	e8 67 c3 01 00       	call   c002822b <__floatsidf>
c000bec4:	83 c4 10             	add    esp,0x10
c000bec7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000becb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000becf:	52                   	push   edx
c000bed0:	50                   	push   eax
c000bed1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed9:	e8 ea bc 01 00       	call   c0027bc8 <__muldf3>
c000bede:	5d                   	pop    ebp
c000bedf:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bee3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bee7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000beea:	e8 3c c3 01 00       	call   c002822b <__floatsidf>
c000beef:	83 c4 10             	add    esp,0x10
c000bef2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bef6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000befa:	52                   	push   edx
c000befb:	50                   	push   eax
c000befc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf04:	e8 a3 bf 01 00       	call   c0027eac <__divdf3>
c000bf09:	83 c4 10             	add    esp,0x10
c000bf0c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf10:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf14:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf24:	e8 22 b6 01 00       	call   c002754b <__adddf3>
c000bf29:	83 c4 10             	add    esp,0x10
c000bf2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf30:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf34:	83 ec 0c             	sub    esp,0xc
c000bf37:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf3a:	e8 ec c2 01 00       	call   c002822b <__floatsidf>
c000bf3f:	83 c4 10             	add    esp,0x10
c000bf42:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf46:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf5a:	e8 38 c5 01 00       	call   c0028497 <__ltdf2>
c000bf5f:	83 c4 10             	add    esp,0x10
c000bf62:	85 c0                	test   eax,eax
c000bf64:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf68:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf6c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf70:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf74:	78 10                	js     c000bf86 <sinc_multichan_vari_process+0x50e>
c000bf76:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf7a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf7e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf82:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf86:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf8a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf8e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf92:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf96:	e8 2d bc 01 00       	call   c0027bc8 <__muldf3>
c000bf9b:	59                   	pop    ecx
c000bf9c:	5d                   	pop    ebp
c000bf9d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bfa1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bfa5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfad:	e8 25 f9 ff ff       	call   c000b8d7 <double_to_fp>
c000bfb2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb6:	89 c5                	mov    ebp,eax
c000bfb8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfbc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfc0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfc4:	e8 ff bb 01 00       	call   c0027bc8 <__muldf3>
c000bfc9:	83 c4 18             	add    esp,0x18
c000bfcc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfd0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfd4:	52                   	push   edx
c000bfd5:	50                   	push   eax
c000bfd6:	e8 fc f8 ff ff       	call   c000b8d7 <double_to_fp>
c000bfdb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfde:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfe2:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfe5:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfe8:	50                   	push   eax
c000bfe9:	50                   	push   eax
c000bfea:	50                   	push   eax
c000bfeb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfee:	e8 38 c2 01 00       	call   c002822b <__floatsidf>
c000bff3:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bff7:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c003:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c007:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c00b:	e8 9c be 01 00       	call   c0027eac <__divdf3>
c000c010:	83 c4 1c             	add    esp,0x1c
c000c013:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c017:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c01b:	52                   	push   edx
c000c01c:	89 ea                	mov    edx,ebp
c000c01e:	50                   	push   eax
c000c01f:	89 d8                	mov    eax,ebx
c000c021:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c024:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c028:	e8 69 ed ff ff       	call   c000ad96 <calc_output_multi>
c000c02d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c030:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c033:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c037:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c03b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c03f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c043:	e8 64 be 01 00       	call   c0027eac <__divdf3>
c000c048:	83 c4 10             	add    esp,0x10
c000c04b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c04f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c053:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c057:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c05b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c05f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c063:	e8 e3 b4 01 00       	call   c002754b <__adddf3>
c000c068:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c06c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c070:	83 c4 28             	add    esp,0x28
c000c073:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c077:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c07b:	e8 d0 c5 01 00       	call   c0028650 <lrint>
c000c080:	83 ec 0c             	sub    esp,0xc
c000c083:	50                   	push   eax
c000c084:	e8 a2 c1 01 00       	call   c002822b <__floatsidf>
c000c089:	83 c4 10             	add    esp,0x10
c000c08c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c090:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c094:	52                   	push   edx
c000c095:	50                   	push   eax
c000c096:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c09a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c09e:	e8 f9 ba 01 00       	call   c0027b9c <__subdf3>
c000c0a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0ab:	83 c4 20             	add    esp,0x20
c000c0ae:	6a 00                	push   0x0
c000c0b0:	6a 00                	push   0x0
c000c0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ba:	e8 d8 c3 01 00       	call   c0028497 <__ltdf2>
c000c0bf:	83 c4 10             	add    esp,0x10
c000c0c2:	85 c0                	test   eax,eax
c000c0c4:	79 20                	jns    c000c0e6 <sinc_multichan_vari_process+0x66e>
c000c0c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0d6:	e8 70 b4 01 00       	call   c002754b <__adddf3>
c000c0db:	83 c4 10             	add    esp,0x10
c000c0de:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0e6:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0e9:	83 ec 10             	sub    esp,0x10
c000c0ec:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0f0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0fb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c103:	e8 94 ba 01 00       	call   c0027b9c <__subdf3>
c000c108:	83 c4 18             	add    esp,0x18
c000c10b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c10f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c113:	52                   	push   edx
c000c114:	50                   	push   eax
c000c115:	e8 36 c5 01 00       	call   c0028650 <lrint>
c000c11a:	0f af e8             	imul   ebp,eax
c000c11d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c121:	83 c4 10             	add    esp,0x10
c000c124:	01 e8                	add    eax,ebp
c000c126:	99                   	cdq    
c000c127:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c12a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c12d:	e9 fd fb ff ff       	jmp    c000bd2f <sinc_multichan_vari_process+0x2b7>
c000c132:	83 c4 4c             	add    esp,0x4c
c000c135:	89 d0                	mov    eax,edx
c000c137:	5b                   	pop    ebx
c000c138:	5e                   	pop    esi
c000c139:	5f                   	pop    edi
c000c13a:	5d                   	pop    ebp
c000c13b:	c3                   	ret    

c000c13c <sinc_hex_vari_process>:
c000c13c:	55                   	push   ebp
c000c13d:	ba 05 00 00 00       	mov    edx,0x5
c000c142:	57                   	push   edi
c000c143:	56                   	push   esi
c000c144:	53                   	push   ebx
c000c145:	83 ec 4c             	sub    esp,0x4c
c000c148:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c14c:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c150:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c153:	85 db                	test   ebx,ebx
c000c155:	0f 84 9c 06 00 00    	je     c000c7f7 <sinc_hex_vari_process+0x6bb>
c000c15b:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c15e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c161:	0f af c7             	imul   eax,edi
c000c164:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c167:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c16a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c171:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c178:	0f af c7             	imul   eax,edi
c000c17b:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c17e:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c181:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c184:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c188:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c18c:	68 00 00 70 3f       	push   0x3f700000
c000c191:	6a 00                	push   0x0
c000c193:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c197:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c19b:	e8 f7 c2 01 00       	call   c0028497 <__ltdf2>
c000c1a0:	83 c4 10             	add    esp,0x10
c000c1a3:	ba 16 00 00 00       	mov    edx,0x16
c000c1a8:	85 c0                	test   eax,eax
c000c1aa:	0f 88 47 06 00 00    	js     c000c7f7 <sinc_hex_vari_process+0x6bb>
c000c1b0:	68 00 00 70 40       	push   0x40700000
c000c1b5:	6a 00                	push   0x0
c000c1b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1bf:	e8 b5 c2 01 00       	call   c0028479 <__gtdf2>
c000c1c4:	83 c4 10             	add    esp,0x10
c000c1c7:	ba 16 00 00 00       	mov    edx,0x16
c000c1cc:	85 c0                	test   eax,eax
c000c1ce:	0f 8f 23 06 00 00    	jg     c000c7f7 <sinc_hex_vari_process+0x6bb>
c000c1d4:	83 ec 0c             	sub    esp,0xc
c000c1d7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1da:	e8 4c c0 01 00       	call   c002822b <__floatsidf>
c000c1df:	83 c4 10             	add    esp,0x10
c000c1e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1ea:	68 00 00 00 40       	push   0x40000000
c000c1ef:	6a 00                	push   0x0
c000c1f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f9:	e8 4d b3 01 00       	call   c002754b <__adddf3>
c000c1fe:	59                   	pop    ecx
c000c1ff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c203:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c207:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c20a:	e8 1c c0 01 00       	call   c002822b <__floatsidf>
c000c20f:	83 c4 10             	add    esp,0x10
c000c212:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c216:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c21a:	52                   	push   edx
c000c21b:	50                   	push   eax
c000c21c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c220:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c224:	e8 83 bc 01 00       	call   c0027eac <__divdf3>
c000c229:	83 c4 10             	add    esp,0x10
c000c22c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c230:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c234:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c237:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c23a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c23e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c252:	e8 22 c2 01 00       	call   c0028479 <__gtdf2>
c000c257:	83 c4 10             	add    esp,0x10
c000c25a:	85 c0                	test   eax,eax
c000c25c:	7e 2d                	jle    c000c28b <sinc_hex_vari_process+0x14f>
c000c25e:	68 00 00 f0 3f       	push   0x3ff00000
c000c263:	6a 00                	push   0x0
c000c265:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c269:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c26d:	e8 25 c2 01 00       	call   c0028497 <__ltdf2>
c000c272:	83 c4 10             	add    esp,0x10
c000c275:	85 c0                	test   eax,eax
c000c277:	79 4d                	jns    c000c2c6 <sinc_hex_vari_process+0x18a>
c000c279:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c27d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c281:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c285:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c289:	eb 1b                	jmp    c000c2a6 <sinc_hex_vari_process+0x16a>
c000c28b:	68 00 00 f0 3f       	push   0x3ff00000
c000c290:	6a 00                	push   0x0
c000c292:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c296:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c29a:	e8 f8 c1 01 00       	call   c0028497 <__ltdf2>
c000c29f:	83 c4 10             	add    esp,0x10
c000c2a2:	85 c0                	test   eax,eax
c000c2a4:	79 20                	jns    c000c2c6 <sinc_hex_vari_process+0x18a>
c000c2a6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2aa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b6:	e8 f1 bb 01 00       	call   c0027eac <__divdf3>
c000c2bb:	83 c4 10             	add    esp,0x10
c000c2be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2c6:	50                   	push   eax
c000c2c7:	50                   	push   eax
c000c2c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2d0:	e8 7b c3 01 00       	call   c0028650 <lrint>
c000c2d5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2d8:	40                   	inc    eax
c000c2d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2dd:	0f af c7             	imul   eax,edi
c000c2e0:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2e7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2eb:	58                   	pop    eax
c000c2ec:	5a                   	pop    edx
c000c2ed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2f5:	e8 56 c3 01 00       	call   c0028650 <lrint>
c000c2fa:	83 ec 0c             	sub    esp,0xc
c000c2fd:	50                   	push   eax
c000c2fe:	e8 28 bf 01 00       	call   c002822b <__floatsidf>
c000c303:	83 c4 10             	add    esp,0x10
c000c306:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c30a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c30e:	52                   	push   edx
c000c30f:	50                   	push   eax
c000c310:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c314:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c318:	e8 7f b8 01 00       	call   c0027b9c <__subdf3>
c000c31d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c321:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c325:	83 c4 20             	add    esp,0x20
c000c328:	6a 00                	push   0x0
c000c32a:	6a 00                	push   0x0
c000c32c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c330:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c334:	e8 5e c1 01 00       	call   c0028497 <__ltdf2>
c000c339:	83 c4 10             	add    esp,0x10
c000c33c:	85 c0                	test   eax,eax
c000c33e:	79 1f                	jns    c000c35f <sinc_hex_vari_process+0x223>
c000c340:	68 00 00 f0 3f       	push   0x3ff00000
c000c345:	6a 00                	push   0x0
c000c347:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c34b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c34f:	e8 f7 b1 01 00       	call   c002754b <__adddf3>
c000c354:	83 c4 10             	add    esp,0x10
c000c357:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c35b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c35f:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c362:	83 ec 10             	sub    esp,0x10
c000c365:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c369:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c36c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c370:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c374:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c378:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c37c:	e8 1b b8 01 00       	call   c0027b9c <__subdf3>
c000c381:	83 c4 18             	add    esp,0x18
c000c384:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c388:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c38c:	52                   	push   edx
c000c38d:	50                   	push   eax
c000c38e:	e8 bd c2 01 00       	call   c0028650 <lrint>
c000c393:	0f af f8             	imul   edi,eax
c000c396:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c39a:	01 f8                	add    eax,edi
c000c39c:	99                   	cdq    
c000c39d:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c3a0:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c3a3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3a7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3ab:	68 00 00 f0 3f       	push   0x3ff00000
c000c3b0:	6a 00                	push   0x0
c000c3b2:	e8 f5 ba 01 00       	call   c0027eac <__divdf3>
c000c3b7:	83 c4 10             	add    esp,0x10
c000c3ba:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3be:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3c2:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3c7:	68 23 42 92 0c       	push   0xc924223
c000c3cc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3d0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3d4:	e8 72 b1 01 00       	call   c002754b <__adddf3>
c000c3d9:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3dd:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3e1:	83 c4 20             	add    esp,0x20
c000c3e4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3ec:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3f4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3f7:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3fa:	7d 50                	jge    c000c44c <sinc_hex_vari_process+0x310>
c000c3fc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3ff:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c402:	01 c8                	add    eax,ecx
c000c404:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c407:	99                   	cdq    
c000c408:	f7 f9                	idiv   ecx
c000c40a:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c40e:	7d 0c                	jge    c000c41c <sinc_hex_vari_process+0x2e0>
c000c410:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c413:	85 ff                	test   edi,edi
c000c415:	79 6c                	jns    c000c483 <sinc_hex_vari_process+0x347>
c000c417:	e9 e7 00 00 00       	jmp    c000c503 <sinc_hex_vari_process+0x3c7>
c000c41c:	50                   	push   eax
c000c41d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c421:	56                   	push   esi
c000c422:	53                   	push   ebx
c000c423:	e8 d6 f4 ff ff       	call   c000b8fe <prepare_data>
c000c428:	83 c4 10             	add    esp,0x10
c000c42b:	89 c2                	mov    edx,eax
c000c42d:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c430:	85 c0                	test   eax,eax
c000c432:	0f 85 bf 03 00 00    	jne    c000c7f7 <sinc_hex_vari_process+0x6bb>
c000c438:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c43b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c43e:	01 c8                	add    eax,ecx
c000c440:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c443:	99                   	cdq    
c000c444:	f7 f9                	idiv   ecx
c000c446:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c44a:	7c c4                	jl     c000c410 <sinc_hex_vari_process+0x2d4>
c000c44c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c450:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c454:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c457:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c45a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c45e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c462:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c465:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c468:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c46b:	99                   	cdq    
c000c46c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c46f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c472:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c475:	99                   	cdq    
c000c476:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c479:	31 d2                	xor    edx,edx
c000c47b:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c47e:	e9 74 03 00 00       	jmp    c000c7f7 <sinc_hex_vari_process+0x6bb>
c000c483:	83 ec 0c             	sub    esp,0xc
c000c486:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c489:	e8 9d bd 01 00       	call   c002822b <__floatsidf>
c000c48e:	83 c4 10             	add    esp,0x10
c000c491:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c495:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c499:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c49d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c4a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a9:	e8 9d b0 01 00       	call   c002754b <__adddf3>
c000c4ae:	83 c4 10             	add    esp,0x10
c000c4b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4b5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c9:	e8 7d b0 01 00       	call   c002754b <__adddf3>
c000c4ce:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4d9:	e8 4d bd 01 00       	call   c002822b <__floatsidf>
c000c4de:	83 c4 10             	add    esp,0x10
c000c4e1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4e5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4e9:	52                   	push   edx
c000c4ea:	50                   	push   eax
c000c4eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4f3:	e8 9d bf 01 00       	call   c0028495 <__gedf2>
c000c4f8:	83 c4 10             	add    esp,0x10
c000c4fb:	85 c0                	test   eax,eax
c000c4fd:	0f 89 49 ff ff ff    	jns    c000c44c <sinc_hex_vari_process+0x310>
c000c503:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c507:	0f 8e ef 00 00 00    	jle    c000c5fc <sinc_hex_vari_process+0x4c0>
c000c50d:	83 ec 10             	sub    esp,0x10
c000c510:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c513:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c516:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c519:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c51c:	e8 7b b6 01 00       	call   c0027b9c <__subdf3>
c000c521:	83 c4 18             	add    esp,0x18
c000c524:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c528:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c52c:	52                   	push   edx
c000c52d:	50                   	push   eax
c000c52e:	e8 fd c0 01 00       	call   c0028630 <fabs>
c000c533:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c537:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c53b:	83 c4 10             	add    esp,0x10
c000c53e:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c543:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c548:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c54c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c550:	e8 24 bf 01 00       	call   c0028479 <__gtdf2>
c000c555:	83 c4 10             	add    esp,0x10
c000c558:	85 c0                	test   eax,eax
c000c55a:	0f 8e 9c 00 00 00    	jle    c000c5fc <sinc_hex_vari_process+0x4c0>
c000c560:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c563:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c566:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c56a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c56e:	52                   	push   edx
c000c56f:	50                   	push   eax
c000c570:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c573:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c576:	e8 21 b6 01 00       	call   c0027b9c <__subdf3>
c000c57b:	59                   	pop    ecx
c000c57c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c580:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c584:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c587:	e8 9f bc 01 00       	call   c002822b <__floatsidf>
c000c58c:	83 c4 10             	add    esp,0x10
c000c58f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c593:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c597:	52                   	push   edx
c000c598:	50                   	push   eax
c000c599:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c59d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a1:	e8 22 b6 01 00       	call   c0027bc8 <__muldf3>
c000c5a6:	5f                   	pop    edi
c000c5a7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5ab:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5af:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5b2:	e8 74 bc 01 00       	call   c002822b <__floatsidf>
c000c5b7:	83 c4 10             	add    esp,0x10
c000c5ba:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5be:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5c2:	52                   	push   edx
c000c5c3:	50                   	push   eax
c000c5c4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5cc:	e8 db b8 01 00       	call   c0027eac <__divdf3>
c000c5d1:	83 c4 10             	add    esp,0x10
c000c5d4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5d8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5e4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5ec:	e8 5a af 01 00       	call   c002754b <__adddf3>
c000c5f1:	83 c4 10             	add    esp,0x10
c000c5f4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5fc:	83 ec 0c             	sub    esp,0xc
c000c5ff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c602:	e8 24 bc 01 00       	call   c002822b <__floatsidf>
c000c607:	83 c4 10             	add    esp,0x10
c000c60a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c60e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c622:	e8 70 be 01 00       	call   c0028497 <__ltdf2>
c000c627:	83 c4 10             	add    esp,0x10
c000c62a:	85 c0                	test   eax,eax
c000c62c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c630:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c634:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c638:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c63c:	78 10                	js     c000c64e <sinc_hex_vari_process+0x512>
c000c63e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c642:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c646:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c64a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c64e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c652:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c656:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c65a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c65e:	e8 65 b5 01 00       	call   c0027bc8 <__muldf3>
c000c663:	59                   	pop    ecx
c000c664:	5f                   	pop    edi
c000c665:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c669:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c66d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c671:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c675:	e8 5d f2 ff ff       	call   c000b8d7 <double_to_fp>
c000c67a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67e:	89 c7                	mov    edi,eax
c000c680:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c684:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c688:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c68c:	e8 37 b5 01 00       	call   c0027bc8 <__muldf3>
c000c691:	83 c4 18             	add    esp,0x18
c000c694:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c698:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c69c:	52                   	push   edx
c000c69d:	50                   	push   eax
c000c69e:	e8 34 f2 ff ff       	call   c000b8d7 <double_to_fp>
c000c6a3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c6a6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6aa:	83 c4 0c             	add    esp,0xc
c000c6ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6b0:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6b3:	50                   	push   eax
c000c6b4:	50                   	push   eax
c000c6b5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b8:	e8 6e bb 01 00       	call   c002822b <__floatsidf>
c000c6bd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6c1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6d1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6d5:	e8 d2 b7 01 00       	call   c0027eac <__divdf3>
c000c6da:	83 c4 18             	add    esp,0x18
c000c6dd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6e5:	52                   	push   edx
c000c6e6:	89 fa                	mov    edx,edi
c000c6e8:	50                   	push   eax
c000c6e9:	89 d8                	mov    eax,ebx
c000c6eb:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6ef:	e8 50 de ff ff       	call   c000a544 <calc_output_hex>
c000c6f4:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c700:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c704:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c708:	e8 9f b7 01 00       	call   c0027eac <__divdf3>
c000c70d:	83 c4 10             	add    esp,0x10
c000c710:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c714:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c718:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c71c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c720:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c724:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c728:	e8 1e ae 01 00       	call   c002754b <__adddf3>
c000c72d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c731:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c735:	83 c4 18             	add    esp,0x18
c000c738:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c73c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c740:	e8 0b bf 01 00       	call   c0028650 <lrint>
c000c745:	83 ec 0c             	sub    esp,0xc
c000c748:	50                   	push   eax
c000c749:	e8 dd ba 01 00       	call   c002822b <__floatsidf>
c000c74e:	83 c4 10             	add    esp,0x10
c000c751:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c755:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c759:	52                   	push   edx
c000c75a:	50                   	push   eax
c000c75b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c75f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c763:	e8 34 b4 01 00       	call   c0027b9c <__subdf3>
c000c768:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c76c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c770:	83 c4 20             	add    esp,0x20
c000c773:	6a 00                	push   0x0
c000c775:	6a 00                	push   0x0
c000c777:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c77b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c77f:	e8 13 bd 01 00       	call   c0028497 <__ltdf2>
c000c784:	83 c4 10             	add    esp,0x10
c000c787:	85 c0                	test   eax,eax
c000c789:	79 20                	jns    c000c7ab <sinc_hex_vari_process+0x66f>
c000c78b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c78f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c793:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c797:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c79b:	e8 ab ad 01 00       	call   c002754b <__adddf3>
c000c7a0:	83 c4 10             	add    esp,0x10
c000c7a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c7a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7ab:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7ae:	83 ec 10             	sub    esp,0x10
c000c7b1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7b5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7c0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c8:	e8 cf b3 01 00       	call   c0027b9c <__subdf3>
c000c7cd:	83 c4 18             	add    esp,0x18
c000c7d0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7d4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7d8:	52                   	push   edx
c000c7d9:	50                   	push   eax
c000c7da:	e8 71 be 01 00       	call   c0028650 <lrint>
c000c7df:	0f af f8             	imul   edi,eax
c000c7e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7e6:	83 c4 10             	add    esp,0x10
c000c7e9:	01 f8                	add    eax,edi
c000c7eb:	99                   	cdq    
c000c7ec:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7ef:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7f2:	e9 fd fb ff ff       	jmp    c000c3f4 <sinc_hex_vari_process+0x2b8>
c000c7f7:	83 c4 4c             	add    esp,0x4c
c000c7fa:	89 d0                	mov    eax,edx
c000c7fc:	5b                   	pop    ebx
c000c7fd:	5e                   	pop    esi
c000c7fe:	5f                   	pop    edi
c000c7ff:	5d                   	pop    ebp
c000c800:	c3                   	ret    

c000c801 <sinc_quad_vari_process>:
c000c801:	55                   	push   ebp
c000c802:	ba 05 00 00 00       	mov    edx,0x5
c000c807:	57                   	push   edi
c000c808:	56                   	push   esi
c000c809:	53                   	push   ebx
c000c80a:	83 ec 4c             	sub    esp,0x4c
c000c80d:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c811:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c815:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c818:	85 db                	test   ebx,ebx
c000c81a:	0f 84 9c 06 00 00    	je     c000cebc <sinc_quad_vari_process+0x6bb>
c000c820:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c823:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c826:	0f af c7             	imul   eax,edi
c000c829:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c82c:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c82f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c836:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c83d:	0f af c7             	imul   eax,edi
c000c840:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c843:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c846:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c849:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c84d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c851:	68 00 00 70 3f       	push   0x3f700000
c000c856:	6a 00                	push   0x0
c000c858:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c85c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c860:	e8 32 bc 01 00       	call   c0028497 <__ltdf2>
c000c865:	83 c4 10             	add    esp,0x10
c000c868:	ba 16 00 00 00       	mov    edx,0x16
c000c86d:	85 c0                	test   eax,eax
c000c86f:	0f 88 47 06 00 00    	js     c000cebc <sinc_quad_vari_process+0x6bb>
c000c875:	68 00 00 70 40       	push   0x40700000
c000c87a:	6a 00                	push   0x0
c000c87c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c880:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c884:	e8 f0 bb 01 00       	call   c0028479 <__gtdf2>
c000c889:	83 c4 10             	add    esp,0x10
c000c88c:	ba 16 00 00 00       	mov    edx,0x16
c000c891:	85 c0                	test   eax,eax
c000c893:	0f 8f 23 06 00 00    	jg     c000cebc <sinc_quad_vari_process+0x6bb>
c000c899:	83 ec 0c             	sub    esp,0xc
c000c89c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c89f:	e8 87 b9 01 00       	call   c002822b <__floatsidf>
c000c8a4:	83 c4 10             	add    esp,0x10
c000c8a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8af:	68 00 00 00 40       	push   0x40000000
c000c8b4:	6a 00                	push   0x0
c000c8b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8be:	e8 88 ac 01 00       	call   c002754b <__adddf3>
c000c8c3:	59                   	pop    ecx
c000c8c4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8c8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8cc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8cf:	e8 57 b9 01 00       	call   c002822b <__floatsidf>
c000c8d4:	83 c4 10             	add    esp,0x10
c000c8d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8db:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8df:	52                   	push   edx
c000c8e0:	50                   	push   eax
c000c8e1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e9:	e8 be b5 01 00       	call   c0027eac <__divdf3>
c000c8ee:	83 c4 10             	add    esp,0x10
c000c8f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8fc:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c903:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c907:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c913:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c917:	e8 5d bb 01 00       	call   c0028479 <__gtdf2>
c000c91c:	83 c4 10             	add    esp,0x10
c000c91f:	85 c0                	test   eax,eax
c000c921:	7e 2d                	jle    c000c950 <sinc_quad_vari_process+0x14f>
c000c923:	68 00 00 f0 3f       	push   0x3ff00000
c000c928:	6a 00                	push   0x0
c000c92a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c932:	e8 60 bb 01 00       	call   c0028497 <__ltdf2>
c000c937:	83 c4 10             	add    esp,0x10
c000c93a:	85 c0                	test   eax,eax
c000c93c:	79 4d                	jns    c000c98b <sinc_quad_vari_process+0x18a>
c000c93e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c942:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c946:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c94a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c94e:	eb 1b                	jmp    c000c96b <sinc_quad_vari_process+0x16a>
c000c950:	68 00 00 f0 3f       	push   0x3ff00000
c000c955:	6a 00                	push   0x0
c000c957:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c95b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c95f:	e8 33 bb 01 00       	call   c0028497 <__ltdf2>
c000c964:	83 c4 10             	add    esp,0x10
c000c967:	85 c0                	test   eax,eax
c000c969:	79 20                	jns    c000c98b <sinc_quad_vari_process+0x18a>
c000c96b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c96f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c973:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c977:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c97b:	e8 2c b5 01 00       	call   c0027eac <__divdf3>
c000c980:	83 c4 10             	add    esp,0x10
c000c983:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c987:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c98b:	50                   	push   eax
c000c98c:	50                   	push   eax
c000c98d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c991:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c995:	e8 b6 bc 01 00       	call   c0028650 <lrint>
c000c99a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c99d:	40                   	inc    eax
c000c99e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9a2:	0f af c7             	imul   eax,edi
c000c9a5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9ac:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9b0:	58                   	pop    eax
c000c9b1:	5a                   	pop    edx
c000c9b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ba:	e8 91 bc 01 00       	call   c0028650 <lrint>
c000c9bf:	83 ec 0c             	sub    esp,0xc
c000c9c2:	50                   	push   eax
c000c9c3:	e8 63 b8 01 00       	call   c002822b <__floatsidf>
c000c9c8:	83 c4 10             	add    esp,0x10
c000c9cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9cf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9d3:	52                   	push   edx
c000c9d4:	50                   	push   eax
c000c9d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9dd:	e8 ba b1 01 00       	call   c0027b9c <__subdf3>
c000c9e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9ea:	83 c4 20             	add    esp,0x20
c000c9ed:	6a 00                	push   0x0
c000c9ef:	6a 00                	push   0x0
c000c9f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f9:	e8 99 ba 01 00       	call   c0028497 <__ltdf2>
c000c9fe:	83 c4 10             	add    esp,0x10
c000ca01:	85 c0                	test   eax,eax
c000ca03:	79 1f                	jns    c000ca24 <sinc_quad_vari_process+0x223>
c000ca05:	68 00 00 f0 3f       	push   0x3ff00000
c000ca0a:	6a 00                	push   0x0
c000ca0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca14:	e8 32 ab 01 00       	call   c002754b <__adddf3>
c000ca19:	83 c4 10             	add    esp,0x10
c000ca1c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca24:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca27:	83 ec 10             	sub    esp,0x10
c000ca2a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca2e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca41:	e8 56 b1 01 00       	call   c0027b9c <__subdf3>
c000ca46:	83 c4 18             	add    esp,0x18
c000ca49:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca4d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca51:	52                   	push   edx
c000ca52:	50                   	push   eax
c000ca53:	e8 f8 bb 01 00       	call   c0028650 <lrint>
c000ca58:	0f af f8             	imul   edi,eax
c000ca5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca5f:	01 f8                	add    eax,edi
c000ca61:	99                   	cdq    
c000ca62:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca65:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca68:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca6c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca70:	68 00 00 f0 3f       	push   0x3ff00000
c000ca75:	6a 00                	push   0x0
c000ca77:	e8 30 b4 01 00       	call   c0027eac <__divdf3>
c000ca7c:	83 c4 10             	add    esp,0x10
c000ca7f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca83:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca87:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca8c:	68 23 42 92 0c       	push   0xc924223
c000ca91:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca95:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca99:	e8 ad aa 01 00       	call   c002754b <__adddf3>
c000ca9e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000caa2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000caa6:	83 c4 20             	add    esp,0x20
c000caa9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cab1:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cab9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cabc:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cabf:	7d 50                	jge    c000cb11 <sinc_quad_vari_process+0x310>
c000cac1:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cac4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cac7:	01 c8                	add    eax,ecx
c000cac9:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cacc:	99                   	cdq    
c000cacd:	f7 f9                	idiv   ecx
c000cacf:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cad3:	7d 0c                	jge    c000cae1 <sinc_quad_vari_process+0x2e0>
c000cad5:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cad8:	85 ff                	test   edi,edi
c000cada:	79 6c                	jns    c000cb48 <sinc_quad_vari_process+0x347>
c000cadc:	e9 e7 00 00 00       	jmp    c000cbc8 <sinc_quad_vari_process+0x3c7>
c000cae1:	50                   	push   eax
c000cae2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cae6:	56                   	push   esi
c000cae7:	53                   	push   ebx
c000cae8:	e8 11 ee ff ff       	call   c000b8fe <prepare_data>
c000caed:	83 c4 10             	add    esp,0x10
c000caf0:	89 c2                	mov    edx,eax
c000caf2:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000caf5:	85 c0                	test   eax,eax
c000caf7:	0f 85 bf 03 00 00    	jne    c000cebc <sinc_quad_vari_process+0x6bb>
c000cafd:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cb00:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cb03:	01 c8                	add    eax,ecx
c000cb05:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb08:	99                   	cdq    
c000cb09:	f7 f9                	idiv   ecx
c000cb0b:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb0f:	7c c4                	jl     c000cad5 <sinc_quad_vari_process+0x2d4>
c000cb11:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb15:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb19:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb1c:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb23:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb27:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb2a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb2d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb30:	99                   	cdq    
c000cb31:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb34:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb37:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb3a:	99                   	cdq    
c000cb3b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb3e:	31 d2                	xor    edx,edx
c000cb40:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb43:	e9 74 03 00 00       	jmp    c000cebc <sinc_quad_vari_process+0x6bb>
c000cb48:	83 ec 0c             	sub    esp,0xc
c000cb4b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb4e:	e8 d8 b6 01 00       	call   c002822b <__floatsidf>
c000cb53:	83 c4 10             	add    esp,0x10
c000cb56:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb5a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb6a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb6e:	e8 d8 a9 01 00       	call   c002754b <__adddf3>
c000cb73:	83 c4 10             	add    esp,0x10
c000cb76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb7a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb7e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb82:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb86:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb8a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb8e:	e8 b8 a9 01 00       	call   c002754b <__adddf3>
c000cb93:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb96:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb9a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb9e:	e8 88 b6 01 00       	call   c002822b <__floatsidf>
c000cba3:	83 c4 10             	add    esp,0x10
c000cba6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbaa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbae:	52                   	push   edx
c000cbaf:	50                   	push   eax
c000cbb0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb8:	e8 d8 b8 01 00       	call   c0028495 <__gedf2>
c000cbbd:	83 c4 10             	add    esp,0x10
c000cbc0:	85 c0                	test   eax,eax
c000cbc2:	0f 89 49 ff ff ff    	jns    c000cb11 <sinc_quad_vari_process+0x310>
c000cbc8:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbcc:	0f 8e ef 00 00 00    	jle    c000ccc1 <sinc_quad_vari_process+0x4c0>
c000cbd2:	83 ec 10             	sub    esp,0x10
c000cbd5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbd8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbdb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbde:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbe1:	e8 b6 af 01 00       	call   c0027b9c <__subdf3>
c000cbe6:	83 c4 18             	add    esp,0x18
c000cbe9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbf1:	52                   	push   edx
c000cbf2:	50                   	push   eax
c000cbf3:	e8 38 ba 01 00       	call   c0028630 <fabs>
c000cbf8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbfc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cc00:	83 c4 10             	add    esp,0x10
c000cc03:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc08:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc0d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc11:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc15:	e8 5f b8 01 00       	call   c0028479 <__gtdf2>
c000cc1a:	83 c4 10             	add    esp,0x10
c000cc1d:	85 c0                	test   eax,eax
c000cc1f:	0f 8e 9c 00 00 00    	jle    c000ccc1 <sinc_quad_vari_process+0x4c0>
c000cc25:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc28:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc2b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc2f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc33:	52                   	push   edx
c000cc34:	50                   	push   eax
c000cc35:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc38:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc3b:	e8 5c af 01 00       	call   c0027b9c <__subdf3>
c000cc40:	59                   	pop    ecx
c000cc41:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc45:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc49:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc4c:	e8 da b5 01 00       	call   c002822b <__floatsidf>
c000cc51:	83 c4 10             	add    esp,0x10
c000cc54:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc58:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc5c:	52                   	push   edx
c000cc5d:	50                   	push   eax
c000cc5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc66:	e8 5d af 01 00       	call   c0027bc8 <__muldf3>
c000cc6b:	5f                   	pop    edi
c000cc6c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc70:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc74:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc77:	e8 af b5 01 00       	call   c002822b <__floatsidf>
c000cc7c:	83 c4 10             	add    esp,0x10
c000cc7f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc83:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc87:	52                   	push   edx
c000cc88:	50                   	push   eax
c000cc89:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc8d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc91:	e8 16 b2 01 00       	call   c0027eac <__divdf3>
c000cc96:	83 c4 10             	add    esp,0x10
c000cc99:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc9d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cca1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccb1:	e8 95 a8 01 00       	call   c002754b <__adddf3>
c000ccb6:	83 c4 10             	add    esp,0x10
c000ccb9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccbd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccc1:	83 ec 0c             	sub    esp,0xc
c000ccc4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccc7:	e8 5f b5 01 00       	call   c002822b <__floatsidf>
c000cccc:	83 c4 10             	add    esp,0x10
c000cccf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccd3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cce3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cce7:	e8 ab b7 01 00       	call   c0028497 <__ltdf2>
c000ccec:	83 c4 10             	add    esp,0x10
c000ccef:	85 c0                	test   eax,eax
c000ccf1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccf5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccf9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccfd:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000cd01:	78 10                	js     c000cd13 <sinc_quad_vari_process+0x512>
c000cd03:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cd07:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd0f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd17:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd1b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd23:	e8 a0 ae 01 00       	call   c0027bc8 <__muldf3>
c000cd28:	59                   	pop    ecx
c000cd29:	5f                   	pop    edi
c000cd2a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd2e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd32:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd36:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd3a:	e8 98 eb ff ff       	call   c000b8d7 <double_to_fp>
c000cd3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd43:	89 c7                	mov    edi,eax
c000cd45:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd49:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd4d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd51:	e8 72 ae 01 00       	call   c0027bc8 <__muldf3>
c000cd56:	83 c4 18             	add    esp,0x18
c000cd59:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd5d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd61:	52                   	push   edx
c000cd62:	50                   	push   eax
c000cd63:	e8 6f eb ff ff       	call   c000b8d7 <double_to_fp>
c000cd68:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd6b:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd6f:	83 c4 0c             	add    esp,0xc
c000cd72:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd75:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd78:	50                   	push   eax
c000cd79:	50                   	push   eax
c000cd7a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd7d:	e8 a9 b4 01 00       	call   c002822b <__floatsidf>
c000cd82:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd86:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd92:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd96:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd9a:	e8 0d b1 01 00       	call   c0027eac <__divdf3>
c000cd9f:	83 c4 18             	add    esp,0x18
c000cda2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cda6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdaa:	52                   	push   edx
c000cdab:	89 fa                	mov    edx,edi
c000cdad:	50                   	push   eax
c000cdae:	89 d8                	mov    eax,ebx
c000cdb0:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdb4:	e8 a5 d1 ff ff       	call   c0009f5e <calc_output_quad>
c000cdb9:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdbd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdcd:	e8 da b0 01 00       	call   c0027eac <__divdf3>
c000cdd2:	83 c4 10             	add    esp,0x10
c000cdd5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdd9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cddd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cde1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cde5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cded:	e8 59 a7 01 00       	call   c002754b <__adddf3>
c000cdf2:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdf6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdfa:	83 c4 18             	add    esp,0x18
c000cdfd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce05:	e8 46 b8 01 00       	call   c0028650 <lrint>
c000ce0a:	83 ec 0c             	sub    esp,0xc
c000ce0d:	50                   	push   eax
c000ce0e:	e8 18 b4 01 00       	call   c002822b <__floatsidf>
c000ce13:	83 c4 10             	add    esp,0x10
c000ce16:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce1a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce1e:	52                   	push   edx
c000ce1f:	50                   	push   eax
c000ce20:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce24:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce28:	e8 6f ad 01 00       	call   c0027b9c <__subdf3>
c000ce2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce31:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce35:	83 c4 20             	add    esp,0x20
c000ce38:	6a 00                	push   0x0
c000ce3a:	6a 00                	push   0x0
c000ce3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce44:	e8 4e b6 01 00       	call   c0028497 <__ltdf2>
c000ce49:	83 c4 10             	add    esp,0x10
c000ce4c:	85 c0                	test   eax,eax
c000ce4e:	79 20                	jns    c000ce70 <sinc_quad_vari_process+0x66f>
c000ce50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce60:	e8 e6 a6 01 00       	call   c002754b <__adddf3>
c000ce65:	83 c4 10             	add    esp,0x10
c000ce68:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce6c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce70:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce73:	83 ec 10             	sub    esp,0x10
c000ce76:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce7a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce7d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce85:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce89:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce8d:	e8 0a ad 01 00       	call   c0027b9c <__subdf3>
c000ce92:	83 c4 18             	add    esp,0x18
c000ce95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce9d:	52                   	push   edx
c000ce9e:	50                   	push   eax
c000ce9f:	e8 ac b7 01 00       	call   c0028650 <lrint>
c000cea4:	0f af f8             	imul   edi,eax
c000cea7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ceab:	83 c4 10             	add    esp,0x10
c000ceae:	01 f8                	add    eax,edi
c000ceb0:	99                   	cdq    
c000ceb1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ceb4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ceb7:	e9 fd fb ff ff       	jmp    c000cab9 <sinc_quad_vari_process+0x2b8>
c000cebc:	83 c4 4c             	add    esp,0x4c
c000cebf:	89 d0                	mov    eax,edx
c000cec1:	5b                   	pop    ebx
c000cec2:	5e                   	pop    esi
c000cec3:	5f                   	pop    edi
c000cec4:	5d                   	pop    ebp
c000cec5:	c3                   	ret    

c000cec6 <sinc_stereo_vari_process>:
c000cec6:	55                   	push   ebp
c000cec7:	ba 05 00 00 00       	mov    edx,0x5
c000cecc:	57                   	push   edi
c000cecd:	56                   	push   esi
c000cece:	53                   	push   ebx
c000cecf:	83 ec 4c             	sub    esp,0x4c
c000ced2:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ced6:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ceda:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000cedd:	85 db                	test   ebx,ebx
c000cedf:	0f 84 9c 06 00 00    	je     c000d581 <sinc_stereo_vari_process+0x6bb>
c000cee5:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cee8:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ceeb:	0f af c7             	imul   eax,edi
c000ceee:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cef1:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cef4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cefb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cf02:	0f af c7             	imul   eax,edi
c000cf05:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf08:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf0b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf16:	68 00 00 70 3f       	push   0x3f700000
c000cf1b:	6a 00                	push   0x0
c000cf1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf25:	e8 6d b5 01 00       	call   c0028497 <__ltdf2>
c000cf2a:	83 c4 10             	add    esp,0x10
c000cf2d:	ba 16 00 00 00       	mov    edx,0x16
c000cf32:	85 c0                	test   eax,eax
c000cf34:	0f 88 47 06 00 00    	js     c000d581 <sinc_stereo_vari_process+0x6bb>
c000cf3a:	68 00 00 70 40       	push   0x40700000
c000cf3f:	6a 00                	push   0x0
c000cf41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf49:	e8 2b b5 01 00       	call   c0028479 <__gtdf2>
c000cf4e:	83 c4 10             	add    esp,0x10
c000cf51:	ba 16 00 00 00       	mov    edx,0x16
c000cf56:	85 c0                	test   eax,eax
c000cf58:	0f 8f 23 06 00 00    	jg     c000d581 <sinc_stereo_vari_process+0x6bb>
c000cf5e:	83 ec 0c             	sub    esp,0xc
c000cf61:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf64:	e8 c2 b2 01 00       	call   c002822b <__floatsidf>
c000cf69:	83 c4 10             	add    esp,0x10
c000cf6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf74:	68 00 00 00 40       	push   0x40000000
c000cf79:	6a 00                	push   0x0
c000cf7b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf83:	e8 c3 a5 01 00       	call   c002754b <__adddf3>
c000cf88:	59                   	pop    ecx
c000cf89:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf8d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf91:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf94:	e8 92 b2 01 00       	call   c002822b <__floatsidf>
c000cf99:	83 c4 10             	add    esp,0x10
c000cf9c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfa0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfa4:	52                   	push   edx
c000cfa5:	50                   	push   eax
c000cfa6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfaa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfae:	e8 f9 ae 01 00       	call   c0027eac <__divdf3>
c000cfb3:	83 c4 10             	add    esp,0x10
c000cfb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfbe:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfc1:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfc4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfc8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfdc:	e8 98 b4 01 00       	call   c0028479 <__gtdf2>
c000cfe1:	83 c4 10             	add    esp,0x10
c000cfe4:	85 c0                	test   eax,eax
c000cfe6:	7e 2d                	jle    c000d015 <sinc_stereo_vari_process+0x14f>
c000cfe8:	68 00 00 f0 3f       	push   0x3ff00000
c000cfed:	6a 00                	push   0x0
c000cfef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cff3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cff7:	e8 9b b4 01 00       	call   c0028497 <__ltdf2>
c000cffc:	83 c4 10             	add    esp,0x10
c000cfff:	85 c0                	test   eax,eax
c000d001:	79 4d                	jns    c000d050 <sinc_stereo_vari_process+0x18a>
c000d003:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d007:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d00b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d00f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d013:	eb 1b                	jmp    c000d030 <sinc_stereo_vari_process+0x16a>
c000d015:	68 00 00 f0 3f       	push   0x3ff00000
c000d01a:	6a 00                	push   0x0
c000d01c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d020:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d024:	e8 6e b4 01 00       	call   c0028497 <__ltdf2>
c000d029:	83 c4 10             	add    esp,0x10
c000d02c:	85 c0                	test   eax,eax
c000d02e:	79 20                	jns    c000d050 <sinc_stereo_vari_process+0x18a>
c000d030:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d034:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d038:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d03c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d040:	e8 67 ae 01 00       	call   c0027eac <__divdf3>
c000d045:	83 c4 10             	add    esp,0x10
c000d048:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d04c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d050:	50                   	push   eax
c000d051:	50                   	push   eax
c000d052:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d056:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d05a:	e8 f1 b5 01 00       	call   c0028650 <lrint>
c000d05f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d062:	40                   	inc    eax
c000d063:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d067:	0f af c7             	imul   eax,edi
c000d06a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d06e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d071:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d075:	58                   	pop    eax
c000d076:	5a                   	pop    edx
c000d077:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d07b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d07f:	e8 cc b5 01 00       	call   c0028650 <lrint>
c000d084:	83 ec 0c             	sub    esp,0xc
c000d087:	50                   	push   eax
c000d088:	e8 9e b1 01 00       	call   c002822b <__floatsidf>
c000d08d:	83 c4 10             	add    esp,0x10
c000d090:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d094:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d098:	52                   	push   edx
c000d099:	50                   	push   eax
c000d09a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d09e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0a2:	e8 f5 aa 01 00       	call   c0027b9c <__subdf3>
c000d0a7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0ab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0af:	83 c4 20             	add    esp,0x20
c000d0b2:	6a 00                	push   0x0
c000d0b4:	6a 00                	push   0x0
c000d0b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0be:	e8 d4 b3 01 00       	call   c0028497 <__ltdf2>
c000d0c3:	83 c4 10             	add    esp,0x10
c000d0c6:	85 c0                	test   eax,eax
c000d0c8:	79 1f                	jns    c000d0e9 <sinc_stereo_vari_process+0x223>
c000d0ca:	68 00 00 f0 3f       	push   0x3ff00000
c000d0cf:	6a 00                	push   0x0
c000d0d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d9:	e8 6d a4 01 00       	call   c002754b <__adddf3>
c000d0de:	83 c4 10             	add    esp,0x10
c000d0e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0e5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0e9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0ec:	83 ec 10             	sub    esp,0x10
c000d0ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0f3:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d102:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d106:	e8 91 aa 01 00       	call   c0027b9c <__subdf3>
c000d10b:	83 c4 18             	add    esp,0x18
c000d10e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d112:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d116:	52                   	push   edx
c000d117:	50                   	push   eax
c000d118:	e8 33 b5 01 00       	call   c0028650 <lrint>
c000d11d:	0f af f8             	imul   edi,eax
c000d120:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d124:	01 f8                	add    eax,edi
c000d126:	99                   	cdq    
c000d127:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d12a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d12d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d131:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d135:	68 00 00 f0 3f       	push   0x3ff00000
c000d13a:	6a 00                	push   0x0
c000d13c:	e8 6b ad 01 00       	call   c0027eac <__divdf3>
c000d141:	83 c4 10             	add    esp,0x10
c000d144:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d148:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d14c:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d151:	68 23 42 92 0c       	push   0xc924223
c000d156:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d15a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d15e:	e8 e8 a3 01 00       	call   c002754b <__adddf3>
c000d163:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d167:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d16b:	83 c4 20             	add    esp,0x20
c000d16e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d176:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d17e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d181:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d184:	7d 50                	jge    c000d1d6 <sinc_stereo_vari_process+0x310>
c000d186:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d189:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d18c:	01 c8                	add    eax,ecx
c000d18e:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d191:	99                   	cdq    
c000d192:	f7 f9                	idiv   ecx
c000d194:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d198:	7d 0c                	jge    c000d1a6 <sinc_stereo_vari_process+0x2e0>
c000d19a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d19d:	85 ff                	test   edi,edi
c000d19f:	79 6c                	jns    c000d20d <sinc_stereo_vari_process+0x347>
c000d1a1:	e9 e7 00 00 00       	jmp    c000d28d <sinc_stereo_vari_process+0x3c7>
c000d1a6:	50                   	push   eax
c000d1a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1ab:	56                   	push   esi
c000d1ac:	53                   	push   ebx
c000d1ad:	e8 4c e7 ff ff       	call   c000b8fe <prepare_data>
c000d1b2:	83 c4 10             	add    esp,0x10
c000d1b5:	89 c2                	mov    edx,eax
c000d1b7:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1ba:	85 c0                	test   eax,eax
c000d1bc:	0f 85 bf 03 00 00    	jne    c000d581 <sinc_stereo_vari_process+0x6bb>
c000d1c2:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1c5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1c8:	01 c8                	add    eax,ecx
c000d1ca:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1cd:	99                   	cdq    
c000d1ce:	f7 f9                	idiv   ecx
c000d1d0:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1d4:	7c c4                	jl     c000d19a <sinc_stereo_vari_process+0x2d4>
c000d1d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1de:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1e1:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1ec:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1ef:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1f2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1f5:	99                   	cdq    
c000d1f6:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1f9:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1fc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1ff:	99                   	cdq    
c000d200:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d203:	31 d2                	xor    edx,edx
c000d205:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d208:	e9 74 03 00 00       	jmp    c000d581 <sinc_stereo_vari_process+0x6bb>
c000d20d:	83 ec 0c             	sub    esp,0xc
c000d210:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d213:	e8 13 b0 01 00       	call   c002822b <__floatsidf>
c000d218:	83 c4 10             	add    esp,0x10
c000d21b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d21f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d223:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d227:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d22b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d233:	e8 13 a3 01 00       	call   c002754b <__adddf3>
c000d238:	83 c4 10             	add    esp,0x10
c000d23b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d23f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d243:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d247:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d24b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d253:	e8 f3 a2 01 00       	call   c002754b <__adddf3>
c000d258:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d25b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d25f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d263:	e8 c3 af 01 00       	call   c002822b <__floatsidf>
c000d268:	83 c4 10             	add    esp,0x10
c000d26b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d26f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d273:	52                   	push   edx
c000d274:	50                   	push   eax
c000d275:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d279:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d27d:	e8 13 b2 01 00       	call   c0028495 <__gedf2>
c000d282:	83 c4 10             	add    esp,0x10
c000d285:	85 c0                	test   eax,eax
c000d287:	0f 89 49 ff ff ff    	jns    c000d1d6 <sinc_stereo_vari_process+0x310>
c000d28d:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d291:	0f 8e ef 00 00 00    	jle    c000d386 <sinc_stereo_vari_process+0x4c0>
c000d297:	83 ec 10             	sub    esp,0x10
c000d29a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d29d:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2a0:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d2a3:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d2a6:	e8 f1 a8 01 00       	call   c0027b9c <__subdf3>
c000d2ab:	83 c4 18             	add    esp,0x18
c000d2ae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2b2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2b6:	52                   	push   edx
c000d2b7:	50                   	push   eax
c000d2b8:	e8 73 b3 01 00       	call   c0028630 <fabs>
c000d2bd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2c1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2c5:	83 c4 10             	add    esp,0x10
c000d2c8:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2cd:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2d2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2d6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2da:	e8 9a b1 01 00       	call   c0028479 <__gtdf2>
c000d2df:	83 c4 10             	add    esp,0x10
c000d2e2:	85 c0                	test   eax,eax
c000d2e4:	0f 8e 9c 00 00 00    	jle    c000d386 <sinc_stereo_vari_process+0x4c0>
c000d2ea:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2ed:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2f4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2f8:	52                   	push   edx
c000d2f9:	50                   	push   eax
c000d2fa:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2fd:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d300:	e8 97 a8 01 00       	call   c0027b9c <__subdf3>
c000d305:	59                   	pop    ecx
c000d306:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d30a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d30e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d311:	e8 15 af 01 00       	call   c002822b <__floatsidf>
c000d316:	83 c4 10             	add    esp,0x10
c000d319:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d31d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d321:	52                   	push   edx
c000d322:	50                   	push   eax
c000d323:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d327:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d32b:	e8 98 a8 01 00       	call   c0027bc8 <__muldf3>
c000d330:	5f                   	pop    edi
c000d331:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d335:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d339:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d33c:	e8 ea ae 01 00       	call   c002822b <__floatsidf>
c000d341:	83 c4 10             	add    esp,0x10
c000d344:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d348:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d34c:	52                   	push   edx
c000d34d:	50                   	push   eax
c000d34e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d352:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d356:	e8 51 ab 01 00       	call   c0027eac <__divdf3>
c000d35b:	83 c4 10             	add    esp,0x10
c000d35e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d362:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d366:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d36a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d36e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d372:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d376:	e8 d0 a1 01 00       	call   c002754b <__adddf3>
c000d37b:	83 c4 10             	add    esp,0x10
c000d37e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d382:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d386:	83 ec 0c             	sub    esp,0xc
c000d389:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d38c:	e8 9a ae 01 00       	call   c002822b <__floatsidf>
c000d391:	83 c4 10             	add    esp,0x10
c000d394:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d398:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3ac:	e8 e6 b0 01 00       	call   c0028497 <__ltdf2>
c000d3b1:	83 c4 10             	add    esp,0x10
c000d3b4:	85 c0                	test   eax,eax
c000d3b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3ba:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3be:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3c2:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3c6:	78 10                	js     c000d3d8 <sinc_stereo_vari_process+0x512>
c000d3c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3d4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e8:	e8 db a7 01 00       	call   c0027bc8 <__muldf3>
c000d3ed:	59                   	pop    ecx
c000d3ee:	5f                   	pop    edi
c000d3ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3f7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3ff:	e8 d3 e4 ff ff       	call   c000b8d7 <double_to_fp>
c000d404:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d408:	89 c7                	mov    edi,eax
c000d40a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d40e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d412:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d416:	e8 ad a7 01 00       	call   c0027bc8 <__muldf3>
c000d41b:	83 c4 18             	add    esp,0x18
c000d41e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d422:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d426:	52                   	push   edx
c000d427:	50                   	push   eax
c000d428:	e8 aa e4 ff ff       	call   c000b8d7 <double_to_fp>
c000d42d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d430:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d434:	83 c4 0c             	add    esp,0xc
c000d437:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d43a:	8d 04 90             	lea    eax,[eax+edx*4]
c000d43d:	50                   	push   eax
c000d43e:	50                   	push   eax
c000d43f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d442:	e8 e4 ad 01 00       	call   c002822b <__floatsidf>
c000d447:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d44b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d44f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d457:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d45b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d45f:	e8 48 aa 01 00       	call   c0027eac <__divdf3>
c000d464:	83 c4 18             	add    esp,0x18
c000d467:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d46b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d46f:	52                   	push   edx
c000d470:	89 fa                	mov    edx,edi
c000d472:	50                   	push   eax
c000d473:	89 d8                	mov    eax,ebx
c000d475:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d479:	e8 02 c7 ff ff       	call   c0009b80 <calc_output_stereo>
c000d47e:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d482:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d486:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d48a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d48e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d492:	e8 15 aa 01 00       	call   c0027eac <__divdf3>
c000d497:	83 c4 10             	add    esp,0x10
c000d49a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d49e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d4a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4aa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ae:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4b2:	e8 94 a0 01 00       	call   c002754b <__adddf3>
c000d4b7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4bb:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4bf:	83 c4 18             	add    esp,0x18
c000d4c2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4ca:	e8 81 b1 01 00       	call   c0028650 <lrint>
c000d4cf:	83 ec 0c             	sub    esp,0xc
c000d4d2:	50                   	push   eax
c000d4d3:	e8 53 ad 01 00       	call   c002822b <__floatsidf>
c000d4d8:	83 c4 10             	add    esp,0x10
c000d4db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4df:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4e3:	52                   	push   edx
c000d4e4:	50                   	push   eax
c000d4e5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ed:	e8 aa a6 01 00       	call   c0027b9c <__subdf3>
c000d4f2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4f6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4fa:	83 c4 20             	add    esp,0x20
c000d4fd:	6a 00                	push   0x0
c000d4ff:	6a 00                	push   0x0
c000d501:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d505:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d509:	e8 89 af 01 00       	call   c0028497 <__ltdf2>
c000d50e:	83 c4 10             	add    esp,0x10
c000d511:	85 c0                	test   eax,eax
c000d513:	79 20                	jns    c000d535 <sinc_stereo_vari_process+0x66f>
c000d515:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d519:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d51d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d521:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d525:	e8 21 a0 01 00       	call   c002754b <__adddf3>
c000d52a:	83 c4 10             	add    esp,0x10
c000d52d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d531:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d535:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d538:	83 ec 10             	sub    esp,0x10
c000d53b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d53f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d542:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d546:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d54a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d54e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d552:	e8 45 a6 01 00       	call   c0027b9c <__subdf3>
c000d557:	83 c4 18             	add    esp,0x18
c000d55a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d55e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d562:	52                   	push   edx
c000d563:	50                   	push   eax
c000d564:	e8 e7 b0 01 00       	call   c0028650 <lrint>
c000d569:	0f af f8             	imul   edi,eax
c000d56c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d570:	83 c4 10             	add    esp,0x10
c000d573:	01 f8                	add    eax,edi
c000d575:	99                   	cdq    
c000d576:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d579:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d57c:	e9 fd fb ff ff       	jmp    c000d17e <sinc_stereo_vari_process+0x2b8>
c000d581:	83 c4 4c             	add    esp,0x4c
c000d584:	89 d0                	mov    eax,edx
c000d586:	5b                   	pop    ebx
c000d587:	5e                   	pop    esi
c000d588:	5f                   	pop    edi
c000d589:	5d                   	pop    ebp
c000d58a:	c3                   	ret    

c000d58b <sinc_mono_vari_process>:
c000d58b:	55                   	push   ebp
c000d58c:	ba 05 00 00 00       	mov    edx,0x5
c000d591:	57                   	push   edi
c000d592:	56                   	push   esi
c000d593:	53                   	push   ebx
c000d594:	83 ec 4c             	sub    esp,0x4c
c000d597:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d59b:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d59f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d5a2:	85 db                	test   ebx,ebx
c000d5a4:	0f 84 c1 06 00 00    	je     c000dc6b <sinc_mono_vari_process+0x6e0>
c000d5aa:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5ad:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5b0:	0f af c7             	imul   eax,edi
c000d5b3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5b6:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5b9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5c0:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5c7:	0f af c7             	imul   eax,edi
c000d5ca:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5cd:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5d1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5d4:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5d6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5de:	68 00 00 70 3f       	push   0x3f700000
c000d5e3:	6a 00                	push   0x0
c000d5e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ed:	e8 a5 ae 01 00       	call   c0028497 <__ltdf2>
c000d5f2:	83 c4 10             	add    esp,0x10
c000d5f5:	ba 16 00 00 00       	mov    edx,0x16
c000d5fa:	85 c0                	test   eax,eax
c000d5fc:	0f 88 69 06 00 00    	js     c000dc6b <sinc_mono_vari_process+0x6e0>
c000d602:	68 00 00 70 40       	push   0x40700000
c000d607:	6a 00                	push   0x0
c000d609:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d60d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d611:	e8 63 ae 01 00       	call   c0028479 <__gtdf2>
c000d616:	83 c4 10             	add    esp,0x10
c000d619:	ba 16 00 00 00       	mov    edx,0x16
c000d61e:	85 c0                	test   eax,eax
c000d620:	0f 8f 45 06 00 00    	jg     c000dc6b <sinc_mono_vari_process+0x6e0>
c000d626:	83 ec 0c             	sub    esp,0xc
c000d629:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d62c:	e8 fa ab 01 00       	call   c002822b <__floatsidf>
c000d631:	83 c4 10             	add    esp,0x10
c000d634:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d638:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d63c:	68 00 00 00 40       	push   0x40000000
c000d641:	6a 00                	push   0x0
c000d643:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d647:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d64b:	e8 fb 9e 01 00       	call   c002754b <__adddf3>
c000d650:	59                   	pop    ecx
c000d651:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d655:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d659:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d65c:	e8 ca ab 01 00       	call   c002822b <__floatsidf>
c000d661:	83 c4 10             	add    esp,0x10
c000d664:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d668:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d66c:	52                   	push   edx
c000d66d:	50                   	push   eax
c000d66e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d672:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d676:	e8 31 a8 01 00       	call   c0027eac <__divdf3>
c000d67b:	83 c4 10             	add    esp,0x10
c000d67e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d682:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d686:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d689:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d68c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d690:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a4:	e8 d0 ad 01 00       	call   c0028479 <__gtdf2>
c000d6a9:	83 c4 10             	add    esp,0x10
c000d6ac:	85 c0                	test   eax,eax
c000d6ae:	7e 2d                	jle    c000d6dd <sinc_mono_vari_process+0x152>
c000d6b0:	68 00 00 f0 3f       	push   0x3ff00000
c000d6b5:	6a 00                	push   0x0
c000d6b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6bf:	e8 d3 ad 01 00       	call   c0028497 <__ltdf2>
c000d6c4:	83 c4 10             	add    esp,0x10
c000d6c7:	85 c0                	test   eax,eax
c000d6c9:	79 4d                	jns    c000d718 <sinc_mono_vari_process+0x18d>
c000d6cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6cf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6db:	eb 1b                	jmp    c000d6f8 <sinc_mono_vari_process+0x16d>
c000d6dd:	68 00 00 f0 3f       	push   0x3ff00000
c000d6e2:	6a 00                	push   0x0
c000d6e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6ec:	e8 a6 ad 01 00       	call   c0028497 <__ltdf2>
c000d6f1:	83 c4 10             	add    esp,0x10
c000d6f4:	85 c0                	test   eax,eax
c000d6f6:	79 20                	jns    c000d718 <sinc_mono_vari_process+0x18d>
c000d6f8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6fc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d700:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d704:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d708:	e8 9f a7 01 00       	call   c0027eac <__divdf3>
c000d70d:	83 c4 10             	add    esp,0x10
c000d710:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d714:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d718:	50                   	push   eax
c000d719:	50                   	push   eax
c000d71a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d71e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d722:	e8 29 af 01 00       	call   c0028650 <lrint>
c000d727:	40                   	inc    eax
c000d728:	0f af c7             	imul   eax,edi
c000d72b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d72f:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d733:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d736:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d739:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d73d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d741:	58                   	pop    eax
c000d742:	5a                   	pop    edx
c000d743:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d747:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d74b:	e8 00 af 01 00       	call   c0028650 <lrint>
c000d750:	83 ec 0c             	sub    esp,0xc
c000d753:	50                   	push   eax
c000d754:	e8 d2 aa 01 00       	call   c002822b <__floatsidf>
c000d759:	83 c4 10             	add    esp,0x10
c000d75c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d760:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d764:	52                   	push   edx
c000d765:	50                   	push   eax
c000d766:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d76a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d76e:	e8 29 a4 01 00       	call   c0027b9c <__subdf3>
c000d773:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d777:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d77b:	83 c4 20             	add    esp,0x20
c000d77e:	6a 00                	push   0x0
c000d780:	6a 00                	push   0x0
c000d782:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d786:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d78a:	e8 08 ad 01 00       	call   c0028497 <__ltdf2>
c000d78f:	83 c4 10             	add    esp,0x10
c000d792:	85 c0                	test   eax,eax
c000d794:	79 1f                	jns    c000d7b5 <sinc_mono_vari_process+0x22a>
c000d796:	68 00 00 f0 3f       	push   0x3ff00000
c000d79b:	6a 00                	push   0x0
c000d79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7a5:	e8 a1 9d 01 00       	call   c002754b <__adddf3>
c000d7aa:	83 c4 10             	add    esp,0x10
c000d7ad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7b1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7b5:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7b8:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7bb:	83 ec 10             	sub    esp,0x10
c000d7be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ca:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ce:	e8 c9 a3 01 00       	call   c0027b9c <__subdf3>
c000d7d3:	83 c4 18             	add    esp,0x18
c000d7d6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7da:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7de:	52                   	push   edx
c000d7df:	50                   	push   eax
c000d7e0:	e8 6b ae 01 00       	call   c0028650 <lrint>
c000d7e5:	0f af f8             	imul   edi,eax
c000d7e8:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7eb:	31 ff                	xor    edi,edi
c000d7ed:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7f2:	99                   	cdq    
c000d7f3:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7f6:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d801:	55                   	push   ebp
c000d802:	57                   	push   edi
c000d803:	e8 a4 a6 01 00       	call   c0027eac <__divdf3>
c000d808:	83 c4 10             	add    esp,0x10
c000d80b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d80f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d813:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d818:	68 23 42 92 0c       	push   0xc924223
c000d81d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d821:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d825:	e8 21 9d 01 00       	call   c002754b <__adddf3>
c000d82a:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d82e:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d832:	83 c4 20             	add    esp,0x20
c000d835:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d839:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d83d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d840:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d843:	7d 54                	jge    c000d899 <sinc_mono_vari_process+0x30e>
c000d845:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d848:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d84b:	01 c8                	add    eax,ecx
c000d84d:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d850:	99                   	cdq    
c000d851:	f7 f9                	idiv   ecx
c000d853:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d857:	7d 0c                	jge    c000d865 <sinc_mono_vari_process+0x2da>
c000d859:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d85c:	85 ff                	test   edi,edi
c000d85e:	79 73                	jns    c000d8d3 <sinc_mono_vari_process+0x348>
c000d860:	e9 ee 00 00 00       	jmp    c000d953 <sinc_mono_vari_process+0x3c8>
c000d865:	50                   	push   eax
c000d866:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d86a:	56                   	push   esi
c000d86b:	53                   	push   ebx
c000d86c:	e8 8d e0 ff ff       	call   c000b8fe <prepare_data>
c000d871:	89 c2                	mov    edx,eax
c000d873:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d877:	83 c4 10             	add    esp,0x10
c000d87a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d87d:	85 d2                	test   edx,edx
c000d87f:	0f 85 e6 03 00 00    	jne    c000dc6b <sinc_mono_vari_process+0x6e0>
c000d885:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d888:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d88b:	01 c8                	add    eax,ecx
c000d88d:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d890:	99                   	cdq    
c000d891:	f7 f9                	idiv   ecx
c000d893:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d897:	7c c0                	jl     c000d859 <sinc_mono_vari_process+0x2ce>
c000d899:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d89d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d8a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d8a5:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8a8:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8af:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8b3:	89 01                	mov    DWORD PTR [ecx],eax
c000d8b5:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8b8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8bb:	99                   	cdq    
c000d8bc:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8bf:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8c2:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8c5:	99                   	cdq    
c000d8c6:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8c9:	31 d2                	xor    edx,edx
c000d8cb:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8ce:	e9 98 03 00 00       	jmp    c000dc6b <sinc_mono_vari_process+0x6e0>
c000d8d3:	83 ec 0c             	sub    esp,0xc
c000d8d6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8d9:	e8 4d a9 01 00       	call   c002822b <__floatsidf>
c000d8de:	83 c4 10             	add    esp,0x10
c000d8e1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8e5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8f1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f9:	e8 4d 9c 01 00       	call   c002754b <__adddf3>
c000d8fe:	83 c4 10             	add    esp,0x10
c000d901:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d905:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d909:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d90d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d911:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d915:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d919:	e8 2d 9c 01 00       	call   c002754b <__adddf3>
c000d91e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d921:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d925:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d929:	e8 fd a8 01 00       	call   c002822b <__floatsidf>
c000d92e:	83 c4 10             	add    esp,0x10
c000d931:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d935:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d939:	52                   	push   edx
c000d93a:	50                   	push   eax
c000d93b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d93f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d943:	e8 31 ab 01 00       	call   c0028479 <__gtdf2>
c000d948:	83 c4 10             	add    esp,0x10
c000d94b:	85 c0                	test   eax,eax
c000d94d:	0f 8f 46 ff ff ff    	jg     c000d899 <sinc_mono_vari_process+0x30e>
c000d953:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d957:	0f 8e f5 00 00 00    	jle    c000da52 <sinc_mono_vari_process+0x4c7>
c000d95d:	83 ec 10             	sub    esp,0x10
c000d960:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d963:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d966:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d96a:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d96d:	ff 30                	push   DWORD PTR [eax]
c000d96f:	e8 28 a2 01 00       	call   c0027b9c <__subdf3>
c000d974:	83 c4 18             	add    esp,0x18
c000d977:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d97b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d97f:	52                   	push   edx
c000d980:	50                   	push   eax
c000d981:	e8 aa ac 01 00       	call   c0028630 <fabs>
c000d986:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d98a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d98e:	83 c4 10             	add    esp,0x10
c000d991:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d996:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d99b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9a3:	e8 d1 aa 01 00       	call   c0028479 <__gtdf2>
c000d9a8:	83 c4 10             	add    esp,0x10
c000d9ab:	85 c0                	test   eax,eax
c000d9ad:	0f 8e 9f 00 00 00    	jle    c000da52 <sinc_mono_vari_process+0x4c7>
c000d9b3:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9b7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9ba:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9bc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9c0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9c4:	52                   	push   edx
c000d9c5:	50                   	push   eax
c000d9c6:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9c9:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9cc:	e8 cb a1 01 00       	call   c0027b9c <__subdf3>
c000d9d1:	5f                   	pop    edi
c000d9d2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9d6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9da:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9dd:	e8 49 a8 01 00       	call   c002822b <__floatsidf>
c000d9e2:	83 c4 10             	add    esp,0x10
c000d9e5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9ed:	52                   	push   edx
c000d9ee:	50                   	push   eax
c000d9ef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9f7:	e8 cc a1 01 00       	call   c0027bc8 <__muldf3>
c000d9fc:	5d                   	pop    ebp
c000d9fd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000da01:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000da05:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da08:	e8 1e a8 01 00       	call   c002822b <__floatsidf>
c000da0d:	83 c4 10             	add    esp,0x10
c000da10:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da14:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da18:	52                   	push   edx
c000da19:	50                   	push   eax
c000da1a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da22:	e8 85 a4 01 00       	call   c0027eac <__divdf3>
c000da27:	83 c4 10             	add    esp,0x10
c000da2a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da2e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da32:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da36:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da3a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da42:	e8 04 9b 01 00       	call   c002754b <__adddf3>
c000da47:	83 c4 10             	add    esp,0x10
c000da4a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da4e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da52:	83 ec 0c             	sub    esp,0xc
c000da55:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da58:	e8 ce a7 01 00       	call   c002822b <__floatsidf>
c000da5d:	83 c4 10             	add    esp,0x10
c000da60:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da64:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da78:	e8 1a aa 01 00       	call   c0028497 <__ltdf2>
c000da7d:	83 c4 10             	add    esp,0x10
c000da80:	85 c0                	test   eax,eax
c000da82:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da86:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da8a:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da8e:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da92:	78 10                	js     c000daa4 <sinc_mono_vari_process+0x519>
c000da94:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da98:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da9c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000daa0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000daa4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daac:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dab0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dab4:	e8 0f a1 01 00       	call   c0027bc8 <__muldf3>
c000dab9:	59                   	pop    ecx
c000daba:	5f                   	pop    edi
c000dabb:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dabf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dac3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dac7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dacb:	e8 07 de ff ff       	call   c000b8d7 <double_to_fp>
c000dad0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad4:	89 c7                	mov    edi,eax
c000dad6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dada:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dade:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dae2:	e8 e1 a0 01 00       	call   c0027bc8 <__muldf3>
c000dae7:	83 c4 18             	add    esp,0x18
c000daea:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000daee:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000daf2:	52                   	push   edx
c000daf3:	50                   	push   eax
c000daf4:	e8 de dd ff ff       	call   c000b8d7 <double_to_fp>
c000daf9:	83 ec 0c             	sub    esp,0xc
c000dafc:	89 c5                	mov    ebp,eax
c000dafe:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000db01:	e8 25 a7 01 00       	call   c002822b <__floatsidf>
c000db06:	83 c4 10             	add    esp,0x10
c000db09:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db0d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db11:	52                   	push   edx
c000db12:	50                   	push   eax
c000db13:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db17:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db1b:	e8 8c a3 01 00       	call   c0027eac <__divdf3>
c000db20:	83 c4 10             	add    esp,0x10
c000db23:	89 e9                	mov    ecx,ebp
c000db25:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db29:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db2d:	89 d8                	mov    eax,ebx
c000db2f:	89 fa                	mov    edx,edi
c000db31:	e8 ee bd ff ff       	call   c0009924 <calc_output_single>
c000db36:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db39:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db3c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db40:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db44:	52                   	push   edx
c000db45:	50                   	push   eax
c000db46:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db4a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db4e:	e8 75 a0 01 00       	call   c0027bc8 <__muldf3>
c000db53:	59                   	pop    ecx
c000db54:	59                   	pop    ecx
c000db55:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db59:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db5d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db61:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db65:	e8 31 a9 01 00       	call   c002849b <__truncdfsf2>
c000db6a:	83 c4 10             	add    esp,0x10
c000db6d:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db70:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db73:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db77:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db7b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db7f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db83:	e8 24 a3 01 00       	call   c0027eac <__divdf3>
c000db88:	83 c4 10             	add    esp,0x10
c000db8b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db8f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db9b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dba3:	e8 a3 99 01 00       	call   c002754b <__adddf3>
c000dba8:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dbac:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dbb0:	83 c4 18             	add    esp,0x18
c000dbb3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbb7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbbb:	e8 90 aa 01 00       	call   c0028650 <lrint>
c000dbc0:	83 ec 0c             	sub    esp,0xc
c000dbc3:	50                   	push   eax
c000dbc4:	e8 62 a6 01 00       	call   c002822b <__floatsidf>
c000dbc9:	83 c4 10             	add    esp,0x10
c000dbcc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbd0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbd4:	52                   	push   edx
c000dbd5:	50                   	push   eax
c000dbd6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbda:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbde:	e8 b9 9f 01 00       	call   c0027b9c <__subdf3>
c000dbe3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbe7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbeb:	83 c4 20             	add    esp,0x20
c000dbee:	6a 00                	push   0x0
c000dbf0:	6a 00                	push   0x0
c000dbf2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbfa:	e8 98 a8 01 00       	call   c0028497 <__ltdf2>
c000dbff:	83 c4 10             	add    esp,0x10
c000dc02:	85 c0                	test   eax,eax
c000dc04:	79 20                	jns    c000dc26 <sinc_mono_vari_process+0x69b>
c000dc06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc0e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc16:	e8 30 99 01 00       	call   c002754b <__adddf3>
c000dc1b:	83 c4 10             	add    esp,0x10
c000dc1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc26:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc29:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc2c:	83 ec 10             	sub    esp,0x10
c000dc2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc37:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc3b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc3f:	e8 58 9f 01 00       	call   c0027b9c <__subdf3>
c000dc44:	83 c4 18             	add    esp,0x18
c000dc47:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc4b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc4f:	52                   	push   edx
c000dc50:	50                   	push   eax
c000dc51:	e8 fa a9 01 00       	call   c0028650 <lrint>
c000dc56:	83 c4 10             	add    esp,0x10
c000dc59:	0f af f8             	imul   edi,eax
c000dc5c:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc5f:	99                   	cdq    
c000dc60:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc63:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc66:	e9 d2 fb ff ff       	jmp    c000d83d <sinc_mono_vari_process+0x2b2>
c000dc6b:	83 c4 4c             	add    esp,0x4c
c000dc6e:	89 d0                	mov    eax,edx
c000dc70:	5b                   	pop    ebx
c000dc71:	5e                   	pop    esi
c000dc72:	5f                   	pop    edi
c000dc73:	5d                   	pop    ebp
c000dc74:	c3                   	ret    

c000dc75 <sinc_get_name>:
c000dc75:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc79:	31 c0                	xor    eax,eax
c000dc7b:	83 fa 02             	cmp    edx,0x2
c000dc7e:	77 07                	ja     c000dc87 <sinc_get_name+0x12>
c000dc80:	8b 04 95 44 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd61bc]
c000dc87:	c3                   	ret    

c000dc88 <sinc_get_description>:
c000dc88:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc8c:	31 c0                	xor    eax,eax
c000dc8e:	83 fa 02             	cmp    edx,0x2
c000dc91:	77 07                	ja     c000dc9a <sinc_get_description+0x12>
c000dc93:	8b 04 95 38 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd61c8]
c000dc9a:	c3                   	ret    

c000dc9b <sinc_set_converter>:
c000dc9b:	53                   	push   ebx
c000dc9c:	81 ec 58 08 00 00    	sub    esp,0x858
c000dca2:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dca9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dcac:	85 c0                	test   eax,eax
c000dcae:	74 13                	je     c000dcc3 <sinc_set_converter+0x28>
c000dcb0:	83 ec 0c             	sub    esp,0xc
c000dcb3:	50                   	push   eax
c000dcb4:	e8 a2 1b 00 00       	call   c000f85b <free>
c000dcb9:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcc0:	83 c4 10             	add    esp,0x10
c000dcc3:	50                   	push   eax
c000dcc4:	68 44 08 00 00       	push   0x844
c000dcc9:	6a 00                	push   0x0
c000dccb:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dccf:	50                   	push   eax
c000dcd0:	e8 ab 2a ff ff       	call   c0000780 <memset>
c000dcd5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcd8:	83 c4 10             	add    esp,0x10
c000dcdb:	b8 0b 00 00 00       	mov    eax,0xb
c000dce0:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dce6:	7f 6e                	jg     c000dd56 <sinc_set_converter+0xbb>
c000dce8:	83 fa 01             	cmp    edx,0x1
c000dceb:	75 10                	jne    c000dcfd <sinc_set_converter+0x62>
c000dced:	c7 43 24 8b d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d58b
c000dcf4:	c7 43 20 8b d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d58b
c000dcfb:	eb 4d                	jmp    c000dd4a <sinc_set_converter+0xaf>
c000dcfd:	83 fa 02             	cmp    edx,0x2
c000dd00:	75 10                	jne    c000dd12 <sinc_set_converter+0x77>
c000dd02:	c7 43 24 c6 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cec6
c000dd09:	c7 43 20 c6 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cec6
c000dd10:	eb 38                	jmp    c000dd4a <sinc_set_converter+0xaf>
c000dd12:	83 fa 04             	cmp    edx,0x4
c000dd15:	75 10                	jne    c000dd27 <sinc_set_converter+0x8c>
c000dd17:	c7 43 24 01 c8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c801
c000dd1e:	c7 43 20 01 c8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c801
c000dd25:	eb 23                	jmp    c000dd4a <sinc_set_converter+0xaf>
c000dd27:	83 fa 06             	cmp    edx,0x6
c000dd2a:	75 10                	jne    c000dd3c <sinc_set_converter+0xa1>
c000dd2c:	c7 43 24 3c c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c13c
c000dd33:	c7 43 20 3c c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c13c
c000dd3a:	eb 0e                	jmp    c000dd4a <sinc_set_converter+0xaf>
c000dd3c:	c7 43 24 78 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba78
c000dd43:	c7 43 20 78 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba78
c000dd4a:	c7 43 28 2b ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad2b
c000dd51:	b8 0a 00 00 00       	mov    eax,0xa
c000dd56:	81 c4 58 08 00 00    	add    esp,0x858
c000dd5c:	5b                   	pop    ebx
c000dd5d:	c3                   	ret    

c000dd5e <zoh_vari_process>:
c000dd5e:	55                   	push   ebp
c000dd5f:	31 d2                	xor    edx,edx
c000dd61:	57                   	push   edi
c000dd62:	56                   	push   esi
c000dd63:	53                   	push   ebx
c000dd64:	83 ec 3c             	sub    esp,0x3c
c000dd67:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd6b:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd6f:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd73:	0f 8e 80 06 00 00    	jle    c000e3f9 <zoh_vari_process+0x69b>
c000dd79:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd7c:	ba 05 00 00 00       	mov    edx,0x5
c000dd81:	85 db                	test   ebx,ebx
c000dd83:	0f 84 70 06 00 00    	je     c000e3f9 <zoh_vari_process+0x69b>
c000dd89:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd8c:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd90:	74 19                	je     c000ddab <zoh_vari_process+0x4d>
c000dd92:	31 d2                	xor    edx,edx
c000dd94:	39 c2                	cmp    edx,eax
c000dd96:	7d 0c                	jge    c000dda4 <zoh_vari_process+0x46>
c000dd98:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd9a:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd9d:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dda1:	42                   	inc    edx
c000dda2:	eb f0                	jmp    c000dd94 <zoh_vari_process+0x36>
c000dda4:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000ddab:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000ddae:	0f af d0             	imul   edx,eax
c000ddb1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddb4:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddb8:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ddbf:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddc2:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddc9:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddcc:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddce:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddd2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddd6:	68 00 00 70 3f       	push   0x3f700000
c000dddb:	6a 00                	push   0x0
c000dddd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dde1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dde5:	e8 ad a6 01 00       	call   c0028497 <__ltdf2>
c000ddea:	83 c4 10             	add    esp,0x10
c000dded:	ba 16 00 00 00       	mov    edx,0x16
c000ddf2:	85 c0                	test   eax,eax
c000ddf4:	0f 88 ff 05 00 00    	js     c000e3f9 <zoh_vari_process+0x69b>
c000ddfa:	68 00 00 70 40       	push   0x40700000
c000ddff:	6a 00                	push   0x0
c000de01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de09:	e8 6b a6 01 00       	call   c0028479 <__gtdf2>
c000de0e:	83 c4 10             	add    esp,0x10
c000de11:	ba 16 00 00 00       	mov    edx,0x16
c000de16:	85 c0                	test   eax,eax
c000de18:	0f 8f db 05 00 00    	jg     c000e3f9 <zoh_vari_process+0x69b>
c000de1e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de21:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de2c:	68 00 00 f0 3f       	push   0x3ff00000
c000de31:	6a 00                	push   0x0
c000de33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de37:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de3b:	e8 57 a6 01 00       	call   c0028497 <__ltdf2>
c000de40:	83 c4 10             	add    esp,0x10
c000de43:	85 c0                	test   eax,eax
c000de45:	0f 89 da 01 00 00    	jns    c000e025 <zoh_vari_process+0x2c7>
c000de4b:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de4e:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de51:	0f 8d ce 01 00 00    	jge    c000e025 <zoh_vari_process+0x2c7>
c000de57:	83 ec 0c             	sub    esp,0xc
c000de5a:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de5d:	e8 c9 a3 01 00       	call   c002822b <__floatsidf>
c000de62:	83 c4 10             	add    esp,0x10
c000de65:	89 04 24             	mov    DWORD PTR [esp],eax
c000de68:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de6c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de70:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de74:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de78:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de7c:	e8 47 9d 01 00       	call   c0027bc8 <__muldf3>
c000de81:	59                   	pop    ecx
c000de82:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de86:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de8a:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de8d:	e8 99 a3 01 00       	call   c002822b <__floatsidf>
c000de92:	83 c4 10             	add    esp,0x10
c000de95:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de99:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de9d:	52                   	push   edx
c000de9e:	50                   	push   eax
c000de9f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dea3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dea7:	e8 9f 96 01 00       	call   c002754b <__adddf3>
c000deac:	59                   	pop    ecx
c000dead:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000deb1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000deb5:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000deb8:	e8 6e a3 01 00       	call   c002822b <__floatsidf>
c000debd:	83 c4 10             	add    esp,0x10
c000dec0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dec4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dec8:	52                   	push   edx
c000dec9:	50                   	push   eax
c000deca:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dece:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ded2:	e8 be a5 01 00       	call   c0028495 <__gedf2>
c000ded7:	83 c4 10             	add    esp,0x10
c000deda:	85 c0                	test   eax,eax
c000dedc:	0f 89 43 01 00 00    	jns    c000e025 <zoh_vari_process+0x2c7>
c000dee2:	85 ed                	test   ebp,ebp
c000dee4:	0f 8e ec 00 00 00    	jle    c000dfd6 <zoh_vari_process+0x278>
c000deea:	83 ec 10             	sub    esp,0x10
c000deed:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000def0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000def3:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000def6:	ff 37                	push   DWORD PTR [edi]
c000def8:	e8 9f 9c 01 00       	call   c0027b9c <__subdf3>
c000defd:	83 c4 18             	add    esp,0x18
c000df00:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df04:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df08:	52                   	push   edx
c000df09:	50                   	push   eax
c000df0a:	e8 21 a7 01 00       	call   c0028630 <fabs>
c000df0f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df13:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df17:	83 c4 10             	add    esp,0x10
c000df1a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df1f:	68 23 42 92 0c       	push   0xc924223
c000df24:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df28:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df2c:	e8 48 a5 01 00       	call   c0028479 <__gtdf2>
c000df31:	83 c4 10             	add    esp,0x10
c000df34:	85 c0                	test   eax,eax
c000df36:	0f 8e 9a 00 00 00    	jle    c000dfd6 <zoh_vari_process+0x278>
c000df3c:	8b 07                	mov    eax,DWORD PTR [edi]
c000df3e:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df41:	89 04 24             	mov    DWORD PTR [esp],eax
c000df44:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df48:	52                   	push   edx
c000df49:	50                   	push   eax
c000df4a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df4d:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df50:	e8 47 9c 01 00       	call   c0027b9c <__subdf3>
c000df55:	59                   	pop    ecx
c000df56:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df5a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df5e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df61:	e8 c5 a2 01 00       	call   c002822b <__floatsidf>
c000df66:	83 c4 10             	add    esp,0x10
c000df69:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df6d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df71:	52                   	push   edx
c000df72:	50                   	push   eax
c000df73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df7b:	e8 48 9c 01 00       	call   c0027bc8 <__muldf3>
c000df80:	5d                   	pop    ebp
c000df81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df85:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df89:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df8c:	e8 9a a2 01 00       	call   c002822b <__floatsidf>
c000df91:	83 c4 10             	add    esp,0x10
c000df94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df9c:	52                   	push   edx
c000df9d:	50                   	push   eax
c000df9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfa6:	e8 01 9f 01 00       	call   c0027eac <__divdf3>
c000dfab:	83 c4 10             	add    esp,0x10
c000dfae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfb2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfb6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfba:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfbe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfc6:	e8 80 95 01 00       	call   c002754b <__adddf3>
c000dfcb:	83 c4 10             	add    esp,0x10
c000dfce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfd2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfd6:	31 c0                	xor    eax,eax
c000dfd8:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfdb:	7e 13                	jle    c000dff0 <zoh_vari_process+0x292>
c000dfdd:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfe1:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfe4:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfe7:	40                   	inc    eax
c000dfe8:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfeb:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfee:	eb e8                	jmp    c000dfd8 <zoh_vari_process+0x27a>
c000dff0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff8:	68 00 00 f0 3f       	push   0x3ff00000
c000dffd:	6a 00                	push   0x0
c000dfff:	e8 a8 9e 01 00       	call   c0027eac <__divdf3>
c000e004:	83 c4 10             	add    esp,0x10
c000e007:	89 04 24             	mov    DWORD PTR [esp],eax
c000e00a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e00e:	52                   	push   edx
c000e00f:	50                   	push   eax
c000e010:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e014:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e018:	e8 2e 95 01 00       	call   c002754b <__adddf3>
c000e01d:	83 c4 10             	add    esp,0x10
c000e020:	e9 ff fd ff ff       	jmp    c000de24 <zoh_vari_process+0xc6>
c000e025:	55                   	push   ebp
c000e026:	55                   	push   ebp
c000e027:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e02b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e02f:	e8 1c a6 01 00       	call   c0028650 <lrint>
c000e034:	83 ec 0c             	sub    esp,0xc
c000e037:	50                   	push   eax
c000e038:	e8 ee a1 01 00       	call   c002822b <__floatsidf>
c000e03d:	83 c4 10             	add    esp,0x10
c000e040:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e044:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e048:	52                   	push   edx
c000e049:	50                   	push   eax
c000e04a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e04e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e052:	e8 45 9b 01 00       	call   c0027b9c <__subdf3>
c000e057:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e05b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e05f:	83 c4 20             	add    esp,0x20
c000e062:	6a 00                	push   0x0
c000e064:	6a 00                	push   0x0
c000e066:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e06a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e06e:	e8 24 a4 01 00       	call   c0028497 <__ltdf2>
c000e073:	83 c4 10             	add    esp,0x10
c000e076:	85 c0                	test   eax,eax
c000e078:	79 1e                	jns    c000e098 <zoh_vari_process+0x33a>
c000e07a:	68 00 00 f0 3f       	push   0x3ff00000
c000e07f:	6a 00                	push   0x0
c000e081:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e085:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e089:	e8 bd 94 01 00       	call   c002754b <__adddf3>
c000e08e:	83 c4 10             	add    esp,0x10
c000e091:	89 04 24             	mov    DWORD PTR [esp],eax
c000e094:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e098:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e09b:	83 ec 10             	sub    esp,0x10
c000e09e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0ae:	e8 e9 9a 01 00       	call   c0027b9c <__subdf3>
c000e0b3:	83 c4 18             	add    esp,0x18
c000e0b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0be:	52                   	push   edx
c000e0bf:	50                   	push   eax
c000e0c0:	e8 8b a5 01 00       	call   c0028650 <lrint>
c000e0c5:	83 c4 10             	add    esp,0x10
c000e0c8:	0f af e8             	imul   ebp,eax
c000e0cb:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0ce:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0d1:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0d5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0d8:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0df:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0e2:	0f 8d 7a 02 00 00    	jge    c000e362 <zoh_vari_process+0x604>
c000e0e8:	83 ec 0c             	sub    esp,0xc
c000e0eb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0ee:	e8 38 a1 01 00       	call   c002822b <__floatsidf>
c000e0f3:	83 c4 10             	add    esp,0x10
c000e0f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0fa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0fe:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e102:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e106:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e10a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e10e:	e8 b5 9a 01 00       	call   c0027bc8 <__muldf3>
c000e113:	59                   	pop    ecx
c000e114:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e118:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e11c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e120:	e8 06 a1 01 00       	call   c002822b <__floatsidf>
c000e125:	83 c4 10             	add    esp,0x10
c000e128:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e12c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e130:	52                   	push   edx
c000e131:	50                   	push   eax
c000e132:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e136:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e13a:	e8 0c 94 01 00       	call   c002754b <__adddf3>
c000e13f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e142:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e146:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e14a:	e8 dc a0 01 00       	call   c002822b <__floatsidf>
c000e14f:	83 c4 10             	add    esp,0x10
c000e152:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e156:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e15a:	52                   	push   edx
c000e15b:	50                   	push   eax
c000e15c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e160:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e164:	e8 30 a3 01 00       	call   c0028499 <__ledf2>
c000e169:	83 c4 10             	add    esp,0x10
c000e16c:	85 c0                	test   eax,eax
c000e16e:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e172:	0f 8f ea 01 00 00    	jg     c000e362 <zoh_vari_process+0x604>
c000e178:	85 c9                	test   ecx,ecx
c000e17a:	0f 8e ed 00 00 00    	jle    c000e26d <zoh_vari_process+0x50f>
c000e180:	83 ec 10             	sub    esp,0x10
c000e183:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e186:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e189:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e18c:	ff 37                	push   DWORD PTR [edi]
c000e18e:	e8 09 9a 01 00       	call   c0027b9c <__subdf3>
c000e193:	83 c4 18             	add    esp,0x18
c000e196:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e19a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e19e:	52                   	push   edx
c000e19f:	50                   	push   eax
c000e1a0:	e8 8b a4 01 00       	call   c0028630 <fabs>
c000e1a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1a9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1ad:	83 c4 10             	add    esp,0x10
c000e1b0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1b5:	68 23 42 92 0c       	push   0xc924223
c000e1ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1c2:	e8 b2 a2 01 00       	call   c0028479 <__gtdf2>
c000e1c7:	83 c4 10             	add    esp,0x10
c000e1ca:	85 c0                	test   eax,eax
c000e1cc:	0f 8e 9b 00 00 00    	jle    c000e26d <zoh_vari_process+0x50f>
c000e1d2:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1d4:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1db:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1df:	52                   	push   edx
c000e1e0:	50                   	push   eax
c000e1e1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1e4:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1e7:	e8 b0 99 01 00       	call   c0027b9c <__subdf3>
c000e1ec:	5d                   	pop    ebp
c000e1ed:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1f1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1f5:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1f8:	e8 2e a0 01 00       	call   c002822b <__floatsidf>
c000e1fd:	83 c4 10             	add    esp,0x10
c000e200:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e204:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e208:	52                   	push   edx
c000e209:	50                   	push   eax
c000e20a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e212:	e8 b1 99 01 00       	call   c0027bc8 <__muldf3>
c000e217:	59                   	pop    ecx
c000e218:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e21c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e220:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e223:	e8 03 a0 01 00       	call   c002822b <__floatsidf>
c000e228:	83 c4 10             	add    esp,0x10
c000e22b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e22f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e233:	52                   	push   edx
c000e234:	50                   	push   eax
c000e235:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e239:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e23d:	e8 6a 9c 01 00       	call   c0027eac <__divdf3>
c000e242:	83 c4 10             	add    esp,0x10
c000e245:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e249:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e24d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e251:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e255:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e259:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e25d:	e8 e9 92 01 00       	call   c002754b <__adddf3>
c000e262:	83 c4 10             	add    esp,0x10
c000e265:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e269:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e26d:	31 d2                	xor    edx,edx
c000e26f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e272:	39 d0                	cmp    eax,edx
c000e274:	7e 1d                	jle    c000e293 <zoh_vari_process+0x535>
c000e276:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e279:	29 c1                	sub    ecx,eax
c000e27b:	89 c8                	mov    eax,ecx
c000e27d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e27f:	01 d0                	add    eax,edx
c000e281:	42                   	inc    edx
c000e282:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e285:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e288:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e28b:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e28e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e291:	eb dc                	jmp    c000e26f <zoh_vari_process+0x511>
c000e293:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e297:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e29b:	68 00 00 f0 3f       	push   0x3ff00000
c000e2a0:	6a 00                	push   0x0
c000e2a2:	e8 05 9c 01 00       	call   c0027eac <__divdf3>
c000e2a7:	83 c4 10             	add    esp,0x10
c000e2aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ae:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2b2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2b6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2c2:	e8 84 92 01 00       	call   c002754b <__adddf3>
c000e2c7:	5d                   	pop    ebp
c000e2c8:	59                   	pop    ecx
c000e2c9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2cd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d9:	e8 72 a3 01 00       	call   c0028650 <lrint>
c000e2de:	83 ec 0c             	sub    esp,0xc
c000e2e1:	50                   	push   eax
c000e2e2:	e8 44 9f 01 00       	call   c002822b <__floatsidf>
c000e2e7:	83 c4 10             	add    esp,0x10
c000e2ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2f2:	52                   	push   edx
c000e2f3:	50                   	push   eax
c000e2f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2fc:	e8 9b 98 01 00       	call   c0027b9c <__subdf3>
c000e301:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e305:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e309:	83 c4 20             	add    esp,0x20
c000e30c:	6a 00                	push   0x0
c000e30e:	6a 00                	push   0x0
c000e310:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e314:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e318:	e8 7a a1 01 00       	call   c0028497 <__ltdf2>
c000e31d:	83 c4 10             	add    esp,0x10
c000e320:	85 c0                	test   eax,eax
c000e322:	79 1e                	jns    c000e342 <zoh_vari_process+0x5e4>
c000e324:	68 00 00 f0 3f       	push   0x3ff00000
c000e329:	6a 00                	push   0x0
c000e32b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e32f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e333:	e8 13 92 01 00       	call   c002754b <__adddf3>
c000e338:	83 c4 10             	add    esp,0x10
c000e33b:	89 04 24             	mov    DWORD PTR [esp],eax
c000e33e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e342:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e345:	83 ec 10             	sub    esp,0x10
c000e348:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e34c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e350:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e354:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e358:	e8 3f 98 01 00       	call   c0027b9c <__subdf3>
c000e35d:	e9 51 fd ff ff       	jmp    c000e0b3 <zoh_vari_process+0x355>
c000e362:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e366:	7d 3a                	jge    c000e3a2 <zoh_vari_process+0x644>
c000e368:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e36c:	83 ec 0c             	sub    esp,0xc
c000e36f:	29 e8                	sub    eax,ebp
c000e371:	99                   	cdq    
c000e372:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e375:	50                   	push   eax
c000e376:	e8 b0 9e 01 00       	call   c002822b <__floatsidf>
c000e37b:	83 c4 10             	add    esp,0x10
c000e37e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e382:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e386:	52                   	push   edx
c000e387:	50                   	push   eax
c000e388:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e38c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e390:	e8 b6 91 01 00       	call   c002754b <__adddf3>
c000e395:	83 c4 10             	add    esp,0x10
c000e398:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e39b:	89 04 24             	mov    DWORD PTR [esp],eax
c000e39e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e3a2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e3a5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3a9:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3ac:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3af:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3b2:	85 c0                	test   eax,eax
c000e3b4:	7f 25                	jg     c000e3db <zoh_vari_process+0x67d>
c000e3b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3ba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3be:	89 07                	mov    DWORD PTR [edi],eax
c000e3c0:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3c3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3c6:	99                   	cdq    
c000e3c7:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3ca:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3cd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3d0:	99                   	cdq    
c000e3d1:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3d4:	31 d2                	xor    edx,edx
c000e3d6:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3d9:	eb 1e                	jmp    c000e3f9 <zoh_vari_process+0x69b>
c000e3db:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3de:	31 d2                	xor    edx,edx
c000e3e0:	29 c8                	sub    eax,ecx
c000e3e2:	c1 e0 02             	shl    eax,0x2
c000e3e5:	39 d1                	cmp    ecx,edx
c000e3e7:	7e cd                	jle    c000e3b6 <zoh_vari_process+0x658>
c000e3e9:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3eb:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3ef:	83 c0 04             	add    eax,0x4
c000e3f2:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3f6:	42                   	inc    edx
c000e3f7:	eb ec                	jmp    c000e3e5 <zoh_vari_process+0x687>
c000e3f9:	83 c4 3c             	add    esp,0x3c
c000e3fc:	89 d0                	mov    eax,edx
c000e3fe:	5b                   	pop    ebx
c000e3ff:	5e                   	pop    esi
c000e400:	5f                   	pop    edi
c000e401:	5d                   	pop    ebp
c000e402:	c3                   	ret    

c000e403 <zoh_reset>:
c000e403:	83 ec 0c             	sub    esp,0xc
c000e406:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e40a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e40d:	85 c0                	test   eax,eax
c000e40f:	74 20                	je     c000e431 <zoh_reset+0x2e>
c000e411:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e414:	83 c0 1c             	add    eax,0x1c
c000e417:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e41a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e421:	c1 e2 02             	shl    edx,0x2
c000e424:	51                   	push   ecx
c000e425:	52                   	push   edx
c000e426:	6a 00                	push   0x0
c000e428:	50                   	push   eax
c000e429:	e8 52 23 ff ff       	call   c0000780 <memset>
c000e42e:	83 c4 10             	add    esp,0x10
c000e431:	83 c4 0c             	add    esp,0xc
c000e434:	c3                   	ret    

c000e435 <zoh_get_name>:
c000e435:	31 c0                	xor    eax,eax
c000e437:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e43c:	75 05                	jne    c000e443 <zoh_get_name+0xe>
c000e43e:	b8 5e 9f 02 c0       	mov    eax,0xc0029f5e
c000e443:	c3                   	ret    

c000e444 <zoh_get_description>:
c000e444:	31 c0                	xor    eax,eax
c000e446:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e44b:	75 05                	jne    c000e452 <zoh_get_description+0xe>
c000e44d:	b8 6f 9f 02 c0       	mov    eax,0xc0029f6f
c000e452:	c3                   	ret    

c000e453 <zoh_set_converter>:
c000e453:	53                   	push   ebx
c000e454:	b8 0a 00 00 00       	mov    eax,0xa
c000e459:	83 ec 08             	sub    esp,0x8
c000e45c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e460:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e465:	75 6e                	jne    c000e4d5 <zoh_set_converter+0x82>
c000e467:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e46a:	85 c0                	test   eax,eax
c000e46c:	74 13                	je     c000e481 <zoh_set_converter+0x2e>
c000e46e:	83 ec 0c             	sub    esp,0xc
c000e471:	50                   	push   eax
c000e472:	e8 e4 13 00 00       	call   c000f85b <free>
c000e477:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e47e:	83 c4 10             	add    esp,0x10
c000e481:	50                   	push   eax
c000e482:	50                   	push   eax
c000e483:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e486:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e48d:	50                   	push   eax
c000e48e:	6a 01                	push   0x1
c000e490:	e8 e6 13 00 00       	call   c000f87b <calloc>
c000e495:	83 c4 10             	add    esp,0x10
c000e498:	89 c2                	mov    edx,eax
c000e49a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e49d:	85 d2                	test   edx,edx
c000e49f:	b8 01 00 00 00       	mov    eax,0x1
c000e4a4:	74 2f                	je     c000e4d5 <zoh_set_converter+0x82>
c000e4a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a9:	83 ec 0c             	sub    esp,0xc
c000e4ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4af:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4b5:	c7 43 24 5e dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd5e
c000e4bc:	c7 43 20 5e dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd5e
c000e4c3:	c7 43 28 03 e4 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e403
c000e4ca:	53                   	push   ebx
c000e4cb:	e8 33 ff ff ff       	call   c000e403 <zoh_reset>
c000e4d0:	83 c4 10             	add    esp,0x10
c000e4d3:	31 c0                	xor    eax,eax
c000e4d5:	83 c4 08             	add    esp,0x8
c000e4d8:	5b                   	pop    ebx
c000e4d9:	c3                   	ret    

c000e4da <CPU::current()>:
c000e4da:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c000e4df:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4e5:	90                   	nop
c000e4e6:	c3                   	ret    

c000e4e7 <operator new(unsigned long)>:
c000e4e7:	83 ec 0c             	sub    esp,0xc
c000e4ea:	83 ec 0c             	sub    esp,0xc
c000e4ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4f1:	e8 55 13 00 00       	call   c000f84b <malloc>
c000e4f6:	83 c4 10             	add    esp,0x10
c000e4f9:	83 c4 0c             	add    esp,0xc
c000e4fc:	c3                   	ret    

c000e4fd <Krnl::resolveCompatibilitySymbol(char*)>:
c000e4fd:	83 ec 0c             	sub    esp,0xc
c000e500:	83 ec 08             	sub    esp,0x8
c000e503:	68 a6 9f 02 c0       	push   0xc0029fa6
c000e508:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e50c:	e8 b7 23 ff ff       	call   c00008c8 <strcmp>
c000e511:	83 c4 10             	add    esp,0x10
c000e514:	85 c0                	test   eax,eax
c000e516:	0f 94 c0             	sete   al
c000e519:	84 c0                	test   al,al
c000e51b:	74 0a                	je     c000e527 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e51d:	b8 68 e4 02 c0       	mov    eax,0xc002e468
c000e522:	e9 e3 00 00 00       	jmp    c000e60a <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e527:	83 ec 08             	sub    esp,0x8
c000e52a:	68 af 9f 02 c0       	push   0xc0029faf
c000e52f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e533:	e8 90 23 ff ff       	call   c00008c8 <strcmp>
c000e538:	83 c4 10             	add    esp,0x10
c000e53b:	85 c0                	test   eax,eax
c000e53d:	0f 94 c0             	sete   al
c000e540:	84 c0                	test   al,al
c000e542:	74 0a                	je     c000e54e <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e544:	b8 c4 69 02 c0       	mov    eax,0xc00269c4
c000e549:	e9 bc 00 00 00       	jmp    c000e60a <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e54e:	83 ec 08             	sub    esp,0x8
c000e551:	68 b9 9f 02 c0       	push   0xc0029fb9
c000e556:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e55a:	e8 69 23 ff ff       	call   c00008c8 <strcmp>
c000e55f:	83 c4 10             	add    esp,0x10
c000e562:	85 c0                	test   eax,eax
c000e564:	0f 94 c0             	sete   al
c000e567:	84 c0                	test   al,al
c000e569:	74 0a                	je     c000e575 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e56b:	b8 f8 66 02 c0       	mov    eax,0xc00266f8
c000e570:	e9 95 00 00 00       	jmp    c000e60a <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e575:	83 ec 08             	sub    esp,0x8
c000e578:	68 c2 9f 02 c0       	push   0xc0029fc2
c000e57d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e581:	e8 42 23 ff ff       	call   c00008c8 <strcmp>
c000e586:	83 c4 10             	add    esp,0x10
c000e589:	85 c0                	test   eax,eax
c000e58b:	0f 94 c0             	sete   al
c000e58e:	84 c0                	test   al,al
c000e590:	74 07                	je     c000e599 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e592:	b8 c4 6a 02 c0       	mov    eax,0xc0026ac4
c000e597:	eb 71                	jmp    c000e60a <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e599:	83 ec 08             	sub    esp,0x8
c000e59c:	68 cc 9f 02 c0       	push   0xc0029fcc
c000e5a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5a5:	e8 1e 23 ff ff       	call   c00008c8 <strcmp>
c000e5aa:	83 c4 10             	add    esp,0x10
c000e5ad:	85 c0                	test   eax,eax
c000e5af:	0f 94 c0             	sete   al
c000e5b2:	84 c0                	test   al,al
c000e5b4:	74 07                	je     c000e5bd <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5b6:	b8 44 68 02 c0       	mov    eax,0xc0026844
c000e5bb:	eb 4d                	jmp    c000e60a <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5bd:	83 ec 08             	sub    esp,0x8
c000e5c0:	68 d5 9f 02 c0       	push   0xc0029fd5
c000e5c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c9:	e8 fa 22 ff ff       	call   c00008c8 <strcmp>
c000e5ce:	83 c4 10             	add    esp,0x10
c000e5d1:	85 c0                	test   eax,eax
c000e5d3:	0f 94 c0             	sete   al
c000e5d6:	84 c0                	test   al,al
c000e5d8:	74 07                	je     c000e5e1 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e5da:	b8 6c e4 02 c0       	mov    eax,0xc002e46c
c000e5df:	eb 29                	jmp    c000e60a <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5e1:	83 ec 08             	sub    esp,0x8
c000e5e4:	68 e2 9f 02 c0       	push   0xc0029fe2
c000e5e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5ed:	e8 d6 22 ff ff       	call   c00008c8 <strcmp>
c000e5f2:	83 c4 10             	add    esp,0x10
c000e5f5:	85 c0                	test   eax,eax
c000e5f7:	0f 94 c0             	sete   al
c000e5fa:	84 c0                	test   al,al
c000e5fc:	74 07                	je     c000e605 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e5fe:	b8 6d e4 02 c0       	mov    eax,0xc002e46d
c000e603:	eb 05                	jmp    c000e60a <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e605:	b8 00 00 00 00       	mov    eax,0x0
c000e60a:	83 c4 0c             	add    esp,0xc
c000e60d:	c3                   	ret    

c000e60e <Computer::close(int, int, void*)>:
c000e60e:	57                   	push   edi
c000e60f:	56                   	push   esi
c000e610:	53                   	push   ebx
c000e611:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e615:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e619:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e61d:	83 ec 0c             	sub    esp,0xc
c000e620:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e626:	e8 3b 5d 00 00       	call   c0014366 <Device::closeAll()>
c000e62b:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e631:	83 c4 10             	add    esp,0x10
c000e634:	8b 10                	mov    edx,DWORD PTR [eax]
c000e636:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e63a:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e642:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e646:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e64a:	5b                   	pop    ebx
c000e64b:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e64e:	5e                   	pop    esi
c000e64f:	5f                   	pop    edi
c000e650:	ff e0                	jmp    eax

c000e652 <Krnl::firstTask()>:
c000e652:	53                   	push   ebx
c000e653:	83 ec 14             	sub    esp,0x14
c000e656:	fb                   	sti    
c000e657:	68 3f 07 00 00       	push   0x73f
c000e65c:	e8 ea 11 00 00       	call   c000f84b <malloc>
c000e661:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e668:	89 c3                	mov    ebx,eax
c000e66a:	ff 35 d4 19 03 c0    	push   DWORD PTR ds:0xc00319d4
c000e670:	68 ef 9f 02 c0       	push   0xc0029fef
c000e675:	6a 01                	push   0x1
c000e677:	50                   	push   eax
c000e678:	e8 93 f4 00 00       	call   c001db10 <Process::Process(bool, char const*, Process*, char**)>
c000e67d:	83 c4 20             	add    esp,0x20
c000e680:	68 ff 00 00 00       	push   0xff
c000e685:	6a 00                	push   0x0
c000e687:	68 dd f1 00 c0       	push   0xc000f1dd
c000e68c:	53                   	push   ebx
c000e68d:	e8 7c f7 00 00       	call   c001de0e <Process::createThread(void (*)(void*), void*, int)>
c000e692:	6a 7a                	push   0x7a
c000e694:	6a 00                	push   0x0
c000e696:	68 a6 e6 01 c0       	push   0xc001e6a6
c000e69b:	ff 35 d4 19 03 c0    	push   DWORD PTR ds:0xc00319d4
c000e6a1:	e8 68 f7 00 00       	call   c001de0e <Process::createThread(void (*)(void*), void*, int)>
c000e6a6:	83 c4 20             	add    esp,0x20
c000e6a9:	a3 88 19 03 c0       	mov    ds:0xc0031988,eax
c000e6ae:	c6 05 6d e4 02 c0 01 	mov    BYTE PTR ds:0xc002e46d,0x1
c000e6b5:	e8 6d 03 01 00       	call   c001ea27 <Vm::initialise8086()>
c000e6ba:	e8 8f 4a 00 00       	call   c001314e <Fs::initVFS()>
c000e6bf:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c000e6c4:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e6ca:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6cc:	6a 00                	push   0x0
c000e6ce:	6a 00                	push   0x0
c000e6d0:	6a 00                	push   0x0
c000e6d2:	50                   	push   eax
c000e6d3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e6d6:	e8 c5 dd 00 00       	call   c001c4a0 <Sys::loadSyscalls()>
c000e6db:	e8 e8 bc 00 00       	call   c001a3c8 <Krnl::loadSystemEnv()>
c000e6e0:	83 c4 0c             	add    esp,0xc
c000e6e3:	6a 3a                	push   0x3a
c000e6e5:	68 fc 9f 02 c0       	push   0xc0029ffc
c000e6ea:	68 05 a0 02 c0       	push   0xc002a005
c000e6ef:	e8 fa c9 00 00       	call   c001b0ee <Reg::readIntWithDefault(char*, char*, int)>
c000e6f4:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6f7:	e8 3a 55 00 00       	call   c0013c36 <User::loadClockSettings(int)>
c000e6fc:	58                   	pop    eax
c000e6fd:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c000e702:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e708:	e8 2d 5c 00 00       	call   c001433a <Device::loadDriversForAll()>
c000e70d:	e8 fc b7 00 00       	call   c0019f0e <Krnl::startCPUs()>
c000e712:	5a                   	pop    edx
c000e713:	8b 1d 68 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e468
c000e719:	59                   	pop    ecx
c000e71a:	6a 01                	push   0x1
c000e71c:	68 0d a0 02 c0       	push   0xc002a00d
c000e721:	e8 0e ef 00 00       	call   c001d634 <Thr::loadDLL(char const*, bool)>
c000e726:	5a                   	pop    edx
c000e727:	59                   	pop    ecx
c000e728:	53                   	push   ebx
c000e729:	50                   	push   eax
c000e72a:	e8 39 f1 00 00       	call   c001d868 <Thr::executeDLL(unsigned long, void*)>
c000e72f:	83 c4 10             	add    esp,0x10
c000e732:	83 ec 0c             	sub    esp,0xc
c000e735:	6a 02                	push   0x2
c000e737:	e8 70 fa 00 00       	call   c001e1ac <blockTask(TaskState)>
c000e73c:	83 c4 10             	add    esp,0x10
c000e73f:	eb f1                	jmp    c000e732 <Krnl::firstTask()+0xe0>
c000e741:	90                   	nop

c000e742 <Computer::Computer()>:
c000e742:	83 ec 0c             	sub    esp,0xc
c000e745:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e749:	83 ec 08             	sub    esp,0x8
c000e74c:	68 29 a0 02 c0       	push   0xc002a029
c000e751:	50                   	push   eax
c000e752:	e8 89 5c 00 00       	call   c00143e0 <Device::Device(char const*)>
c000e757:	83 c4 10             	add    esp,0x10
c000e75a:	ba c8 a1 02 c0       	mov    edx,0xc002a1c8
c000e75f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e763:	89 10                	mov    DWORD PTR [eax],edx
c000e765:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e769:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e773:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e777:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e781:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e785:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e78b:	83 ca 04             	or     edx,0x4
c000e78e:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e798:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e79e:	0f b6 d0             	movzx  edx,al
c000e7a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a5:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7b6:	0f b6 d0             	movzx  edx,al
c000e7b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7bd:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e7c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7c6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7cc:	8d 50 01             	lea    edx,[eax+0x1]
c000e7cf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e7d3:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e7d9:	0f b6 d0             	movzx  edx,al
c000e7dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e7e4:	83 e1 3f             	and    ecx,0x3f
c000e7e7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e7eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ef:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7f5:	0f b6 d0             	movzx  edx,al
c000e7f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7fc:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e803:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e807:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e80d:	0f b6 d0             	movzx  edx,al
c000e810:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e814:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e819:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e81d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e823:	8d 50 01             	lea    edx,[eax+0x1]
c000e826:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e82a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e830:	0f b6 d0             	movzx  edx,al
c000e833:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e837:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e83b:	83 e1 3f             	and    ecx,0x3f
c000e83e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e846:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e84c:	0f b6 d0             	movzx  edx,al
c000e84f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e853:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e85a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e864:	0f b6 d0             	movzx  edx,al
c000e867:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86b:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e874:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e87a:	8d 50 01             	lea    edx,[eax+0x1]
c000e87d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e881:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e887:	0f b6 d0             	movzx  edx,al
c000e88a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e88e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e892:	83 e1 3f             	and    ecx,0x3f
c000e895:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e899:	90                   	nop
c000e89a:	83 c4 0c             	add    esp,0xc
c000e89d:	c3                   	ret    

c000e89e <Computer::setBootMessage(char const*)>:
c000e89e:	c3                   	ret    
c000e89f:	90                   	nop

c000e8a0 <Computer::detectFeatures()>:
c000e8a0:	55                   	push   ebp
c000e8a1:	57                   	push   edi
c000e8a2:	56                   	push   esi
c000e8a3:	53                   	push   ebx
c000e8a4:	83 ec 1c             	sub    esp,0x1c
c000e8a7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8ab:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8b5:	e8 2a 1a ff ff       	call   c00002e4 <detectCPUID>
c000e8ba:	85 c0                	test   eax,eax
c000e8bc:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8c2:	0f 95 c2             	setne  dl
c000e8c5:	83 e0 fd             	and    eax,0xfffffffd
c000e8c8:	d1 e2                	shl    edx,1
c000e8ca:	09 d0                	or     eax,edx
c000e8cc:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8d2:	a8 02                	test   al,0x2
c000e8d4:	75 46                	jne    c000e91c <Computer::detectFeatures()+0x7c>
c000e8d6:	f6 05 81 e4 02 c0 04 	test   BYTE PTR ds:0xc002e481,0x4
c000e8dd:	74 07                	je     c000e8e6 <Computer::detectFeatures()+0x46>
c000e8df:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e8e6:	e8 9b 7d 01 00       	call   c0026686 <x87Detect>
c000e8eb:	83 e0 01             	and    eax,0x1
c000e8ee:	c1 e0 04             	shl    eax,0x4
c000e8f1:	88 c2                	mov    dl,al
c000e8f3:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8f9:	83 e0 ef             	and    eax,0xffffffef
c000e8fc:	09 d0                	or     eax,edx
c000e8fe:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e904:	a8 10                	test   al,0x10
c000e906:	0f 85 2a 01 00 00    	jne    c000ea36 <Computer::detectFeatures()+0x196>
c000e90c:	84 c0                	test   al,al
c000e90e:	0f 88 45 01 00 00    	js     c000ea59 <Computer::detectFeatures()+0x1b9>
c000e914:	83 c4 1c             	add    esp,0x1c
c000e917:	5b                   	pop    ebx
c000e918:	5e                   	pop    esi
c000e919:	5f                   	pop    edi
c000e91a:	5d                   	pop    ebp
c000e91b:	c3                   	ret    
c000e91c:	83 ec 0c             	sub    esp,0xc
c000e91f:	6a 20                	push   0x20
c000e921:	e8 fa a2 00 00       	call   c0018c20 <CPU::cpuidCheckEDX(unsigned int)>
c000e926:	83 e0 01             	and    eax,0x1
c000e929:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e930:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e936:	83 e0 f7             	and    eax,0xfffffff7
c000e939:	09 d0                	or     eax,edx
c000e93b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e941:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e948:	e8 d3 a2 00 00       	call   c0018c20 <CPU::cpuidCheckEDX(unsigned int)>
c000e94d:	83 e0 01             	and    eax,0x1
c000e950:	88 c2                	mov    dl,al
c000e952:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e958:	83 e0 fe             	and    eax,0xfffffffe
c000e95b:	09 d0                	or     eax,edx
c000e95d:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e963:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e96a:	e8 b1 a2 00 00       	call   c0018c20 <CPU::cpuidCheckEDX(unsigned int)>
c000e96f:	c1 e0 07             	shl    eax,0x7
c000e972:	88 c2                	mov    dl,al
c000e974:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e97a:	83 e0 7f             	and    eax,0x7f
c000e97d:	09 d0                	or     eax,edx
c000e97f:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e985:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e98c:	e8 8f a2 00 00       	call   c0018c20 <CPU::cpuidCheckEDX(unsigned int)>
c000e991:	83 c4 10             	add    esp,0x10
c000e994:	83 e0 01             	and    eax,0x1
c000e997:	c1 e0 05             	shl    eax,0x5
c000e99a:	88 c2                	mov    dl,al
c000e99c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9a2:	83 e0 df             	and    eax,0xffffffdf
c000e9a5:	09 d0                	or     eax,edx
c000e9a7:	f7 05 80 e4 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e480,0x401
c000e9b1:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9b7:	0f 84 c2 00 00 00    	je     c000ea7f <Computer::detectFeatures()+0x1df>
c000e9bd:	83 e0 fe             	and    eax,0xfffffffe
c000e9c0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9c6:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9cc:	88 c2                	mov    dl,al
c000e9ce:	83 e2 09             	and    edx,0x9
c000e9d1:	fe ca                	dec    dl
c000e9d3:	75 09                	jne    c000e9de <Computer::detectFeatures()+0x13e>
c000e9d5:	83 e0 fe             	and    eax,0xfffffffe
c000e9d8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9de:	83 ec 0c             	sub    esp,0xc
c000e9e1:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e9e5:	50                   	push   eax
c000e9e6:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e9ea:	55                   	push   ebp
c000e9eb:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e9ef:	57                   	push   edi
c000e9f0:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e9f4:	56                   	push   esi
c000e9f5:	68 00 00 00 80       	push   0x80000000
c000e9fa:	e8 9d a1 00 00       	call   c0018b9c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e9ff:	83 c4 20             	add    esp,0x20
c000ea02:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea09:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea0d:	0f 86 c3 fe ff ff    	jbe    c000e8d6 <Computer::detectFeatures()+0x36>
c000ea13:	83 ec 0c             	sub    esp,0xc
c000ea16:	50                   	push   eax
c000ea17:	55                   	push   ebp
c000ea18:	57                   	push   edi
c000ea19:	56                   	push   esi
c000ea1a:	68 01 00 00 80       	push   0x80000001
c000ea1f:	e8 78 a1 00 00       	call   c0018b9c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea24:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea2e:	83 c4 20             	add    esp,0x20
c000ea31:	e9 a0 fe ff ff       	jmp    c000e8d6 <Computer::detectFeatures()+0x36>
c000ea36:	e8 05 7c 01 00       	call   c0026640 <absolutelyNoChanceInHell>
c000ea3b:	88 c2                	mov    dl,al
c000ea3d:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea43:	c1 e2 07             	shl    edx,0x7
c000ea46:	83 e0 7f             	and    eax,0x7f
c000ea49:	09 d0                	or     eax,edx
c000ea4b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea51:	84 c0                	test   al,al
c000ea53:	0f 89 bb fe ff ff    	jns    c000e914 <Computer::detectFeatures()+0x74>
c000ea59:	e8 c2 7b 01 00       	call   c0026620 <avxDetect>
c000ea5e:	83 e0 01             	and    eax,0x1
c000ea61:	c1 e0 05             	shl    eax,0x5
c000ea64:	88 c2                	mov    dl,al
c000ea66:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea6c:	83 e0 df             	and    eax,0xffffffdf
c000ea6f:	09 d0                	or     eax,edx
c000ea71:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea77:	83 c4 1c             	add    esp,0x1c
c000ea7a:	5b                   	pop    ebx
c000ea7b:	5e                   	pop    esi
c000ea7c:	5f                   	pop    edi
c000ea7d:	5d                   	pop    ebp
c000ea7e:	c3                   	ret    
c000ea7f:	83 ec 0c             	sub    esp,0xc
c000ea82:	68 00 02 00 00       	push   0x200
c000ea87:	e8 94 a1 00 00       	call   c0018c20 <CPU::cpuidCheckEDX(unsigned int)>
c000ea8c:	83 c4 10             	add    esp,0x10
c000ea8f:	83 e0 01             	and    eax,0x1
c000ea92:	88 c2                	mov    dl,al
c000ea94:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea9a:	83 e0 fe             	and    eax,0xfffffffe
c000ea9d:	09 d0                	or     eax,edx
c000ea9f:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eaa5:	e9 1c ff ff ff       	jmp    c000e9c6 <Computer::detectFeatures()+0x126>

c000eaaa <Computer::displayFeatures()>:
c000eaaa:	53                   	push   ebx
c000eaab:	83 ec 14             	sub    esp,0x14
c000eaae:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eab2:	68 39 a0 02 c0       	push   0xc002a039
c000eab7:	e8 07 43 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000eabc:	83 c4 10             	add    esp,0x10
c000eabf:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eac6:	0f 85 73 02 00 00    	jne    c000ed3f <Computer::displayFeatures()+0x295>
c000eacc:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000ead1:	83 ec 08             	sub    esp,0x8
c000ead4:	50                   	push   eax
c000ead5:	68 4c a0 02 c0       	push   0xc002a04c
c000eada:	e8 e4 42 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000eadf:	83 c4 10             	add    esp,0x10
c000eae2:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eae9:	0f 85 8c 02 00 00    	jne    c000ed7b <Computer::displayFeatures()+0x2d1>
c000eaef:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000eaf4:	83 ec 08             	sub    esp,0x8
c000eaf7:	50                   	push   eax
c000eaf8:	68 5d a0 02 c0       	push   0xc002a05d
c000eafd:	e8 c1 42 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000eb02:	83 c4 10             	add    esp,0x10
c000eb05:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb0c:	0f 85 5f 02 00 00    	jne    c000ed71 <Computer::displayFeatures()+0x2c7>
c000eb12:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000eb17:	83 ec 08             	sub    esp,0x8
c000eb1a:	50                   	push   eax
c000eb1b:	68 6e a0 02 c0       	push   0xc002a06e
c000eb20:	e8 9e 42 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000eb25:	83 c4 10             	add    esp,0x10
c000eb28:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb2f:	0f 85 32 02 00 00    	jne    c000ed67 <Computer::displayFeatures()+0x2bd>
c000eb35:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000eb3a:	83 ec 08             	sub    esp,0x8
c000eb3d:	50                   	push   eax
c000eb3e:	68 7f a0 02 c0       	push   0xc002a07f
c000eb43:	e8 7b 42 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000eb48:	83 c4 10             	add    esp,0x10
c000eb4b:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb52:	0f 85 05 02 00 00    	jne    c000ed5d <Computer::displayFeatures()+0x2b3>
c000eb58:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000eb5d:	83 ec 08             	sub    esp,0x8
c000eb60:	50                   	push   eax
c000eb61:	68 90 a0 02 c0       	push   0xc002a090
c000eb66:	e8 58 42 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000eb6b:	83 c4 10             	add    esp,0x10
c000eb6e:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000eb75:	0f 85 d8 01 00 00    	jne    c000ed53 <Computer::displayFeatures()+0x2a9>
c000eb7b:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000eb80:	83 ec 08             	sub    esp,0x8
c000eb83:	50                   	push   eax
c000eb84:	68 a1 a0 02 c0       	push   0xc002a0a1
c000eb89:	e8 35 42 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000eb8e:	83 c4 10             	add    esp,0x10
c000eb91:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000eb98:	0f 85 ab 01 00 00    	jne    c000ed49 <Computer::displayFeatures()+0x29f>
c000eb9e:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000eba3:	83 ec 08             	sub    esp,0x8
c000eba6:	50                   	push   eax
c000eba7:	68 b2 a0 02 c0       	push   0xc002a0b2
c000ebac:	e8 12 42 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000ebb1:	83 c4 10             	add    esp,0x10
c000ebb4:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebbb:	0f 88 1b 02 00 00    	js     c000eddc <Computer::displayFeatures()+0x332>
c000ebc1:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000ebc6:	83 ec 08             	sub    esp,0x8
c000ebc9:	50                   	push   eax
c000ebca:	68 c3 a0 02 c0       	push   0xc002a0c3
c000ebcf:	e8 ef 41 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000ebd4:	83 c4 10             	add    esp,0x10
c000ebd7:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ebde:	0f 85 a1 01 00 00    	jne    c000ed85 <Computer::displayFeatures()+0x2db>
c000ebe4:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000ebe9:	83 ec 08             	sub    esp,0x8
c000ebec:	50                   	push   eax
c000ebed:	68 d4 a0 02 c0       	push   0xc002a0d4
c000ebf2:	e8 cc 41 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000ebf7:	83 c4 10             	add    esp,0x10
c000ebfa:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ec01:	0f 85 cb 01 00 00    	jne    c000edd2 <Computer::displayFeatures()+0x328>
c000ec07:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000ec0c:	83 ec 08             	sub    esp,0x8
c000ec0f:	50                   	push   eax
c000ec10:	68 e5 a0 02 c0       	push   0xc002a0e5
c000ec15:	e8 a9 41 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000ec1a:	83 c4 10             	add    esp,0x10
c000ec1d:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec24:	0f 85 9e 01 00 00    	jne    c000edc8 <Computer::displayFeatures()+0x31e>
c000ec2a:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000ec2f:	83 ec 08             	sub    esp,0x8
c000ec32:	50                   	push   eax
c000ec33:	68 f6 a0 02 c0       	push   0xc002a0f6
c000ec38:	e8 86 41 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000ec3d:	83 c4 10             	add    esp,0x10
c000ec40:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec47:	0f 85 71 01 00 00    	jne    c000edbe <Computer::displayFeatures()+0x314>
c000ec4d:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000ec52:	83 ec 08             	sub    esp,0x8
c000ec55:	50                   	push   eax
c000ec56:	68 07 a1 02 c0       	push   0xc002a107
c000ec5b:	e8 63 41 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000ec60:	83 c4 10             	add    esp,0x10
c000ec63:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ec6a:	0f 85 44 01 00 00    	jne    c000edb4 <Computer::displayFeatures()+0x30a>
c000ec70:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000ec75:	83 ec 08             	sub    esp,0x8
c000ec78:	50                   	push   eax
c000ec79:	68 18 a1 02 c0       	push   0xc002a118
c000ec7e:	e8 40 41 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000ec83:	83 c4 10             	add    esp,0x10
c000ec86:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ec8d:	0f 85 17 01 00 00    	jne    c000edaa <Computer::displayFeatures()+0x300>
c000ec93:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000ec98:	83 ec 08             	sub    esp,0x8
c000ec9b:	50                   	push   eax
c000ec9c:	68 29 a1 02 c0       	push   0xc002a129
c000eca1:	e8 1d 41 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000eca6:	83 c4 10             	add    esp,0x10
c000eca9:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000ecb0:	0f 85 ea 00 00 00    	jne    c000eda0 <Computer::displayFeatures()+0x2f6>
c000ecb6:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000ecbb:	83 ec 08             	sub    esp,0x8
c000ecbe:	50                   	push   eax
c000ecbf:	68 3a a1 02 c0       	push   0xc002a13a
c000ecc4:	e8 fa 40 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000ecc9:	83 c4 10             	add    esp,0x10
c000eccc:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000ecd3:	0f 88 0d 01 00 00    	js     c000ede6 <Computer::displayFeatures()+0x33c>
c000ecd9:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000ecde:	83 ec 08             	sub    esp,0x8
c000ece1:	50                   	push   eax
c000ece2:	68 4b a1 02 c0       	push   0xc002a14b
c000ece7:	e8 d7 40 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000ecec:	83 c4 10             	add    esp,0x10
c000ecef:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ecf6:	0f 85 9a 00 00 00    	jne    c000ed96 <Computer::displayFeatures()+0x2ec>
c000ecfc:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000ed01:	83 ec 08             	sub    esp,0x8
c000ed04:	50                   	push   eax
c000ed05:	68 5c a1 02 c0       	push   0xc002a15c
c000ed0a:	e8 b4 40 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000ed0f:	83 c4 10             	add    esp,0x10
c000ed12:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed19:	75 74                	jne    c000ed8f <Computer::displayFeatures()+0x2e5>
c000ed1b:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000ed20:	83 ec 08             	sub    esp,0x8
c000ed23:	50                   	push   eax
c000ed24:	68 6d a1 02 c0       	push   0xc002a16d
c000ed29:	e8 95 40 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000ed2e:	c7 44 24 20 20 bb 02 c0 	mov    DWORD PTR [esp+0x20],0xc002bb20
c000ed36:	83 c4 18             	add    esp,0x18
c000ed39:	5b                   	pop    ebx
c000ed3a:	e9 84 40 00 00       	jmp    c0012dc3 <Dbg::kprintf(char const*, ...)>
c000ed3f:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000ed44:	e9 88 fd ff ff       	jmp    c000ead1 <Computer::displayFeatures()+0x27>
c000ed49:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000ed4e:	e9 50 fe ff ff       	jmp    c000eba3 <Computer::displayFeatures()+0xf9>
c000ed53:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000ed58:	e9 23 fe ff ff       	jmp    c000eb80 <Computer::displayFeatures()+0xd6>
c000ed5d:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000ed62:	e9 f6 fd ff ff       	jmp    c000eb5d <Computer::displayFeatures()+0xb3>
c000ed67:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000ed6c:	e9 c9 fd ff ff       	jmp    c000eb3a <Computer::displayFeatures()+0x90>
c000ed71:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000ed76:	e9 9c fd ff ff       	jmp    c000eb17 <Computer::displayFeatures()+0x6d>
c000ed7b:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000ed80:	e9 6f fd ff ff       	jmp    c000eaf4 <Computer::displayFeatures()+0x4a>
c000ed85:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000ed8a:	e9 5a fe ff ff       	jmp    c000ebe9 <Computer::displayFeatures()+0x13f>
c000ed8f:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000ed94:	eb 8a                	jmp    c000ed20 <Computer::displayFeatures()+0x276>
c000ed96:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000ed9b:	e9 61 ff ff ff       	jmp    c000ed01 <Computer::displayFeatures()+0x257>
c000eda0:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000eda5:	e9 11 ff ff ff       	jmp    c000ecbb <Computer::displayFeatures()+0x211>
c000edaa:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000edaf:	e9 e4 fe ff ff       	jmp    c000ec98 <Computer::displayFeatures()+0x1ee>
c000edb4:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000edb9:	e9 b7 fe ff ff       	jmp    c000ec75 <Computer::displayFeatures()+0x1cb>
c000edbe:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000edc3:	e9 8a fe ff ff       	jmp    c000ec52 <Computer::displayFeatures()+0x1a8>
c000edc8:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000edcd:	e9 5d fe ff ff       	jmp    c000ec2f <Computer::displayFeatures()+0x185>
c000edd2:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000edd7:	e9 30 fe ff ff       	jmp    c000ec0c <Computer::displayFeatures()+0x162>
c000eddc:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000ede1:	e9 e0 fd ff ff       	jmp    c000ebc6 <Computer::displayFeatures()+0x11c>
c000ede6:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000edeb:	e9 ee fe ff ff       	jmp    c000ecde <Computer::displayFeatures()+0x234>

c000edf0 <Computer::rdmsr(unsigned int)>:
c000edf0:	83 ec 0c             	sub    esp,0xc
c000edf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edf7:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edfe:	74 0a                	je     c000ee0a <Computer::rdmsr(unsigned int)+0x1a>
c000ee00:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee04:	0f 32                	rdmsr  
c000ee06:	83 c4 0c             	add    esp,0xc
c000ee09:	c3                   	ret    
c000ee0a:	83 ec 0c             	sub    esp,0xc
c000ee0d:	68 7e a1 02 c0       	push   0xc002a17e
c000ee12:	e8 ea b6 00 00       	call   c001a501 <Krnl::panic(char const*)>
c000ee17:	83 c4 10             	add    esp,0x10
c000ee1a:	eb e4                	jmp    c000ee00 <Computer::rdmsr(unsigned int)+0x10>

c000ee1c <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee1c:	57                   	push   edi
c000ee1d:	56                   	push   esi
c000ee1e:	52                   	push   edx
c000ee1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee23:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee27:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee2b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee32:	74 0e                	je     c000ee42 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee34:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee38:	89 f0                	mov    eax,esi
c000ee3a:	89 fa                	mov    edx,edi
c000ee3c:	0f 30                	wrmsr  
c000ee3e:	58                   	pop    eax
c000ee3f:	5e                   	pop    esi
c000ee40:	5f                   	pop    edi
c000ee41:	c3                   	ret    
c000ee42:	83 ec 0c             	sub    esp,0xc
c000ee45:	68 84 a1 02 c0       	push   0xc002a184
c000ee4a:	e8 b2 b6 00 00       	call   c001a501 <Krnl::panic(char const*)>
c000ee4f:	83 c4 10             	add    esp,0x10
c000ee52:	eb e0                	jmp    c000ee34 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee54 <Computer::nmiEnabled()>:
c000ee54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee58:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ee5e:	c3                   	ret    
c000ee5f:	90                   	nop

c000ee60 <Computer::readCMOS(unsigned char)>:
c000ee60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee64:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ee6b:	19 c0                	sbb    eax,eax
c000ee6d:	83 e0 80             	and    eax,0xffffff80
c000ee70:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee74:	e6 70                	out    0x70,al
c000ee76:	e4 71                	in     al,0x71
c000ee78:	c3                   	ret    
c000ee79:	90                   	nop

c000ee7a <Computer::enableNMI(bool)>:
c000ee7a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee82:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee88:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee90:	eb ce                	jmp    c000ee60 <Computer::readCMOS(unsigned char)>

c000ee92 <Computer::open(int, int, void*)>:
c000ee92:	56                   	push   esi
c000ee93:	53                   	push   ebx
c000ee94:	83 ec 10             	sub    esp,0x10
c000ee97:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee9b:	f6 05 80 e4 02 c0 04 	test   BYTE PTR ds:0xc002e480,0x4
c000eea2:	68 68 12 00 00       	push   0x1268
c000eea7:	0f 94 05 a4 d3 02 c0 	sete   BYTE PTR ds:0xc002d3a4
c000eeae:	e8 98 09 00 00       	call   c000f84b <malloc>
c000eeb3:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeb6:	89 c6                	mov    esi,eax
c000eeb8:	e8 27 92 00 00       	call   c00180e4 <ACPI::ACPI()>
c000eebd:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eec3:	58                   	pop    eax
c000eec4:	5a                   	pop    edx
c000eec5:	56                   	push   esi
c000eec6:	53                   	push   ebx
c000eec7:	e8 24 53 00 00       	call   c00141f0 <Device::addChild(Device*)>
c000eecc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eecf:	e8 cc f9 ff ff       	call   c000e8a0 <Computer::detectFeatures()>
c000eed4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eed7:	e8 ce fb ff ff       	call   c000eaaa <Computer::displayFeatures()>
c000eedc:	59                   	pop    ecx
c000eedd:	5e                   	pop    esi
c000eede:	6a 01                	push   0x1
c000eee0:	53                   	push   ebx
c000eee1:	e8 94 ff ff ff       	call   c000ee7a <Computer::enableNMI(bool)>
c000eee6:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eeed:	e8 59 09 00 00       	call   c000f84b <malloc>
c000eef2:	89 04 24             	mov    DWORD PTR [esp],eax
c000eef5:	89 c6                	mov    esi,eax
c000eef7:	e8 dc 9d 00 00       	call   c0018cd8 <CPU::CPU()>
c000eefc:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ef02:	58                   	pop    eax
c000ef03:	5a                   	pop    edx
c000ef04:	56                   	push   esi
c000ef05:	53                   	push   ebx
c000ef06:	e8 e5 52 00 00       	call   c00141f0 <Device::addChild(Device*)>
c000ef0b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef11:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef13:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef17:	6a 00                	push   0x0
c000ef19:	6a 00                	push   0x0
c000ef1b:	50                   	push   eax
c000ef1c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef1f:	83 c4 20             	add    esp,0x20
c000ef22:	e8 4f 58 00 00       	call   c0014776 <setupFPU()>
c000ef27:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef2d:	85 c0                	test   eax,eax
c000ef2f:	74 1f                	je     c000ef50 <Computer::open(int, int, void*)+0xbe>
c000ef31:	83 ec 08             	sub    esp,0x8
c000ef34:	50                   	push   eax
c000ef35:	53                   	push   ebx
c000ef36:	e8 b5 52 00 00       	call   c00141f0 <Device::addChild(Device*)>
c000ef3b:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef41:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef43:	6a 00                	push   0x0
c000ef45:	6a 00                	push   0x0
c000ef47:	6a 00                	push   0x0
c000ef49:	50                   	push   eax
c000ef4a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef4d:	83 c4 20             	add    esp,0x20
c000ef50:	83 ec 0c             	sub    esp,0xc
c000ef53:	68 52 e6 00 c0       	push   0xc000e652
c000ef58:	e8 d3 ef 00 00       	call   c001df30 <setupMultitasking(void (*)())>
c000ef5d:	83 c4 14             	add    esp,0x14
c000ef60:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef65:	5b                   	pop    ebx
c000ef66:	5e                   	pop    esi
c000ef67:	c3                   	ret    

c000ef68 <Computer::disableNMI()>:
c000ef68:	6a 00                	push   0x0
c000ef6a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef6e:	e8 07 ff ff ff       	call   c000ee7a <Computer::enableNMI(bool)>
c000ef73:	58                   	pop    eax
c000ef74:	5a                   	pop    edx
c000ef75:	c3                   	ret    

c000ef76 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ef76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef7a:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef81:	19 c0                	sbb    eax,eax
c000ef83:	83 e0 80             	and    eax,0xffffff80
c000ef86:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef8a:	e6 70                	out    0x70,al
c000ef8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef90:	e6 71                	out    0x71,al
c000ef92:	c3                   	ret    
c000ef93:	90                   	nop

c000ef94 <Computer::handleNMI()>:
c000ef94:	56                   	push   esi
c000ef95:	53                   	push   ebx
c000ef96:	83 ec 10             	sub    esp,0x10
c000ef99:	e4 92                	in     al,0x92
c000ef9b:	89 c6                	mov    esi,eax
c000ef9d:	e4 61                	in     al,0x61
c000ef9f:	68 8a a1 02 c0       	push   0xc002a18a
c000efa4:	88 c3                	mov    bl,al
c000efa6:	e8 18 3e 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000efab:	83 c4 10             	add    esp,0x10
c000efae:	83 e6 10             	and    esi,0x10
c000efb1:	75 0d                	jne    c000efc0 <Computer::handleNMI()+0x2c>
c000efb3:	f6 c3 40             	test   bl,0x40
c000efb6:	75 1d                	jne    c000efd5 <Computer::handleNMI()+0x41>
c000efb8:	84 db                	test   bl,bl
c000efba:	78 2d                	js     c000efe9 <Computer::handleNMI()+0x55>
c000efbc:	58                   	pop    eax
c000efbd:	5b                   	pop    ebx
c000efbe:	5e                   	pop    esi
c000efbf:	c3                   	ret    
c000efc0:	83 ec 0c             	sub    esp,0xc
c000efc3:	68 9b a1 02 c0       	push   0xc002a19b
c000efc8:	e8 34 b5 00 00       	call   c001a501 <Krnl::panic(char const*)>
c000efcd:	83 c4 10             	add    esp,0x10
c000efd0:	f6 c3 40             	test   bl,0x40
c000efd3:	74 e3                	je     c000efb8 <Computer::handleNMI()+0x24>
c000efd5:	83 ec 0c             	sub    esp,0xc
c000efd8:	68 a8 a1 02 c0       	push   0xc002a1a8
c000efdd:	e8 1f b5 00 00       	call   c001a501 <Krnl::panic(char const*)>
c000efe2:	83 c4 10             	add    esp,0x10
c000efe5:	84 db                	test   bl,bl
c000efe7:	79 d3                	jns    c000efbc <Computer::handleNMI()+0x28>
c000efe9:	c7 44 24 10 b2 a1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a1b2
c000eff1:	5a                   	pop    edx
c000eff2:	5b                   	pop    ebx
c000eff3:	5e                   	pop    esi
c000eff4:	e9 08 b5 00 00       	jmp    c001a501 <Krnl::panic(char const*)>
c000eff9:	90                   	nop

c000effa <Computer::setDiskActivityLight(int, bool)>:
c000effa:	56                   	push   esi
c000effb:	53                   	push   ebx
c000effc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f000:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f005:	77 1b                	ja     c000f022 <Computer::setDiskActivityLight(int, bool)+0x28>
c000f007:	e4 92                	in     al,0x92
c000f009:	bb 40 00 00 00       	mov    ebx,0x40
c000f00e:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f012:	89 da                	mov    edx,ebx
c000f014:	d3 e2                	shl    edx,cl
c000f016:	89 f1                	mov    ecx,esi
c000f018:	f7 d2                	not    edx
c000f01a:	d3 e3                	shl    ebx,cl
c000f01c:	21 d0                	and    eax,edx
c000f01e:	09 d8                	or     eax,ebx
c000f020:	e6 92                	out    0x92,al
c000f022:	5b                   	pop    ebx
c000f023:	5e                   	pop    esi
c000f024:	c3                   	ret    
c000f025:	90                   	nop

c000f026 <GDTEntry::setBase(unsigned int)>:
c000f026:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f02a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f02e:	89 c1                	mov    ecx,eax
c000f030:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f034:	c1 e9 10             	shr    ecx,0x10
c000f037:	c1 e8 18             	shr    eax,0x18
c000f03a:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f03d:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f040:	c3                   	ret    
c000f041:	90                   	nop

c000f042 <GDTEntry::setLimit(unsigned int)>:
c000f042:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f046:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f04a:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f04d:	66 89 01             	mov    WORD PTR [ecx],ax
c000f050:	83 e2 f0             	and    edx,0xfffffff0
c000f053:	c1 e8 10             	shr    eax,0x10
c000f056:	83 e0 0f             	and    eax,0xf
c000f059:	09 d0                	or     eax,edx
c000f05b:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f05e:	c3                   	ret    
c000f05f:	90                   	nop

c000f060 <GDT::GDT()>:
c000f060:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f064:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f06a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f06e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f074:	90                   	nop
c000f075:	c3                   	ret    

c000f076 <GDT::addEntry(GDTEntry)>:
c000f076:	53                   	push   ebx
c000f077:	83 ec 0c             	sub    esp,0xc
c000f07a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f07e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f080:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f087:	52                   	push   edx
c000f088:	50                   	push   eax
c000f089:	68 ec a1 02 c0       	push   0xc002a1ec
c000f08e:	e8 30 3d 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000f093:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f095:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f099:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f09d:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f0a1:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f0a5:	8d 50 01             	lea    edx,[eax+0x1]
c000f0a8:	c1 e0 03             	shl    eax,0x3
c000f0ab:	89 13                	mov    DWORD PTR [ebx],edx
c000f0ad:	83 c4 18             	add    esp,0x18
c000f0b0:	5b                   	pop    ebx
c000f0b1:	c3                   	ret    

c000f0b2 <GDT::getNumberOfEntries()>:
c000f0b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b8:	c3                   	ret    
c000f0b9:	90                   	nop

c000f0ba <GDT::flush()>:
c000f0ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0be:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0c0:	83 c0 04             	add    eax,0x4
c000f0c3:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0ca:	a3 72 e4 02 c0       	mov    ds:0xc002e472,eax
c000f0cf:	66 89 15 70 e4 02 c0 	mov    WORD PTR ds:0xc002e470,dx
c000f0d6:	e9 75 13 ff ff       	jmp    c0000450 <loadGDT>
c000f0db:	90                   	nop

c000f0dc <GDT::setup()>:
c000f0dc:	55                   	push   ebp
c000f0dd:	57                   	push   edi
c000f0de:	56                   	push   esi
c000f0df:	53                   	push   ebx
c000f0e0:	83 ec 3c             	sub    esp,0x3c
c000f0e3:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f0e7:	6a 00                	push   0x0
c000f0e9:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f0ed:	53                   	push   ebx
c000f0ee:	e8 33 ff ff ff       	call   c000f026 <GDTEntry::setBase(unsigned int)>
c000f0f3:	6a 00                	push   0x0
c000f0f5:	53                   	push   ebx
c000f0f6:	e8 47 ff ff ff       	call   c000f042 <GDTEntry::setLimit(unsigned int)>
c000f0fb:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f103:	6a 00                	push   0x0
c000f105:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f109:	53                   	push   ebx
c000f10a:	e8 17 ff ff ff       	call   c000f026 <GDTEntry::setBase(unsigned int)>
c000f10f:	68 ff ff ff 00       	push   0xffffff
c000f114:	53                   	push   ebx
c000f115:	e8 28 ff ff ff       	call   c000f042 <GDTEntry::setLimit(unsigned int)>
c000f11a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f11e:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f123:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f128:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f12c:	83 c4 20             	add    esp,0x20
c000f12f:	6a 00                	push   0x0
c000f131:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f135:	53                   	push   ebx
c000f136:	e8 eb fe ff ff       	call   c000f026 <GDTEntry::setBase(unsigned int)>
c000f13b:	68 ff ff ff 00       	push   0xffffff
c000f140:	53                   	push   ebx
c000f141:	e8 fc fe ff ff       	call   c000f042 <GDTEntry::setLimit(unsigned int)>
c000f146:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f14a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f14e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f152:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f156:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f15a:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f15f:	0d 00 92 c0 00       	or     eax,0xc09200
c000f164:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f168:	89 d8                	mov    eax,ebx
c000f16a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f16e:	80 cc 60             	or     ah,0x60
c000f171:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f175:	83 c4 0c             	add    esp,0xc
c000f178:	89 f8                	mov    eax,edi
c000f17a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f17e:	80 cc 60             	or     ah,0x60
c000f181:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f185:	89 c7                	mov    edi,eax
c000f187:	55                   	push   ebp
c000f188:	e8 e9 fe ff ff       	call   c000f076 <GDT::addEntry(GDTEntry)>
c000f18d:	83 c4 0c             	add    esp,0xc
c000f190:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f194:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f198:	55                   	push   ebp
c000f199:	e8 d8 fe ff ff       	call   c000f076 <GDT::addEntry(GDTEntry)>
c000f19e:	83 c4 0c             	add    esp,0xc
c000f1a1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a9:	55                   	push   ebp
c000f1aa:	e8 c7 fe ff ff       	call   c000f076 <GDT::addEntry(GDTEntry)>
c000f1af:	83 c4 0c             	add    esp,0xc
c000f1b2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1b6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1ba:	53                   	push   ebx
c000f1bb:	51                   	push   ecx
c000f1bc:	55                   	push   ebp
c000f1bd:	e8 b4 fe ff ff       	call   c000f076 <GDT::addEntry(GDTEntry)>
c000f1c2:	83 c4 0c             	add    esp,0xc
c000f1c5:	57                   	push   edi
c000f1c6:	56                   	push   esi
c000f1c7:	55                   	push   ebp
c000f1c8:	e8 a9 fe ff ff       	call   c000f076 <GDT::addEntry(GDTEntry)>
c000f1cd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1d0:	e8 e5 fe ff ff       	call   c000f0ba <GDT::flush()>
c000f1d5:	83 c4 4c             	add    esp,0x4c
c000f1d8:	5b                   	pop    ebx
c000f1d9:	5e                   	pop    esi
c000f1da:	5f                   	pop    edi
c000f1db:	5d                   	pop    ebp
c000f1dc:	c3                   	ret    

c000f1dd <idleFunction(void*)>:
c000f1dd:	53                   	push   ebx
c000f1de:	83 ec 08             	sub    esp,0x8
c000f1e1:	e8 f8 ea 00 00       	call   c001dcde <unlockScheduler()>
c000f1e6:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c000f1eb:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f1f1:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f1f8:	74 3c                	je     c000f236 <idleFunction(void*)+0x59>
c000f1fa:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f201:	74 33                	je     c000f236 <idleFunction(void*)+0x59>
c000f203:	31 db                	xor    ebx,ebx
c000f205:	52                   	push   edx
c000f206:	52                   	push   edx
c000f207:	68 e1 00 00 00       	push   0xe1
c000f20c:	50                   	push   eax
c000f20d:	e8 de fb ff ff       	call   c000edf0 <Computer::rdmsr(unsigned int)>
c000f212:	53                   	push   ebx
c000f213:	83 e0 02             	and    eax,0x2
c000f216:	50                   	push   eax
c000f217:	68 e1 00 00 00       	push   0xe1
c000f21c:	ff 35 68 e4 02 c0    	push   DWORD PTR ds:0xc002e468
c000f222:	e8 f5 fb ff ff       	call   c000ee1c <Computer::wrmsr(unsigned int, unsigned long long)>
c000f227:	83 c4 20             	add    esp,0x20
c000f22a:	e8 50 10 ff ff       	call   c000027f <doTPAUSE>
c000f22f:	e8 9c 94 01 00       	call   c00286d0 <idleCommon()>
c000f234:	eb f4                	jmp    c000f22a <idleFunction(void*)+0x4d>
c000f236:	fb                   	sti    
c000f237:	f4                   	hlt    
c000f238:	e8 93 94 01 00       	call   c00286d0 <idleCommon()>
c000f23d:	eb f7                	jmp    c000f236 <idleFunction(void*)+0x59>
c000f23f:	90                   	nop

c000f240 <IDTEntry::IDTEntry(bool)>:
c000f240:	83 ec 04             	sub    esp,0x4
c000f243:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f247:	88 04 24             	mov    BYTE PTR [esp],al
c000f24a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f24e:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f254:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f258:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f25c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f260:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f263:	83 e2 f0             	and    edx,0xfffffff0
c000f266:	83 ca 0e             	or     edx,0xe
c000f269:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f26c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f270:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f273:	83 e2 ef             	and    edx,0xffffffef
c000f276:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f279:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f27d:	74 04                	je     c000f283 <IDTEntry::IDTEntry(bool)+0x43>
c000f27f:	b2 03                	mov    dl,0x3
c000f281:	eb 02                	jmp    c000f285 <IDTEntry::IDTEntry(bool)+0x45>
c000f283:	b2 00                	mov    dl,0x0
c000f285:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f289:	83 e2 03             	and    edx,0x3
c000f28c:	88 d1                	mov    cl,dl
c000f28e:	c1 e1 05             	shl    ecx,0x5
c000f291:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f294:	83 e2 9f             	and    edx,0xffffff9f
c000f297:	09 ca                	or     edx,ecx
c000f299:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f29c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2a0:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2a3:	83 ca 80             	or     edx,0xffffff80
c000f2a6:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2a9:	90                   	nop
c000f2aa:	83 c4 04             	add    esp,0x4
c000f2ad:	c3                   	ret    

c000f2ae <IDTEntry::setOffset(unsigned int)>:
c000f2ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2b6:	66 89 02             	mov    WORD PTR [edx],ax
c000f2b9:	c1 e8 10             	shr    eax,0x10
c000f2bc:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2c0:	c3                   	ret    
c000f2c1:	90                   	nop

c000f2c2 <IDT::IDT()>:
c000f2c2:	90                   	nop
c000f2c3:	c3                   	ret    

c000f2c4 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2c8:	83 c0 30             	add    eax,0x30
c000f2cb:	c3                   	ret    

c000f2cc <IDT::addEntry(IDTEntry, int)>:
c000f2cc:	53                   	push   ebx
c000f2cd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2d1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2d5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2dd:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f2e0:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f2e4:	5b                   	pop    ebx
c000f2e5:	c3                   	ret    

c000f2e6 <IDT::addEntry(int, void (*)(), bool)>:
c000f2e6:	53                   	push   ebx
c000f2e7:	83 ec 10             	sub    esp,0x10
c000f2ea:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f2ef:	50                   	push   eax
c000f2f0:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f2f4:	53                   	push   ebx
c000f2f5:	e8 46 ff ff ff       	call   c000f240 <IDTEntry::IDTEntry(bool)>
c000f2fa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2fe:	53                   	push   ebx
c000f2ff:	e8 aa ff ff ff       	call   c000f2ae <IDTEntry::setOffset(unsigned int)>
c000f304:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f308:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f30c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f310:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f314:	e8 b3 ff ff ff       	call   c000f2cc <IDT::addEntry(IDTEntry, int)>
c000f319:	83 c4 30             	add    esp,0x30
c000f31c:	5b                   	pop    ebx
c000f31d:	c3                   	ret    

c000f31e <IDT::flush()>:
c000f31e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f322:	66 c7 05 78 e4 02 c0 ff 07 	mov    WORD PTR ds:0xc002e478,0x7ff
c000f32b:	a3 7a e4 02 c0       	mov    ds:0xc002e47a,eax
c000f330:	0f 01 1d 78 e4 02 c0 	lidtd  ds:0xc002e478
c000f337:	c3                   	ret    

c000f338 <IDT::setup()>:
c000f338:	57                   	push   edi
c000f339:	56                   	push   esi
c000f33a:	53                   	push   ebx
c000f33b:	83 ec 10             	sub    esp,0x10
c000f33e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f342:	6a 00                	push   0x0
c000f344:	68 70 04 00 c0       	push   0xc0000470
c000f349:	6a 00                	push   0x0
c000f34b:	53                   	push   ebx
c000f34c:	e8 95 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f351:	6a 00                	push   0x0
c000f353:	68 80 04 00 c0       	push   0xc0000480
c000f358:	6a 01                	push   0x1
c000f35a:	53                   	push   ebx
c000f35b:	e8 86 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f360:	83 c4 20             	add    esp,0x20
c000f363:	6a 00                	push   0x0
c000f365:	68 8a 04 00 c0       	push   0xc000048a
c000f36a:	6a 02                	push   0x2
c000f36c:	53                   	push   ebx
c000f36d:	e8 74 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f372:	6a 00                	push   0x0
c000f374:	68 94 04 00 c0       	push   0xc0000494
c000f379:	6a 03                	push   0x3
c000f37b:	53                   	push   ebx
c000f37c:	e8 65 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f381:	83 c4 20             	add    esp,0x20
c000f384:	6a 00                	push   0x0
c000f386:	68 9e 04 00 c0       	push   0xc000049e
c000f38b:	6a 04                	push   0x4
c000f38d:	53                   	push   ebx
c000f38e:	e8 53 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f393:	6a 00                	push   0x0
c000f395:	68 a8 04 00 c0       	push   0xc00004a8
c000f39a:	6a 05                	push   0x5
c000f39c:	53                   	push   ebx
c000f39d:	e8 44 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f3a2:	83 c4 20             	add    esp,0x20
c000f3a5:	6a 00                	push   0x0
c000f3a7:	68 b2 04 00 c0       	push   0xc00004b2
c000f3ac:	6a 06                	push   0x6
c000f3ae:	53                   	push   ebx
c000f3af:	e8 32 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f3b4:	6a 00                	push   0x0
c000f3b6:	68 bc 04 00 c0       	push   0xc00004bc
c000f3bb:	6a 07                	push   0x7
c000f3bd:	53                   	push   ebx
c000f3be:	e8 23 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f3c3:	83 c4 20             	add    esp,0x20
c000f3c6:	6a 00                	push   0x0
c000f3c8:	68 c6 04 00 c0       	push   0xc00004c6
c000f3cd:	6a 08                	push   0x8
c000f3cf:	53                   	push   ebx
c000f3d0:	e8 11 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f3d5:	6a 00                	push   0x0
c000f3d7:	68 ce 04 00 c0       	push   0xc00004ce
c000f3dc:	6a 09                	push   0x9
c000f3de:	53                   	push   ebx
c000f3df:	e8 02 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f3e4:	83 c4 20             	add    esp,0x20
c000f3e7:	6a 00                	push   0x0
c000f3e9:	68 d8 04 00 c0       	push   0xc00004d8
c000f3ee:	6a 0a                	push   0xa
c000f3f0:	53                   	push   ebx
c000f3f1:	e8 f0 fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f3f6:	6a 00                	push   0x0
c000f3f8:	68 e0 04 00 c0       	push   0xc00004e0
c000f3fd:	6a 0b                	push   0xb
c000f3ff:	53                   	push   ebx
c000f400:	e8 e1 fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f405:	83 c4 20             	add    esp,0x20
c000f408:	6a 00                	push   0x0
c000f40a:	68 e8 04 00 c0       	push   0xc00004e8
c000f40f:	6a 0c                	push   0xc
c000f411:	53                   	push   ebx
c000f412:	e8 cf fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f417:	6a 00                	push   0x0
c000f419:	68 f0 04 00 c0       	push   0xc00004f0
c000f41e:	6a 0d                	push   0xd
c000f420:	53                   	push   ebx
c000f421:	e8 c0 fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f426:	83 c4 20             	add    esp,0x20
c000f429:	6a 00                	push   0x0
c000f42b:	68 f8 04 00 c0       	push   0xc00004f8
c000f430:	6a 0e                	push   0xe
c000f432:	53                   	push   ebx
c000f433:	e8 ae fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f438:	6a 00                	push   0x0
c000f43a:	68 00 05 00 c0       	push   0xc0000500
c000f43f:	6a 0f                	push   0xf
c000f441:	53                   	push   ebx
c000f442:	e8 9f fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f447:	83 c4 20             	add    esp,0x20
c000f44a:	6a 00                	push   0x0
c000f44c:	68 0a 05 00 c0       	push   0xc000050a
c000f451:	6a 10                	push   0x10
c000f453:	53                   	push   ebx
c000f454:	e8 8d fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f459:	6a 00                	push   0x0
c000f45b:	68 14 05 00 c0       	push   0xc0000514
c000f460:	6a 11                	push   0x11
c000f462:	53                   	push   ebx
c000f463:	e8 7e fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f468:	83 c4 20             	add    esp,0x20
c000f46b:	6a 00                	push   0x0
c000f46d:	68 1e 05 00 c0       	push   0xc000051e
c000f472:	6a 12                	push   0x12
c000f474:	53                   	push   ebx
c000f475:	e8 6c fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f47a:	6a 01                	push   0x1
c000f47c:	68 b8 05 00 c0       	push   0xc00005b8
c000f481:	6a 60                	push   0x60
c000f483:	53                   	push   ebx
c000f484:	e8 5d fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f489:	83 c4 20             	add    esp,0x20
c000f48c:	6a 00                	push   0x0
c000f48e:	68 bf 05 00 c0       	push   0xc00005bf
c000f493:	6a 20                	push   0x20
c000f495:	53                   	push   ebx
c000f496:	e8 4b fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f49b:	6a 00                	push   0x0
c000f49d:	68 aa 05 00 c0       	push   0xc00005aa
c000f4a2:	6a 21                	push   0x21
c000f4a4:	53                   	push   ebx
c000f4a5:	e8 3c fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f4aa:	83 c4 20             	add    esp,0x20
c000f4ad:	6a 00                	push   0x0
c000f4af:	68 b1 05 00 c0       	push   0xc00005b1
c000f4b4:	6a 22                	push   0x22
c000f4b6:	53                   	push   ebx
c000f4b7:	e8 2a fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f4bc:	6a 00                	push   0x0
c000f4be:	68 28 05 00 c0       	push   0xc0000528
c000f4c3:	6a 23                	push   0x23
c000f4c5:	53                   	push   ebx
c000f4c6:	e8 1b fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f4cb:	83 c4 20             	add    esp,0x20
c000f4ce:	6a 00                	push   0x0
c000f4d0:	68 32 05 00 c0       	push   0xc0000532
c000f4d5:	6a 24                	push   0x24
c000f4d7:	53                   	push   ebx
c000f4d8:	e8 09 fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f4dd:	6a 00                	push   0x0
c000f4df:	68 3c 05 00 c0       	push   0xc000053c
c000f4e4:	6a 25                	push   0x25
c000f4e6:	53                   	push   ebx
c000f4e7:	e8 fa fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f4ec:	83 c4 20             	add    esp,0x20
c000f4ef:	6a 00                	push   0x0
c000f4f1:	68 46 05 00 c0       	push   0xc0000546
c000f4f6:	6a 26                	push   0x26
c000f4f8:	53                   	push   ebx
c000f4f9:	e8 e8 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f4fe:	6a 00                	push   0x0
c000f500:	68 50 05 00 c0       	push   0xc0000550
c000f505:	6a 27                	push   0x27
c000f507:	53                   	push   ebx
c000f508:	e8 d9 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f50d:	83 c4 20             	add    esp,0x20
c000f510:	6a 00                	push   0x0
c000f512:	68 5a 05 00 c0       	push   0xc000055a
c000f517:	6a 28                	push   0x28
c000f519:	53                   	push   ebx
c000f51a:	e8 c7 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f51f:	6a 00                	push   0x0
c000f521:	68 64 05 00 c0       	push   0xc0000564
c000f526:	6a 29                	push   0x29
c000f528:	53                   	push   ebx
c000f529:	e8 b8 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f52e:	83 c4 20             	add    esp,0x20
c000f531:	6a 00                	push   0x0
c000f533:	68 6e 05 00 c0       	push   0xc000056e
c000f538:	6a 2a                	push   0x2a
c000f53a:	53                   	push   ebx
c000f53b:	e8 a6 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f540:	6a 00                	push   0x0
c000f542:	68 78 05 00 c0       	push   0xc0000578
c000f547:	6a 2b                	push   0x2b
c000f549:	53                   	push   ebx
c000f54a:	e8 97 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f54f:	83 c4 20             	add    esp,0x20
c000f552:	6a 00                	push   0x0
c000f554:	68 82 05 00 c0       	push   0xc0000582
c000f559:	6a 2c                	push   0x2c
c000f55b:	53                   	push   ebx
c000f55c:	e8 85 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f561:	6a 00                	push   0x0
c000f563:	68 8c 05 00 c0       	push   0xc000058c
c000f568:	6a 2d                	push   0x2d
c000f56a:	53                   	push   ebx
c000f56b:	e8 76 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f570:	83 c4 20             	add    esp,0x20
c000f573:	6a 00                	push   0x0
c000f575:	68 96 05 00 c0       	push   0xc0000596
c000f57a:	6a 2e                	push   0x2e
c000f57c:	53                   	push   ebx
c000f57d:	e8 64 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f582:	6a 00                	push   0x0
c000f584:	68 a0 05 00 c0       	push   0xc00005a0
c000f589:	6a 2f                	push   0x2f
c000f58b:	53                   	push   ebx
c000f58c:	e8 55 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f591:	83 c4 20             	add    esp,0x20
c000f594:	6a 00                	push   0x0
c000f596:	68 f5 05 00 c0       	push   0xc00005f5
c000f59b:	6a 30                	push   0x30
c000f59d:	53                   	push   ebx
c000f59e:	e8 43 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f5a3:	6a 00                	push   0x0
c000f5a5:	68 ff 05 00 c0       	push   0xc00005ff
c000f5aa:	6a 31                	push   0x31
c000f5ac:	53                   	push   ebx
c000f5ad:	e8 34 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f5b2:	83 c4 20             	add    esp,0x20
c000f5b5:	6a 00                	push   0x0
c000f5b7:	68 09 06 00 c0       	push   0xc0000609
c000f5bc:	6a 32                	push   0x32
c000f5be:	53                   	push   ebx
c000f5bf:	e8 22 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f5c4:	6a 00                	push   0x0
c000f5c6:	68 13 06 00 c0       	push   0xc0000613
c000f5cb:	6a 33                	push   0x33
c000f5cd:	53                   	push   ebx
c000f5ce:	e8 13 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f5d3:	83 c4 20             	add    esp,0x20
c000f5d6:	6a 00                	push   0x0
c000f5d8:	68 1d 06 00 c0       	push   0xc000061d
c000f5dd:	6a 34                	push   0x34
c000f5df:	53                   	push   ebx
c000f5e0:	e8 01 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f5e5:	6a 00                	push   0x0
c000f5e7:	68 27 06 00 c0       	push   0xc0000627
c000f5ec:	6a 35                	push   0x35
c000f5ee:	53                   	push   ebx
c000f5ef:	e8 f2 fc ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f5f4:	83 c4 20             	add    esp,0x20
c000f5f7:	6a 00                	push   0x0
c000f5f9:	68 31 06 00 c0       	push   0xc0000631
c000f5fe:	6a 36                	push   0x36
c000f600:	53                   	push   ebx
c000f601:	e8 e0 fc ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f606:	6a 00                	push   0x0
c000f608:	68 3b 06 00 c0       	push   0xc000063b
c000f60d:	6a 37                	push   0x37
c000f60f:	53                   	push   ebx
c000f610:	e8 d1 fc ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f615:	83 c4 20             	add    esp,0x20
c000f618:	e8 11 26 00 00       	call   c0011c2e <Virt::getAKernelVAS()>
c000f61d:	52                   	push   edx
c000f61e:	6a 03                	push   0x3
c000f620:	6a 02                	push   0x2
c000f622:	50                   	push   eax
c000f623:	e8 f4 2c 00 00       	call   c001231c <VAS::allocatePages(int, int)>
c000f628:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f62f:	89 c6                	mov    esi,eax
c000f631:	e8 15 02 00 00       	call   c000f84b <malloc>
c000f636:	81 c6 00 20 00 00    	add    esi,0x2000
c000f63c:	89 04 24             	mov    DWORD PTR [esp],eax
c000f63f:	89 c7                	mov    edi,eax
c000f641:	e8 da 1c 00 00       	call   c0011320 <TSS::TSS()>
c000f646:	83 c4 0c             	add    esp,0xc
c000f649:	68 c6 04 00 c0       	push   0xc00004c6
c000f64e:	56                   	push   esi
c000f64f:	57                   	push   edi
c000f650:	e8 0b 1d 00 00       	call   c0011360 <TSS::setup(unsigned long, unsigned long)>
c000f655:	59                   	pop    ecx
c000f656:	89 c6                	mov    esi,eax
c000f658:	5f                   	pop    edi
c000f659:	6a 00                	push   0x0
c000f65b:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f65f:	50                   	push   eax
c000f660:	e8 db fb ff ff       	call   c000f240 <IDTEntry::IDTEntry(bool)>
c000f665:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f669:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f66e:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f675:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f67b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f67f:	80 ce 05             	or     dh,0x5
c000f682:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f685:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f689:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f68d:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f690:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f693:	e8 86 fc ff ff       	call   c000f31e <IDT::flush()>
c000f698:	83 c4 20             	add    esp,0x20
c000f69b:	5b                   	pop    ebx
c000f69c:	5e                   	pop    esi
c000f69d:	5f                   	pop    edi
c000f69e:	c3                   	ret    

c000f69f <sbrk>:
c000f69f:	55                   	push   ebp
c000f6a0:	57                   	push   edi
c000f6a1:	56                   	push   esi
c000f6a2:	53                   	push   ebx
c000f6a3:	83 ec 1c             	sub    esp,0x1c
c000f6a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6aa:	85 c0                	test   eax,eax
c000f6ac:	74 3e                	je     c000f6ec <sbrk+0x4d>
c000f6ae:	78 43                	js     c000f6f3 <sbrk+0x54>
c000f6b0:	8b 15 68 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e468
c000f6b6:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f6bc:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f6c2:	83 e2 01             	and    edx,0x1
c000f6c5:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f6c9:	8b 0d 88 d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d388
c000f6cf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f6d3:	05 ff 0f 00 00       	add    eax,0xfff
c000f6d8:	89 c2                	mov    edx,eax
c000f6da:	78 2f                	js     c000f70b <sbrk+0x6c>
c000f6dc:	c1 fa 0c             	sar    edx,0xc
c000f6df:	89 d7                	mov    edi,edx
c000f6e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6e5:	be 00 00 00 00       	mov    esi,0x0
c000f6ea:	eb 36                	jmp    c000f722 <sbrk+0x83>
c000f6ec:	a1 88 d3 02 c0       	mov    eax,ds:0xc002d388
c000f6f1:	eb 74                	jmp    c000f767 <sbrk+0xc8>
c000f6f3:	83 ec 08             	sub    esp,0x8
c000f6f6:	50                   	push   eax
c000f6f7:	68 08 a2 02 c0       	push   0xc002a208
c000f6fc:	e8 c2 36 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000f701:	83 c4 10             	add    esp,0x10
c000f704:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f709:	eb 5c                	jmp    c000f767 <sbrk+0xc8>
c000f70b:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f711:	eb c9                	jmp    c000f6dc <sbrk+0x3d>
c000f713:	81 05 88 d3 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002d388,0x1000
c000f71d:	46                   	inc    esi
c000f71e:	39 f7                	cmp    edi,esi
c000f720:	74 34                	je     c000f756 <sbrk+0xb7>
c000f722:	e8 07 25 00 00       	call   c0011c2e <Virt::getAKernelVAS()>
c000f727:	89 c3                	mov    ebx,eax
c000f729:	8b 2d 88 d3 02 c0    	mov    ebp,DWORD PTR ds:0xc002d388
c000f72f:	e8 83 07 00 00       	call   c000feb7 <Phys::allocatePage()>
c000f734:	68 01 0c 00 00       	push   0xc01
c000f739:	55                   	push   ebp
c000f73a:	50                   	push   eax
c000f73b:	53                   	push   ebx
c000f73c:	e8 db 2a 00 00       	call   c001221c <VAS::mapPage(unsigned long, unsigned long, int)>
c000f741:	83 c4 10             	add    esp,0x10
c000f744:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f749:	74 c8                	je     c000f713 <sbrk+0x74>
c000f74b:	8b 1d 88 d3 02 c0    	mov    ebx,DWORD PTR ds:0xc002d388
c000f751:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f754:	eb bd                	jmp    c000f713 <sbrk+0x74>
c000f756:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f75b:	75 12                	jne    c000f76f <sbrk+0xd0>
c000f75d:	0f 20 d8             	mov    eax,cr3
c000f760:	0f 22 d8             	mov    cr3,eax
c000f763:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f767:	83 c4 1c             	add    esp,0x1c
c000f76a:	5b                   	pop    ebx
c000f76b:	5e                   	pop    esi
c000f76c:	5f                   	pop    edi
c000f76d:	5d                   	pop    ebp
c000f76e:	c3                   	ret    
c000f76f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f773:	89 cb                	mov    ebx,ecx
c000f775:	c1 eb 0a             	shr    ebx,0xa
c000f778:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f77e:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f784:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f788:	c1 e0 0c             	shl    eax,0xc
c000f78b:	01 c8                	add    eax,ecx
c000f78d:	c1 e8 0a             	shr    eax,0xa
c000f790:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f795:	2d 00 00 40 00       	sub    eax,0x400000
c000f79a:	39 c3                	cmp    ebx,eax
c000f79c:	77 c5                	ja     c000f763 <sbrk+0xc4>
c000f79e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f7a1:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f7a7:	39 d8                	cmp    eax,ebx
c000f7a9:	73 f3                	jae    c000f79e <sbrk+0xff>
c000f7ab:	eb b6                	jmp    c000f763 <sbrk+0xc4>

c000f7ad <mmap>:
c000f7ad:	83 ec 18             	sub    esp,0x18
c000f7b0:	68 38 a2 02 c0       	push   0xc002a238
c000f7b5:	e8 47 ad 00 00       	call   c001a501 <Krnl::panic(char const*)>
c000f7ba:	b8 00 00 00 00       	mov    eax,0x0
c000f7bf:	83 c4 1c             	add    esp,0x1c
c000f7c2:	c3                   	ret    

c000f7c3 <munmap>:
c000f7c3:	83 ec 18             	sub    esp,0x18
c000f7c6:	68 3d a2 02 c0       	push   0xc002a23d
c000f7cb:	e8 31 ad 00 00       	call   c001a501 <Krnl::panic(char const*)>
c000f7d0:	b8 00 00 00 00       	mov    eax,0x0
c000f7d5:	83 c4 1c             	add    esp,0x1c
c000f7d8:	c3                   	ret    

c000f7d9 <liballoc_lock()>:
c000f7d9:	83 ec 0c             	sub    esp,0xc
c000f7dc:	e8 fb e4 00 00       	call   c001dcdc <lockScheduler()>
c000f7e1:	b8 00 00 00 00       	mov    eax,0x0
c000f7e6:	83 c4 0c             	add    esp,0xc
c000f7e9:	c3                   	ret    

c000f7ea <liballoc_unlock()>:
c000f7ea:	83 ec 0c             	sub    esp,0xc
c000f7ed:	e8 ec e4 00 00       	call   c001dcde <unlockScheduler()>
c000f7f2:	b8 00 00 00 00       	mov    eax,0x0
c000f7f7:	83 c4 0c             	add    esp,0xc
c000f7fa:	c3                   	ret    

c000f7fb <liballoc_alloc(int)>:
c000f7fb:	83 ec 0c             	sub    esp,0xc
c000f7fe:	e8 2b 24 00 00       	call   c0011c2e <Virt::getAKernelVAS()>
c000f803:	83 ec 04             	sub    esp,0x4
c000f806:	68 01 08 00 00       	push   0x801
c000f80b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f80f:	50                   	push   eax
c000f810:	e8 07 2b 00 00       	call   c001231c <VAS::allocatePages(int, int)>
c000f815:	83 c4 1c             	add    esp,0x1c
c000f818:	c3                   	ret    

c000f819 <liballoc_free(void*, int)>:
c000f819:	83 ec 0c             	sub    esp,0xc
c000f81c:	e8 0d 24 00 00       	call   c0011c2e <Virt::getAKernelVAS()>
c000f821:	83 ec 08             	sub    esp,0x8
c000f824:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f828:	50                   	push   eax
c000f829:	e8 aa 27 00 00       	call   c0011fd8 <VAS::freeAllocatedPages(unsigned long)>
c000f82e:	b8 00 00 00 00       	mov    eax,0x0
c000f833:	83 c4 1c             	add    esp,0x1c
c000f836:	c3                   	ret    

c000f837 <realloc>:
c000f837:	83 ec 14             	sub    esp,0x14
c000f83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f842:	e8 15 1e ff ff       	call   c000165c <dlrealloc>
c000f847:	83 c4 1c             	add    esp,0x1c
c000f84a:	c3                   	ret    

c000f84b <malloc>:
c000f84b:	83 ec 18             	sub    esp,0x18
c000f84e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f852:	e8 c8 18 ff ff       	call   c000111f <dlmalloc>
c000f857:	83 c4 1c             	add    esp,0x1c
c000f85a:	c3                   	ret    

c000f85b <free>:
c000f85b:	83 ec 18             	sub    esp,0x18
c000f85e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f862:	e8 5d 15 ff ff       	call   c0000dc4 <dlfree>
c000f867:	83 c4 1c             	add    esp,0x1c
c000f86a:	c3                   	ret    

c000f86b <rfree>:
c000f86b:	83 ec 18             	sub    esp,0x18
c000f86e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f872:	e8 4d 15 ff ff       	call   c0000dc4 <dlfree>
c000f877:	83 c4 1c             	add    esp,0x1c
c000f87a:	c3                   	ret    

c000f87b <calloc>:
c000f87b:	56                   	push   esi
c000f87c:	53                   	push   ebx
c000f87d:	83 ec 10             	sub    esp,0x10
c000f880:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f884:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f889:	53                   	push   ebx
c000f88a:	e8 bc ff ff ff       	call   c000f84b <malloc>
c000f88f:	89 c6                	mov    esi,eax
c000f891:	83 c4 0c             	add    esp,0xc
c000f894:	53                   	push   ebx
c000f895:	6a 00                	push   0x0
c000f897:	50                   	push   eax
c000f898:	e8 e3 0e ff ff       	call   c0000780 <memset>
c000f89d:	89 f0                	mov    eax,esi
c000f89f:	83 c4 14             	add    esp,0x14
c000f8a2:	5b                   	pop    ebx
c000f8a3:	5e                   	pop    esi
c000f8a4:	c3                   	ret    

c000f8a5 <hwTextMode_loadInData(VgaText*)>:
c000f8a5:	55                   	push   ebp
c000f8a6:	a1 a0 d3 02 c0       	mov    eax,ds:0xc002d3a0
c000f8ab:	57                   	push   edi
c000f8ac:	56                   	push   esi
c000f8ad:	53                   	push   ebx
c000f8ae:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8b2:	8b 57 10             	mov    edx,DWORD PTR [edi+0x10]
c000f8b5:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c000f8b8:	85 d2                	test   edx,edx
c000f8ba:	7e 29                	jle    c000f8e5 <hwTextMode_loadInData(VgaText*)+0x40>
c000f8bc:	8d a8 a0 00 00 00    	lea    ebp,[eax+0xa0]
c000f8c2:	31 f6                	xor    esi,esi
c000f8c4:	29 cd                	sub    ebp,ecx
c000f8c6:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f8c9:	31 c0                	xor    eax,eax
c000f8cb:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f8cf:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f8d3:	40                   	inc    eax
c000f8d4:	83 f8 50             	cmp    eax,0x50
c000f8d7:	75 f2                	jne    c000f8cb <hwTextMode_loadInData(VgaText*)+0x26>
c000f8d9:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f8df:	46                   	inc    esi
c000f8e0:	39 77 10             	cmp    DWORD PTR [edi+0x10],esi
c000f8e3:	7f e1                	jg     c000f8c6 <hwTextMode_loadInData(VgaText*)+0x21>
c000f8e5:	5b                   	pop    ebx
c000f8e6:	5e                   	pop    esi
c000f8e7:	5f                   	pop    edi
c000f8e8:	5d                   	pop    ebp
c000f8e9:	c3                   	ret    

c000f8ea <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f8ea:	55                   	push   ebp
c000f8eb:	80 3d 00 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e500,0x0
c000f8f2:	57                   	push   edi
c000f8f3:	56                   	push   esi
c000f8f4:	53                   	push   ebx
c000f8f5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f8f9:	75 44                	jne    c000f93f <hwTextMode_loadInTitle(VgaText*, char*)+0x55>
c000f8fb:	8b 6e 3c             	mov    ebp,DWORD PTR [esi+0x3c]
c000f8fe:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c000f901:	8b 15 a0 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d3a0
c000f907:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f90b:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f911:	eb 08                	jmp    c000f91b <hwTextMode_loadInTitle(VgaText*, char*)+0x31>
c000f913:	8b 6e 3c             	mov    ebp,DWORD PTR [esi+0x3c]
c000f916:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c000f919:	89 da                	mov    edx,ebx
c000f91b:	83 e5 0f             	and    ebp,0xf
c000f91e:	c1 e0 04             	shl    eax,0x4
c000f921:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f924:	0f b6 c0             	movzx  eax,al
c000f927:	41                   	inc    ecx
c000f928:	09 e8                	or     eax,ebp
c000f92a:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f92e:	c1 e0 08             	shl    eax,0x8
c000f931:	09 e8                	or     eax,ebp
c000f933:	39 fb                	cmp    ebx,edi
c000f935:	66 89 02             	mov    WORD PTR [edx],ax
c000f938:	75 d9                	jne    c000f913 <hwTextMode_loadInTitle(VgaText*, char*)+0x29>
c000f93a:	5b                   	pop    ebx
c000f93b:	5e                   	pop    esi
c000f93c:	5f                   	pop    edi
c000f93d:	5d                   	pop    ebp
c000f93e:	c3                   	ret    
c000f93f:	c7 46 3c 02 00 00 00 	mov    DWORD PTR [esi+0x3c],0x2
c000f946:	c7 46 38 00 00 00 00 	mov    DWORD PTR [esi+0x38],0x0
c000f94d:	31 c0                	xor    eax,eax
c000f94f:	bd 02 00 00 00       	mov    ebp,0x2
c000f954:	eb ab                	jmp    c000f901 <hwTextMode_loadInTitle(VgaText*, char*)+0x17>

c000f956 <hwTextMode_showCursor(VgaText*, bool)>:
c000f956:	56                   	push   esi
c000f957:	80 3d 00 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e500,0x0
c000f95e:	53                   	push   ebx
c000f95f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f963:	75 36                	jne    c000f99b <hwTextMode_showCursor(VgaText*, bool)+0x45>
c000f965:	84 c0                	test   al,al
c000f967:	74 35                	je     c000f99e <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f969:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f96e:	b0 0a                	mov    al,0xa
c000f970:	89 da                	mov    edx,ebx
c000f972:	ee                   	out    dx,al
c000f973:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f978:	89 ca                	mov    edx,ecx
c000f97a:	ec                   	in     al,dx
c000f97b:	b2 0f                	mov    dl,0xf
c000f97d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f981:	83 e0 c0             	and    eax,0xffffffc0
c000f984:	2b 56 1c             	sub    edx,DWORD PTR [esi+0x1c]
c000f987:	09 d0                	or     eax,edx
c000f989:	89 ca                	mov    edx,ecx
c000f98b:	ee                   	out    dx,al
c000f98c:	b0 0b                	mov    al,0xb
c000f98e:	89 da                	mov    edx,ebx
c000f990:	ee                   	out    dx,al
c000f991:	89 ca                	mov    edx,ecx
c000f993:	ec                   	in     al,dx
c000f994:	83 e0 e0             	and    eax,0xffffffe0
c000f997:	83 c8 0f             	or     eax,0xf
c000f99a:	ee                   	out    dx,al
c000f99b:	5b                   	pop    ebx
c000f99c:	5e                   	pop    esi
c000f99d:	c3                   	ret    
c000f99e:	b0 0a                	mov    al,0xa
c000f9a0:	ba d4 03 00 00       	mov    edx,0x3d4
c000f9a5:	ee                   	out    dx,al
c000f9a6:	b0 20                	mov    al,0x20
c000f9a8:	ba d5 03 00 00       	mov    edx,0x3d5
c000f9ad:	ee                   	out    dx,al
c000f9ae:	5b                   	pop    ebx
c000f9af:	5e                   	pop    esi
c000f9b0:	c3                   	ret    

c000f9b1 <hwTextMode_update(VgaText*)>:
c000f9b1:	c3                   	ret    

c000f9b2 <hwTextMode_updateCursor(VgaText*)>:
c000f9b2:	56                   	push   esi
c000f9b3:	80 3d 00 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e500,0x0
c000f9ba:	53                   	push   ebx
c000f9bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9bf:	75 36                	jne    c000f9f7 <hwTextMode_updateCursor(VgaText*)+0x45>
c000f9c1:	be d4 03 00 00       	mov    esi,0x3d4
c000f9c6:	b9 19 00 00 00       	mov    ecx,0x19
c000f9cb:	89 f2                	mov    edx,esi
c000f9cd:	2b 48 10             	sub    ecx,DWORD PTR [eax+0x10]
c000f9d0:	03 48 18             	add    ecx,DWORD PTR [eax+0x18]
c000f9d3:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f9d6:	c1 e1 04             	shl    ecx,0x4
c000f9d9:	03 48 14             	add    ecx,DWORD PTR [eax+0x14]
c000f9dc:	b0 0f                	mov    al,0xf
c000f9de:	ee                   	out    dx,al
c000f9df:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f9e4:	88 c8                	mov    al,cl
c000f9e6:	89 da                	mov    edx,ebx
c000f9e8:	ee                   	out    dx,al
c000f9e9:	b0 0e                	mov    al,0xe
c000f9eb:	89 f2                	mov    edx,esi
c000f9ed:	ee                   	out    dx,al
c000f9ee:	89 c8                	mov    eax,ecx
c000f9f0:	89 da                	mov    edx,ebx
c000f9f2:	66 c1 e8 08          	shr    ax,0x8
c000f9f6:	ee                   	out    dx,al
c000f9f7:	5b                   	pop    ebx
c000f9f8:	5e                   	pop    esi
c000f9f9:	c3                   	ret    

c000f9fa <hwTextMode_disableBlink(VgaText*, bool)>:
c000f9fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f9fe:	80 3d 00 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e500,0x0
c000fa05:	75 38                	jne    c000fa3f <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa07:	ba da 03 00 00       	mov    edx,0x3da
c000fa0c:	84 c0                	test   al,al
c000fa0e:	75 18                	jne    c000fa28 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa10:	ec                   	in     al,dx
c000fa11:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa16:	b0 30                	mov    al,0x30
c000fa18:	89 ca                	mov    edx,ecx
c000fa1a:	ee                   	out    dx,al
c000fa1b:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa20:	ec                   	in     al,dx
c000fa21:	83 c8 08             	or     eax,0x8
c000fa24:	89 ca                	mov    edx,ecx
c000fa26:	ee                   	out    dx,al
c000fa27:	c3                   	ret    
c000fa28:	ec                   	in     al,dx
c000fa29:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa2e:	b0 30                	mov    al,0x30
c000fa30:	89 ca                	mov    edx,ecx
c000fa32:	ee                   	out    dx,al
c000fa33:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa38:	ec                   	in     al,dx
c000fa39:	83 e0 f7             	and    eax,0xfffffff7
c000fa3c:	89 ca                	mov    edx,ecx
c000fa3e:	ee                   	out    dx,al
c000fa3f:	c3                   	ret    

c000fa40 <hwTextMode_scrollScreen(VgaText*)>:
c000fa40:	55                   	push   ebp
c000fa41:	57                   	push   edi
c000fa42:	56                   	push   esi
c000fa43:	53                   	push   ebx
c000fa44:	83 ec 1c             	sub    esp,0x1c
c000fa47:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa4b:	80 3d 00 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e500,0x0
c000fa52:	74 0e                	je     c000fa62 <hwTextMode_scrollScreen(VgaText*)+0x22>
c000fa54:	c7 41 34 02 00 00 00 	mov    DWORD PTR [ecx+0x34],0x2
c000fa5b:	c7 41 30 00 00 00 00 	mov    DWORD PTR [ecx+0x30],0x0
c000fa62:	a1 a0 d3 02 c0       	mov    eax,ds:0xc002d3a0
c000fa67:	bd 02 00 00 00       	mov    ebp,0x2
c000fa6c:	05 a0 00 00 00       	add    eax,0xa0
c000fa71:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa75:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fa79:	31 c0                	xor    eax,eax
c000fa7b:	eb 0b                	jmp    c000fa88 <hwTextMode_scrollScreen(VgaText*)+0x48>
c000fa7d:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000fa83:	74 51                	je     c000fad6 <hwTextMode_scrollScreen(VgaText*)+0x96>
c000fa85:	43                   	inc    ebx
c000fa86:	89 f0                	mov    eax,esi
c000fa88:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000fa8e:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fa94:	88 13                	mov    BYTE PTR [ebx],dl
c000fa96:	8d 70 01             	lea    esi,[eax+0x1]
c000fa99:	83 fd 18             	cmp    ebp,0x18
c000fa9c:	75 df                	jne    c000fa7d <hwTextMode_scrollScreen(VgaText*)+0x3d>
c000fa9e:	a8 01                	test   al,0x1
c000faa0:	75 13                	jne    c000fab5 <hwTextMode_scrollScreen(VgaText*)+0x75>
c000faa2:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000faa5:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faab:	75 d8                	jne    c000fa85 <hwTextMode_scrollScreen(VgaText*)+0x45>
c000faad:	83 c4 1c             	add    esp,0x1c
c000fab0:	5b                   	pop    ebx
c000fab1:	5e                   	pop    esi
c000fab2:	5f                   	pop    edi
c000fab3:	5d                   	pop    ebp
c000fab4:	c3                   	ret    
c000fab5:	83 ec 08             	sub    esp,0x8
c000fab8:	0f b6 41 30          	movzx  eax,BYTE PTR [ecx+0x30]
c000fabc:	50                   	push   eax
c000fabd:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fac1:	0f b6 41 34          	movzx  eax,BYTE PTR [ecx+0x34]
c000fac5:	50                   	push   eax
c000fac6:	e8 09 0c 00 00       	call   c00106d4 <VgaText::combineColours(unsigned char, unsigned char)>
c000facb:	83 c4 10             	add    esp,0x10
c000face:	88 07                	mov    BYTE PTR [edi],al
c000fad0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fad4:	eb cf                	jmp    c000faa5 <hwTextMode_scrollScreen(VgaText*)+0x65>
c000fad6:	45                   	inc    ebp
c000fad7:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fadf:	eb 94                	jmp    c000fa75 <hwTextMode_scrollScreen(VgaText*)+0x35>

c000fae1 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fae1:	57                   	push   edi
c000fae2:	80 3d 00 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e500,0x0
c000fae9:	56                   	push   esi
c000faea:	53                   	push   ebx
c000faeb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000faef:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000faf3:	75 62                	jne    c000fb57 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x76>
c000faf5:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fafa:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000faff:	83 ec 08             	sub    esp,0x8
c000fb02:	52                   	push   edx
c000fb03:	50                   	push   eax
c000fb04:	e8 cb 0b 00 00       	call   c00106d4 <VgaText::combineColours(unsigned char, unsigned char)>
c000fb09:	5a                   	pop    edx
c000fb0a:	0f b6 c0             	movzx  eax,al
c000fb0d:	59                   	pop    ecx
c000fb0e:	50                   	push   eax
c000fb0f:	0f be c3             	movsx  eax,bl
c000fb12:	50                   	push   eax
c000fb13:	e8 62 0c 00 00       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c000fb18:	83 c4 10             	add    esp,0x10
c000fb1b:	8b 35 a0 d3 02 c0    	mov    esi,DWORD PTR ds:0xc002d3a0
c000fb21:	80 3d 00 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e500,0x0
c000fb28:	74 07                	je     c000fb31 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb2a:	66 0f be c3          	movsx  ax,bl
c000fb2e:	80 cc 02             	or     ah,0x2
c000fb31:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb35:	ba 19 00 00 00       	mov    edx,0x19
c000fb3a:	2b 51 10             	sub    edx,DWORD PTR [ecx+0x10]
c000fb3d:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb40:	8d 14 92             	lea    edx,[edx+edx*4]
c000fb43:	c1 e1 04             	shl    ecx,0x4
c000fb46:	c1 e2 04             	shl    edx,0x4
c000fb49:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fb4d:	01 ca                	add    edx,ecx
c000fb4f:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fb53:	5b                   	pop    ebx
c000fb54:	5e                   	pop    esi
c000fb55:	5f                   	pop    edi
c000fb56:	c3                   	ret    
c000fb57:	b8 02 00 00 00       	mov    eax,0x2
c000fb5c:	31 d2                	xor    edx,edx
c000fb5e:	eb 9f                	jmp    c000faff <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fb60 <setupTextMode()>:
c000fb60:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fb65:	83 e0 30             	and    eax,0x30
c000fb68:	66 83 f8 30          	cmp    ax,0x30
c000fb6c:	75 11                	jne    c000fb7f <setupTextMode()+0x1f>
c000fb6e:	81 2d a0 d3 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002d3a0,0x8000
c000fb78:	c6 05 00 e5 02 c0 01 	mov    BYTE PTR ds:0xc002e500,0x1
c000fb7f:	c7 05 38 e5 02 c0 fa f9 00 c0 	mov    DWORD PTR ds:0xc002e538,0xc000f9fa
c000fb89:	c7 05 24 e5 02 c0 a5 f8 00 c0 	mov    DWORD PTR ds:0xc002e524,0xc000f8a5
c000fb93:	c7 05 20 e5 02 c0 ea f8 00 c0 	mov    DWORD PTR ds:0xc002e520,0xc000f8ea
c000fb9d:	c7 05 2c e5 02 c0 40 fa 00 c0 	mov    DWORD PTR ds:0xc002e52c,0xc000fa40
c000fba7:	c7 05 34 e5 02 c0 56 f9 00 c0 	mov    DWORD PTR ds:0xc002e534,0xc000f956
c000fbb1:	c7 05 28 e5 02 c0 b1 f9 00 c0 	mov    DWORD PTR ds:0xc002e528,0xc000f9b1
c000fbbb:	c7 05 30 e5 02 c0 b2 f9 00 c0 	mov    DWORD PTR ds:0xc002e530,0xc000f9b2
c000fbc5:	c7 05 3c e5 02 c0 e1 fa 00 c0 	mov    DWORD PTR ds:0xc002e53c,0xc000fae1
c000fbcf:	c3                   	ret    

c000fbd0 <kernel_main>:
c000fbd0:	57                   	push   edi
c000fbd1:	bf f9 03 00 00       	mov    edi,0x3f9
c000fbd6:	56                   	push   esi
c000fbd7:	89 fa                	mov    edx,edi
c000fbd9:	53                   	push   ebx
c000fbda:	31 f6                	xor    esi,esi
c000fbdc:	83 ec 2c             	sub    esp,0x2c
c000fbdf:	89 f0                	mov    eax,esi
c000fbe1:	ee                   	out    dx,al
c000fbe2:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fbe7:	b0 80                	mov    al,0x80
c000fbe9:	89 da                	mov    edx,ebx
c000fbeb:	ee                   	out    dx,al
c000fbec:	b1 03                	mov    cl,0x3
c000fbee:	ba f8 03 00 00       	mov    edx,0x3f8
c000fbf3:	88 c8                	mov    al,cl
c000fbf5:	ee                   	out    dx,al
c000fbf6:	89 f0                	mov    eax,esi
c000fbf8:	89 fa                	mov    edx,edi
c000fbfa:	ee                   	out    dx,al
c000fbfb:	88 c8                	mov    al,cl
c000fbfd:	89 da                	mov    edx,ebx
c000fbff:	ee                   	out    dx,al
c000fc00:	b0 c7                	mov    al,0xc7
c000fc02:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc07:	ee                   	out    dx,al
c000fc08:	b0 0b                	mov    al,0xb
c000fc0a:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc0f:	ee                   	out    dx,al
c000fc10:	68 44 a2 02 c0       	push   0xc002a244
c000fc15:	e8 a9 31 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000fc1a:	e8 47 09 00 00       	call   c0010566 <installVgaTextImplementation()>
c000fc1f:	e8 3c ff ff ff       	call   c000fb60 <setupTextMode()>
c000fc24:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc29:	05 ff 0f 00 00       	add    eax,0xfff
c000fc2e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc33:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc36:	e8 f3 03 00 00       	call   c001002e <Phys::physicalMemorySetup(unsigned int)>
c000fc3b:	e8 6e 1f 00 00       	call   c0011bae <Virt::virtualMemorySetup()>
c000fc40:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fc46:	83 c4 10             	add    esp,0x10
c000fc49:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fc4f:	75 0e                	jne    c000fc5f <kernel_main+0x8f>
c000fc51:	89 d8                	mov    eax,ebx
c000fc53:	25 48 03 00 00       	and    eax,0x348
c000fc58:	3d 00 03 00 00       	cmp    eax,0x300
c000fc5d:	74 10                	je     c000fc6f <kernel_main+0x9f>
c000fc5f:	83 ec 0c             	sub    esp,0xc
c000fc62:	68 21 bb 02 c0       	push   0xc002bb21
c000fc67:	e8 95 a8 00 00       	call   c001a501 <Krnl::panic(char const*)>
c000fc6c:	83 c4 10             	add    esp,0x10
c000fc6f:	83 ec 0c             	sub    esp,0xc
c000fc72:	89 1d 80 e4 02 c0    	mov    DWORD PTR ds:0xc002e480,ebx
c000fc78:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fc7c:	53                   	push   ebx
c000fc7d:	e8 7e 21 00 00       	call   c0011e00 <VAS::VAS()>
c000fc82:	89 1d f0 e5 02 c0    	mov    DWORD PTR ds:0xc002e5f0,ebx
c000fc88:	e8 93 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fc8d:	c7 04 24 5b a2 02 c0 	mov    DWORD PTR [esp],0xc002a25b
c000fc94:	e8 2a 31 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000fc99:	e8 8f 1f 00 00       	call   c0011c2d <Virt::swappingSetup()>
c000fc9e:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fca5:	e8 a1 fb ff ff       	call   c000f84b <malloc>
c000fcaa:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcad:	89 c6                	mov    esi,eax
c000fcaf:	e8 8e ea ff ff       	call   c000e742 <Computer::Computer()>
c000fcb4:	58                   	pop    eax
c000fcb5:	89 35 68 e4 02 c0    	mov    DWORD PTR ds:0xc002e468,esi
c000fcbb:	5a                   	pop    edx
c000fcbc:	56                   	push   esi
c000fcbd:	68 78 a2 02 c0       	push   0xc002a278
c000fcc2:	e8 fc 30 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000fcc7:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c000fccc:	8b 10                	mov    edx,DWORD PTR [eax]
c000fcce:	6a 00                	push   0x0
c000fcd0:	6a 00                	push   0x0
c000fcd2:	6a 00                	push   0x0
c000fcd4:	50                   	push   eax
c000fcd5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fcd8:	83 c4 14             	add    esp,0x14
c000fcdb:	53                   	push   ebx
c000fcdc:	e8 cf 23 00 00       	call   c00120b0 <VAS::~VAS()>
c000fce1:	c7 04 24 8b a2 02 c0 	mov    DWORD PTR [esp],0xc002a28b
c000fce8:	e8 14 a8 00 00       	call   c001a501 <Krnl::panic(char const*)>
c000fced:	83 c4 30             	add    esp,0x30
c000fcf0:	5b                   	pop    ebx
c000fcf1:	5e                   	pop    esi
c000fcf2:	5f                   	pop    edi
c000fcf3:	c3                   	ret    

c000fcf4 <Phys::allocateDMA(unsigned long)>:
c000fcf4:	55                   	push   ebp
c000fcf5:	31 d2                	xor    edx,edx
c000fcf7:	57                   	push   edi
c000fcf8:	31 ed                	xor    ebp,ebp
c000fcfa:	56                   	push   esi
c000fcfb:	31 c9                	xor    ecx,ecx
c000fcfd:	53                   	push   ebx
c000fcfe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd02:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd08:	31 c0                	xor    eax,eax
c000fd0a:	c1 ee 0c             	shr    esi,0xc
c000fd0d:	eb 17                	jmp    c000fd26 <Phys::allocateDMA(unsigned long)+0x32>
c000fd0f:	85 c9                	test   ecx,ecx
c000fd11:	75 04                	jne    c000fd17 <Phys::allocateDMA(unsigned long)+0x23>
c000fd13:	89 d5                	mov    ebp,edx
c000fd15:	89 d0                	mov    eax,edx
c000fd17:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd1a:	39 de                	cmp    esi,ebx
c000fd1c:	74 20                	je     c000fd3e <Phys::allocateDMA(unsigned long)+0x4a>
c000fd1e:	42                   	inc    edx
c000fd1f:	89 d9                	mov    ecx,ebx
c000fd21:	83 fa 2f             	cmp    edx,0x2f
c000fd24:	7f 11                	jg     c000fd37 <Phys::allocateDMA(unsigned long)+0x43>
c000fd26:	80 ba c0 e4 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd1b40],0x0
c000fd2d:	74 e0                	je     c000fd0f <Phys::allocateDMA(unsigned long)+0x1b>
c000fd2f:	31 c9                	xor    ecx,ecx
c000fd31:	42                   	inc    edx
c000fd32:	83 fa 2f             	cmp    edx,0x2f
c000fd35:	7e ef                	jle    c000fd26 <Phys::allocateDMA(unsigned long)+0x32>
c000fd37:	5b                   	pop    ebx
c000fd38:	31 c0                	xor    eax,eax
c000fd3a:	5e                   	pop    esi
c000fd3b:	5f                   	pop    edi
c000fd3c:	5d                   	pop    ebp
c000fd3d:	c3                   	ret    
c000fd3e:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd41:	89 d7                	mov    edi,edx
c000fd43:	4f                   	dec    edi
c000fd44:	79 03                	jns    c000fd49 <Phys::allocateDMA(unsigned long)+0x55>
c000fd46:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fd49:	c1 ff 04             	sar    edi,0x4
c000fd4c:	89 c2                	mov    edx,eax
c000fd4e:	c1 fa 04             	sar    edx,0x4
c000fd51:	39 fa                	cmp    edx,edi
c000fd53:	75 2f                	jne    c000fd84 <Phys::allocateDMA(unsigned long)+0x90>
c000fd55:	85 db                	test   ebx,ebx
c000fd57:	74 1a                	je     c000fd73 <Phys::allocateDMA(unsigned long)+0x7f>
c000fd59:	be c0 e4 02 c0       	mov    esi,0xc002e4c0
c000fd5e:	8d 90 c0 e4 02 c0    	lea    edx,[eax-0x3ffd1b40]
c000fd64:	f7 d6                	not    esi
c000fd66:	29 c6                	sub    esi,eax
c000fd68:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fd6b:	42                   	inc    edx
c000fd6c:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fd6f:	39 d9                	cmp    ecx,ebx
c000fd71:	7f f5                	jg     c000fd68 <Phys::allocateDMA(unsigned long)+0x74>
c000fd73:	85 ff                	test   edi,edi
c000fd75:	74 13                	je     c000fd8a <Phys::allocateDMA(unsigned long)+0x96>
c000fd77:	5b                   	pop    ebx
c000fd78:	05 50 20 0c 00       	add    eax,0xc2050
c000fd7d:	5e                   	pop    esi
c000fd7e:	c1 e0 0c             	shl    eax,0xc
c000fd81:	5f                   	pop    edi
c000fd82:	5d                   	pop    ebp
c000fd83:	c3                   	ret    
c000fd84:	89 ea                	mov    edx,ebp
c000fd86:	31 c9                	xor    ecx,ecx
c000fd88:	eb a7                	jmp    c000fd31 <Phys::allocateDMA(unsigned long)+0x3d>
c000fd8a:	5b                   	pop    ebx
c000fd8b:	c1 e0 0c             	shl    eax,0xc
c000fd8e:	5e                   	pop    esi
c000fd8f:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fd94:	5f                   	pop    edi
c000fd95:	5d                   	pop    ebp
c000fd96:	c3                   	ret    

c000fd97 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fd97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fd9b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fd9f:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fda5:	c1 e9 0c             	shr    ecx,0xc
c000fda8:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fdad:	76 25                	jbe    c000fdd4 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fdaf:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fdb4:	c1 e8 0c             	shr    eax,0xc
c000fdb7:	8d 50 10             	lea    edx,[eax+0x10]
c000fdba:	85 c9                	test   ecx,ecx
c000fdbc:	74 15                	je     c000fdd3 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fdbe:	8d 82 c0 e4 02 c0    	lea    eax,[edx-0x3ffd1b40]
c000fdc4:	8d 94 11 c0 e4 02 c0 	lea    edx,[ecx+edx*1-0x3ffd1b40]
c000fdcb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fdce:	40                   	inc    eax
c000fdcf:	39 d0                	cmp    eax,edx
c000fdd1:	75 f8                	jne    c000fdcb <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fdd3:	c3                   	ret    
c000fdd4:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fdda:	c1 ea 0c             	shr    edx,0xc
c000fddd:	eb db                	jmp    c000fdba <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fddf <Phys::setPageState(unsigned long, bool)>:
c000fddf:	56                   	push   esi
c000fde0:	ba 01 00 00 00       	mov    edx,0x1
c000fde5:	53                   	push   ebx
c000fde6:	8b 35 8c d3 02 c0    	mov    esi,DWORD PTR ds:0xc002d38c
c000fdec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fdf0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fdf4:	89 c8                	mov    eax,ecx
c000fdf6:	83 e1 07             	and    ecx,0x7
c000fdf9:	c1 e8 03             	shr    eax,0x3
c000fdfc:	d3 e3                	shl    ebx,cl
c000fdfe:	01 c6                	add    esi,eax
c000fe00:	d3 e2                	shl    edx,cl
c000fe02:	f7 d2                	not    edx
c000fe04:	20 16                	and    BYTE PTR [esi],dl
c000fe06:	03 05 8c d3 02 c0    	add    eax,DWORD PTR ds:0xc002d38c
c000fe0c:	08 18                	or     BYTE PTR [eax],bl
c000fe0e:	5b                   	pop    ebx
c000fe0f:	5e                   	pop    esi
c000fe10:	c3                   	ret    

c000fe11 <Phys::getPageState(unsigned long)>:
c000fe11:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe15:	8b 15 8c d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d38c
c000fe1b:	89 c8                	mov    eax,ecx
c000fe1d:	83 e1 07             	and    ecx,0x7
c000fe20:	c1 e8 03             	shr    eax,0x3
c000fe23:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe27:	d3 f8                	sar    eax,cl
c000fe29:	83 e0 01             	and    eax,0x1
c000fe2c:	c3                   	ret    

c000fe2d <Phys::freePage(unsigned long)>:
c000fe2d:	53                   	push   ebx
c000fe2e:	83 ec 08             	sub    esp,0x8
c000fe31:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe35:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe3b:	76 57                	jbe    c000fe94 <Phys::freePage(unsigned long)+0x67>
c000fe3d:	c1 eb 0c             	shr    ebx,0xc
c000fe40:	53                   	push   ebx
c000fe41:	e8 cb ff ff ff       	call   c000fe11 <Phys::getPageState(unsigned long)>
c000fe46:	5a                   	pop    edx
c000fe47:	84 c0                	test   al,al
c000fe49:	74 5b                	je     c000fea6 <Phys::freePage(unsigned long)+0x79>
c000fe4b:	a1 b0 e4 02 c0       	mov    eax,ds:0xc002e4b0
c000fe50:	48                   	dec    eax
c000fe51:	a3 b0 e4 02 c0       	mov    ds:0xc002e4b0,eax
c000fe56:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe59:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe5c:	c1 e0 02             	shl    eax,0x2
c000fe5f:	99                   	cdq    
c000fe60:	f7 3d b4 e4 02 c0    	idiv   DWORD PTR ds:0xc002e4b4
c000fe66:	39 05 ac e4 02 c0    	cmp    DWORD PTR ds:0xc002e4ac,eax
c000fe6c:	75 13                	jne    c000fe81 <Phys::freePage(unsigned long)+0x54>
c000fe6e:	83 ec 08             	sub    esp,0x8
c000fe71:	6a 00                	push   0x0
c000fe73:	53                   	push   ebx
c000fe74:	e8 66 ff ff ff       	call   c000fddf <Phys::setPageState(unsigned long, bool)>
c000fe79:	83 c4 10             	add    esp,0x10
c000fe7c:	83 c4 08             	add    esp,0x8
c000fe7f:	5b                   	pop    ebx
c000fe80:	c3                   	ret    
c000fe81:	83 ec 0c             	sub    esp,0xc
c000fe84:	a3 ac e4 02 c0       	mov    ds:0xc002e4ac,eax
c000fe89:	50                   	push   eax
c000fe8a:	e8 05 0a 00 00       	call   c0010894 <VgaText::updateRAMUsageDisplay(int)>
c000fe8f:	83 c4 10             	add    esp,0x10
c000fe92:	eb da                	jmp    c000fe6e <Phys::freePage(unsigned long)+0x41>
c000fe94:	68 00 10 00 00       	push   0x1000
c000fe99:	53                   	push   ebx
c000fe9a:	e8 f8 fe ff ff       	call   c000fd97 <Phys::freeDMA(unsigned long, unsigned long)>
c000fe9f:	59                   	pop    ecx
c000fea0:	5b                   	pop    ebx
c000fea1:	83 c4 08             	add    esp,0x8
c000fea4:	5b                   	pop    ebx
c000fea5:	c3                   	ret    
c000fea6:	c7 44 24 10 a6 a2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a2a6
c000feae:	83 c4 08             	add    esp,0x8
c000feb1:	5b                   	pop    ebx
c000feb2:	e9 4a a6 00 00       	jmp    c001a501 <Krnl::panic(char const*)>

c000feb7 <Phys::allocatePage()>:
c000feb7:	56                   	push   esi
c000feb8:	53                   	push   ebx
c000feb9:	51                   	push   ecx
c000feba:	8b 35 a4 e4 02 c0    	mov    esi,DWORD PTR ds:0xc002e4a4
c000fec0:	89 f3                	mov    ebx,esi
c000fec2:	eb 0a                	jmp    c000fece <Phys::allocatePage()+0x17>
c000fec4:	89 1d a4 e4 02 c0    	mov    DWORD PTR ds:0xc002e4a4,ebx
c000feca:	39 de                	cmp    esi,ebx
c000fecc:	74 24                	je     c000fef2 <Phys::allocatePage()+0x3b>
c000fece:	53                   	push   ebx
c000fecf:	e8 3d ff ff ff       	call   c000fe11 <Phys::getPageState(unsigned long)>
c000fed4:	5a                   	pop    edx
c000fed5:	84 c0                	test   al,al
c000fed7:	74 77                	je     c000ff50 <Phys::allocatePage()+0x99>
c000fed9:	43                   	inc    ebx
c000feda:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fee0:	75 e2                	jne    c000fec4 <Phys::allocatePage()+0xd>
c000fee2:	31 db                	xor    ebx,ebx
c000fee4:	c7 05 a4 e4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e4a4,0x0
c000feee:	39 de                	cmp    esi,ebx
c000fef0:	75 dc                	jne    c000fece <Phys::allocatePage()+0x17>
c000fef2:	83 ec 0c             	sub    esp,0xc
c000fef5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fefa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fefd:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000ff03:	e8 e8 2b 00 00       	call   c0012af0 <VAS::scanForEviction()>
c000ff08:	83 c4 10             	add    esp,0x10
c000ff0b:	85 c0                	test   eax,eax
c000ff0d:	75 76                	jne    c000ff85 <Phys::allocatePage()+0xce>
c000ff0f:	83 ec 0c             	sub    esp,0xc
c000ff12:	68 bc a2 02 c0       	push   0xc002a2bc
c000ff17:	e8 a7 2e 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000ff1c:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff23:	e8 cc fd ff ff       	call   c000fcf4 <Phys::allocateDMA(unsigned long)>
c000ff28:	83 c4 10             	add    esp,0x10
c000ff2b:	85 c0                	test   eax,eax
c000ff2d:	75 56                	jne    c000ff85 <Phys::allocatePage()+0xce>
c000ff2f:	83 ec 0c             	sub    esp,0xc
c000ff32:	68 cd a2 02 c0       	push   0xc002a2cd
c000ff37:	e8 c5 a5 00 00       	call   c001a501 <Krnl::panic(char const*)>
c000ff3c:	83 c4 10             	add    esp,0x10
c000ff3f:	8b 1d a4 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e4a4
c000ff45:	53                   	push   ebx
c000ff46:	e8 c6 fe ff ff       	call   c000fe11 <Phys::getPageState(unsigned long)>
c000ff4b:	5a                   	pop    edx
c000ff4c:	84 c0                	test   al,al
c000ff4e:	75 89                	jne    c000fed9 <Phys::allocatePage()+0x22>
c000ff50:	6a 01                	push   0x1
c000ff52:	53                   	push   ebx
c000ff53:	e8 87 fe ff ff       	call   c000fddf <Phys::setPageState(unsigned long, bool)>
c000ff58:	a1 b0 e4 02 c0       	mov    eax,ds:0xc002e4b0
c000ff5d:	59                   	pop    ecx
c000ff5e:	40                   	inc    eax
c000ff5f:	5b                   	pop    ebx
c000ff60:	a3 b0 e4 02 c0       	mov    ds:0xc002e4b0,eax
c000ff65:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff68:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff6b:	c1 e0 02             	shl    eax,0x2
c000ff6e:	99                   	cdq    
c000ff6f:	f7 3d b4 e4 02 c0    	idiv   DWORD PTR ds:0xc002e4b4
c000ff75:	39 05 ac e4 02 c0    	cmp    DWORD PTR ds:0xc002e4ac,eax
c000ff7b:	75 0c                	jne    c000ff89 <Phys::allocatePage()+0xd2>
c000ff7d:	a1 a4 e4 02 c0       	mov    eax,ds:0xc002e4a4
c000ff82:	c1 e0 0c             	shl    eax,0xc
c000ff85:	5a                   	pop    edx
c000ff86:	5b                   	pop    ebx
c000ff87:	5e                   	pop    esi
c000ff88:	c3                   	ret    
c000ff89:	83 ec 0c             	sub    esp,0xc
c000ff8c:	a3 ac e4 02 c0       	mov    ds:0xc002e4ac,eax
c000ff91:	50                   	push   eax
c000ff92:	e8 fd 08 00 00       	call   c0010894 <VgaText::updateRAMUsageDisplay(int)>
c000ff97:	83 c4 10             	add    esp,0x10
c000ff9a:	eb e1                	jmp    c000ff7d <Phys::allocatePage()+0xc6>

c000ff9c <Phys::allocateContiguousPages(int)>:
c000ff9c:	57                   	push   edi
c000ff9d:	56                   	push   esi
c000ff9e:	53                   	push   ebx
c000ff9f:	31 db                	xor    ebx,ebx
c000ffa1:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000ffa5:	e8 32 dd 00 00       	call   c001dcdc <lockScheduler()>
c000ffaa:	85 db                	test   ebx,ebx
c000ffac:	75 11                	jne    c000ffbf <Phys::allocateContiguousPages(int)+0x23>
c000ffae:	e8 04 ff ff ff       	call   c000feb7 <Phys::allocatePage()>
c000ffb3:	83 ff 01             	cmp    edi,0x1
c000ffb6:	89 c6                	mov    esi,eax
c000ffb8:	74 21                	je     c000ffdb <Phys::allocateContiguousPages(int)+0x3f>
c000ffba:	bb 01 00 00 00       	mov    ebx,0x1
c000ffbf:	e8 f3 fe ff ff       	call   c000feb7 <Phys::allocatePage()>
c000ffc4:	89 da                	mov    edx,ebx
c000ffc6:	c1 e2 0c             	shl    edx,0xc
c000ffc9:	01 f2                	add    edx,esi
c000ffcb:	39 c2                	cmp    edx,eax
c000ffcd:	74 17                	je     c000ffe6 <Phys::allocateContiguousPages(int)+0x4a>
c000ffcf:	bb 01 00 00 00       	mov    ebx,0x1
c000ffd4:	89 c6                	mov    esi,eax
c000ffd6:	83 ff 01             	cmp    edi,0x1
c000ffd9:	75 e4                	jne    c000ffbf <Phys::allocateContiguousPages(int)+0x23>
c000ffdb:	e8 fe dc 00 00       	call   c001dcde <unlockScheduler()>
c000ffe0:	89 f0                	mov    eax,esi
c000ffe2:	5b                   	pop    ebx
c000ffe3:	5e                   	pop    esi
c000ffe4:	5f                   	pop    edi
c000ffe5:	c3                   	ret    
c000ffe6:	43                   	inc    ebx
c000ffe7:	39 fb                	cmp    ebx,edi
c000ffe9:	75 bf                	jne    c000ffaa <Phys::allocateContiguousPages(int)+0xe>
c000ffeb:	e8 ee dc 00 00       	call   c001dcde <unlockScheduler()>
c000fff0:	89 f0                	mov    eax,esi
c000fff2:	5b                   	pop    ebx
c000fff3:	5e                   	pop    esi
c000fff4:	5f                   	pop    edi
c000fff5:	c3                   	ret    

c000fff6 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fff6:	56                   	push   esi
c000fff7:	53                   	push   ebx
c000fff8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fffc:	39 1d a8 e4 02 c0    	cmp    DWORD PTR ds:0xc002e4a8,ebx
c0010002:	73 06                	jae    c001000a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0010004:	89 1d a8 e4 02 c0    	mov    DWORD PTR ds:0xc002e4a8,ebx
c001000a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001000e:	c1 eb 0c             	shr    ebx,0xc
c0010011:	c1 e8 0c             	shr    eax,0xc
c0010014:	39 d8                	cmp    eax,ebx
c0010016:	73 13                	jae    c001002b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0010018:	6a 00                	push   0x0
c001001a:	8d 70 01             	lea    esi,[eax+0x1]
c001001d:	50                   	push   eax
c001001e:	e8 bc fd ff ff       	call   c000fddf <Phys::setPageState(unsigned long, bool)>
c0010023:	5a                   	pop    edx
c0010024:	89 f0                	mov    eax,esi
c0010026:	59                   	pop    ecx
c0010027:	39 f3                	cmp    ebx,esi
c0010029:	75 ed                	jne    c0010018 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c001002b:	5b                   	pop    ebx
c001002c:	5e                   	pop    esi
c001002d:	c3                   	ret    

c001002e <Phys::physicalMemorySetup(unsigned int)>:
c001002e:	55                   	push   ebp
c001002f:	57                   	push   edi
c0010030:	56                   	push   esi
c0010031:	53                   	push   ebx
c0010032:	31 db                	xor    ebx,ebx
c0010034:	83 ec 40             	sub    esp,0x40
c0010037:	6a 30                	push   0x30
c0010039:	6a 00                	push   0x0
c001003b:	68 c0 e4 02 c0       	push   0xc002e4c0
c0010040:	e8 3b 07 ff ff       	call   c0000780 <memset>
c0010045:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0010049:	25 00 f0 ff ff       	and    eax,0xfffff000
c001004e:	05 00 10 00 00       	add    eax,0x1000
c0010053:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0010057:	83 c4 10             	add    esp,0x10
c001005a:	83 ec 08             	sub    esp,0x8
c001005d:	6a 01                	push   0x1
c001005f:	53                   	push   ebx
c0010060:	43                   	inc    ebx
c0010061:	e8 79 fd ff ff       	call   c000fddf <Phys::setPageState(unsigned long, bool)>
c0010066:	83 c4 10             	add    esp,0x10
c0010069:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c001006f:	75 e9                	jne    c001005a <Phys::physicalMemorySetup(unsigned int)+0x2c>
c0010071:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0010078:	66 85 c0             	test   ax,ax
c001007b:	0f 84 8e 01 00 00    	je     c001020f <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c0010081:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0010085:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001008d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010091:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0010096:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001009a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00100a2:	eb 15                	jmp    c00100b9 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c00100a4:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00100a8:	83 c3 18             	add    ebx,0x18
c00100ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100af:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00100b3:	0f 84 66 01 00 00    	je     c001021f <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c00100b9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00100bc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00100bf:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00100c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00100c6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00100ca:	8b 33                	mov    esi,DWORD PTR [ebx]
c00100cc:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c00100cf:	01 f0                	add    eax,esi
c00100d1:	55                   	push   ebp
c00100d2:	11 fa                	adc    edx,edi
c00100d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00100d8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00100dc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00100e0:	56                   	push   esi
c00100e1:	68 08 a3 02 c0       	push   0xc002a308
c00100e6:	e8 d8 2c 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00100eb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00100ef:	83 c4 10             	add    esp,0x10
c00100f2:	09 f8                	or     eax,edi
c00100f4:	0f 85 25 01 00 00    	jne    c001021f <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c00100fa:	4d                   	dec    ebp
c00100fb:	75 a7                	jne    c00100a4 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00100fd:	ba 00 00 08 00       	mov    edx,0x80000
c0010102:	89 c1                	mov    ecx,eax
c0010104:	39 f2                	cmp    edx,esi
c0010106:	19 f9                	sbb    ecx,edi
c0010108:	0f 82 a7 00 00 00    	jb     c00101b5 <Phys::physicalMemorySetup(unsigned int)+0x187>
c001010e:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0010112:	89 c1                	mov    ecx,eax
c0010114:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0010118:	0f 83 97 00 00 00    	jae    c00101b5 <Phys::physicalMemorySetup(unsigned int)+0x187>
c001011e:	ba 00 00 0a 00       	mov    edx,0xa0000
c0010123:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010127:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c001012b:	39 fa                	cmp    edx,edi
c001012d:	19 e8                	sbb    eax,ebp
c001012f:	0f 82 14 01 00 00    	jb     c0010249 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c0010135:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010139:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c001013d:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0010143:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010148:	83 d5 ff             	adc    ebp,0xffffffff
c001014b:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001014f:	31 c0                	xor    eax,eax
c0010151:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0010155:	39 fa                	cmp    edx,edi
c0010157:	89 c1                	mov    ecx,eax
c0010159:	19 e9                	sbb    ecx,ebp
c001015b:	0f 83 43 ff ff ff    	jae    c00100a4 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010161:	be 00 00 08 00       	mov    esi,0x80000
c0010166:	50                   	push   eax
c0010167:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001016b:	57                   	push   edi
c001016c:	56                   	push   esi
c001016d:	68 2c a3 02 c0       	push   0xc002a32c
c0010172:	e8 4c 2c 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0010177:	5a                   	pop    edx
c0010178:	59                   	pop    ecx
c0010179:	57                   	push   edi
c001017a:	56                   	push   esi
c001017b:	e8 76 fe ff ff       	call   c000fff6 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0010180:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010184:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010188:	83 c4 0c             	add    esp,0xc
c001018b:	0f ac d0 0c          	shrd   eax,edx,0xc
c001018f:	03 05 b4 e4 02 c0    	add    eax,DWORD PTR ds:0xc002e4b4
c0010195:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001019c:	a3 b4 e4 02 c0       	mov    ds:0xc002e4b4,eax
c00101a1:	52                   	push   edx
c00101a2:	50                   	push   eax
c00101a3:	68 e9 a2 02 c0       	push   0xc002a2e9
c00101a8:	e8 16 2c 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00101ad:	83 c4 10             	add    esp,0x10
c00101b0:	e9 ef fe ff ff       	jmp    c00100a4 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101b5:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00101b9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101bd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00101c1:	39 ea                	cmp    edx,ebp
c00101c3:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00101c7:	0f 82 d7 fe ff ff    	jb     c00100a4 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101cd:	ba ff 1f 00 00       	mov    edx,0x1fff
c00101d2:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00101d6:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00101da:	0f 83 c4 fe ff ff    	jae    c00100a4 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101e0:	39 ee                	cmp    esi,ebp
c00101e2:	89 f8                	mov    eax,edi
c00101e4:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c00101e8:	0f 83 78 ff ff ff    	jae    c0010166 <Phys::physicalMemorySetup(unsigned int)+0x138>
c00101ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00101f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00101f6:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00101fa:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00101fe:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0010202:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010206:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001020a:	e9 57 ff ff ff       	jmp    c0010166 <Phys::physicalMemorySetup(unsigned int)+0x138>
c001020f:	83 ec 0c             	sub    esp,0xc
c0010212:	68 db a2 02 c0       	push   0xc002a2db
c0010217:	e8 e5 a2 00 00       	call   c001a501 <Krnl::panic(char const*)>
c001021c:	83 c4 10             	add    esp,0x10
c001021f:	bb 40 01 00 00       	mov    ebx,0x140
c0010224:	83 ec 08             	sub    esp,0x8
c0010227:	6a 00                	push   0x0
c0010229:	53                   	push   ebx
c001022a:	43                   	inc    ebx
c001022b:	e8 af fb ff ff       	call   c000fddf <Phys::setPageState(unsigned long, bool)>
c0010230:	ff 05 b4 e4 02 c0    	inc    DWORD PTR ds:0xc002e4b4
c0010236:	83 c4 10             	add    esp,0x10
c0010239:	81 fb 80 01 00 00    	cmp    ebx,0x180
c001023f:	75 e3                	jne    c0010224 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0010241:	83 c4 3c             	add    esp,0x3c
c0010244:	5b                   	pop    ebx
c0010245:	5e                   	pop    esi
c0010246:	5f                   	pop    edi
c0010247:	5d                   	pop    ebp
c0010248:	c3                   	ret    
c0010249:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0010251:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010259:	e9 d7 fe ff ff       	jmp    c0010135 <Phys::physicalMemorySetup(unsigned int)+0x107>

c001025e <Pipe::isAtty()>:
c001025e:	31 c0                	xor    eax,eax
c0010260:	c3                   	ret    
c0010261:	90                   	nop

c0010262 <Pipe::~Pipe()>:
c0010262:	83 ec 0c             	sub    esp,0xc
c0010265:	ba 98 a3 02 c0       	mov    edx,0xc002a398
c001026a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001026e:	89 10                	mov    DWORD PTR [eax],edx
c0010270:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010274:	83 ec 0c             	sub    esp,0xc
c0010277:	50                   	push   eax
c0010278:	e8 11 15 00 00       	call   c001178e <UnixFile::~UnixFile()>
c001027d:	83 c4 10             	add    esp,0x10
c0010280:	90                   	nop
c0010281:	83 c4 0c             	add    esp,0xc
c0010284:	c3                   	ret    
c0010285:	90                   	nop

c0010286 <Pipe::~Pipe()>:
c0010286:	83 ec 0c             	sub    esp,0xc
c0010289:	83 ec 0c             	sub    esp,0xc
c001028c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010290:	e8 cd ff ff ff       	call   c0010262 <Pipe::~Pipe()>
c0010295:	83 c4 10             	add    esp,0x10
c0010298:	83 ec 08             	sub    esp,0x8
c001029b:	6a 20                	push   0x20
c001029d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102a1:	e8 3d 2a 00 00       	call   c0012ce3 <operator delete(void*, unsigned long)>
c00102a6:	83 c4 10             	add    esp,0x10
c00102a9:	83 c4 0c             	add    esp,0xc
c00102ac:	c3                   	ret    
c00102ad:	90                   	nop

c00102ae <Pipe::read(unsigned long long, void*, int*)>:
c00102ae:	55                   	push   ebp
c00102af:	57                   	push   edi
c00102b0:	56                   	push   esi
c00102b1:	53                   	push   ebx
c00102b2:	83 ec 1c             	sub    esp,0x1c
c00102b5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00102b9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00102bd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00102c1:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00102c4:	89 c8                	mov    eax,ecx
c00102c6:	99                   	cdq    
c00102c7:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c00102cb:	74 19                	je     c00102e6 <Pipe::read(unsigned long long, void*, int*)+0x38>
c00102cd:	39 f9                	cmp    ecx,edi
c00102cf:	89 d1                	mov    ecx,edx
c00102d1:	19 f1                	sbb    ecx,esi
c00102d3:	73 11                	jae    c00102e6 <Pipe::read(unsigned long long, void*, int*)+0x38>
c00102d5:	e8 02 da 00 00       	call   c001dcdc <lockScheduler()>
c00102da:	e8 73 dd 00 00       	call   c001e052 <schedule()>
c00102df:	e8 fa d9 00 00       	call   c001dcde <unlockScheduler()>
c00102e4:	eb db                	jmp    c00102c1 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00102e6:	39 f8                	cmp    eax,edi
c00102e8:	89 d1                	mov    ecx,edx
c00102ea:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00102ee:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00102f2:	19 f1                	sbb    ecx,esi
c00102f4:	73 08                	jae    c00102fe <Pipe::read(unsigned long long, void*, int*)+0x50>
c00102f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00102fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00102fe:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010301:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010304:	29 c6                	sub    esi,eax
c0010306:	89 f1                	mov    ecx,esi
c0010308:	c1 f9 1f             	sar    ecx,0x1f
c001030b:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001030f:	89 ca                	mov    edx,ecx
c0010311:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010315:	19 d1                	sbb    ecx,edx
c0010317:	73 04                	jae    c001031d <Pipe::read(unsigned long long, void*, int*)+0x6f>
c0010319:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001031d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010321:	89 fd                	mov    ebp,edi
c0010323:	29 f5                	sub    ebp,esi
c0010325:	85 f6                	test   esi,esi
c0010327:	74 12                	je     c001033b <Pipe::read(unsigned long long, void*, int*)+0x8d>
c0010329:	52                   	push   edx
c001032a:	56                   	push   esi
c001032b:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c001032e:	50                   	push   eax
c001032f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0010333:	e8 14 04 ff ff       	call   c000074c <memcpy>
c0010338:	83 c4 10             	add    esp,0x10
c001033b:	85 ed                	test   ebp,ebp
c001033d:	74 12                	je     c0010351 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c001033f:	50                   	push   eax
c0010340:	55                   	push   ebp
c0010341:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0010344:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c0010348:	56                   	push   esi
c0010349:	e8 fe 03 ff ff       	call   c000074c <memcpy>
c001034e:	83 c4 10             	add    esp,0x10
c0010351:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c0010354:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010357:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c001035a:	99                   	cdq    
c001035b:	89 f7                	mov    edi,esi
c001035d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0010361:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0010365:	c1 ff 1f             	sar    edi,0x1f
c0010368:	57                   	push   edi
c0010369:	56                   	push   esi
c001036a:	52                   	push   edx
c001036b:	50                   	push   eax
c001036c:	e8 53 67 01 00       	call   c0026ac4 <__umoddi3>
c0010371:	83 c4 10             	add    esp,0x10
c0010374:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010377:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001037c:	75 10                	jne    c001038e <Pipe::read(unsigned long long, void*, int*)+0xe0>
c001037e:	83 ec 0c             	sub    esp,0xc
c0010381:	68 55 a3 02 c0       	push   0xc002a355
c0010386:	e8 76 a1 00 00       	call   c001a501 <Krnl::panic(char const*)>
c001038b:	83 c4 10             	add    esp,0x10
c001038e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010392:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010396:	89 10                	mov    DWORD PTR [eax],edx
c0010398:	83 c4 1c             	add    esp,0x1c
c001039b:	31 c0                	xor    eax,eax
c001039d:	5b                   	pop    ebx
c001039e:	5e                   	pop    esi
c001039f:	5f                   	pop    edi
c00103a0:	5d                   	pop    ebp
c00103a1:	c3                   	ret    

c00103a2 <Pipe::write(unsigned long long, void*, int*)>:
c00103a2:	55                   	push   ebp
c00103a3:	57                   	push   edi
c00103a4:	56                   	push   esi
c00103a5:	53                   	push   ebx
c00103a6:	83 ec 1c             	sub    esp,0x1c
c00103a9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00103ad:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00103b1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00103b5:	89 04 24             	mov    DWORD PTR [esp],eax
c00103b8:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00103bb:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c00103be:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00103c2:	89 de                	mov    esi,ebx
c00103c4:	89 df                	mov    edi,ebx
c00103c6:	c1 ff 1f             	sar    edi,0x1f
c00103c9:	01 c6                	add    esi,eax
c00103cb:	89 c8                	mov    eax,ecx
c00103cd:	11 d7                	adc    edi,edx
c00103cf:	99                   	cdq    
c00103d0:	39 f1                	cmp    ecx,esi
c00103d2:	89 d0                	mov    eax,edx
c00103d4:	19 f8                	sbb    eax,edi
c00103d6:	b8 01 00 00 00       	mov    eax,0x1
c00103db:	0f 82 80 00 00 00    	jb     c0010461 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c00103e1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00103e4:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00103e7:	01 d8                	add    eax,ebx
c00103e9:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00103ed:	99                   	cdq    
c00103ee:	f7 f9                	idiv   ecx
c00103f0:	29 d1                	sub    ecx,edx
c00103f2:	89 d7                	mov    edi,edx
c00103f4:	89 c8                	mov    eax,ecx
c00103f6:	99                   	cdq    
c00103f7:	39 ce                	cmp    esi,ecx
c00103f9:	19 d3                	sbb    ebx,edx
c00103fb:	bb 00 00 00 00       	mov    ebx,0x0
c0010400:	72 04                	jb     c0010406 <Pipe::write(unsigned long long, void*, int*)+0x64>
c0010402:	89 f3                	mov    ebx,esi
c0010404:	29 cb                	sub    ebx,ecx
c0010406:	89 f1                	mov    ecx,esi
c0010408:	29 d9                	sub    ecx,ebx
c001040a:	74 1a                	je     c0010426 <Pipe::write(unsigned long long, void*, int*)+0x84>
c001040c:	52                   	push   edx
c001040d:	51                   	push   ecx
c001040e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010412:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0010416:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0010419:	57                   	push   edi
c001041a:	e8 2d 03 ff ff       	call   c000074c <memcpy>
c001041f:	83 c4 10             	add    esp,0x10
c0010422:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010426:	85 db                	test   ebx,ebx
c0010428:	74 12                	je     c001043c <Pipe::write(unsigned long long, void*, int*)+0x9a>
c001042a:	50                   	push   eax
c001042b:	53                   	push   ebx
c001042c:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c0010430:	51                   	push   ecx
c0010431:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0010434:	e8 13 03 ff ff       	call   c000074c <memcpy>
c0010439:	83 c4 10             	add    esp,0x10
c001043c:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c001043f:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010444:	75 10                	jne    c0010456 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c0010446:	83 ec 0c             	sub    esp,0xc
c0010449:	68 71 a3 02 c0       	push   0xc002a371
c001044e:	e8 ae a0 00 00       	call   c001a501 <Krnl::panic(char const*)>
c0010453:	83 c4 10             	add    esp,0x10
c0010456:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001045a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001045d:	89 38                	mov    DWORD PTR [eax],edi
c001045f:	31 c0                	xor    eax,eax
c0010461:	83 c4 1c             	add    esp,0x1c
c0010464:	5b                   	pop    ebx
c0010465:	5e                   	pop    esi
c0010466:	5f                   	pop    edi
c0010467:	5d                   	pop    ebp
c0010468:	c3                   	ret    
c0010469:	90                   	nop

c001046a <Pipe::Pipe(int)>:
c001046a:	83 ec 0c             	sub    esp,0xc
c001046d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010471:	83 ec 08             	sub    esp,0x8
c0010474:	6a 00                	push   0x0
c0010476:	50                   	push   eax
c0010477:	e8 30 11 00 00       	call   c00115ac <UnixFile::UnixFile(int)>
c001047c:	83 c4 10             	add    esp,0x10
c001047f:	ba 98 a3 02 c0       	mov    edx,0xc002a398
c0010484:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010488:	89 10                	mov    DWORD PTR [eax],edx
c001048a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001048e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010492:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010495:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010499:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00104a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104a4:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00104ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00104af:	83 ec 0c             	sub    esp,0xc
c00104b2:	50                   	push   eax
c00104b3:	e8 93 f3 ff ff       	call   c000f84b <malloc>
c00104b8:	83 c4 10             	add    esp,0x10
c00104bb:	89 c2                	mov    edx,eax
c00104bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104c1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00104c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104c8:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00104cc:	90                   	nop
c00104cd:	83 c4 0c             	add    esp,0xc
c00104d0:	c3                   	ret    
c00104d1:	90                   	nop

c00104d2 <VgaText::isAtty()>:
c00104d2:	b0 01                	mov    al,0x1
c00104d4:	c3                   	ret    
c00104d5:	90                   	nop

c00104d6 <VgaText::~VgaText()>:
c00104d6:	83 ec 0c             	sub    esp,0xc
c00104d9:	ba 54 a4 02 c0       	mov    edx,0xc002a454
c00104de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104e2:	89 10                	mov    DWORD PTR [eax],edx
c00104e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104e8:	83 ec 0c             	sub    esp,0xc
c00104eb:	50                   	push   eax
c00104ec:	e8 9d 12 00 00       	call   c001178e <UnixFile::~UnixFile()>
c00104f1:	83 c4 10             	add    esp,0x10
c00104f4:	90                   	nop
c00104f5:	83 c4 0c             	add    esp,0xc
c00104f8:	c3                   	ret    
c00104f9:	90                   	nop

c00104fa <VgaText::~VgaText()>:
c00104fa:	83 ec 0c             	sub    esp,0xc
c00104fd:	83 ec 0c             	sub    esp,0xc
c0010500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010504:	e8 cd ff ff ff       	call   c00104d6 <VgaText::~VgaText()>
c0010509:	83 c4 10             	add    esp,0x10
c001050c:	83 ec 08             	sub    esp,0x8
c001050f:	68 c4 02 00 00       	push   0x2c4
c0010514:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010518:	e8 c6 27 00 00       	call   c0012ce3 <operator delete(void*, unsigned long)>
c001051d:	83 c4 10             	add    esp,0x10
c0010520:	83 c4 0c             	add    esp,0xc
c0010523:	c3                   	ret    

c0010524 <VgaText::read(unsigned long long, void*, int*)>:
c0010524:	83 ec 10             	sub    esp,0x10
c0010527:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001052b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001052f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010533:	e8 ae 5c 00 00       	call   c00161e6 <readKeyboard(VgaText*, char*, unsigned long)>
c0010538:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001053c:	89 02                	mov    DWORD PTR [edx],eax
c001053e:	31 c0                	xor    eax,eax
c0010540:	83 c4 1c             	add    esp,0x1c
c0010543:	c3                   	ret    

c0010544 <setTerminalScrollLock(bool)>:
c0010544:	c3                   	ret    

c0010545 <addToTerminalCycle(VgaText*)>:
c0010545:	8b 15 40 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e540
c001054b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001054f:	85 d2                	test   edx,edx
c0010551:	75 09                	jne    c001055c <addToTerminalCycle(VgaText*)+0x17>
c0010553:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c0010556:	a3 40 e5 02 c0       	mov    ds:0xc002e540,eax
c001055b:	c3                   	ret    
c001055c:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c001055f:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0010562:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c0010565:	c3                   	ret    

c0010566 <installVgaTextImplementation()>:
c0010566:	83 ec 10             	sub    esp,0x10
c0010569:	6a 20                	push   0x20
c001056b:	6a 00                	push   0x0
c001056d:	68 20 e5 02 c0       	push   0xc002e520
c0010572:	e8 09 02 ff ff       	call   c0000780 <memset>
c0010577:	83 c4 1c             	add    esp,0x1c
c001057a:	c3                   	ret    

c001057b <scrollTerminalScrollLock(int)>:
c001057b:	c3                   	ret    

c001057c <VgaText::load()>:
c001057c:	53                   	push   ebx
c001057d:	31 c0                	xor    eax,eax
c001057f:	83 ec 58             	sub    esp,0x58
c0010582:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0010586:	89 e2                	mov    edx,esp
c0010588:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c001058c:	40                   	inc    eax
c001058d:	83 f8 50             	cmp    eax,0x50
c0010590:	75 f6                	jne    c0010588 <VgaText::load()+0xc>
c0010592:	31 c0                	xor    eax,eax
c0010594:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c001059b:	84 c9                	test   cl,cl
c001059d:	74 06                	je     c00105a5 <VgaText::load()+0x29>
c001059f:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00105a2:	40                   	inc    eax
c00105a3:	eb ef                	jmp    c0010594 <VgaText::load()+0x18>
c00105a5:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c00105a8:	85 c0                	test   eax,eax
c00105aa:	74 09                	je     c00105b5 <VgaText::load()+0x39>
c00105ac:	51                   	push   ecx
c00105ad:	51                   	push   ecx
c00105ae:	52                   	push   edx
c00105af:	53                   	push   ebx
c00105b0:	ff d0                	call   eax
c00105b2:	83 c4 10             	add    esp,0x10
c00105b5:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c00105b8:	85 c0                	test   eax,eax
c00105ba:	74 09                	je     c00105c5 <VgaText::load()+0x49>
c00105bc:	83 ec 0c             	sub    esp,0xc
c00105bf:	53                   	push   ebx
c00105c0:	ff d0                	call   eax
c00105c2:	83 c4 10             	add    esp,0x10
c00105c5:	83 c4 58             	add    esp,0x58
c00105c8:	5b                   	pop    ebx
c00105c9:	c3                   	ret    

c00105ca <VgaText::updateCursor()>:
c00105ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105ce:	39 05 44 e5 02 c0    	cmp    DWORD PTR ds:0xc002e544,eax
c00105d4:	75 09                	jne    c00105df <VgaText::updateCursor()+0x15>
c00105d6:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c00105d9:	85 c0                	test   eax,eax
c00105db:	74 02                	je     c00105df <VgaText::updateCursor()+0x15>
c00105dd:	ff e0                	jmp    eax
c00105df:	c3                   	ret    

c00105e0 <VgaText::showCursor(bool)>:
c00105e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00105e8:	88 50 20             	mov    BYTE PTR [eax+0x20],dl
c00105eb:	c3                   	ret    

c00105ec <VgaText::disableBlink(bool)>:
c00105ec:	56                   	push   esi
c00105ed:	53                   	push   ebx
c00105ee:	51                   	push   ecx
c00105ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00105f3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00105f7:	39 1d 44 e5 02 c0    	cmp    DWORD PTR ds:0xc002e544,ebx
c00105fd:	75 15                	jne    c0010614 <VgaText::disableBlink(bool)+0x28>
c00105ff:	8b 43 78             	mov    eax,DWORD PTR [ebx+0x78]
c0010602:	85 c0                	test   eax,eax
c0010604:	74 0e                	je     c0010614 <VgaText::disableBlink(bool)+0x28>
c0010606:	89 f1                	mov    ecx,esi
c0010608:	52                   	push   edx
c0010609:	52                   	push   edx
c001060a:	0f b6 d1             	movzx  edx,cl
c001060d:	52                   	push   edx
c001060e:	53                   	push   ebx
c001060f:	ff d0                	call   eax
c0010611:	83 c4 10             	add    esp,0x10
c0010614:	89 f0                	mov    eax,esi
c0010616:	83 f0 01             	xor    eax,0x1
c0010619:	88 43 21             	mov    BYTE PTR [ebx+0x21],al
c001061c:	58                   	pop    eax
c001061d:	5b                   	pop    ebx
c001061e:	5e                   	pop    esi
c001061f:	c3                   	ret    

c0010620 <VgaText::doANSI_SGR(int)>:
c0010620:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010624:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010628:	85 d2                	test   edx,edx
c001062a:	75 0b                	jne    c0010637 <VgaText::doANSI_SGR(int)+0x17>
c001062c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c001062f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010632:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010635:	eb 59                	jmp    c0010690 <VgaText::doANSI_SGR(int)+0x70>
c0010637:	83 fa 07             	cmp    edx,0x7
c001063a:	75 0b                	jne    c0010647 <VgaText::doANSI_SGR(int)+0x27>
c001063c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001063f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0010642:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0010645:	eb 49                	jmp    c0010690 <VgaText::doANSI_SGR(int)+0x70>
c0010647:	83 fa 1b             	cmp    edx,0x1b
c001064a:	74 e0                	je     c001062c <VgaText::doANSI_SGR(int)+0xc>
c001064c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001064f:	83 f9 07             	cmp    ecx,0x7
c0010652:	77 09                	ja     c001065d <VgaText::doANSI_SGR(int)+0x3d>
c0010654:	8b 14 8d c0 d3 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2c40]
c001065b:	eb 20                	jmp    c001067d <VgaText::doANSI_SGR(int)+0x5d>
c001065d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010660:	83 f9 07             	cmp    ecx,0x7
c0010663:	77 09                	ja     c001066e <VgaText::doANSI_SGR(int)+0x4e>
c0010665:	8b 14 8d c0 d3 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2c40]
c001066c:	eb 22                	jmp    c0010690 <VgaText::doANSI_SGR(int)+0x70>
c001066e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010671:	83 f9 07             	cmp    ecx,0x7
c0010674:	77 0b                	ja     c0010681 <VgaText::doANSI_SGR(int)+0x61>
c0010676:	8b 14 95 78 d2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2d88]
c001067d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010680:	c3                   	ret    
c0010681:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010684:	83 f9 07             	cmp    ecx,0x7
c0010687:	77 0a                	ja     c0010693 <VgaText::doANSI_SGR(int)+0x73>
c0010689:	8b 14 95 50 d2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2db0]
c0010690:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010693:	c3                   	ret    

c0010694 <VgaText::setDefaultBgColour(VgaColour)>:
c0010694:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010698:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001069c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001069f:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00106a2:	c3                   	ret    
c00106a3:	90                   	nop

c00106a4 <VgaText::setDefaultFgColour(VgaColour)>:
c00106a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106ac:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00106af:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00106b2:	c3                   	ret    
c00106b3:	90                   	nop

c00106b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00106b4:	53                   	push   ebx
c00106b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00106b9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00106bd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00106c1:	51                   	push   ecx
c00106c2:	e8 cd ff ff ff       	call   c0010694 <VgaText::setDefaultBgColour(VgaColour)>
c00106c7:	58                   	pop    eax
c00106c8:	5a                   	pop    edx
c00106c9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00106cd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00106d1:	5b                   	pop    ebx
c00106d2:	eb d0                	jmp    c00106a4 <VgaText::setDefaultFgColour(VgaColour)>

c00106d4 <VgaText::combineColours(unsigned char, unsigned char)>:
c00106d4:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00106d8:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00106dd:	83 e0 0f             	and    eax,0xf
c00106e0:	c1 e2 04             	shl    edx,0x4
c00106e3:	09 d0                	or     eax,edx
c00106e5:	c3                   	ret    

c00106e6 <VgaText::scrollScreen()>:
c00106e6:	55                   	push   ebp
c00106e7:	b9 01 00 00 00       	mov    ecx,0x1
c00106ec:	57                   	push   edi
c00106ed:	56                   	push   esi
c00106ee:	53                   	push   ebx
c00106ef:	83 ec 0c             	sub    esp,0xc
c00106f2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00106f6:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c00106fc:	31 ff                	xor    edi,edi
c00106fe:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0010701:	83 f9 17             	cmp    ecx,0x17
c0010704:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c0010707:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c001070e:	75 27                	jne    c0010737 <VgaText::scrollScreen()+0x51>
c0010710:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0010713:	01 f5                	add    ebp,esi
c0010715:	f7 c7 01 00 00 00    	test   edi,0x1
c001071b:	74 16                	je     c0010733 <VgaText::scrollScreen()+0x4d>
c001071d:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0010721:	50                   	push   eax
c0010722:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0010726:	50                   	push   eax
c0010727:	e8 a8 ff ff ff       	call   c00106d4 <VgaText::combineColours(unsigned char, unsigned char)>
c001072c:	5a                   	pop    edx
c001072d:	5a                   	pop    edx
c001072e:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0010731:	eb 04                	jmp    c0010737 <VgaText::scrollScreen()+0x51>
c0010733:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c0010737:	47                   	inc    edi
c0010738:	46                   	inc    esi
c0010739:	81 ff a0 00 00 00    	cmp    edi,0xa0
c001073f:	75 bd                	jne    c00106fe <VgaText::scrollScreen()+0x18>
c0010741:	41                   	inc    ecx
c0010742:	83 f9 18             	cmp    ecx,0x18
c0010745:	75 af                	jne    c00106f6 <VgaText::scrollScreen()+0x10>
c0010747:	39 1d 44 e5 02 c0    	cmp    DWORD PTR ds:0xc002e544,ebx
c001074d:	75 1b                	jne    c001076a <VgaText::scrollScreen()+0x84>
c001074f:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010753:	74 05                	je     c001075a <VgaText::scrollScreen()+0x74>
c0010755:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0010758:	eb 10                	jmp    c001076a <VgaText::scrollScreen()+0x84>
c001075a:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c001075d:	85 c0                	test   eax,eax
c001075f:	74 09                	je     c001076a <VgaText::scrollScreen()+0x84>
c0010761:	83 ec 0c             	sub    esp,0xc
c0010764:	53                   	push   ebx
c0010765:	ff d0                	call   eax
c0010767:	83 c4 10             	add    esp,0x10
c001076a:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001076e:	83 c4 0c             	add    esp,0xc
c0010771:	5b                   	pop    ebx
c0010772:	5e                   	pop    esi
c0010773:	5f                   	pop    edi
c0010774:	5d                   	pop    ebp
c0010775:	e9 50 fe ff ff       	jmp    c00105ca <VgaText::updateCursor()>

c001077a <VgaText::combineCharAndColour(char, unsigned char)>:
c001077a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001077f:	c1 e0 08             	shl    eax,0x8
c0010782:	89 c2                	mov    edx,eax
c0010784:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010789:	09 d0                	or     eax,edx
c001078b:	c3                   	ret    

c001078c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c001078c:	56                   	push   esi
c001078d:	53                   	push   ebx
c001078e:	51                   	push   ecx
c001078f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010793:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010798:	50                   	push   eax
c0010799:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001079e:	50                   	push   eax
c001079f:	e8 30 ff ff ff       	call   c00106d4 <VgaText::combineColours(unsigned char, unsigned char)>
c00107a4:	5b                   	pop    ebx
c00107a5:	0f b6 c0             	movzx  eax,al
c00107a8:	5e                   	pop    esi
c00107a9:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00107ae:	50                   	push   eax
c00107af:	53                   	push   ebx
c00107b0:	e8 c5 ff ff ff       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c00107b5:	5a                   	pop    edx
c00107b6:	5e                   	pop    esi
c00107b7:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c00107ba:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c00107c0:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c00107c4:	0f b7 d2             	movzx  edx,dx
c00107c7:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c00107cb:	39 0d 44 e5 02 c0    	cmp    DWORD PTR ds:0xc002e544,ecx
c00107d1:	75 10                	jne    c00107e3 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c00107d3:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c00107d6:	85 c0                	test   eax,eax
c00107d8:	74 09                	je     c00107e3 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c00107da:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00107de:	5a                   	pop    edx
c00107df:	5b                   	pop    ebx
c00107e0:	5e                   	pop    esi
c00107e1:	ff e0                	jmp    eax
c00107e3:	58                   	pop    eax
c00107e4:	5b                   	pop    ebx
c00107e5:	5e                   	pop    esi
c00107e6:	c3                   	ret    
c00107e7:	90                   	nop

c00107e8 <VgaText::getCursorX()>:
c00107e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107ec:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00107ef:	c3                   	ret    

c00107f0 <VgaText::getCursorY()>:
c00107f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107f4:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00107f7:	c3                   	ret    

c00107f8 <VgaText::setCursor(int, int)>:
c00107f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010800:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0010803:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010807:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001080a:	e9 bb fd ff ff       	jmp    c00105ca <VgaText::updateCursor()>
c001080f:	90                   	nop

c0010810 <VgaText::setCursorX(int)>:
c0010810:	83 ec 10             	sub    esp,0x10
c0010813:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010817:	ff 70 18             	push   DWORD PTR [eax+0x18]
c001081a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001081e:	50                   	push   eax
c001081f:	e8 d4 ff ff ff       	call   c00107f8 <VgaText::setCursor(int, int)>
c0010824:	83 c4 1c             	add    esp,0x1c
c0010827:	c3                   	ret    

c0010828 <VgaText::setCursorY(int)>:
c0010828:	83 ec 10             	sub    esp,0x10
c001082b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001082f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010833:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0010836:	50                   	push   eax
c0010837:	e8 bc ff ff ff       	call   c00107f8 <VgaText::setCursor(int, int)>
c001083c:	83 c4 1c             	add    esp,0x1c
c001083f:	c3                   	ret    

c0010840 <VgaText::incrementCursor(bool)>:
c0010840:	56                   	push   esi
c0010841:	53                   	push   ebx
c0010842:	51                   	push   ecx
c0010843:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010847:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001084b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001084e:	40                   	inc    eax
c001084f:	83 f8 50             	cmp    eax,0x50
c0010852:	74 05                	je     c0010859 <VgaText::incrementCursor(bool)+0x19>
c0010854:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0010857:	eb 24                	jmp    c001087d <VgaText::incrementCursor(bool)+0x3d>
c0010859:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001085c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010863:	8d 50 01             	lea    edx,[eax+0x1]
c0010866:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010869:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001086c:	75 0f                	jne    c001087d <VgaText::incrementCursor(bool)+0x3d>
c001086e:	83 ec 0c             	sub    esp,0xc
c0010871:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010874:	53                   	push   ebx
c0010875:	e8 6c fe ff ff       	call   c00106e6 <VgaText::scrollScreen()>
c001087a:	83 c4 10             	add    esp,0x10
c001087d:	89 f0                	mov    eax,esi
c001087f:	84 c0                	test   al,al
c0010881:	74 0c                	je     c001088f <VgaText::incrementCursor(bool)+0x4f>
c0010883:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010887:	5a                   	pop    edx
c0010888:	5b                   	pop    ebx
c0010889:	5e                   	pop    esi
c001088a:	e9 3b fd ff ff       	jmp    c00105ca <VgaText::updateCursor()>
c001088f:	58                   	pop    eax
c0010890:	5b                   	pop    ebx
c0010891:	5e                   	pop    esi
c0010892:	c3                   	ret    
c0010893:	90                   	nop

c0010894 <VgaText::updateRAMUsageDisplay(int)>:
c0010894:	56                   	push   esi
c0010895:	8b 35 a0 d3 02 c0    	mov    esi,DWORD PTR ds:0xc002d3a0
c001089b:	53                   	push   ebx
c001089c:	bb 0a 00 00 00       	mov    ebx,0xa
c00108a1:	6a 0f                	push   0xf
c00108a3:	6a 00                	push   0x0
c00108a5:	e8 2a fe ff ff       	call   c00106d4 <VgaText::combineColours(unsigned char, unsigned char)>
c00108aa:	5a                   	pop    edx
c00108ab:	59                   	pop    ecx
c00108ac:	0f b6 c8             	movzx  ecx,al
c00108af:	51                   	push   ecx
c00108b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108b4:	99                   	cdq    
c00108b5:	f7 fb                	idiv   ebx
c00108b7:	89 d3                	mov    ebx,edx
c00108b9:	83 c0 30             	add    eax,0x30
c00108bc:	83 c3 30             	add    ebx,0x30
c00108bf:	0f be c0             	movsx  eax,al
c00108c2:	0f b6 db             	movzx  ebx,bl
c00108c5:	50                   	push   eax
c00108c6:	e8 af fe ff ff       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c00108cb:	5a                   	pop    edx
c00108cc:	5a                   	pop    edx
c00108cd:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c00108d4:	51                   	push   ecx
c00108d5:	53                   	push   ebx
c00108d6:	e8 9f fe ff ff       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c00108db:	5b                   	pop    ebx
c00108dc:	5a                   	pop    edx
c00108dd:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c00108e4:	51                   	push   ecx
c00108e5:	6a 25                	push   0x25
c00108e7:	e8 8e fe ff ff       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c00108ec:	59                   	pop    ecx
c00108ed:	5b                   	pop    ebx
c00108ee:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c00108f5:	5b                   	pop    ebx
c00108f6:	5e                   	pop    esi
c00108f7:	c3                   	ret    

c00108f8 <VgaText::updateDiskUsage()>:
c00108f8:	55                   	push   ebp
c00108f9:	bd 10 27 00 00       	mov    ebp,0x2710
c00108fe:	57                   	push   edi
c00108ff:	8b 3d a0 d3 02 c0    	mov    edi,DWORD PTR ds:0xc002d3a0
c0010905:	56                   	push   esi
c0010906:	53                   	push   ebx
c0010907:	6a 0f                	push   0xf
c0010909:	6a 00                	push   0x0
c001090b:	e8 c4 fd ff ff       	call   c00106d4 <VgaText::combineColours(unsigned char, unsigned char)>
c0010910:	5a                   	pop    edx
c0010911:	0f b6 d8             	movzx  ebx,al
c0010914:	59                   	pop    ecx
c0010915:	8b 35 c8 27 03 c0    	mov    esi,DWORD PTR ds:0xc00327c8
c001091b:	53                   	push   ebx
c001091c:	b9 0a 00 00 00       	mov    ecx,0xa
c0010921:	89 f0                	mov    eax,esi
c0010923:	99                   	cdq    
c0010924:	f7 fd                	idiv   ebp
c0010926:	99                   	cdq    
c0010927:	f7 f9                	idiv   ecx
c0010929:	8d 42 30             	lea    eax,[edx+0x30]
c001092c:	0f b6 c0             	movzx  eax,al
c001092f:	50                   	push   eax
c0010930:	e8 45 fe ff ff       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c0010935:	5d                   	pop    ebp
c0010936:	bd e8 03 00 00       	mov    ebp,0x3e8
c001093b:	5a                   	pop    edx
c001093c:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c0010940:	53                   	push   ebx
c0010941:	89 f0                	mov    eax,esi
c0010943:	99                   	cdq    
c0010944:	f7 fd                	idiv   ebp
c0010946:	99                   	cdq    
c0010947:	f7 f9                	idiv   ecx
c0010949:	8d 42 30             	lea    eax,[edx+0x30]
c001094c:	0f b6 c0             	movzx  eax,al
c001094f:	50                   	push   eax
c0010950:	e8 25 fe ff ff       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c0010955:	5d                   	pop    ebp
c0010956:	bd 64 00 00 00       	mov    ebp,0x64
c001095b:	5a                   	pop    edx
c001095c:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c0010963:	53                   	push   ebx
c0010964:	89 f0                	mov    eax,esi
c0010966:	99                   	cdq    
c0010967:	f7 fd                	idiv   ebp
c0010969:	99                   	cdq    
c001096a:	f7 f9                	idiv   ecx
c001096c:	8d 42 30             	lea    eax,[edx+0x30]
c001096f:	0f b6 c0             	movzx  eax,al
c0010972:	50                   	push   eax
c0010973:	e8 02 fe ff ff       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c0010978:	5d                   	pop    ebp
c0010979:	5a                   	pop    edx
c001097a:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010981:	53                   	push   ebx
c0010982:	89 f0                	mov    eax,esi
c0010984:	99                   	cdq    
c0010985:	f7 f9                	idiv   ecx
c0010987:	89 d6                	mov    esi,edx
c0010989:	99                   	cdq    
c001098a:	f7 f9                	idiv   ecx
c001098c:	8d 42 30             	lea    eax,[edx+0x30]
c001098f:	0f b6 c0             	movzx  eax,al
c0010992:	50                   	push   eax
c0010993:	e8 e2 fd ff ff       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c0010998:	5d                   	pop    ebp
c0010999:	5a                   	pop    edx
c001099a:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c00109a1:	53                   	push   ebx
c00109a2:	8d 46 30             	lea    eax,[esi+0x30]
c00109a5:	0f b6 f0             	movzx  esi,al
c00109a8:	56                   	push   esi
c00109a9:	e8 cc fd ff ff       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c00109ae:	5e                   	pop    esi
c00109af:	8b 35 c4 27 03 c0    	mov    esi,DWORD PTR ds:0xc00327c4
c00109b5:	5d                   	pop    ebp
c00109b6:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c00109bd:	bd 10 27 00 00       	mov    ebp,0x2710
c00109c2:	53                   	push   ebx
c00109c3:	89 f0                	mov    eax,esi
c00109c5:	99                   	cdq    
c00109c6:	f7 fd                	idiv   ebp
c00109c8:	99                   	cdq    
c00109c9:	f7 f9                	idiv   ecx
c00109cb:	8d 42 30             	lea    eax,[edx+0x30]
c00109ce:	0f b6 c0             	movzx  eax,al
c00109d1:	50                   	push   eax
c00109d2:	e8 a3 fd ff ff       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c00109d7:	5a                   	pop    edx
c00109d8:	5d                   	pop    ebp
c00109d9:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c00109e0:	bd e8 03 00 00       	mov    ebp,0x3e8
c00109e5:	53                   	push   ebx
c00109e6:	89 f0                	mov    eax,esi
c00109e8:	99                   	cdq    
c00109e9:	f7 fd                	idiv   ebp
c00109eb:	99                   	cdq    
c00109ec:	f7 f9                	idiv   ecx
c00109ee:	8d 42 30             	lea    eax,[edx+0x30]
c00109f1:	0f b6 c0             	movzx  eax,al
c00109f4:	50                   	push   eax
c00109f5:	e8 80 fd ff ff       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c00109fa:	5a                   	pop    edx
c00109fb:	5d                   	pop    ebp
c00109fc:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010a03:	bd 64 00 00 00       	mov    ebp,0x64
c0010a08:	53                   	push   ebx
c0010a09:	89 f0                	mov    eax,esi
c0010a0b:	99                   	cdq    
c0010a0c:	f7 fd                	idiv   ebp
c0010a0e:	99                   	cdq    
c0010a0f:	f7 f9                	idiv   ecx
c0010a11:	83 c2 30             	add    edx,0x30
c0010a14:	0f b6 d2             	movzx  edx,dl
c0010a17:	52                   	push   edx
c0010a18:	e8 5d fd ff ff       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c0010a1d:	5a                   	pop    edx
c0010a1e:	5d                   	pop    ebp
c0010a1f:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010a26:	53                   	push   ebx
c0010a27:	89 f0                	mov    eax,esi
c0010a29:	99                   	cdq    
c0010a2a:	f7 f9                	idiv   ecx
c0010a2c:	89 d6                	mov    esi,edx
c0010a2e:	99                   	cdq    
c0010a2f:	f7 f9                	idiv   ecx
c0010a31:	8d 42 30             	lea    eax,[edx+0x30]
c0010a34:	0f b6 c0             	movzx  eax,al
c0010a37:	50                   	push   eax
c0010a38:	e8 3d fd ff ff       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c0010a3d:	5a                   	pop    edx
c0010a3e:	59                   	pop    ecx
c0010a3f:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010a46:	53                   	push   ebx
c0010a47:	8d 46 30             	lea    eax,[esi+0x30]
c0010a4a:	0f b6 f0             	movzx  esi,al
c0010a4d:	56                   	push   esi
c0010a4e:	e8 27 fd ff ff       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c0010a53:	5b                   	pop    ebx
c0010a54:	5e                   	pop    esi
c0010a55:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010a5c:	5b                   	pop    ebx
c0010a5d:	5e                   	pop    esi
c0010a5e:	5f                   	pop    edi
c0010a5f:	5d                   	pop    ebp
c0010a60:	c3                   	ret    
c0010a61:	90                   	nop

c0010a62 <VgaText::updateTitle()>:
c0010a62:	53                   	push   ebx
c0010a63:	31 c0                	xor    eax,eax
c0010a65:	83 ec 58             	sub    esp,0x58
c0010a68:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010a6c:	89 e1                	mov    ecx,esp
c0010a6e:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010a72:	40                   	inc    eax
c0010a73:	83 f8 50             	cmp    eax,0x50
c0010a76:	75 f6                	jne    c0010a6e <VgaText::updateTitle()+0xc>
c0010a78:	31 c0                	xor    eax,eax
c0010a7a:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c0010a81:	84 db                	test   bl,bl
c0010a83:	74 06                	je     c0010a8b <VgaText::updateTitle()+0x29>
c0010a85:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010a88:	40                   	inc    eax
c0010a89:	eb ef                	jmp    c0010a7a <VgaText::updateTitle()+0x18>
c0010a8b:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c0010a8e:	85 c0                	test   eax,eax
c0010a90:	74 09                	je     c0010a9b <VgaText::updateTitle()+0x39>
c0010a92:	53                   	push   ebx
c0010a93:	53                   	push   ebx
c0010a94:	51                   	push   ecx
c0010a95:	52                   	push   edx
c0010a96:	ff d0                	call   eax
c0010a98:	83 c4 10             	add    esp,0x10
c0010a9b:	e8 58 fe ff ff       	call   c00108f8 <VgaText::updateDiskUsage()>
c0010aa0:	83 c4 58             	add    esp,0x58
c0010aa3:	5b                   	pop    ebx
c0010aa4:	c3                   	ret    
c0010aa5:	90                   	nop

c0010aa6 <VgaText::setTitleTextColour(VgaColour)>:
c0010aa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010aaa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010aae:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0010ab1:	eb af                	jmp    c0010a62 <VgaText::updateTitle()>
c0010ab3:	90                   	nop

c0010ab4 <VgaText::setTitleColour(VgaColour)>:
c0010ab4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ab8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010abc:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010abf:	eb a1                	jmp    c0010a62 <VgaText::updateTitle()>
c0010ac1:	90                   	nop

c0010ac2 <VgaText::setTitle(char*)>:
c0010ac2:	53                   	push   ebx
c0010ac3:	83 ec 10             	sub    esp,0x10
c0010ac6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010aca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ace:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c0010ad4:	50                   	push   eax
c0010ad5:	e8 62 fd fe ff       	call   c000083c <strcpy>
c0010ada:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010ade:	83 c4 18             	add    esp,0x18
c0010ae1:	5b                   	pop    ebx
c0010ae2:	e9 7b ff ff ff       	jmp    c0010a62 <VgaText::updateTitle()>
c0010ae7:	90                   	nop

c0010ae8 <VgaText::decrementCursor(bool)>:
c0010ae8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010aec:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010af0:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0010af3:	85 c0                	test   eax,eax
c0010af5:	74 04                	je     c0010afb <VgaText::decrementCursor(bool)+0x13>
c0010af7:	48                   	dec    eax
c0010af8:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0010afb:	84 c9                	test   cl,cl
c0010afd:	74 09                	je     c0010b08 <VgaText::decrementCursor(bool)+0x20>
c0010aff:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010b03:	e9 c2 fa ff ff       	jmp    c00105ca <VgaText::updateCursor()>
c0010b08:	c3                   	ret    
c0010b09:	90                   	nop

c0010b0a <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010b0a:	53                   	push   ebx
c0010b0b:	83 ec 08             	sub    esp,0x8
c0010b0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010b12:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b16:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010b1a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010b1e:	3c 07                	cmp    al,0x7
c0010b20:	75 2a                	jne    c0010b4c <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010b22:	a1 f8 e5 02 c0       	mov    eax,ds:0xc002e5f8
c0010b27:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010b2f:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010b37:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010b3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010b43:	83 c4 08             	add    esp,0x8
c0010b46:	5b                   	pop    ebx
c0010b47:	e9 7c 30 00 00       	jmp    c0013bc8 <Buzzer::beep(int, int, bool)>
c0010b4c:	3c 0d                	cmp    al,0xd
c0010b4e:	75 09                	jne    c0010b59 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c0010b50:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010b57:	eb 2c                	jmp    c0010b85 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0010b59:	3c 0a                	cmp    al,0xa
c0010b5b:	75 31                	jne    c0010b8e <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c0010b5d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010b60:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010b67:	8d 50 01             	lea    edx,[eax+0x1]
c0010b6a:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010b6d:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0010b70:	75 0f                	jne    c0010b81 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c0010b72:	83 ec 0c             	sub    esp,0xc
c0010b75:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010b78:	53                   	push   ebx
c0010b79:	e8 68 fb ff ff       	call   c00106e6 <VgaText::scrollScreen()>
c0010b7e:	83 c4 10             	add    esp,0x10
c0010b81:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010b85:	83 c4 08             	add    esp,0x8
c0010b88:	5b                   	pop    ebx
c0010b89:	e9 3c fa ff ff       	jmp    c00105ca <VgaText::updateCursor()>
c0010b8e:	3c 08                	cmp    al,0x8
c0010b90:	75 25                	jne    c0010bb7 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c0010b92:	50                   	push   eax
c0010b93:	50                   	push   eax
c0010b94:	6a 01                	push   0x1
c0010b96:	53                   	push   ebx
c0010b97:	e8 4c ff ff ff       	call   c0010ae8 <VgaText::decrementCursor(bool)>
c0010b9c:	5a                   	pop    edx
c0010b9d:	59                   	pop    ecx
c0010b9e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010ba1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010ba4:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010ba7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010baa:	6a 20                	push   0x20
c0010bac:	53                   	push   ebx
c0010bad:	e8 da fb ff ff       	call   c001078c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010bb2:	83 c4 28             	add    esp,0x28
c0010bb5:	5b                   	pop    ebx
c0010bb6:	c3                   	ret    
c0010bb7:	83 ec 08             	sub    esp,0x8
c0010bba:	0f be c0             	movsx  eax,al
c0010bbd:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010bc0:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010bc3:	51                   	push   ecx
c0010bc4:	52                   	push   edx
c0010bc5:	50                   	push   eax
c0010bc6:	53                   	push   ebx
c0010bc7:	e8 c0 fb ff ff       	call   c001078c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010bcc:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010bd0:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010bd8:	83 c4 28             	add    esp,0x28
c0010bdb:	5b                   	pop    ebx
c0010bdc:	e9 5f fc ff ff       	jmp    c0010840 <VgaText::incrementCursor(bool)>
c0010be1:	90                   	nop

c0010be2 <VgaText::isShowingCursor()>:
c0010be2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010be6:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0010be9:	c3                   	ret    

c0010bea <VgaText::isBlinkDisabled()>:
c0010bea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bee:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0010bf1:	83 f0 01             	xor    eax,0x1
c0010bf4:	c3                   	ret    
c0010bf5:	90                   	nop

c0010bf6 <VgaText::setCursorHeight(int)>:
c0010bf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bfa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010bfe:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010c01:	0f b6 40 20          	movzx  eax,BYTE PTR [eax+0x20]
c0010c05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010c09:	e9 d2 f9 ff ff       	jmp    c00105e0 <VgaText::showCursor(bool)>

c0010c0e <VgaText::getCursorHeight()>:
c0010c0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c12:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0010c15:	c3                   	ret    

c0010c16 <setActiveTerminal(VgaText*)>:
c0010c16:	53                   	push   ebx
c0010c17:	83 ec 08             	sub    esp,0x8
c0010c1a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c1e:	85 db                	test   ebx,ebx
c0010c20:	75 11                	jne    c0010c33 <setActiveTerminal(VgaText*)+0x1d>
c0010c22:	c7 44 24 10 ac a3 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a3ac
c0010c2a:	83 c4 08             	add    esp,0x8
c0010c2d:	5b                   	pop    ebx
c0010c2e:	e9 ce 98 00 00       	jmp    c001a501 <Krnl::panic(char const*)>
c0010c33:	50                   	push   eax
c0010c34:	50                   	push   eax
c0010c35:	53                   	push   ebx
c0010c36:	68 ba a3 02 c0       	push   0xc002a3ba
c0010c3b:	e8 83 21 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0010c40:	a1 44 e5 02 c0       	mov    eax,ds:0xc002e544
c0010c45:	83 c4 10             	add    esp,0x10
c0010c48:	85 c0                	test   eax,eax
c0010c4a:	74 0c                	je     c0010c58 <setActiveTerminal(VgaText*)+0x42>
c0010c4c:	83 ec 0c             	sub    esp,0xc
c0010c4f:	50                   	push   eax
c0010c50:	e8 75 f9 ff ff       	call   c00105ca <VgaText::updateCursor()>
c0010c55:	83 c4 10             	add    esp,0x10
c0010c58:	89 1d 44 e5 02 c0    	mov    DWORD PTR ds:0xc002e544,ebx
c0010c5e:	51                   	push   ecx
c0010c5f:	51                   	push   ecx
c0010c60:	53                   	push   ebx
c0010c61:	68 d2 a3 02 c0       	push   0xc002a3d2
c0010c66:	e8 58 21 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0010c6b:	83 c4 0c             	add    esp,0xc
c0010c6e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010c71:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010c74:	53                   	push   ebx
c0010c75:	e8 7e fb ff ff       	call   c00107f8 <VgaText::setCursor(int, int)>
c0010c7a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c7d:	e8 68 ff ff ff       	call   c0010bea <VgaText::isBlinkDisabled()>
c0010c82:	5a                   	pop    edx
c0010c83:	0f b6 c0             	movzx  eax,al
c0010c86:	59                   	pop    ecx
c0010c87:	50                   	push   eax
c0010c88:	53                   	push   ebx
c0010c89:	e8 5e f9 ff ff       	call   c00105ec <VgaText::disableBlink(bool)>
c0010c8e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c91:	e8 78 ff ff ff       	call   c0010c0e <VgaText::getCursorHeight()>
c0010c96:	5a                   	pop    edx
c0010c97:	59                   	pop    ecx
c0010c98:	50                   	push   eax
c0010c99:	53                   	push   ebx
c0010c9a:	e8 57 ff ff ff       	call   c0010bf6 <VgaText::setCursorHeight(int)>
c0010c9f:	83 c4 10             	add    esp,0x10
c0010ca2:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010ca6:	75 07                	jne    c0010caf <setActiveTerminal(VgaText*)+0x99>
c0010ca8:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c0010caf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010cb3:	83 c4 08             	add    esp,0x8
c0010cb6:	5b                   	pop    ebx
c0010cb7:	e9 c0 f8 ff ff       	jmp    c001057c <VgaText::load()>

c0010cbc <doTerminalCycle()>:
c0010cbc:	83 ec 18             	sub    esp,0x18
c0010cbf:	a1 40 e5 02 c0       	mov    eax,ds:0xc002e540
c0010cc4:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010cc7:	50                   	push   eax
c0010cc8:	a3 40 e5 02 c0       	mov    ds:0xc002e540,eax
c0010ccd:	e8 44 ff ff ff       	call   c0010c16 <setActiveTerminal(VgaText*)>
c0010cd2:	83 c4 1c             	add    esp,0x1c
c0010cd5:	c3                   	ret    

c0010cd6 <VgaText::doUpdate()>:
c0010cd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cda:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c0010cdd:	85 c0                	test   eax,eax
c0010cdf:	74 02                	je     c0010ce3 <VgaText::doUpdate()+0xd>
c0010ce1:	ff e0                	jmp    eax
c0010ce3:	c3                   	ret    

c0010ce4 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010ce4:	55                   	push   ebp
c0010ce5:	31 ed                	xor    ebp,ebp
c0010ce7:	57                   	push   edi
c0010ce8:	56                   	push   esi
c0010ce9:	53                   	push   ebx
c0010cea:	83 ec 1c             	sub    esp,0x1c
c0010ced:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010cf1:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010cf6:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010cfd:	50                   	push   eax
c0010cfe:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010d03:	50                   	push   eax
c0010d04:	e8 cb f9 ff ff       	call   c00106d4 <VgaText::combineColours(unsigned char, unsigned char)>
c0010d09:	59                   	pop    ecx
c0010d0a:	0f b6 c0             	movzx  eax,al
c0010d0d:	5e                   	pop    esi
c0010d0e:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010d13:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010d17:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010d1a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010d1e:	0f b7 f6             	movzx  esi,si
c0010d21:	01 f6                	add    esi,esi
c0010d23:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010d26:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0010d29:	84 c0                	test   al,al
c0010d2b:	0f 84 fd 00 00 00    	je     c0010e2e <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c0010d31:	3c 0d                	cmp    al,0xd
c0010d33:	75 0c                	jne    c0010d41 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c0010d35:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010d3c:	e9 e7 00 00 00       	jmp    c0010e28 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010d41:	3c 0a                	cmp    al,0xa
c0010d43:	75 47                	jne    c0010d8c <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c0010d45:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010d48:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010d4f:	8d 48 01             	lea    ecx,[eax+0x1]
c0010d52:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0010d55:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0010d58:	75 0f                	jne    c0010d69 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c0010d5a:	83 ec 0c             	sub    esp,0xc
c0010d5d:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010d60:	53                   	push   ebx
c0010d61:	e8 80 f9 ff ff       	call   c00106e6 <VgaText::scrollScreen()>
c0010d66:	83 c4 10             	add    esp,0x10
c0010d69:	83 ec 0c             	sub    esp,0xc
c0010d6c:	31 ed                	xor    ebp,ebp
c0010d6e:	53                   	push   ebx
c0010d6f:	e8 56 f8 ff ff       	call   c00105ca <VgaText::updateCursor()>
c0010d74:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010d79:	83 c4 10             	add    esp,0x10
c0010d7c:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010d7f:	0f b7 f6             	movzx  esi,si
c0010d82:	01 f6                	add    esi,esi
c0010d84:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010d87:	e9 9c 00 00 00       	jmp    c0010e28 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010d8c:	3c 08                	cmp    al,0x8
c0010d8e:	75 35                	jne    c0010dc5 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c0010d90:	56                   	push   esi
c0010d91:	56                   	push   esi
c0010d92:	6a 01                	push   0x1
c0010d94:	53                   	push   ebx
c0010d95:	e8 4e fd ff ff       	call   c0010ae8 <VgaText::decrementCursor(bool)>
c0010d9a:	58                   	pop    eax
c0010d9b:	5a                   	pop    edx
c0010d9c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010d9f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010da2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010da5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010da8:	6a 20                	push   0x20
c0010daa:	53                   	push   ebx
c0010dab:	e8 dc f9 ff ff       	call   c001078c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010db0:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010db5:	83 c4 20             	add    esp,0x20
c0010db8:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010dbb:	0f b7 f6             	movzx  esi,si
c0010dbe:	01 f6                	add    esi,esi
c0010dc0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010dc3:	eb 63                	jmp    c0010e28 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010dc5:	51                   	push   ecx
c0010dc6:	51                   	push   ecx
c0010dc7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010dcb:	50                   	push   eax
c0010dcc:	e8 a9 f9 ff ff       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c0010dd1:	83 c4 10             	add    esp,0x10
c0010dd4:	66 89 06             	mov    WORD PTR [esi],ax
c0010dd7:	39 1d 44 e5 02 c0    	cmp    DWORD PTR ds:0xc002e544,ebx
c0010ddd:	75 21                	jne    c0010e00 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010ddf:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c0010de2:	85 c0                	test   eax,eax
c0010de4:	74 1a                	je     c0010e00 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010de6:	52                   	push   edx
c0010de7:	52                   	push   edx
c0010de8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010deb:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010dee:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010df2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010df6:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c0010df9:	51                   	push   ecx
c0010dfa:	53                   	push   ebx
c0010dfb:	ff d0                	call   eax
c0010dfd:	83 c4 20             	add    esp,0x20
c0010e00:	83 c6 02             	add    esi,0x2
c0010e03:	50                   	push   eax
c0010e04:	50                   	push   eax
c0010e05:	6a 00                	push   0x0
c0010e07:	53                   	push   ebx
c0010e08:	e8 33 fa ff ff       	call   c0010840 <VgaText::incrementCursor(bool)>
c0010e0d:	83 c4 10             	add    esp,0x10
c0010e10:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0010e14:	75 0d                	jne    c0010e23 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c0010e16:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010e1b:	0f b7 f6             	movzx  esi,si
c0010e1e:	01 f6                	add    esi,esi
c0010e20:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010e23:	bd 01 00 00 00       	mov    ebp,0x1
c0010e28:	47                   	inc    edi
c0010e29:	e9 f8 fe ff ff       	jmp    c0010d26 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c0010e2e:	83 ec 0c             	sub    esp,0xc
c0010e31:	53                   	push   ebx
c0010e32:	e8 93 f7 ff ff       	call   c00105ca <VgaText::updateCursor()>
c0010e37:	83 c4 10             	add    esp,0x10
c0010e3a:	89 e8                	mov    eax,ebp
c0010e3c:	84 c0                	test   al,al
c0010e3e:	74 0c                	je     c0010e4c <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c0010e40:	83 ec 0c             	sub    esp,0xc
c0010e43:	53                   	push   ebx
c0010e44:	e8 8d fe ff ff       	call   c0010cd6 <VgaText::doUpdate()>
c0010e49:	83 c4 10             	add    esp,0x10
c0010e4c:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010e53:	83 c4 1c             	add    esp,0x1c
c0010e56:	5b                   	pop    ebx
c0010e57:	5e                   	pop    esi
c0010e58:	5f                   	pop    edi
c0010e59:	5d                   	pop    ebp
c0010e5a:	c3                   	ret    
c0010e5b:	90                   	nop

c0010e5c <VgaText::clearScreen()>:
c0010e5c:	57                   	push   edi
c0010e5d:	56                   	push   esi
c0010e5e:	31 f6                	xor    esi,esi
c0010e60:	53                   	push   ebx
c0010e61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010e65:	52                   	push   edx
c0010e66:	6a 00                	push   0x0
c0010e68:	6a 00                	push   0x0
c0010e6a:	53                   	push   ebx
c0010e6b:	e8 88 f9 ff ff       	call   c00107f8 <VgaText::setCursor(int, int)>
c0010e70:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010e77:	83 c4 10             	add    esp,0x10
c0010e7a:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0010e7d:	7e 20                	jle    c0010e9f <VgaText::clearScreen()+0x43>
c0010e7f:	31 ff                	xor    edi,edi
c0010e81:	50                   	push   eax
c0010e82:	50                   	push   eax
c0010e83:	56                   	push   esi
c0010e84:	57                   	push   edi
c0010e85:	47                   	inc    edi
c0010e86:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010e89:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010e8c:	6a 20                	push   0x20
c0010e8e:	53                   	push   ebx
c0010e8f:	e8 f8 f8 ff ff       	call   c001078c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010e94:	83 c4 20             	add    esp,0x20
c0010e97:	83 ff 50             	cmp    edi,0x50
c0010e9a:	75 e5                	jne    c0010e81 <VgaText::clearScreen()+0x25>
c0010e9c:	46                   	inc    esi
c0010e9d:	eb db                	jmp    c0010e7a <VgaText::clearScreen()+0x1e>
c0010e9f:	83 ec 0c             	sub    esp,0xc
c0010ea2:	53                   	push   ebx
c0010ea3:	e8 2e fe ff ff       	call   c0010cd6 <VgaText::doUpdate()>
c0010ea8:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010eaf:	83 c4 10             	add    esp,0x10
c0010eb2:	5b                   	pop    ebx
c0010eb3:	5e                   	pop    esi
c0010eb4:	5f                   	pop    edi
c0010eb5:	c3                   	ret    

c0010eb6 <VgaText::putchar(char)>:
c0010eb6:	56                   	push   esi
c0010eb7:	53                   	push   ebx
c0010eb8:	83 ec 14             	sub    esp,0x14
c0010ebb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010ebf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010ec3:	3c 5b                	cmp    al,0x5b
c0010ec5:	75 18                	jne    c0010edf <VgaText::putchar(char)+0x29>
c0010ec7:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0010ecb:	74 1f                	je     c0010eec <VgaText::putchar(char)+0x36>
c0010ecd:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0010ed3:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0010eda:	e9 bd 00 00 00       	jmp    c0010f9c <VgaText::putchar(char)+0xe6>
c0010edf:	3c 1b                	cmp    al,0x1b
c0010ee1:	75 09                	jne    c0010eec <VgaText::putchar(char)+0x36>
c0010ee3:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0010ee7:	e9 b0 00 00 00       	jmp    c0010f9c <VgaText::putchar(char)+0xe6>
c0010eec:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0010eef:	84 c9                	test   cl,cl
c0010ef1:	0f 84 92 00 00 00    	je     c0010f89 <VgaText::putchar(char)+0xd3>
c0010ef7:	8d 50 c0             	lea    edx,[eax-0x40]
c0010efa:	80 fa 3e             	cmp    dl,0x3e
c0010efd:	77 76                	ja     c0010f75 <VgaText::putchar(char)+0xbf>
c0010eff:	3c 6d                	cmp    al,0x6d
c0010f01:	75 47                	jne    c0010f4a <VgaText::putchar(char)+0x94>
c0010f03:	31 f6                	xor    esi,esi
c0010f05:	31 d2                	xor    edx,edx
c0010f07:	31 c0                	xor    eax,eax
c0010f09:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010f0c:	7e 2d                	jle    c0010f3b <VgaText::putchar(char)+0x85>
c0010f0e:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0010f13:	80 fa 3b             	cmp    dl,0x3b
c0010f16:	75 17                	jne    c0010f2f <VgaText::putchar(char)+0x79>
c0010f18:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010f1c:	50                   	push   eax
c0010f1d:	53                   	push   ebx
c0010f1e:	e8 fd f6 ff ff       	call   c0010620 <VgaText::doANSI_SGR(int)>
c0010f23:	59                   	pop    ecx
c0010f24:	31 d2                	xor    edx,edx
c0010f26:	58                   	pop    eax
c0010f27:	31 c0                	xor    eax,eax
c0010f29:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010f2d:	eb 09                	jmp    c0010f38 <VgaText::putchar(char)+0x82>
c0010f2f:	6b c0 0a             	imul   eax,eax,0xa
c0010f32:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010f36:	88 ca                	mov    dl,cl
c0010f38:	46                   	inc    esi
c0010f39:	eb ce                	jmp    c0010f09 <VgaText::putchar(char)+0x53>
c0010f3b:	84 d2                	test   dl,dl
c0010f3d:	74 2e                	je     c0010f6d <VgaText::putchar(char)+0xb7>
c0010f3f:	50                   	push   eax
c0010f40:	53                   	push   ebx
c0010f41:	e8 da f6 ff ff       	call   c0010620 <VgaText::doANSI_SGR(int)>
c0010f46:	58                   	pop    eax
c0010f47:	5a                   	pop    edx
c0010f48:	eb 23                	jmp    c0010f6d <VgaText::putchar(char)+0xb7>
c0010f4a:	3c 4a                	cmp    al,0x4a
c0010f4c:	75 1f                	jne    c0010f6d <VgaText::putchar(char)+0xb7>
c0010f4e:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0010f52:	75 19                	jne    c0010f6d <VgaText::putchar(char)+0xb7>
c0010f54:	83 ec 0c             	sub    esp,0xc
c0010f57:	53                   	push   ebx
c0010f58:	e8 ff fe ff ff       	call   c0010e5c <VgaText::clearScreen()>
c0010f5d:	83 c4 0c             	add    esp,0xc
c0010f60:	6a 00                	push   0x0
c0010f62:	6a 00                	push   0x0
c0010f64:	53                   	push   ebx
c0010f65:	e8 8e f8 ff ff       	call   c00107f8 <VgaText::setCursor(int, int)>
c0010f6a:	83 c4 10             	add    esp,0x10
c0010f6d:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0010f73:	eb 27                	jmp    c0010f9c <VgaText::putchar(char)+0xe6>
c0010f75:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0010f78:	83 fa 0e             	cmp    edx,0xe
c0010f7b:	7f 1f                	jg     c0010f9c <VgaText::putchar(char)+0xe6>
c0010f7d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010f80:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0010f83:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0010f87:	eb 13                	jmp    c0010f9c <VgaText::putchar(char)+0xe6>
c0010f89:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010f8c:	0f be c0             	movsx  eax,al
c0010f8f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010f92:	50                   	push   eax
c0010f93:	53                   	push   ebx
c0010f94:	e8 71 fb ff ff       	call   c0010b0a <VgaText::putchar(char, VgaColour, VgaColour)>
c0010f99:	83 c4 10             	add    esp,0x10
c0010f9c:	83 c4 14             	add    esp,0x14
c0010f9f:	5b                   	pop    ebx
c0010fa0:	5e                   	pop    esi
c0010fa1:	c3                   	ret    

c0010fa2 <VgaText::puts(char const*)>:
c0010fa2:	53                   	push   ebx
c0010fa3:	83 ec 08             	sub    esp,0x8
c0010fa6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010faa:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010fad:	84 c0                	test   al,al
c0010faf:	74 12                	je     c0010fc3 <VgaText::puts(char const*)+0x21>
c0010fb1:	43                   	inc    ebx
c0010fb2:	51                   	push   ecx
c0010fb3:	51                   	push   ecx
c0010fb4:	50                   	push   eax
c0010fb5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fb9:	e8 f8 fe ff ff       	call   c0010eb6 <VgaText::putchar(char)>
c0010fbe:	83 c4 10             	add    esp,0x10
c0010fc1:	eb e7                	jmp    c0010faa <VgaText::puts(char const*)+0x8>
c0010fc3:	83 c4 08             	add    esp,0x8
c0010fc6:	5b                   	pop    ebx
c0010fc7:	c3                   	ret    

c0010fc8 <VgaText::putx(unsigned int)>:
c0010fc8:	57                   	push   edi
c0010fc9:	b9 11 00 00 00       	mov    ecx,0x11
c0010fce:	56                   	push   esi
c0010fcf:	be ee a3 02 c0       	mov    esi,0xc002a3ee
c0010fd4:	53                   	push   ebx
c0010fd5:	83 ec 20             	sub    esp,0x20
c0010fd8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010fdc:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010fe0:	fc                   	cld    
c0010fe1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010fe3:	be 08 00 00 00       	mov    esi,0x8
c0010fe8:	50                   	push   eax
c0010fe9:	50                   	push   eax
c0010fea:	89 d8                	mov    eax,ebx
c0010fec:	c1 e3 04             	shl    ebx,0x4
c0010fef:	c1 e8 1c             	shr    eax,0x1c
c0010ff2:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010ff7:	50                   	push   eax
c0010ff8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010ffc:	e8 b5 fe ff ff       	call   c0010eb6 <VgaText::putchar(char)>
c0011001:	83 c4 10             	add    esp,0x10
c0011004:	4e                   	dec    esi
c0011005:	75 e1                	jne    c0010fe8 <VgaText::putx(unsigned int)+0x20>
c0011007:	83 c4 20             	add    esp,0x20
c001100a:	5b                   	pop    ebx
c001100b:	5e                   	pop    esi
c001100c:	5f                   	pop    edi
c001100d:	c3                   	ret    

c001100e <VgaText::VgaText(char const*)>:
c001100e:	57                   	push   edi
c001100f:	56                   	push   esi
c0011010:	53                   	push   ebx
c0011011:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011015:	83 ec 08             	sub    esp,0x8
c0011018:	6a 00                	push   0x0
c001101a:	50                   	push   eax
c001101b:	e8 8c 05 00 00       	call   c00115ac <UnixFile::UnixFile(int)>
c0011020:	83 c4 10             	add    esp,0x10
c0011023:	ba 54 a4 02 c0       	mov    edx,0xc002a454
c0011028:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001102c:	89 10                	mov    DWORD PTR [eax],edx
c001102e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011032:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0011039:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001103d:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0011044:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011048:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c001104c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011050:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0011054:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011058:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c001105f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011063:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c001106a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001106e:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0011075:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011079:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0011080:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011084:	8d 50 60             	lea    edx,[eax+0x60]
c0011087:	bb 20 e5 02 c0       	mov    ebx,0xc002e520
c001108c:	b8 08 00 00 00       	mov    eax,0x8
c0011091:	fc                   	cld    
c0011092:	89 d7                	mov    edi,edx
c0011094:	89 de                	mov    esi,ebx
c0011096:	89 c1                	mov    ecx,eax
c0011098:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001109a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001109e:	05 82 00 00 00       	add    eax,0x82
c00110a3:	83 ec 08             	sub    esp,0x8
c00110a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110aa:	50                   	push   eax
c00110ab:	e8 8c f7 fe ff       	call   c000083c <strcpy>
c00110b0:	83 c4 10             	add    esp,0x10
c00110b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110b7:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c00110be:	83 ec 0c             	sub    esp,0xc
c00110c1:	6a 01                	push   0x1
c00110c3:	e8 27 09 00 00       	call   c00119ef <Virt::allocateKernelVirtualPages(int)>
c00110c8:	83 c4 10             	add    esp,0x10
c00110cb:	89 c2                	mov    edx,eax
c00110cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110d1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00110d4:	e8 55 0b 00 00       	call   c0011c2e <Virt::getAKernelVAS()>
c00110d9:	89 c3                	mov    ebx,eax
c00110db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110df:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00110e2:	89 c6                	mov    esi,eax
c00110e4:	e8 ce ed ff ff       	call   c000feb7 <Phys::allocatePage()>
c00110e9:	6a 05                	push   0x5
c00110eb:	56                   	push   esi
c00110ec:	50                   	push   eax
c00110ed:	53                   	push   ebx
c00110ee:	e8 29 11 00 00       	call   c001221c <VAS::mapPage(unsigned long, unsigned long, int)>
c00110f3:	83 c4 10             	add    esp,0x10
c00110f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110fa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00110fd:	83 ec 04             	sub    esp,0x4
c0011100:	68 00 0f 00 00       	push   0xf00
c0011105:	6a 00                	push   0x0
c0011107:	50                   	push   eax
c0011108:	e8 73 f6 fe ff       	call   c0000780 <memset>
c001110d:	83 c4 10             	add    esp,0x10
c0011110:	83 ec 04             	sub    esp,0x4
c0011113:	6a 00                	push   0x0
c0011115:	6a 07                	push   0x7
c0011117:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001111b:	e8 94 f5 ff ff       	call   c00106b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0011120:	83 c4 10             	add    esp,0x10
c0011123:	83 ec 08             	sub    esp,0x8
c0011126:	6a 02                	push   0x2
c0011128:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001112c:	e8 c5 fa ff ff       	call   c0010bf6 <VgaText::setCursorHeight(int)>
c0011131:	83 c4 10             	add    esp,0x10
c0011134:	83 ec 04             	sub    esp,0x4
c0011137:	6a 00                	push   0x0
c0011139:	6a 00                	push   0x0
c001113b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001113f:	e8 b4 f6 ff ff       	call   c00107f8 <VgaText::setCursor(int, int)>
c0011144:	83 c4 10             	add    esp,0x10
c0011147:	83 ec 08             	sub    esp,0x8
c001114a:	6a 01                	push   0x1
c001114c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011150:	e8 8b f4 ff ff       	call   c00105e0 <VgaText::showCursor(bool)>
c0011155:	83 c4 10             	add    esp,0x10
c0011158:	83 ec 08             	sub    esp,0x8
c001115b:	6a 01                	push   0x1
c001115d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011161:	e8 86 f4 ff ff       	call   c00105ec <VgaText::disableBlink(bool)>
c0011166:	83 c4 10             	add    esp,0x10
c0011169:	83 ec 0c             	sub    esp,0xc
c001116c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011170:	e8 e7 fc ff ff       	call   c0010e5c <VgaText::clearScreen()>
c0011175:	83 c4 10             	add    esp,0x10
c0011178:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001117c:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0011180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011184:	05 02 01 00 00       	add    eax,0x102
c0011189:	83 ec 04             	sub    esp,0x4
c001118c:	68 96 00 00 00       	push   0x96
c0011191:	6a 00                	push   0x0
c0011193:	50                   	push   eax
c0011194:	e8 e7 f5 fe ff       	call   c0000780 <memset>
c0011199:	83 c4 10             	add    esp,0x10
c001119c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111a0:	05 98 01 00 00       	add    eax,0x198
c00111a5:	83 ec 04             	sub    esp,0x4
c00111a8:	68 2c 01 00 00       	push   0x12c
c00111ad:	6a 00                	push   0x0
c00111af:	50                   	push   eax
c00111b0:	e8 cb f5 fe ff       	call   c0000780 <memset>
c00111b5:	83 c4 10             	add    esp,0x10
c00111b8:	90                   	nop
c00111b9:	5b                   	pop    ebx
c00111ba:	5e                   	pop    esi
c00111bb:	5f                   	pop    edi
c00111bc:	c3                   	ret    
c00111bd:	90                   	nop

c00111be <VgaText::receiveKey(unsigned char)>:
c00111be:	55                   	push   ebp
c00111bf:	57                   	push   edi
c00111c0:	56                   	push   esi
c00111c1:	53                   	push   ebx
c00111c2:	83 ec 1c             	sub    esp,0x1c
c00111c5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00111c9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00111cd:	84 db                	test   bl,bl
c00111cf:	0f 84 c9 00 00 00    	je     c001129e <VgaText::receiveKey(unsigned char)+0xe0>
c00111d5:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c00111db:	80 fb 08             	cmp    bl,0x8
c00111de:	75 2c                	jne    c001120c <VgaText::receiveKey(unsigned char)+0x4e>
c00111e0:	83 ec 0c             	sub    esp,0xc
c00111e3:	57                   	push   edi
c00111e4:	e8 b3 f5 fe ff       	call   c000079c <strlen>
c00111e9:	83 c4 10             	add    esp,0x10
c00111ec:	85 c0                	test   eax,eax
c00111ee:	74 41                	je     c0011231 <VgaText::receiveKey(unsigned char)+0x73>
c00111f0:	50                   	push   eax
c00111f1:	50                   	push   eax
c00111f2:	6a 08                	push   0x8
c00111f4:	56                   	push   esi
c00111f5:	e8 bc fc ff ff       	call   c0010eb6 <VgaText::putchar(char)>
c00111fa:	89 3c 24             	mov    DWORD PTR [esp],edi
c00111fd:	e8 9a f5 fe ff       	call   c000079c <strlen>
c0011202:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c001120a:	eb 22                	jmp    c001122e <VgaText::receiveKey(unsigned char)+0x70>
c001120c:	0f be c3             	movsx  eax,bl
c001120f:	52                   	push   edx
c0011210:	52                   	push   edx
c0011211:	50                   	push   eax
c0011212:	56                   	push   esi
c0011213:	e8 9e fc ff ff       	call   c0010eb6 <VgaText::putchar(char)>
c0011218:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c001121c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011221:	59                   	pop    ecx
c0011222:	5d                   	pop    ebp
c0011223:	8d 44 24 16          	lea    eax,[esp+0x16]
c0011227:	50                   	push   eax
c0011228:	57                   	push   edi
c0011229:	e8 4e f7 fe ff       	call   c000097c <strcat>
c001122e:	83 c4 10             	add    esp,0x10
c0011231:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0011238:	75 05                	jne    c001123f <VgaText::receiveKey(unsigned char)+0x81>
c001123a:	80 fb 0a             	cmp    bl,0xa
c001123d:	75 53                	jne    c0011292 <VgaText::receiveKey(unsigned char)+0xd4>
c001123f:	83 ec 0c             	sub    esp,0xc
c0011242:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c0011248:	53                   	push   ebx
c0011249:	e8 4e f5 fe ff       	call   c000079c <strlen>
c001124e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011251:	89 c5                	mov    ebp,eax
c0011253:	e8 44 f5 fe ff       	call   c000079c <strlen>
c0011258:	83 c4 10             	add    esp,0x10
c001125b:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c001125f:	3d 2c 01 00 00       	cmp    eax,0x12c
c0011264:	76 10                	jbe    c0011276 <VgaText::receiveKey(unsigned char)+0xb8>
c0011266:	83 ec 0c             	sub    esp,0xc
c0011269:	68 ff a3 02 c0       	push   0xc002a3ff
c001126e:	e8 8e 92 00 00       	call   c001a501 <Krnl::panic(char const*)>
c0011273:	83 c4 10             	add    esp,0x10
c0011276:	50                   	push   eax
c0011277:	50                   	push   eax
c0011278:	57                   	push   edi
c0011279:	53                   	push   ebx
c001127a:	e8 fd f6 fe ff       	call   c000097c <strcat>
c001127f:	83 c4 0c             	add    esp,0xc
c0011282:	68 96 00 00 00       	push   0x96
c0011287:	6a 00                	push   0x0
c0011289:	57                   	push   edi
c001128a:	e8 f1 f4 fe ff       	call   c0000780 <memset>
c001128f:	83 c4 10             	add    esp,0x10
c0011292:	83 ec 0c             	sub    esp,0xc
c0011295:	56                   	push   esi
c0011296:	e8 3b fa ff ff       	call   c0010cd6 <VgaText::doUpdate()>
c001129b:	83 c4 10             	add    esp,0x10
c001129e:	83 c4 1c             	add    esp,0x1c
c00112a1:	5b                   	pop    ebx
c00112a2:	5e                   	pop    esi
c00112a3:	5f                   	pop    edi
c00112a4:	5d                   	pop    ebp
c00112a5:	c3                   	ret    

c00112a6 <VgaText::write(unsigned long long, void*, int*)>:
c00112a6:	55                   	push   ebp
c00112a7:	57                   	push   edi
c00112a8:	56                   	push   esi
c00112a9:	53                   	push   ebx
c00112aa:	83 ec 0c             	sub    esp,0xc
c00112ad:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00112b1:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00112b5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00112b9:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c00112c0:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00112c3:	39 eb                	cmp    ebx,ebp
c00112c5:	74 13                	je     c00112da <VgaText::write(unsigned long long, void*, int*)+0x34>
c00112c7:	43                   	inc    ebx
c00112c8:	50                   	push   eax
c00112c9:	50                   	push   eax
c00112ca:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c00112ce:	50                   	push   eax
c00112cf:	56                   	push   esi
c00112d0:	e8 e1 fb ff ff       	call   c0010eb6 <VgaText::putchar(char)>
c00112d5:	83 c4 10             	add    esp,0x10
c00112d8:	eb e9                	jmp    c00112c3 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c00112da:	83 ec 0c             	sub    esp,0xc
c00112dd:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c00112e4:	56                   	push   esi
c00112e5:	e8 ec f9 ff ff       	call   c0010cd6 <VgaText::doUpdate()>
c00112ea:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00112ee:	89 38                	mov    DWORD PTR [eax],edi
c00112f0:	83 c4 1c             	add    esp,0x1c
c00112f3:	31 c0                	xor    eax,eax
c00112f5:	5b                   	pop    ebx
c00112f6:	5e                   	pop    esi
c00112f7:	5f                   	pop    edi
c00112f8:	5d                   	pop    ebp
c00112f9:	c3                   	ret    

c00112fa <newTerminal(char*)>:
c00112fa:	83 ec 28             	sub    esp,0x28
c00112fd:	68 c4 02 00 00       	push   0x2c4
c0011302:	e8 44 e5 ff ff       	call   c000f84b <malloc>
c0011307:	5a                   	pop    edx
c0011308:	59                   	pop    ecx
c0011309:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001130d:	50                   	push   eax
c001130e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011312:	e8 f7 fc ff ff       	call   c001100e <VgaText::VgaText(char const*)>
c0011317:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001131b:	83 c4 2c             	add    esp,0x2c
c001131e:	c3                   	ret    
c001131f:	90                   	nop

c0011320 <TSS::TSS()>:
c0011320:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011324:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001132b:	90                   	nop
c001132c:	c3                   	ret    
c001132d:	90                   	nop

c001132e <TSS::setESP(unsigned long)>:
c001132e:	55                   	push   ebp
c001132f:	89 e5                	mov    ebp,esp
c0011331:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011334:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011337:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001133a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001133d:	90                   	nop
c001133e:	5d                   	pop    ebp
c001133f:	c3                   	ret    

c0011340 <TSS::flush()>:
c0011340:	55                   	push   ebp
c0011341:	89 e5                	mov    ebp,esp
c0011343:	83 ec 10             	sub    esp,0x10
c0011346:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011349:	8b 00                	mov    eax,DWORD PTR [eax]
c001134b:	83 c8 03             	or     eax,0x3
c001134e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0011352:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0011356:	66 89 d0             	mov    ax,dx
c0011359:	0f 00 d8             	ltr    ax
c001135c:	90                   	nop
c001135d:	c9                   	leave  
c001135e:	c3                   	ret    
c001135f:	90                   	nop

c0011360 <TSS::setup(unsigned long, unsigned long)>:
c0011360:	55                   	push   ebp
c0011361:	89 e5                	mov    ebp,esp
c0011363:	83 ec 18             	sub    esp,0x18
c0011366:	83 ec 0c             	sub    esp,0xc
c0011369:	6a 68                	push   0x68
c001136b:	e8 db e4 ff ff       	call   c000f84b <malloc>
c0011370:	83 c4 10             	add    esp,0x10
c0011373:	89 c2                	mov    edx,eax
c0011375:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011378:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001137b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001137e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011381:	83 ec 04             	sub    esp,0x4
c0011384:	6a 68                	push   0x68
c0011386:	6a 00                	push   0x0
c0011388:	50                   	push   eax
c0011389:	e8 f2 f3 fe ff       	call   c0000780 <memset>
c001138e:	83 c4 10             	add    esp,0x10
c0011391:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011394:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011397:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c001139d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113a3:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00113a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113af:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00113b2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00113b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113bb:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c00113c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113c7:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c00113cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113d3:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c00113d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113df:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c00113e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113eb:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00113f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113f7:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00113fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011400:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011403:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0011406:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011409:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001140c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001140f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011412:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011415:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011418:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001141b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011422:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011425:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011428:	0f 20 da             	mov    edx,cr3
c001142b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001142e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011431:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011434:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011437:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001143a:	83 ec 08             	sub    esp,0x8
c001143d:	50                   	push   eax
c001143e:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011441:	50                   	push   eax
c0011442:	e8 df db ff ff       	call   c000f026 <GDTEntry::setBase(unsigned int)>
c0011447:	83 c4 10             	add    esp,0x10
c001144a:	83 ec 08             	sub    esp,0x8
c001144d:	6a 68                	push   0x68
c001144f:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011452:	50                   	push   eax
c0011453:	e8 ea db ff ff       	call   c000f042 <GDTEntry::setLimit(unsigned int)>
c0011458:	83 c4 10             	add    esp,0x10
c001145b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c001145f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011462:	83 e0 0f             	and    eax,0xf
c0011465:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011468:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001146b:	83 c8 40             	or     eax,0x40
c001146e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011471:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0011476:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001147c:	05 78 01 00 00       	add    eax,0x178
c0011481:	83 ec 04             	sub    esp,0x4
c0011484:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011487:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001148a:	50                   	push   eax
c001148b:	e8 e6 db ff ff       	call   c000f076 <GDT::addEntry(GDTEntry)>
c0011490:	83 c4 10             	add    esp,0x10
c0011493:	89 c2                	mov    edx,eax
c0011495:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011498:	89 10                	mov    DWORD PTR [eax],edx
c001149a:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c001149f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00114a5:	05 78 01 00 00       	add    eax,0x178
c00114aa:	83 ec 0c             	sub    esp,0xc
c00114ad:	50                   	push   eax
c00114ae:	e8 07 dc ff ff       	call   c000f0ba <GDT::flush()>
c00114b3:	83 c4 10             	add    esp,0x10
c00114b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00114bb:	83 ec 08             	sub    esp,0x8
c00114be:	50                   	push   eax
c00114bf:	68 68 a4 02 c0       	push   0xc002a468
c00114c4:	e8 fa 18 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00114c9:	83 c4 10             	add    esp,0x10
c00114cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00114d1:	c9                   	leave  
c00114d2:	c3                   	ret    
c00114d3:	90                   	nop

c00114d4 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00114d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114d8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00114dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114df:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00114e4:	75 08                	jne    c00114ee <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00114e6:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00114ec:	eb 38                	jmp    c0011526 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00114ee:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00114f3:	75 17                	jne    c001150c <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00114f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00114fa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00114fd:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011503:	8b 10                	mov    edx,DWORD PTR [eax]
c0011505:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011509:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c001150c:	89 c1                	mov    ecx,eax
c001150e:	83 e1 fd             	and    ecx,0xfffffffd
c0011511:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011517:	74 cd                	je     c00114e6 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011519:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001151e:	83 e0 ef             	and    eax,0xffffffef
c0011521:	83 f8 08             	cmp    eax,0x8
c0011524:	76 c0                	jbe    c00114e6 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011526:	31 c0                	xor    eax,eax
c0011528:	c3                   	ret    
c0011529:	90                   	nop

c001152a <ReservedFilename::isAtty()>:
c001152a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001152e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011531:	31 c0                	xor    eax,eax
c0011533:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0011539:	74 09                	je     c0011544 <ReservedFilename::isAtty()+0x1a>
c001153b:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011541:	0f 94 c0             	sete   al
c0011544:	c3                   	ret    
c0011545:	90                   	nop

c0011546 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011546:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001154a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001154e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011551:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011555:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001155a:	75 08                	jne    c0011564 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c001155c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011562:	eb 3d                	jmp    c00115a1 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011564:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011569:	75 17                	jne    c0011582 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c001156b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011570:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011573:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011579:	8b 10                	mov    edx,DWORD PTR [eax]
c001157b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001157f:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011582:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011587:	75 04                	jne    c001158d <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011589:	89 0a                	mov    DWORD PTR [edx],ecx
c001158b:	eb 14                	jmp    c00115a1 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001158d:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011592:	74 c8                	je     c001155c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011594:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011599:	83 e0 ef             	and    eax,0xffffffef
c001159c:	83 f8 08             	cmp    eax,0x8
c001159f:	76 bb                	jbe    c001155c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00115a1:	31 c0                	xor    eax,eax
c00115a3:	c3                   	ret    

c00115a4 <UnixFile::getFileDescriptor()>:
c00115a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115ab:	c3                   	ret    

c00115ac <UnixFile::UnixFile(int)>:
c00115ac:	53                   	push   ebx
c00115ad:	83 ec 28             	sub    esp,0x28
c00115b0:	ba 54 a5 02 c0       	mov    edx,0xc002a554
c00115b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115b9:	89 10                	mov    DWORD PTR [eax],edx
c00115bb:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00115c3:	0f 8f 8c 01 00 00    	jg     c0011755 <UnixFile::UnixFile(int)+0x1a9>
c00115c9:	a1 00 d4 02 c0       	mov    eax,ds:0xc002d400
c00115ce:	8d 50 01             	lea    edx,[eax+0x1]
c00115d1:	89 15 00 d4 02 c0    	mov    DWORD PTR ds:0xc002d400,edx
c00115d7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00115db:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00115de:	83 ec 08             	sub    esp,0x8
c00115e1:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00115e5:	68 d8 e5 02 c0       	push   0xc002e5d8
c00115ea:	e8 51 71 01 00       	call   c0028740 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00115ef:	83 c4 10             	add    esp,0x10
c00115f2:	a0 d4 e5 02 c0       	mov    al,ds:0xc002e5d4
c00115f7:	83 f0 01             	xor    eax,0x1
c00115fa:	84 c0                	test   al,al
c00115fc:	0f 84 54 01 00 00    	je     c0011756 <UnixFile::UnixFile(int)+0x1aa>
c0011602:	c6 05 d4 e5 02 c0 01 	mov    BYTE PTR ds:0xc002e5d4,0x1
c0011609:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011611:	83 ec 0c             	sub    esp,0xc
c0011614:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011618:	e8 2e e2 ff ff       	call   c000f84b <malloc>
c001161d:	83 c4 10             	add    esp,0x10
c0011620:	89 c3                	mov    ebx,eax
c0011622:	83 ec 08             	sub    esp,0x8
c0011625:	68 03 ff ff 0f       	push   0xfffff03
c001162a:	53                   	push   ebx
c001162b:	e8 2c 01 00 00       	call   c001175c <ReservedFilename::ReservedFilename(int)>
c0011630:	83 c4 10             	add    esp,0x10
c0011633:	89 1d cc e5 02 c0    	mov    DWORD PTR ds:0xc002e5cc,ebx
c0011639:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011641:	83 ec 0c             	sub    esp,0xc
c0011644:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011648:	e8 fe e1 ff ff       	call   c000f84b <malloc>
c001164d:	83 c4 10             	add    esp,0x10
c0011650:	89 c3                	mov    ebx,eax
c0011652:	83 ec 08             	sub    esp,0x8
c0011655:	68 01 ff ff 0f       	push   0xfffff01
c001165a:	53                   	push   ebx
c001165b:	e8 fc 00 00 00       	call   c001175c <ReservedFilename::ReservedFilename(int)>
c0011660:	83 c4 10             	add    esp,0x10
c0011663:	89 1d d0 e5 02 c0    	mov    DWORD PTR ds:0xc002e5d0,ebx
c0011669:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011671:	83 ec 0c             	sub    esp,0xc
c0011674:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011678:	e8 ce e1 ff ff       	call   c000f84b <malloc>
c001167d:	83 c4 10             	add    esp,0x10
c0011680:	89 c3                	mov    ebx,eax
c0011682:	83 ec 08             	sub    esp,0x8
c0011685:	68 00 ff ff 0f       	push   0xfffff00
c001168a:	53                   	push   ebx
c001168b:	e8 cc 00 00 00       	call   c001175c <ReservedFilename::ReservedFilename(int)>
c0011690:	83 c4 10             	add    esp,0x10
c0011693:	89 1d c4 e5 02 c0    	mov    DWORD PTR ds:0xc002e5c4,ebx
c0011699:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00116a1:	83 ec 0c             	sub    esp,0xc
c00116a4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00116a8:	e8 9e e1 ff ff       	call   c000f84b <malloc>
c00116ad:	83 c4 10             	add    esp,0x10
c00116b0:	89 c3                	mov    ebx,eax
c00116b2:	83 ec 08             	sub    esp,0x8
c00116b5:	68 02 ff ff 0f       	push   0xfffff02
c00116ba:	53                   	push   ebx
c00116bb:	e8 9c 00 00 00       	call   c001175c <ReservedFilename::ReservedFilename(int)>
c00116c0:	83 c4 10             	add    esp,0x10
c00116c3:	89 1d c8 e5 02 c0    	mov    DWORD PTR ds:0xc002e5c8,ebx
c00116c9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00116d1:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00116d6:	7f 7e                	jg     c0011756 <UnixFile::UnixFile(int)+0x1aa>
c00116d8:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00116e0:	83 ec 0c             	sub    esp,0xc
c00116e3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00116e7:	e8 5f e1 ff ff       	call   c000f84b <malloc>
c00116ec:	83 c4 10             	add    esp,0x10
c00116ef:	89 c3                	mov    ebx,eax
c00116f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00116f5:	05 10 ff ff 0f       	add    eax,0xfffff10
c00116fa:	83 ec 08             	sub    esp,0x8
c00116fd:	50                   	push   eax
c00116fe:	53                   	push   ebx
c00116ff:	e8 58 00 00 00       	call   c001175c <ReservedFilename::ReservedFilename(int)>
c0011704:	83 c4 10             	add    esp,0x10
c0011707:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001170b:	89 1c 85 a0 e5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1a60],ebx
c0011712:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c001171a:	83 ec 0c             	sub    esp,0xc
c001171d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011721:	e8 25 e1 ff ff       	call   c000f84b <malloc>
c0011726:	83 c4 10             	add    esp,0x10
c0011729:	89 c3                	mov    ebx,eax
c001172b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001172f:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011734:	83 ec 08             	sub    esp,0x8
c0011737:	50                   	push   eax
c0011738:	53                   	push   ebx
c0011739:	e8 1e 00 00 00       	call   c001175c <ReservedFilename::ReservedFilename(int)>
c001173e:	83 c4 10             	add    esp,0x10
c0011741:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011745:	89 1c 85 60 e5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1aa0],ebx
c001174c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011750:	e9 7c ff ff ff       	jmp    c00116d1 <UnixFile::UnixFile(int)+0x125>
c0011755:	90                   	nop
c0011756:	83 c4 28             	add    esp,0x28
c0011759:	5b                   	pop    ebx
c001175a:	c3                   	ret    
c001175b:	90                   	nop

c001175c <ReservedFilename::ReservedFilename(int)>:
c001175c:	83 ec 0c             	sub    esp,0xc
c001175f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011763:	83 ec 08             	sub    esp,0x8
c0011766:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001176a:	50                   	push   eax
c001176b:	e8 3c fe ff ff       	call   c00115ac <UnixFile::UnixFile(int)>
c0011770:	83 c4 10             	add    esp,0x10
c0011773:	ba 70 a5 02 c0       	mov    edx,0xc002a570
c0011778:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001177c:	89 10                	mov    DWORD PTR [eax],edx
c001177e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011782:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011786:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011789:	90                   	nop
c001178a:	83 c4 0c             	add    esp,0xc
c001178d:	c3                   	ret    

c001178e <UnixFile::~UnixFile()>:
c001178e:	83 ec 1c             	sub    esp,0x1c
c0011791:	ba 54 a5 02 c0       	mov    edx,0xc002a554
c0011796:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001179a:	89 10                	mov    DWORD PTR [eax],edx
c001179c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00117a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00117a3:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00117a8:	7f 73                	jg     c001181d <UnixFile::~UnixFile()+0x8f>
c00117aa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00117b2:	83 ec 0c             	sub    esp,0xc
c00117b5:	68 d8 e5 02 c0       	push   0xc002e5d8
c00117ba:	e8 55 70 01 00       	call   c0028814 <LinkedList<UnixFile>::getFirstElement()>
c00117bf:	83 c4 10             	add    esp,0x10
c00117c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00117c6:	83 ec 0c             	sub    esp,0xc
c00117c9:	68 d8 e5 02 c0       	push   0xc002e5d8
c00117ce:	e8 49 70 01 00       	call   c002881c <LinkedList<UnixFile>::removeFirst()>
c00117d3:	83 c4 10             	add    esp,0x10
c00117d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00117da:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00117de:	74 40                	je     c0011820 <UnixFile::~UnixFile()+0x92>
c00117e0:	83 ec 08             	sub    esp,0x8
c00117e3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00117e7:	68 d8 e5 02 c0       	push   0xc002e5d8
c00117ec:	e8 4f 6f 01 00       	call   c0028740 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00117f1:	83 c4 10             	add    esp,0x10
c00117f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00117f8:	8d 50 01             	lea    edx,[eax+0x1]
c00117fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00117ff:	3d 88 13 00 00       	cmp    eax,0x1388
c0011804:	0f 94 c0             	sete   al
c0011807:	84 c0                	test   al,al
c0011809:	74 a7                	je     c00117b2 <UnixFile::~UnixFile()+0x24>
c001180b:	83 ec 0c             	sub    esp,0xc
c001180e:	68 2c a5 02 c0       	push   0xc002a52c
c0011813:	e8 e9 8c 00 00       	call   c001a501 <Krnl::panic(char const*)>
c0011818:	83 c4 10             	add    esp,0x10
c001181b:	eb 95                	jmp    c00117b2 <UnixFile::~UnixFile()+0x24>
c001181d:	90                   	nop
c001181e:	eb 01                	jmp    c0011821 <UnixFile::~UnixFile()+0x93>
c0011820:	90                   	nop
c0011821:	90                   	nop
c0011822:	83 c4 1c             	add    esp,0x1c
c0011825:	c3                   	ret    

c0011826 <UnixFile::~UnixFile()>:
c0011826:	83 ec 0c             	sub    esp,0xc
c0011829:	83 ec 0c             	sub    esp,0xc
c001182c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011830:	e8 59 ff ff ff       	call   c001178e <UnixFile::~UnixFile()>
c0011835:	83 c4 10             	add    esp,0x10
c0011838:	83 ec 08             	sub    esp,0x8
c001183b:	6a 0c                	push   0xc
c001183d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011841:	e8 9d 14 00 00       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0011846:	83 c4 10             	add    esp,0x10
c0011849:	83 c4 0c             	add    esp,0xc
c001184c:	c3                   	ret    
c001184d:	90                   	nop

c001184e <ReservedFilename::~ReservedFilename()>:
c001184e:	83 ec 0c             	sub    esp,0xc
c0011851:	ba 70 a5 02 c0       	mov    edx,0xc002a570
c0011856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001185a:	89 10                	mov    DWORD PTR [eax],edx
c001185c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011860:	83 ec 0c             	sub    esp,0xc
c0011863:	50                   	push   eax
c0011864:	e8 25 ff ff ff       	call   c001178e <UnixFile::~UnixFile()>
c0011869:	83 c4 10             	add    esp,0x10
c001186c:	90                   	nop
c001186d:	83 c4 0c             	add    esp,0xc
c0011870:	c3                   	ret    
c0011871:	90                   	nop

c0011872 <ReservedFilename::~ReservedFilename()>:
c0011872:	83 ec 0c             	sub    esp,0xc
c0011875:	83 ec 0c             	sub    esp,0xc
c0011878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001187c:	e8 cd ff ff ff       	call   c001184e <ReservedFilename::~ReservedFilename()>
c0011881:	83 c4 10             	add    esp,0x10
c0011884:	83 ec 08             	sub    esp,0x8
c0011887:	6a 0c                	push   0xc
c0011889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001188d:	e8 51 14 00 00       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0011892:	83 c4 10             	add    esp,0x10
c0011895:	83 c4 0c             	add    esp,0xc
c0011898:	c3                   	ret    

c0011899 <getFromFileDescriptor(int)>:
c0011899:	53                   	push   ebx
c001189a:	83 ec 08             	sub    esp,0x8
c001189d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00118a1:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00118a7:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00118ad:	7f 2c                	jg     c00118db <getFromFileDescriptor(int)+0x42>
c00118af:	83 ec 0c             	sub    esp,0xc
c00118b2:	68 d8 e5 02 c0       	push   0xc002e5d8
c00118b7:	e8 58 6f 01 00       	call   c0028814 <LinkedList<UnixFile>::getFirstElement()>
c00118bc:	83 c4 10             	add    esp,0x10
c00118bf:	85 c0                	test   eax,eax
c00118c1:	75 04                	jne    c00118c7 <getFromFileDescriptor(int)+0x2e>
c00118c3:	31 c0                	xor    eax,eax
c00118c5:	eb 6e                	jmp    c0011935 <getFromFileDescriptor(int)+0x9c>
c00118c7:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00118ca:	74 69                	je     c0011935 <getFromFileDescriptor(int)+0x9c>
c00118cc:	52                   	push   edx
c00118cd:	52                   	push   edx
c00118ce:	50                   	push   eax
c00118cf:	68 d8 e5 02 c0       	push   0xc002e5d8
c00118d4:	e8 e5 6f 01 00       	call   c00288be <LinkedList<UnixFile>::getNext(UnixFile*)>
c00118d9:	eb e1                	jmp    c00118bc <getFromFileDescriptor(int)+0x23>
c00118db:	a1 cc e5 02 c0       	mov    eax,ds:0xc002e5cc
c00118e0:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00118e6:	74 4d                	je     c0011935 <getFromFileDescriptor(int)+0x9c>
c00118e8:	a1 d0 e5 02 c0       	mov    eax,ds:0xc002e5d0
c00118ed:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00118f3:	74 40                	je     c0011935 <getFromFileDescriptor(int)+0x9c>
c00118f5:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c00118fa:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011900:	74 33                	je     c0011935 <getFromFileDescriptor(int)+0x9c>
c0011902:	a1 c4 e5 02 c0       	mov    eax,ds:0xc002e5c4
c0011907:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001190d:	74 26                	je     c0011935 <getFromFileDescriptor(int)+0x9c>
c001190f:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011915:	83 f8 08             	cmp    eax,0x8
c0011918:	77 09                	ja     c0011923 <getFromFileDescriptor(int)+0x8a>
c001191a:	8b 04 85 a0 e5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1a60]
c0011921:	eb 12                	jmp    c0011935 <getFromFileDescriptor(int)+0x9c>
c0011923:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011929:	83 fb 08             	cmp    ebx,0x8
c001192c:	77 95                	ja     c00118c3 <getFromFileDescriptor(int)+0x2a>
c001192e:	8b 04 9d 60 e5 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1aa0]
c0011935:	83 c4 08             	add    esp,0x8
c0011938:	5b                   	pop    ebx
c0011939:	c3                   	ret    

c001193a <__static_initialization_and_destruction_0(int, int)>:
c001193a:	83 ec 0c             	sub    esp,0xc
c001193d:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011942:	75 34                	jne    c0011978 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011944:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001194c:	75 2a                	jne    c0011978 <__static_initialization_and_destruction_0(int, int)+0x3e>
c001194e:	83 ec 0c             	sub    esp,0xc
c0011951:	68 d8 e5 02 c0       	push   0xc002e5d8
c0011956:	e8 8d 6d 01 00       	call   c00286e8 <LinkedList<UnixFile>::LinkedList()>
c001195b:	83 c4 10             	add    esp,0x10
c001195e:	83 ec 04             	sub    esp,0x4
c0011961:	68 84 d3 02 c0       	push   0xc002d384
c0011966:	68 d8 e5 02 c0       	push   0xc002e5d8
c001196b:	68 e6 86 02 c0       	push   0xc00286e6
c0011970:	e8 e8 12 00 00       	call   c0012c5d <__cxa_atexit>
c0011975:	83 c4 10             	add    esp,0x10
c0011978:	90                   	nop
c0011979:	83 c4 0c             	add    esp,0xc
c001197c:	c3                   	ret    

c001197d <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c001197d:	83 ec 0c             	sub    esp,0xc
c0011980:	83 ec 08             	sub    esp,0x8
c0011983:	68 ff ff 00 00       	push   0xffff
c0011988:	6a 01                	push   0x1
c001198a:	e8 ab ff ff ff       	call   c001193a <__static_initialization_and_destruction_0(int, int)>
c001198f:	83 c4 10             	add    esp,0x10
c0011992:	83 c4 0c             	add    esp,0xc
c0011995:	c3                   	ret    

c0011996 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011996:	53                   	push   ebx
c0011997:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001199b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001199f:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c00119a5:	89 c8                	mov    eax,ecx
c00119a7:	d1 e8                	shr    eax,1
c00119a9:	03 05 08 d4 02 c0    	add    eax,DWORD PTR ds:0xc002d408
c00119af:	83 e1 01             	and    ecx,0x1
c00119b2:	8a 10                	mov    dl,BYTE PTR [eax]
c00119b4:	75 09                	jne    c00119bf <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c00119b6:	83 e2 f0             	and    edx,0xfffffff0
c00119b9:	09 da                	or     edx,ebx
c00119bb:	88 10                	mov    BYTE PTR [eax],dl
c00119bd:	5b                   	pop    ebx
c00119be:	c3                   	ret    
c00119bf:	c1 e3 04             	shl    ebx,0x4
c00119c2:	83 e2 0f             	and    edx,0xf
c00119c5:	09 da                	or     edx,ebx
c00119c7:	88 10                	mov    BYTE PTR [eax],dl
c00119c9:	5b                   	pop    ebx
c00119ca:	c3                   	ret    

c00119cb <Virt::getPageState(unsigned long)>:
c00119cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00119cf:	8b 0d 08 d4 02 c0    	mov    ecx,DWORD PTR ds:0xc002d408
c00119d5:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00119db:	89 d0                	mov    eax,edx
c00119dd:	d1 e8                	shr    eax,1
c00119df:	83 e2 01             	and    edx,0x1
c00119e2:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00119e5:	75 04                	jne    c00119eb <Virt::getPageState(unsigned long)+0x20>
c00119e7:	83 e0 0f             	and    eax,0xf
c00119ea:	c3                   	ret    
c00119eb:	c0 e8 04             	shr    al,0x4
c00119ee:	c3                   	ret    

c00119ef <Virt::allocateKernelVirtualPages(int)>:
c00119ef:	55                   	push   ebp
c00119f0:	31 ed                	xor    ebp,ebp
c00119f2:	57                   	push   edi
c00119f3:	56                   	push   esi
c00119f4:	53                   	push   ebx
c00119f5:	31 db                	xor    ebx,ebx
c00119f7:	83 ec 1c             	sub    esp,0x1c
c00119fa:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00119fe:	8b 3d 04 d4 02 c0    	mov    edi,DWORD PTR ds:0xc002d404
c0011a04:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011a09:	57                   	push   edi
c0011a0a:	e8 bc ff ff ff       	call   c00119cb <Virt::getPageState(unsigned long)>
c0011a0f:	5a                   	pop    edx
c0011a10:	84 c0                	test   al,al
c0011a12:	75 3a                	jne    c0011a4e <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011a14:	85 db                	test   ebx,ebx
c0011a16:	75 02                	jne    c0011a1a <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011a18:	89 fd                	mov    ebp,edi
c0011a1a:	43                   	inc    ebx
c0011a1b:	39 f3                	cmp    ebx,esi
c0011a1d:	74 5a                	je     c0011a79 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011a1f:	47                   	inc    edi
c0011a20:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011a26:	76 31                	jbe    c0011a59 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011a28:	c7 05 04 d4 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d404,0xc8000
c0011a32:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011a37:	75 28                	jne    c0011a61 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011a39:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011a3e:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011a43:	57                   	push   edi
c0011a44:	e8 82 ff ff ff       	call   c00119cb <Virt::getPageState(unsigned long)>
c0011a49:	5a                   	pop    edx
c0011a4a:	84 c0                	test   al,al
c0011a4c:	74 c6                	je     c0011a14 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011a4e:	31 db                	xor    ebx,ebx
c0011a50:	47                   	inc    edi
c0011a51:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011a57:	77 cf                	ja     c0011a28 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011a59:	89 3d 04 d4 02 c0    	mov    DWORD PTR ds:0xc002d404,edi
c0011a5f:	eb a8                	jmp    c0011a09 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011a61:	83 ec 0c             	sub    esp,0xc
c0011a64:	68 84 a5 02 c0       	push   0xc002a584
c0011a69:	e8 93 8a 00 00       	call   c001a501 <Krnl::panic(char const*)>
c0011a6e:	8b 3d 04 d4 02 c0    	mov    edi,DWORD PTR ds:0xc002d404
c0011a74:	83 c4 10             	add    esp,0x10
c0011a77:	eb 90                	jmp    c0011a09 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011a79:	89 2d 04 d4 02 c0    	mov    DWORD PTR ds:0xc002d404,ebp
c0011a7f:	4b                   	dec    ebx
c0011a80:	74 5f                	je     c0011ae1 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011a82:	85 f6                	test   esi,esi
c0011a84:	74 3d                	je     c0011ac3 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011a86:	89 e8                	mov    eax,ebp
c0011a88:	31 db                	xor    ebx,ebx
c0011a8a:	8d 7e ff             	lea    edi,[esi-0x1]
c0011a8d:	eb 14                	jmp    c0011aa3 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011a8f:	6a 01                	push   0x1
c0011a91:	43                   	inc    ebx
c0011a92:	50                   	push   eax
c0011a93:	e8 fe fe ff ff       	call   c0011996 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a98:	58                   	pop    eax
c0011a99:	39 f3                	cmp    ebx,esi
c0011a9b:	5a                   	pop    edx
c0011a9c:	74 25                	je     c0011ac3 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011a9e:	a1 04 d4 02 c0       	mov    eax,ds:0xc002d404
c0011aa3:	8d 50 01             	lea    edx,[eax+0x1]
c0011aa6:	85 db                	test   ebx,ebx
c0011aa8:	89 15 04 d4 02 c0    	mov    DWORD PTR ds:0xc002d404,edx
c0011aae:	74 20                	je     c0011ad0 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011ab0:	39 df                	cmp    edi,ebx
c0011ab2:	75 db                	jne    c0011a8f <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011ab4:	6a 03                	push   0x3
c0011ab6:	43                   	inc    ebx
c0011ab7:	50                   	push   eax
c0011ab8:	e8 d9 fe ff ff       	call   c0011996 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011abd:	59                   	pop    ecx
c0011abe:	39 f3                	cmp    ebx,esi
c0011ac0:	58                   	pop    eax
c0011ac1:	75 db                	jne    c0011a9e <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011ac3:	83 c4 1c             	add    esp,0x1c
c0011ac6:	89 e8                	mov    eax,ebp
c0011ac8:	5b                   	pop    ebx
c0011ac9:	c1 e0 0c             	shl    eax,0xc
c0011acc:	5e                   	pop    esi
c0011acd:	5f                   	pop    edi
c0011ace:	5d                   	pop    ebp
c0011acf:	c3                   	ret    
c0011ad0:	6a 02                	push   0x2
c0011ad2:	bb 01 00 00 00       	mov    ebx,0x1
c0011ad7:	50                   	push   eax
c0011ad8:	e8 b9 fe ff ff       	call   c0011996 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011add:	58                   	pop    eax
c0011ade:	5a                   	pop    edx
c0011adf:	eb bd                	jmp    c0011a9e <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011ae1:	6a 04                	push   0x4
c0011ae3:	8d 45 01             	lea    eax,[ebp+0x1]
c0011ae6:	55                   	push   ebp
c0011ae7:	a3 04 d4 02 c0       	mov    ds:0xc002d404,eax
c0011aec:	e8 a5 fe ff ff       	call   c0011996 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011af1:	59                   	pop    ecx
c0011af2:	89 e8                	mov    eax,ebp
c0011af4:	5b                   	pop    ebx
c0011af5:	c1 e0 0c             	shl    eax,0xc
c0011af8:	83 c4 1c             	add    esp,0x1c
c0011afb:	5b                   	pop    ebx
c0011afc:	5e                   	pop    esi
c0011afd:	5f                   	pop    edi
c0011afe:	5d                   	pop    ebp
c0011aff:	c3                   	ret    

c0011b00 <Virt::freeSwapfilePage(unsigned long)>:
c0011b00:	53                   	push   ebx
c0011b01:	8b 15 ec e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e5ec
c0011b07:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011b0b:	b8 01 00 00 00       	mov    eax,0x1
c0011b10:	89 cb                	mov    ebx,ecx
c0011b12:	d3 e0                	shl    eax,cl
c0011b14:	c1 eb 05             	shr    ebx,0x5
c0011b17:	f7 d0                	not    eax
c0011b19:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011b1c:	5b                   	pop    ebx
c0011b1d:	c3                   	ret    

c0011b1e <Virt::swapIDToSector(unsigned long)>:
c0011b1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b22:	0f af 05 0c d4 02 c0 	imul   eax,DWORD PTR ds:0xc002d40c
c0011b29:	03 05 14 d4 02 c0    	add    eax,DWORD PTR ds:0xc002d414
c0011b2f:	c3                   	ret    

c0011b30 <Virt::allocateSwapfilePage()>:
c0011b30:	55                   	push   ebp
c0011b31:	31 d2                	xor    edx,edx
c0011b33:	57                   	push   edi
c0011b34:	56                   	push   esi
c0011b35:	53                   	push   ebx
c0011b36:	83 ec 0c             	sub    esp,0xc
c0011b39:	8b 0d 0c d4 02 c0    	mov    ecx,DWORD PTR ds:0xc002d40c
c0011b3f:	a1 10 d4 02 c0       	mov    eax,ds:0xc002d410
c0011b44:	f7 f1                	div    ecx
c0011b46:	39 0d 10 d4 02 c0    	cmp    DWORD PTR ds:0xc002d410,ecx
c0011b4c:	72 2d                	jb     c0011b7b <Virt::allocateSwapfilePage()+0x4b>
c0011b4e:	8b 35 ec e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e5ec
c0011b54:	8b 16                	mov    edx,DWORD PTR [esi]
c0011b56:	f6 c2 01             	test   dl,0x1
c0011b59:	74 3c                	je     c0011b97 <Virt::allocateSwapfilePage()+0x67>
c0011b5b:	31 c9                	xor    ecx,ecx
c0011b5d:	bf 01 00 00 00       	mov    edi,0x1
c0011b62:	eb 12                	jmp    c0011b76 <Virt::allocateSwapfilePage()+0x46>
c0011b64:	89 fd                	mov    ebp,edi
c0011b66:	89 ca                	mov    edx,ecx
c0011b68:	d3 e5                	shl    ebp,cl
c0011b6a:	c1 ea 05             	shr    edx,0x5
c0011b6d:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011b70:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011b72:	85 ea                	test   edx,ebp
c0011b74:	74 2a                	je     c0011ba0 <Virt::allocateSwapfilePage()+0x70>
c0011b76:	41                   	inc    ecx
c0011b77:	39 c8                	cmp    eax,ecx
c0011b79:	77 e9                	ja     c0011b64 <Virt::allocateSwapfilePage()+0x34>
c0011b7b:	83 ec 0c             	sub    esp,0xc
c0011b7e:	68 0b a7 02 c0       	push   0xc002a70b
c0011b83:	e8 79 89 00 00       	call   c001a501 <Krnl::panic(char const*)>
c0011b88:	83 c4 10             	add    esp,0x10
c0011b8b:	31 c9                	xor    ecx,ecx
c0011b8d:	83 c4 0c             	add    esp,0xc
c0011b90:	89 c8                	mov    eax,ecx
c0011b92:	5b                   	pop    ebx
c0011b93:	5e                   	pop    esi
c0011b94:	5f                   	pop    edi
c0011b95:	5d                   	pop    ebp
c0011b96:	c3                   	ret    
c0011b97:	89 f3                	mov    ebx,esi
c0011b99:	bd 01 00 00 00       	mov    ebp,0x1
c0011b9e:	31 c9                	xor    ecx,ecx
c0011ba0:	09 ea                	or     edx,ebp
c0011ba2:	89 c8                	mov    eax,ecx
c0011ba4:	89 13                	mov    DWORD PTR [ebx],edx
c0011ba6:	83 c4 0c             	add    esp,0xc
c0011ba9:	5b                   	pop    ebx
c0011baa:	5e                   	pop    esi
c0011bab:	5f                   	pop    edi
c0011bac:	5d                   	pop    ebp
c0011bad:	c3                   	ret    

c0011bae <Virt::virtualMemorySetup()>:
c0011bae:	53                   	push   ebx
c0011baf:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011bb4:	83 ec 08             	sub    esp,0x8
c0011bb7:	6a 0f                	push   0xf
c0011bb9:	53                   	push   ebx
c0011bba:	43                   	inc    ebx
c0011bbb:	e8 d6 fd ff ff       	call   c0011996 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011bc0:	59                   	pop    ecx
c0011bc1:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011bc7:	58                   	pop    eax
c0011bc8:	75 ed                	jne    c0011bb7 <Virt::virtualMemorySetup()+0x9>
c0011bca:	83 ec 08             	sub    esp,0x8
c0011bcd:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011bd2:	68 00 00 00 c8       	push   0xc8000000
c0011bd7:	68 22 a7 02 c0       	push   0xc002a722
c0011bdc:	e8 e2 11 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0011be1:	58                   	pop    eax
c0011be2:	5a                   	pop    edx
c0011be3:	68 00 f0 ff ef       	push   0xeffff000
c0011be8:	68 36 a7 02 c0       	push   0xc002a736
c0011bed:	e8 d1 11 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0011bf2:	83 c4 10             	add    esp,0x10
c0011bf5:	83 ec 08             	sub    esp,0x8
c0011bf8:	6a 00                	push   0x0
c0011bfa:	53                   	push   ebx
c0011bfb:	43                   	inc    ebx
c0011bfc:	e8 95 fd ff ff       	call   c0011996 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c01:	83 c4 10             	add    esp,0x10
c0011c04:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011c0a:	75 e9                	jne    c0011bf5 <Virt::virtualMemorySetup()+0x47>
c0011c0c:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011c11:	83 ec 08             	sub    esp,0x8
c0011c14:	6a 0f                	push   0xf
c0011c16:	53                   	push   ebx
c0011c17:	43                   	inc    ebx
c0011c18:	e8 79 fd ff ff       	call   c0011996 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c1d:	83 c4 10             	add    esp,0x10
c0011c20:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011c26:	75 e9                	jne    c0011c11 <Virt::virtualMemorySetup()+0x63>
c0011c28:	83 c4 08             	add    esp,0x8
c0011c2b:	5b                   	pop    ebx
c0011c2c:	c3                   	ret    

c0011c2d <Virt::swappingSetup()>:
c0011c2d:	c3                   	ret    

c0011c2e <Virt::getAKernelVAS()>:
c0011c2e:	a1 f0 e5 02 c0       	mov    eax,ds:0xc002e5f0
c0011c33:	c3                   	ret    

c0011c34 <Virt::setupPageSwapping(int)>:
c0011c34:	57                   	push   edi
c0011c35:	56                   	push   esi
c0011c36:	53                   	push   ebx
c0011c37:	83 ec 1c             	sub    esp,0x1c
c0011c3a:	68 4a a7 02 c0       	push   0xc002a74a
c0011c3f:	e8 7f 11 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0011c44:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011c4b:	e8 fb db ff ff       	call   c000f84b <malloc>
c0011c50:	83 c4 0c             	add    esp,0xc
c0011c53:	89 c6                	mov    esi,eax
c0011c55:	ff 35 d4 19 03 c0    	push   DWORD PTR ds:0xc00319d4
c0011c5b:	68 5e a7 02 c0       	push   0xc002a75e
c0011c60:	50                   	push   eax
c0011c61:	e8 bc 16 00 00       	call   c0013322 <File::File(char const*, Process*)>
c0011c66:	89 34 24             	mov    DWORD PTR [esp],esi
c0011c69:	e8 90 18 00 00       	call   c00134fe <File::unlink()>
c0011c6e:	59                   	pop    ecx
c0011c6f:	5b                   	pop    ebx
c0011c70:	6a 12                	push   0x12
c0011c72:	56                   	push   esi
c0011c73:	e8 0e 17 00 00       	call   c0013386 <File::open(FileOpenMode)>
c0011c78:	83 c4 10             	add    esp,0x10
c0011c7b:	85 c0                	test   eax,eax
c0011c7d:	0f 85 5b 01 00 00    	jne    c0011dde <Virt::setupPageSwapping(int)+0x1aa>
c0011c83:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011c87:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011c8f:	c1 e3 08             	shl    ebx,0x8
c0011c92:	83 ec 0c             	sub    esp,0xc
c0011c95:	68 00 00 01 00       	push   0x10000
c0011c9a:	e8 ac db ff ff       	call   c000f84b <malloc>
c0011c9f:	83 c4 0c             	add    esp,0xc
c0011ca2:	89 c7                	mov    edi,eax
c0011ca4:	68 00 00 01 00       	push   0x10000
c0011ca9:	68 ee 00 00 00       	push   0xee
c0011cae:	50                   	push   eax
c0011caf:	e8 cc ea fe ff       	call   c0000780 <memset>
c0011cb4:	83 c4 10             	add    esp,0x10
c0011cb7:	85 db                	test   ebx,ebx
c0011cb9:	79 03                	jns    c0011cbe <Virt::setupPageSwapping(int)+0x8a>
c0011cbb:	83 c3 0f             	add    ebx,0xf
c0011cbe:	c1 fb 04             	sar    ebx,0x4
c0011cc1:	4b                   	dec    ebx
c0011cc2:	83 fb ff             	cmp    ebx,0xffffffff
c0011cc5:	74 4f                	je     c0011d16 <Virt::setupPageSwapping(int)+0xe2>
c0011cc7:	83 ec 0c             	sub    esp,0xc
c0011cca:	8b 06                	mov    eax,DWORD PTR [esi]
c0011ccc:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011cd0:	52                   	push   edx
c0011cd1:	57                   	push   edi
c0011cd2:	6a 00                	push   0x0
c0011cd4:	68 00 00 01 00       	push   0x10000
c0011cd9:	56                   	push   esi
c0011cda:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011cdd:	83 c4 20             	add    esp,0x20
c0011ce0:	85 c0                	test   eax,eax
c0011ce2:	0f 85 e0 00 00 00    	jne    c0011dc8 <Virt::setupPageSwapping(int)+0x194>
c0011ce8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011cec:	3d 00 00 01 00       	cmp    eax,0x10000
c0011cf1:	74 ce                	je     c0011cc1 <Virt::setupPageSwapping(int)+0x8d>
c0011cf3:	83 ec 08             	sub    esp,0x8
c0011cf6:	4b                   	dec    ebx
c0011cf7:	50                   	push   eax
c0011cf8:	68 b1 a7 02 c0       	push   0xc002a7b1
c0011cfd:	e8 c1 10 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0011d02:	c7 04 24 ba a7 02 c0 	mov    DWORD PTR [esp],0xc002a7ba
c0011d09:	e8 f3 87 00 00       	call   c001a501 <Krnl::panic(char const*)>
c0011d0e:	83 c4 10             	add    esp,0x10
c0011d11:	83 fb ff             	cmp    ebx,0xffffffff
c0011d14:	75 b1                	jne    c0011cc7 <Virt::setupPageSwapping(int)+0x93>
c0011d16:	83 ec 0c             	sub    esp,0xc
c0011d19:	56                   	push   esi
c0011d1a:	e8 c5 16 00 00       	call   c00133e4 <File::close()>
c0011d1f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011d22:	e8 44 db ff ff       	call   c000f86b <rfree>
c0011d27:	83 c4 10             	add    esp,0x10
c0011d2a:	85 f6                	test   esi,esi
c0011d2c:	74 0c                	je     c0011d3a <Virt::setupPageSwapping(int)+0x106>
c0011d2e:	83 ec 0c             	sub    esp,0xc
c0011d31:	8b 06                	mov    eax,DWORD PTR [esi]
c0011d33:	56                   	push   esi
c0011d34:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011d37:	83 c4 10             	add    esp,0x10
c0011d3a:	83 ec 08             	sub    esp,0x8
c0011d3d:	a1 88 ea 02 c0       	mov    eax,ds:0xc002ea88
c0011d42:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0011d48:	8b 10                	mov    edx,DWORD PTR [eax]
c0011d4a:	68 5e a7 02 c0       	push   0xc002a75e
c0011d4f:	50                   	push   eax
c0011d50:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0011d53:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011d57:	c6 05 18 d4 02 c0 43 	mov    BYTE PTR ds:0xc002d418,0x43
c0011d5e:	c1 e2 0b             	shl    edx,0xb
c0011d61:	a3 14 d4 02 c0       	mov    ds:0xc002d414,eax
c0011d66:	89 15 10 d4 02 c0    	mov    DWORD PTR ds:0xc002d410,edx
c0011d6c:	c7 05 0c d4 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002d40c,0x8
c0011d76:	c1 ea 08             	shr    edx,0x8
c0011d79:	89 14 24             	mov    DWORD PTR [esp],edx
c0011d7c:	e8 ca da ff ff       	call   c000f84b <malloc>
c0011d81:	83 c4 0c             	add    esp,0xc
c0011d84:	89 c1                	mov    ecx,eax
c0011d86:	a3 ec e5 02 c0       	mov    ds:0xc002e5ec,eax
c0011d8b:	31 d2                	xor    edx,edx
c0011d8d:	a1 10 d4 02 c0       	mov    eax,ds:0xc002d410
c0011d92:	f7 35 0c d4 02 c0    	div    DWORD PTR ds:0xc002d40c
c0011d98:	c1 e8 05             	shr    eax,0x5
c0011d9b:	50                   	push   eax
c0011d9c:	6a 00                	push   0x0
c0011d9e:	51                   	push   ecx
c0011d9f:	e8 dc e9 fe ff       	call   c0000780 <memset>
c0011da4:	58                   	pop    eax
c0011da5:	a1 10 d4 02 c0       	mov    eax,ds:0xc002d410
c0011daa:	5a                   	pop    edx
c0011dab:	31 d2                	xor    edx,edx
c0011dad:	f7 35 0c d4 02 c0    	div    DWORD PTR ds:0xc002d40c
c0011db3:	c1 e8 05             	shr    eax,0x5
c0011db6:	50                   	push   eax
c0011db7:	68 c0 a7 02 c0       	push   0xc002a7c0
c0011dbc:	e8 02 10 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0011dc1:	83 c4 20             	add    esp,0x20
c0011dc4:	5b                   	pop    ebx
c0011dc5:	5e                   	pop    esi
c0011dc6:	5f                   	pop    edi
c0011dc7:	c3                   	ret    
c0011dc8:	83 ec 08             	sub    esp,0x8
c0011dcb:	50                   	push   eax
c0011dcc:	68 99 a7 02 c0       	push   0xc002a799
c0011dd1:	e8 ed 0f 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0011dd6:	83 c4 10             	add    esp,0x10
c0011dd9:	e9 0a ff ff ff       	jmp    c0011ce8 <Virt::setupPageSwapping(int)+0xb4>
c0011dde:	83 ec 08             	sub    esp,0x8
c0011de1:	50                   	push   eax
c0011de2:	68 75 a7 02 c0       	push   0xc002a775
c0011de7:	e8 d7 0f 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0011dec:	c7 04 24 7e a7 02 c0 	mov    DWORD PTR [esp],0xc002a77e
c0011df3:	e8 09 87 00 00       	call   c001a501 <Krnl::panic(char const*)>
c0011df8:	83 c4 10             	add    esp,0x10
c0011dfb:	e9 83 fe ff ff       	jmp    c0011c83 <Virt::setupPageSwapping(int)+0x4f>

c0011e00 <VAS::VAS()>:
c0011e00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e04:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e0f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011e16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e1a:	a3 f0 e5 02 c0       	mov    ds:0xc002e5f0,eax
c0011e1f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e23:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011e27:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e2b:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011e2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e32:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0011e39:	90                   	nop
c0011e3a:	c3                   	ret    
c0011e3b:	90                   	nop

c0011e3c <VAS::VAS(VAS*)>:
c0011e3c:	83 ec 0c             	sub    esp,0xc
c0011e3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e43:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e4e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011e55:	83 ec 0c             	sub    esp,0xc
c0011e58:	68 a4 a5 02 c0       	push   0xc002a5a4
c0011e5d:	e8 9f 86 00 00       	call   c001a501 <Krnl::panic(char const*)>
c0011e62:	83 c4 10             	add    esp,0x10
c0011e65:	90                   	nop
c0011e66:	83 c4 0c             	add    esp,0xc
c0011e69:	c3                   	ret    

c0011e6a <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011e6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e6e:	89 c2                	mov    edx,eax
c0011e70:	c1 e8 0a             	shr    eax,0xa
c0011e73:	c1 ea 16             	shr    edx,0x16
c0011e76:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011e7b:	19 c9                	sbb    ecx,ecx
c0011e7d:	c1 e2 0c             	shl    edx,0xc
c0011e80:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011e86:	25 fc 0f 00 00       	and    eax,0xffc
c0011e8b:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011e92:	01 d0                	add    eax,edx
c0011e94:	c3                   	ret    
c0011e95:	90                   	nop

c0011e96 <VAS::getPageTableEntry(unsigned long)>:
c0011e96:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011e9a:	89 ca                	mov    edx,ecx
c0011e9c:	c1 e9 0a             	shr    ecx,0xa
c0011e9f:	c1 ea 16             	shr    edx,0x16
c0011ea2:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011ea8:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011eae:	c1 e0 0c             	shl    eax,0xc
c0011eb1:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011eb4:	c3                   	ret    

c0011eb5 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011eb5:	57                   	push   edi
c0011eb6:	56                   	push   esi
c0011eb7:	be 01 00 00 00       	mov    esi,0x1
c0011ebc:	53                   	push   ebx
c0011ebd:	83 ec 10             	sub    esp,0x10
c0011ec0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011ec4:	c1 eb 0c             	shr    ebx,0xc
c0011ec7:	eb 3f                	jmp    c0011f08 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011ec9:	e8 60 fd ff ff       	call   c0011c2e <Virt::getAKernelVAS()>
c0011ece:	83 ec 08             	sub    esp,0x8
c0011ed1:	57                   	push   edi
c0011ed2:	50                   	push   eax
c0011ed3:	e8 be ff ff ff       	call   c0011e96 <VAS::getPageTableEntry(unsigned long)>
c0011ed8:	83 c4 10             	add    esp,0x10
c0011edb:	8b 00                	mov    eax,DWORD PTR [eax]
c0011edd:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011ee1:	f6 c4 04             	test   ah,0x4
c0011ee4:	75 5f                	jne    c0011f45 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011ee6:	80 fa 04             	cmp    dl,0x4
c0011ee9:	74 78                	je     c0011f63 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011eeb:	80 fa 02             	cmp    dl,0x2
c0011eee:	0f 84 88 00 00 00    	je     c0011f7c <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011ef4:	80 fa 03             	cmp    dl,0x3
c0011ef7:	0f 84 ad 00 00 00    	je     c0011faa <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011efd:	fe ca                	dec    dl
c0011eff:	0f 84 92 00 00 00    	je     c0011f97 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011f05:	43                   	inc    ebx
c0011f06:	31 f6                	xor    esi,esi
c0011f08:	53                   	push   ebx
c0011f09:	e8 bd fa ff ff       	call   c00119cb <Virt::getPageState(unsigned long)>
c0011f0e:	5f                   	pop    edi
c0011f0f:	89 df                	mov    edi,ebx
c0011f11:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011f15:	c1 e7 0c             	shl    edi,0xc
c0011f18:	84 c0                	test   al,al
c0011f1a:	75 ad                	jne    c0011ec9 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011f1c:	83 ec 0c             	sub    esp,0xc
c0011f1f:	68 db a7 02 c0       	push   0xc002a7db
c0011f24:	e8 d8 85 00 00       	call   c001a501 <Krnl::panic(char const*)>
c0011f29:	e8 00 fd ff ff       	call   c0011c2e <Virt::getAKernelVAS()>
c0011f2e:	5a                   	pop    edx
c0011f2f:	59                   	pop    ecx
c0011f30:	57                   	push   edi
c0011f31:	50                   	push   eax
c0011f32:	e8 5f ff ff ff       	call   c0011e96 <VAS::getPageTableEntry(unsigned long)>
c0011f37:	83 c4 10             	add    esp,0x10
c0011f3a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f3c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f40:	f6 c4 04             	test   ah,0x4
c0011f43:	74 c0                	je     c0011f05 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011f45:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011f49:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f4e:	83 ec 0c             	sub    esp,0xc
c0011f51:	50                   	push   eax
c0011f52:	e8 d6 de ff ff       	call   c000fe2d <Phys::freePage(unsigned long)>
c0011f57:	83 c4 10             	add    esp,0x10
c0011f5a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f5e:	80 fa 04             	cmp    dl,0x4
c0011f61:	75 88                	jne    c0011eeb <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011f63:	89 f0                	mov    eax,esi
c0011f65:	84 c0                	test   al,al
c0011f67:	75 47                	jne    c0011fb0 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011f69:	c7 44 24 20 c8 a5 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a5c8
c0011f71:	83 c4 10             	add    esp,0x10
c0011f74:	5b                   	pop    ebx
c0011f75:	5e                   	pop    esi
c0011f76:	5f                   	pop    edi
c0011f77:	e9 85 85 00 00       	jmp    c001a501 <Krnl::panic(char const*)>
c0011f7c:	89 f0                	mov    eax,esi
c0011f7e:	84 c0                	test   al,al
c0011f80:	75 15                	jne    c0011f97 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011f82:	83 ec 0c             	sub    esp,0xc
c0011f85:	68 f7 a7 02 c0       	push   0xc002a7f7
c0011f8a:	e8 72 85 00 00       	call   c001a501 <Krnl::panic(char const*)>
c0011f8f:	83 c4 10             	add    esp,0x10
c0011f92:	e9 6e ff ff ff       	jmp    c0011f05 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011f97:	83 ec 08             	sub    esp,0x8
c0011f9a:	6a 00                	push   0x0
c0011f9c:	53                   	push   ebx
c0011f9d:	e8 f4 f9 ff ff       	call   c0011996 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011fa2:	83 c4 10             	add    esp,0x10
c0011fa5:	e9 5b ff ff ff       	jmp    c0011f05 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011faa:	89 f0                	mov    eax,esi
c0011fac:	84 c0                	test   al,al
c0011fae:	75 15                	jne    c0011fc5 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011fb0:	83 ec 08             	sub    esp,0x8
c0011fb3:	6a 00                	push   0x0
c0011fb5:	53                   	push   ebx
c0011fb6:	e8 db f9 ff ff       	call   c0011996 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011fbb:	83 c4 10             	add    esp,0x10
c0011fbe:	83 c4 10             	add    esp,0x10
c0011fc1:	5b                   	pop    ebx
c0011fc2:	5e                   	pop    esi
c0011fc3:	5f                   	pop    edi
c0011fc4:	c3                   	ret    
c0011fc5:	c7 44 24 20 13 a8 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a813
c0011fcd:	83 c4 10             	add    esp,0x10
c0011fd0:	5b                   	pop    ebx
c0011fd1:	5e                   	pop    esi
c0011fd2:	5f                   	pop    edi
c0011fd3:	e9 29 85 00 00       	jmp    c001a501 <Krnl::panic(char const*)>

c0011fd8 <VAS::freeAllocatedPages(unsigned long)>:
c0011fd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011fdc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011fe0:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011fe4:	74 09                	je     c0011fef <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011fe6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011fea:	e9 c6 fe ff ff       	jmp    c0011eb5 <Virt::freeKernelVirtualPages(unsigned long)>
c0011fef:	c7 44 24 04 ec a5 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a5ec
c0011ff7:	e9 c7 0d 00 00       	jmp    c0012dc3 <Dbg::kprintf(char const*, ...)>

c0011ffc <VAS::virtualToPhysical(unsigned long)>:
c0011ffc:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012000:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012004:	e8 8d fe ff ff       	call   c0011e96 <VAS::getPageTableEntry(unsigned long)>
c0012009:	5a                   	pop    edx
c001200a:	8b 00                	mov    eax,DWORD PTR [eax]
c001200c:	59                   	pop    ecx
c001200d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012012:	c3                   	ret    
c0012013:	90                   	nop

c0012014 <VAS::reflagRange(unsigned long, int, int, int)>:
c0012014:	55                   	push   ebp
c0012015:	57                   	push   edi
c0012016:	56                   	push   esi
c0012017:	53                   	push   ebx
c0012018:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001201c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0012020:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012024:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012028:	85 db                	test   ebx,ebx
c001202a:	7e 22                	jle    c001204e <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c001202c:	c1 e3 0c             	shl    ebx,0xc
c001202f:	01 f3                	add    ebx,esi
c0012031:	56                   	push   esi
c0012032:	81 c6 00 10 00 00    	add    esi,0x1000
c0012038:	55                   	push   ebp
c0012039:	e8 58 fe ff ff       	call   c0011e96 <VAS::getPageTableEntry(unsigned long)>
c001203e:	5a                   	pop    edx
c001203f:	59                   	pop    ecx
c0012040:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012042:	21 f9                	and    ecx,edi
c0012044:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0012048:	39 f3                	cmp    ebx,esi
c001204a:	89 08                	mov    DWORD PTR [eax],ecx
c001204c:	75 e3                	jne    c0012031 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c001204e:	5b                   	pop    ebx
c001204f:	5e                   	pop    esi
c0012050:	5f                   	pop    edi
c0012051:	5d                   	pop    ebp
c0012052:	c3                   	ret    
c0012053:	90                   	nop

c0012054 <VAS::setToWriteCombining(unsigned long, int)>:
c0012054:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0012059:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001205f:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0012066:	75 01                	jne    c0012069 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0012068:	c3                   	ret    
c0012069:	68 80 00 00 00       	push   0x80
c001206e:	6a ff                	push   0xffffffff
c0012070:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012078:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001207c:	e8 93 ff ff ff       	call   c0012014 <VAS::reflagRange(unsigned long, int, int, int)>
c0012081:	83 c4 14             	add    esp,0x14
c0012084:	c3                   	ret    
c0012085:	90                   	nop

c0012086 <VAS::mapOtherVASIn(bool, VAS*)>:
c0012086:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001208b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001208f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012092:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012096:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0012099:	19 c0                	sbb    eax,eax
c001209b:	83 ca 03             	or     edx,0x3
c001209e:	83 e0 fc             	and    eax,0xfffffffc
c00120a1:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00120a8:	0f 20 d8             	mov    eax,cr3
c00120ab:	0f 22 d8             	mov    cr3,eax
c00120ae:	c3                   	ret    
c00120af:	90                   	nop

c00120b0 <VAS::~VAS()>:
c00120b0:	83 ec 2c             	sub    esp,0x2c
c00120b3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00120bb:	e8 1c bc 00 00       	call   c001dcdc <lockScheduler()>
c00120c0:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00120c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00120c7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00120ca:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00120d0:	83 ec 04             	sub    esp,0x4
c00120d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00120d7:	6a 01                	push   0x1
c00120d9:	50                   	push   eax
c00120da:	e8 a7 ff ff ff       	call   c0012086 <VAS::mapOtherVASIn(bool, VAS*)>
c00120df:	83 c4 10             	add    esp,0x10
c00120e2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00120ea:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00120f2:	0f 8f d7 00 00 00    	jg     c00121cf <VAS::~VAS()+0x11f>
c00120f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120fc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00120ff:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012103:	c1 e2 02             	shl    edx,0x2
c0012106:	01 d0                	add    eax,edx
c0012108:	8b 00                	mov    eax,DWORD PTR [eax]
c001210a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001210e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012112:	83 e0 01             	and    eax,0x1
c0012115:	0f 84 ab 00 00 00    	je     c00121c6 <VAS::~VAS()+0x116>
c001211b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012123:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c001212b:	7f 75                	jg     c00121a2 <VAS::~VAS()+0xf2>
c001212d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012131:	c1 e0 0a             	shl    eax,0xa
c0012134:	89 c2                	mov    edx,eax
c0012136:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001213a:	01 d0                	add    eax,edx
c001213c:	c1 e0 0c             	shl    eax,0xc
c001213f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012143:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012148:	8b 00                	mov    eax,DWORD PTR [eax]
c001214a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001214d:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0012153:	83 ec 04             	sub    esp,0x4
c0012156:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001215a:	6a 01                	push   0x1
c001215c:	50                   	push   eax
c001215d:	e8 08 fd ff ff       	call   c0011e6a <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0012162:	83 c4 10             	add    esp,0x10
c0012165:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012169:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001216d:	8b 00                	mov    eax,DWORD PTR [eax]
c001216f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012173:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012177:	25 01 04 00 00       	and    eax,0x401
c001217c:	3d 01 04 00 00       	cmp    eax,0x401
c0012181:	75 19                	jne    c001219c <VAS::~VAS()+0xec>
c0012183:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012187:	25 00 f0 ff ff       	and    eax,0xfffff000
c001218c:	83 ec 0c             	sub    esp,0xc
c001218f:	50                   	push   eax
c0012190:	e8 98 dc ff ff       	call   c000fe2d <Phys::freePage(unsigned long)>
c0012195:	83 c4 10             	add    esp,0x10
c0012198:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001219c:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00121a0:	eb 81                	jmp    c0012123 <VAS::~VAS()+0x73>
c00121a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121a6:	25 00 04 00 00       	and    eax,0x400
c00121ab:	74 19                	je     c00121c6 <VAS::~VAS()+0x116>
c00121ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121b1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00121b6:	83 ec 0c             	sub    esp,0xc
c00121b9:	50                   	push   eax
c00121ba:	e8 6e dc ff ff       	call   c000fe2d <Phys::freePage(unsigned long)>
c00121bf:	83 c4 10             	add    esp,0x10
c00121c2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00121c6:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00121ca:	e9 1b ff ff ff       	jmp    c00120ea <VAS::~VAS()+0x3a>
c00121cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121d3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00121d6:	83 ec 0c             	sub    esp,0xc
c00121d9:	50                   	push   eax
c00121da:	e8 d6 fc ff ff       	call   c0011eb5 <Virt::freeKernelVirtualPages(unsigned long)>
c00121df:	83 c4 10             	add    esp,0x10
c00121e2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121e6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00121e9:	83 ec 0c             	sub    esp,0xc
c00121ec:	50                   	push   eax
c00121ed:	e8 3b dc ff ff       	call   c000fe2d <Phys::freePage(unsigned long)>
c00121f2:	83 c4 10             	add    esp,0x10
c00121f5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00121f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00121fd:	c1 e0 02             	shl    eax,0x2
c0012200:	83 ec 08             	sub    esp,0x8
c0012203:	50                   	push   eax
c0012204:	68 10 a6 02 c0       	push   0xc002a610
c0012209:	e8 b5 0b 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001220e:	83 c4 10             	add    esp,0x10
c0012211:	e8 c8 ba 00 00       	call   c001dcde <unlockScheduler()>
c0012216:	90                   	nop
c0012217:	83 c4 2c             	add    esp,0x2c
c001221a:	c3                   	ret    
c001221b:	90                   	nop

c001221c <VAS::mapPage(unsigned long, unsigned long, int)>:
c001221c:	55                   	push   ebp
c001221d:	57                   	push   edi
c001221e:	56                   	push   esi
c001221f:	53                   	push   ebx
c0012220:	83 ec 1c             	sub    esp,0x1c
c0012223:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012227:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001222b:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0012231:	77 08                	ja     c001223b <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0012233:	0f 20 d8             	mov    eax,cr3
c0012236:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0012239:	75 47                	jne    c0012282 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c001223b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001223f:	09 d8                	or     eax,ebx
c0012241:	a9 ff 0f 00 00       	test   eax,0xfff
c0012246:	75 57                	jne    c001229f <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0012248:	89 de                	mov    esi,ebx
c001224a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001224d:	c1 ee 16             	shr    esi,0x16
c0012250:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0012257:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c001225b:	74 54                	je     c00122b1 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c001225d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012261:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0012267:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001226b:	c1 e6 0c             	shl    esi,0xc
c001226e:	c1 eb 0a             	shr    ebx,0xa
c0012271:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0012277:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c001227a:	83 c4 1c             	add    esp,0x1c
c001227d:	5b                   	pop    ebx
c001227e:	5e                   	pop    esi
c001227f:	5f                   	pop    edi
c0012280:	5d                   	pop    ebp
c0012281:	c3                   	ret    
c0012282:	83 ec 0c             	sub    esp,0xc
c0012285:	68 30 a6 02 c0       	push   0xc002a630
c001228a:	e8 34 0b 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001228f:	83 c4 10             	add    esp,0x10
c0012292:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012296:	09 d8                	or     eax,ebx
c0012298:	a9 ff 0f 00 00       	test   eax,0xfff
c001229d:	74 a9                	je     c0012248 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c001229f:	83 ec 0c             	sub    esp,0xc
c00122a2:	68 98 a6 02 c0       	push   0xc002a698
c00122a7:	e8 55 82 00 00       	call   c001a501 <Krnl::panic(char const*)>
c00122ac:	83 c4 10             	add    esp,0x10
c00122af:	eb 97                	jmp    c0012248 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00122b1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00122b5:	e8 fd db ff ff       	call   c000feb7 <Phys::allocatePage()>
c00122ba:	89 c5                	mov    ebp,eax
c00122bc:	e8 6d f9 ff ff       	call   c0011c2e <Virt::getAKernelVAS()>
c00122c1:	83 ec 0c             	sub    esp,0xc
c00122c4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00122c8:	6a 01                	push   0x1
c00122ca:	e8 20 f7 ff ff       	call   c00119ef <Virt::allocateKernelVirtualPages(int)>
c00122cf:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00122d6:	6a 01                	push   0x1
c00122d8:	50                   	push   eax
c00122d9:	55                   	push   ebp
c00122da:	81 cd 07 04 00 00    	or     ebp,0x407
c00122e0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00122e4:	51                   	push   ecx
c00122e5:	e8 26 02 00 00       	call   c0012510 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00122ea:	83 c4 1c             	add    esp,0x1c
c00122ed:	68 00 10 00 00       	push   0x1000
c00122f2:	6a 00                	push   0x0
c00122f4:	50                   	push   eax
c00122f5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00122f9:	e8 82 e4 fe ff       	call   c0000780 <memset>
c00122fe:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012302:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012305:	e8 ab fb ff ff       	call   c0011eb5 <Virt::freeKernelVirtualPages(unsigned long)>
c001230a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001230e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012311:	83 c4 10             	add    esp,0x10
c0012314:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0012317:	e9 41 ff ff ff       	jmp    c001225d <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c001231c <VAS::allocatePages(int, int)>:
c001231c:	55                   	push   ebp
c001231d:	57                   	push   edi
c001231e:	56                   	push   esi
c001231f:	53                   	push   ebx
c0012320:	83 ec 1c             	sub    esp,0x1c
c0012323:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012327:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c001232c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012332:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012338:	83 e0 01             	and    eax,0x1
c001233b:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c001233f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012343:	0f 85 cc 00 00 00    	jne    c0012415 <VAS::allocatePages(int, int)+0xf9>
c0012349:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001234c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012350:	85 c0                	test   eax,eax
c0012352:	0f 84 a1 00 00 00    	je     c00123f9 <VAS::allocatePages(int, int)+0xdd>
c0012358:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001235c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012360:	c1 e6 0c             	shl    esi,0xc
c0012363:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0012367:	85 c0                	test   eax,eax
c0012369:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c001236c:	7e 33                	jle    c00123a1 <VAS::allocatePages(int, int)+0x85>
c001236e:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0012372:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012376:	81 cd 00 04 00 00    	or     ebp,0x400
c001237c:	e8 36 db ff ff       	call   c000feb7 <Phys::allocatePage()>
c0012381:	55                   	push   ebp
c0012382:	53                   	push   ebx
c0012383:	50                   	push   eax
c0012384:	57                   	push   edi
c0012385:	e8 92 fe ff ff       	call   c001221c <VAS::mapPage(unsigned long, unsigned long, int)>
c001238a:	83 c4 10             	add    esp,0x10
c001238d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012392:	74 03                	je     c0012397 <VAS::allocatePages(int, int)+0x7b>
c0012394:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012397:	81 c3 00 10 00 00    	add    ebx,0x1000
c001239d:	39 de                	cmp    esi,ebx
c001239f:	75 db                	jne    c001237c <VAS::allocatePages(int, int)+0x60>
c00123a1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00123a6:	75 12                	jne    c00123ba <VAS::allocatePages(int, int)+0x9e>
c00123a8:	0f 20 d8             	mov    eax,cr3
c00123ab:	0f 22 d8             	mov    cr3,eax
c00123ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00123b2:	83 c4 1c             	add    esp,0x1c
c00123b5:	5b                   	pop    ebx
c00123b6:	5e                   	pop    esi
c00123b7:	5f                   	pop    edi
c00123b8:	5d                   	pop    ebp
c00123b9:	c3                   	ret    
c00123ba:	c1 ee 0a             	shr    esi,0xa
c00123bd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00123c1:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c00123c7:	c1 eb 0a             	shr    ebx,0xa
c00123ca:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c00123d0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00123d6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00123dc:	39 c3                	cmp    ebx,eax
c00123de:	77 ce                	ja     c00123ae <VAS::allocatePages(int, int)+0x92>
c00123e0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00123e3:	81 c3 00 10 00 00    	add    ebx,0x1000
c00123e9:	39 d8                	cmp    eax,ebx
c00123eb:	73 f3                	jae    c00123e0 <VAS::allocatePages(int, int)+0xc4>
c00123ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00123f1:	83 c4 1c             	add    esp,0x1c
c00123f4:	5b                   	pop    ebx
c00123f5:	5e                   	pop    esi
c00123f6:	5f                   	pop    edi
c00123f7:	5d                   	pop    ebp
c00123f8:	c3                   	ret    
c00123f9:	83 ec 0c             	sub    esp,0xc
c00123fc:	68 bc a6 02 c0       	push   0xc002a6bc
c0012401:	e8 fb 80 00 00       	call   c001a501 <Krnl::panic(char const*)>
c0012406:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012409:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001240d:	83 c4 10             	add    esp,0x10
c0012410:	e9 43 ff ff ff       	jmp    c0012358 <VAS::allocatePages(int, int)+0x3c>
c0012415:	83 ec 0c             	sub    esp,0xc
c0012418:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001241c:	e8 ce f5 ff ff       	call   c00119ef <Virt::allocateKernelVirtualPages(int)>
c0012421:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012425:	83 c4 10             	add    esp,0x10
c0012428:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c001242d:	0f 87 9b 00 00 00    	ja     c00124ce <VAS::allocatePages(int, int)+0x1b2>
c0012433:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012437:	85 d2                	test   edx,edx
c0012439:	7e 3c                	jle    c0012477 <VAS::allocatePages(int, int)+0x15b>
c001243b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001243f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012443:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012447:	c1 e5 0c             	shl    ebp,0xc
c001244a:	81 ce 00 04 00 00    	or     esi,0x400
c0012450:	01 dd                	add    ebp,ebx
c0012452:	e8 60 da ff ff       	call   c000feb7 <Phys::allocatePage()>
c0012457:	56                   	push   esi
c0012458:	53                   	push   ebx
c0012459:	50                   	push   eax
c001245a:	57                   	push   edi
c001245b:	e8 bc fd ff ff       	call   c001221c <VAS::mapPage(unsigned long, unsigned long, int)>
c0012460:	83 c4 10             	add    esp,0x10
c0012463:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012468:	74 03                	je     c001246d <VAS::allocatePages(int, int)+0x151>
c001246a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001246d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012473:	39 dd                	cmp    ebp,ebx
c0012475:	75 db                	jne    c0012452 <VAS::allocatePages(int, int)+0x136>
c0012477:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001247c:	0f 84 26 ff ff ff    	je     c00123a8 <VAS::allocatePages(int, int)+0x8c>
c0012482:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012486:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001248a:	89 d3                	mov    ebx,edx
c001248c:	c1 e0 0c             	shl    eax,0xc
c001248f:	c1 eb 0a             	shr    ebx,0xa
c0012492:	01 d0                	add    eax,edx
c0012494:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001249a:	c1 e8 0a             	shr    eax,0xa
c001249d:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00124a3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00124a8:	2d 00 00 40 00       	sub    eax,0x400000
c00124ad:	39 c3                	cmp    ebx,eax
c00124af:	0f 87 f9 fe ff ff    	ja     c00123ae <VAS::allocatePages(int, int)+0x92>
c00124b5:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124b8:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124be:	39 d8                	cmp    eax,ebx
c00124c0:	73 f3                	jae    c00124b5 <VAS::allocatePages(int, int)+0x199>
c00124c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00124c6:	83 c4 1c             	add    esp,0x1c
c00124c9:	5b                   	pop    ebx
c00124ca:	5e                   	pop    esi
c00124cb:	5f                   	pop    edi
c00124cc:	5d                   	pop    ebp
c00124cd:	c3                   	ret    
c00124ce:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c00124d3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00124d9:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c00124e0:	0f 84 4d ff ff ff    	je     c0012433 <VAS::allocatePages(int, int)+0x117>
c00124e6:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c00124ee:	e9 40 ff ff ff       	jmp    c0012433 <VAS::allocatePages(int, int)+0x117>
c00124f3:	90                   	nop

c00124f4 <VAS::setCPUSpecific(unsigned long)>:
c00124f4:	83 ec 0c             	sub    esp,0xc
c00124f7:	6a 05                	push   0x5
c00124f9:	68 00 00 40 c2       	push   0xc2400000
c00124fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012502:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012506:	e8 11 fd ff ff       	call   c001221c <VAS::mapPage(unsigned long, unsigned long, int)>
c001250b:	83 c4 1c             	add    esp,0x1c
c001250e:	c3                   	ret    
c001250f:	90                   	nop

c0012510 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0012510:	55                   	push   ebp
c0012511:	57                   	push   edi
c0012512:	56                   	push   esi
c0012513:	53                   	push   ebx
c0012514:	83 ec 1c             	sub    esp,0x1c
c0012517:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c001251c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012520:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012526:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001252a:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012530:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012534:	83 e0 01             	and    eax,0x1
c0012537:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001253b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001253f:	85 c0                	test   eax,eax
c0012541:	7e 39                	jle    c001257c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0012543:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012547:	89 f3                	mov    ebx,esi
c0012549:	c1 e0 0c             	shl    eax,0xc
c001254c:	01 f0                	add    eax,esi
c001254e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012552:	55                   	push   ebp
c0012553:	53                   	push   ebx
c0012554:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012558:	29 f0                	sub    eax,esi
c001255a:	01 d8                	add    eax,ebx
c001255c:	50                   	push   eax
c001255d:	57                   	push   edi
c001255e:	e8 b9 fc ff ff       	call   c001221c <VAS::mapPage(unsigned long, unsigned long, int)>
c0012563:	83 c4 10             	add    esp,0x10
c0012566:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001256b:	74 03                	je     c0012570 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c001256d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012570:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012576:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001257a:	75 d6                	jne    c0012552 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c001257c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012581:	75 10                	jne    c0012593 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0012583:	0f 20 d8             	mov    eax,cr3
c0012586:	0f 22 d8             	mov    cr3,eax
c0012589:	83 c4 1c             	add    esp,0x1c
c001258c:	89 f0                	mov    eax,esi
c001258e:	5b                   	pop    ebx
c001258f:	5e                   	pop    esi
c0012590:	5f                   	pop    edi
c0012591:	5d                   	pop    ebp
c0012592:	c3                   	ret    
c0012593:	89 f3                	mov    ebx,esi
c0012595:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012599:	c1 eb 0a             	shr    ebx,0xa
c001259c:	c1 e0 0c             	shl    eax,0xc
c001259f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00125a5:	01 f0                	add    eax,esi
c00125a7:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00125ad:	c1 e8 0a             	shr    eax,0xa
c00125b0:	25 00 f0 ff ff       	and    eax,0xfffff000
c00125b5:	2d 00 00 40 00       	sub    eax,0x400000
c00125ba:	39 c3                	cmp    ebx,eax
c00125bc:	77 cb                	ja     c0012589 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c00125be:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125c1:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125c7:	39 d8                	cmp    eax,ebx
c00125c9:	73 f3                	jae    c00125be <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c00125cb:	83 c4 1c             	add    esp,0x1c
c00125ce:	89 f0                	mov    eax,esi
c00125d0:	5b                   	pop    ebx
c00125d1:	5e                   	pop    esi
c00125d2:	5f                   	pop    edi
c00125d3:	5d                   	pop    ebp
c00125d4:	c3                   	ret    
c00125d5:	90                   	nop

c00125d6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00125d6:	55                   	push   ebp
c00125d7:	57                   	push   edi
c00125d8:	56                   	push   esi
c00125d9:	53                   	push   ebx
c00125da:	83 ec 1c             	sub    esp,0x1c
c00125dd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00125e1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00125e5:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c00125e9:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00125ed:	a9 ff 0f 00 00       	test   eax,0xfff
c00125f2:	75 4a                	jne    c001263e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c00125f4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00125f8:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00125fb:	c1 eb 16             	shr    ebx,0x16
c00125fe:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012605:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0012609:	74 4d                	je     c0012658 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c001260b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001260f:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012613:	c1 e8 0a             	shr    eax,0xa
c0012616:	80 fa 01             	cmp    dl,0x1
c0012619:	19 d2                	sbb    edx,edx
c001261b:	c1 e3 0c             	shl    ebx,0xc
c001261e:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012622:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012628:	25 fc 0f 00 00       	and    eax,0xffc
c001262d:	01 d8                	add    eax,ebx
c001262f:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012636:	83 c4 1c             	add    esp,0x1c
c0012639:	5b                   	pop    ebx
c001263a:	5e                   	pop    esi
c001263b:	5f                   	pop    edi
c001263c:	5d                   	pop    ebp
c001263d:	c3                   	ret    
c001263e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012642:	83 ec 0c             	sub    esp,0xc
c0012645:	68 e8 a6 02 c0       	push   0xc002a6e8
c001264a:	e8 b2 7e 00 00       	call   c001a501 <Krnl::panic(char const*)>
c001264f:	83 c4 10             	add    esp,0x10
c0012652:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012656:	eb 9c                	jmp    c00125f4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0012658:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001265c:	e8 56 d8 ff ff       	call   c000feb7 <Phys::allocatePage()>
c0012661:	89 c5                	mov    ebp,eax
c0012663:	e8 c6 f5 ff ff       	call   c0011c2e <Virt::getAKernelVAS()>
c0012668:	83 ec 0c             	sub    esp,0xc
c001266b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001266f:	6a 01                	push   0x1
c0012671:	e8 79 f3 ff ff       	call   c00119ef <Virt::allocateKernelVirtualPages(int)>
c0012676:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001267d:	6a 01                	push   0x1
c001267f:	50                   	push   eax
c0012680:	55                   	push   ebp
c0012681:	81 cd 07 04 00 00    	or     ebp,0x407
c0012687:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001268b:	51                   	push   ecx
c001268c:	e8 7f fe ff ff       	call   c0012510 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012691:	83 c4 1c             	add    esp,0x1c
c0012694:	68 00 10 00 00       	push   0x1000
c0012699:	6a 00                	push   0x0
c001269b:	50                   	push   eax
c001269c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00126a0:	e8 db e0 fe ff       	call   c0000780 <memset>
c00126a5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00126a9:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00126ac:	e8 04 f8 ff ff       	call   c0011eb5 <Virt::freeKernelVirtualPages(unsigned long)>
c00126b1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00126b4:	83 c4 10             	add    esp,0x10
c00126b7:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c00126ba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00126be:	e9 48 ff ff ff       	jmp    c001260b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c00126c3:	90                   	nop

c00126c4 <VAS::VAS(bool)>:
c00126c4:	53                   	push   ebx
c00126c5:	83 ec 28             	sub    esp,0x28
c00126c8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00126cc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00126d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126d4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00126db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126df:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00126e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126ea:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00126ee:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00126f1:	e8 c1 d7 ff ff       	call   c000feb7 <Phys::allocatePage()>
c00126f6:	89 c2                	mov    edx,eax
c00126f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126fc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00126ff:	e8 2a f5 ff ff       	call   c0011c2e <Virt::getAKernelVAS()>
c0012704:	89 c3                	mov    ebx,eax
c0012706:	83 ec 0c             	sub    esp,0xc
c0012709:	6a 01                	push   0x1
c001270b:	e8 df f2 ff ff       	call   c00119ef <Virt::allocateKernelVirtualPages(int)>
c0012710:	83 c4 10             	add    esp,0x10
c0012713:	89 c2                	mov    edx,eax
c0012715:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012719:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001271c:	83 ec 0c             	sub    esp,0xc
c001271f:	6a 03                	push   0x3
c0012721:	6a 01                	push   0x1
c0012723:	52                   	push   edx
c0012724:	50                   	push   eax
c0012725:	53                   	push   ebx
c0012726:	e8 e5 fd ff ff       	call   c0012510 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001272b:	83 c4 20             	add    esp,0x20
c001272e:	89 c2                	mov    edx,eax
c0012730:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012734:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012737:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001273f:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012747:	7f 1c                	jg     c0012765 <VAS::VAS(bool)+0xa1>
c0012749:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001274d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012750:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012754:	c1 e2 02             	shl    edx,0x2
c0012757:	01 d0                	add    eax,edx
c0012759:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001275f:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012763:	eb da                	jmp    c001273f <VAS::VAS(bool)+0x7b>
c0012765:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c001276d:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0012775:	7f 7a                	jg     c00127f1 <VAS::VAS(bool)+0x12d>
c0012777:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001277b:	2d 00 02 00 00       	sub    eax,0x200
c0012780:	c1 e0 0c             	shl    eax,0xc
c0012783:	83 c8 03             	or     eax,0x3
c0012786:	89 c2                	mov    edx,eax
c0012788:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c001278d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012793:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012799:	83 e0 10             	and    eax,0x10
c001279c:	84 c0                	test   al,al
c001279e:	74 07                	je     c00127a7 <VAS::VAS(bool)+0xe3>
c00127a0:	b8 00 01 00 00       	mov    eax,0x100
c00127a5:	eb 05                	jmp    c00127ac <VAS::VAS(bool)+0xe8>
c00127a7:	b8 00 00 00 00       	mov    eax,0x0
c00127ac:	09 d0                	or     eax,edx
c00127ae:	89 c1                	mov    ecx,eax
c00127b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127b4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00127b7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00127bb:	c1 e2 02             	shl    edx,0x2
c00127be:	01 d0                	add    eax,edx
c00127c0:	89 ca                	mov    edx,ecx
c00127c2:	89 10                	mov    DWORD PTR [eax],edx
c00127c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00127c8:	2d 40 03 00 00       	sub    eax,0x340
c00127cd:	83 f8 7f             	cmp    eax,0x7f
c00127d0:	77 16                	ja     c00127e8 <VAS::VAS(bool)+0x124>
c00127d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127d6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00127d9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00127dd:	c1 e2 02             	shl    edx,0x2
c00127e0:	01 d0                	add    eax,edx
c00127e2:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00127e8:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00127ec:	e9 7c ff ff ff       	jmp    c001276d <VAS::VAS(bool)+0xa9>
c00127f1:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c00127f6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00127fc:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012802:	83 e0 10             	and    eax,0x10
c0012805:	84 c0                	test   al,al
c0012807:	74 07                	je     c0012810 <VAS::VAS(bool)+0x14c>
c0012809:	b8 03 41 00 00       	mov    eax,0x4103
c001280e:	eb 05                	jmp    c0012815 <VAS::VAS(bool)+0x151>
c0012810:	b8 03 40 00 00       	mov    eax,0x4003
c0012815:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012819:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c001281c:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012822:	89 02                	mov    DWORD PTR [edx],eax
c0012824:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0012829:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001282f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012835:	83 ec 08             	sub    esp,0x8
c0012838:	50                   	push   eax
c0012839:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001283d:	e8 b2 fc ff ff       	call   c00124f4 <VAS::setCPUSpecific(unsigned long)>
c0012842:	83 c4 10             	add    esp,0x10
c0012845:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012849:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001284c:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0012851:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012857:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001285d:	83 e0 10             	and    eax,0x10
c0012860:	84 c0                	test   al,al
c0012862:	74 07                	je     c001286b <VAS::VAS(bool)+0x1a7>
c0012864:	b8 00 01 00 00       	mov    eax,0x100
c0012869:	eb 05                	jmp    c0012870 <VAS::VAS(bool)+0x1ac>
c001286b:	b8 00 00 00 00       	mov    eax,0x0
c0012870:	09 c2                	or     edx,eax
c0012872:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012876:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012879:	05 fc 0f 00 00       	add    eax,0xffc
c001287e:	83 ca 03             	or     edx,0x3
c0012881:	89 10                	mov    DWORD PTR [eax],edx
c0012883:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0012888:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001288e:	83 ec 0c             	sub    esp,0xc
c0012891:	50                   	push   eax
c0012892:	e8 45 1c 00 00       	call   c00144dc <Device::getName()>
c0012897:	83 c4 10             	add    esp,0x10
c001289a:	83 ec 08             	sub    esp,0x8
c001289d:	68 2d a8 02 c0       	push   0xc002a82d
c00128a2:	50                   	push   eax
c00128a3:	e8 20 e0 fe ff       	call   c00008c8 <strcmp>
c00128a8:	83 c4 10             	add    esp,0x10
c00128ab:	85 c0                	test   eax,eax
c00128ad:	0f 94 c0             	sete   al
c00128b0:	84 c0                	test   al,al
c00128b2:	74 70                	je     c0012924 <VAS::VAS(bool)+0x260>
c00128b4:	e8 06 b4 00 00       	call   c001dcbf <disableIRQs()>
c00128b9:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c00128be:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128c4:	05 7c 09 00 00       	add    eax,0x97c
c00128c9:	83 ec 0c             	sub    esp,0xc
c00128cc:	50                   	push   eax
c00128cd:	e8 f2 c9 ff ff       	call   c000f2c4 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00128d2:	83 c4 10             	add    esp,0x10
c00128d5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00128da:	89 c3                	mov    ebx,eax
c00128dc:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c00128e1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128e7:	05 7c 09 00 00       	add    eax,0x97c
c00128ec:	83 ec 0c             	sub    esp,0xc
c00128ef:	50                   	push   eax
c00128f0:	e8 cf c9 ff ff       	call   c000f2c4 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00128f5:	83 c4 10             	add    esp,0x10
c00128f8:	83 ec 08             	sub    esp,0x8
c00128fb:	50                   	push   eax
c00128fc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012900:	e8 91 f5 ff ff       	call   c0011e96 <VAS::getPageTableEntry(unsigned long)>
c0012905:	83 c4 10             	add    esp,0x10
c0012908:	8b 00                	mov    eax,DWORD PTR [eax]
c001290a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001290f:	6a 11                	push   0x11
c0012911:	53                   	push   ebx
c0012912:	50                   	push   eax
c0012913:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012917:	e8 00 f9 ff ff       	call   c001221c <VAS::mapPage(unsigned long, unsigned long, int)>
c001291c:	83 c4 10             	add    esp,0x10
c001291f:	e8 a9 b3 00 00       	call   c001dccd <enableIRQs()>
c0012924:	90                   	nop
c0012925:	83 c4 28             	add    esp,0x28
c0012928:	5b                   	pop    ebx
c0012929:	c3                   	ret    

c001292a <VAS::evict(unsigned long)>:
c001292a:	55                   	push   ebp
c001292b:	57                   	push   edi
c001292c:	56                   	push   esi
c001292d:	53                   	push   ebx
c001292e:	83 ec 1c             	sub    esp,0x1c
c0012931:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012935:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012939:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001293d:	e8 ee f1 ff ff       	call   c0011b30 <Virt::allocateSwapfilePage()>
c0012942:	89 c7                	mov    edi,eax
c0012944:	a1 0c d4 02 c0       	mov    eax,ds:0xc002d40c
c0012949:	85 c0                	test   eax,eax
c001294b:	7e 3d                	jle    c001298a <VAS::evict(unsigned long)+0x60>
c001294d:	89 ee                	mov    esi,ebp
c001294f:	31 db                	xor    ebx,ebx
c0012951:	83 ec 0c             	sub    esp,0xc
c0012954:	57                   	push   edi
c0012955:	e8 c4 f1 ff ff       	call   c0011b1e <Virt::swapIDToSector(unsigned long)>
c001295a:	89 34 24             	mov    DWORD PTR [esp],esi
c001295d:	01 d8                	add    eax,ebx
c001295f:	6a 01                	push   0x1
c0012961:	31 d2                	xor    edx,edx
c0012963:	43                   	inc    ebx
c0012964:	52                   	push   edx
c0012965:	81 c6 00 02 00 00    	add    esi,0x200
c001296b:	50                   	push   eax
c001296c:	0f be 05 18 d4 02 c0 	movsx  eax,BYTE PTR ds:0xc002d418
c0012973:	ff 34 85 7c e9 02 c0 	push   DWORD PTR [eax*4-0x3ffd1684]
c001297a:	e8 41 3d 00 00       	call   c00166c0 <LogicalDisk::write(unsigned long long, int, void*)>
c001297f:	83 c4 20             	add    esp,0x20
c0012982:	39 1d 0c d4 02 c0    	cmp    DWORD PTR ds:0xc002d40c,ebx
c0012988:	7f c7                	jg     c0012951 <VAS::evict(unsigned long)+0x27>
c001298a:	83 ec 08             	sub    esp,0x8
c001298d:	c1 e7 0b             	shl    edi,0xb
c0012990:	55                   	push   ebp
c0012991:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012995:	e8 fc f4 ff ff       	call   c0011e96 <VAS::getPageTableEntry(unsigned long)>
c001299a:	83 c4 0c             	add    esp,0xc
c001299d:	8b 10                	mov    edx,DWORD PTR [eax]
c001299f:	81 e2 fe 07 00 00    	and    edx,0x7fe
c00129a5:	09 d7                	or     edi,edx
c00129a7:	89 38                	mov    DWORD PTR [eax],edi
c00129a9:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c00129ae:	40                   	inc    eax
c00129af:	a3 e8 e5 02 c0       	mov    ds:0xc002e5e8,eax
c00129b4:	0f 20 da             	mov    edx,cr3
c00129b7:	0f 22 da             	mov    cr3,edx
c00129ba:	50                   	push   eax
c00129bb:	55                   	push   ebp
c00129bc:	68 3b a8 02 c0       	push   0xc002a83b
c00129c1:	e8 fd 03 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00129c6:	a1 e4 e5 02 c0       	mov    eax,ds:0xc002e5e4
c00129cb:	c7 44 24 40 50 a8 02 c0 	mov    DWORD PTR [esp+0x40],0xc002a850
c00129d3:	8d 50 01             	lea    edx,[eax+0x1]
c00129d6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00129da:	89 15 e4 e5 02 c0    	mov    DWORD PTR ds:0xc002e5e4,edx
c00129e0:	83 c4 2c             	add    esp,0x2c
c00129e3:	5b                   	pop    ebx
c00129e4:	5e                   	pop    esi
c00129e5:	5f                   	pop    edi
c00129e6:	5d                   	pop    ebp
c00129e7:	e9 d7 03 00 00       	jmp    c0012dc3 <Dbg::kprintf(char const*, ...)>

c00129ec <VAS::tryLoadBackOffDisk(unsigned long)>:
c00129ec:	55                   	push   ebp
c00129ed:	57                   	push   edi
c00129ee:	56                   	push   esi
c00129ef:	53                   	push   ebx
c00129f0:	83 ec 0c             	sub    esp,0xc
c00129f3:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00129f7:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c00129fd:	0f 84 d1 00 00 00    	je     c0012ad4 <VAS::tryLoadBackOffDisk(unsigned long)+0xe8>
c0012a03:	56                   	push   esi
c0012a04:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012a08:	e8 89 f4 ff ff       	call   c0011e96 <VAS::getPageTableEntry(unsigned long)>
c0012a0d:	5b                   	pop    ebx
c0012a0e:	85 c0                	test   eax,eax
c0012a10:	5f                   	pop    edi
c0012a11:	89 c3                	mov    ebx,eax
c0012a13:	0f 84 bb 00 00 00    	je     c0012ad4 <VAS::tryLoadBackOffDisk(unsigned long)+0xe8>
c0012a19:	8b 38                	mov    edi,DWORD PTR [eax]
c0012a1b:	31 c0                	xor    eax,eax
c0012a1d:	89 fa                	mov    edx,edi
c0012a1f:	81 e2 01 04 00 00    	and    edx,0x401
c0012a25:	81 fa 00 04 00 00    	cmp    edx,0x400
c0012a2b:	0f 85 a5 00 00 00    	jne    c0012ad6 <VAS::tryLoadBackOffDisk(unsigned long)+0xea>
c0012a31:	e8 81 d4 ff ff       	call   c000feb7 <Phys::allocatePage()>
c0012a36:	c1 ef 0b             	shr    edi,0xb
c0012a39:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012a3b:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012a41:	09 c2                	or     edx,eax
c0012a43:	81 ca 01 08 00 00    	or     edx,0x801
c0012a49:	89 13                	mov    DWORD PTR [ebx],edx
c0012a4b:	8b 0d 0c d4 02 c0    	mov    ecx,DWORD PTR ds:0xc002d40c
c0012a51:	85 c9                	test   ecx,ecx
c0012a53:	7e 3d                	jle    c0012a92 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c0012a55:	89 f5                	mov    ebp,esi
c0012a57:	31 db                	xor    ebx,ebx
c0012a59:	83 ec 0c             	sub    esp,0xc
c0012a5c:	57                   	push   edi
c0012a5d:	e8 bc f0 ff ff       	call   c0011b1e <Virt::swapIDToSector(unsigned long)>
c0012a62:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012a65:	01 d8                	add    eax,ebx
c0012a67:	6a 01                	push   0x1
c0012a69:	31 d2                	xor    edx,edx
c0012a6b:	43                   	inc    ebx
c0012a6c:	52                   	push   edx
c0012a6d:	81 c5 00 02 00 00    	add    ebp,0x200
c0012a73:	50                   	push   eax
c0012a74:	0f be 05 18 d4 02 c0 	movsx  eax,BYTE PTR ds:0xc002d418
c0012a7b:	ff 34 85 7c e9 02 c0 	push   DWORD PTR [eax*4-0x3ffd1684]
c0012a82:	e8 cd 3b 00 00       	call   c0016654 <LogicalDisk::read(unsigned long long, int, void*)>
c0012a87:	83 c4 20             	add    esp,0x20
c0012a8a:	39 1d 0c d4 02 c0    	cmp    DWORD PTR ds:0xc002d40c,ebx
c0012a90:	7f c7                	jg     c0012a59 <VAS::tryLoadBackOffDisk(unsigned long)+0x6d>
c0012a92:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0012a97:	48                   	dec    eax
c0012a98:	52                   	push   edx
c0012a99:	a3 e8 e5 02 c0       	mov    ds:0xc002e5e8,eax
c0012a9e:	50                   	push   eax
c0012a9f:	56                   	push   esi
c0012aa0:	68 61 a8 02 c0       	push   0xc002a861
c0012aa5:	e8 19 03 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0012aaa:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012aad:	e8 4e f0 ff ff       	call   c0011b00 <Virt::freeSwapfilePage(unsigned long)>
c0012ab2:	e8 27 b2 00 00       	call   c001dcde <unlockScheduler()>
c0012ab7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012abb:	83 c4 10             	add    esp,0x10
c0012abe:	25 ff 0f 00 00       	and    eax,0xfff
c0012ac3:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012ac8:	77 14                	ja     c0012ade <VAS::tryLoadBackOffDisk(unsigned long)+0xf2>
c0012aca:	0f 20 d8             	mov    eax,cr3
c0012acd:	0f 22 d8             	mov    cr3,eax
c0012ad0:	b0 01                	mov    al,0x1
c0012ad2:	eb 02                	jmp    c0012ad6 <VAS::tryLoadBackOffDisk(unsigned long)+0xea>
c0012ad4:	31 c0                	xor    eax,eax
c0012ad6:	83 c4 0c             	add    esp,0xc
c0012ad9:	5b                   	pop    ebx
c0012ada:	5e                   	pop    esi
c0012adb:	5f                   	pop    edi
c0012adc:	5d                   	pop    ebp
c0012add:	c3                   	ret    
c0012ade:	83 ec 0c             	sub    esp,0xc
c0012ae1:	68 76 a8 02 c0       	push   0xc002a876
c0012ae6:	e8 d8 02 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0012aeb:	83 c4 10             	add    esp,0x10
c0012aee:	eb da                	jmp    c0012aca <VAS::tryLoadBackOffDisk(unsigned long)+0xde>

c0012af0 <VAS::scanForEviction()>:
c0012af0:	57                   	push   edi
c0012af1:	56                   	push   esi
c0012af2:	53                   	push   ebx
c0012af3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012af7:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012afa:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012b00:	75 0e                	jne    c0012b10 <VAS::scanForEviction()+0x20>
c0012b02:	89 da                	mov    edx,ebx
c0012b04:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012b07:	c1 ea 16             	shr    edx,0x16
c0012b0a:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012b0e:	74 48                	je     c0012b58 <VAS::scanForEviction()+0x68>
c0012b10:	53                   	push   ebx
c0012b11:	56                   	push   esi
c0012b12:	e8 7f f3 ff ff       	call   c0011e96 <VAS::getPageTableEntry(unsigned long)>
c0012b17:	5a                   	pop    edx
c0012b18:	8b 38                	mov    edi,DWORD PTR [eax]
c0012b1a:	59                   	pop    ecx
c0012b1b:	89 fa                	mov    edx,edi
c0012b1d:	81 e2 00 0c 00 00    	and    edx,0xc00
c0012b23:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c0012b29:	74 3d                	je     c0012b68 <VAS::scanForEviction()+0x78>
c0012b2b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012b31:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c0012b37:	76 2a                	jbe    c0012b63 <VAS::scanForEviction()+0x73>
c0012b39:	31 db                	xor    ebx,ebx
c0012b3b:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0012b42:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012b48:	75 c6                	jne    c0012b10 <VAS::scanForEviction()+0x20>
c0012b4a:	89 da                	mov    edx,ebx
c0012b4c:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012b4f:	c1 ea 16             	shr    edx,0x16
c0012b52:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012b56:	75 b8                	jne    c0012b10 <VAS::scanForEviction()+0x20>
c0012b58:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012b5e:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012b61:	eb 97                	jmp    c0012afa <VAS::scanForEviction()+0xa>
c0012b63:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012b66:	eb 92                	jmp    c0012afa <VAS::scanForEviction()+0xa>
c0012b68:	f7 c7 01 00 00 00    	test   edi,0x1
c0012b6e:	74 bb                	je     c0012b2b <VAS::scanForEviction()+0x3b>
c0012b70:	f7 c7 20 00 00 00    	test   edi,0x20
c0012b76:	74 0a                	je     c0012b82 <VAS::scanForEviction()+0x92>
c0012b78:	83 e7 df             	and    edi,0xffffffdf
c0012b7b:	89 38                	mov    DWORD PTR [eax],edi
c0012b7d:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012b80:	eb a9                	jmp    c0012b2b <VAS::scanForEviction()+0x3b>
c0012b82:	83 ec 08             	sub    esp,0x8
c0012b85:	53                   	push   ebx
c0012b86:	56                   	push   esi
c0012b87:	e8 9e fd ff ff       	call   c001292a <VAS::evict(unsigned long)>
c0012b8c:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c0012b93:	83 c4 10             	add    esp,0x10
c0012b96:	89 f8                	mov    eax,edi
c0012b98:	5b                   	pop    ebx
c0012b99:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012b9e:	5e                   	pop    esi
c0012b9f:	5f                   	pop    edi
c0012ba0:	c3                   	ret    

c0012ba1 <mapVASFirstTime>:
c0012ba1:	55                   	push   ebp
c0012ba2:	57                   	push   edi
c0012ba3:	56                   	push   esi
c0012ba4:	53                   	push   ebx
c0012ba5:	83 ec 0c             	sub    esp,0xc
c0012ba8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012bad:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012bb0:	4a                   	dec    edx
c0012bb1:	0f 84 8e 00 00 00    	je     c0012c45 <mapVASFirstTime+0xa4>
c0012bb7:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012bba:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012bbd:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012bc2:	c1 e5 15             	shl    ebp,0x15
c0012bc5:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012bca:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012bd0:	29 eb                	sub    ebx,ebp
c0012bd2:	29 ee                	sub    esi,ebp
c0012bd4:	e8 de d2 ff ff       	call   c000feb7 <Phys::allocatePage()>
c0012bd9:	83 ec 0c             	sub    esp,0xc
c0012bdc:	68 03 04 00 00       	push   0x403
c0012be1:	6a 01                	push   0x1
c0012be3:	53                   	push   ebx
c0012be4:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012bea:	50                   	push   eax
c0012beb:	57                   	push   edi
c0012bec:	e8 1f f9 ff ff       	call   c0012510 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012bf1:	83 c4 20             	add    esp,0x20
c0012bf4:	39 f3                	cmp    ebx,esi
c0012bf6:	75 dc                	jne    c0012bd4 <mapVASFirstTime+0x33>
c0012bf8:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012bfd:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012c02:	29 ee                	sub    esi,ebp
c0012c04:	29 e8                	sub    eax,ebp
c0012c06:	89 c5                	mov    ebp,eax
c0012c08:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012c0c:	19 db                	sbb    ebx,ebx
c0012c0e:	e8 a4 d2 ff ff       	call   c000feb7 <Phys::allocatePage()>
c0012c13:	83 e3 04             	and    ebx,0x4
c0012c16:	83 ec 0c             	sub    esp,0xc
c0012c19:	81 c3 03 04 00 00    	add    ebx,0x403
c0012c1f:	53                   	push   ebx
c0012c20:	6a 01                	push   0x1
c0012c22:	56                   	push   esi
c0012c23:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012c29:	50                   	push   eax
c0012c2a:	57                   	push   edi
c0012c2b:	e8 e0 f8 ff ff       	call   c0012510 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012c30:	83 c4 20             	add    esp,0x20
c0012c33:	39 f5                	cmp    ebp,esi
c0012c35:	75 d1                	jne    c0012c08 <mapVASFirstTime+0x67>
c0012c37:	0f 20 d8             	mov    eax,cr3
c0012c3a:	0f 22 d8             	mov    cr3,eax
c0012c3d:	83 c4 0c             	add    esp,0xc
c0012c40:	5b                   	pop    ebx
c0012c41:	5e                   	pop    esi
c0012c42:	5f                   	pop    edi
c0012c43:	5d                   	pop    ebp
c0012c44:	c3                   	ret    
c0012c45:	83 ec 0c             	sub    esp,0xc
c0012c48:	68 86 a8 02 c0       	push   0xc002a886
c0012c4d:	e8 71 01 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0012c52:	83 c4 10             	add    esp,0x10
c0012c55:	83 c4 0c             	add    esp,0xc
c0012c58:	5b                   	pop    ebx
c0012c59:	5e                   	pop    esi
c0012c5a:	5f                   	pop    edi
c0012c5b:	5d                   	pop    ebp
c0012c5c:	c3                   	ret    

c0012c5d <__cxa_atexit>:
c0012c5d:	31 c0                	xor    eax,eax
c0012c5f:	c3                   	ret    

c0012c60 <__cxa_finalize>:
c0012c60:	c3                   	ret    

c0012c61 <__stack_chk_fail>:
c0012c61:	55                   	push   ebp
c0012c62:	89 e5                	mov    ebp,esp
c0012c64:	83 ec 14             	sub    esp,0x14
c0012c67:	68 9f a8 02 c0       	push   0xc002a89f
c0012c6c:	e8 52 01 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0012c71:	58                   	pop    eax
c0012c72:	5a                   	pop    edx
c0012c73:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012c76:	68 ef a8 02 c0       	push   0xc002a8ef
c0012c7b:	e8 43 01 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0012c80:	59                   	pop    ecx
c0012c81:	58                   	pop    eax
c0012c82:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012c85:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012c88:	68 ef a8 02 c0       	push   0xc002a8ef
c0012c8d:	e8 31 01 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0012c92:	5a                   	pop    edx
c0012c93:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012c96:	59                   	pop    ecx
c0012c97:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c99:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012c9c:	68 ef a8 02 c0       	push   0xc002a8ef
c0012ca1:	e8 1d 01 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0012ca6:	5a                   	pop    edx
c0012ca7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012caa:	59                   	pop    ecx
c0012cab:	8b 00                	mov    eax,DWORD PTR [eax]
c0012cad:	8b 00                	mov    eax,DWORD PTR [eax]
c0012caf:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012cb2:	68 ef a8 02 c0       	push   0xc002a8ef
c0012cb7:	e8 07 01 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0012cbc:	c7 04 24 f7 a8 02 c0 	mov    DWORD PTR [esp],0xc002a8f7
c0012cc3:	e8 39 78 00 00       	call   c001a501 <Krnl::panic(char const*)>
c0012cc8:	83 c4 10             	add    esp,0x10
c0012ccb:	c9                   	leave  
c0012ccc:	c3                   	ret    

c0012ccd <__cxa_pure_virtual>:
c0012ccd:	83 ec 18             	sub    esp,0x18
c0012cd0:	68 0f a9 02 c0       	push   0xc002a90f
c0012cd5:	e8 27 78 00 00       	call   c001a501 <Krnl::panic(char const*)>
c0012cda:	83 c4 1c             	add    esp,0x1c
c0012cdd:	c3                   	ret    

c0012cde <operator new[](unsigned long)>:
c0012cde:	e9 68 cb ff ff       	jmp    c000f84b <malloc>

c0012ce3 <operator delete(void*, unsigned long)>:
c0012ce3:	e9 83 cb ff ff       	jmp    c000f86b <rfree>

c0012ce8 <operator delete[](void*)>:
c0012ce8:	e9 7e cb ff ff       	jmp    c000f86b <rfree>

c0012ced <operator delete[](void*, unsigned long)>:
c0012ced:	e9 79 cb ff ff       	jmp    c000f86b <rfree>

c0012cf2 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012cf2:	57                   	push   edi
c0012cf3:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012cf8:	56                   	push   esi
c0012cf9:	be 24 a9 02 c0       	mov    esi,0xc002a924
c0012cfe:	53                   	push   ebx
c0012cff:	83 ec 40             	sub    esp,0x40
c0012d02:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012d06:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012d0a:	fc                   	cld    
c0012d0b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012d0d:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012d11:	83 f9 3e             	cmp    ecx,0x3e
c0012d14:	7e 05                	jle    c0012d1b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012d16:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012d1b:	89 df                	mov    edi,ebx
c0012d1d:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012d21:	eb 02                	jmp    c0012d25 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012d23:	89 c7                	mov    edi,eax
c0012d25:	31 d2                	xor    edx,edx
c0012d27:	46                   	inc    esi
c0012d28:	89 f8                	mov    eax,edi
c0012d2a:	f7 f1                	div    ecx
c0012d2c:	39 cf                	cmp    edi,ecx
c0012d2e:	73 f3                	jae    c0012d23 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012d30:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012d33:	eb 02                	jmp    c0012d37 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012d35:	89 c3                	mov    ebx,eax
c0012d37:	31 d2                	xor    edx,edx
c0012d39:	4e                   	dec    esi
c0012d3a:	89 d8                	mov    eax,ebx
c0012d3c:	f7 f1                	div    ecx
c0012d3e:	39 cb                	cmp    ebx,ecx
c0012d40:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012d44:	88 16                	mov    BYTE PTR [esi],dl
c0012d46:	73 ed                	jae    c0012d35 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012d48:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012d4c:	83 c4 40             	add    esp,0x40
c0012d4f:	5b                   	pop    ebx
c0012d50:	5e                   	pop    esi
c0012d51:	5f                   	pop    edi
c0012d52:	c3                   	ret    

c0012d53 <Dbg::logc(char)>:
c0012d53:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012d57:	ba fd 03 00 00       	mov    edx,0x3fd
c0012d5c:	ec                   	in     al,dx
c0012d5d:	a8 20                	test   al,0x20
c0012d5f:	74 fb                	je     c0012d5c <Dbg::logc(char)+0x9>
c0012d61:	ba f8 03 00 00       	mov    edx,0x3f8
c0012d66:	88 c8                	mov    al,cl
c0012d68:	ee                   	out    dx,al
c0012d69:	c3                   	ret    

c0012d6a <Dbg::logs(char*)>:
c0012d6a:	53                   	push   ebx
c0012d6b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012d6f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012d72:	84 c0                	test   al,al
c0012d74:	74 0f                	je     c0012d85 <Dbg::logs(char*)+0x1b>
c0012d76:	50                   	push   eax
c0012d77:	43                   	inc    ebx
c0012d78:	e8 d6 ff ff ff       	call   c0012d53 <Dbg::logc(char)>
c0012d7d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012d80:	5a                   	pop    edx
c0012d81:	84 c0                	test   al,al
c0012d83:	75 f1                	jne    c0012d76 <Dbg::logs(char*)+0xc>
c0012d85:	5b                   	pop    ebx
c0012d86:	c3                   	ret    

c0012d87 <Dbg::logWriteInt(unsigned int)>:
c0012d87:	83 ec 10             	sub    esp,0x10
c0012d8a:	6a 0a                	push   0xa
c0012d8c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012d90:	50                   	push   eax
c0012d91:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d95:	e8 58 ff ff ff       	call   c0012cf2 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012d9a:	50                   	push   eax
c0012d9b:	e8 ca ff ff ff       	call   c0012d6a <Dbg::logs(char*)>
c0012da0:	83 c4 20             	add    esp,0x20
c0012da3:	c3                   	ret    

c0012da4 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012da4:	83 ec 10             	sub    esp,0x10
c0012da7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012dab:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012daf:	50                   	push   eax
c0012db0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012db4:	e8 39 ff ff ff       	call   c0012cf2 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012db9:	50                   	push   eax
c0012dba:	e8 ab ff ff ff       	call   c0012d6a <Dbg::logs(char*)>
c0012dbf:	83 c4 20             	add    esp,0x20
c0012dc2:	c3                   	ret    

c0012dc3 <Dbg::kprintf(char const*, ...)>:
c0012dc3:	55                   	push   ebp
c0012dc4:	57                   	push   edi
c0012dc5:	56                   	push   esi
c0012dc6:	53                   	push   ebx
c0012dc7:	83 ec 0c             	sub    esp,0xc
c0012dca:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012dce:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012dd2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012dd6:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012dd9:	84 c0                	test   al,al
c0012ddb:	74 4a                	je     c0012e27 <Dbg::kprintf(char const*, ...)+0x64>
c0012ddd:	31 db                	xor    ebx,ebx
c0012ddf:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012de2:	3c 25                	cmp    al,0x25
c0012de4:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012de7:	0f 85 e4 00 00 00    	jne    c0012ed1 <Dbg::kprintf(char const*, ...)+0x10e>
c0012ded:	83 c3 02             	add    ebx,0x2
c0012df0:	8a 07                	mov    al,BYTE PTR [edi]
c0012df2:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012df5:	83 e8 25             	sub    eax,0x25
c0012df8:	3c 53                	cmp    al,0x53
c0012dfa:	0f 87 ba 00 00 00    	ja     c0012eba <Dbg::kprintf(char const*, ...)+0xf7>
c0012e00:	0f b6 c0             	movzx  eax,al
c0012e03:	ff 24 85 64 a9 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd569c]
c0012e0a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e0e:	89 c8                	mov    eax,ecx
c0012e10:	83 c1 04             	add    ecx,0x4
c0012e13:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012e17:	ff 30                	push   DWORD PTR [eax]
c0012e19:	e8 4c ff ff ff       	call   c0012d6a <Dbg::logs(char*)>
c0012e1e:	58                   	pop    eax
c0012e1f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012e23:	84 c0                	test   al,al
c0012e25:	75 b8                	jne    c0012ddf <Dbg::kprintf(char const*, ...)+0x1c>
c0012e27:	83 c4 0c             	add    esp,0xc
c0012e2a:	5b                   	pop    ebx
c0012e2b:	5e                   	pop    esi
c0012e2c:	5f                   	pop    edi
c0012e2d:	5d                   	pop    ebp
c0012e2e:	c3                   	ret    
c0012e2f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012e33:	89 d0                	mov    eax,edx
c0012e35:	83 c2 04             	add    edx,0x4
c0012e38:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012e3c:	ff 30                	push   DWORD PTR [eax]
c0012e3e:	e8 44 ff ff ff       	call   c0012d87 <Dbg::logWriteInt(unsigned int)>
c0012e43:	58                   	pop    eax
c0012e44:	eb d9                	jmp    c0012e1f <Dbg::kprintf(char const*, ...)+0x5c>
c0012e46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012e4a:	89 d0                	mov    eax,edx
c0012e4c:	83 c2 04             	add    edx,0x4
c0012e4f:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012e52:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012e56:	50                   	push   eax
c0012e57:	e8 f7 fe ff ff       	call   c0012d53 <Dbg::logc(char)>
c0012e5c:	58                   	pop    eax
c0012e5d:	eb c0                	jmp    c0012e1f <Dbg::kprintf(char const*, ...)+0x5c>
c0012e5f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e63:	89 c8                	mov    eax,ecx
c0012e65:	83 c1 04             	add    ecx,0x4
c0012e68:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012e6c:	ff 30                	push   DWORD PTR [eax]
c0012e6e:	e8 14 ff ff ff       	call   c0012d87 <Dbg::logWriteInt(unsigned int)>
c0012e73:	5f                   	pop    edi
c0012e74:	eb a9                	jmp    c0012e1f <Dbg::kprintf(char const*, ...)+0x5c>
c0012e76:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e7a:	89 c8                	mov    eax,ecx
c0012e7c:	83 c1 04             	add    ecx,0x4
c0012e7f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012e83:	6a 10                	push   0x10
c0012e85:	ff 30                	push   DWORD PTR [eax]
c0012e87:	e8 18 ff ff ff       	call   c0012da4 <Dbg::logWriteIntBase(unsigned int, int)>
c0012e8c:	59                   	pop    ecx
c0012e8d:	5f                   	pop    edi
c0012e8e:	eb 8f                	jmp    c0012e1f <Dbg::kprintf(char const*, ...)+0x5c>
c0012e90:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012e94:	89 d0                	mov    eax,edx
c0012e96:	83 c2 08             	add    edx,0x8
c0012e99:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012e9d:	6a 10                	push   0x10
c0012e9f:	ff 30                	push   DWORD PTR [eax]
c0012ea1:	e8 fe fe ff ff       	call   c0012da4 <Dbg::logWriteIntBase(unsigned int, int)>
c0012ea6:	58                   	pop    eax
c0012ea7:	5a                   	pop    edx
c0012ea8:	e9 72 ff ff ff       	jmp    c0012e1f <Dbg::kprintf(char const*, ...)+0x5c>
c0012ead:	6a 25                	push   0x25
c0012eaf:	e8 9f fe ff ff       	call   c0012d53 <Dbg::logc(char)>
c0012eb4:	58                   	pop    eax
c0012eb5:	e9 65 ff ff ff       	jmp    c0012e1f <Dbg::kprintf(char const*, ...)+0x5c>
c0012eba:	6a 25                	push   0x25
c0012ebc:	e8 92 fe ff ff       	call   c0012d53 <Dbg::logc(char)>
c0012ec1:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012ec4:	50                   	push   eax
c0012ec5:	e8 89 fe ff ff       	call   c0012d53 <Dbg::logc(char)>
c0012eca:	5a                   	pop    edx
c0012ecb:	59                   	pop    ecx
c0012ecc:	e9 4e ff ff ff       	jmp    c0012e1f <Dbg::kprintf(char const*, ...)+0x5c>
c0012ed1:	50                   	push   eax
c0012ed2:	89 eb                	mov    ebx,ebp
c0012ed4:	e8 7a fe ff ff       	call   c0012d53 <Dbg::logc(char)>
c0012ed9:	89 fd                	mov    ebp,edi
c0012edb:	58                   	pop    eax
c0012edc:	e9 3e ff ff ff       	jmp    c0012e1f <Dbg::kprintf(char const*, ...)+0x5c>
c0012ee1:	90                   	nop

c0012ee2 <File::read(unsigned long long, void*, int*)>:
c0012ee2:	53                   	push   ebx
c0012ee3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012ee7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012eeb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012ef2:	3c 19                	cmp    al,0x19
c0012ef4:	77 35                	ja     c0012f2b <File::read(unsigned long long, void*, int*)+0x49>
c0012ef6:	8b 04 85 80 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1580]
c0012efd:	85 c0                	test   eax,eax
c0012eff:	74 2a                	je     c0012f2b <File::read(unsigned long long, void*, int*)+0x49>
c0012f01:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012f07:	85 c0                	test   eax,eax
c0012f09:	74 20                	je     c0012f2b <File::read(unsigned long long, void*, int*)+0x49>
c0012f0b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f0f:	74 21                	je     c0012f32 <File::read(unsigned long long, void*, int*)+0x50>
c0012f11:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012f13:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012f17:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012f1d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012f21:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012f25:	5b                   	pop    ebx
c0012f26:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012f29:	ff e0                	jmp    eax
c0012f2b:	b8 0b 00 00 00       	mov    eax,0xb
c0012f30:	eb 05                	jmp    c0012f37 <File::read(unsigned long long, void*, int*)+0x55>
c0012f32:	b8 05 00 00 00       	mov    eax,0x5
c0012f37:	5b                   	pop    ebx
c0012f38:	c3                   	ret    
c0012f39:	90                   	nop

c0012f3a <File::write(unsigned long long, void*, int*)>:
c0012f3a:	53                   	push   ebx
c0012f3b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012f3f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012f43:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012f4a:	3c 19                	cmp    al,0x19
c0012f4c:	77 35                	ja     c0012f83 <File::write(unsigned long long, void*, int*)+0x49>
c0012f4e:	8b 04 85 80 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1580]
c0012f55:	85 c0                	test   eax,eax
c0012f57:	74 2a                	je     c0012f83 <File::write(unsigned long long, void*, int*)+0x49>
c0012f59:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012f5f:	85 c0                	test   eax,eax
c0012f61:	74 20                	je     c0012f83 <File::write(unsigned long long, void*, int*)+0x49>
c0012f63:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f67:	74 21                	je     c0012f8a <File::write(unsigned long long, void*, int*)+0x50>
c0012f69:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012f6b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012f6f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012f75:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012f79:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012f7d:	5b                   	pop    ebx
c0012f7e:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012f81:	ff e0                	jmp    eax
c0012f83:	b8 0b 00 00 00       	mov    eax,0xb
c0012f88:	eb 05                	jmp    c0012f8f <File::write(unsigned long long, void*, int*)+0x55>
c0012f8a:	b8 05 00 00 00       	mov    eax,0x5
c0012f8f:	5b                   	pop    ebx
c0012f90:	c3                   	ret    
c0012f91:	90                   	nop

c0012f92 <Directory::read(unsigned long long, void*, int*)>:
c0012f92:	53                   	push   ebx
c0012f93:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012f97:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012f9b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012fa2:	3c 19                	cmp    al,0x19
c0012fa4:	77 35                	ja     c0012fdb <Directory::read(unsigned long long, void*, int*)+0x49>
c0012fa6:	8b 04 85 80 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1580]
c0012fad:	85 c0                	test   eax,eax
c0012faf:	74 2a                	je     c0012fdb <Directory::read(unsigned long long, void*, int*)+0x49>
c0012fb1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012fb7:	85 c0                	test   eax,eax
c0012fb9:	74 20                	je     c0012fdb <Directory::read(unsigned long long, void*, int*)+0x49>
c0012fbb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012fbf:	74 21                	je     c0012fe2 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012fc1:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012fc3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012fc7:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012fcd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012fd1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012fd5:	5b                   	pop    ebx
c0012fd6:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012fd9:	ff e0                	jmp    eax
c0012fdb:	b8 0b 00 00 00       	mov    eax,0xb
c0012fe0:	eb 05                	jmp    c0012fe7 <Directory::read(unsigned long long, void*, int*)+0x55>
c0012fe2:	b8 05 00 00 00       	mov    eax,0x5
c0012fe7:	5b                   	pop    ebx
c0012fe8:	c3                   	ret    
c0012fe9:	90                   	nop

c0012fea <Directory::write(unsigned long long, void*, int*)>:
c0012fea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012fee:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012ff5:	b8 0b 00 00 00       	mov    eax,0xb
c0012ffa:	80 fa 19             	cmp    dl,0x19
c0012ffd:	77 18                	ja     c0013017 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012fff:	8b 14 95 80 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1580]
c0013006:	85 d2                	test   edx,edx
c0013008:	74 0d                	je     c0013017 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001300a:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0013011:	19 c0                	sbb    eax,eax
c0013013:	83 e0 0a             	and    eax,0xa
c0013016:	40                   	inc    eax
c0013017:	c3                   	ret    

c0013018 <File::isAtty()>:
c0013018:	31 c0                	xor    eax,eax
c001301a:	c3                   	ret    
c001301b:	90                   	nop

c001301c <Directory::isAtty()>:
c001301c:	31 c0                	xor    eax,eax
c001301e:	c3                   	ret    
c001301f:	90                   	nop

c0013020 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0013020:	b8 0a 00 00 00       	mov    eax,0xa
c0013025:	c3                   	ret    

c0013026 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0013026:	b8 0a 00 00 00       	mov    eax,0xa
c001302b:	c3                   	ret    

c001302c <Filesystem::getFileFirstSector(char const*)>:
c001302c:	31 c0                	xor    eax,eax
c001302e:	31 d2                	xor    edx,edx
c0013030:	c3                   	ret    
c0013031:	90                   	nop

c0013032 <File::~File()>:
c0013032:	83 ec 0c             	sub    esp,0xc
c0013035:	ba 24 ab 02 c0       	mov    edx,0xc002ab24
c001303a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001303e:	89 10                	mov    DWORD PTR [eax],edx
c0013040:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013044:	83 ec 0c             	sub    esp,0xc
c0013047:	50                   	push   eax
c0013048:	e8 41 e7 ff ff       	call   c001178e <UnixFile::~UnixFile()>
c001304d:	83 c4 10             	add    esp,0x10
c0013050:	90                   	nop
c0013051:	83 c4 0c             	add    esp,0xc
c0013054:	c3                   	ret    
c0013055:	90                   	nop

c0013056 <File::~File()>:
c0013056:	83 ec 0c             	sub    esp,0xc
c0013059:	83 ec 0c             	sub    esp,0xc
c001305c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013060:	e8 cd ff ff ff       	call   c0013032 <File::~File()>
c0013065:	83 c4 10             	add    esp,0x10
c0013068:	83 ec 08             	sub    esp,0x8
c001306b:	68 14 01 00 00       	push   0x114
c0013070:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013074:	e8 6a fc ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0013079:	83 c4 10             	add    esp,0x10
c001307c:	83 c4 0c             	add    esp,0xc
c001307f:	c3                   	ret    

c0013080 <Directory::~Directory()>:
c0013080:	83 ec 0c             	sub    esp,0xc
c0013083:	ba 40 ab 02 c0       	mov    edx,0xc002ab40
c0013088:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001308c:	89 10                	mov    DWORD PTR [eax],edx
c001308e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013092:	83 ec 0c             	sub    esp,0xc
c0013095:	50                   	push   eax
c0013096:	e8 f3 e6 ff ff       	call   c001178e <UnixFile::~UnixFile()>
c001309b:	83 c4 10             	add    esp,0x10
c001309e:	90                   	nop
c001309f:	83 c4 0c             	add    esp,0xc
c00130a2:	c3                   	ret    
c00130a3:	90                   	nop

c00130a4 <Directory::~Directory()>:
c00130a4:	83 ec 0c             	sub    esp,0xc
c00130a7:	83 ec 0c             	sub    esp,0xc
c00130aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130ae:	e8 cd ff ff ff       	call   c0013080 <Directory::~Directory()>
c00130b3:	83 c4 10             	add    esp,0x10
c00130b6:	83 ec 08             	sub    esp,0x8
c00130b9:	68 14 01 00 00       	push   0x114
c00130be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130c2:	e8 1c fc ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c00130c7:	83 c4 10             	add    esp,0x10
c00130ca:	83 c4 0c             	add    esp,0xc
c00130cd:	c3                   	ret    

c00130ce <Filesystem::Filesystem()>:
c00130ce:	ba bc aa 02 c0       	mov    edx,0xc002aabc
c00130d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130d7:	89 10                	mov    DWORD PTR [eax],edx
c00130d9:	8b 15 f4 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e5f4
c00130df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130e3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00130e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130ea:	a3 f4 e5 02 c0       	mov    ds:0xc002e5f4,eax
c00130ef:	90                   	nop
c00130f0:	c3                   	ret    
c00130f1:	90                   	nop

c00130f2 <Filesystem::~Filesystem()>:
c00130f2:	ba bc aa 02 c0       	mov    edx,0xc002aabc
c00130f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130fb:	89 10                	mov    DWORD PTR [eax],edx
c00130fd:	90                   	nop
c00130fe:	c3                   	ret    
c00130ff:	90                   	nop

c0013100 <Filesystem::~Filesystem()>:
c0013100:	83 ec 0c             	sub    esp,0xc
c0013103:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013107:	e8 e6 ff ff ff       	call   c00130f2 <Filesystem::~Filesystem()>
c001310c:	83 c4 04             	add    esp,0x4
c001310f:	83 ec 08             	sub    esp,0x8
c0013112:	6a 08                	push   0x8
c0013114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013118:	e8 c6 fb ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c001311d:	83 c4 10             	add    esp,0x10
c0013120:	83 c4 0c             	add    esp,0xc
c0013123:	c3                   	ret    

c0013124 <Fs::getcwd(Process*, char*, int)>:
c0013124:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013128:	31 c0                	xor    eax,eax
c001312a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001312d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0013131:	7d 15                	jge    c0013148 <Fs::getcwd(Process*, char*, int)+0x24>
c0013133:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013137:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c001313e:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0013141:	84 c9                	test   cl,cl
c0013143:	74 06                	je     c001314b <Fs::getcwd(Process*, char*, int)+0x27>
c0013145:	40                   	inc    eax
c0013146:	eb e2                	jmp    c001312a <Fs::getcwd(Process*, char*, int)+0x6>
c0013148:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c001314b:	31 c0                	xor    eax,eax
c001314d:	c3                   	ret    

c001314e <Fs::initVFS()>:
c001314e:	83 ec 18             	sub    esp,0x18
c0013151:	6a 08                	push   0x8
c0013153:	e8 f3 c6 ff ff       	call   c000f84b <malloc>
c0013158:	89 04 24             	mov    DWORD PTR [esp],eax
c001315b:	e8 ec dd 00 00       	call   c0020f4c <FAT::FAT()>
c0013160:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0013167:	e8 df c6 ff ff       	call   c000f84b <malloc>
c001316c:	89 04 24             	mov    DWORD PTR [esp],eax
c001316f:	e8 30 f0 00 00       	call   c00221a4 <ISO9660::ISO9660()>
c0013174:	83 c4 1c             	add    esp,0x1c
c0013177:	c3                   	ret    

c0013178 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0013178:	55                   	push   ebp
c0013179:	57                   	push   edi
c001317a:	56                   	push   esi
c001317b:	53                   	push   ebx
c001317c:	81 ec 10 04 00 00    	sub    esp,0x410
c0013182:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0013189:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0013190:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0013197:	68 00 04 00 00       	push   0x400
c001319c:	6a 00                	push   0x0
c001319e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00131a2:	56                   	push   esi
c00131a3:	e8 d8 d5 fe ff       	call   c0000780 <memset>
c00131a8:	83 c4 10             	add    esp,0x10
c00131ab:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c00131af:	75 0b                	jne    c00131bc <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c00131b1:	50                   	push   eax
c00131b2:	50                   	push   eax
c00131b3:	57                   	push   edi
c00131b4:	56                   	push   esi
c00131b5:	e8 82 d6 fe ff       	call   c000083c <strcpy>
c00131ba:	eb 41                	jmp    c00131fd <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c00131bc:	8a 07                	mov    al,BYTE PTR [edi]
c00131be:	3c 5c                	cmp    al,0x5c
c00131c0:	74 04                	je     c00131c6 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c00131c2:	3c 2f                	cmp    al,0x2f
c00131c4:	75 18                	jne    c00131de <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c00131c6:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c00131c9:	3c 60                	cmp    al,0x60
c00131cb:	7e 03                	jle    c00131d0 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c00131cd:	83 e8 20             	sub    eax,0x20
c00131d0:	88 04 24             	mov    BYTE PTR [esp],al
c00131d3:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00131da:	50                   	push   eax
c00131db:	50                   	push   eax
c00131dc:	eb 18                	jmp    c00131f6 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c00131de:	50                   	push   eax
c00131df:	50                   	push   eax
c00131e0:	55                   	push   ebp
c00131e1:	56                   	push   esi
c00131e2:	e8 55 d6 fe ff       	call   c000083c <strcpy>
c00131e7:	5a                   	pop    edx
c00131e8:	59                   	pop    ecx
c00131e9:	68 11 c2 02 c0       	push   0xc002c211
c00131ee:	56                   	push   esi
c00131ef:	e8 88 d7 fe ff       	call   c000097c <strcat>
c00131f4:	5d                   	pop    ebp
c00131f5:	58                   	pop    eax
c00131f6:	57                   	push   edi
c00131f7:	56                   	push   esi
c00131f8:	e8 7f d7 fe ff       	call   c000097c <strcat>
c00131fd:	83 c4 10             	add    esp,0x10
c0013200:	8a 04 24             	mov    al,BYTE PTR [esp]
c0013203:	3c 60                	cmp    al,0x60
c0013205:	7e 03                	jle    c001320a <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0013207:	83 e8 20             	sub    eax,0x20
c001320a:	88 04 24             	mov    BYTE PTR [esp],al
c001320d:	88 03                	mov    BYTE PTR [ebx],al
c001320f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0013216:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c001321c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0013220:	bf 03 00 00 00       	mov    edi,0x3
c0013225:	b8 03 00 00 00       	mov    eax,0x3
c001322a:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c001322d:	84 d2                	test   dl,dl
c001322f:	0f 84 91 00 00 00    	je     c00132c6 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0013235:	8d 4f 01             	lea    ecx,[edi+0x1]
c0013238:	80 fa 5c             	cmp    dl,0x5c
c001323b:	74 05                	je     c0013242 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c001323d:	80 fa 2f             	cmp    dl,0x2f
c0013240:	75 12                	jne    c0013254 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0013242:	89 c5                	mov    ebp,eax
c0013244:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013249:	74 09                	je     c0013254 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c001324b:	40                   	inc    eax
c001324c:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0013250:	89 cf                	mov    edi,ecx
c0013252:	eb d6                	jmp    c001322a <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0013254:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0013259:	75 5b                	jne    c00132b6 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c001325b:	80 fa 2e             	cmp    dl,0x2e
c001325e:	75 56                	jne    c00132b6 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0013260:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0013264:	74 19                	je     c001327f <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0013266:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c001326b:	74 53                	je     c00132c0 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c001326d:	89 f9                	mov    ecx,edi
c001326f:	41                   	inc    ecx
c0013270:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0013273:	80 fa 2f             	cmp    dl,0x2f
c0013276:	74 f7                	je     c001326f <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013278:	80 fa 5c             	cmp    dl,0x5c
c001327b:	74 f2                	je     c001326f <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c001327d:	eb d1                	jmp    c0013250 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001327f:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013284:	74 3a                	je     c00132c0 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013286:	83 f8 03             	cmp    eax,0x3
c0013289:	74 c5                	je     c0013250 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001328b:	41                   	inc    ecx
c001328c:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c001328f:	80 fa 2f             	cmp    dl,0x2f
c0013292:	74 f7                	je     c001328b <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013294:	80 fa 5c             	cmp    dl,0x5c
c0013297:	74 f2                	je     c001328b <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013299:	48                   	dec    eax
c001329a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001329e:	75 06                	jne    c00132a6 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c00132a0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00132a4:	eb f3                	jmp    c0013299 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c00132a6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00132aa:	74 07                	je     c00132b3 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c00132ac:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00132b0:	48                   	dec    eax
c00132b1:	eb f3                	jmp    c00132a6 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c00132b3:	40                   	inc    eax
c00132b4:	eb 9a                	jmp    c0013250 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00132b6:	80 fa 2f             	cmp    dl,0x2f
c00132b9:	74 95                	je     c0013250 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00132bb:	80 fa 5c             	cmp    dl,0x5c
c00132be:	74 90                	je     c0013250 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00132c0:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c00132c3:	40                   	inc    eax
c00132c4:	eb 8a                	jmp    c0013250 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00132c6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00132ca:	83 ec 0c             	sub    esp,0xc
c00132cd:	53                   	push   ebx
c00132ce:	e8 c9 d4 fe ff       	call   c000079c <strlen>
c00132d3:	83 c4 10             	add    esp,0x10
c00132d6:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c00132db:	75 26                	jne    c0013303 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c00132dd:	83 ec 0c             	sub    esp,0xc
c00132e0:	53                   	push   ebx
c00132e1:	e8 b6 d4 fe ff       	call   c000079c <strlen>
c00132e6:	83 c4 10             	add    esp,0x10
c00132e9:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c00132ee:	74 26                	je     c0013316 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c00132f0:	83 ec 0c             	sub    esp,0xc
c00132f3:	53                   	push   ebx
c00132f4:	e8 a3 d4 fe ff       	call   c000079c <strlen>
c00132f9:	83 c4 10             	add    esp,0x10
c00132fc:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013301:	eb c7                	jmp    c00132ca <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0013303:	83 ec 0c             	sub    esp,0xc
c0013306:	53                   	push   ebx
c0013307:	e8 90 d4 fe ff       	call   c000079c <strlen>
c001330c:	83 c4 10             	add    esp,0x10
c001330f:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013314:	74 c7                	je     c00132dd <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0013316:	81 c4 0c 04 00 00    	add    esp,0x40c
c001331c:	5b                   	pop    ebx
c001331d:	5e                   	pop    esi
c001331e:	5f                   	pop    edi
c001331f:	5d                   	pop    ebp
c0013320:	c3                   	ret    
c0013321:	90                   	nop

c0013322 <File::File(char const*, Process*)>:
c0013322:	83 ec 0c             	sub    esp,0xc
c0013325:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013329:	83 ec 08             	sub    esp,0x8
c001332c:	6a 00                	push   0x0
c001332e:	50                   	push   eax
c001332f:	e8 78 e2 ff ff       	call   c00115ac <UnixFile::UnixFile(int)>
c0013334:	83 c4 10             	add    esp,0x10
c0013337:	ba 24 ab 02 c0       	mov    edx,0xc002ab24
c001333c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013340:	89 10                	mov    DWORD PTR [eax],edx
c0013342:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013346:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001334c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013350:	83 c0 0d             	add    eax,0xd
c0013353:	83 ec 04             	sub    esp,0x4
c0013356:	52                   	push   edx
c0013357:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001335b:	50                   	push   eax
c001335c:	e8 17 fe ff ff       	call   c0013178 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013361:	83 c4 10             	add    esp,0x10
c0013364:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013368:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001336b:	8d 50 bf             	lea    edx,[eax-0x41]
c001336e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013372:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013378:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001337c:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013380:	90                   	nop
c0013381:	83 c4 0c             	add    esp,0xc
c0013384:	c3                   	ret    
c0013385:	90                   	nop

c0013386 <File::open(FileOpenMode)>:
c0013386:	53                   	push   ebx
c0013387:	b8 0b 00 00 00       	mov    eax,0xb
c001338c:	83 ec 08             	sub    esp,0x8
c001338f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013393:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001339a:	80 fa 19             	cmp    dl,0x19
c001339d:	77 40                	ja     c00133df <File::open(FileOpenMode)+0x59>
c001339f:	8b 14 95 80 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1580]
c00133a6:	85 d2                	test   edx,edx
c00133a8:	74 35                	je     c00133df <File::open(FileOpenMode)+0x59>
c00133aa:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00133b0:	85 d2                	test   edx,edx
c00133b2:	74 2b                	je     c00133df <File::open(FileOpenMode)+0x59>
c00133b4:	b8 06 00 00 00       	mov    eax,0x6
c00133b9:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00133bd:	75 20                	jne    c00133df <File::open(FileOpenMode)+0x59>
c00133bf:	8b 02                	mov    eax,DWORD PTR [edx]
c00133c1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00133c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00133cb:	51                   	push   ecx
c00133cc:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00133cf:	51                   	push   ecx
c00133d0:	52                   	push   edx
c00133d1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00133d4:	83 c4 10             	add    esp,0x10
c00133d7:	85 c0                	test   eax,eax
c00133d9:	75 04                	jne    c00133df <File::open(FileOpenMode)+0x59>
c00133db:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00133df:	83 c4 08             	add    esp,0x8
c00133e2:	5b                   	pop    ebx
c00133e3:	c3                   	ret    

c00133e4 <File::close()>:
c00133e4:	53                   	push   ebx
c00133e5:	b8 0b 00 00 00       	mov    eax,0xb
c00133ea:	83 ec 08             	sub    esp,0x8
c00133ed:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00133f1:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00133f8:	80 fa 19             	cmp    dl,0x19
c00133fb:	77 41                	ja     c001343e <File::close()+0x5a>
c00133fd:	8b 1c 95 80 ea 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1580]
c0013404:	85 db                	test   ebx,ebx
c0013406:	74 36                	je     c001343e <File::close()+0x5a>
c0013408:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001340f:	74 2d                	je     c001343e <File::close()+0x5a>
c0013411:	b8 05 00 00 00       	mov    eax,0x5
c0013416:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001341a:	74 22                	je     c001343e <File::close()+0x5a>
c001341c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013420:	8b 04 95 80 ea 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1580]
c0013427:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001342d:	53                   	push   ebx
c001342e:	53                   	push   ebx
c001342f:	8b 10                	mov    edx,DWORD PTR [eax]
c0013431:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013437:	50                   	push   eax
c0013438:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c001343b:	83 c4 10             	add    esp,0x10
c001343e:	83 c4 08             	add    esp,0x8
c0013441:	5b                   	pop    ebx
c0013442:	c3                   	ret    
c0013443:	90                   	nop

c0013444 <File::seek(unsigned long long)>:
c0013444:	56                   	push   esi
c0013445:	53                   	push   ebx
c0013446:	b8 0b 00 00 00       	mov    eax,0xb
c001344b:	51                   	push   ecx
c001344c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013450:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013454:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001345b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001345f:	80 fa 19             	cmp    dl,0x19
c0013462:	77 31                	ja     c0013495 <File::seek(unsigned long long)+0x51>
c0013464:	8b 14 95 80 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1580]
c001346b:	85 d2                	test   edx,edx
c001346d:	74 26                	je     c0013495 <File::seek(unsigned long long)+0x51>
c001346f:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013475:	85 d2                	test   edx,edx
c0013477:	74 1c                	je     c0013495 <File::seek(unsigned long long)+0x51>
c0013479:	b8 05 00 00 00       	mov    eax,0x5
c001347e:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0013482:	74 11                	je     c0013495 <File::seek(unsigned long long)+0x51>
c0013484:	8b 02                	mov    eax,DWORD PTR [edx]
c0013486:	53                   	push   ebx
c0013487:	51                   	push   ecx
c0013488:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001348e:	52                   	push   edx
c001348f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013492:	83 c4 10             	add    esp,0x10
c0013495:	5a                   	pop    edx
c0013496:	5b                   	pop    ebx
c0013497:	5e                   	pop    esi
c0013498:	c3                   	ret    
c0013499:	90                   	nop

c001349a <File::tell(unsigned long long*)>:
c001349a:	83 ec 0c             	sub    esp,0xc
c001349d:	b8 0b 00 00 00       	mov    eax,0xb
c00134a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00134a6:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00134ad:	80 fa 19             	cmp    dl,0x19
c00134b0:	77 34                	ja     c00134e6 <File::tell(unsigned long long*)+0x4c>
c00134b2:	8b 14 95 80 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1580]
c00134b9:	85 d2                	test   edx,edx
c00134bb:	74 29                	je     c00134e6 <File::tell(unsigned long long*)+0x4c>
c00134bd:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00134c3:	85 d2                	test   edx,edx
c00134c5:	74 1f                	je     c00134e6 <File::tell(unsigned long long*)+0x4c>
c00134c7:	b8 05 00 00 00       	mov    eax,0x5
c00134cc:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00134d0:	74 14                	je     c00134e6 <File::tell(unsigned long long*)+0x4c>
c00134d2:	50                   	push   eax
c00134d3:	8b 02                	mov    eax,DWORD PTR [edx]
c00134d5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00134d9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00134df:	52                   	push   edx
c00134e0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00134e3:	83 c4 10             	add    esp,0x10
c00134e6:	83 c4 0c             	add    esp,0xc
c00134e9:	c3                   	ret    

c00134ea <File::rewind()>:
c00134ea:	83 ec 10             	sub    esp,0x10
c00134ed:	6a 00                	push   0x0
c00134ef:	6a 00                	push   0x0
c00134f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134f5:	e8 4a ff ff ff       	call   c0013444 <File::seek(unsigned long long)>
c00134fa:	83 c4 1c             	add    esp,0x1c
c00134fd:	c3                   	ret    

c00134fe <File::unlink()>:
c00134fe:	83 ec 0c             	sub    esp,0xc
c0013501:	b8 0b 00 00 00       	mov    eax,0xb
c0013506:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001350a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013511:	80 f9 19             	cmp    cl,0x19
c0013514:	77 2f                	ja     c0013545 <File::unlink()+0x47>
c0013516:	8b 0c 8d 80 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1580]
c001351d:	85 c9                	test   ecx,ecx
c001351f:	74 24                	je     c0013545 <File::unlink()+0x47>
c0013521:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013527:	85 c9                	test   ecx,ecx
c0013529:	74 1a                	je     c0013545 <File::unlink()+0x47>
c001352b:	b8 06 00 00 00       	mov    eax,0x6
c0013530:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013534:	75 0f                	jne    c0013545 <File::unlink()+0x47>
c0013536:	83 c2 0d             	add    edx,0xd
c0013539:	50                   	push   eax
c001353a:	50                   	push   eax
c001353b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001353d:	52                   	push   edx
c001353e:	51                   	push   ecx
c001353f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013542:	83 c4 10             	add    esp,0x10
c0013545:	83 c4 0c             	add    esp,0xc
c0013548:	c3                   	ret    
c0013549:	90                   	nop

c001354a <File::rename(char const*)>:
c001354a:	83 ec 0c             	sub    esp,0xc
c001354d:	b8 0b 00 00 00       	mov    eax,0xb
c0013552:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013556:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001355d:	80 f9 19             	cmp    cl,0x19
c0013560:	77 32                	ja     c0013594 <File::rename(char const*)+0x4a>
c0013562:	8b 0c 8d 80 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1580]
c0013569:	85 c9                	test   ecx,ecx
c001356b:	74 27                	je     c0013594 <File::rename(char const*)+0x4a>
c001356d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013573:	85 c9                	test   ecx,ecx
c0013575:	74 1d                	je     c0013594 <File::rename(char const*)+0x4a>
c0013577:	b8 06 00 00 00       	mov    eax,0x6
c001357c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013580:	75 12                	jne    c0013594 <File::rename(char const*)+0x4a>
c0013582:	83 c2 0d             	add    edx,0xd
c0013585:	50                   	push   eax
c0013586:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013588:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001358c:	52                   	push   edx
c001358d:	51                   	push   ecx
c001358e:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013591:	83 c4 10             	add    esp,0x10
c0013594:	83 c4 0c             	add    esp,0xc
c0013597:	c3                   	ret    

c0013598 <File::chfatattr(unsigned char, unsigned char)>:
c0013598:	57                   	push   edi
c0013599:	b8 0b 00 00 00       	mov    eax,0xb
c001359e:	56                   	push   esi
c001359f:	53                   	push   ebx
c00135a0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00135a4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00135a8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00135af:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00135b3:	80 f9 19             	cmp    cl,0x19
c00135b6:	77 37                	ja     c00135ef <File::chfatattr(unsigned char, unsigned char)+0x57>
c00135b8:	8b 0c 8d 80 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1580]
c00135bf:	85 c9                	test   ecx,ecx
c00135c1:	74 2c                	je     c00135ef <File::chfatattr(unsigned char, unsigned char)+0x57>
c00135c3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00135c9:	85 c9                	test   ecx,ecx
c00135cb:	74 22                	je     c00135ef <File::chfatattr(unsigned char, unsigned char)+0x57>
c00135cd:	b8 06 00 00 00       	mov    eax,0x6
c00135d2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00135d6:	75 17                	jne    c00135ef <File::chfatattr(unsigned char, unsigned char)+0x57>
c00135d8:	8b 39                	mov    edi,DWORD PTR [ecx]
c00135da:	89 f0                	mov    eax,esi
c00135dc:	83 c2 0d             	add    edx,0xd
c00135df:	0f b6 f0             	movzx  esi,al
c00135e2:	0f b6 db             	movzx  ebx,bl
c00135e5:	56                   	push   esi
c00135e6:	53                   	push   ebx
c00135e7:	52                   	push   edx
c00135e8:	51                   	push   ecx
c00135e9:	ff 57 34             	call   DWORD PTR [edi+0x34]
c00135ec:	83 c4 10             	add    esp,0x10
c00135ef:	5b                   	pop    ebx
c00135f0:	5e                   	pop    esi
c00135f1:	5f                   	pop    edi
c00135f2:	c3                   	ret    
c00135f3:	90                   	nop

c00135f4 <File::exists()>:
c00135f4:	83 ec 0c             	sub    esp,0xc
c00135f7:	31 c0                	xor    eax,eax
c00135f9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00135fd:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013604:	80 f9 19             	cmp    cl,0x19
c0013607:	77 24                	ja     c001362d <File::exists()+0x39>
c0013609:	8b 0c 8d 80 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1580]
c0013610:	85 c9                	test   ecx,ecx
c0013612:	74 19                	je     c001362d <File::exists()+0x39>
c0013614:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001361a:	85 c9                	test   ecx,ecx
c001361c:	74 0f                	je     c001362d <File::exists()+0x39>
c001361e:	83 c2 0d             	add    edx,0xd
c0013621:	50                   	push   eax
c0013622:	50                   	push   eax
c0013623:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013625:	52                   	push   edx
c0013626:	51                   	push   ecx
c0013627:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001362a:	83 c4 10             	add    esp,0x10
c001362d:	83 c4 0c             	add    esp,0xc
c0013630:	c3                   	ret    
c0013631:	90                   	nop

c0013632 <File::stat(unsigned long long*, bool*)>:
c0013632:	56                   	push   esi
c0013633:	53                   	push   ebx
c0013634:	50                   	push   eax
c0013635:	b8 0b 00 00 00       	mov    eax,0xb
c001363a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001363e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013642:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013649:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001364d:	80 f9 19             	cmp    cl,0x19
c0013650:	77 3d                	ja     c001368f <File::stat(unsigned long long*, bool*)+0x5d>
c0013652:	8b 0c 8d 80 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1580]
c0013659:	85 c9                	test   ecx,ecx
c001365b:	74 32                	je     c001368f <File::stat(unsigned long long*, bool*)+0x5d>
c001365d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013663:	85 c9                	test   ecx,ecx
c0013665:	74 28                	je     c001368f <File::stat(unsigned long long*, bool*)+0x5d>
c0013667:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013669:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001366d:	74 13                	je     c0013682 <File::stat(unsigned long long*, bool*)+0x50>
c001366f:	83 ec 04             	sub    esp,0x4
c0013672:	56                   	push   esi
c0013673:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0013679:	51                   	push   ecx
c001367a:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c001367d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013680:	eb 0a                	jmp    c001368c <File::stat(unsigned long long*, bool*)+0x5a>
c0013682:	53                   	push   ebx
c0013683:	83 c2 0d             	add    edx,0xd
c0013686:	56                   	push   esi
c0013687:	52                   	push   edx
c0013688:	51                   	push   ecx
c0013689:	ff 50 30             	call   DWORD PTR [eax+0x30]
c001368c:	83 c4 10             	add    esp,0x10
c001368f:	5a                   	pop    edx
c0013690:	5b                   	pop    ebx
c0013691:	5e                   	pop    esi
c0013692:	c3                   	ret    

c0013693 <Fs::setcwd(Process*, char*)>:
c0013693:	55                   	push   ebp
c0013694:	57                   	push   edi
c0013695:	56                   	push   esi
c0013696:	53                   	push   ebx
c0013697:	81 ec 20 02 00 00    	sub    esp,0x220
c001369d:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c00136a4:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00136aa:	57                   	push   edi
c00136ab:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00136b2:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00136b6:	56                   	push   esi
c00136b7:	e8 bc fa ff ff       	call   c0013178 <Fs::standardiseFiles(char*, char const*, char const*)>
c00136bc:	89 34 24             	mov    DWORD PTR [esp],esi
c00136bf:	e8 d8 d0 fe ff       	call   c000079c <strlen>
c00136c4:	83 c4 10             	add    esp,0x10
c00136c7:	83 f8 02             	cmp    eax,0x2
c00136ca:	77 17                	ja     c00136e3 <Fs::setcwd(Process*, char*)+0x50>
c00136cc:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c00136d1:	83 e8 41             	sub    eax,0x41
c00136d4:	83 f8 19             	cmp    eax,0x19
c00136d7:	76 24                	jbe    c00136fd <Fs::setcwd(Process*, char*)+0x6a>
c00136d9:	b8 03 00 00 00       	mov    eax,0x3
c00136de:	e9 e0 00 00 00       	jmp    c00137c3 <Fs::setcwd(Process*, char*)+0x130>
c00136e3:	83 ec 0c             	sub    esp,0xc
c00136e6:	56                   	push   esi
c00136e7:	e8 b0 d0 fe ff       	call   c000079c <strlen>
c00136ec:	83 c4 10             	add    esp,0x10
c00136ef:	83 f8 03             	cmp    eax,0x3
c00136f2:	75 34                	jne    c0013728 <Fs::setcwd(Process*, char*)+0x95>
c00136f4:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00136f9:	75 2d                	jne    c0013728 <Fs::setcwd(Process*, char*)+0x95>
c00136fb:	eb cf                	jmp    c00136cc <Fs::setcwd(Process*, char*)+0x39>
c00136fd:	8b 14 85 80 ea 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1580]
c0013704:	b8 05 00 00 00       	mov    eax,0x5
c0013709:	85 d2                	test   edx,edx
c001370b:	0f 84 b2 00 00 00    	je     c00137c3 <Fs::setcwd(Process*, char*)+0x130>
c0013711:	b8 06 00 00 00       	mov    eax,0x6
c0013716:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c001371d:	0f 85 92 00 00 00    	jne    c00137b5 <Fs::setcwd(Process*, char*)+0x122>
c0013723:	e9 9b 00 00 00       	jmp    c00137c3 <Fs::setcwd(Process*, char*)+0x130>
c0013728:	83 ec 0c             	sub    esp,0xc
c001372b:	68 14 01 00 00       	push   0x114
c0013730:	e8 16 c1 ff ff       	call   c000f84b <malloc>
c0013735:	83 c4 0c             	add    esp,0xc
c0013738:	89 c3                	mov    ebx,eax
c001373a:	55                   	push   ebp
c001373b:	56                   	push   esi
c001373c:	50                   	push   eax
c001373d:	e8 e0 fb ff ff       	call   c0013322 <File::File(char const*, Process*)>
c0013742:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013747:	83 c4 0c             	add    esp,0xc
c001374a:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001374e:	50                   	push   eax
c001374f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013753:	50                   	push   eax
c0013754:	53                   	push   ebx
c0013755:	e8 d8 fe ff ff       	call   c0013632 <File::stat(unsigned long long*, bool*)>
c001375a:	83 c4 10             	add    esp,0x10
c001375d:	83 f8 02             	cmp    eax,0x2
c0013760:	74 04                	je     c0013766 <Fs::setcwd(Process*, char*)+0xd3>
c0013762:	85 c0                	test   eax,eax
c0013764:	74 1c                	je     c0013782 <Fs::setcwd(Process*, char*)+0xef>
c0013766:	b8 01 00 00 00       	mov    eax,0x1
c001376b:	85 db                	test   ebx,ebx
c001376d:	74 54                	je     c00137c3 <Fs::setcwd(Process*, char*)+0x130>
c001376f:	83 ec 0c             	sub    esp,0xc
c0013772:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013774:	53                   	push   ebx
c0013775:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013778:	83 c4 10             	add    esp,0x10
c001377b:	b8 01 00 00 00       	mov    eax,0x1
c0013780:	eb 41                	jmp    c00137c3 <Fs::setcwd(Process*, char*)+0x130>
c0013782:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0013787:	75 1c                	jne    c00137a5 <Fs::setcwd(Process*, char*)+0x112>
c0013789:	b8 02 00 00 00       	mov    eax,0x2
c001378e:	85 db                	test   ebx,ebx
c0013790:	74 31                	je     c00137c3 <Fs::setcwd(Process*, char*)+0x130>
c0013792:	83 ec 0c             	sub    esp,0xc
c0013795:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013797:	53                   	push   ebx
c0013798:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001379b:	83 c4 10             	add    esp,0x10
c001379e:	b8 02 00 00 00       	mov    eax,0x2
c00137a3:	eb 1e                	jmp    c00137c3 <Fs::setcwd(Process*, char*)+0x130>
c00137a5:	85 db                	test   ebx,ebx
c00137a7:	74 0c                	je     c00137b5 <Fs::setcwd(Process*, char*)+0x122>
c00137a9:	83 ec 0c             	sub    esp,0xc
c00137ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137ae:	53                   	push   ebx
c00137af:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00137b2:	83 c4 10             	add    esp,0x10
c00137b5:	50                   	push   eax
c00137b6:	50                   	push   eax
c00137b7:	56                   	push   esi
c00137b8:	57                   	push   edi
c00137b9:	e8 7e d0 fe ff       	call   c000083c <strcpy>
c00137be:	83 c4 10             	add    esp,0x10
c00137c1:	31 c0                	xor    eax,eax
c00137c3:	81 c4 1c 02 00 00    	add    esp,0x21c
c00137c9:	5b                   	pop    ebx
c00137ca:	5e                   	pop    esi
c00137cb:	5f                   	pop    edi
c00137cc:	5d                   	pop    ebp
c00137cd:	c3                   	ret    

c00137ce <Directory::Directory(char const*, Process*)>:
c00137ce:	83 ec 0c             	sub    esp,0xc
c00137d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137d5:	83 ec 08             	sub    esp,0x8
c00137d8:	6a 00                	push   0x0
c00137da:	50                   	push   eax
c00137db:	e8 cc dd ff ff       	call   c00115ac <UnixFile::UnixFile(int)>
c00137e0:	83 c4 10             	add    esp,0x10
c00137e3:	ba 40 ab 02 c0       	mov    edx,0xc002ab40
c00137e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137ec:	89 10                	mov    DWORD PTR [eax],edx
c00137ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00137f2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00137f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137fc:	83 c0 0d             	add    eax,0xd
c00137ff:	83 ec 04             	sub    esp,0x4
c0013802:	52                   	push   edx
c0013803:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013807:	50                   	push   eax
c0013808:	e8 6b f9 ff ff       	call   c0013178 <Fs::standardiseFiles(char*, char const*, char const*)>
c001380d:	83 c4 10             	add    esp,0x10
c0013810:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013814:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013817:	8d 50 bf             	lea    edx,[eax-0x41]
c001381a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001381e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013828:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001382c:	90                   	nop
c001382d:	83 c4 0c             	add    esp,0xc
c0013830:	c3                   	ret    
c0013831:	90                   	nop

c0013832 <Directory::open()>:
c0013832:	53                   	push   ebx
c0013833:	b8 0b 00 00 00       	mov    eax,0xb
c0013838:	83 ec 08             	sub    esp,0x8
c001383b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001383f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013846:	80 fa 19             	cmp    dl,0x19
c0013849:	77 3d                	ja     c0013888 <Directory::open()+0x56>
c001384b:	8b 14 95 80 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1580]
c0013852:	85 d2                	test   edx,edx
c0013854:	74 32                	je     c0013888 <Directory::open()+0x56>
c0013856:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001385c:	85 d2                	test   edx,edx
c001385e:	74 28                	je     c0013888 <Directory::open()+0x56>
c0013860:	b8 06 00 00 00       	mov    eax,0x6
c0013865:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013869:	75 1d                	jne    c0013888 <Directory::open()+0x56>
c001386b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013871:	50                   	push   eax
c0013872:	8b 02                	mov    eax,DWORD PTR [edx]
c0013874:	51                   	push   ecx
c0013875:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013878:	51                   	push   ecx
c0013879:	52                   	push   edx
c001387a:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c001387d:	83 c4 10             	add    esp,0x10
c0013880:	85 c0                	test   eax,eax
c0013882:	75 04                	jne    c0013888 <Directory::open()+0x56>
c0013884:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013888:	83 c4 08             	add    esp,0x8
c001388b:	5b                   	pop    ebx
c001388c:	c3                   	ret    
c001388d:	90                   	nop

c001388e <Directory::close()>:
c001388e:	53                   	push   ebx
c001388f:	b8 0b 00 00 00       	mov    eax,0xb
c0013894:	83 ec 08             	sub    esp,0x8
c0013897:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001389b:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00138a2:	80 fa 19             	cmp    dl,0x19
c00138a5:	77 41                	ja     c00138e8 <Directory::close()+0x5a>
c00138a7:	8b 1c 95 80 ea 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1580]
c00138ae:	85 db                	test   ebx,ebx
c00138b0:	74 36                	je     c00138e8 <Directory::close()+0x5a>
c00138b2:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00138b9:	74 2d                	je     c00138e8 <Directory::close()+0x5a>
c00138bb:	b8 05 00 00 00       	mov    eax,0x5
c00138c0:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00138c4:	74 22                	je     c00138e8 <Directory::close()+0x5a>
c00138c6:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00138ca:	8b 04 95 80 ea 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1580]
c00138d1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00138d7:	53                   	push   ebx
c00138d8:	53                   	push   ebx
c00138d9:	8b 10                	mov    edx,DWORD PTR [eax]
c00138db:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00138e1:	50                   	push   eax
c00138e2:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00138e5:	83 c4 10             	add    esp,0x10
c00138e8:	83 c4 08             	add    esp,0x8
c00138eb:	5b                   	pop    ebx
c00138ec:	c3                   	ret    
c00138ed:	90                   	nop

c00138ee <Directory::unlink()>:
c00138ee:	83 ec 0c             	sub    esp,0xc
c00138f1:	b8 0b 00 00 00       	mov    eax,0xb
c00138f6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00138fa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013901:	80 f9 19             	cmp    cl,0x19
c0013904:	77 2f                	ja     c0013935 <Directory::unlink()+0x47>
c0013906:	8b 0c 8d 80 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1580]
c001390d:	85 c9                	test   ecx,ecx
c001390f:	74 24                	je     c0013935 <Directory::unlink()+0x47>
c0013911:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013917:	85 c9                	test   ecx,ecx
c0013919:	74 1a                	je     c0013935 <Directory::unlink()+0x47>
c001391b:	b8 06 00 00 00       	mov    eax,0x6
c0013920:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013924:	75 0f                	jne    c0013935 <Directory::unlink()+0x47>
c0013926:	83 c2 0d             	add    edx,0xd
c0013929:	50                   	push   eax
c001392a:	50                   	push   eax
c001392b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001392d:	52                   	push   edx
c001392e:	51                   	push   ecx
c001392f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013932:	83 c4 10             	add    esp,0x10
c0013935:	83 c4 0c             	add    esp,0xc
c0013938:	c3                   	ret    
c0013939:	90                   	nop

c001393a <Directory::rename(char const*)>:
c001393a:	83 ec 0c             	sub    esp,0xc
c001393d:	b8 0b 00 00 00       	mov    eax,0xb
c0013942:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013946:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001394d:	80 f9 19             	cmp    cl,0x19
c0013950:	77 32                	ja     c0013984 <Directory::rename(char const*)+0x4a>
c0013952:	8b 0c 8d 80 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1580]
c0013959:	85 c9                	test   ecx,ecx
c001395b:	74 27                	je     c0013984 <Directory::rename(char const*)+0x4a>
c001395d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013963:	85 c9                	test   ecx,ecx
c0013965:	74 1d                	je     c0013984 <Directory::rename(char const*)+0x4a>
c0013967:	b8 06 00 00 00       	mov    eax,0x6
c001396c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013970:	75 12                	jne    c0013984 <Directory::rename(char const*)+0x4a>
c0013972:	83 c2 0d             	add    edx,0xd
c0013975:	50                   	push   eax
c0013976:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013978:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001397c:	52                   	push   edx
c001397d:	51                   	push   ecx
c001397e:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013981:	83 c4 10             	add    esp,0x10
c0013984:	83 c4 0c             	add    esp,0xc
c0013987:	c3                   	ret    

c0013988 <Directory::exists()>:
c0013988:	83 ec 0c             	sub    esp,0xc
c001398b:	31 c0                	xor    eax,eax
c001398d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013991:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013998:	80 f9 19             	cmp    cl,0x19
c001399b:	77 24                	ja     c00139c1 <Directory::exists()+0x39>
c001399d:	8b 0c 8d 80 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1580]
c00139a4:	85 c9                	test   ecx,ecx
c00139a6:	74 19                	je     c00139c1 <Directory::exists()+0x39>
c00139a8:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00139ae:	85 c9                	test   ecx,ecx
c00139b0:	74 0f                	je     c00139c1 <Directory::exists()+0x39>
c00139b2:	83 c2 0d             	add    edx,0xd
c00139b5:	50                   	push   eax
c00139b6:	50                   	push   eax
c00139b7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00139b9:	52                   	push   edx
c00139ba:	51                   	push   ecx
c00139bb:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00139be:	83 c4 10             	add    esp,0x10
c00139c1:	83 c4 0c             	add    esp,0xc
c00139c4:	c3                   	ret    
c00139c5:	90                   	nop

c00139c6 <Directory::read(dirent*)>:
c00139c6:	83 ec 1c             	sub    esp,0x1c
c00139c9:	b8 0b 00 00 00       	mov    eax,0xb
c00139ce:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00139d2:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00139d9:	80 fa 19             	cmp    dl,0x19
c00139dc:	77 30                	ja     c0013a0e <Directory::read(dirent*)+0x48>
c00139de:	8b 14 95 80 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1580]
c00139e5:	85 d2                	test   edx,edx
c00139e7:	74 25                	je     c0013a0e <Directory::read(dirent*)+0x48>
c00139e9:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00139f0:	74 1c                	je     c0013a0e <Directory::read(dirent*)+0x48>
c00139f2:	83 ec 0c             	sub    esp,0xc
c00139f5:	8b 01                	mov    eax,DWORD PTR [ecx]
c00139f7:	8d 54 24 18          	lea    edx,[esp+0x18]
c00139fb:	52                   	push   edx
c00139fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013a00:	6a 00                	push   0x0
c0013a02:	68 10 01 00 00       	push   0x110
c0013a07:	51                   	push   ecx
c0013a08:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013a0b:	83 c4 20             	add    esp,0x20
c0013a0e:	83 c4 1c             	add    esp,0x1c
c0013a11:	c3                   	ret    

c0013a12 <Directory::create()>:
c0013a12:	83 ec 0c             	sub    esp,0xc
c0013a15:	b8 0b 00 00 00       	mov    eax,0xb
c0013a1a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a1e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a25:	80 f9 19             	cmp    cl,0x19
c0013a28:	77 2f                	ja     c0013a59 <Directory::create()+0x47>
c0013a2a:	8b 0c 8d 80 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1580]
c0013a31:	85 c9                	test   ecx,ecx
c0013a33:	74 24                	je     c0013a59 <Directory::create()+0x47>
c0013a35:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a3b:	85 c9                	test   ecx,ecx
c0013a3d:	74 1a                	je     c0013a59 <Directory::create()+0x47>
c0013a3f:	b8 06 00 00 00       	mov    eax,0x6
c0013a44:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013a48:	75 0f                	jne    c0013a59 <Directory::create()+0x47>
c0013a4a:	83 c2 0d             	add    edx,0xd
c0013a4d:	50                   	push   eax
c0013a4e:	50                   	push   eax
c0013a4f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a51:	52                   	push   edx
c0013a52:	51                   	push   ecx
c0013a53:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013a56:	83 c4 10             	add    esp,0x10
c0013a59:	83 c4 0c             	add    esp,0xc
c0013a5c:	c3                   	ret    
c0013a5d:	90                   	nop

c0013a5e <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013a5e:	b8 0a 00 00 00       	mov    eax,0xa
c0013a63:	c3                   	ret    

c0013a64 <Bus::Bus(char const*)>:
c0013a64:	83 ec 0c             	sub    esp,0xc
c0013a67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a6b:	83 ec 08             	sub    esp,0x8
c0013a6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a72:	50                   	push   eax
c0013a73:	e8 68 09 00 00       	call   c00143e0 <Device::Device(char const*)>
c0013a78:	83 c4 10             	add    esp,0x10
c0013a7b:	ba 5c ab 02 c0       	mov    edx,0xc002ab5c
c0013a80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a84:	89 10                	mov    DWORD PTR [eax],edx
c0013a86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a8a:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013a94:	90                   	nop
c0013a95:	83 c4 0c             	add    esp,0xc
c0013a98:	c3                   	ret    
c0013a99:	90                   	nop

c0013a9a <Bus::~Bus()>:
c0013a9a:	83 ec 0c             	sub    esp,0xc
c0013a9d:	ba 5c ab 02 c0       	mov    edx,0xc002ab5c
c0013aa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013aa6:	89 10                	mov    DWORD PTR [eax],edx
c0013aa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013aac:	83 ec 0c             	sub    esp,0xc
c0013aaf:	50                   	push   eax
c0013ab0:	e8 0d 06 00 00       	call   c00140c2 <Device::~Device()>
c0013ab5:	83 c4 10             	add    esp,0x10
c0013ab8:	90                   	nop
c0013ab9:	83 c4 0c             	add    esp,0xc
c0013abc:	c3                   	ret    
c0013abd:	90                   	nop

c0013abe <Bus::~Bus()>:
c0013abe:	83 ec 0c             	sub    esp,0xc
c0013ac1:	83 ec 0c             	sub    esp,0xc
c0013ac4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ac8:	e8 cd ff ff ff       	call   c0013a9a <Bus::~Bus()>
c0013acd:	83 c4 10             	add    esp,0x10
c0013ad0:	83 ec 08             	sub    esp,0x8
c0013ad3:	68 58 01 00 00       	push   0x158
c0013ad8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013adc:	e8 02 f2 ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0013ae1:	83 c4 10             	add    esp,0x10
c0013ae4:	83 c4 0c             	add    esp,0xc
c0013ae7:	c3                   	ret    

c0013ae8 <Buzzer::Buzzer(char const*)>:
c0013ae8:	83 ec 0c             	sub    esp,0xc
c0013aeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013aef:	83 ec 08             	sub    esp,0x8
c0013af2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013af6:	50                   	push   eax
c0013af7:	e8 e4 08 00 00       	call   c00143e0 <Device::Device(char const*)>
c0013afc:	83 c4 10             	add    esp,0x10
c0013aff:	ba 88 ab 02 c0       	mov    edx,0xc002ab88
c0013b04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b08:	89 10                	mov    DWORD PTR [eax],edx
c0013b0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b0e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013b18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b1c:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013b26:	90                   	nop
c0013b27:	83 c4 0c             	add    esp,0xc
c0013b2a:	c3                   	ret    
c0013b2b:	90                   	nop

c0013b2c <Buzzer::~Buzzer()>:
c0013b2c:	83 ec 0c             	sub    esp,0xc
c0013b2f:	ba 88 ab 02 c0       	mov    edx,0xc002ab88
c0013b34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b38:	89 10                	mov    DWORD PTR [eax],edx
c0013b3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b3e:	83 ec 0c             	sub    esp,0xc
c0013b41:	50                   	push   eax
c0013b42:	e8 7b 05 00 00       	call   c00140c2 <Device::~Device()>
c0013b47:	83 c4 10             	add    esp,0x10
c0013b4a:	90                   	nop
c0013b4b:	83 c4 0c             	add    esp,0xc
c0013b4e:	c3                   	ret    
c0013b4f:	90                   	nop

c0013b50 <Buzzer::~Buzzer()>:
c0013b50:	83 ec 0c             	sub    esp,0xc
c0013b53:	83 ec 0c             	sub    esp,0xc
c0013b56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b5a:	e8 cd ff ff ff       	call   c0013b2c <Buzzer::~Buzzer()>
c0013b5f:	83 c4 10             	add    esp,0x10
c0013b62:	83 ec 08             	sub    esp,0x8
c0013b65:	68 5c 01 00 00       	push   0x15c
c0013b6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b6e:	e8 70 f1 ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0013b73:	83 c4 10             	add    esp,0x10
c0013b76:	83 c4 0c             	add    esp,0xc
c0013b79:	c3                   	ret    

c0013b7a <Buzzer::stop()>:
c0013b7a:	83 ec 14             	sub    esp,0x14
c0013b7d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b81:	8b 10                	mov    edx,DWORD PTR [eax]
c0013b83:	6a 00                	push   0x0
c0013b85:	50                   	push   eax
c0013b86:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013b89:	83 c4 1c             	add    esp,0x1c
c0013b8c:	c3                   	ret    

c0013b8d <beepThread(void*)>:
c0013b8d:	53                   	push   ebx
c0013b8e:	83 ec 08             	sub    esp,0x8
c0013b91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013b95:	e8 44 a1 00 00       	call   c001dcde <unlockScheduler()>
c0013b9a:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013b9f:	52                   	push   edx
c0013ba0:	52                   	push   edx
c0013ba1:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013ba7:	52                   	push   edx
c0013ba8:	50                   	push   eax
c0013ba9:	e8 b8 a6 00 00       	call   c001e266 <nanoSleep(unsigned long long)>
c0013bae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013bb1:	e8 c4 ff ff ff       	call   c0013b7a <Buzzer::stop()>
c0013bb6:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013bbe:	83 c4 18             	add    esp,0x18
c0013bc1:	5b                   	pop    ebx
c0013bc2:	e9 e5 a5 00 00       	jmp    c001e1ac <blockTask(TaskState)>
c0013bc7:	90                   	nop

c0013bc8 <Buzzer::beep(int, int, bool)>:
c0013bc8:	57                   	push   edi
c0013bc9:	56                   	push   esi
c0013bca:	53                   	push   ebx
c0013bcb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013bcf:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013bd3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013bd7:	52                   	push   edx
c0013bd8:	52                   	push   edx
c0013bd9:	8b 06                	mov    eax,DWORD PTR [esi]
c0013bdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bdf:	56                   	push   esi
c0013be0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013be3:	83 c4 10             	add    esp,0x10
c0013be6:	89 f8                	mov    eax,edi
c0013be8:	84 c0                	test   al,al
c0013bea:	74 1f                	je     c0013c0b <Buzzer::beep(int, int, bool)+0x43>
c0013bec:	50                   	push   eax
c0013bed:	50                   	push   eax
c0013bee:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013bf4:	99                   	cdq    
c0013bf5:	52                   	push   edx
c0013bf6:	50                   	push   eax
c0013bf7:	e8 6a a6 00 00       	call   c001e266 <nanoSleep(unsigned long long)>
c0013bfc:	83 c4 10             	add    esp,0x10
c0013bff:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013c03:	5b                   	pop    ebx
c0013c04:	5e                   	pop    esi
c0013c05:	5f                   	pop    edi
c0013c06:	e9 6f ff ff ff       	jmp    c0013b7a <Buzzer::stop()>
c0013c0b:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013c11:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0013c16:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013c1e:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013c22:	c7 44 24 14 8d 3b 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013b8d
c0013c2a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013c2e:	5b                   	pop    ebx
c0013c2f:	5e                   	pop    esi
c0013c30:	5f                   	pop    edi
c0013c31:	e9 d8 a1 00 00       	jmp    c001de0e <Process::createThread(void (*)(void*), void*, int)>

c0013c36 <User::loadClockSettings(int)>:
c0013c36:	53                   	push   ebx
c0013c37:	83 ec 14             	sub    esp,0x14
c0013c3a:	68 14 01 00 00       	push   0x114
c0013c3f:	e8 07 bc ff ff       	call   c000f84b <malloc>
c0013c44:	83 c4 0c             	add    esp,0xc
c0013c47:	89 c3                	mov    ebx,eax
c0013c49:	ff 35 d4 19 03 c0    	push   DWORD PTR ds:0xc00319d4
c0013c4f:	68 b0 ab 02 c0       	push   0xc002abb0
c0013c54:	50                   	push   eax
c0013c55:	e8 c8 f6 ff ff       	call   c0013322 <File::File(char const*, Process*)>
c0013c5a:	58                   	pop    eax
c0013c5b:	5a                   	pop    edx
c0013c5c:	6a 01                	push   0x1
c0013c5e:	53                   	push   ebx
c0013c5f:	e8 22 f7 ff ff       	call   c0013386 <File::open(FileOpenMode)>
c0013c64:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c67:	e8 78 f7 ff ff       	call   c00133e4 <File::close()>
c0013c6c:	83 c4 10             	add    esp,0x10
c0013c6f:	85 db                	test   ebx,ebx
c0013c71:	74 0f                	je     c0013c82 <User::loadClockSettings(int)+0x4c>
c0013c73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c75:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013c79:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013c7c:	83 c4 08             	add    esp,0x8
c0013c7f:	5b                   	pop    ebx
c0013c80:	ff e0                	jmp    eax
c0013c82:	83 c4 08             	add    esp,0x8
c0013c85:	5b                   	pop    ebx
c0013c86:	c3                   	ret    
c0013c87:	90                   	nop

c0013c88 <Clock::Clock(char const*)>:
c0013c88:	83 ec 0c             	sub    esp,0xc
c0013c8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c8f:	83 ec 08             	sub    esp,0x8
c0013c92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c96:	50                   	push   eax
c0013c97:	e8 44 07 00 00       	call   c00143e0 <Device::Device(char const*)>
c0013c9c:	83 c4 10             	add    esp,0x10
c0013c9f:	ba d8 ab 02 c0       	mov    edx,0xc002abd8
c0013ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ca8:	89 10                	mov    DWORD PTR [eax],edx
c0013caa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cae:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013cb8:	90                   	nop
c0013cb9:	83 c4 0c             	add    esp,0xc
c0013cbc:	c3                   	ret    
c0013cbd:	90                   	nop

c0013cbe <Clock::~Clock()>:
c0013cbe:	83 ec 0c             	sub    esp,0xc
c0013cc1:	ba d8 ab 02 c0       	mov    edx,0xc002abd8
c0013cc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cca:	89 10                	mov    DWORD PTR [eax],edx
c0013ccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cd0:	83 ec 0c             	sub    esp,0xc
c0013cd3:	50                   	push   eax
c0013cd4:	e8 e9 03 00 00       	call   c00140c2 <Device::~Device()>
c0013cd9:	83 c4 10             	add    esp,0x10
c0013cdc:	90                   	nop
c0013cdd:	83 c4 0c             	add    esp,0xc
c0013ce0:	c3                   	ret    
c0013ce1:	90                   	nop

c0013ce2 <Clock::~Clock()>:
c0013ce2:	83 ec 0c             	sub    esp,0xc
c0013ce5:	83 ec 0c             	sub    esp,0xc
c0013ce8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cec:	e8 cd ff ff ff       	call   c0013cbe <Clock::~Clock()>
c0013cf1:	83 c4 10             	add    esp,0x10
c0013cf4:	83 ec 08             	sub    esp,0x8
c0013cf7:	68 58 01 00 00       	push   0x158
c0013cfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d00:	e8 de ef ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0013d05:	83 c4 10             	add    esp,0x10
c0013d08:	83 c4 0c             	add    esp,0xc
c0013d0b:	c3                   	ret    

c0013d0c <Clock::timeInSecondsLocal()>:
c0013d0c:	53                   	push   ebx
c0013d0d:	83 ec 14             	sub    esp,0x14
c0013d10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d14:	8b 10                	mov    edx,DWORD PTR [eax]
c0013d16:	50                   	push   eax
c0013d17:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013d1a:	0f b6 0d fc e5 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e5fc
c0013d21:	03 0d 00 e6 02 c0    	add    ecx,DWORD PTR ds:0xc002e600
c0013d27:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013d2d:	89 cb                	mov    ebx,ecx
c0013d2f:	c1 fb 1f             	sar    ebx,0x1f
c0013d32:	01 c8                	add    eax,ecx
c0013d34:	11 da                	adc    edx,ebx
c0013d36:	83 c4 10             	add    esp,0x10
c0013d39:	31 c9                	xor    ecx,ecx
c0013d3b:	80 3d fd e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e5fd,0x0
c0013d42:	74 05                	je     c0013d49 <Clock::timeInSecondsLocal()+0x3d>
c0013d44:	b9 08 07 00 00       	mov    ecx,0x708
c0013d49:	31 db                	xor    ebx,ebx
c0013d4b:	01 c8                	add    eax,ecx
c0013d4d:	11 da                	adc    edx,ebx
c0013d4f:	83 c4 08             	add    esp,0x8
c0013d52:	5b                   	pop    ebx
c0013d53:	c3                   	ret    

c0013d54 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013d54:	57                   	push   edi
c0013d55:	56                   	push   esi
c0013d56:	53                   	push   ebx
c0013d57:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013d5b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013d5f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013d61:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013d65:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013d68:	0f b6 05 fc e5 02 c0 	movzx  eax,BYTE PTR ds:0xc002e5fc
c0013d6f:	03 05 00 e6 02 c0    	add    eax,DWORD PTR ds:0xc002e600
c0013d75:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013d7b:	99                   	cdq    
c0013d7c:	29 c6                	sub    esi,eax
c0013d7e:	19 d7                	sbb    edi,edx
c0013d80:	89 f0                	mov    eax,esi
c0013d82:	89 fa                	mov    edx,edi
c0013d84:	31 f6                	xor    esi,esi
c0013d86:	80 3d fd e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e5fd,0x0
c0013d8d:	74 05                	je     c0013d94 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013d8f:	be 08 07 00 00       	mov    esi,0x708
c0013d94:	31 ff                	xor    edi,edi
c0013d96:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013d9a:	29 f0                	sub    eax,esi
c0013d9c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013da0:	19 fa                	sbb    edx,edi
c0013da2:	89 d8                	mov    eax,ebx
c0013da4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013da8:	5b                   	pop    ebx
c0013da9:	5e                   	pop    esi
c0013daa:	5f                   	pop    edi
c0013dab:	ff e0                	jmp    eax

c0013dad <datetimeToSeconds(datetime_t)>:
c0013dad:	55                   	push   ebp
c0013dae:	57                   	push   edi
c0013daf:	56                   	push   esi
c0013db0:	53                   	push   ebx
c0013db1:	83 ec 14             	sub    esp,0x14
c0013db4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013db8:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013dbc:	89 d3                	mov    ebx,edx
c0013dbe:	0f b6 c6             	movzx  eax,dh
c0013dc1:	c1 eb 10             	shr    ebx,0x10
c0013dc4:	48                   	dec    eax
c0013dc5:	66 81 eb 6c 07       	sub    bx,0x76c
c0013dca:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013dce:	0f b6 f5             	movzx  esi,ch
c0013dd1:	89 cf                	mov    edi,ecx
c0013dd3:	6b f6 3c             	imul   esi,esi,0x3c
c0013dd6:	c1 ef 10             	shr    edi,0x10
c0013dd9:	0f b6 c9             	movzx  ecx,cl
c0013ddc:	89 f8                	mov    eax,edi
c0013dde:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013de4:	0f b6 f8             	movzx  edi,al
c0013de7:	0f b6 d2             	movzx  edx,dl
c0013dea:	01 fe                	add    esi,edi
c0013dec:	01 f1                	add    ecx,esi
c0013dee:	0f b7 f3             	movzx  esi,bx
c0013df1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013df5:	c1 f9 1f             	sar    ecx,0x1f
c0013df8:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013dfd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013e01:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013e06:	8b 0c 8d 20 ac 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd53e0]
c0013e0d:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013e11:	76 29                	jbe    c0013e3c <datetimeToSeconds(datetime_t)+0x8f>
c0013e13:	f6 c3 03             	test   bl,0x3
c0013e16:	75 24                	jne    c0013e3c <datetimeToSeconds(datetime_t)+0x8f>
c0013e18:	31 d2                	xor    edx,edx
c0013e1a:	bf 64 00 00 00       	mov    edi,0x64
c0013e1f:	89 d8                	mov    eax,ebx
c0013e21:	66 f7 f7             	div    di
c0013e24:	66 85 d2             	test   dx,dx
c0013e27:	75 12                	jne    c0013e3b <datetimeToSeconds(datetime_t)+0x8e>
c0013e29:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013e2f:	bf 90 01 00 00       	mov    edi,0x190
c0013e34:	99                   	cdq    
c0013e35:	f7 ff                	idiv   edi
c0013e37:	85 d2                	test   edx,edx
c0013e39:	75 01                	jne    c0013e3c <datetimeToSeconds(datetime_t)+0x8f>
c0013e3b:	41                   	inc    ecx
c0013e3c:	66 83 fb 46          	cmp    bx,0x46
c0013e40:	76 45                	jbe    c0013e87 <datetimeToSeconds(datetime_t)+0xda>
c0013e42:	bb 46 00 00 00       	mov    ebx,0x46
c0013e47:	bf 64 00 00 00       	mov    edi,0x64
c0013e4c:	bd 90 01 00 00       	mov    ebp,0x190
c0013e51:	b8 6d 01 00 00       	mov    eax,0x16d
c0013e56:	f6 c3 03             	test   bl,0x3
c0013e59:	75 23                	jne    c0013e7e <datetimeToSeconds(datetime_t)+0xd1>
c0013e5b:	89 d8                	mov    eax,ebx
c0013e5d:	99                   	cdq    
c0013e5e:	f7 ff                	idiv   edi
c0013e60:	b8 6e 01 00 00       	mov    eax,0x16e
c0013e65:	85 d2                	test   edx,edx
c0013e67:	75 15                	jne    c0013e7e <datetimeToSeconds(datetime_t)+0xd1>
c0013e69:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013e6f:	99                   	cdq    
c0013e70:	f7 fd                	idiv   ebp
c0013e72:	83 fa 01             	cmp    edx,0x1
c0013e75:	19 c0                	sbb    eax,eax
c0013e77:	f7 d0                	not    eax
c0013e79:	05 6e 01 00 00       	add    eax,0x16e
c0013e7e:	01 c1                	add    ecx,eax
c0013e80:	43                   	inc    ebx
c0013e81:	39 f3                	cmp    ebx,esi
c0013e83:	7c cc                	jl     c0013e51 <datetimeToSeconds(datetime_t)+0xa4>
c0013e85:	eb 35                	jmp    c0013ebc <datetimeToSeconds(datetime_t)+0x10f>
c0013e87:	74 33                	je     c0013ebc <datetimeToSeconds(datetime_t)+0x10f>
c0013e89:	b8 45 00 00 00       	mov    eax,0x45
c0013e8e:	89 c2                	mov    edx,eax
c0013e90:	83 e2 03             	and    edx,0x3
c0013e93:	39 f0                	cmp    eax,esi
c0013e95:	7e 0f                	jle    c0013ea6 <datetimeToSeconds(datetime_t)+0xf9>
c0013e97:	83 fa 01             	cmp    edx,0x1
c0013e9a:	19 d2                	sbb    edx,edx
c0013e9c:	48                   	dec    eax
c0013e9d:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013ea4:	eb e8                	jmp    c0013e8e <datetimeToSeconds(datetime_t)+0xe1>
c0013ea6:	b8 6d 01 00 00       	mov    eax,0x16d
c0013eab:	85 d2                	test   edx,edx
c0013ead:	75 0b                	jne    c0013eba <datetimeToSeconds(datetime_t)+0x10d>
c0013eaf:	66 83 fb 01          	cmp    bx,0x1
c0013eb3:	19 c0                	sbb    eax,eax
c0013eb5:	05 6e 01 00 00       	add    eax,0x16e
c0013eba:	29 c1                	sub    ecx,eax
c0013ebc:	b8 80 51 01 00       	mov    eax,0x15180
c0013ec1:	f7 e9                	imul   ecx
c0013ec3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013ec7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013ecb:	83 c4 14             	add    esp,0x14
c0013ece:	5b                   	pop    ebx
c0013ecf:	5e                   	pop    esi
c0013ed0:	5f                   	pop    edi
c0013ed1:	5d                   	pop    ebp
c0013ed2:	c3                   	ret    
c0013ed3:	90                   	nop

c0013ed4 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013ed4:	57                   	push   edi
c0013ed5:	56                   	push   esi
c0013ed6:	53                   	push   ebx
c0013ed7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013edb:	8b 06                	mov    eax,DWORD PTR [esi]
c0013edd:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013ee0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ee4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ee8:	e8 c0 fe ff ff       	call   c0013dad <datetimeToSeconds(datetime_t)>
c0013eed:	59                   	pop    ecx
c0013eee:	0f b6 0d fc e5 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e5fc
c0013ef5:	5b                   	pop    ebx
c0013ef6:	03 0d 00 e6 02 c0    	add    ecx,DWORD PTR ds:0xc002e600
c0013efc:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013f02:	89 cb                	mov    ebx,ecx
c0013f04:	c1 fb 1f             	sar    ebx,0x1f
c0013f07:	29 c8                	sub    eax,ecx
c0013f09:	19 da                	sbb    edx,ebx
c0013f0b:	31 c9                	xor    ecx,ecx
c0013f0d:	80 3d fd e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e5fd,0x0
c0013f14:	74 05                	je     c0013f1b <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013f16:	b9 08 07 00 00       	mov    ecx,0x708
c0013f1b:	31 db                	xor    ebx,ebx
c0013f1d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013f21:	29 c8                	sub    eax,ecx
c0013f23:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013f27:	19 da                	sbb    edx,ebx
c0013f29:	89 f8                	mov    eax,edi
c0013f2b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013f2f:	5b                   	pop    ebx
c0013f30:	5e                   	pop    esi
c0013f31:	5f                   	pop    edi
c0013f32:	ff e0                	jmp    eax

c0013f34 <secondsToDatetime(unsigned long long)>:
c0013f34:	55                   	push   ebp
c0013f35:	57                   	push   edi
c0013f36:	56                   	push   esi
c0013f37:	53                   	push   ebx
c0013f38:	83 ec 1c             	sub    esp,0x1c
c0013f3b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013f3f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013f43:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013f47:	6a 00                	push   0x0
c0013f49:	68 80 51 01 00       	push   0x15180
c0013f4e:	55                   	push   ebp
c0013f4f:	57                   	push   edi
c0013f50:	e8 6f 2a 01 00       	call   c00269c4 <__udivdi3>
c0013f55:	83 c4 10             	add    esp,0x10
c0013f58:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013f5e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013f62:	6a 00                	push   0x0
c0013f64:	68 80 51 01 00       	push   0x15180
c0013f69:	55                   	push   ebp
c0013f6a:	57                   	push   edi
c0013f6b:	bf 10 0e 00 00       	mov    edi,0xe10
c0013f70:	e8 4f 2b 01 00       	call   c0026ac4 <__umoddi3>
c0013f75:	83 c4 10             	add    esp,0x10
c0013f78:	99                   	cdq    
c0013f79:	f7 ff                	idiv   edi
c0013f7b:	bf 3c 00 00 00       	mov    edi,0x3c
c0013f80:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013f83:	89 d0                	mov    eax,edx
c0013f85:	99                   	cdq    
c0013f86:	f7 ff                	idiv   edi
c0013f88:	85 db                	test   ebx,ebx
c0013f8a:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013f8d:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013f90:	79 11                	jns    c0013fa3 <secondsToDatetime(unsigned long long)+0x6f>
c0013f92:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013f96:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013f9c:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013fa1:	eb 07                	jmp    c0013faa <secondsToDatetime(unsigned long long)+0x76>
c0013fa3:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013fa8:	89 d8                	mov    eax,ebx
c0013faa:	bf b4 05 00 00       	mov    edi,0x5b4
c0013faf:	99                   	cdq    
c0013fb0:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013fb5:	f7 f9                	idiv   ecx
c0013fb7:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013fbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013fc0:	31 d2                	xor    edx,edx
c0013fc2:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013fca:	01 c3                	add    ebx,eax
c0013fcc:	89 d8                	mov    eax,ebx
c0013fce:	f7 f1                	div    ecx
c0013fd0:	31 d2                	xor    edx,edx
c0013fd2:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013fd5:	89 d8                	mov    eax,ebx
c0013fd7:	f7 f7                	div    edi
c0013fd9:	31 d2                	xor    edx,edx
c0013fdb:	29 c1                	sub    ecx,eax
c0013fdd:	89 d8                	mov    eax,ebx
c0013fdf:	f7 f5                	div    ebp
c0013fe1:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013fe6:	29 c1                	sub    ecx,eax
c0013fe8:	31 d2                	xor    edx,edx
c0013fea:	89 c8                	mov    eax,ecx
c0013fec:	f7 f5                	div    ebp
c0013fee:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013ff3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013ff7:	31 d2                	xor    edx,edx
c0013ff9:	89 c8                	mov    eax,ecx
c0013ffb:	f7 f5                	div    ebp
c0013ffd:	31 d2                	xor    edx,edx
c0013fff:	01 c3                	add    ebx,eax
c0014001:	89 c8                	mov    eax,ecx
c0014003:	f7 f7                	div    edi
c0014005:	bf 99 00 00 00       	mov    edi,0x99
c001400a:	29 c3                	sub    ebx,eax
c001400c:	31 d2                	xor    edx,edx
c001400e:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0014016:	29 c3                	sub    ebx,eax
c0014018:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001401b:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001401e:	bb 05 00 00 00       	mov    ebx,0x5
c0014023:	83 c1 02             	add    ecx,0x2
c0014026:	89 c8                	mov    eax,ecx
c0014028:	f7 f7                	div    edi
c001402a:	31 d2                	xor    edx,edx
c001402c:	89 c7                	mov    edi,eax
c001402e:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0014034:	83 c0 02             	add    eax,0x2
c0014037:	f7 f3                	div    ebx
c0014039:	89 eb                	mov    ebx,ebp
c001403b:	29 c3                	sub    ebx,eax
c001403d:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0014043:	88 1e                	mov    BYTE PTR [esi],bl
c0014045:	19 c0                	sbb    eax,eax
c0014047:	31 d2                	xor    edx,edx
c0014049:	83 e0 0c             	and    eax,0xc
c001404c:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0014050:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0014058:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001405c:	83 f9 01             	cmp    ecx,0x1
c001405f:	0f 96 c2             	setbe  dl
c0014062:	41                   	inc    ecx
c0014063:	01 d0                	add    eax,edx
c0014065:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0014068:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c001406c:	83 c4 1c             	add    esp,0x1c
c001406f:	89 f0                	mov    eax,esi
c0014071:	5b                   	pop    ebx
c0014072:	5e                   	pop    esi
c0014073:	5f                   	pop    edi
c0014074:	5d                   	pop    ebp
c0014075:	c2 04 00             	ret    0x4

c0014078 <Clock::timeInDatetimeLocal()>:
c0014078:	53                   	push   ebx
c0014079:	83 ec 14             	sub    esp,0x14
c001407c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014080:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014084:	e8 83 fc ff ff       	call   c0013d0c <Clock::timeInSecondsLocal()>
c0014089:	83 c4 0c             	add    esp,0xc
c001408c:	52                   	push   edx
c001408d:	50                   	push   eax
c001408e:	53                   	push   ebx
c001408f:	e8 a0 fe ff ff       	call   c0013f34 <secondsToDatetime(unsigned long long)>
c0014094:	89 d8                	mov    eax,ebx
c0014096:	83 c4 14             	add    esp,0x14
c0014099:	5b                   	pop    ebx
c001409a:	c2 04 00             	ret    0x4
c001409d:	90                   	nop

c001409e <Device::hibernate()>:
c001409e:	c3                   	ret    
c001409f:	90                   	nop

c00140a0 <Device::wake()>:
c00140a0:	c3                   	ret    
c00140a1:	90                   	nop

c00140a2 <Device::detect()>:
c00140a2:	c3                   	ret    
c00140a3:	90                   	nop

c00140a4 <Device::disableLegacy()>:
c00140a4:	c3                   	ret    
c00140a5:	90                   	nop

c00140a6 <Device::powerSaving(PowerSavingLevel)>:
c00140a6:	c3                   	ret    
c00140a7:	90                   	nop

c00140a8 <DriverlessDevice::close(int, int, void*)>:
c00140a8:	31 c0                	xor    eax,eax
c00140aa:	c3                   	ret    
c00140ab:	90                   	nop

c00140ac <DriverlessDevice::detect()>:
c00140ac:	c3                   	ret    
c00140ad:	90                   	nop

c00140ae <DriverlessDevice::open(int, int, void*)>:
c00140ae:	83 ec 18             	sub    esp,0x18
c00140b1:	68 50 ac 02 c0       	push   0xc002ac50
c00140b6:	e8 46 64 00 00       	call   c001a501 <Krnl::panic(char const*)>
c00140bb:	83 c8 ff             	or     eax,0xffffffff
c00140be:	83 c4 1c             	add    esp,0x1c
c00140c1:	c3                   	ret    

c00140c2 <Device::~Device()>:
c00140c2:	ba 78 ac 02 c0       	mov    edx,0xc002ac78
c00140c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00140cb:	89 10                	mov    DWORD PTR [eax],edx
c00140cd:	90                   	nop
c00140ce:	c3                   	ret    
c00140cf:	90                   	nop

c00140d0 <Device::~Device()>:
c00140d0:	83 ec 0c             	sub    esp,0xc
c00140d3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00140d7:	e8 e6 ff ff ff       	call   c00140c2 <Device::~Device()>
c00140dc:	83 c4 04             	add    esp,0x4
c00140df:	83 ec 08             	sub    esp,0x8
c00140e2:	68 58 01 00 00       	push   0x158
c00140e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140eb:	e8 f3 eb ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c00140f0:	83 c4 10             	add    esp,0x10
c00140f3:	83 c4 0c             	add    esp,0xc
c00140f6:	c3                   	ret    
c00140f7:	90                   	nop

c00140f8 <Device::findAndLoadDriver()>:
c00140f8:	c3                   	ret    
c00140f9:	90                   	nop

c00140fa <Device::preOpenPCI(PCIDeviceInfo)>:
c00140fa:	57                   	push   edi
c00140fb:	b9 09 00 00 00       	mov    ecx,0x9
c0014100:	56                   	push   esi
c0014101:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014105:	8d 74 24 10          	lea    esi,[esp+0x10]
c0014109:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0014113:	81 c7 18 01 00 00    	add    edi,0x118
c0014119:	fc                   	cld    
c001411a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001411c:	5e                   	pop    esi
c001411d:	5f                   	pop    edi
c001411e:	c3                   	ret    
c001411f:	90                   	nop

c0014120 <Device::preOpenACPI(void*, char*, char*)>:
c0014120:	56                   	push   esi
c0014121:	53                   	push   ebx
c0014122:	83 ec 08             	sub    esp,0x8
c0014125:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014129:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001412d:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0014137:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001413b:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0014141:	6a 1e                	push   0x1e
c0014143:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0014149:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001414d:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0014153:	50                   	push   eax
c0014154:	e8 f3 c5 fe ff       	call   c000074c <memcpy>
c0014159:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c001415d:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0014161:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0014169:	83 c4 14             	add    esp,0x14
c001416c:	5b                   	pop    ebx
c001416d:	5e                   	pop    esi
c001416e:	e9 d9 c5 fe ff       	jmp    c000074c <memcpy>
c0014173:	90                   	nop

c0014174 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014174:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014178:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001417d:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0014184:	75 0b                	jne    c0014191 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0014186:	8b 00                	mov    eax,DWORD PTR [eax]
c0014188:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001418c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001418f:	eb 1e                	jmp    c00141af <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0014191:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0014196:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001419c:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00141a2:	8b 08                	mov    ecx,DWORD PTR [eax]
c00141a4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00141a8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00141ac:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00141af:	ff e0                	jmp    eax
c00141b1:	90                   	nop

c00141b2 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00141b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141b6:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00141bb:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00141c2:	75 0b                	jne    c00141cf <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c00141c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00141c6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00141ca:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00141cd:	eb 1e                	jmp    c00141ed <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c00141cf:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c00141d4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00141da:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00141e0:	8b 08                	mov    ecx,DWORD PTR [eax]
c00141e2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00141e6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00141ea:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c00141ed:	ff e0                	jmp    eax
c00141ef:	90                   	nop

c00141f0 <Device::addChild(Device*)>:
c00141f0:	53                   	push   ebx
c00141f1:	83 ec 08             	sub    esp,0x8
c00141f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00141f8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00141fc:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0014202:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0014208:	8b 13                	mov    edx,DWORD PTR [ebx]
c001420a:	85 d2                	test   edx,edx
c001420c:	74 04                	je     c0014212 <Device::addChild(Device*)+0x22>
c001420e:	89 d3                	mov    ebx,edx
c0014210:	eb f6                	jmp    c0014208 <Device::addChild(Device*)+0x18>
c0014212:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0014215:	83 ec 0c             	sub    esp,0xc
c0014218:	6a 08                	push   0x8
c001421a:	e8 2c b6 ff ff       	call   c000f84b <malloc>
c001421f:	89 03                	mov    DWORD PTR [ebx],eax
c0014221:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014227:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001422e:	83 c4 18             	add    esp,0x18
c0014231:	5b                   	pop    ebx
c0014232:	c3                   	ret    
c0014233:	90                   	nop

c0014234 <Device::removeAllChildren()>:
c0014234:	56                   	push   esi
c0014235:	53                   	push   ebx
c0014236:	52                   	push   edx
c0014237:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001423b:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0014241:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014244:	74 17                	je     c001425d <Device::removeAllChildren()+0x29>
c0014246:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0014249:	85 c0                	test   eax,eax
c001424b:	74 0c                	je     c0014259 <Device::removeAllChildren()+0x25>
c001424d:	83 ec 0c             	sub    esp,0xc
c0014250:	8b 10                	mov    edx,DWORD PTR [eax]
c0014252:	50                   	push   eax
c0014253:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0014256:	83 c4 10             	add    esp,0x10
c0014259:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001425b:	eb e4                	jmp    c0014241 <Device::removeAllChildren()+0xd>
c001425d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0014263:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014269:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001426f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014276:	58                   	pop    eax
c0014277:	5b                   	pop    ebx
c0014278:	5e                   	pop    esi
c0014279:	c3                   	ret    

c001427a <Device::hibernateAll()>:
c001427a:	53                   	push   ebx
c001427b:	83 ec 14             	sub    esp,0x14
c001427e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014282:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014284:	53                   	push   ebx
c0014285:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014288:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001428e:	83 c4 10             	add    esp,0x10
c0014291:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014294:	74 0f                	je     c00142a5 <Device::hibernateAll()+0x2b>
c0014296:	83 ec 0c             	sub    esp,0xc
c0014299:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001429c:	e8 d9 ff ff ff       	call   c001427a <Device::hibernateAll()>
c00142a1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00142a3:	eb e9                	jmp    c001428e <Device::hibernateAll()+0x14>
c00142a5:	83 c4 08             	add    esp,0x8
c00142a8:	5b                   	pop    ebx
c00142a9:	c3                   	ret    

c00142aa <Device::wakeAll()>:
c00142aa:	53                   	push   ebx
c00142ab:	83 ec 14             	sub    esp,0x14
c00142ae:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00142b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00142b4:	53                   	push   ebx
c00142b5:	ff 50 14             	call   DWORD PTR [eax+0x14]
c00142b8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00142be:	83 c4 10             	add    esp,0x10
c00142c1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00142c4:	74 0f                	je     c00142d5 <Device::wakeAll()+0x2b>
c00142c6:	83 ec 0c             	sub    esp,0xc
c00142c9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00142cc:	e8 d9 ff ff ff       	call   c00142aa <Device::wakeAll()>
c00142d1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00142d3:	eb e9                	jmp    c00142be <Device::wakeAll()+0x14>
c00142d5:	83 c4 08             	add    esp,0x8
c00142d8:	5b                   	pop    ebx
c00142d9:	c3                   	ret    

c00142da <Device::detectAll()>:
c00142da:	53                   	push   ebx
c00142db:	83 ec 14             	sub    esp,0x14
c00142de:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00142e2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00142e4:	53                   	push   ebx
c00142e5:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00142e8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00142ee:	83 c4 10             	add    esp,0x10
c00142f1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00142f4:	74 0f                	je     c0014305 <Device::detectAll()+0x2b>
c00142f6:	83 ec 0c             	sub    esp,0xc
c00142f9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00142fc:	e8 d9 ff ff ff       	call   c00142da <Device::detectAll()>
c0014301:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014303:	eb e9                	jmp    c00142ee <Device::detectAll()+0x14>
c0014305:	83 c4 08             	add    esp,0x8
c0014308:	5b                   	pop    ebx
c0014309:	c3                   	ret    

c001430a <Device::disableLegacyAll()>:
c001430a:	53                   	push   ebx
c001430b:	83 ec 14             	sub    esp,0x14
c001430e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014312:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014314:	53                   	push   ebx
c0014315:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0014318:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001431e:	83 c4 10             	add    esp,0x10
c0014321:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014324:	74 0f                	je     c0014335 <Device::disableLegacyAll()+0x2b>
c0014326:	83 ec 0c             	sub    esp,0xc
c0014329:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001432c:	e8 d9 ff ff ff       	call   c001430a <Device::disableLegacyAll()>
c0014331:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014333:	eb e9                	jmp    c001431e <Device::disableLegacyAll()+0x14>
c0014335:	83 c4 08             	add    esp,0x8
c0014338:	5b                   	pop    ebx
c0014339:	c3                   	ret    

c001433a <Device::loadDriversForAll()>:
c001433a:	53                   	push   ebx
c001433b:	83 ec 08             	sub    esp,0x8
c001433e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014342:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014348:	8b 18                	mov    ebx,DWORD PTR [eax]
c001434a:	85 db                	test   ebx,ebx
c001434c:	74 12                	je     c0014360 <Device::loadDriversForAll()+0x26>
c001434e:	83 ec 0c             	sub    esp,0xc
c0014351:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014354:	e8 e1 ff ff ff       	call   c001433a <Device::loadDriversForAll()>
c0014359:	83 c4 10             	add    esp,0x10
c001435c:	89 d8                	mov    eax,ebx
c001435e:	eb e8                	jmp    c0014348 <Device::loadDriversForAll()+0xe>
c0014360:	83 c4 08             	add    esp,0x8
c0014363:	5b                   	pop    ebx
c0014364:	c3                   	ret    
c0014365:	90                   	nop

c0014366 <Device::closeAll()>:
c0014366:	53                   	push   ebx
c0014367:	83 ec 08             	sub    esp,0x8
c001436a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001436e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014370:	6a 00                	push   0x0
c0014372:	6a 00                	push   0x0
c0014374:	6a 00                	push   0x0
c0014376:	53                   	push   ebx
c0014377:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001437a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014380:	83 c4 10             	add    esp,0x10
c0014383:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014386:	74 0f                	je     c0014397 <Device::closeAll()+0x31>
c0014388:	83 ec 0c             	sub    esp,0xc
c001438b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001438e:	e8 d3 ff ff ff       	call   c0014366 <Device::closeAll()>
c0014393:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014395:	eb e9                	jmp    c0014380 <Device::closeAll()+0x1a>
c0014397:	83 c4 08             	add    esp,0x8
c001439a:	5b                   	pop    ebx
c001439b:	c3                   	ret    

c001439c <Device::powerSavingAll(PowerSavingLevel)>:
c001439c:	56                   	push   esi
c001439d:	53                   	push   ebx
c001439e:	83 ec 0c             	sub    esp,0xc
c00143a1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00143a5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00143a9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143ab:	56                   	push   esi
c00143ac:	53                   	push   ebx
c00143ad:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00143b0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143b6:	83 c4 10             	add    esp,0x10
c00143b9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143bc:	74 0f                	je     c00143cd <Device::powerSavingAll(PowerSavingLevel)+0x31>
c00143be:	52                   	push   edx
c00143bf:	52                   	push   edx
c00143c0:	56                   	push   esi
c00143c1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00143c4:	e8 d3 ff ff ff       	call   c001439c <Device::powerSavingAll(PowerSavingLevel)>
c00143c9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143cb:	eb e9                	jmp    c00143b6 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c00143cd:	58                   	pop    eax
c00143ce:	5b                   	pop    ebx
c00143cf:	5e                   	pop    esi
c00143d0:	c3                   	ret    
c00143d1:	90                   	nop

c00143d2 <Device::setName(char const*)>:
c00143d2:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c00143da:	e9 5d c4 fe ff       	jmp    c000083c <strcpy>
c00143df:	90                   	nop

c00143e0 <Device::Device(char const*)>:
c00143e0:	83 ec 1c             	sub    esp,0x1c
c00143e3:	ba 78 ac 02 c0       	mov    edx,0xc002ac78
c00143e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143ec:	89 10                	mov    DWORD PTR [eax],edx
c00143ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143f2:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c00143fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014400:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001440a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001440e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014418:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001441c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014426:	83 ec 08             	sub    esp,0x8
c0014429:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001442d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014431:	e8 9c ff ff ff       	call   c00143d2 <Device::setName(char const*)>
c0014436:	83 c4 10             	add    esp,0x10
c0014439:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0014441:	83 ec 0c             	sub    esp,0xc
c0014444:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014448:	e8 fe b3 ff ff       	call   c000f84b <malloc>
c001444d:	83 c4 10             	add    esp,0x10
c0014450:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014456:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001445d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014461:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0014467:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001446b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014471:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014477:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001447b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014481:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014488:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001448c:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0014493:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014497:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c001449e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144a2:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00144ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144b0:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00144ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144be:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00144c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144cc:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c00144d6:	90                   	nop
c00144d7:	83 c4 1c             	add    esp,0x1c
c00144da:	c3                   	ret    
c00144db:	90                   	nop

c00144dc <Device::getName()>:
c00144dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00144e0:	05 d0 00 00 00       	add    eax,0xd0
c00144e5:	c3                   	ret    

c00144e6 <DriverlessDevice::DriverlessDevice(char const*)>:
c00144e6:	83 ec 0c             	sub    esp,0xc
c00144e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00144ed:	83 ec 08             	sub    esp,0x8
c00144f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144f4:	50                   	push   eax
c00144f5:	e8 e6 fe ff ff       	call   c00143e0 <Device::Device(char const*)>
c00144fa:	83 c4 10             	add    esp,0x10
c00144fd:	ba a4 ac 02 c0       	mov    edx,0xc002aca4
c0014502:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014506:	89 10                	mov    DWORD PTR [eax],edx
c0014508:	90                   	nop
c0014509:	83 c4 0c             	add    esp,0xc
c001450c:	c3                   	ret    
c001450d:	90                   	nop

c001450e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001450e:	57                   	push   edi
c001450f:	56                   	push   esi
c0014510:	53                   	push   ebx
c0014511:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014515:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014519:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001451d:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0014523:	75 0c                	jne    c0014531 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0014525:	52                   	push   edx
c0014526:	52                   	push   edx
c0014527:	53                   	push   ebx
c0014528:	56                   	push   esi
c0014529:	e8 dc 43 01 00       	call   c002890a <LinkedList<Device>::addElement(Device*)>
c001452e:	83 c4 10             	add    esp,0x10
c0014531:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014537:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001453a:	74 12                	je     c001454e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001453c:	50                   	push   eax
c001453d:	57                   	push   edi
c001453e:	56                   	push   esi
c001453f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014542:	e8 c7 ff ff ff       	call   c001450e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014547:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014549:	83 c4 10             	add    esp,0x10
c001454c:	eb e9                	jmp    c0014537 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001454e:	5b                   	pop    ebx
c001454f:	5e                   	pop    esi
c0014550:	5f                   	pop    edi
c0014551:	c3                   	ret    

c0014552 <getDevicesOfType(DeviceType)>:
c0014552:	53                   	push   ebx
c0014553:	83 ec 14             	sub    esp,0x14
c0014556:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001455a:	53                   	push   ebx
c001455b:	e8 86 44 01 00       	call   c00289e6 <LinkedList<Device>::LinkedList()>
c0014560:	83 c4 0c             	add    esp,0xc
c0014563:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014567:	53                   	push   ebx
c0014568:	ff 35 68 e4 02 c0    	push   DWORD PTR ds:0xc002e468
c001456e:	e8 9b ff ff ff       	call   c001450e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014573:	89 d8                	mov    eax,ebx
c0014575:	83 c4 18             	add    esp,0x18
c0014578:	5b                   	pop    ebx
c0014579:	c2 04 00             	ret    0x4

c001457c <HardDiskController::HardDiskController(char const*)>:
c001457c:	83 ec 0c             	sub    esp,0xc
c001457f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014583:	83 ec 08             	sub    esp,0x8
c0014586:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001458a:	50                   	push   eax
c001458b:	e8 50 fe ff ff       	call   c00143e0 <Device::Device(char const*)>
c0014590:	83 c4 10             	add    esp,0x10
c0014593:	ba d0 ac 02 c0       	mov    edx,0xc002acd0
c0014598:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001459c:	89 10                	mov    DWORD PTR [eax],edx
c001459e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145a2:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00145ac:	90                   	nop
c00145ad:	83 c4 0c             	add    esp,0xc
c00145b0:	c3                   	ret    
c00145b1:	90                   	nop

c00145b2 <HardDiskController::~HardDiskController()>:
c00145b2:	83 ec 0c             	sub    esp,0xc
c00145b5:	ba d0 ac 02 c0       	mov    edx,0xc002acd0
c00145ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145be:	89 10                	mov    DWORD PTR [eax],edx
c00145c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145c4:	83 ec 0c             	sub    esp,0xc
c00145c7:	50                   	push   eax
c00145c8:	e8 f5 fa ff ff       	call   c00140c2 <Device::~Device()>
c00145cd:	83 c4 10             	add    esp,0x10
c00145d0:	90                   	nop
c00145d1:	83 c4 0c             	add    esp,0xc
c00145d4:	c3                   	ret    
c00145d5:	90                   	nop

c00145d6 <HardDiskController::~HardDiskController()>:
c00145d6:	83 ec 0c             	sub    esp,0xc
c00145d9:	83 ec 0c             	sub    esp,0xc
c00145dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145e0:	e8 cd ff ff ff       	call   c00145b2 <HardDiskController::~HardDiskController()>
c00145e5:	83 c4 10             	add    esp,0x10
c00145e8:	83 ec 08             	sub    esp,0x8
c00145eb:	68 58 01 00 00       	push   0x158
c00145f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145f4:	e8 ea e6 ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c00145f9:	83 c4 10             	add    esp,0x10
c00145fc:	83 c4 0c             	add    esp,0xc
c00145ff:	c3                   	ret    

c0014600 <PhysicalDisk::eject()>:
c0014600:	83 ec 18             	sub    esp,0x18
c0014603:	68 f4 ac 02 c0       	push   0xc002acf4
c0014608:	e8 b6 e7 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001460d:	83 c8 ff             	or     eax,0xffffffff
c0014610:	83 c4 1c             	add    esp,0x1c
c0014613:	c3                   	ret    

c0014614 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0014614:	83 ec 0c             	sub    esp,0xc
c0014617:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001461b:	83 ec 08             	sub    esp,0x8
c001461e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014622:	50                   	push   eax
c0014623:	e8 b8 fd ff ff       	call   c00143e0 <Device::Device(char const*)>
c0014628:	83 c4 10             	add    esp,0x10
c001462b:	ba 24 ad 02 c0       	mov    edx,0xc002ad24
c0014630:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014634:	89 10                	mov    DWORD PTR [eax],edx
c0014636:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001463a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0014641:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014645:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c001464c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014650:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c001465a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001465e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014662:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0014668:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001466c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014676:	90                   	nop
c0014677:	83 c4 0c             	add    esp,0xc
c001467a:	c3                   	ret    
c001467b:	90                   	nop

c001467c <PhysicalDisk::startCache()>:
c001467c:	56                   	push   esi
c001467d:	53                   	push   ebx
c001467e:	83 ec 10             	sub    esp,0x10
c0014681:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014685:	6a 44                	push   0x44
c0014687:	e8 bf b1 ff ff       	call   c000f84b <malloc>
c001468c:	89 c6                	mov    esi,eax
c001468e:	58                   	pop    eax
c001468f:	5a                   	pop    edx
c0014690:	53                   	push   ebx
c0014691:	56                   	push   esi
c0014692:	e8 a3 27 00 00       	call   c0016e3a <VCache::VCache(PhysicalDisk*)>
c0014697:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c001469d:	83 c4 14             	add    esp,0x14
c00146a0:	5b                   	pop    ebx
c00146a1:	5e                   	pop    esi
c00146a2:	c3                   	ret    
c00146a3:	90                   	nop

c00146a4 <PhysicalDisk::~PhysicalDisk()>:
c00146a4:	83 ec 0c             	sub    esp,0xc
c00146a7:	ba 24 ad 02 c0       	mov    edx,0xc002ad24
c00146ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146b0:	89 10                	mov    DWORD PTR [eax],edx
c00146b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146b6:	83 ec 0c             	sub    esp,0xc
c00146b9:	50                   	push   eax
c00146ba:	e8 03 fa ff ff       	call   c00140c2 <Device::~Device()>
c00146bf:	83 c4 10             	add    esp,0x10
c00146c2:	90                   	nop
c00146c3:	83 c4 0c             	add    esp,0xc
c00146c6:	c3                   	ret    
c00146c7:	90                   	nop

c00146c8 <PhysicalDisk::~PhysicalDisk()>:
c00146c8:	83 ec 0c             	sub    esp,0xc
c00146cb:	83 ec 0c             	sub    esp,0xc
c00146ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146d2:	e8 cd ff ff ff       	call   c00146a4 <PhysicalDisk::~PhysicalDisk()>
c00146d7:	83 c4 10             	add    esp,0x10
c00146da:	83 ec 08             	sub    esp,0x8
c00146dd:	68 6c 01 00 00       	push   0x16c
c00146e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146e6:	e8 f8 e5 ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c00146eb:	83 c4 10             	add    esp,0x10
c00146ee:	83 c4 0c             	add    esp,0xc
c00146f1:	c3                   	ret    

c00146f2 <FPU::FPU(char const*)>:
c00146f2:	83 ec 0c             	sub    esp,0xc
c00146f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146f9:	83 ec 08             	sub    esp,0x8
c00146fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014700:	50                   	push   eax
c0014701:	e8 da fc ff ff       	call   c00143e0 <Device::Device(char const*)>
c0014706:	83 c4 10             	add    esp,0x10
c0014709:	ba 68 ad 02 c0       	mov    edx,0xc002ad68
c001470e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014712:	89 10                	mov    DWORD PTR [eax],edx
c0014714:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014718:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0014722:	90                   	nop
c0014723:	83 c4 0c             	add    esp,0xc
c0014726:	c3                   	ret    
c0014727:	90                   	nop

c0014728 <FPU::~FPU()>:
c0014728:	83 ec 0c             	sub    esp,0xc
c001472b:	ba 68 ad 02 c0       	mov    edx,0xc002ad68
c0014730:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014734:	89 10                	mov    DWORD PTR [eax],edx
c0014736:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001473a:	83 ec 0c             	sub    esp,0xc
c001473d:	50                   	push   eax
c001473e:	e8 7f f9 ff ff       	call   c00140c2 <Device::~Device()>
c0014743:	83 c4 10             	add    esp,0x10
c0014746:	90                   	nop
c0014747:	83 c4 0c             	add    esp,0xc
c001474a:	c3                   	ret    
c001474b:	90                   	nop

c001474c <FPU::~FPU()>:
c001474c:	83 ec 0c             	sub    esp,0xc
c001474f:	83 ec 0c             	sub    esp,0xc
c0014752:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014756:	e8 cd ff ff ff       	call   c0014728 <FPU::~FPU()>
c001475b:	83 c4 10             	add    esp,0x10
c001475e:	83 ec 08             	sub    esp,0x8
c0014761:	68 58 01 00 00       	push   0x158
c0014766:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001476a:	e8 74 e5 ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c001476f:	83 c4 10             	add    esp,0x10
c0014772:	83 c4 0c             	add    esp,0xc
c0014775:	c3                   	ret    

c0014776 <setupFPU()>:
c0014776:	53                   	push   ebx
c0014777:	83 ec 08             	sub    esp,0x8
c001477a:	8b 15 68 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e468
c0014780:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0014787:	74 19                	je     c00147a2 <setupFPU()+0x2c>
c0014789:	83 ec 0c             	sub    esp,0xc
c001478c:	68 58 01 00 00       	push   0x158
c0014791:	e8 b5 b0 ff ff       	call   c000f84b <malloc>
c0014796:	89 c3                	mov    ebx,eax
c0014798:	89 04 24             	mov    DWORD PTR [esp],eax
c001479b:	e8 9e 0d 01 00       	call   c002553e <AVX::AVX()>
c00147a0:	eb 5b                	jmp    c00147fd <setupFPU()+0x87>
c00147a2:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00147a8:	84 c0                	test   al,al
c00147aa:	79 19                	jns    c00147c5 <setupFPU()+0x4f>
c00147ac:	83 ec 0c             	sub    esp,0xc
c00147af:	68 58 01 00 00       	push   0x158
c00147b4:	e8 92 b0 ff ff       	call   c000f84b <malloc>
c00147b9:	89 c3                	mov    ebx,eax
c00147bb:	89 04 24             	mov    DWORD PTR [esp],eax
c00147be:	e8 a1 0e 01 00       	call   c0025664 <SSE::SSE()>
c00147c3:	eb 38                	jmp    c00147fd <setupFPU()+0x87>
c00147c5:	a8 20                	test   al,0x20
c00147c7:	74 19                	je     c00147e2 <setupFPU()+0x6c>
c00147c9:	83 ec 0c             	sub    esp,0xc
c00147cc:	68 58 01 00 00       	push   0x158
c00147d1:	e8 75 b0 ff ff       	call   c000f84b <malloc>
c00147d6:	89 c3                	mov    ebx,eax
c00147d8:	89 04 24             	mov    DWORD PTR [esp],eax
c00147db:	e8 ee 0d 01 00       	call   c00255ce <MMX::MMX()>
c00147e0:	eb 1b                	jmp    c00147fd <setupFPU()+0x87>
c00147e2:	a8 10                	test   al,0x10
c00147e4:	74 1c                	je     c0014802 <setupFPU()+0x8c>
c00147e6:	83 ec 0c             	sub    esp,0xc
c00147e9:	68 58 01 00 00       	push   0x158
c00147ee:	e8 58 b0 ff ff       	call   c000f84b <malloc>
c00147f3:	89 c3                	mov    ebx,eax
c00147f5:	89 04 24             	mov    DWORD PTR [esp],eax
c00147f8:	e8 f5 0e 01 00       	call   c00256f2 <x87::x87()>
c00147fd:	83 c4 10             	add    esp,0x10
c0014800:	eb 24                	jmp    c0014826 <setupFPU()+0xb0>
c0014802:	83 e0 ef             	and    eax,0xffffffef
c0014805:	83 ec 0c             	sub    esp,0xc
c0014808:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001480e:	68 54 ad 02 c0       	push   0xc002ad54
c0014813:	e8 ab e5 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0014818:	0f 20 c0             	mov    eax,cr0
c001481b:	83 c8 04             	or     eax,0x4
c001481e:	0f 22 c0             	mov    cr0,eax
c0014821:	31 db                	xor    ebx,ebx
c0014823:	83 c4 10             	add    esp,0x10
c0014826:	89 d8                	mov    eax,ebx
c0014828:	83 c4 08             	add    esp,0x8
c001482b:	5b                   	pop    ebx
c001482c:	c3                   	ret    
c001482d:	90                   	nop

c001482e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c001482e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014832:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014836:	c1 e0 04             	shl    eax,0x4
c0014839:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001483d:	8d 50 10             	lea    edx,[eax+0x10]
c0014840:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014846:	74 08                	je     c0014850 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014848:	83 c0 04             	add    eax,0x4
c001484b:	39 d0                	cmp    eax,edx
c001484d:	75 f1                	jne    c0014840 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c001484f:	c3                   	ret    
c0014850:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001485a:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014864:	eb e2                	jmp    c0014848 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014866 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014866:	57                   	push   edi
c0014867:	31 c0                	xor    eax,eax
c0014869:	56                   	push   esi
c001486a:	53                   	push   ebx
c001486b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001486f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014873:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014877:	89 da                	mov    edx,ebx
c0014879:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001487d:	c1 e2 04             	shl    edx,0x4
c0014880:	01 ca                	add    edx,ecx
c0014882:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001488a:	74 16                	je     c00148a2 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c001488c:	40                   	inc    eax
c001488d:	83 f8 04             	cmp    eax,0x4
c0014890:	75 f0                	jne    c0014882 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0014892:	c7 44 24 10 98 ad 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ad98
c001489a:	5b                   	pop    ebx
c001489b:	5e                   	pop    esi
c001489c:	5f                   	pop    edi
c001489d:	e9 5f 5c 00 00       	jmp    c001a501 <Krnl::panic(char const*)>
c00148a2:	8d 04 98             	lea    eax,[eax+ebx*4]
c00148a5:	8d 04 81             	lea    eax,[ecx+eax*4]
c00148a8:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00148ae:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c00148b4:	5b                   	pop    ebx
c00148b5:	5e                   	pop    esi
c00148b6:	5f                   	pop    edi
c00148b7:	c3                   	ret    

c00148b8 <doubleFault(regs*, void*)>:
c00148b8:	55                   	push   ebp
c00148b9:	89 e5                	mov    ebp,esp
c00148bb:	83 ec 08             	sub    esp,0x8
c00148be:	83 ec 0c             	sub    esp,0xc
c00148c1:	68 d3 ad 02 c0       	push   0xc002add3
c00148c6:	e8 36 5c 00 00       	call   c001a501 <Krnl::panic(char const*)>
c00148cb:	83 c4 10             	add    esp,0x10
c00148ce:	90                   	nop
c00148cf:	c9                   	leave  
c00148d0:	c3                   	ret    
c00148d1:	90                   	nop

c00148d2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00148d2:	56                   	push   esi
c00148d3:	53                   	push   ebx
c00148d4:	50                   	push   eax
c00148d5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00148d9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00148dd:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00148e2:	75 35                	jne    c0014919 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c00148e4:	8d 43 20             	lea    eax,[ebx+0x20]
c00148e7:	31 d2                	xor    edx,edx
c00148e9:	89 c1                	mov    ecx,eax
c00148eb:	c1 e1 04             	shl    ecx,0x4
c00148ee:	01 f1                	add    ecx,esi
c00148f0:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c00148f8:	74 3e                	je     c0014938 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c00148fa:	42                   	inc    edx
c00148fb:	83 fa 04             	cmp    edx,0x4
c00148fe:	75 f0                	jne    c00148f0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014900:	83 ec 0c             	sub    esp,0xc
c0014903:	68 18 ae 02 c0       	push   0xc002ae18
c0014908:	e8 f4 5b 00 00       	call   c001a501 <Krnl::panic(char const*)>
c001490d:	83 c4 10             	add    esp,0x10
c0014910:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014915:	5a                   	pop    edx
c0014916:	5b                   	pop    ebx
c0014917:	5e                   	pop    esi
c0014918:	c3                   	ret    
c0014919:	83 ec 0c             	sub    esp,0xc
c001491c:	56                   	push   esi
c001491d:	e8 ba fb ff ff       	call   c00144dc <Device::getName()>
c0014922:	83 c4 10             	add    esp,0x10
c0014925:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014928:	75 ba                	jne    c00148e4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001492a:	83 fb 0f             	cmp    ebx,0xf
c001492d:	7f 29                	jg     c0014958 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c001492f:	0f b6 9b c0 d6 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd2940]
c0014936:	eb ac                	jmp    c00148e4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014938:	8d 04 82             	lea    eax,[edx+eax*4]
c001493b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001493f:	8d 04 86             	lea    eax,[esi+eax*4]
c0014942:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014948:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001494c:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014952:	89 d8                	mov    eax,ebx
c0014954:	5a                   	pop    edx
c0014955:	5b                   	pop    ebx
c0014956:	5e                   	pop    esi
c0014957:	c3                   	ret    
c0014958:	83 ec 0c             	sub    esp,0xc
c001495b:	68 e0 ad 02 c0       	push   0xc002ade0
c0014960:	e8 9c 5b 00 00       	call   c001a501 <Krnl::panic(char const*)>
c0014965:	83 c4 10             	add    esp,0x10
c0014968:	e9 77 ff ff ff       	jmp    c00148e4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001496d:	90                   	nop

c001496e <InterruptController::clearAllHandlers(int, bool)>:
c001496e:	56                   	push   esi
c001496f:	53                   	push   ebx
c0014970:	52                   	push   edx
c0014971:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014975:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014979:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001497e:	75 61                	jne    c00149e1 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014980:	8d 46 20             	lea    eax,[esi+0x20]
c0014983:	c1 e6 04             	shl    esi,0x4
c0014986:	c1 e0 04             	shl    eax,0x4
c0014989:	01 de                	add    esi,ebx
c001498b:	01 d8                	add    eax,ebx
c001498d:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014997:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c00149a1:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00149ab:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00149b5:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c00149bf:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c00149c9:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c00149d3:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c00149dd:	58                   	pop    eax
c00149de:	5b                   	pop    ebx
c00149df:	5e                   	pop    esi
c00149e0:	c3                   	ret    
c00149e1:	83 ec 0c             	sub    esp,0xc
c00149e4:	53                   	push   ebx
c00149e5:	e8 f2 fa ff ff       	call   c00144dc <Device::getName()>
c00149ea:	83 c4 10             	add    esp,0x10
c00149ed:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00149f0:	75 8e                	jne    c0014980 <InterruptController::clearAllHandlers(int, bool)+0x12>
c00149f2:	83 fe 0f             	cmp    esi,0xf
c00149f5:	7f 09                	jg     c0014a00 <InterruptController::clearAllHandlers(int, bool)+0x92>
c00149f7:	0f b6 b6 c0 d6 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd2940]
c00149fe:	eb 80                	jmp    c0014980 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014a00:	83 ec 0c             	sub    esp,0xc
c0014a03:	68 54 ae 02 c0       	push   0xc002ae54
c0014a08:	e8 f4 5a 00 00       	call   c001a501 <Krnl::panic(char const*)>
c0014a0d:	83 c4 10             	add    esp,0x10
c0014a10:	e9 6b ff ff ff       	jmp    c0014980 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014a15:	90                   	nop

c0014a16 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014a16:	56                   	push   esi
c0014a17:	53                   	push   ebx
c0014a18:	52                   	push   edx
c0014a19:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014a1d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014a21:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014a26:	75 3a                	jne    c0014a62 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014a28:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014a2c:	8d 50 20             	lea    edx,[eax+0x20]
c0014a2f:	c1 e2 04             	shl    edx,0x4
c0014a32:	8d 04 16             	lea    eax,[esi+edx*1]
c0014a35:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014a39:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014a3f:	74 0b                	je     c0014a4c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014a41:	83 c0 04             	add    eax,0x4
c0014a44:	39 d0                	cmp    eax,edx
c0014a46:	75 f1                	jne    c0014a39 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014a48:	58                   	pop    eax
c0014a49:	5b                   	pop    ebx
c0014a4a:	5e                   	pop    esi
c0014a4b:	c3                   	ret    
c0014a4c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014a56:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014a60:	eb df                	jmp    c0014a41 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014a62:	83 ec 0c             	sub    esp,0xc
c0014a65:	56                   	push   esi
c0014a66:	e8 71 fa ff ff       	call   c00144dc <Device::getName()>
c0014a6b:	83 c4 10             	add    esp,0x10
c0014a6e:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014a71:	75 b5                	jne    c0014a28 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014a73:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014a78:	7f 11                	jg     c0014a8b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014a7a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014a7e:	0f b6 80 c0 d6 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd2940]
c0014a85:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014a89:	eb 9d                	jmp    c0014a28 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014a8b:	83 ec 0c             	sub    esp,0xc
c0014a8e:	68 54 ae 02 c0       	push   0xc002ae54
c0014a93:	e8 69 5a 00 00       	call   c001a501 <Krnl::panic(char const*)>
c0014a98:	83 c4 10             	add    esp,0x10
c0014a9b:	eb 8b                	jmp    c0014a28 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014a9d <nmiHandler(regs*, void*)>:
c0014a9d:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0014aa2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014aa6:	e9 e9 a4 ff ff       	jmp    c000ef94 <Computer::handleNMI()>

c0014aab <int_handler>:
c0014aab:	55                   	push   ebp
c0014aac:	57                   	push   edi
c0014aad:	56                   	push   esi
c0014aae:	53                   	push   ebx
c0014aaf:	83 ec 0c             	sub    esp,0xc
c0014ab2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014ab6:	80 3d c4 0f 03 c0 00 	cmp    BYTE PTR ds:0xc0030fc4,0x0
c0014abd:	74 0b                	je     c0014aca <int_handler+0x1f>
c0014abf:	fa                   	cli    
c0014ac0:	f4                   	hlt    
c0014ac1:	80 3d c4 0f 03 c0 00 	cmp    BYTE PTR ds:0xc0030fc4,0x0
c0014ac8:	75 f5                	jne    c0014abf <int_handler+0x14>
c0014aca:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0014acf:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014ad2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014ad8:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014ade:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014ae1:	83 f8 17             	cmp    eax,0x17
c0014ae4:	77 13                	ja     c0014af9 <int_handler+0x4e>
c0014ae6:	83 ec 08             	sub    esp,0x8
c0014ae9:	8b 17                	mov    edx,DWORD PTR [edi]
c0014aeb:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014aee:	0f b6 c0             	movzx  eax,al
c0014af1:	50                   	push   eax
c0014af2:	57                   	push   edi
c0014af3:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014af6:	83 c4 10             	add    esp,0x10
c0014af9:	83 c3 15             	add    ebx,0x15
c0014afc:	c1 e3 04             	shl    ebx,0x4
c0014aff:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014b03:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014b0a:	31 db                	xor    ebx,ebx
c0014b0c:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014b10:	85 c0                	test   eax,eax
c0014b12:	74 13                	je     c0014b27 <int_handler+0x7c>
c0014b14:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014b17:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014b1b:	74 1c                	je     c0014b39 <int_handler+0x8e>
c0014b1d:	83 ec 08             	sub    esp,0x8
c0014b20:	52                   	push   edx
c0014b21:	56                   	push   esi
c0014b22:	ff d0                	call   eax
c0014b24:	83 c4 10             	add    esp,0x10
c0014b27:	43                   	inc    ebx
c0014b28:	83 fb 04             	cmp    ebx,0x4
c0014b2b:	75 df                	jne    c0014b0c <int_handler+0x61>
c0014b2d:	83 c4 0c             	add    esp,0xc
c0014b30:	31 c0                	xor    eax,eax
c0014b32:	5b                   	pop    ebx
c0014b33:	31 d2                	xor    edx,edx
c0014b35:	5e                   	pop    esi
c0014b36:	5f                   	pop    edi
c0014b37:	5d                   	pop    ebp
c0014b38:	c3                   	ret    
c0014b39:	83 ec 08             	sub    esp,0x8
c0014b3c:	52                   	push   edx
c0014b3d:	56                   	push   esi
c0014b3e:	ff d0                	call   eax
c0014b40:	83 c4 10             	add    esp,0x10
c0014b43:	83 c4 0c             	add    esp,0xc
c0014b46:	5b                   	pop    ebx
c0014b47:	5e                   	pop    esi
c0014b48:	5f                   	pop    edi
c0014b49:	5d                   	pop    ebp
c0014b4a:	c3                   	ret    
c0014b4b:	90                   	nop

c0014b4c <InterruptController::InterruptController(char const*)>:
c0014b4c:	83 ec 1c             	sub    esp,0x1c
c0014b4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b53:	83 ec 08             	sub    esp,0x8
c0014b56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b5a:	50                   	push   eax
c0014b5b:	e8 80 f8 ff ff       	call   c00143e0 <Device::Device(char const*)>
c0014b60:	83 c4 10             	add    esp,0x10
c0014b63:	ba 14 b1 02 c0       	mov    edx,0xc002b114
c0014b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b6c:	89 10                	mov    DWORD PTR [eax],edx
c0014b6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b72:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014b7c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014b84:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014b8c:	7f 5e                	jg     c0014bec <InterruptController::InterruptController(char const*)+0xa0>
c0014b8e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014b96:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014b9b:	7f 49                	jg     c0014be6 <InterruptController::InterruptController(char const*)+0x9a>
c0014b9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ba1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014ba5:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014bac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014bb0:	01 ca                	add    edx,ecx
c0014bb2:	83 c2 54             	add    edx,0x54
c0014bb5:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014bbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014bc1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014bc5:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014bcc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014bd0:	01 ca                	add    edx,ecx
c0014bd2:	81 c2 54 04 00 00    	add    edx,0x454
c0014bd8:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014be0:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014be4:	eb b0                	jmp    c0014b96 <InterruptController::InterruptController(char const*)+0x4a>
c0014be6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014bea:	eb 98                	jmp    c0014b84 <InterruptController::InterruptController(char const*)+0x38>
c0014bec:	90                   	nop
c0014bed:	83 c4 1c             	add    esp,0x1c
c0014bf0:	c3                   	ret    
c0014bf1:	90                   	nop

c0014bf2 <InterruptController::~InterruptController()>:
c0014bf2:	83 ec 0c             	sub    esp,0xc
c0014bf5:	ba 14 b1 02 c0       	mov    edx,0xc002b114
c0014bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014bfe:	89 10                	mov    DWORD PTR [eax],edx
c0014c00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c04:	83 ec 0c             	sub    esp,0xc
c0014c07:	50                   	push   eax
c0014c08:	e8 b5 f4 ff ff       	call   c00140c2 <Device::~Device()>
c0014c0d:	83 c4 10             	add    esp,0x10
c0014c10:	90                   	nop
c0014c11:	83 c4 0c             	add    esp,0xc
c0014c14:	c3                   	ret    
c0014c15:	90                   	nop

c0014c16 <InterruptController::~InterruptController()>:
c0014c16:	83 ec 0c             	sub    esp,0xc
c0014c19:	83 ec 0c             	sub    esp,0xc
c0014c1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c20:	e8 cd ff ff ff       	call   c0014bf2 <InterruptController::~InterruptController()>
c0014c25:	83 c4 10             	add    esp,0x10
c0014c28:	83 ec 08             	sub    esp,0x8
c0014c2b:	68 58 21 00 00       	push   0x2158
c0014c30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c34:	e8 aa e0 ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0014c39:	83 c4 10             	add    esp,0x10
c0014c3c:	83 c4 0c             	add    esp,0xc
c0014c3f:	c3                   	ret    

c0014c40 <displayDebugInfo(regs*)>:
c0014c40:	55                   	push   ebp
c0014c41:	57                   	push   edi
c0014c42:	56                   	push   esi
c0014c43:	53                   	push   ebx
c0014c44:	83 ec 24             	sub    esp,0x24
c0014c47:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014c4b:	0f 20 c2             	mov    edx,cr0
c0014c4e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014c52:	0f 20 d7             	mov    edi,cr2
c0014c55:	0f 20 de             	mov    esi,cr3
c0014c58:	0f 20 e5             	mov    ebp,cr4
c0014c5b:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014c5e:	68 8e ae 02 c0       	push   0xc002ae8e
c0014c63:	e8 5b e1 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0014c68:	59                   	pop    ecx
c0014c69:	58                   	pop    eax
c0014c6a:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014c6d:	68 99 ae 02 c0       	push   0xc002ae99
c0014c72:	e8 4c e1 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0014c77:	58                   	pop    eax
c0014c78:	5a                   	pop    edx
c0014c79:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014c7c:	68 a4 ae 02 c0       	push   0xc002aea4
c0014c81:	e8 3d e1 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0014c86:	59                   	pop    ecx
c0014c87:	58                   	pop    eax
c0014c88:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014c8b:	68 af ae 02 c0       	push   0xc002aeaf
c0014c90:	e8 2e e1 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0014c95:	58                   	pop    eax
c0014c96:	5a                   	pop    edx
c0014c97:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014c9a:	68 ba ae 02 c0       	push   0xc002aeba
c0014c9f:	e8 1f e1 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0014ca4:	59                   	pop    ecx
c0014ca5:	58                   	pop    eax
c0014ca6:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014ca9:	68 c5 ae 02 c0       	push   0xc002aec5
c0014cae:	e8 10 e1 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0014cb3:	58                   	pop    eax
c0014cb4:	5a                   	pop    edx
c0014cb5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014cb8:	68 d0 ae 02 c0       	push   0xc002aed0
c0014cbd:	e8 01 e1 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0014cc2:	59                   	pop    ecx
c0014cc3:	58                   	pop    eax
c0014cc4:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014cc7:	68 db ae 02 c0       	push   0xc002aedb
c0014ccc:	e8 f2 e0 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0014cd1:	58                   	pop    eax
c0014cd2:	5a                   	pop    edx
c0014cd3:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014cd6:	68 e6 ae 02 c0       	push   0xc002aee6
c0014cdb:	e8 e3 e0 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0014ce0:	59                   	pop    ecx
c0014ce1:	58                   	pop    eax
c0014ce2:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014ce5:	68 f5 ae 02 c0       	push   0xc002aef5
c0014cea:	e8 d4 e0 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0014cef:	58                   	pop    eax
c0014cf0:	5a                   	pop    edx
c0014cf1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014cf4:	68 00 af 02 c0       	push   0xc002af00
c0014cf9:	e8 c5 e0 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0014cfe:	59                   	pop    ecx
c0014cff:	58                   	pop    eax
c0014d00:	57                   	push   edi
c0014d01:	68 0b af 02 c0       	push   0xc002af0b
c0014d06:	e8 b8 e0 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0014d0b:	58                   	pop    eax
c0014d0c:	5a                   	pop    edx
c0014d0d:	56                   	push   esi
c0014d0e:	68 16 af 02 c0       	push   0xc002af16
c0014d13:	e8 ab e0 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0014d18:	59                   	pop    ecx
c0014d19:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014d1e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d24:	e8 ed be ff ff       	call   c0010c16 <setActiveTerminal(VgaText*)>
c0014d29:	58                   	pop    eax
c0014d2a:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014d2d:	5a                   	pop    edx
c0014d2e:	c1 e0 05             	shl    eax,0x5
c0014d31:	05 20 d4 02 c0       	add    eax,0xc002d420
c0014d36:	50                   	push   eax
c0014d37:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014d3c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d42:	e8 5b c2 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014d47:	59                   	pop    ecx
c0014d48:	58                   	pop    eax
c0014d49:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014d4e:	68 21 af 02 c0       	push   0xc002af21
c0014d53:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d59:	e8 44 c2 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014d5e:	58                   	pop    eax
c0014d5f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d64:	5a                   	pop    edx
c0014d65:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014d68:	83 c0 0c             	add    eax,0xc
c0014d6b:	50                   	push   eax
c0014d6c:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014d71:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d77:	e8 26 c2 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014d7c:	59                   	pop    ecx
c0014d7d:	58                   	pop    eax
c0014d7e:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014d83:	68 2a af 02 c0       	push   0xc002af2a
c0014d88:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d8e:	e8 0f c2 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014d93:	58                   	pop    eax
c0014d94:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014d99:	5a                   	pop    edx
c0014d9a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014d9d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014da3:	e8 20 c2 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c0014da8:	59                   	pop    ecx
c0014da9:	58                   	pop    eax
c0014daa:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014daf:	68 32 af 02 c0       	push   0xc002af32
c0014db4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014dba:	e8 e3 c1 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014dbf:	58                   	pop    eax
c0014dc0:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014dc5:	5a                   	pop    edx
c0014dc6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014dc9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014dcf:	e8 f4 c1 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c0014dd4:	59                   	pop    ecx
c0014dd5:	58                   	pop    eax
c0014dd6:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014ddb:	68 3a af 02 c0       	push   0xc002af3a
c0014de0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014de6:	e8 b7 c1 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014deb:	58                   	pop    eax
c0014dec:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014df1:	5a                   	pop    edx
c0014df2:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014df5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014dfb:	e8 c8 c1 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c0014e00:	59                   	pop    ecx
c0014e01:	58                   	pop    eax
c0014e02:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014e07:	68 42 af 02 c0       	push   0xc002af42
c0014e0c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e12:	e8 8b c1 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014e17:	58                   	pop    eax
c0014e18:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014e1d:	5a                   	pop    edx
c0014e1e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014e21:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e27:	e8 9c c1 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c0014e2c:	59                   	pop    ecx
c0014e2d:	58                   	pop    eax
c0014e2e:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014e33:	68 4a af 02 c0       	push   0xc002af4a
c0014e38:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e3e:	e8 5f c1 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014e43:	58                   	pop    eax
c0014e44:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014e49:	5a                   	pop    edx
c0014e4a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014e4d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e53:	e8 70 c1 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c0014e58:	59                   	pop    ecx
c0014e59:	58                   	pop    eax
c0014e5a:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014e5f:	68 52 af 02 c0       	push   0xc002af52
c0014e64:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e6a:	e8 33 c1 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014e6f:	58                   	pop    eax
c0014e70:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014e75:	5a                   	pop    edx
c0014e76:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014e79:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e7f:	e8 44 c1 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c0014e84:	59                   	pop    ecx
c0014e85:	58                   	pop    eax
c0014e86:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014e8b:	68 5a af 02 c0       	push   0xc002af5a
c0014e90:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e96:	e8 07 c1 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014e9b:	58                   	pop    eax
c0014e9c:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014ea1:	5a                   	pop    edx
c0014ea2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014ea6:	52                   	push   edx
c0014ea7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ead:	e8 16 c1 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c0014eb2:	59                   	pop    ecx
c0014eb3:	58                   	pop    eax
c0014eb4:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014eb9:	68 63 af 02 c0       	push   0xc002af63
c0014ebe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ec4:	e8 d9 c0 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014ec9:	58                   	pop    eax
c0014eca:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014ecf:	5a                   	pop    edx
c0014ed0:	57                   	push   edi
c0014ed1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ed7:	e8 ec c0 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c0014edc:	59                   	pop    ecx
c0014edd:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014ee2:	5f                   	pop    edi
c0014ee3:	68 6b af 02 c0       	push   0xc002af6b
c0014ee8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014eee:	e8 af c0 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014ef3:	58                   	pop    eax
c0014ef4:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014ef9:	5a                   	pop    edx
c0014efa:	56                   	push   esi
c0014efb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f01:	e8 c2 c0 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c0014f06:	59                   	pop    ecx
c0014f07:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014f0c:	5e                   	pop    esi
c0014f0d:	68 73 af 02 c0       	push   0xc002af73
c0014f12:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f18:	e8 85 c0 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014f1d:	5f                   	pop    edi
c0014f1e:	58                   	pop    eax
c0014f1f:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014f24:	55                   	push   ebp
c0014f25:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f2b:	e8 98 c0 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c0014f30:	58                   	pop    eax
c0014f31:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014f36:	5a                   	pop    edx
c0014f37:	68 7b af 02 c0       	push   0xc002af7b
c0014f3c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f42:	e8 5b c0 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014f47:	0f 21 c0             	mov    eax,db0
c0014f4a:	59                   	pop    ecx
c0014f4b:	5e                   	pop    esi
c0014f4c:	50                   	push   eax
c0014f4d:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014f52:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f58:	e8 6b c0 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c0014f5d:	5f                   	pop    edi
c0014f5e:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014f63:	5d                   	pop    ebp
c0014f64:	68 84 af 02 c0       	push   0xc002af84
c0014f69:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f6f:	e8 2e c0 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014f74:	0f 21 c8             	mov    eax,db1
c0014f77:	5a                   	pop    edx
c0014f78:	59                   	pop    ecx
c0014f79:	50                   	push   eax
c0014f7a:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014f7f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f85:	e8 3e c0 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c0014f8a:	5e                   	pop    esi
c0014f8b:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014f90:	5f                   	pop    edi
c0014f91:	68 8c af 02 c0       	push   0xc002af8c
c0014f96:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f9c:	e8 01 c0 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014fa1:	0f 21 d0             	mov    eax,db2
c0014fa4:	5d                   	pop    ebp
c0014fa5:	5a                   	pop    edx
c0014fa6:	50                   	push   eax
c0014fa7:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014fac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fb2:	e8 11 c0 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c0014fb7:	59                   	pop    ecx
c0014fb8:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014fbd:	5e                   	pop    esi
c0014fbe:	68 94 af 02 c0       	push   0xc002af94
c0014fc3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fc9:	e8 d4 bf ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014fce:	0f 21 d8             	mov    eax,db3
c0014fd1:	5f                   	pop    edi
c0014fd2:	5d                   	pop    ebp
c0014fd3:	50                   	push   eax
c0014fd4:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014fd9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fdf:	e8 e4 bf ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c0014fe4:	58                   	pop    eax
c0014fe5:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014fea:	5a                   	pop    edx
c0014feb:	68 9c af 02 c0       	push   0xc002af9c
c0014ff0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ff6:	e8 a7 bf ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014ffb:	0f 21 f0             	mov    eax,db6
c0014ffe:	59                   	pop    ecx
c0014fff:	5e                   	pop    esi
c0015000:	50                   	push   eax
c0015001:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0015006:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001500c:	e8 b7 bf ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c0015011:	5f                   	pop    edi
c0015012:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0015017:	5d                   	pop    ebp
c0015018:	68 a4 af 02 c0       	push   0xc002afa4
c001501d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015023:	e8 7a bf ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0015028:	0f 21 f8             	mov    eax,db7
c001502b:	5a                   	pop    edx
c001502c:	59                   	pop    ecx
c001502d:	50                   	push   eax
c001502e:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0015033:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015039:	e8 8a bf ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c001503e:	5e                   	pop    esi
c001503f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0015042:	e8 9c 85 00 00       	call   c001d5e3 <Thr::getDriverNameFromAddress(unsigned long)>
c0015047:	83 c4 10             	add    esp,0x10
c001504a:	85 c0                	test   eax,eax
c001504c:	74 7d                	je     c00150cb <displayDebugInfo(regs*)+0x48b>
c001504e:	89 c6                	mov    esi,eax
c0015050:	50                   	push   eax
c0015051:	50                   	push   eax
c0015052:	56                   	push   esi
c0015053:	68 ac af 02 c0       	push   0xc002afac
c0015058:	e8 66 dd ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001505d:	5a                   	pop    edx
c001505e:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0015063:	59                   	pop    ecx
c0015064:	68 ba af 02 c0       	push   0xc002afba
c0015069:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001506f:	e8 2e bf ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0015074:	5f                   	pop    edi
c0015075:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001507a:	5d                   	pop    ebp
c001507b:	56                   	push   esi
c001507c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015082:	e8 1b bf ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0015087:	58                   	pop    eax
c0015088:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001508d:	5a                   	pop    edx
c001508e:	68 c6 af 02 c0       	push   0xc002afc6
c0015093:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015099:	e8 04 bf ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001509e:	59                   	pop    ecx
c001509f:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c00150a4:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c00150aa:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00150ad:	e8 68 85 00 00       	call   c001d61a <Thr::getDriverOffsetFromAddress(unsigned long)>
c00150b2:	5b                   	pop    ebx
c00150b3:	5d                   	pop    ebp
c00150b4:	50                   	push   eax
c00150b5:	57                   	push   edi
c00150b6:	e8 0d bf ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c00150bb:	58                   	pop    eax
c00150bc:	5a                   	pop    edx
c00150bd:	56                   	push   esi
c00150be:	68 d2 af 02 c0       	push   0xc002afd2
c00150c3:	e8 fb dc ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00150c8:	83 c4 10             	add    esp,0x10
c00150cb:	fa                   	cli    
c00150cc:	f4                   	hlt    
c00150cd:	eb fe                	jmp    c00150cd <displayDebugInfo(regs*)+0x48d>

c00150cf <x87EmulHandler(regs*, void*)>:
c00150cf:	83 ec 0c             	sub    esp,0xc
c00150d2:	0f 20 c2             	mov    edx,cr0
c00150d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00150da:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c00150de:	75 4b                	jne    c001512b <x87EmulHandler(regs*, void*)+0x5c>
c00150e0:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c00150e5:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c00150eb:	85 c0                	test   eax,eax
c00150ed:	74 05                	je     c00150f4 <x87EmulHandler(regs*, void*)+0x25>
c00150ef:	83 e2 08             	and    edx,0x8
c00150f2:	75 17                	jne    c001510b <x87EmulHandler(regs*, void*)+0x3c>
c00150f4:	83 ec 0c             	sub    esp,0xc
c00150f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00150fb:	e8 aa a8 00 00       	call   c001f9aa <Vm::x87Handler(regs*)>
c0015100:	83 c4 10             	add    esp,0x10
c0015103:	84 c0                	test   al,al
c0015105:	74 24                	je     c001512b <x87EmulHandler(regs*, void*)+0x5c>
c0015107:	83 c4 0c             	add    esp,0xc
c001510a:	c3                   	ret    
c001510b:	83 ec 0c             	sub    esp,0xc
c001510e:	68 f8 af 02 c0       	push   0xc002aff8
c0015113:	e8 ab dc ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0015118:	0f 06                	clts   
c001511a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001511f:	83 c4 10             	add    esp,0x10
c0015122:	a3 08 e6 02 c0       	mov    ds:0xc002e608,eax
c0015127:	83 c4 0c             	add    esp,0xc
c001512a:	c3                   	ret    
c001512b:	83 ec 0c             	sub    esp,0xc
c001512e:	68 e2 af 02 c0       	push   0xc002afe2
c0015133:	e8 8b dc ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0015138:	5a                   	pop    edx
c0015139:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001513d:	e8 fe fa ff ff       	call   c0014c40 <displayDebugInfo(regs*)>

c0015142 <gpFault(regs*, void*)>:
c0015142:	53                   	push   ebx
c0015143:	83 ec 14             	sub    esp,0x14
c0015146:	c7 05 04 e6 02 c0 27 ed 01 c0 	mov    DWORD PTR ds:0xc002e604,0xc001ed27
c0015150:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015154:	53                   	push   ebx
c0015155:	e8 cd 9b 00 00       	call   c001ed27 <Vm::faultHandler(regs*)>
c001515a:	83 c4 10             	add    esp,0x10
c001515d:	84 c0                	test   al,al
c001515f:	74 05                	je     c0015166 <gpFault(regs*, void*)+0x24>
c0015161:	83 c4 08             	add    esp,0x8
c0015164:	5b                   	pop    ebx
c0015165:	c3                   	ret    
c0015166:	83 ec 0c             	sub    esp,0xc
c0015169:	68 05 b0 02 c0       	push   0xc002b005
c001516e:	e8 50 dc ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0015173:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015176:	e8 c5 fa ff ff       	call   c0014c40 <displayDebugInfo(regs*)>

c001517b <pgFault(regs*, void*)>:
c001517b:	83 ec 14             	sub    esp,0x14
c001517e:	0f 20 d0             	mov    eax,cr2
c0015181:	50                   	push   eax
c0015182:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015187:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001518a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0015190:	e8 57 d8 ff ff       	call   c00129ec <VAS::tryLoadBackOffDisk(unsigned long)>
c0015195:	83 c4 10             	add    esp,0x10
c0015198:	84 c0                	test   al,al
c001519a:	74 04                	je     c00151a0 <pgFault(regs*, void*)+0x25>
c001519c:	83 c4 0c             	add    esp,0xc
c001519f:	c3                   	ret    
c00151a0:	83 ec 0c             	sub    esp,0xc
c00151a3:	68 20 b0 02 c0       	push   0xc002b020
c00151a8:	e8 16 dc ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00151ad:	58                   	pop    eax
c00151ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00151b2:	e8 89 fa ff ff       	call   c0014c40 <displayDebugInfo(regs*)>

c00151b7 <otherISRHandler(regs*, void*)>:
c00151b7:	53                   	push   ebx
c00151b8:	83 ec 0c             	sub    esp,0xc
c00151bb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00151bf:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00151c2:	50                   	push   eax
c00151c3:	50                   	push   eax
c00151c4:	68 2d b0 02 c0       	push   0xc002b02d
c00151c9:	e8 f5 db ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00151ce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00151d1:	e8 6a fa ff ff       	call   c0014c40 <displayDebugInfo(regs*)>

c00151d6 <opcodeFault(regs*, void*)>:
c00151d6:	55                   	push   ebp
c00151d7:	89 e5                	mov    ebp,esp
c00151d9:	56                   	push   esi
c00151da:	53                   	push   ebx
c00151db:	83 ec 40             	sub    esp,0x40
c00151de:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c00151e3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00151e9:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c00151ef:	84 c0                	test   al,al
c00151f1:	74 24                	je     c0015217 <opcodeFault(regs*, void*)+0x41>
c00151f3:	83 ec 0c             	sub    esp,0xc
c00151f6:	68 4c b0 02 c0       	push   0xc002b04c
c00151fb:	e8 c3 db ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0015200:	83 c4 10             	add    esp,0x10
c0015203:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015206:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015209:	8d 50 19             	lea    edx,[eax+0x19]
c001520c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001520f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015212:	e9 be 05 00 00       	jmp    c00157d5 <opcodeFault(regs*, void*)+0x5ff>
c0015217:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001521a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001521d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015220:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0015224:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0015228:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001522b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001522e:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0015231:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015234:	8a 00                	mov    al,BYTE PTR [eax]
c0015236:	3c f0                	cmp    al,0xf0
c0015238:	75 17                	jne    c0015251 <opcodeFault(regs*, void*)+0x7b>
c001523a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001523d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015240:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015243:	8d 50 01             	lea    edx,[eax+0x1]
c0015246:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015249:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001524c:	e9 da 00 00 00       	jmp    c001532b <opcodeFault(regs*, void*)+0x155>
c0015251:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015254:	8a 00                	mov    al,BYTE PTR [eax]
c0015256:	3c f2                	cmp    al,0xf2
c0015258:	74 09                	je     c0015263 <opcodeFault(regs*, void*)+0x8d>
c001525a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001525d:	8a 00                	mov    al,BYTE PTR [eax]
c001525f:	3c f3                	cmp    al,0xf3
c0015261:	75 1b                	jne    c001527e <opcodeFault(regs*, void*)+0xa8>
c0015263:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015267:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001526a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001526d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015270:	8d 50 01             	lea    edx,[eax+0x1]
c0015273:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015276:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015279:	e9 ad 00 00 00       	jmp    c001532b <opcodeFault(regs*, void*)+0x155>
c001527e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015281:	8a 00                	mov    al,BYTE PTR [eax]
c0015283:	3c 66                	cmp    al,0x66
c0015285:	75 1f                	jne    c00152a6 <opcodeFault(regs*, void*)+0xd0>
c0015287:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001528b:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c001528f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015292:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015295:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015298:	8d 50 01             	lea    edx,[eax+0x1]
c001529b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001529e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152a1:	e9 85 00 00 00       	jmp    c001532b <opcodeFault(regs*, void*)+0x155>
c00152a6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152a9:	8a 00                	mov    al,BYTE PTR [eax]
c00152ab:	3c 67                	cmp    al,0x67
c00152ad:	75 18                	jne    c00152c7 <opcodeFault(regs*, void*)+0xf1>
c00152af:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00152b3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00152b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152b9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152bc:	8d 50 01             	lea    edx,[eax+0x1]
c00152bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152c2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152c5:	eb 64                	jmp    c001532b <opcodeFault(regs*, void*)+0x155>
c00152c7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152ca:	8a 00                	mov    al,BYTE PTR [eax]
c00152cc:	3c 2e                	cmp    al,0x2e
c00152ce:	74 09                	je     c00152d9 <opcodeFault(regs*, void*)+0x103>
c00152d0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152d3:	8a 00                	mov    al,BYTE PTR [eax]
c00152d5:	3c 3e                	cmp    al,0x3e
c00152d7:	75 18                	jne    c00152f1 <opcodeFault(regs*, void*)+0x11b>
c00152d9:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00152dd:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00152e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152e3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152e6:	8d 50 01             	lea    edx,[eax+0x1]
c00152e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152ec:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152ef:	eb 3a                	jmp    c001532b <opcodeFault(regs*, void*)+0x155>
c00152f1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152f4:	8a 00                	mov    al,BYTE PTR [eax]
c00152f6:	3c 36                	cmp    al,0x36
c00152f8:	74 1b                	je     c0015315 <opcodeFault(regs*, void*)+0x13f>
c00152fa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152fd:	8a 00                	mov    al,BYTE PTR [eax]
c00152ff:	3c 26                	cmp    al,0x26
c0015301:	74 12                	je     c0015315 <opcodeFault(regs*, void*)+0x13f>
c0015303:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015306:	8a 00                	mov    al,BYTE PTR [eax]
c0015308:	3c 64                	cmp    al,0x64
c001530a:	74 09                	je     c0015315 <opcodeFault(regs*, void*)+0x13f>
c001530c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001530f:	8a 00                	mov    al,BYTE PTR [eax]
c0015311:	3c 65                	cmp    al,0x65
c0015313:	75 16                	jne    c001532b <opcodeFault(regs*, void*)+0x155>
c0015315:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015319:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001531c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001531f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015322:	8d 50 01             	lea    edx,[eax+0x1]
c0015325:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015328:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001532b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001532e:	8a 00                	mov    al,BYTE PTR [eax]
c0015330:	3c 0f                	cmp    al,0xf
c0015332:	0f 85 ad 00 00 00    	jne    c00153e5 <opcodeFault(regs*, void*)+0x20f>
c0015338:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001533b:	40                   	inc    eax
c001533c:	8a 00                	mov    al,BYTE PTR [eax]
c001533e:	3c c2                	cmp    al,0xc2
c0015340:	74 0e                	je     c0015350 <opcodeFault(regs*, void*)+0x17a>
c0015342:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015345:	40                   	inc    eax
c0015346:	8a 00                	mov    al,BYTE PTR [eax]
c0015348:	3c c3                	cmp    al,0xc3
c001534a:	0f 85 95 00 00 00    	jne    c00153e5 <opcodeFault(regs*, void*)+0x20f>
c0015350:	83 ec 0c             	sub    esp,0xc
c0015353:	68 6f b0 02 c0       	push   0xc002b06f
c0015358:	e8 66 da ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001535d:	83 c4 10             	add    esp,0x10
c0015360:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015363:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015366:	8d 50 01             	lea    edx,[eax+0x1]
c0015369:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001536c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001536f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015372:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015375:	8a 00                	mov    al,BYTE PTR [eax]
c0015377:	8d 50 fe             	lea    edx,[eax-0x2]
c001537a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001537d:	88 10                	mov    BYTE PTR [eax],dl
c001537f:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0015382:	50                   	push   eax
c0015383:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0015386:	50                   	push   eax
c0015387:	8d 45 c4             	lea    eax,[ebp-0x3c]
c001538a:	50                   	push   eax
c001538b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001538e:	e8 35 48 00 00       	call   c0019bc8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015393:	83 c4 10             	add    esp,0x10
c0015396:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015399:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001539c:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c001539f:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c00153a2:	01 d0                	add    eax,edx
c00153a4:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00153a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153aa:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153ad:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00153b0:	48                   	dec    eax
c00153b1:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00153b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153b7:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00153ba:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153c0:	83 ec 04             	sub    esp,0x4
c00153c3:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00153c6:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00153c9:	50                   	push   eax
c00153ca:	e8 e5 ad fe ff       	call   c00001b4 <voodooXADD>
c00153cf:	83 c4 10             	add    esp,0x10
c00153d2:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00153d5:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00153d8:	01 c2                	add    edx,eax
c00153da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153dd:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153e0:	e9 f0 03 00 00       	jmp    c00157d5 <opcodeFault(regs*, void*)+0x5ff>
c00153e5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153e8:	8a 00                	mov    al,BYTE PTR [eax]
c00153ea:	3c 0f                	cmp    al,0xf
c00153ec:	0f 85 8b 01 00 00    	jne    c001557d <opcodeFault(regs*, void*)+0x3a7>
c00153f2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153f5:	40                   	inc    eax
c00153f6:	8a 00                	mov    al,BYTE PTR [eax]
c00153f8:	3c c7                	cmp    al,0xc7
c00153fa:	0f 86 7d 01 00 00    	jbe    c001557d <opcodeFault(regs*, void*)+0x3a7>
c0015400:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015403:	40                   	inc    eax
c0015404:	8a 00                	mov    al,BYTE PTR [eax]
c0015406:	3c cf                	cmp    al,0xcf
c0015408:	0f 87 6f 01 00 00    	ja     c001557d <opcodeFault(regs*, void*)+0x3a7>
c001540e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015411:	40                   	inc    eax
c0015412:	8a 00                	mov    al,BYTE PTR [eax]
c0015414:	83 c0 38             	add    eax,0x38
c0015417:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001541a:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001541e:	75 0b                	jne    c001542b <opcodeFault(regs*, void*)+0x255>
c0015420:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015423:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015426:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015429:	eb 75                	jmp    c00154a0 <opcodeFault(regs*, void*)+0x2ca>
c001542b:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001542f:	75 0b                	jne    c001543c <opcodeFault(regs*, void*)+0x266>
c0015431:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015434:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015437:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001543a:	eb 64                	jmp    c00154a0 <opcodeFault(regs*, void*)+0x2ca>
c001543c:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015440:	75 0b                	jne    c001544d <opcodeFault(regs*, void*)+0x277>
c0015442:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015445:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015448:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001544b:	eb 53                	jmp    c00154a0 <opcodeFault(regs*, void*)+0x2ca>
c001544d:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015451:	75 0b                	jne    c001545e <opcodeFault(regs*, void*)+0x288>
c0015453:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015456:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015459:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001545c:	eb 42                	jmp    c00154a0 <opcodeFault(regs*, void*)+0x2ca>
c001545e:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015462:	75 0b                	jne    c001546f <opcodeFault(regs*, void*)+0x299>
c0015464:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015467:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001546a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001546d:	eb 31                	jmp    c00154a0 <opcodeFault(regs*, void*)+0x2ca>
c001546f:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015473:	75 0b                	jne    c0015480 <opcodeFault(regs*, void*)+0x2aa>
c0015475:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015478:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001547b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001547e:	eb 20                	jmp    c00154a0 <opcodeFault(regs*, void*)+0x2ca>
c0015480:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015484:	75 0b                	jne    c0015491 <opcodeFault(regs*, void*)+0x2bb>
c0015486:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015489:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001548c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001548f:	eb 0f                	jmp    c00154a0 <opcodeFault(regs*, void*)+0x2ca>
c0015491:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015495:	75 09                	jne    c00154a0 <opcodeFault(regs*, void*)+0x2ca>
c0015497:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001549a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001549d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154a0:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c00154a4:	74 10                	je     c00154b6 <opcodeFault(regs*, void*)+0x2e0>
c00154a6:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c00154ad:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c00154b4:	eb 2d                	jmp    c00154e3 <opcodeFault(regs*, void*)+0x30d>
c00154b6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00154b9:	c1 e0 18             	shl    eax,0x18
c00154bc:	89 c2                	mov    edx,eax
c00154be:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00154c1:	c1 e0 08             	shl    eax,0x8
c00154c4:	25 00 00 ff 00       	and    eax,0xff0000
c00154c9:	09 c2                	or     edx,eax
c00154cb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00154ce:	c1 e8 08             	shr    eax,0x8
c00154d1:	25 00 ff 00 00       	and    eax,0xff00
c00154d6:	09 c2                	or     edx,eax
c00154d8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00154db:	c1 e8 18             	shr    eax,0x18
c00154de:	09 d0                	or     eax,edx
c00154e0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154e3:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00154e7:	75 0b                	jne    c00154f4 <opcodeFault(regs*, void*)+0x31e>
c00154e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154ec:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00154ef:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00154f2:	eb 75                	jmp    c0015569 <opcodeFault(regs*, void*)+0x393>
c00154f4:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00154f8:	75 0b                	jne    c0015505 <opcodeFault(regs*, void*)+0x32f>
c00154fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154fd:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015500:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0015503:	eb 64                	jmp    c0015569 <opcodeFault(regs*, void*)+0x393>
c0015505:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015509:	75 0b                	jne    c0015516 <opcodeFault(regs*, void*)+0x340>
c001550b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001550e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015511:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015514:	eb 53                	jmp    c0015569 <opcodeFault(regs*, void*)+0x393>
c0015516:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c001551a:	75 0b                	jne    c0015527 <opcodeFault(regs*, void*)+0x351>
c001551c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001551f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015522:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0015525:	eb 42                	jmp    c0015569 <opcodeFault(regs*, void*)+0x393>
c0015527:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c001552b:	75 0b                	jne    c0015538 <opcodeFault(regs*, void*)+0x362>
c001552d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015530:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015533:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0015536:	eb 31                	jmp    c0015569 <opcodeFault(regs*, void*)+0x393>
c0015538:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c001553c:	75 0b                	jne    c0015549 <opcodeFault(regs*, void*)+0x373>
c001553e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015541:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015544:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015547:	eb 20                	jmp    c0015569 <opcodeFault(regs*, void*)+0x393>
c0015549:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001554d:	75 0b                	jne    c001555a <opcodeFault(regs*, void*)+0x384>
c001554f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015552:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015555:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0015558:	eb 0f                	jmp    c0015569 <opcodeFault(regs*, void*)+0x393>
c001555a:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001555e:	75 09                	jne    c0015569 <opcodeFault(regs*, void*)+0x393>
c0015560:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015563:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015566:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0015569:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001556c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001556f:	8d 50 02             	lea    edx,[eax+0x2]
c0015572:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015575:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015578:	e9 58 02 00 00       	jmp    c00157d5 <opcodeFault(regs*, void*)+0x5ff>
c001557d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015580:	8a 00                	mov    al,BYTE PTR [eax]
c0015582:	3c 0f                	cmp    al,0xf
c0015584:	0f 85 76 01 00 00    	jne    c0015700 <opcodeFault(regs*, void*)+0x52a>
c001558a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001558d:	40                   	inc    eax
c001558e:	8a 00                	mov    al,BYTE PTR [eax]
c0015590:	3c c7                	cmp    al,0xc7
c0015592:	0f 85 68 01 00 00    	jne    c0015700 <opcodeFault(regs*, void*)+0x52a>
c0015598:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001559b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001559e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00155a1:	8d 50 01             	lea    edx,[eax+0x1]
c00155a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155a7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00155aa:	8d 45 ba             	lea    eax,[ebp-0x46]
c00155ad:	50                   	push   eax
c00155ae:	8d 45 bb             	lea    eax,[ebp-0x45]
c00155b1:	50                   	push   eax
c00155b2:	8d 45 bc             	lea    eax,[ebp-0x44]
c00155b5:	50                   	push   eax
c00155b6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00155b9:	e8 0a 46 00 00       	call   c0019bc8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00155be:	83 c4 10             	add    esp,0x10
c00155c1:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00155c4:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c00155c7:	83 f0 01             	xor    eax,0x1
c00155ca:	84 c0                	test   al,al
c00155cc:	0f 84 2e 01 00 00    	je     c0015700 <opcodeFault(regs*, void*)+0x52a>
c00155d2:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c00155d5:	3c 01                	cmp    al,0x1
c00155d7:	0f 85 23 01 00 00    	jne    c0015700 <opcodeFault(regs*, void*)+0x52a>
c00155dd:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c00155e0:	83 f0 01             	xor    eax,0x1
c00155e3:	84 c0                	test   al,al
c00155e5:	0f 84 15 01 00 00    	je     c0015700 <opcodeFault(regs*, void*)+0x52a>
c00155eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155ee:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00155f1:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00155f4:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c00155fb:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00155fe:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015601:	89 c2                	mov    edx,eax
c0015603:	b8 00 00 00 00       	mov    eax,0x0
c0015608:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001560b:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001560e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015611:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015614:	ba 00 00 00 00       	mov    edx,0x0
c0015619:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c001561c:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c001561f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015622:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015625:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015628:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c001562f:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015632:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015635:	89 c2                	mov    edx,eax
c0015637:	b8 00 00 00 00       	mov    eax,0x0
c001563c:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001563f:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0015642:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015645:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015648:	ba 00 00 00 00       	mov    edx,0x0
c001564d:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0015650:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0015653:	e8 84 86 00 00       	call   c001dcdc <lockScheduler()>
c0015658:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001565b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001565e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015660:	89 c1                	mov    ecx,eax
c0015662:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0015665:	89 cb                	mov    ebx,ecx
c0015667:	89 d0                	mov    eax,edx
c0015669:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c001566c:	89 c6                	mov    esi,eax
c001566e:	89 f0                	mov    eax,esi
c0015670:	09 d8                	or     eax,ebx
c0015672:	85 c0                	test   eax,eax
c0015674:	75 21                	jne    c0015697 <opcodeFault(regs*, void*)+0x4c1>
c0015676:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0015679:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001567c:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001567f:	89 01                	mov    DWORD PTR [ecx],eax
c0015681:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015684:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015687:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001568a:	83 c8 40             	or     eax,0x40
c001568d:	89 c2                	mov    edx,eax
c001568f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015692:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015695:	eb 3e                	jmp    c00156d5 <opcodeFault(regs*, void*)+0x4ff>
c0015697:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001569a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001569d:	8b 00                	mov    eax,DWORD PTR [eax]
c001569f:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00156a2:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00156a5:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00156a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156ab:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00156ae:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00156b1:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00156b4:	89 d0                	mov    eax,edx
c00156b6:	31 d2                	xor    edx,edx
c00156b8:	89 c3                	mov    ebx,eax
c00156ba:	89 d6                	mov    esi,edx
c00156bc:	89 da                	mov    edx,ebx
c00156be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156c1:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00156c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156c7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00156ca:	83 e0 bf             	and    eax,0xffffffbf
c00156cd:	89 c2                	mov    edx,eax
c00156cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156d2:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00156d5:	e8 04 86 00 00       	call   c001dcde <unlockScheduler()>
c00156da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156dd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00156e0:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c00156e3:	01 c2                	add    edx,eax
c00156e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156e8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00156eb:	83 ec 0c             	sub    esp,0xc
c00156ee:	68 7e b0 02 c0       	push   0xc002b07e
c00156f3:	e8 cb d6 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00156f8:	83 c4 10             	add    esp,0x10
c00156fb:	e9 d5 00 00 00       	jmp    c00157d5 <opcodeFault(regs*, void*)+0x5ff>
c0015700:	83 ec 0c             	sub    esp,0xc
c0015703:	68 91 b0 02 c0       	push   0xc002b091
c0015708:	e8 b6 d6 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001570d:	83 c4 10             	add    esp,0x10
c0015710:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015713:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015716:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015719:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001571c:	c1 e0 04             	shl    eax,0x4
c001571f:	01 d0                	add    eax,edx
c0015721:	83 c0 03             	add    eax,0x3
c0015724:	8a 00                	mov    al,BYTE PTR [eax]
c0015726:	0f b6 d8             	movzx  ebx,al
c0015729:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001572c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001572f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015732:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015735:	c1 e0 04             	shl    eax,0x4
c0015738:	01 d0                	add    eax,edx
c001573a:	83 c0 02             	add    eax,0x2
c001573d:	8a 00                	mov    al,BYTE PTR [eax]
c001573f:	0f b6 c8             	movzx  ecx,al
c0015742:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015745:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015748:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001574b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001574e:	c1 e0 04             	shl    eax,0x4
c0015751:	01 d0                	add    eax,edx
c0015753:	40                   	inc    eax
c0015754:	8a 00                	mov    al,BYTE PTR [eax]
c0015756:	0f b6 d0             	movzx  edx,al
c0015759:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001575c:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c001575f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015762:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015765:	c1 e0 04             	shl    eax,0x4
c0015768:	01 f0                	add    eax,esi
c001576a:	8a 00                	mov    al,BYTE PTR [eax]
c001576c:	0f b6 c0             	movzx  eax,al
c001576f:	83 ec 0c             	sub    esp,0xc
c0015772:	53                   	push   ebx
c0015773:	51                   	push   ecx
c0015774:	52                   	push   edx
c0015775:	50                   	push   eax
c0015776:	68 a4 b0 02 c0       	push   0xc002b0a4
c001577b:	e8 43 d6 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0015780:	83 c4 20             	add    esp,0x20
c0015783:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015786:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015789:	83 c0 03             	add    eax,0x3
c001578c:	8a 00                	mov    al,BYTE PTR [eax]
c001578e:	0f b6 d8             	movzx  ebx,al
c0015791:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015794:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015797:	83 c0 02             	add    eax,0x2
c001579a:	8a 00                	mov    al,BYTE PTR [eax]
c001579c:	0f b6 c8             	movzx  ecx,al
c001579f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157a2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00157a5:	40                   	inc    eax
c00157a6:	8a 00                	mov    al,BYTE PTR [eax]
c00157a8:	0f b6 d0             	movzx  edx,al
c00157ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ae:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00157b1:	8a 00                	mov    al,BYTE PTR [eax]
c00157b3:	0f b6 c0             	movzx  eax,al
c00157b6:	83 ec 0c             	sub    esp,0xc
c00157b9:	53                   	push   ebx
c00157ba:	51                   	push   ecx
c00157bb:	52                   	push   edx
c00157bc:	50                   	push   eax
c00157bd:	68 cc b0 02 c0       	push   0xc002b0cc
c00157c2:	e8 fc d5 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00157c7:	83 c4 20             	add    esp,0x20
c00157ca:	83 ec 0c             	sub    esp,0xc
c00157cd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00157d0:	e8 6b f4 ff ff       	call   c0014c40 <displayDebugInfo(regs*)>
c00157d5:	8d 65 f8             	lea    esp,[ebp-0x8]
c00157d8:	5b                   	pop    ebx
c00157d9:	5e                   	pop    esi
c00157da:	5d                   	pop    ebp
c00157db:	c3                   	ret    

c00157dc <displayProgramFault(char const*)>:
c00157dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00157e1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00157e4:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00157ea:	85 c0                	test   eax,eax
c00157ec:	74 15                	je     c0015803 <displayProgramFault(char const*)+0x27>
c00157ee:	83 ec 0c             	sub    esp,0xc
c00157f1:	6a 04                	push   0x4
c00157f3:	6a 0f                	push   0xf
c00157f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00157f9:	50                   	push   eax
c00157fa:	e8 e5 b4 ff ff       	call   c0010ce4 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00157ff:	83 c4 1c             	add    esp,0x1c
c0015802:	c3                   	ret    
c0015803:	c3                   	ret    

c0015804 <setupInterruptController()>:
c0015804:	55                   	push   ebp
c0015805:	89 e5                	mov    ebp,esp
c0015807:	53                   	push   ebx
c0015808:	83 ec 24             	sub    esp,0x24
c001580b:	b8 00 00 00 00       	mov    eax,0x0
c0015810:	85 c0                	test   eax,eax
c0015812:	0f 95 c0             	setne  al
c0015815:	84 c0                	test   al,al
c0015817:	74 5b                	je     c0015874 <setupInterruptController()+0x70>
c0015819:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015820:	83 ec 0c             	sub    esp,0xc
c0015823:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015826:	e8 20 a0 ff ff       	call   c000f84b <malloc>
c001582b:	83 c4 10             	add    esp,0x10
c001582e:	89 c3                	mov    ebx,eax
c0015830:	83 ec 0c             	sub    esp,0xc
c0015833:	53                   	push   ebx
c0015834:	e8 f7 00 01 00       	call   c0025930 <APIC::APIC()>
c0015839:	83 c4 10             	add    esp,0x10
c001583c:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c001583f:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015842:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015845:	8b 00                	mov    eax,DWORD PTR [eax]
c0015847:	83 c0 08             	add    eax,0x8
c001584a:	8b 00                	mov    eax,DWORD PTR [eax]
c001584c:	6a 00                	push   0x0
c001584e:	6a 00                	push   0x0
c0015850:	6a 00                	push   0x0
c0015852:	52                   	push   edx
c0015853:	ff d0                	call   eax
c0015855:	83 c4 10             	add    esp,0x10
c0015858:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c001585d:	83 ec 08             	sub    esp,0x8
c0015860:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015863:	50                   	push   eax
c0015864:	e8 87 e9 ff ff       	call   c00141f0 <Device::addChild(Device*)>
c0015869:	83 c4 10             	add    esp,0x10
c001586c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001586f:	e9 89 03 00 00       	jmp    c0015bfd <setupInterruptController()+0x3f9>
c0015874:	a0 00 0e 03 c0       	mov    al,ds:0xc0030e00
c0015879:	84 c0                	test   al,al
c001587b:	75 24                	jne    c00158a1 <setupInterruptController()+0x9d>
c001587d:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0015882:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0015888:	83 e2 fe             	and    edx,0xfffffffe
c001588b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0015891:	83 ec 0c             	sub    esp,0xc
c0015894:	68 f1 b0 02 c0       	push   0xc002b0f1
c0015899:	e8 25 d5 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001589e:	83 c4 10             	add    esp,0x10
c00158a1:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c00158a6:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00158ac:	83 e0 01             	and    eax,0x1
c00158af:	84 c0                	test   al,al
c00158b1:	0f 95 c0             	setne  al
c00158b4:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00158b7:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c00158be:	83 ec 0c             	sub    esp,0xc
c00158c1:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00158c4:	e8 82 9f ff ff       	call   c000f84b <malloc>
c00158c9:	83 c4 10             	add    esp,0x10
c00158cc:	89 c3                	mov    ebx,eax
c00158ce:	83 ec 0c             	sub    esp,0xc
c00158d1:	53                   	push   ebx
c00158d2:	e8 b1 05 01 00       	call   c0025e88 <PIC::PIC()>
c00158d7:	83 c4 10             	add    esp,0x10
c00158da:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00158dd:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00158e0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00158e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00158e5:	83 c0 08             	add    eax,0x8
c00158e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00158ea:	6a 00                	push   0x0
c00158ec:	6a 00                	push   0x0
c00158ee:	6a 00                	push   0x0
c00158f0:	52                   	push   edx
c00158f1:	ff d0                	call   eax
c00158f3:	83 c4 10             	add    esp,0x10
c00158f6:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c00158fa:	74 73                	je     c001596f <setupInterruptController()+0x16b>
c00158fc:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00158ff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015902:	8b 00                	mov    eax,DWORD PTR [eax]
c0015904:	83 c0 0c             	add    eax,0xc
c0015907:	8b 00                	mov    eax,DWORD PTR [eax]
c0015909:	6a 00                	push   0x0
c001590b:	6a 00                	push   0x0
c001590d:	6a 00                	push   0x0
c001590f:	52                   	push   edx
c0015910:	ff d0                	call   eax
c0015912:	83 c4 10             	add    esp,0x10
c0015915:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015919:	74 15                	je     c0015930 <setupInterruptController()+0x12c>
c001591b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001591e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015920:	83 c0 04             	add    eax,0x4
c0015923:	8b 00                	mov    eax,DWORD PTR [eax]
c0015925:	83 ec 0c             	sub    esp,0xc
c0015928:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001592b:	ff d0                	call   eax
c001592d:	83 c4 10             	add    esp,0x10
c0015930:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015937:	83 ec 0c             	sub    esp,0xc
c001593a:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001593d:	e8 09 9f ff ff       	call   c000f84b <malloc>
c0015942:	83 c4 10             	add    esp,0x10
c0015945:	89 c3                	mov    ebx,eax
c0015947:	83 ec 0c             	sub    esp,0xc
c001594a:	53                   	push   ebx
c001594b:	e8 e0 ff 00 00       	call   c0025930 <APIC::APIC()>
c0015950:	83 c4 10             	add    esp,0x10
c0015953:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015956:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015959:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001595c:	8b 00                	mov    eax,DWORD PTR [eax]
c001595e:	83 c0 08             	add    eax,0x8
c0015961:	8b 00                	mov    eax,DWORD PTR [eax]
c0015963:	6a 00                	push   0x0
c0015965:	6a 00                	push   0x0
c0015967:	6a 00                	push   0x0
c0015969:	52                   	push   edx
c001596a:	ff d0                	call   eax
c001596c:	83 c4 10             	add    esp,0x10
c001596f:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0015974:	83 ec 08             	sub    esp,0x8
c0015977:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001597a:	50                   	push   eax
c001597b:	e8 70 e8 ff ff       	call   c00141f0 <Device::addChild(Device*)>
c0015980:	83 c4 10             	add    esp,0x10
c0015983:	c7 05 08 e6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e608,0x0
c001598d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015990:	8b 00                	mov    eax,DWORD PTR [eax]
c0015992:	83 c0 24             	add    eax,0x24
c0015995:	8b 00                	mov    eax,DWORD PTR [eax]
c0015997:	6a 00                	push   0x0
c0015999:	68 b7 51 01 c0       	push   0xc00151b7
c001599e:	6a 00                	push   0x0
c00159a0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00159a3:	ff d0                	call   eax
c00159a5:	83 c4 10             	add    esp,0x10
c00159a8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00159ad:	83 c0 24             	add    eax,0x24
c00159b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00159b2:	6a 00                	push   0x0
c00159b4:	68 b7 51 01 c0       	push   0xc00151b7
c00159b9:	6a 01                	push   0x1
c00159bb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00159be:	ff d0                	call   eax
c00159c0:	83 c4 10             	add    esp,0x10
c00159c3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00159c8:	83 c0 24             	add    eax,0x24
c00159cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00159cd:	6a 00                	push   0x0
c00159cf:	68 9d 4a 01 c0       	push   0xc0014a9d
c00159d4:	6a 02                	push   0x2
c00159d6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00159d9:	ff d0                	call   eax
c00159db:	83 c4 10             	add    esp,0x10
c00159de:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00159e3:	83 c0 24             	add    eax,0x24
c00159e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00159e8:	6a 00                	push   0x0
c00159ea:	68 b7 51 01 c0       	push   0xc00151b7
c00159ef:	6a 03                	push   0x3
c00159f1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00159f4:	ff d0                	call   eax
c00159f6:	83 c4 10             	add    esp,0x10
c00159f9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00159fe:	83 c0 24             	add    eax,0x24
c0015a01:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a03:	6a 00                	push   0x0
c0015a05:	68 b7 51 01 c0       	push   0xc00151b7
c0015a0a:	6a 04                	push   0x4
c0015a0c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a0f:	ff d0                	call   eax
c0015a11:	83 c4 10             	add    esp,0x10
c0015a14:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a17:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a19:	83 c0 24             	add    eax,0x24
c0015a1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a1e:	6a 00                	push   0x0
c0015a20:	68 b7 51 01 c0       	push   0xc00151b7
c0015a25:	6a 05                	push   0x5
c0015a27:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a2a:	ff d0                	call   eax
c0015a2c:	83 c4 10             	add    esp,0x10
c0015a2f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a32:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a34:	83 c0 24             	add    eax,0x24
c0015a37:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a39:	6a 00                	push   0x0
c0015a3b:	68 d6 51 01 c0       	push   0xc00151d6
c0015a40:	6a 06                	push   0x6
c0015a42:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a45:	ff d0                	call   eax
c0015a47:	83 c4 10             	add    esp,0x10
c0015a4a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a4d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a4f:	83 c0 24             	add    eax,0x24
c0015a52:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a54:	6a 00                	push   0x0
c0015a56:	68 cf 50 01 c0       	push   0xc00150cf
c0015a5b:	6a 07                	push   0x7
c0015a5d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a60:	ff d0                	call   eax
c0015a62:	83 c4 10             	add    esp,0x10
c0015a65:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a68:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a6a:	83 c0 24             	add    eax,0x24
c0015a6d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a6f:	6a 00                	push   0x0
c0015a71:	68 b8 48 01 c0       	push   0xc00148b8
c0015a76:	6a 08                	push   0x8
c0015a78:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a7b:	ff d0                	call   eax
c0015a7d:	83 c4 10             	add    esp,0x10
c0015a80:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a83:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a85:	83 c0 24             	add    eax,0x24
c0015a88:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a8a:	6a 00                	push   0x0
c0015a8c:	68 b7 51 01 c0       	push   0xc00151b7
c0015a91:	6a 09                	push   0x9
c0015a93:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a96:	ff d0                	call   eax
c0015a98:	83 c4 10             	add    esp,0x10
c0015a9b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a9e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aa0:	83 c0 24             	add    eax,0x24
c0015aa3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aa5:	6a 00                	push   0x0
c0015aa7:	68 b7 51 01 c0       	push   0xc00151b7
c0015aac:	6a 0a                	push   0xa
c0015aae:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ab1:	ff d0                	call   eax
c0015ab3:	83 c4 10             	add    esp,0x10
c0015ab6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ab9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015abb:	83 c0 24             	add    eax,0x24
c0015abe:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ac0:	6a 00                	push   0x0
c0015ac2:	68 b7 51 01 c0       	push   0xc00151b7
c0015ac7:	6a 0b                	push   0xb
c0015ac9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015acc:	ff d0                	call   eax
c0015ace:	83 c4 10             	add    esp,0x10
c0015ad1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ad4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ad6:	83 c0 24             	add    eax,0x24
c0015ad9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015adb:	6a 00                	push   0x0
c0015add:	68 b7 51 01 c0       	push   0xc00151b7
c0015ae2:	6a 0c                	push   0xc
c0015ae4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ae7:	ff d0                	call   eax
c0015ae9:	83 c4 10             	add    esp,0x10
c0015aec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aef:	8b 00                	mov    eax,DWORD PTR [eax]
c0015af1:	83 c0 24             	add    eax,0x24
c0015af4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015af6:	6a 00                	push   0x0
c0015af8:	68 42 51 01 c0       	push   0xc0015142
c0015afd:	6a 0d                	push   0xd
c0015aff:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b02:	ff d0                	call   eax
c0015b04:	83 c4 10             	add    esp,0x10
c0015b07:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b0a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b0c:	83 c0 24             	add    eax,0x24
c0015b0f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b11:	6a 00                	push   0x0
c0015b13:	68 7b 51 01 c0       	push   0xc001517b
c0015b18:	6a 0e                	push   0xe
c0015b1a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b1d:	ff d0                	call   eax
c0015b1f:	83 c4 10             	add    esp,0x10
c0015b22:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b25:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b27:	83 c0 24             	add    eax,0x24
c0015b2a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b2c:	6a 00                	push   0x0
c0015b2e:	68 b7 51 01 c0       	push   0xc00151b7
c0015b33:	6a 0f                	push   0xf
c0015b35:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b38:	ff d0                	call   eax
c0015b3a:	83 c4 10             	add    esp,0x10
c0015b3d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b40:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b42:	83 c0 24             	add    eax,0x24
c0015b45:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b47:	6a 00                	push   0x0
c0015b49:	68 b7 51 01 c0       	push   0xc00151b7
c0015b4e:	6a 10                	push   0x10
c0015b50:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b53:	ff d0                	call   eax
c0015b55:	83 c4 10             	add    esp,0x10
c0015b58:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b5b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b5d:	83 c0 24             	add    eax,0x24
c0015b60:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b62:	6a 00                	push   0x0
c0015b64:	68 b7 51 01 c0       	push   0xc00151b7
c0015b69:	6a 11                	push   0x11
c0015b6b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b6e:	ff d0                	call   eax
c0015b70:	83 c4 10             	add    esp,0x10
c0015b73:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b76:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b78:	83 c0 24             	add    eax,0x24
c0015b7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b7d:	6a 00                	push   0x0
c0015b7f:	68 b7 51 01 c0       	push   0xc00151b7
c0015b84:	6a 12                	push   0x12
c0015b86:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b89:	ff d0                	call   eax
c0015b8b:	83 c4 10             	add    esp,0x10
c0015b8e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b91:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b93:	83 c0 24             	add    eax,0x24
c0015b96:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b98:	6a 00                	push   0x0
c0015b9a:	68 b7 51 01 c0       	push   0xc00151b7
c0015b9f:	6a 13                	push   0x13
c0015ba1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ba4:	ff d0                	call   eax
c0015ba6:	83 c4 10             	add    esp,0x10
c0015ba9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bac:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bae:	83 c0 24             	add    eax,0x24
c0015bb1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bb3:	6a 00                	push   0x0
c0015bb5:	68 b7 51 01 c0       	push   0xc00151b7
c0015bba:	6a 14                	push   0x14
c0015bbc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bbf:	ff d0                	call   eax
c0015bc1:	83 c4 10             	add    esp,0x10
c0015bc4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bc7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bc9:	83 c0 24             	add    eax,0x24
c0015bcc:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bce:	6a 00                	push   0x0
c0015bd0:	68 b7 51 01 c0       	push   0xc00151b7
c0015bd5:	6a 1e                	push   0x1e
c0015bd7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bda:	ff d0                	call   eax
c0015bdc:	83 c4 10             	add    esp,0x10
c0015bdf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015be2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015be4:	83 c0 24             	add    eax,0x24
c0015be7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015be9:	6a 00                	push   0x0
c0015beb:	68 8b c6 01 c0       	push   0xc001c68b
c0015bf0:	6a 60                	push   0x60
c0015bf2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bf5:	ff d0                	call   eax
c0015bf7:	83 c4 10             	add    esp,0x10
c0015bfa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bfd:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015c00:	c9                   	leave  
c0015c01:	c3                   	ret    

c0015c02 <InterruptController::convertLegacyIRQNumber(int)>:
c0015c02:	55                   	push   ebp
c0015c03:	89 e5                	mov    ebp,esp
c0015c05:	83 ec 08             	sub    esp,0x8
c0015c08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c0b:	83 ec 0c             	sub    esp,0xc
c0015c0e:	50                   	push   eax
c0015c0f:	e8 c8 e8 ff ff       	call   c00144dc <Device::getName()>
c0015c14:	83 c4 10             	add    esp,0x10
c0015c17:	8a 00                	mov    al,BYTE PTR [eax]
c0015c19:	3c 41                	cmp    al,0x41
c0015c1b:	0f 94 c0             	sete   al
c0015c1e:	84 c0                	test   al,al
c0015c20:	74 28                	je     c0015c4a <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015c22:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015c26:	7f 12                	jg     c0015c3a <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015c28:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015c2b:	05 c0 d6 02 c0       	add    eax,0xc002d6c0
c0015c30:	8a 00                	mov    al,BYTE PTR [eax]
c0015c32:	0f b6 c0             	movzx  eax,al
c0015c35:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015c38:	eb 10                	jmp    c0015c4a <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015c3a:	83 ec 0c             	sub    esp,0xc
c0015c3d:	68 e0 ad 02 c0       	push   0xc002ade0
c0015c42:	e8 ba 48 00 00       	call   c001a501 <Krnl::panic(char const*)>
c0015c47:	83 c4 10             	add    esp,0x10
c0015c4a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015c4d:	c9                   	leave  
c0015c4e:	c3                   	ret    
c0015c4f:	90                   	nop

c0015c50 <startGUI(void*)>:
c0015c50:	55                   	push   ebp
c0015c51:	89 e5                	mov    ebp,esp
c0015c53:	53                   	push   ebx
c0015c54:	83 ec 04             	sub    esp,0x4
c0015c57:	e8 82 80 00 00       	call   c001dcde <unlockScheduler()>
c0015c5c:	8b 1d 68 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e468
c0015c62:	83 ec 08             	sub    esp,0x8
c0015c65:	6a 01                	push   0x1
c0015c67:	68 54 b1 02 c0       	push   0xc002b154
c0015c6c:	e8 c3 79 00 00       	call   c001d634 <Thr::loadDLL(char const*, bool)>
c0015c71:	83 c4 10             	add    esp,0x10
c0015c74:	83 ec 08             	sub    esp,0x8
c0015c77:	53                   	push   ebx
c0015c78:	50                   	push   eax
c0015c79:	e8 ea 7b 00 00       	call   c001d868 <Thr::executeDLL(unsigned long, void*)>
c0015c7e:	83 c4 10             	add    esp,0x10
c0015c81:	8b 1d 68 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e468
c0015c87:	83 ec 08             	sub    esp,0x8
c0015c8a:	6a 01                	push   0x1
c0015c8c:	68 6e b1 02 c0       	push   0xc002b16e
c0015c91:	e8 9e 79 00 00       	call   c001d634 <Thr::loadDLL(char const*, bool)>
c0015c96:	83 c4 10             	add    esp,0x10
c0015c99:	83 ec 08             	sub    esp,0x8
c0015c9c:	53                   	push   ebx
c0015c9d:	50                   	push   eax
c0015c9e:	e8 c5 7b 00 00       	call   c001d868 <Thr::executeDLL(unsigned long, void*)>
c0015ca3:	83 c4 10             	add    esp,0x10
c0015ca6:	90                   	nop
c0015ca7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015caa:	c9                   	leave  
c0015cab:	c3                   	ret    

c0015cac <startGUIVESA(void*)>:
c0015cac:	55                   	push   ebp
c0015cad:	89 e5                	mov    ebp,esp
c0015caf:	53                   	push   ebx
c0015cb0:	83 ec 04             	sub    esp,0x4
c0015cb3:	e8 26 80 00 00       	call   c001dcde <unlockScheduler()>
c0015cb8:	8b 1d 68 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e468
c0015cbe:	83 ec 08             	sub    esp,0x8
c0015cc1:	6a 01                	push   0x1
c0015cc3:	68 88 b1 02 c0       	push   0xc002b188
c0015cc8:	e8 67 79 00 00       	call   c001d634 <Thr::loadDLL(char const*, bool)>
c0015ccd:	83 c4 10             	add    esp,0x10
c0015cd0:	83 ec 08             	sub    esp,0x8
c0015cd3:	53                   	push   ebx
c0015cd4:	50                   	push   eax
c0015cd5:	e8 8e 7b 00 00       	call   c001d868 <Thr::executeDLL(unsigned long, void*)>
c0015cda:	83 c4 10             	add    esp,0x10
c0015cdd:	8b 1d 68 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e468
c0015ce3:	83 ec 08             	sub    esp,0x8
c0015ce6:	6a 01                	push   0x1
c0015ce8:	68 6e b1 02 c0       	push   0xc002b16e
c0015ced:	e8 42 79 00 00       	call   c001d634 <Thr::loadDLL(char const*, bool)>
c0015cf2:	83 c4 10             	add    esp,0x10
c0015cf5:	83 ec 08             	sub    esp,0x8
c0015cf8:	53                   	push   ebx
c0015cf9:	50                   	push   eax
c0015cfa:	e8 69 7b 00 00       	call   c001d868 <Thr::executeDLL(unsigned long, void*)>
c0015cff:	83 c4 10             	add    esp,0x10
c0015d02:	90                   	nop
c0015d03:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015d06:	c9                   	leave  
c0015d07:	c3                   	ret    

c0015d08 <sendKeyToTerminal(unsigned char)>:
c0015d08:	55                   	push   ebp
c0015d09:	89 e5                	mov    ebp,esp
c0015d0b:	83 ec 28             	sub    esp,0x28
c0015d0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d11:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015d14:	a1 44 e5 02 c0       	mov    eax,ds:0xc002e544
c0015d19:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015d1d:	83 ec 08             	sub    esp,0x8
c0015d20:	52                   	push   edx
c0015d21:	50                   	push   eax
c0015d22:	e8 97 b4 ff ff       	call   c00111be <VgaText::receiveKey(unsigned char)>
c0015d27:	83 c4 10             	add    esp,0x10
c0015d2a:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015d2e:	75 41                	jne    c0015d71 <sendKeyToTerminal(unsigned char)+0x69>
c0015d30:	e8 ce 7f 00 00       	call   c001dd03 <lockStuff()>
c0015d35:	a1 20 e6 02 c0       	mov    eax,ds:0xc002e620
c0015d3a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015d3d:	c7 05 20 e6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e620,0x0
c0015d47:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015d4b:	74 1f                	je     c0015d6c <sendKeyToTerminal(unsigned char)+0x64>
c0015d4d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d50:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015d53:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015d56:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015d59:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015d5c:	83 ec 0c             	sub    esp,0xc
c0015d5f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015d62:	e8 c7 85 00 00       	call   c001e32e <unblockTask(ThreadControlBlock*)>
c0015d67:	83 c4 10             	add    esp,0x10
c0015d6a:	eb db                	jmp    c0015d47 <sendKeyToTerminal(unsigned char)+0x3f>
c0015d6c:	e8 66 83 00 00       	call   c001e0d7 <unlockStuff()>
c0015d71:	90                   	nop
c0015d72:	c9                   	leave  
c0015d73:	c3                   	ret    

c0015d74 <sendKeyboardToken(KeyboardToken)>:
c0015d74:	55                   	push   ebp
c0015d75:	89 e5                	mov    ebp,esp
c0015d77:	83 ec 18             	sub    esp,0x18
c0015d7a:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015d7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d80:	0f b7 c0             	movzx  eax,ax
c0015d83:	83 f2 01             	xor    edx,0x1
c0015d86:	88 90 40 e6 02 c0    	mov    BYTE PTR [eax-0x3ffd19c0],dl
c0015d8c:	a1 28 e6 02 c0       	mov    eax,ds:0xc002e628
c0015d91:	85 c0                	test   eax,eax
c0015d93:	74 24                	je     c0015db9 <sendKeyboardToken(KeyboardToken)+0x45>
c0015d95:	8b 0d 28 e6 02 c0    	mov    ecx,DWORD PTR ds:0xc002e628
c0015d9b:	83 ec 04             	sub    esp,0x4
c0015d9e:	68 40 e6 02 c0       	push   0xc002e640
c0015da3:	83 ec 08             	sub    esp,0x8
c0015da6:	89 e2                	mov    edx,esp
c0015da8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dab:	89 02                	mov    DWORD PTR [edx],eax
c0015dad:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015db0:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015db4:	ff d1                	call   ecx
c0015db6:	83 c4 10             	add    esp,0x10
c0015db9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dbc:	66 3d 03 02          	cmp    ax,0x203
c0015dc0:	75 07                	jne    c0015dc9 <sendKeyboardToken(KeyboardToken)+0x55>
c0015dc2:	a0 40 e7 02 c0       	mov    al,ds:0xc002e740
c0015dc7:	84 c0                	test   al,al
c0015dc9:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015dcd:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015dd0:	a0 48 ea 02 c0       	mov    al,ds:0xc002ea48
c0015dd5:	38 c2                	cmp    dl,al
c0015dd7:	74 1c                	je     c0015df5 <sendKeyboardToken(KeyboardToken)+0x81>
c0015dd9:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015ddc:	a2 48 ea 02 c0       	mov    ds:0xc002ea48,al
c0015de1:	a0 48 ea 02 c0       	mov    al,ds:0xc002ea48
c0015de6:	0f b6 c0             	movzx  eax,al
c0015de9:	83 ec 0c             	sub    esp,0xc
c0015dec:	50                   	push   eax
c0015ded:	e8 52 a7 ff ff       	call   c0010544 <setTerminalScrollLock(bool)>
c0015df2:	83 c4 10             	add    esp,0x10
c0015df5:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015df8:	84 c0                	test   al,al
c0015dfa:	0f 84 ae 00 00 00    	je     c0015eae <sendKeyboardToken(KeyboardToken)+0x13a>
c0015e00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e03:	66 3d 10 03          	cmp    ax,0x310
c0015e07:	75 06                	jne    c0015e0f <sendKeyboardToken(KeyboardToken)+0x9b>
c0015e09:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015e0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e12:	66 3d 11 03          	cmp    ax,0x311
c0015e16:	75 06                	jne    c0015e1e <sendKeyboardToken(KeyboardToken)+0xaa>
c0015e18:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015e1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e21:	66 3d 12 03          	cmp    ax,0x312
c0015e25:	75 06                	jne    c0015e2d <sendKeyboardToken(KeyboardToken)+0xb9>
c0015e27:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015e2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e30:	66 3d 13 03          	cmp    ax,0x313
c0015e34:	75 06                	jne    c0015e3c <sendKeyboardToken(KeyboardToken)+0xc8>
c0015e36:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015e3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e3f:	66 3d 14 03          	cmp    ax,0x314
c0015e43:	75 06                	jne    c0015e4b <sendKeyboardToken(KeyboardToken)+0xd7>
c0015e45:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015e4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e4e:	66 3d 15 03          	cmp    ax,0x315
c0015e52:	75 06                	jne    c0015e5a <sendKeyboardToken(KeyboardToken)+0xe6>
c0015e54:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015e5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e5d:	66 3d 16 03          	cmp    ax,0x316
c0015e61:	75 06                	jne    c0015e69 <sendKeyboardToken(KeyboardToken)+0xf5>
c0015e63:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015e69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e6c:	66 3d 17 03          	cmp    ax,0x317
c0015e70:	75 06                	jne    c0015e78 <sendKeyboardToken(KeyboardToken)+0x104>
c0015e72:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015e78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e7b:	66 3d 18 03          	cmp    ax,0x318
c0015e7f:	75 06                	jne    c0015e87 <sendKeyboardToken(KeyboardToken)+0x113>
c0015e81:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015e87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e8a:	66 3d 19 03          	cmp    ax,0x319
c0015e8e:	75 06                	jne    c0015e96 <sendKeyboardToken(KeyboardToken)+0x122>
c0015e90:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015e96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e99:	66 3d 1a 03          	cmp    ax,0x31a
c0015e9d:	0f 85 c9 00 00 00    	jne    c0015f6c <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015ea3:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015ea9:	e9 be 00 00 00       	jmp    c0015f6c <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015eae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015eb1:	66 3d 10 03          	cmp    ax,0x310
c0015eb5:	75 0a                	jne    c0015ec1 <sendKeyboardToken(KeyboardToken)+0x14d>
c0015eb7:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015ebd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ec1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ec4:	66 3d 11 03          	cmp    ax,0x311
c0015ec8:	75 0a                	jne    c0015ed4 <sendKeyboardToken(KeyboardToken)+0x160>
c0015eca:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015ed0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ed4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ed7:	66 3d 12 03          	cmp    ax,0x312
c0015edb:	75 0a                	jne    c0015ee7 <sendKeyboardToken(KeyboardToken)+0x173>
c0015edd:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015ee3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ee7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015eea:	66 3d 13 03          	cmp    ax,0x313
c0015eee:	75 0a                	jne    c0015efa <sendKeyboardToken(KeyboardToken)+0x186>
c0015ef0:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015ef6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015efa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015efd:	66 3d 14 03          	cmp    ax,0x314
c0015f01:	75 0a                	jne    c0015f0d <sendKeyboardToken(KeyboardToken)+0x199>
c0015f03:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015f09:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f10:	66 3d 15 03          	cmp    ax,0x315
c0015f14:	75 0a                	jne    c0015f20 <sendKeyboardToken(KeyboardToken)+0x1ac>
c0015f16:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015f1c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f23:	66 3d 16 03          	cmp    ax,0x316
c0015f27:	75 0a                	jne    c0015f33 <sendKeyboardToken(KeyboardToken)+0x1bf>
c0015f29:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015f2f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f36:	66 3d 17 03          	cmp    ax,0x317
c0015f3a:	75 0a                	jne    c0015f46 <sendKeyboardToken(KeyboardToken)+0x1d2>
c0015f3c:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015f42:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f49:	66 3d 18 03          	cmp    ax,0x318
c0015f4d:	75 0a                	jne    c0015f59 <sendKeyboardToken(KeyboardToken)+0x1e5>
c0015f4f:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015f55:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f5c:	66 3d 19 03          	cmp    ax,0x319
c0015f60:	75 0a                	jne    c0015f6c <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015f62:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015f68:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f6f:	66 3d 00 02          	cmp    ax,0x200
c0015f73:	75 2c                	jne    c0015fa1 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015f75:	a0 40 ea 02 c0       	mov    al,ds:0xc002ea40
c0015f7a:	83 f0 01             	xor    eax,0x1
c0015f7d:	84 c0                	test   al,al
c0015f7f:	74 20                	je     c0015fa1 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015f81:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0015f86:	6a 01                	push   0x1
c0015f88:	6a 00                	push   0x0
c0015f8a:	68 50 5c 01 c0       	push   0xc0015c50
c0015f8f:	50                   	push   eax
c0015f90:	e8 79 7e 00 00       	call   c001de0e <Process::createThread(void (*)(void*), void*, int)>
c0015f95:	83 c4 10             	add    esp,0x10
c0015f98:	c6 05 40 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea40,0x1
c0015f9f:	eb 33                	jmp    c0015fd4 <sendKeyboardToken(KeyboardToken)+0x260>
c0015fa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fa4:	66 3d 01 02          	cmp    ax,0x201
c0015fa8:	75 2a                	jne    c0015fd4 <sendKeyboardToken(KeyboardToken)+0x260>
c0015faa:	a0 40 ea 02 c0       	mov    al,ds:0xc002ea40
c0015faf:	83 f0 01             	xor    eax,0x1
c0015fb2:	84 c0                	test   al,al
c0015fb4:	74 1e                	je     c0015fd4 <sendKeyboardToken(KeyboardToken)+0x260>
c0015fb6:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0015fbb:	6a 01                	push   0x1
c0015fbd:	6a 00                	push   0x0
c0015fbf:	68 ac 5c 01 c0       	push   0xc0015cac
c0015fc4:	50                   	push   eax
c0015fc5:	e8 44 7e 00 00       	call   c001de0e <Process::createThread(void (*)(void*), void*, int)>
c0015fca:	83 c4 10             	add    esp,0x10
c0015fcd:	c6 05 40 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea40,0x1
c0015fd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fd7:	66 3d 1d 03          	cmp    ax,0x31d
c0015fdb:	75 06                	jne    c0015fe3 <sendKeyboardToken(KeyboardToken)+0x26f>
c0015fdd:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015fe3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fe6:	66 3d 1c 03          	cmp    ax,0x31c
c0015fea:	75 06                	jne    c0015ff2 <sendKeyboardToken(KeyboardToken)+0x27e>
c0015fec:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015ff2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ff5:	66 3d 1b 03          	cmp    ax,0x31b
c0015ff9:	75 06                	jne    c0016001 <sendKeyboardToken(KeyboardToken)+0x28d>
c0015ffb:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0016001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016004:	66 3d 1e 03          	cmp    ax,0x31e
c0016008:	75 06                	jne    c0016010 <sendKeyboardToken(KeyboardToken)+0x29c>
c001600a:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0016010:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016013:	66 3d 1f 03          	cmp    ax,0x31f
c0016017:	75 06                	jne    c001601f <sendKeyboardToken(KeyboardToken)+0x2ab>
c0016019:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001601f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016022:	66 3d 1a 03          	cmp    ax,0x31a
c0016026:	75 06                	jne    c001602e <sendKeyboardToken(KeyboardToken)+0x2ba>
c0016028:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c001602e:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0016032:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016035:	83 f0 01             	xor    eax,0x1
c0016038:	84 c0                	test   al,al
c001603a:	74 77                	je     c00160b3 <sendKeyboardToken(KeyboardToken)+0x33f>
c001603c:	a0 41 e7 02 c0       	mov    al,ds:0xc002e741
c0016041:	84 c0                	test   al,al
c0016043:	74 41                	je     c0016086 <sendKeyboardToken(KeyboardToken)+0x312>
c0016045:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016049:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c001604d:	74 2b                	je     c001607a <sendKeyboardToken(KeyboardToken)+0x306>
c001604f:	8b 15 44 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea44
c0016055:	89 d0                	mov    eax,edx
c0016057:	c1 e0 02             	shl    eax,0x2
c001605a:	01 d0                	add    eax,edx
c001605c:	01 c0                	add    eax,eax
c001605e:	a3 44 ea 02 c0       	mov    ds:0xc002ea44,eax
c0016063:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016066:	0f b7 c0             	movzx  eax,ax
c0016069:	8d 50 d0             	lea    edx,[eax-0x30]
c001606c:	a1 44 ea 02 c0       	mov    eax,ds:0xc002ea44
c0016071:	01 d0                	add    eax,edx
c0016073:	a3 44 ea 02 c0       	mov    ds:0xc002ea44,eax
c0016078:	eb 6d                	jmp    c00160e7 <sendKeyboardToken(KeyboardToken)+0x373>
c001607a:	c7 05 44 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea44,0x0
c0016084:	eb 61                	jmp    c00160e7 <sendKeyboardToken(KeyboardToken)+0x373>
c0016086:	a1 44 ea 02 c0       	mov    eax,ds:0xc002ea44
c001608b:	85 c0                	test   eax,eax
c001608d:	74 18                	je     c00160a7 <sendKeyboardToken(KeyboardToken)+0x333>
c001608f:	a1 44 ea 02 c0       	mov    eax,ds:0xc002ea44
c0016094:	0f b6 c0             	movzx  eax,al
c0016097:	83 ec 0c             	sub    esp,0xc
c001609a:	50                   	push   eax
c001609b:	e8 68 fc ff ff       	call   c0015d08 <sendKeyToTerminal(unsigned char)>
c00160a0:	83 c4 10             	add    esp,0x10
c00160a3:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00160a7:	c7 05 44 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea44,0x0
c00160b1:	eb 34                	jmp    c00160e7 <sendKeyboardToken(KeyboardToken)+0x373>
c00160b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160b6:	66 3d 01 01          	cmp    ax,0x101
c00160ba:	75 2b                	jne    c00160e7 <sendKeyboardToken(KeyboardToken)+0x373>
c00160bc:	a1 44 ea 02 c0       	mov    eax,ds:0xc002ea44
c00160c1:	85 c0                	test   eax,eax
c00160c3:	74 18                	je     c00160dd <sendKeyboardToken(KeyboardToken)+0x369>
c00160c5:	a1 44 ea 02 c0       	mov    eax,ds:0xc002ea44
c00160ca:	0f b6 c0             	movzx  eax,al
c00160cd:	83 ec 0c             	sub    esp,0xc
c00160d0:	50                   	push   eax
c00160d1:	e8 32 fc ff ff       	call   c0015d08 <sendKeyToTerminal(unsigned char)>
c00160d6:	83 c4 10             	add    esp,0x10
c00160d9:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00160dd:	c7 05 44 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea44,0x0
c00160e7:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00160ea:	83 f0 01             	xor    eax,0x1
c00160ed:	84 c0                	test   al,al
c00160ef:	74 4c                	je     c001613d <sendKeyboardToken(KeyboardToken)+0x3c9>
c00160f1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00160f4:	83 f0 01             	xor    eax,0x1
c00160f7:	84 c0                	test   al,al
c00160f9:	74 42                	je     c001613d <sendKeyboardToken(KeyboardToken)+0x3c9>
c00160fb:	a0 40 e7 02 c0       	mov    al,ds:0xc002e740
c0016100:	83 f0 01             	xor    eax,0x1
c0016103:	84 c0                	test   al,al
c0016105:	74 36                	je     c001613d <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016107:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001610a:	66 83 f8 1f          	cmp    ax,0x1f
c001610e:	76 09                	jbe    c0016119 <sendKeyboardToken(KeyboardToken)+0x3a5>
c0016110:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016113:	66 83 f8 7e          	cmp    ax,0x7e
c0016117:	76 12                	jbe    c001612b <sendKeyboardToken(KeyboardToken)+0x3b7>
c0016119:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001611c:	66 83 f8 0a          	cmp    ax,0xa
c0016120:	74 09                	je     c001612b <sendKeyboardToken(KeyboardToken)+0x3b7>
c0016122:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016125:	66 83 f8 08          	cmp    ax,0x8
c0016129:	75 12                	jne    c001613d <sendKeyboardToken(KeyboardToken)+0x3c9>
c001612b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001612e:	0f b6 c0             	movzx  eax,al
c0016131:	83 ec 0c             	sub    esp,0xc
c0016134:	50                   	push   eax
c0016135:	e8 ce fb ff ff       	call   c0015d08 <sendKeyToTerminal(unsigned char)>
c001613a:	83 c4 10             	add    esp,0x10
c001613d:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0016140:	83 f0 01             	xor    eax,0x1
c0016143:	84 c0                	test   al,al
c0016145:	74 4f                	je     c0016196 <sendKeyboardToken(KeyboardToken)+0x422>
c0016147:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001614a:	83 f0 01             	xor    eax,0x1
c001614d:	84 c0                	test   al,al
c001614f:	74 45                	je     c0016196 <sendKeyboardToken(KeyboardToken)+0x422>
c0016151:	a0 40 e7 02 c0       	mov    al,ds:0xc002e740
c0016156:	84 c0                	test   al,al
c0016158:	74 3c                	je     c0016196 <sendKeyboardToken(KeyboardToken)+0x422>
c001615a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001615d:	66 83 f8 3f          	cmp    ax,0x3f
c0016161:	76 33                	jbe    c0016196 <sendKeyboardToken(KeyboardToken)+0x422>
c0016163:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016166:	66 83 f8 7f          	cmp    ax,0x7f
c001616a:	77 2a                	ja     c0016196 <sendKeyboardToken(KeyboardToken)+0x422>
c001616c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001616f:	88 c2                	mov    dl,al
c0016171:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016174:	66 83 f8 5f          	cmp    ax,0x5f
c0016178:	76 04                	jbe    c001617e <sendKeyboardToken(KeyboardToken)+0x40a>
c001617a:	b0 20                	mov    al,0x20
c001617c:	eb 02                	jmp    c0016180 <sendKeyboardToken(KeyboardToken)+0x40c>
c001617e:	b0 00                	mov    al,0x0
c0016180:	29 c2                	sub    edx,eax
c0016182:	88 d0                	mov    al,dl
c0016184:	83 e8 40             	sub    eax,0x40
c0016187:	0f b6 c0             	movzx  eax,al
c001618a:	83 ec 0c             	sub    esp,0xc
c001618d:	50                   	push   eax
c001618e:	e8 75 fb ff ff       	call   c0015d08 <sendKeyToTerminal(unsigned char)>
c0016193:	83 c4 10             	add    esp,0x10
c0016196:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016199:	66 3d 00 03          	cmp    ax,0x300
c001619d:	75 0f                	jne    c00161ae <sendKeyboardToken(KeyboardToken)+0x43a>
c001619f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00161a2:	83 f0 01             	xor    eax,0x1
c00161a5:	84 c0                	test   al,al
c00161a7:	74 05                	je     c00161ae <sendKeyboardToken(KeyboardToken)+0x43a>
c00161a9:	e8 0e ab ff ff       	call   c0010cbc <doTerminalCycle()>
c00161ae:	90                   	nop
c00161af:	c9                   	leave  
c00161b0:	c3                   	ret    

c00161b1 <clearInternalKeybuffer(VgaText*)>:
c00161b1:	55                   	push   ebp
c00161b2:	89 e5                	mov    ebp,esp
c00161b4:	83 ec 08             	sub    esp,0x8
c00161b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161ba:	05 98 01 00 00       	add    eax,0x198
c00161bf:	83 ec 0c             	sub    esp,0xc
c00161c2:	50                   	push   eax
c00161c3:	e8 d4 a5 fe ff       	call   c000079c <strlen>
c00161c8:	83 c4 10             	add    esp,0x10
c00161cb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00161ce:	81 c2 98 01 00 00    	add    edx,0x198
c00161d4:	83 ec 04             	sub    esp,0x4
c00161d7:	50                   	push   eax
c00161d8:	6a 00                	push   0x0
c00161da:	52                   	push   edx
c00161db:	e8 a0 a5 fe ff       	call   c0000780 <memset>
c00161e0:	83 c4 10             	add    esp,0x10
c00161e3:	90                   	nop
c00161e4:	c9                   	leave  
c00161e5:	c3                   	ret    

c00161e6 <readKeyboard(VgaText*, char*, unsigned long)>:
c00161e6:	55                   	push   ebp
c00161e7:	89 e5                	mov    ebp,esp
c00161e9:	83 ec 18             	sub    esp,0x18
c00161ec:	fb                   	sti    
c00161ed:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00161f4:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00161f8:	0f 84 8a 00 00 00    	je     c0016288 <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c00161fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016201:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0016207:	84 c0                	test   al,al
c0016209:	75 11                	jne    c001621c <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c001620b:	e8 cc 7a 00 00       	call   c001dcdc <lockScheduler()>
c0016210:	e8 3d 7e 00 00       	call   c001e052 <schedule()>
c0016215:	e8 c4 7a 00 00       	call   c001dcde <unlockScheduler()>
c001621a:	eb e2                	jmp    c00161fe <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c001621c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001621f:	8d 50 01             	lea    edx,[eax+0x1]
c0016222:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0016225:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016228:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c001622e:	88 10                	mov    BYTE PTR [eax],dl
c0016230:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016233:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0016239:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001623c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001623f:	05 98 01 00 00       	add    eax,0x198
c0016244:	83 ec 0c             	sub    esp,0xc
c0016247:	50                   	push   eax
c0016248:	e8 4f a5 fe ff       	call   c000079c <strlen>
c001624d:	83 c4 10             	add    esp,0x10
c0016250:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016253:	81 c2 98 01 00 00    	add    edx,0x198
c0016259:	8d 4a 01             	lea    ecx,[edx+0x1]
c001625c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001625f:	81 c2 98 01 00 00    	add    edx,0x198
c0016265:	83 ec 04             	sub    esp,0x4
c0016268:	50                   	push   eax
c0016269:	51                   	push   ecx
c001626a:	52                   	push   edx
c001626b:	e8 14 a4 fe ff       	call   c0000684 <memmove>
c0016270:	83 c4 10             	add    esp,0x10
c0016273:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0016276:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0016279:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c001627d:	0f 85 71 ff ff ff    	jne    c00161f4 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0016283:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0016286:	eb 03                	jmp    c001628b <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c0016288:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001628b:	c9                   	leave  
c001628c:	c3                   	ret    
c001628d:	90                   	nop

c001628e <Keyboard::Keyboard(char const*)>:
c001628e:	83 ec 0c             	sub    esp,0xc
c0016291:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016295:	83 ec 08             	sub    esp,0x8
c0016298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001629c:	50                   	push   eax
c001629d:	e8 3e e1 ff ff       	call   c00143e0 <Device::Device(char const*)>
c00162a2:	83 c4 10             	add    esp,0x10
c00162a5:	ba ac b1 02 c0       	mov    edx,0xc002b1ac
c00162aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162ae:	89 10                	mov    DWORD PTR [eax],edx
c00162b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162b4:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00162be:	c6 05 24 e6 02 c0 01 	mov    BYTE PTR ds:0xc002e624,0x1
c00162c5:	90                   	nop
c00162c6:	83 c4 0c             	add    esp,0xc
c00162c9:	c3                   	ret    

c00162ca <Keyboard::~Keyboard()>:
c00162ca:	83 ec 0c             	sub    esp,0xc
c00162cd:	ba ac b1 02 c0       	mov    edx,0xc002b1ac
c00162d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162d6:	89 10                	mov    DWORD PTR [eax],edx
c00162d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162dc:	83 ec 0c             	sub    esp,0xc
c00162df:	50                   	push   eax
c00162e0:	e8 dd dd ff ff       	call   c00140c2 <Device::~Device()>
c00162e5:	83 c4 10             	add    esp,0x10
c00162e8:	90                   	nop
c00162e9:	83 c4 0c             	add    esp,0xc
c00162ec:	c3                   	ret    
c00162ed:	90                   	nop

c00162ee <Keyboard::~Keyboard()>:
c00162ee:	83 ec 0c             	sub    esp,0xc
c00162f1:	83 ec 0c             	sub    esp,0xc
c00162f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162f8:	e8 cd ff ff ff       	call   c00162ca <Keyboard::~Keyboard()>
c00162fd:	83 c4 10             	add    esp,0x10
c0016300:	83 ec 08             	sub    esp,0x8
c0016303:	68 5c 01 00 00       	push   0x15c
c0016308:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001630c:	e8 d2 c9 ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0016311:	83 c4 10             	add    esp,0x10
c0016314:	83 c4 0c             	add    esp,0xc
c0016317:	c3                   	ret    

c0016318 <LogicalDisk::close(int, int, void*)>:
c0016318:	83 c8 ff             	or     eax,0xffffffff
c001631b:	c3                   	ret    

c001631c <LogicalDisk::~LogicalDisk()>:
c001631c:	83 ec 0c             	sub    esp,0xc
c001631f:	ba 5c b2 02 c0       	mov    edx,0xc002b25c
c0016324:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016328:	89 10                	mov    DWORD PTR [eax],edx
c001632a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001632e:	83 ec 0c             	sub    esp,0xc
c0016331:	50                   	push   eax
c0016332:	e8 8b dd ff ff       	call   c00140c2 <Device::~Device()>
c0016337:	83 c4 10             	add    esp,0x10
c001633a:	90                   	nop
c001633b:	83 c4 0c             	add    esp,0xc
c001633e:	c3                   	ret    
c001633f:	90                   	nop

c0016340 <LogicalDisk::~LogicalDisk()>:
c0016340:	83 ec 0c             	sub    esp,0xc
c0016343:	83 ec 0c             	sub    esp,0xc
c0016346:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001634a:	e8 cd ff ff ff       	call   c001631c <LogicalDisk::~LogicalDisk()>
c001634f:	83 c4 10             	add    esp,0x10
c0016352:	83 ec 08             	sub    esp,0x8
c0016355:	68 74 01 00 00       	push   0x174
c001635a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001635e:	e8 80 c9 ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0016363:	83 c4 10             	add    esp,0x10
c0016366:	83 c4 0c             	add    esp,0xc
c0016369:	c3                   	ret    

c001636a <LogicalDisk::open(int, int, void*)>:
c001636a:	83 ec 18             	sub    esp,0x18
c001636d:	68 d8 b1 02 c0       	push   0xc002b1d8
c0016372:	e8 8a 41 00 00       	call   c001a501 <Krnl::panic(char const*)>
c0016377:	83 c8 ff             	or     eax,0xffffffff
c001637a:	83 c4 1c             	add    esp,0x1c
c001637d:	c3                   	ret    

c001637e <LogicalDisk::absoluteToRelative(unsigned long long)>:
c001637e:	53                   	push   ebx
c001637f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016383:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016387:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001638b:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0016391:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0016397:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c001639d:	77 10                	ja     c00163af <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c001639f:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00163a5:	89 d3                	mov    ebx,edx
c00163a7:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00163ad:	72 05                	jb     c00163b4 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00163af:	83 c8 ff             	or     eax,0xffffffff
c00163b2:	89 c2                	mov    edx,eax
c00163b4:	5b                   	pop    ebx
c00163b5:	c3                   	ret    

c00163b6 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00163b6:	56                   	push   esi
c00163b7:	83 c8 ff             	or     eax,0xffffffff
c00163ba:	53                   	push   ebx
c00163bb:	89 c2                	mov    edx,eax
c00163bd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00163c1:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00163c5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00163c9:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00163cf:	77 27                	ja     c00163f8 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00163d1:	89 d8                	mov    eax,ebx
c00163d3:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c00163d9:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c00163df:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00163e4:	89 c2                	mov    edx,eax
c00163e6:	73 10                	jae    c00163f8 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00163e8:	89 c8                	mov    eax,ecx
c00163ea:	89 da                	mov    edx,ebx
c00163ec:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00163f2:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c00163f8:	5b                   	pop    ebx
c00163f9:	5e                   	pop    esi
c00163fa:	c3                   	ret    
c00163fb:	90                   	nop

c00163fc <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c00163fc:	83 ec 1c             	sub    esp,0x1c
c00163ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016403:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016407:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001640b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001640f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016413:	89 04 24             	mov    DWORD PTR [esp],eax
c0016416:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001641a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001641e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016422:	83 ec 08             	sub    esp,0x8
c0016425:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016429:	50                   	push   eax
c001642a:	e8 b1 df ff ff       	call   c00143e0 <Device::Device(char const*)>
c001642f:	83 c4 10             	add    esp,0x10
c0016432:	ba 5c b2 02 c0       	mov    edx,0xc002b25c
c0016437:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001643b:	89 10                	mov    DWORD PTR [eax],edx
c001643d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016441:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016448:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001644c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016453:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016457:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0016461:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016465:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016469:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001646d:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0016473:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0016479:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001647d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016480:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016484:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c001648a:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0016490:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016494:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016498:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c001649e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164a2:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00164ac:	90                   	nop
c00164ad:	83 c4 1c             	add    esp,0x1c
c00164b0:	c3                   	ret    
c00164b1:	90                   	nop

c00164b2 <LogicalDisk::assignDriveLetter()>:
c00164b2:	55                   	push   ebp
c00164b3:	57                   	push   edi
c00164b4:	56                   	push   esi
c00164b5:	53                   	push   ebx
c00164b6:	83 ec 14             	sub    esp,0x14
c00164b9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00164bd:	8b 3d 60 ea 02 c0    	mov    edi,DWORD PTR ds:0xc002ea60
c00164c3:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00164c9:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00164cd:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00164d3:	8b 3d 64 ea 02 c0    	mov    edi,DWORD PTR ds:0xc002ea64
c00164d9:	3c 01                	cmp    al,0x1
c00164db:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00164df:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00164e3:	19 c0                	sbb    eax,eax
c00164e5:	83 e0 02             	and    eax,0x2
c00164e8:	83 c0 41             	add    eax,0x41
c00164eb:	0f be e8             	movsx  ebp,al
c00164ee:	3c 43                	cmp    al,0x43
c00164f0:	75 10                	jne    c0016502 <LogicalDisk::assignDriveLetter()+0x50>
c00164f2:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c00164f9:	75 5d                	jne    c0016558 <LogicalDisk::assignDriveLetter()+0xa6>
c00164fb:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0016500:	75 56                	jne    c0016558 <LogicalDisk::assignDriveLetter()+0xa6>
c0016502:	8d 75 bf             	lea    esi,[ebp-0x41]
c0016505:	ba 01 00 00 00       	mov    edx,0x1
c001650a:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c001650e:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0016512:	d3 e2                	shl    edx,cl
c0016514:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016518:	89 d7                	mov    edi,edx
c001651a:	89 d6                	mov    esi,edx
c001651c:	c1 ff 1f             	sar    edi,0x1f
c001651f:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0016523:	21 f9                	and    ecx,edi
c0016525:	09 d1                	or     ecx,edx
c0016527:	75 2f                	jne    c0016558 <LogicalDisk::assignDriveLetter()+0xa6>
c0016529:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001652d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016531:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0016537:	09 f2                	or     edx,esi
c0016539:	89 15 60 ea 02 c0    	mov    DWORD PTR ds:0xc002ea60,edx
c001653f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016543:	09 fa                	or     edx,edi
c0016545:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0016549:	89 15 64 ea 02 c0    	mov    DWORD PTR ds:0xc002ea64,edx
c001654f:	89 1c bd 80 ea 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1580],ebx
c0016556:	eb 08                	jmp    c0016560 <LogicalDisk::assignDriveLetter()+0xae>
c0016558:	45                   	inc    ebp
c0016559:	40                   	inc    eax
c001655a:	3c 5b                	cmp    al,0x5b
c001655c:	75 90                	jne    c00164ee <LogicalDisk::assignDriveLetter()+0x3c>
c001655e:	31 c0                	xor    eax,eax
c0016560:	83 c4 14             	add    esp,0x14
c0016563:	5b                   	pop    ebx
c0016564:	5e                   	pop    esi
c0016565:	5f                   	pop    edi
c0016566:	5d                   	pop    ebp
c0016567:	c3                   	ret    

c0016568 <LogicalDisk::mount()>:
c0016568:	56                   	push   esi
c0016569:	53                   	push   ebx
c001656a:	51                   	push   ecx
c001656b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001656f:	8b 1d f4 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5f4
c0016575:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c001657f:	85 db                	test   ebx,ebx
c0016581:	74 50                	je     c00165d3 <LogicalDisk::mount()+0x6b>
c0016583:	e8 3f 77 00 00       	call   c001dcc7 <getIRQNestingLevel()>
c0016588:	52                   	push   edx
c0016589:	52                   	push   edx
c001658a:	50                   	push   eax
c001658b:	68 fc b1 02 c0       	push   0xc002b1fc
c0016590:	e8 2e c8 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0016595:	83 c4 0c             	add    esp,0xc
c0016598:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c001659f:	8b 13                	mov    edx,DWORD PTR [ebx]
c00165a1:	83 e8 41             	sub    eax,0x41
c00165a4:	50                   	push   eax
c00165a5:	56                   	push   esi
c00165a6:	53                   	push   ebx
c00165a7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00165aa:	83 c4 10             	add    esp,0x10
c00165ad:	84 c0                	test   al,al
c00165af:	74 08                	je     c00165b9 <LogicalDisk::mount()+0x51>
c00165b1:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00165b7:	eb 1c                	jmp    c00165d5 <LogicalDisk::mount()+0x6d>
c00165b9:	e8 09 77 00 00       	call   c001dcc7 <getIRQNestingLevel()>
c00165be:	51                   	push   ecx
c00165bf:	51                   	push   ecx
c00165c0:	50                   	push   eax
c00165c1:	68 17 b2 02 c0       	push   0xc002b217
c00165c6:	e8 f8 c7 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00165cb:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00165ce:	83 c4 10             	add    esp,0x10
c00165d1:	eb ac                	jmp    c001657f <LogicalDisk::mount()+0x17>
c00165d3:	31 c0                	xor    eax,eax
c00165d5:	5a                   	pop    edx
c00165d6:	5b                   	pop    ebx
c00165d7:	5e                   	pop    esi
c00165d8:	c3                   	ret    
c00165d9:	90                   	nop

c00165da <LogicalDisk::unmount()>:
c00165da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00165de:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00165e8:	c3                   	ret    
c00165e9:	90                   	nop

c00165ea <LogicalDisk::eject()>:
c00165ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00165ee:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00165f4:	8b 10                	mov    edx,DWORD PTR [eax]
c00165f6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00165fa:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c00165fd:	90                   	nop

c00165fe <LogicalDisk::unassignDriveLetter()>:
c00165fe:	57                   	push   edi
c00165ff:	56                   	push   esi
c0016600:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016604:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001660b:	84 c9                	test   cl,cl
c001660d:	75 0f                	jne    c001661e <LogicalDisk::unassignDriveLetter()+0x20>
c001660f:	c7 44 24 0c 32 b2 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b232
c0016617:	5e                   	pop    esi
c0016618:	5f                   	pop    edi
c0016619:	e9 e3 3e 00 00       	jmp    c001a501 <Krnl::panic(char const*)>
c001661e:	83 e9 41             	sub    ecx,0x41
c0016621:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0016628:	b8 01 00 00 00       	mov    eax,0x1
c001662d:	c7 04 8d 80 ea 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd1580],0x0
c0016638:	d3 e0                	shl    eax,cl
c001663a:	89 c7                	mov    edi,eax
c001663c:	f7 d0                	not    eax
c001663e:	c1 ff 1f             	sar    edi,0x1f
c0016641:	21 05 60 ea 02 c0    	and    DWORD PTR ds:0xc002ea60,eax
c0016647:	89 fe                	mov    esi,edi
c0016649:	f7 d6                	not    esi
c001664b:	21 35 64 ea 02 c0    	and    DWORD PTR ds:0xc002ea64,esi
c0016651:	5e                   	pop    esi
c0016652:	5f                   	pop    edi
c0016653:	c3                   	ret    

c0016654 <LogicalDisk::read(unsigned long long, int, void*)>:
c0016654:	57                   	push   edi
c0016655:	56                   	push   esi
c0016656:	53                   	push   ebx
c0016657:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001665b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001665f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016663:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016667:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001666d:	77 41                	ja     c00166b0 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001666f:	99                   	cdq    
c0016670:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016676:	01 c8                	add    eax,ecx
c0016678:	11 da                	adc    edx,ebx
c001667a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016680:	19 d7                	sbb    edi,edx
c0016682:	72 33                	jb     c00166b7 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0016684:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001668a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016690:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016694:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016698:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001669e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00166a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00166a8:	5b                   	pop    ebx
c00166a9:	5e                   	pop    esi
c00166aa:	5f                   	pop    edi
c00166ab:	e9 b0 0a 00 00       	jmp    c0017160 <VCache::read(unsigned long long, int, void*)>
c00166b0:	b8 05 00 00 00       	mov    eax,0x5
c00166b5:	eb 05                	jmp    c00166bc <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00166b7:	b8 07 00 00 00       	mov    eax,0x7
c00166bc:	5b                   	pop    ebx
c00166bd:	5e                   	pop    esi
c00166be:	5f                   	pop    edi
c00166bf:	c3                   	ret    

c00166c0 <LogicalDisk::write(unsigned long long, int, void*)>:
c00166c0:	57                   	push   edi
c00166c1:	56                   	push   esi
c00166c2:	53                   	push   ebx
c00166c3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00166c7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00166cb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00166cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00166d3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00166d9:	77 41                	ja     c001671c <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00166db:	99                   	cdq    
c00166dc:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00166e2:	01 c8                	add    eax,ecx
c00166e4:	11 da                	adc    edx,ebx
c00166e6:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00166ec:	19 d7                	sbb    edi,edx
c00166ee:	72 33                	jb     c0016723 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00166f0:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00166f6:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00166fc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016700:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016704:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001670a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016710:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016714:	5b                   	pop    ebx
c0016715:	5e                   	pop    esi
c0016716:	5f                   	pop    edi
c0016717:	e9 4e 09 00 00       	jmp    c001706a <VCache::write(unsigned long long, int, void*)>
c001671c:	b8 05 00 00 00       	mov    eax,0x5
c0016721:	eb 05                	jmp    c0016728 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0016723:	b8 07 00 00 00       	mov    eax,0x7
c0016728:	5b                   	pop    ebx
c0016729:	5e                   	pop    esi
c001672a:	5f                   	pop    edi
c001672b:	c3                   	ret    

c001672c <Mouse::Mouse(char const*)>:
c001672c:	83 ec 0c             	sub    esp,0xc
c001672f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016733:	83 ec 08             	sub    esp,0x8
c0016736:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001673a:	50                   	push   eax
c001673b:	e8 a0 dc ff ff       	call   c00143e0 <Device::Device(char const*)>
c0016740:	83 c4 10             	add    esp,0x10
c0016743:	ba 88 b2 02 c0       	mov    edx,0xc002b288
c0016748:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001674c:	89 10                	mov    DWORD PTR [eax],edx
c001674e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016752:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001675c:	90                   	nop
c001675d:	83 c4 0c             	add    esp,0xc
c0016760:	c3                   	ret    
c0016761:	90                   	nop

c0016762 <Mouse::~Mouse()>:
c0016762:	83 ec 0c             	sub    esp,0xc
c0016765:	ba 88 b2 02 c0       	mov    edx,0xc002b288
c001676a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001676e:	89 10                	mov    DWORD PTR [eax],edx
c0016770:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016774:	83 ec 0c             	sub    esp,0xc
c0016777:	50                   	push   eax
c0016778:	e8 45 d9 ff ff       	call   c00140c2 <Device::~Device()>
c001677d:	83 c4 10             	add    esp,0x10
c0016780:	90                   	nop
c0016781:	83 c4 0c             	add    esp,0xc
c0016784:	c3                   	ret    
c0016785:	90                   	nop

c0016786 <Mouse::~Mouse()>:
c0016786:	83 ec 0c             	sub    esp,0xc
c0016789:	83 ec 0c             	sub    esp,0xc
c001678c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016790:	e8 cd ff ff ff       	call   c0016762 <Mouse::~Mouse()>
c0016795:	83 c4 10             	add    esp,0x10
c0016798:	83 ec 08             	sub    esp,0x8
c001679b:	68 58 01 00 00       	push   0x158
c00167a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167a4:	e8 3a c5 ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c00167a9:	83 c4 10             	add    esp,0x10
c00167ac:	83 c4 0c             	add    esp,0xc
c00167af:	c3                   	ret    

c00167b0 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00167b0:	55                   	push   ebp
c00167b1:	57                   	push   edi
c00167b2:	56                   	push   esi
c00167b3:	53                   	push   ebx
c00167b4:	81 ec 28 01 00 00    	sub    esp,0x128
c00167ba:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00167c1:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00167c8:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00167cf:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00167d6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00167da:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00167de:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00167e5:	e8 f2 dc ff ff       	call   c00144dc <Device::getName()>
c00167ea:	5a                   	pop    edx
c00167eb:	59                   	pop    ecx
c00167ec:	50                   	push   eax
c00167ed:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00167f1:	55                   	push   ebp
c00167f2:	e8 45 a0 fe ff       	call   c000083c <strcpy>
c00167f7:	5b                   	pop    ebx
c00167f8:	58                   	pop    eax
c00167f9:	68 ac b2 02 c0       	push   0xc002b2ac
c00167fe:	55                   	push   ebp
c00167ff:	e8 78 a1 fe ff       	call   c000097c <strcat>
c0016804:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c001680b:	e8 3b 90 ff ff       	call   c000f84b <malloc>
c0016810:	83 c4 0c             	add    esp,0xc
c0016813:	89 c3                	mov    ebx,eax
c0016815:	57                   	push   edi
c0016816:	56                   	push   esi
c0016817:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001681b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001681f:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0016826:	55                   	push   ebp
c0016827:	50                   	push   eax
c0016828:	e8 cf fb ff ff       	call   c00163fc <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001682d:	83 c4 14             	add    esp,0x14
c0016830:	53                   	push   ebx
c0016831:	e8 7c fc ff ff       	call   c00164b2 <LogicalDisk::assignDriveLetter()>
c0016836:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016839:	89 c6                	mov    esi,eax
c001683b:	e8 28 fd ff ff       	call   c0016568 <LogicalDisk::mount()>
c0016840:	58                   	pop    eax
c0016841:	5a                   	pop    edx
c0016842:	53                   	push   ebx
c0016843:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001684a:	e8 a1 d9 ff ff       	call   c00141f0 <Device::addChild(Device*)>
c001684f:	59                   	pop    ecx
c0016850:	89 f0                	mov    eax,esi
c0016852:	5b                   	pop    ebx
c0016853:	0f be f0             	movsx  esi,al
c0016856:	56                   	push   esi
c0016857:	68 b7 b2 02 c0       	push   0xc002b2b7
c001685c:	e8 62 c5 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0016861:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016867:	5b                   	pop    ebx
c0016868:	5e                   	pop    esi
c0016869:	5f                   	pop    edi
c001686a:	5d                   	pop    ebp
c001686b:	c3                   	ret    

c001686c <createPartitionsForDisk(PhysicalDisk*)>:
c001686c:	55                   	push   ebp
c001686d:	57                   	push   edi
c001686e:	56                   	push   esi
c001686f:	53                   	push   ebx
c0016870:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016876:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001687d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016883:	3d 00 02 00 00       	cmp    eax,0x200
c0016888:	74 27                	je     c00168b1 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c001688a:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016890:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016896:	83 ec 10             	sub    esp,0x10
c0016899:	0f a4 f7 0a          	shld   edi,esi,0xa
c001689d:	99                   	cdq    
c001689e:	c1 e6 0a             	shl    esi,0xa
c00168a1:	52                   	push   edx
c00168a2:	89 fd                	mov    ebp,edi
c00168a4:	50                   	push   eax
c00168a5:	55                   	push   ebp
c00168a6:	56                   	push   esi
c00168a7:	e8 18 01 01 00       	call   c00269c4 <__udivdi3>
c00168ac:	e9 b1 00 00 00       	jmp    c0016962 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00168b1:	83 ec 0c             	sub    esp,0xc
c00168b4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00168b6:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00168ba:	56                   	push   esi
c00168bb:	6a 01                	push   0x1
c00168bd:	6a 00                	push   0x0
c00168bf:	6a 00                	push   0x0
c00168c1:	53                   	push   ebx
c00168c2:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00168c5:	83 c4 20             	add    esp,0x20
c00168c8:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00168d0:	75 0a                	jne    c00168dc <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00168d2:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00168da:	74 2c                	je     c0016908 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00168dc:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00168e2:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00168e8:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00168ee:	83 ec 10             	sub    esp,0x10
c00168f1:	0f a4 c2 0a          	shld   edx,eax,0xa
c00168f5:	89 f7                	mov    edi,esi
c00168f7:	c1 e0 0a             	shl    eax,0xa
c00168fa:	c1 ff 1f             	sar    edi,0x1f
c00168fd:	57                   	push   edi
c00168fe:	56                   	push   esi
c00168ff:	52                   	push   edx
c0016900:	50                   	push   eax
c0016901:	e8 be 00 01 00       	call   c00269c4 <__udivdi3>
c0016906:	eb 5a                	jmp    c0016962 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016908:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c001690f:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016916:	83 e1 7f             	and    ecx,0x7f
c0016919:	83 e0 7f             	and    eax,0x7f
c001691c:	01 c1                	add    ecx,eax
c001691e:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016925:	83 e0 7f             	and    eax,0x7f
c0016928:	01 c1                	add    ecx,eax
c001692a:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016931:	83 e0 7f             	and    eax,0x7f
c0016934:	00 c1                	add    cl,al
c0016936:	74 41                	je     c0016979 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016938:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001693e:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016944:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001694a:	83 ec 10             	sub    esp,0x10
c001694d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016951:	89 f7                	mov    edi,esi
c0016953:	c1 e0 0a             	shl    eax,0xa
c0016956:	c1 ff 1f             	sar    edi,0x1f
c0016959:	57                   	push   edi
c001695a:	56                   	push   esi
c001695b:	52                   	push   edx
c001695c:	50                   	push   eax
c001695d:	e8 62 00 01 00       	call   c00269c4 <__udivdi3>
c0016962:	83 c4 14             	add    esp,0x14
c0016965:	52                   	push   edx
c0016966:	50                   	push   eax
c0016967:	6a 00                	push   0x0
c0016969:	6a 00                	push   0x0
c001696b:	53                   	push   ebx
c001696c:	e8 3f fe ff ff       	call   c00167b0 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016971:	83 c4 20             	add    esp,0x20
c0016974:	e9 79 01 00 00       	jmp    c0016af2 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016979:	89 f0                	mov    eax,esi
c001697b:	31 f6                	xor    esi,esi
c001697d:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016984:	75 02                	jne    c0016988 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016986:	89 f1                	mov    ecx,esi
c0016988:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c001698f:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016996:	c1 e2 08             	shl    edx,0x8
c0016999:	c1 e7 10             	shl    edi,0x10
c001699c:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c00169a4:	09 fa                	or     edx,edi
c00169a6:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c00169ae:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c00169b5:	83 c0 10             	add    eax,0x10
c00169b8:	09 fa                	or     edx,edi
c00169ba:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c00169c1:	c1 e7 18             	shl    edi,0x18
c00169c4:	09 fa                	or     edx,edi
c00169c6:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c00169cd:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c00169d1:	c1 e7 10             	shl    edi,0x10
c00169d4:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c00169db:	c1 e2 08             	shl    edx,0x8
c00169de:	09 fa                	or     edx,edi
c00169e0:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c00169e7:	09 fa                	or     edx,edi
c00169e9:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00169f0:	c1 e7 18             	shl    edi,0x18
c00169f3:	09 fa                	or     edx,edi
c00169f5:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00169f9:	46                   	inc    esi
c00169fa:	83 fe 04             	cmp    esi,0x4
c00169fd:	0f 85 7a ff ff ff    	jne    c001697d <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016a03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a07:	83 f0 01             	xor    eax,0x1
c0016a0a:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016a0e:	75 57                	jne    c0016a67 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016a10:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016a14:	83 f0 01             	xor    eax,0x1
c0016a17:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016a1b:	75 4a                	jne    c0016a67 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016a1d:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016a21:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016a29:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016a31:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016a37:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016a3d:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016a43:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016a47:	89 f7                	mov    edi,esi
c0016a49:	c1 e0 0a             	shl    eax,0xa
c0016a4c:	c1 ff 1f             	sar    edi,0x1f
c0016a4f:	57                   	push   edi
c0016a50:	56                   	push   esi
c0016a51:	52                   	push   edx
c0016a52:	50                   	push   eax
c0016a53:	e8 6c ff 00 00       	call   c00269c4 <__udivdi3>
c0016a58:	83 c4 10             	add    esp,0x10
c0016a5b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016a5f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016a63:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016a67:	84 c9                	test   cl,cl
c0016a69:	74 53                	je     c0016abe <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016a6b:	0f b6 c9             	movzx  ecx,cl
c0016a6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a72:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016a76:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016a7a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016a7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016a82:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016a86:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016a8a:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016a8e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016a92:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016a96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016a9a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016a9e:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016aa2:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016aa6:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016aaa:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016aae:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016ab2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016ab6:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016aba:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016abe:	31 ed                	xor    ebp,ebp
c0016ac0:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016ac4:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016ac8:	89 f8                	mov    eax,edi
c0016aca:	09 f0                	or     eax,esi
c0016acc:	74 1e                	je     c0016aec <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016ace:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016ad2:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016ad6:	89 d1                	mov    ecx,edx
c0016ad8:	09 c1                	or     ecx,eax
c0016ada:	74 10                	je     c0016aec <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016adc:	83 ec 0c             	sub    esp,0xc
c0016adf:	57                   	push   edi
c0016ae0:	56                   	push   esi
c0016ae1:	52                   	push   edx
c0016ae2:	50                   	push   eax
c0016ae3:	53                   	push   ebx
c0016ae4:	e8 c7 fc ff ff       	call   c00167b0 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016ae9:	83 c4 20             	add    esp,0x20
c0016aec:	45                   	inc    ebp
c0016aed:	83 fd 04             	cmp    ebp,0x4
c0016af0:	75 ce                	jne    c0016ac0 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016af2:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016af8:	5b                   	pop    ebx
c0016af9:	5e                   	pop    esi
c0016afa:	5f                   	pop    edi
c0016afb:	5d                   	pop    ebp
c0016afc:	c3                   	ret    
c0016afd:	90                   	nop

c0016afe <Serial::Serial(char const*)>:
c0016afe:	83 ec 0c             	sub    esp,0xc
c0016b01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b05:	83 ec 08             	sub    esp,0x8
c0016b08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b0c:	50                   	push   eax
c0016b0d:	e8 ce d8 ff ff       	call   c00143e0 <Device::Device(char const*)>
c0016b12:	83 c4 10             	add    esp,0x10
c0016b15:	ba e4 b2 02 c0       	mov    edx,0xc002b2e4
c0016b1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b1e:	89 10                	mov    DWORD PTR [eax],edx
c0016b20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b24:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016b2e:	90                   	nop
c0016b2f:	83 c4 0c             	add    esp,0xc
c0016b32:	c3                   	ret    
c0016b33:	90                   	nop

c0016b34 <Serial::~Serial()>:
c0016b34:	83 ec 0c             	sub    esp,0xc
c0016b37:	ba e4 b2 02 c0       	mov    edx,0xc002b2e4
c0016b3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b40:	89 10                	mov    DWORD PTR [eax],edx
c0016b42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b46:	83 ec 0c             	sub    esp,0xc
c0016b49:	50                   	push   eax
c0016b4a:	e8 73 d5 ff ff       	call   c00140c2 <Device::~Device()>
c0016b4f:	83 c4 10             	add    esp,0x10
c0016b52:	90                   	nop
c0016b53:	83 c4 0c             	add    esp,0xc
c0016b56:	c3                   	ret    
c0016b57:	90                   	nop

c0016b58 <Serial::~Serial()>:
c0016b58:	83 ec 0c             	sub    esp,0xc
c0016b5b:	83 ec 0c             	sub    esp,0xc
c0016b5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b62:	e8 cd ff ff ff       	call   c0016b34 <Serial::~Serial()>
c0016b67:	83 c4 10             	add    esp,0x10
c0016b6a:	83 ec 08             	sub    esp,0x8
c0016b6d:	68 58 01 00 00       	push   0x158
c0016b72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b76:	e8 68 c1 ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0016b7b:	83 c4 10             	add    esp,0x10
c0016b7e:	83 c4 0c             	add    esp,0xc
c0016b81:	c3                   	ret    

c0016b82 <Timer::Timer(char const*)>:
c0016b82:	83 ec 0c             	sub    esp,0xc
c0016b85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b89:	83 ec 08             	sub    esp,0x8
c0016b8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b90:	50                   	push   eax
c0016b91:	e8 4a d8 ff ff       	call   c00143e0 <Device::Device(char const*)>
c0016b96:	83 c4 10             	add    esp,0x10
c0016b99:	ba 28 b3 02 c0       	mov    edx,0xc002b328
c0016b9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ba2:	89 10                	mov    DWORD PTR [eax],edx
c0016ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ba8:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016bb2:	90                   	nop
c0016bb3:	83 c4 0c             	add    esp,0xc
c0016bb6:	c3                   	ret    
c0016bb7:	90                   	nop

c0016bb8 <Timer::~Timer()>:
c0016bb8:	83 ec 0c             	sub    esp,0xc
c0016bbb:	ba 28 b3 02 c0       	mov    edx,0xc002b328
c0016bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bc4:	89 10                	mov    DWORD PTR [eax],edx
c0016bc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bca:	83 ec 0c             	sub    esp,0xc
c0016bcd:	50                   	push   eax
c0016bce:	e8 ef d4 ff ff       	call   c00140c2 <Device::~Device()>
c0016bd3:	83 c4 10             	add    esp,0x10
c0016bd6:	90                   	nop
c0016bd7:	83 c4 0c             	add    esp,0xc
c0016bda:	c3                   	ret    
c0016bdb:	90                   	nop

c0016bdc <Timer::~Timer()>:
c0016bdc:	83 ec 0c             	sub    esp,0xc
c0016bdf:	83 ec 0c             	sub    esp,0xc
c0016be2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016be6:	e8 cd ff ff ff       	call   c0016bb8 <Timer::~Timer()>
c0016beb:	83 c4 10             	add    esp,0x10
c0016bee:	83 ec 08             	sub    esp,0x8
c0016bf1:	68 5c 01 00 00       	push   0x15c
c0016bf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016bfa:	e8 e4 c0 ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0016bff:	83 c4 10             	add    esp,0x10
c0016c02:	83 c4 0c             	add    esp,0xc
c0016c05:	c3                   	ret    

c0016c06 <Timer::read()>:
c0016c06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c0a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016c10:	c3                   	ret    

c0016c11 <timerHandler(unsigned long long)>:
c0016c11:	55                   	push   ebp
c0016c12:	57                   	push   edi
c0016c13:	56                   	push   esi
c0016c14:	53                   	push   ebx
c0016c15:	83 ec 0c             	sub    esp,0xc
c0016c18:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016c1c:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016c20:	01 35 f0 ea 02 c0    	add    DWORD PTR ds:0xc002eaf0,esi
c0016c26:	11 3d f4 ea 02 c0    	adc    DWORD PTR ds:0xc002eaf4,edi
c0016c2c:	80 3d 6d e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e46d,0x0
c0016c33:	0f 84 07 01 00 00    	je     c0016d40 <timerHandler(unsigned long long)+0x12f>
c0016c39:	e8 c5 70 00 00       	call   c001dd03 <lockStuff()>
c0016c3e:	83 ec 0c             	sub    esp,0xc
c0016c41:	68 bc 19 03 c0       	push   0xc00319bc
c0016c46:	e8 f3 1d 01 00       	call   c0028a3e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016c4b:	c7 04 24 bc 19 03 c0 	mov    DWORD PTR [esp],0xc00319bc
c0016c52:	89 c3                	mov    ebx,eax
c0016c54:	e8 ed 1d 01 00       	call   c0028a46 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016c59:	83 c4 10             	add    esp,0x10
c0016c5c:	84 c0                	test   al,al
c0016c5e:	74 60                	je     c0016cc0 <timerHandler(unsigned long long)+0xaf>
c0016c60:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016c66:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0016c69:	85 c0                	test   eax,eax
c0016c6b:	0f 85 91 00 00 00    	jne    c0016d02 <timerHandler(unsigned long long)+0xf1>
c0016c71:	e9 be 00 00 00       	jmp    c0016d34 <timerHandler(unsigned long long)+0x123>
c0016c76:	83 ec 0c             	sub    esp,0xc
c0016c79:	55                   	push   ebp
c0016c7a:	e8 af 76 00 00       	call   c001e32e <unblockTask(ThreadControlBlock*)>
c0016c7f:	83 c4 10             	add    esp,0x10
c0016c82:	39 eb                	cmp    ebx,ebp
c0016c84:	75 12                	jne    c0016c98 <timerHandler(unsigned long long)+0x87>
c0016c86:	83 ec 0c             	sub    esp,0xc
c0016c89:	68 bc 19 03 c0       	push   0xc00319bc
c0016c8e:	e8 ab 1d 01 00       	call   c0028a3e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016c93:	89 c3                	mov    ebx,eax
c0016c95:	83 c4 10             	add    esp,0x10
c0016c98:	83 ec 0c             	sub    esp,0xc
c0016c9b:	68 bc 19 03 c0       	push   0xc00319bc
c0016ca0:	e8 a1 1d 01 00       	call   c0028a46 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016ca5:	83 c4 10             	add    esp,0x10
c0016ca8:	84 c0                	test   al,al
c0016caa:	75 b4                	jne    c0016c60 <timerHandler(unsigned long long)+0x4f>
c0016cac:	83 ec 0c             	sub    esp,0xc
c0016caf:	68 bc 19 03 c0       	push   0xc00319bc
c0016cb4:	e8 85 1d 01 00       	call   c0028a3e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016cb9:	83 c4 10             	add    esp,0x10
c0016cbc:	39 d8                	cmp    eax,ebx
c0016cbe:	74 a0                	je     c0016c60 <timerHandler(unsigned long long)+0x4f>
c0016cc0:	83 ec 0c             	sub    esp,0xc
c0016cc3:	68 bc 19 03 c0       	push   0xc00319bc
c0016cc8:	e8 71 1d 01 00       	call   c0028a3e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016ccd:	c7 04 24 bc 19 03 c0 	mov    DWORD PTR [esp],0xc00319bc
c0016cd4:	89 c5                	mov    ebp,eax
c0016cd6:	e8 87 1d 01 00       	call   c0028a62 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016cdb:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016cde:	83 c4 10             	add    esp,0x10
c0016ce1:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016ce4:	39 15 f0 ea 02 c0    	cmp    DWORD PTR ds:0xc002eaf0,edx
c0016cea:	a1 f4 ea 02 c0       	mov    eax,ds:0xc002eaf4
c0016cef:	19 c8                	sbb    eax,ecx
c0016cf1:	73 83                	jae    c0016c76 <timerHandler(unsigned long long)+0x65>
c0016cf3:	50                   	push   eax
c0016cf4:	50                   	push   eax
c0016cf5:	55                   	push   ebp
c0016cf6:	68 bc 19 03 c0       	push   0xc00319bc
c0016cfb:	e8 10 1e 01 00       	call   c0028b10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016d00:	eb 93                	jmp    c0016c95 <timerHandler(unsigned long long)+0x84>
c0016d02:	80 3d 6c e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e46c,0x0
c0016d09:	74 29                	je     c0016d34 <timerHandler(unsigned long long)+0x123>
c0016d0b:	39 c6                	cmp    esi,eax
c0016d0d:	bb 00 00 00 00       	mov    ebx,0x0
c0016d12:	19 df                	sbb    edi,ebx
c0016d14:	72 19                	jb     c0016d2f <timerHandler(unsigned long long)+0x11e>
c0016d16:	e8 c1 6f 00 00       	call   c001dcdc <lockScheduler()>
c0016d1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d20:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016d23:	e8 2a 73 00 00       	call   c001e052 <schedule()>
c0016d28:	e8 b1 6f 00 00       	call   c001dcde <unlockScheduler()>
c0016d2d:	eb 05                	jmp    c0016d34 <timerHandler(unsigned long long)+0x123>
c0016d2f:	29 f0                	sub    eax,esi
c0016d31:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016d34:	83 c4 0c             	add    esp,0xc
c0016d37:	5b                   	pop    ebx
c0016d38:	5e                   	pop    esi
c0016d39:	5f                   	pop    edi
c0016d3a:	5d                   	pop    ebp
c0016d3b:	e9 97 73 00 00       	jmp    c001e0d7 <unlockStuff()>
c0016d40:	83 c4 0c             	add    esp,0xc
c0016d43:	5b                   	pop    ebx
c0016d44:	5e                   	pop    esi
c0016d45:	5f                   	pop    edi
c0016d46:	5d                   	pop    ebp
c0016d47:	c3                   	ret    

c0016d48 <setupTimer(int)>:
c0016d48:	57                   	push   edi
c0016d49:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0016d4e:	56                   	push   esi
c0016d4f:	53                   	push   ebx
c0016d50:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016d54:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016d5a:	83 ec 0c             	sub    esp,0xc
c0016d5d:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016d63:	e8 74 d7 ff ff       	call   c00144dc <Device::getName()>
c0016d68:	83 c4 10             	add    esp,0x10
c0016d6b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016d6e:	0f 85 8d 00 00 00    	jne    c0016e01 <setupTimer(int)+0xb9>
c0016d74:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0016d79:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016d80:	74 7f                	je     c0016e01 <setupTimer(int)+0xb9>
c0016d82:	83 ec 0c             	sub    esp,0xc
c0016d85:	68 5c 01 00 00       	push   0x15c
c0016d8a:	e8 bc 8a ff ff       	call   c000f84b <malloc>
c0016d8f:	89 04 24             	mov    DWORD PTR [esp],eax
c0016d92:	89 c3                	mov    ebx,eax
c0016d94:	e8 f9 f7 00 00       	call   c0026592 <PIT::PIT()>
c0016d99:	59                   	pop    ecx
c0016d9a:	5f                   	pop    edi
c0016d9b:	53                   	push   ebx
c0016d9c:	ff 35 68 e4 02 c0    	push   DWORD PTR ds:0xc002e468
c0016da2:	e8 49 d4 ff ff       	call   c00141f0 <Device::addChild(Device*)>
c0016da7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016da9:	6a 00                	push   0x0
c0016dab:	6a 00                	push   0x0
c0016dad:	56                   	push   esi
c0016dae:	53                   	push   ebx
c0016daf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016db2:	83 c4 14             	add    esp,0x14
c0016db5:	68 60 01 00 00       	push   0x160
c0016dba:	e8 8c 8a ff ff       	call   c000f84b <malloc>
c0016dbf:	89 04 24             	mov    DWORD PTR [esp],eax
c0016dc2:	89 c7                	mov    edi,eax
c0016dc4:	e8 79 f6 00 00       	call   c0026442 <APICTimer::APICTimer()>
c0016dc9:	6a 00                	push   0x0
c0016dcb:	6a 00                	push   0x0
c0016dcd:	56                   	push   esi
c0016dce:	57                   	push   edi
c0016dcf:	e8 70 f5 00 00       	call   c0026344 <APICTimer::open(int, int, void*)>
c0016dd4:	83 c4 20             	add    esp,0x20
c0016dd7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016dd9:	6a 00                	push   0x0
c0016ddb:	6a 00                	push   0x0
c0016ddd:	6a 00                	push   0x0
c0016ddf:	53                   	push   ebx
c0016de0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016de3:	58                   	pop    eax
c0016de4:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0016de9:	5a                   	pop    edx
c0016dea:	57                   	push   edi
c0016deb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016df1:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016df7:	e8 f4 d3 ff ff       	call   c00141f0 <Device::addChild(Device*)>
c0016dfc:	83 c4 10             	add    esp,0x10
c0016dff:	eb 33                	jmp    c0016e34 <setupTimer(int)+0xec>
c0016e01:	83 ec 0c             	sub    esp,0xc
c0016e04:	68 5c 01 00 00       	push   0x15c
c0016e09:	e8 3d 8a ff ff       	call   c000f84b <malloc>
c0016e0e:	89 04 24             	mov    DWORD PTR [esp],eax
c0016e11:	89 c3                	mov    ebx,eax
c0016e13:	e8 7a f7 00 00       	call   c0026592 <PIT::PIT()>
c0016e18:	58                   	pop    eax
c0016e19:	5a                   	pop    edx
c0016e1a:	53                   	push   ebx
c0016e1b:	ff 35 68 e4 02 c0    	push   DWORD PTR ds:0xc002e468
c0016e21:	e8 ca d3 ff ff       	call   c00141f0 <Device::addChild(Device*)>
c0016e26:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016e28:	6a 00                	push   0x0
c0016e2a:	6a 00                	push   0x0
c0016e2c:	56                   	push   esi
c0016e2d:	53                   	push   ebx
c0016e2e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016e31:	83 c4 20             	add    esp,0x20
c0016e34:	89 d8                	mov    eax,ebx
c0016e36:	5b                   	pop    ebx
c0016e37:	5e                   	pop    esi
c0016e38:	5f                   	pop    edi
c0016e39:	c3                   	ret    

c0016e3a <VCache::VCache(PhysicalDisk*)>:
c0016e3a:	53                   	push   ebx
c0016e3b:	83 ec 18             	sub    esp,0x18
c0016e3e:	ba 58 b3 02 c0       	mov    edx,0xc002b358
c0016e43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e47:	89 10                	mov    DWORD PTR [eax],edx
c0016e49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e4d:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016e54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e58:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016e5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e63:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016e6a:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016e71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e75:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016e7c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016e83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e87:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016e8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e92:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016e96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e9a:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016ea1:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016ea8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016eac:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016eb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016eb4:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016eb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ebc:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016ec0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ec4:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016ecb:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016ed3:	83 ec 0c             	sub    esp,0xc
c0016ed6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016eda:	e8 6c 89 ff ff       	call   c000f84b <malloc>
c0016edf:	83 c4 10             	add    esp,0x10
c0016ee2:	89 c3                	mov    ebx,eax
c0016ee4:	83 ec 0c             	sub    esp,0xc
c0016ee7:	53                   	push   ebx
c0016ee8:	e8 0f 6f 00 00       	call   c001ddfc <Mutex::Mutex()>
c0016eed:	83 c4 10             	add    esp,0x10
c0016ef0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ef4:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016ef7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016efb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016eff:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016f02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f06:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016f0d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016f11:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016f17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f1b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016f1e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016f22:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016f28:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016f2e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016f32:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016f35:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016f38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f3c:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016f40:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016f44:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016f4a:	05 00 01 00 00       	add    eax,0x100
c0016f4f:	c1 e0 04             	shl    eax,0x4
c0016f52:	83 ec 0c             	sub    esp,0xc
c0016f55:	50                   	push   eax
c0016f56:	e8 f0 88 ff ff       	call   c000f84b <malloc>
c0016f5b:	83 c4 10             	add    esp,0x10
c0016f5e:	89 c2                	mov    edx,eax
c0016f60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f64:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016f67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f6b:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016f72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f76:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016f7a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016f7e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016f84:	c1 e0 07             	shl    eax,0x7
c0016f87:	83 ec 0c             	sub    esp,0xc
c0016f8a:	50                   	push   eax
c0016f8b:	e8 bb 88 ff ff       	call   c000f84b <malloc>
c0016f90:	83 c4 10             	add    esp,0x10
c0016f93:	89 c2                	mov    edx,eax
c0016f95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f99:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016f9c:	90                   	nop
c0016f9d:	83 c4 18             	add    esp,0x18
c0016fa0:	5b                   	pop    ebx
c0016fa1:	c3                   	ret    

c0016fa2 <VCache::invalidateReadBuffer()>:
c0016fa2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016fa6:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0016fac:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016fb0:	c3                   	ret    
c0016fb1:	90                   	nop

c0016fb2 <VCache::writeWriteBuffer()>:
c0016fb2:	53                   	push   ebx
c0016fb3:	83 ec 14             	sub    esp,0x14
c0016fb6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016fba:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016fbd:	8b 10                	mov    edx,DWORD PTR [eax]
c0016fbf:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016fc2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016fc5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016fc8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016fcb:	50                   	push   eax
c0016fcc:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016fcf:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016fd6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016fdd:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016fe1:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016fe8:	83 c4 28             	add    esp,0x28
c0016feb:	5b                   	pop    ebx
c0016fec:	c3                   	ret    
c0016fed:	90                   	nop

c0016fee <VCache::~VCache()>:
c0016fee:	83 ec 0c             	sub    esp,0xc
c0016ff1:	ba 58 b3 02 c0       	mov    edx,0xc002b358
c0016ff6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ffa:	89 10                	mov    DWORD PTR [eax],edx
c0016ffc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017000:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0017003:	84 c0                	test   al,al
c0017005:	74 0f                	je     c0017016 <VCache::~VCache()+0x28>
c0017007:	83 ec 0c             	sub    esp,0xc
c001700a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001700e:	e8 9f ff ff ff       	call   c0016fb2 <VCache::writeWriteBuffer()>
c0017013:	83 c4 10             	add    esp,0x10
c0017016:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001701a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001701d:	83 ec 0c             	sub    esp,0xc
c0017020:	50                   	push   eax
c0017021:	e8 35 88 ff ff       	call   c000f85b <free>
c0017026:	83 c4 10             	add    esp,0x10
c0017029:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001702d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017030:	83 ec 0c             	sub    esp,0xc
c0017033:	50                   	push   eax
c0017034:	e8 22 88 ff ff       	call   c000f85b <free>
c0017039:	83 c4 10             	add    esp,0x10
c001703c:	90                   	nop
c001703d:	83 c4 0c             	add    esp,0xc
c0017040:	c3                   	ret    
c0017041:	90                   	nop

c0017042 <VCache::~VCache()>:
c0017042:	83 ec 0c             	sub    esp,0xc
c0017045:	83 ec 0c             	sub    esp,0xc
c0017048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001704c:	e8 9d ff ff ff       	call   c0016fee <VCache::~VCache()>
c0017051:	83 c4 10             	add    esp,0x10
c0017054:	83 ec 08             	sub    esp,0x8
c0017057:	6a 44                	push   0x44
c0017059:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001705d:	e8 81 bc ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0017062:	83 c4 10             	add    esp,0x10
c0017065:	83 c4 0c             	add    esp,0xc
c0017068:	c3                   	ret    
c0017069:	90                   	nop

c001706a <VCache::write(unsigned long long, int, void*)>:
c001706a:	55                   	push   ebp
c001706b:	57                   	push   edi
c001706c:	56                   	push   esi
c001706d:	53                   	push   ebx
c001706e:	83 ec 28             	sub    esp,0x28
c0017071:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017075:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017079:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001707d:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0017081:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017084:	e8 0f 72 00 00       	call   c001e298 <Semaphore::acquire()>
c0017089:	83 c4 10             	add    esp,0x10
c001708c:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0017090:	74 0c                	je     c001709e <VCache::write(unsigned long long, int, void*)+0x34>
c0017092:	83 ec 0c             	sub    esp,0xc
c0017095:	53                   	push   ebx
c0017096:	e8 07 ff ff ff       	call   c0016fa2 <VCache::invalidateReadBuffer()>
c001709b:	83 c4 10             	add    esp,0x10
c001709e:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00170a2:	74 66                	je     c001710a <VCache::write(unsigned long long, int, void*)+0xa0>
c00170a4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00170a7:	99                   	cdq    
c00170a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00170ac:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00170af:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00170b2:	89 c1                	mov    ecx,eax
c00170b4:	89 d0                	mov    eax,edx
c00170b6:	31 f1                	xor    ecx,esi
c00170b8:	31 f8                	xor    eax,edi
c00170ba:	89 ca                	mov    edx,ecx
c00170bc:	09 c2                	or     edx,eax
c00170be:	75 3e                	jne    c00170fe <VCache::write(unsigned long long, int, void*)+0x94>
c00170c0:	83 fd 01             	cmp    ebp,0x1
c00170c3:	75 39                	jne    c00170fe <VCache::write(unsigned long long, int, void*)+0x94>
c00170c5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00170c8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00170ce:	51                   	push   ecx
c00170cf:	50                   	push   eax
c00170d0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00170d4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00170d8:	0f af c8             	imul   ecx,eax
c00170db:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c00170de:	51                   	push   ecx
c00170df:	e8 68 96 fe ff       	call   c000074c <memcpy>
c00170e4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00170e7:	83 c4 10             	add    esp,0x10
c00170ea:	40                   	inc    eax
c00170eb:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00170ee:	83 c0 80             	add    eax,0xffffff80
c00170f1:	75 57                	jne    c001714a <VCache::write(unsigned long long, int, void*)+0xe0>
c00170f3:	83 ec 0c             	sub    esp,0xc
c00170f6:	53                   	push   ebx
c00170f7:	e8 b6 fe ff ff       	call   c0016fb2 <VCache::writeWriteBuffer()>
c00170fc:	eb 34                	jmp    c0017132 <VCache::write(unsigned long long, int, void*)+0xc8>
c00170fe:	83 ec 0c             	sub    esp,0xc
c0017101:	53                   	push   ebx
c0017102:	e8 ab fe ff ff       	call   c0016fb2 <VCache::writeWriteBuffer()>
c0017107:	83 c4 10             	add    esp,0x10
c001710a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001710d:	83 fd 7f             	cmp    ebp,0x7f
c0017110:	7f 25                	jg     c0017137 <VCache::write(unsigned long long, int, void*)+0xcd>
c0017112:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0017115:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0017118:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c001711b:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c001711f:	52                   	push   edx
c0017120:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0017126:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001712a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001712d:	e8 1a 96 fe ff       	call   c000074c <memcpy>
c0017132:	83 c4 10             	add    esp,0x10
c0017135:	eb 13                	jmp    c001714a <VCache::write(unsigned long long, int, void*)+0xe0>
c0017137:	83 ec 0c             	sub    esp,0xc
c001713a:	8b 10                	mov    edx,DWORD PTR [eax]
c001713c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017140:	55                   	push   ebp
c0017141:	57                   	push   edi
c0017142:	56                   	push   esi
c0017143:	50                   	push   eax
c0017144:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0017147:	83 c4 20             	add    esp,0x20
c001714a:	83 ec 0c             	sub    esp,0xc
c001714d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017150:	e8 f1 76 00 00       	call   c001e846 <Semaphore::release()>
c0017155:	83 c4 2c             	add    esp,0x2c
c0017158:	31 c0                	xor    eax,eax
c001715a:	5b                   	pop    ebx
c001715b:	5e                   	pop    esi
c001715c:	5f                   	pop    edi
c001715d:	5d                   	pop    ebp
c001715e:	c3                   	ret    
c001715f:	90                   	nop

c0017160 <VCache::read(unsigned long long, int, void*)>:
c0017160:	55                   	push   ebp
c0017161:	57                   	push   edi
c0017162:	56                   	push   esi
c0017163:	53                   	push   ebx
c0017164:	83 ec 28             	sub    esp,0x28
c0017167:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001716b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001716f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017173:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017177:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001717b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c001717f:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0017183:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017186:	e8 0d 71 00 00       	call   c001e298 <Semaphore::acquire()>
c001718b:	83 c4 10             	add    esp,0x10
c001718e:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017192:	74 0c                	je     c00171a0 <VCache::read(unsigned long long, int, void*)+0x40>
c0017194:	83 ec 0c             	sub    esp,0xc
c0017197:	53                   	push   ebx
c0017198:	e8 15 fe ff ff       	call   c0016fb2 <VCache::writeWriteBuffer()>
c001719d:	83 c4 10             	add    esp,0x10
c00171a0:	83 fe 01             	cmp    esi,0x1
c00171a3:	0f 85 80 00 00 00    	jne    c0017229 <VCache::read(unsigned long long, int, void*)+0xc9>
c00171a9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00171ac:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c00171b3:	75 74                	jne    c0017229 <VCache::read(unsigned long long, int, void*)+0xc9>
c00171b5:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00171b8:	89 d1                	mov    ecx,edx
c00171ba:	f7 d9                	neg    ecx
c00171bc:	89 cf                	mov    edi,ecx
c00171be:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00171c2:	c1 ff 1f             	sar    edi,0x1f
c00171c5:	23 0c 24             	and    ecx,DWORD PTR [esp]
c00171c8:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00171cc:	89 ce                	mov    esi,ecx
c00171ce:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00171d2:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c00171d6:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c00171da:	89 cf                	mov    edi,ecx
c00171dc:	74 0a                	je     c00171e8 <VCache::read(unsigned long long, int, void*)+0x88>
c00171de:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c00171e1:	75 05                	jne    c00171e8 <VCache::read(unsigned long long, int, void*)+0x88>
c00171e3:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c00171e6:	74 1c                	je     c0017204 <VCache::read(unsigned long long, int, void*)+0xa4>
c00171e8:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c00171ec:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00171ef:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c00171f2:	83 ec 0c             	sub    esp,0xc
c00171f5:	8b 08                	mov    ecx,DWORD PTR [eax]
c00171f7:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00171fa:	52                   	push   edx
c00171fb:	57                   	push   edi
c00171fc:	56                   	push   esi
c00171fd:	50                   	push   eax
c00171fe:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0017201:	83 c4 20             	add    esp,0x20
c0017204:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017207:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001720d:	50                   	push   eax
c001720e:	52                   	push   edx
c001720f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017212:	48                   	dec    eax
c0017213:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c0017217:	0f af c2             	imul   eax,edx
c001721a:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001721d:	50                   	push   eax
c001721e:	55                   	push   ebp
c001721f:	e8 28 95 fe ff       	call   c000074c <memcpy>
c0017224:	83 c4 10             	add    esp,0x10
c0017227:	eb 21                	jmp    c001724a <VCache::read(unsigned long long, int, void*)+0xea>
c0017229:	83 ec 0c             	sub    esp,0xc
c001722c:	53                   	push   ebx
c001722d:	e8 70 fd ff ff       	call   c0016fa2 <VCache::invalidateReadBuffer()>
c0017232:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017235:	8b 10                	mov    edx,DWORD PTR [eax]
c0017237:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001723a:	56                   	push   esi
c001723b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001723f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017243:	50                   	push   eax
c0017244:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0017247:	83 c4 20             	add    esp,0x20
c001724a:	83 ec 0c             	sub    esp,0xc
c001724d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017250:	e8 f1 75 00 00       	call   c001e846 <Semaphore::release()>
c0017255:	83 c4 2c             	add    esp,0x2c
c0017258:	31 c0                	xor    eax,eax
c001725a:	5b                   	pop    ebx
c001725b:	5e                   	pop    esi
c001725c:	5f                   	pop    edi
c001725d:	5d                   	pop    ebp
c001725e:	c3                   	ret    
c001725f:	90                   	nop

c0017260 <Video::putrect(int, int, int, int, unsigned int)>:
c0017260:	55                   	push   ebp
c0017261:	57                   	push   edi
c0017262:	56                   	push   esi
c0017263:	53                   	push   ebx
c0017264:	83 ec 1c             	sub    esp,0x1c
c0017267:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001726b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001726f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0017273:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0017277:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001727b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001727f:	01 df                	add    edi,ebx
c0017281:	39 fb                	cmp    ebx,edi
c0017283:	7d 1f                	jge    c00172a4 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0017285:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017289:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001728d:	7d 12                	jge    c00172a1 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c001728f:	8b 16                	mov    edx,DWORD PTR [esi]
c0017291:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0017295:	53                   	push   ebx
c0017296:	55                   	push   ebp
c0017297:	45                   	inc    ebp
c0017298:	56                   	push   esi
c0017299:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001729c:	83 c4 10             	add    esp,0x10
c001729f:	eb e8                	jmp    c0017289 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c00172a1:	43                   	inc    ebx
c00172a2:	eb dd                	jmp    c0017281 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c00172a4:	83 c4 1c             	add    esp,0x1c
c00172a7:	5b                   	pop    ebx
c00172a8:	5e                   	pop    esi
c00172a9:	5f                   	pop    edi
c00172aa:	5d                   	pop    ebp
c00172ab:	c3                   	ret    

c00172ac <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c00172ac:	55                   	push   ebp
c00172ad:	57                   	push   edi
c00172ae:	31 ff                	xor    edi,edi
c00172b0:	56                   	push   esi
c00172b1:	53                   	push   ebx
c00172b2:	83 ec 1c             	sub    esp,0x1c
c00172b5:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00172b9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00172bd:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c00172c4:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c00172c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00172cd:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00172d1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00172d5:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c00172d8:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00172dc:	01 f9                	add    ecx,edi
c00172de:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c00172e2:	7d 2f                	jge    c0017313 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c00172e4:	31 f6                	xor    esi,esi
c00172e6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00172ea:	01 f2                	add    edx,esi
c00172ec:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c00172f0:	7d 1a                	jge    c001730c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c00172f2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00172f5:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c00172f8:	46                   	inc    esi
c00172f9:	51                   	push   ecx
c00172fa:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00172fe:	52                   	push   edx
c00172ff:	55                   	push   ebp
c0017300:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017303:	83 c4 10             	add    esp,0x10
c0017306:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001730a:	eb da                	jmp    c00172e6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c001730c:	47                   	inc    edi
c001730d:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0017311:	eb c5                	jmp    c00172d8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0017313:	83 c4 1c             	add    esp,0x1c
c0017316:	5b                   	pop    ebx
c0017317:	5e                   	pop    esi
c0017318:	5f                   	pop    edi
c0017319:	5d                   	pop    ebp
c001731a:	c3                   	ret    
c001731b:	90                   	nop

c001731c <Video::blit(unsigned int*, int, int, int, int)>:
c001731c:	55                   	push   ebp
c001731d:	57                   	push   edi
c001731e:	56                   	push   esi
c001731f:	53                   	push   ebx
c0017320:	83 ec 1c             	sub    esp,0x1c
c0017323:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017327:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001732b:	85 c0                	test   eax,eax
c001732d:	79 02                	jns    c0017331 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c001732f:	31 c0                	xor    eax,eax
c0017331:	c1 e0 02             	shl    eax,0x2
c0017334:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017338:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001733c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017340:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0017344:	39 d8                	cmp    eax,ebx
c0017346:	7e 49                	jle    c0017391 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017348:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001734e:	7c 41                	jl     c0017391 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017350:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0017354:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017358:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001735c:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0017360:	39 f9                	cmp    ecx,edi
c0017362:	7e 22                	jle    c0017386 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0017364:	83 c5 04             	add    ebp,0x4
c0017367:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001736d:	7c 14                	jl     c0017383 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c001736f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017371:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0017374:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017378:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001737c:	56                   	push   esi
c001737d:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0017380:	83 c4 10             	add    esp,0x10
c0017383:	47                   	inc    edi
c0017384:	eb d2                	jmp    c0017358 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0017386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001738a:	43                   	inc    ebx
c001738b:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001738f:	eb ab                	jmp    c001733c <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0017391:	83 c4 1c             	add    esp,0x1c
c0017394:	5b                   	pop    ebx
c0017395:	5e                   	pop    esi
c0017396:	5f                   	pop    edi
c0017397:	5d                   	pop    ebp
c0017398:	c3                   	ret    
c0017399:	90                   	nop

c001739a <Video::clearScreen(unsigned int)>:
c001739a:	57                   	push   edi
c001739b:	56                   	push   esi
c001739c:	53                   	push   ebx
c001739d:	31 db                	xor    ebx,ebx
c001739f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00173a3:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00173a9:	7e 1f                	jle    c00173ca <Video::clearScreen(unsigned int)+0x30>
c00173ab:	31 ff                	xor    edi,edi
c00173ad:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00173b3:	7e 12                	jle    c00173c7 <Video::clearScreen(unsigned int)+0x2d>
c00173b5:	8b 06                	mov    eax,DWORD PTR [esi]
c00173b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00173bb:	53                   	push   ebx
c00173bc:	57                   	push   edi
c00173bd:	47                   	inc    edi
c00173be:	56                   	push   esi
c00173bf:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00173c2:	83 c4 10             	add    esp,0x10
c00173c5:	eb e6                	jmp    c00173ad <Video::clearScreen(unsigned int)+0x13>
c00173c7:	43                   	inc    ebx
c00173c8:	eb d9                	jmp    c00173a3 <Video::clearScreen(unsigned int)+0x9>
c00173ca:	5b                   	pop    ebx
c00173cb:	5e                   	pop    esi
c00173cc:	5f                   	pop    edi
c00173cd:	c3                   	ret    

c00173ce <Video::putpixel(int, int, unsigned int)>:
c00173ce:	c7 44 24 04 60 b3 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b360
c00173d6:	e9 26 31 00 00       	jmp    c001a501 <Krnl::panic(char const*)>
c00173db:	90                   	nop

c00173dc <Video::Video(char const*)>:
c00173dc:	83 ec 0c             	sub    esp,0xc
c00173df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00173e3:	83 ec 08             	sub    esp,0x8
c00173e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00173ea:	50                   	push   eax
c00173eb:	e8 f0 cf ff ff       	call   c00143e0 <Device::Device(char const*)>
c00173f0:	83 c4 10             	add    esp,0x10
c00173f3:	ba e4 b3 02 c0       	mov    edx,0xc002b3e4
c00173f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00173fc:	89 10                	mov    DWORD PTR [eax],edx
c00173fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017402:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001740c:	90                   	nop
c001740d:	83 c4 0c             	add    esp,0xc
c0017410:	c3                   	ret    
c0017411:	90                   	nop

c0017412 <Video::~Video()>:
c0017412:	83 ec 0c             	sub    esp,0xc
c0017415:	ba e4 b3 02 c0       	mov    edx,0xc002b3e4
c001741a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001741e:	89 10                	mov    DWORD PTR [eax],edx
c0017420:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017424:	83 ec 0c             	sub    esp,0xc
c0017427:	50                   	push   eax
c0017428:	e8 95 cc ff ff       	call   c00140c2 <Device::~Device()>
c001742d:	83 c4 10             	add    esp,0x10
c0017430:	90                   	nop
c0017431:	83 c4 0c             	add    esp,0xc
c0017434:	c3                   	ret    
c0017435:	90                   	nop

c0017436 <Video::~Video()>:
c0017436:	83 ec 0c             	sub    esp,0xc
c0017439:	83 ec 0c             	sub    esp,0xc
c001743c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017440:	e8 cd ff ff ff       	call   c0017412 <Video::~Video()>
c0017445:	83 c4 10             	add    esp,0x10
c0017448:	83 ec 08             	sub    esp,0x8
c001744b:	68 64 01 00 00       	push   0x164
c0017450:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017454:	e8 8a b8 ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0017459:	83 c4 10             	add    esp,0x10
c001745c:	83 c4 0c             	add    esp,0xc
c001745f:	c3                   	ret    

c0017460 <Video::isMonochrome()>:
c0017460:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017464:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001746a:	c3                   	ret    
c001746b:	90                   	nop

c001746c <Video::getWidth()>:
c001746c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017470:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0017476:	c3                   	ret    
c0017477:	90                   	nop

c0017478 <Video::getHeight()>:
c0017478:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001747c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017482:	c3                   	ret    
c0017483:	90                   	nop

c0017484 <Video::drawCursor(int, int, unsigned char*, int)>:
c0017484:	55                   	push   ebp
c0017485:	57                   	push   edi
c0017486:	56                   	push   esi
c0017487:	53                   	push   ebx
c0017488:	83 ec 2c             	sub    esp,0x2c
c001748b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001748f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017493:	83 f8 01             	cmp    eax,0x1
c0017496:	19 c9                	sbb    ecx,ecx
c0017498:	31 db                	xor    ebx,ebx
c001749a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001749e:	89 cd                	mov    ebp,ecx
c00174a0:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00174a8:	f7 d5                	not    ebp
c00174aa:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00174b0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00174b4:	01 d8                	add    eax,ebx
c00174b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00174ba:	56                   	push   esi
c00174bb:	e8 b8 ff ff ff       	call   c0017478 <Video::getHeight()>
c00174c0:	59                   	pop    ecx
c00174c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00174c5:	7e 70                	jle    c0017537 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00174c7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00174cb:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00174cf:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00174d2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00174d6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00174da:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00174e1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00174e5:	89 f8                	mov    eax,edi
c00174e7:	83 c0 20             	add    eax,0x20
c00174ea:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00174ee:	56                   	push   esi
c00174ef:	e8 78 ff ff ff       	call   c001746c <Video::getWidth()>
c00174f4:	5a                   	pop    edx
c00174f5:	39 c7                	cmp    edi,eax
c00174f7:	7d 34                	jge    c001752d <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00174f9:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00174fe:	74 05                	je     c0017505 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0017500:	8b 06                	mov    eax,DWORD PTR [esi]
c0017502:	55                   	push   ebp
c0017503:	eb 0d                	jmp    c0017512 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0017505:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001750a:	74 12                	je     c001751e <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c001750c:	8b 06                	mov    eax,DWORD PTR [esi]
c001750e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017512:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017516:	57                   	push   edi
c0017517:	56                   	push   esi
c0017518:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001751b:	83 c4 10             	add    esp,0x10
c001751e:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0017522:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0017526:	47                   	inc    edi
c0017527:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001752b:	75 c1                	jne    c00174ee <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c001752d:	43                   	inc    ebx
c001752e:	83 fb 20             	cmp    ebx,0x20
c0017531:	0f 85 79 ff ff ff    	jne    c00174b0 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0017537:	83 c4 2c             	add    esp,0x2c
c001753a:	5b                   	pop    ebx
c001753b:	5e                   	pop    esi
c001753c:	5f                   	pop    edi
c001753d:	5d                   	pop    ebp
c001753e:	c3                   	ret    
c001753f:	90                   	nop

c0017540 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0017540:	55                   	push   ebp
c0017541:	57                   	push   edi
c0017542:	56                   	push   esi
c0017543:	53                   	push   ebx
c0017544:	83 ec 28             	sub    esp,0x28
c0017547:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001754b:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c001754f:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0017553:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0017557:	c1 e7 08             	shl    edi,0x8
c001755a:	01 c7                	add    edi,eax
c001755c:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0017560:	c1 e0 08             	shl    eax,0x8
c0017563:	01 d0                	add    eax,edx
c0017565:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017569:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001756d:	0f af c7             	imul   eax,edi
c0017570:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0017577:	50                   	push   eax
c0017578:	e8 ce 82 ff ff       	call   c000f84b <malloc>
c001757d:	83 c4 10             	add    esp,0x10
c0017580:	89 c5                	mov    ebp,eax
c0017582:	85 c0                	test   eax,eax
c0017584:	75 15                	jne    c001759b <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c0017586:	83 ec 0c             	sub    esp,0xc
c0017589:	68 81 b3 02 c0       	push   0xc002b381
c001758e:	e8 30 b8 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0017593:	83 c4 10             	add    esp,0x10
c0017596:	e9 1c 01 00 00       	jmp    c00176b7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c001759b:	be 12 00 00 00       	mov    esi,0x12
c00175a0:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00175a4:	74 11                	je     c00175b7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c00175a6:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c00175aa:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c00175ae:	c1 fe 03             	sar    esi,0x3
c00175b1:	0f af f0             	imul   esi,eax
c00175b4:	83 c6 12             	add    esi,0x12
c00175b7:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00175bb:	74 04                	je     c00175c1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c00175bd:	85 ff                	test   edi,edi
c00175bf:	75 12                	jne    c00175d3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c00175c1:	83 ec 0c             	sub    esp,0xc
c00175c4:	68 98 b3 02 c0       	push   0xc002b398
c00175c9:	e8 f5 b7 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00175ce:	e9 ce 00 00 00       	jmp    c00176a1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c00175d3:	52                   	push   edx
c00175d4:	52                   	push   edx
c00175d5:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c00175d9:	50                   	push   eax
c00175da:	68 ad b3 02 c0       	push   0xc002b3ad
c00175df:	e8 df b7 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00175e4:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c00175e8:	83 c4 10             	add    esp,0x10
c00175eb:	80 fa 02             	cmp    dl,0x2
c00175ee:	0f 85 98 00 00 00    	jne    c001768c <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c00175f4:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c00175f9:	75 10                	jne    c001760b <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00175fb:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00175ff:	75 0a                	jne    c001760b <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017601:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0017604:	83 e8 18             	sub    eax,0x18
c0017607:	a8 f7                	test   al,0xf7
c0017609:	74 0a                	je     c0017615 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c001760b:	83 ec 0c             	sub    esp,0xc
c001760e:	68 ba b3 02 c0       	push   0xc002b3ba
c0017613:	eb 7f                	jmp    c0017694 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0017615:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001761d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017625:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017629:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017631:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0017635:	75 0c                	jne    c0017643 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0017637:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c001763c:	c1 e0 18             	shl    eax,0x18
c001763f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017643:	41                   	inc    ecx
c0017644:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c0017649:	c1 e2 10             	shl    edx,0x10
c001764c:	89 d0                	mov    eax,edx
c001764e:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0017653:	c1 e2 08             	shl    edx,0x8
c0017656:	09 c2                	or     edx,eax
c0017658:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c001765c:	09 c2                	or     edx,eax
c001765e:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0017662:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c0017666:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001766a:	c1 f8 03             	sar    eax,0x3
c001766d:	01 c6                	add    esi,eax
c001766f:	89 c8                	mov    eax,ecx
c0017671:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0017675:	39 c7                	cmp    edi,eax
c0017677:	7f b0                	jg     c0017629 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0017679:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001767d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017681:	39 14 24             	cmp    DWORD PTR [esp],edx
c0017684:	7e 22                	jle    c00176a8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0017686:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001768a:	eb 99                	jmp    c0017625 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c001768c:	50                   	push   eax
c001768d:	50                   	push   eax
c001768e:	52                   	push   edx
c001768f:	68 c8 b3 02 c0       	push   0xc002b3c8
c0017694:	e8 2a b7 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0017699:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001769c:	e8 ba 81 ff ff       	call   c000f85b <free>
c00176a1:	83 c4 10             	add    esp,0x10
c00176a4:	31 ed                	xor    ebp,ebp
c00176a6:	eb 0f                	jmp    c00176b7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00176a8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00176ac:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00176af:	89 38                	mov    DWORD PTR [eax],edi
c00176b1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00176b5:	89 08                	mov    DWORD PTR [eax],ecx
c00176b7:	83 c4 1c             	add    esp,0x1c
c00176ba:	89 e8                	mov    eax,ebp
c00176bc:	5b                   	pop    ebx
c00176bd:	5e                   	pop    esi
c00176be:	5f                   	pop    edi
c00176bf:	5d                   	pop    ebp
c00176c0:	c3                   	ret    
c00176c1:	90                   	nop

c00176c2 <Video::putTGA(int, int, unsigned char*, int)>:
c00176c2:	55                   	push   ebp
c00176c3:	57                   	push   edi
c00176c4:	56                   	push   esi
c00176c5:	53                   	push   ebx
c00176c6:	83 ec 28             	sub    esp,0x28
c00176c9:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00176cd:	8d 44 24 18          	lea    eax,[esp+0x18]
c00176d1:	50                   	push   eax
c00176d2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00176d6:	50                   	push   eax
c00176d7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00176db:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00176df:	56                   	push   esi
c00176e0:	e8 5b fe ff ff       	call   c0017540 <Video::tgaParse(unsigned char*, int, int*, int*)>
c00176e5:	83 c4 20             	add    esp,0x20
c00176e8:	85 c0                	test   eax,eax
c00176ea:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00176ee:	74 35                	je     c0017725 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00176f0:	89 c7                	mov    edi,eax
c00176f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00176f6:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00176fa:	39 d8                	cmp    eax,ebx
c00176fc:	7e 27                	jle    c0017725 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00176fe:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017702:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017706:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001770a:	39 e8                	cmp    eax,ebp
c001770c:	7e 14                	jle    c0017722 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c001770e:	8b 06                	mov    eax,DWORD PTR [esi]
c0017710:	83 c7 04             	add    edi,0x4
c0017713:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0017716:	53                   	push   ebx
c0017717:	55                   	push   ebp
c0017718:	45                   	inc    ebp
c0017719:	56                   	push   esi
c001771a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001771d:	83 c4 10             	add    esp,0x10
c0017720:	eb e0                	jmp    c0017702 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0017722:	43                   	inc    ebx
c0017723:	eb cd                	jmp    c00176f2 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0017725:	83 c4 1c             	add    esp,0x1c
c0017728:	5b                   	pop    ebx
c0017729:	5e                   	pop    esi
c001772a:	5f                   	pop    edi
c001772b:	5d                   	pop    ebp
c001772c:	c3                   	ret    
c001772d:	90                   	nop

c001772e <ACPI::close(int, int, void*)>:
c001772e:	83 ec 1c             	sub    esp,0x1c
c0017731:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0017739:	74 0a                	je     c0017745 <ACPI::close(int, int, void*)+0x17>
c001773b:	b8 00 00 00 00       	mov    eax,0x0
c0017740:	e9 9a 00 00 00       	jmp    c00177df <ACPI::close(int, int, void*)+0xb1>
c0017745:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001774a:	75 37                	jne    c0017783 <ACPI::close(int, int, void*)+0x55>
c001774c:	83 ec 0c             	sub    esp,0xc
c001774f:	68 24 b4 02 c0       	push   0xc002b424
c0017754:	e8 6a b6 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0017759:	83 c4 10             	add    esp,0x10
c001775c:	a1 28 0b 03 c0       	mov    eax,ds:0xc0030b28
c0017761:	85 c0                	test   eax,eax
c0017763:	74 07                	je     c001776c <ACPI::close(int, int, void*)+0x3e>
c0017765:	a1 28 0b 03 c0       	mov    eax,ds:0xc0030b28
c001776a:	ff d0                	call   eax
c001776c:	83 ec 0c             	sub    esp,0xc
c001776f:	68 54 b5 02 c0       	push   0xc002b554
c0017774:	e8 88 2d 00 00       	call   c001a501 <Krnl::panic(char const*)>
c0017779:	83 c4 10             	add    esp,0x10
c001777c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017781:	eb 5c                	jmp    c00177df <ACPI::close(int, int, void*)+0xb1>
c0017783:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0017788:	75 50                	jne    c00177da <ACPI::close(int, int, void*)+0xac>
c001778a:	a1 24 0b 03 c0       	mov    eax,ds:0xc0030b24
c001778f:	85 c0                	test   eax,eax
c0017791:	74 07                	je     c001779a <ACPI::close(int, int, void*)+0x6c>
c0017793:	a1 24 0b 03 c0       	mov    eax,ds:0xc0030b24
c0017798:	ff d0                	call   eax
c001779a:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c001779f:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00177a4:	83 e0 02             	and    eax,0x2
c00177a7:	74 1c                	je     c00177c5 <ACPI::close(int, int, void*)+0x97>
c00177a9:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00177b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00177b4:	89 c2                	mov    edx,eax
c00177b6:	ec                   	in     al,dx
c00177b7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00177bb:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00177bf:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00177c3:	eb da                	jmp    c001779f <ACPI::close(int, int, void*)+0x71>
c00177c5:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00177cc:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00177d1:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00177d5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00177d9:	ee                   	out    dx,al
c00177da:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00177df:	83 c4 1c             	add    esp,0x1c
c00177e2:	c3                   	ret    

c00177e3 <findRSDP()>:
c00177e3:	83 ec 1c             	sub    esp,0x1c
c00177e6:	83 ec 0c             	sub    esp,0xc
c00177e9:	68 31 b4 02 c0       	push   0xc002b431
c00177ee:	e8 d0 b5 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00177f3:	83 c4 10             	add    esp,0x10
c00177f6:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c00177fb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017801:	83 e0 04             	and    eax,0x4
c0017804:	84 c0                	test   al,al
c0017806:	75 07                	jne    c001780f <findRSDP()+0x2c>
c0017808:	b8 00 00 00 00       	mov    eax,0x0
c001780d:	eb 6a                	jmp    c0017879 <findRSDP()+0x96>
c001780f:	a1 b4 e4 02 c0       	mov    eax,ds:0xc002e4b4
c0017814:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017819:	7f 1b                	jg     c0017836 <findRSDP()+0x53>
c001781b:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0017820:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017826:	83 e2 fb             	and    edx,0xfffffffb
c0017829:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001782f:	b8 00 00 00 00       	mov    eax,0x0
c0017834:	eb 43                	jmp    c0017879 <findRSDP()+0x96>
c0017836:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001783e:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017846:	77 2c                	ja     c0017874 <findRSDP()+0x91>
c0017848:	83 ec 04             	sub    esp,0x4
c001784b:	6a 08                	push   0x8
c001784d:	68 3f b4 02 c0       	push   0xc002b43f
c0017852:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017856:	e8 ed 8d fe ff       	call   c0000648 <memcmp>
c001785b:	83 c4 10             	add    esp,0x10
c001785e:	85 c0                	test   eax,eax
c0017860:	0f 94 c0             	sete   al
c0017863:	84 c0                	test   al,al
c0017865:	74 06                	je     c001786d <findRSDP()+0x8a>
c0017867:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001786b:	eb 0c                	jmp    c0017879 <findRSDP()+0x96>
c001786d:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017872:	eb ca                	jmp    c001783e <findRSDP()+0x5b>
c0017874:	b8 00 00 00 00       	mov    eax,0x0
c0017879:	83 c4 1c             	add    esp,0x1c
c001787c:	c3                   	ret    

c001787d <loadACPITables(unsigned char*)>:
c001787d:	56                   	push   esi
c001787e:	53                   	push   ebx
c001787f:	83 ec 44             	sub    esp,0x44
c0017882:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0017887:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001788d:	83 e0 04             	and    eax,0x4
c0017890:	84 c0                	test   al,al
c0017892:	0f 84 05 02 00 00    	je     c0017a9d <loadACPITables(unsigned char*)+0x220>
c0017898:	a0 40 0d 03 c0       	mov    al,ds:0xc0030d40
c001789d:	84 c0                	test   al,al
c001789f:	74 75                	je     c0017916 <loadACPITables(unsigned char*)+0x99>
c00178a1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00178a5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00178a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00178ad:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00178b0:	83 e8 24             	sub    eax,0x24
c00178b3:	c1 e8 03             	shr    eax,0x3
c00178b6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00178ba:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00178c2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00178c6:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00178ca:	0f 8d b2 00 00 00    	jge    c0017982 <loadACPITables(unsigned char*)+0x105>
c00178d0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00178d4:	83 c0 24             	add    eax,0x24
c00178d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00178db:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00178df:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00178e3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00178e7:	c1 e0 03             	shl    eax,0x3
c00178ea:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c00178ee:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00178f2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00178f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00178f7:	89 c1                	mov    ecx,eax
c00178f9:	a1 2c 0b 03 c0       	mov    eax,ds:0xc0030b2c
c00178fe:	8d 50 01             	lea    edx,[eax+0x1]
c0017901:	89 15 2c 0b 03 c0    	mov    DWORD PTR ds:0xc0030b2c,edx
c0017907:	89 ca                	mov    edx,ecx
c0017909:	89 14 c5 44 0b 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf4bc],edx
c0017910:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0017914:	eb ac                	jmp    c00178c2 <loadACPITables(unsigned char*)+0x45>
c0017916:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001791a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001791e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017922:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017925:	83 e8 24             	sub    eax,0x24
c0017928:	c1 e8 02             	shr    eax,0x2
c001792b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001792f:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0017937:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001793b:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c001793f:	7d 41                	jge    c0017982 <loadACPITables(unsigned char*)+0x105>
c0017941:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017945:	83 c0 24             	add    eax,0x24
c0017948:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001794c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017950:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017954:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017958:	c1 e0 02             	shl    eax,0x2
c001795b:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c001795f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017963:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017965:	a1 2c 0b 03 c0       	mov    eax,ds:0xc0030b2c
c001796a:	8d 50 01             	lea    edx,[eax+0x1]
c001796d:	89 15 2c 0b 03 c0    	mov    DWORD PTR ds:0xc0030b2c,edx
c0017973:	89 ca                	mov    edx,ecx
c0017975:	89 14 c5 44 0b 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf4bc],edx
c001797c:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0017980:	eb b5                	jmp    c0017937 <loadACPITables(unsigned char*)+0xba>
c0017982:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c001798a:	a1 2c 0b 03 c0       	mov    eax,ds:0xc0030b2c
c001798f:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0017993:	0f 8d 05 01 00 00    	jge    c0017a9e <loadACPITables(unsigned char*)+0x221>
c0017999:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001799d:	8b 04 c5 44 0b 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf4bc]
c00179a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00179a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00179b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179b4:	25 ff 0f 00 00       	and    eax,0xfff
c00179b9:	89 c6                	mov    esi,eax
c00179bb:	e8 6e a2 ff ff       	call   c0011c2e <Virt::getAKernelVAS()>
c00179c0:	89 c3                	mov    ebx,eax
c00179c2:	83 ec 0c             	sub    esp,0xc
c00179c5:	6a 01                	push   0x1
c00179c7:	e8 23 a0 ff ff       	call   c00119ef <Virt::allocateKernelVirtualPages(int)>
c00179cc:	83 c4 10             	add    esp,0x10
c00179cf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00179d3:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00179d9:	83 ec 0c             	sub    esp,0xc
c00179dc:	6a 01                	push   0x1
c00179de:	6a 01                	push   0x1
c00179e0:	50                   	push   eax
c00179e1:	52                   	push   edx
c00179e2:	53                   	push   ebx
c00179e3:	e8 28 ab ff ff       	call   c0012510 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00179e8:	83 c4 20             	add    esp,0x20
c00179eb:	09 f0                	or     eax,esi
c00179ed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00179f1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00179f5:	c1 e0 03             	shl    eax,0x3
c00179f8:	05 40 0b 03 c0       	add    eax,0xc0030b40
c00179fd:	83 ec 04             	sub    esp,0x4
c0017a00:	6a 04                	push   0x4
c0017a02:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017a06:	50                   	push   eax
c0017a07:	e8 40 8d fe ff       	call   c000074c <memcpy>
c0017a0c:	83 c4 10             	add    esp,0x10
c0017a0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a13:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017a1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017a1e:	05 00 10 00 00       	add    eax,0x1000
c0017a23:	c1 e8 0c             	shr    eax,0xc
c0017a26:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017a2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a2e:	89 04 24             	mov    DWORD PTR [esp],eax
c0017a31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a35:	25 ff 0f 00 00       	and    eax,0xfff
c0017a3a:	89 c6                	mov    esi,eax
c0017a3c:	e8 ed a1 ff ff       	call   c0011c2e <Virt::getAKernelVAS()>
c0017a41:	89 c3                	mov    ebx,eax
c0017a43:	83 ec 0c             	sub    esp,0xc
c0017a46:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017a4a:	e8 a0 9f ff ff       	call   c00119ef <Virt::allocateKernelVirtualPages(int)>
c0017a4f:	83 c4 10             	add    esp,0x10
c0017a52:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017a56:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017a5c:	83 ec 0c             	sub    esp,0xc
c0017a5f:	6a 01                	push   0x1
c0017a61:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017a65:	50                   	push   eax
c0017a66:	52                   	push   edx
c0017a67:	53                   	push   ebx
c0017a68:	e8 a3 aa ff ff       	call   c0012510 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017a6d:	83 c4 20             	add    esp,0x20
c0017a70:	09 f0                	or     eax,esi
c0017a72:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017a76:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017a79:	83 ec 0c             	sub    esp,0xc
c0017a7c:	50                   	push   eax
c0017a7d:	e8 33 a4 ff ff       	call   c0011eb5 <Virt::freeKernelVirtualPages(unsigned long)>
c0017a82:	83 c4 10             	add    esp,0x10
c0017a85:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a89:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017a8d:	89 14 c5 44 0b 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf4bc],edx
c0017a94:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017a98:	e9 ed fe ff ff       	jmp    c001798a <loadACPITables(unsigned char*)+0x10d>
c0017a9d:	90                   	nop
c0017a9e:	83 c4 44             	add    esp,0x44
c0017aa1:	5b                   	pop    ebx
c0017aa2:	5e                   	pop    esi
c0017aa3:	c3                   	ret    

c0017aa4 <findRSDT(unsigned char*)>:
c0017aa4:	56                   	push   esi
c0017aa5:	53                   	push   ebx
c0017aa6:	83 ec 44             	sub    esp,0x44
c0017aa9:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0017aae:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017ab4:	83 e0 04             	and    eax,0x4
c0017ab7:	84 c0                	test   al,al
c0017ab9:	75 0a                	jne    c0017ac5 <findRSDT(unsigned char*)+0x21>
c0017abb:	b8 00 00 00 00       	mov    eax,0x0
c0017ac0:	e9 f7 00 00 00       	jmp    c0017bbc <findRSDT(unsigned char*)+0x118>
c0017ac5:	83 ec 04             	sub    esp,0x4
c0017ac8:	6a 24                	push   0x24
c0017aca:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017ace:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017ad2:	50                   	push   eax
c0017ad3:	e8 74 8c fe ff       	call   c000074c <memcpy>
c0017ad8:	83 c4 10             	add    esp,0x10
c0017adb:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017adf:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017ae3:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017aeb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017aef:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017af3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017af7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017afb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017aff:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b03:	25 ff 0f 00 00       	and    eax,0xfff
c0017b08:	89 c6                	mov    esi,eax
c0017b0a:	e8 1f a1 ff ff       	call   c0011c2e <Virt::getAKernelVAS()>
c0017b0f:	89 c3                	mov    ebx,eax
c0017b11:	83 ec 0c             	sub    esp,0xc
c0017b14:	6a 02                	push   0x2
c0017b16:	e8 d4 9e ff ff       	call   c00119ef <Virt::allocateKernelVirtualPages(int)>
c0017b1b:	83 c4 10             	add    esp,0x10
c0017b1e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017b22:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017b28:	83 ec 0c             	sub    esp,0xc
c0017b2b:	6a 01                	push   0x1
c0017b2d:	6a 02                	push   0x2
c0017b2f:	50                   	push   eax
c0017b30:	52                   	push   edx
c0017b31:	53                   	push   ebx
c0017b32:	e8 d9 a9 ff ff       	call   c0012510 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017b37:	83 c4 20             	add    esp,0x20
c0017b3a:	09 f0                	or     eax,esi
c0017b3c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017b40:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b44:	25 ff 0f 00 00       	and    eax,0xfff
c0017b49:	89 c6                	mov    esi,eax
c0017b4b:	e8 de a0 ff ff       	call   c0011c2e <Virt::getAKernelVAS()>
c0017b50:	89 c3                	mov    ebx,eax
c0017b52:	83 ec 0c             	sub    esp,0xc
c0017b55:	6a 02                	push   0x2
c0017b57:	e8 93 9e ff ff       	call   c00119ef <Virt::allocateKernelVirtualPages(int)>
c0017b5c:	83 c4 10             	add    esp,0x10
c0017b5f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017b63:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017b69:	83 ec 0c             	sub    esp,0xc
c0017b6c:	6a 01                	push   0x1
c0017b6e:	6a 02                	push   0x2
c0017b70:	50                   	push   eax
c0017b71:	52                   	push   edx
c0017b72:	53                   	push   ebx
c0017b73:	e8 98 a9 ff ff       	call   c0012510 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017b78:	83 c4 20             	add    esp,0x20
c0017b7b:	09 f0                	or     eax,esi
c0017b7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017b81:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017b86:	75 11                	jne    c0017b99 <findRSDT(unsigned char*)+0xf5>
c0017b88:	c6 05 40 0d 03 c0 00 	mov    BYTE PTR ds:0xc0030d40,0x0
c0017b8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b93:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017b97:	eb 1f                	jmp    c0017bb8 <findRSDT(unsigned char*)+0x114>
c0017b99:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017b9e:	75 11                	jne    c0017bb1 <findRSDT(unsigned char*)+0x10d>
c0017ba0:	c6 05 40 0d 03 c0 01 	mov    BYTE PTR ds:0xc0030d40,0x1
c0017ba7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017bab:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017baf:	eb 07                	jmp    c0017bb8 <findRSDT(unsigned char*)+0x114>
c0017bb1:	b8 00 00 00 00       	mov    eax,0x0
c0017bb6:	eb 04                	jmp    c0017bbc <findRSDT(unsigned char*)+0x118>
c0017bb8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017bbc:	83 c4 44             	add    esp,0x44
c0017bbf:	5b                   	pop    ebx
c0017bc0:	5e                   	pop    esi
c0017bc1:	c3                   	ret    

c0017bc2 <findDataTable(unsigned char*, char*)>:
c0017bc2:	83 ec 1c             	sub    esp,0x1c
c0017bc5:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0017bca:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017bd0:	83 e0 04             	and    eax,0x4
c0017bd3:	84 c0                	test   al,al
c0017bd5:	75 07                	jne    c0017bde <findDataTable(unsigned char*, char*)+0x1c>
c0017bd7:	b8 00 00 00 00       	mov    eax,0x0
c0017bdc:	eb 7c                	jmp    c0017c5a <findDataTable(unsigned char*, char*)+0x98>
c0017bde:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017be6:	a1 2c 0b 03 c0       	mov    eax,ds:0xc0030b2c
c0017beb:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017bef:	7d 3a                	jge    c0017c2b <findDataTable(unsigned char*, char*)+0x69>
c0017bf1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017bf5:	c1 e0 03             	shl    eax,0x3
c0017bf8:	05 40 0b 03 c0       	add    eax,0xc0030b40
c0017bfd:	83 ec 04             	sub    esp,0x4
c0017c00:	6a 04                	push   0x4
c0017c02:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017c06:	50                   	push   eax
c0017c07:	e8 3c 8a fe ff       	call   c0000648 <memcmp>
c0017c0c:	83 c4 10             	add    esp,0x10
c0017c0f:	85 c0                	test   eax,eax
c0017c11:	0f 94 c0             	sete   al
c0017c14:	84 c0                	test   al,al
c0017c16:	74 0d                	je     c0017c25 <findDataTable(unsigned char*, char*)+0x63>
c0017c18:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017c1c:	8b 04 c5 44 0b 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf4bc]
c0017c23:	eb 35                	jmp    c0017c5a <findDataTable(unsigned char*, char*)+0x98>
c0017c25:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017c29:	eb bb                	jmp    c0017be6 <findDataTable(unsigned char*, char*)+0x24>
c0017c2b:	a0 40 0d 03 c0       	mov    al,ds:0xc0030d40
c0017c30:	84 c0                	test   al,al
c0017c32:	74 07                	je     c0017c3b <findDataTable(unsigned char*, char*)+0x79>
c0017c34:	b8 58 00 00 00       	mov    eax,0x58
c0017c39:	eb 05                	jmp    c0017c40 <findDataTable(unsigned char*, char*)+0x7e>
c0017c3b:	b8 52 00 00 00       	mov    eax,0x52
c0017c40:	83 ec 04             	sub    esp,0x4
c0017c43:	50                   	push   eax
c0017c44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017c48:	68 78 b5 02 c0       	push   0xc002b578
c0017c4d:	e8 71 b1 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0017c52:	83 c4 10             	add    esp,0x10
c0017c55:	b8 00 00 00 00       	mov    eax,0x0
c0017c5a:	83 c4 1c             	add    esp,0x1c
c0017c5d:	c3                   	ret    

c0017c5e <scanMADT()>:
c0017c5e:	53                   	push   ebx
c0017c5f:	83 ec 38             	sub    esp,0x38
c0017c62:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0017c67:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017c6d:	83 e0 04             	and    eax,0x4
c0017c70:	84 c0                	test   al,al
c0017c72:	0f 84 63 04 00 00    	je     c00180db <scanMADT()+0x47d>
c0017c78:	e8 66 fb ff ff       	call   c00177e3 <findRSDP()>
c0017c7d:	a3 4c 0d 03 c0       	mov    ds:0xc0030d4c,eax
c0017c82:	a1 4c 0d 03 c0       	mov    eax,ds:0xc0030d4c
c0017c87:	85 c0                	test   eax,eax
c0017c89:	75 19                	jne    c0017ca4 <scanMADT()+0x46>
c0017c8b:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0017c90:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017c96:	83 e2 fb             	and    edx,0xfffffffb
c0017c99:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017c9f:	e9 3b 04 00 00       	jmp    c00180df <scanMADT()+0x481>
c0017ca4:	a1 4c 0d 03 c0       	mov    eax,ds:0xc0030d4c
c0017ca9:	83 ec 0c             	sub    esp,0xc
c0017cac:	50                   	push   eax
c0017cad:	e8 f2 fd ff ff       	call   c0017aa4 <findRSDT(unsigned char*)>
c0017cb2:	83 c4 10             	add    esp,0x10
c0017cb5:	a3 48 0d 03 c0       	mov    ds:0xc0030d48,eax
c0017cba:	a1 48 0d 03 c0       	mov    eax,ds:0xc0030d48
c0017cbf:	85 c0                	test   eax,eax
c0017cc1:	75 19                	jne    c0017cdc <scanMADT()+0x7e>
c0017cc3:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0017cc8:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017cce:	83 e2 fb             	and    edx,0xfffffffb
c0017cd1:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017cd7:	e9 03 04 00 00       	jmp    c00180df <scanMADT()+0x481>
c0017cdc:	a1 48 0d 03 c0       	mov    eax,ds:0xc0030d48
c0017ce1:	83 ec 0c             	sub    esp,0xc
c0017ce4:	50                   	push   eax
c0017ce5:	e8 93 fb ff ff       	call   c001787d <loadACPITables(unsigned char*)>
c0017cea:	83 c4 10             	add    esp,0x10
c0017ced:	a1 48 0d 03 c0       	mov    eax,ds:0xc0030d48
c0017cf2:	83 ec 08             	sub    esp,0x8
c0017cf5:	68 48 b4 02 c0       	push   0xc002b448
c0017cfa:	50                   	push   eax
c0017cfb:	e8 c2 fe ff ff       	call   c0017bc2 <findDataTable(unsigned char*, char*)>
c0017d00:	83 c4 10             	add    esp,0x10
c0017d03:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017d07:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017d0c:	75 19                	jne    c0017d27 <scanMADT()+0xc9>
c0017d0e:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0017d13:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017d19:	83 e2 fe             	and    edx,0xfffffffe
c0017d1c:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017d22:	e9 b8 03 00 00       	jmp    c00180df <scanMADT()+0x481>
c0017d27:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017d2f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d33:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017d36:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017d3a:	0f 87 9f 03 00 00    	ja     c00180df <scanMADT()+0x481>
c0017d40:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017d48:	0f 87 91 03 00 00    	ja     c00180df <scanMADT()+0x481>
c0017d4e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d52:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017d56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d5a:	8d 50 01             	lea    edx,[eax+0x1]
c0017d5d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017d61:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d65:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017d69:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017d6d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d71:	8d 50 01             	lea    edx,[eax+0x1]
c0017d74:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017d78:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d7c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017d80:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017d84:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017d89:	0f 86 4f 03 00 00    	jbe    c00180de <scanMADT()+0x480>
c0017d8f:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017d94:	75 57                	jne    c0017ded <scanMADT()+0x18f>
c0017d96:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d9a:	8d 50 01             	lea    edx,[eax+0x1]
c0017d9d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017da1:	8a 15 40 0f 03 c0    	mov    dl,BYTE PTR ds:0xc0030f40
c0017da7:	0f b6 d2             	movzx  edx,dl
c0017daa:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017dae:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017db2:	88 82 80 0f 03 c0    	mov    BYTE PTR [edx-0x3ffcf080],al
c0017db8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017dbc:	8d 50 01             	lea    edx,[eax+0x1]
c0017dbf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017dc3:	8a 15 40 0f 03 c0    	mov    dl,BYTE PTR ds:0xc0030f40
c0017dc9:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017dcc:	88 0d 40 0f 03 c0    	mov    BYTE PTR ds:0xc0030f40,cl
c0017dd2:	0f b6 d2             	movzx  edx,dl
c0017dd5:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017dd9:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017ddd:	88 82 60 0f 03 c0    	mov    BYTE PTR [edx-0x3ffcf0a0],al
c0017de3:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017de8:	e9 da 02 00 00       	jmp    c00180c7 <scanMADT()+0x469>
c0017ded:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017df2:	0f 85 14 01 00 00    	jne    c0017f0c <scanMADT()+0x2ae>
c0017df8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017dfc:	8d 50 01             	lea    edx,[eax+0x1]
c0017dff:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e03:	8a 15 00 0e 03 c0    	mov    dl,BYTE PTR ds:0xc0030e00
c0017e09:	0f b6 d2             	movzx  edx,dl
c0017e0c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017e10:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017e14:	88 82 20 0e 03 c0    	mov    BYTE PTR [edx-0x3ffcf1e0],al
c0017e1a:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017e1e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e22:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e26:	01 d0                	add    eax,edx
c0017e28:	83 c0 2c             	add    eax,0x2c
c0017e2b:	8a 00                	mov    al,BYTE PTR [eax]
c0017e2d:	0f b6 d0             	movzx  edx,al
c0017e30:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e34:	8d 48 01             	lea    ecx,[eax+0x1]
c0017e37:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e3b:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017e3f:	0f b6 c0             	movzx  eax,al
c0017e42:	c1 e0 08             	shl    eax,0x8
c0017e45:	89 d1                	mov    ecx,edx
c0017e47:	09 c1                	or     ecx,eax
c0017e49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e4d:	8d 50 02             	lea    edx,[eax+0x2]
c0017e50:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e54:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017e58:	0f b6 c0             	movzx  eax,al
c0017e5b:	c1 e0 10             	shl    eax,0x10
c0017e5e:	09 c1                	or     ecx,eax
c0017e60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e64:	8d 50 03             	lea    edx,[eax+0x3]
c0017e67:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e6b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017e6f:	0f b6 c0             	movzx  eax,al
c0017e72:	c1 e0 18             	shl    eax,0x18
c0017e75:	09 c1                	or     ecx,eax
c0017e77:	89 ca                	mov    edx,ecx
c0017e79:	a0 00 0e 03 c0       	mov    al,ds:0xc0030e00
c0017e7e:	0f b6 c0             	movzx  eax,al
c0017e81:	89 14 85 40 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf1c0],edx
c0017e88:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017e8d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e91:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e95:	01 d0                	add    eax,edx
c0017e97:	83 c0 2c             	add    eax,0x2c
c0017e9a:	8a 00                	mov    al,BYTE PTR [eax]
c0017e9c:	0f b6 d0             	movzx  edx,al
c0017e9f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ea3:	8d 48 01             	lea    ecx,[eax+0x1]
c0017ea6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017eaa:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017eae:	0f b6 c0             	movzx  eax,al
c0017eb1:	c1 e0 08             	shl    eax,0x8
c0017eb4:	89 d1                	mov    ecx,edx
c0017eb6:	09 c1                	or     ecx,eax
c0017eb8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ebc:	8d 50 02             	lea    edx,[eax+0x2]
c0017ebf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ec3:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017ec7:	0f b6 c0             	movzx  eax,al
c0017eca:	c1 e0 10             	shl    eax,0x10
c0017ecd:	09 c1                	or     ecx,eax
c0017ecf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ed3:	8d 50 03             	lea    edx,[eax+0x3]
c0017ed6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017eda:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017ede:	0f b6 c0             	movzx  eax,al
c0017ee1:	c1 e0 18             	shl    eax,0x18
c0017ee4:	09 c1                	or     ecx,eax
c0017ee6:	89 ca                	mov    edx,ecx
c0017ee8:	a0 00 0e 03 c0       	mov    al,ds:0xc0030e00
c0017eed:	0f b6 c0             	movzx  eax,al
c0017ef0:	89 14 85 c0 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf140],edx
c0017ef7:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017efc:	a0 00 0e 03 c0       	mov    al,ds:0xc0030e00
c0017f01:	40                   	inc    eax
c0017f02:	a2 00 0e 03 c0       	mov    ds:0xc0030e00,al
c0017f07:	e9 bb 01 00 00       	jmp    c00180c7 <scanMADT()+0x469>
c0017f0c:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017f11:	0f 85 e9 00 00 00    	jne    c0018000 <scanMADT()+0x3a2>
c0017f17:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f1b:	8d 50 01             	lea    edx,[eax+0x1]
c0017f1e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f22:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f26:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017f2a:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017f2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f32:	8d 50 01             	lea    edx,[eax+0x1]
c0017f35:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f39:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f3d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017f41:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017f45:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f4d:	01 d0                	add    eax,edx
c0017f4f:	83 c0 2c             	add    eax,0x2c
c0017f52:	8a 00                	mov    al,BYTE PTR [eax]
c0017f54:	0f b6 d0             	movzx  edx,al
c0017f57:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f5b:	8d 48 01             	lea    ecx,[eax+0x1]
c0017f5e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f62:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017f66:	0f b6 c0             	movzx  eax,al
c0017f69:	c1 e0 08             	shl    eax,0x8
c0017f6c:	89 d1                	mov    ecx,edx
c0017f6e:	09 c1                	or     ecx,eax
c0017f70:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f74:	8d 50 02             	lea    edx,[eax+0x2]
c0017f77:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f7b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f7f:	0f b6 c0             	movzx  eax,al
c0017f82:	c1 e0 10             	shl    eax,0x10
c0017f85:	09 c1                	or     ecx,eax
c0017f87:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f8b:	8d 50 03             	lea    edx,[eax+0x3]
c0017f8e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f92:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f96:	0f b6 c0             	movzx  eax,al
c0017f99:	c1 e0 18             	shl    eax,0x18
c0017f9c:	09 c8                	or     eax,ecx
c0017f9e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017fa2:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017fa7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017faf:	01 d0                	add    eax,edx
c0017fb1:	83 c0 2c             	add    eax,0x2c
c0017fb4:	8a 00                	mov    al,BYTE PTR [eax]
c0017fb6:	0f b6 c0             	movzx  eax,al
c0017fb9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017fbd:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017fc0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fc4:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017fc8:	0f b6 d2             	movzx  edx,dl
c0017fcb:	c1 e2 08             	shl    edx,0x8
c0017fce:	09 d0                	or     eax,edx
c0017fd0:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017fd5:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017fda:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017fdf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017fe3:	88 90 c0 d6 02 c0    	mov    BYTE PTR [eax-0x3ffd2940],dl
c0017fe9:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017fee:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017ff3:	66 89 84 12 e0 0d 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcf220],ax
c0017ffb:	e9 c7 00 00 00       	jmp    c00180c7 <scanMADT()+0x469>
c0018000:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0018005:	0f 85 b0 00 00 00    	jne    c00180bb <scanMADT()+0x45d>
c001800b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001800f:	8d 50 01             	lea    edx,[eax+0x1]
c0018012:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018016:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001801a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001801e:	0f b6 c0             	movzx  eax,al
c0018021:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018025:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018029:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001802d:	01 d0                	add    eax,edx
c001802f:	83 c0 2c             	add    eax,0x2c
c0018032:	8a 00                	mov    al,BYTE PTR [eax]
c0018034:	0f b6 d0             	movzx  edx,al
c0018037:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001803b:	8d 48 01             	lea    ecx,[eax+0x1]
c001803e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018042:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018046:	0f b6 c0             	movzx  eax,al
c0018049:	c1 e0 08             	shl    eax,0x8
c001804c:	09 d0                	or     eax,edx
c001804e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018052:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0018057:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001805b:	8d 50 01             	lea    edx,[eax+0x1]
c001805e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018062:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018066:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001806a:	0f b6 c0             	movzx  eax,al
c001806d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018071:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018075:	c1 e0 08             	shl    eax,0x8
c0018078:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001807c:	89 c1                	mov    ecx,eax
c001807e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018082:	c1 e0 18             	shl    eax,0x18
c0018085:	89 c3                	mov    ebx,eax
c0018087:	a1 50 0d 03 c0       	mov    eax,ds:0xc0030d50
c001808c:	8d 50 01             	lea    edx,[eax+0x1]
c001808f:	89 15 50 0d 03 c0    	mov    DWORD PTR ds:0xc0030d50,edx
c0018095:	09 d9                	or     ecx,ebx
c0018097:	89 ca                	mov    edx,ecx
c0018099:	89 14 85 60 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf2a0],edx
c00180a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00180a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00180a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00180ac:	68 a8 b5 02 c0       	push   0xc002b5a8
c00180b1:	e8 0d ad ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00180b6:	83 c4 10             	add    esp,0x10
c00180b9:	eb 0c                	jmp    c00180c7 <scanMADT()+0x469>
c00180bb:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c00180c0:	75 05                	jne    c00180c7 <scanMADT()+0x469>
c00180c2:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c00180c7:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c00180cc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00180d0:	01 d0                	add    eax,edx
c00180d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00180d6:	e9 54 fc ff ff       	jmp    c0017d2f <scanMADT()+0xd1>
c00180db:	90                   	nop
c00180dc:	eb 01                	jmp    c00180df <scanMADT()+0x481>
c00180de:	90                   	nop
c00180df:	83 c4 38             	add    esp,0x38
c00180e2:	5b                   	pop    ebx
c00180e3:	c3                   	ret    

c00180e4 <ACPI::ACPI()>:
c00180e4:	83 ec 0c             	sub    esp,0xc
c00180e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180eb:	83 ec 08             	sub    esp,0x8
c00180ee:	68 4d b4 02 c0       	push   0xc002b44d
c00180f3:	50                   	push   eax
c00180f4:	e8 e7 c2 ff ff       	call   c00143e0 <Device::Device(char const*)>
c00180f9:	83 c4 10             	add    esp,0x10
c00180fc:	ba 1c b6 02 c0       	mov    edx,0xc002b61c
c0018101:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018105:	89 10                	mov    DWORD PTR [eax],edx
c0018107:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001810b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0018112:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018116:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0018120:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018124:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c001812e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018132:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0018139:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001813d:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0018144:	e8 15 fb ff ff       	call   c0017c5e <scanMADT()>
c0018149:	90                   	nop
c001814a:	83 c4 0c             	add    esp,0xc
c001814d:	c3                   	ret    

c001814e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c001814e:	83 ec 2c             	sub    esp,0x2c
c0018151:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0018155:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018159:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001815d:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0018161:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018166:	88 d0                	mov    al,dl
c0018168:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001816c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0018171:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0018179:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001817d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018183:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0018187:	0f 8d 97 00 00 00    	jge    c0018224 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c001818d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018191:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018195:	83 c2 2a             	add    edx,0x2a
c0018198:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001819c:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c00181a1:	75 78                	jne    c001821b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00181a3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00181a7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00181ab:	83 c2 2a             	add    edx,0x2a
c00181ae:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c00181b2:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c00181b6:	75 63                	jne    c001821b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00181b8:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00181bd:	74 3a                	je     c00181f9 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c00181bf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00181c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00181c7:	83 c2 2a             	add    edx,0x2a
c00181ca:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00181ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00181d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00181d5:	39 c2                	cmp    edx,eax
c00181d7:	74 10                	je     c00181e9 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c00181d9:	83 ec 0c             	sub    esp,0xc
c00181dc:	68 e4 b5 02 c0       	push   0xc002b5e4
c00181e1:	e8 1b 23 00 00       	call   c001a501 <Krnl::panic(char const*)>
c00181e6:	83 c4 10             	add    esp,0x10
c00181e9:	83 ec 0c             	sub    esp,0xc
c00181ec:	68 52 b4 02 c0       	push   0xc002b452
c00181f1:	e8 0b 23 00 00       	call   c001a501 <Krnl::panic(char const*)>
c00181f6:	83 c4 10             	add    esp,0x10
c00181f9:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00181fd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018201:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018205:	83 c2 2a             	add    edx,0x2a
c0018208:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c001820c:	8b 02                	mov    eax,DWORD PTR [edx]
c001820e:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0018211:	89 01                	mov    DWORD PTR [ecx],eax
c0018213:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018216:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001821b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001821f:	e9 55 ff ff ff       	jmp    c0018179 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0018224:	90                   	nop
c0018225:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018229:	83 c4 2c             	add    esp,0x2c
c001822c:	c2 04 00             	ret    0x4
c001822f:	90                   	nop

c0018230 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0018230:	83 ec 1c             	sub    esp,0x1c
c0018233:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018237:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001823b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001823f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018244:	88 c8                	mov    al,cl
c0018246:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001824a:	88 d0                	mov    al,dl
c001824c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018250:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018254:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001825a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001825e:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018261:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0018265:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0018269:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001826d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018273:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018277:	8d 48 2a             	lea    ecx,[eax+0x2a]
c001827a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001827e:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0018283:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018287:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001828d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0018291:	8d 48 01             	lea    ecx,[eax+0x1]
c0018294:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018298:	83 c2 2a             	add    edx,0x2a
c001829b:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001829f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182a3:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00182a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182ad:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00182b0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00182b4:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c00182b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182bc:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00182c2:	8d 50 01             	lea    edx,[eax+0x1]
c00182c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182c9:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c00182cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182d3:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00182d9:	3d 00 02 00 00       	cmp    eax,0x200
c00182de:	75 10                	jne    c00182f0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c00182e0:	83 ec 0c             	sub    esp,0xc
c00182e3:	68 61 b4 02 c0       	push   0xc002b461
c00182e8:	e8 14 22 00 00       	call   c001a501 <Krnl::panic(char const*)>
c00182ed:	83 c4 10             	add    esp,0x10
c00182f0:	90                   	nop
c00182f1:	83 c4 1c             	add    esp,0x1c
c00182f4:	c3                   	ret    
c00182f5:	90                   	nop

c00182f6 <ACPI::setScreenBrightnessLevel(void*, int)>:
c00182f6:	b8 00 00 00 00       	mov    eax,0x0
c00182fb:	c3                   	ret    

c00182fc <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00182fc:	83 ec 1c             	sub    esp,0x1c
c00182ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018303:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0018306:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001830a:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c001830f:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018314:	83 ec 08             	sub    esp,0x8
c0018317:	52                   	push   edx
c0018318:	50                   	push   eax
c0018319:	e8 42 6b ff ff       	call   c000ee60 <Computer::readCMOS(unsigned char)>
c001831e:	83 c4 10             	add    esp,0x10
c0018321:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018325:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c001832a:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001832f:	83 ec 04             	sub    esp,0x4
c0018332:	6a 01                	push   0x1
c0018334:	52                   	push   edx
c0018335:	50                   	push   eax
c0018336:	e8 3b 6c ff ff       	call   c000ef76 <Computer::writeCMOS(unsigned char, unsigned char)>
c001833b:	83 c4 10             	add    esp,0x10
c001833e:	90                   	nop
c001833f:	83 c4 1c             	add    esp,0x1c
c0018342:	c3                   	ret    
c0018343:	90                   	nop

c0018344 <ACPI::open(int, int, void*)>:
c0018344:	53                   	push   ebx
c0018345:	83 ec 28             	sub    esp,0x28
c0018348:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001834c:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0018353:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018357:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c001835e:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0018363:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018369:	83 e0 04             	and    eax,0x4
c001836c:	84 c0                	test   al,al
c001836e:	74 47                	je     c00183b7 <ACPI::open(int, int, void*)+0x73>
c0018370:	a1 48 0d 03 c0       	mov    eax,ds:0xc0030d48
c0018375:	83 ec 08             	sub    esp,0x8
c0018378:	68 7e b4 02 c0       	push   0xc002b47e
c001837d:	50                   	push   eax
c001837e:	e8 3f f8 ff ff       	call   c0017bc2 <findDataTable(unsigned char*, char*)>
c0018383:	83 c4 10             	add    esp,0x10
c0018386:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001838a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001838f:	74 26                	je     c00183b7 <ACPI::open(int, int, void*)+0x73>
c0018391:	83 ec 0c             	sub    esp,0xc
c0018394:	68 83 b4 02 c0       	push   0xc002b483
c0018399:	e8 25 aa ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001839e:	83 c4 10             	add    esp,0x10
c00183a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183a5:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00183ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183b0:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00183b7:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c00183bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00183c3:	8a 00                	mov    al,BYTE PTR [eax]
c00183c5:	3c 01                	cmp    al,0x1
c00183c7:	75 28                	jne    c00183f1 <ACPI::open(int, int, void*)+0xad>
c00183c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183cd:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00183d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183d8:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00183df:	83 ec 0c             	sub    esp,0xc
c00183e2:	68 94 b4 02 c0       	push   0xc002b494
c00183e7:	e8 d7 a9 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00183ec:	83 c4 10             	add    esp,0x10
c00183ef:	eb 25                	jmp    c0018416 <ACPI::open(int, int, void*)+0xd2>
c00183f1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00183f5:	8a 00                	mov    al,BYTE PTR [eax]
c00183f7:	3c 02                	cmp    al,0x2
c00183f9:	75 1b                	jne    c0018416 <ACPI::open(int, int, void*)+0xd2>
c00183fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183ff:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018406:	83 ec 0c             	sub    esp,0xc
c0018409:	68 9c b4 02 c0       	push   0xc002b49c
c001840e:	e8 b0 a9 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0018413:	83 c4 10             	add    esp,0x10
c0018416:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001841a:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018420:	83 f0 01             	xor    eax,0x1
c0018423:	84 c0                	test   al,al
c0018425:	74 6a                	je     c0018491 <ACPI::open(int, int, void*)+0x14d>
c0018427:	83 ec 0c             	sub    esp,0xc
c001842a:	68 a4 b4 02 c0       	push   0xc002b4a4
c001842f:	e8 8f a9 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0018434:	83 c4 10             	add    esp,0x10
c0018437:	e8 14 7d fe ff       	call   c0000150 <manualPCIProbe>
c001843c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018440:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0018445:	75 28                	jne    c001846f <ACPI::open(int, int, void*)+0x12b>
c0018447:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001844b:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018452:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018456:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c001845d:	83 ec 0c             	sub    esp,0xc
c0018460:	68 b2 b4 02 c0       	push   0xc002b4b2
c0018465:	e8 59 a9 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001846a:	83 c4 10             	add    esp,0x10
c001846d:	eb 22                	jmp    c0018491 <ACPI::open(int, int, void*)+0x14d>
c001846f:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c0018474:	75 1b                	jne    c0018491 <ACPI::open(int, int, void*)+0x14d>
c0018476:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001847a:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018481:	83 ec 0c             	sub    esp,0xc
c0018484:	68 bc b4 02 c0       	push   0xc002b4bc
c0018489:	e8 35 a9 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001848e:	83 c4 10             	add    esp,0x10
c0018491:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018495:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c001849b:	84 c0                	test   al,al
c001849d:	74 13                	je     c00184b2 <ACPI::open(int, int, void*)+0x16e>
c001849f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184a3:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c00184a9:	83 f0 01             	xor    eax,0x1
c00184ac:	0f b6 c0             	movzx  eax,al
c00184af:	40                   	inc    eax
c00184b0:	eb 05                	jmp    c00184b7 <ACPI::open(int, int, void*)+0x173>
c00184b2:	b8 00 00 00 00       	mov    eax,0x0
c00184b7:	83 ec 08             	sub    esp,0x8
c00184ba:	50                   	push   eax
c00184bb:	68 c6 b4 02 c0       	push   0xc002b4c6
c00184c0:	e8 fe a8 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00184c5:	83 c4 10             	add    esp,0x10
c00184c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184cc:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00184d2:	84 c0                	test   al,al
c00184d4:	74 67                	je     c001853d <ACPI::open(int, int, void*)+0x1f9>
c00184d6:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c00184de:	83 ec 0c             	sub    esp,0xc
c00184e1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00184e5:	e8 61 73 ff ff       	call   c000f84b <malloc>
c00184ea:	83 c4 10             	add    esp,0x10
c00184ed:	89 c3                	mov    ebx,eax
c00184ef:	83 ec 0c             	sub    esp,0xc
c00184f2:	53                   	push   ebx
c00184f3:	e8 e4 a3 00 00       	call   c00228dc <PCI::PCI()>
c00184f8:	83 c4 10             	add    esp,0x10
c00184fb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00184ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018503:	83 ec 08             	sub    esp,0x8
c0018506:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001850a:	50                   	push   eax
c001850b:	e8 e0 bc ff ff       	call   c00141f0 <Device::addChild(Device*)>
c0018510:	83 c4 10             	add    esp,0x10
c0018513:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018517:	8b 00                	mov    eax,DWORD PTR [eax]
c0018519:	83 c0 08             	add    eax,0x8
c001851c:	8b 00                	mov    eax,DWORD PTR [eax]
c001851e:	6a 00                	push   0x0
c0018520:	6a 00                	push   0x0
c0018522:	6a 00                	push   0x0
c0018524:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018528:	ff d0                	call   eax
c001852a:	83 c4 10             	add    esp,0x10
c001852d:	83 ec 0c             	sub    esp,0xc
c0018530:	68 cf b4 02 c0       	push   0xc002b4cf
c0018535:	e8 89 a8 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001853a:	83 c4 10             	add    esp,0x10
c001853d:	83 ec 0c             	sub    esp,0xc
c0018540:	68 da b4 02 c0       	push   0xc002b4da
c0018545:	e8 8d 46 00 00       	call   c001cbd7 <Thr::loadKernelSymbolTable(char const*)>
c001854a:	83 c4 10             	add    esp,0x10
c001854d:	83 ec 0c             	sub    esp,0xc
c0018550:	6a 0c                	push   0xc
c0018552:	e8 dd 96 ff ff       	call   c0011c34 <Virt::setupPageSwapping(int)>
c0018557:	83 c4 10             	add    esp,0x10
c001855a:	8b 1d 68 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e468
c0018560:	83 ec 08             	sub    esp,0x8
c0018563:	6a 01                	push   0x1
c0018565:	68 f8 b4 02 c0       	push   0xc002b4f8
c001856a:	e8 c5 50 00 00       	call   c001d634 <Thr::loadDLL(char const*, bool)>
c001856f:	83 c4 10             	add    esp,0x10
c0018572:	83 ec 08             	sub    esp,0x8
c0018575:	53                   	push   ebx
c0018576:	50                   	push   eax
c0018577:	e8 ec 52 00 00       	call   c001d868 <Thr::executeDLL(unsigned long, void*)>
c001857c:	83 c4 10             	add    esp,0x10
c001857f:	8b 1d 68 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e468
c0018585:	83 ec 08             	sub    esp,0x8
c0018588:	6a 01                	push   0x1
c001858a:	68 15 b5 02 c0       	push   0xc002b515
c001858f:	e8 a0 50 00 00       	call   c001d634 <Thr::loadDLL(char const*, bool)>
c0018594:	83 c4 10             	add    esp,0x10
c0018597:	83 ec 08             	sub    esp,0x8
c001859a:	53                   	push   ebx
c001859b:	50                   	push   eax
c001859c:	e8 c7 52 00 00       	call   c001d868 <Thr::executeDLL(unsigned long, void*)>
c00185a1:	83 c4 10             	add    esp,0x10
c00185a4:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c00185a9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00185af:	83 e0 04             	and    eax,0x4
c00185b2:	84 c0                	test   al,al
c00185b4:	0f 84 d2 00 00 00    	je     c001868c <ACPI::open(int, int, void*)+0x348>
c00185ba:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00185c1:	83 ec 0c             	sub    esp,0xc
c00185c4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00185c8:	e8 7e 72 ff ff       	call   c000f84b <malloc>
c00185cd:	83 c4 10             	add    esp,0x10
c00185d0:	89 c3                	mov    ebx,eax
c00185d2:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c00185d7:	83 ec 04             	sub    esp,0x4
c00185da:	50                   	push   eax
c00185db:	68 32 b5 02 c0       	push   0xc002b532
c00185e0:	53                   	push   ebx
c00185e1:	e8 3c ad ff ff       	call   c0013322 <File::File(char const*, Process*)>
c00185e6:	83 c4 10             	add    esp,0x10
c00185e9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00185ed:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00185f2:	74 17                	je     c001860b <ACPI::open(int, int, void*)+0x2c7>
c00185f4:	83 ec 0c             	sub    esp,0xc
c00185f7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00185fb:	e8 f4 af ff ff       	call   c00135f4 <File::exists()>
c0018600:	83 c4 10             	add    esp,0x10
c0018603:	84 c0                	test   al,al
c0018605:	74 04                	je     c001860b <ACPI::open(int, int, void*)+0x2c7>
c0018607:	b0 01                	mov    al,0x1
c0018609:	eb 02                	jmp    c001860d <ACPI::open(int, int, void*)+0x2c9>
c001860b:	b0 00                	mov    al,0x0
c001860d:	84 c0                	test   al,al
c001860f:	74 22                	je     c0018633 <ACPI::open(int, int, void*)+0x2ef>
c0018611:	83 ec 08             	sub    esp,0x8
c0018614:	6a 01                	push   0x1
c0018616:	68 32 b5 02 c0       	push   0xc002b532
c001861b:	e8 14 50 00 00       	call   c001d634 <Thr::loadDLL(char const*, bool)>
c0018620:	83 c4 10             	add    esp,0x10
c0018623:	83 ec 08             	sub    esp,0x8
c0018626:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001862a:	50                   	push   eax
c001862b:	e8 38 52 00 00       	call   c001d868 <Thr::executeDLL(unsigned long, void*)>
c0018630:	83 c4 10             	add    esp,0x10
c0018633:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018638:	74 1e                	je     c0018658 <ACPI::open(int, int, void*)+0x314>
c001863a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001863f:	74 17                	je     c0018658 <ACPI::open(int, int, void*)+0x314>
c0018641:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018645:	8b 00                	mov    eax,DWORD PTR [eax]
c0018647:	83 c0 08             	add    eax,0x8
c001864a:	8b 00                	mov    eax,DWORD PTR [eax]
c001864c:	83 ec 0c             	sub    esp,0xc
c001864f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018653:	ff d0                	call   eax
c0018655:	83 c4 10             	add    esp,0x10
c0018658:	a1 48 0d 03 c0       	mov    eax,ds:0xc0030d48
c001865d:	83 ec 08             	sub    esp,0x8
c0018660:	68 4f b5 02 c0       	push   0xc002b54f
c0018665:	50                   	push   eax
c0018666:	e8 57 f5 ff ff       	call   c0017bc2 <findDataTable(unsigned char*, char*)>
c001866b:	83 c4 10             	add    esp,0x10
c001866e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018672:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018677:	74 13                	je     c001868c <ACPI::open(int, int, void*)+0x348>
c0018679:	83 ec 08             	sub    esp,0x8
c001867c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018680:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018684:	e8 73 fc ff ff       	call   c00182fc <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0018689:	83 c4 10             	add    esp,0x10
c001868c:	b8 00 00 00 00       	mov    eax,0x0
c0018691:	83 c4 28             	add    esp,0x28
c0018694:	5b                   	pop    ebx
c0018695:	c3                   	ret    

c0018696 <ACPI::sleep()>:
c0018696:	83 ec 0c             	sub    esp,0xc
c0018699:	a1 20 0b 03 c0       	mov    eax,ds:0xc0030b20
c001869e:	85 c0                	test   eax,eax
c00186a0:	74 07                	je     c00186a9 <ACPI::sleep()+0x13>
c00186a2:	a1 20 0b 03 c0       	mov    eax,ds:0xc0030b20
c00186a7:	ff d0                	call   eax
c00186a9:	90                   	nop
c00186aa:	83 c4 0c             	add    esp,0xc
c00186ad:	c3                   	ret    

c00186ae <CPU::close(int, int, void*)>:
c00186ae:	31 c0                	xor    eax,eax
c00186b0:	c3                   	ret    
c00186b1:	90                   	nop

c00186b2 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00186b2:	55                   	push   ebp
c00186b3:	57                   	push   edi
c00186b4:	56                   	push   esi
c00186b5:	53                   	push   ebx
c00186b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00186ba:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00186be:	89 ce                	mov    esi,ecx
c00186c0:	89 d5                	mov    ebp,edx
c00186c2:	80 f9 04             	cmp    cl,0x4
c00186c5:	75 28                	jne    c00186ef <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00186c7:	8d 42 f9             	lea    eax,[edx-0x7]
c00186ca:	3c 03                	cmp    al,0x3
c00186cc:	0f 86 63 01 00 00    	jbe    c0018835 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00186d2:	80 fa 03             	cmp    dl,0x3
c00186d5:	0f 84 5a 01 00 00    	je     c0018835 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00186db:	8d 7a f2             	lea    edi,[edx-0xe]
c00186de:	b8 90 d8 02 c0       	mov    eax,0xc002d890
c00186e3:	89 fb                	mov    ebx,edi
c00186e5:	80 fb 01             	cmp    bl,0x1
c00186e8:	77 4e                	ja     c0018738 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00186ea:	e9 52 01 00 00       	jmp    c0018841 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00186ef:	80 f9 05             	cmp    cl,0x5
c00186f2:	75 4d                	jne    c0018741 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00186f4:	b8 a0 d8 02 c0       	mov    eax,0xc002d8a0
c00186f9:	80 fa 03             	cmp    dl,0x3
c00186fc:	0f 86 3f 01 00 00    	jbe    c0018841 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018702:	8d 7a fa             	lea    edi,[edx-0x6]
c0018705:	b8 b0 d8 02 c0       	mov    eax,0xc002d8b0
c001870a:	89 fb                	mov    ebx,edi
c001870c:	80 fb 01             	cmp    bl,0x1
c001870f:	0f 86 2c 01 00 00    	jbe    c0018841 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018715:	b8 c0 d8 02 c0       	mov    eax,0xc002d8c0
c001871a:	80 fa 08             	cmp    dl,0x8
c001871d:	0f 84 1e 01 00 00    	je     c0018841 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018723:	89 d7                	mov    edi,edx
c0018725:	b8 d0 d8 02 c0       	mov    eax,0xc002d8d0
c001872a:	83 e7 fb             	and    edi,0xfffffffb
c001872d:	89 fb                	mov    ebx,edi
c001872f:	80 fb 09             	cmp    bl,0x9
c0018732:	0f 84 09 01 00 00    	je     c0018841 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018738:	31 c0                	xor    eax,eax
c001873a:	89 eb                	mov    ebx,ebp
c001873c:	0f b6 fb             	movzx  edi,bl
c001873f:	eb 30                	jmp    c0018771 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018741:	31 c0                	xor    eax,eax
c0018743:	80 f9 06             	cmp    cl,0x6
c0018746:	75 f2                	jne    c001873a <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018748:	80 fa 0a             	cmp    dl,0xa
c001874b:	77 ed                	ja     c001873a <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001874d:	bf de 05 00 00       	mov    edi,0x5de
c0018752:	0f a3 d7             	bt     edi,edx
c0018755:	73 e3                	jae    c001873a <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018757:	b8 e0 d8 02 c0       	mov    eax,0xc002d8e0
c001875c:	e9 e0 00 00 00       	jmp    c0018841 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018761:	39 c7                	cmp    edi,eax
c0018763:	0f 84 d3 00 00 00    	je     c001883c <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018769:	40                   	inc    eax
c001876a:	3d d0 00 00 00       	cmp    eax,0xd0
c001876f:	74 09                	je     c001877a <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018771:	89 f3                	mov    ebx,esi
c0018773:	80 fb 0f             	cmp    bl,0xf
c0018776:	75 f1                	jne    c0018769 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018778:	eb e7                	jmp    c0018761 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c001877a:	80 f9 10             	cmp    cl,0x10
c001877d:	75 14                	jne    c0018793 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c001877f:	8d 42 fc             	lea    eax,[edx-0x4]
c0018782:	83 e0 fb             	and    eax,0xfffffffb
c0018785:	3c 02                	cmp    al,0x2
c0018787:	76 34                	jbe    c00187bd <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018789:	b8 32 b9 02 c0       	mov    eax,0xc002b932
c001878e:	80 fa 02             	cmp    dl,0x2
c0018791:	eb 24                	jmp    c00187b7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018793:	80 f9 11             	cmp    cl,0x11
c0018796:	75 13                	jne    c00187ab <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018798:	b8 32 b9 02 c0       	mov    eax,0xc002b932
c001879d:	80 fa 03             	cmp    dl,0x3
c00187a0:	0f 85 9b 00 00 00    	jne    c0018841 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187a6:	e9 91 00 00 00       	jmp    c001883c <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00187ab:	80 f9 12             	cmp    cl,0x12
c00187ae:	75 14                	jne    c00187c4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c00187b0:	b8 32 b9 02 c0       	mov    eax,0xc002b932
c00187b5:	fe ca                	dec    dl
c00187b7:	0f 85 84 00 00 00    	jne    c0018841 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187bd:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c00187c2:	eb 7d                	jmp    c0018841 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187c4:	80 f9 14             	cmp    cl,0x14
c00187c7:	75 12                	jne    c00187db <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00187c9:	4a                   	dec    edx
c00187ca:	b8 32 b9 02 c0       	mov    eax,0xc002b932
c00187cf:	80 fa 01             	cmp    dl,0x1
c00187d2:	77 6d                	ja     c0018841 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187d4:	b8 10 d9 02 c0       	mov    eax,0xc002d910
c00187d9:	eb 66                	jmp    c0018841 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187db:	80 f9 15             	cmp    cl,0x15
c00187de:	75 31                	jne    c0018811 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c00187e0:	b8 20 d9 02 c0       	mov    eax,0xc002d920
c00187e5:	80 fa 01             	cmp    dl,0x1
c00187e8:	74 57                	je     c0018841 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187ea:	b8 32 b9 02 c0       	mov    eax,0xc002b932
c00187ef:	80 fa 13             	cmp    dl,0x13
c00187f2:	76 0c                	jbe    c0018800 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00187f4:	80 fa 30             	cmp    dl,0x30
c00187f7:	75 48                	jne    c0018841 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187f9:	b8 40 d9 02 c0       	mov    eax,0xc002d940
c00187fe:	eb 41                	jmp    c0018841 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018800:	b9 04 00 09 00       	mov    ecx,0x90004
c0018805:	0f a3 d1             	bt     ecx,edx
c0018808:	73 37                	jae    c0018841 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001880a:	b8 30 d9 02 c0       	mov    eax,0xc002d930
c001880f:	eb 30                	jmp    c0018841 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018811:	b8 32 b9 02 c0       	mov    eax,0xc002b932
c0018816:	80 f9 16             	cmp    cl,0x16
c0018819:	75 26                	jne    c0018841 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001881b:	b8 50 d9 02 c0       	mov    eax,0xc002d950
c0018820:	84 d2                	test   dl,dl
c0018822:	74 1d                	je     c0018841 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018824:	b8 32 b9 02 c0       	mov    eax,0xc002b932
c0018829:	80 fa 30             	cmp    dl,0x30
c001882c:	75 13                	jne    c0018841 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001882e:	b8 60 d9 02 c0       	mov    eax,0xc002d960
c0018833:	eb 0c                	jmp    c0018841 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018835:	b8 80 d8 02 c0       	mov    eax,0xc002d880
c001883a:	eb 05                	jmp    c0018841 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001883c:	b8 f0 d8 02 c0       	mov    eax,0xc002d8f0
c0018841:	5b                   	pop    ebx
c0018842:	5e                   	pop    esi
c0018843:	5f                   	pop    edi
c0018844:	5d                   	pop    ebp
c0018845:	c3                   	ret    

c0018846 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018846:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001884a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001884e:	80 f9 04             	cmp    cl,0x4
c0018851:	75 6b                	jne    c00188be <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018853:	b8 e0 d6 02 c0       	mov    eax,0xc002d6e0
c0018858:	80 fa 01             	cmp    dl,0x1
c001885b:	0f 86 92 02 00 00    	jbe    c0018af3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018861:	b8 f0 d6 02 c0       	mov    eax,0xc002d6f0
c0018866:	80 fa 02             	cmp    dl,0x2
c0018869:	0f 84 84 02 00 00    	je     c0018af3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001886f:	b8 00 d7 02 c0       	mov    eax,0xc002d700
c0018874:	80 fa 03             	cmp    dl,0x3
c0018877:	0f 84 76 02 00 00    	je     c0018af3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001887d:	b8 10 d7 02 c0       	mov    eax,0xc002d710
c0018882:	80 fa 04             	cmp    dl,0x4
c0018885:	0f 84 68 02 00 00    	je     c0018af3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001888b:	b8 20 d7 02 c0       	mov    eax,0xc002d720
c0018890:	80 fa 05             	cmp    dl,0x5
c0018893:	0f 84 5a 02 00 00    	je     c0018af3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018899:	b8 00 d7 02 c0       	mov    eax,0xc002d700
c001889e:	80 fa 07             	cmp    dl,0x7
c00188a1:	0f 84 4c 02 00 00    	je     c0018af3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188a7:	83 ea 08             	sub    edx,0x8
c00188aa:	b8 32 b9 02 c0       	mov    eax,0xc002b932
c00188af:	80 fa 01             	cmp    dl,0x1
c00188b2:	0f 87 3b 02 00 00    	ja     c0018af3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188b8:	b8 30 d7 02 c0       	mov    eax,0xc002d730
c00188bd:	c3                   	ret    
c00188be:	80 f9 05             	cmp    cl,0x5
c00188c1:	75 45                	jne    c0018908 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00188c3:	8d 4a ff             	lea    ecx,[edx-0x1]
c00188c6:	b8 40 d7 02 c0       	mov    eax,0xc002d740
c00188cb:	80 f9 02             	cmp    cl,0x2
c00188ce:	0f 86 1f 02 00 00    	jbe    c0018af3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188d4:	80 fa 04             	cmp    dl,0x4
c00188d7:	0f 84 f3 01 00 00    	je     c0018ad0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00188dd:	80 fa 07             	cmp    dl,0x7
c00188e0:	0f 84 0d 02 00 00    	je     c0018af3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188e6:	b8 50 d7 02 c0       	mov    eax,0xc002d750
c00188eb:	80 fa 08             	cmp    dl,0x8
c00188ee:	0f 84 ff 01 00 00    	je     c0018af3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188f4:	b8 32 b9 02 c0       	mov    eax,0xc002b932
c00188f9:	80 fa 09             	cmp    dl,0x9
c00188fc:	0f 85 f1 01 00 00    	jne    c0018af3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018902:	b8 60 d7 02 c0       	mov    eax,0xc002d760
c0018907:	c3                   	ret    
c0018908:	80 f9 06             	cmp    cl,0x6
c001890b:	0f 85 85 01 00 00    	jne    c0018a96 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018911:	b8 70 d7 02 c0       	mov    eax,0xc002d770
c0018916:	80 fa 01             	cmp    dl,0x1
c0018919:	0f 84 d4 01 00 00    	je     c0018af3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001891f:	8d 42 fb             	lea    eax,[edx-0x5]
c0018922:	3c 01                	cmp    al,0x1
c0018924:	0f 86 ac 01 00 00    	jbe    c0018ad6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c001892a:	80 fa 03             	cmp    dl,0x3
c001892d:	0f 84 a3 01 00 00    	je     c0018ad6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018933:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018936:	b8 90 d7 02 c0       	mov    eax,0xc002d790
c001893b:	80 f9 01             	cmp    cl,0x1
c001893e:	0f 86 af 01 00 00    	jbe    c0018af3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018944:	80 fa 09             	cmp    dl,0x9
c0018947:	0f 84 8f 01 00 00    	je     c0018adc <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c001894d:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018950:	80 f9 01             	cmp    cl,0x1
c0018953:	0f 86 9a 01 00 00    	jbe    c0018af3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018959:	b8 a0 d7 02 c0       	mov    eax,0xc002d7a0
c001895e:	80 fa 0d             	cmp    dl,0xd
c0018961:	0f 84 8c 01 00 00    	je     c0018af3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018967:	b8 b0 d7 02 c0       	mov    eax,0xc002d7b0
c001896c:	80 fa 0e             	cmp    dl,0xe
c001896f:	0f 84 7e 01 00 00    	je     c0018af3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018975:	b8 c0 d7 02 c0       	mov    eax,0xc002d7c0
c001897a:	80 fa 0f             	cmp    dl,0xf
c001897d:	0f 84 70 01 00 00    	je     c0018af3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018983:	b8 a0 d7 02 c0       	mov    eax,0xc002d7a0
c0018988:	80 fa 15             	cmp    dl,0x15
c001898b:	0f 84 62 01 00 00    	je     c0018af3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018991:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018994:	b8 c0 d7 02 c0       	mov    eax,0xc002d7c0
c0018999:	80 f9 01             	cmp    cl,0x1
c001899c:	0f 86 51 01 00 00    	jbe    c0018af3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189a2:	80 fa 1a             	cmp    dl,0x1a
c00189a5:	0f 84 37 01 00 00    	je     c0018ae2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c00189ab:	80 fa 1c             	cmp    dl,0x1c
c00189ae:	0f 84 34 01 00 00    	je     c0018ae8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c00189b4:	80 fa 1d             	cmp    dl,0x1d
c00189b7:	0f 84 36 01 00 00    	je     c0018af3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189bd:	b8 f0 d7 02 c0       	mov    eax,0xc002d7f0
c00189c2:	80 fa 25             	cmp    dl,0x25
c00189c5:	0f 84 28 01 00 00    	je     c0018af3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189cb:	8d 4a da             	lea    ecx,[edx-0x26]
c00189ce:	b8 e0 d7 02 c0       	mov    eax,0xc002d7e0
c00189d3:	80 f9 01             	cmp    cl,0x1
c00189d6:	0f 86 17 01 00 00    	jbe    c0018af3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189dc:	b8 00 d8 02 c0       	mov    eax,0xc002d800
c00189e1:	80 fa 2a             	cmp    dl,0x2a
c00189e4:	0f 84 09 01 00 00    	je     c0018af3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189ea:	b8 f0 d7 02 c0       	mov    eax,0xc002d7f0
c00189ef:	80 fa 2c             	cmp    dl,0x2c
c00189f2:	0f 84 fb 00 00 00    	je     c0018af3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189f8:	b8 00 d8 02 c0       	mov    eax,0xc002d800
c00189fd:	80 fa 2d             	cmp    dl,0x2d
c0018a00:	0f 84 ed 00 00 00    	je     c0018af3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a06:	b8 d0 d7 02 c0       	mov    eax,0xc002d7d0
c0018a0b:	80 fa 2e             	cmp    dl,0x2e
c0018a0e:	0f 84 df 00 00 00    	je     c0018af3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a14:	b8 f0 d7 02 c0       	mov    eax,0xc002d7f0
c0018a19:	80 fa 2f             	cmp    dl,0x2f
c0018a1c:	0f 84 d1 00 00 00    	je     c0018af3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a22:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018a25:	b8 e0 d7 02 c0       	mov    eax,0xc002d7e0
c0018a2a:	80 f9 01             	cmp    cl,0x1
c0018a2d:	0f 86 c0 00 00 00    	jbe    c0018af3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a33:	b8 10 d8 02 c0       	mov    eax,0xc002d810
c0018a38:	80 fa 37             	cmp    dl,0x37
c0018a3b:	0f 84 b2 00 00 00    	je     c0018af3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a41:	b8 20 d8 02 c0       	mov    eax,0xc002d820
c0018a46:	80 fa 3a             	cmp    dl,0x3a
c0018a49:	0f 84 a4 00 00 00    	je     c0018af3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a4f:	b8 30 d8 02 c0       	mov    eax,0xc002d830
c0018a54:	80 fa 3c             	cmp    dl,0x3c
c0018a57:	0f 84 96 00 00 00    	je     c0018af3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a5d:	b8 40 d8 02 c0       	mov    eax,0xc002d840
c0018a62:	80 fa 3d             	cmp    dl,0x3d
c0018a65:	0f 84 88 00 00 00    	je     c0018af3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a6b:	b8 20 d8 02 c0       	mov    eax,0xc002d820
c0018a70:	80 fa 3e             	cmp    dl,0x3e
c0018a73:	74 7e                	je     c0018af3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a75:	8d 42 bb             	lea    eax,[edx-0x45]
c0018a78:	3c 01                	cmp    al,0x1
c0018a7a:	76 72                	jbe    c0018aee <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018a7c:	80 fa 3f             	cmp    dl,0x3f
c0018a7f:	74 6d                	je     c0018aee <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018a81:	80 fa 4a             	cmp    dl,0x4a
c0018a84:	74 0a                	je     c0018a90 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018a86:	b8 32 b9 02 c0       	mov    eax,0xc002b932
c0018a8b:	80 fa 4d             	cmp    dl,0x4d
c0018a8e:	75 63                	jne    c0018af3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a90:	b8 10 d8 02 c0       	mov    eax,0xc002d810
c0018a95:	c3                   	ret    
c0018a96:	b8 32 b9 02 c0       	mov    eax,0xc002b932
c0018a9b:	80 f9 0b             	cmp    cl,0xb
c0018a9e:	75 0a                	jne    c0018aaa <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018aa0:	fe ca                	dec    dl
c0018aa2:	75 4f                	jne    c0018af3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018aa4:	b8 50 d8 02 c0       	mov    eax,0xc002d850
c0018aa9:	c3                   	ret    
c0018aaa:	80 f9 0f             	cmp    cl,0xf
c0018aad:	75 44                	jne    c0018af3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018aaf:	b8 60 d8 02 c0       	mov    eax,0xc002d860
c0018ab4:	80 fa 02             	cmp    dl,0x2
c0018ab7:	76 3a                	jbe    c0018af3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ab9:	8d 42 fd             	lea    eax,[edx-0x3]
c0018abc:	3c 01                	cmp    al,0x1
c0018abe:	76 0a                	jbe    c0018aca <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018ac0:	b8 32 b9 02 c0       	mov    eax,0xc002b932
c0018ac5:	80 fa 06             	cmp    dl,0x6
c0018ac8:	75 29                	jne    c0018af3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018aca:	b8 70 d8 02 c0       	mov    eax,0xc002d870
c0018acf:	c3                   	ret    
c0018ad0:	b8 50 d7 02 c0       	mov    eax,0xc002d750
c0018ad5:	c3                   	ret    
c0018ad6:	b8 80 d7 02 c0       	mov    eax,0xc002d780
c0018adb:	c3                   	ret    
c0018adc:	b8 a0 d7 02 c0       	mov    eax,0xc002d7a0
c0018ae1:	c3                   	ret    
c0018ae2:	b8 d0 d7 02 c0       	mov    eax,0xc002d7d0
c0018ae7:	c3                   	ret    
c0018ae8:	b8 e0 d7 02 c0       	mov    eax,0xc002d7e0
c0018aed:	c3                   	ret    
c0018aee:	b8 30 d8 02 c0       	mov    eax,0xc002d830
c0018af3:	c3                   	ret    

c0018af4 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018af4:	60                   	pusha  
c0018af5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018af9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018afd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018b01:	9c                   	pushf  
c0018b02:	fa                   	cli    
c0018b03:	0f 09                	wbinvd 
c0018b05:	0f 30                	wrmsr  
c0018b07:	9d                   	popf   
c0018b08:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018b0c:	89 02                	mov    DWORD PTR [edx],eax
c0018b0e:	61                   	popa   
c0018b0f:	c3                   	ret    

c0018b10 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018b10:	60                   	pusha  
c0018b11:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018b15:	9c                   	pushf  
c0018b16:	fa                   	cli    
c0018b17:	0f 09                	wbinvd 
c0018b19:	31 c0                	xor    eax,eax
c0018b1b:	31 d2                	xor    edx,edx
c0018b1d:	0f 32                	rdmsr  
c0018b1f:	9d                   	popf   
c0018b20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018b24:	89 02                	mov    DWORD PTR [edx],eax
c0018b26:	61                   	popa   
c0018b27:	c3                   	ret    

c0018b28 <CPU::AMD_K6_writeback(int, int, int)>:
c0018b28:	56                   	push   esi
c0018b29:	53                   	push   ebx
c0018b2a:	83 ec 10             	sub    esp,0x10
c0018b2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018b31:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018b36:	75 5d                	jne    c0018b95 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018b38:	83 f8 08             	cmp    eax,0x8
c0018b3b:	75 09                	jne    c0018b46 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018b3d:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018b42:	7e 13                	jle    c0018b57 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018b44:	eb 30                	jmp    c0018b76 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018b46:	83 f8 06             	cmp    eax,0x6
c0018b49:	7c 4a                	jl     c0018b95 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018b4b:	83 f8 07             	cmp    eax,0x7
c0018b4e:	7e 07                	jle    c0018b57 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018b50:	83 f8 09             	cmp    eax,0x9
c0018b53:	74 21                	je     c0018b76 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018b55:	eb 3e                	jmp    c0018b95 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018b57:	89 e6                	mov    esi,esp
c0018b59:	8b 1d a8 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e4a8
c0018b5f:	56                   	push   esi
c0018b60:	c1 eb 15             	shr    ebx,0x15
c0018b63:	68 82 00 00 c0       	push   0xc0000082
c0018b68:	83 e3 7e             	and    ebx,0x7e
c0018b6b:	e8 a0 ff ff ff       	call   c0018b10 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018b70:	56                   	push   esi
c0018b71:	6a 00                	push   0x0
c0018b73:	53                   	push   ebx
c0018b74:	eb 12                	jmp    c0018b88 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018b76:	89 e3                	mov    ebx,esp
c0018b78:	53                   	push   ebx
c0018b79:	68 82 00 00 c0       	push   0xc0000082
c0018b7e:	e8 8d ff ff ff       	call   c0018b10 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018b83:	53                   	push   ebx
c0018b84:	6a 00                	push   0x0
c0018b86:	6a 00                	push   0x0
c0018b88:	68 82 00 00 c0       	push   0xc0000082
c0018b8d:	e8 62 ff ff ff       	call   c0018af4 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018b92:	83 c4 18             	add    esp,0x18
c0018b95:	83 c4 10             	add    esp,0x10
c0018b98:	5b                   	pop    ebx
c0018b99:	5e                   	pop    esi
c0018b9a:	c3                   	ret    
c0018b9b:	90                   	nop

c0018b9c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018b9c:	55                   	push   ebp
c0018b9d:	57                   	push   edi
c0018b9e:	56                   	push   esi
c0018b9f:	53                   	push   ebx
c0018ba0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018ba4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018ba8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018bac:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018bb0:	39 05 80 d9 02 c0    	cmp    DWORD PTR ds:0xc002d980,eax
c0018bb6:	75 23                	jne    c0018bdb <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018bb8:	a1 ac 0f 03 c0       	mov    eax,ds:0xc0030fac
c0018bbd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018bc1:	89 06                	mov    DWORD PTR [esi],eax
c0018bc3:	a1 a8 0f 03 c0       	mov    eax,ds:0xc0030fa8
c0018bc8:	89 07                	mov    DWORD PTR [edi],eax
c0018bca:	a1 a4 0f 03 c0       	mov    eax,ds:0xc0030fa4
c0018bcf:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018bd2:	a1 a0 0f 03 c0       	mov    eax,ds:0xc0030fa0
c0018bd7:	89 02                	mov    DWORD PTR [edx],eax
c0018bd9:	eb 3f                	jmp    c0018c1a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018bdb:	31 c9                	xor    ecx,ecx
c0018bdd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018be1:	0f a2                	cpuid  
c0018be3:	89 06                	mov    DWORD PTR [esi],eax
c0018be5:	89 1f                	mov    DWORD PTR [edi],ebx
c0018be7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018beb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018bee:	89 10                	mov    DWORD PTR [eax],edx
c0018bf0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018bf4:	a3 80 d9 02 c0       	mov    ds:0xc002d980,eax
c0018bf9:	8b 06                	mov    eax,DWORD PTR [esi]
c0018bfb:	a3 ac 0f 03 c0       	mov    ds:0xc0030fac,eax
c0018c00:	8b 07                	mov    eax,DWORD PTR [edi]
c0018c02:	a3 a8 0f 03 c0       	mov    ds:0xc0030fa8,eax
c0018c07:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018c0a:	a3 a4 0f 03 c0       	mov    ds:0xc0030fa4,eax
c0018c0f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018c13:	8b 00                	mov    eax,DWORD PTR [eax]
c0018c15:	a3 a0 0f 03 c0       	mov    ds:0xc0030fa0,eax
c0018c1a:	5b                   	pop    ebx
c0018c1b:	5e                   	pop    esi
c0018c1c:	5f                   	pop    edi
c0018c1d:	5d                   	pop    ebp
c0018c1e:	c3                   	ret    
c0018c1f:	90                   	nop

c0018c20 <CPU::cpuidCheckEDX(unsigned int)>:
c0018c20:	83 ec 10             	sub    esp,0x10
c0018c23:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c27:	50                   	push   eax
c0018c28:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c2c:	50                   	push   eax
c0018c2d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c31:	50                   	push   eax
c0018c32:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c36:	50                   	push   eax
c0018c37:	6a 01                	push   0x1
c0018c39:	e8 5e ff ff ff       	call   c0018b9c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018c3e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018c42:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018c46:	0f 95 c0             	setne  al
c0018c49:	83 c4 24             	add    esp,0x24
c0018c4c:	c3                   	ret    
c0018c4d:	90                   	nop

c0018c4e <CPU::cpuidCheckECX(unsigned int)>:
c0018c4e:	83 ec 10             	sub    esp,0x10
c0018c51:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c55:	50                   	push   eax
c0018c56:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c5a:	50                   	push   eax
c0018c5b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c5f:	50                   	push   eax
c0018c60:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c64:	50                   	push   eax
c0018c65:	6a 01                	push   0x1
c0018c67:	e8 30 ff ff ff       	call   c0018b9c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018c6c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018c70:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018c74:	0f 95 c0             	setne  al
c0018c77:	83 c4 24             	add    esp,0x24
c0018c7a:	c3                   	ret    
c0018c7b:	90                   	nop

c0018c7c <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018c7c:	83 ec 10             	sub    esp,0x10
c0018c7f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c83:	50                   	push   eax
c0018c84:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c88:	50                   	push   eax
c0018c89:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c8d:	50                   	push   eax
c0018c8e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c92:	50                   	push   eax
c0018c93:	6a 07                	push   0x7
c0018c95:	e8 02 ff ff ff       	call   c0018b9c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018c9a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018c9e:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018ca2:	0f 95 c0             	setne  al
c0018ca5:	83 c4 24             	add    esp,0x24
c0018ca8:	c3                   	ret    
c0018ca9:	90                   	nop

c0018caa <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018caa:	83 ec 10             	sub    esp,0x10
c0018cad:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cb1:	50                   	push   eax
c0018cb2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cb6:	50                   	push   eax
c0018cb7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cbb:	50                   	push   eax
c0018cbc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cc0:	50                   	push   eax
c0018cc1:	6a 07                	push   0x7
c0018cc3:	e8 d4 fe ff ff       	call   c0018b9c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018cc8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018ccc:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018cd0:	0f 95 c0             	setne  al
c0018cd3:	83 c4 24             	add    esp,0x24
c0018cd6:	c3                   	ret    
c0018cd7:	90                   	nop

c0018cd8 <CPU::CPU()>:
c0018cd8:	83 ec 0c             	sub    esp,0xc
c0018cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018cdf:	83 ec 08             	sub    esp,0x8
c0018ce2:	68 32 b9 02 c0       	push   0xc002b932
c0018ce7:	50                   	push   eax
c0018ce8:	e8 f3 b6 ff ff       	call   c00143e0 <Device::Device(char const*)>
c0018ced:	83 c4 10             	add    esp,0x10
c0018cf0:	ba 0c ba 02 c0       	mov    edx,0xc002ba0c
c0018cf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018cf9:	89 10                	mov    DWORD PTR [eax],edx
c0018cfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018cff:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018d09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d0d:	05 78 01 00 00       	add    eax,0x178
c0018d12:	83 ec 0c             	sub    esp,0xc
c0018d15:	50                   	push   eax
c0018d16:	e8 45 63 ff ff       	call   c000f060 <GDT::GDT()>
c0018d1b:	83 c4 10             	add    esp,0x10
c0018d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d22:	05 7c 09 00 00       	add    eax,0x97c
c0018d27:	83 ec 0c             	sub    esp,0xc
c0018d2a:	50                   	push   eax
c0018d2b:	e8 92 65 ff ff       	call   c000f2c2 <IDT::IDT()>
c0018d30:	83 c4 10             	add    esp,0x10
c0018d33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d37:	05 7c 11 00 00       	add    eax,0x117c
c0018d3c:	83 ec 0c             	sub    esp,0xc
c0018d3f:	50                   	push   eax
c0018d40:	e8 db 85 ff ff       	call   c0011320 <TSS::TSS()>
c0018d45:	83 c4 10             	add    esp,0x10
c0018d48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d4c:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018d53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d57:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018d61:	90                   	nop
c0018d62:	83 c4 0c             	add    esp,0xc
c0018d65:	c3                   	ret    

c0018d66 <CPU::displayFeatures()>:
c0018d66:	53                   	push   ebx
c0018d67:	83 ec 10             	sub    esp,0x10
c0018d6a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018d6e:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018d74:	68 40 b6 02 c0       	push   0xc002b640
c0018d79:	e8 45 a0 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0018d7e:	59                   	pop    ecx
c0018d7f:	58                   	pop    eax
c0018d80:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018d86:	50                   	push   eax
c0018d87:	68 51 b6 02 c0       	push   0xc002b651
c0018d8c:	e8 32 a0 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0018d91:	58                   	pop    eax
c0018d92:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018d98:	5a                   	pop    edx
c0018d99:	c1 e8 0e             	shr    eax,0xe
c0018d9c:	0f b6 c0             	movzx  eax,al
c0018d9f:	50                   	push   eax
c0018da0:	68 62 b6 02 c0       	push   0xc002b662
c0018da5:	e8 19 a0 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0018daa:	59                   	pop    ecx
c0018dab:	58                   	pop    eax
c0018dac:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018db2:	66 c1 e8 06          	shr    ax,0x6
c0018db6:	0f b6 c0             	movzx  eax,al
c0018db9:	50                   	push   eax
c0018dba:	68 73 b6 02 c0       	push   0xc002b673
c0018dbf:	e8 ff 9f ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0018dc4:	c7 04 24 20 bb 02 c0 	mov    DWORD PTR [esp],0xc002bb20
c0018dcb:	e8 f3 9f ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0018dd0:	83 c4 10             	add    esp,0x10
c0018dd3:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c0018dd8:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018ddf:	74 05                	je     c0018de6 <CPU::displayFeatures()+0x80>
c0018de1:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c0018de6:	52                   	push   edx
c0018de7:	52                   	push   edx
c0018de8:	50                   	push   eax
c0018de9:	68 84 b6 02 c0       	push   0xc002b684
c0018dee:	e8 d0 9f ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0018df3:	83 c4 10             	add    esp,0x10
c0018df6:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c0018dfb:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018e02:	78 05                	js     c0018e09 <CPU::displayFeatures()+0xa3>
c0018e04:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c0018e09:	51                   	push   ecx
c0018e0a:	51                   	push   ecx
c0018e0b:	50                   	push   eax
c0018e0c:	68 9b b6 02 c0       	push   0xc002b69b
c0018e11:	e8 ad 9f ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0018e16:	83 c4 10             	add    esp,0x10
c0018e19:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c0018e1e:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018e25:	75 05                	jne    c0018e2c <CPU::displayFeatures()+0xc6>
c0018e27:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c0018e2c:	52                   	push   edx
c0018e2d:	52                   	push   edx
c0018e2e:	50                   	push   eax
c0018e2f:	68 b2 b6 02 c0       	push   0xc002b6b2
c0018e34:	e8 8a 9f ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0018e39:	83 c4 10             	add    esp,0x10
c0018e3c:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c0018e41:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018e48:	75 05                	jne    c0018e4f <CPU::displayFeatures()+0xe9>
c0018e4a:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c0018e4f:	51                   	push   ecx
c0018e50:	51                   	push   ecx
c0018e51:	50                   	push   eax
c0018e52:	68 c9 b6 02 c0       	push   0xc002b6c9
c0018e57:	e8 67 9f ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0018e5c:	83 c4 10             	add    esp,0x10
c0018e5f:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c0018e64:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018e6b:	75 05                	jne    c0018e72 <CPU::displayFeatures()+0x10c>
c0018e6d:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c0018e72:	52                   	push   edx
c0018e73:	52                   	push   edx
c0018e74:	50                   	push   eax
c0018e75:	68 e0 b6 02 c0       	push   0xc002b6e0
c0018e7a:	e8 44 9f ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0018e7f:	83 c4 10             	add    esp,0x10
c0018e82:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c0018e87:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018e8e:	75 05                	jne    c0018e95 <CPU::displayFeatures()+0x12f>
c0018e90:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c0018e95:	51                   	push   ecx
c0018e96:	51                   	push   ecx
c0018e97:	50                   	push   eax
c0018e98:	68 f7 b6 02 c0       	push   0xc002b6f7
c0018e9d:	e8 21 9f ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0018ea2:	83 c4 10             	add    esp,0x10
c0018ea5:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c0018eaa:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018eb1:	75 05                	jne    c0018eb8 <CPU::displayFeatures()+0x152>
c0018eb3:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c0018eb8:	52                   	push   edx
c0018eb9:	52                   	push   edx
c0018eba:	50                   	push   eax
c0018ebb:	68 0e b7 02 c0       	push   0xc002b70e
c0018ec0:	e8 fe 9e ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0018ec5:	83 c4 10             	add    esp,0x10
c0018ec8:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c0018ecd:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018ed4:	75 05                	jne    c0018edb <CPU::displayFeatures()+0x175>
c0018ed6:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c0018edb:	51                   	push   ecx
c0018edc:	51                   	push   ecx
c0018edd:	50                   	push   eax
c0018ede:	68 25 b7 02 c0       	push   0xc002b725
c0018ee3:	e8 db 9e ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0018ee8:	83 c4 10             	add    esp,0x10
c0018eeb:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c0018ef0:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0018ef7:	75 05                	jne    c0018efe <CPU::displayFeatures()+0x198>
c0018ef9:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c0018efe:	52                   	push   edx
c0018eff:	52                   	push   edx
c0018f00:	50                   	push   eax
c0018f01:	68 3c b7 02 c0       	push   0xc002b73c
c0018f06:	e8 b8 9e ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0018f0b:	83 c4 10             	add    esp,0x10
c0018f0e:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c0018f13:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0018f1a:	75 05                	jne    c0018f21 <CPU::displayFeatures()+0x1bb>
c0018f1c:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c0018f21:	51                   	push   ecx
c0018f22:	51                   	push   ecx
c0018f23:	50                   	push   eax
c0018f24:	68 53 b7 02 c0       	push   0xc002b753
c0018f29:	e8 95 9e ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0018f2e:	83 c4 10             	add    esp,0x10
c0018f31:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c0018f36:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0018f3d:	75 05                	jne    c0018f44 <CPU::displayFeatures()+0x1de>
c0018f3f:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c0018f44:	52                   	push   edx
c0018f45:	52                   	push   edx
c0018f46:	50                   	push   eax
c0018f47:	68 6a b7 02 c0       	push   0xc002b76a
c0018f4c:	e8 72 9e ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0018f51:	83 c4 10             	add    esp,0x10
c0018f54:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c0018f59:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0018f60:	75 05                	jne    c0018f67 <CPU::displayFeatures()+0x201>
c0018f62:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c0018f67:	51                   	push   ecx
c0018f68:	51                   	push   ecx
c0018f69:	50                   	push   eax
c0018f6a:	68 81 b7 02 c0       	push   0xc002b781
c0018f6f:	e8 4f 9e ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0018f74:	83 c4 10             	add    esp,0x10
c0018f77:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c0018f7c:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0018f83:	75 05                	jne    c0018f8a <CPU::displayFeatures()+0x224>
c0018f85:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c0018f8a:	52                   	push   edx
c0018f8b:	52                   	push   edx
c0018f8c:	50                   	push   eax
c0018f8d:	68 98 b7 02 c0       	push   0xc002b798
c0018f92:	e8 2c 9e ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0018f97:	83 c4 10             	add    esp,0x10
c0018f9a:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c0018f9f:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0018fa6:	78 05                	js     c0018fad <CPU::displayFeatures()+0x247>
c0018fa8:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c0018fad:	51                   	push   ecx
c0018fae:	51                   	push   ecx
c0018faf:	50                   	push   eax
c0018fb0:	68 af b7 02 c0       	push   0xc002b7af
c0018fb5:	e8 09 9e ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0018fba:	83 c4 10             	add    esp,0x10
c0018fbd:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c0018fc2:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0018fc9:	75 05                	jne    c0018fd0 <CPU::displayFeatures()+0x26a>
c0018fcb:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c0018fd0:	52                   	push   edx
c0018fd1:	52                   	push   edx
c0018fd2:	50                   	push   eax
c0018fd3:	68 c6 b7 02 c0       	push   0xc002b7c6
c0018fd8:	e8 e6 9d ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0018fdd:	83 c4 18             	add    esp,0x18
c0018fe0:	5b                   	pop    ebx
c0018fe1:	c3                   	ret    

c0018fe2 <CPU::detectFeatures()>:
c0018fe2:	55                   	push   ebp
c0018fe3:	57                   	push   edi
c0018fe4:	56                   	push   esi
c0018fe5:	53                   	push   ebx
c0018fe6:	83 ec 50             	sub    esp,0x50
c0018fe9:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018fed:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018ff7:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018ffe:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0019004:	6a 0d                	push   0xd
c0019006:	6a 00                	push   0x0
c0019008:	57                   	push   edi
c0019009:	e8 72 77 fe ff       	call   c0000780 <memset>
c001900e:	83 c4 10             	add    esp,0x10
c0019011:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0019016:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c001901d:	0f 84 20 09 00 00    	je     c0019943 <CPU::detectFeatures()+0x961>
c0019023:	83 ec 0c             	sub    esp,0xc
c0019026:	6a 10                	push   0x10
c0019028:	e8 f3 fb ff ff       	call   c0018c20 <CPU::cpuidCheckEDX(unsigned int)>
c001902d:	83 e0 01             	and    eax,0x1
c0019030:	8d 14 00             	lea    edx,[eax+eax*1]
c0019033:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019039:	83 e0 fd             	and    eax,0xfffffffd
c001903c:	09 d0                	or     eax,edx
c001903e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019044:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001904b:	e8 d0 fb ff ff       	call   c0018c20 <CPU::cpuidCheckEDX(unsigned int)>
c0019050:	83 e0 01             	and    eax,0x1
c0019053:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001905a:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019060:	83 e0 fb             	and    eax,0xfffffffb
c0019063:	09 d0                	or     eax,edx
c0019065:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001906b:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0019072:	e8 a9 fb ff ff       	call   c0018c20 <CPU::cpuidCheckEDX(unsigned int)>
c0019077:	83 e0 01             	and    eax,0x1
c001907a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0019081:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019087:	83 e0 f7             	and    eax,0xfffffff7
c001908a:	09 d0                	or     eax,edx
c001908c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019092:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0019099:	e8 82 fb ff ff       	call   c0018c20 <CPU::cpuidCheckEDX(unsigned int)>
c001909e:	83 e0 01             	and    eax,0x1
c00190a1:	c1 e0 04             	shl    eax,0x4
c00190a4:	88 c2                	mov    dl,al
c00190a6:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00190ac:	83 e0 ef             	and    eax,0xffffffef
c00190af:	09 d0                	or     eax,edx
c00190b1:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00190b7:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00190be:	e8 5d fb ff ff       	call   c0018c20 <CPU::cpuidCheckEDX(unsigned int)>
c00190c3:	83 e0 01             	and    eax,0x1
c00190c6:	c1 e0 05             	shl    eax,0x5
c00190c9:	88 c2                	mov    dl,al
c00190cb:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00190d1:	83 e0 df             	and    eax,0xffffffdf
c00190d4:	09 d0                	or     eax,edx
c00190d6:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00190dc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00190e3:	e8 38 fb ff ff       	call   c0018c20 <CPU::cpuidCheckEDX(unsigned int)>
c00190e8:	83 e0 01             	and    eax,0x1
c00190eb:	8d 14 00             	lea    edx,[eax+eax*1]
c00190ee:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00190f4:	83 e0 fd             	and    eax,0xfffffffd
c00190f7:	09 d0                	or     eax,edx
c00190f9:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00190ff:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0019106:	e8 15 fb ff ff       	call   c0018c20 <CPU::cpuidCheckEDX(unsigned int)>
c001910b:	83 e0 01             	and    eax,0x1
c001910e:	c1 e0 06             	shl    eax,0x6
c0019111:	88 c2                	mov    dl,al
c0019113:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019119:	83 e0 bf             	and    eax,0xffffffbf
c001911c:	09 d0                	or     eax,edx
c001911e:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019124:	58                   	pop    eax
c0019125:	8d 74 24 28          	lea    esi,[esp+0x28]
c0019129:	56                   	push   esi
c001912a:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001912e:	55                   	push   ebp
c001912f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019133:	50                   	push   eax
c0019134:	8d 54 24 28          	lea    edx,[esp+0x28]
c0019138:	52                   	push   edx
c0019139:	6a 00                	push   0x0
c001913b:	e8 5c fa ff ff       	call   c0018b9c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019140:	83 c4 1c             	add    esp,0x1c
c0019143:	6a 04                	push   0x4
c0019145:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019149:	50                   	push   eax
c001914a:	57                   	push   edi
c001914b:	e8 fc 75 fe ff       	call   c000074c <memcpy>
c0019150:	83 c4 0c             	add    esp,0xc
c0019153:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0019159:	6a 04                	push   0x4
c001915b:	56                   	push   esi
c001915c:	50                   	push   eax
c001915d:	e8 ea 75 fe ff       	call   c000074c <memcpy>
c0019162:	83 c4 0c             	add    esp,0xc
c0019165:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c001916b:	6a 04                	push   0x4
c001916d:	55                   	push   ebp
c001916e:	50                   	push   eax
c001916f:	e8 d8 75 fe ff       	call   c000074c <memcpy>
c0019174:	58                   	pop    eax
c0019175:	5a                   	pop    edx
c0019176:	68 dd b7 02 c0       	push   0xc002b7dd
c001917b:	57                   	push   edi
c001917c:	e8 47 77 fe ff       	call   c00008c8 <strcmp>
c0019181:	83 c4 10             	add    esp,0x10
c0019184:	85 c0                	test   eax,eax
c0019186:	75 0f                	jne    c0019197 <CPU::detectFeatures()+0x1b5>
c0019188:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0019192:	e9 22 02 00 00       	jmp    c00193b9 <CPU::detectFeatures()+0x3d7>
c0019197:	50                   	push   eax
c0019198:	50                   	push   eax
c0019199:	68 ea b7 02 c0       	push   0xc002b7ea
c001919e:	57                   	push   edi
c001919f:	e8 24 77 fe ff       	call   c00008c8 <strcmp>
c00191a4:	83 c4 10             	add    esp,0x10
c00191a7:	85 c0                	test   eax,eax
c00191a9:	74 dd                	je     c0019188 <CPU::detectFeatures()+0x1a6>
c00191ab:	51                   	push   ecx
c00191ac:	51                   	push   ecx
c00191ad:	68 f7 b7 02 c0       	push   0xc002b7f7
c00191b2:	57                   	push   edi
c00191b3:	e8 10 77 fe ff       	call   c00008c8 <strcmp>
c00191b8:	83 c4 10             	add    esp,0x10
c00191bb:	85 c0                	test   eax,eax
c00191bd:	74 2a                	je     c00191e9 <CPU::detectFeatures()+0x207>
c00191bf:	52                   	push   edx
c00191c0:	52                   	push   edx
c00191c1:	68 04 b8 02 c0       	push   0xc002b804
c00191c6:	57                   	push   edi
c00191c7:	e8 fc 76 fe ff       	call   c00008c8 <strcmp>
c00191cc:	83 c4 10             	add    esp,0x10
c00191cf:	85 c0                	test   eax,eax
c00191d1:	74 16                	je     c00191e9 <CPU::detectFeatures()+0x207>
c00191d3:	50                   	push   eax
c00191d4:	50                   	push   eax
c00191d5:	68 11 b8 02 c0       	push   0xc002b811
c00191da:	57                   	push   edi
c00191db:	e8 e8 76 fe ff       	call   c00008c8 <strcmp>
c00191e0:	83 c4 10             	add    esp,0x10
c00191e3:	85 c0                	test   eax,eax
c00191e5:	74 48                	je     c001922f <CPU::detectFeatures()+0x24d>
c00191e7:	eb 0f                	jmp    c00191f8 <CPU::detectFeatures()+0x216>
c00191e9:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00191f3:	e9 c1 01 00 00       	jmp    c00193b9 <CPU::detectFeatures()+0x3d7>
c00191f8:	50                   	push   eax
c00191f9:	50                   	push   eax
c00191fa:	68 1e b8 02 c0       	push   0xc002b81e
c00191ff:	57                   	push   edi
c0019200:	e8 c3 76 fe ff       	call   c00008c8 <strcmp>
c0019205:	83 c4 10             	add    esp,0x10
c0019208:	85 c0                	test   eax,eax
c001920a:	74 23                	je     c001922f <CPU::detectFeatures()+0x24d>
c001920c:	50                   	push   eax
c001920d:	50                   	push   eax
c001920e:	68 2b b8 02 c0       	push   0xc002b82b
c0019213:	57                   	push   edi
c0019214:	e8 af 76 fe ff       	call   c00008c8 <strcmp>
c0019219:	83 c4 10             	add    esp,0x10
c001921c:	85 c0                	test   eax,eax
c001921e:	75 1e                	jne    c001923e <CPU::detectFeatures()+0x25c>
c0019220:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001922a:	e9 8a 01 00 00       	jmp    c00193b9 <CPU::detectFeatures()+0x3d7>
c001922f:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0019239:	e9 7b 01 00 00       	jmp    c00193b9 <CPU::detectFeatures()+0x3d7>
c001923e:	50                   	push   eax
c001923f:	50                   	push   eax
c0019240:	68 38 b8 02 c0       	push   0xc002b838
c0019245:	57                   	push   edi
c0019246:	e8 7d 76 fe ff       	call   c00008c8 <strcmp>
c001924b:	83 c4 10             	add    esp,0x10
c001924e:	85 c0                	test   eax,eax
c0019250:	75 0f                	jne    c0019261 <CPU::detectFeatures()+0x27f>
c0019252:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001925c:	e9 58 01 00 00       	jmp    c00193b9 <CPU::detectFeatures()+0x3d7>
c0019261:	50                   	push   eax
c0019262:	50                   	push   eax
c0019263:	68 f7 b7 02 c0       	push   0xc002b7f7
c0019268:	57                   	push   edi
c0019269:	e8 5a 76 fe ff       	call   c00008c8 <strcmp>
c001926e:	83 c4 10             	add    esp,0x10
c0019271:	85 c0                	test   eax,eax
c0019273:	75 0f                	jne    c0019284 <CPU::detectFeatures()+0x2a2>
c0019275:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001927f:	e9 35 01 00 00       	jmp    c00193b9 <CPU::detectFeatures()+0x3d7>
c0019284:	50                   	push   eax
c0019285:	50                   	push   eax
c0019286:	68 45 b8 02 c0       	push   0xc002b845
c001928b:	57                   	push   edi
c001928c:	e8 37 76 fe ff       	call   c00008c8 <strcmp>
c0019291:	83 c4 10             	add    esp,0x10
c0019294:	85 c0                	test   eax,eax
c0019296:	75 0f                	jne    c00192a7 <CPU::detectFeatures()+0x2c5>
c0019298:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00192a2:	e9 12 01 00 00       	jmp    c00193b9 <CPU::detectFeatures()+0x3d7>
c00192a7:	51                   	push   ecx
c00192a8:	51                   	push   ecx
c00192a9:	68 52 b8 02 c0       	push   0xc002b852
c00192ae:	57                   	push   edi
c00192af:	e8 14 76 fe ff       	call   c00008c8 <strcmp>
c00192b4:	83 c4 10             	add    esp,0x10
c00192b7:	85 c0                	test   eax,eax
c00192b9:	75 0f                	jne    c00192ca <CPU::detectFeatures()+0x2e8>
c00192bb:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00192c5:	e9 ef 00 00 00       	jmp    c00193b9 <CPU::detectFeatures()+0x3d7>
c00192ca:	52                   	push   edx
c00192cb:	52                   	push   edx
c00192cc:	68 5f b8 02 c0       	push   0xc002b85f
c00192d1:	57                   	push   edi
c00192d2:	e8 f1 75 fe ff       	call   c00008c8 <strcmp>
c00192d7:	83 c4 10             	add    esp,0x10
c00192da:	85 c0                	test   eax,eax
c00192dc:	75 0f                	jne    c00192ed <CPU::detectFeatures()+0x30b>
c00192de:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00192e8:	e9 cc 00 00 00       	jmp    c00193b9 <CPU::detectFeatures()+0x3d7>
c00192ed:	50                   	push   eax
c00192ee:	50                   	push   eax
c00192ef:	68 6c b8 02 c0       	push   0xc002b86c
c00192f4:	57                   	push   edi
c00192f5:	e8 ce 75 fe ff       	call   c00008c8 <strcmp>
c00192fa:	83 c4 10             	add    esp,0x10
c00192fd:	85 c0                	test   eax,eax
c00192ff:	75 0f                	jne    c0019310 <CPU::detectFeatures()+0x32e>
c0019301:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001930b:	e9 a9 00 00 00       	jmp    c00193b9 <CPU::detectFeatures()+0x3d7>
c0019310:	50                   	push   eax
c0019311:	50                   	push   eax
c0019312:	68 79 b8 02 c0       	push   0xc002b879
c0019317:	57                   	push   edi
c0019318:	e8 ab 75 fe ff       	call   c00008c8 <strcmp>
c001931d:	83 c4 10             	add    esp,0x10
c0019320:	85 c0                	test   eax,eax
c0019322:	75 0f                	jne    c0019333 <CPU::detectFeatures()+0x351>
c0019324:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001932e:	e9 86 00 00 00       	jmp    c00193b9 <CPU::detectFeatures()+0x3d7>
c0019333:	50                   	push   eax
c0019334:	50                   	push   eax
c0019335:	68 86 b8 02 c0       	push   0xc002b886
c001933a:	57                   	push   edi
c001933b:	e8 88 75 fe ff       	call   c00008c8 <strcmp>
c0019340:	83 c4 10             	add    esp,0x10
c0019343:	85 c0                	test   eax,eax
c0019345:	75 0c                	jne    c0019353 <CPU::detectFeatures()+0x371>
c0019347:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0019351:	eb 66                	jmp    c00193b9 <CPU::detectFeatures()+0x3d7>
c0019353:	50                   	push   eax
c0019354:	50                   	push   eax
c0019355:	68 93 b8 02 c0       	push   0xc002b893
c001935a:	57                   	push   edi
c001935b:	e8 68 75 fe ff       	call   c00008c8 <strcmp>
c0019360:	83 c4 10             	add    esp,0x10
c0019363:	85 c0                	test   eax,eax
c0019365:	75 0c                	jne    c0019373 <CPU::detectFeatures()+0x391>
c0019367:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0019371:	eb 46                	jmp    c00193b9 <CPU::detectFeatures()+0x3d7>
c0019373:	50                   	push   eax
c0019374:	50                   	push   eax
c0019375:	68 a0 b8 02 c0       	push   0xc002b8a0
c001937a:	57                   	push   edi
c001937b:	e8 48 75 fe ff       	call   c00008c8 <strcmp>
c0019380:	83 c4 10             	add    esp,0x10
c0019383:	85 c0                	test   eax,eax
c0019385:	74 e0                	je     c0019367 <CPU::detectFeatures()+0x385>
c0019387:	50                   	push   eax
c0019388:	50                   	push   eax
c0019389:	68 ad b8 02 c0       	push   0xc002b8ad
c001938e:	57                   	push   edi
c001938f:	e8 34 75 fe ff       	call   c00008c8 <strcmp>
c0019394:	83 c4 10             	add    esp,0x10
c0019397:	85 c0                	test   eax,eax
c0019399:	74 cc                	je     c0019367 <CPU::detectFeatures()+0x385>
c001939b:	51                   	push   ecx
c001939c:	51                   	push   ecx
c001939d:	68 ba b8 02 c0       	push   0xc002b8ba
c00193a2:	57                   	push   edi
c00193a3:	e8 20 75 fe ff       	call   c00008c8 <strcmp>
c00193a8:	83 c4 10             	add    esp,0x10
c00193ab:	85 c0                	test   eax,eax
c00193ad:	74 b8                	je     c0019367 <CPU::detectFeatures()+0x385>
c00193af:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00193b9:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00193be:	0f 86 be 00 00 00    	jbe    c0019482 <CPU::detectFeatures()+0x4a0>
c00193c4:	83 ec 0c             	sub    esp,0xc
c00193c7:	68 80 00 00 00       	push   0x80
c00193cc:	e8 ab f8 ff ff       	call   c0018c7c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00193d1:	83 e0 01             	and    eax,0x1
c00193d4:	c1 e0 06             	shl    eax,0x6
c00193d7:	88 c2                	mov    dl,al
c00193d9:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00193df:	83 e0 bf             	and    eax,0xffffffbf
c00193e2:	09 d0                	or     eax,edx
c00193e4:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00193ea:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00193f1:	e8 86 f8 ff ff       	call   c0018c7c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00193f6:	83 e0 01             	and    eax,0x1
c00193f9:	c1 e0 04             	shl    eax,0x4
c00193fc:	88 c2                	mov    dl,al
c00193fe:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019404:	83 e0 ef             	and    eax,0xffffffef
c0019407:	09 d0                	or     eax,edx
c0019409:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001940f:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0019416:	e8 61 f8 ff ff       	call   c0018c7c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001941b:	c1 e0 07             	shl    eax,0x7
c001941e:	88 c2                	mov    dl,al
c0019420:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019426:	83 e0 7f             	and    eax,0x7f
c0019429:	09 d0                	or     eax,edx
c001942b:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019431:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019438:	e8 6d f8 ff ff       	call   c0018caa <CPU::cpuidCheckExtendedECX(unsigned int)>
c001943d:	83 e0 01             	and    eax,0x1
c0019440:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0019447:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001944d:	83 e0 f7             	and    eax,0xfffffff7
c0019450:	09 d0                	or     eax,edx
c0019452:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019458:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001945f:	e8 46 f8 ff ff       	call   c0018caa <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019464:	83 c4 10             	add    esp,0x10
c0019467:	83 e0 01             	and    eax,0x1
c001946a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0019471:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019477:	83 e0 fb             	and    eax,0xfffffffb
c001947a:	09 d0                	or     eax,edx
c001947c:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019482:	83 ec 0c             	sub    esp,0xc
c0019485:	56                   	push   esi
c0019486:	55                   	push   ebp
c0019487:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001948b:	57                   	push   edi
c001948c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019490:	50                   	push   eax
c0019491:	6a 01                	push   0x1
c0019493:	e8 04 f7 ff ff       	call   c0018b9c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019498:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001949c:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00194a2:	88 ca                	mov    dl,cl
c00194a4:	83 e0 f0             	and    eax,0xfffffff0
c00194a7:	83 e2 0f             	and    edx,0xf
c00194aa:	09 d0                	or     eax,edx
c00194ac:	88 ca                	mov    dl,cl
c00194ae:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00194b4:	c0 ea 04             	shr    dl,0x4
c00194b7:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00194bb:	0f b6 c2             	movzx  eax,dl
c00194be:	83 c4 20             	add    esp,0x20
c00194c1:	c1 e0 06             	shl    eax,0x6
c00194c4:	89 c5                	mov    ebp,eax
c00194c6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00194cc:	66 25 3f c0          	and    ax,0xc03f
c00194d0:	09 e8                	or     eax,ebp
c00194d2:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00194d9:	89 c8                	mov    eax,ecx
c00194db:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00194e1:	c1 e8 08             	shr    eax,0x8
c00194e4:	83 e2 3f             	and    edx,0x3f
c00194e7:	83 e0 0f             	and    eax,0xf
c00194ea:	89 c5                	mov    ebp,eax
c00194ec:	c1 e5 06             	shl    ebp,0x6
c00194ef:	09 d5                	or     ebp,edx
c00194f1:	89 ea                	mov    edx,ebp
c00194f3:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00194f9:	88 c2                	mov    dl,al
c00194fb:	c0 ea 02             	shr    dl,0x2
c00194fe:	89 d5                	mov    ebp,edx
c0019500:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0019506:	83 e2 c0             	and    edx,0xffffffc0
c0019509:	09 d5                	or     ebp,edx
c001950b:	89 ea                	mov    edx,ebp
c001950d:	89 cd                	mov    ebp,ecx
c001950f:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0019515:	c1 ed 0c             	shr    ebp,0xc
c0019518:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c001951e:	83 e5 03             	and    ebp,0x3
c0019521:	83 e2 cf             	and    edx,0xffffffcf
c0019524:	c1 e5 04             	shl    ebp,0x4
c0019527:	09 d5                	or     ebp,edx
c0019529:	3c 06                	cmp    al,0x6
c001952b:	89 ea                	mov    edx,ebp
c001952d:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0019533:	74 04                	je     c0019539 <CPU::detectFeatures()+0x557>
c0019535:	3c 0f                	cmp    al,0xf
c0019537:	75 5c                	jne    c0019595 <CPU::detectFeatures()+0x5b3>
c0019539:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001953d:	89 cd                	mov    ebp,ecx
c001953f:	c1 ed 10             	shr    ebp,0x10
c0019542:	c1 e5 04             	shl    ebp,0x4
c0019545:	09 ea                	or     edx,ebp
c0019547:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c001954d:	0f b6 d2             	movzx  edx,dl
c0019550:	66 81 e5 3f c0       	and    bp,0xc03f
c0019555:	c1 e2 06             	shl    edx,0x6
c0019558:	09 ea                	or     edx,ebp
c001955a:	3c 0f                	cmp    al,0xf
c001955c:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0019563:	75 30                	jne    c0019595 <CPU::detectFeatures()+0x5b3>
c0019565:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c001956b:	c1 e9 14             	shr    ecx,0x14
c001956e:	83 e0 3f             	and    eax,0x3f
c0019571:	83 c1 0f             	add    ecx,0xf
c0019574:	88 ca                	mov    dl,cl
c0019576:	c0 e9 02             	shr    cl,0x2
c0019579:	c1 e2 06             	shl    edx,0x6
c001957c:	09 d0                	or     eax,edx
c001957e:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0019584:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c001958a:	83 e0 c0             	and    eax,0xffffffc0
c001958d:	09 c1                	or     ecx,eax
c001958f:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0019595:	83 ec 0c             	sub    esp,0xc
c0019598:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001959f:	56                   	push   esi
c00195a0:	8d 44 24 28          	lea    eax,[esp+0x28]
c00195a4:	50                   	push   eax
c00195a5:	57                   	push   edi
c00195a6:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00195aa:	55                   	push   ebp
c00195ab:	68 00 00 00 80       	push   0x80000000
c00195b0:	e8 e7 f5 ff ff       	call   c0018b9c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00195b5:	83 c4 20             	add    esp,0x20
c00195b8:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00195c0:	8d 44 24 18          	lea    eax,[esp+0x18]
c00195c4:	76 1e                	jbe    c00195e4 <CPU::detectFeatures()+0x602>
c00195c6:	83 ec 0c             	sub    esp,0xc
c00195c9:	56                   	push   esi
c00195ca:	50                   	push   eax
c00195cb:	57                   	push   edi
c00195cc:	55                   	push   ebp
c00195cd:	68 01 00 00 80       	push   0x80000001
c00195d2:	e8 c5 f5 ff ff       	call   c0018b9c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00195d7:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00195e1:	83 c4 20             	add    esp,0x20
c00195e4:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00195ea:	83 f8 01             	cmp    eax,0x1
c00195ed:	75 6f                	jne    c001965e <CPU::detectFeatures()+0x67c>
c00195ef:	51                   	push   ecx
c00195f0:	51                   	push   ecx
c00195f1:	68 c6 b8 02 c0       	push   0xc002b8c6
c00195f6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00195fa:	56                   	push   esi
c00195fb:	e8 3c 72 fe ff       	call   c000083c <strcpy>
c0019600:	5f                   	pop    edi
c0019601:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019607:	5d                   	pop    ebp
c0019608:	66 c1 e8 06          	shr    ax,0x6
c001960c:	0f b6 c0             	movzx  eax,al
c001960f:	50                   	push   eax
c0019610:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019616:	c1 e8 0e             	shr    eax,0xe
c0019619:	0f b6 c0             	movzx  eax,al
c001961c:	50                   	push   eax
c001961d:	e8 24 f2 ff ff       	call   c0018846 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0019622:	5a                   	pop    edx
c0019623:	59                   	pop    ecx
c0019624:	50                   	push   eax
c0019625:	56                   	push   esi
c0019626:	e8 51 73 fe ff       	call   c000097c <strcat>
c001962b:	5f                   	pop    edi
c001962c:	5d                   	pop    ebp
c001962d:	56                   	push   esi
c001962e:	53                   	push   ebx
c001962f:	e8 9e ad ff ff       	call   c00143d2 <Device::setName(char const*)>
c0019634:	58                   	pop    eax
c0019635:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001963b:	5a                   	pop    edx
c001963c:	68 cd b8 02 c0       	push   0xc002b8cd
c0019641:	50                   	push   eax
c0019642:	e8 81 72 fe ff       	call   c00008c8 <strcmp>
c0019647:	83 c4 10             	add    esp,0x10
c001964a:	85 c0                	test   eax,eax
c001964c:	0f 85 71 03 00 00    	jne    c00199c3 <CPU::detectFeatures()+0x9e1>
c0019652:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0019659:	e9 65 03 00 00       	jmp    c00199c3 <CPU::detectFeatures()+0x9e1>
c001965e:	83 f8 02             	cmp    eax,0x2
c0019661:	0f 85 b5 00 00 00    	jne    c001971c <CPU::detectFeatures()+0x73a>
c0019667:	57                   	push   edi
c0019668:	57                   	push   edi
c0019669:	68 df b8 02 c0       	push   0xc002b8df
c001966e:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019672:	56                   	push   esi
c0019673:	e8 c4 71 fe ff       	call   c000083c <strcpy>
c0019678:	5d                   	pop    ebp
c0019679:	58                   	pop    eax
c001967a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019680:	66 c1 e8 06          	shr    ax,0x6
c0019684:	0f b6 c0             	movzx  eax,al
c0019687:	50                   	push   eax
c0019688:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001968e:	c1 e8 0e             	shr    eax,0xe
c0019691:	0f b6 c0             	movzx  eax,al
c0019694:	50                   	push   eax
c0019695:	e8 18 f0 ff ff       	call   c00186b2 <CPU::lookupAMDName(unsigned char, unsigned char)>
c001969a:	5a                   	pop    edx
c001969b:	59                   	pop    ecx
c001969c:	50                   	push   eax
c001969d:	56                   	push   esi
c001969e:	e8 d9 72 fe ff       	call   c000097c <strcat>
c00196a3:	5f                   	pop    edi
c00196a4:	5d                   	pop    ebp
c00196a5:	56                   	push   esi
c00196a6:	53                   	push   ebx
c00196a7:	e8 26 ad ff ff       	call   c00143d2 <Device::setName(char const*)>
c00196ac:	58                   	pop    eax
c00196ad:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00196b3:	5a                   	pop    edx
c00196b4:	68 e4 b8 02 c0       	push   0xc002b8e4
c00196b9:	50                   	push   eax
c00196ba:	e8 09 72 fe ff       	call   c00008c8 <strcmp>
c00196bf:	83 c4 10             	add    esp,0x10
c00196c2:	85 c0                	test   eax,eax
c00196c4:	75 20                	jne    c00196e6 <CPU::detectFeatures()+0x704>
c00196c6:	8b 15 68 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e468
c00196cc:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00196d2:	a8 01                	test   al,0x1
c00196d4:	74 10                	je     c00196e6 <CPU::detectFeatures()+0x704>
c00196d6:	83 e0 fe             	and    eax,0xfffffffe
c00196d9:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00196df:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00196e6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00196ec:	c1 e8 0e             	shr    eax,0xe
c00196ef:	3c 05                	cmp    al,0x5
c00196f1:	0f 85 cc 02 00 00    	jne    c00199c3 <CPU::detectFeatures()+0x9e1>
c00196f7:	56                   	push   esi
c00196f8:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00196fe:	83 e0 0f             	and    eax,0xf
c0019701:	50                   	push   eax
c0019702:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019708:	66 c1 e8 06          	shr    ax,0x6
c001970c:	0f b6 c0             	movzx  eax,al
c001970f:	50                   	push   eax
c0019710:	6a 05                	push   0x5
c0019712:	e8 11 f4 ff ff       	call   c0018b28 <CPU::AMD_K6_writeback(int, int, int)>
c0019717:	e9 1f 02 00 00       	jmp    c001993b <CPU::detectFeatures()+0x959>
c001971c:	8d 50 fd             	lea    edx,[eax-0x3]
c001971f:	83 fa 01             	cmp    edx,0x1
c0019722:	76 09                	jbe    c001972d <CPU::detectFeatures()+0x74b>
c0019724:	83 f8 06             	cmp    eax,0x6
c0019727:	0f 85 91 01 00 00    	jne    c00198be <CPU::detectFeatures()+0x8dc>
c001972d:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019733:	c1 ea 0e             	shr    edx,0xe
c0019736:	80 fa 05             	cmp    dl,0x5
c0019739:	75 7b                	jne    c00197b6 <CPU::detectFeatures()+0x7d4>
c001973b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019741:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019746:	66 81 fa 00 01       	cmp    dx,0x100
c001974b:	75 0c                	jne    c0019759 <CPU::detectFeatures()+0x777>
c001974d:	51                   	push   ecx
c001974e:	51                   	push   ecx
c001974f:	68 eb b8 02 c0       	push   0xc002b8eb
c0019754:	e9 dc 01 00 00       	jmp    c0019935 <CPU::detectFeatures()+0x953>
c0019759:	66 81 fa 00 02       	cmp    dx,0x200
c001975e:	75 0c                	jne    c001976c <CPU::detectFeatures()+0x78a>
c0019760:	52                   	push   edx
c0019761:	52                   	push   edx
c0019762:	68 fe b8 02 c0       	push   0xc002b8fe
c0019767:	e9 c9 01 00 00       	jmp    c0019935 <CPU::detectFeatures()+0x953>
c001976c:	66 81 fa 40 02       	cmp    dx,0x240
c0019771:	75 0c                	jne    c001977f <CPU::detectFeatures()+0x79d>
c0019773:	50                   	push   eax
c0019774:	50                   	push   eax
c0019775:	68 10 b9 02 c0       	push   0xc002b910
c001977a:	e9 b6 01 00 00       	jmp    c0019935 <CPU::detectFeatures()+0x953>
c001977f:	83 f8 06             	cmp    eax,0x6
c0019782:	75 0c                	jne    c0019790 <CPU::detectFeatures()+0x7ae>
c0019784:	50                   	push   eax
c0019785:	50                   	push   eax
c0019786:	68 22 b9 02 c0       	push   0xc002b922
c001978b:	e9 a5 01 00 00       	jmp    c0019935 <CPU::detectFeatures()+0x953>
c0019790:	83 f8 04             	cmp    eax,0x4
c0019793:	75 0c                	jne    c00197a1 <CPU::detectFeatures()+0x7bf>
c0019795:	50                   	push   eax
c0019796:	50                   	push   eax
c0019797:	68 2e b9 02 c0       	push   0xc002b92e
c001979c:	e9 94 01 00 00       	jmp    c0019935 <CPU::detectFeatures()+0x953>
c00197a1:	83 f8 03             	cmp    eax,0x3
c00197a4:	0f 85 19 02 00 00    	jne    c00199c3 <CPU::detectFeatures()+0x9e1>
c00197aa:	50                   	push   eax
c00197ab:	50                   	push   eax
c00197ac:	68 36 b9 02 c0       	push   0xc002b936
c00197b1:	e9 7f 01 00 00       	jmp    c0019935 <CPU::detectFeatures()+0x953>
c00197b6:	80 fa 06             	cmp    dl,0x6
c00197b9:	0f 85 db 00 00 00    	jne    c001989a <CPU::detectFeatures()+0x8b8>
c00197bf:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00197c5:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00197ca:	66 81 fa 80 01       	cmp    dx,0x180
c00197cf:	75 0c                	jne    c00197dd <CPU::detectFeatures()+0x7fb>
c00197d1:	50                   	push   eax
c00197d2:	50                   	push   eax
c00197d3:	68 41 b9 02 c0       	push   0xc002b941
c00197d8:	e9 58 01 00 00       	jmp    c0019935 <CPU::detectFeatures()+0x953>
c00197dd:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00197e3:	66 f7 c1 80 ff       	test   cx,0xff80
c00197e8:	75 0c                	jne    c00197f6 <CPU::detectFeatures()+0x814>
c00197ea:	50                   	push   eax
c00197eb:	50                   	push   eax
c00197ec:	68 51 b9 02 c0       	push   0xc002b951
c00197f1:	e9 3f 01 00 00       	jmp    c0019935 <CPU::detectFeatures()+0x953>
c00197f6:	66 81 fa 40 02       	cmp    dx,0x240
c00197fb:	75 0c                	jne    c0019809 <CPU::detectFeatures()+0x827>
c00197fd:	55                   	push   ebp
c00197fe:	55                   	push   ebp
c00197ff:	68 58 b9 02 c0       	push   0xc002b958
c0019804:	e9 2c 01 00 00       	jmp    c0019935 <CPU::detectFeatures()+0x953>
c0019809:	66 81 fa 80 02       	cmp    dx,0x280
c001980e:	75 0c                	jne    c001981c <CPU::detectFeatures()+0x83a>
c0019810:	57                   	push   edi
c0019811:	57                   	push   edi
c0019812:	68 61 b9 02 c0       	push   0xc002b961
c0019817:	e9 19 01 00 00       	jmp    c0019935 <CPU::detectFeatures()+0x953>
c001981c:	66 81 fa 40 03       	cmp    dx,0x340
c0019821:	74 ed                	je     c0019810 <CPU::detectFeatures()+0x82e>
c0019823:	66 81 fa c0 03       	cmp    dx,0x3c0
c0019828:	75 0c                	jne    c0019836 <CPU::detectFeatures()+0x854>
c001982a:	56                   	push   esi
c001982b:	56                   	push   esi
c001982c:	68 68 b9 02 c0       	push   0xc002b968
c0019831:	e9 ff 00 00 00       	jmp    c0019935 <CPU::detectFeatures()+0x953>
c0019836:	83 f8 06             	cmp    eax,0x6
c0019839:	0f 84 45 ff ff ff    	je     c0019784 <CPU::detectFeatures()+0x7a2>
c001983f:	83 f8 04             	cmp    eax,0x4
c0019842:	0f 84 4d ff ff ff    	je     c0019795 <CPU::detectFeatures()+0x7b3>
c0019848:	83 f8 03             	cmp    eax,0x3
c001984b:	0f 85 72 01 00 00    	jne    c00199c3 <CPU::detectFeatures()+0x9e1>
c0019851:	51                   	push   ecx
c0019852:	51                   	push   ecx
c0019853:	68 71 b9 02 c0       	push   0xc002b971
c0019858:	53                   	push   ebx
c0019859:	e8 74 ab ff ff       	call   c00143d2 <Device::setName(char const*)>
c001985e:	b1 c1                	mov    cl,0xc1
c0019860:	88 c8                	mov    al,cl
c0019862:	e6 22                	out    0x22,al
c0019864:	e4 23                	in     al,0x23
c0019866:	88 c2                	mov    dl,al
c0019868:	88 c8                	mov    al,cl
c001986a:	e6 22                	out    0x22,al
c001986c:	88 d0                	mov    al,dl
c001986e:	83 c8 10             	or     eax,0x10
c0019871:	e6 23                	out    0x23,al
c0019873:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001987a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001987d:	89 d0                	mov    eax,edx
c001987f:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019885:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019889:	40                   	inc    eax
c001988a:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019890:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019895:	e9 a1 00 00 00       	jmp    c001993b <CPU::detectFeatures()+0x959>
c001989a:	83 f8 06             	cmp    eax,0x6
c001989d:	0f 84 e1 fe ff ff    	je     c0019784 <CPU::detectFeatures()+0x7a2>
c00198a3:	83 f8 04             	cmp    eax,0x4
c00198a6:	0f 84 e9 fe ff ff    	je     c0019795 <CPU::detectFeatures()+0x7b3>
c00198ac:	83 f8 03             	cmp    eax,0x3
c00198af:	0f 85 0e 01 00 00    	jne    c00199c3 <CPU::detectFeatures()+0x9e1>
c00198b5:	52                   	push   edx
c00198b6:	52                   	push   edx
c00198b7:	68 7c b9 02 c0       	push   0xc002b97c
c00198bc:	eb 77                	jmp    c0019935 <CPU::detectFeatures()+0x953>
c00198be:	83 f8 07             	cmp    eax,0x7
c00198c1:	75 09                	jne    c00198cc <CPU::detectFeatures()+0x8ea>
c00198c3:	50                   	push   eax
c00198c4:	50                   	push   eax
c00198c5:	68 86 b9 02 c0       	push   0xc002b986
c00198ca:	eb 69                	jmp    c0019935 <CPU::detectFeatures()+0x953>
c00198cc:	83 f8 0a             	cmp    eax,0xa
c00198cf:	75 09                	jne    c00198da <CPU::detectFeatures()+0x8f8>
c00198d1:	50                   	push   eax
c00198d2:	50                   	push   eax
c00198d3:	68 91 b9 02 c0       	push   0xc002b991
c00198d8:	eb 5b                	jmp    c0019935 <CPU::detectFeatures()+0x953>
c00198da:	83 f8 0b             	cmp    eax,0xb
c00198dd:	75 09                	jne    c00198e8 <CPU::detectFeatures()+0x906>
c00198df:	50                   	push   eax
c00198e0:	50                   	push   eax
c00198e1:	68 99 b9 02 c0       	push   0xc002b999
c00198e6:	eb 4d                	jmp    c0019935 <CPU::detectFeatures()+0x953>
c00198e8:	83 f8 08             	cmp    eax,0x8
c00198eb:	75 09                	jne    c00198f6 <CPU::detectFeatures()+0x914>
c00198ed:	50                   	push   eax
c00198ee:	50                   	push   eax
c00198ef:	68 a2 b9 02 c0       	push   0xc002b9a2
c00198f4:	eb 3f                	jmp    c0019935 <CPU::detectFeatures()+0x953>
c00198f6:	83 f8 09             	cmp    eax,0x9
c00198f9:	75 09                	jne    c0019904 <CPU::detectFeatures()+0x922>
c00198fb:	50                   	push   eax
c00198fc:	50                   	push   eax
c00198fd:	68 aa b9 02 c0       	push   0xc002b9aa
c0019902:	eb 31                	jmp    c0019935 <CPU::detectFeatures()+0x953>
c0019904:	83 f8 05             	cmp    eax,0x5
c0019907:	75 09                	jne    c0019912 <CPU::detectFeatures()+0x930>
c0019909:	50                   	push   eax
c001990a:	50                   	push   eax
c001990b:	68 b2 b9 02 c0       	push   0xc002b9b2
c0019910:	eb 23                	jmp    c0019935 <CPU::detectFeatures()+0x953>
c0019912:	83 f8 0c             	cmp    eax,0xc
c0019915:	75 09                	jne    c0019920 <CPU::detectFeatures()+0x93e>
c0019917:	55                   	push   ebp
c0019918:	55                   	push   ebp
c0019919:	68 c0 b9 02 c0       	push   0xc002b9c0
c001991e:	eb 15                	jmp    c0019935 <CPU::detectFeatures()+0x953>
c0019920:	83 f8 0d             	cmp    eax,0xd
c0019923:	75 09                	jne    c001992e <CPU::detectFeatures()+0x94c>
c0019925:	57                   	push   edi
c0019926:	57                   	push   edi
c0019927:	68 cb b9 02 c0       	push   0xc002b9cb
c001992c:	eb 07                	jmp    c0019935 <CPU::detectFeatures()+0x953>
c001992e:	56                   	push   esi
c001992f:	56                   	push   esi
c0019930:	68 df b9 02 c0       	push   0xc002b9df
c0019935:	53                   	push   ebx
c0019936:	e8 97 aa ff ff       	call   c00143d2 <Device::setName(char const*)>
c001993b:	83 c4 10             	add    esp,0x10
c001993e:	e9 80 00 00 00       	jmp    c00199c3 <CPU::detectFeatures()+0x9e1>
c0019943:	51                   	push   ecx
c0019944:	51                   	push   ecx
c0019945:	68 2b b8 02 c0       	push   0xc002b82b
c001994a:	57                   	push   edi
c001994b:	e8 ec 6e fe ff       	call   c000083c <strcpy>
c0019950:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001995a:	e8 4f 69 fe ff       	call   c00002ae <is486>
c001995f:	83 c4 10             	add    esp,0x10
c0019962:	85 c0                	test   eax,eax
c0019964:	74 2b                	je     c0019991 <CPU::detectFeatures()+0x9af>
c0019966:	52                   	push   edx
c0019967:	52                   	push   edx
c0019968:	68 eb b9 02 c0       	push   0xc002b9eb
c001996d:	53                   	push   ebx
c001996e:	e8 5f aa ff ff       	call   c00143d2 <Device::setName(char const*)>
c0019973:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001997a:	0f 20 c0             	mov    eax,cr0
c001997d:	83 e0 14             	and    eax,0x14
c0019980:	83 c4 10             	add    esp,0x10
c0019983:	83 f8 04             	cmp    eax,0x4
c0019986:	75 1f                	jne    c00199a7 <CPU::detectFeatures()+0x9c5>
c0019988:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c001998f:	eb 32                	jmp    c00199c3 <CPU::detectFeatures()+0x9e1>
c0019991:	50                   	push   eax
c0019992:	50                   	push   eax
c0019993:	68 f6 b9 02 c0       	push   0xc002b9f6
c0019998:	53                   	push   ebx
c0019999:	e8 34 aa ff ff       	call   c00143d2 <Device::setName(char const*)>
c001999e:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00199a5:	eb d3                	jmp    c001997a <CPU::detectFeatures()+0x998>
c00199a7:	e8 dd 68 fe ff       	call   c0000289 <hasLegacyFPU>
c00199ac:	83 e0 01             	and    eax,0x1
c00199af:	8d 14 00             	lea    edx,[eax+eax*1]
c00199b2:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00199b8:	83 e0 fd             	and    eax,0xfffffffd
c00199bb:	09 d0                	or     eax,edx
c00199bd:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00199c3:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c00199ca:	83 c4 4c             	add    esp,0x4c
c00199cd:	5b                   	pop    ebx
c00199ce:	5e                   	pop    esi
c00199cf:	5f                   	pop    edi
c00199d0:	5d                   	pop    ebp
c00199d1:	c3                   	ret    

c00199d2 <CPU::setupSMEP()>:
c00199d2:	0f 20 e0             	mov    eax,cr4
c00199d5:	0d 00 00 10 00       	or     eax,0x100000
c00199da:	0f 22 e0             	mov    cr4,eax
c00199dd:	c3                   	ret    

c00199de <CPU::setupUMIP()>:
c00199de:	0f 20 e0             	mov    eax,cr4
c00199e1:	80 cc 08             	or     ah,0x8
c00199e4:	0f 22 e0             	mov    cr4,eax
c00199e7:	c3                   	ret    

c00199e8 <CPU::setupTSC()>:
c00199e8:	0f 20 e0             	mov    eax,cr4
c00199eb:	83 c8 04             	or     eax,0x4
c00199ee:	0f 22 e0             	mov    cr4,eax
c00199f1:	c3                   	ret    

c00199f2 <CPU::setupLargePages()>:
c00199f2:	0f 20 e0             	mov    eax,cr4
c00199f5:	83 c8 10             	or     eax,0x10
c00199f8:	0f 22 e0             	mov    cr4,eax
c00199fb:	c3                   	ret    

c00199fc <CPU::setupPAT()>:
c00199fc:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0019a01:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019a08:	74 2c                	je     c0019a36 <CPU::setupPAT()+0x3a>
c0019a0a:	53                   	push   ebx
c0019a0b:	83 ec 10             	sub    esp,0x10
c0019a0e:	68 77 02 00 00       	push   0x277
c0019a13:	50                   	push   eax
c0019a14:	e8 d7 53 ff ff       	call   c000edf0 <Computer::rdmsr(unsigned int)>
c0019a19:	83 e2 f8             	and    edx,0xfffffff8
c0019a1c:	83 ca 01             	or     edx,0x1
c0019a1f:	52                   	push   edx
c0019a20:	50                   	push   eax
c0019a21:	68 77 02 00 00       	push   0x277
c0019a26:	ff 35 68 e4 02 c0    	push   DWORD PTR ds:0xc002e468
c0019a2c:	e8 eb 53 ff ff       	call   c000ee1c <Computer::wrmsr(unsigned int, unsigned long long)>
c0019a31:	83 c4 28             	add    esp,0x28
c0019a34:	5b                   	pop    ebx
c0019a35:	c3                   	ret    
c0019a36:	c3                   	ret    
c0019a37:	90                   	nop

c0019a38 <CPU::setupMTRR()>:
c0019a38:	c3                   	ret    
c0019a39:	90                   	nop

c0019a3a <CPU::setupGlobalPages()>:
c0019a3a:	0f 20 e0             	mov    eax,cr4
c0019a3d:	0c 80                	or     al,0x80
c0019a3f:	0f 22 e0             	mov    cr4,eax
c0019a42:	c3                   	ret    
c0019a43:	90                   	nop

c0019a44 <CPU::allowUsermodeDataAccess()>:
c0019a44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019a48:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019a4f:	74 03                	je     c0019a54 <CPU::allowUsermodeDataAccess()+0x10>
c0019a51:	0f 01 cb             	stac   
c0019a54:	c3                   	ret    
c0019a55:	90                   	nop

c0019a56 <CPU::prohibitUsermodeDataAccess()>:
c0019a56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019a5a:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019a61:	74 03                	je     c0019a66 <CPU::prohibitUsermodeDataAccess()+0x10>
c0019a63:	0f 01 ca             	clac   
c0019a66:	c3                   	ret    
c0019a67:	90                   	nop

c0019a68 <CPU::setupSMAP()>:
c0019a68:	0f 20 e0             	mov    eax,cr4
c0019a6b:	0d 00 00 20 00       	or     eax,0x200000
c0019a70:	0f 22 e0             	mov    cr4,eax
c0019a73:	eb e1                	jmp    c0019a56 <CPU::prohibitUsermodeDataAccess()>
c0019a75:	90                   	nop

c0019a76 <CPU::setupFeatures()>:
c0019a76:	83 ec 0c             	sub    esp,0xc
c0019a79:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019a7d:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019a84:	74 07                	je     c0019a8d <CPU::setupFeatures()+0x17>
c0019a86:	52                   	push   edx
c0019a87:	e8 46 ff ff ff       	call   c00199d2 <CPU::setupSMEP()>
c0019a8c:	58                   	pop    eax
c0019a8d:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019a94:	74 07                	je     c0019a9d <CPU::setupFeatures()+0x27>
c0019a96:	52                   	push   edx
c0019a97:	e8 cc ff ff ff       	call   c0019a68 <CPU::setupSMAP()>
c0019a9c:	58                   	pop    eax
c0019a9d:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019aa4:	74 07                	je     c0019aad <CPU::setupFeatures()+0x37>
c0019aa6:	52                   	push   edx
c0019aa7:	e8 32 ff ff ff       	call   c00199de <CPU::setupUMIP()>
c0019aac:	58                   	pop    eax
c0019aad:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019ab4:	74 07                	je     c0019abd <CPU::setupFeatures()+0x47>
c0019ab6:	52                   	push   edx
c0019ab7:	e8 2c ff ff ff       	call   c00199e8 <CPU::setupTSC()>
c0019abc:	58                   	pop    eax
c0019abd:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019ac4:	74 07                	je     c0019acd <CPU::setupFeatures()+0x57>
c0019ac6:	52                   	push   edx
c0019ac7:	e8 26 ff ff ff       	call   c00199f2 <CPU::setupLargePages()>
c0019acc:	59                   	pop    ecx
c0019acd:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019ad4:	74 07                	je     c0019add <CPU::setupFeatures()+0x67>
c0019ad6:	52                   	push   edx
c0019ad7:	e8 5e ff ff ff       	call   c0019a3a <CPU::setupGlobalPages()>
c0019adc:	58                   	pop    eax
c0019add:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019ae4:	74 0c                	je     c0019af2 <CPU::setupFeatures()+0x7c>
c0019ae6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019aea:	83 c4 0c             	add    esp,0xc
c0019aed:	e9 0a ff ff ff       	jmp    c00199fc <CPU::setupPAT()>
c0019af2:	83 c4 0c             	add    esp,0xc
c0019af5:	c3                   	ret    

c0019af6 <CPU::open(int, int, void*)>:
c0019af6:	57                   	push   edi
c0019af7:	56                   	push   esi
c0019af8:	53                   	push   ebx
c0019af9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019afd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019b01:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019b07:	83 ec 0c             	sub    esp,0xc
c0019b0a:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019b10:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019b16:	50                   	push   eax
c0019b17:	e8 c0 55 ff ff       	call   c000f0dc <GDT::setup()>
c0019b1c:	83 c4 0c             	add    esp,0xc
c0019b1f:	6a 00                	push   0x0
c0019b21:	68 ef be ad de       	push   0xdeadbeef
c0019b26:	57                   	push   edi
c0019b27:	e8 34 78 ff ff       	call   c0011360 <TSS::setup(unsigned long, unsigned long)>
c0019b2c:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019b2f:	e8 0c 78 ff ff       	call   c0011340 <TSS::flush()>
c0019b34:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019b3a:	89 04 24             	mov    DWORD PTR [esp],eax
c0019b3d:	e8 f6 57 ff ff       	call   c000f338 <IDT::setup()>
c0019b42:	b8 00 04 00 00       	mov    eax,0x400
c0019b47:	0f 23 f8             	mov    db7,eax
c0019b4a:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019b54:	e8 5e 63 ff ff       	call   c000feb7 <Phys::allocatePage()>
c0019b59:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019b5f:	89 30                	mov    DWORD PTR [eax],esi
c0019b61:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019b67:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019b6a:	58                   	pop    eax
c0019b6b:	5a                   	pop    edx
c0019b6c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019b72:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019b76:	e8 79 89 ff ff       	call   c00124f4 <VAS::setCPUSpecific(unsigned long)>
c0019b7b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b7e:	e8 5f f4 ff ff       	call   c0018fe2 <CPU::detectFeatures()>
c0019b83:	e8 7c bc ff ff       	call   c0015804 <setupInterruptController()>
c0019b88:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019b8e:	a1 80 e4 02 c0       	mov    eax,ds:0xc002e480
c0019b93:	83 e0 10             	and    eax,0x10
c0019b96:	83 f8 01             	cmp    eax,0x1
c0019b99:	19 c0                	sbb    eax,eax
c0019b9b:	83 e0 46             	and    eax,0x46
c0019b9e:	83 c0 1e             	add    eax,0x1e
c0019ba1:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ba4:	e8 9f d1 ff ff       	call   c0016d48 <setupTimer(int)>
c0019ba9:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019baf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019bb2:	e8 bf fe ff ff       	call   c0019a76 <CPU::setupFeatures()>
c0019bb7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019bba:	e8 a7 f1 ff ff       	call   c0018d66 <CPU::displayFeatures()>
c0019bbf:	83 c4 10             	add    esp,0x10
c0019bc2:	31 c0                	xor    eax,eax
c0019bc4:	5b                   	pop    ebx
c0019bc5:	5e                   	pop    esi
c0019bc6:	5f                   	pop    edi
c0019bc7:	c3                   	ret    

c0019bc8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019bc8:	57                   	push   edi
c0019bc9:	56                   	push   esi
c0019bca:	53                   	push   ebx
c0019bcb:	51                   	push   ecx
c0019bcc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019bd0:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019bd3:	0f 02 c0             	lar    eax,ax
c0019bd6:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019bd9:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019bdd:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019be0:	88 ca                	mov    dl,cl
c0019be2:	c0 ea 06             	shr    dl,0x6
c0019be5:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019be9:	89 ca                	mov    edx,ecx
c0019beb:	66 c1 ea 03          	shr    dx,0x3
c0019bef:	83 e2 07             	and    edx,0x7
c0019bf2:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019bf7:	88 17                	mov    BYTE PTR [edi],dl
c0019bf9:	0f 84 a6 01 00 00    	je     c0019da5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019bff:	83 e1 07             	and    ecx,0x7
c0019c02:	80 f9 04             	cmp    cl,0x4
c0019c05:	0f 84 98 00 00 00    	je     c0019ca3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019c0b:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019c10:	0f 95 c0             	setne  al
c0019c13:	80 f9 05             	cmp    cl,0x5
c0019c16:	0f 95 c2             	setne  dl
c0019c19:	08 c2                	or     dl,al
c0019c1b:	74 79                	je     c0019c96 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019c1d:	84 c9                	test   cl,cl
c0019c1f:	75 05                	jne    c0019c26 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019c21:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019c24:	eb 3c                	jmp    c0019c62 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019c26:	80 f9 01             	cmp    cl,0x1
c0019c29:	75 05                	jne    c0019c30 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019c2b:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019c2e:	eb 32                	jmp    c0019c62 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019c30:	80 f9 02             	cmp    cl,0x2
c0019c33:	75 05                	jne    c0019c3a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019c35:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019c38:	eb 28                	jmp    c0019c62 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019c3a:	31 c0                	xor    eax,eax
c0019c3c:	80 f9 03             	cmp    cl,0x3
c0019c3f:	75 05                	jne    c0019c46 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019c41:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019c44:	eb 1c                	jmp    c0019c62 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019c46:	80 f9 05             	cmp    cl,0x5
c0019c49:	75 05                	jne    c0019c50 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019c4b:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019c4e:	eb 12                	jmp    c0019c62 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019c50:	80 f9 06             	cmp    cl,0x6
c0019c53:	75 05                	jne    c0019c5a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019c55:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019c58:	eb 08                	jmp    c0019c62 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019c5a:	80 f9 07             	cmp    cl,0x7
c0019c5d:	75 03                	jne    c0019c62 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019c5f:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019c62:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019c67:	75 10                	jne    c0019c79 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019c69:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019c6d:	b9 03 00 00 00       	mov    ecx,0x3
c0019c72:	01 d0                	add    eax,edx
c0019c74:	e9 37 01 00 00       	jmp    c0019db0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019c79:	b9 02 00 00 00       	mov    ecx,0x2
c0019c7e:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019c83:	0f 85 27 01 00 00    	jne    c0019db0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019c89:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019c8c:	b9 06 00 00 00       	mov    ecx,0x6
c0019c91:	e9 1a 01 00 00       	jmp    c0019db0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019c96:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019c99:	b9 06 00 00 00       	mov    ecx,0x6
c0019c9e:	e9 0f 01 00 00       	jmp    c0019db2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019ca3:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019ca6:	88 ca                	mov    dl,cl
c0019ca8:	c0 ea 06             	shr    dl,0x6
c0019cab:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019caf:	89 ca                	mov    edx,ecx
c0019cb1:	66 c1 ea 03          	shr    dx,0x3
c0019cb5:	83 e2 07             	and    edx,0x7
c0019cb8:	80 e1 07             	and    cl,0x7
c0019cbb:	75 05                	jne    c0019cc2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019cbd:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019cc0:	eb 4c                	jmp    c0019d0e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019cc2:	80 f9 01             	cmp    cl,0x1
c0019cc5:	75 05                	jne    c0019ccc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019cc7:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019cca:	eb 42                	jmp    c0019d0e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019ccc:	80 f9 02             	cmp    cl,0x2
c0019ccf:	75 05                	jne    c0019cd6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019cd1:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019cd4:	eb 38                	jmp    c0019d0e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019cd6:	80 f9 03             	cmp    cl,0x3
c0019cd9:	75 05                	jne    c0019ce0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019cdb:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019cde:	eb 2e                	jmp    c0019d0e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019ce0:	80 f9 04             	cmp    cl,0x4
c0019ce3:	75 12                	jne    c0019cf7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019ce5:	f6 c4 60             	test   ah,0x60
c0019ce8:	75 08                	jne    c0019cf2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019cea:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019ced:	8d 78 14             	lea    edi,[eax+0x14]
c0019cf0:	eb 1c                	jmp    c0019d0e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019cf2:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019cf5:	eb 17                	jmp    c0019d0e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019cf7:	80 f9 05             	cmp    cl,0x5
c0019cfa:	75 05                	jne    c0019d01 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019cfc:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019cff:	eb 0d                	jmp    c0019d0e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d01:	80 f9 06             	cmp    cl,0x6
c0019d04:	75 05                	jne    c0019d0b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019d06:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019d09:	eb 03                	jmp    c0019d0e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d0b:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019d0e:	84 d2                	test   dl,dl
c0019d10:	75 05                	jne    c0019d17 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019d12:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019d15:	eb 3c                	jmp    c0019d53 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019d17:	80 fa 01             	cmp    dl,0x1
c0019d1a:	75 05                	jne    c0019d21 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019d1c:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019d1f:	eb 32                	jmp    c0019d53 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019d21:	80 fa 02             	cmp    dl,0x2
c0019d24:	75 05                	jne    c0019d2b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019d26:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019d29:	eb 28                	jmp    c0019d53 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019d2b:	80 fa 03             	cmp    dl,0x3
c0019d2e:	75 05                	jne    c0019d35 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019d30:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019d33:	eb 1e                	jmp    c0019d53 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019d35:	31 c0                	xor    eax,eax
c0019d37:	80 fa 04             	cmp    dl,0x4
c0019d3a:	74 17                	je     c0019d53 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019d3c:	80 fa 05             	cmp    dl,0x5
c0019d3f:	75 05                	jne    c0019d46 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019d41:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019d44:	eb 0d                	jmp    c0019d53 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019d46:	80 fa 06             	cmp    dl,0x6
c0019d49:	75 05                	jne    c0019d50 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019d4b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019d4e:	eb 03                	jmp    c0019d53 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019d50:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019d53:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019d58:	0f 94 c2             	sete   dl
c0019d5b:	80 f9 05             	cmp    cl,0x5
c0019d5e:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019d62:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019d67:	d3 e0                	shl    eax,cl
c0019d69:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019d6d:	74 0a                	je     c0019d79 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019d6f:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019d72:	b9 07 00 00 00       	mov    ecx,0x7
c0019d77:	eb 37                	jmp    c0019db0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019d79:	01 f8                	add    eax,edi
c0019d7b:	b9 03 00 00 00       	mov    ecx,0x3
c0019d80:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019d85:	74 2b                	je     c0019db2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019d87:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019d8c:	75 0d                	jne    c0019d9b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019d8e:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019d92:	01 c8                	add    eax,ecx
c0019d94:	b9 04 00 00 00       	mov    ecx,0x4
c0019d99:	eb 17                	jmp    c0019db2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019d9b:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019d9e:	b9 07 00 00 00       	mov    ecx,0x7
c0019da3:	eb 0d                	jmp    c0019db2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019da5:	b9 02 00 00 00       	mov    ecx,0x2
c0019daa:	b2 01                	mov    dl,0x1
c0019dac:	31 c0                	xor    eax,eax
c0019dae:	eb 02                	jmp    c0019db2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019db0:	31 d2                	xor    edx,edx
c0019db2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019db6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019db8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019dbc:	88 11                	mov    BYTE PTR [ecx],dl
c0019dbe:	5a                   	pop    edx
c0019dbf:	5b                   	pop    ebx
c0019dc0:	5e                   	pop    esi
c0019dc1:	5f                   	pop    edi
c0019dc2:	c3                   	ret    

c0019dc3 <Krnl::smpEntry()>:
c0019dc3:	eb fe                	jmp    c0019dc3 <Krnl::smpEntry()>

c0019dc5 <Krnl::startCPU(int)>:
c0019dc5:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0019dca:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019dd1:	0f 84 36 01 00 00    	je     c0019f0d <Krnl::startCPU(int)+0x148>
c0019dd7:	53                   	push   ebx
c0019dd8:	83 ec 08             	sub    esp,0x8
c0019ddb:	e8 fc 3e 00 00       	call   c001dcdc <lockScheduler()>
c0019de0:	52                   	push   edx
c0019de1:	52                   	push   edx
c0019de2:	6a 1b                	push   0x1b
c0019de4:	ff 35 68 e4 02 c0    	push   DWORD PTR ds:0xc002e468
c0019dea:	e8 01 50 ff ff       	call   c000edf0 <Computer::rdmsr(unsigned int)>
c0019def:	59                   	pop    ecx
c0019df0:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019df5:	89 c3                	mov    ebx,eax
c0019df7:	58                   	pop    eax
c0019df8:	53                   	push   ebx
c0019df9:	68 30 ba 02 c0       	push   0xc002ba30
c0019dfe:	e8 c0 8f ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0019e03:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019e0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e11:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019e1b:	c1 e0 18             	shl    eax,0x18
c0019e1e:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019e24:	83 c4 10             	add    esp,0x10
c0019e27:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019e2d:	09 c2                	or     edx,eax
c0019e2f:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019e35:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019e3b:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019e41:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019e47:	80 cd c5             	or     ch,0xc5
c0019e4a:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019e50:	f3 90                	pause  
c0019e52:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019e54:	0f ba e1 0c          	bt     ecx,0xc
c0019e58:	72 f6                	jb     c0019e50 <Krnl::startCPU(int)+0x8b>
c0019e5a:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019e60:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019e66:	09 c1                	or     ecx,eax
c0019e68:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019e6e:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019e74:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019e7a:	80 cd 85             	or     ch,0x85
c0019e7d:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019e83:	f3 90                	pause  
c0019e85:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019e87:	0f ba e1 0c          	bt     ecx,0xc
c0019e8b:	72 f6                	jb     c0019e83 <Krnl::startCPU(int)+0xbe>
c0019e8d:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019e97:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019e9d:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019ea3:	09 c1                	or     ecx,eax
c0019ea5:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019eab:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019eb1:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019eb7:	81 c9 02 06 00 00    	or     ecx,0x602
c0019ebd:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019ec3:	f3 90                	pause  
c0019ec5:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019ec7:	0f ba e1 0c          	bt     ecx,0xc
c0019ecb:	72 f6                	jb     c0019ec3 <Krnl::startCPU(int)+0xfe>
c0019ecd:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019ed7:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019edd:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019ee3:	09 c8                	or     eax,ecx
c0019ee5:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019eeb:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019ef1:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019ef6:	0d 02 06 00 00       	or     eax,0x602
c0019efb:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019f01:	f3 90                	pause  
c0019f03:	8b 02                	mov    eax,DWORD PTR [edx]
c0019f05:	0f ba e0 0c          	bt     eax,0xc
c0019f09:	72 f6                	jb     c0019f01 <Krnl::startCPU(int)+0x13c>
c0019f0b:	eb fe                	jmp    c0019f0b <Krnl::startCPU(int)+0x146>
c0019f0d:	c3                   	ret    

c0019f0e <Krnl::startCPUs()>:
c0019f0e:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0019f13:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0019f19:	88 c2                	mov    dl,al
c0019f1b:	83 e2 0a             	and    edx,0xa
c0019f1e:	80 fa 0a             	cmp    dl,0xa
c0019f21:	75 09                	jne    c0019f2c <Krnl::startCPUs()+0x1e>
c0019f23:	a8 01                	test   al,0x1
c0019f25:	74 05                	je     c0019f2c <Krnl::startCPUs()+0x1e>
c0019f27:	e9 6f 62 fe ff       	jmp    c000019b <prepareTramp>
c0019f2c:	c3                   	ret    
c0019f2d:	90                   	nop

c0019f2e <EnvVarContainer::getEnv(char const*)>:
c0019f2e:	57                   	push   edi
c0019f2f:	56                   	push   esi
c0019f30:	53                   	push   ebx
c0019f31:	31 db                	xor    ebx,ebx
c0019f33:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019f37:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019f39:	7e 2b                	jle    c0019f66 <EnvVarContainer::getEnv(char const*)+0x38>
c0019f3b:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019f42:	50                   	push   eax
c0019f43:	50                   	push   eax
c0019f44:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019f47:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0019f4a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019f4e:	e8 75 69 fe ff       	call   c00008c8 <strcmp>
c0019f53:	83 c4 10             	add    esp,0x10
c0019f56:	85 c0                	test   eax,eax
c0019f58:	75 09                	jne    c0019f63 <EnvVarContainer::getEnv(char const*)+0x35>
c0019f5a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019f5d:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019f61:	eb 05                	jmp    c0019f68 <EnvVarContainer::getEnv(char const*)+0x3a>
c0019f63:	43                   	inc    ebx
c0019f64:	eb d1                	jmp    c0019f37 <EnvVarContainer::getEnv(char const*)+0x9>
c0019f66:	31 c0                	xor    eax,eax
c0019f68:	5b                   	pop    ebx
c0019f69:	5e                   	pop    esi
c0019f6a:	5f                   	pop    edi
c0019f6b:	c3                   	ret    

c0019f6c <EnvVarContainer::setEnv(char const*, char const*)>:
c0019f6c:	57                   	push   edi
c0019f6d:	56                   	push   esi
c0019f6e:	53                   	push   ebx
c0019f6f:	83 ec 1c             	sub    esp,0x1c
c0019f72:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019f76:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019f7a:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019f7e:	57                   	push   edi
c0019f7f:	e8 18 68 fe ff       	call   c000079c <strlen>
c0019f84:	40                   	inc    eax
c0019f85:	89 04 24             	mov    DWORD PTR [esp],eax
c0019f88:	e8 be 58 ff ff       	call   c000f84b <malloc>
c0019f8d:	89 34 24             	mov    DWORD PTR [esp],esi
c0019f90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019f94:	e8 03 68 fe ff       	call   c000079c <strlen>
c0019f99:	40                   	inc    eax
c0019f9a:	89 04 24             	mov    DWORD PTR [esp],eax
c0019f9d:	e8 a9 58 ff ff       	call   c000f84b <malloc>
c0019fa2:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019fa5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019fa9:	e8 ee 67 fe ff       	call   c000079c <strlen>
c0019fae:	83 c4 0c             	add    esp,0xc
c0019fb1:	40                   	inc    eax
c0019fb2:	50                   	push   eax
c0019fb3:	6a 00                	push   0x0
c0019fb5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019fb9:	e8 c2 67 fe ff       	call   c0000780 <memset>
c0019fbe:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019fc1:	e8 d6 67 fe ff       	call   c000079c <strlen>
c0019fc6:	83 c4 0c             	add    esp,0xc
c0019fc9:	40                   	inc    eax
c0019fca:	50                   	push   eax
c0019fcb:	57                   	push   edi
c0019fcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019fd0:	e8 77 67 fe ff       	call   c000074c <memcpy>
c0019fd5:	89 34 24             	mov    DWORD PTR [esp],esi
c0019fd8:	e8 bf 67 fe ff       	call   c000079c <strlen>
c0019fdd:	83 c4 0c             	add    esp,0xc
c0019fe0:	40                   	inc    eax
c0019fe1:	50                   	push   eax
c0019fe2:	6a 00                	push   0x0
c0019fe4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019fe8:	e8 93 67 fe ff       	call   c0000780 <memset>
c0019fed:	89 34 24             	mov    DWORD PTR [esp],esi
c0019ff0:	e8 a7 67 fe ff       	call   c000079c <strlen>
c0019ff5:	83 c4 0c             	add    esp,0xc
c0019ff8:	40                   	inc    eax
c0019ff9:	50                   	push   eax
c0019ffa:	56                   	push   esi
c0019ffb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019fff:	e8 48 67 fe ff       	call   c000074c <memcpy>
c001a004:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a006:	40                   	inc    eax
c001a007:	89 03                	mov    DWORD PTR [ebx],eax
c001a009:	c1 e0 03             	shl    eax,0x3
c001a00c:	5a                   	pop    edx
c001a00d:	59                   	pop    ecx
c001a00e:	50                   	push   eax
c001a00f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001a012:	e8 20 58 ff ff       	call   c000f837 <realloc>
c001a017:	83 c4 0c             	add    esp,0xc
c001a01a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a01d:	6a 08                	push   0x8
c001a01f:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a023:	52                   	push   edx
c001a024:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a026:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a02a:	50                   	push   eax
c001a02b:	e8 1c 67 fe ff       	call   c000074c <memcpy>
c001a030:	83 c4 20             	add    esp,0x20
c001a033:	5b                   	pop    ebx
c001a034:	5e                   	pop    esi
c001a035:	5f                   	pop    edi
c001a036:	c3                   	ret    
c001a037:	90                   	nop

c001a038 <EnvVarContainer::deleteEnv(char const*)>:
c001a038:	c3                   	ret    
c001a039:	90                   	nop

c001a03a <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a03a:	55                   	push   ebp
c001a03b:	57                   	push   edi
c001a03c:	56                   	push   esi
c001a03d:	53                   	push   ebx
c001a03e:	81 ec 38 01 00 00    	sub    esp,0x138
c001a044:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c001a04b:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c001a052:	68 14 01 00 00       	push   0x114
c001a057:	e8 ef 57 ff ff       	call   c000f84b <malloc>
c001a05c:	83 c4 0c             	add    esp,0xc
c001a05f:	89 c7                	mov    edi,eax
c001a061:	ff 76 08             	push   DWORD PTR [esi+0x8]
c001a064:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a06b:	50                   	push   eax
c001a06c:	e8 b1 92 ff ff       	call   c0013322 <File::File(char const*, Process*)>
c001a071:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a074:	e8 7b 95 ff ff       	call   c00135f4 <File::exists()>
c001a079:	83 c4 10             	add    esp,0x10
c001a07c:	84 c0                	test   al,al
c001a07e:	75 31                	jne    c001a0b1 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001a080:	51                   	push   ecx
c001a081:	51                   	push   ecx
c001a082:	6a 12                	push   0x12
c001a084:	57                   	push   edi
c001a085:	e8 fc 92 ff ff       	call   c0013386 <File::open(FileOpenMode)>
c001a08a:	8b 07                	mov    eax,DWORD PTR [edi]
c001a08c:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001a08f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a092:	e8 05 67 fe ff       	call   c000079c <strlen>
c001a097:	5a                   	pop    edx
c001a098:	31 d2                	xor    edx,edx
c001a09a:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a09e:	51                   	push   ecx
c001a09f:	55                   	push   ebp
c001a0a0:	52                   	push   edx
c001a0a1:	50                   	push   eax
c001a0a2:	57                   	push   edi
c001a0a3:	ff d3                	call   ebx
c001a0a5:	83 c4 14             	add    esp,0x14
c001a0a8:	57                   	push   edi
c001a0a9:	e8 36 93 ff ff       	call   c00133e4 <File::close()>
c001a0ae:	83 c4 10             	add    esp,0x10
c001a0b1:	31 db                	xor    ebx,ebx
c001a0b3:	50                   	push   eax
c001a0b4:	31 ed                	xor    ebp,ebp
c001a0b6:	68 00 01 00 00       	push   0x100
c001a0bb:	6a 00                	push   0x0
c001a0bd:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a0c1:	50                   	push   eax
c001a0c2:	e8 b9 66 fe ff       	call   c0000780 <memset>
c001a0c7:	58                   	pop    eax
c001a0c8:	5a                   	pop    edx
c001a0c9:	6a 01                	push   0x1
c001a0cb:	57                   	push   edi
c001a0cc:	e8 b5 92 ff ff       	call   c0013386 <File::open(FileOpenMode)>
c001a0d1:	83 c4 10             	add    esp,0x10
c001a0d4:	83 ec 0c             	sub    esp,0xc
c001a0d7:	8b 07                	mov    eax,DWORD PTR [edi]
c001a0d9:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a0dd:	51                   	push   ecx
c001a0de:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a0e2:	52                   	push   edx
c001a0e3:	6a 00                	push   0x0
c001a0e5:	6a 01                	push   0x1
c001a0e7:	57                   	push   edi
c001a0e8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a0eb:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a0ef:	83 c4 20             	add    esp,0x20
c001a0f2:	3c 0d                	cmp    al,0xd
c001a0f4:	0f 84 12 01 00 00    	je     c001a20c <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a0fa:	85 db                	test   ebx,ebx
c001a0fc:	0f 84 fd 00 00 00    	je     c001a1ff <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a102:	3c 0a                	cmp    al,0xa
c001a104:	74 13                	je     c001a119 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a106:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a10b:	74 0c                	je     c001a119 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a10d:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c001a113:	0f 8e e6 00 00 00    	jle    c001a1ff <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a119:	83 ec 0c             	sub    esp,0xc
c001a11c:	8d 53 01             	lea    edx,[ebx+0x1]
c001a11f:	29 dd                	sub    ebp,ebx
c001a121:	52                   	push   edx
c001a122:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a126:	e8 20 57 ff ff       	call   c000f84b <malloc>
c001a12b:	8d 4d 04             	lea    ecx,[ebp+0x4]
c001a12e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a132:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001a135:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001a139:	e8 0d 57 ff ff       	call   c000f84b <malloc>
c001a13e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a142:	83 c4 0c             	add    esp,0xc
c001a145:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a149:	52                   	push   edx
c001a14a:	6a 00                	push   0x0
c001a14c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a150:	e8 2b 66 fe ff       	call   c0000780 <memset>
c001a155:	83 c4 0c             	add    esp,0xc
c001a158:	53                   	push   ebx
c001a159:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a15d:	55                   	push   ebp
c001a15e:	01 eb                	add    ebx,ebp
c001a160:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a164:	e8 e3 65 fe ff       	call   c000074c <memcpy>
c001a169:	83 c4 0c             	add    esp,0xc
c001a16c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a170:	51                   	push   ecx
c001a171:	6a 00                	push   0x0
c001a173:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a177:	e8 04 66 fe ff       	call   c0000780 <memset>
c001a17c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a17f:	e8 18 66 fe ff       	call   c000079c <strlen>
c001a184:	83 c4 0c             	add    esp,0xc
c001a187:	50                   	push   eax
c001a188:	53                   	push   ebx
c001a189:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a18d:	e8 ba 65 fe ff       	call   c000074c <memcpy>
c001a192:	5b                   	pop    ebx
c001a193:	58                   	pop    eax
c001a194:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a198:	68 41 ba 02 c0       	push   0xc002ba41
c001a19d:	e8 21 8c ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001a1a2:	8b 06                	mov    eax,DWORD PTR [esi]
c001a1a4:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001a1a7:	40                   	inc    eax
c001a1a8:	83 c4 10             	add    esp,0x10
c001a1ab:	89 06                	mov    DWORD PTR [esi],eax
c001a1ad:	85 d2                	test   edx,edx
c001a1af:	75 0c                	jne    c001a1bd <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001a1b1:	83 ec 0c             	sub    esp,0xc
c001a1b4:	6a 08                	push   0x8
c001a1b6:	e8 90 56 ff ff       	call   c000f84b <malloc>
c001a1bb:	eb 0c                	jmp    c001a1c9 <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001a1bd:	c1 e0 03             	shl    eax,0x3
c001a1c0:	51                   	push   ecx
c001a1c1:	51                   	push   ecx
c001a1c2:	50                   	push   eax
c001a1c3:	52                   	push   edx
c001a1c4:	e8 6e 56 ff ff       	call   c000f837 <realloc>
c001a1c9:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001a1cc:	83 c4 10             	add    esp,0x10
c001a1cf:	31 db                	xor    ebx,ebx
c001a1d1:	52                   	push   edx
c001a1d2:	6a 08                	push   0x8
c001a1d4:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a1d8:	50                   	push   eax
c001a1d9:	8b 16                	mov    edx,DWORD PTR [esi]
c001a1db:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a1de:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a1e2:	50                   	push   eax
c001a1e3:	e8 64 65 fe ff       	call   c000074c <memcpy>
c001a1e8:	83 c4 0c             	add    esp,0xc
c001a1eb:	68 00 01 00 00       	push   0x100
c001a1f0:	6a 00                	push   0x0
c001a1f2:	55                   	push   ebp
c001a1f3:	31 ed                	xor    ebp,ebp
c001a1f5:	e8 86 65 fe ff       	call   c0000780 <memset>
c001a1fa:	83 c4 10             	add    esp,0x10
c001a1fd:	eb 0d                	jmp    c001a20c <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a1ff:	3c 3d                	cmp    al,0x3d
c001a201:	74 07                	je     c001a20a <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001a203:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c001a207:	45                   	inc    ebp
c001a208:	eb 02                	jmp    c001a20c <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a20a:	89 eb                	mov    ebx,ebp
c001a20c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a211:	0f 85 bd fe ff ff    	jne    c001a0d4 <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c001a217:	50                   	push   eax
c001a218:	50                   	push   eax
c001a219:	ff 36                	push   DWORD PTR [esi]
c001a21b:	68 4f ba 02 c0       	push   0xc002ba4f
c001a220:	e8 9e 8b ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001a225:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a22b:	5b                   	pop    ebx
c001a22c:	5e                   	pop    esi
c001a22d:	5f                   	pop    edi
c001a22e:	5d                   	pop    ebp
c001a22f:	c3                   	ret    

c001a230 <EnvVarContainer::__loadSystem()>:
c001a230:	83 ec 10             	sub    esp,0x10
c001a233:	68 a0 d9 02 c0       	push   0xc002d9a0
c001a238:	68 7a ba 02 c0       	push   0xc002ba7a
c001a23d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a241:	e8 f4 fd ff ff       	call   c001a03a <EnvVarContainer::loadFrom(char const*, char const*)>
c001a246:	83 c4 1c             	add    esp,0x1c
c001a249:	c3                   	ret    

c001a24a <EnvVarContainer::__loadUser()>:
c001a24a:	c3                   	ret    
c001a24b:	90                   	nop

c001a24c <EnvVarContainer::EnvVarContainer(Process*)>:
c001a24c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a250:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a256:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a25a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a25e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a261:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a265:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a26c:	90                   	nop
c001a26d:	c3                   	ret    

c001a26e <EnvVarContainer::~EnvVarContainer()>:
c001a26e:	83 ec 0c             	sub    esp,0xc
c001a271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a275:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a278:	85 c0                	test   eax,eax
c001a27a:	74 1d                	je     c001a299 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a27c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a280:	8b 00                	mov    eax,DWORD PTR [eax]
c001a282:	85 c0                	test   eax,eax
c001a284:	74 13                	je     c001a299 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a286:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a28a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a28d:	83 ec 0c             	sub    esp,0xc
c001a290:	50                   	push   eax
c001a291:	e8 c5 55 ff ff       	call   c000f85b <free>
c001a296:	83 c4 10             	add    esp,0x10
c001a299:	90                   	nop
c001a29a:	83 c4 0c             	add    esp,0xc
c001a29d:	c3                   	ret    

c001a29e <Krnl::getEnv(Process*, char const*)>:
c001a29e:	53                   	push   ebx
c001a29f:	83 ec 08             	sub    esp,0x8
c001a2a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a2a6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a2aa:	39 05 d4 19 03 c0    	cmp    DWORD PTR ds:0xc00319d4,eax
c001a2b0:	74 04                	je     c001a2b6 <Krnl::getEnv(Process*, char const*)+0x18>
c001a2b2:	85 c0                	test   eax,eax
c001a2b4:	75 0b                	jne    c001a2c1 <Krnl::getEnv(Process*, char const*)+0x23>
c001a2b6:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c001a2bb:	85 c0                	test   eax,eax
c001a2bd:	75 19                	jne    c001a2d8 <Krnl::getEnv(Process*, char const*)+0x3a>
c001a2bf:	eb 27                	jmp    c001a2e8 <Krnl::getEnv(Process*, char const*)+0x4a>
c001a2c1:	52                   	push   edx
c001a2c2:	52                   	push   edx
c001a2c3:	53                   	push   ebx
c001a2c4:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a2ca:	e8 5f fc ff ff       	call   c0019f2e <EnvVarContainer::getEnv(char const*)>
c001a2cf:	83 c4 10             	add    esp,0x10
c001a2d2:	85 c0                	test   eax,eax
c001a2d4:	75 28                	jne    c001a2fe <Krnl::getEnv(Process*, char const*)+0x60>
c001a2d6:	eb de                	jmp    c001a2b6 <Krnl::getEnv(Process*, char const*)+0x18>
c001a2d8:	52                   	push   edx
c001a2d9:	52                   	push   edx
c001a2da:	53                   	push   ebx
c001a2db:	50                   	push   eax
c001a2dc:	e8 4d fc ff ff       	call   c0019f2e <EnvVarContainer::getEnv(char const*)>
c001a2e1:	83 c4 10             	add    esp,0x10
c001a2e4:	85 c0                	test   eax,eax
c001a2e6:	75 16                	jne    c001a2fe <Krnl::getEnv(Process*, char const*)+0x60>
c001a2e8:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a2ec:	a1 b8 0f 03 c0       	mov    eax,ds:0xc0030fb8
c001a2f1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a2f5:	83 c4 08             	add    esp,0x8
c001a2f8:	5b                   	pop    ebx
c001a2f9:	e9 30 fc ff ff       	jmp    c0019f2e <EnvVarContainer::getEnv(char const*)>
c001a2fe:	83 c4 08             	add    esp,0x8
c001a301:	5b                   	pop    ebx
c001a302:	c3                   	ret    

c001a303 <Krnl::setEnvSystem(char const*, char const*)>:
c001a303:	83 ec 10             	sub    esp,0x10
c001a306:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a30a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a30e:	ff 35 b8 0f 03 c0    	push   DWORD PTR ds:0xc0030fb8
c001a314:	e8 53 fc ff ff       	call   c0019f6c <EnvVarContainer::setEnv(char const*, char const*)>
c001a319:	83 c4 1c             	add    esp,0x1c
c001a31c:	c3                   	ret    

c001a31d <Krnl::setEnvUser(char const*, char const*)>:
c001a31d:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c001a322:	85 c0                	test   eax,eax
c001a324:	74 15                	je     c001a33b <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a326:	83 ec 10             	sub    esp,0x10
c001a329:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a32d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a331:	50                   	push   eax
c001a332:	e8 35 fc ff ff       	call   c0019f6c <EnvVarContainer::setEnv(char const*, char const*)>
c001a337:	83 c4 1c             	add    esp,0x1c
c001a33a:	c3                   	ret    
c001a33b:	c3                   	ret    

c001a33c <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a33c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a340:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a346:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a34a:	e9 1d fc ff ff       	jmp    c0019f6c <EnvVarContainer::setEnv(char const*, char const*)>

c001a34f <Krnl::deleteEnvSystem(char const*)>:
c001a34f:	c3                   	ret    

c001a350 <Krnl::deleteEnvUser(char const*)>:
c001a350:	c3                   	ret    

c001a351 <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a351:	c3                   	ret    

c001a352 <Krnl::newProcessEnv(Process*)>:
c001a352:	83 ec 28             	sub    esp,0x28
c001a355:	6a 0c                	push   0xc
c001a357:	e8 ef 54 ff ff       	call   c000f84b <malloc>
c001a35c:	5a                   	pop    edx
c001a35d:	59                   	pop    ecx
c001a35e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a362:	50                   	push   eax
c001a363:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a367:	e8 e0 fe ff ff       	call   c001a24c <EnvVarContainer::EnvVarContainer(Process*)>
c001a36c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a370:	83 c4 2c             	add    esp,0x2c
c001a373:	c3                   	ret    

c001a374 <Krnl::copyProcessEnv(Process*, Process*)>:
c001a374:	56                   	push   esi
c001a375:	53                   	push   ebx
c001a376:	83 ec 10             	sub    esp,0x10
c001a379:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a37d:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c001a383:	6a 0c                	push   0xc
c001a385:	e8 c1 54 ff ff       	call   c000f84b <malloc>
c001a38a:	89 c3                	mov    ebx,eax
c001a38c:	58                   	pop    eax
c001a38d:	5a                   	pop    edx
c001a38e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a392:	53                   	push   ebx
c001a393:	e8 b4 fe ff ff       	call   c001a24c <EnvVarContainer::EnvVarContainer(Process*)>
c001a398:	8b 06                	mov    eax,DWORD PTR [esi]
c001a39a:	89 03                	mov    DWORD PTR [ebx],eax
c001a39c:	c1 e0 03             	shl    eax,0x3
c001a39f:	89 04 24             	mov    DWORD PTR [esp],eax
c001a3a2:	e8 a4 54 ff ff       	call   c000f84b <malloc>
c001a3a7:	83 c4 0c             	add    esp,0xc
c001a3aa:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a3ad:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a3af:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a3b6:	52                   	push   edx
c001a3b7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a3ba:	50                   	push   eax
c001a3bb:	e8 8c 63 fe ff       	call   c000074c <memcpy>
c001a3c0:	89 d8                	mov    eax,ebx
c001a3c2:	83 c4 14             	add    esp,0x14
c001a3c5:	5b                   	pop    ebx
c001a3c6:	5e                   	pop    esi
c001a3c7:	c3                   	ret    

c001a3c8 <Krnl::loadSystemEnv()>:
c001a3c8:	53                   	push   ebx
c001a3c9:	83 ec 14             	sub    esp,0x14
c001a3cc:	6a 0c                	push   0xc
c001a3ce:	e8 78 54 ff ff       	call   c000f84b <malloc>
c001a3d3:	89 c3                	mov    ebx,eax
c001a3d5:	58                   	pop    eax
c001a3d6:	5a                   	pop    edx
c001a3d7:	ff 35 d4 19 03 c0    	push   DWORD PTR ds:0xc00319d4
c001a3dd:	53                   	push   ebx
c001a3de:	e8 69 fe ff ff       	call   c001a24c <EnvVarContainer::EnvVarContainer(Process*)>
c001a3e3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a3e6:	89 1d b8 0f 03 c0    	mov    DWORD PTR ds:0xc0030fb8,ebx
c001a3ec:	e8 3f fe ff ff       	call   c001a230 <EnvVarContainer::__loadSystem()>
c001a3f1:	83 c4 18             	add    esp,0x18
c001a3f4:	5b                   	pop    ebx
c001a3f5:	c3                   	ret    

c001a3f6 <Krnl::loadUserEnv()>:
c001a3f6:	53                   	push   ebx
c001a3f7:	83 ec 14             	sub    esp,0x14
c001a3fa:	6a 0c                	push   0xc
c001a3fc:	e8 4a 54 ff ff       	call   c000f84b <malloc>
c001a401:	89 c3                	mov    ebx,eax
c001a403:	58                   	pop    eax
c001a404:	5a                   	pop    edx
c001a405:	ff 35 d4 19 03 c0    	push   DWORD PTR ds:0xc00319d4
c001a40b:	53                   	push   ebx
c001a40c:	e8 3b fe ff ff       	call   c001a24c <EnvVarContainer::EnvVarContainer(Process*)>
c001a411:	89 1d b4 0f 03 c0    	mov    DWORD PTR ds:0xc0030fb4,ebx
c001a417:	83 c4 18             	add    esp,0x18
c001a41a:	5b                   	pop    ebx
c001a41b:	c3                   	ret    

c001a41c <Krnl::flushEnv()>:
c001a41c:	c3                   	ret    

c001a41d <Krnl::getProcessTotalEnvCount(Process*)>:
c001a41d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a421:	8b 15 b4 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030fb4
c001a427:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a42d:	a1 b8 0f 03 c0       	mov    eax,ds:0xc0030fb8
c001a432:	8b 00                	mov    eax,DWORD PTR [eax]
c001a434:	03 01                	add    eax,DWORD PTR [ecx]
c001a436:	85 d2                	test   edx,edx
c001a438:	74 02                	je     c001a43c <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a43a:	03 02                	add    eax,DWORD PTR [edx]
c001a43c:	c3                   	ret    

c001a43d <Krnl::getProcessEnvPair(Process*, int)>:
c001a43d:	57                   	push   edi
c001a43e:	8b 0d b4 0f 03 c0    	mov    ecx,DWORD PTR ds:0xc0030fb4
c001a444:	56                   	push   esi
c001a445:	85 c9                	test   ecx,ecx
c001a447:	53                   	push   ebx
c001a448:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a44c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a450:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a456:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a45a:	8b 02                	mov    eax,DWORD PTR [edx]
c001a45c:	75 47                	jne    c001a4a5 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a45e:	39 c3                	cmp    ebx,eax
c001a460:	7c 47                	jl     c001a4a9 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a462:	8b 15 b8 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030fb8
c001a468:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a46a:	01 c1                	add    ecx,eax
c001a46c:	39 d9                	cmp    ecx,ebx
c001a46e:	7e 6c                	jle    c001a4dc <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a470:	51                   	push   ecx
c001a471:	89 d9                	mov    ecx,ebx
c001a473:	29 c1                	sub    ecx,eax
c001a475:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a478:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a47c:	53                   	push   ebx
c001a47d:	68 9c ba 02 c0       	push   0xc002ba9c
c001a482:	e8 3c 89 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001a487:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a48d:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a48f:	a1 b8 0f 03 c0       	mov    eax,ds:0xc0030fb8
c001a494:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a497:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a49b:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a49e:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a4a1:	89 06                	mov    DWORD PTR [esi],eax
c001a4a3:	eb 51                	jmp    c001a4f6 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a4a5:	39 c3                	cmp    ebx,eax
c001a4a7:	7d 05                	jge    c001a4ae <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a4a9:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a4ac:	eb 20                	jmp    c001a4ce <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a4ae:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a4b0:	8d 14 07             	lea    edx,[edi+eax*1]
c001a4b3:	39 da                	cmp    edx,ebx
c001a4b5:	7e 04                	jle    c001a4bb <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a4b7:	29 c3                	sub    ebx,eax
c001a4b9:	eb 10                	jmp    c001a4cb <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a4bb:	8b 0d b8 0f 03 c0    	mov    ecx,DWORD PTR ds:0xc0030fb8
c001a4c1:	03 11                	add    edx,DWORD PTR [ecx]
c001a4c3:	39 da                	cmp    edx,ebx
c001a4c5:	7e 15                	jle    c001a4dc <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a4c7:	29 c3                	sub    ebx,eax
c001a4c9:	29 fb                	sub    ebx,edi
c001a4cb:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a4ce:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a4d2:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a4d5:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a4d8:	89 06                	mov    DWORD PTR [esi],eax
c001a4da:	eb 1d                	jmp    c001a4f9 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a4dc:	83 ec 0c             	sub    esp,0xc
c001a4df:	68 b0 ba 02 c0       	push   0xc002bab0
c001a4e4:	e8 18 00 00 00       	call   c001a501 <Krnl::panic(char const*)>
c001a4e9:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a4ef:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a4f6:	83 c4 10             	add    esp,0x10
c001a4f9:	89 f0                	mov    eax,esi
c001a4fb:	5b                   	pop    ebx
c001a4fc:	5e                   	pop    esi
c001a4fd:	5f                   	pop    edi
c001a4fe:	c2 04 00             	ret    0x4

c001a501 <Krnl::panic(char const*)>:
c001a501:	55                   	push   ebp
c001a502:	89 e5                	mov    ebp,esp
c001a504:	53                   	push   ebx
c001a505:	83 ec 0c             	sub    esp,0xc
c001a508:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a50b:	fa                   	cli    
c001a50c:	c6 05 c4 0f 03 c0 01 	mov    BYTE PTR ds:0xc0030fc4,0x1
c001a513:	53                   	push   ebx
c001a514:	c6 05 a4 d3 02 c0 00 	mov    BYTE PTR ds:0xc002d3a4,0x0
c001a51b:	68 ca ba 02 c0       	push   0xc002baca
c001a520:	e8 9e 88 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001a525:	58                   	pop    eax
c001a526:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a52b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a531:	e8 e0 66 ff ff       	call   c0010c16 <setActiveTerminal(VgaText*)>
c001a536:	83 c4 0c             	add    esp,0xc
c001a539:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a53e:	6a 01                	push   0x1
c001a540:	6a 0f                	push   0xf
c001a542:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a548:	e8 67 61 ff ff       	call   c00106b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a54d:	58                   	pop    eax
c001a54e:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a553:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a559:	e8 fe 68 ff ff       	call   c0010e5c <VgaText::clearScreen()>
c001a55e:	58                   	pop    eax
c001a55f:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a564:	5a                   	pop    edx
c001a565:	68 e3 ba 02 c0       	push   0xc002bae3
c001a56a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a570:	e8 2d 6a ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a575:	59                   	pop    ecx
c001a576:	58                   	pop    eax
c001a577:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a57c:	68 88 bb 02 c0       	push   0xc002bb88
c001a581:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a587:	e8 16 6a ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a58c:	58                   	pop    eax
c001a58d:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a592:	5a                   	pop    edx
c001a593:	68 ff ba 02 c0       	push   0xc002baff
c001a598:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a59e:	e8 ff 69 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a5a3:	59                   	pop    ecx
c001a5a4:	58                   	pop    eax
c001a5a5:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a5aa:	53                   	push   ebx
c001a5ab:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5b1:	e8 ec 69 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a5b6:	58                   	pop    eax
c001a5b7:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a5bc:	5a                   	pop    edx
c001a5bd:	68 1f bb 02 c0       	push   0xc002bb1f
c001a5c2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5c8:	e8 d5 69 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a5cd:	a1 c0 0f 03 c0       	mov    eax,ds:0xc0030fc0
c001a5d2:	83 c4 10             	add    esp,0x10
c001a5d5:	85 c0                	test   eax,eax
c001a5d7:	74 02                	je     c001a5db <Krnl::panic(char const*)+0xda>
c001a5d9:	ff d0                	call   eax
c001a5db:	83 ec 0c             	sub    esp,0xc
c001a5de:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a5e1:	e8 fd 2f 00 00       	call   c001d5e3 <Thr::getDriverNameFromAddress(unsigned long)>
c001a5e6:	83 c4 10             	add    esp,0x10
c001a5e9:	89 c3                	mov    ebx,eax
c001a5eb:	85 c0                	test   eax,eax
c001a5ed:	0f 84 50 02 00 00    	je     c001a843 <Krnl::panic(char const*)+0x342>
c001a5f3:	83 ec 08             	sub    esp,0x8
c001a5f6:	8b 15 d4 19 03 c0    	mov    edx,DWORD PTR ds:0xc00319d4
c001a5fc:	68 c4 bb 02 c0       	push   0xc002bbc4
c001a601:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a607:	e8 96 69 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a60c:	58                   	pop    eax
c001a60d:	5a                   	pop    edx
c001a60e:	8b 15 d4 19 03 c0    	mov    edx,DWORD PTR ds:0xc00319d4
c001a614:	68 ff ba 02 c0       	push   0xc002baff
c001a619:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a61f:	e8 7e 69 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a624:	59                   	pop    ecx
c001a625:	58                   	pop    eax
c001a626:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a62b:	53                   	push   ebx
c001a62c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a632:	e8 6b 69 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a637:	83 c4 10             	add    esp,0x10
c001a63a:	83 ec 08             	sub    esp,0x8
c001a63d:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a642:	68 1e bb 02 c0       	push   0xc002bb1e
c001a647:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a64d:	e8 50 69 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a652:	58                   	pop    eax
c001a653:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a658:	5a                   	pop    edx
c001a659:	68 1c bc 02 c0       	push   0xc002bc1c
c001a65e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a664:	e8 39 69 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a669:	59                   	pop    ecx
c001a66a:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a66f:	5b                   	pop    ebx
c001a670:	68 5c bc 02 c0       	push   0xc002bc5c
c001a675:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a67b:	e8 22 69 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a680:	58                   	pop    eax
c001a681:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a686:	5a                   	pop    edx
c001a687:	68 0a bb 02 c0       	push   0xc002bb0a
c001a68c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a692:	e8 0b 69 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a697:	59                   	pop    ecx
c001a698:	5b                   	pop    ebx
c001a699:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a69c:	68 22 bb 02 c0       	push   0xc002bb22
c001a6a1:	e8 1d 87 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001a6a6:	58                   	pop    eax
c001a6a7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a6aa:	5a                   	pop    edx
c001a6ab:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a6ae:	68 2b bb 02 c0       	push   0xc002bb2b
c001a6b3:	e8 0b 87 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001a6b8:	59                   	pop    ecx
c001a6b9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a6bc:	5b                   	pop    ebx
c001a6bd:	8b 00                	mov    eax,DWORD PTR [eax]
c001a6bf:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a6c2:	68 34 bb 02 c0       	push   0xc002bb34
c001a6c7:	e8 f7 86 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001a6cc:	58                   	pop    eax
c001a6cd:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a6d2:	5a                   	pop    edx
c001a6d3:	68 a0 bc 02 c0       	push   0xc002bca0
c001a6d8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6de:	e8 bf 68 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a6e3:	59                   	pop    ecx
c001a6e4:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a6e9:	5b                   	pop    ebx
c001a6ea:	68 3d bb 02 c0       	push   0xc002bb3d
c001a6ef:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6f5:	e8 a8 68 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a6fa:	0f 20 c0             	mov    eax,cr0
c001a6fd:	5a                   	pop    edx
c001a6fe:	59                   	pop    ecx
c001a6ff:	50                   	push   eax
c001a700:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a705:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a70b:	e8 b8 68 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c001a710:	5b                   	pop    ebx
c001a711:	58                   	pop    eax
c001a712:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a717:	68 47 bb 02 c0       	push   0xc002bb47
c001a71c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a722:	e8 7b 68 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a727:	0f 20 d0             	mov    eax,cr2
c001a72a:	5a                   	pop    edx
c001a72b:	59                   	pop    ecx
c001a72c:	50                   	push   eax
c001a72d:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a732:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a738:	e8 8b 68 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c001a73d:	5b                   	pop    ebx
c001a73e:	58                   	pop    eax
c001a73f:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a744:	68 51 bb 02 c0       	push   0xc002bb51
c001a749:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a74f:	e8 4e 68 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a754:	0f 20 d8             	mov    eax,cr3
c001a757:	5a                   	pop    edx
c001a758:	59                   	pop    ecx
c001a759:	50                   	push   eax
c001a75a:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a75f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a765:	e8 5e 68 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c001a76a:	5b                   	pop    ebx
c001a76b:	58                   	pop    eax
c001a76c:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a771:	68 64 bb 02 c0       	push   0xc002bb64
c001a776:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a77c:	e8 21 68 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a781:	0f 20 e0             	mov    eax,cr4
c001a784:	5a                   	pop    edx
c001a785:	59                   	pop    ecx
c001a786:	50                   	push   eax
c001a787:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a78c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a792:	e8 31 68 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c001a797:	5b                   	pop    ebx
c001a798:	58                   	pop    eax
c001a799:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a79e:	68 6e bb 02 c0       	push   0xc002bb6e
c001a7a3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7a9:	e8 f4 67 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a7ae:	5a                   	pop    edx
c001a7af:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a7b4:	59                   	pop    ecx
c001a7b5:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a7bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a7be:	50                   	push   eax
c001a7bf:	e8 04 68 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c001a7c4:	5b                   	pop    ebx
c001a7c5:	58                   	pop    eax
c001a7c6:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a7cb:	68 85 bb 02 c0       	push   0xc002bb85
c001a7d0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7d6:	e8 c7 67 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a7db:	5a                   	pop    edx
c001a7dc:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a7e1:	59                   	pop    ecx
c001a7e2:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a7e8:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a7eb:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a7ee:	50                   	push   eax
c001a7ef:	e8 d4 67 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c001a7f4:	5b                   	pop    ebx
c001a7f5:	58                   	pop    eax
c001a7f6:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a7fb:	68 85 bb 02 c0       	push   0xc002bb85
c001a800:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a806:	e8 97 67 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a80b:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a810:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a813:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a819:	8b 12                	mov    edx,DWORD PTR [edx]
c001a81b:	59                   	pop    ecx
c001a81c:	5b                   	pop    ebx
c001a81d:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a820:	50                   	push   eax
c001a821:	e8 a2 67 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c001a826:	83 c4 10             	add    esp,0x10
c001a829:	b2 fe                	mov    dl,0xfe
c001a82b:	e4 60                	in     al,0x60
c001a82d:	3c 1c                	cmp    al,0x1c
c001a82f:	74 04                	je     c001a835 <Krnl::panic(char const*)+0x334>
c001a831:	3c 5a                	cmp    al,0x5a
c001a833:	75 f6                	jne    c001a82b <Krnl::panic(char const*)+0x32a>
c001a835:	e4 64                	in     al,0x64
c001a837:	a8 02                	test   al,0x2
c001a839:	75 fa                	jne    c001a835 <Krnl::panic(char const*)+0x334>
c001a83b:	88 d0                	mov    al,dl
c001a83d:	e6 64                	out    0x64,al
c001a83f:	fa                   	cli    
c001a840:	f4                   	hlt    
c001a841:	eb e8                	jmp    c001a82b <Krnl::panic(char const*)+0x32a>
c001a843:	50                   	push   eax
c001a844:	50                   	push   eax
c001a845:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a84a:	68 f0 bb 02 c0       	push   0xc002bbf0
c001a84f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a855:	e8 48 67 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a85a:	58                   	pop    eax
c001a85b:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a860:	5a                   	pop    edx
c001a861:	68 ff ba 02 c0       	push   0xc002baff
c001a866:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a86c:	e8 31 67 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a871:	59                   	pop    ecx
c001a872:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a877:	5b                   	pop    ebx
c001a878:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a87b:	83 c0 0c             	add    eax,0xc
c001a87e:	50                   	push   eax
c001a87f:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a884:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a88a:	e8 13 67 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a88f:	83 c4 10             	add    esp,0x10
c001a892:	e9 a3 fd ff ff       	jmp    c001a63a <Krnl::panic(char const*)+0x139>

c001a897 <Net::switchEndian16(unsigned short)>:
c001a897:	83 ec 04             	sub    esp,0x4
c001a89a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a89e:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a8a2:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a8a6:	c1 f8 08             	sar    eax,0x8
c001a8a9:	89 c2                	mov    edx,eax
c001a8ab:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a8af:	c1 e0 08             	shl    eax,0x8
c001a8b2:	09 d0                	or     eax,edx
c001a8b4:	83 c4 04             	add    esp,0x4
c001a8b7:	c3                   	ret    

c001a8b8 <Net::switchEndian32(unsigned int)>:
c001a8b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8bc:	c1 e8 18             	shr    eax,0x18
c001a8bf:	89 c2                	mov    edx,eax
c001a8c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8c5:	c1 e0 08             	shl    eax,0x8
c001a8c8:	25 00 00 ff 00       	and    eax,0xff0000
c001a8cd:	09 c2                	or     edx,eax
c001a8cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8d3:	c1 e8 08             	shr    eax,0x8
c001a8d6:	25 00 ff 00 00       	and    eax,0xff00
c001a8db:	09 c2                	or     edx,eax
c001a8dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8e1:	c1 e0 18             	shl    eax,0x18
c001a8e4:	09 d0                	or     eax,edx
c001a8e6:	c3                   	ret    

c001a8e7 <Net::crc32Calc(unsigned char*, int)>:
c001a8e7:	83 ec 10             	sub    esp,0x10
c001a8ea:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a8ef:	75 07                	jne    c001a8f8 <Net::crc32Calc(unsigned char*, int)+0x11>
c001a8f1:	b8 00 00 00 00       	mov    eax,0x0
c001a8f6:	eb 7c                	jmp    c001a974 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a8f8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a8fd:	7f 07                	jg     c001a906 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a8ff:	b8 00 00 00 00       	mov    eax,0x0
c001a904:	eb 6e                	jmp    c001a974 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a906:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a90e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a916:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a91a:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a91e:	7d 4e                	jge    c001a96e <Net::crc32Calc(unsigned char*, int)+0x87>
c001a920:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a924:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a928:	01 d0                	add    eax,edx
c001a92a:	8a 00                	mov    al,BYTE PTR [eax]
c001a92c:	0f b6 c0             	movzx  eax,al
c001a92f:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a933:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a93b:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a940:	7f 26                	jg     c001a968 <Net::crc32Calc(unsigned char*, int)+0x81>
c001a942:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a946:	83 e0 01             	and    eax,0x1
c001a949:	74 0d                	je     c001a958 <Net::crc32Calc(unsigned char*, int)+0x71>
c001a94b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a94f:	d1 e8                	shr    eax,1
c001a951:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a956:	eb 06                	jmp    c001a95e <Net::crc32Calc(unsigned char*, int)+0x77>
c001a958:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a95c:	d1 e8                	shr    eax,1
c001a95e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a962:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a966:	eb d3                	jmp    c001a93b <Net::crc32Calc(unsigned char*, int)+0x54>
c001a968:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a96c:	eb a8                	jmp    c001a916 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a96e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a972:	f7 d0                	not    eax
c001a974:	83 c4 10             	add    esp,0x10
c001a977:	c3                   	ret    

c001a978 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a978:	83 ec 1c             	sub    esp,0x1c
c001a97b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a97f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a983:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a98b:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001a990:	7f 14                	jg     c001a9a6 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001a992:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a996:	8d 50 01             	lea    edx,[eax+0x1]
c001a999:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a99d:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a9a0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a9a4:	eb e5                	jmp    c001a98b <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001a9a6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a9aa:	8d 50 01             	lea    edx,[eax+0x1]
c001a9ad:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a9b1:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a9b4:	83 ec 04             	sub    esp,0x4
c001a9b7:	6a 06                	push   0x6
c001a9b9:	8d 44 24 36          	lea    eax,[esp+0x36]
c001a9bd:	50                   	push   eax
c001a9be:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a9c2:	e8 85 5d fe ff       	call   c000074c <memcpy>
c001a9c7:	83 c4 10             	add    esp,0x10
c001a9ca:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001a9cf:	83 ec 04             	sub    esp,0x4
c001a9d2:	6a 06                	push   0x6
c001a9d4:	8d 44 24 30          	lea    eax,[esp+0x30]
c001a9d8:	50                   	push   eax
c001a9d9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a9dd:	e8 6a 5d fe ff       	call   c000074c <memcpy>
c001a9e2:	83 c4 10             	add    esp,0x10
c001a9e5:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001a9ea:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a9ee:	0f b7 c0             	movzx  eax,ax
c001a9f1:	c1 f8 08             	sar    eax,0x8
c001a9f4:	89 c1                	mov    ecx,eax
c001a9f6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a9fa:	8d 50 01             	lea    edx,[eax+0x1]
c001a9fd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aa01:	88 ca                	mov    dl,cl
c001aa03:	88 10                	mov    BYTE PTR [eax],dl
c001aa05:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001aa09:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa0d:	8d 48 01             	lea    ecx,[eax+0x1]
c001aa10:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001aa14:	88 10                	mov    BYTE PTR [eax],dl
c001aa16:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001aa1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa1e:	83 ec 04             	sub    esp,0x4
c001aa21:	52                   	push   edx
c001aa22:	50                   	push   eax
c001aa23:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aa27:	e8 20 5d fe ff       	call   c000074c <memcpy>
c001aa2c:	83 c4 10             	add    esp,0x10
c001aa2f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001aa33:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001aa37:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa3b:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001aa3f:	83 ec 08             	sub    esp,0x8
c001aa42:	50                   	push   eax
c001aa43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001aa47:	e8 9b fe ff ff       	call   c001a8e7 <Net::crc32Calc(unsigned char*, int)>
c001aa4c:	83 c4 10             	add    esp,0x10
c001aa4f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aa53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa57:	c1 e8 18             	shr    eax,0x18
c001aa5a:	89 c1                	mov    ecx,eax
c001aa5c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa60:	8d 50 01             	lea    edx,[eax+0x1]
c001aa63:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aa67:	88 ca                	mov    dl,cl
c001aa69:	88 10                	mov    BYTE PTR [eax],dl
c001aa6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa6f:	c1 e8 10             	shr    eax,0x10
c001aa72:	89 c1                	mov    ecx,eax
c001aa74:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa78:	8d 50 01             	lea    edx,[eax+0x1]
c001aa7b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aa7f:	88 ca                	mov    dl,cl
c001aa81:	88 10                	mov    BYTE PTR [eax],dl
c001aa83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa87:	c1 e8 08             	shr    eax,0x8
c001aa8a:	89 c1                	mov    ecx,eax
c001aa8c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa90:	8d 50 01             	lea    edx,[eax+0x1]
c001aa93:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aa97:	88 ca                	mov    dl,cl
c001aa99:	88 10                	mov    BYTE PTR [eax],dl
c001aa9b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa9f:	8d 50 01             	lea    edx,[eax+0x1]
c001aaa2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aaa6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001aaaa:	88 10                	mov    BYTE PTR [eax],dl
c001aaac:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001aab0:	83 c4 1c             	add    esp,0x1c
c001aab3:	c3                   	ret    

c001aab4 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001aab4:	83 ec 2c             	sub    esp,0x2c
c001aab7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aabb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001aabf:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001aac4:	83 ec 04             	sub    esp,0x4
c001aac7:	6a 06                	push   0x6
c001aac9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001aacd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001aad1:	83 c0 0e             	add    eax,0xe
c001aad4:	50                   	push   eax
c001aad5:	e8 72 5c fe ff       	call   c000074c <memcpy>
c001aada:	83 c4 10             	add    esp,0x10
c001aadd:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001aae2:	83 ec 04             	sub    esp,0x4
c001aae5:	6a 06                	push   0x6
c001aae7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001aaeb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001aaef:	83 c0 08             	add    eax,0x8
c001aaf2:	50                   	push   eax
c001aaf3:	e8 54 5c fe ff       	call   c000074c <memcpy>
c001aaf8:	83 c4 10             	add    esp,0x10
c001aafb:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ab00:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab04:	8d 50 01             	lea    edx,[eax+0x1]
c001ab07:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ab0b:	8a 00                	mov    al,BYTE PTR [eax]
c001ab0d:	0f b6 c0             	movzx  eax,al
c001ab10:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001ab15:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab19:	8d 50 01             	lea    edx,[eax+0x1]
c001ab1c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ab20:	8a 00                	mov    al,BYTE PTR [eax]
c001ab22:	0f b6 c0             	movzx  eax,al
c001ab25:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001ab2a:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001ab2f:	c1 e0 08             	shl    eax,0x8
c001ab32:	89 c2                	mov    edx,eax
c001ab34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ab38:	09 d0                	or     eax,edx
c001ab3a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ab3e:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001ab42:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001ab47:	75 3a                	jne    c001ab83 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001ab49:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ab4d:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ab50:	66 3d dc 05          	cmp    ax,0x5dc
c001ab54:	77 10                	ja     c001ab66 <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001ab56:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ab5a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ab5d:	0f b7 c0             	movzx  eax,ax
c001ab60:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001ab64:	eb 1d                	jmp    c001ab83 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001ab66:	83 ec 0c             	sub    esp,0xc
c001ab69:	68 c8 bc 02 c0       	push   0xc002bcc8
c001ab6e:	e8 50 82 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001ab73:	83 c4 10             	add    esp,0x10
c001ab76:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ab7a:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001ab7e:	e9 c0 00 00 00       	jmp    c001ac43 <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001ab83:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ab87:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ab8b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ab8d:	83 ec 04             	sub    esp,0x4
c001ab90:	52                   	push   edx
c001ab91:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ab95:	50                   	push   eax
c001ab96:	e8 b1 5b fe ff       	call   c000074c <memcpy>
c001ab9b:	83 c4 10             	add    esp,0x10
c001ab9e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aba2:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001aba6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001abaa:	8d 50 01             	lea    edx,[eax+0x1]
c001abad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001abb1:	8a 00                	mov    al,BYTE PTR [eax]
c001abb3:	0f b6 c0             	movzx  eax,al
c001abb6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001abba:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001abbe:	8d 50 01             	lea    edx,[eax+0x1]
c001abc1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001abc5:	8a 00                	mov    al,BYTE PTR [eax]
c001abc7:	0f b6 c0             	movzx  eax,al
c001abca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001abce:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001abd2:	8d 50 01             	lea    edx,[eax+0x1]
c001abd5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001abd9:	8a 00                	mov    al,BYTE PTR [eax]
c001abdb:	0f b6 c0             	movzx  eax,al
c001abde:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001abe2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001abe6:	8d 50 01             	lea    edx,[eax+0x1]
c001abe9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001abed:	8a 00                	mov    al,BYTE PTR [eax]
c001abef:	0f b6 c0             	movzx  eax,al
c001abf2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001abf6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001abfa:	c1 e0 18             	shl    eax,0x18
c001abfd:	89 c2                	mov    edx,eax
c001abff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac03:	c1 e0 10             	shl    eax,0x10
c001ac06:	09 c2                	or     edx,eax
c001ac08:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac0c:	c1 e0 08             	shl    eax,0x8
c001ac0f:	09 d0                	or     eax,edx
c001ac11:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001ac15:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ac19:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac1d:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001ac21:	83 e8 04             	sub    eax,0x4
c001ac24:	83 ec 08             	sub    esp,0x8
c001ac27:	50                   	push   eax
c001ac28:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001ac2c:	e8 b6 fc ff ff       	call   c001a8e7 <Net::crc32Calc(unsigned char*, int)>
c001ac31:	83 c4 10             	add    esp,0x10
c001ac34:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001ac38:	0f 94 c2             	sete   dl
c001ac3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac3f:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001ac42:	90                   	nop
c001ac43:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac47:	83 c4 2c             	add    esp,0x2c
c001ac4a:	c2 04 00             	ret    0x4

c001ac4d <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001ac4d:	55                   	push   ebp
c001ac4e:	57                   	push   edi
c001ac4f:	56                   	push   esi
c001ac50:	53                   	push   ebx
c001ac51:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ac57:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001ac5e:	8a 1e                	mov    bl,BYTE PTR [esi]
c001ac60:	8d 6e 01             	lea    ebp,[esi+0x1]
c001ac63:	80 fb 40             	cmp    bl,0x40
c001ac66:	75 1b                	jne    c001ac83 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001ac68:	8a 16                	mov    dl,BYTE PTR [esi]
c001ac6a:	84 d2                	test   dl,dl
c001ac6c:	0f 84 f1 00 00 00    	je     c001ad63 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ac72:	8d 46 01             	lea    eax,[esi+0x1]
c001ac75:	80 fa 3a             	cmp    dl,0x3a
c001ac78:	74 04                	je     c001ac7e <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001ac7a:	89 c6                	mov    esi,eax
c001ac7c:	eb ea                	jmp    c001ac68 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001ac7e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ac81:	89 c6                	mov    esi,eax
c001ac83:	50                   	push   eax
c001ac84:	6a 40                	push   0x40
c001ac86:	6a 00                	push   0x0
c001ac88:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ac8c:	50                   	push   eax
c001ac8d:	e8 ee 5a fe ff       	call   c0000780 <memset>
c001ac92:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001ac99:	31 c0                	xor    eax,eax
c001ac9b:	83 c4 10             	add    esp,0x10
c001ac9e:	8a 0f                	mov    cl,BYTE PTR [edi]
c001aca0:	84 c9                	test   cl,cl
c001aca2:	0f 84 bb 00 00 00    	je     c001ad63 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001aca8:	3d c7 00 00 00       	cmp    eax,0xc7
c001acad:	0f 8f b0 00 00 00    	jg     c001ad63 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001acb3:	80 f9 0a             	cmp    cl,0xa
c001acb6:	0f 85 98 00 00 00    	jne    c001ad54 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001acbc:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001acc1:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001acc5:	a8 df                	test   al,0xdf
c001acc7:	0f 94 c1             	sete   cl
c001acca:	3c 23                	cmp    al,0x23
c001accc:	0f 94 c2             	sete   dl
c001accf:	08 d1                	or     cl,dl
c001acd1:	75 4a                	jne    c001ad1d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001acd3:	8d 50 f7             	lea    edx,[eax-0x9]
c001acd6:	80 fa 01             	cmp    dl,0x1
c001acd9:	76 42                	jbe    c001ad1d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001acdb:	3c 5b                	cmp    al,0x5b
c001acdd:	75 42                	jne    c001ad21 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001acdf:	80 fb 40             	cmp    bl,0x40
c001ace2:	75 39                	jne    c001ad1d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ace4:	83 ec 0c             	sub    esp,0xc
c001ace7:	8d 54 24 65          	lea    edx,[esp+0x65]
c001aceb:	52                   	push   edx
c001acec:	e8 ab 5a fe ff       	call   c000079c <strlen>
c001acf1:	83 c4 10             	add    esp,0x10
c001acf4:	83 f8 3f             	cmp    eax,0x3f
c001acf7:	77 6a                	ja     c001ad63 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001acf9:	50                   	push   eax
c001acfa:	50                   	push   eax
c001acfb:	8d 54 24 61          	lea    edx,[esp+0x61]
c001acff:	52                   	push   edx
c001ad00:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ad04:	52                   	push   edx
c001ad05:	e8 32 5b fe ff       	call   c000083c <strcpy>
c001ad0a:	58                   	pop    eax
c001ad0b:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ad0f:	52                   	push   edx
c001ad10:	e8 87 5a fe ff       	call   c000079c <strlen>
c001ad15:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001ad1a:	83 c4 10             	add    esp,0x10
c001ad1d:	31 d2                	xor    edx,edx
c001ad1f:	eb 3a                	jmp    c001ad5b <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001ad21:	80 fb 40             	cmp    bl,0x40
c001ad24:	74 06                	je     c001ad2c <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001ad26:	8d 44 24 58          	lea    eax,[esp+0x58]
c001ad2a:	eb 20                	jmp    c001ad4c <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001ad2c:	50                   	push   eax
c001ad2d:	50                   	push   eax
c001ad2e:	55                   	push   ebp
c001ad2f:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ad33:	50                   	push   eax
c001ad34:	e8 8f 5b fe ff       	call   c00008c8 <strcmp>
c001ad39:	83 c4 10             	add    esp,0x10
c001ad3c:	85 c0                	test   eax,eax
c001ad3e:	75 dd                	jne    c001ad1d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad40:	eb e4                	jmp    c001ad26 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001ad42:	8d 50 01             	lea    edx,[eax+0x1]
c001ad45:	80 f9 3d             	cmp    cl,0x3d
c001ad48:	74 1d                	je     c001ad67 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001ad4a:	89 d0                	mov    eax,edx
c001ad4c:	8a 08                	mov    cl,BYTE PTR [eax]
c001ad4e:	84 c9                	test   cl,cl
c001ad50:	75 f0                	jne    c001ad42 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001ad52:	eb 0f                	jmp    c001ad63 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad54:	8d 50 01             	lea    edx,[eax+0x1]
c001ad57:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001ad5b:	47                   	inc    edi
c001ad5c:	89 d0                	mov    eax,edx
c001ad5e:	e9 3b ff ff ff       	jmp    c001ac9e <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001ad63:	31 c0                	xor    eax,eax
c001ad65:	eb 33                	jmp    c001ad9a <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001ad67:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ad6b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001ad6e:	50                   	push   eax
c001ad6f:	50                   	push   eax
c001ad70:	8d 44 24 60          	lea    eax,[esp+0x60]
c001ad74:	50                   	push   eax
c001ad75:	56                   	push   esi
c001ad76:	e8 4d 5b fe ff       	call   c00008c8 <strcmp>
c001ad7b:	83 c4 10             	add    esp,0x10
c001ad7e:	85 c0                	test   eax,eax
c001ad80:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ad84:	75 97                	jne    c001ad1d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad86:	51                   	push   ecx
c001ad87:	51                   	push   ecx
c001ad88:	52                   	push   edx
c001ad89:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001ad90:	e8 a7 5a fe ff       	call   c000083c <strcpy>
c001ad95:	83 c4 10             	add    esp,0x10
c001ad98:	b0 01                	mov    al,0x1
c001ad9a:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ada0:	5b                   	pop    ebx
c001ada1:	5e                   	pop    esi
c001ada2:	5f                   	pop    edi
c001ada3:	5d                   	pop    ebp
c001ada4:	c3                   	ret    

c001ada5 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001ada5:	57                   	push   edi
c001ada6:	56                   	push   esi
c001ada7:	53                   	push   ebx
c001ada8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001adae:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001adb5:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001adbc:	53                   	push   ebx
c001adbd:	e8 da 59 fe ff       	call   c000079c <strlen>
c001adc2:	89 34 24             	mov    DWORD PTR [esp],esi
c001adc5:	89 c7                	mov    edi,eax
c001adc7:	e8 d0 59 fe ff       	call   c000079c <strlen>
c001adcc:	83 c4 10             	add    esp,0x10
c001adcf:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001add3:	3d ff 00 00 00       	cmp    eax,0xff
c001add8:	0f 87 d3 00 00 00    	ja     c001aeb1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001adde:	57                   	push   edi
c001addf:	57                   	push   edi
c001ade0:	56                   	push   esi
c001ade1:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001ade5:	56                   	push   esi
c001ade6:	e8 51 5a fe ff       	call   c000083c <strcpy>
c001adeb:	58                   	pop    eax
c001adec:	5a                   	pop    edx
c001aded:	68 11 c2 02 c0       	push   0xc002c211
c001adf2:	56                   	push   esi
c001adf3:	e8 84 5b fe ff       	call   c000097c <strcat>
c001adf8:	59                   	pop    ecx
c001adf9:	5f                   	pop    edi
c001adfa:	53                   	push   ebx
c001adfb:	56                   	push   esi
c001adfc:	e8 7b 5b fe ff       	call   c000097c <strcat>
c001ae01:	58                   	pop    eax
c001ae02:	5a                   	pop    edx
c001ae03:	68 14 bd 02 c0       	push   0xc002bd14
c001ae08:	56                   	push   esi
c001ae09:	e8 6e 5b fe ff       	call   c000097c <strcat>
c001ae0e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ae15:	e8 31 4a ff ff       	call   c000f84b <malloc>
c001ae1a:	83 c4 0c             	add    esp,0xc
c001ae1d:	89 c3                	mov    ebx,eax
c001ae1f:	ff 35 d4 19 03 c0    	push   DWORD PTR ds:0xc00319d4
c001ae25:	56                   	push   esi
c001ae26:	50                   	push   eax
c001ae27:	e8 f6 84 ff ff       	call   c0013322 <File::File(char const*, Process*)>
c001ae2c:	83 c4 10             	add    esp,0x10
c001ae2f:	85 db                	test   ebx,ebx
c001ae31:	74 7e                	je     c001aeb1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001ae33:	51                   	push   ecx
c001ae34:	51                   	push   ecx
c001ae35:	6a 01                	push   0x1
c001ae37:	53                   	push   ebx
c001ae38:	e8 49 85 ff ff       	call   c0013386 <File::open(FileOpenMode)>
c001ae3d:	83 c4 10             	add    esp,0x10
c001ae40:	85 c0                	test   eax,eax
c001ae42:	74 08                	je     c001ae4c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001ae44:	83 ec 0c             	sub    esp,0xc
c001ae47:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae49:	53                   	push   ebx
c001ae4a:	eb 5f                	jmp    c001aeab <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001ae4c:	52                   	push   edx
c001ae4d:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ae51:	50                   	push   eax
c001ae52:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ae56:	50                   	push   eax
c001ae57:	53                   	push   ebx
c001ae58:	e8 d5 87 ff ff       	call   c0013632 <File::stat(unsigned long long*, bool*)>
c001ae5d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ae61:	83 c4 10             	add    esp,0x10
c001ae64:	89 c1                	mov    ecx,eax
c001ae66:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001ae6a:	74 31                	je     c001ae9d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001ae6c:	83 ec 0c             	sub    esp,0xc
c001ae6f:	50                   	push   eax
c001ae70:	e8 d6 49 ff ff       	call   c000f84b <malloc>
c001ae75:	89 c6                	mov    esi,eax
c001ae77:	58                   	pop    eax
c001ae78:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae7a:	8d 54 24 20          	lea    edx,[esp+0x20]
c001ae7e:	52                   	push   edx
c001ae7f:	56                   	push   esi
c001ae80:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ae84:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ae88:	53                   	push   ebx
c001ae89:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ae8c:	83 c4 20             	add    esp,0x20
c001ae8f:	85 c0                	test   eax,eax
c001ae91:	75 0a                	jne    c001ae9d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001ae93:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ae97:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001ae9b:	74 18                	je     c001aeb5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001ae9d:	83 ec 0c             	sub    esp,0xc
c001aea0:	53                   	push   ebx
c001aea1:	e8 3e 85 ff ff       	call   c00133e4 <File::close()>
c001aea6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aea8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aeab:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001aeae:	83 c4 10             	add    esp,0x10
c001aeb1:	31 c0                	xor    eax,eax
c001aeb3:	eb 3b                	jmp    c001aef0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001aeb5:	83 ec 0c             	sub    esp,0xc
c001aeb8:	53                   	push   ebx
c001aeb9:	e8 26 85 ff ff       	call   c00133e4 <File::close()>
c001aebe:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aec0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aec3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001aec6:	83 c4 0c             	add    esp,0xc
c001aec9:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001aed0:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001aed7:	56                   	push   esi
c001aed8:	e8 70 fd ff ff       	call   c001ac4d <Reg::findLineFromLoadedData(char*, char*, char*)>
c001aedd:	89 34 24             	mov    DWORD PTR [esp],esi
c001aee0:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001aee4:	e8 72 49 ff ff       	call   c000f85b <free>
c001aee9:	83 c4 10             	add    esp,0x10
c001aeec:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001aef0:	81 c4 20 01 00 00    	add    esp,0x120
c001aef6:	5b                   	pop    ebx
c001aef7:	5e                   	pop    esi
c001aef8:	5f                   	pop    edi
c001aef9:	c3                   	ret    

c001aefa <Reg::getLine(char*, char*, char*)>:
c001aefa:	57                   	push   edi
c001aefb:	56                   	push   esi
c001aefc:	53                   	push   ebx
c001aefd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001af01:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001af05:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001af09:	57                   	push   edi
c001af0a:	56                   	push   esi
c001af0b:	53                   	push   ebx
c001af0c:	68 19 bd 02 c0       	push   0xc002bd19
c001af11:	e8 8f fe ff ff       	call   c001ada5 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001af16:	83 c4 10             	add    esp,0x10
c001af19:	84 c0                	test   al,al
c001af1b:	75 10                	jne    c001af2d <Reg::getLine(char*, char*, char*)+0x33>
c001af1d:	57                   	push   edi
c001af1e:	56                   	push   esi
c001af1f:	53                   	push   ebx
c001af20:	68 3e bd 02 c0       	push   0xc002bd3e
c001af25:	e8 7b fe ff ff       	call   c001ada5 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001af2a:	83 c4 10             	add    esp,0x10
c001af2d:	5b                   	pop    ebx
c001af2e:	5e                   	pop    esi
c001af2f:	5f                   	pop    edi
c001af30:	c3                   	ret    

c001af31 <Reg::readInt(char*, char*, int*)>:
c001af31:	55                   	push   ebp
c001af32:	57                   	push   edi
c001af33:	56                   	push   esi
c001af34:	53                   	push   ebx
c001af35:	81 ec f0 00 00 00    	sub    esp,0xf0
c001af3b:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001af3f:	57                   	push   edi
c001af40:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001af47:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001af4e:	e8 a7 ff ff ff       	call   c001aefa <Reg::getLine(char*, char*, char*)>
c001af53:	83 c4 10             	add    esp,0x10
c001af56:	84 c0                	test   al,al
c001af58:	0f 84 b3 00 00 00    	je     c001b011 <Reg::readInt(char*, char*, int*)+0xe0>
c001af5e:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001af62:	80 fa 2b             	cmp    dl,0x2b
c001af65:	74 0c                	je     c001af73 <Reg::readInt(char*, char*, int*)+0x42>
c001af67:	80 fa 2d             	cmp    dl,0x2d
c001af6a:	75 0e                	jne    c001af7a <Reg::readInt(char*, char*, int*)+0x49>
c001af6c:	ba 01 00 00 00       	mov    edx,0x1
c001af71:	eb 0b                	jmp    c001af7e <Reg::readInt(char*, char*, int*)+0x4d>
c001af73:	ba 01 00 00 00       	mov    edx,0x1
c001af78:	eb 02                	jmp    c001af7c <Reg::readInt(char*, char*, int*)+0x4b>
c001af7a:	31 d2                	xor    edx,edx
c001af7c:	31 c0                	xor    eax,eax
c001af7e:	be 0a 00 00 00       	mov    esi,0xa
c001af83:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001af88:	75 20                	jne    c001afaa <Reg::readInt(char*, char*, int*)+0x79>
c001af8a:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001af8e:	80 f9 78             	cmp    cl,0x78
c001af91:	75 0a                	jne    c001af9d <Reg::readInt(char*, char*, int*)+0x6c>
c001af93:	83 c2 02             	add    edx,0x2
c001af96:	be 10 00 00 00       	mov    esi,0x10
c001af9b:	eb 0d                	jmp    c001afaa <Reg::readInt(char*, char*, int*)+0x79>
c001af9d:	80 f9 62             	cmp    cl,0x62
c001afa0:	75 08                	jne    c001afaa <Reg::readInt(char*, char*, int*)+0x79>
c001afa2:	83 c2 02             	add    edx,0x2
c001afa5:	be 02 00 00 00       	mov    esi,0x2
c001afaa:	01 d7                	add    edi,edx
c001afac:	31 d2                	xor    edx,edx
c001afae:	8a 1f                	mov    bl,BYTE PTR [edi]
c001afb0:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001afb4:	80 fb 0d             	cmp    bl,0xd
c001afb7:	0f 94 c3             	sete   bl
c001afba:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001afbf:	0f 94 c1             	sete   cl
c001afc2:	08 cb                	or     bl,cl
c001afc4:	75 3a                	jne    c001b000 <Reg::readInt(char*, char*, int*)+0xcf>
c001afc6:	0f af d6             	imul   edx,esi
c001afc9:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001afce:	83 fe 10             	cmp    esi,0x10
c001afd1:	75 26                	jne    c001aff9 <Reg::readInt(char*, char*, int*)+0xc8>
c001afd3:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001afd7:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001afda:	89 e9                	mov    ecx,ebp
c001afdc:	80 f9 05             	cmp    cl,0x5
c001afdf:	77 06                	ja     c001afe7 <Reg::readInt(char*, char*, int*)+0xb6>
c001afe1:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001afe5:	eb 16                	jmp    c001affd <Reg::readInt(char*, char*, int*)+0xcc>
c001afe7:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001afeb:	83 e9 61             	sub    ecx,0x61
c001afee:	80 f9 05             	cmp    cl,0x5
c001aff1:	77 06                	ja     c001aff9 <Reg::readInt(char*, char*, int*)+0xc8>
c001aff3:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001aff7:	eb 04                	jmp    c001affd <Reg::readInt(char*, char*, int*)+0xcc>
c001aff9:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001affd:	47                   	inc    edi
c001affe:	eb ae                	jmp    c001afae <Reg::readInt(char*, char*, int*)+0x7d>
c001b000:	84 c0                	test   al,al
c001b002:	74 02                	je     c001b006 <Reg::readInt(char*, char*, int*)+0xd5>
c001b004:	f7 da                	neg    edx
c001b006:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b00d:	89 10                	mov    DWORD PTR [eax],edx
c001b00f:	88 d8                	mov    al,bl
c001b011:	81 c4 ec 00 00 00    	add    esp,0xec
c001b017:	5b                   	pop    ebx
c001b018:	5e                   	pop    esi
c001b019:	5f                   	pop    edi
c001b01a:	5d                   	pop    ebp
c001b01b:	c3                   	ret    

c001b01c <Reg::readString(char*, char*, char*, int)>:
c001b01c:	57                   	push   edi
c001b01d:	56                   	push   esi
c001b01e:	53                   	push   ebx
c001b01f:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b025:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b02c:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b030:	57                   	push   edi
c001b031:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b038:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b03f:	e8 b6 fe ff ff       	call   c001aefa <Reg::getLine(char*, char*, char*)>
c001b044:	83 c4 10             	add    esp,0x10
c001b047:	89 c6                	mov    esi,eax
c001b049:	84 c0                	test   al,al
c001b04b:	74 44                	je     c001b091 <Reg::readString(char*, char*, char*, int)+0x75>
c001b04d:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b054:	31 c0                	xor    eax,eax
c001b056:	4a                   	dec    edx
c001b057:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b05a:	84 c9                	test   cl,cl
c001b05c:	74 0f                	je     c001b06d <Reg::readString(char*, char*, char*, int)+0x51>
c001b05e:	39 c2                	cmp    edx,eax
c001b060:	7e 0b                	jle    c001b06d <Reg::readString(char*, char*, char*, int)+0x51>
c001b062:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b065:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b06a:	40                   	inc    eax
c001b06b:	eb ea                	jmp    c001b057 <Reg::readString(char*, char*, char*, int)+0x3b>
c001b06d:	83 ec 0c             	sub    esp,0xc
c001b070:	53                   	push   ebx
c001b071:	e8 26 57 fe ff       	call   c000079c <strlen>
c001b076:	83 c4 10             	add    esp,0x10
c001b079:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b07e:	75 11                	jne    c001b091 <Reg::readString(char*, char*, char*, int)+0x75>
c001b080:	83 ec 0c             	sub    esp,0xc
c001b083:	53                   	push   ebx
c001b084:	e8 13 57 fe ff       	call   c000079c <strlen>
c001b089:	83 c4 10             	add    esp,0x10
c001b08c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b091:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b097:	89 f0                	mov    eax,esi
c001b099:	5b                   	pop    ebx
c001b09a:	5e                   	pop    esi
c001b09b:	5f                   	pop    edi
c001b09c:	c3                   	ret    

c001b09d <Reg::readBool(char*, char*, bool*)>:
c001b09d:	83 ec 20             	sub    esp,0x20
c001b0a0:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b0a4:	50                   	push   eax
c001b0a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b0a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b0ad:	e8 7f fe ff ff       	call   c001af31 <Reg::readInt(char*, char*, int*)>
c001b0b2:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b0b7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b0bb:	0f 95 02             	setne  BYTE PTR [edx]
c001b0be:	83 c4 2c             	add    esp,0x2c
c001b0c1:	c3                   	ret    

c001b0c2 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b0c2:	53                   	push   ebx
c001b0c3:	83 ec 1c             	sub    esp,0x1c
c001b0c6:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b0ca:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b0ce:	50                   	push   eax
c001b0cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b0d3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b0d7:	e8 c1 ff ff ff       	call   c001b09d <Reg::readBool(char*, char*, bool*)>
c001b0dc:	83 c4 10             	add    esp,0x10
c001b0df:	84 c0                	test   al,al
c001b0e1:	74 04                	je     c001b0e7 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b0e3:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b0e7:	88 d8                	mov    al,bl
c001b0e9:	83 c4 18             	add    esp,0x18
c001b0ec:	5b                   	pop    ebx
c001b0ed:	c3                   	ret    

c001b0ee <Reg::readIntWithDefault(char*, char*, int)>:
c001b0ee:	53                   	push   ebx
c001b0ef:	83 ec 1c             	sub    esp,0x1c
c001b0f2:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b0f6:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b0fa:	50                   	push   eax
c001b0fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b0ff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b103:	e8 29 fe ff ff       	call   c001af31 <Reg::readInt(char*, char*, int*)>
c001b108:	83 c4 10             	add    esp,0x10
c001b10b:	84 c0                	test   al,al
c001b10d:	74 04                	je     c001b113 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b10f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b113:	89 d8                	mov    eax,ebx
c001b115:	83 c4 18             	add    esp,0x18
c001b118:	5b                   	pop    ebx
c001b119:	c3                   	ret    

c001b11a <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b11a:	57                   	push   edi
c001b11b:	56                   	push   esi
c001b11c:	53                   	push   ebx
c001b11d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b121:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b125:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b129:	56                   	push   esi
c001b12a:	53                   	push   ebx
c001b12b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b12f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b133:	e8 e4 fe ff ff       	call   c001b01c <Reg::readString(char*, char*, char*, int)>
c001b138:	83 c4 10             	add    esp,0x10
c001b13b:	84 c0                	test   al,al
c001b13d:	75 1b                	jne    c001b15a <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001b13f:	50                   	push   eax
c001b140:	56                   	push   esi
c001b141:	4e                   	dec    esi
c001b142:	6a 00                	push   0x0
c001b144:	53                   	push   ebx
c001b145:	e8 36 56 fe ff       	call   c0000780 <memset>
c001b14a:	83 c4 0c             	add    esp,0xc
c001b14d:	56                   	push   esi
c001b14e:	57                   	push   edi
c001b14f:	53                   	push   ebx
c001b150:	89 fb                	mov    ebx,edi
c001b152:	e8 f5 55 fe ff       	call   c000074c <memcpy>
c001b157:	83 c4 10             	add    esp,0x10
c001b15a:	89 d8                	mov    eax,ebx
c001b15c:	5b                   	pop    ebx
c001b15d:	5e                   	pop    esi
c001b15e:	5f                   	pop    edi
c001b15f:	c3                   	ret    

c001b160 <Sys::eject(regs*)>:
c001b160:	83 ec 0c             	sub    esp,0xc
c001b163:	83 ca ff             	or     edx,0xffffffff
c001b166:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b16a:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b16d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b172:	83 e9 41             	sub    ecx,0x41
c001b175:	83 f9 19             	cmp    ecx,0x19
c001b178:	77 18                	ja     c001b192 <Sys::eject(regs*)+0x32>
c001b17a:	8b 0c 8d 80 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1580]
c001b181:	85 c9                	test   ecx,ecx
c001b183:	74 0d                	je     c001b192 <Sys::eject(regs*)+0x32>
c001b185:	83 ec 0c             	sub    esp,0xc
c001b188:	51                   	push   ecx
c001b189:	e8 5c b4 ff ff       	call   c00165ea <LogicalDisk::eject()>
c001b18e:	83 c4 10             	add    esp,0x10
c001b191:	99                   	cdq    
c001b192:	83 c4 0c             	add    esp,0xc
c001b195:	c3                   	ret    

c001b196 <Sys::exit(regs*)>:
c001b196:	83 ec 18             	sub    esp,0x18
c001b199:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b19d:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b1a0:	e8 b4 35 00 00       	call   c001e759 <terminateTask(int)>
c001b1a5:	83 c8 ff             	or     eax,0xffffffff
c001b1a8:	83 c4 1c             	add    esp,0x1c
c001b1ab:	89 c2                	mov    edx,eax
c001b1ad:	c3                   	ret    

c001b1ae <Sys::getCwd(regs*)>:
c001b1ae:	83 ec 10             	sub    esp,0x10
c001b1b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b1b5:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b1b8:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b1bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b1c0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b1c3:	e8 5c 7f ff ff       	call   c0013124 <Fs::getcwd(Process*, char*, int)>
c001b1c8:	83 c4 1c             	add    esp,0x1c
c001b1cb:	99                   	cdq    
c001b1cc:	c3                   	ret    

c001b1cd <Sys::getPID(regs*)>:
c001b1cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b1d2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b1d5:	8b 00                	mov    eax,DWORD PTR [eax]
c001b1d7:	99                   	cdq    
c001b1d8:	c3                   	ret    

c001b1d9 <Sys::getRAMData(regs*)>:
c001b1d9:	8b 0d b4 e4 02 c0    	mov    ecx,DWORD PTR ds:0xc002e4b4
c001b1df:	6b 05 b0 e4 02 c0 64 	imul   eax,DWORD PTR ds:0xc002e4b0,0x64
c001b1e6:	99                   	cdq    
c001b1e7:	f7 f9                	idiv   ecx
c001b1e9:	c1 e0 18             	shl    eax,0x18
c001b1ec:	09 c8                	or     eax,ecx
c001b1ee:	99                   	cdq    
c001b1ef:	c3                   	ret    

c001b1f0 <Sys::loadDLL(regs*)>:
c001b1f0:	56                   	push   esi
c001b1f1:	53                   	push   ebx
c001b1f2:	31 d2                	xor    edx,edx
c001b1f4:	51                   	push   ecx
c001b1f5:	b8 01 00 00 00       	mov    eax,0x1
c001b1fa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b1fe:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b202:	0f 84 8c 00 00 00    	je     c001b294 <Sys::loadDLL(regs*)+0xa4>
c001b208:	83 ec 0c             	sub    esp,0xc
c001b20b:	68 14 01 00 00       	push   0x114
c001b210:	e8 36 46 ff ff       	call   c000f84b <malloc>
c001b215:	83 c4 0c             	add    esp,0xc
c001b218:	89 c3                	mov    ebx,eax
c001b21a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b21f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b222:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b225:	53                   	push   ebx
c001b226:	e8 f7 80 ff ff       	call   c0013322 <File::File(char const*, Process*)>
c001b22b:	83 c4 10             	add    esp,0x10
c001b22e:	31 d2                	xor    edx,edx
c001b230:	b8 02 00 00 00       	mov    eax,0x2
c001b235:	85 db                	test   ebx,ebx
c001b237:	74 5b                	je     c001b294 <Sys::loadDLL(regs*)+0xa4>
c001b239:	83 ec 0c             	sub    esp,0xc
c001b23c:	53                   	push   ebx
c001b23d:	e8 b2 83 ff ff       	call   c00135f4 <File::exists()>
c001b242:	83 c4 10             	add    esp,0x10
c001b245:	84 c0                	test   al,al
c001b247:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b249:	75 11                	jne    c001b25c <Sys::loadDLL(regs*)+0x6c>
c001b24b:	83 ec 0c             	sub    esp,0xc
c001b24e:	53                   	push   ebx
c001b24f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b252:	83 c4 10             	add    esp,0x10
c001b255:	b8 03 00 00 00       	mov    eax,0x3
c001b25a:	eb 36                	jmp    c001b292 <Sys::loadDLL(regs*)+0xa2>
c001b25c:	83 ec 0c             	sub    esp,0xc
c001b25f:	53                   	push   ebx
c001b260:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b263:	58                   	pop    eax
c001b264:	5a                   	pop    edx
c001b265:	6a 00                	push   0x0
c001b267:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b26a:	e8 c5 23 00 00       	call   c001d634 <Thr::loadDLL(char const*, bool)>
c001b26f:	83 c4 10             	add    esp,0x10
c001b272:	89 c1                	mov    ecx,eax
c001b274:	31 d2                	xor    edx,edx
c001b276:	b8 04 00 00 00       	mov    eax,0x4
c001b27b:	85 c9                	test   ecx,ecx
c001b27d:	74 15                	je     c001b294 <Sys::loadDLL(regs*)+0xa4>
c001b27f:	53                   	push   ebx
c001b280:	53                   	push   ebx
c001b281:	ff 35 68 e4 02 c0    	push   DWORD PTR ds:0xc002e468
c001b287:	51                   	push   ecx
c001b288:	e8 db 25 00 00       	call   c001d868 <Thr::executeDLL(unsigned long, void*)>
c001b28d:	83 c4 10             	add    esp,0x10
c001b290:	31 c0                	xor    eax,eax
c001b292:	31 d2                	xor    edx,edx
c001b294:	59                   	pop    ecx
c001b295:	5b                   	pop    ebx
c001b296:	5e                   	pop    esi
c001b297:	c3                   	ret    

c001b298 <Sys::read(regs*)>:
c001b298:	57                   	push   edi
c001b299:	56                   	push   esi
c001b29a:	53                   	push   ebx
c001b29b:	83 ec 10             	sub    esp,0x10
c001b29e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b2a2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b2a5:	83 f8 02             	cmp    eax,0x2
c001b2a8:	77 10                	ja     c001b2ba <Sys::read(regs*)+0x22>
c001b2aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2af:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b2b2:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b2b8:	eb 0e                	jmp    c001b2c8 <Sys::read(regs*)+0x30>
c001b2ba:	83 ec 0c             	sub    esp,0xc
c001b2bd:	50                   	push   eax
c001b2be:	e8 d6 65 ff ff       	call   c0011899 <getFromFileDescriptor(int)>
c001b2c3:	83 c4 10             	add    esp,0x10
c001b2c6:	89 c1                	mov    ecx,eax
c001b2c8:	83 c8 ff             	or     eax,0xffffffff
c001b2cb:	85 c9                	test   ecx,ecx
c001b2cd:	89 c2                	mov    edx,eax
c001b2cf:	74 28                	je     c001b2f9 <Sys::read(regs*)+0x61>
c001b2d1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b2d9:	31 ff                	xor    edi,edi
c001b2db:	83 ec 0c             	sub    esp,0xc
c001b2de:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b2e0:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b2e4:	52                   	push   edx
c001b2e5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b2e8:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b2eb:	57                   	push   edi
c001b2ec:	56                   	push   esi
c001b2ed:	51                   	push   ecx
c001b2ee:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b2f1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b2f5:	83 c4 20             	add    esp,0x20
c001b2f8:	99                   	cdq    
c001b2f9:	83 c4 10             	add    esp,0x10
c001b2fc:	5b                   	pop    ebx
c001b2fd:	5e                   	pop    esi
c001b2fe:	5f                   	pop    edi
c001b2ff:	c3                   	ret    

c001b300 <Sys::sbrk(regs*)>:
c001b300:	56                   	push   esi
c001b301:	53                   	push   ebx
c001b302:	50                   	push   eax
c001b303:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b308:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b30c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b30f:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b312:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b318:	85 db                	test   ebx,ebx
c001b31a:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b31d:	74 02                	je     c001b321 <Sys::sbrk(regs*)+0x21>
c001b31f:	79 06                	jns    c001b327 <Sys::sbrk(regs*)+0x27>
c001b321:	89 f0                	mov    eax,esi
c001b323:	31 d2                	xor    edx,edx
c001b325:	eb 2a                	jmp    c001b351 <Sys::sbrk(regs*)+0x51>
c001b327:	83 c8 ff             	or     eax,0xffffffff
c001b32a:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b330:	89 c2                	mov    edx,eax
c001b332:	77 1d                	ja     c001b351 <Sys::sbrk(regs*)+0x51>
c001b334:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b33a:	50                   	push   eax
c001b33b:	c1 ea 0c             	shr    edx,0xc
c001b33e:	68 07 0c 00 00       	push   0xc07
c001b343:	52                   	push   edx
c001b344:	51                   	push   ecx
c001b345:	e8 d2 6f ff ff       	call   c001231c <VAS::allocatePages(int, int)>
c001b34a:	89 f0                	mov    eax,esi
c001b34c:	31 d2                	xor    edx,edx
c001b34e:	83 c4 10             	add    esp,0x10
c001b351:	59                   	pop    ecx
c001b352:	5b                   	pop    ebx
c001b353:	5e                   	pop    esi
c001b354:	c3                   	ret    

c001b355 <Sys::setCwd(regs*)>:
c001b355:	83 ec 14             	sub    esp,0x14
c001b358:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b35c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b35f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b364:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b367:	e8 27 83 ff ff       	call   c0013693 <Fs::setcwd(Process*, char*)>
c001b36c:	83 c4 1c             	add    esp,0x1c
c001b36f:	99                   	cdq    
c001b370:	c3                   	ret    

c001b371 <Sys::setTime(regs*)>:
c001b371:	55                   	push   ebp
c001b372:	31 d2                	xor    edx,edx
c001b374:	57                   	push   edi
c001b375:	bf 18 00 00 00       	mov    edi,0x18
c001b37a:	56                   	push   esi
c001b37b:	53                   	push   ebx
c001b37c:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b381:	83 ec 30             	sub    esp,0x30
c001b384:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b388:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b38b:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b38e:	f7 f3                	div    ebx
c001b390:	89 d6                	mov    esi,edx
c001b392:	31 d2                	xor    edx,edx
c001b394:	f7 f3                	div    ebx
c001b396:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b399:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b39d:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b3a2:	31 d2                	xor    edx,edx
c001b3a4:	f7 f3                	div    ebx
c001b3a6:	31 d2                	xor    edx,edx
c001b3a8:	bb 0c 00 00 00       	mov    ebx,0xc
c001b3ad:	f7 f7                	div    edi
c001b3af:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b3b2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b3b6:	0f b7 cd             	movzx  ecx,bp
c001b3b9:	56                   	push   esi
c001b3ba:	89 c7                	mov    edi,eax
c001b3bc:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b3c0:	c1 e6 10             	shl    esi,0x10
c001b3c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b3c7:	83 e7 1f             	and    edi,0x1f
c001b3ca:	51                   	push   ecx
c001b3cb:	47                   	inc    edi
c001b3cc:	c1 e8 05             	shr    eax,0x5
c001b3cf:	31 d2                	xor    edx,edx
c001b3d1:	f7 f3                	div    ebx
c001b3d3:	31 db                	xor    ebx,ebx
c001b3d5:	52                   	push   edx
c001b3d6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b3da:	57                   	push   edi
c001b3db:	68 59 bd 02 c0       	push   0xc002bd59
c001b3e0:	e8 de 79 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001b3e5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b3e9:	89 f8                	mov    eax,edi
c001b3eb:	31 c9                	xor    ecx,ecx
c001b3ed:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b3f1:	88 c1                	mov    cl,al
c001b3f3:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b3f9:	88 d5                	mov    ch,dl
c001b3fb:	c1 e0 10             	shl    eax,0x10
c001b3fe:	0f b7 d1             	movzx  edx,cx
c001b401:	09 c2                	or     edx,eax
c001b403:	89 d8                	mov    eax,ebx
c001b405:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b40a:	09 f0                	or     eax,esi
c001b40c:	89 c3                	mov    ebx,eax
c001b40e:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b412:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b416:	83 c4 18             	add    esp,0x18
c001b419:	53                   	push   ebx
c001b41a:	52                   	push   edx
c001b41b:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b41f:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b423:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b427:	e8 81 89 ff ff       	call   c0013dad <datetimeToSeconds(datetime_t)>
c001b42c:	83 c4 0c             	add    esp,0xc
c001b42f:	52                   	push   edx
c001b430:	50                   	push   eax
c001b431:	56                   	push   esi
c001b432:	e8 fd 8a ff ff       	call   c0013f34 <secondsToDatetime(unsigned long long)>
c001b437:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b43b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b43f:	51                   	push   ecx
c001b440:	89 d6                	mov    esi,edx
c001b442:	51                   	push   ecx
c001b443:	c1 ee 10             	shr    esi,0x10
c001b446:	89 f3                	mov    ebx,esi
c001b448:	0f b6 f3             	movzx  esi,bl
c001b44b:	56                   	push   esi
c001b44c:	0f b6 f6             	movzx  esi,dh
c001b44f:	0f b6 d2             	movzx  edx,dl
c001b452:	56                   	push   esi
c001b453:	52                   	push   edx
c001b454:	89 c2                	mov    edx,eax
c001b456:	c1 ea 10             	shr    edx,0x10
c001b459:	52                   	push   edx
c001b45a:	0f b6 d4             	movzx  edx,ah
c001b45d:	0f b6 c0             	movzx  eax,al
c001b460:	52                   	push   edx
c001b461:	50                   	push   eax
c001b462:	68 75 bd 02 c0       	push   0xc002bd75
c001b467:	e8 57 79 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001b46c:	83 c4 2c             	add    esp,0x2c
c001b46f:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c001b474:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b478:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b47c:	53                   	push   ebx
c001b47d:	51                   	push   ecx
c001b47e:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b484:	e8 4b 8a ff ff       	call   c0013ed4 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b489:	83 f0 01             	xor    eax,0x1
c001b48c:	31 d2                	xor    edx,edx
c001b48e:	0f b6 c0             	movzx  eax,al
c001b491:	83 c4 3c             	add    esp,0x3c
c001b494:	5b                   	pop    ebx
c001b495:	5e                   	pop    esi
c001b496:	5f                   	pop    edi
c001b497:	5d                   	pop    ebp
c001b498:	c3                   	ret    

c001b499 <Sys::timezone(regs*)>:
c001b499:	53                   	push   ebx
c001b49a:	83 ec 08             	sub    esp,0x8
c001b49d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b4a1:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b4a5:	75 17                	jne    c001b4be <Sys::timezone(regs*)+0x25>
c001b4a7:	83 ec 0c             	sub    esp,0xc
c001b4aa:	68 91 bd 02 c0       	push   0xc002bd91
c001b4af:	e8 0f 79 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001b4b4:	83 c8 ff             	or     eax,0xffffffff
c001b4b7:	83 c4 10             	add    esp,0x10
c001b4ba:	89 c2                	mov    edx,eax
c001b4bc:	eb 20                	jmp    c001b4de <Sys::timezone(regs*)+0x45>
c001b4be:	83 ec 0c             	sub    esp,0xc
c001b4c1:	68 c9 bd 02 c0       	push   0xc002bdc9
c001b4c6:	e8 f8 78 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001b4cb:	58                   	pop    eax
c001b4cc:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b4cf:	e8 62 87 ff ff       	call   c0013c36 <User::loadClockSettings(int)>
c001b4d4:	83 c4 10             	add    esp,0x10
c001b4d7:	b8 01 00 00 00       	mov    eax,0x1
c001b4dc:	31 d2                	xor    edx,edx
c001b4de:	83 c4 08             	add    esp,0x8
c001b4e1:	5b                   	pop    ebx
c001b4e2:	c3                   	ret    

c001b4e3 <Sys::write(regs*)>:
c001b4e3:	57                   	push   edi
c001b4e4:	56                   	push   esi
c001b4e5:	53                   	push   ebx
c001b4e6:	83 ec 10             	sub    esp,0x10
c001b4e9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b4ed:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b4f0:	83 f8 02             	cmp    eax,0x2
c001b4f3:	77 10                	ja     c001b505 <Sys::write(regs*)+0x22>
c001b4f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4fa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b4fd:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b503:	eb 0e                	jmp    c001b513 <Sys::write(regs*)+0x30>
c001b505:	83 ec 0c             	sub    esp,0xc
c001b508:	50                   	push   eax
c001b509:	e8 8b 63 ff ff       	call   c0011899 <getFromFileDescriptor(int)>
c001b50e:	83 c4 10             	add    esp,0x10
c001b511:	89 c1                	mov    ecx,eax
c001b513:	83 c8 ff             	or     eax,0xffffffff
c001b516:	85 c9                	test   ecx,ecx
c001b518:	89 c2                	mov    edx,eax
c001b51a:	74 28                	je     c001b544 <Sys::write(regs*)+0x61>
c001b51c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b524:	31 ff                	xor    edi,edi
c001b526:	83 ec 0c             	sub    esp,0xc
c001b529:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b52b:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b52f:	52                   	push   edx
c001b530:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b533:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b536:	57                   	push   edi
c001b537:	56                   	push   esi
c001b538:	51                   	push   ecx
c001b539:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b53c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b540:	83 c4 20             	add    esp,0x20
c001b543:	99                   	cdq    
c001b544:	83 c4 10             	add    esp,0x10
c001b547:	5b                   	pop    ebx
c001b548:	5e                   	pop    esi
c001b549:	5f                   	pop    edi
c001b54a:	c3                   	ret    

c001b54b <Sys::wsbe(regs*)>:
c001b54b:	57                   	push   edi
c001b54c:	b9 0b 00 00 00       	mov    ecx,0xb
c001b551:	56                   	push   esi
c001b552:	be 08 be 02 c0       	mov    esi,0xc002be08
c001b557:	53                   	push   ebx
c001b558:	83 ec 30             	sub    esp,0x30
c001b55b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b55f:	fc                   	cld    
c001b560:	83 ec 0c             	sub    esp,0xc
c001b563:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b565:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b569:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b56e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b571:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b577:	8b 06                	mov    eax,DWORD PTR [esi]
c001b579:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b57c:	57                   	push   edi
c001b57d:	e8 1a 52 fe ff       	call   c000079c <strlen>
c001b582:	5a                   	pop    edx
c001b583:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b587:	52                   	push   edx
c001b588:	31 d2                	xor    edx,edx
c001b58a:	57                   	push   edi
c001b58b:	52                   	push   edx
c001b58c:	50                   	push   eax
c001b58d:	56                   	push   esi
c001b58e:	ff d3                	call   ebx
c001b590:	83 c4 14             	add    esp,0x14
c001b593:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b597:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b59a:	e8 ba 31 00 00       	call   c001e759 <terminateTask(int)>
c001b59f:	83 c4 40             	add    esp,0x40
c001b5a2:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b5a7:	5b                   	pop    ebx
c001b5a8:	31 d2                	xor    edx,edx
c001b5aa:	5e                   	pop    esi
c001b5ab:	5f                   	pop    edi
c001b5ac:	c3                   	ret    

c001b5ad <Sys::yield(regs*)>:
c001b5ad:	57                   	push   edi
c001b5ae:	56                   	push   esi
c001b5af:	53                   	push   ebx
c001b5b0:	e8 27 27 00 00       	call   c001dcdc <lockScheduler()>
c001b5b5:	e8 98 2a 00 00       	call   c001e052 <schedule()>
c001b5ba:	e8 1f 27 00 00       	call   c001dcde <unlockScheduler()>
c001b5bf:	8b 35 f0 ea 02 c0    	mov    esi,DWORD PTR ds:0xc002eaf0
c001b5c5:	8b 3d f4 ea 02 c0    	mov    edi,DWORD PTR ds:0xc002eaf4
c001b5cb:	89 f0                	mov    eax,esi
c001b5cd:	89 fb                	mov    ebx,edi
c001b5cf:	89 f1                	mov    ecx,esi
c001b5d1:	c1 e0 07             	shl    eax,0x7
c001b5d4:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b5d8:	25 80 30 0f 00       	and    eax,0xf3080
c001b5dd:	c1 eb 17             	shr    ebx,0x17
c001b5e0:	31 c8                	xor    eax,ecx
c001b5e2:	89 da                	mov    edx,ebx
c001b5e4:	5b                   	pop    ebx
c001b5e5:	5e                   	pop    esi
c001b5e6:	5f                   	pop    edi
c001b5e7:	c3                   	ret    

c001b5e8 <sysCallSeekDir(regs*)>:
c001b5e8:	31 c0                	xor    eax,eax
c001b5ea:	31 d2                	xor    edx,edx
c001b5ec:	c3                   	ret    

c001b5ed <sysCallTellDir(regs*)>:
c001b5ed:	31 c0                	xor    eax,eax
c001b5ef:	31 d2                	xor    edx,edx
c001b5f1:	c3                   	ret    

c001b5f2 <sysCallVerify(regs*)>:
c001b5f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b5f6:	31 d2                	xor    edx,edx
c001b5f8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b5fb:	c3                   	ret    

c001b5fc <sysFormatDisk(regs*)>:
c001b5fc:	56                   	push   esi
c001b5fd:	53                   	push   ebx
c001b5fe:	53                   	push   ebx
c001b5ff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b603:	8b 1d f4 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5f4
c001b609:	eb 25                	jmp    c001b630 <sysFormatDisk(regs*)+0x34>
c001b60b:	83 ec 0c             	sub    esp,0xc
c001b60e:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b611:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b613:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b616:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b619:	50                   	push   eax
c001b61a:	ff 34 85 80 ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd1580]
c001b621:	53                   	push   ebx
c001b622:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b625:	83 c4 20             	add    esp,0x20
c001b628:	83 f8 08             	cmp    eax,0x8
c001b62b:	75 12                	jne    c001b63f <sysFormatDisk(regs*)+0x43>
c001b62d:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b630:	85 db                	test   ebx,ebx
c001b632:	75 d7                	jne    c001b60b <sysFormatDisk(regs*)+0xf>
c001b634:	59                   	pop    ecx
c001b635:	b8 03 00 00 00       	mov    eax,0x3
c001b63a:	31 d2                	xor    edx,edx
c001b63c:	5b                   	pop    ebx
c001b63d:	5e                   	pop    esi
c001b63e:	c3                   	ret    
c001b63f:	85 c0                	test   eax,eax
c001b641:	74 1b                	je     c001b65e <sysFormatDisk(regs*)+0x62>
c001b643:	83 f8 09             	cmp    eax,0x9
c001b646:	74 0b                	je     c001b653 <sysFormatDisk(regs*)+0x57>
c001b648:	59                   	pop    ecx
c001b649:	b8 02 00 00 00       	mov    eax,0x2
c001b64e:	31 d2                	xor    edx,edx
c001b650:	5b                   	pop    ebx
c001b651:	5e                   	pop    esi
c001b652:	c3                   	ret    
c001b653:	59                   	pop    ecx
c001b654:	b8 01 00 00 00       	mov    eax,0x1
c001b659:	31 d2                	xor    edx,edx
c001b65b:	5b                   	pop    ebx
c001b65c:	5e                   	pop    esi
c001b65d:	c3                   	ret    
c001b65e:	59                   	pop    ecx
c001b65f:	31 c0                	xor    eax,eax
c001b661:	31 d2                	xor    edx,edx
c001b663:	5b                   	pop    ebx
c001b664:	5e                   	pop    esi
c001b665:	c3                   	ret    

c001b666 <sysSetDiskVolumeLabel(regs*)>:
c001b666:	56                   	push   esi
c001b667:	53                   	push   ebx
c001b668:	53                   	push   ebx
c001b669:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b66d:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b670:	83 f8 19             	cmp    eax,0x19
c001b673:	77 29                	ja     c001b69e <sysSetDiskVolumeLabel(regs*)+0x38>
c001b675:	8b 0c 85 80 ea 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1580]
c001b67c:	85 c9                	test   ecx,ecx
c001b67e:	74 1e                	je     c001b69e <sysSetDiskVolumeLabel(regs*)+0x38>
c001b680:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b683:	85 d2                	test   edx,edx
c001b685:	74 17                	je     c001b69e <sysSetDiskVolumeLabel(regs*)+0x38>
c001b687:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b68d:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b68f:	52                   	push   edx
c001b690:	50                   	push   eax
c001b691:	51                   	push   ecx
c001b692:	53                   	push   ebx
c001b693:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b696:	83 c4 10             	add    esp,0x10
c001b699:	99                   	cdq    
c001b69a:	59                   	pop    ecx
c001b69b:	5b                   	pop    ebx
c001b69c:	5e                   	pop    esi
c001b69d:	c3                   	ret    
c001b69e:	59                   	pop    ecx
c001b69f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b6a4:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b6a9:	5b                   	pop    ebx
c001b6aa:	5e                   	pop    esi
c001b6ab:	c3                   	ret    

c001b6ac <sysGetDiskVolumeLabel(regs*)>:
c001b6ac:	57                   	push   edi
c001b6ad:	56                   	push   esi
c001b6ae:	53                   	push   ebx
c001b6af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6b3:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b6b6:	83 fa 19             	cmp    edx,0x19
c001b6b9:	77 34                	ja     c001b6ef <sysGetDiskVolumeLabel(regs*)+0x43>
c001b6bb:	8b 0c 95 80 ea 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd1580]
c001b6c2:	85 c9                	test   ecx,ecx
c001b6c4:	74 29                	je     c001b6ef <sysGetDiskVolumeLabel(regs*)+0x43>
c001b6c6:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b6c9:	85 db                	test   ebx,ebx
c001b6cb:	74 22                	je     c001b6ef <sysGetDiskVolumeLabel(regs*)+0x43>
c001b6cd:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b6d0:	85 c0                	test   eax,eax
c001b6d2:	74 1b                	je     c001b6ef <sysGetDiskVolumeLabel(regs*)+0x43>
c001b6d4:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b6da:	83 ec 0c             	sub    esp,0xc
c001b6dd:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b6df:	50                   	push   eax
c001b6e0:	53                   	push   ebx
c001b6e1:	52                   	push   edx
c001b6e2:	51                   	push   ecx
c001b6e3:	56                   	push   esi
c001b6e4:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b6e7:	83 c4 20             	add    esp,0x20
c001b6ea:	99                   	cdq    
c001b6eb:	5b                   	pop    ebx
c001b6ec:	5e                   	pop    esi
c001b6ed:	5f                   	pop    edi
c001b6ee:	c3                   	ret    
c001b6ef:	5b                   	pop    ebx
c001b6f0:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b6f5:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b6fa:	5e                   	pop    esi
c001b6fb:	5f                   	pop    edi
c001b6fc:	c3                   	ret    

c001b6fd <sysShutdown(regs*)>:
c001b6fd:	83 ec 0c             	sub    esp,0xc
c001b700:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b704:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b707:	85 c0                	test   eax,eax
c001b709:	74 18                	je     c001b723 <sysShutdown(regs*)+0x26>
c001b70b:	83 f8 01             	cmp    eax,0x1
c001b70e:	74 38                	je     c001b748 <sysShutdown(regs*)+0x4b>
c001b710:	83 f8 02             	cmp    eax,0x2
c001b713:	74 24                	je     c001b739 <sysShutdown(regs*)+0x3c>
c001b715:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b71a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b71f:	83 c4 0c             	add    esp,0xc
c001b722:	c3                   	ret    
c001b723:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c001b728:	8b 10                	mov    edx,DWORD PTR [eax]
c001b72a:	6a 00                	push   0x0
c001b72c:	6a 00                	push   0x0
c001b72e:	6a 00                	push   0x0
c001b730:	50                   	push   eax
c001b731:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b734:	83 c4 10             	add    esp,0x10
c001b737:	eb dc                	jmp    c001b715 <sysShutdown(regs*)+0x18>
c001b739:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c001b73e:	8b 10                	mov    edx,DWORD PTR [eax]
c001b740:	6a 00                	push   0x0
c001b742:	6a 00                	push   0x0
c001b744:	6a 01                	push   0x1
c001b746:	eb e8                	jmp    c001b730 <sysShutdown(regs*)+0x33>
c001b748:	a1 20 0b 03 c0       	mov    eax,ds:0xc0030b20
c001b74d:	85 c0                	test   eax,eax
c001b74f:	74 02                	je     c001b753 <sysShutdown(regs*)+0x56>
c001b751:	ff d0                	call   eax
c001b753:	31 c0                	xor    eax,eax
c001b755:	31 d2                	xor    edx,edx
c001b757:	83 c4 0c             	add    esp,0xc
c001b75a:	c3                   	ret    

c001b75b <sysCallRealpath(regs*)>:
c001b75b:	83 ec 0c             	sub    esp,0xc
c001b75e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b762:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b765:	85 d2                	test   edx,edx
c001b767:	74 07                	je     c001b770 <sysCallRealpath(regs*)+0x15>
c001b769:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b76c:	85 c0                	test   eax,eax
c001b76e:	75 0b                	jne    c001b77b <sysCallRealpath(regs*)+0x20>
c001b770:	b8 01 00 00 00       	mov    eax,0x1
c001b775:	31 d2                	xor    edx,edx
c001b777:	83 c4 0c             	add    esp,0xc
c001b77a:	c3                   	ret    
c001b77b:	51                   	push   ecx
c001b77c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b782:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b785:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b78b:	51                   	push   ecx
c001b78c:	52                   	push   edx
c001b78d:	50                   	push   eax
c001b78e:	e8 e5 79 ff ff       	call   c0013178 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b793:	83 c4 10             	add    esp,0x10
c001b796:	31 c0                	xor    eax,eax
c001b798:	31 d2                	xor    edx,edx
c001b79a:	83 c4 0c             	add    esp,0xc
c001b79d:	c3                   	ret    

c001b79e <sysCallGetArgc(regs*)>:
c001b79e:	83 ec 14             	sub    esp,0x14
c001b7a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b7a6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b7a9:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001b7af:	68 34 be 02 c0       	push   0xc002be34
c001b7b4:	e8 0a 76 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001b7b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b7be:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b7c1:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b7c7:	83 c4 1c             	add    esp,0x1c
c001b7ca:	99                   	cdq    
c001b7cb:	c3                   	ret    

c001b7cc <sysCallReadDir(regs*)>:
c001b7cc:	53                   	push   ebx
c001b7cd:	83 ec 18             	sub    esp,0x18
c001b7d0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b7d4:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b7d7:	83 f8 02             	cmp    eax,0x2
c001b7da:	76 53                	jbe    c001b82f <sysCallReadDir(regs*)+0x63>
c001b7dc:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b7df:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b7e5:	77 4f                	ja     c001b836 <sysCallReadDir(regs*)+0x6a>
c001b7e7:	83 ec 0c             	sub    esp,0xc
c001b7ea:	50                   	push   eax
c001b7eb:	e8 a9 60 ff ff       	call   c0011899 <getFromFileDescriptor(int)>
c001b7f0:	83 c4 10             	add    esp,0x10
c001b7f3:	85 c0                	test   eax,eax
c001b7f5:	74 50                	je     c001b847 <sysCallReadDir(regs*)+0x7b>
c001b7f7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b7ff:	83 ec 0c             	sub    esp,0xc
c001b802:	8b 10                	mov    edx,DWORD PTR [eax]
c001b804:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b808:	51                   	push   ecx
c001b809:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b80c:	6a 00                	push   0x0
c001b80e:	68 10 01 00 00       	push   0x110
c001b813:	50                   	push   eax
c001b814:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b817:	83 c4 20             	add    esp,0x20
c001b81a:	85 c0                	test   eax,eax
c001b81c:	74 38                	je     c001b856 <sysCallReadDir(regs*)+0x8a>
c001b81e:	83 f8 07             	cmp    eax,0x7
c001b821:	74 0c                	je     c001b82f <sysCallReadDir(regs*)+0x63>
c001b823:	b8 02 00 00 00       	mov    eax,0x2
c001b828:	31 d2                	xor    edx,edx
c001b82a:	83 c4 18             	add    esp,0x18
c001b82d:	5b                   	pop    ebx
c001b82e:	c3                   	ret    
c001b82f:	b8 01 00 00 00       	mov    eax,0x1
c001b834:	eb f2                	jmp    c001b828 <sysCallReadDir(regs*)+0x5c>
c001b836:	83 ec 08             	sub    esp,0x8
c001b839:	52                   	push   edx
c001b83a:	68 4c bf 02 c0       	push   0xc002bf4c
c001b83f:	e8 7f 75 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001b844:	83 c4 10             	add    esp,0x10
c001b847:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b84c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b851:	83 c4 18             	add    esp,0x18
c001b854:	5b                   	pop    ebx
c001b855:	c3                   	ret    
c001b856:	31 c0                	xor    eax,eax
c001b858:	eb ce                	jmp    c001b828 <sysCallReadDir(regs*)+0x5c>

c001b85a <sysCallIsATTY(regs*)>:
c001b85a:	83 ec 0c             	sub    esp,0xc
c001b85d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b861:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b864:	83 f8 02             	cmp    eax,0x2
c001b867:	76 07                	jbe    c001b870 <sysCallIsATTY(regs*)+0x16>
c001b869:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b86e:	75 26                	jne    c001b896 <sysCallIsATTY(regs*)+0x3c>
c001b870:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b875:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b878:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b87e:	85 c0                	test   eax,eax
c001b880:	74 24                	je     c001b8a6 <sysCallIsATTY(regs*)+0x4c>
c001b882:	83 ec 0c             	sub    esp,0xc
c001b885:	8b 10                	mov    edx,DWORD PTR [eax]
c001b887:	50                   	push   eax
c001b888:	ff 12                	call   DWORD PTR [edx]
c001b88a:	31 d2                	xor    edx,edx
c001b88c:	0f b6 c0             	movzx  eax,al
c001b88f:	83 c4 10             	add    esp,0x10
c001b892:	83 c4 0c             	add    esp,0xc
c001b895:	c3                   	ret    
c001b896:	83 ec 0c             	sub    esp,0xc
c001b899:	50                   	push   eax
c001b89a:	e8 fa 5f ff ff       	call   c0011899 <getFromFileDescriptor(int)>
c001b89f:	83 c4 10             	add    esp,0x10
c001b8a2:	85 c0                	test   eax,eax
c001b8a4:	75 dc                	jne    c001b882 <sysCallIsATTY(regs*)+0x28>
c001b8a6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b8ab:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b8b0:	83 c4 0c             	add    esp,0xc
c001b8b3:	c3                   	ret    

c001b8b4 <sysCallSeek(regs*)>:
c001b8b4:	53                   	push   ebx
c001b8b5:	83 ec 08             	sub    esp,0x8
c001b8b8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b8bc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b8bf:	83 f8 02             	cmp    eax,0x2
c001b8c2:	76 4a                	jbe    c001b90e <sysCallSeek(regs*)+0x5a>
c001b8c4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b8c9:	77 32                	ja     c001b8fd <sysCallSeek(regs*)+0x49>
c001b8cb:	83 ec 0c             	sub    esp,0xc
c001b8ce:	50                   	push   eax
c001b8cf:	e8 c5 5f ff ff       	call   c0011899 <getFromFileDescriptor(int)>
c001b8d4:	83 c4 0c             	add    esp,0xc
c001b8d7:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b8da:	31 db                	xor    ebx,ebx
c001b8dc:	53                   	push   ebx
c001b8dd:	51                   	push   ecx
c001b8de:	50                   	push   eax
c001b8df:	e8 60 7b ff ff       	call   c0013444 <File::seek(unsigned long long)>
c001b8e4:	83 c4 10             	add    esp,0x10
c001b8e7:	85 c0                	test   eax,eax
c001b8e9:	0f 95 c0             	setne  al
c001b8ec:	31 d2                	xor    edx,edx
c001b8ee:	0f b6 c0             	movzx  eax,al
c001b8f1:	f7 d8                	neg    eax
c001b8f3:	83 d2 00             	adc    edx,0x0
c001b8f6:	83 c4 08             	add    esp,0x8
c001b8f9:	f7 da                	neg    edx
c001b8fb:	5b                   	pop    ebx
c001b8fc:	c3                   	ret    
c001b8fd:	83 ec 08             	sub    esp,0x8
c001b900:	50                   	push   eax
c001b901:	68 3f be 02 c0       	push   0xc002be3f
c001b906:	e8 b8 74 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001b90b:	83 c4 10             	add    esp,0x10
c001b90e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b913:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b918:	83 c4 08             	add    esp,0x8
c001b91b:	5b                   	pop    ebx
c001b91c:	c3                   	ret    

c001b91d <sysCallTell(regs*)>:
c001b91d:	53                   	push   ebx
c001b91e:	83 ec 08             	sub    esp,0x8
c001b921:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b925:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b928:	83 f8 02             	cmp    eax,0x2
c001b92b:	76 5e                	jbe    c001b98b <sysCallTell(regs*)+0x6e>
c001b92d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b932:	77 2d                	ja     c001b961 <sysCallTell(regs*)+0x44>
c001b934:	83 ec 0c             	sub    esp,0xc
c001b937:	50                   	push   eax
c001b938:	e8 5c 5f ff ff       	call   c0011899 <getFromFileDescriptor(int)>
c001b93d:	5a                   	pop    edx
c001b93e:	59                   	pop    ecx
c001b93f:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b942:	50                   	push   eax
c001b943:	e8 52 7b ff ff       	call   c001349a <File::tell(unsigned long long*)>
c001b948:	83 c4 10             	add    esp,0x10
c001b94b:	85 c0                	test   eax,eax
c001b94d:	0f 95 c0             	setne  al
c001b950:	31 d2                	xor    edx,edx
c001b952:	0f b6 c0             	movzx  eax,al
c001b955:	f7 d8                	neg    eax
c001b957:	83 d2 00             	adc    edx,0x0
c001b95a:	83 c4 08             	add    esp,0x8
c001b95d:	f7 da                	neg    edx
c001b95f:	5b                   	pop    ebx
c001b960:	c3                   	ret    
c001b961:	83 ec 08             	sub    esp,0x8
c001b964:	50                   	push   eax
c001b965:	68 59 be 02 c0       	push   0xc002be59
c001b96a:	e8 54 74 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001b96f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b972:	83 c4 10             	add    esp,0x10
c001b975:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b97b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b982:	31 d2                	xor    edx,edx
c001b984:	31 c0                	xor    eax,eax
c001b986:	83 c4 08             	add    esp,0x8
c001b989:	5b                   	pop    ebx
c001b98a:	c3                   	ret    
c001b98b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b990:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b995:	83 c4 08             	add    esp,0x8
c001b998:	5b                   	pop    ebx
c001b999:	c3                   	ret    

c001b99a <sysCallSize(regs*)>:
c001b99a:	53                   	push   ebx
c001b99b:	83 ec 18             	sub    esp,0x18
c001b99e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b9a2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b9a5:	83 f8 02             	cmp    eax,0x2
c001b9a8:	76 64                	jbe    c001ba0e <sysCallSize(regs*)+0x74>
c001b9aa:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b9af:	77 33                	ja     c001b9e4 <sysCallSize(regs*)+0x4a>
c001b9b1:	83 ec 0c             	sub    esp,0xc
c001b9b4:	50                   	push   eax
c001b9b5:	e8 df 5e ff ff       	call   c0011899 <getFromFileDescriptor(int)>
c001b9ba:	83 c4 0c             	add    esp,0xc
c001b9bd:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b9c1:	52                   	push   edx
c001b9c2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b9c5:	50                   	push   eax
c001b9c6:	e8 67 7c ff ff       	call   c0013632 <File::stat(unsigned long long*, bool*)>
c001b9cb:	83 c4 10             	add    esp,0x10
c001b9ce:	85 c0                	test   eax,eax
c001b9d0:	0f 95 c0             	setne  al
c001b9d3:	31 d2                	xor    edx,edx
c001b9d5:	0f b6 c0             	movzx  eax,al
c001b9d8:	f7 d8                	neg    eax
c001b9da:	83 d2 00             	adc    edx,0x0
c001b9dd:	83 c4 18             	add    esp,0x18
c001b9e0:	f7 da                	neg    edx
c001b9e2:	5b                   	pop    ebx
c001b9e3:	c3                   	ret    
c001b9e4:	83 ec 08             	sub    esp,0x8
c001b9e7:	50                   	push   eax
c001b9e8:	68 73 be 02 c0       	push   0xc002be73
c001b9ed:	e8 d1 73 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001b9f2:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b9f5:	83 c4 10             	add    esp,0x10
c001b9f8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b9fe:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ba05:	31 d2                	xor    edx,edx
c001ba07:	31 c0                	xor    eax,eax
c001ba09:	83 c4 18             	add    esp,0x18
c001ba0c:	5b                   	pop    ebx
c001ba0d:	c3                   	ret    
c001ba0e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba13:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba18:	83 c4 18             	add    esp,0x18
c001ba1b:	5b                   	pop    ebx
c001ba1c:	c3                   	ret    

c001ba1d <sysCallSizeFromFilename(regs*)>:
c001ba1d:	57                   	push   edi
c001ba1e:	56                   	push   esi
c001ba1f:	53                   	push   ebx
c001ba20:	83 ec 20             	sub    esp,0x20
c001ba23:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ba27:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001ba2a:	83 fb 02             	cmp    ebx,0x2
c001ba2d:	0f 86 99 00 00 00    	jbe    c001bacc <sysCallSizeFromFilename(regs*)+0xaf>
c001ba33:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001ba39:	77 65                	ja     c001baa0 <sysCallSizeFromFilename(regs*)+0x83>
c001ba3b:	83 ec 0c             	sub    esp,0xc
c001ba3e:	68 14 01 00 00       	push   0x114
c001ba43:	e8 03 3e ff ff       	call   c000f84b <malloc>
c001ba48:	83 c4 0c             	add    esp,0xc
c001ba4b:	89 c6                	mov    esi,eax
c001ba4d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba52:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ba55:	53                   	push   ebx
c001ba56:	56                   	push   esi
c001ba57:	e8 c6 78 ff ff       	call   c0013322 <File::File(char const*, Process*)>
c001ba5c:	83 c4 0c             	add    esp,0xc
c001ba5f:	8d 44 24 23          	lea    eax,[esp+0x23]
c001ba63:	50                   	push   eax
c001ba64:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001ba67:	56                   	push   esi
c001ba68:	e8 c5 7b ff ff       	call   c0013632 <File::stat(unsigned long long*, bool*)>
c001ba6d:	83 c4 10             	add    esp,0x10
c001ba70:	85 f6                	test   esi,esi
c001ba72:	74 14                	je     c001ba88 <sysCallSizeFromFilename(regs*)+0x6b>
c001ba74:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ba78:	8b 16                	mov    edx,DWORD PTR [esi]
c001ba7a:	83 ec 0c             	sub    esp,0xc
c001ba7d:	56                   	push   esi
c001ba7e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001ba81:	83 c4 10             	add    esp,0x10
c001ba84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba88:	85 c0                	test   eax,eax
c001ba8a:	0f 95 c0             	setne  al
c001ba8d:	31 d2                	xor    edx,edx
c001ba8f:	0f b6 c0             	movzx  eax,al
c001ba92:	f7 d8                	neg    eax
c001ba94:	83 d2 00             	adc    edx,0x0
c001ba97:	83 c4 20             	add    esp,0x20
c001ba9a:	f7 da                	neg    edx
c001ba9c:	5b                   	pop    ebx
c001ba9d:	5e                   	pop    esi
c001ba9e:	5f                   	pop    edi
c001ba9f:	c3                   	ret    
c001baa0:	83 ec 08             	sub    esp,0x8
c001baa3:	53                   	push   ebx
c001baa4:	68 73 be 02 c0       	push   0xc002be73
c001baa9:	e8 15 73 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001baae:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001bab1:	83 c4 10             	add    esp,0x10
c001bab4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001baba:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bac1:	31 d2                	xor    edx,edx
c001bac3:	83 c4 20             	add    esp,0x20
c001bac6:	31 c0                	xor    eax,eax
c001bac8:	5b                   	pop    ebx
c001bac9:	5e                   	pop    esi
c001baca:	5f                   	pop    edi
c001bacb:	c3                   	ret    
c001bacc:	83 c4 20             	add    esp,0x20
c001bacf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bad4:	5b                   	pop    ebx
c001bad5:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bada:	5e                   	pop    esi
c001badb:	5f                   	pop    edi
c001badc:	c3                   	ret    

c001badd <sysCallClose(regs*)>:
c001badd:	53                   	push   ebx
c001bade:	83 ec 08             	sub    esp,0x8
c001bae1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bae5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bae8:	83 f8 02             	cmp    eax,0x2
c001baeb:	76 50                	jbe    c001bb3d <sysCallClose(regs*)+0x60>
c001baed:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001baf2:	74 58                	je     c001bb4c <sysCallClose(regs*)+0x6f>
c001baf4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001baf9:	74 60                	je     c001bb5b <sysCallClose(regs*)+0x7e>
c001bafb:	77 2f                	ja     c001bb2c <sysCallClose(regs*)+0x4f>
c001bafd:	83 ec 0c             	sub    esp,0xc
c001bb00:	50                   	push   eax
c001bb01:	e8 93 5d ff ff       	call   c0011899 <getFromFileDescriptor(int)>
c001bb06:	89 c3                	mov    ebx,eax
c001bb08:	89 04 24             	mov    DWORD PTR [esp],eax
c001bb0b:	e8 d4 78 ff ff       	call   c00133e4 <File::close()>
c001bb10:	83 c4 10             	add    esp,0x10
c001bb13:	85 db                	test   ebx,ebx
c001bb15:	74 0c                	je     c001bb23 <sysCallClose(regs*)+0x46>
c001bb17:	83 ec 0c             	sub    esp,0xc
c001bb1a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bb1c:	53                   	push   ebx
c001bb1d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bb20:	83 c4 10             	add    esp,0x10
c001bb23:	31 c0                	xor    eax,eax
c001bb25:	31 d2                	xor    edx,edx
c001bb27:	83 c4 08             	add    esp,0x8
c001bb2a:	5b                   	pop    ebx
c001bb2b:	c3                   	ret    
c001bb2c:	83 ec 08             	sub    esp,0x8
c001bb2f:	50                   	push   eax
c001bb30:	68 70 bf 02 c0       	push   0xc002bf70
c001bb35:	e8 89 72 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001bb3a:	83 c4 10             	add    esp,0x10
c001bb3d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb42:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb47:	83 c4 08             	add    esp,0x8
c001bb4a:	5b                   	pop    ebx
c001bb4b:	c3                   	ret    
c001bb4c:	83 ec 0c             	sub    esp,0xc
c001bb4f:	68 8e be 02 c0       	push   0xc002be8e
c001bb54:	e8 6a 72 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001bb59:	eb c5                	jmp    c001bb20 <sysCallClose(regs*)+0x43>
c001bb5b:	83 ec 0c             	sub    esp,0xc
c001bb5e:	68 9c be 02 c0       	push   0xc002be9c
c001bb63:	eb ef                	jmp    c001bb54 <sysCallClose(regs*)+0x77>

c001bb65 <sysCallOpenDir(regs*)>:
c001bb65:	56                   	push   esi
c001bb66:	53                   	push   ebx
c001bb67:	53                   	push   ebx
c001bb68:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bb6c:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bb6f:	85 f6                	test   esi,esi
c001bb71:	74 59                	je     c001bbcc <sysCallOpenDir(regs*)+0x67>
c001bb73:	83 ec 0c             	sub    esp,0xc
c001bb76:	68 14 01 00 00       	push   0x114
c001bb7b:	e8 cb 3c ff ff       	call   c000f84b <malloc>
c001bb80:	83 c4 0c             	add    esp,0xc
c001bb83:	89 c6                	mov    esi,eax
c001bb85:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb8a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bb8d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bb90:	56                   	push   esi
c001bb91:	e8 38 7c ff ff       	call   c00137ce <Directory::Directory(char const*, Process*)>
c001bb96:	83 c4 10             	add    esp,0x10
c001bb99:	85 f6                	test   esi,esi
c001bb9b:	74 2f                	je     c001bbcc <sysCallOpenDir(regs*)+0x67>
c001bb9d:	83 ec 0c             	sub    esp,0xc
c001bba0:	56                   	push   esi
c001bba1:	e8 8c 7c ff ff       	call   c0013832 <Directory::open()>
c001bba6:	83 c4 10             	add    esp,0x10
c001bba9:	85 c0                	test   eax,eax
c001bbab:	75 1f                	jne    c001bbcc <sysCallOpenDir(regs*)+0x67>
c001bbad:	83 ec 0c             	sub    esp,0xc
c001bbb0:	56                   	push   esi
c001bbb1:	e8 ee 59 ff ff       	call   c00115a4 <UnixFile::getFileDescriptor()>
c001bbb6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bbb9:	83 c4 10             	add    esp,0x10
c001bbbc:	89 02                	mov    DWORD PTR [edx],eax
c001bbbe:	c1 f8 1f             	sar    eax,0x1f
c001bbc1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bbc4:	31 c0                	xor    eax,eax
c001bbc6:	59                   	pop    ecx
c001bbc7:	31 d2                	xor    edx,edx
c001bbc9:	5b                   	pop    ebx
c001bbca:	5e                   	pop    esi
c001bbcb:	c3                   	ret    
c001bbcc:	59                   	pop    ecx
c001bbcd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bbd2:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bbd7:	5b                   	pop    ebx
c001bbd8:	5e                   	pop    esi
c001bbd9:	c3                   	ret    

c001bbda <sysCallCloseDir(regs*)>:
c001bbda:	53                   	push   ebx
c001bbdb:	83 ec 08             	sub    esp,0x8
c001bbde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbe2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bbe5:	83 f8 02             	cmp    eax,0x2
c001bbe8:	76 47                	jbe    c001bc31 <sysCallCloseDir(regs*)+0x57>
c001bbea:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bbef:	77 2f                	ja     c001bc20 <sysCallCloseDir(regs*)+0x46>
c001bbf1:	83 ec 0c             	sub    esp,0xc
c001bbf4:	50                   	push   eax
c001bbf5:	e8 9f 5c ff ff       	call   c0011899 <getFromFileDescriptor(int)>
c001bbfa:	89 c3                	mov    ebx,eax
c001bbfc:	89 04 24             	mov    DWORD PTR [esp],eax
c001bbff:	e8 8a 7c ff ff       	call   c001388e <Directory::close()>
c001bc04:	83 c4 10             	add    esp,0x10
c001bc07:	85 db                	test   ebx,ebx
c001bc09:	74 0c                	je     c001bc17 <sysCallCloseDir(regs*)+0x3d>
c001bc0b:	83 ec 0c             	sub    esp,0xc
c001bc0e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc10:	53                   	push   ebx
c001bc11:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bc14:	83 c4 10             	add    esp,0x10
c001bc17:	31 c0                	xor    eax,eax
c001bc19:	31 d2                	xor    edx,edx
c001bc1b:	83 c4 08             	add    esp,0x8
c001bc1e:	5b                   	pop    ebx
c001bc1f:	c3                   	ret    
c001bc20:	83 ec 08             	sub    esp,0x8
c001bc23:	50                   	push   eax
c001bc24:	68 98 bf 02 c0       	push   0xc002bf98
c001bc29:	e8 95 71 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001bc2e:	83 c4 10             	add    esp,0x10
c001bc31:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc36:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc3b:	83 c4 08             	add    esp,0x8
c001bc3e:	5b                   	pop    ebx
c001bc3f:	c3                   	ret    

c001bc40 <sysCallMakeDir(regs*)>:
c001bc40:	56                   	push   esi
c001bc41:	53                   	push   ebx
c001bc42:	83 ec 10             	sub    esp,0x10
c001bc45:	68 14 01 00 00       	push   0x114
c001bc4a:	e8 fc 3b ff ff       	call   c000f84b <malloc>
c001bc4f:	83 c4 0c             	add    esp,0xc
c001bc52:	89 c3                	mov    ebx,eax
c001bc54:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc59:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bc5c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bc60:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bc63:	53                   	push   ebx
c001bc64:	e8 65 7b ff ff       	call   c00137ce <Directory::Directory(char const*, Process*)>
c001bc69:	83 c4 10             	add    esp,0x10
c001bc6c:	85 db                	test   ebx,ebx
c001bc6e:	74 32                	je     c001bca2 <sysCallMakeDir(regs*)+0x62>
c001bc70:	83 ec 0c             	sub    esp,0xc
c001bc73:	53                   	push   ebx
c001bc74:	e8 99 7d ff ff       	call   c0013a12 <Directory::create()>
c001bc79:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bc7c:	89 c6                	mov    esi,eax
c001bc7e:	e8 0b 7c ff ff       	call   c001388e <Directory::close()>
c001bc83:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc85:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bc88:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bc8b:	83 c4 10             	add    esp,0x10
c001bc8e:	31 c0                	xor    eax,eax
c001bc90:	59                   	pop    ecx
c001bc91:	85 f6                	test   esi,esi
c001bc93:	5b                   	pop    ebx
c001bc94:	0f 95 c0             	setne  al
c001bc97:	5e                   	pop    esi
c001bc98:	31 d2                	xor    edx,edx
c001bc9a:	f7 d8                	neg    eax
c001bc9c:	83 d2 00             	adc    edx,0x0
c001bc9f:	f7 da                	neg    edx
c001bca1:	c3                   	ret    
c001bca2:	59                   	pop    ecx
c001bca3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bca8:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bcad:	5b                   	pop    ebx
c001bcae:	5e                   	pop    esi
c001bcaf:	c3                   	ret    

c001bcb0 <sysCallWait(regs*)>:
c001bcb0:	83 ec 10             	sub    esp,0x10
c001bcb3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bcb7:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001bcba:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bcbd:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001bcc0:	e8 08 25 00 00       	call   c001e1cd <waitTask(int, int*, int)>
c001bcc5:	83 c4 1c             	add    esp,0x1c
c001bcc8:	99                   	cdq    
c001bcc9:	c3                   	ret    

c001bcca <sysCallNotImpl(regs*)>:
c001bcca:	83 ec 18             	sub    esp,0x18
c001bccd:	68 aa be 02 c0       	push   0xc002beaa
c001bcd2:	e8 2a e8 ff ff       	call   c001a501 <Krnl::panic(char const*)>
c001bcd7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bcdc:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bce1:	83 c4 1c             	add    esp,0x1c
c001bce4:	c3                   	ret    

c001bce5 <sysPanic(regs*)>:
c001bce5:	83 ec 18             	sub    esp,0x18
c001bce8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bcec:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bcef:	e8 0d e8 ff ff       	call   c001a501 <Krnl::panic(char const*)>
c001bcf4:	c7 04 24 c4 be 02 c0 	mov    DWORD PTR [esp],0xc002bec4
c001bcfb:	e8 01 e8 ff ff       	call   c001a501 <Krnl::panic(char const*)>
c001bd00:	b8 01 00 00 00       	mov    eax,0x1
c001bd05:	31 d2                	xor    edx,edx
c001bd07:	83 c4 1c             	add    esp,0x1c
c001bd0a:	c3                   	ret    

c001bd0b <sysCallRmdir(regs*)>:
c001bd0b:	56                   	push   esi
c001bd0c:	53                   	push   ebx
c001bd0d:	83 ec 20             	sub    esp,0x20
c001bd10:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bd14:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bd17:	68 14 01 00 00       	push   0x114
c001bd1c:	e8 2a 3b ff ff       	call   c000f84b <malloc>
c001bd21:	83 c4 0c             	add    esp,0xc
c001bd24:	89 c3                	mov    ebx,eax
c001bd26:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd2b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd2e:	56                   	push   esi
c001bd2f:	53                   	push   ebx
c001bd30:	e8 ed 75 ff ff       	call   c0013322 <File::File(char const*, Process*)>
c001bd35:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd38:	e8 c1 77 ff ff       	call   c00134fe <File::unlink()>
c001bd3d:	83 c4 10             	add    esp,0x10
c001bd40:	85 db                	test   ebx,ebx
c001bd42:	74 14                	je     c001bd58 <sysCallRmdir(regs*)+0x4d>
c001bd44:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bd48:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bd4a:	83 ec 0c             	sub    esp,0xc
c001bd4d:	53                   	push   ebx
c001bd4e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bd51:	83 c4 10             	add    esp,0x10
c001bd54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bd58:	85 c0                	test   eax,eax
c001bd5a:	0f 95 c0             	setne  al
c001bd5d:	31 d2                	xor    edx,edx
c001bd5f:	0f b6 c0             	movzx  eax,al
c001bd62:	f7 d8                	neg    eax
c001bd64:	83 d2 00             	adc    edx,0x0
c001bd67:	83 c4 14             	add    esp,0x14
c001bd6a:	f7 da                	neg    edx
c001bd6c:	5b                   	pop    ebx
c001bd6d:	5e                   	pop    esi
c001bd6e:	c3                   	ret    

c001bd6f <sysCallUnlink(regs*)>:
c001bd6f:	56                   	push   esi
c001bd70:	53                   	push   ebx
c001bd71:	83 ec 20             	sub    esp,0x20
c001bd74:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bd78:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bd7b:	68 14 01 00 00       	push   0x114
c001bd80:	e8 c6 3a ff ff       	call   c000f84b <malloc>
c001bd85:	83 c4 0c             	add    esp,0xc
c001bd88:	89 c3                	mov    ebx,eax
c001bd8a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd8f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd92:	56                   	push   esi
c001bd93:	53                   	push   ebx
c001bd94:	e8 89 75 ff ff       	call   c0013322 <File::File(char const*, Process*)>
c001bd99:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd9c:	e8 5d 77 ff ff       	call   c00134fe <File::unlink()>
c001bda1:	83 c4 10             	add    esp,0x10
c001bda4:	85 db                	test   ebx,ebx
c001bda6:	74 14                	je     c001bdbc <sysCallUnlink(regs*)+0x4d>
c001bda8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bdac:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bdae:	83 ec 0c             	sub    esp,0xc
c001bdb1:	53                   	push   ebx
c001bdb2:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bdb5:	83 c4 10             	add    esp,0x10
c001bdb8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bdbc:	85 c0                	test   eax,eax
c001bdbe:	0f 95 c0             	setne  al
c001bdc1:	31 d2                	xor    edx,edx
c001bdc3:	0f b6 c0             	movzx  eax,al
c001bdc6:	f7 d8                	neg    eax
c001bdc8:	83 d2 00             	adc    edx,0x0
c001bdcb:	83 c4 14             	add    esp,0x14
c001bdce:	f7 da                	neg    edx
c001bdd0:	5b                   	pop    ebx
c001bdd1:	5e                   	pop    esi
c001bdd2:	c3                   	ret    

c001bdd3 <sysCallGetArgv(regs*)>:
c001bdd3:	83 ec 0c             	sub    esp,0xc
c001bdd6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bdda:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bddd:	85 c0                	test   eax,eax
c001bddf:	78 2b                	js     c001be0c <sysCallGetArgv(regs*)+0x39>
c001bde1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bde7:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bdea:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001bdf0:	7d 1a                	jge    c001be0c <sysCallGetArgv(regs*)+0x39>
c001bdf2:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001bdf9:	85 c0                	test   eax,eax
c001bdfb:	74 17                	je     c001be14 <sysCallGetArgv(regs*)+0x41>
c001bdfd:	83 ec 08             	sub    esp,0x8
c001be00:	50                   	push   eax
c001be01:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001be04:	e8 33 4a fe ff       	call   c000083c <strcpy>
c001be09:	83 c4 10             	add    esp,0x10
c001be0c:	31 c0                	xor    eax,eax
c001be0e:	31 d2                	xor    edx,edx
c001be10:	83 c4 0c             	add    esp,0xc
c001be13:	c3                   	ret    
c001be14:	b8 01 00 00 00       	mov    eax,0x1
c001be19:	31 d2                	xor    edx,edx
c001be1b:	83 c4 0c             	add    esp,0xc
c001be1e:	c3                   	ret    

c001be1f <sysCallTTYName(regs*)>:
c001be1f:	56                   	push   esi
c001be20:	53                   	push   ebx
c001be21:	53                   	push   ebx
c001be22:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001be26:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001be29:	85 c0                	test   eax,eax
c001be2b:	74 5f                	je     c001be8c <sysCallTTYName(regs*)+0x6d>
c001be2d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001be30:	83 f8 02             	cmp    eax,0x2
c001be33:	77 3e                	ja     c001be73 <sysCallTTYName(regs*)+0x54>
c001be35:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be3a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001be3d:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001be43:	85 db                	test   ebx,ebx
c001be45:	74 45                	je     c001be8c <sysCallTTYName(regs*)+0x6d>
c001be47:	83 ec 0c             	sub    esp,0xc
c001be4a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001be4c:	53                   	push   ebx
c001be4d:	ff 10                	call   DWORD PTR [eax]
c001be4f:	83 c4 10             	add    esp,0x10
c001be52:	84 c0                	test   al,al
c001be54:	74 41                	je     c001be97 <sysCallTTYName(regs*)+0x78>
c001be56:	83 ec 08             	sub    esp,0x8
c001be59:	81 c3 82 00 00 00    	add    ebx,0x82
c001be5f:	53                   	push   ebx
c001be60:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001be63:	e8 d4 49 fe ff       	call   c000083c <strcpy>
c001be68:	83 c4 10             	add    esp,0x10
c001be6b:	31 c0                	xor    eax,eax
c001be6d:	59                   	pop    ecx
c001be6e:	31 d2                	xor    edx,edx
c001be70:	5b                   	pop    ebx
c001be71:	5e                   	pop    esi
c001be72:	c3                   	ret    
c001be73:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001be78:	74 bb                	je     c001be35 <sysCallTTYName(regs*)+0x16>
c001be7a:	83 ec 0c             	sub    esp,0xc
c001be7d:	50                   	push   eax
c001be7e:	e8 16 5a ff ff       	call   c0011899 <getFromFileDescriptor(int)>
c001be83:	83 c4 10             	add    esp,0x10
c001be86:	89 c3                	mov    ebx,eax
c001be88:	85 db                	test   ebx,ebx
c001be8a:	75 bb                	jne    c001be47 <sysCallTTYName(regs*)+0x28>
c001be8c:	59                   	pop    ecx
c001be8d:	b8 01 00 00 00       	mov    eax,0x1
c001be92:	31 d2                	xor    edx,edx
c001be94:	5b                   	pop    ebx
c001be95:	5e                   	pop    esi
c001be96:	c3                   	ret    
c001be97:	59                   	pop    ecx
c001be98:	b8 02 00 00 00       	mov    eax,0x2
c001be9d:	31 d2                	xor    edx,edx
c001be9f:	5b                   	pop    ebx
c001bea0:	5e                   	pop    esi
c001bea1:	c3                   	ret    

c001bea2 <sysCallUSleep(regs*)>:
c001bea2:	83 ec 14             	sub    esp,0x14
c001bea5:	b8 e8 03 00 00       	mov    eax,0x3e8
c001beaa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001beae:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001beb5:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001beb8:	01 ca                	add    edx,ecx
c001beba:	52                   	push   edx
c001bebb:	50                   	push   eax
c001bebc:	e8 a5 23 00 00       	call   c001e266 <nanoSleep(unsigned long long)>
c001bec1:	31 c0                	xor    eax,eax
c001bec3:	31 d2                	xor    edx,edx
c001bec5:	83 c4 1c             	add    esp,0x1c
c001bec8:	c3                   	ret    

c001bec9 <sysCallSpawn(regs*)>:
c001bec9:	56                   	push   esi
c001beca:	53                   	push   ebx
c001becb:	53                   	push   ebx
c001becc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bed0:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001bed3:	85 f6                	test   esi,esi
c001bed5:	75 08                	jne    c001bedf <sysCallSpawn(regs*)+0x16>
c001bed7:	59                   	pop    ecx
c001bed8:	31 c0                	xor    eax,eax
c001beda:	31 d2                	xor    edx,edx
c001bedc:	5b                   	pop    ebx
c001bedd:	5e                   	pop    esi
c001bede:	c3                   	ret    
c001bedf:	83 ec 0c             	sub    esp,0xc
c001bee2:	68 3f 07 00 00       	push   0x73f
c001bee7:	e8 5f 39 ff ff       	call   c000f84b <malloc>
c001beec:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001beef:	89 c6                	mov    esi,eax
c001bef1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bef6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bef9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001befc:	56                   	push   esi
c001befd:	e8 2a 1a 00 00       	call   c001d92c <Process::Process(char const*, Process*, char**)>
c001bf02:	83 c4 20             	add    esp,0x20
c001bf05:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001bf0c:	75 c9                	jne    c001bed7 <sysCallSpawn(regs*)+0xe>
c001bf0e:	83 ec 0c             	sub    esp,0xc
c001bf11:	56                   	push   esi
c001bf12:	e8 fd 1f 00 00       	call   c001df14 <Process::createUserThread()>
c001bf17:	8b 06                	mov    eax,DWORD PTR [esi]
c001bf19:	83 c4 10             	add    esp,0x10
c001bf1c:	99                   	cdq    
c001bf1d:	59                   	pop    ecx
c001bf1e:	5b                   	pop    ebx
c001bf1f:	5e                   	pop    esi
c001bf20:	c3                   	ret    

c001bf21 <sysCallGetEnv(regs*)>:
c001bf21:	55                   	push   ebp
c001bf22:	57                   	push   edi
c001bf23:	56                   	push   esi
c001bf24:	53                   	push   ebx
c001bf25:	83 ec 28             	sub    esp,0x28
c001bf28:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001bf2c:	68 d3 be 02 c0       	push   0xc002bed3
c001bf31:	e8 8d 6e ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001bf36:	5f                   	pop    edi
c001bf37:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001bf3a:	5d                   	pop    ebp
c001bf3b:	53                   	push   ebx
c001bf3c:	68 02 c2 02 c0       	push   0xc002c202
c001bf41:	e8 7d 6e ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001bf46:	58                   	pop    eax
c001bf47:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001bf4a:	5a                   	pop    edx
c001bf4b:	57                   	push   edi
c001bf4c:	68 dc be 02 c0       	push   0xc002bedc
c001bf51:	e8 6d 6e ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001bf56:	59                   	pop    ecx
c001bf57:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf5c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bf5f:	e8 b9 e4 ff ff       	call   c001a41d <Krnl::getProcessTotalEnvCount(Process*)>
c001bf64:	5a                   	pop    edx
c001bf65:	89 c5                	mov    ebp,eax
c001bf67:	59                   	pop    ecx
c001bf68:	50                   	push   eax
c001bf69:	68 e6 be 02 c0       	push   0xc002bee6
c001bf6e:	e8 50 6e ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001bf73:	83 c4 10             	add    esp,0x10
c001bf76:	39 ef                	cmp    edi,ebp
c001bf78:	7c 15                	jl     c001bf8f <sysCallGetEnv(regs*)+0x6e>
c001bf7a:	85 db                	test   ebx,ebx
c001bf7c:	75 0c                	jne    c001bf8a <sysCallGetEnv(regs*)+0x69>
c001bf7e:	83 c4 1c             	add    esp,0x1c
c001bf81:	31 c0                	xor    eax,eax
c001bf83:	5b                   	pop    ebx
c001bf84:	31 d2                	xor    edx,edx
c001bf86:	5e                   	pop    esi
c001bf87:	5f                   	pop    edi
c001bf88:	5d                   	pop    ebp
c001bf89:	c3                   	ret    
c001bf8a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001bf8d:	eb ef                	jmp    c001bf7e <sysCallGetEnv(regs*)+0x5d>
c001bf8f:	83 ec 0c             	sub    esp,0xc
c001bf92:	68 f2 be 02 c0       	push   0xc002bef2
c001bf97:	e8 27 6e ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001bf9c:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bfa0:	83 c4 0c             	add    esp,0xc
c001bfa3:	57                   	push   edi
c001bfa4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bfaa:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001bfad:	50                   	push   eax
c001bfae:	e8 8a e4 ff ff       	call   c001a43d <Krnl::getProcessEnvPair(Process*, int)>
c001bfb3:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001bfb7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001bfbb:	68 81 c2 02 c0       	push   0xc002c281
c001bfc0:	e8 fe 6d ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001bfc5:	83 c4 10             	add    esp,0x10
c001bfc8:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001bfcb:	85 f6                	test   esi,esi
c001bfcd:	75 47                	jne    c001c016 <sysCallGetEnv(regs*)+0xf5>
c001bfcf:	83 ec 0c             	sub    esp,0xc
c001bfd2:	55                   	push   ebp
c001bfd3:	e8 c4 47 fe ff       	call   c000079c <strlen>
c001bfd8:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bfdb:	89 c3                	mov    ebx,eax
c001bfdd:	e8 ba 47 fe ff       	call   c000079c <strlen>
c001bfe2:	5a                   	pop    edx
c001bfe3:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001bfe7:	59                   	pop    ecx
c001bfe8:	50                   	push   eax
c001bfe9:	68 f5 be 02 c0       	push   0xc002bef5
c001bfee:	e8 d0 6d ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001bff3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001bff6:	e8 a1 47 fe ff       	call   c000079c <strlen>
c001bffb:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bffe:	89 c3                	mov    ebx,eax
c001c000:	e8 97 47 fe ff       	call   c000079c <strlen>
c001c005:	83 c4 10             	add    esp,0x10
c001c008:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c00c:	83 c4 1c             	add    esp,0x1c
c001c00f:	31 d2                	xor    edx,edx
c001c011:	5b                   	pop    ebx
c001c012:	5e                   	pop    esi
c001c013:	5f                   	pop    edi
c001c014:	5d                   	pop    ebp
c001c015:	c3                   	ret    
c001c016:	83 ec 0c             	sub    esp,0xc
c001c019:	68 9b c2 02 c0       	push   0xc002c29b
c001c01e:	e8 a0 6d ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001c023:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c026:	58                   	pop    eax
c001c027:	5a                   	pop    edx
c001c028:	55                   	push   ebp
c001c029:	53                   	push   ebx
c001c02a:	e8 0d 48 fe ff       	call   c000083c <strcpy>
c001c02f:	59                   	pop    ecx
c001c030:	5e                   	pop    esi
c001c031:	68 ff be 02 c0       	push   0xc002beff
c001c036:	53                   	push   ebx
c001c037:	e8 40 49 fe ff       	call   c000097c <strcat>
c001c03c:	5d                   	pop    ebp
c001c03d:	58                   	pop    eax
c001c03e:	57                   	push   edi
c001c03f:	53                   	push   ebx
c001c040:	e8 37 49 fe ff       	call   c000097c <strcat>
c001c045:	c7 04 24 b5 c2 02 c0 	mov    DWORD PTR [esp],0xc002c2b5
c001c04c:	e8 72 6d ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001c051:	83 c4 10             	add    esp,0x10
c001c054:	e9 25 ff ff ff       	jmp    c001bf7e <sysCallGetEnv(regs*)+0x5d>

c001c059 <sysAppSettings(regs*)>:
c001c059:	53                   	push   ebx
c001c05a:	83 ec 08             	sub    esp,0x8
c001c05d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c061:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001c064:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001c06a:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c06f:	66 3d c0 09          	cmp    ax,0x9c0
c001c073:	75 2f                	jne    c001c0a4 <sysAppSettings(regs*)+0x4b>
c001c075:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001c07b:	83 e0 1f             	and    eax,0x1f
c001c07e:	3c 01                	cmp    al,0x1
c001c080:	74 2e                	je     c001c0b0 <sysAppSettings(regs*)+0x57>
c001c082:	3c 07                	cmp    al,0x7
c001c084:	0f 84 bd 00 00 00    	je     c001c147 <sysAppSettings(regs*)+0xee>
c001c08a:	84 c0                	test   al,al
c001c08c:	0f 84 dc 00 00 00    	je     c001c16e <sysAppSettings(regs*)+0x115>
c001c092:	3c 08                	cmp    al,0x8
c001c094:	74 6d                	je     c001c103 <sysAppSettings(regs*)+0xaa>
c001c096:	0f b6 c0             	movzx  eax,al
c001c099:	83 c4 08             	add    esp,0x8
c001c09c:	05 e8 03 00 00       	add    eax,0x3e8
c001c0a1:	5b                   	pop    ebx
c001c0a2:	99                   	cdq    
c001c0a3:	c3                   	ret    
c001c0a4:	b8 01 00 00 00       	mov    eax,0x1
c001c0a9:	31 d2                	xor    edx,edx
c001c0ab:	83 c4 08             	add    esp,0x8
c001c0ae:	5b                   	pop    ebx
c001c0af:	c3                   	ret    
c001c0b0:	51                   	push   ecx
c001c0b1:	68 00 01 00 00       	push   0x100
c001c0b6:	6a 00                	push   0x0
c001c0b8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0bd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c0c0:	83 c0 0c             	add    eax,0xc
c001c0c3:	50                   	push   eax
c001c0c4:	e8 b7 46 fe ff       	call   c0000780 <memset>
c001c0c9:	83 c4 0c             	add    esp,0xc
c001c0cc:	68 ff 00 00 00       	push   0xff
c001c0d1:	53                   	push   ebx
c001c0d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0d7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c0da:	83 c0 0c             	add    eax,0xc
c001c0dd:	50                   	push   eax
c001c0de:	e8 69 46 fe ff       	call   c000074c <memcpy>
c001c0e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0e8:	5b                   	pop    ebx
c001c0e9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c0ec:	5a                   	pop    edx
c001c0ed:	8d 50 0c             	lea    edx,[eax+0xc]
c001c0f0:	52                   	push   edx
c001c0f1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c0f7:	e8 c6 49 ff ff       	call   c0010ac2 <VgaText::setTitle(char*)>
c001c0fc:	83 c4 10             	add    esp,0x10
c001c0ff:	31 c0                	xor    eax,eax
c001c101:	eb a6                	jmp    c001c0a9 <sysAppSettings(regs*)+0x50>
c001c103:	83 ec 08             	sub    esp,0x8
c001c106:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c10c:	83 e0 0f             	and    eax,0xf
c001c10f:	50                   	push   eax
c001c110:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c115:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c118:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c11e:	e8 91 49 ff ff       	call   c0010ab4 <VgaText::setTitleColour(VgaColour)>
c001c123:	58                   	pop    eax
c001c124:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c12a:	5a                   	pop    edx
c001c12b:	c1 e8 04             	shr    eax,0x4
c001c12e:	83 e0 0f             	and    eax,0xf
c001c131:	50                   	push   eax
c001c132:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c137:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c13a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c140:	e8 61 49 ff ff       	call   c0010aa6 <VgaText::setTitleTextColour(VgaColour)>
c001c145:	eb b5                	jmp    c001c0fc <sysAppSettings(regs*)+0xa3>
c001c147:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c14c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c14f:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c155:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001c15b:	c0 e8 06             	shr    al,0x6
c001c15e:	83 e0 01             	and    eax,0x1
c001c161:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001c167:	31 c0                	xor    eax,eax
c001c169:	e9 3b ff ff ff       	jmp    c001c0a9 <sysAppSettings(regs*)+0x50>
c001c16e:	b8 02 00 00 00       	mov    eax,0x2
c001c173:	e9 31 ff ff ff       	jmp    c001c0a9 <sysAppSettings(regs*)+0x50>

c001c178 <sysSetFatAttrib(regs*)>:
c001c178:	57                   	push   edi
c001c179:	56                   	push   esi
c001c17a:	53                   	push   ebx
c001c17b:	83 ec 1c             	sub    esp,0x1c
c001c17e:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c182:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c185:	68 14 01 00 00       	push   0x114
c001c18a:	e8 bc 36 ff ff       	call   c000f84b <malloc>
c001c18f:	83 c4 0c             	add    esp,0xc
c001c192:	89 c3                	mov    ebx,eax
c001c194:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c199:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c19c:	57                   	push   edi
c001c19d:	53                   	push   ebx
c001c19e:	e8 7f 71 ff ff       	call   c0013322 <File::File(char const*, Process*)>
c001c1a3:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c1a6:	83 c4 0c             	add    esp,0xc
c001c1a9:	0f b6 d4             	movzx  edx,ah
c001c1ac:	0f b6 c0             	movzx  eax,al
c001c1af:	52                   	push   edx
c001c1b0:	50                   	push   eax
c001c1b1:	53                   	push   ebx
c001c1b2:	e8 e1 73 ff ff       	call   c0013598 <File::chfatattr(unsigned char, unsigned char)>
c001c1b7:	83 c4 10             	add    esp,0x10
c001c1ba:	85 db                	test   ebx,ebx
c001c1bc:	74 14                	je     c001c1d2 <sysSetFatAttrib(regs*)+0x5a>
c001c1be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c1c2:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c1c4:	83 ec 0c             	sub    esp,0xc
c001c1c7:	53                   	push   ebx
c001c1c8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c1cb:	83 c4 10             	add    esp,0x10
c001c1ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c1d2:	85 c0                	test   eax,eax
c001c1d4:	0f 95 c0             	setne  al
c001c1d7:	31 d2                	xor    edx,edx
c001c1d9:	0f b6 c0             	movzx  eax,al
c001c1dc:	f7 d8                	neg    eax
c001c1de:	83 d2 00             	adc    edx,0x0
c001c1e1:	83 c4 10             	add    esp,0x10
c001c1e4:	f7 da                	neg    edx
c001c1e6:	5b                   	pop    ebx
c001c1e7:	5e                   	pop    esi
c001c1e8:	5f                   	pop    edi
c001c1e9:	c3                   	ret    

c001c1ea <sysPipe(regs*)>:
c001c1ea:	57                   	push   edi
c001c1eb:	56                   	push   esi
c001c1ec:	53                   	push   ebx
c001c1ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1f1:	83 ec 0c             	sub    esp,0xc
c001c1f4:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c1f7:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c1fa:	6a 20                	push   0x20
c001c1fc:	e8 4a 36 ff ff       	call   c000f84b <malloc>
c001c201:	89 c3                	mov    ebx,eax
c001c203:	58                   	pop    eax
c001c204:	5a                   	pop    edx
c001c205:	68 00 50 00 00       	push   0x5000
c001c20a:	53                   	push   ebx
c001c20b:	e8 5a 42 ff ff       	call   c001046a <Pipe::Pipe(int)>
c001c210:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c213:	e8 8c 53 ff ff       	call   c00115a4 <UnixFile::getFileDescriptor()>
c001c218:	89 07                	mov    DWORD PTR [edi],eax
c001c21a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c21d:	e8 82 53 ff ff       	call   c00115a4 <UnixFile::getFileDescriptor()>
c001c222:	83 c4 10             	add    esp,0x10
c001c225:	89 06                	mov    DWORD PTR [esi],eax
c001c227:	31 d2                	xor    edx,edx
c001c229:	5b                   	pop    ebx
c001c22a:	31 c0                	xor    eax,eax
c001c22c:	5e                   	pop    esi
c001c22d:	5f                   	pop    edi
c001c22e:	c3                   	ret    

c001c22f <sysGetUnixTime(regs*)>:
c001c22f:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c001c234:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c23a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c23e:	e9 c9 7a ff ff       	jmp    c0013d0c <Clock::timeInSecondsLocal()>

c001c243 <string_ends_with(char const*, char const*)>:
c001c243:	57                   	push   edi
c001c244:	56                   	push   esi
c001c245:	53                   	push   ebx
c001c246:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c24a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c24e:	83 ec 0c             	sub    esp,0xc
c001c251:	53                   	push   ebx
c001c252:	e8 45 45 fe ff       	call   c000079c <strlen>
c001c257:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c25a:	89 c6                	mov    esi,eax
c001c25c:	e8 3b 45 fe ff       	call   c000079c <strlen>
c001c261:	83 c4 10             	add    esp,0x10
c001c264:	39 c6                	cmp    esi,eax
c001c266:	7d 06                	jge    c001c26e <string_ends_with(char const*, char const*)+0x2b>
c001c268:	5b                   	pop    ebx
c001c269:	31 c0                	xor    eax,eax
c001c26b:	5e                   	pop    esi
c001c26c:	5f                   	pop    edi
c001c26d:	c3                   	ret    
c001c26e:	83 ec 08             	sub    esp,0x8
c001c271:	29 c6                	sub    esi,eax
c001c273:	57                   	push   edi
c001c274:	01 f3                	add    ebx,esi
c001c276:	53                   	push   ebx
c001c277:	e8 4c 46 fe ff       	call   c00008c8 <strcmp>
c001c27c:	83 c4 10             	add    esp,0x10
c001c27f:	85 c0                	test   eax,eax
c001c281:	5b                   	pop    ebx
c001c282:	0f 94 c0             	sete   al
c001c285:	5e                   	pop    esi
c001c286:	0f b6 c0             	movzx  eax,al
c001c289:	5f                   	pop    edi
c001c28a:	c3                   	ret    

c001c28b <sysCallOpen(regs*)>:
c001c28b:	56                   	push   esi
c001c28c:	53                   	push   ebx
c001c28d:	81 ec 04 01 00 00    	sub    esp,0x104
c001c293:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c29a:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c29d:	85 c9                	test   ecx,ecx
c001c29f:	0f 84 b3 00 00 00    	je     c001c358 <sysCallOpen(regs*)+0xcd>
c001c2a5:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c2a8:	85 c0                	test   eax,eax
c001c2aa:	0f 84 a8 00 00 00    	je     c001c358 <sysCallOpen(regs*)+0xcd>
c001c2b0:	52                   	push   edx
c001c2b1:	68 01 bf 02 c0       	push   0xc002bf01
c001c2b6:	50                   	push   eax
c001c2b7:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c2bb:	56                   	push   esi
c001c2bc:	e8 b7 6e ff ff       	call   c0013178 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c2c1:	89 34 24             	mov    DWORD PTR [esp],esi
c001c2c4:	e8 d3 44 fe ff       	call   c000079c <strlen>
c001c2c9:	83 c4 10             	add    esp,0x10
c001c2cc:	48                   	dec    eax
c001c2cd:	74 1d                	je     c001c2ec <sysCallOpen(regs*)+0x61>
c001c2cf:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c2d2:	eb 0f                	jmp    c001c2e3 <sysCallOpen(regs*)+0x58>
c001c2d4:	80 fa 3a             	cmp    dl,0x3a
c001c2d7:	74 0f                	je     c001c2e8 <sysCallOpen(regs*)+0x5d>
c001c2d9:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c2dd:	48                   	dec    eax
c001c2de:	74 0c                	je     c001c2ec <sysCallOpen(regs*)+0x61>
c001c2e0:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c2e3:	80 fa 2e             	cmp    dl,0x2e
c001c2e6:	75 ec                	jne    c001c2d4 <sysCallOpen(regs*)+0x49>
c001c2e8:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c2ec:	83 ec 08             	sub    esp,0x8
c001c2ef:	68 05 bf 02 c0       	push   0xc002bf05
c001c2f4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c2f7:	e8 47 ff ff ff       	call   c001c243 <string_ends_with(char const*, char const*)>
c001c2fc:	83 c4 10             	add    esp,0x10
c001c2ff:	85 c0                	test   eax,eax
c001c301:	75 17                	jne    c001c31a <sysCallOpen(regs*)+0x8f>
c001c303:	83 ec 08             	sub    esp,0x8
c001c306:	68 26 bf 02 c0       	push   0xc002bf26
c001c30b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c30e:	e8 30 ff ff ff       	call   c001c243 <string_ends_with(char const*, char const*)>
c001c313:	83 c4 10             	add    esp,0x10
c001c316:	85 c0                	test   eax,eax
c001c318:	74 51                	je     c001c36b <sysCallOpen(regs*)+0xe0>
c001c31a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c31d:	83 ec 08             	sub    esp,0x8
c001c320:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c326:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c32d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c330:	ff 30                	push   DWORD PTR [eax]
c001c332:	68 0a bf 02 c0       	push   0xc002bf0a
c001c337:	e8 87 6a ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001c33c:	c7 04 24 19 bf 02 c0 	mov    DWORD PTR [esp],0xc002bf19
c001c343:	e8 7b 6a ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001c348:	83 c4 10             	add    esp,0x10
c001c34b:	81 c4 04 01 00 00    	add    esp,0x104
c001c351:	31 c0                	xor    eax,eax
c001c353:	31 d2                	xor    edx,edx
c001c355:	5b                   	pop    ebx
c001c356:	5e                   	pop    esi
c001c357:	c3                   	ret    
c001c358:	81 c4 04 01 00 00    	add    esp,0x104
c001c35e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c363:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c368:	5b                   	pop    ebx
c001c369:	5e                   	pop    esi
c001c36a:	c3                   	ret    
c001c36b:	83 ec 08             	sub    esp,0x8
c001c36e:	68 06 bf 02 c0       	push   0xc002bf06
c001c373:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c376:	e8 4d 45 fe ff       	call   c00008c8 <strcmp>
c001c37b:	83 c4 10             	add    esp,0x10
c001c37e:	85 c0                	test   eax,eax
c001c380:	74 98                	je     c001c31a <sysCallOpen(regs*)+0x8f>
c001c382:	83 ec 08             	sub    esp,0x8
c001c385:	68 05 bf 02 c0       	push   0xc002bf05
c001c38a:	56                   	push   esi
c001c38b:	e8 b3 fe ff ff       	call   c001c243 <string_ends_with(char const*, char const*)>
c001c390:	83 c4 10             	add    esp,0x10
c001c393:	85 c0                	test   eax,eax
c001c395:	75 83                	jne    c001c31a <sysCallOpen(regs*)+0x8f>
c001c397:	83 ec 08             	sub    esp,0x8
c001c39a:	68 2b bf 02 c0       	push   0xc002bf2b
c001c39f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c3a2:	e8 9c fe ff ff       	call   c001c243 <string_ends_with(char const*, char const*)>
c001c3a7:	83 c4 10             	add    esp,0x10
c001c3aa:	85 c0                	test   eax,eax
c001c3ac:	0f 85 d9 00 00 00    	jne    c001c48b <sysCallOpen(regs*)+0x200>
c001c3b2:	83 ec 08             	sub    esp,0x8
c001c3b5:	68 30 bf 02 c0       	push   0xc002bf30
c001c3ba:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c3bd:	e8 81 fe ff ff       	call   c001c243 <string_ends_with(char const*, char const*)>
c001c3c2:	83 c4 10             	add    esp,0x10
c001c3c5:	85 c0                	test   eax,eax
c001c3c7:	0f 85 be 00 00 00    	jne    c001c48b <sysCallOpen(regs*)+0x200>
c001c3cd:	83 ec 08             	sub    esp,0x8
c001c3d0:	68 2c bf 02 c0       	push   0xc002bf2c
c001c3d5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c3d8:	e8 eb 44 fe ff       	call   c00008c8 <strcmp>
c001c3dd:	83 c4 10             	add    esp,0x10
c001c3e0:	85 c0                	test   eax,eax
c001c3e2:	0f 84 a3 00 00 00    	je     c001c48b <sysCallOpen(regs*)+0x200>
c001c3e8:	83 ec 08             	sub    esp,0x8
c001c3eb:	68 2b bf 02 c0       	push   0xc002bf2b
c001c3f0:	56                   	push   esi
c001c3f1:	e8 4d fe ff ff       	call   c001c243 <string_ends_with(char const*, char const*)>
c001c3f6:	83 c4 10             	add    esp,0x10
c001c3f9:	85 c0                	test   eax,eax
c001c3fb:	0f 85 8a 00 00 00    	jne    c001c48b <sysCallOpen(regs*)+0x200>
c001c401:	83 ec 0c             	sub    esp,0xc
c001c404:	68 14 01 00 00       	push   0x114
c001c409:	e8 3d 34 ff ff       	call   c000f84b <malloc>
c001c40e:	83 c4 0c             	add    esp,0xc
c001c411:	89 c6                	mov    esi,eax
c001c413:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c418:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c41b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c41e:	56                   	push   esi
c001c41f:	e8 fe 6e ff ff       	call   c0013322 <File::File(char const*, Process*)>
c001c424:	83 c4 10             	add    esp,0x10
c001c427:	85 f6                	test   esi,esi
c001c429:	0f 84 29 ff ff ff    	je     c001c358 <sysCallOpen(regs*)+0xcd>
c001c42f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c432:	0f b6 c2             	movzx  eax,dl
c001c435:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c438:	89 d0                	mov    eax,edx
c001c43a:	83 e0 01             	and    eax,0x1
c001c43d:	f6 c2 02             	test   dl,0x2
c001c440:	74 03                	je     c001c445 <sysCallOpen(regs*)+0x1ba>
c001c442:	83 c8 02             	or     eax,0x2
c001c445:	f6 c2 04             	test   dl,0x4
c001c448:	74 03                	je     c001c44d <sysCallOpen(regs*)+0x1c2>
c001c44a:	83 c8 04             	or     eax,0x4
c001c44d:	f6 c2 08             	test   dl,0x8
c001c450:	74 03                	je     c001c455 <sysCallOpen(regs*)+0x1ca>
c001c452:	83 c8 0a             	or     eax,0xa
c001c455:	83 e2 10             	and    edx,0x10
c001c458:	74 03                	je     c001c45d <sysCallOpen(regs*)+0x1d2>
c001c45a:	83 c8 12             	or     eax,0x12
c001c45d:	83 ec 08             	sub    esp,0x8
c001c460:	50                   	push   eax
c001c461:	56                   	push   esi
c001c462:	e8 1f 6f ff ff       	call   c0013386 <File::open(FileOpenMode)>
c001c467:	83 c4 10             	add    esp,0x10
c001c46a:	85 c0                	test   eax,eax
c001c46c:	0f 85 e6 fe ff ff    	jne    c001c358 <sysCallOpen(regs*)+0xcd>
c001c472:	83 ec 0c             	sub    esp,0xc
c001c475:	56                   	push   esi
c001c476:	e8 29 51 ff ff       	call   c00115a4 <UnixFile::getFileDescriptor()>
c001c47b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c47e:	89 02                	mov    DWORD PTR [edx],eax
c001c480:	c1 f8 1f             	sar    eax,0x1f
c001c483:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c486:	e9 bd fe ff ff       	jmp    c001c348 <sysCallOpen(regs*)+0xbd>
c001c48b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c48e:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c494:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c49b:	e9 ab fe ff ff       	jmp    c001c34b <sysCallOpen(regs*)+0xc0>

c001c4a0 <Sys::loadSyscalls()>:
c001c4a0:	c7 05 e0 0f 03 c0 ad b5 01 c0 	mov    DWORD PTR ds:0xc0030fe0,0xc001b5ad
c001c4aa:	c7 05 e4 0f 03 c0 96 b1 01 c0 	mov    DWORD PTR ds:0xc0030fe4,0xc001b196
c001c4b4:	c7 05 e8 0f 03 c0 00 b3 01 c0 	mov    DWORD PTR ds:0xc0030fe8,0xc001b300
c001c4be:	c7 05 ec 0f 03 c0 e3 b4 01 c0 	mov    DWORD PTR ds:0xc0030fec,0xc001b4e3
c001c4c8:	c7 05 f0 0f 03 c0 98 b2 01 c0 	mov    DWORD PTR ds:0xc0030ff0,0xc001b298
c001c4d2:	c7 05 f4 0f 03 c0 cd b1 01 c0 	mov    DWORD PTR ds:0xc0030ff4,0xc001b1cd
c001c4dc:	c7 05 f8 0f 03 c0 ae b1 01 c0 	mov    DWORD PTR ds:0xc0030ff8,0xc001b1ae
c001c4e6:	c7 05 fc 0f 03 c0 55 b3 01 c0 	mov    DWORD PTR ds:0xc0030ffc,0xc001b355
c001c4f0:	c7 05 04 10 03 c0 dd ba 01 c0 	mov    DWORD PTR ds:0xc0031004,0xc001badd
c001c4fa:	c7 05 00 10 03 c0 8b c2 01 c0 	mov    DWORD PTR ds:0xc0031000,0xc001c28b
c001c504:	c7 05 08 10 03 c0 65 bb 01 c0 	mov    DWORD PTR ds:0xc0031008,0xc001bb65
c001c50e:	c7 05 0c 10 03 c0 cc b7 01 c0 	mov    DWORD PTR ds:0xc003100c,0xc001b7cc
c001c518:	c7 05 10 10 03 c0 e8 b5 01 c0 	mov    DWORD PTR ds:0xc0031010,0xc001b5e8
c001c522:	c7 05 14 10 03 c0 ed b5 01 c0 	mov    DWORD PTR ds:0xc0031014,0xc001b5ed
c001c52c:	c7 05 18 10 03 c0 40 bc 01 c0 	mov    DWORD PTR ds:0xc0031018,0xc001bc40
c001c536:	c7 05 1c 10 03 c0 da bb 01 c0 	mov    DWORD PTR ds:0xc003101c,0xc001bbda
c001c540:	c7 05 20 10 03 c0 b4 b8 01 c0 	mov    DWORD PTR ds:0xc0031020,0xc001b8b4
c001c54a:	c7 05 24 10 03 c0 1d b9 01 c0 	mov    DWORD PTR ds:0xc0031024,0xc001b91d
c001c554:	c7 05 28 10 03 c0 9a b9 01 c0 	mov    DWORD PTR ds:0xc0031028,0xc001b99a
c001c55e:	c7 05 2c 10 03 c0 f2 b5 01 c0 	mov    DWORD PTR ds:0xc003102c,0xc001b5f2
c001c568:	c7 05 30 10 03 c0 b0 bc 01 c0 	mov    DWORD PTR ds:0xc0031030,0xc001bcb0
c001c572:	c7 05 34 10 03 c0 ca bc 01 c0 	mov    DWORD PTR ds:0xc0031034,0xc001bcca
c001c57c:	c7 05 38 10 03 c0 ca bc 01 c0 	mov    DWORD PTR ds:0xc0031038,0xc001bcca
c001c586:	c7 05 3c 10 03 c0 0b bd 01 c0 	mov    DWORD PTR ds:0xc003103c,0xc001bd0b
c001c590:	c7 05 40 10 03 c0 6f bd 01 c0 	mov    DWORD PTR ds:0xc0031040,0xc001bd6f
c001c59a:	c7 05 44 10 03 c0 9e b7 01 c0 	mov    DWORD PTR ds:0xc0031044,0xc001b79e
c001c5a4:	c7 05 48 10 03 c0 d3 bd 01 c0 	mov    DWORD PTR ds:0xc0031048,0xc001bdd3
c001c5ae:	c7 05 4c 10 03 c0 5b b7 01 c0 	mov    DWORD PTR ds:0xc003104c,0xc001b75b
c001c5b8:	c7 05 50 10 03 c0 1f be 01 c0 	mov    DWORD PTR ds:0xc0031050,0xc001be1f
c001c5c2:	c7 05 54 10 03 c0 5a b8 01 c0 	mov    DWORD PTR ds:0xc0031054,0xc001b85a
c001c5cc:	c7 05 58 10 03 c0 a2 be 01 c0 	mov    DWORD PTR ds:0xc0031058,0xc001bea2
c001c5d6:	c7 05 5c 10 03 c0 1d ba 01 c0 	mov    DWORD PTR ds:0xc003105c,0xc001ba1d
c001c5e0:	c7 05 60 10 03 c0 c9 be 01 c0 	mov    DWORD PTR ds:0xc0031060,0xc001bec9
c001c5ea:	c7 05 64 10 03 c0 21 bf 01 c0 	mov    DWORD PTR ds:0xc0031064,0xc001bf21
c001c5f4:	c7 05 68 10 03 c0 59 c0 01 c0 	mov    DWORD PTR ds:0xc0031068,0xc001c059
c001c5fe:	c7 05 6c 10 03 c0 fc b5 01 c0 	mov    DWORD PTR ds:0xc003106c,0xc001b5fc
c001c608:	c7 05 70 10 03 c0 66 b6 01 c0 	mov    DWORD PTR ds:0xc0031070,0xc001b666
c001c612:	c7 05 74 10 03 c0 ac b6 01 c0 	mov    DWORD PTR ds:0xc0031074,0xc001b6ac
c001c61c:	c7 05 78 10 03 c0 78 c1 01 c0 	mov    DWORD PTR ds:0xc0031078,0xc001c178
c001c626:	c7 05 7c 10 03 c0 e5 bc 01 c0 	mov    DWORD PTR ds:0xc003107c,0xc001bce5
c001c630:	c7 05 80 10 03 c0 fd b6 01 c0 	mov    DWORD PTR ds:0xc0031080,0xc001b6fd
c001c63a:	c7 05 84 10 03 c0 ea c1 01 c0 	mov    DWORD PTR ds:0xc0031084,0xc001c1ea
c001c644:	c7 05 88 10 03 c0 2f c2 01 c0 	mov    DWORD PTR ds:0xc0031088,0xc001c22f
c001c64e:	c7 05 8c 10 03 c0 f0 b1 01 c0 	mov    DWORD PTR ds:0xc003108c,0xc001b1f0
c001c658:	c7 05 90 10 03 c0 71 b3 01 c0 	mov    DWORD PTR ds:0xc0031090,0xc001b371
c001c662:	c7 05 94 10 03 c0 99 b4 01 c0 	mov    DWORD PTR ds:0xc0031094,0xc001b499
c001c66c:	c7 05 98 10 03 c0 60 b1 01 c0 	mov    DWORD PTR ds:0xc0031098,0xc001b160
c001c676:	c7 05 9c 10 03 c0 4b b5 01 c0 	mov    DWORD PTR ds:0xc003109c,0xc001b54b
c001c680:	c7 05 a0 10 03 c0 d9 b1 01 c0 	mov    DWORD PTR ds:0xc00310a0,0xc001b1d9
c001c68a:	c3                   	ret    

c001c68b <Sys::systemCall(regs*, void*)>:
c001c68b:	53                   	push   ebx
c001c68c:	83 ec 08             	sub    esp,0x8
c001c68f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c693:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c696:	83 f8 7f             	cmp    eax,0x7f
c001c699:	77 16                	ja     c001c6b1 <Sys::systemCall(regs*, void*)+0x26>
c001c69b:	8b 14 85 e0 0f 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf020]
c001c6a2:	85 d2                	test   edx,edx
c001c6a4:	74 0b                	je     c001c6b1 <Sys::systemCall(regs*, void*)+0x26>
c001c6a6:	83 ec 0c             	sub    esp,0xc
c001c6a9:	53                   	push   ebx
c001c6aa:	ff d2                	call   edx
c001c6ac:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c6af:	eb 0d                	jmp    c001c6be <Sys::systemCall(regs*, void*)+0x33>
c001c6b1:	52                   	push   edx
c001c6b2:	52                   	push   edx
c001c6b3:	50                   	push   eax
c001c6b4:	68 35 bf 02 c0       	push   0xc002bf35
c001c6b9:	e8 05 67 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001c6be:	83 c4 10             	add    esp,0x10
c001c6c1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c6c6:	31 d2                	xor    edx,edx
c001c6c8:	83 c4 08             	add    esp,0x8
c001c6cb:	5b                   	pop    ebx
c001c6cc:	c3                   	ret    

c001c6cd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c6cd:	55                   	push   ebp
c001c6ce:	57                   	push   edi
c001c6cf:	56                   	push   esi
c001c6d0:	53                   	push   ebx
c001c6d1:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c6d7:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c6de:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c6e5:	85 c0                	test   eax,eax
c001c6e7:	0f 95 c1             	setne  cl
c001c6ea:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c6f2:	0f 94 c2             	sete   dl
c001c6f5:	84 d1                	test   cl,dl
c001c6f7:	74 23                	je     c001c71c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c6f9:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c6ff:	74 1b                	je     c001c71c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c701:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c707:	89 da                	mov    edx,ebx
c001c709:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c70f:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c715:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c71c:	8b 8c 24 48 10 00 00 	mov    ecx,DWORD PTR [esp+0x1048]
c001c723:	05 ff 0f 00 00       	add    eax,0xfff
c001c728:	83 ec 0c             	sub    esp,0xc
c001c72b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c72f:	8d a9 ff 0f 00 00    	lea    ebp,[ecx+0xfff]
c001c735:	c1 e8 0c             	shr    eax,0xc
c001c738:	89 ef                	mov    edi,ebp
c001c73a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c73e:	c1 ef 0c             	shr    edi,0xc
c001c741:	6a 01                	push   0x1
c001c743:	e8 a7 52 ff ff       	call   c00119ef <Virt::allocateKernelVirtualPages(int)>
c001c748:	89 c6                	mov    esi,eax
c001c74a:	58                   	pop    eax
c001c74b:	5a                   	pop    edx
c001c74c:	57                   	push   edi
c001c74d:	68 bb bf 02 c0       	push   0xc002bfbb
c001c752:	e8 6c 66 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001c757:	59                   	pop    ecx
c001c758:	58                   	pop    eax
c001c759:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c75d:	68 cd bf 02 c0       	push   0xc002bfcd
c001c762:	e8 5c 66 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001c767:	83 c4 10             	add    esp,0x10
c001c76a:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001c770:	0f 86 24 01 00 00    	jbe    c001c89a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cd>
c001c776:	c1 e7 0c             	shl    edi,0xc
c001c779:	8d 04 1f             	lea    eax,[edi+ebx*1]
c001c77c:	89 df                	mov    edi,ebx
c001c77e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c782:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001c789:	01 dd                	add    ebp,ebx
c001c78b:	29 fd                	sub    ebp,edi
c001c78d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001c791:	0f 84 01 01 00 00    	je     c001c898 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c797:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001c79d:	76 05                	jbe    c001c7a4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xd7>
c001c79f:	bd 00 10 00 00       	mov    ebp,0x1000
c001c7a4:	83 ec 0c             	sub    esp,0xc
c001c7a7:	31 d2                	xor    edx,edx
c001c7a9:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c7b0:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c7b2:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c7b6:	50                   	push   eax
c001c7b7:	8d 44 24 30          	lea    eax,[esp+0x30]
c001c7bb:	50                   	push   eax
c001c7bc:	52                   	push   edx
c001c7bd:	55                   	push   ebp
c001c7be:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c7c5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c7c8:	83 c4 20             	add    esp,0x20
c001c7cb:	85 c0                	test   eax,eax
c001c7cd:	74 0a                	je     c001c7d9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x10c>
c001c7cf:	53                   	push   ebx
c001c7d0:	53                   	push   ebx
c001c7d1:	50                   	push   eax
c001c7d2:	68 df bf 02 c0       	push   0xc002bfdf
c001c7d7:	eb 0f                	jmp    c001c7e8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x11b>
c001c7d9:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001c7dd:	74 20                	je     c001c7ff <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x132>
c001c7df:	51                   	push   ecx
c001c7e0:	51                   	push   ecx
c001c7e1:	6a 00                	push   0x0
c001c7e3:	68 0a c0 02 c0       	push   0xc002c00a
c001c7e8:	e8 d6 65 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001c7ed:	89 34 24             	mov    DWORD PTR [esp],esi
c001c7f0:	e8 c0 56 ff ff       	call   c0011eb5 <Virt::freeKernelVirtualPages(unsigned long)>
c001c7f5:	83 c4 10             	add    esp,0x10
c001c7f8:	31 c0                	xor    eax,eax
c001c7fa:	e9 55 01 00 00       	jmp    c001c954 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c001c7ff:	e8 d8 14 00 00       	call   c001dcdc <lockScheduler()>
c001c804:	e8 ae 36 ff ff       	call   c000feb7 <Phys::allocatePage()>
c001c809:	6a 07                	push   0x7
c001c80b:	89 c5                	mov    ebp,eax
c001c80d:	56                   	push   esi
c001c80e:	50                   	push   eax
c001c80f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c814:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c817:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c81d:	e8 fa 59 ff ff       	call   c001221c <VAS::mapPage(unsigned long, unsigned long, int)>
c001c822:	83 c4 0c             	add    esp,0xc
c001c825:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c82c:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c832:	6a 00                	push   0x0
c001c834:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c839:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c83c:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c842:	e8 3f 58 ff ff       	call   c0012086 <VAS::mapOtherVASIn(bool, VAS*)>
c001c847:	58                   	pop    eax
c001c848:	5a                   	pop    edx
c001c849:	68 07 0c 00 00       	push   0xc07
c001c84e:	57                   	push   edi
c001c84f:	81 c7 00 10 00 00    	add    edi,0x1000
c001c855:	55                   	push   ebp
c001c856:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c85d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c863:	6a 00                	push   0x0
c001c865:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c86a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c86d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c873:	e8 5e 5d ff ff       	call   c00125d6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c878:	83 c4 1c             	add    esp,0x1c
c001c87b:	68 00 10 00 00       	push   0x1000
c001c880:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c884:	50                   	push   eax
c001c885:	56                   	push   esi
c001c886:	e8 c1 3e fe ff       	call   c000074c <memcpy>
c001c88b:	e8 4e 14 00 00       	call   c001dcde <unlockScheduler()>
c001c890:	83 c4 10             	add    esp,0x10
c001c893:	e9 ea fe ff ff       	jmp    c001c782 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb5>
c001c898:	89 fb                	mov    ebx,edi
c001c89a:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c8a2:	0f 86 9e 00 00 00    	jbe    c001c946 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c001c8a8:	e8 2f 14 00 00       	call   c001dcdc <lockScheduler()>
c001c8ad:	51                   	push   ecx
c001c8ae:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c8b5:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c8bb:	6a 00                	push   0x0
c001c8bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c8c2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c8c5:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c8cb:	e8 b6 57 ff ff       	call   c0012086 <VAS::mapOtherVASIn(bool, VAS*)>
c001c8d0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c8d4:	c1 e7 0c             	shl    edi,0xc
c001c8d7:	01 df                	add    edi,ebx
c001c8d9:	83 c4 10             	add    esp,0x10
c001c8dc:	39 fb                	cmp    ebx,edi
c001c8de:	74 61                	je     c001c941 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x274>
c001c8e0:	e8 d2 35 ff ff       	call   c000feb7 <Phys::allocatePage()>
c001c8e5:	6a 07                	push   0x7
c001c8e7:	89 c5                	mov    ebp,eax
c001c8e9:	56                   	push   esi
c001c8ea:	50                   	push   eax
c001c8eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c8f0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c8f3:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c8f9:	e8 1e 59 ff ff       	call   c001221c <VAS::mapPage(unsigned long, unsigned long, int)>
c001c8fe:	58                   	pop    eax
c001c8ff:	5a                   	pop    edx
c001c900:	68 07 0c 00 00       	push   0xc07
c001c905:	53                   	push   ebx
c001c906:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c90c:	55                   	push   ebp
c001c90d:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c914:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c91a:	6a 00                	push   0x0
c001c91c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c921:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c924:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c92a:	e8 a7 5c ff ff       	call   c00125d6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c92f:	83 c4 1c             	add    esp,0x1c
c001c932:	68 00 10 00 00       	push   0x1000
c001c937:	6a 00                	push   0x0
c001c939:	56                   	push   esi
c001c93a:	e8 41 3e fe ff       	call   c0000780 <memset>
c001c93f:	eb 98                	jmp    c001c8d9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x20c>
c001c941:	e8 98 13 00 00       	call   c001dcde <unlockScheduler()>
c001c946:	83 ec 0c             	sub    esp,0xc
c001c949:	56                   	push   esi
c001c94a:	e8 66 55 ff ff       	call   c0011eb5 <Virt::freeKernelVirtualPages(unsigned long)>
c001c94f:	83 c4 10             	add    esp,0x10
c001c952:	b0 01                	mov    al,0x1
c001c954:	81 c4 2c 10 00 00    	add    esp,0x102c
c001c95a:	5b                   	pop    ebx
c001c95b:	5e                   	pop    esi
c001c95c:	5f                   	pop    edi
c001c95d:	5d                   	pop    ebp
c001c95e:	c3                   	ret    

c001c95f <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c95f:	55                   	push   ebp
c001c960:	57                   	push   edi
c001c961:	56                   	push   esi
c001c962:	53                   	push   ebx
c001c963:	83 ec 48             	sub    esp,0x48
c001c966:	68 14 01 00 00       	push   0x114
c001c96b:	e8 db 2e ff ff       	call   c000f84b <malloc>
c001c970:	83 c4 0c             	add    esp,0xc
c001c973:	89 c6                	mov    esi,eax
c001c975:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c979:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c97d:	50                   	push   eax
c001c97e:	e8 9f 69 ff ff       	call   c0013322 <File::File(char const*, Process*)>
c001c983:	58                   	pop    eax
c001c984:	5a                   	pop    edx
c001c985:	6a 01                	push   0x1
c001c987:	56                   	push   esi
c001c988:	e8 f9 69 ff ff       	call   c0013386 <File::open(FileOpenMode)>
c001c98d:	83 c4 10             	add    esp,0x10
c001c990:	85 c0                	test   eax,eax
c001c992:	0f 85 47 01 00 00    	jne    c001cadf <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c998:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c9a0:	83 ec 0c             	sub    esp,0xc
c001c9a3:	6a 34                	push   0x34
c001c9a5:	e8 a1 2e ff ff       	call   c000f84b <malloc>
c001c9aa:	89 c3                	mov    ebx,eax
c001c9ac:	58                   	pop    eax
c001c9ad:	8b 06                	mov    eax,DWORD PTR [esi]
c001c9af:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c9b3:	57                   	push   edi
c001c9b4:	53                   	push   ebx
c001c9b5:	6a 00                	push   0x0
c001c9b7:	6a 34                	push   0x34
c001c9b9:	56                   	push   esi
c001c9ba:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c9bd:	83 c4 20             	add    esp,0x20
c001c9c0:	85 c0                	test   eax,eax
c001c9c2:	0f 85 17 01 00 00    	jne    c001cadf <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c9c8:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001c9ce:	0f 85 0b 01 00 00    	jne    c001cadf <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c9d4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c9d7:	85 c0                	test   eax,eax
c001c9d9:	0f 84 00 01 00 00    	je     c001cadf <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c9df:	31 d2                	xor    edx,edx
c001c9e1:	55                   	push   ebp
c001c9e2:	52                   	push   edx
c001c9e3:	50                   	push   eax
c001c9e4:	56                   	push   esi
c001c9e5:	e8 5a 6a ff ff       	call   c0013444 <File::seek(unsigned long long)>
c001c9ea:	83 c4 10             	add    esp,0x10
c001c9ed:	85 c0                	test   eax,eax
c001c9ef:	0f 85 ea 00 00 00    	jne    c001cadf <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c9f5:	83 ec 0c             	sub    esp,0xc
c001c9f8:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c9fb:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c9ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ca03:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001ca07:	0f af c2             	imul   eax,edx
c001ca0a:	50                   	push   eax
c001ca0b:	e8 3b 2e ff ff       	call   c000f84b <malloc>
c001ca10:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001ca12:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ca16:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ca19:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ca1d:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001ca21:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001ca25:	0f af c2             	imul   eax,edx
c001ca28:	99                   	cdq    
c001ca29:	52                   	push   edx
c001ca2a:	50                   	push   eax
c001ca2b:	56                   	push   esi
c001ca2c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ca2f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001ca32:	83 c4 20             	add    esp,0x20
c001ca35:	85 c0                	test   eax,eax
c001ca37:	0f 84 a2 00 00 00    	je     c001cadf <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca3d:	31 d2                	xor    edx,edx
c001ca3f:	51                   	push   ecx
c001ca40:	52                   	push   edx
c001ca41:	50                   	push   eax
c001ca42:	56                   	push   esi
c001ca43:	e8 fc 69 ff ff       	call   c0013444 <File::seek(unsigned long long)>
c001ca48:	83 c4 10             	add    esp,0x10
c001ca4b:	85 c0                	test   eax,eax
c001ca4d:	0f 85 8c 00 00 00    	jne    c001cadf <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca53:	83 ec 0c             	sub    esp,0xc
c001ca56:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001ca5a:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001ca5e:	31 ed                	xor    ebp,ebp
c001ca60:	0f af c2             	imul   eax,edx
c001ca63:	50                   	push   eax
c001ca64:	e8 e2 2d ff ff       	call   c000f84b <malloc>
c001ca69:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001ca6b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ca6f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ca72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca76:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001ca7a:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001ca7e:	0f af c2             	imul   eax,edx
c001ca81:	99                   	cdq    
c001ca82:	52                   	push   edx
c001ca83:	50                   	push   eax
c001ca84:	56                   	push   esi
c001ca85:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ca88:	83 c4 20             	add    esp,0x20
c001ca8b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ca93:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001ca97:	0f 86 80 00 00 00    	jbe    c001cb1d <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001ca9d:	0f b7 fd             	movzx  edi,bp
c001caa0:	c1 e7 05             	shl    edi,0x5
c001caa3:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001caa7:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001caaa:	75 6b                	jne    c001cb17 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001caac:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001caaf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cab3:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001cab6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001caba:	52                   	push   edx
c001cabb:	31 d2                	xor    edx,edx
c001cabd:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001cac0:	52                   	push   edx
c001cac1:	50                   	push   eax
c001cac2:	56                   	push   esi
c001cac3:	e8 7c 69 ff ff       	call   c0013444 <File::seek(unsigned long long)>
c001cac8:	83 c4 10             	add    esp,0x10
c001cacb:	85 c0                	test   eax,eax
c001cacd:	74 17                	je     c001cae6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001cacf:	83 ec 0c             	sub    esp,0xc
c001cad2:	68 36 c0 02 c0       	push   0xc002c036
c001cad7:	e8 e7 62 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001cadc:	83 c4 10             	add    esp,0x10
c001cadf:	31 c0                	xor    eax,eax
c001cae1:	e9 87 00 00 00       	jmp    c001cb6d <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cae6:	83 ec 0c             	sub    esp,0xc
c001cae9:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001caec:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001caef:	50                   	push   eax
c001caf0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001caf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001caf8:	56                   	push   esi
c001caf9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001cafd:	e8 cb fb ff ff       	call   c001c6cd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cb02:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cb06:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001cb0a:	83 c4 20             	add    esp,0x20
c001cb0d:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cb11:	73 04                	jae    c001cb17 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cb13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cb17:	45                   	inc    ebp
c001cb18:	e9 76 ff ff ff       	jmp    c001ca93 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001cb1d:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001cb21:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cb25:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cb29:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001cb2f:	83 ec 0c             	sub    esp,0xc
c001cb32:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001cb38:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cb3d:	05 00 10 00 00       	add    eax,0x1000
c001cb42:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cb45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb49:	e8 0d 2d ff ff       	call   c000f85b <free>
c001cb4e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cb51:	e8 05 2d ff ff       	call   c000f85b <free>
c001cb56:	58                   	pop    eax
c001cb57:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cb5b:	e8 fb 2c ff ff       	call   c000f85b <free>
c001cb60:	89 34 24             	mov    DWORD PTR [esp],esi
c001cb63:	e8 7c 68 ff ff       	call   c00133e4 <File::close()>
c001cb68:	83 c4 10             	add    esp,0x10
c001cb6b:	b0 01                	mov    al,0x1
c001cb6d:	83 c4 3c             	add    esp,0x3c
c001cb70:	5b                   	pop    ebx
c001cb71:	5e                   	pop    esi
c001cb72:	5f                   	pop    edi
c001cb73:	5d                   	pop    ebp
c001cb74:	c3                   	ret    

c001cb75 <Thr::runtimeReferenceHelper()>:
c001cb75:	83 ec 18             	sub    esp,0x18
c001cb78:	68 3e c0 02 c0       	push   0xc002c03e
c001cb7d:	e8 41 62 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001cb82:	fa                   	cli    
c001cb83:	83 c4 10             	add    esp,0x10
c001cb86:	eb fe                	jmp    c001cb86 <Thr::runtimeReferenceHelper()+0x11>

c001cb88 <Thr::getAddressOfKernelSymbol(char const*)>:
c001cb88:	57                   	push   edi
c001cb89:	56                   	push   esi
c001cb8a:	53                   	push   ebx
c001cb8b:	31 db                	xor    ebx,ebx
c001cb8d:	39 1d 80 19 03 c0    	cmp    DWORD PTR ds:0xc0031980,ebx
c001cb93:	7e 3c                	jle    c001cbd1 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001cb95:	8b 34 9d 00 19 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffce700]
c001cb9c:	31 ff                	xor    edi,edi
c001cb9e:	39 3c 9d 00 18 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffce800],edi
c001cba5:	7e 27                	jle    c001cbce <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001cba7:	50                   	push   eax
c001cba8:	50                   	push   eax
c001cba9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cbad:	8b 06                	mov    eax,DWORD PTR [esi]
c001cbaf:	03 04 9d 80 18 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffce780]
c001cbb6:	50                   	push   eax
c001cbb7:	e8 0c 3d fe ff       	call   c00008c8 <strcmp>
c001cbbc:	83 c4 10             	add    esp,0x10
c001cbbf:	85 c0                	test   eax,eax
c001cbc1:	75 05                	jne    c001cbc8 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001cbc3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001cbc6:	eb 0b                	jmp    c001cbd3 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001cbc8:	83 c6 10             	add    esi,0x10
c001cbcb:	47                   	inc    edi
c001cbcc:	eb d0                	jmp    c001cb9e <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001cbce:	43                   	inc    ebx
c001cbcf:	eb bc                	jmp    c001cb8d <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001cbd1:	31 c0                	xor    eax,eax
c001cbd3:	5b                   	pop    ebx
c001cbd4:	5e                   	pop    esi
c001cbd5:	5f                   	pop    edi
c001cbd6:	c3                   	ret    

c001cbd7 <Thr::loadKernelSymbolTable(char const*)>:
c001cbd7:	55                   	push   ebp
c001cbd8:	57                   	push   edi
c001cbd9:	56                   	push   esi
c001cbda:	53                   	push   ebx
c001cbdb:	83 ec 68             	sub    esp,0x68
c001cbde:	8b 35 d4 19 03 c0    	mov    esi,DWORD PTR ds:0xc00319d4
c001cbe4:	68 14 01 00 00       	push   0x114
c001cbe9:	e8 5d 2c ff ff       	call   c000f84b <malloc>
c001cbee:	83 c4 0c             	add    esp,0xc
c001cbf1:	89 c3                	mov    ebx,eax
c001cbf3:	56                   	push   esi
c001cbf4:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001cbf8:	50                   	push   eax
c001cbf9:	e8 24 67 ff ff       	call   c0013322 <File::File(char const*, Process*)>
c001cbfe:	5e                   	pop    esi
c001cbff:	5f                   	pop    edi
c001cc00:	6a 01                	push   0x1
c001cc02:	53                   	push   ebx
c001cc03:	e8 7e 67 ff ff       	call   c0013386 <File::open(FileOpenMode)>
c001cc08:	83 c4 10             	add    esp,0x10
c001cc0b:	85 c0                	test   eax,eax
c001cc0d:	74 0a                	je     c001cc19 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001cc0f:	83 ec 0c             	sub    esp,0xc
c001cc12:	68 60 c0 02 c0       	push   0xc002c060
c001cc17:	eb 34                	jmp    c001cc4d <Thr::loadKernelSymbolTable(char const*)+0x76>
c001cc19:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001cc21:	83 ec 0c             	sub    esp,0xc
c001cc24:	6a 34                	push   0x34
c001cc26:	e8 20 2c ff ff       	call   c000f84b <malloc>
c001cc2b:	59                   	pop    ecx
c001cc2c:	89 c7                	mov    edi,eax
c001cc2e:	8d 74 24 34          	lea    esi,[esp+0x34]
c001cc32:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cc34:	56                   	push   esi
c001cc35:	57                   	push   edi
c001cc36:	6a 00                	push   0x0
c001cc38:	6a 34                	push   0x34
c001cc3a:	53                   	push   ebx
c001cc3b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cc3e:	83 c4 20             	add    esp,0x20
c001cc41:	85 c0                	test   eax,eax
c001cc43:	74 17                	je     c001cc5c <Thr::loadKernelSymbolTable(char const*)+0x85>
c001cc45:	83 ec 0c             	sub    esp,0xc
c001cc48:	68 77 c0 02 c0       	push   0xc002c077
c001cc4d:	e8 af d8 ff ff       	call   c001a501 <Krnl::panic(char const*)>
c001cc52:	83 c4 10             	add    esp,0x10
c001cc55:	31 c0                	xor    eax,eax
c001cc57:	e9 31 02 00 00       	jmp    c001ce8d <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001cc5c:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cc62:	75 e1                	jne    c001cc45 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cc64:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cc67:	85 c0                	test   eax,eax
c001cc69:	74 da                	je     c001cc45 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cc6b:	52                   	push   edx
c001cc6c:	31 d2                	xor    edx,edx
c001cc6e:	52                   	push   edx
c001cc6f:	50                   	push   eax
c001cc70:	53                   	push   ebx
c001cc71:	e8 ce 67 ff ff       	call   c0013444 <File::seek(unsigned long long)>
c001cc76:	83 c4 10             	add    esp,0x10
c001cc79:	85 c0                	test   eax,eax
c001cc7b:	75 c8                	jne    c001cc45 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cc7d:	83 ec 0c             	sub    esp,0xc
c001cc80:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cc84:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cc88:	31 ed                	xor    ebp,ebp
c001cc8a:	0f af c2             	imul   eax,edx
c001cc8d:	50                   	push   eax
c001cc8e:	e8 b8 2b ff ff       	call   c000f84b <malloc>
c001cc93:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cc95:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cc99:	89 34 24             	mov    DWORD PTR [esp],esi
c001cc9c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cca0:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cca4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cca8:	0f af c2             	imul   eax,edx
c001ccab:	99                   	cdq    
c001ccac:	52                   	push   edx
c001ccad:	50                   	push   eax
c001ccae:	53                   	push   ebx
c001ccaf:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ccb2:	83 c4 20             	add    esp,0x20
c001ccb5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ccbd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001ccc5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cccd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ccd5:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001ccd9:	0f 86 aa 00 00 00    	jbe    c001cd89 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001ccdf:	0f b7 f5             	movzx  esi,bp
c001cce2:	6b f6 28             	imul   esi,esi,0x28
c001cce5:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cce9:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ccec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ccf0:	50                   	push   eax
c001ccf1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ccf5:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001ccf9:	8b 16                	mov    edx,DWORD PTR [esi]
c001ccfb:	6b c0 28             	imul   eax,eax,0x28
c001ccfe:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001cd02:	89 d0                	mov    eax,edx
c001cd04:	31 d2                	xor    edx,edx
c001cd06:	52                   	push   edx
c001cd07:	50                   	push   eax
c001cd08:	53                   	push   ebx
c001cd09:	e8 36 67 ff ff       	call   c0013444 <File::seek(unsigned long long)>
c001cd0e:	83 c4 0c             	add    esp,0xc
c001cd11:	6a 20                	push   0x20
c001cd13:	6a 00                	push   0x0
c001cd15:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cd19:	52                   	push   edx
c001cd1a:	e8 61 3a fe ff       	call   c0000780 <memset>
c001cd1f:	58                   	pop    eax
c001cd20:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cd22:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001cd26:	51                   	push   ecx
c001cd27:	8d 54 24 40          	lea    edx,[esp+0x40]
c001cd2b:	52                   	push   edx
c001cd2c:	6a 00                	push   0x0
c001cd2e:	6a 1f                	push   0x1f
c001cd30:	53                   	push   ebx
c001cd31:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cd34:	83 c4 18             	add    esp,0x18
c001cd37:	68 8e c0 02 c0       	push   0xc002c08e
c001cd3c:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cd40:	52                   	push   edx
c001cd41:	e8 82 3b fe ff       	call   c00008c8 <strcmp>
c001cd46:	83 c4 10             	add    esp,0x10
c001cd49:	85 c0                	test   eax,eax
c001cd4b:	75 0f                	jne    c001cd5c <Thr::loadKernelSymbolTable(char const*)+0x185>
c001cd4d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cd50:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cd54:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cd58:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cd5c:	50                   	push   eax
c001cd5d:	50                   	push   eax
c001cd5e:	68 96 c0 02 c0       	push   0xc002c096
c001cd63:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001cd67:	50                   	push   eax
c001cd68:	e8 5b 3b fe ff       	call   c00008c8 <strcmp>
c001cd6d:	83 c4 10             	add    esp,0x10
c001cd70:	85 c0                	test   eax,eax
c001cd72:	75 0f                	jne    c001cd83 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001cd74:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cd77:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cd7b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cd7f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cd83:	45                   	inc    ebp
c001cd84:	e9 4c ff ff ff       	jmp    c001ccd5 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001cd89:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cd8e:	75 10                	jne    c001cda0 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001cd90:	83 ec 0c             	sub    esp,0xc
c001cd93:	68 9e c0 02 c0       	push   0xc002c09e
c001cd98:	e8 64 d7 ff ff       	call   c001a501 <Krnl::panic(char const*)>
c001cd9d:	83 c4 10             	add    esp,0x10
c001cda0:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001cda5:	75 10                	jne    c001cdb7 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001cda7:	83 ec 0c             	sub    esp,0xc
c001cdaa:	68 9e c0 02 c0       	push   0xc002c09e
c001cdaf:	e8 4d d7 ff ff       	call   c001a501 <Krnl::panic(char const*)>
c001cdb4:	83 c4 10             	add    esp,0x10
c001cdb7:	31 d2                	xor    edx,edx
c001cdb9:	50                   	push   eax
c001cdba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdbe:	52                   	push   edx
c001cdbf:	50                   	push   eax
c001cdc0:	53                   	push   ebx
c001cdc1:	e8 7e 66 ff ff       	call   c0013444 <File::seek(unsigned long long)>
c001cdc6:	5a                   	pop    edx
c001cdc7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cdcb:	e8 7b 2a ff ff       	call   c000f84b <malloc>
c001cdd0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cdd4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cdd8:	31 c9                	xor    ecx,ecx
c001cdda:	5e                   	pop    esi
c001cddb:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cddd:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001cde1:	55                   	push   ebp
c001cde2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cde6:	51                   	push   ecx
c001cde7:	52                   	push   edx
c001cde8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cdec:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001cdf0:	53                   	push   ebx
c001cdf1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cdf4:	83 c4 14             	add    esp,0x14
c001cdf7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cdfb:	e8 4b 2a ff ff       	call   c000f84b <malloc>
c001ce00:	89 c6                	mov    esi,eax
c001ce02:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce04:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001ce07:	56                   	push   esi
c001ce08:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001ce0c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ce10:	51                   	push   ecx
c001ce11:	52                   	push   edx
c001ce12:	53                   	push   ebx
c001ce13:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce16:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ce1a:	8b 15 80 19 03 c0    	mov    edx,DWORD PTR ds:0xc0031980
c001ce20:	83 c4 1c             	add    esp,0x1c
c001ce23:	c1 e8 04             	shr    eax,0x4
c001ce26:	89 04 95 00 18 03 c0 	mov    DWORD PTR [edx*4-0x3ffce800],eax
c001ce2d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ce31:	31 d2                	xor    edx,edx
c001ce33:	52                   	push   edx
c001ce34:	50                   	push   eax
c001ce35:	53                   	push   ebx
c001ce36:	e8 09 66 ff ff       	call   c0013444 <File::seek(unsigned long long)>
c001ce3b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001ce3d:	31 d2                	xor    edx,edx
c001ce3f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001ce42:	56                   	push   esi
c001ce43:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ce47:	52                   	push   edx
c001ce48:	50                   	push   eax
c001ce49:	53                   	push   ebx
c001ce4a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ce4d:	83 c4 14             	add    esp,0x14
c001ce50:	53                   	push   ebx
c001ce51:	e8 8e 65 ff ff       	call   c00133e4 <File::close()>
c001ce56:	5d                   	pop    ebp
c001ce57:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ce5b:	e8 fb 29 ff ff       	call   c000f85b <free>
c001ce60:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ce63:	e8 f3 29 ff ff       	call   c000f85b <free>
c001ce68:	a1 80 19 03 c0       	mov    eax,ds:0xc0031980
c001ce6d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ce71:	8d 50 01             	lea    edx,[eax+0x1]
c001ce74:	89 0c 85 00 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce700],ecx
c001ce7b:	89 34 85 80 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce780],esi
c001ce82:	89 15 80 19 03 c0    	mov    DWORD PTR ds:0xc0031980,edx
c001ce88:	83 c4 10             	add    esp,0x10
c001ce8b:	b0 01                	mov    al,0x1
c001ce8d:	83 c4 5c             	add    esp,0x5c
c001ce90:	5b                   	pop    ebx
c001ce91:	5e                   	pop    esi
c001ce92:	5f                   	pop    edi
c001ce93:	5d                   	pop    ebp
c001ce94:	c3                   	ret    

c001ce95 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001ce95:	55                   	push   ebp
c001ce96:	57                   	push   edi
c001ce97:	56                   	push   esi
c001ce98:	53                   	push   ebx
c001ce99:	81 ec 68 03 00 00    	sub    esp,0x368
c001ce9f:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001cea6:	8b 1d d4 19 03 c0    	mov    ebx,DWORD PTR ds:0xc00319d4
c001ceac:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001ceb0:	68 14 01 00 00       	push   0x114
c001ceb5:	e8 91 29 ff ff       	call   c000f84b <malloc>
c001ceba:	83 c4 0c             	add    esp,0xc
c001cebd:	89 c5                	mov    ebp,eax
c001cebf:	53                   	push   ebx
c001cec0:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001cec7:	50                   	push   eax
c001cec8:	e8 55 64 ff ff       	call   c0013322 <File::File(char const*, Process*)>
c001cecd:	5e                   	pop    esi
c001cece:	5f                   	pop    edi
c001cecf:	6a 01                	push   0x1
c001ced1:	55                   	push   ebp
c001ced2:	e8 af 64 ff ff       	call   c0013386 <File::open(FileOpenMode)>
c001ced7:	83 c4 10             	add    esp,0x10
c001ceda:	85 c0                	test   eax,eax
c001cedc:	0f 85 8d 06 00 00    	jne    c001d56f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cee2:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001ceea:	83 ec 0c             	sub    esp,0xc
c001ceed:	6a 34                	push   0x34
c001ceef:	e8 57 29 ff ff       	call   c000f84b <malloc>
c001cef4:	5b                   	pop    ebx
c001cef5:	89 c7                	mov    edi,eax
c001cef7:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cefb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cefe:	53                   	push   ebx
c001ceff:	57                   	push   edi
c001cf00:	6a 00                	push   0x0
c001cf02:	6a 34                	push   0x34
c001cf04:	55                   	push   ebp
c001cf05:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf08:	83 c4 20             	add    esp,0x20
c001cf0b:	85 c0                	test   eax,eax
c001cf0d:	0f 85 5c 06 00 00    	jne    c001d56f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cf13:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cf19:	0f 85 50 06 00 00    	jne    c001d56f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cf1f:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cf22:	85 c0                	test   eax,eax
c001cf24:	0f 84 45 06 00 00    	je     c001d56f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cf2a:	31 d2                	xor    edx,edx
c001cf2c:	51                   	push   ecx
c001cf2d:	52                   	push   edx
c001cf2e:	50                   	push   eax
c001cf2f:	55                   	push   ebp
c001cf30:	e8 0f 65 ff ff       	call   c0013444 <File::seek(unsigned long long)>
c001cf35:	83 c4 10             	add    esp,0x10
c001cf38:	85 c0                	test   eax,eax
c001cf3a:	0f 85 2f 06 00 00    	jne    c001d56f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cf40:	83 ec 0c             	sub    esp,0xc
c001cf43:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001cf46:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cf4a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001cf4e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cf52:	0f af c2             	imul   eax,edx
c001cf55:	50                   	push   eax
c001cf56:	e8 f0 28 ff ff       	call   c000f84b <malloc>
c001cf5b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cf5e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cf62:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cf65:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cf69:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cf6d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cf71:	0f af c2             	imul   eax,edx
c001cf74:	99                   	cdq    
c001cf75:	52                   	push   edx
c001cf76:	50                   	push   eax
c001cf77:	55                   	push   ebp
c001cf78:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cf7b:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001cf7e:	83 c4 20             	add    esp,0x20
c001cf81:	85 c0                	test   eax,eax
c001cf83:	0f 84 e6 05 00 00    	je     c001d56f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cf89:	52                   	push   edx
c001cf8a:	31 d2                	xor    edx,edx
c001cf8c:	52                   	push   edx
c001cf8d:	50                   	push   eax
c001cf8e:	55                   	push   ebp
c001cf8f:	e8 b0 64 ff ff       	call   c0013444 <File::seek(unsigned long long)>
c001cf94:	83 c4 10             	add    esp,0x10
c001cf97:	85 c0                	test   eax,eax
c001cf99:	0f 85 d0 05 00 00    	jne    c001d56f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cf9f:	83 ec 0c             	sub    esp,0xc
c001cfa2:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001cfa6:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001cfaa:	31 f6                	xor    esi,esi
c001cfac:	0f af c2             	imul   eax,edx
c001cfaf:	50                   	push   eax
c001cfb0:	e8 96 28 ff ff       	call   c000f84b <malloc>
c001cfb5:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cfb8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cfbc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cfbf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cfc3:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001cfc7:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001cfcb:	0f af c2             	imul   eax,edx
c001cfce:	99                   	cdq    
c001cfcf:	52                   	push   edx
c001cfd0:	50                   	push   eax
c001cfd1:	55                   	push   ebp
c001cfd2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cfd5:	83 c4 20             	add    esp,0x20
c001cfd8:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001cfdc:	0f 86 8a 00 00 00    	jbe    c001d06c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001cfe2:	0f b7 de             	movzx  ebx,si
c001cfe5:	c1 e3 05             	shl    ebx,0x5
c001cfe8:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001cfec:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001cfef:	75 75                	jne    c001d066 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001cff1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001cff4:	31 d2                	xor    edx,edx
c001cff6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cffa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cffd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d001:	50                   	push   eax
c001d002:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d005:	52                   	push   edx
c001d006:	50                   	push   eax
c001d007:	55                   	push   ebp
c001d008:	e8 37 64 ff ff       	call   c0013444 <File::seek(unsigned long long)>
c001d00d:	83 c4 10             	add    esp,0x10
c001d010:	85 c0                	test   eax,eax
c001d012:	0f 85 57 05 00 00    	jne    c001d56f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d018:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d01f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d022:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d026:	31 d2                	xor    edx,edx
c001d028:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d02c:	83 ec 0c             	sub    esp,0xc
c001d02f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d033:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d03a:	50                   	push   eax
c001d03b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d03f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d043:	52                   	push   edx
c001d044:	50                   	push   eax
c001d045:	55                   	push   ebp
c001d046:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d049:	83 c4 1c             	add    esp,0x1c
c001d04c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d04f:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d052:	50                   	push   eax
c001d053:	6a 00                	push   0x0
c001d055:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d059:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d05d:	50                   	push   eax
c001d05e:	e8 1d 37 fe ff       	call   c0000780 <memset>
c001d063:	83 c4 10             	add    esp,0x10
c001d066:	46                   	inc    esi
c001d067:	e9 6c ff ff ff       	jmp    c001cfd8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d06c:	53                   	push   ebx
c001d06d:	31 db                	xor    ebx,ebx
c001d06f:	68 00 01 00 00       	push   0x100
c001d074:	6a 00                	push   0x0
c001d076:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d07a:	50                   	push   eax
c001d07b:	e8 00 37 fe ff       	call   c0000780 <memset>
c001d080:	83 c4 0c             	add    esp,0xc
c001d083:	68 00 01 00 00       	push   0x100
c001d088:	6a 00                	push   0x0
c001d08a:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d091:	50                   	push   eax
c001d092:	e8 e9 36 fe ff       	call   c0000780 <memset>
c001d097:	83 c4 10             	add    esp,0x10
c001d09a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d0a2:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d0aa:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d0b2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d0ba:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d0c2:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d0c6:	0f 86 30 01 00 00    	jbe    c001d1fc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d0cc:	0f b7 f3             	movzx  esi,bx
c001d0cf:	6b f6 28             	imul   esi,esi,0x28
c001d0d2:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d0d6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d0d9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d0dd:	52                   	push   edx
c001d0de:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d0e2:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d0e6:	8b 06                	mov    eax,DWORD PTR [esi]
c001d0e8:	6b d2 28             	imul   edx,edx,0x28
c001d0eb:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d0ef:	31 d2                	xor    edx,edx
c001d0f1:	52                   	push   edx
c001d0f2:	50                   	push   eax
c001d0f3:	55                   	push   ebp
c001d0f4:	e8 4b 63 ff ff       	call   c0013444 <File::seek(unsigned long long)>
c001d0f9:	83 c4 0c             	add    esp,0xc
c001d0fc:	6a 20                	push   0x20
c001d0fe:	6a 00                	push   0x0
c001d100:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d107:	51                   	push   ecx
c001d108:	e8 73 36 fe ff       	call   c0000780 <memset>
c001d10d:	59                   	pop    ecx
c001d10e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d111:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d115:	52                   	push   edx
c001d116:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d11d:	51                   	push   ecx
c001d11e:	6a 00                	push   0x0
c001d120:	6a 1f                	push   0x1f
c001d122:	55                   	push   ebp
c001d123:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d126:	83 c4 1c             	add    esp,0x1c
c001d129:	6a 09                	push   0x9
c001d12b:	68 b8 c0 02 c0       	push   0xc002c0b8
c001d130:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d137:	51                   	push   ecx
c001d138:	e8 0b 35 fe ff       	call   c0000648 <memcmp>
c001d13d:	83 c4 10             	add    esp,0x10
c001d140:	85 c0                	test   eax,eax
c001d142:	75 21                	jne    c001d165 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d148:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d14c:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d150:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d154:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d157:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d15e:	89 d0                	mov    eax,edx
c001d160:	40                   	inc    eax
c001d161:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d165:	50                   	push   eax
c001d166:	6a 09                	push   0x9
c001d168:	68 c2 c0 02 c0       	push   0xc002c0c2
c001d16d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d174:	50                   	push   eax
c001d175:	e8 ce 34 fe ff       	call   c0000648 <memcmp>
c001d17a:	83 c4 10             	add    esp,0x10
c001d17d:	85 c0                	test   eax,eax
c001d17f:	75 21                	jne    c001d1a2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d181:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d185:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d189:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d18d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d191:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d194:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d19b:	89 d0                	mov    eax,edx
c001d19d:	40                   	inc    eax
c001d19e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d1a2:	50                   	push   eax
c001d1a3:	50                   	push   eax
c001d1a4:	68 8e c0 02 c0       	push   0xc002c08e
c001d1a9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d1b0:	50                   	push   eax
c001d1b1:	e8 12 37 fe ff       	call   c00008c8 <strcmp>
c001d1b6:	83 c4 10             	add    esp,0x10
c001d1b9:	85 c0                	test   eax,eax
c001d1bb:	75 0f                	jne    c001d1cc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d1bd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d1c0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d1c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d1c8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d1cc:	50                   	push   eax
c001d1cd:	50                   	push   eax
c001d1ce:	68 96 c0 02 c0       	push   0xc002c096
c001d1d3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d1da:	50                   	push   eax
c001d1db:	e8 e8 36 fe ff       	call   c00008c8 <strcmp>
c001d1e0:	83 c4 10             	add    esp,0x10
c001d1e3:	85 c0                	test   eax,eax
c001d1e5:	75 0f                	jne    c001d1f6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d1e7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d1ea:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d1ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d1f2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d1f6:	43                   	inc    ebx
c001d1f7:	e9 c6 fe ff ff       	jmp    c001d0c2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d1fc:	31 d2                	xor    edx,edx
c001d1fe:	50                   	push   eax
c001d1ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d203:	52                   	push   edx
c001d204:	50                   	push   eax
c001d205:	55                   	push   ebp
c001d206:	e8 39 62 ff ff       	call   c0013444 <File::seek(unsigned long long)>
c001d20b:	58                   	pop    eax
c001d20c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d210:	e8 36 26 ff ff       	call   c000f84b <malloc>
c001d215:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d218:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d21c:	31 d2                	xor    edx,edx
c001d21e:	58                   	pop    eax
c001d21f:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d223:	53                   	push   ebx
c001d224:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d228:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d22c:	52                   	push   edx
c001d22d:	50                   	push   eax
c001d22e:	55                   	push   ebp
c001d22f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d232:	83 c4 14             	add    esp,0x14
c001d235:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d239:	e8 0d 26 ff ff       	call   c000f84b <malloc>
c001d23e:	31 d2                	xor    edx,edx
c001d240:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d244:	83 c4 0c             	add    esp,0xc
c001d247:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d24b:	52                   	push   edx
c001d24c:	50                   	push   eax
c001d24d:	55                   	push   ebp
c001d24e:	e8 f1 61 ff ff       	call   c0013444 <File::seek(unsigned long long)>
c001d253:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d256:	31 d2                	xor    edx,edx
c001d258:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d25b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d25f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d263:	52                   	push   edx
c001d264:	50                   	push   eax
c001d265:	55                   	push   ebp
c001d266:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d269:	83 c4 20             	add    esp,0x20
c001d26c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d274:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d278:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d27c:	0f 84 f1 02 00 00    	je     c001d573 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001d282:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d289:	31 d2                	xor    edx,edx
c001d28b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d28f:	c1 e8 03             	shr    eax,0x3
c001d292:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d296:	51                   	push   ecx
c001d297:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d29b:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d29f:	52                   	push   edx
c001d2a0:	50                   	push   eax
c001d2a1:	55                   	push   ebp
c001d2a2:	e8 9d 61 ff ff       	call   c0013444 <File::seek(unsigned long long)>
c001d2a7:	5b                   	pop    ebx
c001d2a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2ac:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d2b3:	e8 93 25 ff ff       	call   c000f84b <malloc>
c001d2b8:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d2bb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d2bf:	31 d2                	xor    edx,edx
c001d2c1:	5e                   	pop    esi
c001d2c2:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d2c6:	50                   	push   eax
c001d2c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d2cb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d2cf:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d2d6:	52                   	push   edx
c001d2d7:	50                   	push   eax
c001d2d8:	55                   	push   ebp
c001d2d9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d2dc:	83 c4 20             	add    esp,0x20
c001d2df:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d2e7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d2eb:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d2ef:	0f 8d 62 02 00 00    	jge    c001d557 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001d2f5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d2f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d2fd:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d302:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d305:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d309:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d30d:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d311:	89 d8                	mov    eax,ebx
c001d313:	c1 e8 08             	shr    eax,0x8
c001d316:	89 c6                	mov    esi,eax
c001d318:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d31c:	c1 e6 04             	shl    esi,0x4
c001d31f:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d323:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d326:	85 d2                	test   edx,edx
c001d328:	0f 85 bf 00 00 00    	jne    c001d3ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d32e:	83 ec 0c             	sub    esp,0xc
c001d331:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d335:	03 06                	add    eax,DWORD PTR [esi]
c001d337:	50                   	push   eax
c001d338:	e8 4b f8 ff ff       	call   c001cb88 <Thr::getAddressOfKernelSymbol(char const*)>
c001d33d:	83 c4 10             	add    esp,0x10
c001d340:	89 c2                	mov    edx,eax
c001d342:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d347:	85 c0                	test   eax,eax
c001d349:	0f 85 9e 00 00 00    	jne    c001d3ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d34f:	83 ec 0c             	sub    esp,0xc
c001d352:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d356:	03 06                	add    eax,DWORD PTR [esi]
c001d358:	50                   	push   eax
c001d359:	e8 9f 11 ff ff       	call   c000e4fd <Krnl::resolveCompatibilitySymbol(char*)>
c001d35e:	83 c4 10             	add    esp,0x10
c001d361:	89 c2                	mov    edx,eax
c001d363:	85 c0                	test   eax,eax
c001d365:	0f 85 82 00 00 00    	jne    c001d3ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d36b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d36f:	50                   	push   eax
c001d370:	50                   	push   eax
c001d371:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d375:	03 06                	add    eax,DWORD PTR [esi]
c001d377:	50                   	push   eax
c001d378:	68 cc c0 02 c0       	push   0xc002c0cc
c001d37d:	e8 41 5a ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001d382:	58                   	pop    eax
c001d383:	5a                   	pop    edx
c001d384:	68 e6 c0 02 c0       	push   0xc002c0e6
c001d389:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d390:	50                   	push   eax
c001d391:	e8 a6 34 fe ff       	call   c000083c <strcpy>
c001d396:	59                   	pop    ecx
c001d397:	58                   	pop    eax
c001d398:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d39c:	03 06                	add    eax,DWORD PTR [esi]
c001d39e:	50                   	push   eax
c001d39f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d3a6:	50                   	push   eax
c001d3a7:	e8 d0 35 fe ff       	call   c000097c <strcat>
c001d3ac:	58                   	pop    eax
c001d3ad:	5a                   	pop    edx
c001d3ae:	68 7c c1 02 c0       	push   0xc002c17c
c001d3b3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d3ba:	50                   	push   eax
c001d3bb:	e8 bc 35 fe ff       	call   c000097c <strcat>
c001d3c0:	83 c4 10             	add    esp,0x10
c001d3c3:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d3c8:	0f 84 43 01 00 00    	je     c001d511 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d3ce:	83 ec 0c             	sub    esp,0xc
c001d3d1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d3d8:	50                   	push   eax
c001d3d9:	e8 23 d1 ff ff       	call   c001a501 <Krnl::panic(char const*)>
c001d3de:	83 c4 10             	add    esp,0x10
c001d3e1:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d3e5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d3e9:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d3ed:	80 fb 01             	cmp    bl,0x1
c001d3f0:	75 7d                	jne    c001d46f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001d3f2:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d3f9:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d3fd:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d401:	01 ce                	add    esi,ecx
c001d403:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d409:	0f 94 c0             	sete   al
c001d40c:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d412:	0f 94 c3             	sete   bl
c001d415:	09 c3                	or     ebx,eax
c001d417:	8b 06                	mov    eax,DWORD PTR [esi]
c001d419:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d41e:	74 36                	je     c001d456 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001d420:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d423:	84 db                	test   bl,bl
c001d425:	75 0a                	jne    c001d431 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001d427:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d42b:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d42f:	76 37                	jbe    c001d468 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d431:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d435:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d43a:	0f 84 d1 00 00 00    	je     c001d511 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d440:	83 ec 0c             	sub    esp,0xc
c001d443:	68 fd c0 02 c0       	push   0xc002c0fd
c001d448:	e8 b4 d0 ff ff       	call   c001a501 <Krnl::panic(char const*)>
c001d44d:	83 c4 10             	add    esp,0x10
c001d450:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d454:	eb 12                	jmp    c001d468 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d456:	01 c1                	add    ecx,eax
c001d458:	84 db                	test   bl,bl
c001d45a:	75 0c                	jne    c001d468 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d45c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d460:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d464:	77 02                	ja     c001d468 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d466:	01 d1                	add    ecx,edx
c001d468:	89 0e                	mov    DWORD PTR [esi],ecx
c001d46a:	e9 df 00 00 00       	jmp    c001d54e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d46f:	80 fb 02             	cmp    bl,0x2
c001d472:	75 71                	jne    c001d4e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001d474:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d47b:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d47f:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d483:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d489:	74 15                	je     c001d4a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d48b:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d491:	74 0d                	je     c001d4a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d493:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d497:	83 e8 04             	sub    eax,0x4
c001d49a:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d49e:	76 1f                	jbe    c001d4bf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001d4a0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d4a4:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d4a9:	74 66                	je     c001d511 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d4ab:	83 ec 0c             	sub    esp,0xc
c001d4ae:	68 19 c1 02 c0       	push   0xc002c119
c001d4b3:	e8 49 d0 ff ff       	call   c001a501 <Krnl::panic(char const*)>
c001d4b8:	83 c4 10             	add    esp,0x10
c001d4bb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d4bf:	8b 06                	mov    eax,DWORD PTR [esi]
c001d4c1:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d4c6:	74 13                	je     c001d4db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001d4c8:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d4cc:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d4d3:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d4d7:	01 c8                	add    eax,ecx
c001d4d9:	eb 04                	jmp    c001d4df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001d4db:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d4df:	01 c2                	add    edx,eax
c001d4e1:	89 16                	mov    DWORD PTR [esi],edx
c001d4e3:	eb 69                	jmp    c001d54e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d4e5:	0f b6 db             	movzx  ebx,bl
c001d4e8:	50                   	push   eax
c001d4e9:	50                   	push   eax
c001d4ea:	53                   	push   ebx
c001d4eb:	68 35 c1 02 c0       	push   0xc002c135
c001d4f0:	e8 ce 58 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001d4f5:	83 c4 10             	add    esp,0x10
c001d4f8:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d4fd:	74 12                	je     c001d511 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d4ff:	83 ec 0c             	sub    esp,0xc
c001d502:	68 40 c1 02 c0       	push   0xc002c140
c001d507:	e8 f5 cf ff ff       	call   c001a501 <Krnl::panic(char const*)>
c001d50c:	83 c4 10             	add    esp,0x10
c001d50f:	eb 3d                	jmp    c001d54e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d511:	83 ec 0c             	sub    esp,0xc
c001d514:	55                   	push   ebp
c001d515:	e8 ca 5e ff ff       	call   c00133e4 <File::close()>
c001d51a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d51d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d520:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d523:	59                   	pop    ecx
c001d524:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d528:	e8 2e 23 ff ff       	call   c000f85b <free>
c001d52d:	5b                   	pop    ebx
c001d52e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d532:	e8 24 23 ff ff       	call   c000f85b <free>
c001d537:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d53a:	e8 1c 23 ff ff       	call   c000f85b <free>
c001d53f:	5e                   	pop    esi
c001d540:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d544:	e8 12 23 ff ff       	call   c000f85b <free>
c001d549:	83 c4 10             	add    esp,0x10
c001d54c:	eb 21                	jmp    c001d56f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d54e:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d552:	e9 90 fd ff ff       	jmp    c001d2e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d557:	83 ec 0c             	sub    esp,0xc
c001d55a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d55e:	e8 f8 22 ff ff       	call   c000f85b <free>
c001d563:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d567:	83 c4 10             	add    esp,0x10
c001d56a:	e9 05 fd ff ff       	jmp    c001d274 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d56f:	31 c0                	xor    eax,eax
c001d571:	eb 33                	jmp    c001d5a6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001d573:	83 ec 0c             	sub    esp,0xc
c001d576:	55                   	push   ebp
c001d577:	e8 68 5e ff ff       	call   c00133e4 <File::close()>
c001d57c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d57f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d582:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d585:	58                   	pop    eax
c001d586:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d58a:	e8 cc 22 ff ff       	call   c000f85b <free>
c001d58f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d592:	e8 c4 22 ff ff       	call   c000f85b <free>
c001d597:	5a                   	pop    edx
c001d598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d59c:	e8 ba 22 ff ff       	call   c000f85b <free>
c001d5a1:	83 c4 10             	add    esp,0x10
c001d5a4:	b0 01                	mov    al,0x1
c001d5a6:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d5ac:	5b                   	pop    ebx
c001d5ad:	5e                   	pop    esi
c001d5ae:	5f                   	pop    edi
c001d5af:	5d                   	pop    ebp
c001d5b0:	c3                   	ret    

c001d5b1 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d5b1:	56                   	push   esi
c001d5b2:	31 d2                	xor    edx,edx
c001d5b4:	53                   	push   ebx
c001d5b5:	8b 1d e0 11 03 c0    	mov    ebx,DWORD PTR ds:0xc00311e0
c001d5bb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d5bf:	39 d3                	cmp    ebx,edx
c001d5c1:	7e 1b                	jle    c001d5de <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d5c3:	8b 04 95 00 14 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcec00]
c001d5ca:	39 c8                	cmp    eax,ecx
c001d5cc:	77 0d                	ja     c001d5db <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d5ce:	8b 34 95 00 12 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcee00]
c001d5d5:	01 c6                	add    esi,eax
c001d5d7:	39 ce                	cmp    esi,ecx
c001d5d9:	77 05                	ja     c001d5e0 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d5db:	42                   	inc    edx
c001d5dc:	eb e1                	jmp    c001d5bf <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d5de:	31 c0                	xor    eax,eax
c001d5e0:	5b                   	pop    ebx
c001d5e1:	5e                   	pop    esi
c001d5e2:	c3                   	ret    

c001d5e3 <Thr::getDriverNameFromAddress(unsigned long)>:
c001d5e3:	53                   	push   ebx
c001d5e4:	31 c0                	xor    eax,eax
c001d5e6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d5ea:	8b 1d e0 11 03 c0    	mov    ebx,DWORD PTR ds:0xc00311e0
c001d5f0:	39 c3                	cmp    ebx,eax
c001d5f2:	7e 22                	jle    c001d616 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d5f4:	8b 14 85 00 14 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcec00]
c001d5fb:	39 ca                	cmp    edx,ecx
c001d5fd:	77 14                	ja     c001d613 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d5ff:	03 14 85 00 12 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcee00]
c001d606:	39 ca                	cmp    edx,ecx
c001d608:	76 09                	jbe    c001d613 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d60a:	8b 04 85 00 16 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcea00]
c001d611:	eb 05                	jmp    c001d618 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d613:	40                   	inc    eax
c001d614:	eb da                	jmp    c001d5f0 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d616:	31 c0                	xor    eax,eax
c001d618:	5b                   	pop    ebx
c001d619:	c3                   	ret    

c001d61a <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d61a:	53                   	push   ebx
c001d61b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d61f:	53                   	push   ebx
c001d620:	e8 8c ff ff ff       	call   c001d5b1 <Thr::getDriverBaseFromAddress(unsigned long)>
c001d625:	5a                   	pop    edx
c001d626:	31 d2                	xor    edx,edx
c001d628:	85 c0                	test   eax,eax
c001d62a:	74 04                	je     c001d630 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d62c:	89 da                	mov    edx,ebx
c001d62e:	29 c2                	sub    edx,eax
c001d630:	89 d0                	mov    eax,edx
c001d632:	5b                   	pop    ebx
c001d633:	c3                   	ret    

c001d634 <Thr::loadDLL(char const*, bool)>:
c001d634:	55                   	push   ebp
c001d635:	57                   	push   edi
c001d636:	56                   	push   esi
c001d637:	53                   	push   ebx
c001d638:	81 ec 34 01 00 00    	sub    esp,0x134
c001d63e:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d645:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001d64c:	56                   	push   esi
c001d64d:	68 58 c1 02 c0       	push   0xc002c158
c001d652:	e8 6c 57 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001d657:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d65e:	e8 e8 21 ff ff       	call   c000f84b <malloc>
c001d663:	83 c4 0c             	add    esp,0xc
c001d666:	89 c3                	mov    ebx,eax
c001d668:	ff 35 d4 19 03 c0    	push   DWORD PTR ds:0xc00319d4
c001d66e:	56                   	push   esi
c001d66f:	50                   	push   eax
c001d670:	e8 ad 5c ff ff       	call   c0013322 <File::File(char const*, Process*)>
c001d675:	83 c4 10             	add    esp,0x10
c001d678:	85 db                	test   ebx,ebx
c001d67a:	75 3c                	jne    c001d6b8 <Thr::loadDLL(char const*, bool)+0x84>
c001d67c:	89 e8                	mov    eax,ebp
c001d67e:	84 c0                	test   al,al
c001d680:	0f 84 d5 01 00 00    	je     c001d85b <Thr::loadDLL(char const*, bool)+0x227>
c001d686:	57                   	push   edi
c001d687:	57                   	push   edi
c001d688:	68 69 c1 02 c0       	push   0xc002c169
c001d68d:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001d691:	57                   	push   edi
c001d692:	e8 a5 31 fe ff       	call   c000083c <strcpy>
c001d697:	58                   	pop    eax
c001d698:	5a                   	pop    edx
c001d699:	56                   	push   esi
c001d69a:	57                   	push   edi
c001d69b:	e8 dc 32 fe ff       	call   c000097c <strcat>
c001d6a0:	59                   	pop    ecx
c001d6a1:	58                   	pop    eax
c001d6a2:	68 7c c1 02 c0       	push   0xc002c17c
c001d6a7:	57                   	push   edi
c001d6a8:	e8 cf 32 fe ff       	call   c000097c <strcat>
c001d6ad:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d6b0:	e8 4c ce ff ff       	call   c001a501 <Krnl::panic(char const*)>
c001d6b5:	83 c4 10             	add    esp,0x10
c001d6b8:	51                   	push   ecx
c001d6b9:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d6bd:	50                   	push   eax
c001d6be:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d6c2:	50                   	push   eax
c001d6c3:	53                   	push   ebx
c001d6c4:	e8 69 5f ff ff       	call   c0013632 <File::stat(unsigned long long*, bool*)>
c001d6c9:	83 c4 10             	add    esp,0x10
c001d6cc:	85 db                	test   ebx,ebx
c001d6ce:	74 0c                	je     c001d6dc <Thr::loadDLL(char const*, bool)+0xa8>
c001d6d0:	83 ec 0c             	sub    esp,0xc
c001d6d3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d6d5:	53                   	push   ebx
c001d6d6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d6d9:	83 c4 10             	add    esp,0x10
c001d6dc:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d6e1:	75 0a                	jne    c001d6ed <Thr::loadDLL(char const*, bool)+0xb9>
c001d6e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d6e7:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d6eb:	75 3c                	jne    c001d729 <Thr::loadDLL(char const*, bool)+0xf5>
c001d6ed:	89 e8                	mov    eax,ebp
c001d6ef:	84 c0                	test   al,al
c001d6f1:	0f 84 4c 01 00 00    	je     c001d843 <Thr::loadDLL(char const*, bool)+0x20f>
c001d6f7:	51                   	push   ecx
c001d6f8:	51                   	push   ecx
c001d6f9:	68 69 c1 02 c0       	push   0xc002c169
c001d6fe:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d702:	53                   	push   ebx
c001d703:	e8 34 31 fe ff       	call   c000083c <strcpy>
c001d708:	5f                   	pop    edi
c001d709:	58                   	pop    eax
c001d70a:	56                   	push   esi
c001d70b:	53                   	push   ebx
c001d70c:	e8 6b 32 fe ff       	call   c000097c <strcat>
c001d711:	58                   	pop    eax
c001d712:	5a                   	pop    edx
c001d713:	68 7c c1 02 c0       	push   0xc002c17c
c001d718:	53                   	push   ebx
c001d719:	e8 5e 32 fe ff       	call   c000097c <strcat>
c001d71e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d721:	e8 db cd ff ff       	call   c001a501 <Krnl::panic(char const*)>
c001d726:	83 c4 10             	add    esp,0x10
c001d729:	e8 00 45 ff ff       	call   c0011c2e <Virt::getAKernelVAS()>
c001d72e:	51                   	push   ecx
c001d72f:	6a 03                	push   0x3
c001d731:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d735:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d739:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001d73f:	83 d3 00             	adc    ebx,0x0
c001d742:	89 ca                	mov    edx,ecx
c001d744:	89 d1                	mov    ecx,edx
c001d746:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001d74a:	51                   	push   ecx
c001d74b:	50                   	push   eax
c001d74c:	e8 cb 4b ff ff       	call   c001231c <VAS::allocatePages(int, int)>
c001d751:	5f                   	pop    edi
c001d752:	89 c3                	mov    ebx,eax
c001d754:	58                   	pop    eax
c001d755:	53                   	push   ebx
c001d756:	68 7e c1 02 c0       	push   0xc002c17e
c001d75b:	e8 63 56 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001d760:	89 34 24             	mov    DWORD PTR [esp],esi
c001d763:	e8 34 30 fe ff       	call   c000079c <strlen>
c001d768:	8b 3d e0 11 03 c0    	mov    edi,DWORD PTR ds:0xc00311e0
c001d76e:	40                   	inc    eax
c001d76f:	89 04 24             	mov    DWORD PTR [esp],eax
c001d772:	e8 d4 20 ff ff       	call   c000f84b <malloc>
c001d777:	89 04 bd 00 16 03 c0 	mov    DWORD PTR [edi*4-0x3ffcea00],eax
c001d77e:	58                   	pop    eax
c001d77f:	a1 e0 11 03 c0       	mov    eax,ds:0xc00311e0
c001d784:	5a                   	pop    edx
c001d785:	56                   	push   esi
c001d786:	ff 34 85 00 16 03 c0 	push   DWORD PTR [eax*4-0x3ffcea00]
c001d78d:	e8 aa 30 fe ff       	call   c000083c <strcpy>
c001d792:	a1 e0 11 03 c0       	mov    eax,ds:0xc00311e0
c001d797:	8d 50 01             	lea    edx,[eax+0x1]
c001d79a:	89 1c 85 00 14 03 c0 	mov    DWORD PTR [eax*4-0x3ffcec00],ebx
c001d7a1:	89 15 e0 11 03 c0    	mov    DWORD PTR ds:0xc00311e0,edx
c001d7a7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d7ab:	83 c4 0c             	add    esp,0xc
c001d7ae:	89 14 85 00 12 03 c0 	mov    DWORD PTR [eax*4-0x3ffcee00],edx
c001d7b5:	6a 01                	push   0x1
c001d7b7:	53                   	push   ebx
c001d7b8:	56                   	push   esi
c001d7b9:	e8 d7 f6 ff ff       	call   c001ce95 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d7be:	83 c4 10             	add    esp,0x10
c001d7c1:	89 c7                	mov    edi,eax
c001d7c3:	84 c0                	test   al,al
c001d7c5:	0f 85 8c 00 00 00    	jne    c001d857 <Thr::loadDLL(char const*, bool)+0x223>
c001d7cb:	89 e8                	mov    eax,ebp
c001d7cd:	84 c0                	test   al,al
c001d7cf:	74 76                	je     c001d847 <Thr::loadDLL(char const*, bool)+0x213>
c001d7d1:	83 ec 0c             	sub    esp,0xc
c001d7d4:	68 8b c1 02 c0       	push   0xc002c18b
c001d7d9:	e8 23 cd ff ff       	call   c001a501 <Krnl::panic(char const*)>
c001d7de:	83 c4 10             	add    esp,0x10
c001d7e1:	eb 64                	jmp    c001d847 <Thr::loadDLL(char const*, bool)+0x213>
c001d7e3:	e8 46 44 ff ff       	call   c0011c2e <Virt::getAKernelVAS()>
c001d7e8:	89 f5                	mov    ebp,esi
c001d7ea:	c1 e5 0c             	shl    ebp,0xc
c001d7ed:	52                   	push   edx
c001d7ee:	01 dd                	add    ebp,ebx
c001d7f0:	52                   	push   edx
c001d7f1:	55                   	push   ebp
c001d7f2:	50                   	push   eax
c001d7f3:	e8 9e 46 ff ff       	call   c0011e96 <VAS::getPageTableEntry(unsigned long)>
c001d7f8:	83 c4 10             	add    esp,0x10
c001d7fb:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d7fe:	75 0c                	jne    c001d80c <Thr::loadDLL(char const*, bool)+0x1d8>
c001d800:	83 ec 0c             	sub    esp,0xc
c001d803:	55                   	push   ebp
c001d804:	e8 24 26 ff ff       	call   c000fe2d <Phys::freePage(unsigned long)>
c001d809:	83 c4 10             	add    esp,0x10
c001d80c:	46                   	inc    esi
c001d80d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d811:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d815:	05 ff 0f 00 00       	add    eax,0xfff
c001d81a:	83 d2 00             	adc    edx,0x0
c001d81d:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d821:	c1 ea 0c             	shr    edx,0xc
c001d824:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d828:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d82c:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001d830:	ba 00 00 00 00       	mov    edx,0x0
c001d835:	89 d0                	mov    eax,edx
c001d837:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001d83b:	72 a6                	jb     c001d7e3 <Thr::loadDLL(char const*, bool)+0x1af>
c001d83d:	89 f8                	mov    eax,edi
c001d83f:	84 c0                	test   al,al
c001d841:	75 18                	jne    c001d85b <Thr::loadDLL(char const*, bool)+0x227>
c001d843:	31 db                	xor    ebx,ebx
c001d845:	eb 14                	jmp    c001d85b <Thr::loadDLL(char const*, bool)+0x227>
c001d847:	83 ec 0c             	sub    esp,0xc
c001d84a:	68 aa c1 02 c0       	push   0xc002c1aa
c001d84f:	e8 ad cc ff ff       	call   c001a501 <Krnl::panic(char const*)>
c001d854:	83 c4 10             	add    esp,0x10
c001d857:	31 f6                	xor    esi,esi
c001d859:	eb b2                	jmp    c001d80d <Thr::loadDLL(char const*, bool)+0x1d9>
c001d85b:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d861:	89 d8                	mov    eax,ebx
c001d863:	5b                   	pop    ebx
c001d864:	5e                   	pop    esi
c001d865:	5f                   	pop    edi
c001d866:	5d                   	pop    ebp
c001d867:	c3                   	ret    

c001d868 <Thr::executeDLL(unsigned long, void*)>:
c001d868:	56                   	push   esi
c001d869:	53                   	push   ebx
c001d86a:	52                   	push   edx
c001d86b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d86f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d873:	85 db                	test   ebx,ebx
c001d875:	75 10                	jne    c001d887 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d877:	83 ec 0c             	sub    esp,0xc
c001d87a:	68 c6 c1 02 c0       	push   0xc002c1c6
c001d87f:	e8 7d cc ff ff       	call   c001a501 <Krnl::panic(char const*)>
c001d884:	83 c4 10             	add    esp,0x10
c001d887:	50                   	push   eax
c001d888:	50                   	push   eax
c001d889:	53                   	push   ebx
c001d88a:	68 f0 c1 02 c0       	push   0xc002c1f0
c001d88f:	e8 2f 55 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001d894:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d898:	89 d8                	mov    eax,ebx
c001d89a:	83 c4 14             	add    esp,0x14
c001d89d:	5b                   	pop    ebx
c001d89e:	5e                   	pop    esi
c001d89f:	ff e0                	jmp    eax
c001d8a1:	90                   	nop

c001d8a2 <changeTSS>:
c001d8a2:	83 ec 14             	sub    esp,0x14
c001d8a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d8aa:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d8ad:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d8b2:	c1 e2 15             	shl    edx,0x15
c001d8b5:	29 d0                	sub    eax,edx
c001d8b7:	50                   	push   eax
c001d8b8:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c001d8bd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d8c3:	05 7c 11 00 00       	add    eax,0x117c
c001d8c8:	50                   	push   eax
c001d8c9:	e8 60 3a ff ff       	call   c001132e <TSS::setESP(unsigned long)>
c001d8ce:	83 c4 1c             	add    esp,0x1c
c001d8d1:	c3                   	ret    

c001d8d2 <Process::addArgs(char**)>:
c001d8d2:	57                   	push   edi
c001d8d3:	56                   	push   esi
c001d8d4:	53                   	push   ebx
c001d8d5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d8d9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d8dd:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d8e7:	85 ff                	test   edi,edi
c001d8e9:	74 3d                	je     c001d928 <Process::addArgs(char**)+0x56>
c001d8eb:	8b 07                	mov    eax,DWORD PTR [edi]
c001d8ed:	85 c0                	test   eax,eax
c001d8ef:	74 37                	je     c001d928 <Process::addArgs(char**)+0x56>
c001d8f1:	31 db                	xor    ebx,ebx
c001d8f3:	83 ec 0c             	sub    esp,0xc
c001d8f6:	50                   	push   eax
c001d8f7:	e8 a0 2e fe ff       	call   c000079c <strlen>
c001d8fc:	40                   	inc    eax
c001d8fd:	89 04 24             	mov    DWORD PTR [esp],eax
c001d900:	e8 46 1f ff ff       	call   c000f84b <malloc>
c001d905:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001d90c:	5a                   	pop    edx
c001d90d:	59                   	pop    ecx
c001d90e:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d911:	43                   	inc    ebx
c001d912:	50                   	push   eax
c001d913:	e8 24 2f fe ff       	call   c000083c <strcpy>
c001d918:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001d91e:	83 c4 10             	add    esp,0x10
c001d921:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d924:	85 c0                	test   eax,eax
c001d926:	75 cb                	jne    c001d8f3 <Process::addArgs(char**)+0x21>
c001d928:	5b                   	pop    ebx
c001d929:	5e                   	pop    esi
c001d92a:	5f                   	pop    edi
c001d92b:	c3                   	ret    

c001d92c <Process::Process(char const*, Process*, char**)>:
c001d92c:	56                   	push   esi
c001d92d:	53                   	push   ebx
c001d92e:	83 ec 14             	sub    esp,0x14
c001d931:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d935:	05 0c 02 00 00       	add    eax,0x20c
c001d93a:	bb 07 00 00 00       	mov    ebx,0x7
c001d93f:	89 c6                	mov    esi,eax
c001d941:	85 db                	test   ebx,ebx
c001d943:	78 12                	js     c001d957 <Process::Process(char const*, Process*, char**)+0x2b>
c001d945:	83 ec 0c             	sub    esp,0xc
c001d948:	56                   	push   esi
c001d949:	e8 34 b3 00 00       	call   c0028c82 <ThreadControlBlock::ThreadControlBlock()>
c001d94e:	83 c4 10             	add    esp,0x10
c001d951:	83 c6 63             	add    esi,0x63
c001d954:	4b                   	dec    ebx
c001d955:	eb ea                	jmp    c001d941 <Process::Process(char const*, Process*, char**)+0x15>
c001d957:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d95b:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d962:	83 ec 0c             	sub    esp,0xc
c001d965:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d969:	e8 e4 c9 ff ff       	call   c001a352 <Krnl::newProcessEnv(Process*)>
c001d96e:	83 c4 10             	add    esp,0x10
c001d971:	89 c2                	mov    edx,eax
c001d973:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d977:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d97d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d981:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d98a:	a1 f0 d9 02 c0       	mov    eax,ds:0xc002d9f0
c001d98f:	8d 50 01             	lea    edx,[eax+0x1]
c001d992:	89 15 f0 d9 02 c0    	mov    DWORD PTR ds:0xc002d9f0,edx
c001d998:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d99c:	89 02                	mov    DWORD PTR [edx],eax
c001d99e:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001d9a6:	83 ec 0c             	sub    esp,0xc
c001d9a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d9ad:	e8 99 1e ff ff       	call   c000f84b <malloc>
c001d9b2:	83 c4 10             	add    esp,0x10
c001d9b5:	89 c3                	mov    ebx,eax
c001d9b7:	83 ec 08             	sub    esp,0x8
c001d9ba:	6a 00                	push   0x0
c001d9bc:	53                   	push   ebx
c001d9bd:	e8 02 4d ff ff       	call   c00126c4 <VAS::VAS(bool)>
c001d9c2:	83 c4 10             	add    esp,0x10
c001d9c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9c9:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d9cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9d3:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d9dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9e1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d9e5:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d9eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9ef:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d9f5:	85 c0                	test   eax,eax
c001d9f7:	74 42                	je     c001da3b <Process::Process(char const*, Process*, char**)+0x10f>
c001d9f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9fd:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001da03:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001da09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da0d:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001da13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da17:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001da1d:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001da23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da27:	05 0c 01 00 00       	add    eax,0x10c
c001da2c:	83 ec 08             	sub    esp,0x8
c001da2f:	52                   	push   edx
c001da30:	50                   	push   eax
c001da31:	e8 06 2e fe ff       	call   c000083c <strcpy>
c001da36:	83 c4 10             	add    esp,0x10
c001da39:	eb 63                	jmp    c001da9e <Process::Process(char const*, Process*, char**)+0x172>
c001da3b:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001da43:	83 ec 0c             	sub    esp,0xc
c001da46:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001da4a:	e8 fc 1d ff ff       	call   c000f84b <malloc>
c001da4f:	83 c4 10             	add    esp,0x10
c001da52:	89 c3                	mov    ebx,eax
c001da54:	83 ec 08             	sub    esp,0x8
c001da57:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da5b:	53                   	push   ebx
c001da5c:	e8 ad 35 ff ff       	call   c001100e <VgaText::VgaText(char const*)>
c001da61:	83 c4 10             	add    esp,0x10
c001da64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da68:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001da6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da72:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001da78:	83 ec 0c             	sub    esp,0xc
c001da7b:	50                   	push   eax
c001da7c:	e8 c4 2a ff ff       	call   c0010545 <addToTerminalCycle(VgaText*)>
c001da81:	83 c4 10             	add    esp,0x10
c001da84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da88:	05 0c 01 00 00       	add    eax,0x10c
c001da8d:	83 ec 08             	sub    esp,0x8
c001da90:	68 0f c2 02 c0       	push   0xc002c20f
c001da95:	50                   	push   eax
c001da96:	e8 a1 2d fe ff       	call   c000083c <strcpy>
c001da9b:	83 c4 10             	add    esp,0x10
c001da9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daa2:	83 c0 0c             	add    eax,0xc
c001daa5:	83 ec 08             	sub    esp,0x8
c001daa8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001daac:	50                   	push   eax
c001daad:	e8 8a 2d fe ff       	call   c000083c <strcpy>
c001dab2:	83 c4 10             	add    esp,0x10
c001dab5:	83 ec 08             	sub    esp,0x8
c001dab8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001dabc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dac0:	e8 0d fe ff ff       	call   c001d8d2 <Process::addArgs(char**)>
c001dac5:	83 c4 10             	add    esp,0x10
c001dac8:	83 ec 08             	sub    esp,0x8
c001dacb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dacf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dad3:	e8 87 ee ff ff       	call   c001c95f <Thr::loadProgramIntoMemory(Process*, char const*)>
c001dad8:	83 c4 10             	add    esp,0x10
c001dadb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dadf:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dae3:	83 f0 01             	xor    eax,0x1
c001dae6:	88 c2                	mov    dl,al
c001dae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daec:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001daf2:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001daf7:	83 ec 08             	sub    esp,0x8
c001dafa:	50                   	push   eax
c001dafb:	68 0c c3 02 c0       	push   0xc002c30c
c001db00:	e8 be 52 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001db05:	83 c4 10             	add    esp,0x10
c001db08:	90                   	nop
c001db09:	83 c4 14             	add    esp,0x14
c001db0c:	5b                   	pop    ebx
c001db0d:	5e                   	pop    esi
c001db0e:	c3                   	ret    
c001db0f:	90                   	nop

c001db10 <Process::Process(bool, char const*, Process*, char**)>:
c001db10:	56                   	push   esi
c001db11:	53                   	push   ebx
c001db12:	83 ec 24             	sub    esp,0x24
c001db15:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001db19:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001db1d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db21:	05 0c 02 00 00       	add    eax,0x20c
c001db26:	bb 07 00 00 00       	mov    ebx,0x7
c001db2b:	89 c6                	mov    esi,eax
c001db2d:	85 db                	test   ebx,ebx
c001db2f:	78 12                	js     c001db43 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001db31:	83 ec 0c             	sub    esp,0xc
c001db34:	56                   	push   esi
c001db35:	e8 48 b1 00 00       	call   c0028c82 <ThreadControlBlock::ThreadControlBlock()>
c001db3a:	83 c4 10             	add    esp,0x10
c001db3d:	83 c6 63             	add    esi,0x63
c001db40:	4b                   	dec    ebx
c001db41:	eb ea                	jmp    c001db2d <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001db43:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db47:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001db4e:	83 ec 0c             	sub    esp,0xc
c001db51:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001db55:	e8 f8 c7 ff ff       	call   c001a352 <Krnl::newProcessEnv(Process*)>
c001db5a:	83 c4 10             	add    esp,0x10
c001db5d:	89 c2                	mov    edx,eax
c001db5f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db63:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001db69:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db6d:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001db76:	a1 f0 d9 02 c0       	mov    eax,ds:0xc002d9f0
c001db7b:	8d 50 01             	lea    edx,[eax+0x1]
c001db7e:	89 15 f0 d9 02 c0    	mov    DWORD PTR ds:0xc002d9f0,edx
c001db84:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001db88:	89 02                	mov    DWORD PTR [edx],eax
c001db8a:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001db92:	83 ec 0c             	sub    esp,0xc
c001db95:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001db99:	e8 ad 1c ff ff       	call   c000f84b <malloc>
c001db9e:	83 c4 10             	add    esp,0x10
c001dba1:	89 c3                	mov    ebx,eax
c001dba3:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dba8:	83 ec 08             	sub    esp,0x8
c001dbab:	50                   	push   eax
c001dbac:	53                   	push   ebx
c001dbad:	e8 12 4b ff ff       	call   c00126c4 <VAS::VAS(bool)>
c001dbb2:	83 c4 10             	add    esp,0x10
c001dbb5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbb9:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dbbf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbc3:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dbcd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbd1:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dbd5:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dbdb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbdf:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dbe5:	85 c0                	test   eax,eax
c001dbe7:	74 42                	je     c001dc2b <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001dbe9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbed:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dbf3:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dbf9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbfd:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dc03:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc07:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dc0d:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dc13:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc17:	05 0c 01 00 00       	add    eax,0x10c
c001dc1c:	83 ec 08             	sub    esp,0x8
c001dc1f:	52                   	push   edx
c001dc20:	50                   	push   eax
c001dc21:	e8 16 2c fe ff       	call   c000083c <strcpy>
c001dc26:	83 c4 10             	add    esp,0x10
c001dc29:	eb 63                	jmp    c001dc8e <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001dc2b:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001dc33:	83 ec 0c             	sub    esp,0xc
c001dc36:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001dc3a:	e8 0c 1c ff ff       	call   c000f84b <malloc>
c001dc3f:	83 c4 10             	add    esp,0x10
c001dc42:	89 c3                	mov    ebx,eax
c001dc44:	83 ec 08             	sub    esp,0x8
c001dc47:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dc4b:	53                   	push   ebx
c001dc4c:	e8 bd 33 ff ff       	call   c001100e <VgaText::VgaText(char const*)>
c001dc51:	83 c4 10             	add    esp,0x10
c001dc54:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc58:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dc5e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc62:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dc68:	83 ec 0c             	sub    esp,0xc
c001dc6b:	50                   	push   eax
c001dc6c:	e8 d4 28 ff ff       	call   c0010545 <addToTerminalCycle(VgaText*)>
c001dc71:	83 c4 10             	add    esp,0x10
c001dc74:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc78:	05 0c 01 00 00       	add    eax,0x10c
c001dc7d:	83 ec 08             	sub    esp,0x8
c001dc80:	68 0f c2 02 c0       	push   0xc002c20f
c001dc85:	50                   	push   eax
c001dc86:	e8 b1 2b fe ff       	call   c000083c <strcpy>
c001dc8b:	83 c4 10             	add    esp,0x10
c001dc8e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc92:	83 c0 0c             	add    eax,0xc
c001dc95:	83 ec 08             	sub    esp,0x8
c001dc98:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dc9c:	50                   	push   eax
c001dc9d:	e8 9a 2b fe ff       	call   c000083c <strcpy>
c001dca2:	83 c4 10             	add    esp,0x10
c001dca5:	83 ec 08             	sub    esp,0x8
c001dca8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001dcac:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dcb0:	e8 1d fc ff ff       	call   c001d8d2 <Process::addArgs(char**)>
c001dcb5:	83 c4 10             	add    esp,0x10
c001dcb8:	90                   	nop
c001dcb9:	83 c4 24             	add    esp,0x24
c001dcbc:	5b                   	pop    ebx
c001dcbd:	5e                   	pop    esi
c001dcbe:	c3                   	ret    

c001dcbf <disableIRQs()>:
c001dcbf:	fa                   	cli    
c001dcc0:	ff 05 ac 19 03 c0    	inc    DWORD PTR ds:0xc00319ac
c001dcc6:	c3                   	ret    

c001dcc7 <getIRQNestingLevel()>:
c001dcc7:	a1 ac 19 03 c0       	mov    eax,ds:0xc00319ac
c001dccc:	c3                   	ret    

c001dccd <enableIRQs()>:
c001dccd:	a1 ac 19 03 c0       	mov    eax,ds:0xc00319ac
c001dcd2:	48                   	dec    eax
c001dcd3:	a3 ac 19 03 c0       	mov    ds:0xc00319ac,eax
c001dcd8:	75 01                	jne    c001dcdb <enableIRQs()+0xe>
c001dcda:	fb                   	sti    
c001dcdb:	c3                   	ret    

c001dcdc <lockScheduler()>:
c001dcdc:	eb e1                	jmp    c001dcbf <disableIRQs()>

c001dcde <unlockScheduler()>:
c001dcde:	eb ed                	jmp    c001dccd <enableIRQs()>

c001dce0 <userModeEntryPoint(void*)>:
c001dce0:	83 ec 0c             	sub    esp,0xc
c001dce3:	e8 f6 ff ff ff       	call   c001dcde <unlockScheduler()>
c001dce8:	fb                   	sti    
c001dce9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dcee:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001dcf1:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001dcf7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001dcfb:	83 c4 0c             	add    esp,0xc
c001dcfe:	e9 27 26 fe ff       	jmp    c000032a <goToUsermode>

c001dd03 <lockStuff()>:
c001dd03:	e8 b7 ff ff ff       	call   c001dcbf <disableIRQs()>
c001dd08:	ff 05 a8 19 03 c0    	inc    DWORD PTR ds:0xc00319a8
c001dd0e:	c3                   	ret    

c001dd0f <taskStartupFunction>:
c001dd0f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd14:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001dd17:	c3                   	ret    

c001dd18 <updateTimeUsed()>:
c001dd18:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c001dd1d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dd23:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001dd2a:	74 50                	je     c001dd7c <updateTimeUsed()+0x64>
c001dd2c:	57                   	push   edi
c001dd2d:	56                   	push   esi
c001dd2e:	53                   	push   ebx
c001dd2f:	0f 31                	rdtsc  
c001dd31:	89 c1                	mov    ecx,eax
c001dd33:	a3 e8 19 03 c0       	mov    ds:0xc00319e8,eax
c001dd38:	2b 0d d8 19 03 c0    	sub    ecx,DWORD PTR ds:0xc00319d8
c001dd3e:	89 d3                	mov    ebx,edx
c001dd40:	89 0d e0 19 03 c0    	mov    DWORD PTR ds:0xc00319e0,ecx
c001dd46:	1b 1d dc 19 03 c0    	sbb    ebx,DWORD PTR ds:0xc00319dc
c001dd4c:	a3 d8 19 03 c0       	mov    ds:0xc00319d8,eax
c001dd51:	89 1d e4 19 03 c0    	mov    DWORD PTR ds:0xc00319e4,ebx
c001dd57:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd5c:	89 15 ec 19 03 c0    	mov    DWORD PTR ds:0xc00319ec,edx
c001dd62:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001dd65:	89 15 dc 19 03 c0    	mov    DWORD PTR ds:0xc00319dc,edx
c001dd6b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001dd6e:	01 f1                	add    ecx,esi
c001dd70:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001dd73:	11 fb                	adc    ebx,edi
c001dd75:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001dd78:	5b                   	pop    ebx
c001dd79:	5e                   	pop    esi
c001dd7a:	5f                   	pop    edi
c001dd7b:	c3                   	ret    
c001dd7c:	c3                   	ret    

c001dd7d <switchToThread(ThreadControlBlock*)>:
c001dd7d:	53                   	push   ebx
c001dd7e:	83 ec 08             	sub    esp,0x8
c001dd81:	a1 a8 19 03 c0       	mov    eax,ds:0xc00319a8
c001dd86:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dd8a:	85 c0                	test   eax,eax
c001dd8c:	75 30                	jne    c001ddbe <switchToThread(ThreadControlBlock*)+0x41>
c001dd8e:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001dd91:	3c ff                	cmp    al,0xff
c001dd93:	74 25                	je     c001ddba <switchToThread(ThreadControlBlock*)+0x3d>
c001dd95:	0f b6 d0             	movzx  edx,al
c001dd98:	b8 84 03 00 00       	mov    eax,0x384
c001dd9d:	29 d0                	sub    eax,edx
c001dd9f:	c1 e0 10             	shl    eax,0x10
c001dda2:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001dda5:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001dda8:	e8 6b ff ff ff       	call   c001dd18 <updateTimeUsed()>
c001ddad:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001ddb1:	83 c4 08             	add    esp,0x8
c001ddb4:	5b                   	pop    ebx
c001ddb5:	e9 a8 25 fe ff       	jmp    c0000362 <switchToThreadASM>
c001ddba:	31 c0                	xor    eax,eax
c001ddbc:	eb e7                	jmp    c001dda5 <switchToThread(ThreadControlBlock*)+0x28>
c001ddbe:	c7 05 a4 19 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00319a4,0x1
c001ddc8:	83 c4 08             	add    esp,0x8
c001ddcb:	5b                   	pop    ebx
c001ddcc:	c3                   	ret    
c001ddcd:	90                   	nop

c001ddce <Semaphore::Semaphore(int)>:
c001ddce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ddd2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ddd6:	89 10                	mov    DWORD PTR [eax],edx
c001ddd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dddc:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001dde3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dde7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ddee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ddf2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ddf9:	90                   	nop
c001ddfa:	c3                   	ret    
c001ddfb:	90                   	nop

c001ddfc <Mutex::Mutex()>:
c001ddfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de00:	6a 01                	push   0x1
c001de02:	50                   	push   eax
c001de03:	e8 c6 ff ff ff       	call   c001ddce <Semaphore::Semaphore(int)>
c001de08:	83 c4 08             	add    esp,0x8
c001de0b:	90                   	nop
c001de0c:	c3                   	ret    
c001de0d:	90                   	nop

c001de0e <Process::createThread(void (*)(void*), void*, int)>:
c001de0e:	55                   	push   ebp
c001de0f:	31 c9                	xor    ecx,ecx
c001de11:	57                   	push   edi
c001de12:	56                   	push   esi
c001de13:	53                   	push   ebx
c001de14:	83 ec 1c             	sub    esp,0x1c
c001de17:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001de1b:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001de22:	89 f2                	mov    edx,esi
c001de24:	0f b7 c2             	movzx  eax,dx
c001de27:	83 e2 01             	and    edx,0x1
c001de2a:	74 16                	je     c001de42 <Process::createThread(void (*)(void*), void*, int)+0x34>
c001de2c:	d1 f8                	sar    eax,1
c001de2e:	41                   	inc    ecx
c001de2f:	89 c2                	mov    edx,eax
c001de31:	83 f9 10             	cmp    ecx,0x10
c001de34:	75 ee                	jne    c001de24 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001de36:	83 c4 1c             	add    esp,0x1c
c001de39:	31 db                	xor    ebx,ebx
c001de3b:	89 d8                	mov    eax,ebx
c001de3d:	5b                   	pop    ebx
c001de3e:	5e                   	pop    esi
c001de3f:	5f                   	pop    edi
c001de40:	5d                   	pop    ebp
c001de41:	c3                   	ret    
c001de42:	b8 01 00 00 00       	mov    eax,0x1
c001de47:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001de4a:	d3 e0                	shl    eax,cl
c001de4c:	09 c6                	or     esi,eax
c001de4e:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001de51:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001de58:	89 c6                	mov    esi,eax
c001de5a:	c1 e6 05             	shl    esi,0x5
c001de5d:	01 f0                	add    eax,esi
c001de5f:	01 d8                	add    eax,ebx
c001de61:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001de68:	75 0a                	jne    c001de74 <Process::createThread(void (*)(void*), void*, int)+0x66>
c001de6a:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001de74:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001de7a:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001de7e:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001de81:	01 ca                	add    edx,ecx
c001de83:	83 ec 08             	sub    esp,0x8
c001de86:	89 d0                	mov    eax,edx
c001de88:	c1 e0 05             	shl    eax,0x5
c001de8b:	01 d0                	add    eax,edx
c001de8d:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001de91:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001de95:	01 d8                	add    eax,ebx
c001de97:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001de9d:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001dea3:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001dea9:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001deaf:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001deb5:	89 cd                	mov    ebp,ecx
c001deb7:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001debb:	f7 dd                	neg    ebp
c001debd:	c1 e5 15             	shl    ebp,0x15
c001dec0:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001dec6:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001decc:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001ded6:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001dedc:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001dee6:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001def0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001def4:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001defb:	53                   	push   ebx
c001defc:	68 c8 19 03 c0       	push   0xc00319c8
c001df01:	e8 0a ac 00 00       	call   c0028b10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001df06:	89 d8                	mov    eax,ebx
c001df08:	83 c4 10             	add    esp,0x10
c001df0b:	83 c4 1c             	add    esp,0x1c
c001df0e:	5b                   	pop    ebx
c001df0f:	5e                   	pop    esi
c001df10:	5f                   	pop    edi
c001df11:	5d                   	pop    ebp
c001df12:	c3                   	ret    
c001df13:	90                   	nop

c001df14 <Process::createUserThread()>:
c001df14:	83 ec 0c             	sub    esp,0xc
c001df17:	68 80 00 00 00       	push   0x80
c001df1c:	6a 00                	push   0x0
c001df1e:	68 e0 dc 01 c0       	push   0xc001dce0
c001df23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001df27:	e8 e2 fe ff ff       	call   c001de0e <Process::createThread(void (*)(void*), void*, int)>
c001df2c:	83 c4 1c             	add    esp,0x1c
c001df2f:	c3                   	ret    

c001df30 <setupMultitasking(void (*)())>:
c001df30:	56                   	push   esi
c001df31:	53                   	push   ebx
c001df32:	51                   	push   ecx
c001df33:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001df37:	eb 10                	jmp    c001df49 <setupMultitasking(void (*)())+0x19>
c001df39:	83 ec 0c             	sub    esp,0xc
c001df3c:	68 c8 19 03 c0       	push   0xc00319c8
c001df41:	e8 1c ab 00 00       	call   c0028a62 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001df46:	83 c4 10             	add    esp,0x10
c001df49:	83 ec 0c             	sub    esp,0xc
c001df4c:	68 c8 19 03 c0       	push   0xc00319c8
c001df51:	e8 f0 aa 00 00       	call   c0028a46 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001df56:	83 c4 10             	add    esp,0x10
c001df59:	84 c0                	test   al,al
c001df5b:	74 dc                	je     c001df39 <setupMultitasking(void (*)())+0x9>
c001df5d:	83 ec 0c             	sub    esp,0xc
c001df60:	68 3f 07 00 00       	push   0x73f
c001df65:	e8 e1 18 ff ff       	call   c000f84b <malloc>
c001df6a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001df71:	89 c3                	mov    ebx,eax
c001df73:	6a 00                	push   0x0
c001df75:	68 13 c2 02 c0       	push   0xc002c213
c001df7a:	6a 01                	push   0x1
c001df7c:	50                   	push   eax
c001df7d:	e8 8e fb ff ff       	call   c001db10 <Process::Process(bool, char const*, Process*, char**)>
c001df82:	83 c4 18             	add    esp,0x18
c001df85:	89 1d d4 19 03 c0    	mov    DWORD PTR ds:0xc00319d4,ebx
c001df8b:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001df91:	68 34 c3 02 c0       	push   0xc002c334
c001df96:	e8 28 4e ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001df9b:	58                   	pop    eax
c001df9c:	5a                   	pop    edx
c001df9d:	6a 63                	push   0x63
c001df9f:	68 68 c3 02 c0       	push   0xc002c368
c001dfa4:	e8 1a 4e ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001dfa9:	59                   	pop    ecx
c001dfaa:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001dfb0:	e8 61 2c ff ff       	call   c0010c16 <setActiveTerminal(VgaText*)>
c001dfb5:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001dfbd:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001dfc7:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001dfcd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001dfd0:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001dfda:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001dfe0:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001dfe6:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001dff0:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001dffa:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e004:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e00a:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e014:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e01a:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e024:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e02a:	58                   	pop    eax
c001e02b:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e031:	5a                   	pop    edx
c001e032:	68 0f c2 02 c0       	push   0xc002c20f
c001e037:	50                   	push   eax
c001e038:	e8 ff 27 fe ff       	call   c000083c <strcpy>
c001e03d:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e044:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e048:	83 c4 14             	add    esp,0x14
c001e04b:	5b                   	pop    ebx
c001e04c:	5e                   	pop    esi
c001e04d:	e9 02 23 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e052 <schedule()>:
c001e052:	a1 a8 19 03 c0       	mov    eax,ds:0xc00319a8
c001e057:	85 c0                	test   eax,eax
c001e059:	74 0b                	je     c001e066 <schedule()+0x14>
c001e05b:	c7 05 a4 19 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00319a4,0x1
c001e065:	c3                   	ret    
c001e066:	53                   	push   ebx
c001e067:	83 ec 14             	sub    esp,0x14
c001e06a:	68 c8 19 03 c0       	push   0xc00319c8
c001e06f:	e8 d2 a9 00 00       	call   c0028a46 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e074:	83 c4 10             	add    esp,0x10
c001e077:	84 c0                	test   al,al
c001e079:	75 38                	jne    c001e0b3 <schedule()+0x61>
c001e07b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e080:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e083:	4a                   	dec    edx
c001e084:	74 32                	je     c001e0b8 <schedule()+0x66>
c001e086:	83 ec 0c             	sub    esp,0xc
c001e089:	68 c8 19 03 c0       	push   0xc00319c8
c001e08e:	e8 ab a9 00 00       	call   c0028a3e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e093:	c7 04 24 c8 19 03 c0 	mov    DWORD PTR [esp],0xc00319c8
c001e09a:	89 c3                	mov    ebx,eax
c001e09c:	e8 c1 a9 00 00       	call   c0028a62 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e0a1:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e0a8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e0ab:	e8 cd fc ff ff       	call   c001dd7d <switchToThread(ThreadControlBlock*)>
c001e0b0:	83 c4 10             	add    esp,0x10
c001e0b3:	83 c4 08             	add    esp,0x8
c001e0b6:	5b                   	pop    ebx
c001e0b7:	c3                   	ret    
c001e0b8:	83 ec 08             	sub    esp,0x8
c001e0bb:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e0c2:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e0c8:	68 c8 19 03 c0       	push   0xc00319c8
c001e0cd:	e8 3e aa 00 00       	call   c0028b10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e0d2:	83 c4 10             	add    esp,0x10
c001e0d5:	eb af                	jmp    c001e086 <schedule()+0x34>

c001e0d7 <unlockStuff()>:
c001e0d7:	a1 a8 19 03 c0       	mov    eax,ds:0xc00319a8
c001e0dc:	48                   	dec    eax
c001e0dd:	a3 a8 19 03 c0       	mov    ds:0xc00319a8,eax
c001e0e2:	75 09                	jne    c001e0ed <unlockStuff()+0x16>
c001e0e4:	a1 a4 19 03 c0       	mov    eax,ds:0xc00319a4
c001e0e9:	85 c0                	test   eax,eax
c001e0eb:	75 05                	jne    c001e0f2 <unlockStuff()+0x1b>
c001e0ed:	e9 db fb ff ff       	jmp    c001dccd <enableIRQs()>
c001e0f2:	83 ec 0c             	sub    esp,0xc
c001e0f5:	c7 05 a4 19 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00319a4,0x0
c001e0ff:	e8 4e ff ff ff       	call   c001e052 <schedule()>
c001e104:	83 c4 0c             	add    esp,0xc
c001e107:	e9 c1 fb ff ff       	jmp    c001dccd <enableIRQs()>

c001e10c <Semaphore::tryAcquire()>:
c001e10c:	83 ec 0c             	sub    esp,0xc
c001e10f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e113:	e8 eb fb ff ff       	call   c001dd03 <lockStuff()>
c001e118:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e11b:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e11d:	7c 0b                	jl     c001e12a <Semaphore::tryAcquire()+0x1e>
c001e11f:	e8 b3 ff ff ff       	call   c001e0d7 <unlockStuff()>
c001e124:	31 c0                	xor    eax,eax
c001e126:	83 c4 0c             	add    esp,0xc
c001e129:	c3                   	ret    
c001e12a:	42                   	inc    edx
c001e12b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e12e:	e8 a4 ff ff ff       	call   c001e0d7 <unlockStuff()>
c001e133:	b0 01                	mov    al,0x1
c001e135:	83 c4 0c             	add    esp,0xc
c001e138:	c3                   	ret    
c001e139:	90                   	nop

c001e13a <Semaphore::assertLocked(char const*)>:
c001e13a:	83 ec 0c             	sub    esp,0xc
c001e13d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e141:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e145:	e8 b9 fb ff ff       	call   c001dd03 <lockStuff()>
c001e14a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e14c:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001e14f:	7c 05                	jl     c001e156 <Semaphore::assertLocked(char const*)+0x1c>
c001e151:	83 c4 0c             	add    esp,0xc
c001e154:	eb 81                	jmp    c001e0d7 <unlockStuff()>
c001e156:	83 ec 0c             	sub    esp,0xc
c001e159:	52                   	push   edx
c001e15a:	e8 a2 c3 ff ff       	call   c001a501 <Krnl::panic(char const*)>
c001e15f:	83 c4 10             	add    esp,0x10
c001e162:	83 c4 0c             	add    esp,0xc
c001e165:	e9 6d ff ff ff       	jmp    c001e0d7 <unlockStuff()>

c001e16a <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e16a:	83 ec 0c             	sub    esp,0xc
c001e16d:	e8 55 fb ff ff       	call   c001dcc7 <getIRQNestingLevel()>
c001e172:	83 ec 08             	sub    esp,0x8
c001e175:	50                   	push   eax
c001e176:	68 8c c3 02 c0       	push   0xc002c38c
c001e17b:	e8 43 4c ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001e180:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e184:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e189:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e18c:	e8 c1 fe ff ff       	call   c001e052 <schedule()>
c001e191:	e8 48 fb ff ff       	call   c001dcde <unlockScheduler()>
c001e196:	e8 2c fb ff ff       	call   c001dcc7 <getIRQNestingLevel()>
c001e19b:	5a                   	pop    edx
c001e19c:	59                   	pop    ecx
c001e19d:	50                   	push   eax
c001e19e:	68 c0 c3 02 c0       	push   0xc002c3c0
c001e1a3:	e8 1b 4c ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001e1a8:	83 c4 1c             	add    esp,0x1c
c001e1ab:	c3                   	ret    

c001e1ac <blockTask(TaskState)>:
c001e1ac:	83 ec 0c             	sub    esp,0xc
c001e1af:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e1b3:	e8 24 fb ff ff       	call   c001dcdc <lockScheduler()>
c001e1b8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e1bd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e1c0:	e8 8d fe ff ff       	call   c001e052 <schedule()>
c001e1c5:	83 c4 0c             	add    esp,0xc
c001e1c8:	e9 11 fb ff ff       	jmp    c001dcde <unlockScheduler()>

c001e1cd <waitTask(int, int*, int)>:
c001e1cd:	83 ec 18             	sub    esp,0x18
c001e1d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e1d5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e1d9:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e1dc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e1e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e1e5:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e1e8:	6a 07                	push   0x7
c001e1ea:	e8 bd ff ff ff       	call   c001e1ac <blockTask(TaskState)>
c001e1ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e1f4:	83 c4 10             	add    esp,0x10
c001e1f7:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e1fa:	85 d2                	test   edx,edx
c001e1fc:	74 0a                	je     c001e208 <waitTask(int, int*, int)+0x3b>
c001e1fe:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e201:	89 02                	mov    DWORD PTR [edx],eax
c001e203:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e208:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e20b:	83 c4 0c             	add    esp,0xc
c001e20e:	c3                   	ret    

c001e20f <nanoSleepUntil(unsigned long long)>:
c001e20f:	83 ec 0c             	sub    esp,0xc
c001e212:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e216:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e21a:	3b 05 f0 ea 02 c0    	cmp    eax,DWORD PTR ds:0xc002eaf0
c001e220:	89 d1                	mov    ecx,edx
c001e222:	1b 0d f4 ea 02 c0    	sbb    ecx,DWORD PTR ds:0xc002eaf4
c001e228:	73 04                	jae    c001e22e <nanoSleepUntil(unsigned long long)+0x1f>
c001e22a:	83 c4 0c             	add    esp,0xc
c001e22d:	c3                   	ret    
c001e22e:	e8 d0 fa ff ff       	call   c001dd03 <lockStuff()>
c001e233:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e239:	83 ec 08             	sub    esp,0x8
c001e23c:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e23f:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e242:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e248:	68 bc 19 03 c0       	push   0xc00319bc
c001e24d:	e8 be a8 00 00       	call   c0028b10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e252:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e259:	e8 4e ff ff ff       	call   c001e1ac <blockTask(TaskState)>
c001e25e:	83 c4 1c             	add    esp,0x1c
c001e261:	e9 71 fe ff ff       	jmp    c001e0d7 <unlockStuff()>

c001e266 <nanoSleep(unsigned long long)>:
c001e266:	a1 f0 ea 02 c0       	mov    eax,ds:0xc002eaf0
c001e26b:	8b 15 f4 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002eaf4
c001e271:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e275:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e279:	eb 94                	jmp    c001e20f <nanoSleepUntil(unsigned long long)>

c001e27b <sleep(unsigned long long)>:
c001e27b:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e283:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e288:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e28c:	01 ca                	add    edx,ecx
c001e28e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e292:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e296:	eb ce                	jmp    c001e266 <nanoSleep(unsigned long long)>

c001e298 <Semaphore::acquire()>:
c001e298:	83 ec 0c             	sub    esp,0xc
c001e29b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e29f:	e8 5f fa ff ff       	call   c001dd03 <lockStuff()>
c001e2a4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e2a7:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e2a9:	7d 0c                	jge    c001e2b7 <Semaphore::acquire()+0x1f>
c001e2ab:	42                   	inc    edx
c001e2ac:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e2af:	83 c4 0c             	add    esp,0xc
c001e2b2:	e9 20 fe ff ff       	jmp    c001e0d7 <unlockStuff()>
c001e2b7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e2bd:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001e2c4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e2c7:	85 d2                	test   edx,edx
c001e2c9:	74 2a                	je     c001e2f5 <Semaphore::acquire()+0x5d>
c001e2cb:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e2ce:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e2d4:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001e2d7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e2dd:	83 ec 0c             	sub    esp,0xc
c001e2e0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e2e3:	6a 05                	push   0x5
c001e2e5:	e8 c2 fe ff ff       	call   c001e1ac <blockTask(TaskState)>
c001e2ea:	83 c4 10             	add    esp,0x10
c001e2ed:	83 c4 0c             	add    esp,0xc
c001e2f0:	e9 e2 fd ff ff       	jmp    c001e0d7 <unlockStuff()>
c001e2f5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e2fb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e2fe:	eb d7                	jmp    c001e2d7 <Semaphore::acquire()+0x3f>

c001e300 <taskReturned>:
c001e300:	83 ec 18             	sub    esp,0x18
c001e303:	68 f4 c3 02 c0       	push   0xc002c3f4
c001e308:	e8 f4 c1 ff ff       	call   c001a501 <Krnl::panic(char const*)>
c001e30d:	83 c4 10             	add    esp,0x10
c001e310:	83 ec 0c             	sub    esp,0xc
c001e313:	6a 02                	push   0x2
c001e315:	e8 92 fe ff ff       	call   c001e1ac <blockTask(TaskState)>
c001e31a:	e8 bd f9 ff ff       	call   c001dcdc <lockScheduler()>
c001e31f:	e8 2e fd ff ff       	call   c001e052 <schedule()>
c001e324:	e8 b5 f9 ff ff       	call   c001dcde <unlockScheduler()>
c001e329:	83 c4 10             	add    esp,0x10
c001e32c:	eb e2                	jmp    c001e310 <taskReturned+0x10>

c001e32e <unblockTask(ThreadControlBlock*)>:
c001e32e:	53                   	push   ebx
c001e32f:	83 ec 08             	sub    esp,0x8
c001e332:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e336:	e8 a1 f9 ff ff       	call   c001dcdc <lockScheduler()>
c001e33b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e33e:	85 c0                	test   eax,eax
c001e340:	74 5c                	je     c001e39e <unblockTask(ThreadControlBlock*)+0x70>
c001e342:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e345:	48                   	dec    eax
c001e346:	74 31                	je     c001e379 <unblockTask(ThreadControlBlock*)+0x4b>
c001e348:	83 ec 0c             	sub    esp,0xc
c001e34b:	68 c8 19 03 c0       	push   0xc00319c8
c001e350:	e8 e9 a6 00 00       	call   c0028a3e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e355:	83 c4 10             	add    esp,0x10
c001e358:	85 c0                	test   eax,eax
c001e35a:	75 17                	jne    c001e373 <unblockTask(ThreadControlBlock*)+0x45>
c001e35c:	eb 65                	jmp    c001e3c3 <unblockTask(ThreadControlBlock*)+0x95>
c001e35e:	83 ec 08             	sub    esp,0x8
c001e361:	50                   	push   eax
c001e362:	68 c8 19 03 c0       	push   0xc00319c8
c001e367:	e8 b8 a9 00 00       	call   c0028d24 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e36c:	83 c4 10             	add    esp,0x10
c001e36f:	85 c0                	test   eax,eax
c001e371:	74 50                	je     c001e3c3 <unblockTask(ThreadControlBlock*)+0x95>
c001e373:	39 c3                	cmp    ebx,eax
c001e375:	75 e7                	jne    c001e35e <unblockTask(ThreadControlBlock*)+0x30>
c001e377:	eb 1c                	jmp    c001e395 <unblockTask(ThreadControlBlock*)+0x67>
c001e379:	83 ec 0c             	sub    esp,0xc
c001e37c:	68 e4 c4 02 c0       	push   0xc002c4e4
c001e381:	e8 3d 4a ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001e386:	c7 04 24 70 c4 02 c0 	mov    DWORD PTR [esp],0xc002c470
c001e38d:	e8 31 4a ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001e392:	83 c4 10             	add    esp,0x10
c001e395:	83 c4 08             	add    esp,0x8
c001e398:	5b                   	pop    ebx
c001e399:	e9 40 f9 ff ff       	jmp    c001dcde <unlockScheduler()>
c001e39e:	83 ec 0c             	sub    esp,0xc
c001e3a1:	68 28 c4 02 c0       	push   0xc002c428
c001e3a6:	e8 18 4a ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001e3ab:	c7 04 24 70 c4 02 c0 	mov    DWORD PTR [esp],0xc002c470
c001e3b2:	e8 0c 4a ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001e3b7:	83 c4 10             	add    esp,0x10
c001e3ba:	83 c4 08             	add    esp,0x8
c001e3bd:	5b                   	pop    ebx
c001e3be:	e9 1b f9 ff ff       	jmp    c001dcde <unlockScheduler()>
c001e3c3:	83 ec 08             	sub    esp,0x8
c001e3c6:	53                   	push   ebx
c001e3c7:	68 c8 19 03 c0       	push   0xc00319c8
c001e3cc:	e8 3f a7 00 00       	call   c0028b10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e3d1:	83 c4 10             	add    esp,0x10
c001e3d4:	83 c4 08             	add    esp,0x8
c001e3d7:	5b                   	pop    ebx
c001e3d8:	e9 01 f9 ff ff       	jmp    c001dcde <unlockScheduler()>

c001e3dd <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e3dd:	55                   	push   ebp
c001e3de:	57                   	push   edi
c001e3df:	56                   	push   esi
c001e3e0:	53                   	push   ebx
c001e3e1:	83 ec 1c             	sub    esp,0x1c
c001e3e4:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e3e8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e3eb:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e3f1:	85 ff                	test   edi,edi
c001e3f3:	7e 20                	jle    c001e415 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e3f5:	31 f6                	xor    esi,esi
c001e3f7:	83 ec 0c             	sub    esp,0xc
c001e3fa:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e401:	46                   	inc    esi
c001e402:	e8 54 14 ff ff       	call   c000f85b <free>
c001e407:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e40a:	83 c4 10             	add    esp,0x10
c001e40d:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e413:	7f e2                	jg     c001e3f7 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e415:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e41f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e424:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e427:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e42a:	d3 c0                	rol    eax,cl
c001e42c:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e433:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e436:	89 f7                	mov    edi,esi
c001e438:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e440:	0f 85 74 01 00 00    	jne    c001e5ba <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001e446:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e44c:	85 ed                	test   ebp,ebp
c001e44e:	74 1b                	je     c001e46b <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e450:	83 ec 0c             	sub    esp,0xc
c001e453:	55                   	push   ebp
c001e454:	e8 15 be ff ff       	call   c001a26e <EnvVarContainer::~EnvVarContainer()>
c001e459:	59                   	pop    ecx
c001e45a:	5e                   	pop    esi
c001e45b:	6a 0c                	push   0xc
c001e45d:	55                   	push   ebp
c001e45e:	e8 80 48 ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c001e463:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e466:	83 c4 10             	add    esp,0x10
c001e469:	89 f7                	mov    edi,esi
c001e46b:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e471:	85 c0                	test   eax,eax
c001e473:	0f 84 aa 00 00 00    	je     c001e523 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e479:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e47c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e480:	31 c9                	xor    ecx,ecx
c001e482:	eb 10                	jmp    c001e494 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e484:	41                   	inc    ecx
c001e485:	83 f9 10             	cmp    ecx,0x10
c001e488:	0f 84 95 00 00 00    	je     c001e523 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e48e:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e494:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e49b:	d3 fa                	sar    edx,cl
c001e49d:	83 e2 01             	and    edx,0x1
c001e4a0:	74 e2                	je     c001e484 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e4a2:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e4a5:	01 ca                	add    edx,ecx
c001e4a7:	89 d5                	mov    ebp,edx
c001e4a9:	c1 e5 05             	shl    ebp,0x5
c001e4ac:	01 ea                	add    edx,ebp
c001e4ae:	01 d0                	add    eax,edx
c001e4b0:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e4b6:	83 fd 07             	cmp    ebp,0x7
c001e4b9:	75 c9                	jne    c001e484 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e4bb:	05 40 02 00 00       	add    eax,0x240
c001e4c0:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e4c3:	83 fd ff             	cmp    ebp,0xffffffff
c001e4c6:	0f 8c 08 01 00 00    	jl     c001e5d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e4cc:	0f 84 b9 01 00 00    	je     c001e68b <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001e4d2:	85 ed                	test   ebp,ebp
c001e4d4:	0f 84 a0 01 00 00    	je     c001e67a <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001e4da:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e4dc:	75 a6                	jne    c001e484 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e4de:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e4e4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e4e8:	01 d0                	add    eax,edx
c001e4ea:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e4ee:	83 ec 0c             	sub    esp,0xc
c001e4f1:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e4f7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e4fa:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e500:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e507:	50                   	push   eax
c001e508:	e8 21 fe ff ff       	call   c001e32e <unblockTask(ThreadControlBlock*)>
c001e50d:	83 c4 10             	add    esp,0x10
c001e510:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e513:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e517:	89 f7                	mov    edi,esi
c001e519:	41                   	inc    ecx
c001e51a:	83 f9 10             	cmp    ecx,0x10
c001e51d:	0f 85 6b ff ff ff    	jne    c001e48e <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e523:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e529:	85 c0                	test   eax,eax
c001e52b:	74 5d                	je     c001e58a <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e52d:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e533:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e539:	74 4f                	je     c001e58a <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e53b:	83 ec 0c             	sub    esp,0xc
c001e53e:	68 c8 19 03 c0       	push   0xc00319c8
c001e543:	e8 f6 a4 00 00       	call   c0028a3e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e548:	c7 04 24 c8 19 03 c0 	mov    DWORD PTR [esp],0xc00319c8
c001e54f:	89 c7                	mov    edi,eax
c001e551:	e8 f0 a4 00 00       	call   c0028a46 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e556:	83 c4 10             	add    esp,0x10
c001e559:	84 c0                	test   al,al
c001e55b:	0f 84 e4 00 00 00    	je     c001e645 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001e561:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e564:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e56a:	85 d2                	test   edx,edx
c001e56c:	74 0f                	je     c001e57d <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e56e:	83 ec 0c             	sub    esp,0xc
c001e571:	8b 02                	mov    eax,DWORD PTR [edx]
c001e573:	52                   	push   edx
c001e574:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e577:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e57a:	83 c4 10             	add    esp,0x10
c001e57d:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e587:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e58a:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e590:	85 db                	test   ebx,ebx
c001e592:	74 16                	je     c001e5aa <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e594:	83 ec 0c             	sub    esp,0xc
c001e597:	53                   	push   ebx
c001e598:	e8 13 3b ff ff       	call   c00120b0 <VAS::~VAS()>
c001e59d:	58                   	pop    eax
c001e59e:	5a                   	pop    edx
c001e59f:	6a 14                	push   0x14
c001e5a1:	53                   	push   ebx
c001e5a2:	e8 3c 47 ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c001e5a7:	83 c4 10             	add    esp,0x10
c001e5aa:	83 ec 0c             	sub    esp,0xc
c001e5ad:	68 1a c2 02 c0       	push   0xc002c21a
c001e5b2:	e8 0c 48 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001e5b7:	83 c4 10             	add    esp,0x10
c001e5ba:	83 ec 08             	sub    esp,0x8
c001e5bd:	68 3f 07 00 00       	push   0x73f
c001e5c2:	68 28 c2 02 c0       	push   0xc002c228
c001e5c7:	e8 f7 47 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001e5cc:	83 c4 2c             	add    esp,0x2c
c001e5cf:	5b                   	pop    ebx
c001e5d0:	5e                   	pop    esi
c001e5d1:	5f                   	pop    edi
c001e5d2:	5d                   	pop    ebp
c001e5d3:	c3                   	ret    
c001e5d4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e5d8:	83 ec 0c             	sub    esp,0xc
c001e5db:	68 28 c5 02 c0       	push   0xc002c528
c001e5e0:	e8 1c bf ff ff       	call   c001a501 <Krnl::panic(char const*)>
c001e5e5:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e5e8:	83 c4 10             	add    esp,0x10
c001e5eb:	89 f7                	mov    edi,esi
c001e5ed:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e5f1:	e9 8e fe ff ff       	jmp    c001e484 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e5f6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e5fc:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e602:	75 1c                	jne    c001e620 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e604:	83 ec 0c             	sub    esp,0xc
c001e607:	68 90 c5 02 c0       	push   0xc002c590
c001e60c:	e8 b2 47 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001e611:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e618:	e8 8f fb ff ff       	call   c001e1ac <blockTask(TaskState)>
c001e61d:	83 c4 10             	add    esp,0x10
c001e620:	83 ec 08             	sub    esp,0x8
c001e623:	56                   	push   esi
c001e624:	68 c8 19 03 c0       	push   0xc00319c8
c001e629:	e8 e2 a4 00 00       	call   c0028b10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e62e:	c7 04 24 c8 19 03 c0 	mov    DWORD PTR [esp],0xc00319c8
c001e635:	e8 04 a4 00 00       	call   c0028a3e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e63a:	83 c4 10             	add    esp,0x10
c001e63d:	39 f8                	cmp    eax,edi
c001e63f:	0f 84 1c ff ff ff    	je     c001e561 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e645:	83 ec 0c             	sub    esp,0xc
c001e648:	68 c8 19 03 c0       	push   0xc00319c8
c001e64d:	e8 ec a3 00 00       	call   c0028a3e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e652:	c7 04 24 c8 19 03 c0 	mov    DWORD PTR [esp],0xc00319c8
c001e659:	89 c6                	mov    esi,eax
c001e65b:	e8 02 a4 00 00       	call   c0028a62 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e660:	83 c4 10             	add    esp,0x10
c001e663:	39 f3                	cmp    ebx,esi
c001e665:	74 b9                	je     c001e620 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e667:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e66a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e66d:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e673:	75 ab                	jne    c001e620 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e675:	e9 7c ff ff ff       	jmp    c001e5f6 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001e67a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e67e:	83 ec 0c             	sub    esp,0xc
c001e681:	68 5c c5 02 c0       	push   0xc002c55c
c001e686:	e9 55 ff ff ff       	jmp    c001e5e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001e68b:	8b 36                	mov    esi,DWORD PTR [esi]
c001e68d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e691:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e694:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e697:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e69d:	01 d7                	add    edi,edx
c001e69f:	89 f8                	mov    eax,edi
c001e6a1:	e9 44 fe ff ff       	jmp    c001e4ea <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e6a6 <cleanerTaskFunction(void*)>:
c001e6a6:	53                   	push   ebx
c001e6a7:	83 ec 08             	sub    esp,0x8
c001e6aa:	e8 2f f6 ff ff       	call   c001dcde <unlockScheduler()>
c001e6af:	e8 28 f6 ff ff       	call   c001dcdc <lockScheduler()>
c001e6b4:	80 3d 8c 19 03 c0 00 	cmp    BYTE PTR ds:0xc003198c,0x0
c001e6bb:	0f 85 8e 00 00 00    	jne    c001e74f <cleanerTaskFunction(void*)+0xa9>
c001e6c1:	83 ec 0c             	sub    esp,0xc
c001e6c4:	6a 02                	push   0x2
c001e6c6:	e8 9f fa ff ff       	call   c001e16a <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e6cb:	83 c4 10             	add    esp,0x10
c001e6ce:	c6 05 8c 19 03 c0 00 	mov    BYTE PTR ds:0xc003198c,0x0
c001e6d5:	e8 29 f6 ff ff       	call   c001dd03 <lockStuff()>
c001e6da:	e8 fd f5 ff ff       	call   c001dcdc <lockScheduler()>
c001e6df:	83 ec 0c             	sub    esp,0xc
c001e6e2:	68 b0 19 03 c0       	push   0xc00319b0
c001e6e7:	e8 5a a3 00 00       	call   c0028a46 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e6ec:	83 c4 10             	add    esp,0x10
c001e6ef:	84 c0                	test   al,al
c001e6f1:	75 40                	jne    c001e733 <cleanerTaskFunction(void*)+0x8d>
c001e6f3:	83 ec 0c             	sub    esp,0xc
c001e6f6:	68 b0 19 03 c0       	push   0xc00319b0
c001e6fb:	e8 3e a3 00 00       	call   c0028a3e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e700:	c7 04 24 b0 19 03 c0 	mov    DWORD PTR [esp],0xc00319b0
c001e707:	89 c3                	mov    ebx,eax
c001e709:	e8 54 a3 00 00       	call   c0028a62 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e70e:	c7 04 24 3e c2 02 c0 	mov    DWORD PTR [esp],0xc002c23e
c001e715:	e8 a9 46 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001e71a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e71d:	e8 bb fc ff ff       	call   c001e3dd <cleanupTerminatedTask(ThreadControlBlock*)>
c001e722:	c7 04 24 57 c2 02 c0 	mov    DWORD PTR [esp],0xc002c257
c001e729:	e8 95 46 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001e72e:	83 c4 10             	add    esp,0x10
c001e731:	eb ac                	jmp    c001e6df <cleanerTaskFunction(void*)+0x39>
c001e733:	e8 a6 f5 ff ff       	call   c001dcde <unlockScheduler()>
c001e738:	e8 9a f9 ff ff       	call   c001e0d7 <unlockStuff()>
c001e73d:	e8 9a f5 ff ff       	call   c001dcdc <lockScheduler()>
c001e742:	80 3d 8c 19 03 c0 00 	cmp    BYTE PTR ds:0xc003198c,0x0
c001e749:	0f 84 72 ff ff ff    	je     c001e6c1 <cleanerTaskFunction(void*)+0x1b>
c001e74f:	e8 8a f5 ff ff       	call   c001dcde <unlockScheduler()>
c001e754:	e9 75 ff ff ff       	jmp    c001e6ce <cleanerTaskFunction(void*)+0x28>

c001e759 <terminateTask(int)>:
c001e759:	83 ec 14             	sub    esp,0x14
c001e75c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e761:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e764:	83 c0 0c             	add    eax,0xc
c001e767:	50                   	push   eax
c001e768:	68 b8 c5 02 c0       	push   0xc002c5b8
c001e76d:	e8 51 46 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001e772:	e8 8c f5 ff ff       	call   c001dd03 <lockStuff()>
c001e777:	e8 60 f5 ff ff       	call   c001dcdc <lockScheduler()>
c001e77c:	c7 04 24 6a c2 02 c0 	mov    DWORD PTR [esp],0xc002c26a
c001e783:	e8 3b 46 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001e788:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e78c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e791:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e794:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e799:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e79c:	5a                   	pop    edx
c001e79d:	59                   	pop    ecx
c001e79e:	50                   	push   eax
c001e79f:	68 b0 19 03 c0       	push   0xc00319b0
c001e7a4:	e8 67 a3 00 00       	call   c0028b10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e7a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e7ae:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e7b5:	c7 04 24 84 c2 02 c0 	mov    DWORD PTR [esp],0xc002c284
c001e7bc:	e8 02 46 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001e7c1:	83 c4 10             	add    esp,0x10
c001e7c4:	a1 88 19 03 c0       	mov    eax,ds:0xc0031988
c001e7c9:	85 c0                	test   eax,eax
c001e7cb:	74 5a                	je     c001e827 <terminateTask(int)+0xce>
c001e7cd:	83 ec 0c             	sub    esp,0xc
c001e7d0:	68 9e c2 02 c0       	push   0xc002c29e
c001e7d5:	e8 e9 45 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001e7da:	58                   	pop    eax
c001e7db:	c6 05 8c 19 03 c0 01 	mov    BYTE PTR ds:0xc003198c,0x1
c001e7e2:	ff 35 88 19 03 c0    	push   DWORD PTR ds:0xc0031988
c001e7e8:	e8 41 fb ff ff       	call   c001e32e <unblockTask(ThreadControlBlock*)>
c001e7ed:	c7 04 24 b8 c2 02 c0 	mov    DWORD PTR [esp],0xc002c2b8
c001e7f4:	e8 ca 45 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001e7f9:	83 c4 10             	add    esp,0x10
c001e7fc:	e8 dd f4 ff ff       	call   c001dcde <unlockScheduler()>
c001e801:	e8 d1 f8 ff ff       	call   c001e0d7 <unlockStuff()>
c001e806:	83 ec 0c             	sub    esp,0xc
c001e809:	68 f0 c2 02 c0       	push   0xc002c2f0
c001e80e:	e8 b0 45 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001e813:	83 c4 10             	add    esp,0x10
c001e816:	e8 c1 f4 ff ff       	call   c001dcdc <lockScheduler()>
c001e81b:	e8 32 f8 ff ff       	call   c001e052 <schedule()>
c001e820:	e8 b9 f4 ff ff       	call   c001dcde <unlockScheduler()>
c001e825:	eb ef                	jmp    c001e816 <terminateTask(int)+0xbd>
c001e827:	83 ec 0c             	sub    esp,0xc
c001e82a:	68 d2 c2 02 c0       	push   0xc002c2d2
c001e82f:	e8 8f 45 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001e834:	83 c4 10             	add    esp,0x10
c001e837:	eb c3                	jmp    c001e7fc <terminateTask(int)+0xa3>

c001e839 <Thr::terminateFromIRQ(int)>:
c001e839:	83 ec 18             	sub    esp,0x18
c001e83c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e840:	e8 14 ff ff ff       	call   c001e759 <terminateTask(int)>
c001e845:	90                   	nop

c001e846 <Semaphore::release()>:
c001e846:	83 ec 0c             	sub    esp,0xc
c001e849:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e84d:	e8 b1 f4 ff ff       	call   c001dd03 <lockStuff()>
c001e852:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e855:	85 d2                	test   edx,edx
c001e857:	74 1a                	je     c001e873 <Semaphore::release()+0x2d>
c001e859:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001e85c:	83 ec 0c             	sub    esp,0xc
c001e85f:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001e862:	52                   	push   edx
c001e863:	e8 c6 fa ff ff       	call   c001e32e <unblockTask(ThreadControlBlock*)>
c001e868:	83 c4 10             	add    esp,0x10
c001e86b:	83 c4 0c             	add    esp,0xc
c001e86e:	e9 64 f8 ff ff       	jmp    c001e0d7 <unlockStuff()>
c001e873:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001e876:	83 c4 0c             	add    esp,0xc
c001e879:	e9 59 f8 ff ff       	jmp    c001e0d7 <unlockStuff()>

c001e87e <__static_initialization_and_destruction_0(int, int)>:
c001e87e:	83 ec 0c             	sub    esp,0xc
c001e881:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e886:	0f 85 88 00 00 00    	jne    c001e914 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e88c:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e894:	75 7e                	jne    c001e914 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e896:	83 ec 0c             	sub    esp,0xc
c001e899:	68 c8 19 03 c0       	push   0xc00319c8
c001e89e:	e8 29 a4 00 00       	call   c0028ccc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e8a3:	83 c4 10             	add    esp,0x10
c001e8a6:	83 ec 04             	sub    esp,0x4
c001e8a9:	68 84 d3 02 c0       	push   0xc002d384
c001e8ae:	68 c8 19 03 c0       	push   0xc00319c8
c001e8b3:	68 80 8c 02 c0       	push   0xc0028c80
c001e8b8:	e8 a0 43 ff ff       	call   c0012c5d <__cxa_atexit>
c001e8bd:	83 c4 10             	add    esp,0x10
c001e8c0:	83 ec 0c             	sub    esp,0xc
c001e8c3:	68 bc 19 03 c0       	push   0xc00319bc
c001e8c8:	e8 ff a3 00 00       	call   c0028ccc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e8cd:	83 c4 10             	add    esp,0x10
c001e8d0:	83 ec 04             	sub    esp,0x4
c001e8d3:	68 84 d3 02 c0       	push   0xc002d384
c001e8d8:	68 bc 19 03 c0       	push   0xc00319bc
c001e8dd:	68 80 8c 02 c0       	push   0xc0028c80
c001e8e2:	e8 76 43 ff ff       	call   c0012c5d <__cxa_atexit>
c001e8e7:	83 c4 10             	add    esp,0x10
c001e8ea:	83 ec 0c             	sub    esp,0xc
c001e8ed:	68 b0 19 03 c0       	push   0xc00319b0
c001e8f2:	e8 d5 a3 00 00       	call   c0028ccc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e8f7:	83 c4 10             	add    esp,0x10
c001e8fa:	83 ec 04             	sub    esp,0x4
c001e8fd:	68 84 d3 02 c0       	push   0xc002d384
c001e902:	68 b0 19 03 c0       	push   0xc00319b0
c001e907:	68 80 8c 02 c0       	push   0xc0028c80
c001e90c:	e8 4c 43 ff ff       	call   c0012c5d <__cxa_atexit>
c001e911:	83 c4 10             	add    esp,0x10
c001e914:	90                   	nop
c001e915:	83 c4 0c             	add    esp,0xc
c001e918:	c3                   	ret    

c001e919 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e919:	83 ec 0c             	sub    esp,0xc
c001e91c:	83 ec 08             	sub    esp,0x8
c001e91f:	68 ff ff 00 00       	push   0xffff
c001e924:	6a 01                	push   0x1
c001e926:	e8 53 ff ff ff       	call   c001e87e <__static_initialization_and_destruction_0(int, int)>
c001e92b:	83 c4 10             	add    esp,0x10
c001e92e:	83 c4 0c             	add    esp,0xc
c001e931:	c3                   	ret    

c001e932 <Vm::inbv(unsigned short)>:
c001e932:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e936:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e93b:	75 06                	jne    c001e943 <Vm::inbv(unsigned short)+0x11>
c001e93d:	a0 0c 1a 03 c0       	mov    al,ds:0xc0031a0c
c001e942:	c3                   	ret    
c001e943:	ec                   	in     al,dx
c001e944:	c3                   	ret    

c001e945 <Vm::outbv(unsigned short, unsigned char)>:
c001e945:	53                   	push   ebx
c001e946:	83 ec 08             	sub    esp,0x8
c001e949:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e94d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e951:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e956:	75 38                	jne    c001e990 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001e958:	0f b6 c3             	movzx  eax,bl
c001e95b:	51                   	push   ecx
c001e95c:	51                   	push   ecx
c001e95d:	50                   	push   eax
c001e95e:	68 d7 c5 02 c0       	push   0xc002c5d7
c001e963:	e8 5b 44 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001e968:	8b 15 0c 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031a0c
c001e96e:	83 c4 10             	add    esp,0x10
c001e971:	8d 42 01             	lea    eax,[edx+0x1]
c001e974:	88 9a 20 1a 03 c0    	mov    BYTE PTR [edx-0x3ffce5e0],bl
c001e97a:	a3 0c 1a 03 c0       	mov    ds:0xc0031a0c,eax
c001e97f:	83 f8 20             	cmp    eax,0x20
c001e982:	75 0f                	jne    c001e993 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001e984:	c7 05 0c 1a 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0031a0c,0x1f
c001e98e:	eb 03                	jmp    c001e993 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001e990:	88 d8                	mov    al,bl
c001e992:	ee                   	out    dx,al
c001e993:	83 c4 08             	add    esp,0x8
c001e996:	5b                   	pop    ebx
c001e997:	c3                   	ret    

c001e998 <Vm::realToLinear(unsigned short, unsigned short)>:
c001e998:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e99d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e9a2:	c1 e0 04             	shl    eax,0x4
c001e9a5:	01 d0                	add    eax,edx
c001e9a7:	c3                   	ret    

c001e9a8 <Vm::getSegment(unsigned int)>:
c001e9a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9ac:	c1 e8 10             	shr    eax,0x10
c001e9af:	c3                   	ret    

c001e9b0 <Vm::getOffset(unsigned int)>:
c001e9b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9b4:	c3                   	ret    

c001e9b5 <Vm::mainloop2()>:
c001e9b5:	83 ec 0c             	sub    esp,0xc
c001e9b8:	e8 1f f3 ff ff       	call   c001dcdc <lockScheduler()>
c001e9bd:	83 ec 0c             	sub    esp,0xc
c001e9c0:	c6 05 05 1a 03 c0 01 	mov    BYTE PTR ds:0xc0031a05,0x1
c001e9c7:	6a 02                	push   0x2
c001e9c9:	e8 9c f7 ff ff       	call   c001e16a <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e9ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e9d3:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001e9d7:	52                   	push   edx
c001e9d8:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001e9dc:	52                   	push   edx
c001e9dd:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001e9e1:	52                   	push   edx
c001e9e2:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001e9e6:	50                   	push   eax
c001e9e7:	e8 0e 19 fe ff       	call   c00002fa <goToVM86>
c001e9ec:	83 c4 2c             	add    esp,0x2c
c001e9ef:	c3                   	ret    

c001e9f0 <Vm::mainVm8086Loop(void*)>:
c001e9f0:	83 ec 0c             	sub    esp,0xc
c001e9f3:	e8 e6 f2 ff ff       	call   c001dcde <unlockScheduler()>
c001e9f8:	83 c4 0c             	add    esp,0xc
c001e9fb:	eb b8                	jmp    c001e9b5 <Vm::mainloop2()>

c001e9fd <Vm::mainloop3(unsigned long)>:
c001e9fd:	53                   	push   ebx
c001e9fe:	83 ec 08             	sub    esp,0x8
c001ea01:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ea05:	e8 d2 f2 ff ff       	call   c001dcdc <lockScheduler()>
c001ea0a:	83 ec 0c             	sub    esp,0xc
c001ea0d:	89 1d 00 1a 03 c0    	mov    DWORD PTR ds:0xc0031a00,ebx
c001ea13:	6a 02                	push   0x2
c001ea15:	c6 05 04 1a 03 c0 01 	mov    BYTE PTR ds:0xc0031a04,0x1
c001ea1c:	e8 49 f7 ff ff       	call   c001e16a <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ea21:	83 c4 18             	add    esp,0x18
c001ea24:	5b                   	pop    ebx
c001ea25:	eb 8e                	jmp    c001e9b5 <Vm::mainloop2()>

c001ea27 <Vm::initialise8086()>:
c001ea27:	83 ec 0c             	sub    esp,0xc
c001ea2a:	68 80 00 00 00       	push   0x80
c001ea2f:	6a 00                	push   0x0
c001ea31:	68 f0 e9 01 c0       	push   0xc001e9f0
c001ea36:	ff 35 d4 19 03 c0    	push   DWORD PTR ds:0xc00319d4
c001ea3c:	e8 cd f3 ff ff       	call   c001de0e <Process::createThread(void (*)(void*), void*, int)>
c001ea41:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001ea48:	a3 08 1a 03 c0       	mov    ds:0xc0031a08,eax
c001ea4d:	68 00 01 00 00       	push   0x100
c001ea52:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001ea57:	6a 00                	push   0x0
c001ea59:	6a 00                	push   0x0
c001ea5b:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ea61:	e8 aa 3a ff ff       	call   c0012510 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001ea66:	83 c4 2c             	add    esp,0x2c
c001ea69:	c3                   	ret    

c001ea6a <Vm::finish8086()>:
c001ea6a:	53                   	push   ebx
c001ea6b:	83 ec 08             	sub    esp,0x8
c001ea6e:	e8 69 f2 ff ff       	call   c001dcdc <lockScheduler()>
c001ea73:	80 3d 04 1a 03 c0 00 	cmp    BYTE PTR ds:0xc0031a04,0x0
c001ea7a:	75 0c                	jne    c001ea88 <Vm::finish8086()+0x1e>
c001ea7c:	e8 d1 f5 ff ff       	call   c001e052 <schedule()>
c001ea81:	e8 58 f2 ff ff       	call   c001dcde <unlockScheduler()>
c001ea86:	eb e6                	jmp    c001ea6e <Vm::finish8086()+0x4>
c001ea88:	83 ec 0c             	sub    esp,0xc
c001ea8b:	8b 1d 00 1a 03 c0    	mov    ebx,DWORD PTR ds:0xc0031a00
c001ea91:	ff 35 08 1a 03 c0    	push   DWORD PTR ds:0xc0031a08
c001ea97:	c6 05 04 1a 03 c0 00 	mov    BYTE PTR ds:0xc0031a04,0x0
c001ea9e:	e8 8b f8 ff ff       	call   c001e32e <unblockTask(ThreadControlBlock*)>
c001eaa3:	e8 36 f2 ff ff       	call   c001dcde <unlockScheduler()>
c001eaa8:	89 d8                	mov    eax,ebx
c001eaaa:	83 c4 18             	add    esp,0x18
c001eaad:	5b                   	pop    ebx
c001eaae:	c3                   	ret    

c001eaaf <Vm::getOutput8086(unsigned char*)>:
c001eaaf:	83 ec 10             	sub    esp,0x10
c001eab2:	ff 35 0c 1a 03 c0    	push   DWORD PTR ds:0xc0031a0c
c001eab8:	68 20 1a 03 c0       	push   0xc0031a20
c001eabd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eac1:	e8 86 1c fe ff       	call   c000074c <memcpy>
c001eac6:	a1 0c 1a 03 c0       	mov    eax,ds:0xc0031a0c
c001eacb:	c7 05 0c 1a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031a0c,0x0
c001ead5:	83 c4 1c             	add    esp,0x1c
c001ead8:	c3                   	ret    

c001ead9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001ead9:	55                   	push   ebp
c001eada:	57                   	push   edi
c001eadb:	56                   	push   esi
c001eadc:	53                   	push   ebx
c001eadd:	83 ec 2c             	sub    esp,0x2c
c001eae0:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001eae4:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001eae8:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001eaec:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001eaf0:	e8 e7 f1 ff ff       	call   c001dcdc <lockScheduler()>
c001eaf5:	a0 05 1a 03 c0       	mov    al,ds:0xc0031a05
c001eafa:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001eafe:	84 c0                	test   al,al
c001eb00:	75 0c                	jne    c001eb0e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001eb02:	e8 4b f5 ff ff       	call   c001e052 <schedule()>
c001eb07:	e8 d2 f1 ff ff       	call   c001dcde <unlockScheduler()>
c001eb0c:	eb e2                	jmp    c001eaf0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001eb0e:	a1 08 1a 03 c0       	mov    eax,ds:0xc0031a08
c001eb13:	c7 05 0c 1a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031a0c,0x0
c001eb1d:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001eb21:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001eb25:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001eb29:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001eb2d:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001eb31:	50                   	push   eax
c001eb32:	6a 20                	push   0x20
c001eb34:	6a 00                	push   0x0
c001eb36:	68 20 1a 03 c0       	push   0xc0031a20
c001eb3b:	e8 40 1c fe ff       	call   c0000780 <memset>
c001eb40:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001eb47:	e8 ff 0c ff ff       	call   c000f84b <malloc>
c001eb4c:	83 c4 0c             	add    esp,0xc
c001eb4f:	89 c7                	mov    edi,eax
c001eb51:	ff 35 d4 19 03 c0    	push   DWORD PTR ds:0xc00319d4
c001eb57:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001eb5b:	50                   	push   eax
c001eb5c:	e8 c1 47 ff ff       	call   c0013322 <File::File(char const*, Process*)>
c001eb61:	83 c4 10             	add    esp,0x10
c001eb64:	85 ff                	test   edi,edi
c001eb66:	75 0a                	jne    c001eb72 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001eb68:	83 ec 0c             	sub    esp,0xc
c001eb6b:	68 f3 c5 02 c0       	push   0xc002c5f3
c001eb70:	eb 27                	jmp    c001eb99 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001eb72:	50                   	push   eax
c001eb73:	8d 44 24 17          	lea    eax,[esp+0x17]
c001eb77:	50                   	push   eax
c001eb78:	8d 44 24 20          	lea    eax,[esp+0x20]
c001eb7c:	50                   	push   eax
c001eb7d:	57                   	push   edi
c001eb7e:	e8 af 4a ff ff       	call   c0013632 <File::stat(unsigned long long*, bool*)>
c001eb83:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001eb88:	83 c4 10             	add    esp,0x10
c001eb8b:	89 e8                	mov    eax,ebp
c001eb8d:	84 c0                	test   al,al
c001eb8f:	74 19                	je     c001ebaa <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001eb91:	83 ec 0c             	sub    esp,0xc
c001eb94:	68 07 c6 02 c0       	push   0xc002c607
c001eb99:	e8 63 b9 ff ff       	call   c001a501 <Krnl::panic(char const*)>
c001eb9e:	31 ed                	xor    ebp,ebp
c001eba0:	e8 39 f1 ff ff       	call   c001dcde <unlockScheduler()>
c001eba5:	83 c4 10             	add    esp,0x10
c001eba8:	eb 75                	jmp    c001ec1f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ebaa:	50                   	push   eax
c001ebab:	50                   	push   eax
c001ebac:	6a 01                	push   0x1
c001ebae:	57                   	push   edi
c001ebaf:	e8 d2 47 ff ff       	call   c0013386 <File::open(FileOpenMode)>
c001ebb4:	83 c4 10             	add    esp,0x10
c001ebb7:	85 c0                	test   eax,eax
c001ebb9:	74 17                	je     c001ebd2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001ebbb:	83 ec 0c             	sub    esp,0xc
c001ebbe:	68 20 c6 02 c0       	push   0xc002c620
c001ebc3:	e8 39 b9 ff ff       	call   c001a501 <Krnl::panic(char const*)>
c001ebc8:	e8 11 f1 ff ff       	call   c001dcde <unlockScheduler()>
c001ebcd:	83 c4 10             	add    esp,0x10
c001ebd0:	eb 4d                	jmp    c001ec1f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ebd2:	0f b7 f6             	movzx  esi,si
c001ebd5:	50                   	push   eax
c001ebd6:	0f b7 db             	movzx  ebx,bx
c001ebd9:	50                   	push   eax
c001ebda:	56                   	push   esi
c001ebdb:	53                   	push   ebx
c001ebdc:	e8 b7 fd ff ff       	call   c001e998 <Vm::realToLinear(unsigned short, unsigned short)>
c001ebe1:	5a                   	pop    edx
c001ebe2:	8b 17                	mov    edx,DWORD PTR [edi]
c001ebe4:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001ebe8:	51                   	push   ecx
c001ebe9:	50                   	push   eax
c001ebea:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ebee:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ebf2:	57                   	push   edi
c001ebf3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ebf6:	83 c4 14             	add    esp,0x14
c001ebf9:	57                   	push   edi
c001ebfa:	e8 e5 47 ff ff       	call   c00133e4 <File::close()>
c001ebff:	c6 05 05 1a 03 c0 00 	mov    BYTE PTR ds:0xc0031a05,0x0
c001ec06:	e8 d3 f0 ff ff       	call   c001dcde <unlockScheduler()>
c001ec0b:	59                   	pop    ecx
c001ec0c:	ff 35 08 1a 03 c0    	push   DWORD PTR ds:0xc0031a08
c001ec12:	e8 17 f7 ff ff       	call   c001e32e <unblockTask(ThreadControlBlock*)>
c001ec17:	83 c4 10             	add    esp,0x10
c001ec1a:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001ec1f:	83 c4 2c             	add    esp,0x2c
c001ec22:	89 e8                	mov    eax,ebp
c001ec24:	5b                   	pop    ebx
c001ec25:	5e                   	pop    esi
c001ec26:	5f                   	pop    edi
c001ec27:	5d                   	pop    ebp
c001ec28:	c3                   	ret    

c001ec29 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001ec29:	57                   	push   edi
c001ec2a:	56                   	push   esi
c001ec2b:	53                   	push   ebx
c001ec2c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ec30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ec34:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ec38:	83 e8 06             	sub    eax,0x6
c001ec3b:	0f b7 c0             	movzx  eax,ax
c001ec3e:	50                   	push   eax
c001ec3f:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001ec44:	50                   	push   eax
c001ec45:	e8 4e fd ff ff       	call   c001e998 <Vm::realToLinear(unsigned short, unsigned short)>
c001ec4a:	5a                   	pop    edx
c001ec4b:	5e                   	pop    esi
c001ec4c:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001ec4f:	8d 56 fa             	lea    edx,[esi-0x6]
c001ec52:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ec58:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001ec5b:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001ec5e:	83 c2 02             	add    edx,0x2
c001ec61:	66 89 10             	mov    WORD PTR [eax],dx
c001ec64:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001ec67:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001ec6b:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001ec6e:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001ec72:	89 d6                	mov    esi,edx
c001ec74:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001ec7a:	66 81 e6 ff fd       	and    si,0xfdff
c001ec7f:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001ec83:	74 07                	je     c001ec8c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001ec85:	89 d6                	mov    esi,edx
c001ec87:	66 81 ce 00 02       	or     si,0x200
c001ec8c:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001ec90:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ec95:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ec99:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001eca1:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001eca4:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001ecac:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001ecaf:	5b                   	pop    ebx
c001ecb0:	5e                   	pop    esi
c001ecb1:	5f                   	pop    edi
c001ecb2:	c3                   	ret    

c001ecb3 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001ecb3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ecb8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ecbd:	c1 e0 04             	shl    eax,0x4
c001ecc0:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001ecc3:	c3                   	ret    

c001ecc4 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001ecc4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ecc9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ecce:	c1 e0 04             	shl    eax,0x4
c001ecd1:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001ecd5:	c3                   	ret    

c001ecd6 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001ecd6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ecdb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ece0:	c1 e0 04             	shl    eax,0x4
c001ece3:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001ece6:	c3                   	ret    

c001ece7 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001ece7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ecec:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ecf1:	c1 e0 04             	shl    eax,0x4
c001ecf4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ecf8:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001ecfb:	c3                   	ret    

c001ecfc <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001ecfc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed01:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed06:	c1 e0 04             	shl    eax,0x4
c001ed09:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ed0d:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001ed11:	c3                   	ret    

c001ed12 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001ed12:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed17:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed1c:	c1 e0 04             	shl    eax,0x4
c001ed1f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ed23:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001ed26:	c3                   	ret    

c001ed27 <Vm::faultHandler(regs*)>:
c001ed27:	55                   	push   ebp
c001ed28:	57                   	push   edi
c001ed29:	56                   	push   esi
c001ed2a:	53                   	push   ebx
c001ed2b:	83 ec 1c             	sub    esp,0x1c
c001ed2e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ed32:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001ed35:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001ed38:	0f b7 c1             	movzx  eax,cx
c001ed3b:	50                   	push   eax
c001ed3c:	0f b7 c3             	movzx  eax,bx
c001ed3f:	c1 e3 04             	shl    ebx,0x4
c001ed42:	50                   	push   eax
c001ed43:	e8 50 fc ff ff       	call   c001e998 <Vm::realToLinear(unsigned short, unsigned short)>
c001ed48:	5a                   	pop    edx
c001ed49:	89 c5                	mov    ebp,eax
c001ed4b:	5e                   	pop    esi
c001ed4c:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001ed50:	50                   	push   eax
c001ed51:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001ed55:	50                   	push   eax
c001ed56:	e8 3d fc ff ff       	call   c001e998 <Vm::realToLinear(unsigned short, unsigned short)>
c001ed5b:	01 cb                	add    ebx,ecx
c001ed5d:	89 c6                	mov    esi,eax
c001ed5f:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001ed63:	50                   	push   eax
c001ed64:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ed68:	50                   	push   eax
c001ed69:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ed6d:	50                   	push   eax
c001ed6e:	55                   	push   ebp
c001ed6f:	53                   	push   ebx
c001ed70:	b3 06                	mov    bl,0x6
c001ed72:	68 39 c6 02 c0       	push   0xc002c639
c001ed77:	e8 47 40 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001ed7c:	83 c4 20             	add    esp,0x20
c001ed7f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001ed84:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001ed89:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ed8d:	3c 9d                	cmp    al,0x9d
c001ed8f:	0f 84 d7 02 00 00    	je     c001f06c <Vm::faultHandler(regs*)+0x345>
c001ed95:	0f 87 a3 00 00 00    	ja     c001ee3e <Vm::faultHandler(regs*)+0x117>
c001ed9b:	3c 66                	cmp    al,0x66
c001ed9d:	0f 84 15 02 00 00    	je     c001efb8 <Vm::faultHandler(regs*)+0x291>
c001eda3:	77 5f                	ja     c001ee04 <Vm::faultHandler(regs*)+0xdd>
c001eda5:	3c 36                	cmp    al,0x36
c001eda7:	0f 84 f1 01 00 00    	je     c001ef9e <Vm::faultHandler(regs*)+0x277>
c001edad:	77 28                	ja     c001edd7 <Vm::faultHandler(regs*)+0xb0>
c001edaf:	3c 26                	cmp    al,0x26
c001edb1:	0f 84 99 01 00 00    	je     c001ef50 <Vm::faultHandler(regs*)+0x229>
c001edb7:	3c 2e                	cmp    al,0x2e
c001edb9:	0f 85 3b 07 00 00    	jne    c001f4fa <Vm::faultHandler(regs*)+0x7d3>
c001edbf:	83 ec 0c             	sub    esp,0xc
c001edc2:	31 db                	xor    ebx,ebx
c001edc4:	68 4e c6 02 c0       	push   0xc002c64e
c001edc9:	e8 f5 3f ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001edce:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001edd1:	83 c4 10             	add    esp,0x10
c001edd4:	45                   	inc    ebp
c001edd5:	eb b2                	jmp    c001ed89 <Vm::faultHandler(regs*)+0x62>
c001edd7:	3c 64                	cmp    al,0x64
c001edd9:	0f 84 8b 01 00 00    	je     c001ef6a <Vm::faultHandler(regs*)+0x243>
c001eddf:	0f 87 9f 01 00 00    	ja     c001ef84 <Vm::faultHandler(regs*)+0x25d>
c001ede5:	3c 3e                	cmp    al,0x3e
c001ede7:	0f 85 0d 07 00 00    	jne    c001f4fa <Vm::faultHandler(regs*)+0x7d3>
c001eded:	83 ec 0c             	sub    esp,0xc
c001edf0:	b3 01                	mov    bl,0x1
c001edf2:	68 52 c6 02 c0       	push   0xc002c652
c001edf7:	e8 c7 3f ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001edfc:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001edff:	83 c4 10             	add    esp,0x10
c001ee02:	eb d0                	jmp    c001edd4 <Vm::faultHandler(regs*)+0xad>
c001ee04:	3c 6d                	cmp    al,0x6d
c001ee06:	0f 84 af 03 00 00    	je     c001f1bb <Vm::faultHandler(regs*)+0x494>
c001ee0c:	77 15                	ja     c001ee23 <Vm::faultHandler(regs*)+0xfc>
c001ee0e:	3c 67                	cmp    al,0x67
c001ee10:	0f 84 bf 01 00 00    	je     c001efd5 <Vm::faultHandler(regs*)+0x2ae>
c001ee16:	3c 6c                	cmp    al,0x6c
c001ee18:	0f 84 3f 03 00 00    	je     c001f15d <Vm::faultHandler(regs*)+0x436>
c001ee1e:	e9 d7 06 00 00       	jmp    c001f4fa <Vm::faultHandler(regs*)+0x7d3>
c001ee23:	3c 6f                	cmp    al,0x6f
c001ee25:	0f 84 a4 04 00 00    	je     c001f2cf <Vm::faultHandler(regs*)+0x5a8>
c001ee2b:	0f 82 11 04 00 00    	jb     c001f242 <Vm::faultHandler(regs*)+0x51b>
c001ee31:	3c 9c                	cmp    al,0x9c
c001ee33:	0f 84 ba 01 00 00    	je     c001eff3 <Vm::faultHandler(regs*)+0x2cc>
c001ee39:	e9 bc 06 00 00       	jmp    c001f4fa <Vm::faultHandler(regs*)+0x7d3>
c001ee3e:	3c ec                	cmp    al,0xec
c001ee40:	0f 84 24 06 00 00    	je     c001f46a <Vm::faultHandler(regs*)+0x743>
c001ee46:	0f 87 93 00 00 00    	ja     c001eedf <Vm::faultHandler(regs*)+0x1b8>
c001ee4c:	3c e4                	cmp    al,0xe4
c001ee4e:	0f 84 5c 05 00 00    	je     c001f3b0 <Vm::faultHandler(regs*)+0x689>
c001ee54:	77 6a                	ja     c001eec0 <Vm::faultHandler(regs*)+0x199>
c001ee56:	3c cd                	cmp    al,0xcd
c001ee58:	0f 84 7e 02 00 00    	je     c001f0dc <Vm::faultHandler(regs*)+0x3b5>
c001ee5e:	3c cf                	cmp    al,0xcf
c001ee60:	0f 85 94 06 00 00    	jne    c001f4fa <Vm::faultHandler(regs*)+0x7d3>
c001ee66:	83 ec 0c             	sub    esp,0xc
c001ee69:	68 96 c6 02 c0       	push   0xc002c696
c001ee6e:	e8 50 3f ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001ee73:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001ee76:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001ee79:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001ee7d:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001ee80:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001ee84:	0d 00 02 02 00       	or     eax,0x20200
c001ee89:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001ee8c:	56                   	push   esi
c001ee8d:	53                   	push   ebx
c001ee8e:	52                   	push   edx
c001ee8f:	68 9c c6 02 c0       	push   0xc002c69c
c001ee94:	e8 2a 3f ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001ee99:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001ee9d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001eea3:	66 c1 e8 09          	shr    ax,0x9
c001eea7:	83 e0 01             	and    eax,0x1
c001eeaa:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001eead:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001eeb0:	83 c0 06             	add    eax,0x6
c001eeb3:	25 ff ff 00 00       	and    eax,0xffff
c001eeb8:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001eebb:	e9 95 02 00 00       	jmp    c001f155 <Vm::faultHandler(regs*)+0x42e>
c001eec0:	3c e6                	cmp    al,0xe6
c001eec2:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001eec6:	0f 84 4e 05 00 00    	je     c001f41a <Vm::faultHandler(regs*)+0x6f3>
c001eecc:	0f 82 0a 05 00 00    	jb     c001f3dc <Vm::faultHandler(regs*)+0x6b5>
c001eed2:	3c e7                	cmp    al,0xe7
c001eed4:	0f 84 69 05 00 00    	je     c001f443 <Vm::faultHandler(regs*)+0x71c>
c001eeda:	e9 1b 06 00 00       	jmp    c001f4fa <Vm::faultHandler(regs*)+0x7d3>
c001eedf:	3c ef                	cmp    al,0xef
c001eee1:	0f 84 e6 05 00 00    	je     c001f4cd <Vm::faultHandler(regs*)+0x7a6>
c001eee7:	77 37                	ja     c001ef20 <Vm::faultHandler(regs*)+0x1f9>
c001eee9:	3c ed                	cmp    al,0xed
c001eeeb:	0f 84 a3 05 00 00    	je     c001f494 <Vm::faultHandler(regs*)+0x76d>
c001eef1:	3c ee                	cmp    al,0xee
c001eef3:	0f 85 01 06 00 00    	jne    c001f4fa <Vm::faultHandler(regs*)+0x7d3>
c001eef9:	52                   	push   edx
c001eefa:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001eefd:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001ef00:	68 37 c7 02 c0       	push   0xc002c737
c001ef05:	e8 b9 3e ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001ef0a:	59                   	pop    ecx
c001ef0b:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001ef0f:	5b                   	pop    ebx
c001ef10:	50                   	push   eax
c001ef11:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001ef15:	50                   	push   eax
c001ef16:	e8 2a fa ff ff       	call   c001e945 <Vm::outbv(unsigned short, unsigned char)>
c001ef1b:	e9 a5 05 00 00       	jmp    c001f4c5 <Vm::faultHandler(regs*)+0x79e>
c001ef20:	3c fa                	cmp    al,0xfa
c001ef22:	0f 84 f7 01 00 00    	je     c001f11f <Vm::faultHandler(regs*)+0x3f8>
c001ef28:	3c fb                	cmp    al,0xfb
c001ef2a:	0f 84 0a 02 00 00    	je     c001f13a <Vm::faultHandler(regs*)+0x413>
c001ef30:	3c f3                	cmp    al,0xf3
c001ef32:	0f 85 c2 05 00 00    	jne    c001f4fa <Vm::faultHandler(regs*)+0x7d3>
c001ef38:	83 ec 0c             	sub    esp,0xc
c001ef3b:	68 6f c6 02 c0       	push   0xc002c66f
c001ef40:	e8 7e 3e ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001ef45:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef48:	83 c4 10             	add    esp,0x10
c001ef4b:	e9 84 fe ff ff       	jmp    c001edd4 <Vm::faultHandler(regs*)+0xad>
c001ef50:	83 ec 0c             	sub    esp,0xc
c001ef53:	b3 02                	mov    bl,0x2
c001ef55:	68 4a c6 02 c0       	push   0xc002c64a
c001ef5a:	e8 64 3e ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001ef5f:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef62:	83 c4 10             	add    esp,0x10
c001ef65:	e9 6a fe ff ff       	jmp    c001edd4 <Vm::faultHandler(regs*)+0xad>
c001ef6a:	83 ec 0c             	sub    esp,0xc
c001ef6d:	b3 03                	mov    bl,0x3
c001ef6f:	68 56 c6 02 c0       	push   0xc002c656
c001ef74:	e8 4a 3e ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001ef79:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef7c:	83 c4 10             	add    esp,0x10
c001ef7f:	e9 50 fe ff ff       	jmp    c001edd4 <Vm::faultHandler(regs*)+0xad>
c001ef84:	83 ec 0c             	sub    esp,0xc
c001ef87:	b3 04                	mov    bl,0x4
c001ef89:	68 5a c6 02 c0       	push   0xc002c65a
c001ef8e:	e8 30 3e ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001ef93:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef96:	83 c4 10             	add    esp,0x10
c001ef99:	e9 36 fe ff ff       	jmp    c001edd4 <Vm::faultHandler(regs*)+0xad>
c001ef9e:	83 ec 0c             	sub    esp,0xc
c001efa1:	b3 05                	mov    bl,0x5
c001efa3:	68 5e c6 02 c0       	push   0xc002c65e
c001efa8:	e8 16 3e ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001efad:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001efb0:	83 c4 10             	add    esp,0x10
c001efb3:	e9 1c fe ff ff       	jmp    c001edd4 <Vm::faultHandler(regs*)+0xad>
c001efb8:	83 ec 0c             	sub    esp,0xc
c001efbb:	68 62 c6 02 c0       	push   0xc002c662
c001efc0:	e8 fe 3d ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001efc5:	83 c4 10             	add    esp,0x10
c001efc8:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001efcb:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001efd0:	e9 ff fd ff ff       	jmp    c001edd4 <Vm::faultHandler(regs*)+0xad>
c001efd5:	50                   	push   eax
c001efd6:	50                   	push   eax
c001efd7:	6a 01                	push   0x1
c001efd9:	68 67 c6 02 c0       	push   0xc002c667
c001efde:	e8 e0 3d ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001efe3:	83 c4 10             	add    esp,0x10
c001efe6:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001efe9:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001efee:	e9 e1 fd ff ff       	jmp    c001edd4 <Vm::faultHandler(regs*)+0xad>
c001eff3:	83 ec 0c             	sub    esp,0xc
c001eff6:	68 75 c6 02 c0       	push   0xc002c675
c001effb:	e8 c3 3d ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f000:	83 c4 10             	add    esp,0x10
c001f003:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001f006:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f00b:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001f00e:	74 2f                	je     c001f03f <Vm::faultHandler(regs*)+0x318>
c001f010:	83 ea 04             	sub    edx,0x4
c001f013:	25 ff 0d 00 00       	and    eax,0xdff
c001f018:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f01e:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f021:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f024:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f02a:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f02e:	0f 84 bf 04 00 00    	je     c001f4f3 <Vm::faultHandler(regs*)+0x7cc>
c001f034:	80 cc 02             	or     ah,0x2
c001f037:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f03a:	e9 b4 04 00 00       	jmp    c001f4f3 <Vm::faultHandler(regs*)+0x7cc>
c001f03f:	83 ea 02             	sub    edx,0x2
c001f042:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f048:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f04b:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f04f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f055:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f059:	74 05                	je     c001f060 <Vm::faultHandler(regs*)+0x339>
c001f05b:	80 cc 02             	or     ah,0x2
c001f05e:	eb 03                	jmp    c001f063 <Vm::faultHandler(regs*)+0x33c>
c001f060:	80 e4 fd             	and    ah,0xfd
c001f063:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f067:	e9 87 04 00 00       	jmp    c001f4f3 <Vm::faultHandler(regs*)+0x7cc>
c001f06c:	83 ec 0c             	sub    esp,0xc
c001f06f:	68 7c c6 02 c0       	push   0xc002c67c
c001f074:	e8 4a 3d ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f079:	83 c4 10             	add    esp,0x10
c001f07c:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f081:	74 28                	je     c001f0ab <Vm::faultHandler(regs*)+0x384>
c001f083:	8b 06                	mov    eax,DWORD PTR [esi]
c001f085:	25 ff 0d 00 00       	and    eax,0xdff
c001f08a:	0d 00 02 02 00       	or     eax,0x20200
c001f08f:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f092:	8b 06                	mov    eax,DWORD PTR [esi]
c001f094:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f09a:	c1 e8 09             	shr    eax,0x9
c001f09d:	83 e0 01             	and    eax,0x1
c001f0a0:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f0a3:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f0a6:	83 c0 04             	add    eax,0x4
c001f0a9:	eb 24                	jmp    c001f0cf <Vm::faultHandler(regs*)+0x3a8>
c001f0ab:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f0ae:	0d 00 02 02 00       	or     eax,0x20200
c001f0b3:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f0b6:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f0b9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f0bf:	66 c1 e8 09          	shr    ax,0x9
c001f0c3:	83 e0 01             	and    eax,0x1
c001f0c6:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f0c9:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f0cc:	83 c0 02             	add    eax,0x2
c001f0cf:	25 ff ff 00 00       	and    eax,0xffff
c001f0d4:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f0d7:	e9 17 04 00 00       	jmp    c001f4f3 <Vm::faultHandler(regs*)+0x7cc>
c001f0dc:	53                   	push   ebx
c001f0dd:	53                   	push   ebx
c001f0de:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f0e2:	50                   	push   eax
c001f0e3:	68 82 c6 02 c0       	push   0xc002c682
c001f0e8:	e8 d6 3c ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f0ed:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f0f1:	83 c4 10             	add    esp,0x10
c001f0f4:	3c ee                	cmp    al,0xee
c001f0f6:	75 10                	jne    c001f108 <Vm::faultHandler(regs*)+0x3e1>
c001f0f8:	83 ec 0c             	sub    esp,0xc
c001f0fb:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f0fe:	e8 fa f8 ff ff       	call   c001e9fd <Vm::mainloop3(unsigned long)>
c001f103:	e9 c0 03 00 00       	jmp    c001f4c8 <Vm::faultHandler(regs*)+0x7a1>
c001f108:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f10c:	83 ec 0c             	sub    esp,0xc
c001f10f:	53                   	push   ebx
c001f110:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f114:	53                   	push   ebx
c001f115:	55                   	push   ebp
c001f116:	50                   	push   eax
c001f117:	57                   	push   edi
c001f118:	e8 0c fb ff ff       	call   c001ec29 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f11d:	eb 36                	jmp    c001f155 <Vm::faultHandler(regs*)+0x42e>
c001f11f:	83 ec 0c             	sub    esp,0xc
c001f122:	68 8c c6 02 c0       	push   0xc002c68c
c001f127:	e8 97 3c ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f12c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f131:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f135:	e9 8b 03 00 00       	jmp    c001f4c5 <Vm::faultHandler(regs*)+0x79e>
c001f13a:	83 ec 0c             	sub    esp,0xc
c001f13d:	68 91 c6 02 c0       	push   0xc002c691
c001f142:	e8 7c 3c ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f147:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f14c:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f150:	e9 70 03 00 00       	jmp    c001f4c5 <Vm::faultHandler(regs*)+0x79e>
c001f155:	83 c4 20             	add    esp,0x20
c001f158:	e9 99 03 00 00       	jmp    c001f4f6 <Vm::faultHandler(regs*)+0x7cf>
c001f15d:	83 ec 0c             	sub    esp,0xc
c001f160:	68 cf c6 02 c0       	push   0xc002c6cf
c001f165:	e8 59 3c ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f16a:	83 c4 10             	add    esp,0x10
c001f16d:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f170:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f175:	74 0d                	je     c001f184 <Vm::faultHandler(regs*)+0x45d>
c001f177:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f17e:	0f 87 9e 01 00 00    	ja     c001f322 <Vm::faultHandler(regs*)+0x5fb>
c001f184:	83 ec 0c             	sub    esp,0xc
c001f187:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f18b:	0f b7 db             	movzx  ebx,bx
c001f18e:	50                   	push   eax
c001f18f:	e8 9e f7 ff ff       	call   c001e932 <Vm::inbv(unsigned short)>
c001f194:	83 c4 0c             	add    esp,0xc
c001f197:	0f b6 c0             	movzx  eax,al
c001f19a:	50                   	push   eax
c001f19b:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001f19f:	50                   	push   eax
c001f1a0:	53                   	push   ebx
c001f1a1:	e8 41 fb ff ff       	call   c001ece7 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f1a6:	83 c4 10             	add    esp,0x10
c001f1a9:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f1ac:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f1b0:	74 03                	je     c001f1b5 <Vm::faultHandler(regs*)+0x48e>
c001f1b2:	48                   	dec    eax
c001f1b3:	eb 01                	jmp    c001f1b6 <Vm::faultHandler(regs*)+0x48f>
c001f1b5:	40                   	inc    eax
c001f1b6:	0f b7 c0             	movzx  eax,ax
c001f1b9:	eb 7f                	jmp    c001f23a <Vm::faultHandler(regs*)+0x513>
c001f1bb:	83 ec 0c             	sub    esp,0xc
c001f1be:	68 01 c7 02 c0       	push   0xc002c701
c001f1c3:	e8 fb 3b ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f1c8:	83 c4 10             	add    esp,0x10
c001f1cb:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f1ce:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f1d3:	74 0d                	je     c001f1e2 <Vm::faultHandler(regs*)+0x4bb>
c001f1d5:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f1dc:	0f 87 40 01 00 00    	ja     c001f322 <Vm::faultHandler(regs*)+0x5fb>
c001f1e2:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f1e5:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001f1e9:	0f b7 db             	movzx  ebx,bx
c001f1ec:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f1f1:	74 20                	je     c001f213 <Vm::faultHandler(regs*)+0x4ec>
c001f1f3:	ed                   	in     eax,dx
c001f1f4:	51                   	push   ecx
c001f1f5:	50                   	push   eax
c001f1f6:	56                   	push   esi
c001f1f7:	53                   	push   ebx
c001f1f8:	e8 15 fb ff ff       	call   c001ed12 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f1fd:	83 c4 10             	add    esp,0x10
c001f200:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f203:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f207:	74 05                	je     c001f20e <Vm::faultHandler(regs*)+0x4e7>
c001f209:	83 e8 04             	sub    eax,0x4
c001f20c:	eb 27                	jmp    c001f235 <Vm::faultHandler(regs*)+0x50e>
c001f20e:	83 c0 04             	add    eax,0x4
c001f211:	eb 22                	jmp    c001f235 <Vm::faultHandler(regs*)+0x50e>
c001f213:	66 ed                	in     ax,dx
c001f215:	0f b7 c0             	movzx  eax,ax
c001f218:	52                   	push   edx
c001f219:	50                   	push   eax
c001f21a:	56                   	push   esi
c001f21b:	53                   	push   ebx
c001f21c:	e8 db fa ff ff       	call   c001ecfc <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f221:	83 c4 10             	add    esp,0x10
c001f224:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f227:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f22b:	74 05                	je     c001f232 <Vm::faultHandler(regs*)+0x50b>
c001f22d:	83 e8 02             	sub    eax,0x2
c001f230:	eb 03                	jmp    c001f235 <Vm::faultHandler(regs*)+0x50e>
c001f232:	83 c0 02             	add    eax,0x2
c001f235:	25 ff ff 00 00       	and    eax,0xffff
c001f23a:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f23d:	e9 b1 02 00 00       	jmp    c001f4f3 <Vm::faultHandler(regs*)+0x7cc>
c001f242:	83 ec 0c             	sub    esp,0xc
c001f245:	4b                   	dec    ebx
c001f246:	68 07 c7 02 c0       	push   0xc002c707
c001f24b:	e8 73 3b ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f250:	83 c4 10             	add    esp,0x10
c001f253:	80 fb 05             	cmp    bl,0x5
c001f256:	77 0a                	ja     c001f262 <Vm::faultHandler(regs*)+0x53b>
c001f258:	0f b6 db             	movzx  ebx,bl
c001f25b:	ff 24 9d 78 c7 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3888]
c001f262:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f266:	eb 1b                	jmp    c001f283 <Vm::faultHandler(regs*)+0x55c>
c001f268:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f26c:	eb 15                	jmp    c001f283 <Vm::faultHandler(regs*)+0x55c>
c001f26e:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f272:	eb 0f                	jmp    c001f283 <Vm::faultHandler(regs*)+0x55c>
c001f274:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f278:	eb 09                	jmp    c001f283 <Vm::faultHandler(regs*)+0x55c>
c001f27a:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f27d:	eb 04                	jmp    c001f283 <Vm::faultHandler(regs*)+0x55c>
c001f27f:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f283:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f288:	74 0d                	je     c001f297 <Vm::faultHandler(regs*)+0x570>
c001f28a:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001f291:	0f 87 8b 00 00 00    	ja     c001f322 <Vm::faultHandler(regs*)+0x5fb>
c001f297:	53                   	push   ebx
c001f298:	53                   	push   ebx
c001f299:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001f29d:	52                   	push   edx
c001f29e:	50                   	push   eax
c001f29f:	e8 0f fa ff ff       	call   c001ecb3 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f2a4:	5e                   	pop    esi
c001f2a5:	0f b6 c0             	movzx  eax,al
c001f2a8:	5d                   	pop    ebp
c001f2a9:	50                   	push   eax
c001f2aa:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f2ae:	50                   	push   eax
c001f2af:	e8 91 f6 ff ff       	call   c001e945 <Vm::outbv(unsigned short, unsigned char)>
c001f2b4:	83 c4 10             	add    esp,0x10
c001f2b7:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001f2ba:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f2be:	74 03                	je     c001f2c3 <Vm::faultHandler(regs*)+0x59c>
c001f2c0:	48                   	dec    eax
c001f2c1:	eb 01                	jmp    c001f2c4 <Vm::faultHandler(regs*)+0x59d>
c001f2c3:	40                   	inc    eax
c001f2c4:	0f b7 c0             	movzx  eax,ax
c001f2c7:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001f2ca:	e9 24 02 00 00       	jmp    c001f4f3 <Vm::faultHandler(regs*)+0x7cc>
c001f2cf:	83 ec 0c             	sub    esp,0xc
c001f2d2:	4b                   	dec    ebx
c001f2d3:	68 07 c7 02 c0       	push   0xc002c707
c001f2d8:	e8 e6 3a ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f2dd:	83 c4 10             	add    esp,0x10
c001f2e0:	80 fb 05             	cmp    bl,0x5
c001f2e3:	77 0a                	ja     c001f2ef <Vm::faultHandler(regs*)+0x5c8>
c001f2e5:	0f b6 db             	movzx  ebx,bl
c001f2e8:	ff 24 9d 90 c7 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3870]
c001f2ef:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f2f3:	eb 1b                	jmp    c001f310 <Vm::faultHandler(regs*)+0x5e9>
c001f2f5:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f2f9:	eb 15                	jmp    c001f310 <Vm::faultHandler(regs*)+0x5e9>
c001f2fb:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f2ff:	eb 0f                	jmp    c001f310 <Vm::faultHandler(regs*)+0x5e9>
c001f301:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f305:	eb 09                	jmp    c001f310 <Vm::faultHandler(regs*)+0x5e9>
c001f307:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f30a:	eb 04                	jmp    c001f310 <Vm::faultHandler(regs*)+0x5e9>
c001f30c:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f310:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001f313:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f318:	74 39                	je     c001f353 <Vm::faultHandler(regs*)+0x62c>
c001f31a:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001f320:	76 31                	jbe    c001f353 <Vm::faultHandler(regs*)+0x62c>
c001f322:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f326:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f32a:	51                   	push   ecx
c001f32b:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f32f:	51                   	push   ecx
c001f330:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f334:	51                   	push   ecx
c001f335:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f339:	51                   	push   ecx
c001f33a:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f33e:	52                   	push   edx
c001f33f:	50                   	push   eax
c001f340:	50                   	push   eax
c001f341:	68 d4 c6 02 c0       	push   0xc002c6d4
c001f346:	e8 78 3a ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f34b:	83 c4 20             	add    esp,0x20
c001f34e:	e9 fb 01 00 00       	jmp    c001f54e <Vm::faultHandler(regs*)+0x827>
c001f353:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001f356:	0f b7 d3             	movzx  edx,bx
c001f359:	81 e6 00 04 00 00    	and    esi,0x400
c001f35f:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001f362:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f367:	74 1d                	je     c001f386 <Vm::faultHandler(regs*)+0x65f>
c001f369:	51                   	push   ecx
c001f36a:	51                   	push   ecx
c001f36b:	52                   	push   edx
c001f36c:	50                   	push   eax
c001f36d:	e8 64 f9 ff ff       	call   c001ecd6 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f372:	83 c4 10             	add    esp,0x10
c001f375:	89 ea                	mov    edx,ebp
c001f377:	ef                   	out    dx,eax
c001f378:	85 f6                	test   esi,esi
c001f37a:	74 05                	je     c001f381 <Vm::faultHandler(regs*)+0x65a>
c001f37c:	83 eb 04             	sub    ebx,0x4
c001f37f:	eb 21                	jmp    c001f3a2 <Vm::faultHandler(regs*)+0x67b>
c001f381:	83 c3 04             	add    ebx,0x4
c001f384:	eb 1c                	jmp    c001f3a2 <Vm::faultHandler(regs*)+0x67b>
c001f386:	51                   	push   ecx
c001f387:	51                   	push   ecx
c001f388:	52                   	push   edx
c001f389:	50                   	push   eax
c001f38a:	e8 35 f9 ff ff       	call   c001ecc4 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f38f:	83 c4 10             	add    esp,0x10
c001f392:	89 ea                	mov    edx,ebp
c001f394:	66 ef                	out    dx,ax
c001f396:	85 f6                	test   esi,esi
c001f398:	74 05                	je     c001f39f <Vm::faultHandler(regs*)+0x678>
c001f39a:	83 eb 02             	sub    ebx,0x2
c001f39d:	eb 03                	jmp    c001f3a2 <Vm::faultHandler(regs*)+0x67b>
c001f39f:	83 c3 02             	add    ebx,0x2
c001f3a2:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001f3a8:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001f3ab:	e9 43 01 00 00       	jmp    c001f4f3 <Vm::faultHandler(regs*)+0x7cc>
c001f3b0:	53                   	push   ebx
c001f3b1:	53                   	push   ebx
c001f3b2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f3b6:	50                   	push   eax
c001f3b7:	68 0d c7 02 c0       	push   0xc002c70d
c001f3bc:	e8 02 3a ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f3c1:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f3c8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f3cc:	89 04 24             	mov    DWORD PTR [esp],eax
c001f3cf:	e8 5e f5 ff ff       	call   c001e932 <Vm::inbv(unsigned short)>
c001f3d4:	0f b6 c0             	movzx  eax,al
c001f3d7:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f3da:	eb 5e                	jmp    c001f43a <Vm::faultHandler(regs*)+0x713>
c001f3dc:	51                   	push   ecx
c001f3dd:	51                   	push   ecx
c001f3de:	53                   	push   ebx
c001f3df:	68 13 c7 02 c0       	push   0xc002c713
c001f3e4:	e8 da 39 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f3e9:	83 c4 10             	add    esp,0x10
c001f3ec:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f3f1:	74 07                	je     c001f3fa <Vm::faultHandler(regs*)+0x6d3>
c001f3f3:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f3f7:	ed                   	in     eax,dx
c001f3f8:	eb 14                	jmp    c001f40e <Vm::faultHandler(regs*)+0x6e7>
c001f3fa:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001f3fd:	66 31 db             	xor    bx,bx
c001f400:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001f403:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f407:	66 ed                	in     ax,dx
c001f409:	0f b7 c0             	movzx  eax,ax
c001f40c:	09 d8                	or     eax,ebx
c001f40e:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f411:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f415:	e9 dc 00 00 00       	jmp    c001f4f6 <Vm::faultHandler(regs*)+0x7cf>
c001f41a:	50                   	push   eax
c001f41b:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f41e:	53                   	push   ebx
c001f41f:	68 19 c7 02 c0       	push   0xc002c719
c001f424:	e8 9a 39 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f429:	58                   	pop    eax
c001f42a:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f42e:	5a                   	pop    edx
c001f42f:	50                   	push   eax
c001f430:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f434:	50                   	push   eax
c001f435:	e8 0b f5 ff ff       	call   c001e945 <Vm::outbv(unsigned short, unsigned char)>
c001f43a:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f43e:	e9 85 00 00 00       	jmp    c001f4c8 <Vm::faultHandler(regs*)+0x7a1>
c001f443:	50                   	push   eax
c001f444:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f447:	53                   	push   ebx
c001f448:	68 22 c7 02 c0       	push   0xc002c722
c001f44d:	e8 71 39 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f452:	83 c4 10             	add    esp,0x10
c001f455:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f459:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f45e:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f461:	74 03                	je     c001f466 <Vm::faultHandler(regs*)+0x73f>
c001f463:	ef                   	out    dx,eax
c001f464:	eb ab                	jmp    c001f411 <Vm::faultHandler(regs*)+0x6ea>
c001f466:	66 ef                	out    dx,ax
c001f468:	eb a7                	jmp    c001f411 <Vm::faultHandler(regs*)+0x6ea>
c001f46a:	55                   	push   ebp
c001f46b:	55                   	push   ebp
c001f46c:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f46f:	68 2b c7 02 c0       	push   0xc002c72b
c001f474:	e8 4a 39 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f479:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f480:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f484:	89 04 24             	mov    DWORD PTR [esp],eax
c001f487:	e8 a6 f4 ff ff       	call   c001e932 <Vm::inbv(unsigned short)>
c001f48c:	0f b6 c0             	movzx  eax,al
c001f48f:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f492:	eb 31                	jmp    c001f4c5 <Vm::faultHandler(regs*)+0x79e>
c001f494:	56                   	push   esi
c001f495:	56                   	push   esi
c001f496:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f499:	68 31 c7 02 c0       	push   0xc002c731
c001f49e:	e8 20 39 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f4a3:	83 c4 10             	add    esp,0x10
c001f4a6:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f4a9:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f4ae:	74 03                	je     c001f4b3 <Vm::faultHandler(regs*)+0x78c>
c001f4b0:	ed                   	in     eax,dx
c001f4b1:	eb 0d                	jmp    c001f4c0 <Vm::faultHandler(regs*)+0x799>
c001f4b3:	66 ed                	in     ax,dx
c001f4b5:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001f4b8:	0f b7 c0             	movzx  eax,ax
c001f4bb:	66 31 d2             	xor    dx,dx
c001f4be:	09 d0                	or     eax,edx
c001f4c0:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f4c3:	eb 2e                	jmp    c001f4f3 <Vm::faultHandler(regs*)+0x7cc>
c001f4c5:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f4c8:	83 c4 10             	add    esp,0x10
c001f4cb:	eb 29                	jmp    c001f4f6 <Vm::faultHandler(regs*)+0x7cf>
c001f4cd:	50                   	push   eax
c001f4ce:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f4d1:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f4d4:	68 40 c7 02 c0       	push   0xc002c740
c001f4d9:	e8 e5 38 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f4de:	83 c4 10             	add    esp,0x10
c001f4e1:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f4e4:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f4e9:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f4ec:	74 03                	je     c001f4f1 <Vm::faultHandler(regs*)+0x7ca>
c001f4ee:	ef                   	out    dx,eax
c001f4ef:	eb 02                	jmp    c001f4f3 <Vm::faultHandler(regs*)+0x7cc>
c001f4f1:	66 ef                	out    dx,ax
c001f4f3:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f4f6:	b0 01                	mov    al,0x1
c001f4f8:	eb 56                	jmp    c001f550 <Vm::faultHandler(regs*)+0x829>
c001f4fa:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f4fe:	51                   	push   ecx
c001f4ff:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f503:	51                   	push   ecx
c001f504:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f508:	51                   	push   ecx
c001f509:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f50d:	51                   	push   ecx
c001f50e:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f512:	52                   	push   edx
c001f513:	50                   	push   eax
c001f514:	50                   	push   eax
c001f515:	68 49 c7 02 c0       	push   0xc002c749
c001f51a:	e8 a4 38 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f51f:	83 c4 20             	add    esp,0x20
c001f522:	83 ec 0c             	sub    esp,0xc
c001f525:	6a 60                	push   0x60
c001f527:	e8 06 f4 ff ff       	call   c001e932 <Vm::inbv(unsigned short)>
c001f52c:	83 c4 10             	add    esp,0x10
c001f52f:	3c 1c                	cmp    al,0x1c
c001f531:	74 04                	je     c001f537 <Vm::faultHandler(regs*)+0x810>
c001f533:	3c 5a                	cmp    al,0x5a
c001f535:	75 eb                	jne    c001f522 <Vm::faultHandler(regs*)+0x7fb>
c001f537:	3c 1c                	cmp    al,0x1c
c001f539:	74 04                	je     c001f53f <Vm::faultHandler(regs*)+0x818>
c001f53b:	3c 5a                	cmp    al,0x5a
c001f53d:	75 0f                	jne    c001f54e <Vm::faultHandler(regs*)+0x827>
c001f53f:	83 ec 0c             	sub    esp,0xc
c001f542:	6a 60                	push   0x60
c001f544:	e8 e9 f3 ff ff       	call   c001e932 <Vm::inbv(unsigned short)>
c001f549:	83 c4 10             	add    esp,0x10
c001f54c:	eb e9                	jmp    c001f537 <Vm::faultHandler(regs*)+0x810>
c001f54e:	31 c0                	xor    eax,eax
c001f550:	83 c4 1c             	add    esp,0x1c
c001f553:	5b                   	pop    ebx
c001f554:	5e                   	pop    esi
c001f555:	5f                   	pop    edi
c001f556:	5d                   	pop    ebp
c001f557:	c3                   	ret    

c001f558 <Vm::fpuInternalTo32(unsigned long long)>:
c001f558:	57                   	push   edi
c001f559:	56                   	push   esi
c001f55a:	53                   	push   ebx
c001f55b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f55f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f563:	89 d6                	mov    esi,edx
c001f565:	89 d7                	mov    edi,edx
c001f567:	89 c1                	mov    ecx,eax
c001f569:	c1 ef 14             	shr    edi,0x14
c001f56c:	89 d3                	mov    ebx,edx
c001f56e:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f574:	31 d2                	xor    edx,edx
c001f576:	89 f8                	mov    eax,edi
c001f578:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f57e:	bf ff 00 00 00       	mov    edi,0xff
c001f583:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f588:	83 d2 ff             	adc    edx,0xffffffff
c001f58b:	39 c7                	cmp    edi,eax
c001f58d:	bf 00 00 00 00       	mov    edi,0x0
c001f592:	19 d7                	sbb    edi,edx
c001f594:	72 15                	jb     c001f5ab <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f596:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f59a:	c1 e0 17             	shl    eax,0x17
c001f59d:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f5a3:	09 f1                	or     ecx,esi
c001f5a5:	09 c1                	or     ecx,eax
c001f5a7:	89 cf                	mov    edi,ecx
c001f5a9:	eb 02                	jmp    c001f5ad <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f5ab:	31 ff                	xor    edi,edi
c001f5ad:	89 f8                	mov    eax,edi
c001f5af:	5b                   	pop    ebx
c001f5b0:	5e                   	pop    esi
c001f5b1:	5f                   	pop    edi
c001f5b2:	c3                   	ret    

c001f5b3 <Vm::fpuInternalTo64(unsigned long long)>:
c001f5b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f5b7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f5bb:	c3                   	ret    

c001f5bc <Vm::fpu32ToInternal(unsigned int)>:
c001f5bc:	57                   	push   edi
c001f5bd:	31 ff                	xor    edi,edi
c001f5bf:	56                   	push   esi
c001f5c0:	53                   	push   ebx
c001f5c1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f5c5:	89 cb                	mov    ebx,ecx
c001f5c7:	89 ce                	mov    esi,ecx
c001f5c9:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f5cf:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f5d5:	c1 e9 17             	shr    ecx,0x17
c001f5d8:	89 f0                	mov    eax,esi
c001f5da:	0f b6 d1             	movzx  edx,cl
c001f5dd:	81 c2 80 03 00 00    	add    edx,0x380
c001f5e3:	89 d1                	mov    ecx,edx
c001f5e5:	89 fa                	mov    edx,edi
c001f5e7:	c1 e1 14             	shl    ecx,0x14
c001f5ea:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f5ee:	c1 e0 1d             	shl    eax,0x1d
c001f5f1:	89 d7                	mov    edi,edx
c001f5f3:	89 c6                	mov    esi,eax
c001f5f5:	89 ca                	mov    edx,ecx
c001f5f7:	89 f0                	mov    eax,esi
c001f5f9:	09 fa                	or     edx,edi
c001f5fb:	09 da                	or     edx,ebx
c001f5fd:	5b                   	pop    ebx
c001f5fe:	5e                   	pop    esi
c001f5ff:	5f                   	pop    edi
c001f600:	c3                   	ret    

c001f601 <Vm::fpu64ToInternal(unsigned long long)>:
c001f601:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f605:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f609:	c3                   	ret    

c001f60a <Vm::fpuFloatToLong(unsigned long long)>:
c001f60a:	57                   	push   edi
c001f60b:	31 c0                	xor    eax,eax
c001f60d:	56                   	push   esi
c001f60e:	31 d2                	xor    edx,edx
c001f610:	53                   	push   ebx
c001f611:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f615:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f619:	89 d9                	mov    ecx,ebx
c001f61b:	c1 e9 14             	shr    ecx,0x14
c001f61e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f624:	89 cf                	mov    edi,ecx
c001f626:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f62c:	78 33                	js     c001f661 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f62e:	89 d9                	mov    ecx,ebx
c001f630:	89 f0                	mov    eax,esi
c001f632:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f638:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f63e:	89 ca                	mov    edx,ecx
c001f640:	b9 34 00 00 00       	mov    ecx,0x34
c001f645:	29 f9                	sub    ecx,edi
c001f647:	0f ad d0             	shrd   eax,edx,cl
c001f64a:	d3 fa                	sar    edx,cl
c001f64c:	f6 c1 20             	test   cl,0x20
c001f64f:	74 05                	je     c001f656 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f651:	89 d0                	mov    eax,edx
c001f653:	c1 fa 1f             	sar    edx,0x1f
c001f656:	85 db                	test   ebx,ebx
c001f658:	79 07                	jns    c001f661 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f65a:	f7 d8                	neg    eax
c001f65c:	83 d2 00             	adc    edx,0x0
c001f65f:	f7 da                	neg    edx
c001f661:	5b                   	pop    ebx
c001f662:	5e                   	pop    esi
c001f663:	5f                   	pop    edi
c001f664:	c3                   	ret    

c001f665 <Vm::fpuULongToFloat(unsigned long long)>:
c001f665:	57                   	push   edi
c001f666:	31 c9                	xor    ecx,ecx
c001f668:	56                   	push   esi
c001f669:	53                   	push   ebx
c001f66a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f66e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f672:	0f ba e7 14          	bt     edi,0x14
c001f676:	72 07                	jb     c001f67f <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f678:	01 f6                	add    esi,esi
c001f67a:	11 ff                	adc    edi,edi
c001f67c:	41                   	inc    ecx
c001f67d:	eb f3                	jmp    c001f672 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f67f:	89 fa                	mov    edx,edi
c001f681:	89 f0                	mov    eax,esi
c001f683:	bb 33 04 00 00       	mov    ebx,0x433
c001f688:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f68e:	29 cb                	sub    ebx,ecx
c001f690:	89 d9                	mov    ecx,ebx
c001f692:	5b                   	pop    ebx
c001f693:	c1 e1 14             	shl    ecx,0x14
c001f696:	5e                   	pop    esi
c001f697:	09 ca                	or     edx,ecx
c001f699:	5f                   	pop    edi
c001f69a:	c3                   	ret    

c001f69b <Vm::fpuLongToFloat(long long)>:
c001f69b:	56                   	push   esi
c001f69c:	31 c0                	xor    eax,eax
c001f69e:	53                   	push   ebx
c001f69f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f6a3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f6a7:	39 c8                	cmp    eax,ecx
c001f6a9:	19 d8                	sbb    eax,ebx
c001f6ab:	7d 04                	jge    c001f6b1 <Vm::fpuLongToFloat(long long)+0x16>
c001f6ad:	31 f6                	xor    esi,esi
c001f6af:	eb 0c                	jmp    c001f6bd <Vm::fpuLongToFloat(long long)+0x22>
c001f6b1:	f7 d9                	neg    ecx
c001f6b3:	be 01 00 00 00       	mov    esi,0x1
c001f6b8:	83 d3 00             	adc    ebx,0x0
c001f6bb:	f7 db                	neg    ebx
c001f6bd:	31 c0                	xor    eax,eax
c001f6bf:	0f ba e3 14          	bt     ebx,0x14
c001f6c3:	72 07                	jb     c001f6cc <Vm::fpuLongToFloat(long long)+0x31>
c001f6c5:	01 c9                	add    ecx,ecx
c001f6c7:	11 db                	adc    ebx,ebx
c001f6c9:	40                   	inc    eax
c001f6ca:	eb f3                	jmp    c001f6bf <Vm::fpuLongToFloat(long long)+0x24>
c001f6cc:	ba 33 04 00 00       	mov    edx,0x433
c001f6d1:	29 c2                	sub    edx,eax
c001f6d3:	89 c8                	mov    eax,ecx
c001f6d5:	c1 e2 14             	shl    edx,0x14
c001f6d8:	89 d9                	mov    ecx,ebx
c001f6da:	89 f3                	mov    ebx,esi
c001f6dc:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f6e2:	09 ca                	or     edx,ecx
c001f6e4:	84 db                	test   bl,bl
c001f6e6:	74 06                	je     c001f6ee <Vm::fpuLongToFloat(long long)+0x53>
c001f6e8:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f6ee:	5b                   	pop    ebx
c001f6ef:	5e                   	pop    esi
c001f6f0:	c3                   	ret    

c001f6f1 <Vm::fpuGet0()>:
c001f6f1:	31 c0                	xor    eax,eax
c001f6f3:	31 d2                	xor    edx,edx
c001f6f5:	c3                   	ret    

c001f6f6 <Vm::fpuGet1()>:
c001f6f6:	b8 01 00 00 00       	mov    eax,0x1
c001f6fb:	31 d2                	xor    edx,edx
c001f6fd:	c3                   	ret    

c001f6fe <Vm::fpuGetPi()>:
c001f6fe:	b8 03 00 00 00       	mov    eax,0x3
c001f703:	31 d2                	xor    edx,edx
c001f705:	c3                   	ret    

c001f706 <Vm::fpuGetLog2E()>:
c001f706:	83 ec 18             	sub    esp,0x18
c001f709:	68 a8 c7 02 c0       	push   0xc002c7a8
c001f70e:	e8 ee ad ff ff       	call   c001a501 <Krnl::panic(char const*)>
c001f713:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f718:	31 d2                	xor    edx,edx
c001f71a:	83 c4 1c             	add    esp,0x1c
c001f71d:	c3                   	ret    

c001f71e <Vm::fpuGetLogE2()>:
c001f71e:	83 ec 18             	sub    esp,0x18
c001f721:	68 b4 c7 02 c0       	push   0xc002c7b4
c001f726:	e8 d6 ad ff ff       	call   c001a501 <Krnl::panic(char const*)>
c001f72b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f730:	31 d2                	xor    edx,edx
c001f732:	83 c4 1c             	add    esp,0x1c
c001f735:	c3                   	ret    

c001f736 <Vm::fpuGetLog210()>:
c001f736:	83 ec 18             	sub    esp,0x18
c001f739:	68 c0 c7 02 c0       	push   0xc002c7c0
c001f73e:	e8 be ad ff ff       	call   c001a501 <Krnl::panic(char const*)>
c001f743:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f748:	31 d2                	xor    edx,edx
c001f74a:	83 c4 1c             	add    esp,0x1c
c001f74d:	c3                   	ret    

c001f74e <Vm::fpuGetLog102()>:
c001f74e:	83 ec 18             	sub    esp,0x18
c001f751:	68 cd c7 02 c0       	push   0xc002c7cd
c001f756:	e8 a6 ad ff ff       	call   c001a501 <Krnl::panic(char const*)>
c001f75b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f760:	31 d2                	xor    edx,edx
c001f762:	83 c4 1c             	add    esp,0x1c
c001f765:	c3                   	ret    

c001f766 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f766:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f76a:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f76e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f772:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f776:	0f 92 c0             	setb   al
c001f779:	c3                   	ret    

c001f77a <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f77a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f77e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f782:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f786:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f78a:	09 c2                	or     edx,eax
c001f78c:	0f 94 c0             	sete   al
c001f78f:	c3                   	ret    

c001f790 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f790:	57                   	push   edi
c001f791:	56                   	push   esi
c001f792:	53                   	push   ebx
c001f793:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f797:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f79b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f79f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f7a3:	57                   	push   edi
c001f7a4:	56                   	push   esi
c001f7a5:	53                   	push   ebx
c001f7a6:	51                   	push   ecx
c001f7a7:	e8 ce ff ff ff       	call   c001f77a <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f7ac:	83 c4 10             	add    esp,0x10
c001f7af:	88 c2                	mov    dl,al
c001f7b1:	31 c0                	xor    eax,eax
c001f7b3:	84 d2                	test   dl,dl
c001f7b5:	75 0c                	jne    c001f7c3 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f7b7:	57                   	push   edi
c001f7b8:	56                   	push   esi
c001f7b9:	53                   	push   ebx
c001f7ba:	51                   	push   ecx
c001f7bb:	e8 a6 ff ff ff       	call   c001f766 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f7c0:	83 c4 10             	add    esp,0x10
c001f7c3:	83 e0 01             	and    eax,0x1
c001f7c6:	5b                   	pop    ebx
c001f7c7:	88 c1                	mov    cl,al
c001f7c9:	83 e2 01             	and    edx,0x1
c001f7cc:	a0 41 1a 03 c0       	mov    al,ds:0xc0031a41
c001f7d1:	c1 e2 06             	shl    edx,0x6
c001f7d4:	83 e0 ba             	and    eax,0xffffffba
c001f7d7:	5e                   	pop    esi
c001f7d8:	09 c8                	or     eax,ecx
c001f7da:	5f                   	pop    edi
c001f7db:	09 d0                	or     eax,edx
c001f7dd:	a2 41 1a 03 c0       	mov    ds:0xc0031a41,al
c001f7e2:	c3                   	ret    

c001f7e3 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f7e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f7e7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f7eb:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f7ef:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f7f3:	c3                   	ret    

c001f7f4 <Vm::fpuAbs(unsigned long long)>:
c001f7f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f7fc:	c3                   	ret    

c001f7fd <Vm::fpuChs(unsigned long long)>:
c001f7fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f801:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f805:	f7 d8                	neg    eax
c001f807:	83 d2 00             	adc    edx,0x0
c001f80a:	f7 da                	neg    edx
c001f80c:	c3                   	ret    

c001f80d <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f80d:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f811:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f816:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f81a:	eb c7                	jmp    c001f7e3 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f81c <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f81c:	53                   	push   ebx
c001f81d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f821:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f825:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f829:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f82d:	0f af ca             	imul   ecx,edx
c001f830:	0f af d8             	imul   ebx,eax
c001f833:	f7 e2                	mul    edx
c001f835:	01 d9                	add    ecx,ebx
c001f837:	5b                   	pop    ebx
c001f838:	01 ca                	add    edx,ecx
c001f83a:	c3                   	ret    

c001f83b <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f83b:	83 ec 0c             	sub    esp,0xc
c001f83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f842:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f846:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f84a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f84e:	e8 71 71 00 00       	call   c00269c4 <__udivdi3>
c001f853:	83 c4 1c             	add    esp,0x1c
c001f856:	c3                   	ret    

c001f857 <Vm::fpuSquare(unsigned long long)>:
c001f857:	50                   	push   eax
c001f858:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f85c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f860:	52                   	push   edx
c001f861:	50                   	push   eax
c001f862:	52                   	push   edx
c001f863:	50                   	push   eax
c001f864:	e8 b3 ff ff ff       	call   c001f81c <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f869:	83 c4 14             	add    esp,0x14
c001f86c:	c3                   	ret    

c001f86d <Vm::fpuGetReg(int)>:
c001f86d:	83 ec 0c             	sub    esp,0xc
c001f870:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f875:	76 10                	jbe    c001f887 <Vm::fpuGetReg(int)+0x1a>
c001f877:	83 ec 0c             	sub    esp,0xc
c001f87a:	68 da c7 02 c0       	push   0xc002c7da
c001f87f:	e8 7d ac ff ff       	call   c001a501 <Krnl::panic(char const*)>
c001f884:	83 c4 10             	add    esp,0x10
c001f887:	a0 41 1a 03 c0       	mov    al,ds:0xc0031a41
c001f88c:	b9 08 00 00 00       	mov    ecx,0x8
c001f891:	c0 e8 03             	shr    al,0x3
c001f894:	83 e0 07             	and    eax,0x7
c001f897:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f89b:	99                   	cdq    
c001f89c:	f7 f9                	idiv   ecx
c001f89e:	8b 04 d5 44 1a 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffce5bc]
c001f8a5:	8b 14 d5 48 1a 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffce5b8]
c001f8ac:	83 c4 0c             	add    esp,0xc
c001f8af:	c3                   	ret    

c001f8b0 <Vm::fpuSetReg(int, unsigned long long)>:
c001f8b0:	57                   	push   edi
c001f8b1:	56                   	push   esi
c001f8b2:	52                   	push   edx
c001f8b3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f8b7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f8bb:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f8c0:	76 10                	jbe    c001f8d2 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f8c2:	83 ec 0c             	sub    esp,0xc
c001f8c5:	68 ed c7 02 c0       	push   0xc002c7ed
c001f8ca:	e8 32 ac ff ff       	call   c001a501 <Krnl::panic(char const*)>
c001f8cf:	83 c4 10             	add    esp,0x10
c001f8d2:	a0 41 1a 03 c0       	mov    al,ds:0xc0031a41
c001f8d7:	b9 08 00 00 00       	mov    ecx,0x8
c001f8dc:	c0 e8 03             	shr    al,0x3
c001f8df:	83 e0 07             	and    eax,0x7
c001f8e2:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f8e6:	99                   	cdq    
c001f8e7:	f7 f9                	idiv   ecx
c001f8e9:	89 34 d5 44 1a 03 c0 	mov    DWORD PTR [edx*8-0x3ffce5bc],esi
c001f8f0:	89 3c d5 48 1a 03 c0 	mov    DWORD PTR [edx*8-0x3ffce5b8],edi
c001f8f7:	58                   	pop    eax
c001f8f8:	5e                   	pop    esi
c001f8f9:	5f                   	pop    edi
c001f8fa:	c3                   	ret    

c001f8fb <Vm::fpuPush(unsigned long long)>:
c001f8fb:	a0 41 1a 03 c0       	mov    al,ds:0xc0031a41
c001f900:	c0 e8 03             	shr    al,0x3
c001f903:	83 e0 07             	and    eax,0x7
c001f906:	83 c0 07             	add    eax,0x7
c001f909:	88 c2                	mov    dl,al
c001f90b:	83 e0 07             	and    eax,0x7
c001f90e:	83 e2 07             	and    edx,0x7
c001f911:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f918:	8a 15 41 1a 03 c0    	mov    dl,BYTE PTR ds:0xc0031a41
c001f91e:	83 e2 c7             	and    edx,0xffffffc7
c001f921:	09 ca                	or     edx,ecx
c001f923:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f927:	88 15 41 1a 03 c0    	mov    BYTE PTR ds:0xc0031a41,dl
c001f92d:	89 0c c5 48 1a 03 c0 	mov    DWORD PTR [eax*8-0x3ffce5b8],ecx
c001f934:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f938:	89 14 c5 44 1a 03 c0 	mov    DWORD PTR [eax*8-0x3ffce5bc],edx
c001f93f:	a1 84 1a 03 c0       	mov    eax,ds:0xc0031a84
c001f944:	83 f8 08             	cmp    eax,0x8
c001f947:	75 08                	jne    c001f951 <Vm::fpuPush(unsigned long long)+0x56>
c001f949:	80 0d 40 1a 03 c0 40 	or     BYTE PTR ds:0xc0031a40,0x40
c001f950:	c3                   	ret    
c001f951:	40                   	inc    eax
c001f952:	a3 84 1a 03 c0       	mov    ds:0xc0031a84,eax
c001f957:	c3                   	ret    

c001f958 <Vm::fpuPop()>:
c001f958:	8a 0d 41 1a 03 c0    	mov    cl,BYTE PTR ds:0xc0031a41
c001f95e:	53                   	push   ebx
c001f95f:	c0 e9 03             	shr    cl,0x3
c001f962:	8a 1d 41 1a 03 c0    	mov    bl,BYTE PTR ds:0xc0031a41
c001f968:	83 e1 07             	and    ecx,0x7
c001f96b:	83 e3 c7             	and    ebx,0xffffffc7
c001f96e:	8b 04 cd 44 1a 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffce5bc]
c001f975:	8b 14 cd 48 1a 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffce5b8]
c001f97c:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f983:	83 e1 38             	and    ecx,0x38
c001f986:	09 d9                	or     ecx,ebx
c001f988:	88 0d 41 1a 03 c0    	mov    BYTE PTR ds:0xc0031a41,cl
c001f98e:	8b 0d 84 1a 03 c0    	mov    ecx,DWORD PTR ds:0xc0031a84
c001f994:	85 c9                	test   ecx,ecx
c001f996:	74 09                	je     c001f9a1 <Vm::fpuPop()+0x49>
c001f998:	49                   	dec    ecx
c001f999:	89 0d 84 1a 03 c0    	mov    DWORD PTR ds:0xc0031a84,ecx
c001f99f:	eb 07                	jmp    c001f9a8 <Vm::fpuPop()+0x50>
c001f9a1:	80 0d 40 1a 03 c0 40 	or     BYTE PTR ds:0xc0031a40,0x40
c001f9a8:	5b                   	pop    ebx
c001f9a9:	c3                   	ret    

c001f9aa <Vm::x87Handler(regs*)>:
c001f9aa:	55                   	push   ebp
c001f9ab:	57                   	push   edi
c001f9ac:	56                   	push   esi
c001f9ad:	53                   	push   ebx
c001f9ae:	83 ec 1c             	sub    esp,0x1c
c001f9b1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f9b5:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001f9ba:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001f9bd:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001f9c5:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001f9c9:	50                   	push   eax
c001f9ca:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001f9ce:	50                   	push   eax
c001f9cf:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f9d3:	50                   	push   eax
c001f9d4:	53                   	push   ebx
c001f9d5:	e8 ee a1 ff ff       	call   c0019bc8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001f9da:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001f9dd:	83 c4 10             	add    esp,0x10
c001f9e0:	89 c6                	mov    esi,eax
c001f9e2:	80 fa d9             	cmp    dl,0xd9
c001f9e5:	0f 85 52 01 00 00    	jne    c001fb3d <Vm::x87Handler(regs*)+0x193>
c001f9eb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9ef:	8d 50 20             	lea    edx,[eax+0x20]
c001f9f2:	80 fa 0e             	cmp    dl,0xe
c001f9f5:	0f 87 86 00 00 00    	ja     c001fa81 <Vm::x87Handler(regs*)+0xd7>
c001f9fb:	0f b6 d2             	movzx  edx,dl
c001f9fe:	ff 24 95 00 c8 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd3800]
c001fa05:	e8 e7 fc ff ff       	call   c001f6f1 <Vm::fpuGet0()>
c001fa0a:	eb 05                	jmp    c001fa11 <Vm::x87Handler(regs*)+0x67>
c001fa0c:	e8 e5 fc ff ff       	call   c001f6f6 <Vm::fpuGet1()>
c001fa11:	57                   	push   edi
c001fa12:	57                   	push   edi
c001fa13:	52                   	push   edx
c001fa14:	50                   	push   eax
c001fa15:	e8 e1 fe ff ff       	call   c001f8fb <Vm::fpuPush(unsigned long long)>
c001fa1a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fa1e:	83 c4 10             	add    esp,0x10
c001fa21:	b0 01                	mov    al,0x1
c001fa23:	e9 e3 09 00 00       	jmp    c002040b <Vm::x87Handler(regs*)+0xa61>
c001fa28:	83 ec 0c             	sub    esp,0xc
c001fa2b:	6a 00                	push   0x0
c001fa2d:	e8 3b fe ff ff       	call   c001f86d <Vm::fpuGetReg(int)>
c001fa32:	59                   	pop    ecx
c001fa33:	5e                   	pop    esi
c001fa34:	52                   	push   edx
c001fa35:	50                   	push   eax
c001fa36:	e8 c2 fd ff ff       	call   c001f7fd <Vm::fpuChs(unsigned long long)>
c001fa3b:	eb 13                	jmp    c001fa50 <Vm::x87Handler(regs*)+0xa6>
c001fa3d:	83 ec 0c             	sub    esp,0xc
c001fa40:	6a 00                	push   0x0
c001fa42:	e8 26 fe ff ff       	call   c001f86d <Vm::fpuGetReg(int)>
c001fa47:	5f                   	pop    edi
c001fa48:	5d                   	pop    ebp
c001fa49:	52                   	push   edx
c001fa4a:	50                   	push   eax
c001fa4b:	e8 a4 fd ff ff       	call   c001f7f4 <Vm::fpuAbs(unsigned long long)>
c001fa50:	83 c4 0c             	add    esp,0xc
c001fa53:	52                   	push   edx
c001fa54:	50                   	push   eax
c001fa55:	6a 00                	push   0x0
c001fa57:	e8 54 fe ff ff       	call   c001f8b0 <Vm::fpuSetReg(int, unsigned long long)>
c001fa5c:	eb bc                	jmp    c001fa1a <Vm::x87Handler(regs*)+0x70>
c001fa5e:	e8 d3 fc ff ff       	call   c001f736 <Vm::fpuGetLog210()>
c001fa63:	eb ac                	jmp    c001fa11 <Vm::x87Handler(regs*)+0x67>
c001fa65:	e8 9c fc ff ff       	call   c001f706 <Vm::fpuGetLog2E()>
c001fa6a:	eb a5                	jmp    c001fa11 <Vm::x87Handler(regs*)+0x67>
c001fa6c:	e8 8d fc ff ff       	call   c001f6fe <Vm::fpuGetPi()>
c001fa71:	eb 9e                	jmp    c001fa11 <Vm::x87Handler(regs*)+0x67>
c001fa73:	e8 d6 fc ff ff       	call   c001f74e <Vm::fpuGetLog102()>
c001fa78:	eb 97                	jmp    c001fa11 <Vm::x87Handler(regs*)+0x67>
c001fa7a:	e8 9f fc ff ff       	call   c001f71e <Vm::fpuGetLogE2()>
c001fa7f:	eb 90                	jmp    c001fa11 <Vm::x87Handler(regs*)+0x67>
c001fa81:	8d 50 40             	lea    edx,[eax+0x40]
c001fa84:	80 fa 07             	cmp    dl,0x7
c001fa87:	77 15                	ja     c001fa9e <Vm::x87Handler(regs*)+0xf4>
c001fa89:	83 ec 0c             	sub    esp,0xc
c001fa8c:	2d c0 00 00 00       	sub    eax,0xc0
c001fa91:	50                   	push   eax
c001fa92:	e8 d6 fd ff ff       	call   c001f86d <Vm::fpuGetReg(int)>
c001fa97:	59                   	pop    ecx
c001fa98:	5e                   	pop    esi
c001fa99:	e9 75 ff ff ff       	jmp    c001fa13 <Vm::x87Handler(regs*)+0x69>
c001fa9e:	8d 50 38             	lea    edx,[eax+0x38]
c001faa1:	80 fa 07             	cmp    dl,0x7
c001faa4:	77 3c                	ja     c001fae2 <Vm::x87Handler(regs*)+0x138>
c001faa6:	83 ec 0c             	sub    esp,0xc
c001faa9:	2d c8 00 00 00       	sub    eax,0xc8
c001faae:	50                   	push   eax
c001faaf:	e8 b9 fd ff ff       	call   c001f86d <Vm::fpuGetReg(int)>
c001fab4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fabb:	89 c6                	mov    esi,eax
c001fabd:	89 d7                	mov    edi,edx
c001fabf:	e8 a9 fd ff ff       	call   c001f86d <Vm::fpuGetReg(int)>
c001fac4:	83 c4 0c             	add    esp,0xc
c001fac7:	52                   	push   edx
c001fac8:	50                   	push   eax
c001fac9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001facd:	2d c8 00 00 00       	sub    eax,0xc8
c001fad2:	50                   	push   eax
c001fad3:	e8 d8 fd ff ff       	call   c001f8b0 <Vm::fpuSetReg(int, unsigned long long)>
c001fad8:	83 c4 0c             	add    esp,0xc
c001fadb:	57                   	push   edi
c001fadc:	56                   	push   esi
c001fadd:	e9 73 ff ff ff       	jmp    c001fa55 <Vm::x87Handler(regs*)+0xab>
c001fae2:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fae6:	84 d2                	test   dl,dl
c001fae8:	75 0f                	jne    c001faf9 <Vm::x87Handler(regs*)+0x14f>
c001faea:	83 ec 0c             	sub    esp,0xc
c001faed:	ff 36                	push   DWORD PTR [esi]
c001faef:	e8 c8 fa ff ff       	call   c001f5bc <Vm::fpu32ToInternal(unsigned int)>
c001faf4:	e9 bf 00 00 00       	jmp    c001fbb8 <Vm::x87Handler(regs*)+0x20e>
c001faf9:	80 fa 03             	cmp    dl,0x3
c001fafc:	75 13                	jne    c001fb11 <Vm::x87Handler(regs*)+0x167>
c001fafe:	e8 55 fe ff ff       	call   c001f958 <Vm::fpuPop()>
c001fb03:	55                   	push   ebp
c001fb04:	55                   	push   ebp
c001fb05:	52                   	push   edx
c001fb06:	50                   	push   eax
c001fb07:	e8 4c fa ff ff       	call   c001f558 <Vm::fpuInternalTo32(unsigned long long)>
c001fb0c:	e9 88 00 00 00       	jmp    c001fb99 <Vm::x87Handler(regs*)+0x1ef>
c001fb11:	80 fa 05             	cmp    dl,0x5
c001fb14:	75 0e                	jne    c001fb24 <Vm::x87Handler(regs*)+0x17a>
c001fb16:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fb19:	66 a3 42 1a 03 c0    	mov    ds:0xc0031a42,ax
c001fb1f:	e9 df 00 00 00       	jmp    c001fc03 <Vm::x87Handler(regs*)+0x259>
c001fb24:	31 c0                	xor    eax,eax
c001fb26:	80 fa 07             	cmp    dl,0x7
c001fb29:	0f 85 dc 08 00 00    	jne    c002040b <Vm::x87Handler(regs*)+0xa61>
c001fb2f:	66 a1 42 1a 03 c0    	mov    ax,ds:0xc0031a42
c001fb35:	66 89 06             	mov    WORD PTR [esi],ax
c001fb38:	e9 c6 00 00 00       	jmp    c001fc03 <Vm::x87Handler(regs*)+0x259>
c001fb3d:	80 fa d8             	cmp    dl,0xd8
c001fb40:	0f 84 c9 00 00 00    	je     c001fc0f <Vm::x87Handler(regs*)+0x265>
c001fb46:	80 fa dc             	cmp    dl,0xdc
c001fb49:	0f 84 0d 02 00 00    	je     c001fd5c <Vm::x87Handler(regs*)+0x3b2>
c001fb4f:	80 fa de             	cmp    dl,0xde
c001fb52:	0f 84 cd 02 00 00    	je     c001fe25 <Vm::x87Handler(regs*)+0x47b>
c001fb58:	80 fa dd             	cmp    dl,0xdd
c001fb5b:	0f 84 5f 04 00 00    	je     c001ffc0 <Vm::x87Handler(regs*)+0x616>
c001fb61:	80 fa da             	cmp    dl,0xda
c001fb64:	0f 84 24 05 00 00    	je     c002008e <Vm::x87Handler(regs*)+0x6e4>
c001fb6a:	80 fa df             	cmp    dl,0xdf
c001fb6d:	0f 84 68 05 00 00    	je     c00200db <Vm::x87Handler(regs*)+0x731>
c001fb73:	31 c0                	xor    eax,eax
c001fb75:	80 fa db             	cmp    dl,0xdb
c001fb78:	0f 85 8d 08 00 00    	jne    c002040b <Vm::x87Handler(regs*)+0xa61>
c001fb7e:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fb82:	80 fa 03             	cmp    dl,0x3
c001fb85:	0f 85 70 06 00 00    	jne    c00201fb <Vm::x87Handler(regs*)+0x851>
c001fb8b:	e8 c8 fd ff ff       	call   c001f958 <Vm::fpuPop()>
c001fb90:	55                   	push   ebp
c001fb91:	55                   	push   ebp
c001fb92:	52                   	push   edx
c001fb93:	50                   	push   eax
c001fb94:	e8 71 fa ff ff       	call   c001f60a <Vm::fpuFloatToLong(unsigned long long)>
c001fb99:	83 c4 10             	add    esp,0x10
c001fb9c:	89 06                	mov    DWORD PTR [esi],eax
c001fb9e:	eb 63                	jmp    c001fc03 <Vm::x87Handler(regs*)+0x259>
c001fba0:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fba4:	84 d2                	test   dl,dl
c001fba6:	0f 85 e6 05 00 00    	jne    c0020192 <Vm::x87Handler(regs*)+0x7e8>
c001fbac:	57                   	push   edi
c001fbad:	57                   	push   edi
c001fbae:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fbb1:	ff 36                	push   DWORD PTR [esi]
c001fbb3:	e8 49 fa ff ff       	call   c001f601 <Vm::fpu64ToInternal(unsigned long long)>
c001fbb8:	5e                   	pop    esi
c001fbb9:	5f                   	pop    edi
c001fbba:	52                   	push   edx
c001fbbb:	50                   	push   eax
c001fbbc:	e8 3a fd ff ff       	call   c001f8fb <Vm::fpuPush(unsigned long long)>
c001fbc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fbc5:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fbc8:	e9 51 fe ff ff       	jmp    c001fa1e <Vm::x87Handler(regs*)+0x74>
c001fbcd:	80 fa 03             	cmp    dl,0x3
c001fbd0:	0f 85 d7 06 00 00    	jne    c00202ad <Vm::x87Handler(regs*)+0x903>
c001fbd6:	57                   	push   edi
c001fbd7:	57                   	push   edi
c001fbd8:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fbdb:	ff 36                	push   DWORD PTR [esi]
c001fbdd:	e8 1f fa ff ff       	call   c001f601 <Vm::fpu64ToInternal(unsigned long long)>
c001fbe2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fbe9:	89 c6                	mov    esi,eax
c001fbeb:	89 d7                	mov    edi,edx
c001fbed:	e8 7b fc ff ff       	call   c001f86d <Vm::fpuGetReg(int)>
c001fbf2:	57                   	push   edi
c001fbf3:	56                   	push   esi
c001fbf4:	52                   	push   edx
c001fbf5:	50                   	push   eax
c001fbf6:	e8 95 fb ff ff       	call   c001f790 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fbfb:	83 c4 20             	add    esp,0x20
c001fbfe:	e8 55 fd ff ff       	call   c001f958 <Vm::fpuPop()>
c001fc03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fc07:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fc0a:	e9 12 fe ff ff       	jmp    c001fa21 <Vm::x87Handler(regs*)+0x77>
c001fc0f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc13:	8d 50 40             	lea    edx,[eax+0x40]
c001fc16:	80 fa 07             	cmp    dl,0x7
c001fc19:	77 29                	ja     c001fc44 <Vm::x87Handler(regs*)+0x29a>
c001fc1b:	83 ec 0c             	sub    esp,0xc
c001fc1e:	2d c0 00 00 00       	sub    eax,0xc0
c001fc23:	50                   	push   eax
c001fc24:	e8 44 fc ff ff       	call   c001f86d <Vm::fpuGetReg(int)>
c001fc29:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc30:	89 c6                	mov    esi,eax
c001fc32:	89 d7                	mov    edi,edx
c001fc34:	e8 34 fc ff ff       	call   c001f86d <Vm::fpuGetReg(int)>
c001fc39:	57                   	push   edi
c001fc3a:	56                   	push   esi
c001fc3b:	52                   	push   edx
c001fc3c:	50                   	push   eax
c001fc3d:	e8 a1 fb ff ff       	call   c001f7e3 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fc42:	eb 2f                	jmp    c001fc73 <Vm::x87Handler(regs*)+0x2c9>
c001fc44:	8d 50 38             	lea    edx,[eax+0x38]
c001fc47:	80 fa 07             	cmp    dl,0x7
c001fc4a:	77 2f                	ja     c001fc7b <Vm::x87Handler(regs*)+0x2d1>
c001fc4c:	83 ec 0c             	sub    esp,0xc
c001fc4f:	2d c8 00 00 00       	sub    eax,0xc8
c001fc54:	50                   	push   eax
c001fc55:	e8 13 fc ff ff       	call   c001f86d <Vm::fpuGetReg(int)>
c001fc5a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc61:	89 c6                	mov    esi,eax
c001fc63:	89 d7                	mov    edi,edx
c001fc65:	e8 03 fc ff ff       	call   c001f86d <Vm::fpuGetReg(int)>
c001fc6a:	57                   	push   edi
c001fc6b:	56                   	push   esi
c001fc6c:	52                   	push   edx
c001fc6d:	50                   	push   eax
c001fc6e:	e8 a9 fb ff ff       	call   c001f81c <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fc73:	83 c4 1c             	add    esp,0x1c
c001fc76:	e9 d8 fd ff ff       	jmp    c001fa53 <Vm::x87Handler(regs*)+0xa9>
c001fc7b:	8d 50 30             	lea    edx,[eax+0x30]
c001fc7e:	80 fa 07             	cmp    dl,0x7
c001fc81:	77 0d                	ja     c001fc90 <Vm::x87Handler(regs*)+0x2e6>
c001fc83:	83 ec 0c             	sub    esp,0xc
c001fc86:	2d d0 00 00 00       	sub    eax,0xd0
c001fc8b:	e9 99 03 00 00       	jmp    c0020029 <Vm::x87Handler(regs*)+0x67f>
c001fc90:	8d 50 28             	lea    edx,[eax+0x28]
c001fc93:	80 fa 07             	cmp    dl,0x7
c001fc96:	77 0d                	ja     c001fca5 <Vm::x87Handler(regs*)+0x2fb>
c001fc98:	83 ec 0c             	sub    esp,0xc
c001fc9b:	2d d8 00 00 00       	sub    eax,0xd8
c001fca0:	e9 c0 03 00 00       	jmp    c0020065 <Vm::x87Handler(regs*)+0x6bb>
c001fca5:	8d 50 20             	lea    edx,[eax+0x20]
c001fca8:	80 fa 07             	cmp    dl,0x7
c001fcab:	77 1b                	ja     c001fcc8 <Vm::x87Handler(regs*)+0x31e>
c001fcad:	83 ec 0c             	sub    esp,0xc
c001fcb0:	2d e0 00 00 00       	sub    eax,0xe0
c001fcb5:	50                   	push   eax
c001fcb6:	e8 b2 fb ff ff       	call   c001f86d <Vm::fpuGetReg(int)>
c001fcbb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fcc2:	89 c6                	mov    esi,eax
c001fcc4:	89 d7                	mov    edi,edx
c001fcc6:	eb 22                	jmp    c001fcea <Vm::x87Handler(regs*)+0x340>
c001fcc8:	8d 50 18             	lea    edx,[eax+0x18]
c001fccb:	80 fa 07             	cmp    dl,0x7
c001fcce:	77 2d                	ja     c001fcfd <Vm::x87Handler(regs*)+0x353>
c001fcd0:	83 ec 0c             	sub    esp,0xc
c001fcd3:	6a 00                	push   0x0
c001fcd5:	e8 93 fb ff ff       	call   c001f86d <Vm::fpuGetReg(int)>
c001fcda:	89 c6                	mov    esi,eax
c001fcdc:	89 d7                	mov    edi,edx
c001fcde:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fce2:	2d e8 00 00 00       	sub    eax,0xe8
c001fce7:	89 04 24             	mov    DWORD PTR [esp],eax
c001fcea:	e8 7e fb ff ff       	call   c001f86d <Vm::fpuGetReg(int)>
c001fcef:	57                   	push   edi
c001fcf0:	56                   	push   esi
c001fcf1:	52                   	push   edx
c001fcf2:	50                   	push   eax
c001fcf3:	e8 15 fb ff ff       	call   c001f80d <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fcf8:	e9 76 ff ff ff       	jmp    c001fc73 <Vm::x87Handler(regs*)+0x2c9>
c001fcfd:	8d 50 10             	lea    edx,[eax+0x10]
c001fd00:	80 fa 07             	cmp    dl,0x7
c001fd03:	77 1b                	ja     c001fd20 <Vm::x87Handler(regs*)+0x376>
c001fd05:	83 ec 0c             	sub    esp,0xc
c001fd08:	2d f0 00 00 00       	sub    eax,0xf0
c001fd0d:	50                   	push   eax
c001fd0e:	e8 5a fb ff ff       	call   c001f86d <Vm::fpuGetReg(int)>
c001fd13:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd1a:	89 c6                	mov    esi,eax
c001fd1c:	89 d7                	mov    edi,edx
c001fd1e:	eb 22                	jmp    c001fd42 <Vm::x87Handler(regs*)+0x398>
c001fd20:	3c f7                	cmp    al,0xf7
c001fd22:	0f 86 d1 03 00 00    	jbe    c00200f9 <Vm::x87Handler(regs*)+0x74f>
c001fd28:	83 ec 0c             	sub    esp,0xc
c001fd2b:	6a 00                	push   0x0
c001fd2d:	e8 3b fb ff ff       	call   c001f86d <Vm::fpuGetReg(int)>
c001fd32:	89 c6                	mov    esi,eax
c001fd34:	89 d7                	mov    edi,edx
c001fd36:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd3a:	2d f8 00 00 00       	sub    eax,0xf8
c001fd3f:	89 04 24             	mov    DWORD PTR [esp],eax
c001fd42:	e8 26 fb ff ff       	call   c001f86d <Vm::fpuGetReg(int)>
c001fd47:	57                   	push   edi
c001fd48:	56                   	push   esi
c001fd49:	52                   	push   edx
c001fd4a:	50                   	push   eax
c001fd4b:	e8 eb fa ff ff       	call   c001f83b <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fd50:	83 c4 1c             	add    esp,0x1c
c001fd53:	52                   	push   edx
c001fd54:	50                   	push   eax
c001fd55:	6a 00                	push   0x0
c001fd57:	e9 51 02 00 00       	jmp    c001ffad <Vm::x87Handler(regs*)+0x603>
c001fd5c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd60:	8d 50 40             	lea    edx,[eax+0x40]
c001fd63:	80 fa 07             	cmp    dl,0x7
c001fd66:	77 37                	ja     c001fd9f <Vm::x87Handler(regs*)+0x3f5>
c001fd68:	83 ec 0c             	sub    esp,0xc
c001fd6b:	2d c0 00 00 00       	sub    eax,0xc0
c001fd70:	50                   	push   eax
c001fd71:	e8 f7 fa ff ff       	call   c001f86d <Vm::fpuGetReg(int)>
c001fd76:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd7d:	89 c6                	mov    esi,eax
c001fd7f:	89 d7                	mov    edi,edx
c001fd81:	e8 e7 fa ff ff       	call   c001f86d <Vm::fpuGetReg(int)>
c001fd86:	57                   	push   edi
c001fd87:	56                   	push   esi
c001fd88:	52                   	push   edx
c001fd89:	50                   	push   eax
c001fd8a:	e8 54 fa ff ff       	call   c001f7e3 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fd8f:	83 c4 1c             	add    esp,0x1c
c001fd92:	52                   	push   edx
c001fd93:	50                   	push   eax
c001fd94:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd98:	2d c0 00 00 00       	sub    eax,0xc0
c001fd9d:	eb 3d                	jmp    c001fddc <Vm::x87Handler(regs*)+0x432>
c001fd9f:	8d 50 38             	lea    edx,[eax+0x38]
c001fda2:	80 fa 07             	cmp    dl,0x7
c001fda5:	77 3b                	ja     c001fde2 <Vm::x87Handler(regs*)+0x438>
c001fda7:	83 ec 0c             	sub    esp,0xc
c001fdaa:	2d c8 00 00 00       	sub    eax,0xc8
c001fdaf:	50                   	push   eax
c001fdb0:	e8 b8 fa ff ff       	call   c001f86d <Vm::fpuGetReg(int)>
c001fdb5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fdbc:	89 c6                	mov    esi,eax
c001fdbe:	89 d7                	mov    edi,edx
c001fdc0:	e8 a8 fa ff ff       	call   c001f86d <Vm::fpuGetReg(int)>
c001fdc5:	57                   	push   edi
c001fdc6:	56                   	push   esi
c001fdc7:	52                   	push   edx
c001fdc8:	50                   	push   eax
c001fdc9:	e8 4e fa ff ff       	call   c001f81c <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fdce:	83 c4 1c             	add    esp,0x1c
c001fdd1:	52                   	push   edx
c001fdd2:	50                   	push   eax
c001fdd3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdd7:	2d c8 00 00 00       	sub    eax,0xc8
c001fddc:	50                   	push   eax
c001fddd:	e9 75 fc ff ff       	jmp    c001fa57 <Vm::x87Handler(regs*)+0xad>
c001fde2:	83 c0 18             	add    eax,0x18
c001fde5:	3c 07                	cmp    al,0x7
c001fde7:	0f 87 3b 04 00 00    	ja     c0020228 <Vm::x87Handler(regs*)+0x87e>
c001fded:	83 ec 0c             	sub    esp,0xc
c001fdf0:	6a 00                	push   0x0
c001fdf2:	e8 76 fa ff ff       	call   c001f86d <Vm::fpuGetReg(int)>
c001fdf7:	89 c6                	mov    esi,eax
c001fdf9:	89 d7                	mov    edi,edx
c001fdfb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdff:	2d e8 00 00 00       	sub    eax,0xe8
c001fe04:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe07:	e8 61 fa ff ff       	call   c001f86d <Vm::fpuGetReg(int)>
c001fe0c:	57                   	push   edi
c001fe0d:	56                   	push   esi
c001fe0e:	52                   	push   edx
c001fe0f:	50                   	push   eax
c001fe10:	e8 f8 f9 ff ff       	call   c001f80d <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fe15:	83 c4 1c             	add    esp,0x1c
c001fe18:	52                   	push   edx
c001fe19:	50                   	push   eax
c001fe1a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe1e:	2d e8 00 00 00       	sub    eax,0xe8
c001fe23:	eb b7                	jmp    c001fddc <Vm::x87Handler(regs*)+0x432>
c001fe25:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe29:	8d 50 40             	lea    edx,[eax+0x40]
c001fe2c:	80 fa 07             	cmp    dl,0x7
c001fe2f:	77 3a                	ja     c001fe6b <Vm::x87Handler(regs*)+0x4c1>
c001fe31:	83 ec 0c             	sub    esp,0xc
c001fe34:	2d c0 00 00 00       	sub    eax,0xc0
c001fe39:	50                   	push   eax
c001fe3a:	e8 2e fa ff ff       	call   c001f86d <Vm::fpuGetReg(int)>
c001fe3f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe46:	89 c6                	mov    esi,eax
c001fe48:	89 d7                	mov    edi,edx
c001fe4a:	e8 1e fa ff ff       	call   c001f86d <Vm::fpuGetReg(int)>
c001fe4f:	57                   	push   edi
c001fe50:	56                   	push   esi
c001fe51:	52                   	push   edx
c001fe52:	50                   	push   eax
c001fe53:	e8 8b f9 ff ff       	call   c001f7e3 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fe58:	83 c4 1c             	add    esp,0x1c
c001fe5b:	52                   	push   edx
c001fe5c:	50                   	push   eax
c001fe5d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe61:	2d c0 00 00 00       	sub    eax,0xc0
c001fe66:	e9 9e 01 00 00       	jmp    c0020009 <Vm::x87Handler(regs*)+0x65f>
c001fe6b:	8d 50 20             	lea    edx,[eax+0x20]
c001fe6e:	80 fa 07             	cmp    dl,0x7
c001fe71:	77 3a                	ja     c001fead <Vm::x87Handler(regs*)+0x503>
c001fe73:	83 ec 0c             	sub    esp,0xc
c001fe76:	2d e0 00 00 00       	sub    eax,0xe0
c001fe7b:	50                   	push   eax
c001fe7c:	e8 ec f9 ff ff       	call   c001f86d <Vm::fpuGetReg(int)>
c001fe81:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe88:	89 c6                	mov    esi,eax
c001fe8a:	89 d7                	mov    edi,edx
c001fe8c:	e8 dc f9 ff ff       	call   c001f86d <Vm::fpuGetReg(int)>
c001fe91:	57                   	push   edi
c001fe92:	56                   	push   esi
c001fe93:	52                   	push   edx
c001fe94:	50                   	push   eax
c001fe95:	e8 73 f9 ff ff       	call   c001f80d <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fe9a:	83 c4 1c             	add    esp,0x1c
c001fe9d:	52                   	push   edx
c001fe9e:	50                   	push   eax
c001fe9f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fea3:	2d e0 00 00 00       	sub    eax,0xe0
c001fea8:	e9 5c 01 00 00       	jmp    c0020009 <Vm::x87Handler(regs*)+0x65f>
c001fead:	8d 50 18             	lea    edx,[eax+0x18]
c001feb0:	80 fa 07             	cmp    dl,0x7
c001feb3:	77 3b                	ja     c001fef0 <Vm::x87Handler(regs*)+0x546>
c001feb5:	83 ec 0c             	sub    esp,0xc
c001feb8:	6a 00                	push   0x0
c001feba:	e8 ae f9 ff ff       	call   c001f86d <Vm::fpuGetReg(int)>
c001febf:	89 c6                	mov    esi,eax
c001fec1:	89 d7                	mov    edi,edx
c001fec3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fec7:	2d e8 00 00 00       	sub    eax,0xe8
c001fecc:	89 04 24             	mov    DWORD PTR [esp],eax
c001fecf:	e8 99 f9 ff ff       	call   c001f86d <Vm::fpuGetReg(int)>
c001fed4:	57                   	push   edi
c001fed5:	56                   	push   esi
c001fed6:	52                   	push   edx
c001fed7:	50                   	push   eax
c001fed8:	e8 30 f9 ff ff       	call   c001f80d <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fedd:	83 c4 1c             	add    esp,0x1c
c001fee0:	52                   	push   edx
c001fee1:	50                   	push   eax
c001fee2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fee6:	2d e8 00 00 00       	sub    eax,0xe8
c001feeb:	e9 19 01 00 00       	jmp    c0020009 <Vm::x87Handler(regs*)+0x65f>
c001fef0:	8d 50 38             	lea    edx,[eax+0x38]
c001fef3:	80 fa 07             	cmp    dl,0x7
c001fef6:	77 37                	ja     c001ff2f <Vm::x87Handler(regs*)+0x585>
c001fef8:	83 ec 0c             	sub    esp,0xc
c001fefb:	2d c8 00 00 00       	sub    eax,0xc8
c001ff00:	50                   	push   eax
c001ff01:	e8 67 f9 ff ff       	call   c001f86d <Vm::fpuGetReg(int)>
c001ff06:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff0d:	89 c6                	mov    esi,eax
c001ff0f:	89 d7                	mov    edi,edx
c001ff11:	e8 57 f9 ff ff       	call   c001f86d <Vm::fpuGetReg(int)>
c001ff16:	57                   	push   edi
c001ff17:	56                   	push   esi
c001ff18:	52                   	push   edx
c001ff19:	50                   	push   eax
c001ff1a:	e8 fd f8 ff ff       	call   c001f81c <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ff1f:	83 c4 1c             	add    esp,0x1c
c001ff22:	52                   	push   edx
c001ff23:	50                   	push   eax
c001ff24:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff28:	2d c8 00 00 00       	sub    eax,0xc8
c001ff2d:	eb 7d                	jmp    c001ffac <Vm::x87Handler(regs*)+0x602>
c001ff2f:	3c f7                	cmp    al,0xf7
c001ff31:	76 38                	jbe    c001ff6b <Vm::x87Handler(regs*)+0x5c1>
c001ff33:	83 ec 0c             	sub    esp,0xc
c001ff36:	6a 00                	push   0x0
c001ff38:	e8 30 f9 ff ff       	call   c001f86d <Vm::fpuGetReg(int)>
c001ff3d:	89 c6                	mov    esi,eax
c001ff3f:	89 d7                	mov    edi,edx
c001ff41:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff45:	2d f8 00 00 00       	sub    eax,0xf8
c001ff4a:	89 04 24             	mov    DWORD PTR [esp],eax
c001ff4d:	e8 1b f9 ff ff       	call   c001f86d <Vm::fpuGetReg(int)>
c001ff52:	57                   	push   edi
c001ff53:	56                   	push   esi
c001ff54:	52                   	push   edx
c001ff55:	50                   	push   eax
c001ff56:	e8 e0 f8 ff ff       	call   c001f83b <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ff5b:	83 c4 1c             	add    esp,0x1c
c001ff5e:	52                   	push   edx
c001ff5f:	50                   	push   eax
c001ff60:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff64:	2d f8 00 00 00       	sub    eax,0xf8
c001ff69:	eb 41                	jmp    c001ffac <Vm::x87Handler(regs*)+0x602>
c001ff6b:	8d 50 10             	lea    edx,[eax+0x10]
c001ff6e:	80 fa 07             	cmp    dl,0x7
c001ff71:	0f 87 5a 01 00 00    	ja     c00200d1 <Vm::x87Handler(regs*)+0x727>
c001ff77:	83 ec 0c             	sub    esp,0xc
c001ff7a:	2d f0 00 00 00       	sub    eax,0xf0
c001ff7f:	50                   	push   eax
c001ff80:	e8 e8 f8 ff ff       	call   c001f86d <Vm::fpuGetReg(int)>
c001ff85:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff8c:	89 c6                	mov    esi,eax
c001ff8e:	89 d7                	mov    edi,edx
c001ff90:	e8 d8 f8 ff ff       	call   c001f86d <Vm::fpuGetReg(int)>
c001ff95:	57                   	push   edi
c001ff96:	56                   	push   esi
c001ff97:	52                   	push   edx
c001ff98:	50                   	push   eax
c001ff99:	e8 9d f8 ff ff       	call   c001f83b <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ff9e:	83 c4 1c             	add    esp,0x1c
c001ffa1:	52                   	push   edx
c001ffa2:	50                   	push   eax
c001ffa3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffa7:	2d f0 00 00 00       	sub    eax,0xf0
c001ffac:	50                   	push   eax
c001ffad:	e8 fe f8 ff ff       	call   c001f8b0 <Vm::fpuSetReg(int, unsigned long long)>
c001ffb2:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ffb6:	e8 9d f9 ff ff       	call   c001f958 <Vm::fpuPop()>
c001ffbb:	e9 5e fa ff ff       	jmp    c001fa1e <Vm::x87Handler(regs*)+0x74>
c001ffc0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffc4:	8d 50 30             	lea    edx,[eax+0x30]
c001ffc7:	80 fa 07             	cmp    dl,0x7
c001ffca:	77 1d                	ja     c001ffe9 <Vm::x87Handler(regs*)+0x63f>
c001ffcc:	83 ec 0c             	sub    esp,0xc
c001ffcf:	6a 00                	push   0x0
c001ffd1:	e8 97 f8 ff ff       	call   c001f86d <Vm::fpuGetReg(int)>
c001ffd6:	83 c4 0c             	add    esp,0xc
c001ffd9:	52                   	push   edx
c001ffda:	50                   	push   eax
c001ffdb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffdf:	2d d0 00 00 00       	sub    eax,0xd0
c001ffe4:	e9 f3 fd ff ff       	jmp    c001fddc <Vm::x87Handler(regs*)+0x432>
c001ffe9:	8d 50 28             	lea    edx,[eax+0x28]
c001ffec:	80 fa 07             	cmp    dl,0x7
c001ffef:	77 28                	ja     c0020019 <Vm::x87Handler(regs*)+0x66f>
c001fff1:	83 ec 0c             	sub    esp,0xc
c001fff4:	6a 00                	push   0x0
c001fff6:	e8 72 f8 ff ff       	call   c001f86d <Vm::fpuGetReg(int)>
c001fffb:	83 c4 0c             	add    esp,0xc
c001fffe:	52                   	push   edx
c001ffff:	50                   	push   eax
c0020000:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020004:	2d d8 00 00 00       	sub    eax,0xd8
c0020009:	50                   	push   eax
c002000a:	e8 a1 f8 ff ff       	call   c001f8b0 <Vm::fpuSetReg(int, unsigned long long)>
c002000f:	e8 44 f9 ff ff       	call   c001f958 <Vm::fpuPop()>
c0020014:	e9 01 fa ff ff       	jmp    c001fa1a <Vm::x87Handler(regs*)+0x70>
c0020019:	8d 50 20             	lea    edx,[eax+0x20]
c002001c:	80 fa 07             	cmp    dl,0x7
c002001f:	77 30                	ja     c0020051 <Vm::x87Handler(regs*)+0x6a7>
c0020021:	83 ec 0c             	sub    esp,0xc
c0020024:	2d e0 00 00 00       	sub    eax,0xe0
c0020029:	50                   	push   eax
c002002a:	e8 3e f8 ff ff       	call   c001f86d <Vm::fpuGetReg(int)>
c002002f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020036:	89 c6                	mov    esi,eax
c0020038:	89 d7                	mov    edi,edx
c002003a:	e8 2e f8 ff ff       	call   c001f86d <Vm::fpuGetReg(int)>
c002003f:	57                   	push   edi
c0020040:	56                   	push   esi
c0020041:	52                   	push   edx
c0020042:	50                   	push   eax
c0020043:	e8 48 f7 ff ff       	call   c001f790 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020048:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002004c:	e9 54 02 00 00       	jmp    c00202a5 <Vm::x87Handler(regs*)+0x8fb>
c0020051:	8d 50 18             	lea    edx,[eax+0x18]
c0020054:	80 fa 07             	cmp    dl,0x7
c0020057:	0f 87 43 fb ff ff    	ja     c001fba0 <Vm::x87Handler(regs*)+0x1f6>
c002005d:	83 ec 0c             	sub    esp,0xc
c0020060:	2d e8 00 00 00       	sub    eax,0xe8
c0020065:	50                   	push   eax
c0020066:	e8 02 f8 ff ff       	call   c001f86d <Vm::fpuGetReg(int)>
c002006b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020072:	89 c6                	mov    esi,eax
c0020074:	89 d7                	mov    edi,edx
c0020076:	e8 f2 f7 ff ff       	call   c001f86d <Vm::fpuGetReg(int)>
c002007b:	57                   	push   edi
c002007c:	56                   	push   esi
c002007d:	52                   	push   edx
c002007e:	50                   	push   eax
c002007f:	e8 0c f7 ff ff       	call   c001f790 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020084:	83 c4 20             	add    esp,0x20
c0020087:	e8 cc f8 ff ff       	call   c001f958 <Vm::fpuPop()>
c002008c:	eb 62                	jmp    c00200f0 <Vm::x87Handler(regs*)+0x746>
c002008e:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c0020092:	0f 85 0f 01 00 00    	jne    c00201a7 <Vm::x87Handler(regs*)+0x7fd>
c0020098:	83 ec 0c             	sub    esp,0xc
c002009b:	6a 01                	push   0x1
c002009d:	e8 cb f7 ff ff       	call   c001f86d <Vm::fpuGetReg(int)>
c00200a2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00200a9:	89 c6                	mov    esi,eax
c00200ab:	89 d7                	mov    edi,edx
c00200ad:	e8 bb f7 ff ff       	call   c001f86d <Vm::fpuGetReg(int)>
c00200b2:	57                   	push   edi
c00200b3:	56                   	push   esi
c00200b4:	52                   	push   edx
c00200b5:	50                   	push   eax
c00200b6:	e8 d5 f6 ff ff       	call   c001f790 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00200bb:	83 c4 20             	add    esp,0x20
c00200be:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00200c2:	e8 91 f8 ff ff       	call   c001f958 <Vm::fpuPop()>
c00200c7:	e8 8c f8 ff ff       	call   c001f958 <Vm::fpuPop()>
c00200cc:	e9 50 f9 ff ff       	jmp    c001fa21 <Vm::x87Handler(regs*)+0x77>
c00200d1:	3c d9                	cmp    al,0xd9
c00200d3:	0f 85 b5 02 00 00    	jne    c002038e <Vm::x87Handler(regs*)+0x9e4>
c00200d9:	eb bd                	jmp    c0020098 <Vm::x87Handler(regs*)+0x6ee>
c00200db:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c00200df:	0f 85 ea 02 00 00    	jne    c00203cf <Vm::x87Handler(regs*)+0xa25>
c00200e5:	0f b7 05 40 1a 03 c0 	movzx  eax,WORD PTR ds:0xc0031a40
c00200ec:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c00200f0:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00200f4:	e9 28 f9 ff ff       	jmp    c001fa21 <Vm::x87Handler(regs*)+0x77>
c00200f9:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00200fd:	84 d2                	test   dl,dl
c00200ff:	75 0f                	jne    c0020110 <Vm::x87Handler(regs*)+0x766>
c0020101:	83 ec 0c             	sub    esp,0xc
c0020104:	ff 36                	push   DWORD PTR [esi]
c0020106:	e8 b1 f4 ff ff       	call   c001f5bc <Vm::fpu32ToInternal(unsigned int)>
c002010b:	e9 2c 01 00 00       	jmp    c002023c <Vm::x87Handler(regs*)+0x892>
c0020110:	80 fa 01             	cmp    dl,0x1
c0020113:	75 0f                	jne    c0020124 <Vm::x87Handler(regs*)+0x77a>
c0020115:	83 ec 0c             	sub    esp,0xc
c0020118:	ff 36                	push   DWORD PTR [esi]
c002011a:	e8 9d f4 ff ff       	call   c001f5bc <Vm::fpu32ToInternal(unsigned int)>
c002011f:	e9 81 02 00 00       	jmp    c00203a5 <Vm::x87Handler(regs*)+0x9fb>
c0020124:	80 fa 04             	cmp    dl,0x4
c0020127:	75 0f                	jne    c0020138 <Vm::x87Handler(regs*)+0x78e>
c0020129:	83 ec 0c             	sub    esp,0xc
c002012c:	ff 36                	push   DWORD PTR [esi]
c002012e:	e8 89 f4 ff ff       	call   c001f5bc <Vm::fpu32ToInternal(unsigned int)>
c0020133:	e9 86 01 00 00       	jmp    c00202be <Vm::x87Handler(regs*)+0x914>
c0020138:	80 fa 05             	cmp    dl,0x5
c002013b:	75 1b                	jne    c0020158 <Vm::x87Handler(regs*)+0x7ae>
c002013d:	83 ec 0c             	sub    esp,0xc
c0020140:	6a 00                	push   0x0
c0020142:	e8 26 f7 ff ff       	call   c001f86d <Vm::fpuGetReg(int)>
c0020147:	89 c7                	mov    edi,eax
c0020149:	89 d5                	mov    ebp,edx
c002014b:	58                   	pop    eax
c002014c:	ff 36                	push   DWORD PTR [esi]
c002014e:	e8 69 f4 ff ff       	call   c001f5bc <Vm::fpu32ToInternal(unsigned int)>
c0020153:	e9 a3 01 00 00       	jmp    c00202fb <Vm::x87Handler(regs*)+0x951>
c0020158:	80 fa 06             	cmp    dl,0x6
c002015b:	75 0f                	jne    c002016c <Vm::x87Handler(regs*)+0x7c2>
c002015d:	83 ec 0c             	sub    esp,0xc
c0020160:	ff 36                	push   DWORD PTR [esi]
c0020162:	e8 55 f4 ff ff       	call   c001f5bc <Vm::fpu32ToInternal(unsigned int)>
c0020167:	e9 ae 01 00 00       	jmp    c002031a <Vm::x87Handler(regs*)+0x970>
c002016c:	31 c0                	xor    eax,eax
c002016e:	80 fa 07             	cmp    dl,0x7
c0020171:	0f 85 94 02 00 00    	jne    c002040b <Vm::x87Handler(regs*)+0xa61>
c0020177:	83 ec 0c             	sub    esp,0xc
c002017a:	6a 00                	push   0x0
c002017c:	e8 ec f6 ff ff       	call   c001f86d <Vm::fpuGetReg(int)>
c0020181:	89 c7                	mov    edi,eax
c0020183:	89 d5                	mov    ebp,edx
c0020185:	58                   	pop    eax
c0020186:	ff 36                	push   DWORD PTR [esi]
c0020188:	e8 2f f4 ff ff       	call   c001f5bc <Vm::fpu32ToInternal(unsigned int)>
c002018d:	e9 cb 01 00 00       	jmp    c002035d <Vm::x87Handler(regs*)+0x9b3>
c0020192:	80 fa 03             	cmp    dl,0x3
c0020195:	0f 85 d3 01 00 00    	jne    c002036e <Vm::x87Handler(regs*)+0x9c4>
c002019b:	e8 b8 f7 ff ff       	call   c001f958 <Vm::fpuPop()>
c00201a0:	51                   	push   ecx
c00201a1:	51                   	push   ecx
c00201a2:	e9 de 01 00 00       	jmp    c0020385 <Vm::x87Handler(regs*)+0x9db>
c00201a7:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00201ab:	80 fa 01             	cmp    dl,0x1
c00201ae:	75 09                	jne    c00201b9 <Vm::x87Handler(regs*)+0x80f>
c00201b0:	57                   	push   edi
c00201b1:	57                   	push   edi
c00201b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00201b4:	e9 e3 01 00 00       	jmp    c002039c <Vm::x87Handler(regs*)+0x9f2>
c00201b9:	80 fa 04             	cmp    dl,0x4
c00201bc:	75 12                	jne    c00201d0 <Vm::x87Handler(regs*)+0x826>
c00201be:	31 d2                	xor    edx,edx
c00201c0:	51                   	push   ecx
c00201c1:	51                   	push   ecx
c00201c2:	8b 06                	mov    eax,DWORD PTR [esi]
c00201c4:	52                   	push   edx
c00201c5:	50                   	push   eax
c00201c6:	e8 d0 f4 ff ff       	call   c001f69b <Vm::fpuLongToFloat(long long)>
c00201cb:	e9 ee 00 00 00       	jmp    c00202be <Vm::x87Handler(regs*)+0x914>
c00201d0:	31 c0                	xor    eax,eax
c00201d2:	80 fa 07             	cmp    dl,0x7
c00201d5:	0f 85 30 02 00 00    	jne    c002040b <Vm::x87Handler(regs*)+0xa61>
c00201db:	83 ec 0c             	sub    esp,0xc
c00201de:	6a 00                	push   0x0
c00201e0:	e8 88 f6 ff ff       	call   c001f86d <Vm::fpuGetReg(int)>
c00201e5:	89 c7                	mov    edi,eax
c00201e7:	89 d5                	mov    ebp,edx
c00201e9:	58                   	pop    eax
c00201ea:	8b 06                	mov    eax,DWORD PTR [esi]
c00201ec:	5a                   	pop    edx
c00201ed:	31 d2                	xor    edx,edx
c00201ef:	52                   	push   edx
c00201f0:	50                   	push   eax
c00201f1:	e8 a5 f4 ff ff       	call   c001f69b <Vm::fpuLongToFloat(long long)>
c00201f6:	e9 62 01 00 00       	jmp    c002035d <Vm::x87Handler(regs*)+0x9b3>
c00201fb:	84 d2                	test   dl,dl
c00201fd:	75 0d                	jne    c002020c <Vm::x87Handler(regs*)+0x862>
c00201ff:	31 d2                	xor    edx,edx
c0020201:	55                   	push   ebp
c0020202:	55                   	push   ebp
c0020203:	8b 06                	mov    eax,DWORD PTR [esi]
c0020205:	52                   	push   edx
c0020206:	50                   	push   eax
c0020207:	e9 d3 01 00 00       	jmp    c00203df <Vm::x87Handler(regs*)+0xa35>
c002020c:	31 c0                	xor    eax,eax
c002020e:	80 fa 02             	cmp    dl,0x2
c0020211:	0f 85 f4 01 00 00    	jne    c002040b <Vm::x87Handler(regs*)+0xa61>
c0020217:	83 ec 0c             	sub    esp,0xc
c002021a:	6a 00                	push   0x0
c002021c:	e8 4c f6 ff ff       	call   c001f86d <Vm::fpuGetReg(int)>
c0020221:	59                   	pop    ecx
c0020222:	5f                   	pop    edi
c0020223:	e9 6a f9 ff ff       	jmp    c001fb92 <Vm::x87Handler(regs*)+0x1e8>
c0020228:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002022c:	84 d2                	test   dl,dl
c002022e:	75 2a                	jne    c002025a <Vm::x87Handler(regs*)+0x8b0>
c0020230:	50                   	push   eax
c0020231:	50                   	push   eax
c0020232:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020235:	ff 36                	push   DWORD PTR [esi]
c0020237:	e8 c5 f3 ff ff       	call   c001f601 <Vm::fpu64ToInternal(unsigned long long)>
c002023c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020243:	89 c6                	mov    esi,eax
c0020245:	89 d7                	mov    edi,edx
c0020247:	e8 21 f6 ff ff       	call   c001f86d <Vm::fpuGetReg(int)>
c002024c:	57                   	push   edi
c002024d:	56                   	push   esi
c002024e:	52                   	push   edx
c002024f:	50                   	push   eax
c0020250:	e8 8e f5 ff ff       	call   c001f7e3 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020255:	e9 64 01 00 00       	jmp    c00203be <Vm::x87Handler(regs*)+0xa14>
c002025a:	80 fa 01             	cmp    dl,0x1
c002025d:	75 11                	jne    c0020270 <Vm::x87Handler(regs*)+0x8c6>
c002025f:	50                   	push   eax
c0020260:	50                   	push   eax
c0020261:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020264:	ff 36                	push   DWORD PTR [esi]
c0020266:	e8 96 f3 ff ff       	call   c001f601 <Vm::fpu64ToInternal(unsigned long long)>
c002026b:	e9 35 01 00 00       	jmp    c00203a5 <Vm::x87Handler(regs*)+0x9fb>
c0020270:	80 fa 02             	cmp    dl,0x2
c0020273:	0f 85 54 f9 ff ff    	jne    c001fbcd <Vm::x87Handler(regs*)+0x223>
c0020279:	55                   	push   ebp
c002027a:	55                   	push   ebp
c002027b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002027e:	ff 36                	push   DWORD PTR [esi]
c0020280:	e8 7c f3 ff ff       	call   c001f601 <Vm::fpu64ToInternal(unsigned long long)>
c0020285:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002028c:	89 c6                	mov    esi,eax
c002028e:	89 d7                	mov    edi,edx
c0020290:	e8 d8 f5 ff ff       	call   c001f86d <Vm::fpuGetReg(int)>
c0020295:	57                   	push   edi
c0020296:	56                   	push   esi
c0020297:	52                   	push   edx
c0020298:	50                   	push   eax
c0020299:	e8 f2 f4 ff ff       	call   c001f790 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002029e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00202a2:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c00202a5:	83 c4 20             	add    esp,0x20
c00202a8:	e9 74 f7 ff ff       	jmp    c001fa21 <Vm::x87Handler(regs*)+0x77>
c00202ad:	80 fa 04             	cmp    dl,0x4
c00202b0:	75 2a                	jne    c00202dc <Vm::x87Handler(regs*)+0x932>
c00202b2:	51                   	push   ecx
c00202b3:	51                   	push   ecx
c00202b4:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00202b7:	ff 36                	push   DWORD PTR [esi]
c00202b9:	e8 43 f3 ff ff       	call   c001f601 <Vm::fpu64ToInternal(unsigned long long)>
c00202be:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00202c5:	89 c6                	mov    esi,eax
c00202c7:	89 d7                	mov    edi,edx
c00202c9:	e8 9f f5 ff ff       	call   c001f86d <Vm::fpuGetReg(int)>
c00202ce:	57                   	push   edi
c00202cf:	56                   	push   esi
c00202d0:	52                   	push   edx
c00202d1:	50                   	push   eax
c00202d2:	e8 36 f5 ff ff       	call   c001f80d <Vm::fpuSub(unsigned long long, unsigned long long)>
c00202d7:	e9 e2 00 00 00       	jmp    c00203be <Vm::x87Handler(regs*)+0xa14>
c00202dc:	80 fa 05             	cmp    dl,0x5
c00202df:	75 28                	jne    c0020309 <Vm::x87Handler(regs*)+0x95f>
c00202e1:	83 ec 0c             	sub    esp,0xc
c00202e4:	6a 00                	push   0x0
c00202e6:	e8 82 f5 ff ff       	call   c001f86d <Vm::fpuGetReg(int)>
c00202eb:	89 c7                	mov    edi,eax
c00202ed:	89 d5                	mov    ebp,edx
c00202ef:	58                   	pop    eax
c00202f0:	5a                   	pop    edx
c00202f1:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00202f4:	ff 36                	push   DWORD PTR [esi]
c00202f6:	e8 06 f3 ff ff       	call   c001f601 <Vm::fpu64ToInternal(unsigned long long)>
c00202fb:	83 c4 10             	add    esp,0x10
c00202fe:	55                   	push   ebp
c00202ff:	57                   	push   edi
c0020300:	52                   	push   edx
c0020301:	50                   	push   eax
c0020302:	e8 06 f5 ff ff       	call   c001f80d <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020307:	eb 60                	jmp    c0020369 <Vm::x87Handler(regs*)+0x9bf>
c0020309:	80 fa 06             	cmp    dl,0x6
c002030c:	75 2a                	jne    c0020338 <Vm::x87Handler(regs*)+0x98e>
c002030e:	51                   	push   ecx
c002030f:	51                   	push   ecx
c0020310:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020313:	ff 36                	push   DWORD PTR [esi]
c0020315:	e8 e7 f2 ff ff       	call   c001f601 <Vm::fpu64ToInternal(unsigned long long)>
c002031a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020321:	89 c6                	mov    esi,eax
c0020323:	89 d7                	mov    edi,edx
c0020325:	e8 43 f5 ff ff       	call   c001f86d <Vm::fpuGetReg(int)>
c002032a:	57                   	push   edi
c002032b:	56                   	push   esi
c002032c:	52                   	push   edx
c002032d:	50                   	push   eax
c002032e:	e8 08 f5 ff ff       	call   c001f83b <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020333:	e9 86 00 00 00       	jmp    c00203be <Vm::x87Handler(regs*)+0xa14>
c0020338:	31 c0                	xor    eax,eax
c002033a:	80 fa 07             	cmp    dl,0x7
c002033d:	0f 85 c8 00 00 00    	jne    c002040b <Vm::x87Handler(regs*)+0xa61>
c0020343:	83 ec 0c             	sub    esp,0xc
c0020346:	6a 00                	push   0x0
c0020348:	e8 20 f5 ff ff       	call   c001f86d <Vm::fpuGetReg(int)>
c002034d:	89 c7                	mov    edi,eax
c002034f:	89 d5                	mov    ebp,edx
c0020351:	58                   	pop    eax
c0020352:	5a                   	pop    edx
c0020353:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020356:	ff 36                	push   DWORD PTR [esi]
c0020358:	e8 a4 f2 ff ff       	call   c001f601 <Vm::fpu64ToInternal(unsigned long long)>
c002035d:	83 c4 10             	add    esp,0x10
c0020360:	55                   	push   ebp
c0020361:	57                   	push   edi
c0020362:	52                   	push   edx
c0020363:	50                   	push   eax
c0020364:	e8 d2 f4 ff ff       	call   c001f83b <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020369:	83 c4 0c             	add    esp,0xc
c002036c:	eb 53                	jmp    c00203c1 <Vm::x87Handler(regs*)+0xa17>
c002036e:	31 c0                	xor    eax,eax
c0020370:	80 fa 02             	cmp    dl,0x2
c0020373:	0f 85 92 00 00 00    	jne    c002040b <Vm::x87Handler(regs*)+0xa61>
c0020379:	83 ec 0c             	sub    esp,0xc
c002037c:	6a 00                	push   0x0
c002037e:	e8 ea f4 ff ff       	call   c001f86d <Vm::fpuGetReg(int)>
c0020383:	59                   	pop    ecx
c0020384:	5f                   	pop    edi
c0020385:	52                   	push   edx
c0020386:	50                   	push   eax
c0020387:	e8 27 f2 ff ff       	call   c001f5b3 <Vm::fpuInternalTo64(unsigned long long)>
c002038c:	eb 70                	jmp    c00203fe <Vm::x87Handler(regs*)+0xa54>
c002038e:	31 c0                	xor    eax,eax
c0020390:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0020395:	75 74                	jne    c002040b <Vm::x87Handler(regs*)+0xa61>
c0020397:	50                   	push   eax
c0020398:	50                   	push   eax
c0020399:	0f b7 06             	movzx  eax,WORD PTR [esi]
c002039c:	31 d2                	xor    edx,edx
c002039e:	52                   	push   edx
c002039f:	50                   	push   eax
c00203a0:	e8 f6 f2 ff ff       	call   c001f69b <Vm::fpuLongToFloat(long long)>
c00203a5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203ac:	89 c6                	mov    esi,eax
c00203ae:	89 d7                	mov    edi,edx
c00203b0:	e8 b8 f4 ff ff       	call   c001f86d <Vm::fpuGetReg(int)>
c00203b5:	57                   	push   edi
c00203b6:	56                   	push   esi
c00203b7:	52                   	push   edx
c00203b8:	50                   	push   eax
c00203b9:	e8 5e f4 ff ff       	call   c001f81c <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00203be:	83 c4 1c             	add    esp,0x1c
c00203c1:	52                   	push   edx
c00203c2:	50                   	push   eax
c00203c3:	6a 00                	push   0x0
c00203c5:	e8 e6 f4 ff ff       	call   c001f8b0 <Vm::fpuSetReg(int, unsigned long long)>
c00203ca:	e9 f2 f7 ff ff       	jmp    c001fbc1 <Vm::x87Handler(regs*)+0x217>
c00203cf:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00203d3:	80 fa 05             	cmp    dl,0x5
c00203d6:	75 11                	jne    c00203e9 <Vm::x87Handler(regs*)+0xa3f>
c00203d8:	55                   	push   ebp
c00203d9:	55                   	push   ebp
c00203da:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203dd:	ff 36                	push   DWORD PTR [esi]
c00203df:	e8 81 f2 ff ff       	call   c001f665 <Vm::fpuULongToFloat(unsigned long long)>
c00203e4:	e9 cf f7 ff ff       	jmp    c001fbb8 <Vm::x87Handler(regs*)+0x20e>
c00203e9:	31 c0                	xor    eax,eax
c00203eb:	80 fa 07             	cmp    dl,0x7
c00203ee:	75 1b                	jne    c002040b <Vm::x87Handler(regs*)+0xa61>
c00203f0:	e8 63 f5 ff ff       	call   c001f958 <Vm::fpuPop()>
c00203f5:	51                   	push   ecx
c00203f6:	51                   	push   ecx
c00203f7:	52                   	push   edx
c00203f8:	50                   	push   eax
c00203f9:	e8 0c f2 ff ff       	call   c001f60a <Vm::fpuFloatToLong(unsigned long long)>
c00203fe:	83 c4 10             	add    esp,0x10
c0020401:	89 06                	mov    DWORD PTR [esi],eax
c0020403:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0020406:	e9 f8 f7 ff ff       	jmp    c001fc03 <Vm::x87Handler(regs*)+0x259>
c002040b:	83 c4 1c             	add    esp,0x1c
c002040e:	5b                   	pop    ebx
c002040f:	5e                   	pop    esi
c0020410:	5f                   	pop    edi
c0020411:	5d                   	pop    ebp
c0020412:	c3                   	ret    

c0020413 <__static_initialization_and_destruction_0(int, int)>:
c0020413:	83 ec 0c             	sub    esp,0xc
c0020416:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c002041b:	75 1a                	jne    c0020437 <__static_initialization_and_destruction_0(int, int)+0x24>
c002041d:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0020425:	75 10                	jne    c0020437 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020427:	83 ec 0c             	sub    esp,0xc
c002042a:	68 40 1a 03 c0       	push   0xc0031a40
c002042f:	e8 f8 88 00 00       	call   c0028d2c <Vm::_FPUState::_FPUState()>
c0020434:	83 c4 10             	add    esp,0x10
c0020437:	90                   	nop
c0020438:	83 c4 0c             	add    esp,0xc
c002043b:	c3                   	ret    

c002043c <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c002043c:	83 ec 0c             	sub    esp,0xc
c002043f:	83 ec 08             	sub    esp,0x8
c0020442:	68 ff ff 00 00       	push   0xffff
c0020447:	6a 01                	push   0x1
c0020449:	e8 c5 ff ff ff       	call   c0020413 <__static_initialization_and_destruction_0(int, int)>
c002044e:	83 c4 10             	add    esp,0x10
c0020451:	83 c4 0c             	add    esp,0xc
c0020454:	c3                   	ret    
c0020455:	90                   	nop

c0020456 <FAT::getName()>:
c0020456:	b8 3c c8 02 c0       	mov    eax,0xc002c83c
c002045b:	c3                   	ret    

c002045c <FAT::tell(void*, unsigned long long*)>:
c002045c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020461:	75 06                	jne    c0020469 <FAT::tell(void*, unsigned long long*)+0xd>
c0020463:	b8 04 00 00 00       	mov    eax,0x4
c0020468:	c3                   	ret    
c0020469:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002046e:	75 06                	jne    c0020476 <FAT::tell(void*, unsigned long long*)+0x1a>
c0020470:	b8 04 00 00 00       	mov    eax,0x4
c0020475:	c3                   	ret    
c0020476:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002047a:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c002047d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0020480:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020484:	89 01                	mov    DWORD PTR [ecx],eax
c0020486:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020489:	b8 00 00 00 00       	mov    eax,0x0
c002048e:	c3                   	ret    
c002048f:	90                   	nop

c0020490 <FAT::stat(void*, unsigned long long*)>:
c0020490:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020495:	75 06                	jne    c002049d <FAT::stat(void*, unsigned long long*)+0xd>
c0020497:	b8 04 00 00 00       	mov    eax,0x4
c002049c:	c3                   	ret    
c002049d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00204a2:	75 06                	jne    c00204aa <FAT::stat(void*, unsigned long long*)+0x1a>
c00204a4:	b8 04 00 00 00       	mov    eax,0x4
c00204a9:	c3                   	ret    
c00204aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00204ae:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00204b1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00204b4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00204b8:	89 01                	mov    DWORD PTR [ecx],eax
c00204ba:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00204bd:	b8 00 00 00 00       	mov    eax,0x0
c00204c2:	c3                   	ret    
c00204c3:	90                   	nop

c00204c4 <FAT::~FAT()>:
c00204c4:	83 ec 0c             	sub    esp,0xc
c00204c7:	ba cc c8 02 c0       	mov    edx,0xc002c8cc
c00204cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204d0:	89 10                	mov    DWORD PTR [eax],edx
c00204d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204d6:	83 ec 0c             	sub    esp,0xc
c00204d9:	50                   	push   eax
c00204da:	e8 13 2c ff ff       	call   c00130f2 <Filesystem::~Filesystem()>
c00204df:	83 c4 10             	add    esp,0x10
c00204e2:	90                   	nop
c00204e3:	83 c4 0c             	add    esp,0xc
c00204e6:	c3                   	ret    
c00204e7:	90                   	nop

c00204e8 <FAT::~FAT()>:
c00204e8:	83 ec 0c             	sub    esp,0xc
c00204eb:	83 ec 0c             	sub    esp,0xc
c00204ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204f2:	e8 cd ff ff ff       	call   c00204c4 <FAT::~FAT()>
c00204f7:	83 c4 10             	add    esp,0x10
c00204fa:	83 ec 08             	sub    esp,0x8
c00204fd:	6a 08                	push   0x8
c00204ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020503:	e8 db 27 ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0020508:	83 c4 10             	add    esp,0x10
c002050b:	83 c4 0c             	add    esp,0xc
c002050e:	c3                   	ret    
c002050f:	90                   	nop

c0020510 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0020510:	83 ec 1c             	sub    esp,0x1c
c0020513:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c002051a:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c002051f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020523:	8b 04 85 c0 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce540]
c002052a:	83 f8 ff             	cmp    eax,0xffffffff
c002052d:	75 34                	jne    c0020563 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c002052f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020533:	88 c2                	mov    dl,al
c0020535:	a1 a0 1a 03 c0       	mov    eax,ds:0xc0031aa0
c002053a:	01 d0                	add    eax,edx
c002053c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020540:	8b 15 a0 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031aa0
c0020546:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002054a:	89 14 85 c0 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce540],edx
c0020551:	a1 a0 1a 03 c0       	mov    eax,ds:0xc0031aa0
c0020556:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002055a:	89 14 85 40 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce4c0],edx
c0020561:	eb 17                	jmp    c002057a <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0020563:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020567:	88 c2                	mov    dl,al
c0020569:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002056d:	8b 04 85 c0 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce540]
c0020574:	01 d0                	add    eax,edx
c0020576:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002057a:	83 ec 04             	sub    esp,0x4
c002057d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020581:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020585:	8d 44 24 15          	lea    eax,[esp+0x15]
c0020589:	50                   	push   eax
c002058a:	e8 b1 67 fe ff       	call   c0006d40 <f_getlabel>
c002058f:	83 c4 10             	add    esp,0x10
c0020592:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020596:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002059b:	75 07                	jne    c00205a4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c002059d:	b8 00 00 00 00       	mov    eax,0x0
c00205a2:	eb 05                	jmp    c00205a9 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c00205a4:	b8 01 00 00 00       	mov    eax,0x1
c00205a9:	83 c4 1c             	add    esp,0x1c
c00205ac:	c3                   	ret    
c00205ad:	90                   	nop

c00205ae <FAT::setlabel(LogicalDisk*, int, char*)>:
c00205ae:	57                   	push   edi
c00205af:	83 ec 58             	sub    esp,0x58
c00205b2:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00205ba:	8d 54 24 10          	lea    edx,[esp+0x10]
c00205be:	b9 0f 00 00 00       	mov    ecx,0xf
c00205c3:	b8 00 00 00 00       	mov    eax,0x0
c00205c8:	fc                   	cld    
c00205c9:	89 d7                	mov    edi,edx
c00205cb:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00205cd:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00205d1:	8b 04 85 c0 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce540]
c00205d8:	83 f8 ff             	cmp    eax,0xffffffff
c00205db:	75 34                	jne    c0020611 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c00205dd:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00205e1:	88 c2                	mov    dl,al
c00205e3:	a1 a0 1a 03 c0       	mov    eax,ds:0xc0031aa0
c00205e8:	01 d0                	add    eax,edx
c00205ea:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00205ee:	8b 15 a0 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031aa0
c00205f4:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00205f8:	89 14 85 c0 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce540],edx
c00205ff:	a1 a0 1a 03 c0       	mov    eax,ds:0xc0031aa0
c0020604:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0020608:	89 14 85 40 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce4c0],edx
c002060f:	eb 17                	jmp    c0020628 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0020611:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020615:	88 c2                	mov    dl,al
c0020617:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002061b:	8b 04 85 c0 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce540]
c0020622:	01 d0                	add    eax,edx
c0020624:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020628:	83 ec 08             	sub    esp,0x8
c002062b:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c002062f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020633:	50                   	push   eax
c0020634:	e8 43 03 fe ff       	call   c000097c <strcat>
c0020639:	83 c4 10             	add    esp,0x10
c002063c:	83 ec 0c             	sub    esp,0xc
c002063f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020643:	50                   	push   eax
c0020644:	e8 e5 68 fe ff       	call   c0006f2e <f_setlabel>
c0020649:	83 c4 10             	add    esp,0x10
c002064c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020650:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0020655:	75 07                	jne    c002065e <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0020657:	b8 00 00 00 00       	mov    eax,0x0
c002065c:	eb 05                	jmp    c0020663 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c002065e:	b8 01 00 00 00       	mov    eax,0x1
c0020663:	83 c4 58             	add    esp,0x58
c0020666:	5f                   	pop    edi
c0020667:	c3                   	ret    

c0020668 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0020668:	83 ec 2c             	sub    esp,0x2c
c002066b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0020673:	83 ec 08             	sub    esp,0x8
c0020676:	68 60 c8 02 c0       	push   0xc002c860
c002067b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002067f:	e8 44 02 fe ff       	call   c00008c8 <strcmp>
c0020684:	83 c4 10             	add    esp,0x10
c0020687:	85 c0                	test   eax,eax
c0020689:	0f 94 c0             	sete   al
c002068c:	84 c0                	test   al,al
c002068e:	74 0d                	je     c002069d <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020690:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020698:	e9 a6 00 00 00       	jmp    c0020743 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002069d:	83 ec 08             	sub    esp,0x8
c00206a0:	68 52 c8 02 c0       	push   0xc002c852
c00206a5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00206a9:	e8 1a 02 fe ff       	call   c00008c8 <strcmp>
c00206ae:	83 c4 10             	add    esp,0x10
c00206b1:	85 c0                	test   eax,eax
c00206b3:	0f 94 c0             	sete   al
c00206b6:	84 c0                	test   al,al
c00206b8:	74 0a                	je     c00206c4 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c00206ba:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00206c2:	eb 7f                	jmp    c0020743 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00206c4:	83 ec 08             	sub    esp,0x8
c00206c7:	68 58 c8 02 c0       	push   0xc002c858
c00206cc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00206d0:	e8 f3 01 fe ff       	call   c00008c8 <strcmp>
c00206d5:	83 c4 10             	add    esp,0x10
c00206d8:	85 c0                	test   eax,eax
c00206da:	0f 94 c0             	sete   al
c00206dd:	84 c0                	test   al,al
c00206df:	74 0a                	je     c00206eb <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c00206e1:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00206e9:	eb 58                	jmp    c0020743 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00206eb:	83 ec 08             	sub    esp,0x8
c00206ee:	68 8c 94 02 c0       	push   0xc002948c
c00206f3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00206f7:	e8 cc 01 fe ff       	call   c00008c8 <strcmp>
c00206fc:	83 c4 10             	add    esp,0x10
c00206ff:	85 c0                	test   eax,eax
c0020701:	0f 94 c0             	sete   al
c0020704:	84 c0                	test   al,al
c0020706:	74 0a                	je     c0020712 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0020708:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0020710:	eb 31                	jmp    c0020743 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020712:	83 ec 08             	sub    esp,0x8
c0020715:	68 5e c8 02 c0       	push   0xc002c85e
c002071a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002071e:	e8 a5 01 fe ff       	call   c00008c8 <strcmp>
c0020723:	83 c4 10             	add    esp,0x10
c0020726:	85 c0                	test   eax,eax
c0020728:	0f 94 c0             	sete   al
c002072b:	84 c0                	test   al,al
c002072d:	74 0a                	je     c0020739 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c002072f:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0020737:	eb 0a                	jmp    c0020743 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020739:	b8 08 00 00 00       	mov    eax,0x8
c002073e:	e9 04 01 00 00       	jmp    c0020847 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020743:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c002074a:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c002074f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020753:	8b 04 85 c0 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce540]
c002075a:	83 f8 ff             	cmp    eax,0xffffffff
c002075d:	75 34                	jne    c0020793 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c002075f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020763:	88 c2                	mov    dl,al
c0020765:	a1 a0 1a 03 c0       	mov    eax,ds:0xc0031aa0
c002076a:	01 d0                	add    eax,edx
c002076c:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020770:	8b 15 a0 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031aa0
c0020776:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002077a:	89 14 85 c0 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce540],edx
c0020781:	a1 a0 1a 03 c0       	mov    eax,ds:0xc0031aa0
c0020786:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c002078a:	89 14 85 40 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce4c0],edx
c0020791:	eb 17                	jmp    c00207aa <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020793:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020797:	88 c2                	mov    dl,al
c0020799:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002079d:	8b 04 85 c0 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce540]
c00207a4:	01 d0                	add    eax,edx
c00207a6:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00207aa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00207ae:	88 04 24             	mov    BYTE PTR [esp],al
c00207b1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00207b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00207b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00207c1:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00207c6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00207ce:	83 ec 0c             	sub    esp,0xc
c00207d1:	68 00 20 00 00       	push   0x2000
c00207d6:	e8 70 f0 fe ff       	call   c000f84b <malloc>
c00207db:	83 c4 10             	add    esp,0x10
c00207de:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00207e2:	68 00 20 00 00       	push   0x2000
c00207e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00207eb:	8d 44 24 08          	lea    eax,[esp+0x8]
c00207ef:	50                   	push   eax
c00207f0:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00207f4:	50                   	push   eax
c00207f5:	e8 7f 6b fe ff       	call   c0007379 <f_mkfs>
c00207fa:	83 c4 10             	add    esp,0x10
c00207fd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020801:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020806:	75 07                	jne    c002080f <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0020808:	b8 00 00 00 00       	mov    eax,0x0
c002080d:	eb 38                	jmp    c0020847 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c002080f:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0020814:	75 17                	jne    c002082d <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0020816:	83 ec 0c             	sub    esp,0xc
c0020819:	68 9c c8 02 c0       	push   0xc002c89c
c002081e:	e8 a0 25 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0020823:	83 c4 10             	add    esp,0x10
c0020826:	b8 09 00 00 00       	mov    eax,0x9
c002082b:	eb 1a                	jmp    c0020847 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c002082d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020831:	83 ec 08             	sub    esp,0x8
c0020834:	50                   	push   eax
c0020835:	68 64 c8 02 c0       	push   0xc002c864
c002083a:	e8 84 25 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c002083f:	83 c4 10             	add    esp,0x10
c0020842:	b8 01 00 00 00       	mov    eax,0x1
c0020847:	83 c4 2c             	add    esp,0x2c
c002084a:	c3                   	ret    
c002084b:	90                   	nop

c002084c <FAT::tryMount(LogicalDisk*, int)>:
c002084c:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020852:	a1 a0 1a 03 c0       	mov    eax,ds:0xc0031aa0
c0020857:	83 f8 14             	cmp    eax,0x14
c002085a:	75 17                	jne    c0020873 <FAT::tryMount(LogicalDisk*, int)+0x27>
c002085c:	83 ec 0c             	sub    esp,0xc
c002085f:	68 76 c8 02 c0       	push   0xc002c876
c0020864:	e8 98 9c ff ff       	call   c001a501 <Krnl::panic(char const*)>
c0020869:	83 c4 10             	add    esp,0x10
c002086c:	b0 00                	mov    al,0x0
c002086e:	e9 d7 01 00 00       	jmp    c0020a4a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020873:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c002087a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020880:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020886:	3d 00 02 00 00       	cmp    eax,0x200
c002088b:	74 07                	je     c0020894 <FAT::tryMount(LogicalDisk*, int)+0x48>
c002088d:	b0 00                	mov    al,0x0
c002088f:	e9 b6 01 00 00       	jmp    c0020a4a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020894:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c002089c:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00208a3:	8b 04 85 c0 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce540]
c00208aa:	83 f8 ff             	cmp    eax,0xffffffff
c00208ad:	74 07                	je     c00208b6 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c00208af:	b0 01                	mov    al,0x1
c00208b1:	e9 94 01 00 00       	jmp    c0020a4a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00208b6:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c00208c0:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c00208c8:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c00208cf:	88 c2                	mov    dl,al
c00208d1:	a1 a0 1a 03 c0       	mov    eax,ds:0xc0031aa0
c00208d6:	01 d0                	add    eax,edx
c00208d8:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c00208df:	8b 15 a0 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031aa0
c00208e5:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00208ec:	89 14 85 c0 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce540],edx
c00208f3:	a1 a0 1a 03 c0       	mov    eax,ds:0xc0031aa0
c00208f8:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c00208ff:	89 14 85 40 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce4c0],edx
c0020906:	83 ec 0c             	sub    esp,0xc
c0020909:	68 54 02 00 00       	push   0x254
c002090e:	e8 38 ef fe ff       	call   c000f84b <malloc>
c0020913:	83 c4 10             	add    esp,0x10
c0020916:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c002091d:	83 ec 04             	sub    esp,0x4
c0020920:	6a 00                	push   0x0
c0020922:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020929:	50                   	push   eax
c002092a:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020931:	e8 01 46 fe ff       	call   c0004f37 <f_mount>
c0020936:	83 c4 10             	add    esp,0x10
c0020939:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020940:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020948:	74 19                	je     c0020963 <FAT::tryMount(LogicalDisk*, int)+0x117>
c002094a:	83 ec 0c             	sub    esp,0xc
c002094d:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020954:	e8 12 ef fe ff       	call   c000f86b <rfree>
c0020959:	83 c4 10             	add    esp,0x10
c002095c:	b0 00                	mov    al,0x0
c002095e:	e9 e7 00 00 00       	jmp    c0020a4a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020963:	83 ec 04             	sub    esp,0x4
c0020966:	68 00 01 00 00       	push   0x100
c002096b:	6a 00                	push   0x0
c002096d:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020974:	50                   	push   eax
c0020975:	e8 06 fe fd ff       	call   c0000780 <memset>
c002097a:	83 c4 10             	add    esp,0x10
c002097d:	83 ec 08             	sub    esp,0x8
c0020980:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020987:	50                   	push   eax
c0020988:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002098f:	50                   	push   eax
c0020990:	e8 e7 ff fd ff       	call   c000097c <strcat>
c0020995:	83 c4 10             	add    esp,0x10
c0020998:	83 ec 08             	sub    esp,0x8
c002099b:	68 84 c8 02 c0       	push   0xc002c884
c00209a0:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00209a7:	50                   	push   eax
c00209a8:	e8 cf ff fd ff       	call   c000097c <strcat>
c00209ad:	83 c4 10             	add    esp,0x10
c00209b0:	83 ec 04             	sub    esp,0x4
c00209b3:	6a 01                	push   0x1
c00209b5:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c00209bc:	50                   	push   eax
c00209bd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00209c1:	50                   	push   eax
c00209c2:	e8 d2 45 fe ff       	call   c0004f99 <f_open>
c00209c7:	83 c4 10             	add    esp,0x10
c00209ca:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00209d1:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00209d8:	85 c0                	test   eax,eax
c00209da:	74 0a                	je     c00209e6 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c00209dc:	78 2d                	js     c0020a0b <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00209de:	83 e8 04             	sub    eax,0x4
c00209e1:	83 f8 01             	cmp    eax,0x1
c00209e4:	77 25                	ja     c0020a0b <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00209e6:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c00209ee:	83 ec 0c             	sub    esp,0xc
c00209f1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00209f5:	50                   	push   eax
c00209f6:	e8 f0 50 fe ff       	call   c0005aeb <f_close>
c00209fb:	83 c4 10             	add    esp,0x10
c00209fe:	90                   	nop
c00209ff:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020a07:	74 3a                	je     c0020a43 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020a09:	eb 2d                	jmp    c0020a38 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020a0b:	83 ec 0c             	sub    esp,0xc
c0020a0e:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020a15:	e8 51 ee fe ff       	call   c000f86b <rfree>
c0020a1a:	83 c4 10             	add    esp,0x10
c0020a1d:	83 ec 04             	sub    esp,0x4
c0020a20:	6a 00                	push   0x0
c0020a22:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020a29:	50                   	push   eax
c0020a2a:	6a 00                	push   0x0
c0020a2c:	e8 06 45 fe ff       	call   c0004f37 <f_mount>
c0020a31:	83 c4 10             	add    esp,0x10
c0020a34:	b0 00                	mov    al,0x0
c0020a36:	eb 12                	jmp    c0020a4a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a38:	a1 a0 1a 03 c0       	mov    eax,ds:0xc0031aa0
c0020a3d:	40                   	inc    eax
c0020a3e:	a3 a0 1a 03 c0       	mov    ds:0xc0031aa0,eax
c0020a43:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020a4a:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020a50:	c3                   	ret    
c0020a51:	90                   	nop

c0020a52 <FAT::getFileFirstSector(char const*)>:
c0020a52:	53                   	push   ebx
c0020a53:	83 ec 28             	sub    esp,0x28
c0020a56:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c0020a5e:	83 ec 0c             	sub    esp,0xc
c0020a61:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020a65:	e8 e1 ed fe ff       	call   c000f84b <malloc>
c0020a6a:	83 c4 10             	add    esp,0x10
c0020a6d:	89 c3                	mov    ebx,eax
c0020a6f:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0020a74:	83 ec 04             	sub    esp,0x4
c0020a77:	50                   	push   eax
c0020a78:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020a7c:	53                   	push   ebx
c0020a7d:	e8 a0 28 ff ff       	call   c0013322 <File::File(char const*, Process*)>
c0020a82:	83 c4 10             	add    esp,0x10
c0020a85:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0020a89:	83 ec 08             	sub    esp,0x8
c0020a8c:	6a 01                	push   0x1
c0020a8e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020a92:	e8 ef 28 ff ff       	call   c0013386 <File::open(FileOpenMode)>
c0020a97:	83 c4 10             	add    esp,0x10
c0020a9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020a9e:	8b 00                	mov    eax,DWORD PTR [eax]
c0020aa0:	83 c0 0c             	add    eax,0xc
c0020aa3:	8b 00                	mov    eax,DWORD PTR [eax]
c0020aa5:	83 ec 0c             	sub    esp,0xc
c0020aa8:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020aac:	52                   	push   edx
c0020aad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0020ab1:	52                   	push   edx
c0020ab2:	6a 00                	push   0x0
c0020ab4:	6a 04                	push   0x4
c0020ab6:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0020aba:	ff d0                	call   eax
c0020abc:	83 c4 20             	add    esp,0x20
c0020abf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020ac3:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0020ac9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020acd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020ad1:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0020ad4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0020ad7:	83 ec 04             	sub    esp,0x4
c0020ada:	52                   	push   edx
c0020adb:	50                   	push   eax
c0020adc:	68 8f c8 02 c0       	push   0xc002c88f
c0020ae1:	e8 dd 22 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0020ae6:	83 c4 10             	add    esp,0x10
c0020ae9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020aed:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0020af0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0020af3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020af7:	83 ec 0c             	sub    esp,0xc
c0020afa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020afe:	e8 e1 28 ff ff       	call   c00133e4 <File::close()>
c0020b03:	83 c4 10             	add    esp,0x10
c0020b06:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020b0a:	ba 00 00 00 00       	mov    edx,0x0
c0020b0f:	83 c4 28             	add    esp,0x28
c0020b12:	5b                   	pop    ebx
c0020b13:	c3                   	ret    

c0020b14 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020b14:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0020b1a:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0020b22:	74 0a                	je     c0020b2e <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0020b24:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0020b2c:	75 0a                	jne    c0020b38 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0020b2e:	b8 04 00 00 00       	mov    eax,0x4
c0020b33:	e9 db 00 00 00       	jmp    c0020c13 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020b38:	83 ec 08             	sub    esp,0x8
c0020b3b:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020b42:	50                   	push   eax
c0020b43:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0020b4a:	e8 a6 55 fe ff       	call   c00060f5 <f_readdir>
c0020b4f:	83 c4 10             	add    esp,0x10
c0020b52:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0020b59:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0020b5f:	83 ec 0c             	sub    esp,0xc
c0020b62:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020b69:	83 c0 1a             	add    eax,0x1a
c0020b6c:	50                   	push   eax
c0020b6d:	e8 2a fc fd ff       	call   c000079c <strlen>
c0020b72:	83 c4 10             	add    esp,0x10
c0020b75:	ba 00 00 00 00       	mov    edx,0x0
c0020b7a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020b7e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020b82:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0020b89:	0f b6 c0             	movzx  eax,al
c0020b8c:	83 e0 10             	and    eax,0x10
c0020b8f:	74 07                	je     c0020b98 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0020b91:	b8 02 00 00 00       	mov    eax,0x2
c0020b96:	eb 05                	jmp    c0020b9d <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0020b98:	b8 01 00 00 00       	mov    eax,0x1
c0020b9d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020ba1:	83 ec 08             	sub    esp,0x8
c0020ba4:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020bab:	83 c0 1a             	add    eax,0x1a
c0020bae:	50                   	push   eax
c0020baf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020bb3:	83 c0 10             	add    eax,0x10
c0020bb6:	50                   	push   eax
c0020bb7:	e8 80 fc fd ff       	call   c000083c <strcpy>
c0020bbc:	83 c4 10             	add    esp,0x10
c0020bbf:	83 ec 04             	sub    esp,0x4
c0020bc2:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0020bc9:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020bcd:	50                   	push   eax
c0020bce:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0020bd5:	e8 72 fb fd ff       	call   c000074c <memcpy>
c0020bda:	83 c4 10             	add    esp,0x10
c0020bdd:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0020be4:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020bea:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0020bf1:	84 c0                	test   al,al
c0020bf3:	75 07                	jne    c0020bfc <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0020bf5:	b8 07 00 00 00       	mov    eax,0x7
c0020bfa:	eb 17                	jmp    c0020c13 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020bfc:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0020c03:	85 c0                	test   eax,eax
c0020c05:	75 07                	jne    c0020c0e <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0020c07:	b8 00 00 00 00       	mov    eax,0x0
c0020c0c:	eb 05                	jmp    c0020c13 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020c0e:	b8 01 00 00 00       	mov    eax,0x1
c0020c13:	81 c4 3c 02 00 00    	add    esp,0x23c
c0020c19:	c3                   	ret    

c0020c1a <FAT::read(void*, unsigned long, void*, int*)>:
c0020c1a:	83 ec 1c             	sub    esp,0x1c
c0020c1d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020c22:	74 07                	je     c0020c2b <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020c24:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020c29:	75 07                	jne    c0020c32 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020c2b:	b8 04 00 00 00       	mov    eax,0x4
c0020c30:	eb 3d                	jmp    c0020c6f <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020c32:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c36:	50                   	push   eax
c0020c37:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020c3b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020c3f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c43:	e8 8d 47 fe ff       	call   c00053d5 <f_read>
c0020c48:	83 c4 10             	add    esp,0x10
c0020c4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020c53:	89 c2                	mov    edx,eax
c0020c55:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020c59:	89 10                	mov    DWORD PTR [eax],edx
c0020c5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020c5f:	85 c0                	test   eax,eax
c0020c61:	75 07                	jne    c0020c6a <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020c63:	b8 00 00 00 00       	mov    eax,0x0
c0020c68:	eb 05                	jmp    c0020c6f <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020c6a:	b8 01 00 00 00       	mov    eax,0x1
c0020c6f:	83 c4 1c             	add    esp,0x1c
c0020c72:	c3                   	ret    
c0020c73:	90                   	nop

c0020c74 <FAT::write(void*, unsigned long, void*, int*)>:
c0020c74:	83 ec 1c             	sub    esp,0x1c
c0020c77:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020c7c:	74 07                	je     c0020c85 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020c7e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020c83:	75 07                	jne    c0020c8c <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020c85:	b8 04 00 00 00       	mov    eax,0x4
c0020c8a:	eb 3d                	jmp    c0020cc9 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020c8c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c90:	50                   	push   eax
c0020c91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020c95:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020c99:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c9d:	e8 b3 49 fe ff       	call   c0005655 <f_write>
c0020ca2:	83 c4 10             	add    esp,0x10
c0020ca5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020ca9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020cad:	89 c2                	mov    edx,eax
c0020caf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020cb3:	89 10                	mov    DWORD PTR [eax],edx
c0020cb5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020cb9:	85 c0                	test   eax,eax
c0020cbb:	75 07                	jne    c0020cc4 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020cbd:	b8 00 00 00 00       	mov    eax,0x0
c0020cc2:	eb 05                	jmp    c0020cc9 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020cc4:	b8 01 00 00 00       	mov    eax,0x1
c0020cc9:	83 c4 1c             	add    esp,0x1c
c0020ccc:	c3                   	ret    
c0020ccd:	90                   	nop

c0020cce <FAT::close(void*)>:
c0020cce:	83 ec 1c             	sub    esp,0x1c
c0020cd1:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020cd6:	75 07                	jne    c0020cdf <FAT::close(void*)+0x11>
c0020cd8:	b8 04 00 00 00       	mov    eax,0x4
c0020cdd:	eb 36                	jmp    c0020d15 <FAT::close(void*)+0x47>
c0020cdf:	83 ec 0c             	sub    esp,0xc
c0020ce2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020ce6:	e8 00 4e fe ff       	call   c0005aeb <f_close>
c0020ceb:	83 c4 10             	add    esp,0x10
c0020cee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020cf2:	83 ec 0c             	sub    esp,0xc
c0020cf5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020cf9:	e8 5d eb fe ff       	call   c000f85b <free>
c0020cfe:	83 c4 10             	add    esp,0x10
c0020d01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d05:	85 c0                	test   eax,eax
c0020d07:	75 07                	jne    c0020d10 <FAT::close(void*)+0x42>
c0020d09:	b8 00 00 00 00       	mov    eax,0x0
c0020d0e:	eb 05                	jmp    c0020d15 <FAT::close(void*)+0x47>
c0020d10:	b8 01 00 00 00       	mov    eax,0x1
c0020d15:	83 c4 1c             	add    esp,0x1c
c0020d18:	c3                   	ret    
c0020d19:	90                   	nop

c0020d1a <FAT::closeDir(void*)>:
c0020d1a:	83 ec 1c             	sub    esp,0x1c
c0020d1d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020d22:	75 07                	jne    c0020d2b <FAT::closeDir(void*)+0x11>
c0020d24:	b8 04 00 00 00       	mov    eax,0x4
c0020d29:	eb 36                	jmp    c0020d61 <FAT::closeDir(void*)+0x47>
c0020d2b:	83 ec 0c             	sub    esp,0xc
c0020d2e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d32:	e8 9c 53 fe ff       	call   c00060d3 <f_closedir>
c0020d37:	83 c4 10             	add    esp,0x10
c0020d3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d3e:	83 ec 0c             	sub    esp,0xc
c0020d41:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d45:	e8 11 eb fe ff       	call   c000f85b <free>
c0020d4a:	83 c4 10             	add    esp,0x10
c0020d4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d51:	85 c0                	test   eax,eax
c0020d53:	75 07                	jne    c0020d5c <FAT::closeDir(void*)+0x42>
c0020d55:	b8 00 00 00 00       	mov    eax,0x0
c0020d5a:	eb 05                	jmp    c0020d61 <FAT::closeDir(void*)+0x47>
c0020d5c:	b8 01 00 00 00       	mov    eax,0x1
c0020d61:	83 c4 1c             	add    esp,0x1c
c0020d64:	c3                   	ret    
c0020d65:	90                   	nop

c0020d66 <FAT::seek(void*, unsigned long long)>:
c0020d66:	83 ec 2c             	sub    esp,0x2c
c0020d69:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020d6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020d71:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020d75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d79:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020d7e:	75 07                	jne    c0020d87 <FAT::seek(void*, unsigned long long)+0x21>
c0020d80:	b8 04 00 00 00       	mov    eax,0x4
c0020d85:	eb 2f                	jmp    c0020db6 <FAT::seek(void*, unsigned long long)+0x50>
c0020d87:	83 ec 04             	sub    esp,0x4
c0020d8a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020d8e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020d92:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020d96:	e8 7f 4d fe ff       	call   c0005b1a <f_lseek>
c0020d9b:	83 c4 10             	add    esp,0x10
c0020d9e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020da2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020da6:	85 c0                	test   eax,eax
c0020da8:	75 07                	jne    c0020db1 <FAT::seek(void*, unsigned long long)+0x4b>
c0020daa:	b8 00 00 00 00       	mov    eax,0x0
c0020daf:	eb 05                	jmp    c0020db6 <FAT::seek(void*, unsigned long long)+0x50>
c0020db1:	b8 01 00 00 00       	mov    eax,0x1
c0020db6:	83 c4 2c             	add    esp,0x2c
c0020db9:	c3                   	ret    

c0020dba <fatWrapperReadDisk>:
c0020dba:	83 ec 1c             	sub    esp,0x1c
c0020dbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020dc1:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020dc5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020dc9:	89 04 24             	mov    DWORD PTR [esp],eax
c0020dcc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020dd0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020dd4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020dd9:	8b 04 85 80 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1580]
c0020de0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020de4:	83 ec 0c             	sub    esp,0xc
c0020de7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020deb:	52                   	push   edx
c0020dec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020df0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020df4:	50                   	push   eax
c0020df5:	e8 5a 58 ff ff       	call   c0016654 <LogicalDisk::read(unsigned long long, int, void*)>
c0020dfa:	83 c4 20             	add    esp,0x20
c0020dfd:	83 c4 1c             	add    esp,0x1c
c0020e00:	c3                   	ret    

c0020e01 <fatWrapperWriteDisk>:
c0020e01:	83 ec 1c             	sub    esp,0x1c
c0020e04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e08:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020e0c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020e10:	89 04 24             	mov    DWORD PTR [esp],eax
c0020e13:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020e17:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020e1b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e20:	8b 04 85 80 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1580]
c0020e27:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e2b:	83 ec 0c             	sub    esp,0xc
c0020e2e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e32:	52                   	push   edx
c0020e33:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e37:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e3b:	50                   	push   eax
c0020e3c:	e8 7f 58 ff ff       	call   c00166c0 <LogicalDisk::write(unsigned long long, int, void*)>
c0020e41:	83 c4 20             	add    esp,0x20
c0020e44:	83 c4 1c             	add    esp,0x1c
c0020e47:	c3                   	ret    

c0020e48 <fatWrapperIoctl>:
c0020e48:	53                   	push   ebx
c0020e49:	83 ec 28             	sub    esp,0x28
c0020e4c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e50:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020e54:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020e58:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020e5c:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020e61:	75 31                	jne    c0020e94 <fatWrapperIoctl+0x4c>
c0020e63:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e67:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020e6b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e70:	8b 04 85 80 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1580]
c0020e77:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020e7d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020e83:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020e87:	66 89 02             	mov    WORD PTR [edx],ax
c0020e8a:	b8 00 00 00 00       	mov    eax,0x0
c0020e8f:	e9 b2 00 00 00       	jmp    c0020f46 <fatWrapperIoctl+0xfe>
c0020e94:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020e99:	75 6a                	jne    c0020f05 <fatWrapperIoctl+0xbd>
c0020e9b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e9f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020ea3:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020ea8:	8b 04 85 80 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1580]
c0020eaf:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020eb5:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020ebb:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020ec1:	89 c8                	mov    eax,ecx
c0020ec3:	89 da                	mov    edx,ebx
c0020ec5:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020ec9:	c1 e0 0a             	shl    eax,0xa
c0020ecc:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020ed1:	8b 0c 8d 80 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1580]
c0020ed8:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020ede:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020ee4:	89 cb                	mov    ebx,ecx
c0020ee6:	c1 fb 1f             	sar    ebx,0x1f
c0020ee9:	53                   	push   ebx
c0020eea:	51                   	push   ecx
c0020eeb:	52                   	push   edx
c0020eec:	50                   	push   eax
c0020eed:	e8 d2 5a 00 00       	call   c00269c4 <__udivdi3>
c0020ef2:	83 c4 10             	add    esp,0x10
c0020ef5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020ef9:	89 01                	mov    DWORD PTR [ecx],eax
c0020efb:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020efe:	b8 00 00 00 00       	mov    eax,0x0
c0020f03:	eb 41                	jmp    c0020f46 <fatWrapperIoctl+0xfe>
c0020f05:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020f0a:	75 07                	jne    c0020f13 <fatWrapperIoctl+0xcb>
c0020f0c:	b8 00 00 00 00       	mov    eax,0x0
c0020f11:	eb 33                	jmp    c0020f46 <fatWrapperIoctl+0xfe>
c0020f13:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020f18:	75 19                	jne    c0020f33 <fatWrapperIoctl+0xeb>
c0020f1a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f1e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020f22:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020f26:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020f2c:	b8 00 00 00 00       	mov    eax,0x0
c0020f31:	eb 13                	jmp    c0020f46 <fatWrapperIoctl+0xfe>
c0020f33:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020f38:	75 07                	jne    c0020f41 <fatWrapperIoctl+0xf9>
c0020f3a:	b8 00 00 00 00       	mov    eax,0x0
c0020f3f:	eb 05                	jmp    c0020f46 <fatWrapperIoctl+0xfe>
c0020f41:	b8 04 00 00 00       	mov    eax,0x4
c0020f46:	83 c4 28             	add    esp,0x28
c0020f49:	5b                   	pop    ebx
c0020f4a:	c3                   	ret    
c0020f4b:	90                   	nop

c0020f4c <FAT::FAT()>:
c0020f4c:	83 ec 1c             	sub    esp,0x1c
c0020f4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020f53:	83 ec 0c             	sub    esp,0xc
c0020f56:	50                   	push   eax
c0020f57:	e8 72 21 ff ff       	call   c00130ce <Filesystem::Filesystem()>
c0020f5c:	83 c4 10             	add    esp,0x10
c0020f5f:	ba cc c8 02 c0       	mov    edx,0xc002c8cc
c0020f64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020f68:	89 10                	mov    DWORD PTR [eax],edx
c0020f6a:	c7 05 a0 1a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031aa0,0x0
c0020f74:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020f7c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020f81:	7f 15                	jg     c0020f98 <FAT::FAT()+0x4c>
c0020f83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f87:	c7 04 85 c0 1a 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffce540],0xffffffff
c0020f92:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020f96:	eb e4                	jmp    c0020f7c <FAT::FAT()+0x30>
c0020f98:	90                   	nop
c0020f99:	83 c4 1c             	add    esp,0x1c
c0020f9c:	c3                   	ret    
c0020f9d:	90                   	nop

c0020f9e <FAT::fixFilepath(char*)>:
c0020f9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fa2:	8a 00                	mov    al,BYTE PTR [eax]
c0020fa4:	3c 40                	cmp    al,0x40
c0020fa6:	7e 2c                	jle    c0020fd4 <FAT::fixFilepath(char*)+0x36>
c0020fa8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fac:	8a 00                	mov    al,BYTE PTR [eax]
c0020fae:	83 e8 41             	sub    eax,0x41
c0020fb1:	88 c2                	mov    dl,al
c0020fb3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fb7:	88 10                	mov    BYTE PTR [eax],dl
c0020fb9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fbd:	8a 00                	mov    al,BYTE PTR [eax]
c0020fbf:	0f be c0             	movsx  eax,al
c0020fc2:	8b 04 85 c0 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce540]
c0020fc9:	83 c0 30             	add    eax,0x30
c0020fcc:	88 c2                	mov    dl,al
c0020fce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fd2:	88 10                	mov    BYTE PTR [eax],dl
c0020fd4:	90                   	nop
c0020fd5:	c3                   	ret    

c0020fd6 <FAT::open(char const*, void**, FileOpenMode)>:
c0020fd6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020fdc:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020fe4:	74 0a                	je     c0020ff0 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0020fe6:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020fee:	75 0a                	jne    c0020ffa <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0020ff0:	b8 04 00 00 00       	mov    eax,0x4
c0020ff5:	e9 fd 00 00 00       	jmp    c00210f7 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020ffa:	83 ec 08             	sub    esp,0x8
c0020ffd:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021004:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021008:	50                   	push   eax
c0021009:	e8 2e f8 fd ff       	call   c000083c <strcpy>
c002100e:	83 c4 10             	add    esp,0x10
c0021011:	83 ec 08             	sub    esp,0x8
c0021014:	8d 44 24 10          	lea    eax,[esp+0x10]
c0021018:	50                   	push   eax
c0021019:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021020:	e8 79 ff ff ff       	call   c0020f9e <FAT::fixFilepath(char*)>
c0021025:	83 c4 10             	add    esp,0x10
c0021028:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0021030:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021037:	83 e0 01             	and    eax,0x1
c002103a:	74 08                	je     c0021044 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c002103c:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0021044:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002104b:	83 e0 04             	and    eax,0x4
c002104e:	74 10                	je     c0021060 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0021050:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0021058:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021060:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021067:	83 e0 02             	and    eax,0x2
c002106a:	74 08                	je     c0021074 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c002106c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021074:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002107b:	83 e0 08             	and    eax,0x8
c002107e:	74 08                	je     c0021088 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0021080:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0021088:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002108f:	83 e0 10             	and    eax,0x10
c0021092:	74 08                	je     c002109c <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0021094:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c002109c:	83 ec 0c             	sub    esp,0xc
c002109f:	68 50 02 00 00       	push   0x250
c00210a4:	e8 a2 e7 fe ff       	call   c000f84b <malloc>
c00210a9:	83 c4 10             	add    esp,0x10
c00210ac:	89 c2                	mov    edx,eax
c00210ae:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00210b5:	89 10                	mov    DWORD PTR [eax],edx
c00210b7:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00210bf:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00210c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00210c8:	83 ec 04             	sub    esp,0x4
c00210cb:	52                   	push   edx
c00210cc:	8d 54 24 10          	lea    edx,[esp+0x10]
c00210d0:	52                   	push   edx
c00210d1:	50                   	push   eax
c00210d2:	e8 c2 3e fe ff       	call   c0004f99 <f_open>
c00210d7:	83 c4 10             	add    esp,0x10
c00210da:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00210e1:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00210e9:	74 07                	je     c00210f2 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c00210eb:	b8 01 00 00 00       	mov    eax,0x1
c00210f0:	eb 05                	jmp    c00210f7 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00210f2:	b8 00 00 00 00       	mov    eax,0x0
c00210f7:	81 c4 1c 01 00 00    	add    esp,0x11c
c00210fd:	c3                   	ret    

c00210fe <FAT::openDir(char const*, void**)>:
c00210fe:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021104:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002110c:	74 0a                	je     c0021118 <FAT::openDir(char const*, void**)+0x1a>
c002110e:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0021116:	75 07                	jne    c002111f <FAT::openDir(char const*, void**)+0x21>
c0021118:	b8 04 00 00 00       	mov    eax,0x4
c002111d:	eb 7d                	jmp    c002119c <FAT::openDir(char const*, void**)+0x9e>
c002111f:	83 ec 08             	sub    esp,0x8
c0021122:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021129:	8d 44 24 18          	lea    eax,[esp+0x18]
c002112d:	50                   	push   eax
c002112e:	e8 09 f7 fd ff       	call   c000083c <strcpy>
c0021133:	83 c4 10             	add    esp,0x10
c0021136:	83 ec 08             	sub    esp,0x8
c0021139:	8d 44 24 14          	lea    eax,[esp+0x14]
c002113d:	50                   	push   eax
c002113e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021145:	e8 54 fe ff ff       	call   c0020f9e <FAT::fixFilepath(char*)>
c002114a:	83 c4 10             	add    esp,0x10
c002114d:	83 ec 0c             	sub    esp,0xc
c0021150:	6a 4c                	push   0x4c
c0021152:	e8 f4 e6 fe ff       	call   c000f84b <malloc>
c0021157:	83 c4 10             	add    esp,0x10
c002115a:	89 c2                	mov    edx,eax
c002115c:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021163:	89 10                	mov    DWORD PTR [eax],edx
c0021165:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002116c:	8b 00                	mov    eax,DWORD PTR [eax]
c002116e:	83 ec 08             	sub    esp,0x8
c0021171:	8d 54 24 14          	lea    edx,[esp+0x14]
c0021175:	52                   	push   edx
c0021176:	50                   	push   eax
c0021177:	e8 55 4e fe ff       	call   c0005fd1 <f_opendir>
c002117c:	83 c4 10             	add    esp,0x10
c002117f:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021186:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c002118e:	74 07                	je     c0021197 <FAT::openDir(char const*, void**)+0x99>
c0021190:	b8 01 00 00 00       	mov    eax,0x1
c0021195:	eb 05                	jmp    c002119c <FAT::openDir(char const*, void**)+0x9e>
c0021197:	b8 00 00 00 00       	mov    eax,0x0
c002119c:	81 c4 1c 01 00 00    	add    esp,0x11c
c00211a2:	c3                   	ret    
c00211a3:	90                   	nop

c00211a4 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00211a4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00211aa:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00211b2:	75 0a                	jne    c00211be <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c00211b4:	b8 04 00 00 00       	mov    eax,0x4
c00211b9:	e9 c9 00 00 00       	jmp    c0021287 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00211be:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00211c6:	75 0a                	jne    c00211d2 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c00211c8:	b8 04 00 00 00       	mov    eax,0x4
c00211cd:	e9 b5 00 00 00       	jmp    c0021287 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00211d2:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00211da:	75 0a                	jne    c00211e6 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c00211dc:	b8 04 00 00 00       	mov    eax,0x4
c00211e1:	e9 a1 00 00 00       	jmp    c0021287 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00211e6:	83 ec 08             	sub    esp,0x8
c00211e9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00211f0:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00211f7:	50                   	push   eax
c00211f8:	e8 3f f6 fd ff       	call   c000083c <strcpy>
c00211fd:	83 c4 10             	add    esp,0x10
c0021200:	83 ec 08             	sub    esp,0x8
c0021203:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c002120a:	50                   	push   eax
c002120b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021212:	e8 87 fd ff ff       	call   c0020f9e <FAT::fixFilepath(char*)>
c0021217:	83 c4 10             	add    esp,0x10
c002121a:	83 ec 08             	sub    esp,0x8
c002121d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021221:	50                   	push   eax
c0021222:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021229:	50                   	push   eax
c002122a:	e8 61 4f fe ff       	call   c0006190 <f_stat>
c002122f:	83 c4 10             	add    esp,0x10
c0021232:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021239:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021240:	85 c0                	test   eax,eax
c0021242:	74 07                	je     c002124b <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0021244:	83 f8 04             	cmp    eax,0x4
c0021247:	74 32                	je     c002127b <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0021249:	eb 37                	jmp    c0021282 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c002124b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002124f:	0f b6 c0             	movzx  eax,al
c0021252:	83 e0 10             	and    eax,0x10
c0021255:	0f 95 c2             	setne  dl
c0021258:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c002125f:	88 10                	mov    BYTE PTR [eax],dl
c0021261:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021264:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021268:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c002126f:	89 01                	mov    DWORD PTR [ecx],eax
c0021271:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021274:	b8 00 00 00 00       	mov    eax,0x0
c0021279:	eb 0c                	jmp    c0021287 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002127b:	b8 02 00 00 00       	mov    eax,0x2
c0021280:	eb 05                	jmp    c0021287 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021282:	b8 01 00 00 00       	mov    eax,0x1
c0021287:	81 c4 2c 02 00 00    	add    esp,0x22c
c002128d:	c3                   	ret    

c002128e <FAT::unlink(char const*)>:
c002128e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021294:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002129c:	75 07                	jne    c00212a5 <FAT::unlink(char const*)+0x17>
c002129e:	b8 04 00 00 00       	mov    eax,0x4
c00212a3:	eb 5c                	jmp    c0021301 <FAT::unlink(char const*)+0x73>
c00212a5:	83 ec 08             	sub    esp,0x8
c00212a8:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00212af:	8d 44 24 18          	lea    eax,[esp+0x18]
c00212b3:	50                   	push   eax
c00212b4:	e8 83 f5 fd ff       	call   c000083c <strcpy>
c00212b9:	83 c4 10             	add    esp,0x10
c00212bc:	83 ec 08             	sub    esp,0x8
c00212bf:	8d 44 24 14          	lea    eax,[esp+0x14]
c00212c3:	50                   	push   eax
c00212c4:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00212cb:	e8 ce fc ff ff       	call   c0020f9e <FAT::fixFilepath(char*)>
c00212d0:	83 c4 10             	add    esp,0x10
c00212d3:	83 ec 0c             	sub    esp,0xc
c00212d6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00212da:	50                   	push   eax
c00212db:	e8 02 52 fe ff       	call   c00064e2 <f_unlink>
c00212e0:	83 c4 10             	add    esp,0x10
c00212e3:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00212ea:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00212f1:	85 c0                	test   eax,eax
c00212f3:	75 07                	jne    c00212fc <FAT::unlink(char const*)+0x6e>
c00212f5:	b8 00 00 00 00       	mov    eax,0x0
c00212fa:	eb 05                	jmp    c0021301 <FAT::unlink(char const*)+0x73>
c00212fc:	b8 01 00 00 00       	mov    eax,0x1
c0021301:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021307:	c3                   	ret    

c0021308 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0021308:	81 ec 2c 01 00 00    	sub    esp,0x12c
c002130e:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0021315:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c002131c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021320:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021324:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c002132c:	75 0a                	jne    c0021338 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c002132e:	b8 04 00 00 00       	mov    eax,0x4
c0021333:	e9 1c 01 00 00       	jmp    c0021454 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021338:	83 ec 08             	sub    esp,0x8
c002133b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021342:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021346:	50                   	push   eax
c0021347:	e8 f0 f4 fd ff       	call   c000083c <strcpy>
c002134c:	83 c4 10             	add    esp,0x10
c002134f:	83 ec 08             	sub    esp,0x8
c0021352:	8d 44 24 20          	lea    eax,[esp+0x20]
c0021356:	50                   	push   eax
c0021357:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c002135e:	e8 3b fc ff ff       	call   c0020f9e <FAT::fixFilepath(char*)>
c0021363:	83 c4 10             	add    esp,0x10
c0021366:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c002136e:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0021376:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002137b:	83 e0 01             	and    eax,0x1
c002137e:	74 08                	je     c0021388 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0021380:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0021388:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002138d:	83 e0 02             	and    eax,0x2
c0021390:	74 08                	je     c002139a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0021392:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c002139a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002139f:	83 e0 04             	and    eax,0x4
c00213a2:	74 08                	je     c00213ac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c00213a4:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00213ac:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00213b1:	83 e0 08             	and    eax,0x8
c00213b4:	74 08                	je     c00213be <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c00213b6:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00213be:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00213c3:	83 e0 01             	and    eax,0x1
c00213c6:	74 08                	je     c00213d0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c00213c8:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c00213d0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00213d5:	83 e0 02             	and    eax,0x2
c00213d8:	74 08                	je     c00213e2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c00213da:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c00213e2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00213e7:	83 e0 04             	and    eax,0x4
c00213ea:	74 08                	je     c00213f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c00213ec:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00213f4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00213f9:	83 e0 08             	and    eax,0x8
c00213fc:	74 08                	je     c0021406 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c00213fe:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0021406:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c002140d:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0021414:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c002141c:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0021424:	83 ec 04             	sub    esp,0x4
c0021427:	52                   	push   edx
c0021428:	50                   	push   eax
c0021429:	8d 44 24 24          	lea    eax,[esp+0x24]
c002142d:	50                   	push   eax
c002142e:	e8 51 57 fe ff       	call   c0006b84 <f_chmod>
c0021433:	83 c4 10             	add    esp,0x10
c0021436:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c002143d:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0021444:	85 c0                	test   eax,eax
c0021446:	75 07                	jne    c002144f <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0021448:	b8 00 00 00 00       	mov    eax,0x0
c002144d:	eb 05                	jmp    c0021454 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c002144f:	b8 01 00 00 00       	mov    eax,0x1
c0021454:	81 c4 2c 01 00 00    	add    esp,0x12c
c002145a:	c3                   	ret    
c002145b:	90                   	nop

c002145c <FAT::rename(char const*, char const*)>:
c002145c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0021462:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c002146a:	74 0a                	je     c0021476 <FAT::rename(char const*, char const*)+0x1a>
c002146c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0021474:	75 0a                	jne    c0021480 <FAT::rename(char const*, char const*)+0x24>
c0021476:	b8 04 00 00 00       	mov    eax,0x4
c002147b:	e9 98 00 00 00       	jmp    c0021518 <FAT::rename(char const*, char const*)+0xbc>
c0021480:	83 ec 08             	sub    esp,0x8
c0021483:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002148a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021491:	50                   	push   eax
c0021492:	e8 a5 f3 fd ff       	call   c000083c <strcpy>
c0021497:	83 c4 10             	add    esp,0x10
c002149a:	83 ec 08             	sub    esp,0x8
c002149d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00214a4:	50                   	push   eax
c00214a5:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00214ac:	e8 ed fa ff ff       	call   c0020f9e <FAT::fixFilepath(char*)>
c00214b1:	83 c4 10             	add    esp,0x10
c00214b4:	83 ec 08             	sub    esp,0x8
c00214b7:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00214be:	8d 44 24 18          	lea    eax,[esp+0x18]
c00214c2:	50                   	push   eax
c00214c3:	e8 74 f3 fd ff       	call   c000083c <strcpy>
c00214c8:	83 c4 10             	add    esp,0x10
c00214cb:	83 ec 08             	sub    esp,0x8
c00214ce:	8d 44 24 14          	lea    eax,[esp+0x14]
c00214d2:	50                   	push   eax
c00214d3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00214da:	e8 bf fa ff ff       	call   c0020f9e <FAT::fixFilepath(char*)>
c00214df:	83 c4 10             	add    esp,0x10
c00214e2:	83 ec 08             	sub    esp,0x8
c00214e5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00214e9:	50                   	push   eax
c00214ea:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00214f1:	50                   	push   eax
c00214f2:	e8 9a 53 fe ff       	call   c0006891 <f_rename>
c00214f7:	83 c4 10             	add    esp,0x10
c00214fa:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0021501:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0021508:	85 c0                	test   eax,eax
c002150a:	75 07                	jne    c0021513 <FAT::rename(char const*, char const*)+0xb7>
c002150c:	b8 00 00 00 00       	mov    eax,0x0
c0021511:	eb 05                	jmp    c0021518 <FAT::rename(char const*, char const*)+0xbc>
c0021513:	b8 01 00 00 00       	mov    eax,0x1
c0021518:	81 c4 1c 02 00 00    	add    esp,0x21c
c002151e:	c3                   	ret    
c002151f:	90                   	nop

c0021520 <FAT::mkdir(char const*)>:
c0021520:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021526:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002152e:	75 07                	jne    c0021537 <FAT::mkdir(char const*)+0x17>
c0021530:	b8 04 00 00 00       	mov    eax,0x4
c0021535:	eb 5c                	jmp    c0021593 <FAT::mkdir(char const*)+0x73>
c0021537:	83 ec 08             	sub    esp,0x8
c002153a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021541:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021545:	50                   	push   eax
c0021546:	e8 f1 f2 fd ff       	call   c000083c <strcpy>
c002154b:	83 c4 10             	add    esp,0x10
c002154e:	83 ec 08             	sub    esp,0x8
c0021551:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021555:	50                   	push   eax
c0021556:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002155d:	e8 3c fa ff ff       	call   c0020f9e <FAT::fixFilepath(char*)>
c0021562:	83 c4 10             	add    esp,0x10
c0021565:	83 ec 0c             	sub    esp,0xc
c0021568:	8d 44 24 18          	lea    eax,[esp+0x18]
c002156c:	50                   	push   eax
c002156d:	e8 f3 50 fe ff       	call   c0006665 <f_mkdir>
c0021572:	83 c4 10             	add    esp,0x10
c0021575:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002157c:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021583:	85 c0                	test   eax,eax
c0021585:	75 07                	jne    c002158e <FAT::mkdir(char const*)+0x6e>
c0021587:	b8 00 00 00 00       	mov    eax,0x0
c002158c:	eb 05                	jmp    c0021593 <FAT::mkdir(char const*)+0x73>
c002158e:	b8 01 00 00 00       	mov    eax,0x1
c0021593:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021599:	c3                   	ret    

c002159a <FAT::exists(char const*)>:
c002159a:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00215a0:	83 ec 08             	sub    esp,0x8
c00215a3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00215aa:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00215ae:	50                   	push   eax
c00215af:	e8 88 f2 fd ff       	call   c000083c <strcpy>
c00215b4:	83 c4 10             	add    esp,0x10
c00215b7:	83 ec 08             	sub    esp,0x8
c00215ba:	8d 44 24 08          	lea    eax,[esp+0x8]
c00215be:	50                   	push   eax
c00215bf:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00215c6:	e8 d3 f9 ff ff       	call   c0020f9e <FAT::fixFilepath(char*)>
c00215cb:	83 c4 10             	add    esp,0x10
c00215ce:	83 ec 08             	sub    esp,0x8
c00215d1:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c00215d8:	50                   	push   eax
c00215d9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00215dd:	50                   	push   eax
c00215de:	e8 ad 4b fe ff       	call   c0006190 <f_stat>
c00215e3:	83 c4 10             	add    esp,0x10
c00215e6:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00215ed:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00215f4:	85 c0                	test   eax,eax
c00215f6:	75 04                	jne    c00215fc <FAT::exists(char const*)+0x62>
c00215f8:	b0 01                	mov    al,0x1
c00215fa:	eb 02                	jmp    c00215fe <FAT::exists(char const*)+0x64>
c00215fc:	b0 00                	mov    al,0x0
c00215fe:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021604:	c3                   	ret    
c0021605:	90                   	nop

c0021606 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0021606:	b8 08 00 00 00       	mov    eax,0x8
c002160b:	c3                   	ret    

c002160c <ISO9660::seek(void*, unsigned long long)>:
c002160c:	53                   	push   ebx
c002160d:	b8 04 00 00 00       	mov    eax,0x4
c0021612:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021616:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002161a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002161e:	85 d2                	test   edx,edx
c0021620:	74 17                	je     c0021639 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021622:	89 c8                	mov    eax,ecx
c0021624:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0021627:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c002162a:	b8 01 00 00 00       	mov    eax,0x1
c002162f:	73 08                	jae    c0021639 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021631:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0021634:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0021637:	31 c0                	xor    eax,eax
c0021639:	5b                   	pop    ebx
c002163a:	c3                   	ret    
c002163b:	90                   	nop

c002163c <ISO9660::tell(void*, unsigned long long*)>:
c002163c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021640:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021644:	85 d2                	test   edx,edx
c0021646:	74 12                	je     c002165a <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021648:	85 c0                	test   eax,eax
c002164a:	74 0e                	je     c002165a <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002164c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002164f:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0021652:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021655:	89 10                	mov    DWORD PTR [eax],edx
c0021657:	31 c0                	xor    eax,eax
c0021659:	c3                   	ret    
c002165a:	b8 04 00 00 00       	mov    eax,0x4
c002165f:	c3                   	ret    

c0021660 <ISO9660::getName()>:
c0021660:	b8 2c c9 02 c0       	mov    eax,0xc002c92c
c0021665:	c3                   	ret    

c0021666 <ISO9660::stat(void*, unsigned long long*)>:
c0021666:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002166a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002166e:	85 d2                	test   edx,edx
c0021670:	74 12                	je     c0021684 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021672:	85 c0                	test   eax,eax
c0021674:	74 0e                	je     c0021684 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021676:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0021679:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c002167c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c002167f:	89 10                	mov    DWORD PTR [eax],edx
c0021681:	31 c0                	xor    eax,eax
c0021683:	c3                   	ret    
c0021684:	b8 04 00 00 00       	mov    eax,0x4
c0021689:	c3                   	ret    

c002168a <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c002168a:	b8 01 00 00 00       	mov    eax,0x1
c002168f:	c3                   	ret    

c0021690 <ISO9660::unlink(char const*)>:
c0021690:	b8 01 00 00 00       	mov    eax,0x1
c0021695:	c3                   	ret    

c0021696 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0021696:	b8 01 00 00 00       	mov    eax,0x1
c002169b:	c3                   	ret    

c002169c <ISO9660::rename(char const*, char const*)>:
c002169c:	b8 01 00 00 00       	mov    eax,0x1
c00216a1:	c3                   	ret    

c00216a2 <ISO9660::mkdir(char const*)>:
c00216a2:	b8 01 00 00 00       	mov    eax,0x1
c00216a7:	c3                   	ret    

c00216a8 <ISO9660::close(void*)>:
c00216a8:	83 ec 0c             	sub    esp,0xc
c00216ab:	b8 04 00 00 00       	mov    eax,0x4
c00216b0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00216b4:	85 d2                	test   edx,edx
c00216b6:	74 0e                	je     c00216c6 <ISO9660::close(void*)+0x1e>
c00216b8:	83 ec 0c             	sub    esp,0xc
c00216bb:	52                   	push   edx
c00216bc:	e8 9a e1 fe ff       	call   c000f85b <free>
c00216c1:	83 c4 10             	add    esp,0x10
c00216c4:	31 c0                	xor    eax,eax
c00216c6:	83 c4 0c             	add    esp,0xc
c00216c9:	c3                   	ret    

c00216ca <ISO9660::closeDir(void*)>:
c00216ca:	83 ec 0c             	sub    esp,0xc
c00216cd:	b8 04 00 00 00       	mov    eax,0x4
c00216d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00216d6:	85 d2                	test   edx,edx
c00216d8:	74 0e                	je     c00216e8 <ISO9660::closeDir(void*)+0x1e>
c00216da:	83 ec 0c             	sub    esp,0xc
c00216dd:	52                   	push   edx
c00216de:	e8 78 e1 fe ff       	call   c000f85b <free>
c00216e3:	83 c4 10             	add    esp,0x10
c00216e6:	31 c0                	xor    eax,eax
c00216e8:	83 c4 0c             	add    esp,0xc
c00216eb:	c3                   	ret    

c00216ec <ISO9660::~ISO9660()>:
c00216ec:	83 ec 0c             	sub    esp,0xc
c00216ef:	ba 90 c9 02 c0       	mov    edx,0xc002c990
c00216f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216f8:	89 10                	mov    DWORD PTR [eax],edx
c00216fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216fe:	83 ec 0c             	sub    esp,0xc
c0021701:	50                   	push   eax
c0021702:	e8 eb 19 ff ff       	call   c00130f2 <Filesystem::~Filesystem()>
c0021707:	83 c4 10             	add    esp,0x10
c002170a:	90                   	nop
c002170b:	83 c4 0c             	add    esp,0xc
c002170e:	c3                   	ret    
c002170f:	90                   	nop

c0021710 <ISO9660::~ISO9660()>:
c0021710:	83 ec 0c             	sub    esp,0xc
c0021713:	83 ec 0c             	sub    esp,0xc
c0021716:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002171a:	e8 cd ff ff ff       	call   c00216ec <ISO9660::~ISO9660()>
c002171f:	83 c4 10             	add    esp,0x10
c0021722:	83 ec 08             	sub    esp,0x8
c0021725:	6a 08                	push   0x8
c0021727:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002172b:	e8 b3 15 ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0021730:	83 c4 10             	add    esp,0x10
c0021733:	83 c4 0c             	add    esp,0xc
c0021736:	c3                   	ret    

c0021737 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0021737:	55                   	push   ebp
c0021738:	31 c9                	xor    ecx,ecx
c002173a:	57                   	push   edi
c002173b:	56                   	push   esi
c002173c:	53                   	push   ebx
c002173d:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021741:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021745:	89 eb                	mov    ebx,ebp
c0021747:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c002174b:	39 ce                	cmp    esi,ecx
c002174d:	7e 17                	jle    c0021766 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c002174f:	31 d2                	xor    edx,edx
c0021751:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021755:	7d 13                	jge    c002176a <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021757:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002175b:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c002175e:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0021761:	75 0d                	jne    c0021770 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0021763:	42                   	inc    edx
c0021764:	eb eb                	jmp    c0021751 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021766:	31 c0                	xor    eax,eax
c0021768:	eb 0a                	jmp    c0021774 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002176a:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c002176e:	eb 04                	jmp    c0021774 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021770:	41                   	inc    ecx
c0021771:	43                   	inc    ebx
c0021772:	eb d7                	jmp    c002174b <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021774:	5b                   	pop    ebx
c0021775:	5e                   	pop    esi
c0021776:	5f                   	pop    edi
c0021777:	5d                   	pop    ebp
c0021778:	c3                   	ret    

c0021779 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0021779:	56                   	push   esi
c002177a:	53                   	push   ebx
c002177b:	52                   	push   edx
c002177c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021780:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021784:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021788:	39 0d a0 1b 03 c0    	cmp    DWORD PTR ds:0xc0031ba0,ecx
c002178e:	75 08                	jne    c0021798 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0021790:	38 05 f4 d9 02 c0    	cmp    BYTE PTR ds:0xc002d9f4,al
c0021796:	74 2b                	je     c00217c3 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c0021798:	83 ec 0c             	sub    esp,0xc
c002179b:	a2 f4 d9 02 c0       	mov    ds:0xc002d9f4,al
c00217a0:	68 c0 1b 03 c0       	push   0xc0031bc0
c00217a5:	0f be c0             	movsx  eax,al
c00217a8:	6a 01                	push   0x1
c00217aa:	89 0d a0 1b 03 c0    	mov    DWORD PTR ds:0xc0031ba0,ecx
c00217b0:	31 db                	xor    ebx,ebx
c00217b2:	53                   	push   ebx
c00217b3:	51                   	push   ecx
c00217b4:	ff 34 85 7c e9 02 c0 	push   DWORD PTR [eax*4-0x3ffd1684]
c00217bb:	e8 94 4e ff ff       	call   c0016654 <LogicalDisk::read(unsigned long long, int, void*)>
c00217c0:	83 c4 20             	add    esp,0x20
c00217c3:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c00217cb:	c7 44 24 14 c0 1b 03 c0 	mov    DWORD PTR [esp+0x14],0xc0031bc0
c00217d3:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00217d7:	58                   	pop    eax
c00217d8:	5b                   	pop    ebx
c00217d9:	5e                   	pop    esi
c00217da:	e9 6d ef fd ff       	jmp    c000074c <memcpy>
c00217df:	90                   	nop

c00217e0 <ISO9660::tryMount(LogicalDisk*, int)>:
c00217e0:	81 ec 10 08 00 00    	sub    esp,0x810
c00217e6:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00217ed:	83 c0 41             	add    eax,0x41
c00217f0:	0f be c0             	movsx  eax,al
c00217f3:	50                   	push   eax
c00217f4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00217f8:	50                   	push   eax
c00217f9:	6a 10                	push   0x10
c00217fb:	e8 79 ff ff ff       	call   c0021779 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021800:	83 c4 10             	add    esp,0x10
c0021803:	31 c0                	xor    eax,eax
c0021805:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c002180a:	75 1d                	jne    c0021829 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002180c:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0021811:	75 16                	jne    c0021829 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021813:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0021818:	75 0f                	jne    c0021829 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002181a:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c002181f:	75 08                	jne    c0021829 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021821:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0021826:	0f 94 c0             	sete   al
c0021829:	81 c4 0c 08 00 00    	add    esp,0x80c
c002182f:	c3                   	ret    

c0021830 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0021830:	55                   	push   ebp
c0021831:	57                   	push   edi
c0021832:	56                   	push   esi
c0021833:	53                   	push   ebx
c0021834:	81 ec 2c 08 00 00    	sub    esp,0x82c
c002183a:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021841:	85 ed                	test   ebp,ebp
c0021843:	0f 84 d6 01 00 00    	je     c0021a1f <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021849:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021851:	0f 84 c8 01 00 00    	je     c0021a1f <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021857:	b8 01 00 00 00       	mov    eax,0x1
c002185c:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0021860:	0f 85 be 01 00 00    	jne    c0021a24 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021866:	31 d2                	xor    edx,edx
c0021868:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c002186f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021872:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0021875:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021879:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c002187c:	89 04 24             	mov    DWORD PTR [esp],eax
c002187f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021883:	01 f0                	add    eax,esi
c0021885:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0021888:	11 fa                	adc    edx,edi
c002188a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c002188e:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021892:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021896:	19 d1                	sbb    ecx,edx
c0021898:	72 0a                	jb     c00218a4 <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c002189a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002189e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00218a2:	eb 13                	jmp    c00218b7 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c00218a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00218a8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00218ac:	29 f0                	sub    eax,esi
c00218ae:	19 fa                	sbb    edx,edi
c00218b0:	89 04 24             	mov    DWORD PTR [esp],eax
c00218b3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00218b7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00218ba:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00218bd:	0f a4 c2 0b          	shld   edx,eax,0xb
c00218c1:	51                   	push   ecx
c00218c2:	c1 e0 0b             	shl    eax,0xb
c00218c5:	01 c6                	add    esi,eax
c00218c7:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00218cb:	11 d7                	adc    edi,edx
c00218cd:	50                   	push   eax
c00218ce:	89 fa                	mov    edx,edi
c00218d0:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c00218d4:	89 f0                	mov    eax,esi
c00218d6:	53                   	push   ebx
c00218d7:	0f ac d0 0b          	shrd   eax,edx,0xb
c00218db:	50                   	push   eax
c00218dc:	e8 98 fe ff ff       	call   c0021779 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00218e1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00218e5:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00218e8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00218ec:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00218f2:	83 c4 10             	add    esp,0x10
c00218f5:	b8 00 08 00 00       	mov    eax,0x800
c00218fa:	29 d0                	sub    eax,edx
c00218fc:	39 c1                	cmp    ecx,eax
c00218fe:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0021902:	83 d9 00             	sbb    ecx,0x0
c0021905:	7d 1c                	jge    c0021923 <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c0021907:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c002190c:	75 12                	jne    c0021920 <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c002190e:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021915:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002191b:	e9 fb 00 00 00       	jmp    c0021a1b <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c0021920:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021923:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c0021926:	31 d2                	xor    edx,edx
c0021928:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c002192c:	39 c2                	cmp    edx,eax
c002192e:	7d 14                	jge    c0021944 <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c0021930:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021937:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002193b:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c002193e:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021941:	42                   	inc    edx
c0021942:	eb e8                	jmp    c002192c <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c0021944:	89 c3                	mov    ebx,eax
c0021946:	85 c0                	test   eax,eax
c0021948:	79 02                	jns    c002194c <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c002194a:	31 db                	xor    ebx,ebx
c002194c:	99                   	cdq    
c002194d:	01 c3                	add    ebx,eax
c002194f:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c0021956:	01 c6                	add    esi,eax
c0021958:	11 d7                	adc    edi,edx
c002195a:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c002195e:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0021962:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021965:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0021969:	29 c6                	sub    esi,eax
c002196b:	19 d7                	sbb    edi,edx
c002196d:	89 34 24             	mov    DWORD PTR [esp],esi
c0021970:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021974:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021979:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c002197c:	b8 00 00 00 00       	mov    eax,0x0
c0021981:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021985:	7d 3e                	jge    c00219c5 <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c0021987:	52                   	push   edx
c0021988:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002198c:	50                   	push   eax
c002198d:	53                   	push   ebx
c002198e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021992:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021996:	0f ac d0 0b          	shrd   eax,edx,0xb
c002199a:	50                   	push   eax
c002199b:	e8 d9 fd ff ff       	call   c0021779 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00219a0:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c00219a8:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c00219ad:	81 c3 00 08 00 00    	add    ebx,0x800
c00219b3:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c00219bb:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c00219c0:	83 c4 10             	add    esp,0x10
c00219c3:	eb af                	jmp    c0021974 <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c00219c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00219c9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00219cc:	74 32                	je     c0021a00 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c00219ce:	50                   	push   eax
c00219cf:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00219d3:	50                   	push   eax
c00219d4:	8d 44 24 28          	lea    eax,[esp+0x28]
c00219d8:	50                   	push   eax
c00219d9:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00219dd:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00219e1:	0f ac fe 0b          	shrd   esi,edi,0xb
c00219e5:	56                   	push   esi
c00219e6:	e8 8e fd ff ff       	call   c0021779 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00219eb:	83 c4 0c             	add    esp,0xc
c00219ee:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00219f2:	8d 44 24 28          	lea    eax,[esp+0x28]
c00219f6:	50                   	push   eax
c00219f7:	53                   	push   ebx
c00219f8:	e8 4f ed fd ff       	call   c000074c <memcpy>
c00219fd:	83 c4 10             	add    esp,0x10
c0021a00:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021a07:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021a0b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021a0f:	89 38                	mov    DWORD PTR [eax],edi
c0021a11:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021a15:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021a18:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021a1b:	31 c0                	xor    eax,eax
c0021a1d:	eb 05                	jmp    c0021a24 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021a1f:	b8 04 00 00 00       	mov    eax,0x4
c0021a24:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021a2a:	5b                   	pop    ebx
c0021a2b:	5e                   	pop    esi
c0021a2c:	5f                   	pop    edi
c0021a2d:	5d                   	pop    ebp
c0021a2e:	c3                   	ret    
c0021a2f:	90                   	nop

c0021a30 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021a30:	55                   	push   ebp
c0021a31:	57                   	push   edi
c0021a32:	56                   	push   esi
c0021a33:	53                   	push   ebx
c0021a34:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021a3a:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0021a41:	85 f6                	test   esi,esi
c0021a43:	0f 84 64 02 00 00    	je     c0021cad <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021a49:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021a51:	0f 84 56 02 00 00    	je     c0021cad <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021a57:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0021a5a:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0021a5d:	75 0a                	jne    c0021a69 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021a5f:	b8 07 00 00 00       	mov    eax,0x7
c0021a64:	e9 49 02 00 00       	jmp    c0021cb2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021a69:	50                   	push   eax
c0021a6a:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021a6e:	50                   	push   eax
c0021a6f:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021a76:	53                   	push   ebx
c0021a77:	8b 06                	mov    eax,DWORD PTR [esi]
c0021a79:	c1 e0 0b             	shl    eax,0xb
c0021a7c:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0021a7f:	c1 e8 0b             	shr    eax,0xb
c0021a82:	50                   	push   eax
c0021a83:	e8 f1 fc ff ff       	call   c0021779 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a88:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021a8b:	83 c4 10             	add    esp,0x10
c0021a8e:	89 c1                	mov    ecx,eax
c0021a90:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0021a93:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021a99:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021a9c:	84 db                	test   bl,bl
c0021a9e:	0f 85 90 00 00 00    	jne    c0021b34 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0021aa4:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0021aaa:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021ab0:	29 c7                	sub    edi,eax
c0021ab2:	89 fb                	mov    ebx,edi
c0021ab4:	c1 fb 1f             	sar    ebx,0x1f
c0021ab7:	01 f8                	add    eax,edi
c0021ab9:	11 da                	adc    edx,ebx
c0021abb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021abf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021ac3:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0021ac6:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0021ac9:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021acc:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021acf:	89 04 24             	mov    DWORD PTR [esp],eax
c0021ad2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021ad6:	89 d8                	mov    eax,ebx
c0021ad8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0021adb:	ba 00 00 00 00       	mov    edx,0x0
c0021ae0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021ae4:	b8 00 00 00 00       	mov    eax,0x0
c0021ae9:	73 0b                	jae    c0021af6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0021aeb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021aee:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021af2:	29 f8                	sub    eax,edi
c0021af4:	19 da                	sbb    edx,ebx
c0021af6:	89 d3                	mov    ebx,edx
c0021af8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021afb:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021afe:	09 c3                	or     ebx,eax
c0021b00:	0f 84 59 ff ff ff    	je     c0021a5f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021b06:	55                   	push   ebp
c0021b07:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021b0b:	50                   	push   eax
c0021b0c:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021b13:	53                   	push   ebx
c0021b14:	8b 06                	mov    eax,DWORD PTR [esi]
c0021b16:	c1 e0 0b             	shl    eax,0xb
c0021b19:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0021b1d:	c1 e8 0b             	shr    eax,0xb
c0021b20:	50                   	push   eax
c0021b21:	e8 53 fc ff ff       	call   c0021779 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021b26:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021b29:	83 c4 10             	add    esp,0x10
c0021b2c:	25 ff 07 00 00       	and    eax,0x7ff
c0021b31:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021b34:	57                   	push   edi
c0021b35:	6a 28                	push   0x28
c0021b37:	6a 00                	push   0x0
c0021b39:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021b3d:	50                   	push   eax
c0021b3e:	e8 3d ec fd ff       	call   c0000780 <memset>
c0021b43:	31 d2                	xor    edx,edx
c0021b45:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0021b48:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021b4e:	89 f8                	mov    eax,edi
c0021b50:	83 c0 21             	add    eax,0x21
c0021b53:	83 d2 00             	adc    edx,0x0
c0021b56:	89 c7                	mov    edi,eax
c0021b58:	89 d5                	mov    ebp,edx
c0021b5a:	83 c4 10             	add    esp,0x10
c0021b5d:	31 c9                	xor    ecx,ecx
c0021b5f:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0021b66:	83 f9 28             	cmp    ecx,0x28
c0021b69:	88 04 24             	mov    BYTE PTR [esp],al
c0021b6c:	0f 94 c2             	sete   dl
c0021b6f:	88 d0                	mov    al,dl
c0021b71:	ba ff 07 00 00       	mov    edx,0x7ff
c0021b76:	39 fa                	cmp    edx,edi
c0021b78:	ba 00 00 00 00       	mov    edx,0x0
c0021b7d:	19 ea                	sbb    edx,ebp
c0021b7f:	0f 92 c2             	setb   dl
c0021b82:	09 c2                	or     edx,eax
c0021b84:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021b88:	0f 94 c0             	sete   al
c0021b8b:	08 d0                	or     al,dl
c0021b8d:	75 16                	jne    c0021ba5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021b8f:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021b93:	74 10                	je     c0021ba5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021b95:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021b98:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021b9c:	41                   	inc    ecx
c0021b9d:	83 c7 01             	add    edi,0x1
c0021ba0:	83 d5 00             	adc    ebp,0x0
c0021ba3:	eb ba                	jmp    c0021b5f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0021ba5:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021bac:	83 ec 0c             	sub    esp,0xc
c0021baf:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021bb3:	57                   	push   edi
c0021bb4:	e8 e3 eb fd ff       	call   c000079c <strlen>
c0021bb9:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021bc1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021bc5:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0021bcc:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021bcf:	5a                   	pop    edx
c0021bd0:	25 ff 07 00 00       	and    eax,0x7ff
c0021bd5:	01 c8                	add    eax,ecx
c0021bd7:	59                   	pop    ecx
c0021bd8:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021bde:	83 e0 02             	and    eax,0x2
c0021be1:	3c 01                	cmp    al,0x1
c0021be3:	19 c0                	sbb    eax,eax
c0021be5:	83 c0 02             	add    eax,0x2
c0021be8:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021bec:	57                   	push   edi
c0021bed:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021bf1:	50                   	push   eax
c0021bf2:	e8 45 ec fd ff       	call   c000083c <strcpy>
c0021bf7:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021bfb:	83 c4 10             	add    esp,0x10
c0021bfe:	84 c0                	test   al,al
c0021c00:	75 21                	jne    c0021c23 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0021c02:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021c0a:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021c12:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021c1a:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021c21:	eb 28                	jmp    c0021c4b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021c23:	fe c8                	dec    al
c0021c25:	75 24                	jne    c0021c4b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021c27:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021c2f:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021c37:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021c3f:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021c46:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021c4b:	0f b6 fb             	movzx  edi,bl
c0021c4e:	31 db                	xor    ebx,ebx
c0021c50:	50                   	push   eax
c0021c51:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0021c58:	8d 44 24 48          	lea    eax,[esp+0x48]
c0021c5c:	50                   	push   eax
c0021c5d:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0021c64:	e8 e3 ea fd ff       	call   c000074c <memcpy>
c0021c69:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0021c70:	89 f9                	mov    ecx,edi
c0021c72:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021c78:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0021c7b:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021c7e:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0021c81:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021c84:	83 c4 10             	add    esp,0x10
c0021c87:	39 c7                	cmp    edi,eax
c0021c89:	89 df                	mov    edi,ebx
c0021c8b:	19 d7                	sbb    edi,edx
c0021c8d:	72 10                	jb     c0021c9f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021c8f:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0021c96:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0021c9d:	eb 0a                	jmp    c0021ca9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0021c9f:	29 c8                	sub    eax,ecx
c0021ca1:	19 da                	sbb    edx,ebx
c0021ca3:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021ca6:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021ca9:	31 c0                	xor    eax,eax
c0021cab:	eb 05                	jmp    c0021cb2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021cad:	b8 04 00 00 00       	mov    eax,0x4
c0021cb2:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021cb8:	5b                   	pop    ebx
c0021cb9:	5e                   	pop    esi
c0021cba:	5f                   	pop    edi
c0021cbb:	5d                   	pop    ebp
c0021cbc:	c3                   	ret    

c0021cbd <readRoot(unsigned int*, unsigned int*, char)>:
c0021cbd:	81 ec 40 08 00 00    	sub    esp,0x840
c0021cc3:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021ccb:	50                   	push   eax
c0021ccc:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021cd0:	50                   	push   eax
c0021cd1:	6a 10                	push   0x10
c0021cd3:	e8 a1 fa ff ff       	call   c0021779 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021cd8:	83 c4 0c             	add    esp,0xc
c0021cdb:	6a 22                	push   0x22
c0021cdd:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0021ce4:	50                   	push   eax
c0021ce5:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021ce9:	50                   	push   eax
c0021cea:	e8 5d ea fd ff       	call   c000074c <memcpy>
c0021cef:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021cf6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021cfa:	89 10                	mov    DWORD PTR [eax],edx
c0021cfc:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021d03:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021d07:	89 10                	mov    DWORD PTR [eax],edx
c0021d09:	b0 01                	mov    al,0x1
c0021d0b:	81 c4 4c 08 00 00    	add    esp,0x84c
c0021d11:	c3                   	ret    

c0021d12 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021d12:	55                   	push   ebp
c0021d13:	57                   	push   edi
c0021d14:	56                   	push   esi
c0021d15:	53                   	push   ebx
c0021d16:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021d1c:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021d23:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021d2a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021d2e:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021d32:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021d36:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021d3a:	75 03                	jne    c0021d3f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021d3c:	83 c3 02             	add    ebx,0x2
c0021d3f:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021d42:	75 03                	jne    c0021d47 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021d44:	43                   	inc    ebx
c0021d45:	eb f8                	jmp    c0021d3f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021d47:	51                   	push   ecx
c0021d48:	68 00 01 00 00       	push   0x100
c0021d4d:	6a 00                	push   0x0
c0021d4f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021d53:	50                   	push   eax
c0021d54:	e8 27 ea fd ff       	call   c0000780 <memset>
c0021d59:	83 c4 10             	add    esp,0x10
c0021d5c:	31 d2                	xor    edx,edx
c0021d5e:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021d61:	84 c0                	test   al,al
c0021d63:	74 21                	je     c0021d86 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021d65:	3c 2f                	cmp    al,0x2f
c0021d67:	75 0b                	jne    c0021d74 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021d69:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021d6d:	bd 01 00 00 00       	mov    ebp,0x1
c0021d72:	eb 14                	jmp    c0021d88 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021d74:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021d77:	80 f9 19             	cmp    cl,0x19
c0021d7a:	77 03                	ja     c0021d7f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021d7c:	83 e8 20             	sub    eax,0x20
c0021d7f:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021d83:	42                   	inc    edx
c0021d84:	eb d8                	jmp    c0021d5e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021d86:	31 ed                	xor    ebp,ebp
c0021d88:	83 ec 0c             	sub    esp,0xc
c0021d8b:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021d92:	e8 b4 da fe ff       	call   c000f84b <malloc>
c0021d97:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021d9e:	89 c6                	mov    esi,eax
c0021da0:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021da6:	c1 ef 0b             	shr    edi,0xb
c0021da9:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021db0:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021db4:	83 c4 10             	add    esp,0x10
c0021db7:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021dbc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021dc0:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021dc7:	74 28                	je     c0021df1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021dc9:	52                   	push   edx
c0021dca:	57                   	push   edi
c0021dcb:	50                   	push   eax
c0021dcc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021dd0:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021dd7:	e8 9d f9 ff ff       	call   c0021779 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021ddc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021de0:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021de7:	05 00 08 00 00       	add    eax,0x800
c0021dec:	83 c4 10             	add    esp,0x10
c0021def:	eb cb                	jmp    c0021dbc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021df1:	83 ec 0c             	sub    esp,0xc
c0021df4:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021df8:	57                   	push   edi
c0021df9:	e8 9e e9 fd ff       	call   c000079c <strlen>
c0021dfe:	50                   	push   eax
c0021dff:	57                   	push   edi
c0021e00:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021e07:	56                   	push   esi
c0021e08:	e8 2a f9 ff ff       	call   c0021737 <__memmem(unsigned char*, int, unsigned char*, int)>
c0021e0d:	83 c4 20             	add    esp,0x20
c0021e10:	85 c0                	test   eax,eax
c0021e12:	75 13                	jne    c0021e27 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021e14:	83 ec 0c             	sub    esp,0xc
c0021e17:	56                   	push   esi
c0021e18:	e8 3e da fe ff       	call   c000f85b <free>
c0021e1d:	83 c4 10             	add    esp,0x10
c0021e20:	31 c0                	xor    eax,eax
c0021e22:	e9 b3 00 00 00       	jmp    c0021eda <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021e27:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021e2b:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021e2f:	c1 e7 08             	shl    edi,0x8
c0021e32:	c1 e2 10             	shl    edx,0x10
c0021e35:	09 d7                	or     edi,edx
c0021e37:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021e3b:	09 d7                	or     edi,edx
c0021e3d:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021e41:	c1 e2 18             	shl    edx,0x18
c0021e44:	09 d7                	or     edi,edx
c0021e46:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021e4a:	89 d1                	mov    ecx,edx
c0021e4c:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021e50:	c1 e1 08             	shl    ecx,0x8
c0021e53:	c1 e2 10             	shl    edx,0x10
c0021e56:	09 ca                	or     edx,ecx
c0021e58:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021e5c:	09 ca                	or     edx,ecx
c0021e5e:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021e62:	c1 e1 18             	shl    ecx,0x18
c0021e65:	09 ca                	or     edx,ecx
c0021e67:	89 e9                	mov    ecx,ebp
c0021e69:	84 c9                	test   cl,cl
c0021e6b:	74 3c                	je     c0021ea9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021e6d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021e71:	83 ec 0c             	sub    esp,0xc
c0021e74:	56                   	push   esi
c0021e75:	e8 e1 d9 fe ff       	call   c000f85b <free>
c0021e7a:	83 c4 0c             	add    esp,0xc
c0021e7d:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021e84:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021e89:	50                   	push   eax
c0021e8a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021e91:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021e98:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021e9c:	52                   	push   edx
c0021e9d:	57                   	push   edi
c0021e9e:	53                   	push   ebx
c0021e9f:	e8 6e fe ff ff       	call   c0021d12 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021ea4:	83 c4 20             	add    esp,0x20
c0021ea7:	eb 31                	jmp    c0021eda <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021ea9:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021eac:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021eb3:	d0 e8                	shr    al,1
c0021eb5:	89 3b                	mov    DWORD PTR [ebx],edi
c0021eb7:	83 e0 01             	and    eax,0x1
c0021eba:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021ec1:	83 ec 0c             	sub    esp,0xc
c0021ec4:	89 13                	mov    DWORD PTR [ebx],edx
c0021ec6:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021ecd:	89 03                	mov    DWORD PTR [ebx],eax
c0021ecf:	56                   	push   esi
c0021ed0:	e8 86 d9 fe ff       	call   c000f85b <free>
c0021ed5:	83 c4 10             	add    esp,0x10
c0021ed8:	b0 01                	mov    al,0x1
c0021eda:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021ee0:	5b                   	pop    ebx
c0021ee1:	5e                   	pop    esi
c0021ee2:	5f                   	pop    edi
c0021ee3:	5d                   	pop    ebp
c0021ee4:	c3                   	ret    

c0021ee5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021ee5:	55                   	push   ebp
c0021ee6:	57                   	push   edi
c0021ee7:	56                   	push   esi
c0021ee8:	53                   	push   ebx
c0021ee9:	83 ec 20             	sub    esp,0x20
c0021eec:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021ef0:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021ef4:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021ef8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021f00:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021f08:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021f0d:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021f13:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021f19:	57                   	push   edi
c0021f1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021f1e:	50                   	push   eax
c0021f1f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021f23:	50                   	push   eax
c0021f24:	e8 94 fd ff ff       	call   c0021cbd <readRoot(unsigned int*, unsigned int*, char)>
c0021f29:	5a                   	pop    edx
c0021f2a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021f2e:	e8 69 e8 fd ff       	call   c000079c <strlen>
c0021f33:	83 c4 10             	add    esp,0x10
c0021f36:	83 f8 03             	cmp    eax,0x3
c0021f39:	77 17                	ja     c0021f52 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021f3b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021f3f:	89 03                	mov    DWORD PTR [ebx],eax
c0021f41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f45:	89 06                	mov    DWORD PTR [esi],eax
c0021f47:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021f4e:	b0 01                	mov    al,0x1
c0021f50:	eb 19                	jmp    c0021f6b <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021f52:	50                   	push   eax
c0021f53:	55                   	push   ebp
c0021f54:	57                   	push   edi
c0021f55:	56                   	push   esi
c0021f56:	53                   	push   ebx
c0021f57:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021f5b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021f5f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021f63:	e8 aa fd ff ff       	call   c0021d12 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021f68:	83 c4 20             	add    esp,0x20
c0021f6b:	83 c4 1c             	add    esp,0x1c
c0021f6e:	5b                   	pop    ebx
c0021f6f:	5e                   	pop    esi
c0021f70:	5f                   	pop    edi
c0021f71:	5d                   	pop    ebp
c0021f72:	c3                   	ret    
c0021f73:	90                   	nop

c0021f74 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021f74:	57                   	push   edi
c0021f75:	56                   	push   esi
c0021f76:	53                   	push   ebx
c0021f77:	83 ec 10             	sub    esp,0x10
c0021f7a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021f7e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021f82:	85 ff                	test   edi,edi
c0021f84:	0f 84 9d 00 00 00    	je     c0022027 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021f8a:	85 f6                	test   esi,esi
c0021f8c:	0f 84 95 00 00 00    	je     c0022027 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021f92:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021f97:	74 17                	je     c0021fb0 <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0021f99:	83 ec 0c             	sub    esp,0xc
c0021f9c:	68 47 c9 02 c0       	push   0xc002c947
c0021fa1:	e8 1d 0e ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0021fa6:	83 c4 10             	add    esp,0x10
c0021fa9:	b8 03 00 00 00       	mov    eax,0x3
c0021fae:	eb 7c                	jmp    c002202c <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021fb0:	83 ec 0c             	sub    esp,0xc
c0021fb3:	6a 1c                	push   0x1c
c0021fb5:	e8 91 d8 fe ff       	call   c000f84b <malloc>
c0021fba:	89 07                	mov    DWORD PTR [edi],eax
c0021fbc:	89 c3                	mov    ebx,eax
c0021fbe:	58                   	pop    eax
c0021fbf:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021fc3:	50                   	push   eax
c0021fc4:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021fc7:	50                   	push   eax
c0021fc8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021fcc:	50                   	push   eax
c0021fcd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021fd1:	50                   	push   eax
c0021fd2:	56                   	push   esi
c0021fd3:	e8 0d ff ff ff       	call   c0021ee5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021fd8:	83 c4 20             	add    esp,0x20
c0021fdb:	84 c0                	test   al,al
c0021fdd:	74 07                	je     c0021fe6 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c0021fdf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021fe4:	74 0b                	je     c0021ff1 <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0021fe6:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021fea:	b8 01 00 00 00       	mov    eax,0x1
c0021fef:	eb 3b                	jmp    c002202c <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021ff1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ff5:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021ff9:	89 03                	mov    DWORD PTR [ebx],eax
c0021ffb:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022002:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022006:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c002200d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022014:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022017:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002201e:	8a 06                	mov    al,BYTE PTR [esi]
c0022020:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022023:	31 c0                	xor    eax,eax
c0022025:	eb 05                	jmp    c002202c <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022027:	b8 04 00 00 00       	mov    eax,0x4
c002202c:	83 c4 10             	add    esp,0x10
c002202f:	5b                   	pop    ebx
c0022030:	5e                   	pop    esi
c0022031:	5f                   	pop    edi
c0022032:	c3                   	ret    
c0022033:	90                   	nop

c0022034 <ISO9660::exists(char const*)>:
c0022034:	83 ec 28             	sub    esp,0x28
c0022037:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002203b:	8d 54 24 18          	lea    edx,[esp+0x18]
c002203f:	52                   	push   edx
c0022040:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0022043:	52                   	push   edx
c0022044:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022048:	52                   	push   edx
c0022049:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002204d:	52                   	push   edx
c002204e:	50                   	push   eax
c002204f:	e8 91 fe ff ff       	call   c0021ee5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022054:	83 c4 3c             	add    esp,0x3c
c0022057:	c3                   	ret    

c0022058 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0022058:	56                   	push   esi
c0022059:	53                   	push   ebx
c002205a:	83 ec 14             	sub    esp,0x14
c002205d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0022061:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022065:	85 db                	test   ebx,ebx
c0022067:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002206b:	0f 94 c2             	sete   dl
c002206e:	85 f6                	test   esi,esi
c0022070:	0f 94 c0             	sete   al
c0022073:	08 c2                	or     dl,al
c0022075:	75 68                	jne    c00220df <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022077:	85 c9                	test   ecx,ecx
c0022079:	74 64                	je     c00220df <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c002207b:	83 ec 0c             	sub    esp,0xc
c002207e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0022081:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022085:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c002208b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022092:	50                   	push   eax
c0022093:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0022096:	50                   	push   eax
c0022097:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002209b:	50                   	push   eax
c002209c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00220a0:	50                   	push   eax
c00220a1:	51                   	push   ecx
c00220a2:	e8 3e fe ff ff       	call   c0021ee5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00220a7:	83 c4 20             	add    esp,0x20
c00220aa:	ba 01 00 00 00       	mov    edx,0x1
c00220af:	84 c0                	test   al,al
c00220b1:	74 31                	je     c00220e4 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00220b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00220b7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00220be:	89 03                	mov    DWORD PTR [ebx],eax
c00220c0:	ba 00 00 00 00       	mov    edx,0x0
c00220c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00220c9:	85 c0                	test   eax,eax
c00220cb:	0f 95 06             	setne  BYTE PTR [esi]
c00220ce:	74 14                	je     c00220e4 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00220d0:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00220d6:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00220dd:	eb 05                	jmp    c00220e4 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00220df:	ba 04 00 00 00       	mov    edx,0x4
c00220e4:	83 c4 14             	add    esp,0x14
c00220e7:	89 d0                	mov    eax,edx
c00220e9:	5b                   	pop    ebx
c00220ea:	5e                   	pop    esi
c00220eb:	c3                   	ret    

c00220ec <ISO9660::openDir(char const*, void**)>:
c00220ec:	57                   	push   edi
c00220ed:	56                   	push   esi
c00220ee:	53                   	push   ebx
c00220ef:	83 ec 10             	sub    esp,0x10
c00220f2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00220f6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00220fa:	85 ff                	test   edi,edi
c00220fc:	0f 84 95 00 00 00    	je     c0022197 <ISO9660::openDir(char const*, void**)+0xab>
c0022102:	85 f6                	test   esi,esi
c0022104:	0f 84 8d 00 00 00    	je     c0022197 <ISO9660::openDir(char const*, void**)+0xab>
c002210a:	83 ec 0c             	sub    esp,0xc
c002210d:	6a 1c                	push   0x1c
c002210f:	e8 37 d7 fe ff       	call   c000f84b <malloc>
c0022114:	89 07                	mov    DWORD PTR [edi],eax
c0022116:	89 c3                	mov    ebx,eax
c0022118:	59                   	pop    ecx
c0022119:	8d 44 24 18          	lea    eax,[esp+0x18]
c002211d:	50                   	push   eax
c002211e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022121:	50                   	push   eax
c0022122:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022126:	50                   	push   eax
c0022127:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002212b:	50                   	push   eax
c002212c:	56                   	push   esi
c002212d:	e8 b3 fd ff ff       	call   c0021ee5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022132:	83 c4 20             	add    esp,0x20
c0022135:	84 c0                	test   al,al
c0022137:	74 07                	je     c0022140 <ISO9660::openDir(char const*, void**)+0x54>
c0022139:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002213e:	75 21                	jne    c0022161 <ISO9660::openDir(char const*, void**)+0x75>
c0022140:	0f b6 c0             	movzx  eax,al
c0022143:	52                   	push   edx
c0022144:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022148:	50                   	push   eax
c0022149:	68 6d c9 02 c0       	push   0xc002c96d
c002214e:	e8 70 0c ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0022153:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022157:	83 c4 10             	add    esp,0x10
c002215a:	b8 01 00 00 00       	mov    eax,0x1
c002215f:	eb 3b                	jmp    c002219c <ISO9660::openDir(char const*, void**)+0xb0>
c0022161:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022165:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022169:	89 03                	mov    DWORD PTR [ebx],eax
c002216b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022172:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022176:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c002217d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022184:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022187:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002218e:	8a 06                	mov    al,BYTE PTR [esi]
c0022190:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022193:	31 c0                	xor    eax,eax
c0022195:	eb 05                	jmp    c002219c <ISO9660::openDir(char const*, void**)+0xb0>
c0022197:	b8 04 00 00 00       	mov    eax,0x4
c002219c:	83 c4 10             	add    esp,0x10
c002219f:	5b                   	pop    ebx
c00221a0:	5e                   	pop    esi
c00221a1:	5f                   	pop    edi
c00221a2:	c3                   	ret    
c00221a3:	90                   	nop

c00221a4 <ISO9660::ISO9660()>:
c00221a4:	83 ec 0c             	sub    esp,0xc
c00221a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221ab:	83 ec 0c             	sub    esp,0xc
c00221ae:	50                   	push   eax
c00221af:	e8 1a 0f ff ff       	call   c00130ce <Filesystem::Filesystem()>
c00221b4:	83 c4 10             	add    esp,0x10
c00221b7:	ba 90 c9 02 c0       	mov    edx,0xc002c990
c00221bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221c0:	89 10                	mov    DWORD PTR [eax],edx
c00221c2:	90                   	nop
c00221c3:	83 c4 0c             	add    esp,0xc
c00221c6:	c3                   	ret    
c00221c7:	90                   	nop

c00221c8 <SoundChannel::~SoundChannel()>:
c00221c8:	83 ec 0c             	sub    esp,0xc
c00221cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221cf:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00221d2:	83 ec 0c             	sub    esp,0xc
c00221d5:	50                   	push   eax
c00221d6:	e8 80 d6 fe ff       	call   c000f85b <free>
c00221db:	83 c4 10             	add    esp,0x10
c00221de:	90                   	nop
c00221df:	83 c4 0c             	add    esp,0xc
c00221e2:	c3                   	ret    
c00221e3:	90                   	nop

c00221e4 <SoundChannel::setSpeed(float)>:
c00221e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00221ec:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00221ef:	c3                   	ret    

c00221f0 <SoundChannel::getSpeed()>:
c00221f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221f4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00221f7:	c3                   	ret    

c00221f8 <SoundChannel::setVolume(int)>:
c00221f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00221fc:	83 f8 64             	cmp    eax,0x64
c00221ff:	7e 05                	jle    c0022206 <SoundChannel::setVolume(int)+0xe>
c0022201:	b8 64 00 00 00       	mov    eax,0x64
c0022206:	85 c0                	test   eax,eax
c0022208:	79 02                	jns    c002220c <SoundChannel::setVolume(int)+0x14>
c002220a:	31 c0                	xor    eax,eax
c002220c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022210:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0022213:	c3                   	ret    

c0022214 <SoundChannel::getVolume()>:
c0022214:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022218:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c002221b:	c3                   	ret    

c002221c <SoundChannel::pause()>:
c002221c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022220:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c0022224:	c3                   	ret    
c0022225:	90                   	nop

c0022226 <SoundChannel::SoundChannel(int, int, int, int)>:
c0022226:	83 ec 1c             	sub    esp,0x1c
c0022229:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002222d:	e8 ea ff ff ff       	call   c002221c <SoundChannel::pause()>
c0022232:	83 c4 04             	add    esp,0x4
c0022235:	6a 50                	push   0x50
c0022237:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002223b:	e8 b8 ff ff ff       	call   c00221f8 <SoundChannel::setVolume(int)>
c0022240:	83 c4 08             	add    esp,0x8
c0022243:	a1 0c ca 02 c0       	mov    eax,ds:0xc002ca0c
c0022248:	50                   	push   eax
c0022249:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002224d:	e8 92 ff ff ff       	call   c00221e4 <SoundChannel::setSpeed(float)>
c0022252:	83 c4 08             	add    esp,0x8
c0022255:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022259:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002225d:	89 10                	mov    DWORD PTR [eax],edx
c002225f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022263:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022267:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002226a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002226e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022272:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022275:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c002227a:	75 23                	jne    c002229f <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c002227c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022280:	8b 10                	mov    edx,DWORD PTR [eax]
c0022282:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022286:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022289:	0f af c2             	imul   eax,edx
c002228c:	85 c0                	test   eax,eax
c002228e:	79 03                	jns    c0022293 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c0022290:	83 c0 03             	add    eax,0x3
c0022293:	c1 f8 02             	sar    eax,0x2
c0022296:	05 a0 0f 00 00       	add    eax,0xfa0
c002229b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002229f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222a3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00222a7:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00222aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222ae:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00222b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222b9:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00222c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222c4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00222c7:	c1 e0 02             	shl    eax,0x2
c00222ca:	83 ec 0c             	sub    esp,0xc
c00222cd:	50                   	push   eax
c00222ce:	e8 78 d5 fe ff       	call   c000f84b <malloc>
c00222d3:	83 c4 10             	add    esp,0x10
c00222d6:	89 c2                	mov    edx,eax
c00222d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222dc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00222df:	83 ec 04             	sub    esp,0x4
c00222e2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00222e6:	50                   	push   eax
c00222e7:	6a 01                	push   0x1
c00222e9:	6a 04                	push   0x4
c00222eb:	e8 b7 68 fe ff       	call   c0008ba7 <src_new>
c00222f0:	83 c4 10             	add    esp,0x10
c00222f3:	89 c2                	mov    edx,eax
c00222f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222f9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00222fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022300:	85 c0                	test   eax,eax
c0022302:	74 10                	je     c0022314 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c0022304:	83 ec 0c             	sub    esp,0xc
c0022307:	68 f0 c9 02 c0       	push   0xc002c9f0
c002230c:	e8 f0 81 ff ff       	call   c001a501 <Krnl::panic(char const*)>
c0022311:	83 c4 10             	add    esp,0x10
c0022314:	a0 c0 27 03 c0       	mov    al,ds:0xc00327c0
c0022319:	83 f0 01             	xor    eax,0x1
c002231c:	84 c0                	test   al,al
c002231e:	74 57                	je     c0022377 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c0022320:	a1 10 ca 02 c0       	mov    eax,ds:0xc002ca10
c0022325:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022329:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022331:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0022339:	7f 35                	jg     c0022370 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c002233b:	83 ec 0c             	sub    esp,0xc
c002233e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022342:	e8 a8 4f 00 00       	call   c00272ef <__floatsisf>
c0022347:	83 c4 10             	add    esp,0x10
c002234a:	8b 15 10 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca10
c0022350:	83 ec 08             	sub    esp,0x8
c0022353:	52                   	push   edx
c0022354:	50                   	push   eax
c0022355:	e8 a7 4b 00 00       	call   c0026f01 <__mulsf3>
c002235a:	83 c4 10             	add    esp,0x10
c002235d:	89 c2                	mov    edx,eax
c002235f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022363:	89 14 85 c0 23 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdc40],edx
c002236a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002236e:	eb c1                	jmp    c0022331 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c0022370:	c6 05 c0 27 03 c0 01 	mov    BYTE PTR ds:0xc00327c0,0x1
c0022377:	90                   	nop
c0022378:	83 c4 1c             	add    esp,0x1c
c002237b:	c3                   	ret    

c002237c <SoundChannel::play()>:
c002237c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022380:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0022384:	c3                   	ret    
c0022385:	90                   	nop

c0022386 <SoundChannel::paused()>:
c0022386:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002238a:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c002238d:	c3                   	ret    

c002238e <SoundChannel::getSampleRate()>:
c002238e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022392:	8b 00                	mov    eax,DWORD PTR [eax]
c0022394:	c3                   	ret    
c0022395:	90                   	nop

c0022396 <SoundChannel::getBits()>:
c0022396:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002239a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002239d:	c3                   	ret    

c002239e <SoundChannel::getBufferUsed()>:
c002239e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223a2:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00223a5:	c3                   	ret    

c00223a6 <SoundChannel::getBufferSize()>:
c00223a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223aa:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00223ad:	c3                   	ret    

c00223ae <SoundChannel::unbuffer(float*, int, int)>:
c00223ae:	56                   	push   esi
c00223af:	53                   	push   ebx
c00223b0:	83 ec 40             	sub    esp,0x40
c00223b3:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00223b7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00223ba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00223be:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00223c1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00223c5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00223c9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00223cd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00223d1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00223d5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00223d9:	e8 11 4f 00 00       	call   c00272ef <__floatsisf>
c00223de:	5a                   	pop    edx
c00223df:	89 c6                	mov    esi,eax
c00223e1:	ff 33                	push   DWORD PTR [ebx]
c00223e3:	e8 07 4f 00 00       	call   c00272ef <__floatsisf>
c00223e8:	59                   	pop    ecx
c00223e9:	5a                   	pop    edx
c00223ea:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00223ed:	50                   	push   eax
c00223ee:	e8 0e 4b 00 00       	call   c0026f01 <__mulsf3>
c00223f3:	59                   	pop    ecx
c00223f4:	5a                   	pop    edx
c00223f5:	50                   	push   eax
c00223f6:	56                   	push   esi
c00223f7:	e8 c8 4c 00 00       	call   c00270c4 <__divsf3>
c00223fc:	89 04 24             	mov    DWORD PTR [esp],eax
c00223ff:	e8 bb 61 00 00       	call   c00285bf <__extendsfdf2>
c0022404:	59                   	pop    ecx
c0022405:	5e                   	pop    esi
c0022406:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002240a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c002240e:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0022416:	8d 44 24 14          	lea    eax,[esp+0x14]
c002241a:	50                   	push   eax
c002241b:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c002241e:	e8 79 63 fe ff       	call   c000879c <src_process>
c0022423:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022427:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c002242a:	83 c4 0c             	add    esp,0xc
c002242d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0022430:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0022433:	29 d0                	sub    eax,edx
c0022435:	c1 e0 02             	shl    eax,0x2
c0022438:	50                   	push   eax
c0022439:	8d 04 91             	lea    eax,[ecx+edx*4]
c002243c:	50                   	push   eax
c002243d:	51                   	push   ecx
c002243e:	e8 41 e2 fd ff       	call   c0000684 <memmove>
c0022443:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022447:	83 c4 44             	add    esp,0x44
c002244a:	5b                   	pop    ebx
c002244b:	5e                   	pop    esi
c002244c:	c3                   	ret    
c002244d:	90                   	nop

c002244e <SoundChannel::buffer8(unsigned char*, int)>:
c002244e:	55                   	push   ebp
c002244f:	57                   	push   edi
c0022450:	56                   	push   esi
c0022451:	53                   	push   ebx
c0022452:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022456:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c002245a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c002245d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0022461:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022464:	74 7a                	je     c00224e0 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022466:	85 ff                	test   edi,edi
c0022468:	7e 76                	jle    c00224e0 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c002246a:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c002246e:	8d 70 01             	lea    esi,[eax+0x1]
c0022471:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022474:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022477:	8b 1c 9d c0 23 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdc40]
c002247e:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022481:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022484:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022487:	74 5e                	je     c00224e7 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0022489:	83 ff 01             	cmp    edi,0x1
c002248c:	74 4b                	je     c00224d9 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c002248e:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0022492:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022495:	8d 70 01             	lea    esi,[eax+0x1]
c0022498:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002249b:	8b 1c 9d c0 23 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdc40]
c00224a2:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00224a5:	b8 02 00 00 00       	mov    eax,0x2
c00224aa:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00224ad:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00224b0:	75 23                	jne    c00224d5 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c00224b2:	eb 27                	jmp    c00224db <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00224b4:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c00224b9:	8d 71 01             	lea    esi,[ecx+0x1]
c00224bc:	40                   	inc    eax
c00224bd:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00224c0:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c00224c3:	8b 1c 9d c0 23 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdc40]
c00224ca:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c00224cd:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00224d0:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00224d3:	74 06                	je     c00224db <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00224d5:	39 c7                	cmp    edi,eax
c00224d7:	75 db                	jne    c00224b4 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c00224d9:	89 f8                	mov    eax,edi
c00224db:	5b                   	pop    ebx
c00224dc:	5e                   	pop    esi
c00224dd:	5f                   	pop    edi
c00224de:	5d                   	pop    ebp
c00224df:	c3                   	ret    
c00224e0:	5b                   	pop    ebx
c00224e1:	31 c0                	xor    eax,eax
c00224e3:	5e                   	pop    esi
c00224e4:	5f                   	pop    edi
c00224e5:	5d                   	pop    ebp
c00224e6:	c3                   	ret    
c00224e7:	b8 01 00 00 00       	mov    eax,0x1
c00224ec:	eb ed                	jmp    c00224db <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c00224ee <SoundDevice::SoundDevice(char const*)>:
c00224ee:	83 ec 1c             	sub    esp,0x1c
c00224f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224f5:	83 ec 08             	sub    esp,0x8
c00224f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00224fc:	50                   	push   eax
c00224fd:	e8 de 1e ff ff       	call   c00143e0 <Device::Device(char const*)>
c0022502:	83 c4 10             	add    esp,0x10
c0022505:	ba 1c ca 02 c0       	mov    edx,0xc002ca1c
c002250a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002250e:	89 10                	mov    DWORD PTR [eax],edx
c0022510:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022514:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c002251e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022522:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c002252c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022534:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022539:	7f 19                	jg     c0022554 <SoundDevice::SoundDevice(char const*)+0x66>
c002253b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002253f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022543:	83 c2 54             	add    edx,0x54
c0022546:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c002254e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022552:	eb e0                	jmp    c0022534 <SoundDevice::SoundDevice(char const*)+0x46>
c0022554:	90                   	nop
c0022555:	83 c4 1c             	add    esp,0x1c
c0022558:	c3                   	ret    
c0022559:	90                   	nop

c002255a <SoundDevice::~SoundDevice()>:
c002255a:	53                   	push   ebx
c002255b:	83 ec 18             	sub    esp,0x18
c002255e:	ba 1c ca 02 c0       	mov    edx,0xc002ca1c
c0022563:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022567:	89 10                	mov    DWORD PTR [eax],edx
c0022569:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022571:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022576:	7f 46                	jg     c00225be <SoundDevice::~SoundDevice()+0x64>
c0022578:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002257c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022580:	83 c2 54             	add    edx,0x54
c0022583:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022587:	85 c0                	test   eax,eax
c0022589:	74 2d                	je     c00225b8 <SoundDevice::~SoundDevice()+0x5e>
c002258b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002258f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022593:	83 c2 54             	add    edx,0x54
c0022596:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c002259a:	85 db                	test   ebx,ebx
c002259c:	74 1a                	je     c00225b8 <SoundDevice::~SoundDevice()+0x5e>
c002259e:	83 ec 0c             	sub    esp,0xc
c00225a1:	53                   	push   ebx
c00225a2:	e8 21 fc ff ff       	call   c00221c8 <SoundChannel::~SoundChannel()>
c00225a7:	83 c4 10             	add    esp,0x10
c00225aa:	83 ec 08             	sub    esp,0x8
c00225ad:	6a 2c                	push   0x2c
c00225af:	53                   	push   ebx
c00225b0:	e8 2e 07 ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c00225b5:	83 c4 10             	add    esp,0x10
c00225b8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00225bc:	eb b3                	jmp    c0022571 <SoundDevice::~SoundDevice()+0x17>
c00225be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225c2:	83 ec 0c             	sub    esp,0xc
c00225c5:	50                   	push   eax
c00225c6:	e8 f7 1a ff ff       	call   c00140c2 <Device::~Device()>
c00225cb:	83 c4 10             	add    esp,0x10
c00225ce:	90                   	nop
c00225cf:	83 c4 18             	add    esp,0x18
c00225d2:	5b                   	pop    ebx
c00225d3:	c3                   	ret    

c00225d4 <SoundDevice::~SoundDevice()>:
c00225d4:	83 ec 0c             	sub    esp,0xc
c00225d7:	83 ec 0c             	sub    esp,0xc
c00225da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00225de:	e8 77 ff ff ff       	call   c002255a <SoundDevice::~SoundDevice()>
c00225e3:	83 c4 10             	add    esp,0x10
c00225e6:	83 ec 08             	sub    esp,0x8
c00225e9:	68 e4 01 00 00       	push   0x1e4
c00225ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00225f2:	e8 ec 06 ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c00225f7:	83 c4 10             	add    esp,0x10
c00225fa:	83 c4 0c             	add    esp,0xc
c00225fd:	c3                   	ret    

c00225fe <SoundDevice::getFreeChannelNum()>:
c00225fe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022602:	31 c0                	xor    eax,eax
c0022604:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c002260c:	74 09                	je     c0022617 <SoundDevice::getFreeChannelNum()+0x19>
c002260e:	40                   	inc    eax
c002260f:	83 f8 20             	cmp    eax,0x20
c0022612:	75 f0                	jne    c0022604 <SoundDevice::getFreeChannelNum()+0x6>
c0022614:	83 c8 ff             	or     eax,0xffffffff
c0022617:	c3                   	ret    

c0022618 <SoundDevice::addChannel(SoundChannel*)>:
c0022618:	56                   	push   esi
c0022619:	53                   	push   ebx
c002261a:	51                   	push   ecx
c002261b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002261f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022623:	53                   	push   ebx
c0022624:	e8 d5 ff ff ff       	call   c00225fe <SoundDevice::getFreeChannelNum()>
c0022629:	5a                   	pop    edx
c002262a:	83 f8 ff             	cmp    eax,0xffffffff
c002262d:	74 51                	je     c0022680 <SoundDevice::addChannel(SoundChannel*)+0x68>
c002262f:	85 f6                	test   esi,esi
c0022631:	74 4d                	je     c0022680 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022633:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c002263a:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0022641:	75 30                	jne    c0022673 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0022643:	83 ec 0c             	sub    esp,0xc
c0022646:	56                   	push   esi
c0022647:	e8 42 fd ff ff       	call   c002238e <SoundChannel::getSampleRate()>
c002264c:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0022652:	89 34 24             	mov    DWORD PTR [esp],esi
c0022655:	e8 3c fd ff ff       	call   c0022396 <SoundChannel::getBits()>
c002265a:	83 c4 0c             	add    esp,0xc
c002265d:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0022663:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022665:	50                   	push   eax
c0022666:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c002266c:	53                   	push   ebx
c002266d:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0022670:	83 c4 10             	add    esp,0x10
c0022673:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0022679:	b8 01 00 00 00       	mov    eax,0x1
c002267e:	eb 03                	jmp    c0022683 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0022680:	83 c8 ff             	or     eax,0xffffffff
c0022683:	5a                   	pop    edx
c0022684:	5b                   	pop    ebx
c0022685:	5e                   	pop    esi
c0022686:	c3                   	ret    
c0022687:	90                   	nop

c0022688 <SoundDevice::removeChannel(int)>:
c0022688:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002268c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022690:	83 fa 1f             	cmp    edx,0x1f
c0022693:	77 23                	ja     c00226b8 <SoundDevice::removeChannel(int)+0x30>
c0022695:	8d 14 90             	lea    edx,[eax+edx*4]
c0022698:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c002269f:	74 17                	je     c00226b8 <SoundDevice::removeChannel(int)+0x30>
c00226a1:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c00226ab:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c00226b1:	75 05                	jne    c00226b8 <SoundDevice::removeChannel(int)+0x30>
c00226b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00226b5:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c00226b8:	c3                   	ret    
c00226b9:	90                   	nop

c00226ba <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c00226ba:	57                   	push   edi
c00226bb:	56                   	push   esi
c00226bc:	53                   	push   ebx
c00226bd:	31 db                	xor    ebx,ebx
c00226bf:	83 ec 10             	sub    esp,0x10
c00226c2:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00226c6:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00226ca:	0f 8d cb 00 00 00    	jge    c002279b <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c00226d0:	83 ec 0c             	sub    esp,0xc
c00226d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00226d7:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00226da:	e8 e0 5e 00 00       	call   c00285bf <__extendsfdf2>
c00226df:	83 c4 10             	add    esp,0x10
c00226e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00226e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00226ea:	68 00 00 f0 3f       	push   0x3ff00000
c00226ef:	6a 00                	push   0x0
c00226f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226f9:	e8 4d 4e 00 00       	call   c002754b <__adddf3>
c00226fe:	83 c4 10             	add    esp,0x10
c0022701:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022705:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022709:	68 00 00 e0 3f       	push   0x3fe00000
c002270e:	6a 00                	push   0x0
c0022710:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022714:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022718:	e8 ab 54 00 00       	call   c0027bc8 <__muldf3>
c002271d:	83 c4 10             	add    esp,0x10
c0022720:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022724:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022728:	68 00 00 60 40       	push   0x40600000
c002272d:	6a 00                	push   0x0
c002272f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022733:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022737:	e8 8c 54 00 00       	call   c0027bc8 <__muldf3>
c002273c:	59                   	pop    ecx
c002273d:	5f                   	pop    edi
c002273e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022742:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022746:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002274a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002274e:	e8 48 5d 00 00       	call   c002849b <__truncdfsf2>
c0022753:	5a                   	pop    edx
c0022754:	89 c7                	mov    edi,eax
c0022756:	59                   	pop    ecx
c0022757:	68 00 00 fe 42       	push   0x42fe0000
c002275c:	50                   	push   eax
c002275d:	e8 e3 4d 00 00       	call   c0027545 <__gesf2>
c0022762:	83 c4 10             	add    esp,0x10
c0022765:	85 c0                	test   eax,eax
c0022767:	78 06                	js     c002276f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022769:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c002276d:	eb 26                	jmp    c0022795 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c002276f:	50                   	push   eax
c0022770:	50                   	push   eax
c0022771:	6a 00                	push   0x0
c0022773:	57                   	push   edi
c0022774:	e8 d0 4d 00 00       	call   c0027549 <__lesf2>
c0022779:	83 c4 10             	add    esp,0x10
c002277c:	85 c0                	test   eax,eax
c002277e:	7f 06                	jg     c0022786 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0022780:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022784:	eb 0f                	jmp    c0022795 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022786:	83 ec 0c             	sub    esp,0xc
c0022789:	57                   	push   edi
c002278a:	e8 cd 5e 00 00       	call   c002865c <lrintf>
c002278f:	83 c4 10             	add    esp,0x10
c0022792:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022795:	43                   	inc    ebx
c0022796:	e9 2b ff ff ff       	jmp    c00226c6 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c002279b:	83 c4 10             	add    esp,0x10
c002279e:	5b                   	pop    ebx
c002279f:	5e                   	pop    esi
c00227a0:	5f                   	pop    edi
c00227a1:	c3                   	ret    

c00227a2 <SoundDevice::getAudio(int, float*, float*)>:
c00227a2:	55                   	push   ebp
c00227a3:	57                   	push   edi
c00227a4:	56                   	push   esi
c00227a5:	53                   	push   ebx
c00227a6:	31 db                	xor    ebx,ebx
c00227a8:	83 ec 20             	sub    esp,0x20
c00227ab:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00227af:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00227b3:	c1 e0 02             	shl    eax,0x2
c00227b6:	50                   	push   eax
c00227b7:	6a 00                	push   0x0
c00227b9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00227bd:	e8 be df fd ff       	call   c0000780 <memset>
c00227c2:	83 c4 10             	add    esp,0x10
c00227c5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00227c9:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c00227d0:	85 c0                	test   eax,eax
c00227d2:	0f 84 d7 00 00 00    	je     c00228af <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00227d8:	83 ec 0c             	sub    esp,0xc
c00227db:	50                   	push   eax
c00227dc:	e8 a5 fb ff ff       	call   c0022386 <SoundChannel::paused()>
c00227e1:	83 c4 10             	add    esp,0x10
c00227e4:	84 c0                	test   al,al
c00227e6:	0f 85 c3 00 00 00    	jne    c00228af <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00227ec:	83 ec 0c             	sub    esp,0xc
c00227ef:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00227f6:	e8 19 fa ff ff       	call   c0022214 <SoundChannel::getVolume()>
c00227fb:	83 c4 10             	add    esp,0x10
c00227fe:	85 c0                	test   eax,eax
c0022800:	0f 84 a9 00 00 00    	je     c00228af <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022806:	83 ec 0c             	sub    esp,0xc
c0022809:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022810:	e8 ff f9 ff ff       	call   c0022214 <SoundChannel::getVolume()>
c0022815:	83 ec 0c             	sub    esp,0xc
c0022818:	50                   	push   eax
c0022819:	e8 d1 4a 00 00       	call   c00272ef <__floatsisf>
c002281e:	59                   	pop    ecx
c002281f:	5d                   	pop    ebp
c0022820:	31 ed                	xor    ebp,ebp
c0022822:	68 00 00 c8 42       	push   0x42c80000
c0022827:	50                   	push   eax
c0022828:	e8 97 48 00 00       	call   c00270c4 <__divsf3>
c002282d:	83 c4 10             	add    esp,0x10
c0022830:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022834:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0022838:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c002283e:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0022842:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022849:	e8 60 fb ff ff       	call   c00223ae <SoundChannel::unbuffer(float*, int, int)>
c002284e:	83 c4 20             	add    esp,0x20
c0022851:	89 c1                	mov    ecx,eax
c0022853:	39 cd                	cmp    ebp,ecx
c0022855:	7d 52                	jge    c00228a9 <SoundDevice::getAudio(int, float*, float*)+0x107>
c0022857:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002285b:	50                   	push   eax
c002285c:	50                   	push   eax
c002285d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0022861:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022864:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022868:	e8 94 46 00 00       	call   c0026f01 <__mulsf3>
c002286d:	5a                   	pop    edx
c002286e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022872:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0022878:	e8 72 4a 00 00       	call   c00272ef <__floatsisf>
c002287d:	59                   	pop    ecx
c002287e:	5a                   	pop    edx
c002287f:	50                   	push   eax
c0022880:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022884:	e8 3b 48 00 00       	call   c00270c4 <__divsf3>
c0022889:	59                   	pop    ecx
c002288a:	5a                   	pop    edx
c002288b:	50                   	push   eax
c002288c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022890:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022893:	e8 46 43 00 00       	call   c0026bde <__addsf3>
c0022898:	83 c4 10             	add    esp,0x10
c002289b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002289f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00228a3:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c00228a6:	45                   	inc    ebp
c00228a7:	eb aa                	jmp    c0022853 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c00228a9:	39 cf                	cmp    edi,ecx
c00228ab:	7e 02                	jle    c00228af <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00228ad:	89 cf                	mov    edi,ecx
c00228af:	43                   	inc    ebx
c00228b0:	83 fb 20             	cmp    ebx,0x20
c00228b3:	0f 85 10 ff ff ff    	jne    c00227c9 <SoundDevice::getAudio(int, float*, float*)+0x27>
c00228b9:	83 c4 1c             	add    esp,0x1c
c00228bc:	89 f8                	mov    eax,edi
c00228be:	5b                   	pop    ebx
c00228bf:	5e                   	pop    esi
c00228c0:	5f                   	pop    edi
c00228c1:	5d                   	pop    ebp
c00228c2:	c3                   	ret    
c00228c3:	90                   	nop

c00228c4 <PCI::open(int, int, void*)>:
c00228c4:	83 ec 18             	sub    esp,0x18
c00228c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00228cb:	8b 10                	mov    edx,DWORD PTR [eax]
c00228cd:	50                   	push   eax
c00228ce:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00228d1:	31 c0                	xor    eax,eax
c00228d3:	83 c4 1c             	add    esp,0x1c
c00228d6:	c3                   	ret    
c00228d7:	90                   	nop

c00228d8 <PCI::close(int, int, void*)>:
c00228d8:	31 c0                	xor    eax,eax
c00228da:	c3                   	ret    
c00228db:	90                   	nop

c00228dc <PCI::PCI()>:
c00228dc:	83 ec 0c             	sub    esp,0xc
c00228df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228e3:	83 ec 08             	sub    esp,0x8
c00228e6:	68 4c ca 02 c0       	push   0xc002ca4c
c00228eb:	50                   	push   eax
c00228ec:	e8 73 11 ff ff       	call   c0013a64 <Bus::Bus(char const*)>
c00228f1:	83 c4 10             	add    esp,0x10
c00228f4:	ba b8 ca 02 c0       	mov    edx,0xc002cab8
c00228f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228fd:	89 10                	mov    DWORD PTR [eax],edx
c00228ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022903:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022909:	0f b6 d0             	movzx  edx,al
c002290c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022910:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0022917:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002291b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022921:	0f b6 d0             	movzx  edx,al
c0022924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022928:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c002292d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022931:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022937:	8d 50 01             	lea    edx,[eax+0x1]
c002293a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002293e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022944:	0f b6 d0             	movzx  edx,al
c0022947:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002294b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002294f:	83 c9 c0             	or     ecx,0xffffffc0
c0022952:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022956:	90                   	nop
c0022957:	83 c4 0c             	add    esp,0xc
c002295a:	c3                   	ret    
c002295b:	90                   	nop

c002295c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002295c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0022960:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022965:	89 ca                	mov    edx,ecx
c0022967:	c1 e0 10             	shl    eax,0x10
c002296a:	81 e2 fc 00 00 00    	and    edx,0xfc
c0022970:	09 d0                	or     eax,edx
c0022972:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0022977:	c1 e2 08             	shl    edx,0x8
c002297a:	09 d0                	or     eax,edx
c002297c:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0022981:	c1 e2 0b             	shl    edx,0xb
c0022984:	09 d0                	or     eax,edx
c0022986:	ba f8 0c 00 00       	mov    edx,0xcf8
c002298b:	0d 00 00 00 80       	or     eax,0x80000000
c0022990:	ef                   	out    dx,eax
c0022991:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022996:	ed                   	in     eax,dx
c0022997:	83 e1 02             	and    ecx,0x2
c002299a:	0f b6 c9             	movzx  ecx,cl
c002299d:	c1 e1 03             	shl    ecx,0x3
c00229a0:	d3 e8                	shr    eax,cl
c00229a2:	c3                   	ret    
c00229a3:	90                   	nop

c00229a4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00229a4:	6a 00                	push   0x0
c00229a6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229ab:	50                   	push   eax
c00229ac:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229b1:	50                   	push   eax
c00229b2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229b7:	50                   	push   eax
c00229b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229bc:	e8 9b ff ff ff       	call   c002295c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229c1:	83 c4 14             	add    esp,0x14
c00229c4:	c3                   	ret    
c00229c5:	90                   	nop

c00229c6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00229c6:	6a 0e                	push   0xe
c00229c8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229cd:	50                   	push   eax
c00229ce:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229d3:	50                   	push   eax
c00229d4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229d9:	50                   	push   eax
c00229da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229de:	e8 79 ff ff ff       	call   c002295c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229e3:	83 c4 14             	add    esp,0x14
c00229e6:	0f b6 c0             	movzx  eax,al
c00229e9:	c3                   	ret    

c00229ea <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00229ea:	55                   	push   ebp
c00229eb:	57                   	push   edi
c00229ec:	56                   	push   esi
c00229ed:	53                   	push   ebx
c00229ee:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c00229f3:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c00229f8:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c00229fd:	6a 0a                	push   0xa
c00229ff:	56                   	push   esi
c0022a00:	55                   	push   ebp
c0022a01:	57                   	push   edi
c0022a02:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022a06:	e8 51 ff ff ff       	call   c002295c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a0b:	6a 0a                	push   0xa
c0022a0d:	89 c3                	mov    ebx,eax
c0022a0f:	56                   	push   esi
c0022a10:	0f b6 db             	movzx  ebx,bl
c0022a13:	55                   	push   ebp
c0022a14:	57                   	push   edi
c0022a15:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022a19:	e8 3e ff ff ff       	call   c002295c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a1e:	83 c4 28             	add    esp,0x28
c0022a21:	25 00 ff 00 00       	and    eax,0xff00
c0022a26:	09 d8                	or     eax,ebx
c0022a28:	5b                   	pop    ebx
c0022a29:	5e                   	pop    esi
c0022a2a:	5f                   	pop    edi
c0022a2b:	5d                   	pop    ebp
c0022a2c:	c3                   	ret    
c0022a2d:	90                   	nop

c0022a2e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022a2e:	6a 08                	push   0x8
c0022a30:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a35:	50                   	push   eax
c0022a36:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a3b:	50                   	push   eax
c0022a3c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a41:	50                   	push   eax
c0022a42:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a46:	e8 11 ff ff ff       	call   c002295c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a4b:	83 c4 14             	add    esp,0x14
c0022a4e:	0f b6 c4             	movzx  eax,ah
c0022a51:	c3                   	ret    

c0022a52 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022a52:	6a 08                	push   0x8
c0022a54:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a59:	50                   	push   eax
c0022a5a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a5f:	50                   	push   eax
c0022a60:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a65:	50                   	push   eax
c0022a66:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a6a:	e8 ed fe ff ff       	call   c002295c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a6f:	83 c4 14             	add    esp,0x14
c0022a72:	c3                   	ret    
c0022a73:	90                   	nop

c0022a74 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022a74:	6a 3c                	push   0x3c
c0022a76:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a7b:	50                   	push   eax
c0022a7c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a81:	50                   	push   eax
c0022a82:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a87:	50                   	push   eax
c0022a88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a8c:	e8 cb fe ff ff       	call   c002295c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a91:	83 c4 14             	add    esp,0x14
c0022a94:	c3                   	ret    
c0022a95:	90                   	nop

c0022a96 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022a96:	6a 18                	push   0x18
c0022a98:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a9d:	50                   	push   eax
c0022a9e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022aa3:	50                   	push   eax
c0022aa4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022aa9:	50                   	push   eax
c0022aaa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022aae:	e8 a9 fe ff ff       	call   c002295c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ab3:	83 c4 14             	add    esp,0x14
c0022ab6:	0f b6 c4             	movzx  eax,ah
c0022ab9:	c3                   	ret    

c0022aba <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022aba:	55                   	push   ebp
c0022abb:	57                   	push   edi
c0022abc:	56                   	push   esi
c0022abd:	53                   	push   ebx
c0022abe:	50                   	push   eax
c0022abf:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0022ac3:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0022ac8:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022acd:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0022ad2:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022ad9:	8d 43 12             	lea    eax,[ebx+0x12]
c0022adc:	83 c3 10             	add    ebx,0x10
c0022adf:	0f b6 c0             	movzx  eax,al
c0022ae2:	0f b6 db             	movzx  ebx,bl
c0022ae5:	50                   	push   eax
c0022ae6:	51                   	push   ecx
c0022ae7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022aeb:	57                   	push   edi
c0022aec:	55                   	push   ebp
c0022aed:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0022af1:	e8 66 fe ff ff       	call   c002295c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022af6:	53                   	push   ebx
c0022af7:	89 c6                	mov    esi,eax
c0022af9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022afd:	c1 e6 10             	shl    esi,0x10
c0022b00:	51                   	push   ecx
c0022b01:	57                   	push   edi
c0022b02:	55                   	push   ebp
c0022b03:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022b07:	e8 50 fe ff ff       	call   c002295c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b0c:	83 c4 2c             	add    esp,0x2c
c0022b0f:	0f b7 c0             	movzx  eax,ax
c0022b12:	5b                   	pop    ebx
c0022b13:	09 f0                	or     eax,esi
c0022b15:	5e                   	pop    esi
c0022b16:	5f                   	pop    edi
c0022b17:	5d                   	pop    ebp
c0022b18:	c3                   	ret    
c0022b19:	90                   	nop

c0022b1a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022b1a:	53                   	push   ebx
c0022b1b:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022b20:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0022b25:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022b29:	c1 e1 10             	shl    ecx,0x10
c0022b2c:	25 fc 00 00 00       	and    eax,0xfc
c0022b31:	09 c1                	or     ecx,eax
c0022b33:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b38:	c1 e0 08             	shl    eax,0x8
c0022b3b:	09 c1                	or     ecx,eax
c0022b3d:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0022b42:	c1 e0 0b             	shl    eax,0xb
c0022b45:	09 c1                	or     ecx,eax
c0022b47:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022b4d:	89 c8                	mov    eax,ecx
c0022b4f:	ef                   	out    dx,eax
c0022b50:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022b55:	ed                   	in     eax,dx
c0022b56:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0022b5b:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0022b60:	74 0a                	je     c0022b6c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0022b62:	0f b7 d8             	movzx  ebx,ax
c0022b65:	89 d0                	mov    eax,edx
c0022b67:	c1 e0 10             	shl    eax,0x10
c0022b6a:	eb 05                	jmp    c0022b71 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0022b6c:	66 31 c0             	xor    ax,ax
c0022b6f:	89 d3                	mov    ebx,edx
c0022b71:	09 c3                	or     ebx,eax
c0022b73:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022b78:	89 c8                	mov    eax,ecx
c0022b7a:	ef                   	out    dx,eax
c0022b7b:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022b80:	89 d8                	mov    eax,ebx
c0022b82:	ef                   	out    dx,eax
c0022b83:	5b                   	pop    ebx
c0022b84:	c3                   	ret    
c0022b85:	90                   	nop

c0022b86 <PCI::checkBus(unsigned char)>:
c0022b86:	56                   	push   esi
c0022b87:	53                   	push   ebx
c0022b88:	31 db                	xor    ebx,ebx
c0022b8a:	51                   	push   ecx
c0022b8b:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022b90:	52                   	push   edx
c0022b91:	53                   	push   ebx
c0022b92:	43                   	inc    ebx
c0022b93:	56                   	push   esi
c0022b94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022b98:	e8 2b 03 00 00       	call   c0022ec8 <PCI::checkDevice(unsigned char, unsigned char)>
c0022b9d:	83 c4 10             	add    esp,0x10
c0022ba0:	83 fb 20             	cmp    ebx,0x20
c0022ba3:	75 eb                	jne    c0022b90 <PCI::checkBus(unsigned char)+0xa>
c0022ba5:	58                   	pop    eax
c0022ba6:	5b                   	pop    ebx
c0022ba7:	5e                   	pop    esi
c0022ba8:	c3                   	ret    
c0022ba9:	90                   	nop

c0022baa <PCI::foundDevice(PCIDeviceInfo)>:
c0022baa:	55                   	push   ebp
c0022bab:	57                   	push   edi
c0022bac:	56                   	push   esi
c0022bad:	53                   	push   ebx
c0022bae:	83 ec 1c             	sub    esp,0x1c
c0022bb1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022bb5:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022bbb:	0f 84 52 01 00 00    	je     c0022d13 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022bc1:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022bc5:	66 81 f9 06 04       	cmp    cx,0x406
c0022bca:	75 2c                	jne    c0022bf8 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022bcc:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022bd1:	50                   	push   eax
c0022bd2:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022bd7:	50                   	push   eax
c0022bd8:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022bdd:	50                   	push   eax
c0022bde:	56                   	push   esi
c0022bdf:	e8 b2 fe ff ff       	call   c0022a96 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022be4:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022be8:	0f b6 c0             	movzx  eax,al
c0022beb:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022bef:	83 c4 2c             	add    esp,0x2c
c0022bf2:	5b                   	pop    ebx
c0022bf3:	5e                   	pop    esi
c0022bf4:	5f                   	pop    edi
c0022bf5:	5d                   	pop    ebp
c0022bf6:	eb 8e                	jmp    c0022b86 <PCI::checkBus(unsigned char)>
c0022bf8:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022bfc:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022c02:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022c06:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022c0a:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022c0e:	88 d3                	mov    bl,dl
c0022c10:	85 c0                	test   eax,eax
c0022c12:	74 33                	je     c0022c47 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022c14:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022c17:	85 d2                	test   edx,edx
c0022c19:	74 28                	je     c0022c43 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c1b:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022c21:	31 ef                	xor    edi,ebp
c0022c23:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022c29:	75 18                	jne    c0022c43 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c2b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022c2f:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022c35:	75 0c                	jne    c0022c43 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c37:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022c3d:	0f 84 d0 00 00 00    	je     c0022d13 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022c43:	8b 00                	mov    eax,DWORD PTR [eax]
c0022c45:	eb c9                	jmp    c0022c10 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022c47:	66 81 f9 01 06       	cmp    cx,0x601
c0022c4c:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022c50:	75 19                	jne    c0022c6b <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022c52:	83 ec 0c             	sub    esp,0xc
c0022c55:	68 64 01 00 00       	push   0x164
c0022c5a:	e8 ec cb fe ff       	call   c000f84b <malloc>
c0022c5f:	89 c5                	mov    ebp,eax
c0022c61:	89 04 24             	mov    DWORD PTR [esp],eax
c0022c64:	e8 95 0f 00 00       	call   c0023bfe <SATABus::SATABus()>
c0022c69:	eb 1e                	jmp    c0022c89 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022c6b:	66 81 f9 01 01       	cmp    cx,0x101
c0022c70:	75 60                	jne    c0022cd2 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022c72:	83 ec 0c             	sub    esp,0xc
c0022c75:	68 70 02 00 00       	push   0x270
c0022c7a:	e8 cc cb fe ff       	call   c000f84b <malloc>
c0022c7f:	89 c5                	mov    ebp,eax
c0022c81:	89 04 24             	mov    DWORD PTR [esp],eax
c0022c84:	e8 03 03 00 00       	call   c0022f8c <IDE::IDE()>
c0022c89:	58                   	pop    eax
c0022c8a:	5a                   	pop    edx
c0022c8b:	55                   	push   ebp
c0022c8c:	56                   	push   esi
c0022c8d:	e8 5e 15 ff ff       	call   c00141f0 <Device::addChild(Device*)>
c0022c92:	83 ec 1c             	sub    esp,0x1c
c0022c95:	b9 09 00 00 00       	mov    ecx,0x9
c0022c9a:	fc                   	cld    
c0022c9b:	89 e7                	mov    edi,esp
c0022c9d:	89 de                	mov    esi,ebx
c0022c9f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022ca1:	55                   	push   ebp
c0022ca2:	e8 53 14 ff ff       	call   c00140fa <Device::preOpenPCI(PCIDeviceInfo)>
c0022ca7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022caa:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022cae:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022cb6:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022cbe:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022cc6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022cc9:	83 c4 4c             	add    esp,0x4c
c0022ccc:	5b                   	pop    ebx
c0022ccd:	5e                   	pop    esi
c0022cce:	5f                   	pop    edi
c0022ccf:	5d                   	pop    ebp
c0022cd0:	ff e0                	jmp    eax
c0022cd2:	83 ec 0c             	sub    esp,0xc
c0022cd5:	68 58 01 00 00       	push   0x158
c0022cda:	e8 6c cb fe ff       	call   c000f84b <malloc>
c0022cdf:	89 c5                	mov    ebp,eax
c0022ce1:	58                   	pop    eax
c0022ce2:	5a                   	pop    edx
c0022ce3:	68 54 ca 02 c0       	push   0xc002ca54
c0022ce8:	55                   	push   ebp
c0022ce9:	e8 f8 17 ff ff       	call   c00144e6 <DriverlessDevice::DriverlessDevice(char const*)>
c0022cee:	59                   	pop    ecx
c0022cef:	5f                   	pop    edi
c0022cf0:	55                   	push   ebp
c0022cf1:	56                   	push   esi
c0022cf2:	e8 f9 14 ff ff       	call   c00141f0 <Device::addChild(Device*)>
c0022cf7:	b9 09 00 00 00       	mov    ecx,0x9
c0022cfc:	fc                   	cld    
c0022cfd:	89 df                	mov    edi,ebx
c0022cff:	89 de                	mov    esi,ebx
c0022d01:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022d03:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022d07:	83 c4 2c             	add    esp,0x2c
c0022d0a:	5b                   	pop    ebx
c0022d0b:	5e                   	pop    esi
c0022d0c:	5f                   	pop    edi
c0022d0d:	5d                   	pop    ebp
c0022d0e:	e9 e7 13 ff ff       	jmp    c00140fa <Device::preOpenPCI(PCIDeviceInfo)>
c0022d13:	83 c4 1c             	add    esp,0x1c
c0022d16:	5b                   	pop    ebx
c0022d17:	5e                   	pop    esi
c0022d18:	5f                   	pop    edi
c0022d19:	5d                   	pop    ebp
c0022d1a:	c3                   	ret    
c0022d1b:	90                   	nop

c0022d1c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022d1c:	55                   	push   ebp
c0022d1d:	57                   	push   edi
c0022d1e:	56                   	push   esi
c0022d1f:	53                   	push   ebx
c0022d20:	83 ec 5c             	sub    esp,0x5c
c0022d23:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0022d27:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022d2b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0022d2f:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0022d34:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022d38:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0022d3c:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0022d41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022d45:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0022d4a:	6a 0c                	push   0xc
c0022d4c:	55                   	push   ebp
c0022d4d:	53                   	push   ebx
c0022d4e:	57                   	push   edi
c0022d4f:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0022d56:	e8 01 fc ff ff       	call   c002295c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d5b:	55                   	push   ebp
c0022d5c:	53                   	push   ebx
c0022d5d:	57                   	push   edi
c0022d5e:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022d65:	e8 80 fc ff ff       	call   c00229ea <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022d6a:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0022d6f:	83 c4 24             	add    esp,0x24
c0022d72:	55                   	push   ebp
c0022d73:	53                   	push   ebx
c0022d74:	57                   	push   edi
c0022d75:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022d79:	e8 f6 fc ff ff       	call   c0022a74 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022d7e:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0022d82:	6a 3c                	push   0x3c
c0022d84:	55                   	push   ebp
c0022d85:	53                   	push   ebx
c0022d86:	57                   	push   edi
c0022d87:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022d8e:	e8 c9 fb ff ff       	call   c002295c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d93:	0f b6 c4             	movzx  eax,ah
c0022d96:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022d9a:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022d9e:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0022da2:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0022da7:	83 c4 24             	add    esp,0x24
c0022daa:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022db0:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022db7:	74 6c                	je     c0022e25 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022db9:	31 f6                	xor    esi,esi
c0022dbb:	8b 15 68 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e468
c0022dc1:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022dc7:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0022dcd:	7e 56                	jle    c0022e25 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022dcf:	8d 14 f2             	lea    edx,[edx+esi*8]
c0022dd2:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022dd9:	39 cb                	cmp    ebx,ecx
c0022ddb:	75 45                	jne    c0022e22 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022ddd:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022de4:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0022de8:	75 38                	jne    c0022e22 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022dea:	83 ec 0c             	sub    esp,0xc
c0022ded:	68 6e ca 02 c0       	push   0xc002ca6e
c0022df2:	e8 cc ff fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0022df7:	8b 15 68 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e468
c0022dfd:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022e03:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0022e0b:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0022e0f:	52                   	push   edx
c0022e10:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022e14:	53                   	push   ebx
c0022e15:	68 93 ca 02 c0       	push   0xc002ca93
c0022e1a:	e8 a4 ff fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0022e1f:	83 c4 20             	add    esp,0x20
c0022e22:	46                   	inc    esi
c0022e23:	eb 96                	jmp    c0022dbb <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0022e25:	31 d2                	xor    edx,edx
c0022e27:	83 ec 0c             	sub    esp,0xc
c0022e2a:	55                   	push   ebp
c0022e2b:	53                   	push   ebx
c0022e2c:	57                   	push   edi
c0022e2d:	52                   	push   edx
c0022e2e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022e32:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022e39:	e8 7c fc ff ff       	call   c0022aba <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e3e:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0022e42:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022e46:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022e4a:	42                   	inc    edx
c0022e4b:	83 c4 20             	add    esp,0x20
c0022e4e:	83 fa 06             	cmp    edx,0x6
c0022e51:	75 d4                	jne    c0022e27 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0022e53:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022e57:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0022e5b:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0022e5f:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0022e63:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0022e67:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0022e6b:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0022e70:	86 e0                	xchg   al,ah
c0022e72:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0022e77:	55                   	push   ebp
c0022e78:	53                   	push   ebx
c0022e79:	57                   	push   edi
c0022e7a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022e7e:	e8 ab fb ff ff       	call   c0022a2e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022e83:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022e87:	55                   	push   ebp
c0022e88:	53                   	push   ebx
c0022e89:	57                   	push   edi
c0022e8a:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022e91:	e8 0e fb ff ff       	call   c00229a4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022e96:	83 ec 0c             	sub    esp,0xc
c0022e99:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0022e9e:	b9 09 00 00 00       	mov    ecx,0x9
c0022ea3:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0022ea7:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022eab:	fc                   	cld    
c0022eac:	89 e7                	mov    edi,esp
c0022eae:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022eb0:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022eb7:	e8 ee fc ff ff       	call   c0022baa <PCI::foundDevice(PCIDeviceInfo)>
c0022ebc:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022ec2:	5b                   	pop    ebx
c0022ec3:	5e                   	pop    esi
c0022ec4:	5f                   	pop    edi
c0022ec5:	5d                   	pop    ebp
c0022ec6:	c3                   	ret    
c0022ec7:	90                   	nop

c0022ec8 <PCI::checkDevice(unsigned char, unsigned char)>:
c0022ec8:	55                   	push   ebp
c0022ec9:	57                   	push   edi
c0022eca:	56                   	push   esi
c0022ecb:	53                   	push   ebx
c0022ecc:	83 ec 0c             	sub    esp,0xc
c0022ecf:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022ed3:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022ed8:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022edd:	6a 00                	push   0x0
c0022edf:	56                   	push   esi
c0022ee0:	57                   	push   edi
c0022ee1:	55                   	push   ebp
c0022ee2:	e8 bd fa ff ff       	call   c00229a4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022ee7:	6a 00                	push   0x0
c0022ee9:	56                   	push   esi
c0022eea:	57                   	push   edi
c0022eeb:	55                   	push   ebp
c0022eec:	e8 2b fe ff ff       	call   c0022d1c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022ef1:	83 c4 20             	add    esp,0x20
c0022ef4:	6a 00                	push   0x0
c0022ef6:	56                   	push   esi
c0022ef7:	57                   	push   edi
c0022ef8:	55                   	push   ebp
c0022ef9:	e8 c8 fa ff ff       	call   c00229c6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022efe:	83 c4 10             	add    esp,0x10
c0022f01:	84 c0                	test   al,al
c0022f03:	79 27                	jns    c0022f2c <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022f05:	bb 01 00 00 00       	mov    ebx,0x1
c0022f0a:	53                   	push   ebx
c0022f0b:	56                   	push   esi
c0022f0c:	57                   	push   edi
c0022f0d:	55                   	push   ebp
c0022f0e:	e8 91 fa ff ff       	call   c00229a4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f13:	83 c4 10             	add    esp,0x10
c0022f16:	66 40                	inc    ax
c0022f18:	74 0c                	je     c0022f26 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022f1a:	53                   	push   ebx
c0022f1b:	56                   	push   esi
c0022f1c:	57                   	push   edi
c0022f1d:	55                   	push   ebp
c0022f1e:	e8 f9 fd ff ff       	call   c0022d1c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022f23:	83 c4 10             	add    esp,0x10
c0022f26:	43                   	inc    ebx
c0022f27:	83 fb 08             	cmp    ebx,0x8
c0022f2a:	75 de                	jne    c0022f0a <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022f2c:	83 c4 0c             	add    esp,0xc
c0022f2f:	5b                   	pop    ebx
c0022f30:	5e                   	pop    esi
c0022f31:	5f                   	pop    edi
c0022f32:	5d                   	pop    ebp
c0022f33:	c3                   	ret    

c0022f34 <PCI::detect()>:
c0022f34:	56                   	push   esi
c0022f35:	53                   	push   ebx
c0022f36:	53                   	push   ebx
c0022f37:	31 db                	xor    ebx,ebx
c0022f39:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022f3d:	6a 00                	push   0x0
c0022f3f:	6a 00                	push   0x0
c0022f41:	6a 00                	push   0x0
c0022f43:	56                   	push   esi
c0022f44:	e8 7d fa ff ff       	call   c00229c6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022f49:	83 c4 10             	add    esp,0x10
c0022f4c:	a8 80                	test   al,0x80
c0022f4e:	75 21                	jne    c0022f71 <PCI::detect()+0x3d>
c0022f50:	51                   	push   ecx
c0022f51:	51                   	push   ecx
c0022f52:	6a 00                	push   0x0
c0022f54:	56                   	push   esi
c0022f55:	e8 2c fc ff ff       	call   c0022b86 <PCI::checkBus(unsigned char)>
c0022f5a:	83 c4 10             	add    esp,0x10
c0022f5d:	eb 24                	jmp    c0022f83 <PCI::detect()+0x4f>
c0022f5f:	52                   	push   edx
c0022f60:	52                   	push   edx
c0022f61:	53                   	push   ebx
c0022f62:	43                   	inc    ebx
c0022f63:	56                   	push   esi
c0022f64:	e8 1d fc ff ff       	call   c0022b86 <PCI::checkBus(unsigned char)>
c0022f69:	83 c4 10             	add    esp,0x10
c0022f6c:	83 fb 08             	cmp    ebx,0x8
c0022f6f:	74 12                	je     c0022f83 <PCI::detect()+0x4f>
c0022f71:	53                   	push   ebx
c0022f72:	6a 00                	push   0x0
c0022f74:	6a 00                	push   0x0
c0022f76:	56                   	push   esi
c0022f77:	e8 28 fa ff ff       	call   c00229a4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f7c:	83 c4 10             	add    esp,0x10
c0022f7f:	66 40                	inc    ax
c0022f81:	74 dc                	je     c0022f5f <PCI::detect()+0x2b>
c0022f83:	58                   	pop    eax
c0022f84:	5b                   	pop    ebx
c0022f85:	5e                   	pop    esi
c0022f86:	c3                   	ret    
c0022f87:	90                   	nop

c0022f88 <IDE::close(int, int, void*)>:
c0022f88:	83 c8 ff             	or     eax,0xffffffff
c0022f8b:	c3                   	ret    

c0022f8c <IDE::IDE()>:
c0022f8c:	83 ec 0c             	sub    esp,0xc
c0022f8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f93:	83 ec 08             	sub    esp,0x8
c0022f96:	68 dc ca 02 c0       	push   0xc002cadc
c0022f9b:	50                   	push   eax
c0022f9c:	e8 db 15 ff ff       	call   c001457c <HardDiskController::HardDiskController(char const*)>
c0022fa1:	83 c4 10             	add    esp,0x10
c0022fa4:	ba 1c cd 02 c0       	mov    edx,0xc002cd1c
c0022fa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fad:	89 10                	mov    DWORD PTR [eax],edx
c0022faf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fb3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022fba:	90                   	nop
c0022fbb:	83 c4 0c             	add    esp,0xc
c0022fbe:	c3                   	ret    
c0022fbf:	90                   	nop

c0022fc0 <IDE::prepareInterrupt(unsigned char)>:
c0022fc0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022fc5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022fc9:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0022fd1:	c3                   	ret    

c0022fd2 <selectDrive(unsigned char, unsigned char)>:
c0022fd2:	c3                   	ret    
c0022fd3:	90                   	nop

c0022fd4 <IDE::getBase(unsigned char)>:
c0022fd4:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0022fd9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022fdd:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0022fe5:	c3                   	ret    

c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0022fe6:	55                   	push   ebp
c0022fe7:	57                   	push   edi
c0022fe8:	56                   	push   esi
c0022fe9:	53                   	push   ebx
c0022fea:	83 ec 1c             	sub    esp,0x1c
c0022fed:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022ff1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022ff5:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0022ff8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022ffc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023000:	80 f9 03             	cmp    cl,0x3
c0023003:	77 51                	ja     c0023056 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0023005:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023009:	0f b6 f2             	movzx  esi,dl
c002300c:	0f b6 db             	movzx  ebx,bl
c002300f:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023012:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0023016:	83 ca 80             	or     edx,0xffffff80
c0023019:	0f b6 d2             	movzx  edx,dl
c002301c:	52                   	push   edx
c002301d:	6a 0c                	push   0xc
c002301f:	56                   	push   esi
c0023020:	57                   	push   edi
c0023021:	e8 c0 ff ff ff       	call   c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023026:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c002302b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002302f:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0023033:	ee                   	out    dx,al
c0023034:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0023039:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c002303d:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0023041:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023045:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002304d:	83 c4 2c             	add    esp,0x2c
c0023050:	5b                   	pop    ebx
c0023051:	5e                   	pop    esi
c0023052:	5f                   	pop    edi
c0023053:	5d                   	pop    ebp
c0023054:	eb 90                	jmp    c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023056:	80 fb 07             	cmp    bl,0x7
c0023059:	77 12                	ja     c002306d <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c002305b:	0f b6 d2             	movzx  edx,dl
c002305e:	0f b6 db             	movzx  ebx,bl
c0023061:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0023069:	89 da                	mov    edx,ebx
c002306b:	eb 2f                	jmp    c002309c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002306d:	80 fb 0d             	cmp    bl,0xd
c0023070:	77 13                	ja     c0023085 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0023072:	0f b6 d2             	movzx  edx,dl
c0023075:	0f b6 db             	movzx  ebx,bl
c0023078:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c002307f:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0023083:	eb 17                	jmp    c002309c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023085:	80 fb 15             	cmp    bl,0x15
c0023088:	77 13                	ja     c002309d <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002308a:	0f b6 d2             	movzx  edx,dl
c002308d:	0f b6 db             	movzx  ebx,bl
c0023090:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0023098:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c002309c:	ee                   	out    dx,al
c002309d:	83 c4 1c             	add    esp,0x1c
c00230a0:	5b                   	pop    ebx
c00230a1:	5e                   	pop    esi
c00230a2:	5f                   	pop    edi
c00230a3:	5d                   	pop    ebp
c00230a4:	c3                   	ret    
c00230a5:	90                   	nop

c00230a6 <IDE::read(unsigned char, unsigned char)>:
c00230a6:	55                   	push   ebp
c00230a7:	57                   	push   edi
c00230a8:	56                   	push   esi
c00230a9:	53                   	push   ebx
c00230aa:	83 ec 1c             	sub    esp,0x1c
c00230ad:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00230b1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00230b5:	8d 43 f8             	lea    eax,[ebx-0x8]
c00230b8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00230bc:	3c 03                	cmp    al,0x3
c00230be:	77 43                	ja     c0023103 <IDE::read(unsigned char, unsigned char)+0x5d>
c00230c0:	0f b6 f2             	movzx  esi,dl
c00230c3:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00230c6:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00230ca:	83 c8 80             	or     eax,0xffffff80
c00230cd:	0f b6 c0             	movzx  eax,al
c00230d0:	50                   	push   eax
c00230d1:	6a 0c                	push   0xc
c00230d3:	56                   	push   esi
c00230d4:	57                   	push   edi
c00230d5:	e8 0c ff ff ff       	call   c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230da:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00230df:	0f b6 c3             	movzx  eax,bl
c00230e2:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00230e6:	ec                   	in     al,dx
c00230e7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00230eb:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00230f0:	52                   	push   edx
c00230f1:	6a 0c                	push   0xc
c00230f3:	56                   	push   esi
c00230f4:	57                   	push   edi
c00230f5:	e8 ec fe ff ff       	call   c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230fa:	83 c4 20             	add    esp,0x20
c00230fd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023101:	eb 49                	jmp    c002314c <IDE::read(unsigned char, unsigned char)+0xa6>
c0023103:	80 fb 07             	cmp    bl,0x7
c0023106:	77 12                	ja     c002311a <IDE::read(unsigned char, unsigned char)+0x74>
c0023108:	0f b6 d2             	movzx  edx,dl
c002310b:	0f b6 c3             	movzx  eax,bl
c002310e:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0023116:	89 c2                	mov    edx,eax
c0023118:	eb 31                	jmp    c002314b <IDE::read(unsigned char, unsigned char)+0xa5>
c002311a:	80 fb 0d             	cmp    bl,0xd
c002311d:	77 13                	ja     c0023132 <IDE::read(unsigned char, unsigned char)+0x8c>
c002311f:	0f b6 d2             	movzx  edx,dl
c0023122:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0023129:	0f b6 d3             	movzx  edx,bl
c002312c:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0023130:	eb 19                	jmp    c002314b <IDE::read(unsigned char, unsigned char)+0xa5>
c0023132:	31 c0                	xor    eax,eax
c0023134:	80 fb 15             	cmp    bl,0x15
c0023137:	77 13                	ja     c002314c <IDE::read(unsigned char, unsigned char)+0xa6>
c0023139:	0f b6 d2             	movzx  edx,dl
c002313c:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023144:	0f b6 d3             	movzx  edx,bl
c0023147:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002314b:	ec                   	in     al,dx
c002314c:	83 c4 1c             	add    esp,0x1c
c002314f:	5b                   	pop    ebx
c0023150:	5e                   	pop    esi
c0023151:	5f                   	pop    edi
c0023152:	5d                   	pop    ebp
c0023153:	c3                   	ret    

c0023154 <IDE::waitInterrupt(unsigned char)>:
c0023154:	55                   	push   ebp
c0023155:	57                   	push   edi
c0023156:	56                   	push   esi
c0023157:	53                   	push   ebx
c0023158:	31 db                	xor    ebx,ebx
c002315a:	83 ec 0c             	sub    esp,0xc
c002315d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023161:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023166:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c002316e:	89 e8                	mov    eax,ebp
c0023170:	84 c0                	test   al,al
c0023172:	75 34                	jne    c00231a8 <IDE::waitInterrupt(unsigned char)+0x54>
c0023174:	52                   	push   edx
c0023175:	6a 0c                	push   0xc
c0023177:	56                   	push   esi
c0023178:	57                   	push   edi
c0023179:	e8 28 ff ff ff       	call   c00230a6 <IDE::read(unsigned char, unsigned char)>
c002317e:	83 c4 10             	add    esp,0x10
c0023181:	a8 01                	test   al,0x1
c0023183:	75 2b                	jne    c00231b0 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023185:	f6 c3 04             	test   bl,0x4
c0023188:	75 16                	jne    c00231a0 <IDE::waitInterrupt(unsigned char)+0x4c>
c002318a:	83 fb 32             	cmp    ebx,0x32
c002318d:	7e 11                	jle    c00231a0 <IDE::waitInterrupt(unsigned char)+0x4c>
c002318f:	50                   	push   eax
c0023190:	50                   	push   eax
c0023191:	6a 00                	push   0x0
c0023193:	68 80 96 98 00       	push   0x989680
c0023198:	e8 c9 b0 ff ff       	call   c001e266 <nanoSleep(unsigned long long)>
c002319d:	83 c4 10             	add    esp,0x10
c00231a0:	83 fb 3c             	cmp    ebx,0x3c
c00231a3:	74 0b                	je     c00231b0 <IDE::waitInterrupt(unsigned char)+0x5c>
c00231a5:	43                   	inc    ebx
c00231a6:	eb be                	jmp    c0023166 <IDE::waitInterrupt(unsigned char)+0x12>
c00231a8:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c00231b0:	83 c4 0c             	add    esp,0xc
c00231b3:	89 e8                	mov    eax,ebp
c00231b5:	5b                   	pop    ebx
c00231b6:	5e                   	pop    esi
c00231b7:	5f                   	pop    edi
c00231b8:	5d                   	pop    ebp
c00231b9:	c3                   	ret    

c00231ba <ideChannel0IRQHandler(regs*, void*)>:
c00231ba:	83 ec 10             	sub    esp,0x10
c00231bd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00231c1:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00231c8:	6a 07                	push   0x7
c00231ca:	6a 00                	push   0x0
c00231cc:	50                   	push   eax
c00231cd:	e8 d4 fe ff ff       	call   c00230a6 <IDE::read(unsigned char, unsigned char)>
c00231d2:	83 c4 1c             	add    esp,0x1c
c00231d5:	c3                   	ret    

c00231d6 <ideChannel1IRQHandler(regs*, void*)>:
c00231d6:	83 ec 10             	sub    esp,0x10
c00231d9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00231dd:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00231e4:	6a 07                	push   0x7
c00231e6:	6a 01                	push   0x1
c00231e8:	50                   	push   eax
c00231e9:	e8 b8 fe ff ff       	call   c00230a6 <IDE::read(unsigned char, unsigned char)>
c00231ee:	83 c4 1c             	add    esp,0x1c
c00231f1:	c3                   	ret    

c00231f2 <IDE::enableIRQs(unsigned char, bool)>:
c00231f2:	57                   	push   edi
c00231f3:	56                   	push   esi
c00231f4:	be 04 00 00 00       	mov    esi,0x4
c00231f9:	53                   	push   ebx
c00231fa:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00231ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023203:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023208:	0f 94 c0             	sete   al
c002320b:	d1 e0                	shl    eax,1
c002320d:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023214:	0f b6 c0             	movzx  eax,al
c0023217:	50                   	push   eax
c0023218:	6a 0c                	push   0xc
c002321a:	57                   	push   edi
c002321b:	53                   	push   ebx
c002321c:	e8 c5 fd ff ff       	call   c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023221:	83 c4 10             	add    esp,0x10
c0023224:	50                   	push   eax
c0023225:	6a 0c                	push   0xc
c0023227:	57                   	push   edi
c0023228:	53                   	push   ebx
c0023229:	e8 78 fe ff ff       	call   c00230a6 <IDE::read(unsigned char, unsigned char)>
c002322e:	83 c4 10             	add    esp,0x10
c0023231:	4e                   	dec    esi
c0023232:	75 f0                	jne    c0023224 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023234:	5b                   	pop    ebx
c0023235:	5e                   	pop    esi
c0023236:	5f                   	pop    edi
c0023237:	c3                   	ret    

c0023238 <IDE::open(int, int, void*)>:
c0023238:	55                   	push   ebp
c0023239:	57                   	push   edi
c002323a:	56                   	push   esi
c002323b:	53                   	push   ebx
c002323c:	83 ec 1c             	sub    esp,0x1c
c002323f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023243:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c002324c:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023255:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c002325c:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023263:	0f 85 b0 02 00 00    	jne    c0023519 <IDE::open(int, int, void*)+0x2e1>
c0023269:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c002326f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023273:	83 e0 7f             	and    eax,0x7f
c0023276:	3c 05                	cmp    al,0x5
c0023278:	74 04                	je     c002327e <IDE::open(int, int, void*)+0x46>
c002327a:	3c 0f                	cmp    al,0xf
c002327c:	75 32                	jne    c00232b0 <IDE::open(int, int, void*)+0x78>
c002327e:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023284:	83 e0 fc             	and    eax,0xfffffffc
c0023287:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002328e:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023294:	83 e0 fc             	and    eax,0xfffffffc
c0023297:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002329e:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00232a4:	83 e0 fc             	and    eax,0xfffffffc
c00232a7:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00232ae:	eb 14                	jmp    c00232c4 <IDE::open(int, int, void*)+0x8c>
c00232b0:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00232ba:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00232c4:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00232cb:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c00232d2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00232d6:	89 c6                	mov    esi,eax
c00232d8:	bf f8 0c 00 00       	mov    edi,0xcf8
c00232dd:	c1 e6 10             	shl    esi,0x10
c00232e0:	89 e8                	mov    eax,ebp
c00232e2:	89 fa                	mov    edx,edi
c00232e4:	c1 e0 0b             	shl    eax,0xb
c00232e7:	09 f0                	or     eax,esi
c00232e9:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00232f0:	c1 e6 08             	shl    esi,0x8
c00232f3:	09 c6                	or     esi,eax
c00232f5:	89 f0                	mov    eax,esi
c00232f7:	0d 08 00 00 80       	or     eax,0x80000008
c00232fc:	ef                   	out    dx,eax
c00232fd:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023302:	89 ca                	mov    edx,ecx
c0023304:	ed                   	in     eax,dx
c0023305:	c1 e8 10             	shr    eax,0x10
c0023308:	3d ff ff 00 00       	cmp    eax,0xffff
c002330d:	0f 84 f5 00 00 00    	je     c0023408 <IDE::open(int, int, void*)+0x1d0>
c0023313:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023319:	89 fa                	mov    edx,edi
c002331b:	89 f0                	mov    eax,esi
c002331d:	ef                   	out    dx,eax
c002331e:	b0 fe                	mov    al,0xfe
c0023320:	89 ca                	mov    edx,ecx
c0023322:	ee                   	out    dx,al
c0023323:	89 f0                	mov    eax,esi
c0023325:	89 fa                	mov    edx,edi
c0023327:	ef                   	out    dx,eax
c0023328:	89 ca                	mov    edx,ecx
c002332a:	ed                   	in     eax,dx
c002332b:	3c fe                	cmp    al,0xfe
c002332d:	0f 85 a9 00 00 00    	jne    c00233dc <IDE::open(int, int, void*)+0x1a4>
c0023333:	8b 15 68 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e468
c0023339:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023340:	74 33                	je     c0023375 <IDE::open(int, int, void*)+0x13d>
c0023342:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023348:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c002334c:	40                   	inc    eax
c002334d:	83 ec 0c             	sub    esp,0xc
c0023350:	0f b6 c0             	movzx  eax,al
c0023353:	50                   	push   eax
c0023354:	55                   	push   ebp
c0023355:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023359:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c002335f:	51                   	push   ecx
c0023360:	e8 e9 4d ff ff       	call   c001814e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023365:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c002336a:	83 c4 1c             	add    esp,0x1c
c002336d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023373:	eb 0a                	jmp    c002337f <IDE::open(int, int, void*)+0x147>
c0023375:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c002337f:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023386:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002338d:	c1 e1 10             	shl    ecx,0x10
c0023390:	c1 e0 08             	shl    eax,0x8
c0023393:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023398:	09 c1                	or     ecx,eax
c002339a:	89 fa                	mov    edx,edi
c002339c:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00233a3:	c1 e0 0b             	shl    eax,0xb
c00233a6:	09 c1                	or     ecx,eax
c00233a8:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00233ae:	89 c8                	mov    eax,ecx
c00233b0:	ef                   	out    dx,eax
c00233b1:	be fc 0c 00 00       	mov    esi,0xcfc
c00233b6:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00233bc:	89 f2                	mov    edx,esi
c00233be:	ee                   	out    dx,al
c00233bf:	89 c8                	mov    eax,ecx
c00233c1:	89 fa                	mov    edx,edi
c00233c3:	ef                   	out    dx,eax
c00233c4:	89 f2                	mov    edx,esi
c00233c6:	ed                   	in     eax,dx
c00233c7:	0f b6 c0             	movzx  eax,al
c00233ca:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c00233d0:	74 46                	je     c0023418 <IDE::open(int, int, void*)+0x1e0>
c00233d2:	83 ec 0c             	sub    esp,0xc
c00233d5:	68 f4 ca 02 c0       	push   0xc002caf4
c00233da:	eb 34                	jmp    c0023410 <IDE::open(int, int, void*)+0x1d8>
c00233dc:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00233e5:	75 17                	jne    c00233fe <IDE::open(int, int, void*)+0x1c6>
c00233e7:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00233ec:	74 07                	je     c00233f5 <IDE::open(int, int, void*)+0x1bd>
c00233ee:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00233f3:	75 09                	jne    c00233fe <IDE::open(int, int, void*)+0x1c6>
c00233f5:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00233fc:	eb 1a                	jmp    c0023418 <IDE::open(int, int, void*)+0x1e0>
c00233fe:	83 ec 0c             	sub    esp,0xc
c0023401:	68 fc ca 02 c0       	push   0xc002cafc
c0023406:	eb 08                	jmp    c0023410 <IDE::open(int, int, void*)+0x1d8>
c0023408:	83 ec 0c             	sub    esp,0xc
c002340b:	68 2d cb 02 c0       	push   0xc002cb2d
c0023410:	e8 ec 70 ff ff       	call   c001a501 <Krnl::panic(char const*)>
c0023415:	83 c4 10             	add    esp,0x10
c0023418:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c002341f:	79 1a                	jns    c002343b <IDE::open(int, int, void*)+0x203>
c0023421:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023427:	83 e0 fc             	and    eax,0xfffffffc
c002342a:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023431:	83 c0 08             	add    eax,0x8
c0023434:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c002343b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023441:	89 c2                	mov    edx,eax
c0023443:	83 e2 0f             	and    edx,0xf
c0023446:	66 83 fa 08          	cmp    dx,0x8
c002344a:	75 0a                	jne    c0023456 <IDE::open(int, int, void*)+0x21e>
c002344c:	83 e8 02             	sub    eax,0x2
c002344f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023456:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c002345c:	89 c2                	mov    edx,eax
c002345e:	83 e2 0f             	and    edx,0xf
c0023461:	66 83 fa 08          	cmp    dx,0x8
c0023465:	75 0a                	jne    c0023471 <IDE::open(int, int, void*)+0x239>
c0023467:	83 e8 02             	sub    eax,0x2
c002346a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023471:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023478:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c002347f:	89 d0                	mov    eax,edx
c0023481:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023484:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023488:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c002348c:	8d 4a 01             	lea    ecx,[edx+0x1]
c002348f:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023494:	0f b6 c9             	movzx  ecx,cl
c0023497:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c002349e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00234a1:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00234a5:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00234a9:	8d 50 02             	lea    edx,[eax+0x2]
c00234ac:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00234b1:	0f b6 d2             	movzx  edx,dl
c00234b4:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00234ba:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00234bd:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00234c1:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00234c5:	8d 48 03             	lea    ecx,[eax+0x3]
c00234c8:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00234cd:	0f b6 c9             	movzx  ecx,cl
c00234d0:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00234d6:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00234d9:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00234dd:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00234e1:	8d 50 04             	lea    edx,[eax+0x4]
c00234e4:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00234ea:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00234ef:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00234f6:	66 85 f6             	test   si,si
c00234f9:	74 3e                	je     c0023539 <IDE::open(int, int, void*)+0x301>
c00234fb:	0f b6 d2             	movzx  edx,dl
c00234fe:	83 c0 05             	add    eax,0x5
c0023501:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023504:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023508:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c002350c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023512:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023517:	eb 20                	jmp    c0023539 <IDE::open(int, int, void*)+0x301>
c0023519:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023523:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002352d:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023534:	e9 02 ff ff ff       	jmp    c002343b <IDE::open(int, int, void*)+0x203>
c0023539:	52                   	push   edx
c002353a:	52                   	push   edx
c002353b:	6a 00                	push   0x0
c002353d:	53                   	push   ebx
c002353e:	e8 7d fa ff ff       	call   c0022fc0 <IDE::prepareInterrupt(unsigned char)>
c0023543:	59                   	pop    ecx
c0023544:	5e                   	pop    esi
c0023545:	6a 01                	push   0x1
c0023547:	53                   	push   ebx
c0023548:	e8 73 fa ff ff       	call   c0022fc0 <IDE::prepareInterrupt(unsigned char)>
c002354d:	83 c4 0c             	add    esp,0xc
c0023550:	6a 00                	push   0x0
c0023552:	6a 00                	push   0x0
c0023554:	53                   	push   ebx
c0023555:	e8 98 fc ff ff       	call   c00231f2 <IDE::enableIRQs(unsigned char, bool)>
c002355a:	83 c4 0c             	add    esp,0xc
c002355d:	6a 00                	push   0x0
c002355f:	6a 01                	push   0x1
c0023561:	53                   	push   ebx
c0023562:	e8 8b fc ff ff       	call   c00231f2 <IDE::enableIRQs(unsigned char, bool)>
c0023567:	83 c4 10             	add    esp,0x10
c002356a:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0023571:	74 40                	je     c00235b3 <IDE::open(int, int, void*)+0x37b>
c0023573:	83 ec 0c             	sub    esp,0xc
c0023576:	68 57 cb 02 c0       	push   0xc002cb57
c002357b:	e8 43 f8 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0023580:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023583:	6a 01                	push   0x1
c0023585:	68 ba 31 02 c0       	push   0xc00231ba
c002358a:	6a 0e                	push   0xe
c002358c:	53                   	push   ebx
c002358d:	e8 e2 0b ff ff       	call   c0014174 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023592:	83 c4 14             	add    esp,0x14
c0023595:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002359b:	53                   	push   ebx
c002359c:	6a 01                	push   0x1
c002359e:	68 d6 31 02 c0       	push   0xc00231d6
c00235a3:	6a 0f                	push   0xf
c00235a5:	53                   	push   ebx
c00235a6:	e8 c9 0b ff ff       	call   c0014174 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00235ab:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00235b1:	eb 4a                	jmp    c00235fd <IDE::open(int, int, void*)+0x3c5>
c00235b3:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00235bd:	50                   	push   eax
c00235be:	6a 0f                	push   0xf
c00235c0:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00235c6:	68 73 cb 02 c0       	push   0xc002cb73
c00235cb:	e8 f3 f7 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00235d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00235d3:	6a 00                	push   0x0
c00235d5:	68 ba 31 02 c0       	push   0xc00231ba
c00235da:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00235e0:	53                   	push   ebx
c00235e1:	e8 8e 0b ff ff       	call   c0014174 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00235e6:	83 c4 14             	add    esp,0x14
c00235e9:	53                   	push   ebx
c00235ea:	6a 00                	push   0x0
c00235ec:	68 d6 31 02 c0       	push   0xc00231d6
c00235f1:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00235f7:	53                   	push   ebx
c00235f8:	e8 77 0b ff ff       	call   c0014174 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00235fd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00235ff:	83 c4 20             	add    esp,0x20
c0023602:	83 ec 0c             	sub    esp,0xc
c0023605:	53                   	push   ebx
c0023606:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023609:	83 c4 0c             	add    esp,0xc
c002360c:	6a 07                	push   0x7
c002360e:	6a 00                	push   0x0
c0023610:	53                   	push   ebx
c0023611:	e8 90 fa ff ff       	call   c00230a6 <IDE::read(unsigned char, unsigned char)>
c0023616:	83 c4 0c             	add    esp,0xc
c0023619:	6a 07                	push   0x7
c002361b:	6a 01                	push   0x1
c002361d:	53                   	push   ebx
c002361e:	e8 83 fa ff ff       	call   c00230a6 <IDE::read(unsigned char, unsigned char)>
c0023623:	83 c4 0c             	add    esp,0xc
c0023626:	6a 01                	push   0x1
c0023628:	6a 00                	push   0x0
c002362a:	53                   	push   ebx
c002362b:	e8 c2 fb ff ff       	call   c00231f2 <IDE::enableIRQs(unsigned char, bool)>
c0023630:	83 c4 0c             	add    esp,0xc
c0023633:	6a 01                	push   0x1
c0023635:	6a 01                	push   0x1
c0023637:	53                   	push   ebx
c0023638:	e8 b5 fb ff ff       	call   c00231f2 <IDE::enableIRQs(unsigned char, bool)>
c002363d:	83 c4 2c             	add    esp,0x2c
c0023640:	31 c0                	xor    eax,eax
c0023642:	5b                   	pop    ebx
c0023643:	5e                   	pop    esi
c0023644:	5f                   	pop    edi
c0023645:	5d                   	pop    ebp
c0023646:	c3                   	ret    
c0023647:	90                   	nop

c0023648 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023648:	55                   	push   ebp
c0023649:	57                   	push   edi
c002364a:	56                   	push   esi
c002364b:	53                   	push   ebx
c002364c:	83 ec 1c             	sub    esp,0x1c
c002364f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023653:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023657:	8d 50 f8             	lea    edx,[eax-0x8]
c002365a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002365e:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0023662:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023666:	80 fa 03             	cmp    dl,0x3
c0023669:	77 5d                	ja     c00236c8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c002366b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002366f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023673:	0f b6 db             	movzx  ebx,bl
c0023676:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0023679:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c002367d:	83 ca 80             	or     edx,0xffffff80
c0023680:	0f b6 d2             	movzx  edx,dl
c0023683:	52                   	push   edx
c0023684:	6a 0c                	push   0xc
c0023686:	53                   	push   ebx
c0023687:	56                   	push   esi
c0023688:	e8 59 f9 ff ff       	call   c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002368d:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0023692:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023696:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002369a:	0f b6 c0             	movzx  eax,al
c002369d:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00236a1:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00236a3:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00236a8:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00236ac:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00236b0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00236b4:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00236bc:	83 c4 2c             	add    esp,0x2c
c00236bf:	5b                   	pop    ebx
c00236c0:	5e                   	pop    esi
c00236c1:	5f                   	pop    edi
c00236c2:	5d                   	pop    ebp
c00236c3:	e9 1e f9 ff ff       	jmp    c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236c8:	3c 07                	cmp    al,0x7
c00236ca:	77 10                	ja     c00236dc <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c00236cc:	0f b6 db             	movzx  ebx,bl
c00236cf:	0f b6 d0             	movzx  edx,al
c00236d2:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c00236da:	eb 2d                	jmp    c0023709 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00236dc:	3c 0d                	cmp    al,0xd
c00236de:	77 13                	ja     c00236f3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00236e0:	0f b6 db             	movzx  ebx,bl
c00236e3:	0f b6 c0             	movzx  eax,al
c00236e6:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00236ed:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00236f1:	eb 16                	jmp    c0023709 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00236f3:	3c 15                	cmp    al,0x15
c00236f5:	77 14                	ja     c002370b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00236f7:	0f b6 db             	movzx  ebx,bl
c00236fa:	0f b6 c0             	movzx  eax,al
c00236fd:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023705:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0023709:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002370b:	83 c4 1c             	add    esp,0x1c
c002370e:	5b                   	pop    ebx
c002370f:	5e                   	pop    esi
c0023710:	5f                   	pop    edi
c0023711:	5d                   	pop    ebp
c0023712:	c3                   	ret    
c0023713:	90                   	nop

c0023714 <IDE::detect()>:
c0023714:	55                   	push   ebp
c0023715:	57                   	push   edi
c0023716:	56                   	push   esi
c0023717:	53                   	push   ebx
c0023718:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002371e:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0023725:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c002372c:	0f 85 be 02 00 00    	jne    c00239f0 <IDE::detect()+0x2dc>
c0023732:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0023739:	31 f6                	xor    esi,esi
c002373b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023743:	31 ed                	xor    ebp,ebp
c0023745:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023749:	c1 e0 06             	shl    eax,0x6
c002374c:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0023754:	89 e8                	mov    eax,ebp
c0023756:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002375a:	c1 e0 04             	shl    eax,0x4
c002375d:	83 c8 a0             	or     eax,0xffffffa0
c0023760:	0f b6 c0             	movzx  eax,al
c0023763:	50                   	push   eax
c0023764:	6a 06                	push   0x6
c0023766:	56                   	push   esi
c0023767:	53                   	push   ebx
c0023768:	e8 79 f8 ff ff       	call   c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002376d:	83 c4 0c             	add    esp,0xc
c0023770:	6a 0c                	push   0xc
c0023772:	56                   	push   esi
c0023773:	53                   	push   ebx
c0023774:	e8 2d f9 ff ff       	call   c00230a6 <IDE::read(unsigned char, unsigned char)>
c0023779:	83 c4 0c             	add    esp,0xc
c002377c:	6a 0c                	push   0xc
c002377e:	56                   	push   esi
c002377f:	53                   	push   ebx
c0023780:	e8 21 f9 ff ff       	call   c00230a6 <IDE::read(unsigned char, unsigned char)>
c0023785:	83 c4 0c             	add    esp,0xc
c0023788:	6a 0c                	push   0xc
c002378a:	56                   	push   esi
c002378b:	53                   	push   ebx
c002378c:	e8 15 f9 ff ff       	call   c00230a6 <IDE::read(unsigned char, unsigned char)>
c0023791:	83 c4 0c             	add    esp,0xc
c0023794:	6a 0c                	push   0xc
c0023796:	56                   	push   esi
c0023797:	53                   	push   ebx
c0023798:	e8 09 f9 ff ff       	call   c00230a6 <IDE::read(unsigned char, unsigned char)>
c002379d:	68 ec 00 00 00       	push   0xec
c00237a2:	6a 07                	push   0x7
c00237a4:	56                   	push   esi
c00237a5:	53                   	push   ebx
c00237a6:	e8 3b f8 ff ff       	call   c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00237ab:	83 c4 1c             	add    esp,0x1c
c00237ae:	6a 0c                	push   0xc
c00237b0:	56                   	push   esi
c00237b1:	53                   	push   ebx
c00237b2:	e8 ef f8 ff ff       	call   c00230a6 <IDE::read(unsigned char, unsigned char)>
c00237b7:	83 c4 0c             	add    esp,0xc
c00237ba:	6a 0c                	push   0xc
c00237bc:	56                   	push   esi
c00237bd:	53                   	push   ebx
c00237be:	e8 e3 f8 ff ff       	call   c00230a6 <IDE::read(unsigned char, unsigned char)>
c00237c3:	83 c4 0c             	add    esp,0xc
c00237c6:	6a 0c                	push   0xc
c00237c8:	56                   	push   esi
c00237c9:	53                   	push   ebx
c00237ca:	e8 d7 f8 ff ff       	call   c00230a6 <IDE::read(unsigned char, unsigned char)>
c00237cf:	83 c4 0c             	add    esp,0xc
c00237d2:	6a 0c                	push   0xc
c00237d4:	56                   	push   esi
c00237d5:	53                   	push   ebx
c00237d6:	e8 cb f8 ff ff       	call   c00230a6 <IDE::read(unsigned char, unsigned char)>
c00237db:	83 c4 0c             	add    esp,0xc
c00237de:	6a 0c                	push   0xc
c00237e0:	56                   	push   esi
c00237e1:	53                   	push   ebx
c00237e2:	e8 bf f8 ff ff       	call   c00230a6 <IDE::read(unsigned char, unsigned char)>
c00237e7:	83 c4 10             	add    esp,0x10
c00237ea:	84 c0                	test   al,al
c00237ec:	0f 84 8b 01 00 00    	je     c002397d <IDE::detect()+0x269>
c00237f2:	31 ff                	xor    edi,edi
c00237f4:	50                   	push   eax
c00237f5:	6a 0c                	push   0xc
c00237f7:	56                   	push   esi
c00237f8:	53                   	push   ebx
c00237f9:	e8 a8 f8 ff ff       	call   c00230a6 <IDE::read(unsigned char, unsigned char)>
c00237fe:	83 c4 10             	add    esp,0x10
c0023801:	a8 01                	test   al,0x1
c0023803:	0f 85 8e 01 00 00    	jne    c0023997 <IDE::detect()+0x283>
c0023809:	84 c0                	test   al,al
c002380b:	78 04                	js     c0023811 <IDE::detect()+0xfd>
c002380d:	a8 08                	test   al,0x8
c002380f:	75 27                	jne    c0023838 <IDE::detect()+0x124>
c0023811:	47                   	inc    edi
c0023812:	81 ff 17 01 00 00    	cmp    edi,0x117
c0023818:	7e da                	jle    c00237f4 <IDE::detect()+0xe0>
c002381a:	50                   	push   eax
c002381b:	50                   	push   eax
c002381c:	6a 00                	push   0x0
c002381e:	68 40 4b 4c 00       	push   0x4c4b40
c0023823:	e8 3e aa ff ff       	call   c001e266 <nanoSleep(unsigned long long)>
c0023828:	83 c4 10             	add    esp,0x10
c002382b:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0023831:	75 c1                	jne    c00237f4 <IDE::detect()+0xe0>
c0023833:	e9 5f 01 00 00       	jmp    c0023997 <IDE::detect()+0x283>
c0023838:	31 c9                	xor    ecx,ecx
c002383a:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c002383e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023842:	83 ec 0c             	sub    esp,0xc
c0023845:	68 80 00 00 00       	push   0x80
c002384a:	57                   	push   edi
c002384b:	6a 00                	push   0x0
c002384d:	56                   	push   esi
c002384e:	53                   	push   ebx
c002384f:	e8 f4 fd ff ff       	call   c0023648 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0023854:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0023859:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002385d:	89 d1                	mov    ecx,edx
c002385f:	c1 e0 06             	shl    eax,0x6
c0023862:	01 d8                	add    eax,ebx
c0023864:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c002386b:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0023872:	89 f2                	mov    edx,esi
c0023874:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c002387a:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c002387e:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0023884:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023888:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c002388f:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0023897:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c002389e:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00238a6:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00238ac:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00238b3:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00238b9:	8d 54 24 58          	lea    edx,[esp+0x58]
c00238bd:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00238c1:	83 c4 20             	add    esp,0x20
c00238c4:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00238c7:	83 c0 02             	add    eax,0x2
c00238ca:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00238d0:	83 c7 02             	add    edi,0x2
c00238d3:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00238d6:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00238dc:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00238e0:	75 e2                	jne    c00238c4 <IDE::detect()+0x1b0>
c00238e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00238e6:	c1 e0 06             	shl    eax,0x6
c00238e9:	01 d8                	add    eax,ebx
c00238eb:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00238f1:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00238f8:	66 c1 ea 09          	shr    dx,0x9
c00238fc:	83 e2 01             	and    edx,0x1
c00238ff:	84 c9                	test   cl,cl
c0023901:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0023907:	75 2f                	jne    c0023938 <IDE::detect()+0x224>
c0023909:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c002390f:	85 c0                	test   eax,eax
c0023911:	74 66                	je     c0023979 <IDE::detect()+0x265>
c0023913:	50                   	push   eax
c0023914:	55                   	push   ebp
c0023915:	56                   	push   esi
c0023916:	68 8f cb 02 c0       	push   0xc002cb8f
c002391b:	e8 a3 f4 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0023920:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023927:	e8 1f bf fe ff       	call   c000f84b <malloc>
c002392c:	89 c7                	mov    edi,eax
c002392e:	89 04 24             	mov    DWORD PTR [esp],eax
c0023931:	e8 78 06 00 00       	call   c0023fae <ATA::ATA()>
c0023936:	eb 28                	jmp    c0023960 <IDE::detect()+0x24c>
c0023938:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c002393e:	55                   	push   ebp
c002393f:	56                   	push   esi
c0023940:	68 be cb 02 c0       	push   0xc002cbbe
c0023945:	e8 79 f4 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c002394a:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023951:	e8 f5 be fe ff       	call   c000f84b <malloc>
c0023956:	89 c7                	mov    edi,eax
c0023958:	89 04 24             	mov    DWORD PTR [esp],eax
c002395b:	e8 8e 0c 00 00       	call   c00245ee <ATAPI::ATAPI()>
c0023960:	5a                   	pop    edx
c0023961:	59                   	pop    ecx
c0023962:	57                   	push   edi
c0023963:	53                   	push   ebx
c0023964:	e8 87 08 ff ff       	call   c00141f0 <Device::addChild(Device*)>
c0023969:	8b 07                	mov    eax,DWORD PTR [edi]
c002396b:	53                   	push   ebx
c002396c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023970:	6a 00                	push   0x0
c0023972:	57                   	push   edi
c0023973:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023976:	83 c4 20             	add    esp,0x20
c0023979:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c002397d:	4d                   	dec    ebp
c002397e:	74 0a                	je     c002398a <IDE::detect()+0x276>
c0023980:	bd 01 00 00 00       	mov    ebp,0x1
c0023985:	e9 bb fd ff ff       	jmp    c0023745 <IDE::detect()+0x31>
c002398a:	4e                   	dec    esi
c002398b:	74 63                	je     c00239f0 <IDE::detect()+0x2dc>
c002398d:	be 01 00 00 00       	mov    esi,0x1
c0023992:	e9 ac fd ff ff       	jmp    c0023743 <IDE::detect()+0x2f>
c0023997:	50                   	push   eax
c0023998:	6a 04                	push   0x4
c002399a:	56                   	push   esi
c002399b:	53                   	push   ebx
c002399c:	e8 05 f7 ff ff       	call   c00230a6 <IDE::read(unsigned char, unsigned char)>
c00239a1:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00239a5:	83 c4 0c             	add    esp,0xc
c00239a8:	6a 05                	push   0x5
c00239aa:	56                   	push   esi
c00239ab:	53                   	push   ebx
c00239ac:	e8 f5 f6 ff ff       	call   c00230a6 <IDE::read(unsigned char, unsigned char)>
c00239b1:	83 c4 10             	add    esp,0x10
c00239b4:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00239b8:	80 fa 14             	cmp    dl,0x14
c00239bb:	75 04                	jne    c00239c1 <IDE::detect()+0x2ad>
c00239bd:	3c eb                	cmp    al,0xeb
c00239bf:	eb 07                	jmp    c00239c8 <IDE::detect()+0x2b4>
c00239c1:	3c 96                	cmp    al,0x96
c00239c3:	75 b8                	jne    c002397d <IDE::detect()+0x269>
c00239c5:	80 fa 69             	cmp    dl,0x69
c00239c8:	75 b3                	jne    c002397d <IDE::detect()+0x269>
c00239ca:	68 a1 00 00 00       	push   0xa1
c00239cf:	6a 07                	push   0x7
c00239d1:	56                   	push   esi
c00239d2:	53                   	push   ebx
c00239d3:	e8 0e f6 ff ff       	call   c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00239d8:	5f                   	pop    edi
c00239d9:	58                   	pop    eax
c00239da:	6a 00                	push   0x0
c00239dc:	68 40 42 0f 00       	push   0xf4240
c00239e1:	e8 80 a8 ff ff       	call   c001e266 <nanoSleep(unsigned long long)>
c00239e6:	83 c4 10             	add    esp,0x10
c00239e9:	b1 01                	mov    cl,0x1
c00239eb:	e9 4a fe ff ff       	jmp    c002383a <IDE::detect()+0x126>
c00239f0:	81 c4 1c 02 00 00    	add    esp,0x21c
c00239f6:	5b                   	pop    ebx
c00239f7:	5e                   	pop    esi
c00239f8:	5f                   	pop    edi
c00239f9:	5d                   	pop    ebp
c00239fa:	c3                   	ret    
c00239fb:	90                   	nop

c00239fc <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00239fc:	55                   	push   ebp
c00239fd:	57                   	push   edi
c00239fe:	56                   	push   esi
c00239ff:	53                   	push   ebx
c0023a00:	83 ec 1c             	sub    esp,0x1c
c0023a03:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023a07:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023a0b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023a0f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023a13:	88 c3                	mov    bl,al
c0023a15:	84 c0                	test   al,al
c0023a17:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023a1b:	0f 84 67 01 00 00    	je     c0023b88 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0023a21:	83 ec 0c             	sub    esp,0xc
c0023a24:	68 ef cb 02 c0       	push   0xc002cbef
c0023a29:	e8 95 f3 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0023a2e:	83 c4 10             	add    esp,0x10
c0023a31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023a35:	3c 01                	cmp    al,0x1
c0023a37:	75 17                	jne    c0023a50 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0023a39:	83 ec 0c             	sub    esp,0xc
c0023a3c:	b3 13                	mov    bl,0x13
c0023a3e:	68 fb cb 02 c0       	push   0xc002cbfb
c0023a43:	e8 7b f3 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0023a48:	83 c4 10             	add    esp,0x10
c0023a4b:	e9 25 01 00 00       	jmp    c0023b75 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023a50:	3c 02                	cmp    al,0x2
c0023a52:	0f 85 ef 00 00 00    	jne    c0023b47 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0023a58:	d1 e6                	shl    esi,1
c0023a5a:	09 ee                	or     esi,ebp
c0023a5c:	52                   	push   edx
c0023a5d:	89 f0                	mov    eax,esi
c0023a5f:	6a 01                	push   0x1
c0023a61:	0f b6 f0             	movzx  esi,al
c0023a64:	c1 e6 06             	shl    esi,0x6
c0023a67:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023a6f:	50                   	push   eax
c0023a70:	57                   	push   edi
c0023a71:	e8 30 f6 ff ff       	call   c00230a6 <IDE::read(unsigned char, unsigned char)>
c0023a76:	83 c4 10             	add    esp,0x10
c0023a79:	89 c6                	mov    esi,eax
c0023a7b:	a8 01                	test   al,0x1
c0023a7d:	74 12                	je     c0023a91 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0023a7f:	83 ec 0c             	sub    esp,0xc
c0023a82:	b3 07                	mov    bl,0x7
c0023a84:	68 10 cc 02 c0       	push   0xc002cc10
c0023a89:	e8 35 f3 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0023a8e:	83 c4 10             	add    esp,0x10
c0023a91:	f7 c6 02 00 00 00    	test   esi,0x2
c0023a97:	74 12                	je     c0023aab <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0023a99:	83 ec 0c             	sub    esp,0xc
c0023a9c:	b3 03                	mov    bl,0x3
c0023a9e:	68 2e cc 02 c0       	push   0xc002cc2e
c0023aa3:	e8 1b f3 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0023aa8:	83 c4 10             	add    esp,0x10
c0023aab:	f7 c6 04 00 00 00    	test   esi,0x4
c0023ab1:	74 12                	je     c0023ac5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0023ab3:	83 ec 0c             	sub    esp,0xc
c0023ab6:	b3 14                	mov    bl,0x14
c0023ab8:	68 4e cc 02 c0       	push   0xc002cc4e
c0023abd:	e8 01 f3 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0023ac2:	83 c4 10             	add    esp,0x10
c0023ac5:	f7 c6 08 00 00 00    	test   esi,0x8
c0023acb:	74 12                	je     c0023adf <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0023acd:	83 ec 0c             	sub    esp,0xc
c0023ad0:	b3 03                	mov    bl,0x3
c0023ad2:	68 2e cc 02 c0       	push   0xc002cc2e
c0023ad7:	e8 e7 f2 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0023adc:	83 c4 10             	add    esp,0x10
c0023adf:	f7 c6 10 00 00 00    	test   esi,0x10
c0023ae5:	74 12                	je     c0023af9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0023ae7:	83 ec 0c             	sub    esp,0xc
c0023aea:	b3 15                	mov    bl,0x15
c0023aec:	68 66 cc 02 c0       	push   0xc002cc66
c0023af1:	e8 cd f2 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0023af6:	83 c4 10             	add    esp,0x10
c0023af9:	f7 c6 20 00 00 00    	test   esi,0x20
c0023aff:	74 12                	je     c0023b13 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0023b01:	83 ec 0c             	sub    esp,0xc
c0023b04:	b3 03                	mov    bl,0x3
c0023b06:	68 2e cc 02 c0       	push   0xc002cc2e
c0023b0b:	e8 b3 f2 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0023b10:	83 c4 10             	add    esp,0x10
c0023b13:	f7 c6 40 00 00 00    	test   esi,0x40
c0023b19:	74 12                	je     c0023b2d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0023b1b:	83 ec 0c             	sub    esp,0xc
c0023b1e:	b3 16                	mov    bl,0x16
c0023b20:	68 80 cc 02 c0       	push   0xc002cc80
c0023b25:	e8 99 f2 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0023b2a:	83 c4 10             	add    esp,0x10
c0023b2d:	89 f0                	mov    eax,esi
c0023b2f:	84 c0                	test   al,al
c0023b31:	79 42                	jns    c0023b75 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b33:	83 ec 0c             	sub    esp,0xc
c0023b36:	b3 0d                	mov    bl,0xd
c0023b38:	68 a1 cc 02 c0       	push   0xc002cca1
c0023b3d:	e8 81 f2 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0023b42:	83 c4 10             	add    esp,0x10
c0023b45:	eb 2e                	jmp    c0023b75 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b47:	3c 03                	cmp    al,0x3
c0023b49:	75 14                	jne    c0023b5f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0023b4b:	83 ec 0c             	sub    esp,0xc
c0023b4e:	b3 17                	mov    bl,0x17
c0023b50:	68 b5 cc 02 c0       	push   0xc002ccb5
c0023b55:	e8 69 f2 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0023b5a:	83 c4 10             	add    esp,0x10
c0023b5d:	eb 16                	jmp    c0023b75 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b5f:	3c 04                	cmp    al,0x4
c0023b61:	75 12                	jne    c0023b75 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b63:	83 ec 0c             	sub    esp,0xc
c0023b66:	b3 08                	mov    bl,0x8
c0023b68:	68 cb cc 02 c0       	push   0xc002cccb
c0023b6d:	e8 51 f2 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0023b72:	83 c4 10             	add    esp,0x10
c0023b75:	50                   	push   eax
c0023b76:	50                   	push   eax
c0023b77:	0f b6 c3             	movzx  eax,bl
c0023b7a:	50                   	push   eax
c0023b7b:	68 e3 cc 02 c0       	push   0xc002cce3
c0023b80:	e8 3e f2 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0023b85:	83 c4 10             	add    esp,0x10
c0023b88:	83 c4 1c             	add    esp,0x1c
c0023b8b:	88 d8                	mov    al,bl
c0023b8d:	5b                   	pop    ebx
c0023b8e:	5e                   	pop    esi
c0023b8f:	5f                   	pop    edi
c0023b90:	5d                   	pop    ebp
c0023b91:	c3                   	ret    

c0023b92 <IDE::polling(unsigned char, unsigned int)>:
c0023b92:	57                   	push   edi
c0023b93:	56                   	push   esi
c0023b94:	53                   	push   ebx
c0023b95:	bb 04 00 00 00       	mov    ebx,0x4
c0023b9a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023b9e:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023ba3:	52                   	push   edx
c0023ba4:	6a 0c                	push   0xc
c0023ba6:	56                   	push   esi
c0023ba7:	57                   	push   edi
c0023ba8:	e8 f9 f4 ff ff       	call   c00230a6 <IDE::read(unsigned char, unsigned char)>
c0023bad:	83 c4 10             	add    esp,0x10
c0023bb0:	4b                   	dec    ebx
c0023bb1:	75 f0                	jne    c0023ba3 <IDE::polling(unsigned char, unsigned int)+0x11>
c0023bb3:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023bb8:	50                   	push   eax
c0023bb9:	6a 0c                	push   0xc
c0023bbb:	56                   	push   esi
c0023bbc:	57                   	push   edi
c0023bbd:	e8 e4 f4 ff ff       	call   c00230a6 <IDE::read(unsigned char, unsigned char)>
c0023bc2:	83 c4 10             	add    esp,0x10
c0023bc5:	a8 01                	test   al,0x1
c0023bc7:	74 12                	je     c0023bdb <IDE::polling(unsigned char, unsigned int)+0x49>
c0023bc9:	83 ec 0c             	sub    esp,0xc
c0023bcc:	68 fd cc 02 c0       	push   0xc002ccfd
c0023bd1:	e8 ed f1 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0023bd6:	83 c4 10             	add    esp,0x10
c0023bd9:	eb 17                	jmp    c0023bf2 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023bdb:	a8 20                	test   al,0x20
c0023bdd:	75 0f                	jne    c0023bee <IDE::polling(unsigned char, unsigned int)+0x5c>
c0023bdf:	4b                   	dec    ebx
c0023be0:	74 10                	je     c0023bf2 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023be2:	84 c0                	test   al,al
c0023be4:	78 d2                	js     c0023bb8 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023be6:	a8 08                	test   al,0x8
c0023be8:	74 ce                	je     c0023bb8 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023bea:	31 c0                	xor    eax,eax
c0023bec:	eb 06                	jmp    c0023bf4 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023bee:	b0 01                	mov    al,0x1
c0023bf0:	eb 02                	jmp    c0023bf4 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023bf2:	b0 02                	mov    al,0x2
c0023bf4:	5b                   	pop    ebx
c0023bf5:	5e                   	pop    esi
c0023bf6:	5f                   	pop    edi
c0023bf7:	c3                   	ret    

c0023bf8 <SATABus::close(int, int, void*)>:
c0023bf8:	31 c0                	xor    eax,eax
c0023bfa:	c3                   	ret    
c0023bfb:	90                   	nop

c0023bfc <SATABus::detect()>:
c0023bfc:	c3                   	ret    
c0023bfd:	90                   	nop

c0023bfe <SATABus::SATABus()>:
c0023bfe:	83 ec 0c             	sub    esp,0xc
c0023c01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c05:	83 ec 08             	sub    esp,0x8
c0023c08:	68 40 cd 02 c0       	push   0xc002cd40
c0023c0d:	50                   	push   eax
c0023c0e:	e8 69 09 ff ff       	call   c001457c <HardDiskController::HardDiskController(char const*)>
c0023c13:	83 c4 10             	add    esp,0x10
c0023c16:	ba fc cd 02 c0       	mov    edx,0xc002cdfc
c0023c1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c1f:	89 10                	mov    DWORD PTR [eax],edx
c0023c21:	83 ec 0c             	sub    esp,0xc
c0023c24:	6a 50                	push   0x50
c0023c26:	e8 71 c3 fe ff       	call   c000ff9c <Phys::allocateContiguousPages(int)>
c0023c2b:	83 c4 10             	add    esp,0x10
c0023c2e:	89 c2                	mov    edx,eax
c0023c30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c34:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023c3a:	83 ec 0c             	sub    esp,0xc
c0023c3d:	6a 50                	push   0x50
c0023c3f:	e8 ab dd fe ff       	call   c00119ef <Virt::allocateKernelVirtualPages(int)>
c0023c44:	83 c4 10             	add    esp,0x10
c0023c47:	89 c2                	mov    edx,eax
c0023c49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c4d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023c53:	e8 d6 df fe ff       	call   c0011c2e <Virt::getAKernelVAS()>
c0023c58:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023c5c:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023c62:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023c66:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023c6c:	83 ec 0c             	sub    esp,0xc
c0023c6f:	6a 03                	push   0x3
c0023c71:	6a 50                	push   0x50
c0023c73:	51                   	push   ecx
c0023c74:	52                   	push   edx
c0023c75:	50                   	push   eax
c0023c76:	e8 95 e8 fe ff       	call   c0012510 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023c7b:	83 c4 20             	add    esp,0x20
c0023c7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c82:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0023c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c8c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023c92:	83 ec 04             	sub    esp,0x4
c0023c95:	52                   	push   edx
c0023c96:	50                   	push   eax
c0023c97:	68 64 cd 02 c0       	push   0xc002cd64
c0023c9c:	e8 22 f1 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0023ca1:	83 c4 10             	add    esp,0x10
c0023ca4:	90                   	nop
c0023ca5:	83 c4 0c             	add    esp,0xc
c0023ca8:	c3                   	ret    
c0023ca9:	90                   	nop

c0023caa <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023caa:	83 ec 0c             	sub    esp,0xc
c0023cad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023cb1:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023cb4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023cb7:	09 c2                	or     edx,eax
c0023cb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cbd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023cc3:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023cc5:	31 c0                	xor    eax,eax
c0023cc7:	c1 e9 08             	shr    ecx,0x8
c0023cca:	83 e1 0f             	and    ecx,0xf
c0023ccd:	39 c8                	cmp    eax,ecx
c0023ccf:	74 0a                	je     c0023cdb <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023cd1:	f6 c2 01             	test   dl,0x1
c0023cd4:	74 18                	je     c0023cee <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023cd6:	d1 ea                	shr    edx,1
c0023cd8:	40                   	inc    eax
c0023cd9:	eb f2                	jmp    c0023ccd <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023cdb:	83 ec 0c             	sub    esp,0xc
c0023cde:	68 88 cd 02 c0       	push   0xc002cd88
c0023ce3:	e8 19 68 ff ff       	call   c001a501 <Krnl::panic(char const*)>
c0023ce8:	83 c4 10             	add    esp,0x10
c0023ceb:	83 c8 ff             	or     eax,0xffffffff
c0023cee:	83 c4 0c             	add    esp,0xc
c0023cf1:	c3                   	ret    

c0023cf2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023cf2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023cf6:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023cf9:	89 c2                	mov    edx,eax
c0023cfb:	c1 ea 08             	shr    edx,0x8
c0023cfe:	83 e2 0f             	and    edx,0xf
c0023d01:	fe ca                	dec    dl
c0023d03:	75 31                	jne    c0023d36 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023d05:	83 e0 0f             	and    eax,0xf
c0023d08:	3c 03                	cmp    al,0x3
c0023d0a:	75 2a                	jne    c0023d36 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023d0c:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023d0f:	b8 02 00 00 00       	mov    eax,0x2
c0023d14:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023d1a:	74 1c                	je     c0023d38 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023d1c:	b8 04 00 00 00       	mov    eax,0x4
c0023d21:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023d27:	74 0f                	je     c0023d38 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023d29:	31 c0                	xor    eax,eax
c0023d2b:	83 fa 03             	cmp    edx,0x3
c0023d2e:	0f 94 c0             	sete   al
c0023d31:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023d35:	c3                   	ret    
c0023d36:	31 c0                	xor    eax,eax
c0023d38:	c3                   	ret    
c0023d39:	90                   	nop

c0023d3a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023d3a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023d3e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d41:	0f ba e2 0f          	bt     edx,0xf
c0023d45:	72 f7                	jb     c0023d3e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023d47:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d4a:	83 ca 10             	or     edx,0x10
c0023d4d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d50:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d53:	83 ca 01             	or     edx,0x1
c0023d56:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d59:	c3                   	ret    

c0023d5a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023d5a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023d5e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d61:	83 e2 fe             	and    edx,0xfffffffe
c0023d64:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d67:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d6a:	83 e2 ef             	and    edx,0xffffffef
c0023d6d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d70:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d73:	0f ba e2 0e          	bt     edx,0xe
c0023d77:	72 f7                	jb     c0023d70 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023d79:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d7c:	0f ba e2 0f          	bt     edx,0xf
c0023d80:	72 ee                	jb     c0023d70 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023d82:	c3                   	ret    
c0023d83:	90                   	nop

c0023d84 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023d84:	55                   	push   ebp
c0023d85:	57                   	push   edi
c0023d86:	56                   	push   esi
c0023d87:	53                   	push   ebx
c0023d88:	83 ec 1c             	sub    esp,0x1c
c0023d8b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023d8f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023d93:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023d97:	53                   	push   ebx
c0023d98:	89 fd                	mov    ebp,edi
c0023d9a:	56                   	push   esi
c0023d9b:	c1 e5 0a             	shl    ebp,0xa
c0023d9e:	e8 b7 ff ff ff       	call   c0023d5a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023da3:	83 ec 0c             	sub    esp,0xc
c0023da6:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023dac:	01 e8                	add    eax,ebp
c0023dae:	89 03                	mov    DWORD PTR [ebx],eax
c0023db0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023db2:	68 00 04 00 00       	push   0x400
c0023db7:	6a 00                	push   0x0
c0023db9:	50                   	push   eax
c0023dba:	e8 c1 c9 fd ff       	call   c0000780 <memset>
c0023dbf:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023dc5:	89 fa                	mov    edx,edi
c0023dc7:	01 e8                	add    eax,ebp
c0023dc9:	c1 e7 0d             	shl    edi,0xd
c0023dcc:	89 03                	mov    DWORD PTR [ebx],eax
c0023dce:	c1 e2 08             	shl    edx,0x8
c0023dd1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023dd8:	81 c2 00 80 00 00    	add    edx,0x8000
c0023dde:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023de2:	89 d0                	mov    eax,edx
c0023de4:	83 c4 1c             	add    esp,0x1c
c0023de7:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023ded:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023df0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023df3:	68 00 01 00 00       	push   0x100
c0023df8:	6a 00                	push   0x0
c0023dfa:	50                   	push   eax
c0023dfb:	e8 80 c9 fd ff       	call   c0000780 <memset>
c0023e00:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023e04:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023e0a:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023e10:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023e14:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023e17:	83 c4 10             	add    esp,0x10
c0023e1a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023e21:	31 ff                	xor    edi,edi
c0023e23:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023e29:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023e2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023e33:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023e39:	83 c5 20             	add    ebp,0x20
c0023e3c:	01 f8                	add    eax,edi
c0023e3e:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023e41:	52                   	push   edx
c0023e42:	68 00 01 00 00       	push   0x100
c0023e47:	6a 00                	push   0x0
c0023e49:	50                   	push   eax
c0023e4a:	e8 31 c9 fd ff       	call   c0000780 <memset>
c0023e4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023e53:	83 c4 10             	add    esp,0x10
c0023e56:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023e5c:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023e63:	01 f8                	add    eax,edi
c0023e65:	81 c7 00 01 00 00    	add    edi,0x100
c0023e6b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023e6e:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023e74:	75 b3                	jne    c0023e29 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023e76:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023e7a:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023e7e:	83 c4 1c             	add    esp,0x1c
c0023e81:	5b                   	pop    ebx
c0023e82:	5e                   	pop    esi
c0023e83:	5f                   	pop    edi
c0023e84:	5d                   	pop    ebp
c0023e85:	e9 b0 fe ff ff       	jmp    c0023d3a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023e8a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023e8a:	55                   	push   ebp
c0023e8b:	57                   	push   edi
c0023e8c:	56                   	push   esi
c0023e8d:	53                   	push   ebx
c0023e8e:	31 db                	xor    ebx,ebx
c0023e90:	83 ec 0c             	sub    esp,0xc
c0023e93:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023e97:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023e9b:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023e9e:	f7 c7 01 00 00 00    	test   edi,0x1
c0023ea4:	0f 84 aa 00 00 00    	je     c0023f54 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023eaa:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023eae:	89 d8                	mov    eax,ebx
c0023eb0:	c1 e0 07             	shl    eax,0x7
c0023eb3:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0023eba:	55                   	push   ebp
c0023ebb:	56                   	push   esi
c0023ebc:	e8 31 fe ff ff       	call   c0023cf2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023ec1:	5a                   	pop    edx
c0023ec2:	83 f8 01             	cmp    eax,0x1
c0023ec5:	59                   	pop    ecx
c0023ec6:	75 30                	jne    c0023ef8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0023ec8:	50                   	push   eax
c0023ec9:	50                   	push   eax
c0023eca:	53                   	push   ebx
c0023ecb:	68 ad cd 02 c0       	push   0xc002cdad
c0023ed0:	e8 ee ee fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0023ed5:	83 c4 0c             	add    esp,0xc
c0023ed8:	53                   	push   ebx
c0023ed9:	55                   	push   ebp
c0023eda:	56                   	push   esi
c0023edb:	e8 a4 fe ff ff       	call   c0023d84 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023ee0:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023ee7:	e8 5f b9 fe ff       	call   c000f84b <malloc>
c0023eec:	89 c5                	mov    ebp,eax
c0023eee:	89 04 24             	mov    DWORD PTR [esp],eax
c0023ef1:	e8 60 0d 00 00       	call   c0024c56 <SATA::SATA()>
c0023ef6:	eb 33                	jmp    c0023f2b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0023ef8:	83 f8 04             	cmp    eax,0x4
c0023efb:	75 47                	jne    c0023f44 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c0023efd:	50                   	push   eax
c0023efe:	50                   	push   eax
c0023eff:	53                   	push   ebx
c0023f00:	68 c4 cd 02 c0       	push   0xc002cdc4
c0023f05:	e8 b9 ee fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0023f0a:	83 c4 0c             	add    esp,0xc
c0023f0d:	53                   	push   ebx
c0023f0e:	55                   	push   ebp
c0023f0f:	56                   	push   esi
c0023f10:	e8 6f fe ff ff       	call   c0023d84 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023f15:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023f1c:	e8 2a b9 fe ff       	call   c000f84b <malloc>
c0023f21:	89 c5                	mov    ebp,eax
c0023f23:	89 04 24             	mov    DWORD PTR [esp],eax
c0023f26:	e8 d7 10 00 00       	call   c0025002 <SATAPI::SATAPI()>
c0023f2b:	5a                   	pop    edx
c0023f2c:	59                   	pop    ecx
c0023f2d:	55                   	push   ebp
c0023f2e:	56                   	push   esi
c0023f2f:	e8 bc 02 ff ff       	call   c00141f0 <Device::addChild(Device*)>
c0023f34:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023f37:	56                   	push   esi
c0023f38:	6a 00                	push   0x0
c0023f3a:	53                   	push   ebx
c0023f3b:	55                   	push   ebp
c0023f3c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023f3f:	83 c4 20             	add    esp,0x20
c0023f42:	eb 10                	jmp    c0023f54 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023f44:	50                   	push   eax
c0023f45:	50                   	push   eax
c0023f46:	53                   	push   ebx
c0023f47:	68 dd cd 02 c0       	push   0xc002cddd
c0023f4c:	e8 72 ee fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0023f51:	83 c4 10             	add    esp,0x10
c0023f54:	d1 ef                	shr    edi,1
c0023f56:	43                   	inc    ebx
c0023f57:	83 fb 20             	cmp    ebx,0x20
c0023f5a:	0f 85 3e ff ff ff    	jne    c0023e9e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023f60:	83 c4 0c             	add    esp,0xc
c0023f63:	5b                   	pop    ebx
c0023f64:	5e                   	pop    esi
c0023f65:	5f                   	pop    edi
c0023f66:	5d                   	pop    ebp
c0023f67:	c3                   	ret    

c0023f68 <SATABus::open(int, int, void*)>:
c0023f68:	83 ec 14             	sub    esp,0x14
c0023f6b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023f6f:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023f75:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023f7b:	52                   	push   edx
c0023f7c:	50                   	push   eax
c0023f7d:	e8 08 ff ff ff       	call   c0023e8a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023f82:	31 c0                	xor    eax,eax
c0023f84:	83 c4 1c             	add    esp,0x1c
c0023f87:	c3                   	ret    

c0023f88 <ATA::close(int, int, void*)>:
c0023f88:	83 ec 0c             	sub    esp,0xc
c0023f8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f8f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023f95:	85 c0                	test   eax,eax
c0023f97:	74 0c                	je     c0023fa5 <ATA::close(int, int, void*)+0x1d>
c0023f99:	83 ec 0c             	sub    esp,0xc
c0023f9c:	8b 10                	mov    edx,DWORD PTR [eax]
c0023f9e:	50                   	push   eax
c0023f9f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023fa2:	83 c4 10             	add    esp,0x10
c0023fa5:	31 c0                	xor    eax,eax
c0023fa7:	83 c4 0c             	add    esp,0xc
c0023faa:	c3                   	ret    
c0023fab:	90                   	nop

c0023fac <ATA::powerSaving(PowerSavingLevel)>:
c0023fac:	c3                   	ret    
c0023fad:	90                   	nop

c0023fae <ATA::ATA()>:
c0023fae:	83 ec 0c             	sub    esp,0xc
c0023fb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023fb5:	83 ec 04             	sub    esp,0x4
c0023fb8:	68 00 02 00 00       	push   0x200
c0023fbd:	68 c5 ce 02 c0       	push   0xc002cec5
c0023fc2:	50                   	push   eax
c0023fc3:	e8 4c 06 ff ff       	call   c0014614 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023fc8:	83 c4 10             	add    esp,0x10
c0023fcb:	ba 48 ce 02 c0       	mov    edx,0xc002ce48
c0023fd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023fd4:	89 10                	mov    DWORD PTR [eax],edx
c0023fd6:	90                   	nop
c0023fd7:	83 c4 0c             	add    esp,0xc
c0023fda:	c3                   	ret    
c0023fdb:	90                   	nop

c0023fdc <ATA::flush(bool)>:
c0023fdc:	53                   	push   ebx
c0023fdd:	83 ec 08             	sub    esp,0x8
c0023fe0:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023fe5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023fe9:	19 c0                	sbb    eax,eax
c0023feb:	83 e0 fd             	and    eax,0xfffffffd
c0023fee:	05 ea 00 00 00       	add    eax,0xea
c0023ff3:	50                   	push   eax
c0023ff4:	6a 07                	push   0x7
c0023ff6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ffd:	50                   	push   eax
c0023ffe:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024004:	e8 dd ef ff ff       	call   c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024009:	83 c4 0c             	add    esp,0xc
c002400c:	6a 00                	push   0x0
c002400e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024015:	50                   	push   eax
c0024016:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002401c:	e8 71 fb ff ff       	call   c0023b92 <IDE::polling(unsigned char, unsigned int)>
c0024021:	83 c4 18             	add    esp,0x18
c0024024:	5b                   	pop    ebx
c0024025:	c3                   	ret    

c0024026 <ATA::readyForCommand()>:
c0024026:	56                   	push   esi
c0024027:	53                   	push   ebx
c0024028:	31 db                	xor    ebx,ebx
c002402a:	50                   	push   eax
c002402b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002402f:	50                   	push   eax
c0024030:	6a 0c                	push   0xc
c0024032:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024039:	50                   	push   eax
c002403a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024040:	e8 61 f0 ff ff       	call   c00230a6 <IDE::read(unsigned char, unsigned char)>
c0024045:	83 c4 10             	add    esp,0x10
c0024048:	a8 88                	test   al,0x88
c002404a:	74 23                	je     c002406f <ATA::readyForCommand()+0x49>
c002404c:	43                   	inc    ebx
c002404d:	83 fb 63             	cmp    ebx,0x63
c0024050:	7e dd                	jle    c002402f <ATA::readyForCommand()+0x9>
c0024052:	51                   	push   ecx
c0024053:	51                   	push   ecx
c0024054:	6a 00                	push   0x0
c0024056:	68 40 42 0f 00       	push   0xf4240
c002405b:	e8 06 a2 ff ff       	call   c001e266 <nanoSleep(unsigned long long)>
c0024060:	83 c4 10             	add    esp,0x10
c0024063:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024069:	75 c4                	jne    c002402f <ATA::readyForCommand()+0x9>
c002406b:	31 c0                	xor    eax,eax
c002406d:	eb 02                	jmp    c0024071 <ATA::readyForCommand()+0x4b>
c002406f:	b0 01                	mov    al,0x1
c0024071:	5a                   	pop    edx
c0024072:	5b                   	pop    ebx
c0024073:	5e                   	pop    esi
c0024074:	c3                   	ret    
c0024075:	90                   	nop

c0024076 <ATA::access(unsigned long long, int, void*, bool)>:
c0024076:	55                   	push   ebp
c0024077:	57                   	push   edi
c0024078:	56                   	push   esi
c0024079:	53                   	push   ebx
c002407a:	83 ec 2c             	sub    esp,0x2c
c002407d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024081:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024085:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024089:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002408d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0024091:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0024095:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024099:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002409f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00240a3:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00240a9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00240ad:	c1 e0 06             	shl    eax,0x6
c00240b0:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c00240b8:	74 5d                	je     c0024117 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c00240ba:	89 fa                	mov    edx,edi
c00240bc:	89 f0                	mov    eax,esi
c00240be:	0f ac d0 1c          	shrd   eax,edx,0x1c
c00240c2:	c1 ea 1c             	shr    edx,0x1c
c00240c5:	89 d1                	mov    ecx,edx
c00240c7:	09 c1                	or     ecx,eax
c00240c9:	74 25                	je     c00240f0 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c00240cb:	31 ed                	xor    ebp,ebp
c00240cd:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c00240d4:	89 fa                	mov    edx,edi
c00240d6:	89 f0                	mov    eax,esi
c00240d8:	0f ad d0             	shrd   eax,edx,cl
c00240db:	d3 ea                	shr    edx,cl
c00240dd:	f6 c1 20             	test   cl,0x20
c00240e0:	74 02                	je     c00240e4 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c00240e2:	89 d0                	mov    eax,edx
c00240e4:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c00240e8:	45                   	inc    ebp
c00240e9:	83 fd 06             	cmp    ebp,0x6
c00240ec:	75 df                	jne    c00240cd <ATA::access(unsigned long long, int, void*, bool)+0x57>
c00240ee:	eb 76                	jmp    c0024166 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c00240f0:	89 f0                	mov    eax,esi
c00240f2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00240f7:	89 fa                	mov    edx,edi
c00240f9:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024100:	0f ac d0 10          	shrd   eax,edx,0x10
c0024104:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024109:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002410d:	c1 ee 18             	shr    esi,0x18
c0024110:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0024115:	eb 56                	jmp    c002416d <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024117:	6a 00                	push   0x0
c0024119:	6a 3f                	push   0x3f
c002411b:	57                   	push   edi
c002411c:	56                   	push   esi
c002411d:	e8 a2 29 00 00       	call   c0026ac4 <__umoddi3>
c0024122:	83 c4 10             	add    esp,0x10
c0024125:	40                   	inc    eax
c0024126:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c002412a:	6a 00                	push   0x0
c002412c:	68 f0 03 00 00       	push   0x3f0
c0024131:	57                   	push   edi
c0024132:	56                   	push   esi
c0024133:	e8 8c 28 00 00       	call   c00269c4 <__udivdi3>
c0024138:	83 c4 10             	add    esp,0x10
c002413b:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0024140:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024147:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002414c:	6a 00                	push   0x0
c002414e:	6a 3f                	push   0x3f
c0024150:	57                   	push   edi
c0024151:	56                   	push   esi
c0024152:	e8 6d 28 00 00       	call   c00269c4 <__udivdi3>
c0024157:	83 c4 10             	add    esp,0x10
c002415a:	89 c6                	mov    esi,eax
c002415c:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0024161:	83 e6 0f             	and    esi,0xf
c0024164:	eb 07                	jmp    c002416d <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024166:	31 f6                	xor    esi,esi
c0024168:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c002416d:	bf 01 00 00 00       	mov    edi,0x1
c0024172:	50                   	push   eax
c0024173:	6a 00                	push   0x0
c0024175:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002417c:	50                   	push   eax
c002417d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024181:	e8 6c f0 ff ff       	call   c00231f2 <IDE::enableIRQs(unsigned char, bool)>
c0024186:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024189:	e8 98 fe ff ff       	call   c0024026 <ATA::readyForCommand()>
c002418e:	83 c4 10             	add    esp,0x10
c0024191:	84 c0                	test   al,al
c0024193:	0f 84 5a 02 00 00    	je     c00243f3 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024199:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002419f:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00241a5:	c1 e0 04             	shl    eax,0x4
c00241a8:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c00241af:	09 c6                	or     esi,eax
c00241b1:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c00241b6:	75 05                	jne    c00241bd <ATA::access(unsigned long long, int, void*, bool)+0x147>
c00241b8:	83 ce a0             	or     esi,0xffffffa0
c00241bb:	eb 03                	jmp    c00241c0 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c00241bd:	83 ce e0             	or     esi,0xffffffe0
c00241c0:	89 f0                	mov    eax,esi
c00241c2:	0f b6 f0             	movzx  esi,al
c00241c5:	56                   	push   esi
c00241c6:	6a 06                	push   0x6
c00241c8:	51                   	push   ecx
c00241c9:	52                   	push   edx
c00241ca:	e8 17 ee ff ff       	call   c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241cf:	83 c4 10             	add    esp,0x10
c00241d2:	6a 00                	push   0x0
c00241d4:	6a 01                	push   0x1
c00241d6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241dd:	50                   	push   eax
c00241de:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241e4:	e8 fd ed ff ff       	call   c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241e9:	83 c4 10             	add    esp,0x10
c00241ec:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00241f1:	75 6e                	jne    c0024261 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c00241f3:	6a 00                	push   0x0
c00241f5:	6a 08                	push   0x8
c00241f7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241fe:	50                   	push   eax
c00241ff:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024205:	e8 dc ed ff ff       	call   c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002420a:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c002420f:	50                   	push   eax
c0024210:	6a 09                	push   0x9
c0024212:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024219:	50                   	push   eax
c002421a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024220:	e8 c1 ed ff ff       	call   c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024225:	83 c4 20             	add    esp,0x20
c0024228:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c002422d:	50                   	push   eax
c002422e:	6a 0a                	push   0xa
c0024230:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024237:	50                   	push   eax
c0024238:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002423e:	e8 a3 ed ff ff       	call   c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024243:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024248:	50                   	push   eax
c0024249:	6a 0b                	push   0xb
c002424b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024252:	50                   	push   eax
c0024253:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024259:	e8 88 ed ff ff       	call   c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002425e:	83 c4 20             	add    esp,0x20
c0024261:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024266:	50                   	push   eax
c0024267:	6a 02                	push   0x2
c0024269:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024270:	50                   	push   eax
c0024271:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024277:	e8 6a ed ff ff       	call   c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002427c:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0024281:	50                   	push   eax
c0024282:	6a 03                	push   0x3
c0024284:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002428b:	50                   	push   eax
c002428c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024292:	e8 4f ed ff ff       	call   c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024297:	83 c4 20             	add    esp,0x20
c002429a:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c002429f:	50                   	push   eax
c00242a0:	6a 04                	push   0x4
c00242a2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242a9:	50                   	push   eax
c00242aa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242b0:	e8 31 ed ff ff       	call   c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242b5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00242ba:	50                   	push   eax
c00242bb:	6a 05                	push   0x5
c00242bd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242c4:	50                   	push   eax
c00242c5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242cb:	e8 16 ed ff ff       	call   c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242d0:	83 c4 20             	add    esp,0x20
c00242d3:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00242d8:	0f 94 c0             	sete   al
c00242db:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00242e0:	74 09                	je     c00242eb <ATA::access(unsigned long long, int, void*, bool)+0x275>
c00242e2:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c00242e9:	eb 07                	jmp    c00242f2 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c00242eb:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c00242f2:	0f b6 c0             	movzx  eax,al
c00242f5:	50                   	push   eax
c00242f6:	6a 07                	push   0x7
c00242f8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242ff:	50                   	push   eax
c0024300:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024306:	e8 db ec ff ff       	call   c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002430b:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c002430f:	83 c4 10             	add    esp,0x10
c0024312:	85 f6                	test   esi,esi
c0024314:	0f 84 ba 00 00 00    	je     c00243d4 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c002431a:	50                   	push   eax
c002431b:	6a 01                	push   0x1
c002431d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024324:	50                   	push   eax
c0024325:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002432b:	e8 62 f8 ff ff       	call   c0023b92 <IDE::polling(unsigned char, unsigned int)>
c0024330:	83 c4 10             	add    esp,0x10
c0024333:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0024339:	84 c0                	test   al,al
c002433b:	74 2c                	je     c0024369 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c002433d:	0f b6 f8             	movzx  edi,al
c0024340:	0f b6 d2             	movzx  edx,dl
c0024343:	57                   	push   edi
c0024344:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c002434b:	50                   	push   eax
c002434c:	52                   	push   edx
c002434d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024353:	e8 a4 f6 ff ff       	call   c00239fc <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024358:	c7 04 24 20 ce 02 c0 	mov    DWORD PTR [esp],0xc002ce20
c002435f:	e8 5f ea fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0024364:	e9 87 00 00 00       	jmp    c00243f0 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0024369:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c002436e:	74 33                	je     c00243a3 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0024370:	31 ed                	xor    ebp,ebp
c0024372:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024376:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c002437a:	50                   	push   eax
c002437b:	50                   	push   eax
c002437c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024383:	50                   	push   eax
c0024384:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002438a:	e8 45 ec ff ff       	call   c0022fd4 <IDE::getBase(unsigned char)>
c002438f:	89 c2                	mov    edx,eax
c0024391:	89 f8                	mov    eax,edi
c0024393:	66 ef                	out    dx,ax
c0024395:	45                   	inc    ebp
c0024396:	83 c4 10             	add    esp,0x10
c0024399:	81 fd 00 01 00 00    	cmp    ebp,0x100
c002439f:	75 d1                	jne    c0024372 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c00243a1:	eb 23                	jmp    c00243c6 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c00243a3:	0f b6 d2             	movzx  edx,dl
c00243a6:	51                   	push   ecx
c00243a7:	51                   	push   ecx
c00243a8:	52                   	push   edx
c00243a9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243af:	e8 20 ec ff ff       	call   c0022fd4 <IDE::getBase(unsigned char)>
c00243b4:	b9 00 01 00 00       	mov    ecx,0x100
c00243b9:	89 c2                	mov    edx,eax
c00243bb:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c00243bf:	fc                   	cld    
c00243c0:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c00243c3:	83 c4 10             	add    esp,0x10
c00243c6:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c00243ce:	4e                   	dec    esi
c00243cf:	e9 3e ff ff ff       	jmp    c0024312 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c00243d4:	31 ff                	xor    edi,edi
c00243d6:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00243db:	74 16                	je     c00243f3 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c00243dd:	50                   	push   eax
c00243de:	50                   	push   eax
c00243df:	31 c0                	xor    eax,eax
c00243e1:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c00243e6:	0f 94 c0             	sete   al
c00243e9:	50                   	push   eax
c00243ea:	53                   	push   ebx
c00243eb:	e8 ec fb ff ff       	call   c0023fdc <ATA::flush(bool)>
c00243f0:	83 c4 10             	add    esp,0x10
c00243f3:	83 c4 2c             	add    esp,0x2c
c00243f6:	89 f8                	mov    eax,edi
c00243f8:	5b                   	pop    ebx
c00243f9:	5e                   	pop    esi
c00243fa:	5f                   	pop    edi
c00243fb:	5d                   	pop    ebp
c00243fc:	c3                   	ret    
c00243fd:	90                   	nop

c00243fe <ATA::read(unsigned long long, int, void*)>:
c00243fe:	57                   	push   edi
c00243ff:	b8 04 00 00 00       	mov    eax,0x4
c0024404:	56                   	push   esi
c0024405:	53                   	push   ebx
c0024406:	83 ec 10             	sub    esp,0x10
c0024409:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002440d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024411:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024414:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024418:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002441c:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024422:	77 3b                	ja     c002445f <ATA::read(unsigned long long, int, void*)+0x61>
c0024424:	b8 06 00 00 00       	mov    eax,0x6
c0024429:	85 d2                	test   edx,edx
c002442b:	74 32                	je     c002445f <ATA::read(unsigned long long, int, void*)+0x61>
c002442d:	50                   	push   eax
c002442e:	50                   	push   eax
c002442f:	6a 00                	push   0x0
c0024431:	52                   	push   edx
c0024432:	53                   	push   ebx
c0024433:	57                   	push   edi
c0024434:	56                   	push   esi
c0024435:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024439:	e8 38 fc ff ff       	call   c0024076 <ATA::access(unsigned long long, int, void*, bool)>
c002443e:	83 c4 20             	add    esp,0x20
c0024441:	85 c0                	test   eax,eax
c0024443:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024447:	75 11                	jne    c002445a <ATA::read(unsigned long long, int, void*)+0x5c>
c0024449:	01 1d c8 27 03 c0    	add    DWORD PTR ds:0xc00327c8,ebx
c002444f:	e8 a4 c4 fe ff       	call   c00108f8 <VgaText::updateDiskUsage()>
c0024454:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024458:	eb 05                	jmp    c002445f <ATA::read(unsigned long long, int, void*)+0x61>
c002445a:	b8 01 00 00 00       	mov    eax,0x1
c002445f:	83 c4 10             	add    esp,0x10
c0024462:	5b                   	pop    ebx
c0024463:	5e                   	pop    esi
c0024464:	5f                   	pop    edi
c0024465:	c3                   	ret    

c0024466 <ATA::write(unsigned long long, int, void*)>:
c0024466:	57                   	push   edi
c0024467:	b8 04 00 00 00       	mov    eax,0x4
c002446c:	56                   	push   esi
c002446d:	53                   	push   ebx
c002446e:	83 ec 10             	sub    esp,0x10
c0024471:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024475:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024479:	8d 4b ff             	lea    ecx,[ebx-0x1]
c002447c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024480:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024484:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c002448a:	77 3b                	ja     c00244c7 <ATA::write(unsigned long long, int, void*)+0x61>
c002448c:	b8 06 00 00 00       	mov    eax,0x6
c0024491:	85 d2                	test   edx,edx
c0024493:	74 32                	je     c00244c7 <ATA::write(unsigned long long, int, void*)+0x61>
c0024495:	50                   	push   eax
c0024496:	50                   	push   eax
c0024497:	6a 01                	push   0x1
c0024499:	52                   	push   edx
c002449a:	53                   	push   ebx
c002449b:	57                   	push   edi
c002449c:	56                   	push   esi
c002449d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00244a1:	e8 d0 fb ff ff       	call   c0024076 <ATA::access(unsigned long long, int, void*, bool)>
c00244a6:	83 c4 20             	add    esp,0x20
c00244a9:	85 c0                	test   eax,eax
c00244ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00244af:	75 11                	jne    c00244c2 <ATA::write(unsigned long long, int, void*)+0x5c>
c00244b1:	01 1d c4 27 03 c0    	add    DWORD PTR ds:0xc00327c4,ebx
c00244b7:	e8 3c c4 fe ff       	call   c00108f8 <VgaText::updateDiskUsage()>
c00244bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00244c0:	eb 05                	jmp    c00244c7 <ATA::write(unsigned long long, int, void*)+0x61>
c00244c2:	b8 01 00 00 00       	mov    eax,0x1
c00244c7:	83 c4 10             	add    esp,0x10
c00244ca:	5b                   	pop    ebx
c00244cb:	5e                   	pop    esi
c00244cc:	5f                   	pop    edi
c00244cd:	c3                   	ret    

c00244ce <ATA::detectCHS()>:
c00244ce:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00244d2:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c00244d8:	c1 e0 06             	shl    eax,0x6
c00244db:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c00244e1:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c00244eb:	c7 44 24 04 2b ce 02 c0 	mov    DWORD PTR [esp+0x4],0xc002ce2b
c00244f3:	e9 09 60 ff ff       	jmp    c001a501 <Krnl::panic(char const*)>

c00244f8 <ATA::open(int, int, void*)>:
c00244f8:	53                   	push   ebx
c00244f9:	83 ec 08             	sub    esp,0x8
c00244fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024500:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024504:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024508:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002450e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024514:	c1 e0 06             	shl    eax,0x6
c0024517:	01 d0                	add    eax,edx
c0024519:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024520:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0024526:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c002452d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024537:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c002453d:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024544:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002454b:	75 0c                	jne    c0024559 <ATA::open(int, int, void*)+0x61>
c002454d:	83 ec 0c             	sub    esp,0xc
c0024550:	53                   	push   ebx
c0024551:	e8 78 ff ff ff       	call   c00244ce <ATA::detectCHS()>
c0024556:	83 c4 10             	add    esp,0x10
c0024559:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002455f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024565:	c1 e0 06             	shl    eax,0x6
c0024568:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c002456f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024579:	d1 e8                	shr    eax,1
c002457b:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0024581:	6a 04                	push   0x4
c0024583:	6a 0c                	push   0xc
c0024585:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002458c:	50                   	push   eax
c002458d:	52                   	push   edx
c002458e:	e8 53 ea ff ff       	call   c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024593:	90                   	nop
c0024594:	90                   	nop
c0024595:	6a 00                	push   0x0
c0024597:	6a 0c                	push   0xc
c0024599:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00245a0:	50                   	push   eax
c00245a1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00245a7:	e8 3a ea ff ff       	call   c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245ac:	83 c4 14             	add    esp,0x14
c00245af:	53                   	push   ebx
c00245b0:	e8 c7 00 ff ff       	call   c001467c <PhysicalDisk::startCache()>
c00245b5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00245b8:	e8 af 22 ff ff       	call   c001686c <createPartitionsForDisk(PhysicalDisk*)>
c00245bd:	31 c0                	xor    eax,eax
c00245bf:	83 c4 18             	add    esp,0x18
c00245c2:	5b                   	pop    ebx
c00245c3:	c3                   	ret    

c00245c4 <ATAPI::write(unsigned long long, int, void*)>:
c00245c4:	b8 03 00 00 00       	mov    eax,0x3
c00245c9:	c3                   	ret    

c00245ca <ATAPI::close(int, int, void*)>:
c00245ca:	83 ec 0c             	sub    esp,0xc
c00245cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00245d1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00245d7:	85 c0                	test   eax,eax
c00245d9:	74 0c                	je     c00245e7 <ATAPI::close(int, int, void*)+0x1d>
c00245db:	83 ec 0c             	sub    esp,0xc
c00245de:	8b 10                	mov    edx,DWORD PTR [eax]
c00245e0:	50                   	push   eax
c00245e1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00245e4:	83 c4 10             	add    esp,0x10
c00245e7:	31 c0                	xor    eax,eax
c00245e9:	83 c4 0c             	add    esp,0xc
c00245ec:	c3                   	ret    
c00245ed:	90                   	nop

c00245ee <ATAPI::ATAPI()>:
c00245ee:	83 ec 0c             	sub    esp,0xc
c00245f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00245f5:	83 ec 04             	sub    esp,0x4
c00245f8:	68 00 08 00 00       	push   0x800
c00245fd:	68 65 cf 02 c0       	push   0xc002cf65
c0024602:	50                   	push   eax
c0024603:	e8 0c 00 ff ff       	call   c0014614 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024608:	83 c4 10             	add    esp,0x10
c002460b:	ba 80 ce 02 c0       	mov    edx,0xc002ce80
c0024610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024614:	89 10                	mov    DWORD PTR [eax],edx
c0024616:	90                   	nop
c0024617:	83 c4 0c             	add    esp,0xc
c002461a:	c3                   	ret    
c002461b:	90                   	nop

c002461c <ATAPI::readyForCommand()>:
c002461c:	56                   	push   esi
c002461d:	53                   	push   ebx
c002461e:	31 db                	xor    ebx,ebx
c0024620:	50                   	push   eax
c0024621:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024625:	50                   	push   eax
c0024626:	6a 0c                	push   0xc
c0024628:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002462f:	50                   	push   eax
c0024630:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024636:	e8 6b ea ff ff       	call   c00230a6 <IDE::read(unsigned char, unsigned char)>
c002463b:	83 c4 10             	add    esp,0x10
c002463e:	a8 88                	test   al,0x88
c0024640:	74 23                	je     c0024665 <ATAPI::readyForCommand()+0x49>
c0024642:	43                   	inc    ebx
c0024643:	83 fb 63             	cmp    ebx,0x63
c0024646:	7e dd                	jle    c0024625 <ATAPI::readyForCommand()+0x9>
c0024648:	51                   	push   ecx
c0024649:	51                   	push   ecx
c002464a:	6a 00                	push   0x0
c002464c:	68 40 42 0f 00       	push   0xf4240
c0024651:	e8 10 9c ff ff       	call   c001e266 <nanoSleep(unsigned long long)>
c0024656:	83 c4 10             	add    esp,0x10
c0024659:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002465f:	75 c4                	jne    c0024625 <ATAPI::readyForCommand()+0x9>
c0024661:	31 c0                	xor    eax,eax
c0024663:	eb 02                	jmp    c0024667 <ATAPI::readyForCommand()+0x4b>
c0024665:	b0 01                	mov    al,0x1
c0024667:	5a                   	pop    edx
c0024668:	5b                   	pop    ebx
c0024669:	5e                   	pop    esi
c002466a:	c3                   	ret    
c002466b:	90                   	nop

c002466c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c002466c:	55                   	push   ebp
c002466d:	57                   	push   edi
c002466e:	56                   	push   esi
c002466f:	53                   	push   ebx
c0024670:	83 ec 20             	sub    esp,0x20
c0024673:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024677:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002467b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c002467f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024683:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024687:	6a 01                	push   0x1
c0024689:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024690:	50                   	push   eax
c0024691:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024697:	e8 56 eb ff ff       	call   c00231f2 <IDE::enableIRQs(unsigned char, bool)>
c002469c:	5e                   	pop    esi
c002469d:	58                   	pop    eax
c002469e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246a5:	50                   	push   eax
c00246a6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246ac:	e8 0f e9 ff ff       	call   c0022fc0 <IDE::prepareInterrupt(unsigned char)>
c00246b1:	89 3c 24             	mov    DWORD PTR [esp],edi
c00246b4:	e8 63 ff ff ff       	call   c002461c <ATAPI::readyForCommand()>
c00246b9:	83 c4 10             	add    esp,0x10
c00246bc:	84 c0                	test   al,al
c00246be:	75 0a                	jne    c00246ca <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c00246c0:	bb 01 00 00 00       	mov    ebx,0x1
c00246c5:	e9 57 02 00 00       	jmp    c0024921 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00246ca:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c00246d0:	c1 e0 04             	shl    eax,0x4
c00246d3:	0f b6 c0             	movzx  eax,al
c00246d6:	50                   	push   eax
c00246d7:	6a 06                	push   0x6
c00246d9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246e0:	50                   	push   eax
c00246e1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246e7:	e8 fa e8 ff ff       	call   c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246ec:	6a 00                	push   0x0
c00246ee:	6a 01                	push   0x1
c00246f0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246f7:	50                   	push   eax
c00246f8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246fe:	e8 e3 e8 ff ff       	call   c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024703:	83 c4 20             	add    esp,0x20
c0024706:	0f b6 c3             	movzx  eax,bl
c0024709:	0f b6 df             	movzx  ebx,bh
c002470c:	50                   	push   eax
c002470d:	6a 04                	push   0x4
c002470f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024716:	50                   	push   eax
c0024717:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002471d:	e8 c4 e8 ff ff       	call   c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024722:	53                   	push   ebx
c0024723:	6a 05                	push   0x5
c0024725:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002472c:	50                   	push   eax
c002472d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024733:	e8 ae e8 ff ff       	call   c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024738:	83 c4 20             	add    esp,0x20
c002473b:	68 a0 00 00 00       	push   0xa0
c0024740:	6a 07                	push   0x7
c0024742:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024749:	50                   	push   eax
c002474a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024750:	e8 91 e8 ff ff       	call   c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024755:	83 c4 0c             	add    esp,0xc
c0024758:	6a 01                	push   0x1
c002475a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024761:	50                   	push   eax
c0024762:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024768:	e8 25 f4 ff ff       	call   c0023b92 <IDE::polling(unsigned char, unsigned int)>
c002476d:	83 c4 10             	add    esp,0x10
c0024770:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024776:	84 c0                	test   al,al
c0024778:	74 23                	je     c002479d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c002477a:	0f b6 d8             	movzx  ebx,al
c002477d:	0f b6 d2             	movzx  edx,dl
c0024780:	53                   	push   ebx
c0024781:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0024788:	50                   	push   eax
c0024789:	52                   	push   edx
c002478a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024790:	e8 67 f2 ff ff       	call   c00239fc <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024795:	83 c4 10             	add    esp,0x10
c0024798:	e9 84 01 00 00       	jmp    c0024921 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002479d:	0f b6 d2             	movzx  edx,dl
c00247a0:	53                   	push   ebx
c00247a1:	53                   	push   ebx
c00247a2:	52                   	push   edx
c00247a3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247a9:	e8 26 e8 ff ff       	call   c0022fd4 <IDE::getBase(unsigned char)>
c00247ae:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00247b2:	b9 06 00 00 00       	mov    ecx,0x6
c00247b7:	89 c2                	mov    edx,eax
c00247b9:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c00247bc:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00247c0:	83 c4 10             	add    esp,0x10
c00247c3:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00247c9:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00247d0:	85 db                	test   ebx,ebx
c00247d2:	0f 84 ec 00 00 00    	je     c00248c4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c00247d8:	51                   	push   ecx
c00247d9:	51                   	push   ecx
c00247da:	52                   	push   edx
c00247db:	50                   	push   eax
c00247dc:	e8 73 e9 ff ff       	call   c0023154 <IDE::waitInterrupt(unsigned char)>
c00247e1:	83 c4 10             	add    esp,0x10
c00247e4:	84 c0                	test   al,al
c00247e6:	0f 84 d4 fe ff ff    	je     c00246c0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00247ec:	56                   	push   esi
c00247ed:	56                   	push   esi
c00247ee:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247f5:	50                   	push   eax
c00247f6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247fc:	e8 bf e7 ff ff       	call   c0022fc0 <IDE::prepareInterrupt(unsigned char)>
c0024801:	83 c4 0c             	add    esp,0xc
c0024804:	6a 04                	push   0x4
c0024806:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002480d:	50                   	push   eax
c002480e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024814:	e8 8d e8 ff ff       	call   c00230a6 <IDE::read(unsigned char, unsigned char)>
c0024819:	83 c4 0c             	add    esp,0xc
c002481c:	89 c6                	mov    esi,eax
c002481e:	6a 05                	push   0x5
c0024820:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024827:	50                   	push   eax
c0024828:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002482e:	e8 73 e8 ff ff       	call   c00230a6 <IDE::read(unsigned char, unsigned char)>
c0024833:	89 f1                	mov    ecx,esi
c0024835:	0f b6 c0             	movzx  eax,al
c0024838:	0f b6 f1             	movzx  esi,cl
c002483b:	c1 e0 08             	shl    eax,0x8
c002483e:	09 c6                	or     esi,eax
c0024840:	d1 fe                	sar    esi,1
c0024842:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0024846:	83 c4 10             	add    esp,0x10
c0024849:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c002484e:	74 41                	je     c0024891 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0024850:	31 c9                	xor    ecx,ecx
c0024852:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024858:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002485f:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0024863:	75 0a                	jne    c002486f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0024865:	01 c9                	add    ecx,ecx
c0024867:	01 cd                	add    ebp,ecx
c0024869:	4b                   	dec    ebx
c002486a:	e9 54 ff ff ff       	jmp    c00247c3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c002486f:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0024874:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0024878:	51                   	push   ecx
c0024879:	51                   	push   ecx
c002487a:	52                   	push   edx
c002487b:	50                   	push   eax
c002487c:	e8 53 e7 ff ff       	call   c0022fd4 <IDE::getBase(unsigned char)>
c0024881:	89 c2                	mov    edx,eax
c0024883:	89 f0                	mov    eax,esi
c0024885:	66 ef                	out    dx,ax
c0024887:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002488b:	83 c4 10             	add    esp,0x10
c002488e:	41                   	inc    ecx
c002488f:	eb c1                	jmp    c0024852 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0024891:	31 f6                	xor    esi,esi
c0024893:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024899:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00248a0:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00248a4:	75 06                	jne    c00248ac <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c00248a6:	01 f6                	add    esi,esi
c00248a8:	01 f5                	add    ebp,esi
c00248aa:	eb bd                	jmp    c0024869 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c00248ac:	51                   	push   ecx
c00248ad:	51                   	push   ecx
c00248ae:	52                   	push   edx
c00248af:	50                   	push   eax
c00248b0:	e8 1f e7 ff ff       	call   c0022fd4 <IDE::getBase(unsigned char)>
c00248b5:	89 c2                	mov    edx,eax
c00248b7:	66 ed                	in     ax,dx
c00248b9:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c00248be:	83 c4 10             	add    esp,0x10
c00248c1:	46                   	inc    esi
c00248c2:	eb cf                	jmp    c0024893 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c00248c4:	51                   	push   ecx
c00248c5:	51                   	push   ecx
c00248c6:	52                   	push   edx
c00248c7:	50                   	push   eax
c00248c8:	e8 87 e8 ff ff       	call   c0023154 <IDE::waitInterrupt(unsigned char)>
c00248cd:	83 c4 10             	add    esp,0x10
c00248d0:	84 c0                	test   al,al
c00248d2:	0f 84 e8 fd ff ff    	je     c00246c0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00248d8:	bb a0 86 01 00       	mov    ebx,0x186a0
c00248dd:	52                   	push   edx
c00248de:	52                   	push   edx
c00248df:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248e6:	50                   	push   eax
c00248e7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248ed:	e8 ce e6 ff ff       	call   c0022fc0 <IDE::prepareInterrupt(unsigned char)>
c00248f2:	83 c4 10             	add    esp,0x10
c00248f5:	50                   	push   eax
c00248f6:	50                   	push   eax
c00248f7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248fe:	50                   	push   eax
c00248ff:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024905:	e8 ca e6 ff ff       	call   c0022fd4 <IDE::getBase(unsigned char)>
c002490a:	8d 50 07             	lea    edx,[eax+0x7]
c002490d:	ec                   	in     al,dx
c002490e:	83 c4 10             	add    esp,0x10
c0024911:	a8 88                	test   al,0x88
c0024913:	74 0a                	je     c002491f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0024915:	4b                   	dec    ebx
c0024916:	75 dd                	jne    c00248f5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0024918:	bb 02 00 00 00       	mov    ebx,0x2
c002491d:	eb 02                	jmp    c0024921 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002491f:	31 db                	xor    ebx,ebx
c0024921:	83 c4 1c             	add    esp,0x1c
c0024924:	89 d8                	mov    eax,ebx
c0024926:	5b                   	pop    ebx
c0024927:	5e                   	pop    esi
c0024928:	5f                   	pop    edi
c0024929:	5d                   	pop    ebp
c002492a:	c3                   	ret    
c002492b:	90                   	nop

c002492c <ATAPI::diskRemoved()>:
c002492c:	83 ec 18             	sub    esp,0x18
c002492f:	68 71 cf 02 c0       	push   0xc002cf71
c0024934:	e8 8a e4 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0024939:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002493d:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0024944:	83 c4 1c             	add    esp,0x1c
c0024947:	c3                   	ret    

c0024948 <ATAPI::eject()>:
c0024948:	57                   	push   edi
c0024949:	b9 03 00 00 00       	mov    ecx,0x3
c002494e:	53                   	push   ebx
c002494f:	83 ec 14             	sub    esp,0x14
c0024952:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024956:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002495a:	fc                   	cld    
c002495b:	31 c0                	xor    eax,eax
c002495d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002495f:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024964:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024969:	50                   	push   eax
c002496a:	50                   	push   eax
c002496b:	6a 00                	push   0x0
c002496d:	6a 00                	push   0x0
c002496f:	6a 00                	push   0x0
c0024971:	6a 02                	push   0x2
c0024973:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024977:	50                   	push   eax
c0024978:	53                   	push   ebx
c0024979:	e8 ee fc ff ff       	call   c002466c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002497e:	83 c4 14             	add    esp,0x14
c0024981:	53                   	push   ebx
c0024982:	e8 a5 ff ff ff       	call   c002492c <ATAPI::diskRemoved()>
c0024987:	83 c4 24             	add    esp,0x24
c002498a:	31 c0                	xor    eax,eax
c002498c:	5b                   	pop    ebx
c002498d:	5f                   	pop    edi
c002498e:	c3                   	ret    
c002498f:	90                   	nop

c0024990 <ATAPI::diskInserted()>:
c0024990:	53                   	push   ebx
c0024991:	83 ec 14             	sub    esp,0x14
c0024994:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024998:	68 88 cf 02 c0       	push   0xc002cf88
c002499d:	e8 21 e4 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00249a2:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c00249a9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00249ac:	e8 cb fc fe ff       	call   c001467c <PhysicalDisk::startCache()>
c00249b1:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00249b5:	83 c4 18             	add    esp,0x18
c00249b8:	5b                   	pop    ebx
c00249b9:	e9 ae 1e ff ff       	jmp    c001686c <createPartitionsForDisk(PhysicalDisk*)>

c00249be <ATAPI::detectMedia()>:
c00249be:	56                   	push   esi
c00249bf:	53                   	push   ebx
c00249c0:	83 ec 28             	sub    esp,0x28
c00249c3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00249c7:	6a 0c                	push   0xc
c00249c9:	6a 00                	push   0x0
c00249cb:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00249cf:	56                   	push   esi
c00249d0:	e8 ab bd fd ff       	call   c0000780 <memset>
c00249d5:	58                   	pop    eax
c00249d6:	5a                   	pop    edx
c00249d7:	6a 00                	push   0x0
c00249d9:	6a 00                	push   0x0
c00249db:	6a 00                	push   0x0
c00249dd:	6a 00                	push   0x0
c00249df:	56                   	push   esi
c00249e0:	53                   	push   ebx
c00249e1:	e8 86 fc ff ff       	call   c002466c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00249e6:	83 c4 1c             	add    esp,0x1c
c00249e9:	6a 0c                	push   0xc
c00249eb:	6a 00                	push   0x0
c00249ed:	56                   	push   esi
c00249ee:	e8 8d bd fd ff       	call   c0000780 <memset>
c00249f3:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00249f8:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00249fd:	59                   	pop    ecx
c00249fe:	58                   	pop    eax
c00249ff:	6a 01                	push   0x1
c0024a01:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0024a05:	50                   	push   eax
c0024a06:	6a 00                	push   0x0
c0024a08:	6a 12                	push   0x12
c0024a0a:	56                   	push   esi
c0024a0b:	53                   	push   ebx
c0024a0c:	e8 5b fc ff ff       	call   c002466c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024a11:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024a15:	83 c4 20             	add    esp,0x20
c0024a18:	83 e0 7f             	and    eax,0x7f
c0024a1b:	3c 70                	cmp    al,0x70
c0024a1d:	74 15                	je     c0024a34 <ATAPI::detectMedia()+0x76>
c0024a1f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024a26:	75 0c                	jne    c0024a34 <ATAPI::detectMedia()+0x76>
c0024a28:	83 ec 0c             	sub    esp,0xc
c0024a2b:	53                   	push   ebx
c0024a2c:	e8 5f ff ff ff       	call   c0024990 <ATAPI::diskInserted()>
c0024a31:	83 c4 10             	add    esp,0x10
c0024a34:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024a38:	83 e0 0f             	and    eax,0xf
c0024a3b:	3c 02                	cmp    al,0x2
c0024a3d:	75 1b                	jne    c0024a5a <ATAPI::detectMedia()+0x9c>
c0024a3f:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024a44:	75 2d                	jne    c0024a73 <ATAPI::detectMedia()+0xb5>
c0024a46:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024a4d:	74 24                	je     c0024a73 <ATAPI::detectMedia()+0xb5>
c0024a4f:	83 ec 0c             	sub    esp,0xc
c0024a52:	53                   	push   ebx
c0024a53:	e8 d4 fe ff ff       	call   c002492c <ATAPI::diskRemoved()>
c0024a58:	eb 16                	jmp    c0024a70 <ATAPI::detectMedia()+0xb2>
c0024a5a:	84 c0                	test   al,al
c0024a5c:	75 15                	jne    c0024a73 <ATAPI::detectMedia()+0xb5>
c0024a5e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024a65:	75 0c                	jne    c0024a73 <ATAPI::detectMedia()+0xb5>
c0024a67:	83 ec 0c             	sub    esp,0xc
c0024a6a:	53                   	push   ebx
c0024a6b:	e8 20 ff ff ff       	call   c0024990 <ATAPI::diskInserted()>
c0024a70:	83 c4 10             	add    esp,0x10
c0024a73:	83 c4 24             	add    esp,0x24
c0024a76:	5b                   	pop    ebx
c0024a77:	5e                   	pop    esi
c0024a78:	c3                   	ret    
c0024a79:	90                   	nop

c0024a7a <ATAPI::open(int, int, void*)>:
c0024a7a:	53                   	push   ebx
c0024a7b:	83 ec 08             	sub    esp,0x8
c0024a7e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024a82:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024a86:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024a8a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024a90:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024a96:	c1 e0 06             	shl    eax,0x6
c0024a99:	01 d0                	add    eax,edx
c0024a9b:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024aa2:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024aa8:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024aaf:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024ab9:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024abf:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024ac6:	6a 04                	push   0x4
c0024ac8:	6a 0c                	push   0xc
c0024aca:	51                   	push   ecx
c0024acb:	52                   	push   edx
c0024acc:	e8 15 e5 ff ff       	call   c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ad1:	90                   	nop
c0024ad2:	90                   	nop
c0024ad3:	6a 00                	push   0x0
c0024ad5:	6a 0c                	push   0xc
c0024ad7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024ade:	50                   	push   eax
c0024adf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024ae5:	e8 fc e4 ff ff       	call   c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024aea:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024af1:	83 c4 14             	add    esp,0x14
c0024af4:	53                   	push   ebx
c0024af5:	e8 c4 fe ff ff       	call   c00249be <ATAPI::detectMedia()>
c0024afa:	31 c0                	xor    eax,eax
c0024afc:	83 c4 18             	add    esp,0x18
c0024aff:	5b                   	pop    ebx
c0024b00:	c3                   	ret    
c0024b01:	90                   	nop

c0024b02 <ATAPI::read(unsigned long long, int, void*)>:
c0024b02:	55                   	push   ebp
c0024b03:	57                   	push   edi
c0024b04:	56                   	push   esi
c0024b05:	53                   	push   ebx
c0024b06:	83 ec 1c             	sub    esp,0x1c
c0024b09:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024b0d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024b11:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024b15:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024b1c:	74 41                	je     c0024b5f <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024b1e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024b22:	b9 03 00 00 00       	mov    ecx,0x3
c0024b27:	fc                   	cld    
c0024b28:	31 c0                	xor    eax,eax
c0024b2a:	86 fb                	xchg   bl,bh
c0024b2c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024b2e:	c1 c3 10             	rol    ebx,0x10
c0024b31:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024b36:	89 e8                	mov    eax,ebp
c0024b38:	86 fb                	xchg   bl,bh
c0024b3a:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024b3e:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024b42:	50                   	push   eax
c0024b43:	50                   	push   eax
c0024b44:	55                   	push   ebp
c0024b45:	c1 e5 0b             	shl    ebp,0xb
c0024b48:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024b4c:	6a 00                	push   0x0
c0024b4e:	55                   	push   ebp
c0024b4f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024b53:	50                   	push   eax
c0024b54:	56                   	push   esi
c0024b55:	e8 12 fb ff ff       	call   c002466c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024b5a:	83 c4 20             	add    esp,0x20
c0024b5d:	eb 1a                	jmp    c0024b79 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024b5f:	83 ec 0c             	sub    esp,0xc
c0024b62:	56                   	push   esi
c0024b63:	e8 56 fe ff ff       	call   c00249be <ATAPI::detectMedia()>
c0024b68:	83 c4 10             	add    esp,0x10
c0024b6b:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024b72:	75 aa                	jne    c0024b1e <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024b74:	b8 02 00 00 00       	mov    eax,0x2
c0024b79:	83 c4 1c             	add    esp,0x1c
c0024b7c:	5b                   	pop    ebx
c0024b7d:	5e                   	pop    esi
c0024b7e:	5f                   	pop    edi
c0024b7f:	5d                   	pop    ebp
c0024b80:	c3                   	ret    
c0024b81:	90                   	nop

c0024b82 <SATA::close(int, int, void*)>:
c0024b82:	83 ec 0c             	sub    esp,0xc
c0024b85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b89:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024b8f:	85 c0                	test   eax,eax
c0024b91:	74 0c                	je     c0024b9f <SATA::close(int, int, void*)+0x1d>
c0024b93:	83 ec 0c             	sub    esp,0xc
c0024b96:	8b 10                	mov    edx,DWORD PTR [eax]
c0024b98:	50                   	push   eax
c0024b99:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024b9c:	83 c4 10             	add    esp,0x10
c0024b9f:	31 c0                	xor    eax,eax
c0024ba1:	83 c4 0c             	add    esp,0xc
c0024ba4:	c3                   	ret    
c0024ba5:	90                   	nop

c0024ba6 <SATA::powerSaving(PowerSavingLevel)>:
c0024ba6:	c3                   	ret    
c0024ba7:	90                   	nop

c0024ba8 <SATA::open(int, int, void*)>:
c0024ba8:	56                   	push   esi
c0024ba9:	53                   	push   ebx
c0024baa:	50                   	push   eax
c0024bab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024baf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024bb3:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024bbd:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024bc3:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024bcd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024bd1:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024bdb:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024be1:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024be8:	e8 ca b2 fe ff       	call   c000feb7 <Phys::allocatePage()>
c0024bed:	89 c6                	mov    esi,eax
c0024bef:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024bf5:	81 c6 00 10 00 00    	add    esi,0x1000
c0024bfb:	e8 b7 b2 fe ff       	call   c000feb7 <Phys::allocatePage()>
c0024c00:	39 c6                	cmp    esi,eax
c0024c02:	74 10                	je     c0024c14 <SATA::open(int, int, void*)+0x6c>
c0024c04:	83 ec 0c             	sub    esp,0xc
c0024c07:	68 b0 ce 02 c0       	push   0xc002ceb0
c0024c0c:	e8 f0 58 ff ff       	call   c001a501 <Krnl::panic(char const*)>
c0024c11:	83 c4 10             	add    esp,0x10
c0024c14:	83 ec 0c             	sub    esp,0xc
c0024c17:	6a 02                	push   0x2
c0024c19:	e8 d1 cd fe ff       	call   c00119ef <Virt::allocateKernelVirtualPages(int)>
c0024c1e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024c24:	e8 05 d0 fe ff       	call   c0011c2e <Virt::getAKernelVAS()>
c0024c29:	6a 03                	push   0x3
c0024c2b:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024c31:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024c37:	50                   	push   eax
c0024c38:	e8 df d5 fe ff       	call   c001221c <VAS::mapPage(unsigned long, unsigned long, int)>
c0024c3d:	83 c4 14             	add    esp,0x14
c0024c40:	53                   	push   ebx
c0024c41:	e8 36 fa fe ff       	call   c001467c <PhysicalDisk::startCache()>
c0024c46:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024c49:	e8 1e 1c ff ff       	call   c001686c <createPartitionsForDisk(PhysicalDisk*)>
c0024c4e:	83 c4 14             	add    esp,0x14
c0024c51:	31 c0                	xor    eax,eax
c0024c53:	5b                   	pop    ebx
c0024c54:	5e                   	pop    esi
c0024c55:	c3                   	ret    

c0024c56 <SATA::SATA()>:
c0024c56:	83 ec 0c             	sub    esp,0xc
c0024c59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c5d:	83 ec 04             	sub    esp,0x4
c0024c60:	68 00 02 00 00       	push   0x200
c0024c65:	68 c4 ce 02 c0       	push   0xc002cec4
c0024c6a:	50                   	push   eax
c0024c6b:	e8 a4 f9 fe ff       	call   c0014614 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024c70:	83 c4 10             	add    esp,0x10
c0024c73:	ba 34 cf 02 c0       	mov    edx,0xc002cf34
c0024c78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c7c:	89 10                	mov    DWORD PTR [eax],edx
c0024c7e:	90                   	nop
c0024c7f:	83 c4 0c             	add    esp,0xc
c0024c82:	c3                   	ret    
c0024c83:	90                   	nop

c0024c84 <SATA::access(unsigned long long, int, void*, bool)>:
c0024c84:	55                   	push   ebp
c0024c85:	57                   	push   edi
c0024c86:	56                   	push   esi
c0024c87:	53                   	push   ebx
c0024c88:	83 ec 2c             	sub    esp,0x2c
c0024c8b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024c8f:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0024c93:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024c97:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0024c9b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024c9f:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024ca4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024ca8:	7e 10                	jle    c0024cba <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024caa:	83 ec 0c             	sub    esp,0xc
c0024cad:	68 d4 ce 02 c0       	push   0xc002ced4
c0024cb2:	e8 4a 58 ff ff       	call   c001a501 <Krnl::panic(char const*)>
c0024cb7:	83 c4 10             	add    esp,0x10
c0024cba:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c0024cc0:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024cc6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024ccc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024cd0:	89 f0                	mov    eax,esi
c0024cd2:	c1 e0 07             	shl    eax,0x7
c0024cd5:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024cd9:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024ce3:	53                   	push   ebx
c0024ce4:	8d 46 02             	lea    eax,[esi+0x2]
c0024ce7:	53                   	push   ebx
c0024ce8:	c1 e0 07             	shl    eax,0x7
c0024ceb:	bb 01 00 00 00       	mov    ebx,0x1
c0024cf0:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0024cf4:	50                   	push   eax
c0024cf5:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024cfb:	e8 aa ef ff ff       	call   c0023caa <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024d00:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0024d04:	83 c4 10             	add    esp,0x10
c0024d07:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0024d0c:	0f 84 ce 01 00 00    	je     c0024ee0 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024d12:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024d16:	c1 e0 09             	shl    eax,0x9
c0024d19:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024d1e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024d22:	74 17                	je     c0024d3b <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c0024d24:	51                   	push   ecx
c0024d25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024d29:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0024d2d:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024d33:	e8 14 ba fd ff       	call   c000074c <memcpy>
c0024d38:	83 c4 10             	add    esp,0x10
c0024d3b:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024d41:	8d 46 02             	lea    eax,[esi+0x2]
c0024d44:	c1 e0 07             	shl    eax,0x7
c0024d47:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024d4b:	8b 00                	mov    eax,DWORD PTR [eax]
c0024d4d:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024d53:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024d59:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024d5d:	c1 e1 05             	shl    ecx,0x5
c0024d60:	01 c8                	add    eax,ecx
c0024d62:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024d66:	8a 18                	mov    bl,BYTE PTR [eax]
c0024d68:	83 e1 01             	and    ecx,0x1
c0024d6b:	83 e3 bf             	and    ebx,0xffffffbf
c0024d6e:	c1 e1 06             	shl    ecx,0x6
c0024d71:	09 d9                	or     ecx,ebx
c0024d73:	88 08                	mov    BYTE PTR [eax],cl
c0024d75:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024d77:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024d7d:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024d83:	89 08                	mov    DWORD PTR [eax],ecx
c0024d85:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024d8b:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024d91:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024d97:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024d9a:	52                   	push   edx
c0024d9b:	68 90 00 00 00       	push   0x90
c0024da0:	6a 00                	push   0x0
c0024da2:	53                   	push   ebx
c0024da3:	e8 d8 b9 fd ff       	call   c0000780 <memset>
c0024da8:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c0024dae:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c0024db2:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024db8:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024dbc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024dc0:	83 c4 10             	add    esp,0x10
c0024dc3:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024dc6:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024dcc:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024dd2:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024dd7:	09 c8                	or     eax,ecx
c0024dd9:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024ddf:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024de2:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024de9:	66 25 00 7f          	and    ax,0x7f00
c0024ded:	66 0d 27 80          	or     ax,0x8027
c0024df1:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c0024df6:	66 89 03             	mov    WORD PTR [ebx],ax
c0024df9:	19 c0                	sbb    eax,eax
c0024dfb:	83 e0 f0             	and    eax,0xfffffff0
c0024dfe:	83 c0 35             	add    eax,0x35
c0024e01:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0024e04:	89 f8                	mov    eax,edi
c0024e06:	c1 e8 10             	shr    eax,0x10
c0024e09:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024e0c:	89 f8                	mov    eax,edi
c0024e0e:	c1 e8 18             	shr    eax,0x18
c0024e11:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0024e14:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024e18:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024e1b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024e1f:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024e22:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024e26:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024e2a:	89 f3                	mov    ebx,esi
c0024e2c:	31 c0                	xor    eax,eax
c0024e2e:	c1 e3 07             	shl    ebx,0x7
c0024e31:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0024e35:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0024e3b:	80 e1 88             	and    cl,0x88
c0024e3e:	74 0a                	je     c0024e4a <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c0024e40:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024e45:	74 0a                	je     c0024e51 <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c0024e47:	40                   	inc    eax
c0024e48:	eb eb                	jmp    c0024e35 <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c0024e4a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024e4f:	75 0a                	jne    c0024e5b <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c0024e51:	83 ec 0c             	sub    esp,0xc
c0024e54:	68 0d cf 02 c0       	push   0xc002cf0d
c0024e59:	eb 56                	jmp    c0024eb1 <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c0024e5b:	b8 01 00 00 00       	mov    eax,0x1
c0024e60:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c0024e64:	c1 e6 07             	shl    esi,0x7
c0024e67:	d3 e0                	shl    eax,cl
c0024e69:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0024e6d:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0024e73:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c0024e79:	85 c8                	test   eax,ecx
c0024e7b:	74 20                	je     c0024e9d <SATA::access(unsigned long long, int, void*, bool)+0x219>
c0024e7d:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c0024e83:	0f ba e1 1e          	bt     ecx,0x1e
c0024e87:	73 ea                	jae    c0024e73 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c0024e89:	83 ec 0c             	sub    esp,0xc
c0024e8c:	31 db                	xor    ebx,ebx
c0024e8e:	68 1b cf 02 c0       	push   0xc002cf1b
c0024e93:	e8 69 56 ff ff       	call   c001a501 <Krnl::panic(char const*)>
c0024e98:	83 c4 10             	add    esp,0x10
c0024e9b:	eb 43                	jmp    c0024ee0 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024e9d:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c0024ea3:	0f ba e0 1e          	bt     eax,0x1e
c0024ea7:	73 17                	jae    c0024ec0 <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0024ea9:	83 ec 0c             	sub    esp,0xc
c0024eac:	68 1b cf 02 c0       	push   0xc002cf1b
c0024eb1:	e8 4b 56 ff ff       	call   c001a501 <Krnl::panic(char const*)>
c0024eb6:	bb 01 00 00 00       	mov    ebx,0x1
c0024ebb:	83 c4 10             	add    esp,0x10
c0024ebe:	eb 20                	jmp    c0024ee0 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024ec0:	31 db                	xor    ebx,ebx
c0024ec2:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024ec7:	75 17                	jne    c0024ee0 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024ec9:	50                   	push   eax
c0024eca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024ece:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024ed4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0024ed8:	e8 6f b8 fd ff       	call   c000074c <memcpy>
c0024edd:	83 c4 10             	add    esp,0x10
c0024ee0:	83 c4 2c             	add    esp,0x2c
c0024ee3:	89 d8                	mov    eax,ebx
c0024ee5:	5b                   	pop    ebx
c0024ee6:	5e                   	pop    esi
c0024ee7:	5f                   	pop    edi
c0024ee8:	5d                   	pop    ebp
c0024ee9:	c3                   	ret    

c0024eea <SATA::read(unsigned long long, int, void*)>:
c0024eea:	57                   	push   edi
c0024eeb:	b8 04 00 00 00       	mov    eax,0x4
c0024ef0:	56                   	push   esi
c0024ef1:	53                   	push   ebx
c0024ef2:	83 ec 10             	sub    esp,0x10
c0024ef5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024ef9:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024efd:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024f00:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024f04:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024f08:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024f0e:	77 3b                	ja     c0024f4b <SATA::read(unsigned long long, int, void*)+0x61>
c0024f10:	b8 06 00 00 00       	mov    eax,0x6
c0024f15:	85 d2                	test   edx,edx
c0024f17:	74 32                	je     c0024f4b <SATA::read(unsigned long long, int, void*)+0x61>
c0024f19:	50                   	push   eax
c0024f1a:	50                   	push   eax
c0024f1b:	6a 00                	push   0x0
c0024f1d:	52                   	push   edx
c0024f1e:	53                   	push   ebx
c0024f1f:	57                   	push   edi
c0024f20:	56                   	push   esi
c0024f21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024f25:	e8 5a fd ff ff       	call   c0024c84 <SATA::access(unsigned long long, int, void*, bool)>
c0024f2a:	83 c4 20             	add    esp,0x20
c0024f2d:	85 c0                	test   eax,eax
c0024f2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024f33:	75 11                	jne    c0024f46 <SATA::read(unsigned long long, int, void*)+0x5c>
c0024f35:	01 1d c8 27 03 c0    	add    DWORD PTR ds:0xc00327c8,ebx
c0024f3b:	e8 b8 b9 fe ff       	call   c00108f8 <VgaText::updateDiskUsage()>
c0024f40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024f44:	eb 05                	jmp    c0024f4b <SATA::read(unsigned long long, int, void*)+0x61>
c0024f46:	b8 01 00 00 00       	mov    eax,0x1
c0024f4b:	83 c4 10             	add    esp,0x10
c0024f4e:	5b                   	pop    ebx
c0024f4f:	5e                   	pop    esi
c0024f50:	5f                   	pop    edi
c0024f51:	c3                   	ret    

c0024f52 <SATA::write(unsigned long long, int, void*)>:
c0024f52:	55                   	push   ebp
c0024f53:	b8 04 00 00 00       	mov    eax,0x4
c0024f58:	57                   	push   edi
c0024f59:	56                   	push   esi
c0024f5a:	53                   	push   ebx
c0024f5b:	83 ec 1c             	sub    esp,0x1c
c0024f5e:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024f62:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0024f66:	8d 75 ff             	lea    esi,[ebp-0x1]
c0024f69:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0024f6d:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0024f71:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024f77:	77 56                	ja     c0024fcf <SATA::write(unsigned long long, int, void*)+0x7d>
c0024f79:	b8 06 00 00 00       	mov    eax,0x6
c0024f7e:	85 ff                	test   edi,edi
c0024f80:	74 4d                	je     c0024fcf <SATA::write(unsigned long long, int, void*)+0x7d>
c0024f82:	89 ee                	mov    esi,ebp
c0024f84:	c1 e6 09             	shl    esi,0x9
c0024f87:	01 fe                	add    esi,edi
c0024f89:	89 c8                	mov    eax,ecx
c0024f8b:	89 da                	mov    edx,ebx
c0024f8d:	83 c0 01             	add    eax,0x1
c0024f90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024f94:	83 d2 00             	adc    edx,0x0
c0024f97:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0024f9b:	50                   	push   eax
c0024f9c:	50                   	push   eax
c0024f9d:	6a 01                	push   0x1
c0024f9f:	57                   	push   edi
c0024fa0:	81 c7 00 02 00 00    	add    edi,0x200
c0024fa6:	6a 01                	push   0x1
c0024fa8:	53                   	push   ebx
c0024fa9:	51                   	push   ecx
c0024faa:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024fae:	e8 d1 fc ff ff       	call   c0024c84 <SATA::access(unsigned long long, int, void*, bool)>
c0024fb3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024fb7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024fbb:	83 c4 20             	add    esp,0x20
c0024fbe:	39 f7                	cmp    edi,esi
c0024fc0:	75 c7                	jne    c0024f89 <SATA::write(unsigned long long, int, void*)+0x37>
c0024fc2:	01 2d c4 27 03 c0    	add    DWORD PTR ds:0xc00327c4,ebp
c0024fc8:	e8 2b b9 fe ff       	call   c00108f8 <VgaText::updateDiskUsage()>
c0024fcd:	31 c0                	xor    eax,eax
c0024fcf:	83 c4 1c             	add    esp,0x1c
c0024fd2:	5b                   	pop    ebx
c0024fd3:	5e                   	pop    esi
c0024fd4:	5f                   	pop    edi
c0024fd5:	5d                   	pop    ebp
c0024fd6:	c3                   	ret    
c0024fd7:	90                   	nop

c0024fd8 <SATAPI::write(unsigned long long, int, void*)>:
c0024fd8:	b8 03 00 00 00       	mov    eax,0x3
c0024fdd:	c3                   	ret    

c0024fde <SATAPI::close(int, int, void*)>:
c0024fde:	83 ec 0c             	sub    esp,0xc
c0024fe1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fe5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024feb:	85 c0                	test   eax,eax
c0024fed:	74 0c                	je     c0024ffb <SATAPI::close(int, int, void*)+0x1d>
c0024fef:	83 ec 0c             	sub    esp,0xc
c0024ff2:	8b 10                	mov    edx,DWORD PTR [eax]
c0024ff4:	50                   	push   eax
c0024ff5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024ff8:	83 c4 10             	add    esp,0x10
c0024ffb:	31 c0                	xor    eax,eax
c0024ffd:	83 c4 0c             	add    esp,0xc
c0025000:	c3                   	ret    
c0025001:	90                   	nop

c0025002 <SATAPI::SATAPI()>:
c0025002:	83 ec 0c             	sub    esp,0xc
c0025005:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025009:	83 ec 04             	sub    esp,0x4
c002500c:	68 00 08 00 00       	push   0x800
c0025011:	68 64 cf 02 c0       	push   0xc002cf64
c0025016:	50                   	push   eax
c0025017:	e8 f8 f5 fe ff       	call   c0014614 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002501c:	83 c4 10             	add    esp,0x10
c002501f:	ba 10 d0 02 c0       	mov    edx,0xc002d010
c0025024:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025028:	89 10                	mov    DWORD PTR [eax],edx
c002502a:	90                   	nop
c002502b:	83 c4 0c             	add    esp,0xc
c002502e:	c3                   	ret    
c002502f:	90                   	nop

c0025030 <SATAPI::diskRemoved()>:
c0025030:	83 ec 18             	sub    esp,0x18
c0025033:	68 70 cf 02 c0       	push   0xc002cf70
c0025038:	e8 86 dd fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c002503d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025041:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0025048:	83 c4 1c             	add    esp,0x1c
c002504b:	c3                   	ret    

c002504c <SATAPI::diskInserted()>:
c002504c:	53                   	push   ebx
c002504d:	83 ec 14             	sub    esp,0x14
c0025050:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025054:	68 87 cf 02 c0       	push   0xc002cf87
c0025059:	e8 65 dd fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c002505e:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0025065:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025068:	e8 0f f6 fe ff       	call   c001467c <PhysicalDisk::startCache()>
c002506d:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0025071:	83 c4 18             	add    esp,0x18
c0025074:	5b                   	pop    ebx
c0025075:	e9 f2 17 ff ff       	jmp    c001686c <createPartitionsForDisk(PhysicalDisk*)>

c002507a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c002507a:	55                   	push   ebp
c002507b:	57                   	push   edi
c002507c:	56                   	push   esi
c002507d:	53                   	push   ebx
c002507e:	83 ec 24             	sub    esp,0x24
c0025081:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025085:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025089:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c002508f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025093:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0025097:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c002509d:	8d 5f 02             	lea    ebx,[edi+0x2]
c00250a0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00250a6:	c1 e3 07             	shl    ebx,0x7
c00250a9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00250ad:	89 f8                	mov    eax,edi
c00250af:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00250b3:	c1 e0 07             	shl    eax,0x7
c00250b6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00250ba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00250be:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00250c8:	53                   	push   ebx
c00250c9:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c00250cf:	e8 d6 eb ff ff       	call   c0023caa <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00250d4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00250d8:	83 c4 10             	add    esp,0x10
c00250db:	b8 01 00 00 00       	mov    eax,0x1
c00250e0:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00250e5:	0f 84 8a 01 00 00    	je     c0025275 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c00250eb:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c00250f1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00250f3:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00250f9:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00250ff:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0025103:	c1 e1 05             	shl    ecx,0x5
c0025106:	01 c8                	add    eax,ecx
c0025108:	8b 08                	mov    ecx,DWORD PTR [eax]
c002510a:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0025110:	81 c9 25 00 01 00    	or     ecx,0x10025
c0025116:	89 08                	mov    DWORD PTR [eax],ecx
c0025118:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c002511e:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0025124:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c002512a:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c002512d:	52                   	push   edx
c002512e:	68 90 00 00 00       	push   0x90
c0025133:	6a 00                	push   0x0
c0025135:	53                   	push   ebx
c0025136:	e8 45 b6 fd ff       	call   c0000780 <memset>
c002513b:	83 c4 0c             	add    esp,0xc
c002513e:	8d 43 40             	lea    eax,[ebx+0x40]
c0025141:	6a 0c                	push   0xc
c0025143:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025147:	50                   	push   eax
c0025148:	e8 ff b5 fd ff       	call   c000074c <memcpy>
c002514d:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c0025153:	89 ea                	mov    edx,ebp
c0025155:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c002515b:	c1 ea 18             	shr    edx,0x18
c002515e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025162:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0025165:	8d 48 ff             	lea    ecx,[eax-0x1]
c0025168:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c002516c:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0025172:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0025178:	25 00 00 c0 ff       	and    eax,0xffc00000
c002517d:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c0025181:	09 c8                	or     eax,ecx
c0025183:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0025187:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c002518d:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0025190:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0025197:	66 25 00 7f          	and    ax,0x7f00
c002519b:	66 0d 27 80          	or     ax,0x8027
c002519f:	66 89 03             	mov    WORD PTR [ebx],ax
c00251a2:	89 e8                	mov    eax,ebp
c00251a4:	c1 e8 10             	shr    eax,0x10
c00251a7:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00251aa:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00251ae:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c00251b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00251b5:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c00251b8:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00251bc:	83 c4 10             	add    esp,0x10
c00251bf:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c00251c3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00251c7:	31 c0                	xor    eax,eax
c00251c9:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c00251cf:	80 e1 88             	and    cl,0x88
c00251d2:	74 0a                	je     c00251de <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c00251d4:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00251d9:	74 0a                	je     c00251e5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c00251db:	40                   	inc    eax
c00251dc:	eb eb                	jmp    c00251c9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c00251de:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00251e3:	75 0f                	jne    c00251f4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c00251e5:	83 ec 0c             	sub    esp,0xc
c00251e8:	68 0d cf 02 c0       	push   0xc002cf0d
c00251ed:	e8 0f 53 ff ff       	call   c001a501 <Krnl::panic(char const*)>
c00251f2:	eb 3a                	jmp    c002522e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c00251f4:	b8 01 00 00 00       	mov    eax,0x1
c00251f9:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00251fd:	c1 e7 07             	shl    edi,0x7
c0025200:	d3 e0                	shl    eax,cl
c0025202:	03 3c 24             	add    edi,DWORD PTR [esp]
c0025205:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c002520b:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c0025211:	85 d0                	test   eax,edx
c0025213:	74 23                	je     c0025238 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c0025215:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c002521b:	0f ba e2 1e          	bt     edx,0x1e
c002521f:	73 ea                	jae    c002520b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c0025221:	83 ec 0c             	sub    esp,0xc
c0025224:	68 9f cf 02 c0       	push   0xc002cf9f
c0025229:	e8 95 db fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c002522e:	83 c4 10             	add    esp,0x10
c0025231:	b8 01 00 00 00       	mov    eax,0x1
c0025236:	eb 3d                	jmp    c0025275 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0025238:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c002523e:	0f ba e0 1e          	bt     eax,0x1e
c0025242:	73 0a                	jae    c002524e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c0025244:	83 ec 0c             	sub    esp,0xc
c0025247:	68 b2 cf 02 c0       	push   0xc002cfb2
c002524c:	eb db                	jmp    c0025229 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c002524e:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0025253:	74 1e                	je     c0025273 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0025255:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c002525a:	74 17                	je     c0025273 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c002525c:	50                   	push   eax
c002525d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025261:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c0025267:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c002526b:	e8 dc b4 fd ff       	call   c000074c <memcpy>
c0025270:	83 c4 10             	add    esp,0x10
c0025273:	31 c0                	xor    eax,eax
c0025275:	83 c4 1c             	add    esp,0x1c
c0025278:	5b                   	pop    ebx
c0025279:	5e                   	pop    esi
c002527a:	5f                   	pop    edi
c002527b:	5d                   	pop    ebp
c002527c:	c3                   	ret    
c002527d:	90                   	nop

c002527e <SATAPI::eject()>:
c002527e:	57                   	push   edi
c002527f:	b9 03 00 00 00       	mov    ecx,0x3
c0025284:	53                   	push   ebx
c0025285:	83 ec 14             	sub    esp,0x14
c0025288:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002528c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025290:	fc                   	cld    
c0025291:	31 c0                	xor    eax,eax
c0025293:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025295:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002529a:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002529f:	50                   	push   eax
c00252a0:	6a 00                	push   0x0
c00252a2:	6a 00                	push   0x0
c00252a4:	6a 00                	push   0x0
c00252a6:	6a 00                	push   0x0
c00252a8:	6a 02                	push   0x2
c00252aa:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00252ae:	50                   	push   eax
c00252af:	53                   	push   ebx
c00252b0:	e8 c5 fd ff ff       	call   c002507a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00252b5:	83 c4 14             	add    esp,0x14
c00252b8:	53                   	push   ebx
c00252b9:	e8 72 fd ff ff       	call   c0025030 <SATAPI::diskRemoved()>
c00252be:	83 c4 24             	add    esp,0x24
c00252c1:	31 c0                	xor    eax,eax
c00252c3:	5b                   	pop    ebx
c00252c4:	5f                   	pop    edi
c00252c5:	c3                   	ret    

c00252c6 <SATAPI::detectMedia()>:
c00252c6:	56                   	push   esi
c00252c7:	53                   	push   ebx
c00252c8:	83 ec 28             	sub    esp,0x28
c00252cb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00252cf:	6a 0c                	push   0xc
c00252d1:	6a 00                	push   0x0
c00252d3:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00252d7:	56                   	push   esi
c00252d8:	e8 a3 b4 fd ff       	call   c0000780 <memset>
c00252dd:	83 c4 0c             	add    esp,0xc
c00252e0:	6a 00                	push   0x0
c00252e2:	6a 00                	push   0x0
c00252e4:	6a 00                	push   0x0
c00252e6:	6a 00                	push   0x0
c00252e8:	6a 00                	push   0x0
c00252ea:	56                   	push   esi
c00252eb:	53                   	push   ebx
c00252ec:	e8 89 fd ff ff       	call   c002507a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00252f1:	83 c4 1c             	add    esp,0x1c
c00252f4:	6a 0c                	push   0xc
c00252f6:	6a 00                	push   0x0
c00252f8:	56                   	push   esi
c00252f9:	e8 82 b4 fd ff       	call   c0000780 <memset>
c00252fe:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025303:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025308:	83 c4 0c             	add    esp,0xc
c002530b:	6a 01                	push   0x1
c002530d:	8d 44 24 16          	lea    eax,[esp+0x16]
c0025311:	50                   	push   eax
c0025312:	6a 00                	push   0x0
c0025314:	6a 00                	push   0x0
c0025316:	6a 12                	push   0x12
c0025318:	56                   	push   esi
c0025319:	53                   	push   ebx
c002531a:	e8 5b fd ff ff       	call   c002507a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002531f:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025323:	83 c4 20             	add    esp,0x20
c0025326:	83 e0 7f             	and    eax,0x7f
c0025329:	3c 70                	cmp    al,0x70
c002532b:	74 15                	je     c0025342 <SATAPI::detectMedia()+0x7c>
c002532d:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025334:	75 0c                	jne    c0025342 <SATAPI::detectMedia()+0x7c>
c0025336:	83 ec 0c             	sub    esp,0xc
c0025339:	53                   	push   ebx
c002533a:	e8 0d fd ff ff       	call   c002504c <SATAPI::diskInserted()>
c002533f:	83 c4 10             	add    esp,0x10
c0025342:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025346:	83 e0 0f             	and    eax,0xf
c0025349:	3c 02                	cmp    al,0x2
c002534b:	75 1b                	jne    c0025368 <SATAPI::detectMedia()+0xa2>
c002534d:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025352:	75 2d                	jne    c0025381 <SATAPI::detectMedia()+0xbb>
c0025354:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002535b:	74 24                	je     c0025381 <SATAPI::detectMedia()+0xbb>
c002535d:	83 ec 0c             	sub    esp,0xc
c0025360:	53                   	push   ebx
c0025361:	e8 ca fc ff ff       	call   c0025030 <SATAPI::diskRemoved()>
c0025366:	eb 16                	jmp    c002537e <SATAPI::detectMedia()+0xb8>
c0025368:	84 c0                	test   al,al
c002536a:	75 15                	jne    c0025381 <SATAPI::detectMedia()+0xbb>
c002536c:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025373:	75 0c                	jne    c0025381 <SATAPI::detectMedia()+0xbb>
c0025375:	83 ec 0c             	sub    esp,0xc
c0025378:	53                   	push   ebx
c0025379:	e8 ce fc ff ff       	call   c002504c <SATAPI::diskInserted()>
c002537e:	83 c4 10             	add    esp,0x10
c0025381:	83 c4 24             	add    esp,0x24
c0025384:	5b                   	pop    ebx
c0025385:	5e                   	pop    esi
c0025386:	c3                   	ret    
c0025387:	90                   	nop

c0025388 <SATAPI::open(int, int, void*)>:
c0025388:	56                   	push   esi
c0025389:	53                   	push   ebx
c002538a:	50                   	push   eax
c002538b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002538f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025393:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002539d:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00253a3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00253ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00253b1:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00253bb:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00253c1:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00253c8:	e8 ea aa fe ff       	call   c000feb7 <Phys::allocatePage()>
c00253cd:	89 c6                	mov    esi,eax
c00253cf:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00253d5:	81 c6 00 10 00 00    	add    esi,0x1000
c00253db:	e8 d7 aa fe ff       	call   c000feb7 <Phys::allocatePage()>
c00253e0:	39 c6                	cmp    esi,eax
c00253e2:	74 10                	je     c00253f4 <SATAPI::open(int, int, void*)+0x6c>
c00253e4:	83 ec 0c             	sub    esp,0xc
c00253e7:	68 c7 cf 02 c0       	push   0xc002cfc7
c00253ec:	e8 10 51 ff ff       	call   c001a501 <Krnl::panic(char const*)>
c00253f1:	83 c4 10             	add    esp,0x10
c00253f4:	83 ec 0c             	sub    esp,0xc
c00253f7:	6a 02                	push   0x2
c00253f9:	e8 f1 c5 fe ff       	call   c00119ef <Virt::allocateKernelVirtualPages(int)>
c00253fe:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025404:	e8 25 c8 fe ff       	call   c0011c2e <Virt::getAKernelVAS()>
c0025409:	6a 03                	push   0x3
c002540b:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0025411:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025417:	50                   	push   eax
c0025418:	e8 ff cd fe ff       	call   c001221c <VAS::mapPage(unsigned long, unsigned long, int)>
c002541d:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025424:	83 c4 14             	add    esp,0x14
c0025427:	53                   	push   ebx
c0025428:	e8 99 fe ff ff       	call   c00252c6 <SATAPI::detectMedia()>
c002542d:	83 c4 14             	add    esp,0x14
c0025430:	31 c0                	xor    eax,eax
c0025432:	5b                   	pop    ebx
c0025433:	5e                   	pop    esi
c0025434:	c3                   	ret    
c0025435:	90                   	nop

c0025436 <SATAPI::read(unsigned long long, int, void*)>:
c0025436:	55                   	push   ebp
c0025437:	57                   	push   edi
c0025438:	56                   	push   esi
c0025439:	53                   	push   ebx
c002543a:	83 ec 1c             	sub    esp,0x1c
c002543d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025441:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025445:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025449:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025450:	74 19                	je     c002546b <SATAPI::read(unsigned long long, int, void*)+0x35>
c0025452:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025457:	7e 2e                	jle    c0025487 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025459:	83 ec 0c             	sub    esp,0xc
c002545c:	68 dd cf 02 c0       	push   0xc002cfdd
c0025461:	e8 9b 50 ff ff       	call   c001a501 <Krnl::panic(char const*)>
c0025466:	83 c4 10             	add    esp,0x10
c0025469:	eb 1c                	jmp    c0025487 <SATAPI::read(unsigned long long, int, void*)+0x51>
c002546b:	83 ec 0c             	sub    esp,0xc
c002546e:	55                   	push   ebp
c002546f:	e8 52 fe ff ff       	call   c00252c6 <SATAPI::detectMedia()>
c0025474:	83 c4 10             	add    esp,0x10
c0025477:	b8 02 00 00 00       	mov    eax,0x2
c002547c:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025483:	75 cd                	jne    c0025452 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025485:	eb 49                	jmp    c00254d0 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025487:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002548b:	b9 03 00 00 00       	mov    ecx,0x3
c0025490:	fc                   	cld    
c0025491:	31 c0                	xor    eax,eax
c0025493:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025495:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002549a:	89 d8                	mov    eax,ebx
c002549c:	86 e0                	xchg   al,ah
c002549e:	c1 c0 10             	rol    eax,0x10
c00254a1:	86 e0                	xchg   al,ah
c00254a3:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c00254a7:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c00254ab:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00254af:	50                   	push   eax
c00254b0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00254b4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00254b8:	56                   	push   esi
c00254b9:	53                   	push   ebx
c00254ba:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00254be:	c1 e0 0b             	shl    eax,0xb
c00254c1:	50                   	push   eax
c00254c2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00254c6:	50                   	push   eax
c00254c7:	55                   	push   ebp
c00254c8:	e8 ad fb ff ff       	call   c002507a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00254cd:	83 c4 20             	add    esp,0x20
c00254d0:	83 c4 1c             	add    esp,0x1c
c00254d3:	5b                   	pop    ebx
c00254d4:	5e                   	pop    esi
c00254d5:	5f                   	pop    edi
c00254d6:	5d                   	pop    ebp
c00254d7:	c3                   	ret    

c00254d8 <AVX::open(int, int, void*)>:
c00254d8:	83 ec 0c             	sub    esp,0xc
c00254db:	e8 48 11 00 00       	call   c0026628 <avxInit>
c00254e0:	b8 00 00 00 00       	mov    eax,0x0
c00254e5:	83 c4 0c             	add    esp,0xc
c00254e8:	c3                   	ret    
c00254e9:	90                   	nop

c00254ea <AVX::close(int, int, void*)>:
c00254ea:	83 ec 0c             	sub    esp,0xc
c00254ed:	e8 37 11 00 00       	call   c0026629 <avxClose>
c00254f2:	b8 00 00 00 00       	mov    eax,0x0
c00254f7:	83 c4 0c             	add    esp,0xc
c00254fa:	c3                   	ret    
c00254fb:	90                   	nop

c00254fc <AVX::available()>:
c00254fc:	83 ec 0c             	sub    esp,0xc
c00254ff:	e8 1c 11 00 00       	call   c0026620 <avxDetect>
c0025504:	85 c0                	test   eax,eax
c0025506:	0f 95 c0             	setne  al
c0025509:	83 c4 0c             	add    esp,0xc
c002550c:	c3                   	ret    
c002550d:	90                   	nop

c002550e <AVX::save(void*)>:
c002550e:	83 ec 0c             	sub    esp,0xc
c0025511:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025515:	83 ec 0c             	sub    esp,0xc
c0025518:	50                   	push   eax
c0025519:	e8 08 11 00 00       	call   c0026626 <avxSave>
c002551e:	83 c4 10             	add    esp,0x10
c0025521:	90                   	nop
c0025522:	83 c4 0c             	add    esp,0xc
c0025525:	c3                   	ret    

c0025526 <AVX::load(void*)>:
c0025526:	83 ec 0c             	sub    esp,0xc
c0025529:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002552d:	83 ec 0c             	sub    esp,0xc
c0025530:	50                   	push   eax
c0025531:	e8 f1 10 00 00       	call   c0026627 <avxLoad>
c0025536:	83 c4 10             	add    esp,0x10
c0025539:	90                   	nop
c002553a:	83 c4 0c             	add    esp,0xc
c002553d:	c3                   	ret    

c002553e <AVX::AVX()>:
c002553e:	83 ec 0c             	sub    esp,0xc
c0025541:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025545:	83 ec 08             	sub    esp,0x8
c0025548:	68 40 d0 02 c0       	push   0xc002d040
c002554d:	50                   	push   eax
c002554e:	e8 9f f1 fe ff       	call   c00146f2 <FPU::FPU(char const*)>
c0025553:	83 c4 10             	add    esp,0x10
c0025556:	ba 50 d0 02 c0       	mov    edx,0xc002d050
c002555b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002555f:	89 10                	mov    DWORD PTR [eax],edx
c0025561:	90                   	nop
c0025562:	83 c4 0c             	add    esp,0xc
c0025565:	c3                   	ret    

c0025566 <MMX::available()>:
c0025566:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c002556b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025571:	83 e0 20             	and    eax,0x20
c0025574:	84 c0                	test   al,al
c0025576:	0f 95 c0             	setne  al
c0025579:	c3                   	ret    

c002557a <MMX::open(int, int, void*)>:
c002557a:	83 ec 0c             	sub    esp,0xc
c002557d:	e8 30 11 00 00       	call   c00266b2 <x87Init>
c0025582:	b8 00 00 00 00       	mov    eax,0x0
c0025587:	83 c4 0c             	add    esp,0xc
c002558a:	c3                   	ret    
c002558b:	90                   	nop

c002558c <MMX::close(int, int, void*)>:
c002558c:	83 ec 0c             	sub    esp,0xc
c002558f:	e8 38 11 00 00       	call   c00266cc <x87Close>
c0025594:	b8 00 00 00 00       	mov    eax,0x0
c0025599:	83 c4 0c             	add    esp,0xc
c002559c:	c3                   	ret    
c002559d:	90                   	nop

c002559e <MMX::save(void*)>:
c002559e:	83 ec 0c             	sub    esp,0xc
c00255a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00255a5:	83 ec 0c             	sub    esp,0xc
c00255a8:	50                   	push   eax
c00255a9:	e8 f3 10 00 00       	call   c00266a1 <x87Save>
c00255ae:	83 c4 10             	add    esp,0x10
c00255b1:	90                   	nop
c00255b2:	83 c4 0c             	add    esp,0xc
c00255b5:	c3                   	ret    

c00255b6 <MMX::load(void*)>:
c00255b6:	83 ec 0c             	sub    esp,0xc
c00255b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00255bd:	83 ec 0c             	sub    esp,0xc
c00255c0:	50                   	push   eax
c00255c1:	e8 e4 10 00 00       	call   c00266aa <x87Load>
c00255c6:	83 c4 10             	add    esp,0x10
c00255c9:	90                   	nop
c00255ca:	83 c4 0c             	add    esp,0xc
c00255cd:	c3                   	ret    

c00255ce <MMX::MMX()>:
c00255ce:	83 ec 0c             	sub    esp,0xc
c00255d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255d5:	83 ec 08             	sub    esp,0x8
c00255d8:	68 80 d0 02 c0       	push   0xc002d080
c00255dd:	50                   	push   eax
c00255de:	e8 0f f1 fe ff       	call   c00146f2 <FPU::FPU(char const*)>
c00255e3:	83 c4 10             	add    esp,0x10
c00255e6:	ba 90 d0 02 c0       	mov    edx,0xc002d090
c00255eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255ef:	89 10                	mov    DWORD PTR [eax],edx
c00255f1:	90                   	nop
c00255f2:	83 c4 0c             	add    esp,0xc
c00255f5:	c3                   	ret    

c00255f6 <SSE::open(int, int, void*)>:
c00255f6:	83 ec 0c             	sub    esp,0xc
c00255f9:	e8 66 10 00 00       	call   c0026664 <sseInit>
c00255fe:	b8 00 00 00 00       	mov    eax,0x0
c0025603:	83 c4 0c             	add    esp,0xc
c0025606:	c3                   	ret    
c0025607:	90                   	nop

c0025608 <SSE::close(int, int, void*)>:
c0025608:	83 ec 0c             	sub    esp,0xc
c002560b:	e8 64 10 00 00       	call   c0026674 <sseClose>
c0025610:	b8 00 00 00 00       	mov    eax,0x0
c0025615:	83 c4 0c             	add    esp,0xc
c0025618:	c3                   	ret    
c0025619:	90                   	nop

c002561a <SSE::available()>:
c002561a:	83 ec 1c             	sub    esp,0x1c
c002561d:	e8 1e 10 00 00       	call   c0026640 <absolutelyNoChanceInHell>
c0025622:	85 c0                	test   eax,eax
c0025624:	0f 95 c0             	setne  al
c0025627:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002562b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002562f:	83 c4 1c             	add    esp,0x1c
c0025632:	c3                   	ret    
c0025633:	90                   	nop

c0025634 <SSE::save(void*)>:
c0025634:	83 ec 0c             	sub    esp,0xc
c0025637:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002563b:	83 ec 0c             	sub    esp,0xc
c002563e:	50                   	push   eax
c002563f:	e8 14 10 00 00       	call   c0026658 <sseSave>
c0025644:	83 c4 10             	add    esp,0x10
c0025647:	90                   	nop
c0025648:	83 c4 0c             	add    esp,0xc
c002564b:	c3                   	ret    

c002564c <SSE::load(void*)>:
c002564c:	83 ec 0c             	sub    esp,0xc
c002564f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025653:	83 ec 0c             	sub    esp,0xc
c0025656:	50                   	push   eax
c0025657:	e8 02 10 00 00       	call   c002665e <sseLoad>
c002565c:	83 c4 10             	add    esp,0x10
c002565f:	90                   	nop
c0025660:	83 c4 0c             	add    esp,0xc
c0025663:	c3                   	ret    

c0025664 <SSE::SSE()>:
c0025664:	83 ec 0c             	sub    esp,0xc
c0025667:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002566b:	83 ec 08             	sub    esp,0x8
c002566e:	68 c0 d0 02 c0       	push   0xc002d0c0
c0025673:	50                   	push   eax
c0025674:	e8 79 f0 fe ff       	call   c00146f2 <FPU::FPU(char const*)>
c0025679:	83 c4 10             	add    esp,0x10
c002567c:	ba d0 d0 02 c0       	mov    edx,0xc002d0d0
c0025681:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025685:	89 10                	mov    DWORD PTR [eax],edx
c0025687:	90                   	nop
c0025688:	83 c4 0c             	add    esp,0xc
c002568b:	c3                   	ret    

c002568c <x87::open(int, int, void*)>:
c002568c:	83 ec 0c             	sub    esp,0xc
c002568f:	e8 1e 10 00 00       	call   c00266b2 <x87Init>
c0025694:	b8 00 00 00 00       	mov    eax,0x0
c0025699:	83 c4 0c             	add    esp,0xc
c002569c:	c3                   	ret    
c002569d:	90                   	nop

c002569e <x87::close(int, int, void*)>:
c002569e:	83 ec 0c             	sub    esp,0xc
c00256a1:	e8 26 10 00 00       	call   c00266cc <x87Close>
c00256a6:	b8 00 00 00 00       	mov    eax,0x0
c00256ab:	83 c4 0c             	add    esp,0xc
c00256ae:	c3                   	ret    
c00256af:	90                   	nop

c00256b0 <x87::available()>:
c00256b0:	83 ec 0c             	sub    esp,0xc
c00256b3:	e8 ce 0f 00 00       	call   c0026686 <x87Detect>
c00256b8:	85 c0                	test   eax,eax
c00256ba:	0f 95 c0             	setne  al
c00256bd:	83 c4 0c             	add    esp,0xc
c00256c0:	c3                   	ret    
c00256c1:	90                   	nop

c00256c2 <x87::save(void*)>:
c00256c2:	83 ec 0c             	sub    esp,0xc
c00256c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00256c9:	83 ec 0c             	sub    esp,0xc
c00256cc:	50                   	push   eax
c00256cd:	e8 cf 0f 00 00       	call   c00266a1 <x87Save>
c00256d2:	83 c4 10             	add    esp,0x10
c00256d5:	90                   	nop
c00256d6:	83 c4 0c             	add    esp,0xc
c00256d9:	c3                   	ret    

c00256da <x87::load(void*)>:
c00256da:	83 ec 0c             	sub    esp,0xc
c00256dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00256e1:	83 ec 0c             	sub    esp,0xc
c00256e4:	50                   	push   eax
c00256e5:	e8 c0 0f 00 00       	call   c00266aa <x87Load>
c00256ea:	83 c4 10             	add    esp,0x10
c00256ed:	90                   	nop
c00256ee:	83 c4 0c             	add    esp,0xc
c00256f1:	c3                   	ret    

c00256f2 <x87::x87()>:
c00256f2:	83 ec 0c             	sub    esp,0xc
c00256f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256f9:	83 ec 08             	sub    esp,0x8
c00256fc:	68 00 d1 02 c0       	push   0xc002d100
c0025701:	50                   	push   eax
c0025702:	e8 eb ef fe ff       	call   c00146f2 <FPU::FPU(char const*)>
c0025707:	83 c4 10             	add    esp,0x10
c002570a:	ba 10 d1 02 c0       	mov    edx,0xc002d110
c002570f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025713:	89 10                	mov    DWORD PTR [eax],edx
c0025715:	90                   	nop
c0025716:	83 c4 0c             	add    esp,0xc
c0025719:	c3                   	ret    

c002571a <APIC::disable()>:
c002571a:	90                   	nop
c002571b:	c3                   	ret    

c002571c <APIC::close(int, int, void*)>:
c002571c:	55                   	push   ebp
c002571d:	89 e5                	mov    ebp,esp
c002571f:	83 ec 08             	sub    esp,0x8
c0025722:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025725:	8b 00                	mov    eax,DWORD PTR [eax]
c0025727:	83 c0 3c             	add    eax,0x3c
c002572a:	8b 00                	mov    eax,DWORD PTR [eax]
c002572c:	83 ec 0c             	sub    esp,0xc
c002572f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025732:	ff d0                	call   eax
c0025734:	83 c4 10             	add    esp,0x10
c0025737:	b8 00 00 00 00       	mov    eax,0x0
c002573c:	c9                   	leave  
c002573d:	c3                   	ret    

c002573e <IOAPIC::close(int, int, void*)>:
c002573e:	b8 00 00 00 00       	mov    eax,0x0
c0025743:	c3                   	ret    

c0025744 <APIC::io_wait()>:
c0025744:	eb 00                	jmp    c0025746 <APIC::io_wait()+0x2>
c0025746:	eb 00                	jmp    c0025748 <APIC::io_wait()+0x4>
c0025748:	90                   	nop
c0025749:	c3                   	ret    

c002574a <APIC::getBase()>:
c002574a:	55                   	push   ebp
c002574b:	89 e5                	mov    ebp,esp
c002574d:	83 ec 18             	sub    esp,0x18
c0025750:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0025755:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002575b:	83 e0 08             	and    eax,0x8
c002575e:	84 c0                	test   al,al
c0025760:	75 07                	jne    c0025769 <APIC::getBase()+0x1f>
c0025762:	b8 00 00 00 00       	mov    eax,0x0
c0025767:	eb 21                	jmp    c002578a <APIC::getBase()+0x40>
c0025769:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c002576e:	83 ec 08             	sub    esp,0x8
c0025771:	6a 1b                	push   0x1b
c0025773:	50                   	push   eax
c0025774:	e8 77 96 fe ff       	call   c000edf0 <Computer::rdmsr(unsigned int)>
c0025779:	83 c4 10             	add    esp,0x10
c002577c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002577f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025782:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025785:	25 00 f0 ff ff       	and    eax,0xfffff000
c002578a:	c9                   	leave  
c002578b:	c3                   	ret    

c002578c <APIC::eoi(unsigned char)>:
c002578c:	55                   	push   ebp
c002578d:	89 e5                	mov    ebp,esp
c002578f:	83 ec 28             	sub    esp,0x28
c0025792:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025795:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025798:	83 ec 0c             	sub    esp,0xc
c002579b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002579e:	e8 a7 ff ff ff       	call   c002574a <APIC::getBase()>
c00257a3:	83 c4 10             	add    esp,0x10
c00257a6:	05 b0 00 00 00       	add    eax,0xb0
c00257ab:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00257ae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00257b1:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00257b7:	90                   	nop
c00257b8:	c9                   	leave  
c00257b9:	c3                   	ret    

c00257ba <APIC::open(int, int, void*)>:
c00257ba:	55                   	push   ebp
c00257bb:	89 e5                	mov    ebp,esp
c00257bd:	57                   	push   edi
c00257be:	56                   	push   esi
c00257bf:	53                   	push   ebx
c00257c0:	83 ec 2c             	sub    esp,0x2c
c00257c3:	83 ec 0c             	sub    esp,0xc
c00257c6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00257c9:	e8 7c ff ff ff       	call   c002574a <APIC::getBase()>
c00257ce:	83 c4 10             	add    esp,0x10
c00257d1:	89 c2                	mov    edx,eax
c00257d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257d6:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00257dc:	0f b6 f8             	movzx  edi,al
c00257df:	89 d0                	mov    eax,edx
c00257e1:	ba 00 00 00 00       	mov    edx,0x0
c00257e6:	89 c1                	mov    ecx,eax
c00257e8:	80 e5 ff             	and    ch,0xff
c00257eb:	89 cb                	mov    ebx,ecx
c00257ed:	0f b6 f2             	movzx  esi,dl
c00257f0:	89 d8                	mov    eax,ebx
c00257f2:	89 f2                	mov    edx,esi
c00257f4:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00257f7:	8d 5f 08             	lea    ebx,[edi+0x8]
c00257fa:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00257fe:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025802:	83 e0 00             	and    eax,0x0
c0025805:	09 d0                	or     eax,edx
c0025807:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002580b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002580e:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025814:	8d 50 01             	lea    edx,[eax+0x1]
c0025817:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002581a:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025820:	0f b6 d0             	movzx  edx,al
c0025823:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025826:	83 c2 08             	add    edx,0x8
c0025829:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002582d:	0f b6 c9             	movzx  ecx,cl
c0025830:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025836:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002583a:	83 ec 0c             	sub    esp,0xc
c002583d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025840:	e8 05 ff ff ff       	call   c002574a <APIC::getBase()>
c0025845:	83 c4 10             	add    esp,0x10
c0025848:	05 f0 00 00 00       	add    eax,0xf0
c002584d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025850:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025853:	8b 00                	mov    eax,DWORD PTR [eax]
c0025855:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025858:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c002585f:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0025866:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025869:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002586c:	89 10                	mov    DWORD PTR [eax],edx
c002586e:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0025875:	a1 50 0d 03 c0       	mov    eax,ds:0xc0030d50
c002587a:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c002587d:	7d 7c                	jge    c00258fb <APIC::open(int, int, void*)+0x141>
c002587f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025882:	8b 04 85 60 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf2a0]
c0025889:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c002588c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002588f:	8b 04 85 60 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf2a0]
c0025896:	c1 e8 08             	shr    eax,0x8
c0025899:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c002589d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00258a0:	8b 04 85 60 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf2a0]
c00258a7:	c1 e8 18             	shr    eax,0x18
c00258aa:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00258ad:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00258b1:	75 40                	jne    c00258f3 <APIC::open(int, int, void*)+0x139>
c00258b3:	83 ec 0c             	sub    esp,0xc
c00258b6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258b9:	e8 8c fe ff ff       	call   c002574a <APIC::getBase()>
c00258be:	83 c4 10             	add    esp,0x10
c00258c1:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00258c5:	75 07                	jne    c00258ce <APIC::open(int, int, void*)+0x114>
c00258c7:	ba 60 03 00 00       	mov    edx,0x360
c00258cc:	eb 05                	jmp    c00258d3 <APIC::open(int, int, void*)+0x119>
c00258ce:	ba 50 03 00 00       	mov    edx,0x350
c00258d3:	01 d0                	add    eax,edx
c00258d5:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00258d8:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00258db:	8b 00                	mov    eax,DWORD PTR [eax]
c00258dd:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00258e0:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00258e7:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00258eb:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00258ee:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00258f1:	89 10                	mov    DWORD PTR [eax],edx
c00258f3:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00258f6:	e9 7a ff ff ff       	jmp    c0025875 <APIC::open(int, int, void*)+0xbb>
c00258fb:	b8 00 00 00 00       	mov    eax,0x0
c0025900:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025903:	5b                   	pop    ebx
c0025904:	5e                   	pop    esi
c0025905:	5f                   	pop    edi
c0025906:	5d                   	pop    ebp
c0025907:	c3                   	ret    

c0025908 <IOAPIC::IOAPIC()>:
c0025908:	83 ec 0c             	sub    esp,0xc
c002590b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002590f:	83 ec 08             	sub    esp,0x8
c0025912:	68 40 d1 02 c0       	push   0xc002d140
c0025917:	50                   	push   eax
c0025918:	e8 c3 ea fe ff       	call   c00143e0 <Device::Device(char const*)>
c002591d:	83 c4 10             	add    esp,0x10
c0025920:	ba 68 d2 02 c0       	mov    edx,0xc002d268
c0025925:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025929:	89 10                	mov    DWORD PTR [eax],edx
c002592b:	90                   	nop
c002592c:	83 c4 0c             	add    esp,0xc
c002592f:	c3                   	ret    

c0025930 <APIC::APIC()>:
c0025930:	53                   	push   ebx
c0025931:	83 ec 18             	sub    esp,0x18
c0025934:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025938:	83 ec 08             	sub    esp,0x8
c002593b:	68 48 d1 02 c0       	push   0xc002d148
c0025940:	50                   	push   eax
c0025941:	e8 06 f2 fe ff       	call   c0014b4c <InterruptController::InterruptController(char const*)>
c0025946:	83 c4 10             	add    esp,0x10
c0025949:	ba 20 d2 02 c0       	mov    edx,0xc002d220
c002594e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025952:	89 10                	mov    DWORD PTR [eax],edx
c0025954:	a0 20 28 03 c0       	mov    al,ds:0xc0032820
c0025959:	83 f0 01             	xor    eax,0x1
c002595c:	84 c0                	test   al,al
c002595e:	0f 84 a1 00 00 00    	je     c0025a05 <APIC::APIC()+0xd5>
c0025964:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0025969:	a0 00 0e 03 c0       	mov    al,ds:0xc0030e00
c002596e:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0025972:	0f 83 86 00 00 00    	jae    c00259fe <APIC::APIC()+0xce>
c0025978:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0025980:	83 ec 0c             	sub    esp,0xc
c0025983:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025987:	e8 bf 9e fe ff       	call   c000f84b <malloc>
c002598c:	83 c4 10             	add    esp,0x10
c002598f:	89 c3                	mov    ebx,eax
c0025991:	83 ec 0c             	sub    esp,0xc
c0025994:	53                   	push   ebx
c0025995:	e8 6e ff ff ff       	call   c0025908 <IOAPIC::IOAPIC()>
c002599a:	83 c4 10             	add    esp,0x10
c002599d:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00259a1:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00259a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00259aa:	89 14 85 00 28 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd800],edx
c00259b1:	a1 e0 27 03 c0       	mov    eax,ds:0xc00327e0
c00259b6:	40                   	inc    eax
c00259b7:	a3 e0 27 03 c0       	mov    ds:0xc00327e0,eax
c00259bc:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c00259c1:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00259c7:	83 ec 08             	sub    esp,0x8
c00259ca:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00259ce:	50                   	push   eax
c00259cf:	e8 1c e8 fe ff       	call   c00141f0 <Device::addChild(Device*)>
c00259d4:	83 c4 10             	add    esp,0x10
c00259d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00259db:	8b 00                	mov    eax,DWORD PTR [eax]
c00259dd:	83 c0 08             	add    eax,0x8
c00259e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00259e2:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00259e7:	6a 00                	push   0x0
c00259e9:	6a 00                	push   0x0
c00259eb:	52                   	push   edx
c00259ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00259f0:	ff d0                	call   eax
c00259f2:	83 c4 10             	add    esp,0x10
c00259f5:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c00259f9:	e9 6b ff ff ff       	jmp    c0025969 <APIC::APIC()+0x39>
c00259fe:	c6 05 20 28 03 c0 01 	mov    BYTE PTR ds:0xc0032820,0x1
c0025a05:	90                   	nop
c0025a06:	83 c4 18             	add    esp,0x18
c0025a09:	5b                   	pop    ebx
c0025a0a:	c3                   	ret    
c0025a0b:	90                   	nop

c0025a0c <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025a0c:	55                   	push   ebp
c0025a0d:	89 e5                	mov    ebp,esp
c0025a0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a12:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025a18:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025a1b:	72 1d                	jb     c0025a3a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025a1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a20:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025a26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a29:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025a2f:	01 d0                	add    eax,edx
c0025a31:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025a34:	73 04                	jae    c0025a3a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025a36:	b0 01                	mov    al,0x1
c0025a38:	eb 02                	jmp    c0025a3c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025a3a:	b0 00                	mov    al,0x0
c0025a3c:	5d                   	pop    ebp
c0025a3d:	c3                   	ret    

c0025a3e <IOAPIC::read(int)>:
c0025a3e:	55                   	push   ebp
c0025a3f:	89 e5                	mov    ebp,esp
c0025a41:	83 ec 10             	sub    esp,0x10
c0025a44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a47:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025a4d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025a50:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a53:	0f b6 d0             	movzx  edx,al
c0025a56:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025a59:	89 10                	mov    DWORD PTR [eax],edx
c0025a5b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025a5e:	83 c0 10             	add    eax,0x10
c0025a61:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a63:	c9                   	leave  
c0025a64:	c3                   	ret    
c0025a65:	90                   	nop

c0025a66 <IOAPIC::open(int, int, void*)>:
c0025a66:	55                   	push   ebp
c0025a67:	89 e5                	mov    ebp,esp
c0025a69:	57                   	push   edi
c0025a6a:	56                   	push   esi
c0025a6b:	53                   	push   ebx
c0025a6c:	83 ec 0c             	sub    esp,0xc
c0025a6f:	83 ec 0c             	sub    esp,0xc
c0025a72:	68 73 d1 02 c0       	push   0xc002d173
c0025a77:	e8 47 d3 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0025a7c:	83 c4 10             	add    esp,0x10
c0025a7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a82:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025a85:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025a8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a8e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025a94:	8b 14 85 40 0e 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf1c0]
c0025a9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a9e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025aa4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025aa7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025aad:	8b 14 85 c0 0e 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf140]
c0025ab4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ab7:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025abd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ac0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025ac6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ac9:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025acf:	0f b6 f8             	movzx  edi,al
c0025ad2:	89 d0                	mov    eax,edx
c0025ad4:	ba 00 00 00 00       	mov    edx,0x0
c0025ad9:	89 c1                	mov    ecx,eax
c0025adb:	80 e5 ff             	and    ch,0xff
c0025ade:	89 cb                	mov    ebx,ecx
c0025ae0:	0f b6 f2             	movzx  esi,dl
c0025ae3:	89 d8                	mov    eax,ebx
c0025ae5:	89 f2                	mov    edx,esi
c0025ae7:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025aea:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025aed:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025af1:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025af5:	83 e0 00             	and    eax,0x0
c0025af8:	09 d0                	or     eax,edx
c0025afa:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025afe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b01:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025b07:	8d 50 01             	lea    edx,[eax+0x1]
c0025b0a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025b0d:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025b13:	0f b6 d0             	movzx  edx,al
c0025b16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b19:	83 c2 08             	add    edx,0x8
c0025b1c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025b20:	0f b6 c9             	movzx  ecx,cl
c0025b23:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025b29:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025b2d:	83 ec 08             	sub    esp,0x8
c0025b30:	6a 01                	push   0x1
c0025b32:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b35:	e8 04 ff ff ff       	call   c0025a3e <IOAPIC::read(int)>
c0025b3a:	83 c4 10             	add    esp,0x10
c0025b3d:	c1 f8 10             	sar    eax,0x10
c0025b40:	0f b6 c0             	movzx  eax,al
c0025b43:	8d 50 01             	lea    edx,[eax+0x1]
c0025b46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b49:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025b4f:	b8 00 00 00 00       	mov    eax,0x0
c0025b54:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025b57:	5b                   	pop    ebx
c0025b58:	5e                   	pop    esi
c0025b59:	5f                   	pop    edi
c0025b5a:	5d                   	pop    ebp
c0025b5b:	c3                   	ret    

c0025b5c <IOAPIC::write(int, int)>:
c0025b5c:	55                   	push   ebp
c0025b5d:	89 e5                	mov    ebp,esp
c0025b5f:	83 ec 10             	sub    esp,0x10
c0025b62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b65:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025b6b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025b6e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b71:	0f b6 d0             	movzx  edx,al
c0025b74:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025b77:	89 10                	mov    DWORD PTR [eax],edx
c0025b79:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025b7c:	8d 50 10             	lea    edx,[eax+0x10]
c0025b7f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025b82:	89 02                	mov    DWORD PTR [edx],eax
c0025b84:	90                   	nop
c0025b85:	c9                   	leave  
c0025b86:	c3                   	ret    
c0025b87:	90                   	nop

c0025b88 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025b88:	55                   	push   ebp
c0025b89:	89 e5                	mov    ebp,esp
c0025b8b:	53                   	push   ebx
c0025b8c:	83 ec 2c             	sub    esp,0x2c
c0025b8f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b92:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025b95:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025b98:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025b9b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025b9e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025ba1:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025ba4:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025ba7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025baa:	88 d8                	mov    al,bl
c0025bac:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025baf:	88 c8                	mov    al,cl
c0025bb1:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025bb4:	88 d0                	mov    al,dl
c0025bb6:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025bb9:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025bbd:	83 c0 08             	add    eax,0x8
c0025bc0:	01 c0                	add    eax,eax
c0025bc2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025bc5:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025bc9:	83 c0 08             	add    eax,0x8
c0025bcc:	01 c0                	add    eax,eax
c0025bce:	40                   	inc    eax
c0025bcf:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025bd2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025bd5:	50                   	push   eax
c0025bd6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025bd9:	e8 60 fe ff ff       	call   c0025a3e <IOAPIC::read(int)>
c0025bde:	83 c4 08             	add    esp,0x8
c0025be1:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025be4:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025beb:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025bee:	c1 e0 18             	shl    eax,0x18
c0025bf1:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025bf4:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025bf7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025bfa:	52                   	push   edx
c0025bfb:	50                   	push   eax
c0025bfc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025bff:	e8 58 ff ff ff       	call   c0025b5c <IOAPIC::write(int, int)>
c0025c04:	83 c4 0c             	add    esp,0xc
c0025c07:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025c0a:	50                   	push   eax
c0025c0b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c0e:	e8 2b fe ff ff       	call   c0025a3e <IOAPIC::read(int)>
c0025c13:	83 c4 08             	add    esp,0x8
c0025c16:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025c19:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025c20:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025c27:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025c2e:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025c32:	74 09                	je     c0025c3d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025c34:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025c3b:	eb 07                	jmp    c0025c44 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025c3d:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025c44:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025c48:	74 09                	je     c0025c53 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025c4a:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025c51:	eb 07                	jmp    c0025c5a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025c53:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025c5a:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025c61:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025c65:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025c68:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025c6b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025c6e:	52                   	push   edx
c0025c6f:	50                   	push   eax
c0025c70:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c73:	e8 e4 fe ff ff       	call   c0025b5c <IOAPIC::write(int, int)>
c0025c78:	83 c4 0c             	add    esp,0xc
c0025c7b:	90                   	nop
c0025c7c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025c7f:	c9                   	leave  
c0025c80:	c3                   	ret    
c0025c81:	90                   	nop

c0025c82 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025c82:	55                   	push   ebp
c0025c83:	89 e5                	mov    ebp,esp
c0025c85:	57                   	push   edi
c0025c86:	56                   	push   esi
c0025c87:	53                   	push   ebx
c0025c88:	83 ec 2c             	sub    esp,0x2c
c0025c8b:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025c8e:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025c91:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025c95:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025c99:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025c9d:	74 5a                	je     c0025cf9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025c9f:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025ca3:	7f 44                	jg     c0025ce9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025ca5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ca8:	05 c0 d6 02 c0       	add    eax,0xc002d6c0
c0025cad:	8a 00                	mov    al,BYTE PTR [eax]
c0025caf:	0f b6 c0             	movzx  eax,al
c0025cb2:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025cb5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025cb8:	66 8b 84 00 e0 0d 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf220]
c0025cc0:	0f b7 c0             	movzx  eax,ax
c0025cc3:	83 e0 02             	and    eax,0x2
c0025cc6:	85 c0                	test   eax,eax
c0025cc8:	74 04                	je     c0025cce <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025cca:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025cce:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025cd1:	66 8b 84 00 e0 0d 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf220]
c0025cd9:	0f b7 c0             	movzx  eax,ax
c0025cdc:	83 e0 08             	and    eax,0x8
c0025cdf:	85 c0                	test   eax,eax
c0025ce1:	74 16                	je     c0025cf9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025ce3:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025ce7:	eb 10                	jmp    c0025cf9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025ce9:	83 ec 0c             	sub    esp,0xc
c0025cec:	68 84 d1 02 c0       	push   0xc002d184
c0025cf1:	e8 0b 48 ff ff       	call   c001a501 <Krnl::panic(char const*)>
c0025cf6:	83 c4 10             	add    esp,0x10
c0025cf9:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025cfd:	a1 e0 27 03 c0       	mov    eax,ds:0xc00327e0
c0025d02:	83 ec 08             	sub    esp,0x8
c0025d05:	50                   	push   eax
c0025d06:	68 bc d1 02 c0       	push   0xc002d1bc
c0025d0b:	e8 b3 d0 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0025d10:	83 c4 10             	add    esp,0x10
c0025d13:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025d1a:	a1 e0 27 03 c0       	mov    eax,ds:0xc00327e0
c0025d1f:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025d22:	7d 67                	jge    c0025d8b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025d24:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025d27:	8b 04 85 00 28 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd800]
c0025d2e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025d31:	83 ec 08             	sub    esp,0x8
c0025d34:	52                   	push   edx
c0025d35:	50                   	push   eax
c0025d36:	e8 d1 fc ff ff       	call   c0025a0c <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025d3b:	83 c4 10             	add    esp,0x10
c0025d3e:	84 c0                	test   al,al
c0025d40:	74 44                	je     c0025d86 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025d42:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025d45:	8b 1c 85 00 28 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcd800]
c0025d4c:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025d50:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025d53:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025d57:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d5a:	83 c0 20             	add    eax,0x20
c0025d5d:	0f b6 f0             	movzx  esi,al
c0025d60:	b8 00 00 00 00       	mov    eax,0x0
c0025d65:	99                   	cdq    
c0025d66:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025d69:	0f b6 c9             	movzx  ecx,cl
c0025d6c:	83 ec 04             	sub    esp,0x4
c0025d6f:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025d72:	57                   	push   edi
c0025d73:	56                   	push   esi
c0025d74:	52                   	push   edx
c0025d75:	50                   	push   eax
c0025d76:	51                   	push   ecx
c0025d77:	53                   	push   ebx
c0025d78:	e8 0b fe ff ff       	call   c0025b88 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025d7d:	83 c4 20             	add    esp,0x20
c0025d80:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025d84:	eb 05                	jmp    c0025d8b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025d86:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025d89:	eb 8f                	jmp    c0025d1a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025d8b:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025d8e:	83 f0 01             	xor    eax,0x1
c0025d91:	84 c0                	test   al,al
c0025d93:	74 10                	je     c0025da5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025d95:	83 ec 0c             	sub    esp,0xc
c0025d98:	68 d3 d1 02 c0       	push   0xc002d1d3
c0025d9d:	e8 5f 47 ff ff       	call   c001a501 <Krnl::panic(char const*)>
c0025da2:	83 c4 10             	add    esp,0x10
c0025da5:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025da9:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025db0:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025db4:	7f 65                	jg     c0025e1b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025db6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025db9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025dbc:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025dc3:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025dc6:	01 ca                	add    edx,ecx
c0025dc8:	83 c2 54             	add    edx,0x54
c0025dcb:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025dcf:	85 c0                	test   eax,eax
c0025dd1:	75 43                	jne    c0025e16 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025dd3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025dd6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025dd9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025de0:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025de3:	01 ca                	add    edx,ecx
c0025de5:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025de8:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025deb:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025def:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025df2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025df5:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025dfc:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025dff:	01 ca                	add    edx,ecx
c0025e01:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025e07:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025e0a:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025e0e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e11:	83 e8 20             	sub    eax,0x20
c0025e14:	eb 1a                	jmp    c0025e30 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025e16:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025e19:	eb 95                	jmp    c0025db0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025e1b:	83 ec 0c             	sub    esp,0xc
c0025e1e:	68 e0 d1 02 c0       	push   0xc002d1e0
c0025e23:	e8 d9 46 ff ff       	call   c001a501 <Krnl::panic(char const*)>
c0025e28:	83 c4 10             	add    esp,0x10
c0025e2b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025e30:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025e33:	5b                   	pop    ebx
c0025e34:	5e                   	pop    esi
c0025e35:	5f                   	pop    edi
c0025e36:	5d                   	pop    ebp
c0025e37:	c3                   	ret    

c0025e38 <PIC::disable()>:
c0025e38:	55                   	push   ebp
c0025e39:	89 e5                	mov    ebp,esp
c0025e3b:	83 ec 10             	sub    esp,0x10
c0025e3e:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025e44:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025e48:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025e4b:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025e4f:	ee                   	out    dx,al
c0025e50:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025e56:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025e5a:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025e5d:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025e61:	ee                   	out    dx,al
c0025e62:	90                   	nop
c0025e63:	c9                   	leave  
c0025e64:	c3                   	ret    
c0025e65:	90                   	nop

c0025e66 <PIC::close(int, int, void*)>:
c0025e66:	55                   	push   ebp
c0025e67:	89 e5                	mov    ebp,esp
c0025e69:	83 ec 08             	sub    esp,0x8
c0025e6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e6f:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e71:	83 c0 3c             	add    eax,0x3c
c0025e74:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e76:	83 ec 0c             	sub    esp,0xc
c0025e79:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e7c:	ff d0                	call   eax
c0025e7e:	83 c4 10             	add    esp,0x10
c0025e81:	b8 00 00 00 00       	mov    eax,0x0
c0025e86:	c9                   	leave  
c0025e87:	c3                   	ret    

c0025e88 <PIC::PIC()>:
c0025e88:	83 ec 0c             	sub    esp,0xc
c0025e8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e8f:	83 ec 08             	sub    esp,0x8
c0025e92:	68 8c d2 02 c0       	push   0xc002d28c
c0025e97:	50                   	push   eax
c0025e98:	e8 af ec fe ff       	call   c0014b4c <InterruptController::InterruptController(char const*)>
c0025e9d:	83 c4 10             	add    esp,0x10
c0025ea0:	ba b8 d2 02 c0       	mov    edx,0xc002d2b8
c0025ea5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ea9:	89 10                	mov    DWORD PTR [eax],edx
c0025eab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025eaf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025eb5:	0f b6 d0             	movzx  edx,al
c0025eb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ebc:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025ec3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ec7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ecd:	0f b6 d0             	movzx  edx,al
c0025ed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ed4:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025ed9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025edd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ee3:	8d 50 01             	lea    edx,[eax+0x1]
c0025ee6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025eea:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025ef0:	0f b6 d0             	movzx  edx,al
c0025ef3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ef7:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025efb:	83 e1 3f             	and    ecx,0x3f
c0025efe:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025f02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f06:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f0c:	0f b6 d0             	movzx  edx,al
c0025f0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f13:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025f1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f1e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f24:	0f b6 d0             	movzx  edx,al
c0025f27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f2b:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025f30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f34:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f3a:	8d 50 01             	lea    edx,[eax+0x1]
c0025f3d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025f41:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025f47:	0f b6 d0             	movzx  edx,al
c0025f4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f4e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025f52:	83 e1 3f             	and    ecx,0x3f
c0025f55:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025f59:	90                   	nop
c0025f5a:	83 c4 0c             	add    esp,0xc
c0025f5d:	c3                   	ret    

c0025f5e <PIC::ioWait()>:
c0025f5e:	eb 00                	jmp    c0025f60 <PIC::ioWait()+0x2>
c0025f60:	eb 00                	jmp    c0025f62 <PIC::ioWait()+0x4>
c0025f62:	90                   	nop
c0025f63:	c3                   	ret    

c0025f64 <PIC::getIRQReg(int)>:
c0025f64:	55                   	push   ebp
c0025f65:	89 e5                	mov    ebp,esp
c0025f67:	83 ec 10             	sub    esp,0x10
c0025f6a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f6d:	0f b6 c0             	movzx  eax,al
c0025f70:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025f76:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025f79:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025f7c:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025f80:	ee                   	out    dx,al
c0025f81:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f84:	0f b6 c0             	movzx  eax,al
c0025f87:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025f8d:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025f90:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025f93:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025f97:	ee                   	out    dx,al
c0025f98:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025f9e:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025fa2:	89 c2                	mov    edx,eax
c0025fa4:	ec                   	in     al,dx
c0025fa5:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025fa8:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025fab:	0f b6 c0             	movzx  eax,al
c0025fae:	c1 e0 08             	shl    eax,0x8
c0025fb1:	89 c1                	mov    ecx,eax
c0025fb3:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025fb9:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025fbd:	89 c2                	mov    edx,eax
c0025fbf:	ec                   	in     al,dx
c0025fc0:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025fc3:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025fc6:	0f b6 c0             	movzx  eax,al
c0025fc9:	09 c8                	or     eax,ecx
c0025fcb:	c9                   	leave  
c0025fcc:	c3                   	ret    
c0025fcd:	90                   	nop

c0025fce <PIC::eoi(unsigned char)>:
c0025fce:	55                   	push   ebp
c0025fcf:	89 e5                	mov    ebp,esp
c0025fd1:	83 ec 14             	sub    esp,0x14
c0025fd4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025fd7:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025fda:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025fde:	75 1e                	jne    c0025ffe <PIC::eoi(unsigned char)+0x30>
c0025fe0:	6a 0b                	push   0xb
c0025fe2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fe5:	e8 7a ff ff ff       	call   c0025f64 <PIC::getIRQReg(int)>
c0025fea:	83 c4 08             	add    esp,0x8
c0025fed:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0025ff1:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0025ff5:	25 80 00 00 00       	and    eax,0x80
c0025ffa:	85 c0                	test   eax,eax
c0025ffc:	74 5f                	je     c002605d <PIC::eoi(unsigned char)+0x8f>
c0025ffe:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0026002:	75 2d                	jne    c0026031 <PIC::eoi(unsigned char)+0x63>
c0026004:	6a 0b                	push   0xb
c0026006:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026009:	e8 56 ff ff ff       	call   c0025f64 <PIC::getIRQReg(int)>
c002600e:	83 c4 08             	add    esp,0x8
c0026011:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0026015:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026018:	66 85 c0             	test   ax,ax
c002601b:	78 14                	js     c0026031 <PIC::eoi(unsigned char)+0x63>
c002601d:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0026023:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0026027:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002602a:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c002602e:	ee                   	out    dx,al
c002602f:	eb 2d                	jmp    c002605e <PIC::eoi(unsigned char)+0x90>
c0026031:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026035:	76 12                	jbe    c0026049 <PIC::eoi(unsigned char)+0x7b>
c0026037:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c002603d:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0026041:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026044:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026048:	ee                   	out    dx,al
c0026049:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c002604f:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0026053:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026056:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002605a:	ee                   	out    dx,al
c002605b:	eb 01                	jmp    c002605e <PIC::eoi(unsigned char)+0x90>
c002605d:	90                   	nop
c002605e:	c9                   	leave  
c002605f:	c3                   	ret    

c0026060 <PIC::remap()>:
c0026060:	55                   	push   ebp
c0026061:	89 e5                	mov    ebp,esp
c0026063:	83 ec 48             	sub    esp,0x48
c0026066:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c002606d:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0026074:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c002607a:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c002607d:	89 c2                	mov    edx,eax
c002607f:	ec                   	in     al,dx
c0026080:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0026083:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0026086:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0026089:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c002608f:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0026092:	89 c2                	mov    edx,eax
c0026094:	ec                   	in     al,dx
c0026095:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0026098:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c002609b:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c002609e:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c00260a4:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c00260a8:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c00260ab:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c00260ae:	ee                   	out    dx,al
c00260af:	83 ec 0c             	sub    esp,0xc
c00260b2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260b5:	e8 a4 fe ff ff       	call   c0025f5e <PIC::ioWait()>
c00260ba:	83 c4 10             	add    esp,0x10
c00260bd:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c00260c3:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c00260c7:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c00260ca:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00260cd:	ee                   	out    dx,al
c00260ce:	83 ec 0c             	sub    esp,0xc
c00260d1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260d4:	e8 85 fe ff ff       	call   c0025f5e <PIC::ioWait()>
c00260d9:	83 c4 10             	add    esp,0x10
c00260dc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00260df:	0f b6 c0             	movzx  eax,al
c00260e2:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c00260e8:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c00260eb:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c00260ee:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00260f1:	ee                   	out    dx,al
c00260f2:	83 ec 0c             	sub    esp,0xc
c00260f5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260f8:	e8 61 fe ff ff       	call   c0025f5e <PIC::ioWait()>
c00260fd:	83 c4 10             	add    esp,0x10
c0026100:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026103:	0f b6 c0             	movzx  eax,al
c0026106:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c002610c:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c002610f:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0026112:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026115:	ee                   	out    dx,al
c0026116:	83 ec 0c             	sub    esp,0xc
c0026119:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002611c:	e8 3d fe ff ff       	call   c0025f5e <PIC::ioWait()>
c0026121:	83 c4 10             	add    esp,0x10
c0026124:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c002612a:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c002612e:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0026131:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0026134:	ee                   	out    dx,al
c0026135:	83 ec 0c             	sub    esp,0xc
c0026138:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002613b:	e8 1e fe ff ff       	call   c0025f5e <PIC::ioWait()>
c0026140:	83 c4 10             	add    esp,0x10
c0026143:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0026149:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c002614d:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0026150:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026153:	ee                   	out    dx,al
c0026154:	83 ec 0c             	sub    esp,0xc
c0026157:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002615a:	e8 ff fd ff ff       	call   c0025f5e <PIC::ioWait()>
c002615f:	83 c4 10             	add    esp,0x10
c0026162:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0026168:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c002616c:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c002616f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026172:	ee                   	out    dx,al
c0026173:	83 ec 0c             	sub    esp,0xc
c0026176:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026179:	e8 e0 fd ff ff       	call   c0025f5e <PIC::ioWait()>
c002617e:	83 c4 10             	add    esp,0x10
c0026181:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0026187:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c002618b:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c002618e:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026191:	ee                   	out    dx,al
c0026192:	83 ec 0c             	sub    esp,0xc
c0026195:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026198:	e8 c1 fd ff ff       	call   c0025f5e <PIC::ioWait()>
c002619d:	83 c4 10             	add    esp,0x10
c00261a0:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c00261a4:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c00261aa:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c00261ad:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c00261b0:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00261b3:	ee                   	out    dx,al
c00261b4:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c00261b8:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c00261be:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c00261c1:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c00261c4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00261c7:	ee                   	out    dx,al
c00261c8:	90                   	nop
c00261c9:	c9                   	leave  
c00261ca:	c3                   	ret    
c00261cb:	90                   	nop

c00261cc <PIC::open(int, int, void*)>:
c00261cc:	55                   	push   ebp
c00261cd:	89 e5                	mov    ebp,esp
c00261cf:	83 ec 18             	sub    esp,0x18
c00261d2:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c00261d8:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c00261dc:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00261df:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00261e3:	ee                   	out    dx,al
c00261e4:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c00261ea:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c00261ee:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00261f1:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00261f5:	ee                   	out    dx,al
c00261f6:	83 ec 0c             	sub    esp,0xc
c00261f9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261fc:	e8 5f fe ff ff       	call   c0026060 <PIC::remap()>
c0026201:	83 c4 10             	add    esp,0x10
c0026204:	b8 00 00 00 00       	mov    eax,0x0
c0026209:	c9                   	leave  
c002620a:	c3                   	ret    
c002620b:	90                   	nop

c002620c <APICTimer::close(int, int, void*)>:
c002620c:	b8 00 00 00 00       	mov    eax,0x0
c0026211:	c3                   	ret    

c0026212 <apicTimerHandler(regs*, void*)>:
c0026212:	83 ec 0c             	sub    esp,0xc
c0026215:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026219:	8b 00                	mov    eax,DWORD PTR [eax]
c002621b:	99                   	cdq    
c002621c:	52                   	push   edx
c002621d:	50                   	push   eax
c002621e:	6a 00                	push   0x0
c0026220:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026225:	e8 9a 07 00 00       	call   c00269c4 <__udivdi3>
c002622a:	83 c4 10             	add    esp,0x10
c002622d:	83 ec 08             	sub    esp,0x8
c0026230:	52                   	push   edx
c0026231:	50                   	push   eax
c0026232:	e8 da 09 ff ff       	call   c0016c11 <timerHandler(unsigned long long)>
c0026237:	83 c4 10             	add    esp,0x10
c002623a:	90                   	nop
c002623b:	83 c4 0c             	add    esp,0xc
c002623e:	c3                   	ret    
c002623f:	90                   	nop

c0026240 <APICTimer::write(int)>:
c0026240:	53                   	push   ebx
c0026241:	83 ec 28             	sub    esp,0x28
c0026244:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026248:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002624c:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026252:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0026257:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002625d:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026263:	83 ec 0c             	sub    esp,0xc
c0026266:	50                   	push   eax
c0026267:	e8 de f4 ff ff       	call   c002574a <APIC::getBase()>
c002626c:	83 c4 10             	add    esp,0x10
c002626f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026273:	a1 f0 ea 02 c0       	mov    eax,ds:0xc002eaf0
c0026278:	8b 15 f4 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002eaf4
c002627e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026282:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026286:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002628a:	05 e0 03 00 00       	add    eax,0x3e0
c002628f:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026295:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026299:	05 80 03 00 00       	add    eax,0x380
c002629e:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00262a4:	fb                   	sti    
c00262a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262a9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00262ad:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c00262b2:	83 d2 00             	adc    edx,0x0
c00262b5:	89 c1                	mov    ecx,eax
c00262b7:	89 d3                	mov    ebx,edx
c00262b9:	a1 f0 ea 02 c0       	mov    eax,ds:0xc002eaf0
c00262be:	8b 15 f4 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002eaf4
c00262c4:	39 c8                	cmp    eax,ecx
c00262c6:	89 d0                	mov    eax,edx
c00262c8:	19 d8                	sbb    eax,ebx
c00262ca:	73 02                	jae    c00262ce <APICTimer::write(int)+0x8e>
c00262cc:	eb d7                	jmp    c00262a5 <APICTimer::write(int)+0x65>
c00262ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262d2:	05 20 03 00 00       	add    eax,0x320
c00262d7:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c00262dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262e1:	05 90 03 00 00       	add    eax,0x390
c00262e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00262e8:	f7 d0                	not    eax
c00262ea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00262ee:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00262f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00262f6:	ba 00 00 00 00       	mov    edx,0x0
c00262fb:	f7 f3                	div    ebx
c00262fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026301:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026305:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002630b:	0d 00 00 02 00       	or     eax,0x20000
c0026310:	89 c2                	mov    edx,eax
c0026312:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026316:	05 20 03 00 00       	add    eax,0x320
c002631b:	89 10                	mov    DWORD PTR [eax],edx
c002631d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026321:	05 e0 03 00 00       	add    eax,0x3e0
c0026326:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002632c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026330:	05 80 03 00 00       	add    eax,0x380
c0026335:	89 c2                	mov    edx,eax
c0026337:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002633b:	89 02                	mov    DWORD PTR [edx],eax
c002633d:	90                   	nop
c002633e:	83 c4 28             	add    esp,0x28
c0026341:	5b                   	pop    ebx
c0026342:	c3                   	ret    
c0026343:	90                   	nop

c0026344 <APICTimer::open(int, int, void*)>:
c0026344:	57                   	push   edi
c0026345:	56                   	push   esi
c0026346:	53                   	push   ebx
c0026347:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002634b:	8b 00                	mov    eax,DWORD PTR [eax]
c002634d:	83 c0 24             	add    eax,0x24
c0026350:	8b 00                	mov    eax,DWORD PTR [eax]
c0026352:	83 ec 08             	sub    esp,0x8
c0026355:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026359:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002635d:	ff d0                	call   eax
c002635f:	83 c4 10             	add    esp,0x10
c0026362:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0026367:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002636d:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026373:	83 ec 0c             	sub    esp,0xc
c0026376:	50                   	push   eax
c0026377:	e8 ce f3 ff ff       	call   c002574a <APIC::getBase()>
c002637c:	83 c4 10             	add    esp,0x10
c002637f:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026385:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026389:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002638f:	0f b6 f8             	movzx  edi,al
c0026392:	89 d0                	mov    eax,edx
c0026394:	ba 00 00 00 00       	mov    edx,0x0
c0026399:	89 c1                	mov    ecx,eax
c002639b:	80 e5 ff             	and    ch,0xff
c002639e:	89 cb                	mov    ebx,ecx
c00263a0:	0f b6 f2             	movzx  esi,dl
c00263a3:	89 d8                	mov    eax,ebx
c00263a5:	89 f2                	mov    edx,esi
c00263a7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00263ab:	8d 5f 08             	lea    ebx,[edi+0x8]
c00263ae:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00263b2:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00263b6:	83 e0 00             	and    eax,0x0
c00263b9:	09 d0                	or     eax,edx
c00263bb:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00263bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263c3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00263c9:	8d 50 01             	lea    edx,[eax+0x1]
c00263cc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00263d0:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00263d6:	0f b6 d0             	movzx  edx,al
c00263d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263dd:	83 c2 08             	add    edx,0x8
c00263e0:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00263e4:	0f b6 c9             	movzx  ecx,cl
c00263e7:	81 c9 00 00 01 00    	or     ecx,0x10000
c00263ed:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00263f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263f5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00263f9:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00263ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026403:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026407:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002640d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026411:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026417:	83 ec 0c             	sub    esp,0xc
c002641a:	51                   	push   ecx
c002641b:	6a 01                	push   0x1
c002641d:	68 12 62 02 c0       	push   0xc0026212
c0026422:	52                   	push   edx
c0026423:	50                   	push   eax
c0026424:	e8 4b dd fe ff       	call   c0014174 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026429:	83 c4 20             	add    esp,0x20
c002642c:	89 c2                	mov    edx,eax
c002642e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026432:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026438:	b8 00 00 00 00       	mov    eax,0x0
c002643d:	5b                   	pop    ebx
c002643e:	5e                   	pop    esi
c002643f:	5f                   	pop    edi
c0026440:	c3                   	ret    
c0026441:	90                   	nop

c0026442 <APICTimer::APICTimer()>:
c0026442:	83 ec 0c             	sub    esp,0xc
c0026445:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026449:	83 ec 08             	sub    esp,0x8
c002644c:	68 f8 d2 02 c0       	push   0xc002d2f8
c0026451:	50                   	push   eax
c0026452:	e8 2b 07 ff ff       	call   c0016b82 <Timer::Timer(char const*)>
c0026457:	83 c4 10             	add    esp,0x10
c002645a:	ba 0c d3 02 c0       	mov    edx,0xc002d30c
c002645f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026463:	89 10                	mov    DWORD PTR [eax],edx
c0026465:	90                   	nop
c0026466:	83 c4 0c             	add    esp,0xc
c0026469:	c3                   	ret    

c002646a <PIT::write(int)>:
c002646a:	83 ec 10             	sub    esp,0x10
c002646d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026471:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026475:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002647b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002647f:	a3 24 28 03 c0       	mov    ds:0xc0032824,eax
c0026484:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026489:	99                   	cdq    
c002648a:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c002648e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026492:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026499:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c002649e:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00264a2:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00264a7:	ee                   	out    dx,al
c00264a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00264ac:	0f b6 c0             	movzx  eax,al
c00264af:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00264b6:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00264ba:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00264be:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00264c3:	ee                   	out    dx,al
c00264c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00264c8:	c1 f8 08             	sar    eax,0x8
c00264cb:	0f b6 c0             	movzx  eax,al
c00264ce:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c00264d5:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00264d9:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00264dd:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00264e2:	ee                   	out    dx,al
c00264e3:	90                   	nop
c00264e4:	83 c4 10             	add    esp,0x10
c00264e7:	c3                   	ret    

c00264e8 <pitHandler(regs*, void*)>:
c00264e8:	83 ec 0c             	sub    esp,0xc
c00264eb:	a1 24 28 03 c0       	mov    eax,ds:0xc0032824
c00264f0:	99                   	cdq    
c00264f1:	52                   	push   edx
c00264f2:	50                   	push   eax
c00264f3:	6a 00                	push   0x0
c00264f5:	68 00 ca 9a 3b       	push   0x3b9aca00
c00264fa:	e8 c5 04 00 00       	call   c00269c4 <__udivdi3>
c00264ff:	83 c4 10             	add    esp,0x10
c0026502:	83 ec 08             	sub    esp,0x8
c0026505:	52                   	push   edx
c0026506:	50                   	push   eax
c0026507:	e8 05 07 ff ff       	call   c0016c11 <timerHandler(unsigned long long)>
c002650c:	83 c4 10             	add    esp,0x10
c002650f:	90                   	nop
c0026510:	83 c4 0c             	add    esp,0xc
c0026513:	c3                   	ret    

c0026514 <PIT::open(int, int, void*)>:
c0026514:	83 ec 0c             	sub    esp,0xc
c0026517:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002651b:	8b 00                	mov    eax,DWORD PTR [eax]
c002651d:	83 c0 24             	add    eax,0x24
c0026520:	8b 00                	mov    eax,DWORD PTR [eax]
c0026522:	83 ec 08             	sub    esp,0x8
c0026525:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026529:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002652d:	ff d0                	call   eax
c002652f:	83 c4 10             	add    esp,0x10
c0026532:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026536:	83 ec 0c             	sub    esp,0xc
c0026539:	6a 00                	push   0x0
c002653b:	6a 01                	push   0x1
c002653d:	68 e8 64 02 c0       	push   0xc00264e8
c0026542:	6a 00                	push   0x0
c0026544:	50                   	push   eax
c0026545:	e8 2a dc fe ff       	call   c0014174 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002654a:	83 c4 20             	add    esp,0x20
c002654d:	89 c2                	mov    edx,eax
c002654f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026553:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026559:	b8 00 00 00 00       	mov    eax,0x0
c002655e:	83 c4 0c             	add    esp,0xc
c0026561:	c3                   	ret    

c0026562 <PIT::close(int, int, void*)>:
c0026562:	83 ec 0c             	sub    esp,0xc
c0026565:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026569:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0026573:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026577:	6a 01                	push   0x1
c0026579:	68 e8 64 02 c0       	push   0xc00264e8
c002657e:	6a 00                	push   0x0
c0026580:	50                   	push   eax
c0026581:	e8 2c dc fe ff       	call   c00141b2 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0026586:	83 c4 10             	add    esp,0x10
c0026589:	b8 00 00 00 00       	mov    eax,0x0
c002658e:	83 c4 0c             	add    esp,0xc
c0026591:	c3                   	ret    

c0026592 <PIT::PIT()>:
c0026592:	83 ec 0c             	sub    esp,0xc
c0026595:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026599:	83 ec 08             	sub    esp,0x8
c002659c:	68 34 d3 02 c0       	push   0xc002d334
c00265a1:	50                   	push   eax
c00265a2:	e8 db 05 ff ff       	call   c0016b82 <Timer::Timer(char const*)>
c00265a7:	83 c4 10             	add    esp,0x10
c00265aa:	ba 5c d3 02 c0       	mov    edx,0xc002d35c
c00265af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265b3:	89 10                	mov    DWORD PTR [eax],edx
c00265b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265b9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00265bf:	0f b6 d0             	movzx  edx,al
c00265c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265c6:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00265cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265d1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00265d7:	0f b6 d0             	movzx  edx,al
c00265da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265de:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c00265e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00265ed:	8d 50 01             	lea    edx,[eax+0x1]
c00265f0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00265f4:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00265fa:	0f b6 d0             	movzx  edx,al
c00265fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026601:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026605:	83 e1 3f             	and    ecx,0x3f
c0026608:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002660c:	90                   	nop
c002660d:	83 c4 0c             	add    esp,0xc
c0026610:	c3                   	ret    
c0026611:	66 90                	xchg   ax,ax
c0026613:	66 90                	xchg   ax,ax
c0026615:	66 90                	xchg   ax,ax
c0026617:	66 90                	xchg   ax,ax
c0026619:	66 90                	xchg   ax,ax
c002661b:	66 90                	xchg   ax,ax
c002661d:	66 90                	xchg   ax,ax
c002661f:	90                   	nop

c0026620 <avxDetect>:
c0026620:	b8 00 00 00 00       	mov    eax,0x0
c0026625:	c3                   	ret    

c0026626 <avxSave>:
c0026626:	c3                   	ret    

c0026627 <avxLoad>:
c0026627:	c3                   	ret    

c0026628 <avxInit>:
c0026628:	c3                   	ret    

c0026629 <avxClose>:
c0026629:	c3                   	ret    

c002662a <wouldSheSayYes>:
c002662a:	c3                   	ret    
c002662b:	49                   	dec    ecx
c002662c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026630:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026634:	75 20                	jne    c0026656 <sseDetect.noSSE+0x1>
c0026636:	4e                   	dec    esi
c0026637:	79 61                	jns    c002669a <x87Detect+0x14>
c0026639:	68 2e 2e 2e 00       	push   0x2e2e2e
c002663e:	66 90                	xchg   ax,ax

c0026640 <absolutelyNoChanceInHell>:
c0026640:	b8 01 00 00 00       	mov    eax,0x1
c0026645:	0f a2                	cpuid  
c0026647:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002664d:	74 06                	je     c0026655 <sseDetect.noSSE>
c002664f:	b8 01 00 00 00       	mov    eax,0x1
c0026654:	c3                   	ret    

c0026655 <sseDetect.noSSE>:
c0026655:	31 c0                	xor    eax,eax
c0026657:	c3                   	ret    

c0026658 <sseSave>:
c0026658:	0f ae 44 24 04       	fxsave [esp+0x4]
c002665d:	c3                   	ret    

c002665e <sseLoad>:
c002665e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0026663:	c3                   	ret    

c0026664 <sseInit>:
c0026664:	e8 49 00 00 00       	call   c00266b2 <x87Init>
c0026669:	0f 20 e0             	mov    eax,cr4
c002666c:	66 0d 00 06          	or     ax,0x600
c0026670:	0f 22 e0             	mov    cr4,eax
c0026673:	c3                   	ret    

c0026674 <sseClose>:
c0026674:	c3                   	ret    
c0026675:	66 90                	xchg   ax,ax
c0026677:	66 90                	xchg   ax,ax
c0026679:	66 90                	xchg   ax,ax
c002667b:	66 90                	xchg   ax,ax
c002667d:	66 90                	xchg   ax,ax
c002667f:	90                   	nop

c0026680 <value_37F>:
c0026680:	7f 03                	jg     c0026685 <value_37A+0x1>

c0026682 <value_37E>:
c0026682:	7e 03                	jle    c0026687 <x87Detect+0x1>

c0026684 <value_37A>:
c0026684:	7a 03                	jp     c0026689 <x87Detect+0x3>

c0026686 <x87Detect>:
c0026686:	b8 01 00 00 00       	mov    eax,0x1
c002668b:	0f a2                	cpuid  
c002668d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026693:	74 06                	je     c002669b <x87Detect.nox87>
c0026695:	b8 01 00 00 00       	mov    eax,0x1
c002669a:	c3                   	ret    

c002669b <x87Detect.nox87>:
c002669b:	b8 00 00 00 00       	mov    eax,0x0
c00266a0:	c3                   	ret    

c00266a1 <x87Save>:
c00266a1:	55                   	push   ebp
c00266a2:	89 e5                	mov    ebp,esp
c00266a4:	9b dd 75 08          	fsave  [ebp+0x8]
c00266a8:	c9                   	leave  
c00266a9:	c3                   	ret    

c00266aa <x87Load>:
c00266aa:	55                   	push   ebp
c00266ab:	89 e5                	mov    ebp,esp
c00266ad:	dd 65 08             	frstor [ebp+0x8]
c00266b0:	c9                   	leave  
c00266b1:	c3                   	ret    

c00266b2 <x87Init>:
c00266b2:	9b db e3             	finit  
c00266b5:	0f 20 c0             	mov    eax,cr0
c00266b8:	66 25 fb ff          	and    ax,0xfffb
c00266bc:	66 0d 22 00          	or     ax,0x22
c00266c0:	0f 22 c0             	mov    cr0,eax
c00266c3:	0f 06                	clts   
c00266c5:	d9 2d 84 66 02 c0    	fldcw  WORD PTR ds:0xc0026684
c00266cb:	c3                   	ret    

c00266cc <x87Close>:
c00266cc:	c3                   	ret    
c00266cd:	66 90                	xchg   ax,ax
c00266cf:	90                   	nop

c00266d0 <__do_global_ctors_aux>:
c00266d0:	a1 28 92 02 c0       	mov    eax,ds:0xc0029228
c00266d5:	83 f8 ff             	cmp    eax,0xffffffff
c00266d8:	74 1a                	je     c00266f4 <__do_global_ctors_aux+0x24>
c00266da:	55                   	push   ebp
c00266db:	89 e5                	mov    ebp,esp
c00266dd:	53                   	push   ebx
c00266de:	52                   	push   edx
c00266df:	bb 28 92 02 c0       	mov    ebx,0xc0029228
c00266e4:	ff d0                	call   eax
c00266e6:	83 eb 04             	sub    ebx,0x4
c00266e9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00266eb:	83 f8 ff             	cmp    eax,0xffffffff
c00266ee:	75 f4                	jne    c00266e4 <__do_global_ctors_aux+0x14>
c00266f0:	58                   	pop    eax
c00266f1:	5b                   	pop    ebx
c00266f2:	5d                   	pop    ebp
c00266f3:	c3                   	ret    
c00266f4:	c3                   	ret    
c00266f5:	66 90                	xchg   ax,ax
c00266f7:	90                   	nop

c00266f8 <__divdi3>:
c00266f8:	55                   	push   ebp
c00266f9:	57                   	push   edi
c00266fa:	56                   	push   esi
c00266fb:	53                   	push   ebx
c00266fc:	83 ec 1c             	sub    esp,0x1c
c00266ff:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0026703:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026707:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002670a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002670e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0026712:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026716:	85 db                	test   ebx,ebx
c0026718:	0f 88 8e 00 00 00    	js     c00267ac <__divdi3+0xb4>
c002671e:	89 dd                	mov    ebp,ebx
c0026720:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026728:	89 d3                	mov    ebx,edx
c002672a:	85 d2                	test   edx,edx
c002672c:	79 0d                	jns    c002673b <__divdi3+0x43>
c002672e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0026732:	f7 d8                	neg    eax
c0026734:	83 d2 00             	adc    edx,0x0
c0026737:	f7 da                	neg    edx
c0026739:	89 d3                	mov    ebx,edx
c002673b:	89 c7                	mov    edi,eax
c002673d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026740:	85 db                	test   ebx,ebx
c0026742:	75 48                	jne    c002678c <__divdi3+0x94>
c0026744:	39 ef                	cmp    edi,ebp
c0026746:	76 24                	jbe    c002676c <__divdi3+0x74>
c0026748:	89 ea                	mov    edx,ebp
c002674a:	f7 f7                	div    edi
c002674c:	89 c1                	mov    ecx,eax
c002674e:	31 f6                	xor    esi,esi
c0026750:	89 c8                	mov    eax,ecx
c0026752:	89 f2                	mov    edx,esi
c0026754:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026758:	85 c9                	test   ecx,ecx
c002675a:	74 07                	je     c0026763 <__divdi3+0x6b>
c002675c:	f7 d8                	neg    eax
c002675e:	83 d2 00             	adc    edx,0x0
c0026761:	f7 da                	neg    edx
c0026763:	83 c4 1c             	add    esp,0x1c
c0026766:	5b                   	pop    ebx
c0026767:	5e                   	pop    esi
c0026768:	5f                   	pop    edi
c0026769:	5d                   	pop    ebp
c002676a:	c3                   	ret    
c002676b:	90                   	nop
c002676c:	85 ff                	test   edi,edi
c002676e:	75 0b                	jne    c002677b <__divdi3+0x83>
c0026770:	b8 01 00 00 00       	mov    eax,0x1
c0026775:	31 d2                	xor    edx,edx
c0026777:	f7 f3                	div    ebx
c0026779:	89 c7                	mov    edi,eax
c002677b:	31 d2                	xor    edx,edx
c002677d:	89 e8                	mov    eax,ebp
c002677f:	f7 f7                	div    edi
c0026781:	89 c6                	mov    esi,eax
c0026783:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026786:	f7 f7                	div    edi
c0026788:	89 c1                	mov    ecx,eax
c002678a:	eb c4                	jmp    c0026750 <__divdi3+0x58>
c002678c:	39 eb                	cmp    ebx,ebp
c002678e:	77 3c                	ja     c00267cc <__divdi3+0xd4>
c0026790:	0f bd f3             	bsr    esi,ebx
c0026793:	83 f6 1f             	xor    esi,0x1f
c0026796:	75 40                	jne    c00267d8 <__divdi3+0xe0>
c0026798:	39 eb                	cmp    ebx,ebp
c002679a:	72 09                	jb     c00267a5 <__divdi3+0xad>
c002679c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002679f:	0f 87 97 00 00 00    	ja     c002683c <__divdi3+0x144>
c00267a5:	b9 01 00 00 00       	mov    ecx,0x1
c00267aa:	eb a4                	jmp    c0026750 <__divdi3+0x58>
c00267ac:	f7 d9                	neg    ecx
c00267ae:	83 d3 00             	adc    ebx,0x0
c00267b1:	f7 db                	neg    ebx
c00267b3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00267b6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00267ba:	89 dd                	mov    ebp,ebx
c00267bc:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00267c4:	e9 5f ff ff ff       	jmp    c0026728 <__divdi3+0x30>
c00267c9:	8d 76 00             	lea    esi,[esi+0x0]
c00267cc:	31 f6                	xor    esi,esi
c00267ce:	31 c9                	xor    ecx,ecx
c00267d0:	e9 7b ff ff ff       	jmp    c0026750 <__divdi3+0x58>
c00267d5:	8d 76 00             	lea    esi,[esi+0x0]
c00267d8:	b8 20 00 00 00       	mov    eax,0x20
c00267dd:	29 f0                	sub    eax,esi
c00267df:	89 f1                	mov    ecx,esi
c00267e1:	d3 e3                	shl    ebx,cl
c00267e3:	89 fa                	mov    edx,edi
c00267e5:	88 c1                	mov    cl,al
c00267e7:	d3 ea                	shr    edx,cl
c00267e9:	09 da                	or     edx,ebx
c00267eb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00267ef:	89 f1                	mov    ecx,esi
c00267f1:	d3 e7                	shl    edi,cl
c00267f3:	89 eb                	mov    ebx,ebp
c00267f5:	88 c1                	mov    cl,al
c00267f7:	d3 eb                	shr    ebx,cl
c00267f9:	89 f1                	mov    ecx,esi
c00267fb:	d3 e5                	shl    ebp,cl
c00267fd:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026800:	88 c1                	mov    cl,al
c0026802:	d3 ea                	shr    edx,cl
c0026804:	09 d5                	or     ebp,edx
c0026806:	89 e8                	mov    eax,ebp
c0026808:	89 da                	mov    edx,ebx
c002680a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002680e:	89 d3                	mov    ebx,edx
c0026810:	89 c5                	mov    ebp,eax
c0026812:	f7 e7                	mul    edi
c0026814:	39 d3                	cmp    ebx,edx
c0026816:	72 18                	jb     c0026830 <__divdi3+0x138>
c0026818:	74 0a                	je     c0026824 <__divdi3+0x12c>
c002681a:	89 e9                	mov    ecx,ebp
c002681c:	31 f6                	xor    esi,esi
c002681e:	e9 2d ff ff ff       	jmp    c0026750 <__divdi3+0x58>
c0026823:	90                   	nop
c0026824:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0026827:	89 f1                	mov    ecx,esi
c0026829:	d3 e7                	shl    edi,cl
c002682b:	39 c7                	cmp    edi,eax
c002682d:	73 eb                	jae    c002681a <__divdi3+0x122>
c002682f:	90                   	nop
c0026830:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0026833:	31 f6                	xor    esi,esi
c0026835:	e9 16 ff ff ff       	jmp    c0026750 <__divdi3+0x58>
c002683a:	66 90                	xchg   ax,ax
c002683c:	31 c9                	xor    ecx,ecx
c002683e:	e9 0d ff ff ff       	jmp    c0026750 <__divdi3+0x58>
c0026843:	90                   	nop

c0026844 <__moddi3>:
c0026844:	55                   	push   ebp
c0026845:	57                   	push   edi
c0026846:	56                   	push   esi
c0026847:	53                   	push   ebx
c0026848:	83 ec 2c             	sub    esp,0x2c
c002684b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002684f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0026853:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0026857:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002685b:	85 db                	test   ebx,ebx
c002685d:	0f 88 85 00 00 00    	js     c00268e8 <__moddi3+0xa4>
c0026863:	89 de                	mov    esi,ebx
c0026865:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002686d:	89 d7                	mov    edi,edx
c002686f:	85 d2                	test   edx,edx
c0026871:	79 09                	jns    c002687c <__moddi3+0x38>
c0026873:	f7 d8                	neg    eax
c0026875:	83 d2 00             	adc    edx,0x0
c0026878:	f7 da                	neg    edx
c002687a:	89 d7                	mov    edi,edx
c002687c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026880:	89 cd                	mov    ebp,ecx
c0026882:	85 ff                	test   edi,edi
c0026884:	75 52                	jne    c00268d8 <__moddi3+0x94>
c0026886:	89 c3                	mov    ebx,eax
c0026888:	39 f0                	cmp    eax,esi
c002688a:	76 24                	jbe    c00268b0 <__moddi3+0x6c>
c002688c:	89 c8                	mov    eax,ecx
c002688e:	89 f2                	mov    edx,esi
c0026890:	f7 f3                	div    ebx
c0026892:	89 d6                	mov    esi,edx
c0026894:	89 f0                	mov    eax,esi
c0026896:	31 d2                	xor    edx,edx
c0026898:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002689c:	85 c9                	test   ecx,ecx
c002689e:	74 07                	je     c00268a7 <__moddi3+0x63>
c00268a0:	f7 d8                	neg    eax
c00268a2:	83 d2 00             	adc    edx,0x0
c00268a5:	f7 da                	neg    edx
c00268a7:	83 c4 2c             	add    esp,0x2c
c00268aa:	5b                   	pop    ebx
c00268ab:	5e                   	pop    esi
c00268ac:	5f                   	pop    edi
c00268ad:	5d                   	pop    ebp
c00268ae:	c3                   	ret    
c00268af:	90                   	nop
c00268b0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00268b4:	85 db                	test   ebx,ebx
c00268b6:	75 0d                	jne    c00268c5 <__moddi3+0x81>
c00268b8:	b8 01 00 00 00       	mov    eax,0x1
c00268bd:	31 d2                	xor    edx,edx
c00268bf:	f7 f7                	div    edi
c00268c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00268c5:	89 f0                	mov    eax,esi
c00268c7:	31 d2                	xor    edx,edx
c00268c9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00268cd:	f7 f7                	div    edi
c00268cf:	89 e8                	mov    eax,ebp
c00268d1:	f7 f7                	div    edi
c00268d3:	89 d6                	mov    esi,edx
c00268d5:	eb bd                	jmp    c0026894 <__moddi3+0x50>
c00268d7:	90                   	nop
c00268d8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00268dc:	39 f7                	cmp    edi,esi
c00268de:	76 20                	jbe    c0026900 <__moddi3+0xbc>
c00268e0:	89 c8                	mov    eax,ecx
c00268e2:	89 f2                	mov    edx,esi
c00268e4:	eb b2                	jmp    c0026898 <__moddi3+0x54>
c00268e6:	66 90                	xchg   ax,ax
c00268e8:	f7 d9                	neg    ecx
c00268ea:	83 d3 00             	adc    ebx,0x0
c00268ed:	f7 db                	neg    ebx
c00268ef:	89 de                	mov    esi,ebx
c00268f1:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00268f9:	e9 6f ff ff ff       	jmp    c002686d <__moddi3+0x29>
c00268fe:	66 90                	xchg   ax,ax
c0026900:	0f bd c7             	bsr    eax,edi
c0026903:	83 f0 1f             	xor    eax,0x1f
c0026906:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002690a:	75 24                	jne    c0026930 <__moddi3+0xec>
c002690c:	39 f7                	cmp    edi,esi
c002690e:	72 06                	jb     c0026916 <__moddi3+0xd2>
c0026910:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0026914:	77 0c                	ja     c0026922 <__moddi3+0xde>
c0026916:	89 e9                	mov    ecx,ebp
c0026918:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002691c:	19 fe                	sbb    esi,edi
c002691e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026922:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026926:	89 f2                	mov    edx,esi
c0026928:	e9 6b ff ff ff       	jmp    c0026898 <__moddi3+0x54>
c002692d:	8d 76 00             	lea    esi,[esi+0x0]
c0026930:	b8 20 00 00 00       	mov    eax,0x20
c0026935:	89 c2                	mov    edx,eax
c0026937:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002693b:	29 da                	sub    edx,ebx
c002693d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026941:	88 d9                	mov    cl,bl
c0026943:	d3 e7                	shl    edi,cl
c0026945:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026949:	88 d1                	mov    cl,dl
c002694b:	d3 e8                	shr    eax,cl
c002694d:	09 c7                	or     edi,eax
c002694f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0026953:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026957:	89 d8                	mov    eax,ebx
c0026959:	88 d9                	mov    cl,bl
c002695b:	d3 e7                	shl    edi,cl
c002695d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026961:	89 f3                	mov    ebx,esi
c0026963:	88 d1                	mov    cl,dl
c0026965:	d3 eb                	shr    ebx,cl
c0026967:	89 c7                	mov    edi,eax
c0026969:	88 c1                	mov    cl,al
c002696b:	d3 e6                	shl    esi,cl
c002696d:	89 e8                	mov    eax,ebp
c002696f:	88 d1                	mov    cl,dl
c0026971:	d3 e8                	shr    eax,cl
c0026973:	09 f0                	or     eax,esi
c0026975:	89 f9                	mov    ecx,edi
c0026977:	d3 e5                	shl    ebp,cl
c0026979:	89 da                	mov    edx,ebx
c002697b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002697f:	89 d3                	mov    ebx,edx
c0026981:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026985:	89 c6                	mov    esi,eax
c0026987:	89 d1                	mov    ecx,edx
c0026989:	39 d3                	cmp    ebx,edx
c002698b:	72 27                	jb     c00269b4 <__moddi3+0x170>
c002698d:	74 21                	je     c00269b0 <__moddi3+0x16c>
c002698f:	29 f5                	sub    ebp,esi
c0026991:	19 cb                	sbb    ebx,ecx
c0026993:	89 de                	mov    esi,ebx
c0026995:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026999:	d3 e6                	shl    esi,cl
c002699b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002699f:	89 f9                	mov    ecx,edi
c00269a1:	d3 ed                	shr    ebp,cl
c00269a3:	09 ee                	or     esi,ebp
c00269a5:	89 f0                	mov    eax,esi
c00269a7:	d3 eb                	shr    ebx,cl
c00269a9:	89 da                	mov    edx,ebx
c00269ab:	e9 e8 fe ff ff       	jmp    c0026898 <__moddi3+0x54>
c00269b0:	39 c5                	cmp    ebp,eax
c00269b2:	73 db                	jae    c002698f <__moddi3+0x14b>
c00269b4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00269b8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00269bc:	89 d1                	mov    ecx,edx
c00269be:	89 c6                	mov    esi,eax
c00269c0:	eb cd                	jmp    c002698f <__moddi3+0x14b>
c00269c2:	66 90                	xchg   ax,ax

c00269c4 <__udivdi3>:
c00269c4:	55                   	push   ebp
c00269c5:	57                   	push   edi
c00269c6:	56                   	push   esi
c00269c7:	53                   	push   ebx
c00269c8:	83 ec 1c             	sub    esp,0x1c
c00269cb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00269cf:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00269d3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00269d7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00269db:	85 d2                	test   edx,edx
c00269dd:	75 41                	jne    c0026a20 <__udivdi3+0x5c>
c00269df:	39 f7                	cmp    edi,esi
c00269e1:	76 15                	jbe    c00269f8 <__udivdi3+0x34>
c00269e3:	89 e8                	mov    eax,ebp
c00269e5:	89 f2                	mov    edx,esi
c00269e7:	f7 f7                	div    edi
c00269e9:	31 db                	xor    ebx,ebx
c00269eb:	89 da                	mov    edx,ebx
c00269ed:	83 c4 1c             	add    esp,0x1c
c00269f0:	5b                   	pop    ebx
c00269f1:	5e                   	pop    esi
c00269f2:	5f                   	pop    edi
c00269f3:	5d                   	pop    ebp
c00269f4:	c3                   	ret    
c00269f5:	8d 76 00             	lea    esi,[esi+0x0]
c00269f8:	89 f9                	mov    ecx,edi
c00269fa:	85 ff                	test   edi,edi
c00269fc:	75 0b                	jne    c0026a09 <__udivdi3+0x45>
c00269fe:	b8 01 00 00 00       	mov    eax,0x1
c0026a03:	31 d2                	xor    edx,edx
c0026a05:	f7 f7                	div    edi
c0026a07:	89 c1                	mov    ecx,eax
c0026a09:	31 d2                	xor    edx,edx
c0026a0b:	89 f0                	mov    eax,esi
c0026a0d:	f7 f1                	div    ecx
c0026a0f:	89 c3                	mov    ebx,eax
c0026a11:	89 e8                	mov    eax,ebp
c0026a13:	f7 f1                	div    ecx
c0026a15:	89 da                	mov    edx,ebx
c0026a17:	83 c4 1c             	add    esp,0x1c
c0026a1a:	5b                   	pop    ebx
c0026a1b:	5e                   	pop    esi
c0026a1c:	5f                   	pop    edi
c0026a1d:	5d                   	pop    ebp
c0026a1e:	c3                   	ret    
c0026a1f:	90                   	nop
c0026a20:	39 f2                	cmp    edx,esi
c0026a22:	77 1c                	ja     c0026a40 <__udivdi3+0x7c>
c0026a24:	0f bd da             	bsr    ebx,edx
c0026a27:	83 f3 1f             	xor    ebx,0x1f
c0026a2a:	75 24                	jne    c0026a50 <__udivdi3+0x8c>
c0026a2c:	39 f2                	cmp    edx,esi
c0026a2e:	72 08                	jb     c0026a38 <__udivdi3+0x74>
c0026a30:	39 ef                	cmp    edi,ebp
c0026a32:	0f 87 84 00 00 00    	ja     c0026abc <__udivdi3+0xf8>
c0026a38:	b8 01 00 00 00       	mov    eax,0x1
c0026a3d:	eb ac                	jmp    c00269eb <__udivdi3+0x27>
c0026a3f:	90                   	nop
c0026a40:	31 db                	xor    ebx,ebx
c0026a42:	31 c0                	xor    eax,eax
c0026a44:	89 da                	mov    edx,ebx
c0026a46:	83 c4 1c             	add    esp,0x1c
c0026a49:	5b                   	pop    ebx
c0026a4a:	5e                   	pop    esi
c0026a4b:	5f                   	pop    edi
c0026a4c:	5d                   	pop    ebp
c0026a4d:	c3                   	ret    
c0026a4e:	66 90                	xchg   ax,ax
c0026a50:	b8 20 00 00 00       	mov    eax,0x20
c0026a55:	29 d8                	sub    eax,ebx
c0026a57:	88 d9                	mov    cl,bl
c0026a59:	d3 e2                	shl    edx,cl
c0026a5b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026a5f:	89 fa                	mov    edx,edi
c0026a61:	88 c1                	mov    cl,al
c0026a63:	d3 ea                	shr    edx,cl
c0026a65:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026a69:	09 d1                	or     ecx,edx
c0026a6b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026a6f:	88 d9                	mov    cl,bl
c0026a71:	d3 e7                	shl    edi,cl
c0026a73:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026a77:	89 f7                	mov    edi,esi
c0026a79:	88 c1                	mov    cl,al
c0026a7b:	d3 ef                	shr    edi,cl
c0026a7d:	88 d9                	mov    cl,bl
c0026a7f:	d3 e6                	shl    esi,cl
c0026a81:	89 ea                	mov    edx,ebp
c0026a83:	88 c1                	mov    cl,al
c0026a85:	d3 ea                	shr    edx,cl
c0026a87:	09 d6                	or     esi,edx
c0026a89:	89 f0                	mov    eax,esi
c0026a8b:	89 fa                	mov    edx,edi
c0026a8d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026a91:	89 d7                	mov    edi,edx
c0026a93:	89 c6                	mov    esi,eax
c0026a95:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026a99:	39 d7                	cmp    edi,edx
c0026a9b:	72 13                	jb     c0026ab0 <__udivdi3+0xec>
c0026a9d:	74 09                	je     c0026aa8 <__udivdi3+0xe4>
c0026a9f:	89 f0                	mov    eax,esi
c0026aa1:	31 db                	xor    ebx,ebx
c0026aa3:	e9 43 ff ff ff       	jmp    c00269eb <__udivdi3+0x27>
c0026aa8:	88 d9                	mov    cl,bl
c0026aaa:	d3 e5                	shl    ebp,cl
c0026aac:	39 c5                	cmp    ebp,eax
c0026aae:	73 ef                	jae    c0026a9f <__udivdi3+0xdb>
c0026ab0:	8d 46 ff             	lea    eax,[esi-0x1]
c0026ab3:	31 db                	xor    ebx,ebx
c0026ab5:	e9 31 ff ff ff       	jmp    c00269eb <__udivdi3+0x27>
c0026aba:	66 90                	xchg   ax,ax
c0026abc:	31 c0                	xor    eax,eax
c0026abe:	e9 28 ff ff ff       	jmp    c00269eb <__udivdi3+0x27>
c0026ac3:	90                   	nop

c0026ac4 <__umoddi3>:
c0026ac4:	55                   	push   ebp
c0026ac5:	57                   	push   edi
c0026ac6:	56                   	push   esi
c0026ac7:	53                   	push   ebx
c0026ac8:	83 ec 1c             	sub    esp,0x1c
c0026acb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026acf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026ad3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026ad7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026adb:	89 da                	mov    edx,ebx
c0026add:	85 c0                	test   eax,eax
c0026adf:	75 37                	jne    c0026b18 <__umoddi3+0x54>
c0026ae1:	39 df                	cmp    edi,ebx
c0026ae3:	76 13                	jbe    c0026af8 <__umoddi3+0x34>
c0026ae5:	89 f0                	mov    eax,esi
c0026ae7:	f7 f7                	div    edi
c0026ae9:	89 d0                	mov    eax,edx
c0026aeb:	31 d2                	xor    edx,edx
c0026aed:	83 c4 1c             	add    esp,0x1c
c0026af0:	5b                   	pop    ebx
c0026af1:	5e                   	pop    esi
c0026af2:	5f                   	pop    edi
c0026af3:	5d                   	pop    ebp
c0026af4:	c3                   	ret    
c0026af5:	8d 76 00             	lea    esi,[esi+0x0]
c0026af8:	89 fd                	mov    ebp,edi
c0026afa:	85 ff                	test   edi,edi
c0026afc:	75 0b                	jne    c0026b09 <__umoddi3+0x45>
c0026afe:	b8 01 00 00 00       	mov    eax,0x1
c0026b03:	31 d2                	xor    edx,edx
c0026b05:	f7 f7                	div    edi
c0026b07:	89 c5                	mov    ebp,eax
c0026b09:	89 d8                	mov    eax,ebx
c0026b0b:	31 d2                	xor    edx,edx
c0026b0d:	f7 f5                	div    ebp
c0026b0f:	89 f0                	mov    eax,esi
c0026b11:	f7 f5                	div    ebp
c0026b13:	89 d0                	mov    eax,edx
c0026b15:	eb d4                	jmp    c0026aeb <__umoddi3+0x27>
c0026b17:	90                   	nop
c0026b18:	89 f1                	mov    ecx,esi
c0026b1a:	39 d8                	cmp    eax,ebx
c0026b1c:	76 0a                	jbe    c0026b28 <__umoddi3+0x64>
c0026b1e:	89 f0                	mov    eax,esi
c0026b20:	83 c4 1c             	add    esp,0x1c
c0026b23:	5b                   	pop    ebx
c0026b24:	5e                   	pop    esi
c0026b25:	5f                   	pop    edi
c0026b26:	5d                   	pop    ebp
c0026b27:	c3                   	ret    
c0026b28:	0f bd e8             	bsr    ebp,eax
c0026b2b:	83 f5 1f             	xor    ebp,0x1f
c0026b2e:	75 1c                	jne    c0026b4c <__umoddi3+0x88>
c0026b30:	39 d8                	cmp    eax,ebx
c0026b32:	72 04                	jb     c0026b38 <__umoddi3+0x74>
c0026b34:	39 f7                	cmp    edi,esi
c0026b36:	77 08                	ja     c0026b40 <__umoddi3+0x7c>
c0026b38:	89 da                	mov    edx,ebx
c0026b3a:	29 fe                	sub    esi,edi
c0026b3c:	19 c2                	sbb    edx,eax
c0026b3e:	89 f1                	mov    ecx,esi
c0026b40:	89 c8                	mov    eax,ecx
c0026b42:	83 c4 1c             	add    esp,0x1c
c0026b45:	5b                   	pop    ebx
c0026b46:	5e                   	pop    esi
c0026b47:	5f                   	pop    edi
c0026b48:	5d                   	pop    ebp
c0026b49:	c3                   	ret    
c0026b4a:	66 90                	xchg   ax,ax
c0026b4c:	ba 20 00 00 00       	mov    edx,0x20
c0026b51:	29 ea                	sub    edx,ebp
c0026b53:	89 e9                	mov    ecx,ebp
c0026b55:	d3 e0                	shl    eax,cl
c0026b57:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026b5b:	89 f8                	mov    eax,edi
c0026b5d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026b61:	88 d1                	mov    cl,dl
c0026b63:	d3 e8                	shr    eax,cl
c0026b65:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026b69:	09 c1                	or     ecx,eax
c0026b6b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026b6f:	89 e9                	mov    ecx,ebp
c0026b71:	d3 e7                	shl    edi,cl
c0026b73:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026b77:	89 d8                	mov    eax,ebx
c0026b79:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026b7d:	88 d1                	mov    cl,dl
c0026b7f:	d3 e8                	shr    eax,cl
c0026b81:	89 c7                	mov    edi,eax
c0026b83:	89 e9                	mov    ecx,ebp
c0026b85:	d3 e3                	shl    ebx,cl
c0026b87:	89 f0                	mov    eax,esi
c0026b89:	88 d1                	mov    cl,dl
c0026b8b:	d3 e8                	shr    eax,cl
c0026b8d:	09 d8                	or     eax,ebx
c0026b8f:	89 e9                	mov    ecx,ebp
c0026b91:	d3 e6                	shl    esi,cl
c0026b93:	89 f3                	mov    ebx,esi
c0026b95:	89 fa                	mov    edx,edi
c0026b97:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026b9b:	89 d1                	mov    ecx,edx
c0026b9d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026ba1:	89 c6                	mov    esi,eax
c0026ba3:	89 d7                	mov    edi,edx
c0026ba5:	39 d1                	cmp    ecx,edx
c0026ba7:	72 27                	jb     c0026bd0 <__umoddi3+0x10c>
c0026ba9:	74 21                	je     c0026bcc <__umoddi3+0x108>
c0026bab:	89 ca                	mov    edx,ecx
c0026bad:	29 f3                	sub    ebx,esi
c0026baf:	19 fa                	sbb    edx,edi
c0026bb1:	89 d0                	mov    eax,edx
c0026bb3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026bb7:	d3 e0                	shl    eax,cl
c0026bb9:	89 e9                	mov    ecx,ebp
c0026bbb:	d3 eb                	shr    ebx,cl
c0026bbd:	09 d8                	or     eax,ebx
c0026bbf:	d3 ea                	shr    edx,cl
c0026bc1:	83 c4 1c             	add    esp,0x1c
c0026bc4:	5b                   	pop    ebx
c0026bc5:	5e                   	pop    esi
c0026bc6:	5f                   	pop    edi
c0026bc7:	5d                   	pop    ebp
c0026bc8:	c3                   	ret    
c0026bc9:	8d 76 00             	lea    esi,[esi+0x0]
c0026bcc:	39 c3                	cmp    ebx,eax
c0026bce:	73 db                	jae    c0026bab <__umoddi3+0xe7>
c0026bd0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026bd4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026bd8:	89 d7                	mov    edi,edx
c0026bda:	89 c6                	mov    esi,eax
c0026bdc:	eb cd                	jmp    c0026bab <__umoddi3+0xe7>

c0026bde <__addsf3>:
c0026bde:	55                   	push   ebp
c0026bdf:	89 e5                	mov    ebp,esp
c0026be1:	57                   	push   edi
c0026be2:	56                   	push   esi
c0026be3:	53                   	push   ebx
c0026be4:	83 ec 08             	sub    esp,0x8
c0026be7:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026bea:	89 fa                	mov    edx,edi
c0026bec:	89 f8                	mov    eax,edi
c0026bee:	c1 f8 17             	sar    eax,0x17
c0026bf1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026bf4:	c1 e2 08             	shl    edx,0x8
c0026bf7:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026bfd:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026c00:	89 de                	mov    esi,ebx
c0026c02:	c1 fe 17             	sar    esi,0x17
c0026c05:	c1 e3 08             	shl    ebx,0x8
c0026c08:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026c0e:	31 f0                	xor    eax,esi
c0026c10:	0f 88 3b 01 00 00    	js     c0026d51 <__addsf3+0x173>
c0026c16:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026c19:	29 f1                	sub    ecx,esi
c0026c1b:	85 c9                	test   ecx,ecx
c0026c1d:	7e 54                	jle    c0026c73 <__addsf3+0x95>
c0026c1f:	89 f0                	mov    eax,esi
c0026c21:	84 c0                	test   al,al
c0026c23:	75 10                	jne    c0026c35 <__addsf3+0x57>
c0026c25:	85 db                	test   ebx,ebx
c0026c27:	0f 84 aa 02 00 00    	je     c0026ed7 <__addsf3+0x2f9>
c0026c2d:	49                   	dec    ecx
c0026c2e:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026c31:	74 38                	je     c0026c6b <__addsf3+0x8d>
c0026c33:	eb 13                	jmp    c0026c48 <__addsf3+0x6a>
c0026c35:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026c38:	f7 d0                	not    eax
c0026c3a:	84 c0                	test   al,al
c0026c3c:	0f 84 95 02 00 00    	je     c0026ed7 <__addsf3+0x2f9>
c0026c42:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026c48:	83 f9 1f             	cmp    ecx,0x1f
c0026c4b:	0f 8f 86 02 00 00    	jg     c0026ed7 <__addsf3+0x2f9>
c0026c51:	89 de                	mov    esi,ebx
c0026c53:	d3 ee                	shr    esi,cl
c0026c55:	b8 20 00 00 00       	mov    eax,0x20
c0026c5a:	29 c8                	sub    eax,ecx
c0026c5c:	89 c1                	mov    ecx,eax
c0026c5e:	d3 e3                	shl    ebx,cl
c0026c60:	31 c0                	xor    eax,eax
c0026c62:	85 db                	test   ebx,ebx
c0026c64:	0f 95 c0             	setne  al
c0026c67:	09 f0                	or     eax,esi
c0026c69:	01 d0                	add    eax,edx
c0026c6b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026c6e:	e9 b6 00 00 00       	jmp    c0026d29 <__addsf3+0x14b>
c0026c73:	74 5c                	je     c0026cd1 <__addsf3+0xf3>
c0026c75:	89 f1                	mov    ecx,esi
c0026c77:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026c7a:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026c7d:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026c81:	75 14                	jne    c0026c97 <__addsf3+0xb9>
c0026c83:	85 d2                	test   edx,edx
c0026c85:	0f 84 4c 02 00 00    	je     c0026ed7 <__addsf3+0x2f9>
c0026c8b:	49                   	dec    ecx
c0026c8c:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026c8f:	0f 84 94 00 00 00    	je     c0026d29 <__addsf3+0x14b>
c0026c95:	eb 12                	jmp    c0026ca9 <__addsf3+0xcb>
c0026c97:	89 f0                	mov    eax,esi
c0026c99:	f7 d0                	not    eax
c0026c9b:	84 c0                	test   al,al
c0026c9d:	0f 84 34 02 00 00    	je     c0026ed7 <__addsf3+0x2f9>
c0026ca3:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026ca9:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026cac:	83 f9 1f             	cmp    ecx,0x1f
c0026caf:	0f 8f 22 02 00 00    	jg     c0026ed7 <__addsf3+0x2f9>
c0026cb5:	89 d7                	mov    edi,edx
c0026cb7:	d3 ef                	shr    edi,cl
c0026cb9:	b8 20 00 00 00       	mov    eax,0x20
c0026cbe:	29 c8                	sub    eax,ecx
c0026cc0:	89 c1                	mov    ecx,eax
c0026cc2:	d3 e2                	shl    edx,cl
c0026cc4:	31 c0                	xor    eax,eax
c0026cc6:	85 d2                	test   edx,edx
c0026cc8:	0f 95 c0             	setne  al
c0026ccb:	09 f8                	or     eax,edi
c0026ccd:	01 d8                	add    eax,ebx
c0026ccf:	eb 58                	jmp    c0026d29 <__addsf3+0x14b>
c0026cd1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026cd4:	8d 70 01             	lea    esi,[eax+0x1]
c0026cd7:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026cdd:	75 32                	jne    c0026d11 <__addsf3+0x133>
c0026cdf:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026ce3:	75 1f                	jne    c0026d04 <__addsf3+0x126>
c0026ce5:	85 d2                	test   edx,edx
c0026ce7:	0f 84 e0 01 00 00    	je     c0026ecd <__addsf3+0x2ef>
c0026ced:	85 db                	test   ebx,ebx
c0026cef:	0f 84 e2 01 00 00    	je     c0026ed7 <__addsf3+0x2f9>
c0026cf5:	89 d0                	mov    eax,edx
c0026cf7:	01 d8                	add    eax,ebx
c0026cf9:	0f 89 a9 01 00 00    	jns    c0026ea8 <__addsf3+0x2ca>
c0026cff:	e9 9d 01 00 00       	jmp    c0026ea1 <__addsf3+0x2c3>
c0026d04:	85 d2                	test   edx,edx
c0026d06:	0f 85 cb 01 00 00    	jne    c0026ed7 <__addsf3+0x2f9>
c0026d0c:	e9 bc 01 00 00       	jmp    c0026ecd <__addsf3+0x2ef>
c0026d11:	31 c0                	xor    eax,eax
c0026d13:	89 f1                	mov    ecx,esi
c0026d15:	f7 d1                	not    ecx
c0026d17:	84 c9                	test   cl,cl
c0026d19:	0f 84 90 01 00 00    	je     c0026eaf <__addsf3+0x2d1>
c0026d1f:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026d22:	d1 e8                	shr    eax,1
c0026d24:	e9 86 01 00 00       	jmp    c0026eaf <__addsf3+0x2d1>
c0026d29:	85 c0                	test   eax,eax
c0026d2b:	0f 89 7e 01 00 00    	jns    c0026eaf <__addsf3+0x2d1>
c0026d31:	46                   	inc    esi
c0026d32:	89 f2                	mov    edx,esi
c0026d34:	f7 d2                	not    edx
c0026d36:	84 d2                	test   dl,dl
c0026d38:	0f 84 6f 01 00 00    	je     c0026ead <__addsf3+0x2cf>
c0026d3e:	89 c2                	mov    edx,eax
c0026d40:	83 e2 01             	and    edx,0x1
c0026d43:	d1 e8                	shr    eax,1
c0026d45:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026d4a:	09 d0                	or     eax,edx
c0026d4c:	e9 5e 01 00 00       	jmp    c0026eaf <__addsf3+0x2d1>
c0026d51:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026d55:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026d58:	89 f0                	mov    eax,esi
c0026d5a:	0f b6 c0             	movzx  eax,al
c0026d5d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026d60:	29 c1                	sub    ecx,eax
c0026d62:	85 c9                	test   ecx,ecx
c0026d64:	7e 55                	jle    c0026dbb <__addsf3+0x1dd>
c0026d66:	85 c0                	test   eax,eax
c0026d68:	75 11                	jne    c0026d7b <__addsf3+0x19d>
c0026d6a:	85 db                	test   ebx,ebx
c0026d6c:	0f 84 65 01 00 00    	je     c0026ed7 <__addsf3+0x2f9>
c0026d72:	49                   	dec    ecx
c0026d73:	75 19                	jne    c0026d8e <__addsf3+0x1b0>
c0026d75:	89 d0                	mov    eax,edx
c0026d77:	29 d8                	sub    eax,ebx
c0026d79:	eb 38                	jmp    c0026db3 <__addsf3+0x1d5>
c0026d7b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026d7e:	f7 d0                	not    eax
c0026d80:	84 c0                	test   al,al
c0026d82:	0f 84 4f 01 00 00    	je     c0026ed7 <__addsf3+0x2f9>
c0026d88:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026d8e:	83 f9 1f             	cmp    ecx,0x1f
c0026d91:	0f 8f 40 01 00 00    	jg     c0026ed7 <__addsf3+0x2f9>
c0026d97:	89 de                	mov    esi,ebx
c0026d99:	d3 ee                	shr    esi,cl
c0026d9b:	b8 20 00 00 00       	mov    eax,0x20
c0026da0:	29 c8                	sub    eax,ecx
c0026da2:	89 c1                	mov    ecx,eax
c0026da4:	d3 e3                	shl    ebx,cl
c0026da6:	31 c0                	xor    eax,eax
c0026da8:	85 db                	test   ebx,ebx
c0026daa:	0f 95 c0             	setne  al
c0026dad:	09 f0                	or     eax,esi
c0026daf:	29 c2                	sub    edx,eax
c0026db1:	89 d0                	mov    eax,edx
c0026db3:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026db6:	e9 af 00 00 00       	jmp    c0026e6a <__addsf3+0x28c>
c0026dbb:	74 5c                	je     c0026e19 <__addsf3+0x23b>
c0026dbd:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026dc0:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026dc3:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026dc7:	75 14                	jne    c0026ddd <__addsf3+0x1ff>
c0026dc9:	85 d2                	test   edx,edx
c0026dcb:	0f 84 06 01 00 00    	je     c0026ed7 <__addsf3+0x2f9>
c0026dd1:	48                   	dec    eax
c0026dd2:	75 1b                	jne    c0026def <__addsf3+0x211>
c0026dd4:	89 d8                	mov    eax,ebx
c0026dd6:	29 d0                	sub    eax,edx
c0026dd8:	e9 8d 00 00 00       	jmp    c0026e6a <__addsf3+0x28c>
c0026ddd:	89 f1                	mov    ecx,esi
c0026ddf:	f7 d1                	not    ecx
c0026de1:	84 c9                	test   cl,cl
c0026de3:	0f 84 ee 00 00 00    	je     c0026ed7 <__addsf3+0x2f9>
c0026de9:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026def:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026df2:	83 f8 1f             	cmp    eax,0x1f
c0026df5:	0f 8f dc 00 00 00    	jg     c0026ed7 <__addsf3+0x2f9>
c0026dfb:	89 d7                	mov    edi,edx
c0026dfd:	88 c1                	mov    cl,al
c0026dff:	d3 ef                	shr    edi,cl
c0026e01:	b9 20 00 00 00       	mov    ecx,0x20
c0026e06:	29 c1                	sub    ecx,eax
c0026e08:	d3 e2                	shl    edx,cl
c0026e0a:	31 c0                	xor    eax,eax
c0026e0c:	85 d2                	test   edx,edx
c0026e0e:	0f 95 c0             	setne  al
c0026e11:	09 f8                	or     eax,edi
c0026e13:	29 c3                	sub    ebx,eax
c0026e15:	89 d8                	mov    eax,ebx
c0026e17:	eb 51                	jmp    c0026e6a <__addsf3+0x28c>
c0026e19:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026e1c:	40                   	inc    eax
c0026e1d:	a8 fe                	test   al,0xfe
c0026e1f:	75 3d                	jne    c0026e5e <__addsf3+0x280>
c0026e21:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026e25:	0f 85 a7 00 00 00    	jne    c0026ed2 <__addsf3+0x2f4>
c0026e2b:	85 d2                	test   edx,edx
c0026e2d:	75 12                	jne    c0026e41 <__addsf3+0x263>
c0026e2f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e32:	85 db                	test   ebx,ebx
c0026e34:	0f 85 9d 00 00 00    	jne    c0026ed7 <__addsf3+0x2f9>
c0026e3a:	31 ff                	xor    edi,edi
c0026e3c:	e9 96 00 00 00       	jmp    c0026ed7 <__addsf3+0x2f9>
c0026e41:	85 db                	test   ebx,ebx
c0026e43:	0f 84 8e 00 00 00    	je     c0026ed7 <__addsf3+0x2f9>
c0026e49:	89 d0                	mov    eax,edx
c0026e4b:	29 d8                	sub    eax,ebx
c0026e4d:	79 06                	jns    c0026e55 <__addsf3+0x277>
c0026e4f:	89 d8                	mov    eax,ebx
c0026e51:	29 d0                	sub    eax,edx
c0026e53:	eb 5a                	jmp    c0026eaf <__addsf3+0x2d1>
c0026e55:	bf 00 00 00 00       	mov    edi,0x0
c0026e5a:	74 7b                	je     c0026ed7 <__addsf3+0x2f9>
c0026e5c:	eb 4a                	jmp    c0026ea8 <__addsf3+0x2ca>
c0026e5e:	89 d0                	mov    eax,edx
c0026e60:	29 d8                	sub    eax,ebx
c0026e62:	79 12                	jns    c0026e76 <__addsf3+0x298>
c0026e64:	89 d8                	mov    eax,ebx
c0026e66:	29 d0                	sub    eax,edx
c0026e68:	eb 09                	jmp    c0026e73 <__addsf3+0x295>
c0026e6a:	85 c0                	test   eax,eax
c0026e6c:	79 41                	jns    c0026eaf <__addsf3+0x2d1>
c0026e6e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026e73:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026e76:	31 f6                	xor    esi,esi
c0026e78:	85 c0                	test   eax,eax
c0026e7a:	74 33                	je     c0026eaf <__addsf3+0x2d1>
c0026e7c:	0f bd c8             	bsr    ecx,eax
c0026e7f:	83 f1 1f             	xor    ecx,0x1f
c0026e82:	d3 e0                	shl    eax,cl
c0026e84:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026e88:	39 ca                	cmp    edx,ecx
c0026e8a:	7f 10                	jg     c0026e9c <__addsf3+0x2be>
c0026e8c:	29 d1                	sub    ecx,edx
c0026e8e:	41                   	inc    ecx
c0026e8f:	d3 e8                	shr    eax,cl
c0026e91:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026e94:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026e9a:	eb 13                	jmp    c0026eaf <__addsf3+0x2d1>
c0026e9c:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026e9f:	29 ce                	sub    esi,ecx
c0026ea1:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026ea6:	eb 07                	jmp    c0026eaf <__addsf3+0x2d1>
c0026ea8:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026eab:	eb 02                	jmp    c0026eaf <__addsf3+0x2d1>
c0026ead:	31 c0                	xor    eax,eax
c0026eaf:	89 c2                	mov    edx,eax
c0026eb1:	c1 ea 08             	shr    edx,0x8
c0026eb4:	a8 7f                	test   al,0x7f
c0026eb6:	0f 95 c1             	setne  cl
c0026eb9:	09 d1                	or     ecx,edx
c0026ebb:	83 e1 01             	and    ecx,0x1
c0026ebe:	c1 e8 07             	shr    eax,0x7
c0026ec1:	21 c8                	and    eax,ecx
c0026ec3:	c1 e6 17             	shl    esi,0x17
c0026ec6:	09 d6                	or     esi,edx
c0026ec8:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026ecb:	eb 0a                	jmp    c0026ed7 <__addsf3+0x2f9>
c0026ecd:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026ed0:	eb 05                	jmp    c0026ed7 <__addsf3+0x2f9>
c0026ed2:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026ed7:	89 f8                	mov    eax,edi
c0026ed9:	5a                   	pop    edx
c0026eda:	59                   	pop    ecx
c0026edb:	5b                   	pop    ebx
c0026edc:	5e                   	pop    esi
c0026edd:	5f                   	pop    edi
c0026ede:	5d                   	pop    ebp
c0026edf:	c3                   	ret    

c0026ee0 <__subsf3>:
c0026ee0:	55                   	push   ebp
c0026ee1:	89 e5                	mov    ebp,esp
c0026ee3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026ee6:	05 00 00 00 80       	add    eax,0x80000000
c0026eeb:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026eee:	5d                   	pop    ebp
c0026eef:	e9 ea fc ff ff       	jmp    c0026bde <__addsf3>

c0026ef4 <__negsf2>:
c0026ef4:	55                   	push   ebp
c0026ef5:	89 e5                	mov    ebp,esp
c0026ef7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026efa:	05 00 00 00 80       	add    eax,0x80000000
c0026eff:	5d                   	pop    ebp
c0026f00:	c3                   	ret    

c0026f01 <__mulsf3>:
c0026f01:	55                   	push   ebp
c0026f02:	89 e5                	mov    ebp,esp
c0026f04:	57                   	push   edi
c0026f05:	56                   	push   esi
c0026f06:	53                   	push   ebx
c0026f07:	83 ec 1c             	sub    esp,0x1c
c0026f0a:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026f0d:	89 f0                	mov    eax,esi
c0026f0f:	89 f1                	mov    ecx,esi
c0026f11:	c1 f9 17             	sar    ecx,0x17
c0026f14:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026f17:	c1 e0 08             	shl    eax,0x8
c0026f1a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026f1f:	89 c1                	mov    ecx,eax
c0026f21:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026f24:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026f27:	89 c7                	mov    edi,eax
c0026f29:	c1 ff 17             	sar    edi,0x17
c0026f2c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026f30:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026f33:	89 f8                	mov    eax,edi
c0026f35:	0f b6 c0             	movzx  eax,al
c0026f38:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026f3b:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026f3f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026f42:	42                   	inc    edx
c0026f43:	80 e2 fe             	and    dl,0xfe
c0026f46:	75 7b                	jne    c0026fc3 <__mulsf3+0xc2>
c0026f48:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026f4c:	74 54                	je     c0026fa2 <__mulsf3+0xa1>
c0026f4e:	85 c9                	test   ecx,ecx
c0026f50:	0f 85 64 01 00 00    	jne    c00270ba <__mulsf3+0x1b9>
c0026f56:	8d 57 01             	lea    edx,[edi+0x1]
c0026f59:	80 e2 fe             	and    dl,0xfe
c0026f5c:	75 1f                	jne    c0026f7d <__mulsf3+0x7c>
c0026f5e:	85 c0                	test   eax,eax
c0026f60:	b8 00 00 00 00       	mov    eax,0x0
c0026f65:	74 29                	je     c0026f90 <__mulsf3+0x8f>
c0026f67:	53                   	push   ebx
c0026f68:	53                   	push   ebx
c0026f69:	50                   	push   eax
c0026f6a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f6d:	e8 96 05 00 00       	call   c0027508 <__nesf2>
c0026f72:	83 c4 10             	add    esp,0x10
c0026f75:	85 c0                	test   eax,eax
c0026f77:	0f 85 3a 01 00 00    	jne    c00270b7 <__mulsf3+0x1b6>
c0026f7d:	85 ff                	test   edi,edi
c0026f7f:	0f 89 35 01 00 00    	jns    c00270ba <__mulsf3+0x1b9>
c0026f85:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026f8b:	e9 2a 01 00 00       	jmp    c00270ba <__mulsf3+0x1b9>
c0026f90:	51                   	push   ecx
c0026f91:	51                   	push   ecx
c0026f92:	50                   	push   eax
c0026f93:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f96:	e8 6d 05 00 00       	call   c0027508 <__nesf2>
c0026f9b:	83 c4 10             	add    esp,0x10
c0026f9e:	85 c0                	test   eax,eax
c0026fa0:	eb 15                	jmp    c0026fb7 <__mulsf3+0xb6>
c0026fa2:	85 c9                	test   ecx,ecx
c0026fa4:	74 0b                	je     c0026fb1 <__mulsf3+0xb0>
c0026fa6:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026fa9:	01 c9                	add    ecx,ecx
c0026fab:	78 16                	js     c0026fc3 <__mulsf3+0xc2>
c0026fad:	89 d3                	mov    ebx,edx
c0026faf:	eb f5                	jmp    c0026fa6 <__mulsf3+0xa5>
c0026fb1:	89 f8                	mov    eax,edi
c0026fb3:	f7 d0                	not    eax
c0026fb5:	84 c0                	test   al,al
c0026fb7:	75 c4                	jne    c0026f7d <__mulsf3+0x7c>
c0026fb9:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026fbe:	e9 f7 00 00 00       	jmp    c00270ba <__mulsf3+0x1b9>
c0026fc3:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026fc6:	c1 e6 08             	shl    esi,0x8
c0026fc9:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026fcf:	8d 57 01             	lea    edx,[edi+0x1]
c0026fd2:	80 e2 fe             	and    dl,0xfe
c0026fd5:	75 63                	jne    c002703a <__mulsf3+0x139>
c0026fd7:	85 c0                	test   eax,eax
c0026fd9:	74 2f                	je     c002700a <__mulsf3+0x109>
c0026fdb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026fdf:	0f 89 d2 00 00 00    	jns    c00270b7 <__mulsf3+0x1b6>
c0026fe5:	52                   	push   edx
c0026fe6:	52                   	push   edx
c0026fe7:	6a 00                	push   0x0
c0026fe9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026fec:	e8 dc 04 00 00       	call   c00274cd <__eqsf2>
c0026ff1:	83 c4 10             	add    esp,0x10
c0026ff4:	85 c0                	test   eax,eax
c0026ff6:	0f 85 bb 00 00 00    	jne    c00270b7 <__mulsf3+0x1b6>
c0026ffc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026fff:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0027005:	e9 b0 00 00 00       	jmp    c00270ba <__mulsf3+0x1b9>
c002700a:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c002700d:	50                   	push   eax
c002700e:	50                   	push   eax
c002700f:	6a 00                	push   0x0
c0027011:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027014:	e8 b4 04 00 00       	call   c00274cd <__eqsf2>
c0027019:	83 c4 10             	add    esp,0x10
c002701c:	85 c0                	test   eax,eax
c002701e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027021:	75 0c                	jne    c002702f <__mulsf3+0x12e>
c0027023:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027027:	0f 89 8a 00 00 00    	jns    c00270b7 <__mulsf3+0x1b6>
c002702d:	eb cd                	jmp    c0026ffc <__mulsf3+0xfb>
c002702f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027032:	01 f6                	add    esi,esi
c0027034:	78 04                	js     c002703a <__mulsf3+0x139>
c0027036:	89 c3                	mov    ebx,eax
c0027038:	eb f5                	jmp    c002702f <__mulsf3+0x12e>
c002703a:	89 c8                	mov    eax,ecx
c002703c:	0d 00 00 00 80       	or     eax,0x80000000
c0027041:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027047:	f7 e6                	mul    esi
c0027049:	85 c0                	test   eax,eax
c002704b:	0f 95 c0             	setne  al
c002704e:	0f b6 c0             	movzx  eax,al
c0027051:	09 c2                	or     edx,eax
c0027053:	78 03                	js     c0027058 <__mulsf3+0x157>
c0027055:	01 d2                	add    edx,edx
c0027057:	4b                   	dec    ebx
c0027058:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c002705e:	7f 22                	jg     c0027082 <__mulsf3+0x181>
c0027060:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027066:	85 db                	test   ebx,ebx
c0027068:	7f 23                	jg     c002708d <__mulsf3+0x18c>
c002706a:	83 fb e9             	cmp    ebx,0xffffffe9
c002706d:	7c 1a                	jl     c0027089 <__mulsf3+0x188>
c002706f:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027075:	b9 01 00 00 00       	mov    ecx,0x1
c002707a:	29 d9                	sub    ecx,ebx
c002707c:	d3 ea                	shr    edx,cl
c002707e:	31 db                	xor    ebx,ebx
c0027080:	eb 0b                	jmp    c002708d <__mulsf3+0x18c>
c0027082:	bb ff 00 00 00       	mov    ebx,0xff
c0027087:	eb 02                	jmp    c002708b <__mulsf3+0x18a>
c0027089:	31 db                	xor    ebx,ebx
c002708b:	31 d2                	xor    edx,edx
c002708d:	89 d0                	mov    eax,edx
c002708f:	c1 e8 08             	shr    eax,0x8
c0027092:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027095:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c002709b:	09 fb                	or     ebx,edi
c002709d:	c1 e3 17             	shl    ebx,0x17
c00270a0:	09 c3                	or     ebx,eax
c00270a2:	f6 c2 7f             	test   dl,0x7f
c00270a5:	0f 95 c1             	setne  cl
c00270a8:	09 c8                	or     eax,ecx
c00270aa:	83 e0 01             	and    eax,0x1
c00270ad:	c1 ea 07             	shr    edx,0x7
c00270b0:	21 c2                	and    edx,eax
c00270b2:	8d 34 13             	lea    esi,[ebx+edx*1]
c00270b5:	eb 03                	jmp    c00270ba <__mulsf3+0x1b9>
c00270b7:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00270ba:	89 f0                	mov    eax,esi
c00270bc:	8d 65 f4             	lea    esp,[ebp-0xc]
c00270bf:	5b                   	pop    ebx
c00270c0:	5e                   	pop    esi
c00270c1:	5f                   	pop    edi
c00270c2:	5d                   	pop    ebp
c00270c3:	c3                   	ret    

c00270c4 <__divsf3>:
c00270c4:	55                   	push   ebp
c00270c5:	89 e5                	mov    ebp,esp
c00270c7:	57                   	push   edi
c00270c8:	56                   	push   esi
c00270c9:	53                   	push   ebx
c00270ca:	83 ec 1c             	sub    esp,0x1c
c00270cd:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00270d0:	89 d8                	mov    eax,ebx
c00270d2:	89 d9                	mov    ecx,ebx
c00270d4:	c1 f9 17             	sar    ecx,0x17
c00270d7:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00270da:	c1 e0 08             	shl    eax,0x8
c00270dd:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00270e2:	89 c1                	mov    ecx,eax
c00270e4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00270e7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00270ea:	89 c7                	mov    edi,eax
c00270ec:	c1 ff 17             	sar    edi,0x17
c00270ef:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00270f3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00270f6:	89 f8                	mov    eax,edi
c00270f8:	0f b6 c0             	movzx  eax,al
c00270fb:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00270fe:	29 c6                	sub    esi,eax
c0027100:	83 c6 7f             	add    esi,0x7f
c0027103:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027106:	42                   	inc    edx
c0027107:	80 e2 fe             	and    dl,0xfe
c002710a:	0f 85 9c 00 00 00    	jne    c00271ac <__divsf3+0xe8>
c0027110:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027114:	74 33                	je     c0027149 <__divsf3+0x85>
c0027116:	85 c9                	test   ecx,ecx
c0027118:	0f 85 c7 01 00 00    	jne    c00272e5 <__divsf3+0x221>
c002711e:	8d 57 01             	lea    edx,[edi+0x1]
c0027121:	80 e2 fe             	and    dl,0xfe
c0027124:	75 2f                	jne    c0027155 <__divsf3+0x91>
c0027126:	85 c0                	test   eax,eax
c0027128:	74 2b                	je     c0027155 <__divsf3+0x91>
c002712a:	51                   	push   ecx
c002712b:	51                   	push   ecx
c002712c:	6a 00                	push   0x0
c002712e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027131:	e8 d2 03 00 00       	call   c0027508 <__nesf2>
c0027136:	83 c4 10             	add    esp,0x10
c0027139:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002713c:	85 c0                	test   eax,eax
c002713e:	0f 85 a1 01 00 00    	jne    c00272e5 <__divsf3+0x221>
c0027144:	e9 92 01 00 00       	jmp    c00272db <__divsf3+0x217>
c0027149:	85 c9                	test   ecx,ecx
c002714b:	75 1b                	jne    c0027168 <__divsf3+0xa4>
c002714d:	8d 57 01             	lea    edx,[edi+0x1]
c0027150:	80 e2 fe             	and    dl,0xfe
c0027153:	74 1e                	je     c0027173 <__divsf3+0xaf>
c0027155:	85 ff                	test   edi,edi
c0027157:	0f 89 88 01 00 00    	jns    c00272e5 <__divsf3+0x221>
c002715d:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0027163:	e9 7d 01 00 00       	jmp    c00272e5 <__divsf3+0x221>
c0027168:	8d 56 ff             	lea    edx,[esi-0x1]
c002716b:	01 c9                	add    ecx,ecx
c002716d:	78 3d                	js     c00271ac <__divsf3+0xe8>
c002716f:	89 d6                	mov    esi,edx
c0027171:	eb f5                	jmp    c0027168 <__divsf3+0xa4>
c0027173:	85 c0                	test   eax,eax
c0027175:	b8 00 00 00 00       	mov    eax,0x0
c002717a:	74 18                	je     c0027194 <__divsf3+0xd0>
c002717c:	52                   	push   edx
c002717d:	52                   	push   edx
c002717e:	50                   	push   eax
c002717f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027182:	e8 81 03 00 00       	call   c0027508 <__nesf2>
c0027187:	83 c4 10             	add    esp,0x10
c002718a:	85 c0                	test   eax,eax
c002718c:	0f 85 50 01 00 00    	jne    c00272e2 <__divsf3+0x21e>
c0027192:	eb c1                	jmp    c0027155 <__divsf3+0x91>
c0027194:	56                   	push   esi
c0027195:	56                   	push   esi
c0027196:	50                   	push   eax
c0027197:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002719a:	e8 69 03 00 00       	call   c0027508 <__nesf2>
c002719f:	83 c4 10             	add    esp,0x10
c00271a2:	85 c0                	test   eax,eax
c00271a4:	0f 84 31 01 00 00    	je     c00272db <__divsf3+0x217>
c00271aa:	eb a9                	jmp    c0027155 <__divsf3+0x91>
c00271ac:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c00271af:	c1 e3 08             	shl    ebx,0x8
c00271b2:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00271b8:	8d 57 01             	lea    edx,[edi+0x1]
c00271bb:	80 e2 fe             	and    dl,0xfe
c00271be:	75 71                	jne    c0027231 <__divsf3+0x16d>
c00271c0:	85 c0                	test   eax,eax
c00271c2:	ba 00 00 00 00       	mov    edx,0x0
c00271c7:	74 2f                	je     c00271f8 <__divsf3+0x134>
c00271c9:	51                   	push   ecx
c00271ca:	51                   	push   ecx
c00271cb:	52                   	push   edx
c00271cc:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271cf:	e8 f9 02 00 00       	call   c00274cd <__eqsf2>
c00271d4:	83 c4 10             	add    esp,0x10
c00271d7:	85 c0                	test   eax,eax
c00271d9:	0f 85 03 01 00 00    	jne    c00272e2 <__divsf3+0x21e>
c00271df:	31 d2                	xor    edx,edx
c00271e1:	89 d3                	mov    ebx,edx
c00271e3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00271e6:	31 f8                	xor    eax,edi
c00271e8:	0f 89 f7 00 00 00    	jns    c00272e5 <__divsf3+0x221>
c00271ee:	bb 00 00 00 80       	mov    ebx,0x80000000
c00271f3:	e9 ed 00 00 00       	jmp    c00272e5 <__divsf3+0x221>
c00271f8:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00271fb:	50                   	push   eax
c00271fc:	50                   	push   eax
c00271fd:	52                   	push   edx
c00271fe:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027201:	e8 c7 02 00 00       	call   c00274cd <__eqsf2>
c0027206:	83 c4 10             	add    esp,0x10
c0027209:	85 c0                	test   eax,eax
c002720b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002720e:	75 16                	jne    c0027226 <__divsf3+0x162>
c0027210:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027213:	31 fb                	xor    ebx,edi
c0027215:	81 e3 00 00 00 80    	and    ebx,0x80000000
c002721b:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027221:	e9 bf 00 00 00       	jmp    c00272e5 <__divsf3+0x221>
c0027226:	8d 46 01             	lea    eax,[esi+0x1]
c0027229:	01 db                	add    ebx,ebx
c002722b:	78 04                	js     c0027231 <__divsf3+0x16d>
c002722d:	89 c6                	mov    esi,eax
c002722f:	eb f5                	jmp    c0027226 <__divsf3+0x162>
c0027231:	89 c8                	mov    eax,ecx
c0027233:	0d 00 00 00 80       	or     eax,0x80000000
c0027238:	81 cb 00 00 00 80    	or     ebx,0x80000000
c002723e:	31 d2                	xor    edx,edx
c0027240:	39 d8                	cmp    eax,ebx
c0027242:	72 07                	jb     c002724b <__divsf3+0x187>
c0027244:	29 d8                	sub    eax,ebx
c0027246:	ba 01 00 00 00       	mov    edx,0x1
c002724b:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0027252:	01 d2                	add    edx,edx
c0027254:	89 c1                	mov    ecx,eax
c0027256:	01 c0                	add    eax,eax
c0027258:	85 c9                	test   ecx,ecx
c002725a:	78 04                	js     c0027260 <__divsf3+0x19c>
c002725c:	39 c3                	cmp    ebx,eax
c002725e:	77 05                	ja     c0027265 <__divsf3+0x1a1>
c0027260:	29 d8                	sub    eax,ebx
c0027262:	83 ca 01             	or     edx,0x1
c0027265:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027268:	75 e8                	jne    c0027252 <__divsf3+0x18e>
c002726a:	85 c0                	test   eax,eax
c002726c:	0f 95 c0             	setne  al
c002726f:	0f b6 c0             	movzx  eax,al
c0027272:	c1 e2 06             	shl    edx,0x6
c0027275:	09 c2                	or     edx,eax
c0027277:	78 03                	js     c002727c <__divsf3+0x1b8>
c0027279:	01 d2                	add    edx,edx
c002727b:	4e                   	dec    esi
c002727c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0027282:	7f 22                	jg     c00272a6 <__divsf3+0x1e2>
c0027284:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002728a:	85 f6                	test   esi,esi
c002728c:	7f 23                	jg     c00272b1 <__divsf3+0x1ed>
c002728e:	83 fe e9             	cmp    esi,0xffffffe9
c0027291:	7c 1a                	jl     c00272ad <__divsf3+0x1e9>
c0027293:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027299:	b9 01 00 00 00       	mov    ecx,0x1
c002729e:	29 f1                	sub    ecx,esi
c00272a0:	d3 ea                	shr    edx,cl
c00272a2:	31 f6                	xor    esi,esi
c00272a4:	eb 0b                	jmp    c00272b1 <__divsf3+0x1ed>
c00272a6:	be ff 00 00 00       	mov    esi,0xff
c00272ab:	eb 02                	jmp    c00272af <__divsf3+0x1eb>
c00272ad:	31 f6                	xor    esi,esi
c00272af:	31 d2                	xor    edx,edx
c00272b1:	89 d0                	mov    eax,edx
c00272b3:	c1 e8 08             	shr    eax,0x8
c00272b6:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c00272b9:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c00272bf:	09 fe                	or     esi,edi
c00272c1:	c1 e6 17             	shl    esi,0x17
c00272c4:	09 c6                	or     esi,eax
c00272c6:	f6 c2 7f             	test   dl,0x7f
c00272c9:	0f 95 c1             	setne  cl
c00272cc:	09 c8                	or     eax,ecx
c00272ce:	83 e0 01             	and    eax,0x1
c00272d1:	c1 ea 07             	shr    edx,0x7
c00272d4:	21 c2                	and    edx,eax
c00272d6:	8d 1c 16             	lea    ebx,[esi+edx*1]
c00272d9:	eb 0a                	jmp    c00272e5 <__divsf3+0x221>
c00272db:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c00272e0:	eb 03                	jmp    c00272e5 <__divsf3+0x221>
c00272e2:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00272e5:	89 d8                	mov    eax,ebx
c00272e7:	8d 65 f4             	lea    esp,[ebp-0xc]
c00272ea:	5b                   	pop    ebx
c00272eb:	5e                   	pop    esi
c00272ec:	5f                   	pop    edi
c00272ed:	5d                   	pop    ebp
c00272ee:	c3                   	ret    

c00272ef <__floatsisf>:
c00272ef:	55                   	push   ebp
c00272f0:	89 e5                	mov    ebp,esp
c00272f2:	53                   	push   ebx
c00272f3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00272f6:	85 d2                	test   edx,edx
c00272f8:	7e 2b                	jle    c0027325 <__floatsisf+0x36>
c00272fa:	0f bd ca             	bsr    ecx,edx
c00272fd:	83 f1 1f             	xor    ecx,0x1f
c0027300:	d3 e2                	shl    edx,cl
c0027302:	89 d0                	mov    eax,edx
c0027304:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027309:	89 c3                	mov    ebx,eax
c002730b:	c1 eb 08             	shr    ebx,0x8
c002730e:	80 e2 7f             	and    dl,0x7f
c0027311:	0f 95 c2             	setne  dl
c0027314:	09 da                	or     edx,ebx
c0027316:	83 e2 01             	and    edx,0x1
c0027319:	c1 e8 07             	shr    eax,0x7
c002731c:	21 c2                	and    edx,eax
c002731e:	b8 9e 00 00 00       	mov    eax,0x9e
c0027323:	eb 32                	jmp    c0027357 <__floatsisf+0x68>
c0027325:	b8 00 00 00 00       	mov    eax,0x0
c002732a:	74 34                	je     c0027360 <__floatsisf+0x71>
c002732c:	f7 da                	neg    edx
c002732e:	0f bd ca             	bsr    ecx,edx
c0027331:	83 f1 1f             	xor    ecx,0x1f
c0027334:	d3 e2                	shl    edx,cl
c0027336:	89 d0                	mov    eax,edx
c0027338:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002733d:	89 c3                	mov    ebx,eax
c002733f:	c1 eb 08             	shr    ebx,0x8
c0027342:	80 e2 7f             	and    dl,0x7f
c0027345:	0f 95 c2             	setne  dl
c0027348:	09 da                	or     edx,ebx
c002734a:	83 e2 01             	and    edx,0x1
c002734d:	c1 e8 07             	shr    eax,0x7
c0027350:	21 c2                	and    edx,eax
c0027352:	b8 9e 01 00 00       	mov    eax,0x19e
c0027357:	29 c8                	sub    eax,ecx
c0027359:	c1 e0 17             	shl    eax,0x17
c002735c:	09 d8                	or     eax,ebx
c002735e:	01 d0                	add    eax,edx
c0027360:	5b                   	pop    ebx
c0027361:	5d                   	pop    ebp
c0027362:	c3                   	ret    

c0027363 <__floatunsisf>:
c0027363:	55                   	push   ebp
c0027364:	89 e5                	mov    ebp,esp
c0027366:	53                   	push   ebx
c0027367:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002736a:	31 c0                	xor    eax,eax
c002736c:	85 d2                	test   edx,edx
c002736e:	74 32                	je     c00273a2 <__floatunsisf+0x3f>
c0027370:	0f bd ca             	bsr    ecx,edx
c0027373:	83 f1 1f             	xor    ecx,0x1f
c0027376:	d3 e2                	shl    edx,cl
c0027378:	89 d0                	mov    eax,edx
c002737a:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002737f:	89 c3                	mov    ebx,eax
c0027381:	c1 eb 08             	shr    ebx,0x8
c0027384:	80 e2 7f             	and    dl,0x7f
c0027387:	0f 95 c2             	setne  dl
c002738a:	09 da                	or     edx,ebx
c002738c:	83 e2 01             	and    edx,0x1
c002738f:	c1 e8 07             	shr    eax,0x7
c0027392:	21 c2                	and    edx,eax
c0027394:	b8 9e 00 00 00       	mov    eax,0x9e
c0027399:	29 c8                	sub    eax,ecx
c002739b:	c1 e0 17             	shl    eax,0x17
c002739e:	09 d8                	or     eax,ebx
c00273a0:	01 d0                	add    eax,edx
c00273a2:	5b                   	pop    ebx
c00273a3:	5d                   	pop    ebp
c00273a4:	c3                   	ret    

c00273a5 <__fixsfsi>:
c00273a5:	55                   	push   ebp
c00273a6:	89 e5                	mov    ebp,esp
c00273a8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00273ab:	89 d1                	mov    ecx,edx
c00273ad:	c1 e1 08             	shl    ecx,0x8
c00273b0:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c00273b6:	c1 fa 17             	sar    edx,0x17
c00273b9:	78 1c                	js     c00273d7 <__fixsfsi+0x32>
c00273bb:	83 ea 7f             	sub    edx,0x7f
c00273be:	31 c0                	xor    eax,eax
c00273c0:	83 fa 1e             	cmp    edx,0x1e
c00273c3:	77 40                	ja     c0027405 <__fixsfsi+0x60>
c00273c5:	89 c8                	mov    eax,ecx
c00273c7:	0d 00 00 00 80       	or     eax,0x80000000
c00273cc:	b9 1f 00 00 00       	mov    ecx,0x1f
c00273d1:	29 d1                	sub    ecx,edx
c00273d3:	d3 e8                	shr    eax,cl
c00273d5:	eb 2e                	jmp    c0027405 <__fixsfsi+0x60>
c00273d7:	31 c0                	xor    eax,eax
c00273d9:	81 c2 81 00 00 00    	add    edx,0x81
c00273df:	78 24                	js     c0027405 <__fixsfsi+0x60>
c00273e1:	83 fa 1e             	cmp    edx,0x1e
c00273e4:	7e 09                	jle    c00273ef <__fixsfsi+0x4a>
c00273e6:	83 fa 1f             	cmp    edx,0x1f
c00273e9:	75 18                	jne    c0027403 <__fixsfsi+0x5e>
c00273eb:	85 c9                	test   ecx,ecx
c00273ed:	75 14                	jne    c0027403 <__fixsfsi+0x5e>
c00273ef:	89 c8                	mov    eax,ecx
c00273f1:	0d 00 00 00 80       	or     eax,0x80000000
c00273f6:	b9 1f 00 00 00       	mov    ecx,0x1f
c00273fb:	29 d1                	sub    ecx,edx
c00273fd:	d3 e8                	shr    eax,cl
c00273ff:	f7 d8                	neg    eax
c0027401:	eb 02                	jmp    c0027405 <__fixsfsi+0x60>
c0027403:	31 c0                	xor    eax,eax
c0027405:	5d                   	pop    ebp
c0027406:	c3                   	ret    

c0027407 <__fixunssfsi>:
c0027407:	55                   	push   ebp
c0027408:	89 e5                	mov    ebp,esp
c002740a:	53                   	push   ebx
c002740b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002740e:	89 d3                	mov    ebx,edx
c0027410:	c1 fb 17             	sar    ebx,0x17
c0027413:	83 eb 7f             	sub    ebx,0x7f
c0027416:	31 c0                	xor    eax,eax
c0027418:	83 fb 1f             	cmp    ebx,0x1f
c002741b:	77 18                	ja     c0027435 <__fixunssfsi+0x2e>
c002741d:	89 d0                	mov    eax,edx
c002741f:	c1 e0 08             	shl    eax,0x8
c0027422:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027427:	0d 00 00 00 80       	or     eax,0x80000000
c002742c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027431:	29 d9                	sub    ecx,ebx
c0027433:	d3 e8                	shr    eax,cl
c0027435:	5b                   	pop    ebx
c0027436:	5d                   	pop    ebp
c0027437:	c3                   	ret    

c0027438 <__cmpsf2>:
c0027438:	55                   	push   ebp
c0027439:	89 e5                	mov    ebp,esp
c002743b:	57                   	push   edi
c002743c:	56                   	push   esi
c002743d:	53                   	push   ebx
c002743e:	83 ec 24             	sub    esp,0x24
c0027441:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027444:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027447:	e8 4f 10 00 00       	call   c002849b <__truncdfsf2>
c002744c:	5a                   	pop    edx
c002744d:	59                   	pop    ecx
c002744e:	89 c3                	mov    ebx,eax
c0027450:	c1 e8 17             	shr    eax,0x17
c0027453:	0f b6 f0             	movzx  esi,al
c0027456:	89 d8                	mov    eax,ebx
c0027458:	c1 e8 1f             	shr    eax,0x1f
c002745b:	31 c6                	xor    esi,eax
c002745d:	c1 e3 08             	shl    ebx,0x8
c0027460:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027463:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027466:	e8 30 10 00 00       	call   c002849b <__truncdfsf2>
c002746b:	83 c4 10             	add    esp,0x10
c002746e:	89 c1                	mov    ecx,eax
c0027470:	c1 e9 17             	shr    ecx,0x17
c0027473:	0f b6 c9             	movzx  ecx,cl
c0027476:	89 c7                	mov    edi,eax
c0027478:	c1 ef 1f             	shr    edi,0x1f
c002747b:	89 ca                	mov    edx,ecx
c002747d:	31 fa                	xor    edx,edi
c002747f:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027482:	c1 e0 08             	shl    eax,0x8
c0027485:	89 c2                	mov    edx,eax
c0027487:	89 d8                	mov    eax,ebx
c0027489:	09 d0                	or     eax,edx
c002748b:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027490:	09 f0                	or     eax,esi
c0027492:	75 08                	jne    c002749c <__cmpsf2+0x64>
c0027494:	31 c0                	xor    eax,eax
c0027496:	39 f9                	cmp    ecx,edi
c0027498:	75 0c                	jne    c00274a6 <__cmpsf2+0x6e>
c002749a:	eb 29                	jmp    c00274c5 <__cmpsf2+0x8d>
c002749c:	b8 01 00 00 00       	mov    eax,0x1
c00274a1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00274a4:	7f 1f                	jg     c00274c5 <__cmpsf2+0x8d>
c00274a6:	83 c8 ff             	or     eax,0xffffffff
c00274a9:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00274ac:	7c 17                	jl     c00274c5 <__cmpsf2+0x8d>
c00274ae:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00274b4:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00274ba:	b8 01 00 00 00       	mov    eax,0x1
c00274bf:	39 d3                	cmp    ebx,edx
c00274c1:	77 02                	ja     c00274c5 <__cmpsf2+0x8d>
c00274c3:	19 c0                	sbb    eax,eax
c00274c5:	8d 65 f4             	lea    esp,[ebp-0xc]
c00274c8:	5b                   	pop    ebx
c00274c9:	5e                   	pop    esi
c00274ca:	5f                   	pop    edi
c00274cb:	5d                   	pop    ebp
c00274cc:	c3                   	ret    

c00274cd <__eqsf2>:
c00274cd:	55                   	push   ebp
c00274ce:	89 e5                	mov    ebp,esp
c00274d0:	83 ec 24             	sub    esp,0x24
c00274d3:	6a 01                	push   0x1
c00274d5:	83 ec 0c             	sub    esp,0xc
c00274d8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00274db:	e8 df 10 00 00       	call   c00285bf <__extendsfdf2>
c00274e0:	83 c4 10             	add    esp,0x10
c00274e3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00274e6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00274e9:	52                   	push   edx
c00274ea:	50                   	push   eax
c00274eb:	50                   	push   eax
c00274ec:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00274ef:	e8 cb 10 00 00       	call   c00285bf <__extendsfdf2>
c00274f4:	59                   	pop    ecx
c00274f5:	59                   	pop    ecx
c00274f6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00274f9:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00274fc:	52                   	push   edx
c00274fd:	50                   	push   eax
c00274fe:	e8 35 ff ff ff       	call   c0027438 <__cmpsf2>
c0027503:	83 c4 20             	add    esp,0x20
c0027506:	c9                   	leave  
c0027507:	c3                   	ret    

c0027508 <__nesf2>:
c0027508:	eb c3                	jmp    c00274cd <__eqsf2>

c002750a <__gtsf2>:
c002750a:	55                   	push   ebp
c002750b:	89 e5                	mov    ebp,esp
c002750d:	83 ec 24             	sub    esp,0x24
c0027510:	6a ff                	push   0xffffffff
c0027512:	83 ec 0c             	sub    esp,0xc
c0027515:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027518:	e8 a2 10 00 00       	call   c00285bf <__extendsfdf2>
c002751d:	83 c4 10             	add    esp,0x10
c0027520:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027523:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027526:	52                   	push   edx
c0027527:	50                   	push   eax
c0027528:	50                   	push   eax
c0027529:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002752c:	e8 8e 10 00 00       	call   c00285bf <__extendsfdf2>
c0027531:	59                   	pop    ecx
c0027532:	59                   	pop    ecx
c0027533:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027536:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027539:	52                   	push   edx
c002753a:	50                   	push   eax
c002753b:	e8 f8 fe ff ff       	call   c0027438 <__cmpsf2>
c0027540:	83 c4 20             	add    esp,0x20
c0027543:	c9                   	leave  
c0027544:	c3                   	ret    

c0027545 <__gesf2>:
c0027545:	eb c3                	jmp    c002750a <__gtsf2>

c0027547 <__ltsf2>:
c0027547:	eb 84                	jmp    c00274cd <__eqsf2>

c0027549 <__lesf2>:
c0027549:	eb 82                	jmp    c00274cd <__eqsf2>

c002754b <__adddf3>:
c002754b:	55                   	push   ebp
c002754c:	89 e5                	mov    ebp,esp
c002754e:	57                   	push   edi
c002754f:	56                   	push   esi
c0027550:	53                   	push   ebx
c0027551:	83 ec 24             	sub    esp,0x24
c0027554:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027557:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002755a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002755d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027560:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027563:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027566:	89 c8                	mov    eax,ecx
c0027568:	89 ce                	mov    esi,ecx
c002756a:	c1 fe 14             	sar    esi,0x14
c002756d:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027570:	89 fb                	mov    ebx,edi
c0027572:	89 fa                	mov    edx,edi
c0027574:	c1 e2 0b             	shl    edx,0xb
c0027577:	c1 e0 0b             	shl    eax,0xb
c002757a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002757f:	c1 eb 15             	shr    ebx,0x15
c0027582:	09 d8                	or     eax,ebx
c0027584:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027587:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c002758a:	c1 fe 14             	sar    esi,0x14
c002758d:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027590:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027593:	89 f3                	mov    ebx,esi
c0027595:	c1 e3 0b             	shl    ebx,0xb
c0027598:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002759b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002759e:	c1 e3 0b             	shl    ebx,0xb
c00275a1:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c00275a7:	c1 ee 15             	shr    esi,0x15
c00275aa:	09 f3                	or     ebx,esi
c00275ac:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c00275af:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00275b2:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c00275b5:	0f 88 5f 02 00 00    	js     c002781a <__adddf3+0x2cf>
c00275bb:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00275be:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c00275c1:	85 db                	test   ebx,ebx
c00275c3:	0f 8e c7 00 00 00    	jle    c0027690 <__adddf3+0x145>
c00275c9:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c00275d0:	75 1a                	jne    c00275ec <__adddf3+0xa1>
c00275d2:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00275d5:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00275d8:	0f 84 b2 05 00 00    	je     c0027b90 <__adddf3+0x645>
c00275de:	4b                   	dec    ebx
c00275df:	75 23                	jne    c0027604 <__adddf3+0xb9>
c00275e1:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00275e4:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00275e7:	e9 99 00 00 00       	jmp    c0027685 <__adddf3+0x13a>
c00275ec:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00275ef:	f7 d6                	not    esi
c00275f1:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00275f7:	0f 84 93 05 00 00    	je     c0027b90 <__adddf3+0x645>
c00275fd:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027604:	83 fb 1f             	cmp    ebx,0x1f
c0027607:	7e 42                	jle    c002764b <__adddf3+0x100>
c0027609:	83 fb 3f             	cmp    ebx,0x3f
c002760c:	0f 8f 7e 05 00 00    	jg     c0027b90 <__adddf3+0x645>
c0027612:	83 e3 1f             	and    ebx,0x1f
c0027615:	89 d9                	mov    ecx,ebx
c0027617:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c002761a:	d3 ef                	shr    edi,cl
c002761c:	31 db                	xor    ebx,ebx
c002761e:	85 c9                	test   ecx,ecx
c0027620:	74 15                	je     c0027637 <__adddf3+0xec>
c0027622:	be 20 00 00 00       	mov    esi,0x20
c0027627:	29 ce                	sub    esi,ecx
c0027629:	89 f1                	mov    ecx,esi
c002762b:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002762e:	d3 e6                	shl    esi,cl
c0027630:	31 db                	xor    ebx,ebx
c0027632:	85 f6                	test   esi,esi
c0027634:	0f 95 c3             	setne  bl
c0027637:	31 c9                	xor    ecx,ecx
c0027639:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002763d:	0f 95 c1             	setne  cl
c0027640:	09 cf                	or     edi,ecx
c0027642:	09 fb                	or     ebx,edi
c0027644:	01 da                	add    edx,ebx
c0027646:	83 d0 00             	adc    eax,0x0
c0027649:	eb 3a                	jmp    c0027685 <__adddf3+0x13a>
c002764b:	bf 20 00 00 00       	mov    edi,0x20
c0027650:	29 df                	sub    edi,ebx
c0027652:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027655:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027658:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002765b:	d3 e6                	shl    esi,cl
c002765d:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027660:	88 d9                	mov    cl,bl
c0027662:	d3 ef                	shr    edi,cl
c0027664:	09 fe                	or     esi,edi
c0027666:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027669:	88 d9                	mov    cl,bl
c002766b:	d3 ef                	shr    edi,cl
c002766d:	89 fb                	mov    ebx,edi
c002766f:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027672:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027675:	d3 e7                	shl    edi,cl
c0027677:	85 ff                	test   edi,edi
c0027679:	0f 95 c1             	setne  cl
c002767c:	0f b6 c9             	movzx  ecx,cl
c002767f:	09 ce                	or     esi,ecx
c0027681:	01 f2                	add    edx,esi
c0027683:	11 d8                	adc    eax,ebx
c0027685:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027688:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002768b:	e9 52 01 00 00       	jmp    c00277e2 <__adddf3+0x297>
c0027690:	0f 84 d5 00 00 00    	je     c002776b <__adddf3+0x220>
c0027696:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027699:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c002769c:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002769f:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00276a2:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00276a9:	75 20                	jne    c00276cb <__adddf3+0x180>
c00276ab:	89 d6                	mov    esi,edx
c00276ad:	09 c6                	or     esi,eax
c00276af:	0f 84 db 04 00 00    	je     c0027b90 <__adddf3+0x645>
c00276b5:	4b                   	dec    ebx
c00276b6:	75 29                	jne    c00276e1 <__adddf3+0x196>
c00276b8:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00276bb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00276be:	01 d1                	add    ecx,edx
c00276c0:	11 c6                	adc    esi,eax
c00276c2:	89 f0                	mov    eax,esi
c00276c4:	89 ca                	mov    edx,ecx
c00276c6:	e9 17 01 00 00       	jmp    c00277e2 <__adddf3+0x297>
c00276cb:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00276ce:	f7 d6                	not    esi
c00276d0:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00276d6:	0f 84 b4 04 00 00    	je     c0027b90 <__adddf3+0x645>
c00276dc:	0d 00 00 00 80       	or     eax,0x80000000
c00276e1:	83 fb 1f             	cmp    ebx,0x1f
c00276e4:	7e 48                	jle    c002772e <__adddf3+0x1e3>
c00276e6:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00276e9:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00276ec:	83 fb 3f             	cmp    ebx,0x3f
c00276ef:	0f 8f 9b 04 00 00    	jg     c0027b90 <__adddf3+0x645>
c00276f5:	83 e3 1f             	and    ebx,0x1f
c00276f8:	89 d9                	mov    ecx,ebx
c00276fa:	89 c7                	mov    edi,eax
c00276fc:	d3 ef                	shr    edi,cl
c00276fe:	31 db                	xor    ebx,ebx
c0027700:	85 c9                	test   ecx,ecx
c0027702:	74 12                	je     c0027716 <__adddf3+0x1cb>
c0027704:	be 20 00 00 00       	mov    esi,0x20
c0027709:	29 ce                	sub    esi,ecx
c002770b:	89 f1                	mov    ecx,esi
c002770d:	d3 e0                	shl    eax,cl
c002770f:	31 db                	xor    ebx,ebx
c0027711:	85 c0                	test   eax,eax
c0027713:	0f 95 c3             	setne  bl
c0027716:	31 c0                	xor    eax,eax
c0027718:	85 d2                	test   edx,edx
c002771a:	0f 95 c0             	setne  al
c002771d:	09 c7                	or     edi,eax
c002771f:	09 fb                	or     ebx,edi
c0027721:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027724:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027727:	01 da                	add    edx,ebx
c0027729:	83 d6 00             	adc    esi,0x0
c002772c:	eb 39                	jmp    c0027767 <__adddf3+0x21c>
c002772e:	be 20 00 00 00       	mov    esi,0x20
c0027733:	29 de                	sub    esi,ebx
c0027735:	89 c7                	mov    edi,eax
c0027737:	89 f1                	mov    ecx,esi
c0027739:	d3 e7                	shl    edi,cl
c002773b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002773e:	89 d7                	mov    edi,edx
c0027740:	88 d9                	mov    cl,bl
c0027742:	d3 ef                	shr    edi,cl
c0027744:	89 f9                	mov    ecx,edi
c0027746:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027749:	09 cf                	or     edi,ecx
c002774b:	88 d9                	mov    cl,bl
c002774d:	d3 e8                	shr    eax,cl
c002774f:	89 f1                	mov    ecx,esi
c0027751:	d3 e2                	shl    edx,cl
c0027753:	85 d2                	test   edx,edx
c0027755:	0f 95 c2             	setne  dl
c0027758:	0f b6 d2             	movzx  edx,dl
c002775b:	09 d7                	or     edi,edx
c002775d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027760:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027763:	01 fa                	add    edx,edi
c0027765:	11 c6                	adc    esi,eax
c0027767:	89 f0                	mov    eax,esi
c0027769:	eb 77                	jmp    c00277e2 <__adddf3+0x297>
c002776b:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002776e:	46                   	inc    esi
c002776f:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027772:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027778:	75 41                	jne    c00277bb <__adddf3+0x270>
c002777a:	89 d3                	mov    ebx,edx
c002777c:	09 c3                	or     ebx,eax
c002777e:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027785:	75 27                	jne    c00277ae <__adddf3+0x263>
c0027787:	85 db                	test   ebx,ebx
c0027789:	0f 84 fb 03 00 00    	je     c0027b8a <__adddf3+0x63f>
c002778f:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027792:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027795:	0f 84 f5 03 00 00    	je     c0027b90 <__adddf3+0x645>
c002779b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002779e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00277a1:	85 c0                	test   eax,eax
c00277a3:	0f 89 91 03 00 00    	jns    c0027b3a <__adddf3+0x5ef>
c00277a9:	e9 85 03 00 00       	jmp    c0027b33 <__adddf3+0x5e8>
c00277ae:	85 db                	test   ebx,ebx
c00277b0:	0f 85 da 03 00 00    	jne    c0027b90 <__adddf3+0x645>
c00277b6:	e9 cf 03 00 00       	jmp    c0027b8a <__adddf3+0x63f>
c00277bb:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00277be:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00277c1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00277c4:	f7 d1                	not    ecx
c00277c6:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00277cc:	0f 84 70 03 00 00    	je     c0027b42 <__adddf3+0x5f7>
c00277d2:	d1 ea                	shr    edx,1
c00277d4:	89 c1                	mov    ecx,eax
c00277d6:	c1 e1 1f             	shl    ecx,0x1f
c00277d9:	09 ca                	or     edx,ecx
c00277db:	d1 e8                	shr    eax,1
c00277dd:	e9 6f 03 00 00       	jmp    c0027b51 <__adddf3+0x606>
c00277e2:	85 c0                	test   eax,eax
c00277e4:	0f 89 67 03 00 00    	jns    c0027b51 <__adddf3+0x606>
c00277ea:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c00277ed:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00277f0:	f7 d1                	not    ecx
c00277f2:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00277f8:	0f 84 44 03 00 00    	je     c0027b42 <__adddf3+0x5f7>
c00277fe:	89 d1                	mov    ecx,edx
c0027800:	d1 e9                	shr    ecx,1
c0027802:	83 e2 01             	and    edx,0x1
c0027805:	09 ca                	or     edx,ecx
c0027807:	89 c1                	mov    ecx,eax
c0027809:	c1 e1 1f             	shl    ecx,0x1f
c002780c:	09 ca                	or     edx,ecx
c002780e:	d1 e8                	shr    eax,1
c0027810:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0027815:	e9 37 03 00 00       	jmp    c0027b51 <__adddf3+0x606>
c002781a:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002781d:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027823:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0027826:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027829:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002782f:	29 de                	sub    esi,ebx
c0027831:	85 f6                	test   esi,esi
c0027833:	0f 8e bd 00 00 00    	jle    c00278f6 <__adddf3+0x3ab>
c0027839:	85 db                	test   ebx,ebx
c002783b:	75 17                	jne    c0027854 <__adddf3+0x309>
c002783d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027840:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027843:	0f 84 47 03 00 00    	je     c0027b90 <__adddf3+0x645>
c0027849:	4e                   	dec    esi
c002784a:	75 20                	jne    c002786c <__adddf3+0x321>
c002784c:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002784f:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027852:	eb 5b                	jmp    c00278af <__adddf3+0x364>
c0027854:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027857:	f7 d3                	not    ebx
c0027859:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002785f:	0f 84 2b 03 00 00    	je     c0027b90 <__adddf3+0x645>
c0027865:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002786c:	83 fe 1f             	cmp    esi,0x1f
c002786f:	7e 49                	jle    c00278ba <__adddf3+0x36f>
c0027871:	83 fe 3f             	cmp    esi,0x3f
c0027874:	0f 8f 16 03 00 00    	jg     c0027b90 <__adddf3+0x645>
c002787a:	83 e6 1f             	and    esi,0x1f
c002787d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027880:	89 f1                	mov    ecx,esi
c0027882:	d3 ef                	shr    edi,cl
c0027884:	31 db                	xor    ebx,ebx
c0027886:	85 f6                	test   esi,esi
c0027888:	74 13                	je     c002789d <__adddf3+0x352>
c002788a:	b9 20 00 00 00       	mov    ecx,0x20
c002788f:	29 f1                	sub    ecx,esi
c0027891:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027894:	d3 e6                	shl    esi,cl
c0027896:	31 db                	xor    ebx,ebx
c0027898:	85 f6                	test   esi,esi
c002789a:	0f 95 c3             	setne  bl
c002789d:	31 c9                	xor    ecx,ecx
c002789f:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00278a3:	0f 95 c1             	setne  cl
c00278a6:	09 cf                	or     edi,ecx
c00278a8:	09 fb                	or     ebx,edi
c00278aa:	29 da                	sub    edx,ebx
c00278ac:	83 d8 00             	sbb    eax,0x0
c00278af:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00278b2:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00278b5:	e9 aa 01 00 00       	jmp    c0027a64 <__adddf3+0x519>
c00278ba:	bf 20 00 00 00       	mov    edi,0x20
c00278bf:	29 f7                	sub    edi,esi
c00278c1:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00278c4:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00278c7:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00278ca:	d3 e3                	shl    ebx,cl
c00278cc:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00278cf:	89 f1                	mov    ecx,esi
c00278d1:	d3 ef                	shr    edi,cl
c00278d3:	09 fb                	or     ebx,edi
c00278d5:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00278d8:	89 f1                	mov    ecx,esi
c00278da:	d3 ef                	shr    edi,cl
c00278dc:	89 fe                	mov    esi,edi
c00278de:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00278e1:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00278e4:	d3 e7                	shl    edi,cl
c00278e6:	85 ff                	test   edi,edi
c00278e8:	0f 95 c1             	setne  cl
c00278eb:	0f b6 c9             	movzx  ecx,cl
c00278ee:	09 cb                	or     ebx,ecx
c00278f0:	29 da                	sub    edx,ebx
c00278f2:	19 f0                	sbb    eax,esi
c00278f4:	eb b9                	jmp    c00278af <__adddf3+0x364>
c00278f6:	0f 84 cd 00 00 00    	je     c00279c9 <__adddf3+0x47e>
c00278fc:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c00278ff:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027902:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027905:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027909:	75 1b                	jne    c0027926 <__adddf3+0x3db>
c002790b:	89 d6                	mov    esi,edx
c002790d:	09 c6                	or     esi,eax
c002790f:	0f 84 7b 02 00 00    	je     c0027b90 <__adddf3+0x645>
c0027915:	4b                   	dec    ebx
c0027916:	75 24                	jne    c002793c <__adddf3+0x3f1>
c0027918:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002791b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002791e:	29 d1                	sub    ecx,edx
c0027920:	19 c6                	sbb    esi,eax
c0027922:	89 ca                	mov    edx,ecx
c0027924:	eb 61                	jmp    c0027987 <__adddf3+0x43c>
c0027926:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027929:	f7 d6                	not    esi
c002792b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027931:	0f 84 59 02 00 00    	je     c0027b90 <__adddf3+0x645>
c0027937:	0d 00 00 00 80       	or     eax,0x80000000
c002793c:	83 fb 1f             	cmp    ebx,0x1f
c002793f:	7e 4d                	jle    c002798e <__adddf3+0x443>
c0027941:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027944:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027947:	83 fb 3f             	cmp    ebx,0x3f
c002794a:	0f 8f 40 02 00 00    	jg     c0027b90 <__adddf3+0x645>
c0027950:	83 e3 1f             	and    ebx,0x1f
c0027953:	89 d9                	mov    ecx,ebx
c0027955:	89 c7                	mov    edi,eax
c0027957:	d3 ef                	shr    edi,cl
c0027959:	31 db                	xor    ebx,ebx
c002795b:	85 c9                	test   ecx,ecx
c002795d:	74 12                	je     c0027971 <__adddf3+0x426>
c002795f:	be 20 00 00 00       	mov    esi,0x20
c0027964:	29 ce                	sub    esi,ecx
c0027966:	89 f1                	mov    ecx,esi
c0027968:	d3 e0                	shl    eax,cl
c002796a:	31 db                	xor    ebx,ebx
c002796c:	85 c0                	test   eax,eax
c002796e:	0f 95 c3             	setne  bl
c0027971:	31 c0                	xor    eax,eax
c0027973:	85 d2                	test   edx,edx
c0027975:	0f 95 c0             	setne  al
c0027978:	09 c7                	or     edi,eax
c002797a:	09 fb                	or     ebx,edi
c002797c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002797f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027982:	29 da                	sub    edx,ebx
c0027984:	83 de 00             	sbb    esi,0x0
c0027987:	89 f0                	mov    eax,esi
c0027989:	e9 d6 00 00 00       	jmp    c0027a64 <__adddf3+0x519>
c002798e:	be 20 00 00 00       	mov    esi,0x20
c0027993:	29 de                	sub    esi,ebx
c0027995:	89 c7                	mov    edi,eax
c0027997:	89 f1                	mov    ecx,esi
c0027999:	d3 e7                	shl    edi,cl
c002799b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002799e:	89 d7                	mov    edi,edx
c00279a0:	88 d9                	mov    cl,bl
c00279a2:	d3 ef                	shr    edi,cl
c00279a4:	89 f9                	mov    ecx,edi
c00279a6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00279a9:	09 cf                	or     edi,ecx
c00279ab:	88 d9                	mov    cl,bl
c00279ad:	d3 e8                	shr    eax,cl
c00279af:	89 f1                	mov    ecx,esi
c00279b1:	d3 e2                	shl    edx,cl
c00279b3:	85 d2                	test   edx,edx
c00279b5:	0f 95 c2             	setne  dl
c00279b8:	0f b6 d2             	movzx  edx,dl
c00279bb:	09 d7                	or     edi,edx
c00279bd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00279c0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00279c3:	29 fa                	sub    edx,edi
c00279c5:	19 c6                	sbb    esi,eax
c00279c7:	eb be                	jmp    c0027987 <__adddf3+0x43c>
c00279c9:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00279cc:	8d 5e 01             	lea    ebx,[esi+0x1]
c00279cf:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c00279d5:	75 6a                	jne    c0027a41 <__adddf3+0x4f6>
c00279d7:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00279db:	75 58                	jne    c0027a35 <__adddf3+0x4ea>
c00279dd:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00279e0:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00279e3:	89 d6                	mov    esi,edx
c00279e5:	09 c6                	or     esi,eax
c00279e7:	75 17                	jne    c0027a00 <__adddf3+0x4b5>
c00279e9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00279ec:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00279ef:	85 db                	test   ebx,ebx
c00279f1:	0f 85 99 01 00 00    	jne    c0027b90 <__adddf3+0x645>
c00279f7:	31 ff                	xor    edi,edi
c00279f9:	31 c9                	xor    ecx,ecx
c00279fb:	e9 90 01 00 00       	jmp    c0027b90 <__adddf3+0x645>
c0027a00:	85 db                	test   ebx,ebx
c0027a02:	0f 84 88 01 00 00    	je     c0027b90 <__adddf3+0x645>
c0027a08:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027a0b:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027a0e:	85 c0                	test   eax,eax
c0027a10:	79 10                	jns    c0027a22 <__adddf3+0x4d7>
c0027a12:	31 c9                	xor    ecx,ecx
c0027a14:	f7 da                	neg    edx
c0027a16:	0f 95 c1             	setne  cl
c0027a19:	01 c8                	add    eax,ecx
c0027a1b:	f7 d8                	neg    eax
c0027a1d:	e9 2f 01 00 00       	jmp    c0027b51 <__adddf3+0x606>
c0027a22:	31 ff                	xor    edi,edi
c0027a24:	31 c9                	xor    ecx,ecx
c0027a26:	89 c3                	mov    ebx,eax
c0027a28:	09 d3                	or     ebx,edx
c0027a2a:	0f 84 60 01 00 00    	je     c0027b90 <__adddf3+0x645>
c0027a30:	e9 05 01 00 00       	jmp    c0027b3a <__adddf3+0x5ef>
c0027a35:	31 ff                	xor    edi,edi
c0027a37:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027a3c:	e9 4f 01 00 00       	jmp    c0027b90 <__adddf3+0x645>
c0027a41:	89 c1                	mov    ecx,eax
c0027a43:	89 d0                	mov    eax,edx
c0027a45:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027a48:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0027a4b:	89 ca                	mov    edx,ecx
c0027a4d:	85 c9                	test   ecx,ecx
c0027a4f:	79 2c                	jns    c0027a7d <__adddf3+0x532>
c0027a51:	31 c9                	xor    ecx,ecx
c0027a53:	f7 d8                	neg    eax
c0027a55:	0f 95 c1             	setne  cl
c0027a58:	01 ca                	add    edx,ecx
c0027a5a:	f7 da                	neg    edx
c0027a5c:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027a5f:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027a62:	eb 19                	jmp    c0027a7d <__adddf3+0x532>
c0027a64:	85 c0                	test   eax,eax
c0027a66:	0f 89 e5 00 00 00    	jns    c0027b51 <__adddf3+0x606>
c0027a6c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027a71:	89 c1                	mov    ecx,eax
c0027a73:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027a76:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027a79:	89 d0                	mov    eax,edx
c0027a7b:	89 ca                	mov    edx,ecx
c0027a7d:	85 d2                	test   edx,edx
c0027a7f:	74 59                	je     c0027ada <__adddf3+0x58f>
c0027a81:	0f bd da             	bsr    ebx,edx
c0027a84:	83 f3 1f             	xor    ebx,0x1f
c0027a87:	88 d9                	mov    cl,bl
c0027a89:	d3 e2                	shl    edx,cl
c0027a8b:	bf 20 00 00 00       	mov    edi,0x20
c0027a90:	89 f9                	mov    ecx,edi
c0027a92:	29 d9                	sub    ecx,ebx
c0027a94:	89 c6                	mov    esi,eax
c0027a96:	d3 ee                	shr    esi,cl
c0027a98:	09 d6                	or     esi,edx
c0027a9a:	88 d9                	mov    cl,bl
c0027a9c:	d3 e0                	shl    eax,cl
c0027a9e:	89 c2                	mov    edx,eax
c0027aa0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027aa3:	25 ff 07 00 00       	and    eax,0x7ff
c0027aa8:	39 d8                	cmp    eax,ebx
c0027aaa:	7f 22                	jg     c0027ace <__adddf3+0x583>
c0027aac:	29 c3                	sub    ebx,eax
c0027aae:	43                   	inc    ebx
c0027aaf:	88 d9                	mov    cl,bl
c0027ab1:	d3 ea                	shr    edx,cl
c0027ab3:	29 df                	sub    edi,ebx
c0027ab5:	89 f9                	mov    ecx,edi
c0027ab7:	89 f0                	mov    eax,esi
c0027ab9:	d3 e0                	shl    eax,cl
c0027abb:	09 c2                	or     edx,eax
c0027abd:	89 f0                	mov    eax,esi
c0027abf:	88 d9                	mov    cl,bl
c0027ac1:	d3 e8                	shr    eax,cl
c0027ac3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027ac6:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027acc:	eb 6f                	jmp    c0027b3d <__adddf3+0x5f2>
c0027ace:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027ad1:	29 d8                	sub    eax,ebx
c0027ad3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027ad6:	89 f0                	mov    eax,esi
c0027ad8:	eb 59                	jmp    c0027b33 <__adddf3+0x5e8>
c0027ada:	85 c0                	test   eax,eax
c0027adc:	74 6a                	je     c0027b48 <__adddf3+0x5fd>
c0027ade:	0f bd c8             	bsr    ecx,eax
c0027ae1:	83 f1 1f             	xor    ecx,0x1f
c0027ae4:	d3 e0                	shl    eax,cl
c0027ae6:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027ae9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027aef:	83 c1 20             	add    ecx,0x20
c0027af2:	39 cb                	cmp    ebx,ecx
c0027af4:	7f 35                	jg     c0027b2b <__adddf3+0x5e0>
c0027af6:	29 d9                	sub    ecx,ebx
c0027af8:	8d 71 01             	lea    esi,[ecx+0x1]
c0027afb:	83 fe 1f             	cmp    esi,0x1f
c0027afe:	7e 09                	jle    c0027b09 <__adddf3+0x5be>
c0027b00:	83 e9 1f             	sub    ecx,0x1f
c0027b03:	d3 e8                	shr    eax,cl
c0027b05:	89 c3                	mov    ebx,eax
c0027b07:	eb 11                	jmp    c0027b1a <__adddf3+0x5cf>
c0027b09:	b9 20 00 00 00       	mov    ecx,0x20
c0027b0e:	29 f1                	sub    ecx,esi
c0027b10:	89 c3                	mov    ebx,eax
c0027b12:	d3 e3                	shl    ebx,cl
c0027b14:	89 f1                	mov    ecx,esi
c0027b16:	d3 e8                	shr    eax,cl
c0027b18:	89 c2                	mov    edx,eax
c0027b1a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b1d:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027b22:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b25:	89 d0                	mov    eax,edx
c0027b27:	89 da                	mov    edx,ebx
c0027b29:	eb 26                	jmp    c0027b51 <__adddf3+0x606>
c0027b2b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b2e:	29 cf                	sub    edi,ecx
c0027b30:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027b33:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027b38:	eb 17                	jmp    c0027b51 <__adddf3+0x606>
c0027b3a:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b3d:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027b40:	eb 0f                	jmp    c0027b51 <__adddf3+0x606>
c0027b42:	31 d2                	xor    edx,edx
c0027b44:	31 c0                	xor    eax,eax
c0027b46:	eb 09                	jmp    c0027b51 <__adddf3+0x606>
c0027b48:	89 c2                	mov    edx,eax
c0027b4a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027b51:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027b54:	c1 e1 14             	shl    ecx,0x14
c0027b57:	89 c3                	mov    ebx,eax
c0027b59:	c1 eb 0b             	shr    ebx,0xb
c0027b5c:	09 d9                	or     ecx,ebx
c0027b5e:	89 d3                	mov    ebx,edx
c0027b60:	c1 eb 0b             	shr    ebx,0xb
c0027b63:	c1 e0 15             	shl    eax,0x15
c0027b66:	09 d8                	or     eax,ebx
c0027b68:	89 c7                	mov    edi,eax
c0027b6a:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027b70:	0f 95 c0             	setne  al
c0027b73:	89 c6                	mov    esi,eax
c0027b75:	09 f3                	or     ebx,esi
c0027b77:	83 e3 01             	and    ebx,0x1
c0027b7a:	c1 ea 0a             	shr    edx,0xa
c0027b7d:	21 da                	and    edx,ebx
c0027b7f:	89 f8                	mov    eax,edi
c0027b81:	01 d0                	add    eax,edx
c0027b83:	83 d1 00             	adc    ecx,0x0
c0027b86:	89 c7                	mov    edi,eax
c0027b88:	eb 06                	jmp    c0027b90 <__adddf3+0x645>
c0027b8a:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027b8d:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027b90:	89 f8                	mov    eax,edi
c0027b92:	89 ca                	mov    edx,ecx
c0027b94:	83 c4 24             	add    esp,0x24
c0027b97:	5b                   	pop    ebx
c0027b98:	5e                   	pop    esi
c0027b99:	5f                   	pop    edi
c0027b9a:	5d                   	pop    ebp
c0027b9b:	c3                   	ret    

c0027b9c <__subdf3>:
c0027b9c:	55                   	push   ebp
c0027b9d:	89 e5                	mov    ebp,esp
c0027b9f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027ba2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027ba5:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027bab:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027bae:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027bb1:	5d                   	pop    ebp
c0027bb2:	e9 94 f9 ff ff       	jmp    c002754b <__adddf3>

c0027bb7 <__negdf2>:
c0027bb7:	55                   	push   ebp
c0027bb8:	89 e5                	mov    ebp,esp
c0027bba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027bbd:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027bc0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027bc6:	5d                   	pop    ebp
c0027bc7:	c3                   	ret    

c0027bc8 <__muldf3>:
c0027bc8:	55                   	push   ebp
c0027bc9:	89 e5                	mov    ebp,esp
c0027bcb:	57                   	push   edi
c0027bcc:	56                   	push   esi
c0027bcd:	53                   	push   ebx
c0027bce:	83 ec 24             	sub    esp,0x24
c0027bd1:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027bd4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027bd7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027bda:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027bdd:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027be0:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027be3:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027be6:	89 c8                	mov    eax,ecx
c0027be8:	c1 f8 14             	sar    eax,0x14
c0027beb:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027bee:	89 f8                	mov    eax,edi
c0027bf0:	89 fb                	mov    ebx,edi
c0027bf2:	c1 e3 0b             	shl    ebx,0xb
c0027bf5:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027bf8:	c1 e1 0b             	shl    ecx,0xb
c0027bfb:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027c01:	c1 e8 15             	shr    eax,0x15
c0027c04:	09 c1                	or     ecx,eax
c0027c06:	89 d6                	mov    esi,edx
c0027c08:	89 d0                	mov    eax,edx
c0027c0a:	c1 f8 14             	sar    eax,0x14
c0027c0d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027c10:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027c13:	89 c3                	mov    ebx,eax
c0027c15:	c1 e3 0b             	shl    ebx,0xb
c0027c18:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027c1b:	c1 e6 0b             	shl    esi,0xb
c0027c1e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027c24:	c1 e8 15             	shr    eax,0x15
c0027c27:	09 c6                	or     esi,eax
c0027c29:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c2c:	25 ff 07 00 00       	and    eax,0x7ff
c0027c31:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027c34:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c37:	25 ff 07 00 00       	and    eax,0x7ff
c0027c3c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027c3f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027c42:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027c45:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027c4c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c4f:	40                   	inc    eax
c0027c50:	a9 fe 07 00 00       	test   eax,0x7fe
c0027c55:	0f 85 8d 00 00 00    	jne    c0027ce8 <__muldf3+0x120>
c0027c5b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027c5e:	09 c8                	or     eax,ecx
c0027c60:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027c64:	74 44                	je     c0027caa <__muldf3+0xe2>
c0027c66:	85 c0                	test   eax,eax
c0027c68:	0f 85 31 02 00 00    	jne    c0027e9f <__muldf3+0x2d7>
c0027c6e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c71:	40                   	inc    eax
c0027c72:	a9 fe 07 00 00       	test   eax,0x7fe
c0027c77:	75 13                	jne    c0027c8c <__muldf3+0xc4>
c0027c79:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027c7c:	09 f1                	or     ecx,esi
c0027c7e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027c82:	74 22                	je     c0027ca6 <__muldf3+0xde>
c0027c84:	85 c9                	test   ecx,ecx
c0027c86:	0f 85 0d 02 00 00    	jne    c0027e99 <__muldf3+0x2d1>
c0027c8c:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027c90:	0f 89 09 02 00 00    	jns    c0027e9f <__muldf3+0x2d7>
c0027c96:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027c99:	05 00 00 00 80       	add    eax,0x80000000
c0027c9e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027ca1:	e9 f9 01 00 00       	jmp    c0027e9f <__muldf3+0x2d7>
c0027ca6:	85 c9                	test   ecx,ecx
c0027ca8:	eb 2e                	jmp    c0027cd8 <__muldf3+0x110>
c0027caa:	85 c0                	test   eax,eax
c0027cac:	74 20                	je     c0027cce <__muldf3+0x106>
c0027cae:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027cb1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027cb4:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027cb7:	c1 ef 1f             	shr    edi,0x1f
c0027cba:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027cbd:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027cc0:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027cc3:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027cc6:	09 f9                	or     ecx,edi
c0027cc8:	78 1e                	js     c0027ce8 <__muldf3+0x120>
c0027cca:	89 c3                	mov    ebx,eax
c0027ccc:	eb e0                	jmp    c0027cae <__muldf3+0xe6>
c0027cce:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027cd1:	f7 d0                	not    eax
c0027cd3:	a9 ff 07 00 00       	test   eax,0x7ff
c0027cd8:	75 b2                	jne    c0027c8c <__muldf3+0xc4>
c0027cda:	31 ff                	xor    edi,edi
c0027cdc:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027ce3:	e9 b7 01 00 00       	jmp    c0027e9f <__muldf3+0x2d7>
c0027ce8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027ceb:	40                   	inc    eax
c0027cec:	a9 fe 07 00 00       	test   eax,0x7fe
c0027cf1:	75 57                	jne    c0027d4a <__muldf3+0x182>
c0027cf3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027cf6:	09 f0                	or     eax,esi
c0027cf8:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027cfc:	74 23                	je     c0027d21 <__muldf3+0x159>
c0027cfe:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027d02:	0f 89 91 01 00 00    	jns    c0027e99 <__muldf3+0x2d1>
c0027d08:	85 c0                	test   eax,eax
c0027d0a:	0f 85 89 01 00 00    	jne    c0027e99 <__muldf3+0x2d1>
c0027d10:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027d13:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027d19:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027d1c:	e9 7e 01 00 00       	jmp    c0027e9f <__muldf3+0x2d7>
c0027d21:	85 c0                	test   eax,eax
c0027d23:	75 0c                	jne    c0027d31 <__muldf3+0x169>
c0027d25:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027d29:	0f 89 6a 01 00 00    	jns    c0027e99 <__muldf3+0x2d1>
c0027d2f:	eb df                	jmp    c0027d10 <__muldf3+0x148>
c0027d31:	01 f6                	add    esi,esi
c0027d33:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027d36:	c1 ea 1f             	shr    edx,0x1f
c0027d39:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027d3c:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027d3f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027d42:	09 d6                	or     esi,edx
c0027d44:	78 04                	js     c0027d4a <__muldf3+0x182>
c0027d46:	89 c3                	mov    ebx,eax
c0027d48:	eb e7                	jmp    c0027d31 <__muldf3+0x169>
c0027d4a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027d50:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027d56:	89 c8                	mov    eax,ecx
c0027d58:	f7 e6                	mul    esi
c0027d5a:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027d5d:	89 c7                	mov    edi,eax
c0027d5f:	89 c8                	mov    eax,ecx
c0027d61:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027d64:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027d67:	89 c1                	mov    ecx,eax
c0027d69:	89 f0                	mov    eax,esi
c0027d6b:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027d6e:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027d71:	89 c6                	mov    esi,eax
c0027d73:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027d76:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027d79:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027d7c:	31 c0                	xor    eax,eax
c0027d7e:	01 f1                	add    ecx,esi
c0027d80:	0f 92 c0             	setb   al
c0027d83:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027d86:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027d89:	83 d6 00             	adc    esi,0x0
c0027d8c:	01 c7                	add    edi,eax
c0027d8e:	83 d6 00             	adc    esi,0x0
c0027d91:	01 ca                	add    edx,ecx
c0027d93:	0f 92 c1             	setb   cl
c0027d96:	0f b6 c9             	movzx  ecx,cl
c0027d99:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027d9c:	83 d6 00             	adc    esi,0x0
c0027d9f:	01 cf                	add    edi,ecx
c0027da1:	83 d6 00             	adc    esi,0x0
c0027da4:	31 c9                	xor    ecx,ecx
c0027da6:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027da9:	0f 95 c1             	setne  cl
c0027dac:	09 cf                	or     edi,ecx
c0027dae:	85 f6                	test   esi,esi
c0027db0:	78 0c                	js     c0027dbe <__muldf3+0x1f6>
c0027db2:	01 f6                	add    esi,esi
c0027db4:	89 f8                	mov    eax,edi
c0027db6:	c1 e8 1f             	shr    eax,0x1f
c0027db9:	09 c6                	or     esi,eax
c0027dbb:	01 ff                	add    edi,edi
c0027dbd:	4b                   	dec    ebx
c0027dbe:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027dc4:	0f 8f 85 00 00 00    	jg     c0027e4f <__muldf3+0x287>
c0027dca:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027dd0:	85 db                	test   ebx,ebx
c0027dd2:	0f 8f 84 00 00 00    	jg     c0027e5c <__muldf3+0x294>
c0027dd8:	83 fb cc             	cmp    ebx,0xffffffcc
c0027ddb:	7c 79                	jl     c0027e56 <__muldf3+0x28e>
c0027ddd:	ba 01 00 00 00       	mov    edx,0x1
c0027de2:	29 da                	sub    edx,ebx
c0027de4:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027dea:	83 fa 1f             	cmp    edx,0x1f
c0027ded:	7e 30                	jle    c0027e1f <__muldf3+0x257>
c0027def:	83 fa 20             	cmp    edx,0x20
c0027df2:	75 0b                	jne    c0027dff <__muldf3+0x237>
c0027df4:	31 c0                	xor    eax,eax
c0027df6:	85 ff                	test   edi,edi
c0027df8:	0f 95 c0             	setne  al
c0027dfb:	89 c7                	mov    edi,eax
c0027dfd:	eb 1a                	jmp    c0027e19 <__muldf3+0x251>
c0027dff:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027e02:	89 f0                	mov    eax,esi
c0027e04:	d3 e0                	shl    eax,cl
c0027e06:	09 f8                	or     eax,edi
c0027e08:	0f 95 c0             	setne  al
c0027e0b:	0f b6 c0             	movzx  eax,al
c0027e0e:	89 c7                	mov    edi,eax
c0027e10:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027e15:	29 d9                	sub    ecx,ebx
c0027e17:	d3 ee                	shr    esi,cl
c0027e19:	09 f7                	or     edi,esi
c0027e1b:	31 db                	xor    ebx,ebx
c0027e1d:	eb 3b                	jmp    c0027e5a <__muldf3+0x292>
c0027e1f:	83 c3 1f             	add    ebx,0x1f
c0027e22:	89 f0                	mov    eax,esi
c0027e24:	88 d9                	mov    cl,bl
c0027e26:	d3 e0                	shl    eax,cl
c0027e28:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027e2b:	89 f8                	mov    eax,edi
c0027e2d:	88 d1                	mov    cl,dl
c0027e2f:	d3 e8                	shr    eax,cl
c0027e31:	89 c1                	mov    ecx,eax
c0027e33:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027e36:	09 c8                	or     eax,ecx
c0027e38:	88 d9                	mov    cl,bl
c0027e3a:	d3 e7                	shl    edi,cl
c0027e3c:	31 db                	xor    ebx,ebx
c0027e3e:	85 ff                	test   edi,edi
c0027e40:	0f 95 c3             	setne  bl
c0027e43:	89 df                	mov    edi,ebx
c0027e45:	09 c7                	or     edi,eax
c0027e47:	88 d1                	mov    cl,dl
c0027e49:	d3 ee                	shr    esi,cl
c0027e4b:	31 db                	xor    ebx,ebx
c0027e4d:	eb 0d                	jmp    c0027e5c <__muldf3+0x294>
c0027e4f:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027e54:	eb 02                	jmp    c0027e58 <__muldf3+0x290>
c0027e56:	31 db                	xor    ebx,ebx
c0027e58:	31 ff                	xor    edi,edi
c0027e5a:	31 f6                	xor    esi,esi
c0027e5c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027e5f:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027e62:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027e67:	09 c3                	or     ebx,eax
c0027e69:	c1 e3 14             	shl    ebx,0x14
c0027e6c:	89 f0                	mov    eax,esi
c0027e6e:	c1 e8 0b             	shr    eax,0xb
c0027e71:	09 c3                	or     ebx,eax
c0027e73:	89 f8                	mov    eax,edi
c0027e75:	c1 e8 0b             	shr    eax,0xb
c0027e78:	c1 e6 15             	shl    esi,0x15
c0027e7b:	09 c6                	or     esi,eax
c0027e7d:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027e83:	0f 95 c1             	setne  cl
c0027e86:	09 c8                	or     eax,ecx
c0027e88:	83 e0 01             	and    eax,0x1
c0027e8b:	c1 ef 0a             	shr    edi,0xa
c0027e8e:	21 c7                	and    edi,eax
c0027e90:	01 f7                	add    edi,esi
c0027e92:	83 d3 00             	adc    ebx,0x0
c0027e95:	89 da                	mov    edx,ebx
c0027e97:	eb 03                	jmp    c0027e9c <__muldf3+0x2d4>
c0027e99:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027e9c:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027e9f:	89 f8                	mov    eax,edi
c0027ea1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027ea4:	83 c4 24             	add    esp,0x24
c0027ea7:	5b                   	pop    ebx
c0027ea8:	5e                   	pop    esi
c0027ea9:	5f                   	pop    edi
c0027eaa:	5d                   	pop    ebp
c0027eab:	c3                   	ret    

c0027eac <__divdf3>:
c0027eac:	55                   	push   ebp
c0027ead:	89 e5                	mov    ebp,esp
c0027eaf:	57                   	push   edi
c0027eb0:	56                   	push   esi
c0027eb1:	53                   	push   ebx
c0027eb2:	83 ec 2c             	sub    esp,0x2c
c0027eb5:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027eb8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027ebb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027ebe:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027ec1:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027ec4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027ec7:	89 ce                	mov    esi,ecx
c0027ec9:	89 c8                	mov    eax,ecx
c0027ecb:	c1 f8 14             	sar    eax,0x14
c0027ece:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027ed1:	89 f8                	mov    eax,edi
c0027ed3:	89 fb                	mov    ebx,edi
c0027ed5:	c1 e3 0b             	shl    ebx,0xb
c0027ed8:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027edb:	c1 e6 0b             	shl    esi,0xb
c0027ede:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027ee4:	c1 e8 15             	shr    eax,0x15
c0027ee7:	09 c6                	or     esi,eax
c0027ee9:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027eec:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027eef:	89 c2                	mov    edx,eax
c0027ef1:	c1 fa 14             	sar    edx,0x14
c0027ef4:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027ef7:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027efa:	89 de                	mov    esi,ebx
c0027efc:	c1 e6 0b             	shl    esi,0xb
c0027eff:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027f02:	c1 e0 0b             	shl    eax,0xb
c0027f05:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027f0a:	c1 eb 15             	shr    ebx,0x15
c0027f0d:	09 d8                	or     eax,ebx
c0027f0f:	89 c2                	mov    edx,eax
c0027f11:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027f14:	25 ff 07 00 00       	and    eax,0x7ff
c0027f19:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027f1c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027f1f:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027f25:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027f28:	29 d8                	sub    eax,ebx
c0027f2a:	05 ff 03 00 00       	add    eax,0x3ff
c0027f2f:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027f32:	46                   	inc    esi
c0027f33:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027f39:	0f 85 a5 00 00 00    	jne    c0027fe4 <__divdf3+0x138>
c0027f3f:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027f42:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027f45:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027f49:	74 2a                	je     c0027f75 <__divdf3+0xc9>
c0027f4b:	85 f6                	test   esi,esi
c0027f4d:	0f 85 cc 02 00 00    	jne    c002821f <__divdf3+0x373>
c0027f53:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027f56:	40                   	inc    eax
c0027f57:	a9 fe 07 00 00       	test   eax,0x7fe
c0027f5c:	75 26                	jne    c0027f84 <__divdf3+0xd8>
c0027f5e:	85 db                	test   ebx,ebx
c0027f60:	74 22                	je     c0027f84 <__divdf3+0xd8>
c0027f62:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027f65:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027f68:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027f6b:	09 d0                	or     eax,edx
c0027f6d:	0f 85 ac 02 00 00    	jne    c002821f <__divdf3+0x373>
c0027f73:	eb 63                	jmp    c0027fd8 <__divdf3+0x12c>
c0027f75:	85 f6                	test   esi,esi
c0027f77:	75 22                	jne    c0027f9b <__divdf3+0xef>
c0027f79:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027f7c:	40                   	inc    eax
c0027f7d:	a9 fe 07 00 00       	test   eax,0x7fe
c0027f82:	74 36                	je     c0027fba <__divdf3+0x10e>
c0027f84:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027f88:	0f 89 91 02 00 00    	jns    c002821f <__divdf3+0x373>
c0027f8e:	89 f8                	mov    eax,edi
c0027f90:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027f96:	e9 80 02 00 00       	jmp    c002821b <__divdf3+0x36f>
c0027f9b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027f9e:	01 f6                	add    esi,esi
c0027fa0:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027fa3:	c1 ef 1f             	shr    edi,0x1f
c0027fa6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027fa9:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027fac:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027faf:	09 f7                	or     edi,esi
c0027fb1:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027fb4:	78 2e                	js     c0027fe4 <__divdf3+0x138>
c0027fb6:	89 c8                	mov    eax,ecx
c0027fb8:	eb e1                	jmp    c0027f9b <__divdf3+0xef>
c0027fba:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027fbd:	09 d0                	or     eax,edx
c0027fbf:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027fc3:	74 0f                	je     c0027fd4 <__divdf3+0x128>
c0027fc5:	85 c0                	test   eax,eax
c0027fc7:	74 bb                	je     c0027f84 <__divdf3+0xd8>
c0027fc9:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027fcc:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027fcf:	e9 4b 02 00 00       	jmp    c002821f <__divdf3+0x373>
c0027fd4:	85 c0                	test   eax,eax
c0027fd6:	75 ac                	jne    c0027f84 <__divdf3+0xd8>
c0027fd8:	31 ff                	xor    edi,edi
c0027fda:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027fdf:	e9 3b 02 00 00       	jmp    c002821f <__divdf3+0x373>
c0027fe4:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027fe7:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027fea:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027ff0:	75 6b                	jne    c002805d <__divdf3+0x1b1>
c0027ff2:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027ff5:	09 d6                	or     esi,edx
c0027ff7:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027ffb:	74 28                	je     c0028025 <__divdf3+0x179>
c0027ffd:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028000:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028003:	85 f6                	test   esi,esi
c0028005:	0f 85 14 02 00 00    	jne    c002821f <__divdf3+0x373>
c002800b:	31 ff                	xor    edi,edi
c002800d:	31 c9                	xor    ecx,ecx
c002800f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028012:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028015:	0f 89 04 02 00 00    	jns    c002821f <__divdf3+0x373>
c002801b:	b9 00 00 00 80       	mov    ecx,0x80000000
c0028020:	e9 fa 01 00 00       	jmp    c002821f <__divdf3+0x373>
c0028025:	85 f6                	test   esi,esi
c0028027:	75 1b                	jne    c0028044 <__divdf3+0x198>
c0028029:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002802c:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c002802f:	25 00 00 00 80       	and    eax,0x80000000
c0028034:	31 c9                	xor    ecx,ecx
c0028036:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c002803b:	89 cf                	mov    edi,ecx
c002803d:	89 c1                	mov    ecx,eax
c002803f:	e9 db 01 00 00       	jmp    c002821f <__divdf3+0x373>
c0028044:	01 d2                	add    edx,edx
c0028046:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028049:	c1 eb 1f             	shr    ebx,0x1f
c002804c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002804f:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0028052:	8d 48 01             	lea    ecx,[eax+0x1]
c0028055:	09 da                	or     edx,ebx
c0028057:	78 04                	js     c002805d <__divdf3+0x1b1>
c0028059:	89 c8                	mov    eax,ecx
c002805b:	eb e7                	jmp    c0028044 <__divdf3+0x198>
c002805d:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028060:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028066:	81 ca 00 00 00 80    	or     edx,0x80000000
c002806c:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c002806f:	39 d6                	cmp    esi,edx
c0028071:	77 0d                	ja     c0028080 <__divdf3+0x1d4>
c0028073:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0028076:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028079:	72 1b                	jb     c0028096 <__divdf3+0x1ea>
c002807b:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c002807e:	75 16                	jne    c0028096 <__divdf3+0x1ea>
c0028080:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028083:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028086:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0028089:	83 de 00             	sbb    esi,0x0
c002808c:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c002808f:	ba 01 00 00 00       	mov    edx,0x1
c0028094:	eb 02                	jmp    c0028098 <__divdf3+0x1ec>
c0028096:	31 d2                	xor    edx,edx
c0028098:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c002809f:	31 ff                	xor    edi,edi
c00280a1:	01 ff                	add    edi,edi
c00280a3:	89 d1                	mov    ecx,edx
c00280a5:	c1 e9 1f             	shr    ecx,0x1f
c00280a8:	09 cf                	or     edi,ecx
c00280aa:	8d 1c 12             	lea    ebx,[edx+edx*1]
c00280ad:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c00280b0:	89 da                	mov    edx,ebx
c00280b2:	89 f3                	mov    ebx,esi
c00280b4:	8d 34 36             	lea    esi,[esi+esi*1]
c00280b7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00280ba:	c1 e9 1f             	shr    ecx,0x1f
c00280bd:	09 ce                	or     esi,ecx
c00280bf:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00280c2:	01 c9                	add    ecx,ecx
c00280c4:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c00280c7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00280ca:	85 db                	test   ebx,ebx
c00280cc:	78 29                	js     c00280f7 <__divdf3+0x24b>
c00280ce:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c00280d1:	72 07                	jb     c00280da <__divdf3+0x22e>
c00280d3:	75 3c                	jne    c0028111 <__divdf3+0x265>
c00280d5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00280d8:	77 37                	ja     c0028111 <__divdf3+0x265>
c00280da:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00280dd:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c00280e0:	31 d2                	xor    edx,edx
c00280e2:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c00280e5:	0f 97 c2             	seta   dl
c00280e8:	29 d6                	sub    esi,edx
c00280ea:	89 d9                	mov    ecx,ebx
c00280ec:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c00280ef:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00280f2:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00280f5:	eb 17                	jmp    c002810e <__divdf3+0x262>
c00280f7:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00280fa:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00280fd:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028100:	0f 97 c1             	seta   cl
c0028103:	0f b6 c9             	movzx  ecx,cl
c0028106:	29 ce                	sub    esi,ecx
c0028108:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c002810b:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c002810e:	83 ca 01             	or     edx,0x1
c0028111:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0028114:	75 8b                	jne    c00280a1 <__divdf3+0x1f5>
c0028116:	c1 e7 09             	shl    edi,0x9
c0028119:	89 d1                	mov    ecx,edx
c002811b:	c1 e9 17             	shr    ecx,0x17
c002811e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028121:	09 f3                	or     ebx,esi
c0028123:	0f 95 c3             	setne  bl
c0028126:	0f b6 db             	movzx  ebx,bl
c0028129:	c1 e2 09             	shl    edx,0x9
c002812c:	09 d3                	or     ebx,edx
c002812e:	89 ca                	mov    edx,ecx
c0028130:	09 fa                	or     edx,edi
c0028132:	78 0c                	js     c0028140 <__divdf3+0x294>
c0028134:	01 d2                	add    edx,edx
c0028136:	89 d9                	mov    ecx,ebx
c0028138:	c1 e9 1f             	shr    ecx,0x1f
c002813b:	09 ca                	or     edx,ecx
c002813d:	01 db                	add    ebx,ebx
c002813f:	48                   	dec    eax
c0028140:	3d fe 07 00 00       	cmp    eax,0x7fe
c0028145:	0f 8f 83 00 00 00    	jg     c00281ce <__divdf3+0x322>
c002814b:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028151:	85 c0                	test   eax,eax
c0028153:	0f 8f 82 00 00 00    	jg     c00281db <__divdf3+0x32f>
c0028159:	83 f8 cc             	cmp    eax,0xffffffcc
c002815c:	7c 77                	jl     c00281d5 <__divdf3+0x329>
c002815e:	be 01 00 00 00       	mov    esi,0x1
c0028163:	29 c6                	sub    esi,eax
c0028165:	81 ca 00 00 00 80    	or     edx,0x80000000
c002816b:	83 fe 1f             	cmp    esi,0x1f
c002816e:	7e 2f                	jle    c002819f <__divdf3+0x2f3>
c0028170:	83 fe 20             	cmp    esi,0x20
c0028173:	75 0a                	jne    c002817f <__divdf3+0x2d3>
c0028175:	85 db                	test   ebx,ebx
c0028177:	0f 95 c3             	setne  bl
c002817a:	0f b6 db             	movzx  ebx,bl
c002817d:	eb 1a                	jmp    c0028199 <__divdf3+0x2ed>
c002817f:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0028182:	89 d7                	mov    edi,edx
c0028184:	d3 e7                	shl    edi,cl
c0028186:	89 f9                	mov    ecx,edi
c0028188:	09 d9                	or     ecx,ebx
c002818a:	0f 95 c3             	setne  bl
c002818d:	0f b6 db             	movzx  ebx,bl
c0028190:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028195:	29 c1                	sub    ecx,eax
c0028197:	d3 ea                	shr    edx,cl
c0028199:	09 d3                	or     ebx,edx
c002819b:	31 c0                	xor    eax,eax
c002819d:	eb 3a                	jmp    c00281d9 <__divdf3+0x32d>
c002819f:	83 c0 1f             	add    eax,0x1f
c00281a2:	89 d7                	mov    edi,edx
c00281a4:	88 c1                	mov    cl,al
c00281a6:	d3 e7                	shl    edi,cl
c00281a8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00281ab:	89 df                	mov    edi,ebx
c00281ad:	89 f1                	mov    ecx,esi
c00281af:	d3 ef                	shr    edi,cl
c00281b1:	89 f9                	mov    ecx,edi
c00281b3:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00281b6:	09 cf                	or     edi,ecx
c00281b8:	88 c1                	mov    cl,al
c00281ba:	d3 e3                	shl    ebx,cl
c00281bc:	85 db                	test   ebx,ebx
c00281be:	0f 95 c3             	setne  bl
c00281c1:	0f b6 db             	movzx  ebx,bl
c00281c4:	09 fb                	or     ebx,edi
c00281c6:	89 f1                	mov    ecx,esi
c00281c8:	d3 ea                	shr    edx,cl
c00281ca:	31 c0                	xor    eax,eax
c00281cc:	eb 0d                	jmp    c00281db <__divdf3+0x32f>
c00281ce:	b8 ff 07 00 00       	mov    eax,0x7ff
c00281d3:	eb 02                	jmp    c00281d7 <__divdf3+0x32b>
c00281d5:	31 c0                	xor    eax,eax
c00281d7:	31 db                	xor    ebx,ebx
c00281d9:	31 d2                	xor    edx,edx
c00281db:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c00281de:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c00281e1:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00281e7:	09 c8                	or     eax,ecx
c00281e9:	c1 e0 14             	shl    eax,0x14
c00281ec:	89 d1                	mov    ecx,edx
c00281ee:	c1 e9 0b             	shr    ecx,0xb
c00281f1:	09 c8                	or     eax,ecx
c00281f3:	89 c6                	mov    esi,eax
c00281f5:	89 d9                	mov    ecx,ebx
c00281f7:	c1 e9 0b             	shr    ecx,0xb
c00281fa:	c1 e2 15             	shl    edx,0x15
c00281fd:	09 ca                	or     edx,ecx
c00281ff:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0028205:	0f 95 c0             	setne  al
c0028208:	09 c1                	or     ecx,eax
c002820a:	83 e1 01             	and    ecx,0x1
c002820d:	c1 eb 0a             	shr    ebx,0xa
c0028210:	21 cb                	and    ebx,ecx
c0028212:	01 d3                	add    ebx,edx
c0028214:	89 d8                	mov    eax,ebx
c0028216:	83 d6 00             	adc    esi,0x0
c0028219:	89 f2                	mov    edx,esi
c002821b:	89 c7                	mov    edi,eax
c002821d:	89 d1                	mov    ecx,edx
c002821f:	89 f8                	mov    eax,edi
c0028221:	89 ca                	mov    edx,ecx
c0028223:	83 c4 2c             	add    esp,0x2c
c0028226:	5b                   	pop    ebx
c0028227:	5e                   	pop    esi
c0028228:	5f                   	pop    edi
c0028229:	5d                   	pop    ebp
c002822a:	c3                   	ret    

c002822b <__floatsidf>:
c002822b:	55                   	push   ebp
c002822c:	89 e5                	mov    ebp,esp
c002822e:	56                   	push   esi
c002822f:	53                   	push   ebx
c0028230:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028233:	85 db                	test   ebx,ebx
c0028235:	7e 15                	jle    c002824c <__floatsidf+0x21>
c0028237:	0f bd cb             	bsr    ecx,ebx
c002823a:	83 f1 1f             	xor    ecx,0x1f
c002823d:	d3 e3                	shl    ebx,cl
c002823f:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028245:	b8 1e 04 00 00       	mov    eax,0x41e
c002824a:	eb 21                	jmp    c002826d <__floatsidf+0x42>
c002824c:	b8 00 00 00 00       	mov    eax,0x0
c0028251:	ba 00 00 00 00       	mov    edx,0x0
c0028256:	74 2a                	je     c0028282 <__floatsidf+0x57>
c0028258:	f7 db                	neg    ebx
c002825a:	0f bd cb             	bsr    ecx,ebx
c002825d:	83 f1 1f             	xor    ecx,0x1f
c0028260:	d3 e3                	shl    ebx,cl
c0028262:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028268:	b8 1e 0c 00 00       	mov    eax,0xc1e
c002826d:	29 c8                	sub    eax,ecx
c002826f:	c1 e0 14             	shl    eax,0x14
c0028272:	89 c1                	mov    ecx,eax
c0028274:	89 de                	mov    esi,ebx
c0028276:	c1 ee 0b             	shr    esi,0xb
c0028279:	09 f1                	or     ecx,esi
c002827b:	89 ca                	mov    edx,ecx
c002827d:	c1 e3 15             	shl    ebx,0x15
c0028280:	89 d8                	mov    eax,ebx
c0028282:	5b                   	pop    ebx
c0028283:	5e                   	pop    esi
c0028284:	5d                   	pop    ebp
c0028285:	c3                   	ret    

c0028286 <__floatunsidf>:
c0028286:	55                   	push   ebp
c0028287:	89 e5                	mov    ebp,esp
c0028289:	56                   	push   esi
c002828a:	53                   	push   ebx
c002828b:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002828e:	85 db                	test   ebx,ebx
c0028290:	74 2a                	je     c00282bc <__floatunsidf+0x36>
c0028292:	0f bd cb             	bsr    ecx,ebx
c0028295:	83 f1 1f             	xor    ecx,0x1f
c0028298:	d3 e3                	shl    ebx,cl
c002829a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00282a0:	b8 1e 04 00 00       	mov    eax,0x41e
c00282a5:	29 c8                	sub    eax,ecx
c00282a7:	c1 e0 14             	shl    eax,0x14
c00282aa:	89 c1                	mov    ecx,eax
c00282ac:	89 de                	mov    esi,ebx
c00282ae:	c1 ee 0b             	shr    esi,0xb
c00282b1:	09 f1                	or     ecx,esi
c00282b3:	89 ca                	mov    edx,ecx
c00282b5:	c1 e3 15             	shl    ebx,0x15
c00282b8:	89 d8                	mov    eax,ebx
c00282ba:	eb 04                	jmp    c00282c0 <__floatunsidf+0x3a>
c00282bc:	31 c0                	xor    eax,eax
c00282be:	31 d2                	xor    edx,edx
c00282c0:	5b                   	pop    ebx
c00282c1:	5e                   	pop    esi
c00282c2:	5d                   	pop    ebp
c00282c3:	c3                   	ret    

c00282c4 <__fixdfsi>:
c00282c4:	55                   	push   ebp
c00282c5:	89 e5                	mov    ebp,esp
c00282c7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00282ca:	89 d1                	mov    ecx,edx
c00282cc:	c1 e1 0b             	shl    ecx,0xb
c00282cf:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00282d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00282d8:	c1 e8 15             	shr    eax,0x15
c00282db:	09 c1                	or     ecx,eax
c00282dd:	c1 fa 14             	sar    edx,0x14
c00282e0:	78 1f                	js     c0028301 <__fixdfsi+0x3d>
c00282e2:	81 ea ff 03 00 00    	sub    edx,0x3ff
c00282e8:	31 c0                	xor    eax,eax
c00282ea:	83 fa 1e             	cmp    edx,0x1e
c00282ed:	77 40                	ja     c002832f <__fixdfsi+0x6b>
c00282ef:	89 c8                	mov    eax,ecx
c00282f1:	0d 00 00 00 80       	or     eax,0x80000000
c00282f6:	b9 1f 00 00 00       	mov    ecx,0x1f
c00282fb:	29 d1                	sub    ecx,edx
c00282fd:	d3 e8                	shr    eax,cl
c00282ff:	eb 2e                	jmp    c002832f <__fixdfsi+0x6b>
c0028301:	31 c0                	xor    eax,eax
c0028303:	81 c2 01 04 00 00    	add    edx,0x401
c0028309:	78 24                	js     c002832f <__fixdfsi+0x6b>
c002830b:	83 fa 1e             	cmp    edx,0x1e
c002830e:	7e 09                	jle    c0028319 <__fixdfsi+0x55>
c0028310:	83 fa 1f             	cmp    edx,0x1f
c0028313:	75 18                	jne    c002832d <__fixdfsi+0x69>
c0028315:	85 c9                	test   ecx,ecx
c0028317:	75 14                	jne    c002832d <__fixdfsi+0x69>
c0028319:	89 c8                	mov    eax,ecx
c002831b:	0d 00 00 00 80       	or     eax,0x80000000
c0028320:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028325:	29 d1                	sub    ecx,edx
c0028327:	d3 e8                	shr    eax,cl
c0028329:	f7 d8                	neg    eax
c002832b:	eb 02                	jmp    c002832f <__fixdfsi+0x6b>
c002832d:	31 c0                	xor    eax,eax
c002832f:	5d                   	pop    ebp
c0028330:	c3                   	ret    

c0028331 <__fixunsdfsi>:
c0028331:	55                   	push   ebp
c0028332:	89 e5                	mov    ebp,esp
c0028334:	53                   	push   ebx
c0028335:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028338:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002833b:	89 d3                	mov    ebx,edx
c002833d:	c1 fb 14             	sar    ebx,0x14
c0028340:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0028346:	31 c0                	xor    eax,eax
c0028348:	83 fb 1f             	cmp    ebx,0x1f
c002834b:	77 1d                	ja     c002836a <__fixunsdfsi+0x39>
c002834d:	89 d0                	mov    eax,edx
c002834f:	c1 e0 0b             	shl    eax,0xb
c0028352:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028357:	c1 e9 15             	shr    ecx,0x15
c002835a:	09 c8                	or     eax,ecx
c002835c:	0d 00 00 00 80       	or     eax,0x80000000
c0028361:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028366:	29 d9                	sub    ecx,ebx
c0028368:	d3 e8                	shr    eax,cl
c002836a:	5b                   	pop    ebx
c002836b:	5d                   	pop    ebp
c002836c:	c3                   	ret    

c002836d <__cmpdf2>:
c002836d:	55                   	push   ebp
c002836e:	89 e5                	mov    ebp,esp
c0028370:	57                   	push   edi
c0028371:	56                   	push   esi
c0028372:	53                   	push   ebx
c0028373:	83 ec 0c             	sub    esp,0xc
c0028376:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028379:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002837c:	89 ca                	mov    edx,ecx
c002837e:	c1 ea 14             	shr    edx,0x14
c0028381:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0028387:	89 cb                	mov    ebx,ecx
c0028389:	c1 fb 1f             	sar    ebx,0x1f
c002838c:	31 da                	xor    edx,ebx
c002838e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028391:	89 df                	mov    edi,ebx
c0028393:	c1 e7 0b             	shl    edi,0xb
c0028396:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028399:	c1 e1 0b             	shl    ecx,0xb
c002839c:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00283a2:	c1 eb 15             	shr    ebx,0x15
c00283a5:	09 d9                	or     ecx,ebx
c00283a7:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c00283aa:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00283ad:	89 ce                	mov    esi,ecx
c00283af:	c1 ee 14             	shr    esi,0x14
c00283b2:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00283b8:	89 cb                	mov    ebx,ecx
c00283ba:	c1 fb 1f             	sar    ebx,0x1f
c00283bd:	31 de                	xor    esi,ebx
c00283bf:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00283c2:	89 df                	mov    edi,ebx
c00283c4:	c1 e7 0b             	shl    edi,0xb
c00283c7:	c1 e1 0b             	shl    ecx,0xb
c00283ca:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00283d0:	c1 eb 15             	shr    ebx,0x15
c00283d3:	09 d9                	or     ecx,ebx
c00283d5:	89 d3                	mov    ebx,edx
c00283d7:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00283dd:	43                   	inc    ebx
c00283de:	83 fb 01             	cmp    ebx,0x1
c00283e1:	77 08                	ja     c00283eb <__cmpdf2+0x7e>
c00283e3:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00283e6:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00283e9:	75 68                	jne    c0028453 <__cmpdf2+0xe6>
c00283eb:	89 f3                	mov    ebx,esi
c00283ed:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00283f3:	43                   	inc    ebx
c00283f4:	83 fb 01             	cmp    ebx,0x1
c00283f7:	77 06                	ja     c00283ff <__cmpdf2+0x92>
c00283f9:	89 fb                	mov    ebx,edi
c00283fb:	09 cb                	or     ebx,ecx
c00283fd:	75 54                	jne    c0028453 <__cmpdf2+0xe6>
c00283ff:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028402:	09 f8                	or     eax,edi
c0028404:	09 c8                	or     eax,ecx
c0028406:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028409:	75 12                	jne    c002841d <__cmpdf2+0xb0>
c002840b:	8d 42 01             	lea    eax,[edx+0x1]
c002840e:	83 f8 01             	cmp    eax,0x1
c0028411:	77 0a                	ja     c002841d <__cmpdf2+0xb0>
c0028413:	8d 5e 01             	lea    ebx,[esi+0x1]
c0028416:	31 c0                	xor    eax,eax
c0028418:	83 fb 01             	cmp    ebx,0x1
c002841b:	76 36                	jbe    c0028453 <__cmpdf2+0xe6>
c002841d:	b8 01 00 00 00       	mov    eax,0x1
c0028422:	39 f2                	cmp    edx,esi
c0028424:	7f 2d                	jg     c0028453 <__cmpdf2+0xe6>
c0028426:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002842b:	7c 26                	jl     c0028453 <__cmpdf2+0xe6>
c002842d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028430:	77 07                	ja     c0028439 <__cmpdf2+0xcc>
c0028432:	72 16                	jb     c002844a <__cmpdf2+0xdd>
c0028434:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0028437:	76 0a                	jbe    c0028443 <__cmpdf2+0xd6>
c0028439:	89 d0                	mov    eax,edx
c002843b:	c1 f8 1f             	sar    eax,0x1f
c002843e:	83 c8 01             	or     eax,0x1
c0028441:	eb 10                	jmp    c0028453 <__cmpdf2+0xe6>
c0028443:	b8 00 00 00 00       	mov    eax,0x0
c0028448:	73 09                	jae    c0028453 <__cmpdf2+0xe6>
c002844a:	89 d0                	mov    eax,edx
c002844c:	c1 f8 1f             	sar    eax,0x1f
c002844f:	83 e0 02             	and    eax,0x2
c0028452:	48                   	dec    eax
c0028453:	83 c4 0c             	add    esp,0xc
c0028456:	5b                   	pop    ebx
c0028457:	5e                   	pop    esi
c0028458:	5f                   	pop    edi
c0028459:	5d                   	pop    ebp
c002845a:	c3                   	ret    

c002845b <__eqdf2>:
c002845b:	55                   	push   ebp
c002845c:	89 e5                	mov    ebp,esp
c002845e:	50                   	push   eax
c002845f:	6a 01                	push   0x1
c0028461:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028464:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028467:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002846a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002846d:	e8 fb fe ff ff       	call   c002836d <__cmpdf2>
c0028472:	83 c4 18             	add    esp,0x18
c0028475:	c9                   	leave  
c0028476:	c3                   	ret    

c0028477 <__nedf2>:
c0028477:	eb e2                	jmp    c002845b <__eqdf2>

c0028479 <__gtdf2>:
c0028479:	55                   	push   ebp
c002847a:	89 e5                	mov    ebp,esp
c002847c:	50                   	push   eax
c002847d:	6a ff                	push   0xffffffff
c002847f:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028482:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028485:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028488:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002848b:	e8 dd fe ff ff       	call   c002836d <__cmpdf2>
c0028490:	83 c4 18             	add    esp,0x18
c0028493:	c9                   	leave  
c0028494:	c3                   	ret    

c0028495 <__gedf2>:
c0028495:	eb e2                	jmp    c0028479 <__gtdf2>

c0028497 <__ltdf2>:
c0028497:	eb c2                	jmp    c002845b <__eqdf2>

c0028499 <__ledf2>:
c0028499:	eb c0                	jmp    c002845b <__eqdf2>

c002849b <__truncdfsf2>:
c002849b:	55                   	push   ebp
c002849c:	89 e5                	mov    ebp,esp
c002849e:	57                   	push   edi
c002849f:	56                   	push   esi
c00284a0:	53                   	push   ebx
c00284a1:	83 ec 0c             	sub    esp,0xc
c00284a4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00284a7:	89 d1                	mov    ecx,edx
c00284a9:	c1 f9 14             	sar    ecx,0x14
c00284ac:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00284af:	89 df                	mov    edi,ebx
c00284b1:	c1 e7 0b             	shl    edi,0xb
c00284b4:	89 d0                	mov    eax,edx
c00284b6:	c1 e0 0b             	shl    eax,0xb
c00284b9:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00284be:	c1 eb 15             	shr    ebx,0x15
c00284c1:	09 d8                	or     eax,ebx
c00284c3:	89 cb                	mov    ebx,ecx
c00284c5:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00284cb:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c00284d1:	81 fe fd 00 00 00    	cmp    esi,0xfd
c00284d7:	0f 86 9e 00 00 00    	jbe    c002857b <__truncdfsf2+0xe0>
c00284dd:	85 db                	test   ebx,ebx
c00284df:	75 0a                	jne    c00284eb <__truncdfsf2+0x50>
c00284e1:	c1 fa 17             	sar    edx,0x17
c00284e4:	30 d2                	xor    dl,dl
c00284e6:	e9 84 00 00 00       	jmp    c002856f <__truncdfsf2+0xd4>
c00284eb:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c00284f1:	83 fe 83             	cmp    esi,0xffffff83
c00284f4:	7d 4b                	jge    c0028541 <__truncdfsf2+0xa6>
c00284f6:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c00284fb:	29 f1                	sub    ecx,esi
c00284fd:	83 f9 1f             	cmp    ecx,0x1f
c0028500:	7f 6b                	jg     c002856d <__truncdfsf2+0xd2>
c0028502:	0d 00 00 00 80       	or     eax,0x80000000
c0028507:	89 c3                	mov    ebx,eax
c0028509:	d3 eb                	shr    ebx,cl
c002850b:	be 01 00 00 00       	mov    esi,0x1
c0028510:	d3 e6                	shl    esi,cl
c0028512:	4e                   	dec    esi
c0028513:	21 f0                	and    eax,esi
c0028515:	09 f8                	or     eax,edi
c0028517:	0f 95 c0             	setne  al
c002851a:	0f b6 c0             	movzx  eax,al
c002851d:	09 c3                	or     ebx,eax
c002851f:	89 d9                	mov    ecx,ebx
c0028521:	c1 e9 08             	shr    ecx,0x8
c0028524:	f6 c3 7f             	test   bl,0x7f
c0028527:	0f 95 c0             	setne  al
c002852a:	09 c8                	or     eax,ecx
c002852c:	83 e0 01             	and    eax,0x1
c002852f:	c1 eb 07             	shr    ebx,0x7
c0028532:	21 c3                	and    ebx,eax
c0028534:	81 e2 00 00 00 80    	and    edx,0x80000000
c002853a:	09 d1                	or     ecx,edx
c002853c:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c002853f:	eb 76                	jmp    c00285b7 <__truncdfsf2+0x11c>
c0028541:	83 c6 80             	add    esi,0xffffff80
c0028544:	7e 1d                	jle    c0028563 <__truncdfsf2+0xc8>
c0028546:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c002854c:	75 0b                	jne    c0028559 <__truncdfsf2+0xbe>
c002854e:	09 f8                	or     eax,edi
c0028550:	74 09                	je     c002855b <__truncdfsf2+0xc0>
c0028552:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0028557:	eb 02                	jmp    c002855b <__truncdfsf2+0xc0>
c0028559:	31 c0                	xor    eax,eax
c002855b:	c1 fa 17             	sar    edx,0x17
c002855e:	80 ca ff             	or     dl,0xff
c0028561:	eb 0e                	jmp    c0028571 <__truncdfsf2+0xd6>
c0028563:	c1 fa 1f             	sar    edx,0x1f
c0028566:	c1 e2 08             	shl    edx,0x8
c0028569:	09 ca                	or     edx,ecx
c002856b:	eb 04                	jmp    c0028571 <__truncdfsf2+0xd6>
c002856d:	31 d2                	xor    edx,edx
c002856f:	31 c0                	xor    eax,eax
c0028571:	c1 e2 17             	shl    edx,0x17
c0028574:	c1 e8 08             	shr    eax,0x8
c0028577:	09 d0                	or     eax,edx
c0028579:	eb 3c                	jmp    c00285b7 <__truncdfsf2+0x11c>
c002857b:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028581:	89 ca                	mov    edx,ecx
c0028583:	c1 fa 0b             	sar    edx,0xb
c0028586:	c1 e2 08             	shl    edx,0x8
c0028589:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c002858c:	31 db                	xor    ebx,ebx
c002858e:	85 ff                	test   edi,edi
c0028590:	0f 95 c3             	setne  bl
c0028593:	09 d8                	or     eax,ebx
c0028595:	89 c3                	mov    ebx,eax
c0028597:	c1 eb 08             	shr    ebx,0x8
c002859a:	a8 7f                	test   al,0x7f
c002859c:	0f 95 c2             	setne  dl
c002859f:	89 d6                	mov    esi,edx
c00285a1:	09 de                	or     esi,ebx
c00285a3:	83 e6 01             	and    esi,0x1
c00285a6:	c1 e8 07             	shr    eax,0x7
c00285a9:	21 f0                	and    eax,esi
c00285ab:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00285ae:	09 ca                	or     edx,ecx
c00285b0:	c1 e2 17             	shl    edx,0x17
c00285b3:	09 da                	or     edx,ebx
c00285b5:	01 d0                	add    eax,edx
c00285b7:	83 c4 0c             	add    esp,0xc
c00285ba:	5b                   	pop    ebx
c00285bb:	5e                   	pop    esi
c00285bc:	5f                   	pop    edi
c00285bd:	5d                   	pop    ebp
c00285be:	c3                   	ret    

c00285bf <__extendsfdf2>:
c00285bf:	55                   	push   ebp
c00285c0:	89 e5                	mov    ebp,esp
c00285c2:	57                   	push   edi
c00285c3:	56                   	push   esi
c00285c4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00285c7:	89 d1                	mov    ecx,edx
c00285c9:	c1 f9 17             	sar    ecx,0x17
c00285cc:	c1 e2 08             	shl    edx,0x8
c00285cf:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00285d5:	89 c8                	mov    eax,ecx
c00285d7:	80 e4 f8             	and    ah,0xf8
c00285da:	8d 71 01             	lea    esi,[ecx+0x1]
c00285dd:	81 e6 fe 00 00 00    	and    esi,0xfe
c00285e3:	75 27                	jne    c002860c <__extendsfdf2+0x4d>
c00285e5:	81 e1 ff 00 00 00    	and    ecx,0xff
c00285eb:	75 18                	jne    c0028605 <__extendsfdf2+0x46>
c00285ed:	85 d2                	test   edx,edx
c00285ef:	74 20                	je     c0028611 <__extendsfdf2+0x52>
c00285f1:	41                   	inc    ecx
c00285f2:	01 d2                	add    edx,edx
c00285f4:	79 fb                	jns    c00285f1 <__extendsfdf2+0x32>
c00285f6:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00285fc:	29 c8                	sub    eax,ecx
c00285fe:	05 81 03 00 00       	add    eax,0x381
c0028603:	eb 0c                	jmp    c0028611 <__extendsfdf2+0x52>
c0028605:	05 00 07 00 00       	add    eax,0x700
c002860a:	eb 05                	jmp    c0028611 <__extendsfdf2+0x52>
c002860c:	05 80 03 00 00       	add    eax,0x380
c0028611:	c1 e0 14             	shl    eax,0x14
c0028614:	89 c1                	mov    ecx,eax
c0028616:	89 d0                	mov    eax,edx
c0028618:	c1 e8 0b             	shr    eax,0xb
c002861b:	09 c1                	or     ecx,eax
c002861d:	c1 e2 15             	shl    edx,0x15
c0028620:	89 d0                	mov    eax,edx
c0028622:	89 ca                	mov    edx,ecx
c0028624:	5e                   	pop    esi
c0028625:	5f                   	pop    edi
c0028626:	5d                   	pop    ebp
c0028627:	c3                   	ret    
c0028628:	66 90                	xchg   ax,ax
c002862a:	66 90                	xchg   ax,ax
c002862c:	66 90                	xchg   ax,ax
c002862e:	66 90                	xchg   ax,ax

c0028630 <fabs>:
c0028630:	83 ec 0c             	sub    esp,0xc
c0028633:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028637:	89 04 24             	mov    DWORD PTR [esp],eax
c002863a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002863e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028643:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028647:	dd 04 24             	fld    QWORD PTR [esp]
c002864a:	83 c4 0c             	add    esp,0xc
c002864d:	c3                   	ret    
c002864e:	66 90                	xchg   ax,ax

c0028650 <lrint>:
c0028650:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028654:	83 ec 04             	sub    esp,0x4
c0028657:	db 1c 24             	fistp  DWORD PTR [esp]
c002865a:	58                   	pop    eax
c002865b:	c3                   	ret    

c002865c <lrintf>:
c002865c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028660:	83 ec 04             	sub    esp,0x4
c0028663:	db 1c 24             	fistp  DWORD PTR [esp]
c0028666:	58                   	pop    eax
c0028667:	c3                   	ret    

Disassembly of section .init:

c0028668 <_init>:
c0028668:	55                   	push   ebp
c0028669:	89 e5                	mov    ebp,esp
c002866b:	e8 a8 7a fd ff       	call   c0000118 <frame_dummy>
c0028670:	e8 5b e0 ff ff       	call   c00266d0 <__do_global_ctors_aux>
c0028675:	5d                   	pop    ebp
c0028676:	c3                   	ret    

Disassembly of section .fini:

c0028677 <_fini>:
c0028677:	55                   	push   ebp
c0028678:	89 e5                	mov    ebp,esp
c002867a:	e8 29 7a fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002867f:	5d                   	pop    ebp
c0028680:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028682 <Computer::~Computer()>:
c0028682:	83 ec 0c             	sub    esp,0xc
c0028685:	ba c8 a1 02 c0       	mov    edx,0xc002a1c8
c002868a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002868e:	89 10                	mov    DWORD PTR [eax],edx
c0028690:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028694:	83 ec 0c             	sub    esp,0xc
c0028697:	50                   	push   eax
c0028698:	e8 25 ba fe ff       	call   c00140c2 <Device::~Device()>
c002869d:	83 c4 10             	add    esp,0x10
c00286a0:	90                   	nop
c00286a1:	83 c4 0c             	add    esp,0xc
c00286a4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00286a6 <Computer::~Computer()>:
c00286a6:	83 ec 0c             	sub    esp,0xc
c00286a9:	83 ec 0c             	sub    esp,0xc
c00286ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00286b0:	e8 cd ff ff ff       	call   c0028682 <Computer::~Computer()>
c00286b5:	83 c4 10             	add    esp,0x10
c00286b8:	83 ec 08             	sub    esp,0x8
c00286bb:	68 ec 01 00 00       	push   0x1ec
c00286c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00286c4:	e8 1a a6 fe ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c00286c9:	83 c4 10             	add    esp,0x10
c00286cc:	83 c4 0c             	add    esp,0xc
c00286cf:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00286d0 <idleCommon()>:
c00286d0:	83 ec 0c             	sub    esp,0xc
c00286d3:	e8 04 56 ff ff       	call   c001dcdc <lockScheduler()>
c00286d8:	e8 75 59 ff ff       	call   c001e052 <schedule()>
c00286dd:	83 c4 0c             	add    esp,0xc
c00286e0:	e9 f9 55 ff ff       	jmp    c001dcde <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00286e6 <LinkedList<UnixFile>::~LinkedList()>:
c00286e6:	90                   	nop
c00286e7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00286e8 <LinkedList<UnixFile>::LinkedList()>:
c00286e8:	83 ec 0c             	sub    esp,0xc
c00286eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286ef:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00286f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286f9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028700:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028704:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002870b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002870f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028715:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028719:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028724:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002872b:	83 ec 0c             	sub    esp,0xc
c002872e:	68 86 a4 02 c0       	push   0xc002a486
c0028733:	e8 8b a6 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0028738:	83 c4 10             	add    esp,0x10
c002873b:	90                   	nop
c002873c:	83 c4 0c             	add    esp,0xc
c002873f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028740 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028740:	83 ec 0c             	sub    esp,0xc
c0028743:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028748:	75 10                	jne    c002875a <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002874a:	83 ec 0c             	sub    esp,0xc
c002874d:	68 a0 a4 02 c0       	push   0xc002a4a0
c0028752:	e8 aa 1d ff ff       	call   c001a501 <Krnl::panic(char const*)>
c0028757:	83 c4 10             	add    esp,0x10
c002875a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002875e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028760:	85 c0                	test   eax,eax
c0028762:	74 34                	je     c0028798 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028764:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028768:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002876b:	85 c0                	test   eax,eax
c002876d:	74 29                	je     c0028798 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002876f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028773:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028776:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002877a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002877d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028781:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028785:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002878c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002878f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028796:	eb 65                	jmp    c00287fd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028798:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002879c:	8b 00                	mov    eax,DWORD PTR [eax]
c002879e:	85 c0                	test   eax,eax
c00287a0:	75 4b                	jne    c00287ed <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00287a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287a9:	85 c0                	test   eax,eax
c00287ab:	75 40                	jne    c00287ed <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00287ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287b1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287b5:	89 10                	mov    DWORD PTR [eax],edx
c00287b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287bf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00287c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287c9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00287d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287d4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287d7:	85 c0                	test   eax,eax
c00287d9:	74 22                	je     c00287fd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00287db:	83 ec 0c             	sub    esp,0xc
c00287de:	68 c2 a4 02 c0       	push   0xc002a4c2
c00287e3:	e8 19 1d ff ff       	call   c001a501 <Krnl::panic(char const*)>
c00287e8:	83 c4 10             	add    esp,0x10
c00287eb:	eb 10                	jmp    c00287fd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00287ed:	83 ec 0c             	sub    esp,0xc
c00287f0:	68 cc a4 02 c0       	push   0xc002a4cc
c00287f5:	e8 07 1d ff ff       	call   c001a501 <Krnl::panic(char const*)>
c00287fa:	83 c4 10             	add    esp,0x10
c00287fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028801:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028804:	8d 50 01             	lea    edx,[eax+0x1]
c0028807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002880b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002880e:	90                   	nop
c002880f:	83 c4 0c             	add    esp,0xc
c0028812:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0028814 <LinkedList<UnixFile>::getFirstElement()>:
c0028814:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028818:	8b 00                	mov    eax,DWORD PTR [eax]
c002881a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002881c <LinkedList<UnixFile>::removeFirst()>:
c002881c:	83 ec 0c             	sub    esp,0xc
c002881f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028823:	8b 00                	mov    eax,DWORD PTR [eax]
c0028825:	85 c0                	test   eax,eax
c0028827:	75 12                	jne    c002883b <LinkedList<UnixFile>::removeFirst()+0x1f>
c0028829:	83 ec 0c             	sub    esp,0xc
c002882c:	68 d8 a4 02 c0       	push   0xc002a4d8
c0028831:	e8 cb 1c ff ff       	call   c001a501 <Krnl::panic(char const*)>
c0028836:	83 c4 10             	add    esp,0x10
c0028839:	eb 7e                	jmp    c00288b9 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002883b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002883f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028842:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028845:	85 c0                	test   eax,eax
c0028847:	74 10                	je     c0028859 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0028849:	83 ec 0c             	sub    esp,0xc
c002884c:	68 23 a5 02 c0       	push   0xc002a523
c0028851:	e8 ab 1c ff ff       	call   c001a501 <Krnl::panic(char const*)>
c0028856:	83 c4 10             	add    esp,0x10
c0028859:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002885d:	8b 00                	mov    eax,DWORD PTR [eax]
c002885f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028862:	85 c0                	test   eax,eax
c0028864:	75 33                	jne    c0028899 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0028866:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002886a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028874:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002887b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002887f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028882:	83 f8 01             	cmp    eax,0x1
c0028885:	74 21                	je     c00288a8 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028887:	83 ec 0c             	sub    esp,0xc
c002888a:	68 fc a4 02 c0       	push   0xc002a4fc
c002888f:	e8 6d 1c ff ff       	call   c001a501 <Krnl::panic(char const*)>
c0028894:	83 c4 10             	add    esp,0x10
c0028897:	eb 0f                	jmp    c00288a8 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028899:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002889d:	8b 00                	mov    eax,DWORD PTR [eax]
c002889f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00288a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288a6:	89 10                	mov    DWORD PTR [eax],edx
c00288a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288ac:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288af:	8d 50 ff             	lea    edx,[eax-0x1]
c00288b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288b6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00288b9:	83 c4 0c             	add    esp,0xc
c00288bc:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00288be <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00288be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00288c2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288c5:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00288c6 <DriverlessDevice::~DriverlessDevice()>:
c00288c6:	ba a4 ac 02 c0       	mov    edx,0xc002aca4
c00288cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288cf:	89 10                	mov    DWORD PTR [eax],edx
c00288d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288d5:	50                   	push   eax
c00288d6:	e8 e7 b7 fe ff       	call   c00140c2 <Device::~Device()>
c00288db:	83 c4 04             	add    esp,0x4
c00288de:	90                   	nop
c00288df:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00288e0 <DriverlessDevice::~DriverlessDevice()>:
c00288e0:	83 ec 0c             	sub    esp,0xc
c00288e3:	83 ec 0c             	sub    esp,0xc
c00288e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00288ea:	e8 d7 ff ff ff       	call   c00288c6 <DriverlessDevice::~DriverlessDevice()>
c00288ef:	83 c4 10             	add    esp,0x10
c00288f2:	83 ec 08             	sub    esp,0x8
c00288f5:	68 58 01 00 00       	push   0x158
c00288fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00288fe:	e8 e0 a3 fe ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0028903:	83 c4 10             	add    esp,0x10
c0028906:	83 c4 0c             	add    esp,0xc
c0028909:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002890a <LinkedList<Device>::addElement(Device*)>:
c002890a:	83 ec 0c             	sub    esp,0xc
c002890d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028912:	75 10                	jne    c0028924 <LinkedList<Device>::addElement(Device*)+0x1a>
c0028914:	83 ec 0c             	sub    esp,0xc
c0028917:	68 a0 a4 02 c0       	push   0xc002a4a0
c002891c:	e8 e0 1b ff ff       	call   c001a501 <Krnl::panic(char const*)>
c0028921:	83 c4 10             	add    esp,0x10
c0028924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028928:	8b 00                	mov    eax,DWORD PTR [eax]
c002892a:	85 c0                	test   eax,eax
c002892c:	74 3a                	je     c0028968 <LinkedList<Device>::addElement(Device*)+0x5e>
c002892e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028932:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028935:	85 c0                	test   eax,eax
c0028937:	74 2f                	je     c0028968 <LinkedList<Device>::addElement(Device*)+0x5e>
c0028939:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002893d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028940:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028944:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002894a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002894e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028952:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028955:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028959:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002895c:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028966:	eb 68                	jmp    c00289d0 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028968:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002896c:	8b 00                	mov    eax,DWORD PTR [eax]
c002896e:	85 c0                	test   eax,eax
c0028970:	75 4e                	jne    c00289c0 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028976:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028979:	85 c0                	test   eax,eax
c002897b:	75 43                	jne    c00289c0 <LinkedList<Device>::addElement(Device*)+0xb6>
c002897d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028981:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028985:	89 10                	mov    DWORD PTR [eax],edx
c0028987:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002898b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002898f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028992:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028996:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028999:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00289a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289a7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00289aa:	85 c0                	test   eax,eax
c00289ac:	74 22                	je     c00289d0 <LinkedList<Device>::addElement(Device*)+0xc6>
c00289ae:	83 ec 0c             	sub    esp,0xc
c00289b1:	68 c2 a4 02 c0       	push   0xc002a4c2
c00289b6:	e8 46 1b ff ff       	call   c001a501 <Krnl::panic(char const*)>
c00289bb:	83 c4 10             	add    esp,0x10
c00289be:	eb 10                	jmp    c00289d0 <LinkedList<Device>::addElement(Device*)+0xc6>
c00289c0:	83 ec 0c             	sub    esp,0xc
c00289c3:	68 cc a4 02 c0       	push   0xc002a4cc
c00289c8:	e8 34 1b ff ff       	call   c001a501 <Krnl::panic(char const*)>
c00289cd:	83 c4 10             	add    esp,0x10
c00289d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289d4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00289d7:	8d 50 01             	lea    edx,[eax+0x1]
c00289da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289de:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00289e1:	90                   	nop
c00289e2:	83 c4 0c             	add    esp,0xc
c00289e5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00289e6 <LinkedList<Device>::LinkedList()>:
c00289e6:	83 ec 0c             	sub    esp,0xc
c00289e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289ed:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00289f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289f7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00289fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a02:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028a09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a0d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028a13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a17:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028a1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a22:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028a29:	83 ec 0c             	sub    esp,0xc
c0028a2c:	68 86 a4 02 c0       	push   0xc002a486
c0028a31:	e8 8d a3 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0028a36:	83 c4 10             	add    esp,0x10
c0028a39:	90                   	nop
c0028a3a:	83 c4 0c             	add    esp,0xc
c0028a3d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0028a3e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0028a3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a42:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a44:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0028a46 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0028a46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a4c:	85 c0                	test   eax,eax
c0028a4e:	75 0e                	jne    c0028a5e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028a50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a54:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a57:	85 c0                	test   eax,eax
c0028a59:	75 03                	jne    c0028a5e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028a5b:	b0 01                	mov    al,0x1
c0028a5d:	c3                   	ret    
c0028a5e:	b0 00                	mov    al,0x0
c0028a60:	90                   	nop
c0028a61:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028a62 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028a62:	83 ec 0c             	sub    esp,0xc
c0028a65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a69:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a6b:	85 c0                	test   eax,eax
c0028a6d:	75 15                	jne    c0028a84 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0028a6f:	83 ec 0c             	sub    esp,0xc
c0028a72:	68 d8 a4 02 c0       	push   0xc002a4d8
c0028a77:	e8 85 1a ff ff       	call   c001a501 <Krnl::panic(char const*)>
c0028a7c:	83 c4 10             	add    esp,0x10
c0028a7f:	e9 88 00 00 00       	jmp    c0028b0c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028a84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a8b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028a8e:	85 c0                	test   eax,eax
c0028a90:	0f 95 c0             	setne  al
c0028a93:	84 c0                	test   al,al
c0028a95:	74 10                	je     c0028aa7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028a97:	83 ec 0c             	sub    esp,0xc
c0028a9a:	68 23 a5 02 c0       	push   0xc002a523
c0028a9f:	e8 5d 1a ff ff       	call   c001a501 <Krnl::panic(char const*)>
c0028aa4:	83 c4 10             	add    esp,0x10
c0028aa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aab:	8b 00                	mov    eax,DWORD PTR [eax]
c0028aad:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028ab0:	85 c0                	test   eax,eax
c0028ab2:	0f 94 c0             	sete   al
c0028ab5:	84 c0                	test   al,al
c0028ab7:	74 33                	je     c0028aec <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028ab9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028abd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028ac3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ac7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028ace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ad2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ad5:	83 f8 01             	cmp    eax,0x1
c0028ad8:	74 21                	je     c0028afb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028ada:	83 ec 0c             	sub    esp,0xc
c0028add:	68 fc a4 02 c0       	push   0xc002a4fc
c0028ae2:	e8 1a 1a ff ff       	call   c001a501 <Krnl::panic(char const*)>
c0028ae7:	83 c4 10             	add    esp,0x10
c0028aea:	eb 0f                	jmp    c0028afb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028aec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028af0:	8b 00                	mov    eax,DWORD PTR [eax]
c0028af2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028af5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028af9:	89 10                	mov    DWORD PTR [eax],edx
c0028afb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aff:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b02:	8d 50 ff             	lea    edx,[eax-0x1]
c0028b05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b09:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028b0c:	83 c4 0c             	add    esp,0xc
c0028b0f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028b10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028b10:	83 ec 0c             	sub    esp,0xc
c0028b13:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028b18:	75 10                	jne    c0028b2a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0028b1a:	83 ec 0c             	sub    esp,0xc
c0028b1d:	68 a0 a4 02 c0       	push   0xc002a4a0
c0028b22:	e8 da 19 ff ff       	call   c001a501 <Krnl::panic(char const*)>
c0028b27:	83 c4 10             	add    esp,0x10
c0028b2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b30:	85 c0                	test   eax,eax
c0028b32:	74 34                	je     c0028b68 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028b34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b3b:	85 c0                	test   eax,eax
c0028b3d:	74 29                	je     c0028b68 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028b3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b43:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b46:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b4a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0028b4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b51:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b55:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028b58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b5f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028b66:	eb 65                	jmp    c0028bcd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028b68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b6e:	85 c0                	test   eax,eax
c0028b70:	75 4b                	jne    c0028bbd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028b72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b79:	85 c0                	test   eax,eax
c0028b7b:	75 40                	jne    c0028bbd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028b7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b81:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b85:	89 10                	mov    DWORD PTR [eax],edx
c0028b87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b8b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b8f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028b92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b96:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b99:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028ba0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ba4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ba7:	85 c0                	test   eax,eax
c0028ba9:	74 22                	je     c0028bcd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028bab:	83 ec 0c             	sub    esp,0xc
c0028bae:	68 c2 a4 02 c0       	push   0xc002a4c2
c0028bb3:	e8 49 19 ff ff       	call   c001a501 <Krnl::panic(char const*)>
c0028bb8:	83 c4 10             	add    esp,0x10
c0028bbb:	eb 10                	jmp    c0028bcd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028bbd:	83 ec 0c             	sub    esp,0xc
c0028bc0:	68 cc a4 02 c0       	push   0xc002a4cc
c0028bc5:	e8 37 19 ff ff       	call   c001a501 <Krnl::panic(char const*)>
c0028bca:	83 c4 10             	add    esp,0x10
c0028bcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bd1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028bd4:	8d 50 01             	lea    edx,[eax+0x1]
c0028bd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bdb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028bde:	90                   	nop
c0028bdf:	83 c4 0c             	add    esp,0xc
c0028be2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028be4 <ACPI::~ACPI()>:
c0028be4:	83 ec 0c             	sub    esp,0xc
c0028be7:	ba 1c b6 02 c0       	mov    edx,0xc002b61c
c0028bec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bf0:	89 10                	mov    DWORD PTR [eax],edx
c0028bf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bf6:	83 ec 0c             	sub    esp,0xc
c0028bf9:	50                   	push   eax
c0028bfa:	e8 c3 b4 fe ff       	call   c00140c2 <Device::~Device()>
c0028bff:	83 c4 10             	add    esp,0x10
c0028c02:	90                   	nop
c0028c03:	83 c4 0c             	add    esp,0xc
c0028c06:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028c08 <ACPI::~ACPI()>:
c0028c08:	83 ec 0c             	sub    esp,0xc
c0028c0b:	83 ec 0c             	sub    esp,0xc
c0028c0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c12:	e8 cd ff ff ff       	call   c0028be4 <ACPI::~ACPI()>
c0028c17:	83 c4 10             	add    esp,0x10
c0028c1a:	83 ec 08             	sub    esp,0x8
c0028c1d:	68 68 12 00 00       	push   0x1268
c0028c22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c26:	e8 b8 a0 fe ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0028c2b:	83 c4 10             	add    esp,0x10
c0028c2e:	83 c4 0c             	add    esp,0xc
c0028c31:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028c32 <CPU::~CPU()>:
c0028c32:	83 ec 0c             	sub    esp,0xc
c0028c35:	ba 0c ba 02 c0       	mov    edx,0xc002ba0c
c0028c3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c3e:	89 10                	mov    DWORD PTR [eax],edx
c0028c40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c44:	83 ec 0c             	sub    esp,0xc
c0028c47:	50                   	push   eax
c0028c48:	e8 75 b4 fe ff       	call   c00140c2 <Device::~Device()>
c0028c4d:	83 c4 10             	add    esp,0x10
c0028c50:	90                   	nop
c0028c51:	83 c4 0c             	add    esp,0xc
c0028c54:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028c56 <CPU::~CPU()>:
c0028c56:	83 ec 0c             	sub    esp,0xc
c0028c59:	83 ec 0c             	sub    esp,0xc
c0028c5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c60:	e8 cd ff ff ff       	call   c0028c32 <CPU::~CPU()>
c0028c65:	83 c4 10             	add    esp,0x10
c0028c68:	83 ec 08             	sub    esp,0x8
c0028c6b:	68 98 11 00 00       	push   0x1198
c0028c70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c74:	e8 6a a0 fe ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0028c79:	83 c4 10             	add    esp,0x10
c0028c7c:	83 c4 0c             	add    esp,0xc
c0028c7f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028c80 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028c80:	90                   	nop
c0028c81:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028c82 <ThreadControlBlock::ThreadControlBlock()>:
c0028c82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c86:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028c8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c91:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028c98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c9c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028ca3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ca7:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028cae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cb2:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0028cb9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cbd:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028cc1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cc5:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028cc9:	90                   	nop
c0028cca:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028ccc <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028ccc:	83 ec 0c             	sub    esp,0xc
c0028ccf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cd3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028cd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cdd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ce8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028cef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cf3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028cf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cfd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028d04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d08:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028d0f:	83 ec 0c             	sub    esp,0xc
c0028d12:	68 86 a4 02 c0       	push   0xc002a486
c0028d17:	e8 a7 a0 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0028d1c:	83 c4 10             	add    esp,0x10
c0028d1f:	90                   	nop
c0028d20:	83 c4 0c             	add    esp,0xc
c0028d23:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028d24 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028d24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028d28:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028d2b:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028d2c <Vm::_FPUState::_FPUState()>:
c0028d2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d30:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028d37:	90                   	nop
c0028d38:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028d3a <PCI::~PCI()>:
c0028d3a:	83 ec 0c             	sub    esp,0xc
c0028d3d:	ba b8 ca 02 c0       	mov    edx,0xc002cab8
c0028d42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d46:	89 10                	mov    DWORD PTR [eax],edx
c0028d48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d4c:	83 ec 0c             	sub    esp,0xc
c0028d4f:	50                   	push   eax
c0028d50:	e8 45 ad fe ff       	call   c0013a9a <Bus::~Bus()>
c0028d55:	83 c4 10             	add    esp,0x10
c0028d58:	90                   	nop
c0028d59:	83 c4 0c             	add    esp,0xc
c0028d5c:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028d5e <PCI::~PCI()>:
c0028d5e:	83 ec 0c             	sub    esp,0xc
c0028d61:	83 ec 0c             	sub    esp,0xc
c0028d64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d68:	e8 cd ff ff ff       	call   c0028d3a <PCI::~PCI()>
c0028d6d:	83 c4 10             	add    esp,0x10
c0028d70:	83 ec 08             	sub    esp,0x8
c0028d73:	68 58 01 00 00       	push   0x158
c0028d78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d7c:	e8 62 9f fe ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0028d81:	83 c4 10             	add    esp,0x10
c0028d84:	83 c4 0c             	add    esp,0xc
c0028d87:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028d88 <IDE::~IDE()>:
c0028d88:	83 ec 0c             	sub    esp,0xc
c0028d8b:	ba 1c cd 02 c0       	mov    edx,0xc002cd1c
c0028d90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d94:	89 10                	mov    DWORD PTR [eax],edx
c0028d96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d9a:	83 ec 0c             	sub    esp,0xc
c0028d9d:	50                   	push   eax
c0028d9e:	e8 0f b8 fe ff       	call   c00145b2 <HardDiskController::~HardDiskController()>
c0028da3:	83 c4 10             	add    esp,0x10
c0028da6:	90                   	nop
c0028da7:	83 c4 0c             	add    esp,0xc
c0028daa:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028dac <IDE::~IDE()>:
c0028dac:	83 ec 0c             	sub    esp,0xc
c0028daf:	83 ec 0c             	sub    esp,0xc
c0028db2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028db6:	e8 cd ff ff ff       	call   c0028d88 <IDE::~IDE()>
c0028dbb:	83 c4 10             	add    esp,0x10
c0028dbe:	83 ec 08             	sub    esp,0x8
c0028dc1:	68 70 02 00 00       	push   0x270
c0028dc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dca:	e8 14 9f fe ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0028dcf:	83 c4 10             	add    esp,0x10
c0028dd2:	83 c4 0c             	add    esp,0xc
c0028dd5:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028dd6 <SATABus::~SATABus()>:
c0028dd6:	83 ec 0c             	sub    esp,0xc
c0028dd9:	ba fc cd 02 c0       	mov    edx,0xc002cdfc
c0028dde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028de2:	89 10                	mov    DWORD PTR [eax],edx
c0028de4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028de8:	83 ec 0c             	sub    esp,0xc
c0028deb:	50                   	push   eax
c0028dec:	e8 c1 b7 fe ff       	call   c00145b2 <HardDiskController::~HardDiskController()>
c0028df1:	83 c4 10             	add    esp,0x10
c0028df4:	90                   	nop
c0028df5:	83 c4 0c             	add    esp,0xc
c0028df8:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028dfa <SATABus::~SATABus()>:
c0028dfa:	83 ec 0c             	sub    esp,0xc
c0028dfd:	83 ec 0c             	sub    esp,0xc
c0028e00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e04:	e8 cd ff ff ff       	call   c0028dd6 <SATABus::~SATABus()>
c0028e09:	83 c4 10             	add    esp,0x10
c0028e0c:	83 ec 08             	sub    esp,0x8
c0028e0f:	68 64 01 00 00       	push   0x164
c0028e14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e18:	e8 c6 9e fe ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0028e1d:	83 c4 10             	add    esp,0x10
c0028e20:	83 c4 0c             	add    esp,0xc
c0028e23:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028e24 <ATA::~ATA()>:
c0028e24:	83 ec 0c             	sub    esp,0xc
c0028e27:	ba 48 ce 02 c0       	mov    edx,0xc002ce48
c0028e2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e30:	89 10                	mov    DWORD PTR [eax],edx
c0028e32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e36:	83 ec 0c             	sub    esp,0xc
c0028e39:	50                   	push   eax
c0028e3a:	e8 65 b8 fe ff       	call   c00146a4 <PhysicalDisk::~PhysicalDisk()>
c0028e3f:	83 c4 10             	add    esp,0x10
c0028e42:	90                   	nop
c0028e43:	83 c4 0c             	add    esp,0xc
c0028e46:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028e48 <ATA::~ATA()>:
c0028e48:	83 ec 0c             	sub    esp,0xc
c0028e4b:	83 ec 0c             	sub    esp,0xc
c0028e4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e52:	e8 cd ff ff ff       	call   c0028e24 <ATA::~ATA()>
c0028e57:	83 c4 10             	add    esp,0x10
c0028e5a:	83 ec 08             	sub    esp,0x8
c0028e5d:	68 7c 01 00 00       	push   0x17c
c0028e62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e66:	e8 78 9e fe ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0028e6b:	83 c4 10             	add    esp,0x10
c0028e6e:	83 c4 0c             	add    esp,0xc
c0028e71:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028e72 <ATAPI::~ATAPI()>:
c0028e72:	83 ec 0c             	sub    esp,0xc
c0028e75:	ba 80 ce 02 c0       	mov    edx,0xc002ce80
c0028e7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e7e:	89 10                	mov    DWORD PTR [eax],edx
c0028e80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e84:	83 ec 0c             	sub    esp,0xc
c0028e87:	50                   	push   eax
c0028e88:	e8 17 b8 fe ff       	call   c00146a4 <PhysicalDisk::~PhysicalDisk()>
c0028e8d:	83 c4 10             	add    esp,0x10
c0028e90:	90                   	nop
c0028e91:	83 c4 0c             	add    esp,0xc
c0028e94:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028e96 <ATAPI::~ATAPI()>:
c0028e96:	83 ec 0c             	sub    esp,0xc
c0028e99:	83 ec 0c             	sub    esp,0xc
c0028e9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ea0:	e8 cd ff ff ff       	call   c0028e72 <ATAPI::~ATAPI()>
c0028ea5:	83 c4 10             	add    esp,0x10
c0028ea8:	83 ec 08             	sub    esp,0x8
c0028eab:	68 80 01 00 00       	push   0x180
c0028eb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028eb4:	e8 2a 9e fe ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0028eb9:	83 c4 10             	add    esp,0x10
c0028ebc:	83 c4 0c             	add    esp,0xc
c0028ebf:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028ec0 <SATA::~SATA()>:
c0028ec0:	83 ec 0c             	sub    esp,0xc
c0028ec3:	ba 34 cf 02 c0       	mov    edx,0xc002cf34
c0028ec8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ecc:	89 10                	mov    DWORD PTR [eax],edx
c0028ece:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ed2:	83 ec 0c             	sub    esp,0xc
c0028ed5:	50                   	push   eax
c0028ed6:	e8 c9 b7 fe ff       	call   c00146a4 <PhysicalDisk::~PhysicalDisk()>
c0028edb:	83 c4 10             	add    esp,0x10
c0028ede:	90                   	nop
c0028edf:	83 c4 0c             	add    esp,0xc
c0028ee2:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028ee4 <SATA::~SATA()>:
c0028ee4:	83 ec 0c             	sub    esp,0xc
c0028ee7:	83 ec 0c             	sub    esp,0xc
c0028eea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028eee:	e8 cd ff ff ff       	call   c0028ec0 <SATA::~SATA()>
c0028ef3:	83 c4 10             	add    esp,0x10
c0028ef6:	83 ec 08             	sub    esp,0x8
c0028ef9:	68 7c 01 00 00       	push   0x17c
c0028efe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f02:	e8 dc 9d fe ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0028f07:	83 c4 10             	add    esp,0x10
c0028f0a:	83 c4 0c             	add    esp,0xc
c0028f0d:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028f0e <SATAPI::~SATAPI()>:
c0028f0e:	83 ec 0c             	sub    esp,0xc
c0028f11:	ba 10 d0 02 c0       	mov    edx,0xc002d010
c0028f16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f1a:	89 10                	mov    DWORD PTR [eax],edx
c0028f1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f20:	83 ec 0c             	sub    esp,0xc
c0028f23:	50                   	push   eax
c0028f24:	e8 7b b7 fe ff       	call   c00146a4 <PhysicalDisk::~PhysicalDisk()>
c0028f29:	83 c4 10             	add    esp,0x10
c0028f2c:	90                   	nop
c0028f2d:	83 c4 0c             	add    esp,0xc
c0028f30:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028f32 <SATAPI::~SATAPI()>:
c0028f32:	83 ec 0c             	sub    esp,0xc
c0028f35:	83 ec 0c             	sub    esp,0xc
c0028f38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f3c:	e8 cd ff ff ff       	call   c0028f0e <SATAPI::~SATAPI()>
c0028f41:	83 c4 10             	add    esp,0x10
c0028f44:	83 ec 08             	sub    esp,0x8
c0028f47:	68 80 01 00 00       	push   0x180
c0028f4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f50:	e8 8e 9d fe ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0028f55:	83 c4 10             	add    esp,0x10
c0028f58:	83 c4 0c             	add    esp,0xc
c0028f5b:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028f5c <AVX::~AVX()>:
c0028f5c:	83 ec 0c             	sub    esp,0xc
c0028f5f:	ba 50 d0 02 c0       	mov    edx,0xc002d050
c0028f64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f68:	89 10                	mov    DWORD PTR [eax],edx
c0028f6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f6e:	83 ec 0c             	sub    esp,0xc
c0028f71:	50                   	push   eax
c0028f72:	e8 b1 b7 fe ff       	call   c0014728 <FPU::~FPU()>
c0028f77:	83 c4 10             	add    esp,0x10
c0028f7a:	90                   	nop
c0028f7b:	83 c4 0c             	add    esp,0xc
c0028f7e:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028f80 <AVX::~AVX()>:
c0028f80:	83 ec 0c             	sub    esp,0xc
c0028f83:	83 ec 0c             	sub    esp,0xc
c0028f86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f8a:	e8 cd ff ff ff       	call   c0028f5c <AVX::~AVX()>
c0028f8f:	83 c4 10             	add    esp,0x10
c0028f92:	83 ec 08             	sub    esp,0x8
c0028f95:	68 58 01 00 00       	push   0x158
c0028f9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f9e:	e8 40 9d fe ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0028fa3:	83 c4 10             	add    esp,0x10
c0028fa6:	83 c4 0c             	add    esp,0xc
c0028fa9:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028faa <MMX::~MMX()>:
c0028faa:	83 ec 0c             	sub    esp,0xc
c0028fad:	ba 90 d0 02 c0       	mov    edx,0xc002d090
c0028fb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fb6:	89 10                	mov    DWORD PTR [eax],edx
c0028fb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fbc:	83 ec 0c             	sub    esp,0xc
c0028fbf:	50                   	push   eax
c0028fc0:	e8 63 b7 fe ff       	call   c0014728 <FPU::~FPU()>
c0028fc5:	83 c4 10             	add    esp,0x10
c0028fc8:	90                   	nop
c0028fc9:	83 c4 0c             	add    esp,0xc
c0028fcc:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028fce <MMX::~MMX()>:
c0028fce:	83 ec 0c             	sub    esp,0xc
c0028fd1:	83 ec 0c             	sub    esp,0xc
c0028fd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fd8:	e8 cd ff ff ff       	call   c0028faa <MMX::~MMX()>
c0028fdd:	83 c4 10             	add    esp,0x10
c0028fe0:	83 ec 08             	sub    esp,0x8
c0028fe3:	68 58 01 00 00       	push   0x158
c0028fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fec:	e8 f2 9c fe ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0028ff1:	83 c4 10             	add    esp,0x10
c0028ff4:	83 c4 0c             	add    esp,0xc
c0028ff7:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0028ff8 <SSE::~SSE()>:
c0028ff8:	83 ec 0c             	sub    esp,0xc
c0028ffb:	ba d0 d0 02 c0       	mov    edx,0xc002d0d0
c0029000:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029004:	89 10                	mov    DWORD PTR [eax],edx
c0029006:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002900a:	83 ec 0c             	sub    esp,0xc
c002900d:	50                   	push   eax
c002900e:	e8 15 b7 fe ff       	call   c0014728 <FPU::~FPU()>
c0029013:	83 c4 10             	add    esp,0x10
c0029016:	90                   	nop
c0029017:	83 c4 0c             	add    esp,0xc
c002901a:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c002901c <SSE::~SSE()>:
c002901c:	83 ec 0c             	sub    esp,0xc
c002901f:	83 ec 0c             	sub    esp,0xc
c0029022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029026:	e8 cd ff ff ff       	call   c0028ff8 <SSE::~SSE()>
c002902b:	83 c4 10             	add    esp,0x10
c002902e:	83 ec 08             	sub    esp,0x8
c0029031:	68 58 01 00 00       	push   0x158
c0029036:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002903a:	e8 a4 9c fe ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c002903f:	83 c4 10             	add    esp,0x10
c0029042:	83 c4 0c             	add    esp,0xc
c0029045:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0029046 <x87::~x87()>:
c0029046:	83 ec 0c             	sub    esp,0xc
c0029049:	ba 10 d1 02 c0       	mov    edx,0xc002d110
c002904e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029052:	89 10                	mov    DWORD PTR [eax],edx
c0029054:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029058:	83 ec 0c             	sub    esp,0xc
c002905b:	50                   	push   eax
c002905c:	e8 c7 b6 fe ff       	call   c0014728 <FPU::~FPU()>
c0029061:	83 c4 10             	add    esp,0x10
c0029064:	90                   	nop
c0029065:	83 c4 0c             	add    esp,0xc
c0029068:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c002906a <x87::~x87()>:
c002906a:	83 ec 0c             	sub    esp,0xc
c002906d:	83 ec 0c             	sub    esp,0xc
c0029070:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029074:	e8 cd ff ff ff       	call   c0029046 <x87::~x87()>
c0029079:	83 c4 10             	add    esp,0x10
c002907c:	83 ec 08             	sub    esp,0x8
c002907f:	68 58 01 00 00       	push   0x158
c0029084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029088:	e8 56 9c fe ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c002908d:	83 c4 10             	add    esp,0x10
c0029090:	83 c4 0c             	add    esp,0xc
c0029093:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029094 <IOAPIC::~IOAPIC()>:
c0029094:	83 ec 0c             	sub    esp,0xc
c0029097:	ba 68 d2 02 c0       	mov    edx,0xc002d268
c002909c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290a0:	89 10                	mov    DWORD PTR [eax],edx
c00290a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290a6:	83 ec 0c             	sub    esp,0xc
c00290a9:	50                   	push   eax
c00290aa:	e8 13 b0 fe ff       	call   c00140c2 <Device::~Device()>
c00290af:	83 c4 10             	add    esp,0x10
c00290b2:	90                   	nop
c00290b3:	83 c4 0c             	add    esp,0xc
c00290b6:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c00290b8 <IOAPIC::~IOAPIC()>:
c00290b8:	83 ec 0c             	sub    esp,0xc
c00290bb:	83 ec 0c             	sub    esp,0xc
c00290be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290c2:	e8 cd ff ff ff       	call   c0029094 <IOAPIC::~IOAPIC()>
c00290c7:	83 c4 10             	add    esp,0x10
c00290ca:	83 ec 08             	sub    esp,0x8
c00290cd:	68 68 01 00 00       	push   0x168
c00290d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290d6:	e8 08 9c fe ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c00290db:	83 c4 10             	add    esp,0x10
c00290de:	83 c4 0c             	add    esp,0xc
c00290e1:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c00290e2 <APIC::~APIC()>:
c00290e2:	83 ec 0c             	sub    esp,0xc
c00290e5:	ba 20 d2 02 c0       	mov    edx,0xc002d220
c00290ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290ee:	89 10                	mov    DWORD PTR [eax],edx
c00290f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290f4:	83 ec 0c             	sub    esp,0xc
c00290f7:	50                   	push   eax
c00290f8:	e8 f5 ba fe ff       	call   c0014bf2 <InterruptController::~InterruptController()>
c00290fd:	83 c4 10             	add    esp,0x10
c0029100:	90                   	nop
c0029101:	83 c4 0c             	add    esp,0xc
c0029104:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0029106 <APIC::~APIC()>:
c0029106:	83 ec 0c             	sub    esp,0xc
c0029109:	83 ec 0c             	sub    esp,0xc
c002910c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029110:	e8 cd ff ff ff       	call   c00290e2 <APIC::~APIC()>
c0029115:	83 c4 10             	add    esp,0x10
c0029118:	83 ec 08             	sub    esp,0x8
c002911b:	68 58 21 00 00       	push   0x2158
c0029120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029124:	e8 ba 9b fe ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0029129:	83 c4 10             	add    esp,0x10
c002912c:	83 c4 0c             	add    esp,0xc
c002912f:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0029130 <PIC::~PIC()>:
c0029130:	83 ec 0c             	sub    esp,0xc
c0029133:	ba b8 d2 02 c0       	mov    edx,0xc002d2b8
c0029138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002913c:	89 10                	mov    DWORD PTR [eax],edx
c002913e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029142:	83 ec 0c             	sub    esp,0xc
c0029145:	50                   	push   eax
c0029146:	e8 a7 ba fe ff       	call   c0014bf2 <InterruptController::~InterruptController()>
c002914b:	83 c4 10             	add    esp,0x10
c002914e:	90                   	nop
c002914f:	83 c4 0c             	add    esp,0xc
c0029152:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029154 <PIC::~PIC()>:
c0029154:	83 ec 0c             	sub    esp,0xc
c0029157:	83 ec 0c             	sub    esp,0xc
c002915a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002915e:	e8 cd ff ff ff       	call   c0029130 <PIC::~PIC()>
c0029163:	83 c4 10             	add    esp,0x10
c0029166:	83 ec 08             	sub    esp,0x8
c0029169:	68 58 21 00 00       	push   0x2158
c002916e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029172:	e8 6c 9b fe ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0029177:	83 c4 10             	add    esp,0x10
c002917a:	83 c4 0c             	add    esp,0xc
c002917d:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c002917e <APICTimer::~APICTimer()>:
c002917e:	83 ec 0c             	sub    esp,0xc
c0029181:	ba 0c d3 02 c0       	mov    edx,0xc002d30c
c0029186:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002918a:	89 10                	mov    DWORD PTR [eax],edx
c002918c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029190:	83 ec 0c             	sub    esp,0xc
c0029193:	50                   	push   eax
c0029194:	e8 1f da fe ff       	call   c0016bb8 <Timer::~Timer()>
c0029199:	83 c4 10             	add    esp,0x10
c002919c:	90                   	nop
c002919d:	83 c4 0c             	add    esp,0xc
c00291a0:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c00291a2 <APICTimer::~APICTimer()>:
c00291a2:	83 ec 0c             	sub    esp,0xc
c00291a5:	83 ec 0c             	sub    esp,0xc
c00291a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291ac:	e8 cd ff ff ff       	call   c002917e <APICTimer::~APICTimer()>
c00291b1:	83 c4 10             	add    esp,0x10
c00291b4:	83 ec 08             	sub    esp,0x8
c00291b7:	68 60 01 00 00       	push   0x160
c00291bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291c0:	e8 1e 9b fe ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c00291c5:	83 c4 10             	add    esp,0x10
c00291c8:	83 c4 0c             	add    esp,0xc
c00291cb:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00291cc <PIT::~PIT()>:
c00291cc:	83 ec 0c             	sub    esp,0xc
c00291cf:	ba 5c d3 02 c0       	mov    edx,0xc002d35c
c00291d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291d8:	89 10                	mov    DWORD PTR [eax],edx
c00291da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291de:	83 ec 0c             	sub    esp,0xc
c00291e1:	50                   	push   eax
c00291e2:	e8 d1 d9 fe ff       	call   c0016bb8 <Timer::~Timer()>
c00291e7:	83 c4 10             	add    esp,0x10
c00291ea:	90                   	nop
c00291eb:	83 c4 0c             	add    esp,0xc
c00291ee:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00291f0 <PIT::~PIT()>:
c00291f0:	83 ec 0c             	sub    esp,0xc
c00291f3:	83 ec 0c             	sub    esp,0xc
c00291f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291fa:	e8 cd ff ff ff       	call   c00291cc <PIT::~PIT()>
c00291ff:	83 c4 10             	add    esp,0x10
c0029202:	83 ec 08             	sub    esp,0x8
c0029205:	68 5c 01 00 00       	push   0x15c
c002920a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002920e:	e8 d0 9a fe ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0029213:	83 c4 10             	add    esp,0x10
c0029216:	83 c4 0c             	add    esp,0xc
c0029219:	c3                   	ret    
