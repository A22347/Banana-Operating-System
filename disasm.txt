
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 8d 9e 00 00       	call   c0009ead <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 d5 31 02 00       	call   c00231fa <_init>
c0000025:	c3                   	ret    
c0000026:	bb 7e 3e 02 c0       	mov    ebx,0xc0023e7e
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 8c 3e 02 c0    	cmp    ebx,0xc0023e8c
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 38 86 02 c0       	mov    eax,0xc0028638
c0000049:	3d 38 86 02 c0       	cmp    eax,0xc0028638
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 38 86 02 c0       	push   0xc0028638
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 38 86 02 c0       	mov    eax,0xc0028638
c0000075:	2d 38 86 02 c0       	sub    eax,0xc0028638
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 38 86 02 c0       	push   0xc0028638
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d c0 87 02 c0 00 	cmp    BYTE PTR ds:0xc00287c0,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 94 3e 02 c0       	mov    ebx,0xc0023e94
c00000bb:	81 eb 90 3e 02 c0    	sub    ebx,0xc0023e90
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 90 3e 02 c0       	mov    esi,0xc0023e90
c00000ca:	a1 c4 87 02 c0       	mov    eax,ds:0xc00287c4
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 c4 87 02 c0       	mov    ds:0xc00287c4,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 c4 87 02 c0       	mov    eax,ds:0xc00287c4
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 38 86 02 c0       	push   0xc0028638
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 c0 87 02 c0 01 	mov    BYTE PTR ds:0xc00287c0,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 c8 87 02 c0       	push   0xc00287c8
c000012c:	68 38 86 02 c0       	push   0xc0028638
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <getRDRAND>:
c0000219:	b9 64 00 00 00       	mov    ecx,0x64

c000021e <retry>:
c000021e:	0f c7 f0             	rdrand eax
c0000221:	72 05                	jb     c0000228 <retry.done>
c0000223:	e2 f9                	loop   c000021e <retry>

c0000225 <retry.fail>:
c0000225:	31 c0                	xor    eax,eax
c0000227:	c3                   	ret    

c0000228 <retry.done>:
c0000228:	c3                   	ret    

c0000229 <detectCPUID>:
c0000229:	9c                   	pushf  
c000022a:	9c                   	pushf  
c000022b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000232:	9d                   	popf   
c0000233:	9c                   	pushf  
c0000234:	58                   	pop    eax
c0000235:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000238:	9d                   	popf   
c0000239:	25 00 00 20 00       	and    eax,0x200000
c000023e:	c3                   	ret    

c000023f <goToVM86>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000245:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000248:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000024b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000024e:	25 ff ff 00 00       	and    eax,0xffff
c0000253:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000259:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000025f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000265:	52                   	push   edx
c0000266:	51                   	push   ecx
c0000267:	68 02 02 02 00       	push   0x20202
c000026c:	53                   	push   ebx
c000026d:	50                   	push   eax
c000026e:	cf                   	iret   

c000026f <goToUsermode>:
c000026f:	55                   	push   ebp
c0000270:	89 e5                	mov    ebp,esp
c0000272:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000275:	66 b8 23 00          	mov    ax,0x23
c0000279:	66 8e d8             	mov    ds,ax
c000027c:	66 8e c0             	mov    es,ax
c000027f:	66 8e e0             	mov    fs,ax
c0000282:	66 8e e8             	mov    gs,ax
c0000285:	89 e0                	mov    eax,esp
c0000287:	68 23 00 00 00       	push   0x23
c000028c:	50                   	push   eax
c000028d:	68 02 02 00 00       	push   0x202
c0000292:	68 1b 00 00 00       	push   0x1b
c0000297:	53                   	push   ebx
c0000298:	cf                   	iret   

c0000299 <switchToThreadASMFirstTime>:
c0000299:	9c                   	pushf  
c000029a:	fa                   	cli    
c000029b:	50                   	push   eax
c000029c:	53                   	push   ebx
c000029d:	51                   	push   ecx
c000029e:	52                   	push   edx
c000029f:	56                   	push   esi
c00002a0:	57                   	push   edi
c00002a1:	55                   	push   ebp
c00002a2:	e9 11 00 00 00       	jmp    c00002b8 <commonThreadSwitch>

c00002a7 <switchToThreadASM>:
c00002a7:	9c                   	pushf  
c00002a8:	50                   	push   eax
c00002a9:	53                   	push   ebx
c00002aa:	51                   	push   ecx
c00002ab:	52                   	push   edx
c00002ac:	56                   	push   esi
c00002ad:	57                   	push   edi
c00002ae:	55                   	push   ebp
c00002af:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002b5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002b8 <commonThreadSwitch>:
c00002b8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002bc:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002c2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002c4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002c7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ca:	0f 20 d9             	mov    ecx,cr3
c00002cd:	39 c8                	cmp    eax,ecx
c00002cf:	74 03                	je     c00002d4 <commonThreadSwitch.doneVAS>
c00002d1:	0f 22 d8             	mov    cr3,eax

c00002d4 <commonThreadSwitch.doneVAS>:
c00002d4:	0f 20 c0             	mov    eax,cr0
c00002d7:	0c 08                	or     al,0x8
c00002d9:	0f 22 c0             	mov    cr0,eax
c00002dc:	85 d2                	test   edx,edx
c00002de:	75 11                	jne    c00002f1 <commonThreadSwitch.firstTime>
c00002e0:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002e3:	e8 18 85 01 00       	call   c0018800 <changeTSS>
c00002e8:	5d                   	pop    ebp
c00002e9:	5f                   	pop    edi
c00002ea:	5e                   	pop    esi
c00002eb:	5a                   	pop    edx
c00002ec:	59                   	pop    ecx
c00002ed:	5b                   	pop    ebx
c00002ee:	58                   	pop    eax
c00002ef:	9d                   	popf   
c00002f0:	c3                   	ret    

c00002f1 <commonThreadSwitch.firstTime>:
c00002f1:	fa                   	cli    
c00002f2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002f5:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002fa:	60                   	pusha  
c00002fb:	e8 84 cb 00 00       	call   c000ce84 <mapVASFirstTime>
c0000300:	61                   	popa   
c0000301:	89 c4                	mov    esp,eax
c0000303:	56                   	push   esi
c0000304:	52                   	push   edx
c0000305:	e8 f6 84 01 00       	call   c0018800 <changeTSS>
c000030a:	5a                   	pop    edx
c000030b:	5e                   	pop    esi
c000030c:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000313:	5d                   	pop    ebp
c0000314:	5f                   	pop    edi
c0000315:	5e                   	pop    esi
c0000316:	59                   	pop    ecx
c0000317:	59                   	pop    ecx
c0000318:	5b                   	pop    ebx
c0000319:	58                   	pop    eax
c000031a:	81 c4 04 00 00 00    	add    esp,0x4
c0000320:	6a 02                	push   0x2
c0000322:	9d                   	popf   
c0000323:	52                   	push   edx
c0000324:	e8 bf 89 01 00       	call   c0018ce8 <taskStartupFunction>
c0000329:	5a                   	pop    edx
c000032a:	50                   	push   eax
c000032b:	ff d2                	call   edx
c000032d:	e8 02 90 01 00       	call   c0019334 <taskReturned>
c0000332:	e9 fb ff ff ff       	jmp    c0000332 <commonThreadSwitch.firstTime+0x41>

c0000337 <asmQuickAcquireLock>:
c0000337:	55                   	push   ebp
c0000338:	89 e5                	mov    ebp,esp
c000033a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000033d <asmQuickAcquireLock.retry>:
c000033d:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000342:	72 02                	jb     c0000346 <asmQuickAcquireLock.spin_with_pause>
c0000344:	fa                   	cli    
c0000345:	c3                   	ret    

c0000346 <asmQuickAcquireLock.spin_with_pause>:
c0000346:	f3 90                	pause  
c0000348:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000034e:	75 f6                	jne    c0000346 <asmQuickAcquireLock.spin_with_pause>
c0000350:	e9 e8 ff ff ff       	jmp    c000033d <asmQuickAcquireLock.retry>

c0000355 <asmQuickReleaseLock>:
c0000355:	55                   	push   ebp
c0000356:	89 e5                	mov    ebp,esp
c0000358:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000035f:	5d                   	pop    ebp
c0000360:	c3                   	ret    

c0000361 <asmAcquireLock>:
c0000361:	55                   	push   ebp
c0000362:	89 e5                	mov    ebp,esp
c0000364:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000367 <asmAcquireLock.retry>:
c0000367:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000036c:	72 05                	jb     c0000373 <asmAcquireLock.spin_with_pause>
c000036e:	9c                   	pushf  
c000036f:	58                   	pop    eax
c0000370:	fa                   	cli    
c0000371:	5d                   	pop    ebp
c0000372:	c3                   	ret    

c0000373 <asmAcquireLock.spin_with_pause>:
c0000373:	f3 90                	pause  
c0000375:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000037b:	75 f6                	jne    c0000373 <asmAcquireLock.spin_with_pause>
c000037d:	e9 e5 ff ff ff       	jmp    c0000367 <asmAcquireLock.retry>

c0000382 <asmReleaseLock>:
c0000382:	55                   	push   ebp
c0000383:	89 e5                	mov    ebp,esp
c0000385:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000388:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000038b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000391:	52                   	push   edx
c0000392:	9d                   	popf   
c0000393:	5d                   	pop    ebp
c0000394:	c3                   	ret    

c0000395 <loadGDT>:
c0000395:	0f 01 15 10 8c 02 c0 	lgdtd  ds:0xc0028c10
c000039c:	66 b8 10 00          	mov    ax,0x10
c00003a0:	66 8e d8             	mov    ds,ax
c00003a3:	66 8e c0             	mov    es,ax
c00003a6:	66 8e e0             	mov    fs,ax
c00003a9:	66 8e e8             	mov    gs,ax
c00003ac:	66 8e d0             	mov    ss,ax
c00003af:	e9 00 00 00 00       	jmp    c00003b4 <flush2>

c00003b4 <flush2>:
c00003b4:	c3                   	ret    

c00003b5 <isr0>:
c00003b5:	fa                   	cli    
c00003b6:	68 00 00 00 00       	push   0x0
c00003bb:	68 00 00 00 00       	push   0x0
c00003c0:	e9 44 01 00 00       	jmp    c0000509 <int_common_stub>

c00003c5 <isr1>:
c00003c5:	fa                   	cli    
c00003c6:	6a 00                	push   0x0
c00003c8:	6a 01                	push   0x1
c00003ca:	e9 3a 01 00 00       	jmp    c0000509 <int_common_stub>

c00003cf <isr2>:
c00003cf:	fa                   	cli    
c00003d0:	6a 00                	push   0x0
c00003d2:	6a 02                	push   0x2
c00003d4:	e9 30 01 00 00       	jmp    c0000509 <int_common_stub>

c00003d9 <isr3>:
c00003d9:	fa                   	cli    
c00003da:	6a 00                	push   0x0
c00003dc:	6a 03                	push   0x3
c00003de:	e9 26 01 00 00       	jmp    c0000509 <int_common_stub>

c00003e3 <isr4>:
c00003e3:	fa                   	cli    
c00003e4:	6a 00                	push   0x0
c00003e6:	6a 04                	push   0x4
c00003e8:	e9 1c 01 00 00       	jmp    c0000509 <int_common_stub>

c00003ed <isr5>:
c00003ed:	fa                   	cli    
c00003ee:	6a 00                	push   0x0
c00003f0:	6a 05                	push   0x5
c00003f2:	e9 12 01 00 00       	jmp    c0000509 <int_common_stub>

c00003f7 <isr6>:
c00003f7:	fa                   	cli    
c00003f8:	6a 00                	push   0x0
c00003fa:	6a 06                	push   0x6
c00003fc:	e9 08 01 00 00       	jmp    c0000509 <int_common_stub>

c0000401 <isr7>:
c0000401:	fa                   	cli    
c0000402:	6a 00                	push   0x0
c0000404:	6a 07                	push   0x7
c0000406:	e9 fe 00 00 00       	jmp    c0000509 <int_common_stub>

c000040b <isr8>:
c000040b:	fa                   	cli    
c000040c:	6a 08                	push   0x8
c000040e:	e9 f6 00 00 00       	jmp    c0000509 <int_common_stub>

c0000413 <isr9>:
c0000413:	fa                   	cli    
c0000414:	6a 00                	push   0x0
c0000416:	6a 09                	push   0x9
c0000418:	e9 ec 00 00 00       	jmp    c0000509 <int_common_stub>

c000041d <isr10>:
c000041d:	fa                   	cli    
c000041e:	6a 0a                	push   0xa
c0000420:	e9 e4 00 00 00       	jmp    c0000509 <int_common_stub>

c0000425 <isr11>:
c0000425:	fa                   	cli    
c0000426:	6a 0b                	push   0xb
c0000428:	e9 dc 00 00 00       	jmp    c0000509 <int_common_stub>

c000042d <isr12>:
c000042d:	fa                   	cli    
c000042e:	6a 0c                	push   0xc
c0000430:	e9 d4 00 00 00       	jmp    c0000509 <int_common_stub>

c0000435 <isr13>:
c0000435:	fa                   	cli    
c0000436:	6a 0d                	push   0xd
c0000438:	e9 cc 00 00 00       	jmp    c0000509 <int_common_stub>

c000043d <isr14>:
c000043d:	fa                   	cli    
c000043e:	6a 0e                	push   0xe
c0000440:	e9 c4 00 00 00       	jmp    c0000509 <int_common_stub>

c0000445 <isr15>:
c0000445:	fa                   	cli    
c0000446:	6a 00                	push   0x0
c0000448:	6a 0f                	push   0xf
c000044a:	e9 ba 00 00 00       	jmp    c0000509 <int_common_stub>

c000044f <isr16>:
c000044f:	fa                   	cli    
c0000450:	6a 00                	push   0x0
c0000452:	6a 10                	push   0x10
c0000454:	e9 b0 00 00 00       	jmp    c0000509 <int_common_stub>

c0000459 <isr17>:
c0000459:	fa                   	cli    
c000045a:	6a 00                	push   0x0
c000045c:	6a 11                	push   0x11
c000045e:	e9 a6 00 00 00       	jmp    c0000509 <int_common_stub>

c0000463 <isr18>:
c0000463:	fa                   	cli    
c0000464:	6a 00                	push   0x0
c0000466:	6a 12                	push   0x12
c0000468:	e9 9c 00 00 00       	jmp    c0000509 <int_common_stub>

c000046d <irq3>:
c000046d:	fa                   	cli    
c000046e:	6a 00                	push   0x0
c0000470:	6a 23                	push   0x23
c0000472:	e9 92 00 00 00       	jmp    c0000509 <int_common_stub>

c0000477 <irq4>:
c0000477:	fa                   	cli    
c0000478:	6a 00                	push   0x0
c000047a:	6a 24                	push   0x24
c000047c:	e9 88 00 00 00       	jmp    c0000509 <int_common_stub>

c0000481 <irq5>:
c0000481:	fa                   	cli    
c0000482:	6a 00                	push   0x0
c0000484:	6a 25                	push   0x25
c0000486:	e9 7e 00 00 00       	jmp    c0000509 <int_common_stub>

c000048b <irq6>:
c000048b:	fa                   	cli    
c000048c:	6a 00                	push   0x0
c000048e:	6a 26                	push   0x26
c0000490:	e9 74 00 00 00       	jmp    c0000509 <int_common_stub>

c0000495 <irq7>:
c0000495:	fa                   	cli    
c0000496:	6a 00                	push   0x0
c0000498:	6a 27                	push   0x27
c000049a:	e9 6a 00 00 00       	jmp    c0000509 <int_common_stub>

c000049f <irq8>:
c000049f:	fa                   	cli    
c00004a0:	6a 00                	push   0x0
c00004a2:	6a 28                	push   0x28
c00004a4:	e9 60 00 00 00       	jmp    c0000509 <int_common_stub>

c00004a9 <irq9>:
c00004a9:	fa                   	cli    
c00004aa:	6a 00                	push   0x0
c00004ac:	6a 29                	push   0x29
c00004ae:	e9 56 00 00 00       	jmp    c0000509 <int_common_stub>

c00004b3 <irq10>:
c00004b3:	fa                   	cli    
c00004b4:	6a 00                	push   0x0
c00004b6:	6a 2a                	push   0x2a
c00004b8:	e9 4c 00 00 00       	jmp    c0000509 <int_common_stub>

c00004bd <irq11>:
c00004bd:	fa                   	cli    
c00004be:	6a 00                	push   0x0
c00004c0:	6a 2b                	push   0x2b
c00004c2:	e9 42 00 00 00       	jmp    c0000509 <int_common_stub>

c00004c7 <irq12>:
c00004c7:	fa                   	cli    
c00004c8:	6a 00                	push   0x0
c00004ca:	6a 2c                	push   0x2c
c00004cc:	e9 38 00 00 00       	jmp    c0000509 <int_common_stub>

c00004d1 <irq13>:
c00004d1:	fa                   	cli    
c00004d2:	6a 00                	push   0x0
c00004d4:	6a 2d                	push   0x2d
c00004d6:	e9 2e 00 00 00       	jmp    c0000509 <int_common_stub>

c00004db <irq14>:
c00004db:	fa                   	cli    
c00004dc:	6a 00                	push   0x0
c00004de:	6a 2e                	push   0x2e
c00004e0:	e9 24 00 00 00       	jmp    c0000509 <int_common_stub>

c00004e5 <irq15>:
c00004e5:	fa                   	cli    
c00004e6:	6a 00                	push   0x0
c00004e8:	6a 2f                	push   0x2f
c00004ea:	e9 1a 00 00 00       	jmp    c0000509 <int_common_stub>

c00004ef <irq1>:
c00004ef:	fa                   	cli    
c00004f0:	6a 00                	push   0x0
c00004f2:	6a 21                	push   0x21
c00004f4:	eb 13                	jmp    c0000509 <int_common_stub>

c00004f6 <irq2>:
c00004f6:	fa                   	cli    
c00004f7:	6a 00                	push   0x0
c00004f9:	6a 22                	push   0x22
c00004fb:	eb 0c                	jmp    c0000509 <int_common_stub>

c00004fd <isr96>:
c00004fd:	6a 00                	push   0x0
c00004ff:	6a 60                	push   0x60
c0000501:	fb                   	sti    
c0000502:	eb 05                	jmp    c0000509 <int_common_stub>

c0000504 <irq0>:
c0000504:	fa                   	cli    
c0000505:	6a 00                	push   0x0
c0000507:	6a 20                	push   0x20

c0000509 <int_common_stub>:
c0000509:	60                   	pusha  
c000050a:	1e                   	push   ds
c000050b:	06                   	push   es
c000050c:	0f a0                	push   fs
c000050e:	0f a8                	push   gs
c0000510:	66 b8 10 00          	mov    ax,0x10
c0000514:	66 8e d8             	mov    ds,ax
c0000517:	66 8e c0             	mov    es,ax
c000051a:	66 8e e0             	mov    fs,ax
c000051d:	66 8e e8             	mov    gs,ax
c0000520:	54                   	push   esp
c0000521:	fc                   	cld    
c0000522:	e8 56 ea 00 00       	call   c000ef7d <int_handler>
c0000527:	81 c4 04 00 00 00    	add    esp,0x4
c000052d:	0f a9                	pop    gs
c000052f:	0f a1                	pop    fs
c0000531:	07                   	pop    es
c0000532:	1f                   	pop    ds
c0000533:	61                   	popa   
c0000534:	81 c4 08 00 00 00    	add    esp,0x8
c000053a:	cf                   	iret   

c000053b <irq16>:
c000053b:	fa                   	cli    
c000053c:	6a 00                	push   0x0
c000053e:	6a 30                	push   0x30
c0000540:	e9 c4 ff ff ff       	jmp    c0000509 <int_common_stub>

c0000545 <irq17>:
c0000545:	fa                   	cli    
c0000546:	6a 00                	push   0x0
c0000548:	6a 31                	push   0x31
c000054a:	e9 ba ff ff ff       	jmp    c0000509 <int_common_stub>

c000054f <irq18>:
c000054f:	fa                   	cli    
c0000550:	6a 00                	push   0x0
c0000552:	6a 32                	push   0x32
c0000554:	e9 b0 ff ff ff       	jmp    c0000509 <int_common_stub>

c0000559 <irq19>:
c0000559:	fa                   	cli    
c000055a:	6a 00                	push   0x0
c000055c:	6a 33                	push   0x33
c000055e:	e9 a6 ff ff ff       	jmp    c0000509 <int_common_stub>

c0000563 <irq20>:
c0000563:	fa                   	cli    
c0000564:	6a 00                	push   0x0
c0000566:	6a 34                	push   0x34
c0000568:	e9 9c ff ff ff       	jmp    c0000509 <int_common_stub>

c000056d <irq21>:
c000056d:	fa                   	cli    
c000056e:	6a 00                	push   0x0
c0000570:	6a 35                	push   0x35
c0000572:	e9 92 ff ff ff       	jmp    c0000509 <int_common_stub>

c0000577 <irq22>:
c0000577:	fa                   	cli    
c0000578:	6a 00                	push   0x0
c000057a:	6a 36                	push   0x36
c000057c:	e9 88 ff ff ff       	jmp    c0000509 <int_common_stub>

c0000581 <irq23>:
c0000581:	fa                   	cli    
c0000582:	6a 00                	push   0x0
c0000584:	6a 37                	push   0x37
c0000586:	e9 7e ff ff ff       	jmp    c0000509 <int_common_stub>

c000058b <memcpy>:
c000058b:	e9 7a 83 00 00       	jmp    c000890a <__not_memcpy>

c0000590 <memcmp>:
c0000590:	56                   	push   esi
c0000591:	53                   	push   ebx
c0000592:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000596:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000059a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000059e:	85 f6                	test   esi,esi
c00005a0:	74 1d                	je     c00005bf <memcmp+0x2f>
c00005a2:	8a 08                	mov    cl,BYTE PTR [eax]
c00005a4:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00005a7:	38 cb                	cmp    bl,cl
c00005a9:	75 19                	jne    c00005c4 <memcmp+0x34>
c00005ab:	01 c6                	add    esi,eax
c00005ad:	eb 0a                	jmp    c00005b9 <memcmp+0x29>
c00005af:	90                   	nop
c00005b0:	8a 08                	mov    cl,BYTE PTR [eax]
c00005b2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00005b5:	38 d9                	cmp    cl,bl
c00005b7:	75 0b                	jne    c00005c4 <memcmp+0x34>
c00005b9:	40                   	inc    eax
c00005ba:	42                   	inc    edx
c00005bb:	39 f0                	cmp    eax,esi
c00005bd:	75 f1                	jne    c00005b0 <memcmp+0x20>
c00005bf:	31 c0                	xor    eax,eax
c00005c1:	5b                   	pop    ebx
c00005c2:	5e                   	pop    esi
c00005c3:	c3                   	ret    
c00005c4:	0f b6 c1             	movzx  eax,cl
c00005c7:	29 d8                	sub    eax,ebx
c00005c9:	5b                   	pop    ebx
c00005ca:	5e                   	pop    esi
c00005cb:	c3                   	ret    

c00005cc <memmove>:
c00005cc:	55                   	push   ebp
c00005cd:	57                   	push   edi
c00005ce:	56                   	push   esi
c00005cf:	53                   	push   ebx
c00005d0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00005d4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005d8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00005dc:	39 dd                	cmp    ebp,ebx
c00005de:	0f 83 80 00 00 00    	jae    c0000664 <memmove+0x98>
c00005e4:	85 d2                	test   edx,edx
c00005e6:	74 74                	je     c000065c <memmove+0x90>
c00005e8:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00005eb:	8d 75 04             	lea    esi,[ebp+0x4]
c00005ee:	39 cd                	cmp    ebp,ecx
c00005f0:	0f 93 c1             	setae  cl
c00005f3:	39 f3                	cmp    ebx,esi
c00005f5:	0f 93 c0             	setae  al
c00005f8:	89 c6                	mov    esi,eax
c00005fa:	09 ce                	or     esi,ecx
c00005fc:	8d 4a ff             	lea    ecx,[edx-0x1]
c00005ff:	89 f0                	mov    eax,esi
c0000601:	83 f9 0c             	cmp    ecx,0xc
c0000604:	0f 97 c1             	seta   cl
c0000607:	84 c8                	test   al,cl
c0000609:	74 75                	je     c0000680 <memmove+0xb4>
c000060b:	89 e9                	mov    ecx,ebp
c000060d:	09 d9                	or     ecx,ebx
c000060f:	83 e1 03             	and    ecx,0x3
c0000612:	75 6c                	jne    c0000680 <memmove+0xb4>
c0000614:	89 d7                	mov    edi,edx
c0000616:	89 d9                	mov    ecx,ebx
c0000618:	83 e7 fc             	and    edi,0xfffffffc
c000061b:	89 ee                	mov    esi,ebp
c000061d:	01 df                	add    edi,ebx
c000061f:	90                   	nop
c0000620:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000622:	83 c6 04             	add    esi,0x4
c0000625:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000628:	83 c1 04             	add    ecx,0x4
c000062b:	39 f9                	cmp    ecx,edi
c000062d:	75 f1                	jne    c0000620 <memmove+0x54>
c000062f:	89 d1                	mov    ecx,edx
c0000631:	89 d7                	mov    edi,edx
c0000633:	83 e1 fc             	and    ecx,0xfffffffc
c0000636:	29 cf                	sub    edi,ecx
c0000638:	01 cb                	add    ebx,ecx
c000063a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000063e:	39 ca                	cmp    edx,ecx
c0000640:	74 1a                	je     c000065c <memmove+0x90>
c0000642:	8a 03                	mov    al,BYTE PTR [ebx]
c0000644:	83 ff 01             	cmp    edi,0x1
c0000647:	88 06                	mov    BYTE PTR [esi],al
c0000649:	74 11                	je     c000065c <memmove+0x90>
c000064b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000064e:	83 ff 02             	cmp    edi,0x2
c0000651:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000654:	74 06                	je     c000065c <memmove+0x90>
c0000656:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000659:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000065c:	5b                   	pop    ebx
c000065d:	89 e8                	mov    eax,ebp
c000065f:	5e                   	pop    esi
c0000660:	5f                   	pop    edi
c0000661:	5d                   	pop    ebp
c0000662:	c3                   	ret    
c0000663:	90                   	nop
c0000664:	76 f6                	jbe    c000065c <memmove+0x90>
c0000666:	85 d2                	test   edx,edx
c0000668:	74 f2                	je     c000065c <memmove+0x90>
c000066a:	4b                   	dec    ebx
c000066b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000066e:	66 90                	xchg   ax,ax
c0000670:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000673:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000676:	4a                   	dec    edx
c0000677:	75 f7                	jne    c0000670 <memmove+0xa4>
c0000679:	5b                   	pop    ebx
c000067a:	89 e8                	mov    eax,ebp
c000067c:	5e                   	pop    esi
c000067d:	5f                   	pop    edi
c000067e:	5d                   	pop    ebp
c000067f:	c3                   	ret    
c0000680:	01 ea                	add    edx,ebp
c0000682:	89 e9                	mov    ecx,ebp
c0000684:	8a 03                	mov    al,BYTE PTR [ebx]
c0000686:	41                   	inc    ecx
c0000687:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000068a:	43                   	inc    ebx
c000068b:	39 d1                	cmp    ecx,edx
c000068d:	75 f5                	jne    c0000684 <memmove+0xb8>
c000068f:	eb cb                	jmp    c000065c <memmove+0x90>
c0000691:	8d 76 00             	lea    esi,[esi+0x0]

c0000694 <memset>:
c0000694:	57                   	push   edi
c0000695:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000699:	85 c9                	test   ecx,ecx
c000069b:	74 0b                	je     c00006a8 <memset+0x14>
c000069d:	fc                   	cld    
c000069e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00006a2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00006a6:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00006a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006ac:	5f                   	pop    edi
c00006ad:	c3                   	ret    
c00006ae:	66 90                	xchg   ax,ax

c00006b0 <strlen>:
c00006b0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006b4:	31 c0                	xor    eax,eax
c00006b6:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00006b9:	74 09                	je     c00006c4 <strlen+0x14>
c00006bb:	90                   	nop
c00006bc:	40                   	inc    eax
c00006bd:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006c1:	75 f9                	jne    c00006bc <strlen+0xc>
c00006c3:	c3                   	ret    
c00006c4:	c3                   	ret    
c00006c5:	8d 76 00             	lea    esi,[esi+0x0]

c00006c8 <strpbrk>:
c00006c8:	57                   	push   edi
c00006c9:	56                   	push   esi
c00006ca:	53                   	push   ebx
c00006cb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006cf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00006d3:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006d5:	84 db                	test   bl,bl
c00006d7:	74 21                	je     c00006fa <strpbrk+0x32>
c00006d9:	8a 07                	mov    al,BYTE PTR [edi]
c00006db:	84 c0                	test   al,al
c00006dd:	74 14                	je     c00006f3 <strpbrk+0x2b>
c00006df:	38 d8                	cmp    al,bl
c00006e1:	74 19                	je     c00006fc <strpbrk+0x34>
c00006e3:	89 fa                	mov    edx,edi
c00006e5:	eb 05                	jmp    c00006ec <strpbrk+0x24>
c00006e7:	90                   	nop
c00006e8:	38 d9                	cmp    cl,bl
c00006ea:	74 10                	je     c00006fc <strpbrk+0x34>
c00006ec:	42                   	inc    edx
c00006ed:	8a 0a                	mov    cl,BYTE PTR [edx]
c00006ef:	84 c9                	test   cl,cl
c00006f1:	75 f5                	jne    c00006e8 <strpbrk+0x20>
c00006f3:	46                   	inc    esi
c00006f4:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006f6:	84 db                	test   bl,bl
c00006f8:	75 e1                	jne    c00006db <strpbrk+0x13>
c00006fa:	31 f6                	xor    esi,esi
c00006fc:	89 f0                	mov    eax,esi
c00006fe:	5b                   	pop    ebx
c00006ff:	5e                   	pop    esi
c0000700:	5f                   	pop    edi
c0000701:	c3                   	ret    
c0000702:	66 90                	xchg   ax,ax

c0000704 <strtok>:
c0000704:	56                   	push   esi
c0000705:	53                   	push   ebx
c0000706:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000070a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000070e:	85 db                	test   ebx,ebx
c0000710:	75 07                	jne    c0000719 <strtok+0x15>
c0000712:	eb 2c                	jmp    c0000740 <strtok+0x3c>
c0000714:	43                   	inc    ebx
c0000715:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000719:	56                   	push   esi
c000071a:	53                   	push   ebx
c000071b:	e8 a8 ff ff ff       	call   c00006c8 <strpbrk>
c0000720:	5a                   	pop    edx
c0000721:	a3 e0 87 02 c0       	mov    ds:0xc00287e0,eax
c0000726:	59                   	pop    ecx
c0000727:	39 d8                	cmp    eax,ebx
c0000729:	74 e9                	je     c0000714 <strtok+0x10>
c000072b:	85 c0                	test   eax,eax
c000072d:	74 1b                	je     c000074a <strtok+0x46>
c000072f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000732:	8d 50 01             	lea    edx,[eax+0x1]
c0000735:	89 d8                	mov    eax,ebx
c0000737:	89 15 e0 87 02 c0    	mov    DWORD PTR ds:0xc00287e0,edx
c000073d:	5b                   	pop    ebx
c000073e:	5e                   	pop    esi
c000073f:	c3                   	ret    
c0000740:	8b 1d e0 87 02 c0    	mov    ebx,DWORD PTR ds:0xc00287e0
c0000746:	85 db                	test   ebx,ebx
c0000748:	75 cf                	jne    c0000719 <strtok+0x15>
c000074a:	31 c0                	xor    eax,eax
c000074c:	5b                   	pop    ebx
c000074d:	5e                   	pop    esi
c000074e:	c3                   	ret    
c000074f:	90                   	nop

c0000750 <strcpy>:
c0000750:	53                   	push   ebx
c0000751:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000755:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000759:	89 c3                	mov    ebx,eax
c000075b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000075d:	84 d2                	test   dl,dl
c000075f:	74 0d                	je     c000076e <strcpy+0x1e>
c0000761:	8d 76 00             	lea    esi,[esi+0x0]
c0000764:	88 13                	mov    BYTE PTR [ebx],dl
c0000766:	41                   	inc    ecx
c0000767:	43                   	inc    ebx
c0000768:	8a 11                	mov    dl,BYTE PTR [ecx]
c000076a:	84 d2                	test   dl,dl
c000076c:	75 f6                	jne    c0000764 <strcpy+0x14>
c000076e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000771:	5b                   	pop    ebx
c0000772:	c3                   	ret    
c0000773:	90                   	nop

c0000774 <strncpy>:
c0000774:	55                   	push   ebp
c0000775:	57                   	push   edi
c0000776:	56                   	push   esi
c0000777:	53                   	push   ebx
c0000778:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000077c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000780:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000784:	85 c0                	test   eax,eax
c0000786:	74 39                	je     c00007c1 <strncpy+0x4d>
c0000788:	8a 1e                	mov    bl,BYTE PTR [esi]
c000078a:	8d 48 ff             	lea    ecx,[eax-0x1]
c000078d:	8d 55 01             	lea    edx,[ebp+0x1]
c0000790:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000793:	84 db                	test   bl,bl
c0000795:	74 31                	je     c00007c8 <strncpy+0x54>
c0000797:	85 c9                	test   ecx,ecx
c0000799:	74 26                	je     c00007c1 <strncpy+0x4d>
c000079b:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000079e:	8d 48 fe             	lea    ecx,[eax-0x2]
c00007a1:	8d 55 02             	lea    edx,[ebp+0x2]
c00007a4:	8d 46 02             	lea    eax,[esi+0x2]
c00007a7:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c00007aa:	84 db                	test   bl,bl
c00007ac:	75 0f                	jne    c00007bd <strncpy+0x49>
c00007ae:	eb 18                	jmp    c00007c8 <strncpy+0x54>
c00007b0:	40                   	inc    eax
c00007b1:	42                   	inc    edx
c00007b2:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c00007b5:	49                   	dec    ecx
c00007b6:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007b9:	84 db                	test   bl,bl
c00007bb:	74 0b                	je     c00007c8 <strncpy+0x54>
c00007bd:	85 c9                	test   ecx,ecx
c00007bf:	75 ef                	jne    c00007b0 <strncpy+0x3c>
c00007c1:	5b                   	pop    ebx
c00007c2:	89 e8                	mov    eax,ebp
c00007c4:	5e                   	pop    esi
c00007c5:	5f                   	pop    edi
c00007c6:	5d                   	pop    ebp
c00007c7:	c3                   	ret    
c00007c8:	85 c9                	test   ecx,ecx
c00007ca:	74 f5                	je     c00007c1 <strncpy+0x4d>
c00007cc:	fc                   	cld    
c00007cd:	31 c0                	xor    eax,eax
c00007cf:	89 d7                	mov    edi,edx
c00007d1:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00007d3:	89 e8                	mov    eax,ebp
c00007d5:	5b                   	pop    ebx
c00007d6:	5e                   	pop    esi
c00007d7:	5f                   	pop    edi
c00007d8:	5d                   	pop    ebp
c00007d9:	c3                   	ret    
c00007da:	66 90                	xchg   ax,ax

c00007dc <strcmp>:
c00007dc:	56                   	push   esi
c00007dd:	53                   	push   ebx
c00007de:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00007e2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007e6:	8a 16                	mov    dl,BYTE PTR [esi]
c00007e8:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007eb:	38 d1                	cmp    cl,dl
c00007ed:	75 1d                	jne    c000080c <strcmp+0x30>
c00007ef:	84 c9                	test   cl,cl
c00007f1:	74 21                	je     c0000814 <strcmp+0x38>
c00007f3:	b8 01 00 00 00       	mov    eax,0x1
c00007f8:	eb 07                	jmp    c0000801 <strcmp+0x25>
c00007fa:	66 90                	xchg   ax,ax
c00007fc:	40                   	inc    eax
c00007fd:	84 d2                	test   dl,dl
c00007ff:	74 13                	je     c0000814 <strcmp+0x38>
c0000801:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000804:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c0000808:	38 ca                	cmp    dl,cl
c000080a:	74 f0                	je     c00007fc <strcmp+0x20>
c000080c:	0f b6 c2             	movzx  eax,dl
c000080f:	5b                   	pop    ebx
c0000810:	29 c8                	sub    eax,ecx
c0000812:	5e                   	pop    esi
c0000813:	c3                   	ret    
c0000814:	31 c0                	xor    eax,eax
c0000816:	5b                   	pop    ebx
c0000817:	5e                   	pop    esi
c0000818:	c3                   	ret    
c0000819:	8d 76 00             	lea    esi,[esi+0x0]

c000081c <strchr>:
c000081c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000820:	8a 10                	mov    dl,BYTE PTR [eax]
c0000822:	84 d2                	test   dl,dl
c0000824:	74 15                	je     c000083b <strchr+0x1f>
c0000826:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000082a:	38 ca                	cmp    dl,cl
c000082c:	75 06                	jne    c0000834 <strchr+0x18>
c000082e:	eb 0e                	jmp    c000083e <strchr+0x22>
c0000830:	38 ca                	cmp    dl,cl
c0000832:	74 09                	je     c000083d <strchr+0x21>
c0000834:	40                   	inc    eax
c0000835:	8a 10                	mov    dl,BYTE PTR [eax]
c0000837:	84 d2                	test   dl,dl
c0000839:	75 f5                	jne    c0000830 <strchr+0x14>
c000083b:	31 c0                	xor    eax,eax
c000083d:	c3                   	ret    
c000083e:	c3                   	ret    
c000083f:	90                   	nop

c0000840 <strncmp>:
c0000840:	57                   	push   edi
c0000841:	56                   	push   esi
c0000842:	53                   	push   ebx
c0000843:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000847:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000084f:	85 ff                	test   edi,edi
c0000851:	74 28                	je     c000087b <strncmp+0x3b>
c0000853:	8a 16                	mov    dl,BYTE PTR [esi]
c0000855:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000858:	38 d1                	cmp    cl,dl
c000085a:	75 28                	jne    c0000884 <strncmp+0x44>
c000085c:	8d 46 01             	lea    eax,[esi+0x1]
c000085f:	84 c9                	test   cl,cl
c0000861:	74 18                	je     c000087b <strncmp+0x3b>
c0000863:	01 fe                	add    esi,edi
c0000865:	eb 0f                	jmp    c0000876 <strncmp+0x36>
c0000867:	90                   	nop
c0000868:	8a 10                	mov    dl,BYTE PTR [eax]
c000086a:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000086d:	38 ca                	cmp    dl,cl
c000086f:	75 13                	jne    c0000884 <strncmp+0x44>
c0000871:	40                   	inc    eax
c0000872:	84 d2                	test   dl,dl
c0000874:	74 05                	je     c000087b <strncmp+0x3b>
c0000876:	43                   	inc    ebx
c0000877:	39 c6                	cmp    esi,eax
c0000879:	75 ed                	jne    c0000868 <strncmp+0x28>
c000087b:	5b                   	pop    ebx
c000087c:	31 c0                	xor    eax,eax
c000087e:	5e                   	pop    esi
c000087f:	5f                   	pop    edi
c0000880:	c3                   	ret    
c0000881:	8d 76 00             	lea    esi,[esi+0x0]
c0000884:	5b                   	pop    ebx
c0000885:	0f b6 c2             	movzx  eax,dl
c0000888:	5e                   	pop    esi
c0000889:	29 c8                	sub    eax,ecx
c000088b:	5f                   	pop    edi
c000088c:	c3                   	ret    
c000088d:	8d 76 00             	lea    esi,[esi+0x0]

c0000890 <strcat>:
c0000890:	56                   	push   esi
c0000891:	53                   	push   ebx
c0000892:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000896:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000089a:	89 c3                	mov    ebx,eax
c000089c:	eb 04                	jmp    c00008a2 <strcat+0x12>
c000089e:	66 90                	xchg   ax,ax
c00008a0:	89 d3                	mov    ebx,edx
c00008a2:	8d 53 01             	lea    edx,[ebx+0x1]
c00008a5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008a9:	75 f5                	jne    c00008a0 <strcat+0x10>
c00008ab:	31 d2                	xor    edx,edx
c00008ad:	8d 76 00             	lea    esi,[esi+0x0]
c00008b0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00008b3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00008b6:	42                   	inc    edx
c00008b7:	84 c9                	test   cl,cl
c00008b9:	75 f5                	jne    c00008b0 <strcat+0x20>
c00008bb:	5b                   	pop    ebx
c00008bc:	5e                   	pop    esi
c00008bd:	c3                   	ret    
c00008be:	66 90                	xchg   ax,ax

c00008c0 <strncat>:
c00008c0:	56                   	push   esi
c00008c1:	53                   	push   ebx
c00008c2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008ca:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ce:	85 f6                	test   esi,esi
c00008d0:	74 1e                	je     c00008f0 <strncat+0x30>
c00008d2:	89 c2                	mov    edx,eax
c00008d4:	42                   	inc    edx
c00008d5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008d9:	75 f9                	jne    c00008d4 <strncat+0x14>
c00008db:	01 ce                	add    esi,ecx
c00008dd:	eb 06                	jmp    c00008e5 <strncat+0x25>
c00008df:	90                   	nop
c00008e0:	39 f1                	cmp    ecx,esi
c00008e2:	74 10                	je     c00008f4 <strncat+0x34>
c00008e4:	42                   	inc    edx
c00008e5:	41                   	inc    ecx
c00008e6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008e9:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008ec:	84 db                	test   bl,bl
c00008ee:	75 f0                	jne    c00008e0 <strncat+0x20>
c00008f0:	5b                   	pop    ebx
c00008f1:	5e                   	pop    esi
c00008f2:	c3                   	ret    
c00008f3:	90                   	nop
c00008f4:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f7:	5b                   	pop    ebx
c00008f8:	5e                   	pop    esi
c00008f9:	c3                   	ret    
c00008fa:	66 90                	xchg   ax,ax

c00008fc <strstr>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	57                   	push   edi
c0000908:	e8 a3 fd ff ff       	call   c00006b0 <strlen>
c000090d:	59                   	pop    ecx
c000090e:	85 c0                	test   eax,eax
c0000910:	74 2a                	je     c000093c <strstr+0x40>
c0000912:	89 c6                	mov    esi,eax
c0000914:	eb 12                	jmp    c0000928 <strstr+0x2c>
c0000916:	66 90                	xchg   ax,ax
c0000918:	56                   	push   esi
c0000919:	57                   	push   edi
c000091a:	53                   	push   ebx
c000091b:	e8 70 fc ff ff       	call   c0000590 <memcmp>
c0000920:	83 c4 0c             	add    esp,0xc
c0000923:	85 c0                	test   eax,eax
c0000925:	74 15                	je     c000093c <strstr+0x40>
c0000927:	43                   	inc    ebx
c0000928:	53                   	push   ebx
c0000929:	e8 82 fd ff ff       	call   c00006b0 <strlen>
c000092e:	5a                   	pop    edx
c000092f:	39 f0                	cmp    eax,esi
c0000931:	73 e5                	jae    c0000918 <strstr+0x1c>
c0000933:	5b                   	pop    ebx
c0000934:	31 c0                	xor    eax,eax
c0000936:	5e                   	pop    esi
c0000937:	5f                   	pop    edi
c0000938:	c3                   	ret    
c0000939:	8d 76 00             	lea    esi,[esi+0x0]
c000093c:	89 d8                	mov    eax,ebx
c000093e:	5b                   	pop    ebx
c000093f:	5e                   	pop    esi
c0000940:	5f                   	pop    edi
c0000941:	c3                   	ret    
c0000942:	66 90                	xchg   ax,ax

c0000944 <toupper>:
c0000944:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000948:	0f b6 d0             	movzx  edx,al
c000094b:	f6 82 a0 3e 02 c0 02 	test   BYTE PTR [edx-0x3ffdc160],0x2
c0000952:	74 03                	je     c0000957 <toupper+0x13>
c0000954:	83 e8 20             	sub    eax,0x20
c0000957:	c3                   	ret    

c0000958 <tolower>:
c0000958:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000095c:	0f b6 d0             	movzx  edx,al
c000095f:	f6 82 a0 3e 02 c0 01 	test   BYTE PTR [edx-0x3ffdc160],0x1
c0000966:	74 03                	je     c000096b <tolower+0x13>
c0000968:	83 c0 20             	add    eax,0x20
c000096b:	c3                   	ret    

c000096c <simple_strtoul>:
c000096c:	55                   	push   ebp
c000096d:	57                   	push   edi
c000096e:	56                   	push   esi
c000096f:	53                   	push   ebx
c0000970:	83 ec 08             	sub    esp,0x8
c0000973:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000977:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000097b:	90                   	nop
c000097c:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c000097f:	f6 82 a0 3e 02 c0 08 	test   BYTE PTR [edx-0x3ffdc160],0x8
c0000986:	75 05                	jne    c000098d <simple_strtoul+0x21>
c0000988:	80 fa 09             	cmp    dl,0x9
c000098b:	75 03                	jne    c0000990 <simple_strtoul+0x24>
c000098d:	41                   	inc    ecx
c000098e:	eb ec                	jmp    c000097c <simple_strtoul+0x10>
c0000990:	80 fa 2d             	cmp    dl,0x2d
c0000993:	0f 84 1b 01 00 00    	je     c0000ab4 <simple_strtoul+0x148>
c0000999:	80 fa 2b             	cmp    dl,0x2b
c000099c:	0f 84 c2 00 00 00    	je     c0000a64 <simple_strtoul+0xf8>
c00009a2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009aa:	85 f6                	test   esi,esi
c00009ac:	0f 85 c3 00 00 00    	jne    c0000a75 <simple_strtoul+0x109>
c00009b2:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009b4:	80 fa 30             	cmp    dl,0x30
c00009b7:	0f 84 47 01 00 00    	je     c0000b04 <simple_strtoul+0x198>
c00009bd:	be 0a 00 00 00       	mov    esi,0xa
c00009c2:	84 d2                	test   dl,dl
c00009c4:	0f 84 6f 01 00 00    	je     c0000b39 <simple_strtoul+0x1cd>
c00009ca:	31 ed                	xor    ebp,ebp
c00009cc:	31 ff                	xor    edi,edi
c00009ce:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009d5:	eb 2b                	jmp    c0000a02 <simple_strtoul+0x96>
c00009d7:	90                   	nop
c00009d8:	83 eb 30             	sub    ebx,0x30
c00009db:	39 f3                	cmp    ebx,esi
c00009dd:	73 4d                	jae    c0000a2c <simple_strtoul+0xc0>
c00009df:	31 d2                	xor    edx,edx
c00009e1:	89 d8                	mov    eax,ebx
c00009e3:	f7 d0                	not    eax
c00009e5:	f7 f6                	div    esi
c00009e7:	39 f8                	cmp    eax,edi
c00009e9:	0f 82 b1 00 00 00    	jb     c0000aa0 <simple_strtoul+0x134>
c00009ef:	0f af fe             	imul   edi,esi
c00009f2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009f9:	01 df                	add    edi,ebx
c00009fb:	41                   	inc    ecx
c00009fc:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009fe:	84 d2                	test   dl,dl
c0000a00:	74 2a                	je     c0000a2c <simple_strtoul+0xc0>
c0000a02:	0f b6 da             	movzx  ebx,dl
c0000a05:	f6 83 a0 3e 02 c0 04 	test   BYTE PTR [ebx-0x3ffdc160],0x4
c0000a0c:	75 ca                	jne    c00009d8 <simple_strtoul+0x6c>
c0000a0e:	0f be d2             	movsx  edx,dl
c0000a11:	52                   	push   edx
c0000a12:	e8 2d ff ff ff       	call   c0000944 <toupper>
c0000a17:	5b                   	pop    ebx
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 a0 3e 02 c0 01 	test   BYTE PTR [edx-0x3ffdc160],0x1
c0000a22:	74 08                	je     c0000a2c <simple_strtoul+0xc0>
c0000a24:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000a27:	39 f3                	cmp    ebx,esi
c0000a29:	72 b4                	jb     c00009df <simple_strtoul+0x73>
c0000a2b:	90                   	nop
c0000a2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a30:	85 c0                	test   eax,eax
c0000a32:	74 14                	je     c0000a48 <simple_strtoul+0xdc>
c0000a34:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a37:	09 f8                	or     eax,edi
c0000a39:	75 71                	jne    c0000aac <simple_strtoul+0x140>
c0000a3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a3f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a43:	31 ff                	xor    edi,edi
c0000a45:	89 30                	mov    DWORD PTR [eax],esi
c0000a47:	90                   	nop
c0000a48:	4d                   	dec    ebp
c0000a49:	75 05                	jne    c0000a50 <simple_strtoul+0xe4>
c0000a4b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a50:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a55:	75 02                	jne    c0000a59 <simple_strtoul+0xed>
c0000a57:	f7 df                	neg    edi
c0000a59:	83 c4 08             	add    esp,0x8
c0000a5c:	89 f8                	mov    eax,edi
c0000a5e:	5b                   	pop    ebx
c0000a5f:	5e                   	pop    esi
c0000a60:	5f                   	pop    edi
c0000a61:	5d                   	pop    ebp
c0000a62:	c3                   	ret    
c0000a63:	90                   	nop
c0000a64:	41                   	inc    ecx
c0000a65:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a6d:	85 f6                	test   esi,esi
c0000a6f:	0f 84 3d ff ff ff    	je     c00009b2 <simple_strtoul+0x46>
c0000a75:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a78:	83 f8 22             	cmp    eax,0x22
c0000a7b:	77 6a                	ja     c0000ae7 <simple_strtoul+0x17b>
c0000a7d:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a7f:	83 fe 08             	cmp    esi,0x8
c0000a82:	0f 84 a2 00 00 00    	je     c0000b2a <simple_strtoul+0x1be>
c0000a88:	83 fe 10             	cmp    esi,0x10
c0000a8b:	0f 85 31 ff ff ff    	jne    c00009c2 <simple_strtoul+0x56>
c0000a91:	80 fa 30             	cmp    dl,0x30
c0000a94:	74 2c                	je     c0000ac2 <simple_strtoul+0x156>
c0000a96:	be 10 00 00 00       	mov    esi,0x10
c0000a9b:	e9 22 ff ff ff       	jmp    c00009c2 <simple_strtoul+0x56>
c0000aa0:	bd 01 00 00 00       	mov    ebp,0x1
c0000aa5:	31 ff                	xor    edi,edi
c0000aa7:	e9 4f ff ff ff       	jmp    c00009fb <simple_strtoul+0x8f>
c0000aac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab0:	89 08                	mov    DWORD PTR [eax],ecx
c0000ab2:	eb 94                	jmp    c0000a48 <simple_strtoul+0xdc>
c0000ab4:	41                   	inc    ecx
c0000ab5:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000abd:	e9 e8 fe ff ff       	jmp    c00009aa <simple_strtoul+0x3e>
c0000ac2:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ac6:	88 04 24             	mov    BYTE PTR [esp],al
c0000ac9:	50                   	push   eax
c0000aca:	e8 89 fe ff ff       	call   c0000958 <tolower>
c0000acf:	5e                   	pop    esi
c0000ad0:	83 f8 78             	cmp    eax,0x78
c0000ad3:	0f 84 84 00 00 00    	je     c0000b5d <simple_strtoul+0x1f1>
c0000ad9:	41                   	inc    ecx
c0000ada:	be 10 00 00 00       	mov    esi,0x10
c0000adf:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000ae2:	e9 db fe ff ff       	jmp    c00009c2 <simple_strtoul+0x56>
c0000ae7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000aeb:	85 ff                	test   edi,edi
c0000aed:	74 5c                	je     c0000b4b <simple_strtoul+0x1df>
c0000aef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000af3:	85 c9                	test   ecx,ecx
c0000af5:	75 4e                	jne    c0000b45 <simple_strtoul+0x1d9>
c0000af7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000afd:	31 ff                	xor    edi,edi
c0000aff:	e9 4c ff ff ff       	jmp    c0000a50 <simple_strtoul+0xe4>
c0000b04:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b08:	88 04 24             	mov    BYTE PTR [esp],al
c0000b0b:	50                   	push   eax
c0000b0c:	e8 47 fe ff ff       	call   c0000958 <tolower>
c0000b11:	5d                   	pop    ebp
c0000b12:	83 f8 78             	cmp    eax,0x78
c0000b15:	74 3b                	je     c0000b52 <simple_strtoul+0x1e6>
c0000b17:	41                   	inc    ecx
c0000b18:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b1b:	80 fa 30             	cmp    dl,0x30
c0000b1e:	74 13                	je     c0000b33 <simple_strtoul+0x1c7>
c0000b20:	be 08 00 00 00       	mov    esi,0x8
c0000b25:	e9 98 fe ff ff       	jmp    c00009c2 <simple_strtoul+0x56>
c0000b2a:	80 fa 30             	cmp    dl,0x30
c0000b2d:	0f 85 8f fe ff ff    	jne    c00009c2 <simple_strtoul+0x56>
c0000b33:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000b36:	41                   	inc    ecx
c0000b37:	eb e7                	jmp    c0000b20 <simple_strtoul+0x1b4>
c0000b39:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b3d:	85 d2                	test   edx,edx
c0000b3f:	74 0a                	je     c0000b4b <simple_strtoul+0x1df>
c0000b41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b45:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b49:	89 30                	mov    DWORD PTR [eax],esi
c0000b4b:	31 ff                	xor    edi,edi
c0000b4d:	e9 fe fe ff ff       	jmp    c0000a50 <simple_strtoul+0xe4>
c0000b52:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b55:	83 c1 02             	add    ecx,0x2
c0000b58:	e9 34 ff ff ff       	jmp    c0000a91 <simple_strtoul+0x125>
c0000b5d:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b60:	be 10 00 00 00       	mov    esi,0x10
c0000b65:	83 c1 02             	add    ecx,0x2
c0000b68:	e9 55 fe ff ff       	jmp    c00009c2 <simple_strtoul+0x56>

c0000b6d <largebin_index>:
c0000b6d:	89 c2                	mov    edx,eax
c0000b6f:	c1 ea 08             	shr    edx,0x8
c0000b72:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b78:	77 10                	ja     c0000b8a <largebin_index+0x1d>
c0000b7a:	0f bd d2             	bsr    edx,edx
c0000b7d:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b80:	d3 e8                	shr    eax,cl
c0000b82:	83 e0 03             	and    eax,0x3
c0000b85:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b89:	c3                   	ret    
c0000b8a:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b8f:	c3                   	ret    

c0000b90 <malloc_init_state>:
c0000b90:	53                   	push   ebx
c0000b91:	8d 50 34             	lea    edx,[eax+0x34]
c0000b94:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b9a:	89 d1                	mov    ecx,edx
c0000b9c:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b9f:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000ba2:	83 c2 08             	add    edx,0x8
c0000ba5:	39 da                	cmp    edx,ebx
c0000ba7:	75 f3                	jne    c0000b9c <malloc_init_state+0xc>
c0000ba9:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bab:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000bb5:	83 e2 03             	and    edx,0x3
c0000bb8:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000bc2:	83 ca 48             	or     edx,0x48
c0000bc5:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bcf:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bd9:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000be0:	89 10                	mov    DWORD PTR [eax],edx
c0000be2:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000be5:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bef:	5b                   	pop    ebx
c0000bf0:	c3                   	ret    

c0000bf1 <malloc_consolidate>:
c0000bf1:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bf3:	85 d2                	test   edx,edx
c0000bf5:	0f 84 d8 00 00 00    	je     c0000cd3 <malloc_consolidate+0xe2>
c0000bfb:	55                   	push   ebp
c0000bfc:	83 e2 fd             	and    edx,0xfffffffd
c0000bff:	57                   	push   edi
c0000c00:	89 c5                	mov    ebp,eax
c0000c02:	56                   	push   esi
c0000c03:	8d 78 34             	lea    edi,[eax+0x34]
c0000c06:	53                   	push   ebx
c0000c07:	83 ec 10             	sub    esp,0x10
c0000c0a:	89 10                	mov    DWORD PTR [eax],edx
c0000c0c:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c10:	c1 ea 03             	shr    edx,0x3
c0000c13:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c17:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c1b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c1e:	85 d2                	test   edx,edx
c0000c20:	0f 84 98 00 00 00    	je     c0000cbe <malloc_consolidate+0xcd>
c0000c26:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c2d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c30:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c33:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c37:	89 f9                	mov    ecx,edi
c0000c39:	83 e1 fe             	and    ecx,0xfffffffe
c0000c3c:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c3f:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c42:	83 e3 fc             	and    ebx,0xfffffffc
c0000c45:	83 e7 01             	and    edi,0x1
c0000c48:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c4b:	75 14                	jne    c0000c61 <malloc_consolidate+0x70>
c0000c4d:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c4f:	29 fa                	sub    edx,edi
c0000c51:	01 f9                	add    ecx,edi
c0000c53:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c56:	89 fb                	mov    ebx,edi
c0000c58:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c5b:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c5e:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c61:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c64:	74 40                	je     c0000ca6 <malloc_consolidate+0xb5>
c0000c66:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c69:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c6c:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c70:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c73:	83 e7 01             	and    edi,0x1
c0000c76:	75 0e                	jne    c0000c86 <malloc_consolidate+0x95>
c0000c78:	01 d9                	add    ecx,ebx
c0000c7a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c7d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c80:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c83:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c86:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c89:	89 ce                	mov    esi,ecx
c0000c8b:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c8e:	83 ce 01             	or     esi,0x1
c0000c91:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c94:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c97:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c9a:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c9e:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000ca1:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000ca4:	eb 0c                	jmp    c0000cb2 <malloc_consolidate+0xc1>
c0000ca6:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000ca9:	83 c9 01             	or     ecx,0x1
c0000cac:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000caf:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000cb2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000cb6:	85 d2                	test   edx,edx
c0000cb8:	0f 85 6f ff ff ff    	jne    c0000c2d <malloc_consolidate+0x3c>
c0000cbe:	83 c5 04             	add    ebp,0x4
c0000cc1:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000cc5:	0f 85 50 ff ff ff    	jne    c0000c1b <malloc_consolidate+0x2a>
c0000ccb:	83 c4 10             	add    esp,0x10
c0000cce:	5b                   	pop    ebx
c0000ccf:	5e                   	pop    esi
c0000cd0:	5f                   	pop    edi
c0000cd1:	5d                   	pop    ebp
c0000cd2:	c3                   	ret    
c0000cd3:	e9 b8 fe ff ff       	jmp    c0000b90 <malloc_init_state>

c0000cd8 <dlfree>:
c0000cd8:	57                   	push   edi
c0000cd9:	56                   	push   esi
c0000cda:	53                   	push   ebx
c0000cdb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000cdf:	85 db                	test   ebx,ebx
c0000ce1:	0f 84 e2 00 00 00    	je     c0000dc9 <dlfree+0xf1>
c0000ce7:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cea:	8b 0d 00 88 02 c0    	mov    ecx,DWORD PTR ds:0xc0028800
c0000cf0:	89 f0                	mov    eax,esi
c0000cf2:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cf5:	83 e0 fc             	and    eax,0xfffffffc
c0000cf8:	39 c1                	cmp    ecx,eax
c0000cfa:	72 24                	jb     c0000d20 <dlfree+0x48>
c0000cfc:	83 c9 03             	or     ecx,0x3
c0000cff:	c1 e8 03             	shr    eax,0x3
c0000d02:	89 0d 00 88 02 c0    	mov    DWORD PTR ds:0xc0028800,ecx
c0000d08:	83 e8 02             	sub    eax,0x2
c0000d0b:	8b 0c 85 04 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd77fc]
c0000d12:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d14:	89 14 85 04 88 02 c0 	mov    DWORD PTR [eax*4-0x3ffd77fc],edx
c0000d1b:	e9 a9 00 00 00       	jmp    c0000dc9 <dlfree+0xf1>
c0000d20:	83 e6 02             	and    esi,0x2
c0000d23:	0f 85 a0 00 00 00    	jne    c0000dc9 <dlfree+0xf1>
c0000d29:	83 c9 01             	or     ecx,0x1
c0000d2c:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d2f:	89 0d 00 88 02 c0    	mov    DWORD PTR ds:0xc0028800,ecx
c0000d35:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d38:	83 e1 fc             	and    ecx,0xfffffffc
c0000d3b:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d3f:	75 13                	jne    c0000d54 <dlfree+0x7c>
c0000d41:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d44:	29 da                	sub    edx,ebx
c0000d46:	01 d8                	add    eax,ebx
c0000d48:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d4b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d4e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d51:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d54:	39 35 2c 88 02 c0    	cmp    DWORD PTR ds:0xc002882c,esi
c0000d5a:	74 40                	je     c0000d9c <dlfree+0xc4>
c0000d5c:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d60:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d63:	80 e3 01             	and    bl,0x1
c0000d66:	75 0e                	jne    c0000d76 <dlfree+0x9e>
c0000d68:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d6b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d6e:	01 c8                	add    eax,ecx
c0000d70:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d73:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d76:	8b 0d 3c 88 02 c0    	mov    ecx,DWORD PTR ds:0xc002883c
c0000d7c:	c7 42 0c 34 88 02 c0 	mov    DWORD PTR [edx+0xc],0xc0028834
c0000d83:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d86:	89 15 3c 88 02 c0    	mov    DWORD PTR ds:0xc002883c,edx
c0000d8c:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d8f:	89 c1                	mov    ecx,eax
c0000d91:	83 c9 01             	or     ecx,0x1
c0000d94:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d97:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d9a:	eb 10                	jmp    c0000dac <dlfree+0xd4>
c0000d9c:	01 c8                	add    eax,ecx
c0000d9e:	89 c1                	mov    ecx,eax
c0000da0:	83 c9 01             	or     ecx,0x1
c0000da3:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000da6:	89 15 2c 88 02 c0    	mov    DWORD PTR ds:0xc002882c,edx
c0000dac:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000db1:	76 16                	jbe    c0000dc9 <dlfree+0xf1>
c0000db3:	f6 05 00 88 02 c0 02 	test   BYTE PTR ds:0xc0028800,0x2
c0000dba:	74 0d                	je     c0000dc9 <dlfree+0xf1>
c0000dbc:	5b                   	pop    ebx
c0000dbd:	b8 00 88 02 c0       	mov    eax,0xc0028800
c0000dc2:	5e                   	pop    esi
c0000dc3:	5f                   	pop    edi
c0000dc4:	e9 28 fe ff ff       	jmp    c0000bf1 <malloc_consolidate>
c0000dc9:	5b                   	pop    ebx
c0000dca:	5e                   	pop    esi
c0000dcb:	5f                   	pop    edi
c0000dcc:	c3                   	ret    

c0000dcd <sYSMALLOc>:
c0000dcd:	55                   	push   ebp
c0000dce:	57                   	push   edi
c0000dcf:	56                   	push   esi
c0000dd0:	53                   	push   ebx
c0000dd1:	89 d3                	mov    ebx,edx
c0000dd3:	83 ec 2c             	sub    esp,0x2c
c0000dd6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dda:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000de0:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000de3:	8d 42 ff             	lea    eax,[edx-0x1]
c0000de6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dea:	74 1f                	je     c0000e0b <sYSMALLOc+0x3e>
c0000dec:	89 d8                	mov    eax,ebx
c0000dee:	e8 fe fd ff ff       	call   c0000bf1 <malloc_consolidate>
c0000df3:	83 ec 0c             	sub    esp,0xc
c0000df6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dfa:	83 e8 07             	sub    eax,0x7
c0000dfd:	50                   	push   eax
c0000dfe:	e8 30 02 00 00       	call   c0001033 <dlmalloc>
c0000e03:	83 c4 10             	add    esp,0x10
c0000e06:	e9 20 02 00 00       	jmp    c000102b <sYSMALLOc+0x25e>
c0000e0b:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000e0e:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e14:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e17:	83 e0 fc             	and    eax,0xfffffffc
c0000e1a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e22:	83 c0 10             	add    eax,0x10
c0000e25:	01 c1                	add    ecx,eax
c0000e27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e2b:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e32:	74 04                	je     c0000e38 <sYSMALLOc+0x6b>
c0000e34:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e38:	f7 da                	neg    edx
c0000e3a:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e3e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e42:	21 d1                	and    ecx,edx
c0000e44:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e48:	7f 07                	jg     c0000e51 <sYSMALLOc+0x84>
c0000e4a:	31 c0                	xor    eax,eax
c0000e4c:	e9 da 01 00 00       	jmp    c000102b <sYSMALLOc+0x25e>
c0000e51:	83 ec 0c             	sub    esp,0xc
c0000e54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e58:	e8 53 8e 00 00       	call   c0009cb0 <sbrk>
c0000e5d:	83 c4 10             	add    esp,0x10
c0000e60:	89 c6                	mov    esi,eax
c0000e62:	83 f8 ff             	cmp    eax,0xffffffff
c0000e65:	74 e3                	je     c0000e4a <sYSMALLOc+0x7d>
c0000e67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e6b:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e6f:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e72:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e78:	39 f1                	cmp    ecx,esi
c0000e7a:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e80:	75 13                	jne    c0000e95 <sYSMALLOc+0xc8>
c0000e82:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e86:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e8a:	83 c8 01             	or     eax,0x1
c0000e8d:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e90:	e9 3e 01 00 00       	jmp    c0000fd3 <sYSMALLOc+0x206>
c0000e95:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e9b:	88 d0                	mov    al,dl
c0000e9d:	83 e0 01             	and    eax,0x1
c0000ea0:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000ea5:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000ea9:	0f 95 c0             	setne  al
c0000eac:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000eb0:	39 f1                	cmp    ecx,esi
c0000eb2:	76 12                	jbe    c0000ec6 <sYSMALLOc+0xf9>
c0000eb4:	84 c0                	test   al,al
c0000eb6:	74 0e                	je     c0000ec6 <sYSMALLOc+0xf9>
c0000eb8:	83 e2 fe             	and    edx,0xfffffffe
c0000ebb:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000ec1:	e9 83 00 00 00       	jmp    c0000f49 <sYSMALLOc+0x17c>
c0000ec6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000ecb:	74 7c                	je     c0000f49 <sYSMALLOc+0x17c>
c0000ecd:	84 c0                	test   al,al
c0000ecf:	74 0c                	je     c0000edd <sYSMALLOc+0x110>
c0000ed1:	89 f0                	mov    eax,esi
c0000ed3:	29 c8                	sub    eax,ecx
c0000ed5:	01 e8                	add    eax,ebp
c0000ed7:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000edd:	89 f2                	mov    edx,esi
c0000edf:	83 e2 07             	and    edx,0x7
c0000ee2:	74 0c                	je     c0000ef0 <sYSMALLOc+0x123>
c0000ee4:	b8 08 00 00 00       	mov    eax,0x8
c0000ee9:	29 d0                	sub    eax,edx
c0000eeb:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000eee:	eb 04                	jmp    c0000ef4 <sYSMALLOc+0x127>
c0000ef0:	89 f5                	mov    ebp,esi
c0000ef2:	31 c0                	xor    eax,eax
c0000ef4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ef8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000efc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f00:	01 c1                	add    ecx,eax
c0000f02:	83 ec 0c             	sub    esp,0xc
c0000f05:	01 f1                	add    ecx,esi
c0000f07:	01 ca                	add    edx,ecx
c0000f09:	29 c8                	sub    eax,ecx
c0000f0b:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000f0f:	01 c2                	add    edx,eax
c0000f11:	52                   	push   edx
c0000f12:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f16:	e8 95 8d 00 00       	call   c0009cb0 <sbrk>
c0000f1b:	83 c4 10             	add    esp,0x10
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f25:	75 0f                	jne    c0000f36 <sYSMALLOc+0x169>
c0000f27:	83 ec 0c             	sub    esp,0xc
c0000f2a:	6a 00                	push   0x0
c0000f2c:	e8 7f 8d 00 00       	call   c0009cb0 <sbrk>
c0000f31:	83 c4 10             	add    esp,0x10
c0000f34:	eb 30                	jmp    c0000f66 <sYSMALLOc+0x199>
c0000f36:	39 c6                	cmp    esi,eax
c0000f38:	76 33                	jbe    c0000f6d <sYSMALLOc+0x1a0>
c0000f3a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f3e:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f45:	01 f0                	add    eax,esi
c0000f47:	eb 1d                	jmp    c0000f66 <sYSMALLOc+0x199>
c0000f49:	83 ec 0c             	sub    esp,0xc
c0000f4c:	89 f5                	mov    ebp,esi
c0000f4e:	6a 00                	push   0x0
c0000f50:	e8 5b 8d 00 00       	call   c0009cb0 <sbrk>
c0000f55:	89 c2                	mov    edx,eax
c0000f57:	29 f2                	sub    edx,esi
c0000f59:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f5d:	83 c4 10             	add    esp,0x10
c0000f60:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f66:	31 d2                	xor    edx,edx
c0000f68:	83 f8 ff             	cmp    eax,0xffffffff
c0000f6b:	74 66                	je     c0000fd3 <sYSMALLOc+0x206>
c0000f6d:	29 e8                	sub    eax,ebp
c0000f6f:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f72:	01 d0                	add    eax,edx
c0000f74:	83 c8 01             	or     eax,0x1
c0000f77:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f7a:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f80:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f85:	74 4c                	je     c0000fd3 <sYSMALLOc+0x206>
c0000f87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f8b:	83 e8 0c             	sub    eax,0xc
c0000f8e:	83 e0 f8             	and    eax,0xfffffff8
c0000f91:	89 c2                	mov    edx,eax
c0000f93:	83 ca 01             	or     edx,0x1
c0000f96:	83 f8 0f             	cmp    eax,0xf
c0000f99:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f9c:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000fa4:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000fac:	76 25                	jbe    c0000fd3 <sYSMALLOc+0x206>
c0000fae:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000fb4:	83 ec 0c             	sub    esp,0xc
c0000fb7:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fc1:	83 c7 08             	add    edi,0x8
c0000fc4:	57                   	push   edi
c0000fc5:	e8 0e fd ff ff       	call   c0000cd8 <dlfree>
c0000fca:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fd0:	83 c4 10             	add    esp,0x10
c0000fd3:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fd9:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fdf:	73 06                	jae    c0000fe7 <sYSMALLOc+0x21a>
c0000fe1:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fe7:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fed:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000ff3:	73 06                	jae    c0000ffb <sYSMALLOc+0x22e>
c0000ff5:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ffb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ffe:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001001:	83 e2 fc             	and    edx,0xfffffffc
c0001004:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0001008:	0f 82 3c fe ff ff    	jb     c0000e4a <sYSMALLOc+0x7d>
c000100e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001012:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001015:	29 fa                	sub    edx,edi
c0001017:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000101a:	83 ca 01             	or     edx,0x1
c000101d:	89 fb                	mov    ebx,edi
c000101f:	83 c0 08             	add    eax,0x8
c0001022:	83 cb 01             	or     ebx,0x1
c0001025:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001028:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000102b:	83 c4 2c             	add    esp,0x2c
c000102e:	5b                   	pop    ebx
c000102f:	5e                   	pop    esi
c0001030:	5f                   	pop    edi
c0001031:	5d                   	pop    ebp
c0001032:	c3                   	ret    

c0001033 <dlmalloc>:
c0001033:	55                   	push   ebp
c0001034:	57                   	push   edi
c0001035:	56                   	push   esi
c0001036:	53                   	push   ebx
c0001037:	83 ec 1c             	sub    esp,0x1c
c000103a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000103e:	83 f8 df             	cmp    eax,0xffffffdf
c0001041:	0f 87 70 03 00 00    	ja     c00013b7 <dlmalloc+0x384>
c0001047:	83 c0 0b             	add    eax,0xb
c000104a:	be 10 00 00 00       	mov    esi,0x10
c000104f:	83 f8 0f             	cmp    eax,0xf
c0001052:	76 05                	jbe    c0001059 <dlmalloc+0x26>
c0001054:	83 e0 f8             	and    eax,0xfffffff8
c0001057:	89 c6                	mov    esi,eax
c0001059:	8b 3d 00 88 02 c0    	mov    edi,DWORD PTR ds:0xc0028800
c000105f:	f7 c7 01 00 00 00    	test   edi,0x1
c0001065:	75 17                	jne    c000107e <dlmalloc+0x4b>
c0001067:	85 ff                	test   edi,edi
c0001069:	0f 85 05 03 00 00    	jne    c0001374 <dlmalloc+0x341>
c000106f:	b8 00 88 02 c0       	mov    eax,0xc0028800
c0001074:	e8 78 fb ff ff       	call   c0000bf1 <malloc_consolidate>
c0001079:	e9 f6 02 00 00       	jmp    c0001374 <dlmalloc+0x341>
c000107e:	39 f7                	cmp    edi,esi
c0001080:	72 1f                	jb     c00010a1 <dlmalloc+0x6e>
c0001082:	89 f2                	mov    edx,esi
c0001084:	c1 ea 03             	shr    edx,0x3
c0001087:	83 ea 02             	sub    edx,0x2
c000108a:	8b 04 95 04 88 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd77fc]
c0001091:	85 c0                	test   eax,eax
c0001093:	74 0c                	je     c00010a1 <dlmalloc+0x6e>
c0001095:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001098:	89 0c 95 04 88 02 c0 	mov    DWORD PTR [edx*4-0x3ffd77fc],ecx
c000109f:	eb 30                	jmp    c00010d1 <dlmalloc+0x9e>
c00010a1:	89 f0                	mov    eax,esi
c00010a3:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010a9:	77 2e                	ja     c00010d9 <dlmalloc+0xa6>
c00010ab:	c1 e8 03             	shr    eax,0x3
c00010ae:	8d 14 c5 34 88 02 c0 	lea    edx,[eax*8-0x3ffd77cc]
c00010b5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010b9:	8d 5a f8             	lea    ebx,[edx-0x8]
c00010bc:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010bf:	39 c3                	cmp    ebx,eax
c00010c1:	74 2e                	je     c00010f1 <dlmalloc+0xbe>
c00010c3:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010c6:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010cb:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010ce:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010d1:	83 c0 08             	add    eax,0x8
c00010d4:	e9 e0 02 00 00       	jmp    c00013b9 <dlmalloc+0x386>
c00010d9:	e8 8f fa ff ff       	call   c0000b6d <largebin_index>
c00010de:	83 e7 02             	and    edi,0x2
c00010e1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010e5:	74 0a                	je     c00010f1 <dlmalloc+0xbe>
c00010e7:	b8 00 88 02 c0       	mov    eax,0xc0028800
c00010ec:	e8 00 fb ff ff       	call   c0000bf1 <malloc_consolidate>
c00010f1:	8d 46 10             	lea    eax,[esi+0x10]
c00010f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010f8:	8b 1d 40 88 02 c0    	mov    ebx,DWORD PTR ds:0xc0028840
c00010fe:	81 fb 34 88 02 c0    	cmp    ebx,0xc0028834
c0001104:	0f 84 13 01 00 00    	je     c000121d <dlmalloc+0x1ea>
c000110a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000110d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001110:	83 e7 fc             	and    edi,0xfffffffc
c0001113:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001119:	77 4c                	ja     c0001167 <dlmalloc+0x134>
c000111b:	3d 34 88 02 c0       	cmp    eax,0xc0028834
c0001120:	75 45                	jne    c0001167 <dlmalloc+0x134>
c0001122:	39 1d 30 88 02 c0    	cmp    DWORD PTR ds:0xc0028830,ebx
c0001128:	75 3d                	jne    c0001167 <dlmalloc+0x134>
c000112a:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000112e:	73 37                	jae    c0001167 <dlmalloc+0x134>
c0001130:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001133:	89 fa                	mov    edx,edi
c0001135:	a3 3c 88 02 c0       	mov    ds:0xc002883c,eax
c000113a:	a3 40 88 02 c0       	mov    ds:0xc0028840,eax
c000113f:	a3 30 88 02 c0       	mov    ds:0xc0028830,eax
c0001144:	29 f2                	sub    edx,esi
c0001146:	c7 40 08 34 88 02 c0 	mov    DWORD PTR [eax+0x8],0xc0028834
c000114d:	c7 40 0c 34 88 02 c0 	mov    DWORD PTR [eax+0xc],0xc0028834
c0001154:	83 ce 01             	or     esi,0x1
c0001157:	89 d1                	mov    ecx,edx
c0001159:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000115c:	83 c9 01             	or     ecx,0x1
c000115f:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001162:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001165:	eb 15                	jmp    c000117c <dlmalloc+0x149>
c0001167:	a3 40 88 02 c0       	mov    ds:0xc0028840,eax
c000116c:	39 fe                	cmp    esi,edi
c000116e:	c7 40 08 34 88 02 c0 	mov    DWORD PTR [eax+0x8],0xc0028834
c0001175:	75 0d                	jne    c0001184 <dlmalloc+0x151>
c0001177:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000117c:	8d 43 08             	lea    eax,[ebx+0x8]
c000117f:	e9 35 02 00 00       	jmp    c00013b9 <dlmalloc+0x386>
c0001184:	89 f8                	mov    eax,edi
c0001186:	81 ff ff 00 00 00    	cmp    edi,0xff
c000118c:	77 19                	ja     c00011a7 <dlmalloc+0x174>
c000118e:	c1 e8 03             	shr    eax,0x3
c0001191:	8d 14 00             	lea    edx,[eax+eax*1]
c0001194:	83 c2 0d             	add    edx,0xd
c0001197:	8d 2c 95 f8 87 02 c0 	lea    ebp,[edx*4-0x3ffd7808]
c000119e:	8b 14 95 00 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7800]
c00011a5:	eb 46                	jmp    c00011ed <dlmalloc+0x1ba>
c00011a7:	e8 c1 f9 ff ff       	call   c0000b6d <largebin_index>
c00011ac:	8d 14 00             	lea    edx,[eax+eax*1]
c00011af:	83 c2 0d             	add    edx,0xd
c00011b2:	8d 0c 95 00 88 02 c0 	lea    ecx,[edx*4-0x3ffd7800]
c00011b9:	8b 14 95 00 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7800]
c00011c0:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011c3:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011c7:	89 d5                	mov    ebp,edx
c00011c9:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011cd:	74 1e                	je     c00011ed <dlmalloc+0x1ba>
c00011cf:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011d2:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011d5:	77 12                	ja     c00011e9 <dlmalloc+0x1b6>
c00011d7:	83 cf 01             	or     edi,0x1
c00011da:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011dd:	76 05                	jbe    c00011e4 <dlmalloc+0x1b1>
c00011df:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011e2:	eb f6                	jmp    c00011da <dlmalloc+0x1a7>
c00011e4:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011e7:	eb 04                	jmp    c00011ed <dlmalloc+0x1ba>
c00011e9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ed:	89 c7                	mov    edi,eax
c00011ef:	88 c1                	mov    cl,al
c00011f1:	c1 ff 05             	sar    edi,0x5
c00011f4:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011f8:	bf 01 00 00 00       	mov    edi,0x1
c00011fd:	d3 e7                	shl    edi,cl
c00011ff:	89 f8                	mov    eax,edi
c0001201:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001205:	09 04 bd 34 8b 02 c0 	or     DWORD PTR [edi*4-0x3ffd74cc],eax
c000120c:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c000120f:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001212:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001215:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001218:	e9 db fe ff ff       	jmp    c00010f8 <dlmalloc+0xc5>
c000121d:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001223:	76 78                	jbe    c000129d <dlmalloc+0x26a>
c0001225:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001229:	8d 04 c5 34 88 02 c0 	lea    eax,[eax*8-0x3ffd77cc]
c0001230:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001233:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001236:	39 ca                	cmp    edx,ecx
c0001238:	74 63                	je     c000129d <dlmalloc+0x26a>
c000123a:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000123d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001240:	83 e3 fc             	and    ebx,0xfffffffc
c0001243:	39 de                	cmp    esi,ebx
c0001245:	77 52                	ja     c0001299 <dlmalloc+0x266>
c0001247:	89 df                	mov    edi,ebx
c0001249:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000124c:	29 f7                	sub    edi,esi
c000124e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001251:	01 d3                	add    ebx,edx
c0001253:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001256:	83 ff 0f             	cmp    edi,0xf
c0001259:	8d 42 08             	lea    eax,[edx+0x8]
c000125c:	77 09                	ja     c0001267 <dlmalloc+0x234>
c000125e:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001262:	e9 52 01 00 00       	jmp    c00013b9 <dlmalloc+0x386>
c0001267:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000126a:	83 ce 01             	or     esi,0x1
c000126d:	89 0d 3c 88 02 c0    	mov    DWORD PTR ds:0xc002883c,ecx
c0001273:	89 0d 40 88 02 c0    	mov    DWORD PTR ds:0xc0028840,ecx
c0001279:	c7 41 08 34 88 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0028834
c0001280:	c7 41 0c 34 88 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0028834
c0001287:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000128a:	89 fa                	mov    edx,edi
c000128c:	83 ca 01             	or     edx,0x1
c000128f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001292:	89 3b                	mov    DWORD PTR [ebx],edi
c0001294:	e9 20 01 00 00       	jmp    c00013b9 <dlmalloc+0x386>
c0001299:	89 c2                	mov    edx,eax
c000129b:	eb 99                	jmp    c0001236 <dlmalloc+0x203>
c000129d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00012a1:	b8 01 00 00 00       	mov    eax,0x1
c00012a6:	41                   	inc    ecx
c00012a7:	89 cb                	mov    ebx,ecx
c00012a9:	8d 14 cd 2c 88 02 c0 	lea    edx,[ecx*8-0x3ffd77d4]
c00012b0:	c1 eb 05             	shr    ebx,0x5
c00012b3:	d3 e0                	shl    eax,cl
c00012b5:	8b 3c 9d 34 8b 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd74cc]
c00012bc:	39 f8                	cmp    eax,edi
c00012be:	77 04                	ja     c00012c4 <dlmalloc+0x291>
c00012c0:	85 c0                	test   eax,eax
c00012c2:	75 26                	jne    c00012ea <dlmalloc+0x2b7>
c00012c4:	43                   	inc    ebx
c00012c5:	83 fb 02             	cmp    ebx,0x2
c00012c8:	0f 87 a6 00 00 00    	ja     c0001374 <dlmalloc+0x341>
c00012ce:	8b 3c 9d 34 8b 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd74cc]
c00012d5:	85 ff                	test   edi,edi
c00012d7:	74 eb                	je     c00012c4 <dlmalloc+0x291>
c00012d9:	89 d8                	mov    eax,ebx
c00012db:	c1 e0 06             	shl    eax,0x6
c00012de:	8d 14 85 2c 88 02 c0 	lea    edx,[eax*4-0x3ffd77d4]
c00012e5:	b8 01 00 00 00       	mov    eax,0x1
c00012ea:	85 f8                	test   eax,edi
c00012ec:	75 07                	jne    c00012f5 <dlmalloc+0x2c2>
c00012ee:	83 c2 08             	add    edx,0x8
c00012f1:	01 c0                	add    eax,eax
c00012f3:	eb f5                	jmp    c00012ea <dlmalloc+0x2b7>
c00012f5:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012f8:	39 ca                	cmp    edx,ecx
c00012fa:	75 14                	jne    c0001310 <dlmalloc+0x2dd>
c00012fc:	89 c1                	mov    ecx,eax
c00012fe:	83 c2 08             	add    edx,0x8
c0001301:	f7 d1                	not    ecx
c0001303:	01 c0                	add    eax,eax
c0001305:	21 cf                	and    edi,ecx
c0001307:	89 3c 9d 34 8b 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd74cc],edi
c000130e:	eb ac                	jmp    c00012bc <dlmalloc+0x289>
c0001310:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001313:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001316:	83 e0 fc             	and    eax,0xfffffffc
c0001319:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000131c:	89 c3                	mov    ebx,eax
c000131e:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001321:	29 f3                	sub    ebx,esi
c0001323:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001326:	83 fb 0f             	cmp    ebx,0xf
c0001329:	8d 41 08             	lea    eax,[ecx+0x8]
c000132c:	77 09                	ja     c0001337 <dlmalloc+0x304>
c000132e:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001332:	e9 82 00 00 00       	jmp    c00013b9 <dlmalloc+0x386>
c0001337:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000133a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001340:	89 3d 3c 88 02 c0    	mov    DWORD PTR ds:0xc002883c,edi
c0001346:	89 3d 40 88 02 c0    	mov    DWORD PTR ds:0xc0028840,edi
c000134c:	c7 47 08 34 88 02 c0 	mov    DWORD PTR [edi+0x8],0xc0028834
c0001353:	c7 47 0c 34 88 02 c0 	mov    DWORD PTR [edi+0xc],0xc0028834
c000135a:	77 06                	ja     c0001362 <dlmalloc+0x32f>
c000135c:	89 3d 30 88 02 c0    	mov    DWORD PTR ds:0xc0028830,edi
c0001362:	83 ce 01             	or     esi,0x1
c0001365:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001368:	89 d9                	mov    ecx,ebx
c000136a:	83 c9 01             	or     ecx,0x1
c000136d:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001370:	89 1a                	mov    DWORD PTR [edx],ebx
c0001372:	eb 45                	jmp    c00013b9 <dlmalloc+0x386>
c0001374:	a1 2c 88 02 c0       	mov    eax,ds:0xc002882c
c0001379:	8d 4e 10             	lea    ecx,[esi+0x10]
c000137c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000137f:	83 e2 fc             	and    edx,0xfffffffc
c0001382:	39 d1                	cmp    ecx,edx
c0001384:	77 1e                	ja     c00013a4 <dlmalloc+0x371>
c0001386:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001389:	89 f3                	mov    ebx,esi
c000138b:	89 0d 2c 88 02 c0    	mov    DWORD PTR ds:0xc002882c,ecx
c0001391:	83 cb 01             	or     ebx,0x1
c0001394:	29 f2                	sub    edx,esi
c0001396:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001399:	83 ca 01             	or     edx,0x1
c000139c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000139f:	e9 2d fd ff ff       	jmp    c00010d1 <dlmalloc+0x9e>
c00013a4:	83 c4 1c             	add    esp,0x1c
c00013a7:	89 f0                	mov    eax,esi
c00013a9:	5b                   	pop    ebx
c00013aa:	ba 00 88 02 c0       	mov    edx,0xc0028800
c00013af:	5e                   	pop    esi
c00013b0:	5f                   	pop    edi
c00013b1:	5d                   	pop    ebp
c00013b2:	e9 16 fa ff ff       	jmp    c0000dcd <sYSMALLOc>
c00013b7:	31 c0                	xor    eax,eax
c00013b9:	83 c4 1c             	add    esp,0x1c
c00013bc:	5b                   	pop    ebx
c00013bd:	5e                   	pop    esi
c00013be:	5f                   	pop    edi
c00013bf:	5d                   	pop    ebp
c00013c0:	c3                   	ret    

c00013c1 <iALLOc>:
c00013c1:	55                   	push   ebp
c00013c2:	89 c5                	mov    ebp,eax
c00013c4:	57                   	push   edi
c00013c5:	56                   	push   esi
c00013c6:	53                   	push   ebx
c00013c7:	83 ec 2c             	sub    esp,0x2c
c00013ca:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013ce:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013d6:	83 3d 00 88 02 c0 00 	cmp    DWORD PTR ds:0xc0028800,0x0
c00013dd:	75 12                	jne    c00013f1 <iALLOc+0x30>
c00013df:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013e3:	b8 00 88 02 c0       	mov    eax,0xc0028800
c00013e8:	e8 04 f8 ff ff       	call   c0000bf1 <malloc_consolidate>
c00013ed:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013f1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013f6:	74 12                	je     c000140a <iALLOc+0x49>
c00013f8:	85 ed                	test   ebp,ebp
c00013fa:	0f 84 64 01 00 00    	je     c0001564 <iALLOc+0x1a3>
c0001400:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001408:	eb 33                	jmp    c000143d <iALLOc+0x7c>
c000140a:	85 ed                	test   ebp,ebp
c000140c:	75 14                	jne    c0001422 <iALLOc+0x61>
c000140e:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001416:	83 c4 2c             	add    esp,0x2c
c0001419:	5b                   	pop    ebx
c000141a:	5e                   	pop    esi
c000141b:	5f                   	pop    edi
c000141c:	5d                   	pop    ebp
c000141d:	e9 11 fc ff ff       	jmp    c0001033 <dlmalloc>
c0001422:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001429:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001431:	83 f8 0f             	cmp    eax,0xf
c0001434:	76 07                	jbe    c000143d <iALLOc+0x7c>
c0001436:	83 e0 f8             	and    eax,0xfffffff8
c0001439:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000143d:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001442:	75 09                	jne    c000144d <iALLOc+0x8c>
c0001444:	89 d0                	mov    eax,edx
c0001446:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001449:	31 f6                	xor    esi,esi
c000144b:	eb 3b                	jmp    c0001488 <iALLOc+0xc7>
c000144d:	8b 02                	mov    eax,DWORD PTR [edx]
c000144f:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001457:	83 c0 0b             	add    eax,0xb
c000145a:	83 f8 0f             	cmp    eax,0xf
c000145d:	76 07                	jbe    c0001466 <iALLOc+0xa5>
c000145f:	83 e0 f8             	and    eax,0xfffffff8
c0001462:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001466:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000146a:	0f af f5             	imul   esi,ebp
c000146d:	eb 25                	jmp    c0001494 <iALLOc+0xd3>
c000146f:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001471:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001474:	bb 10 00 00 00       	mov    ebx,0x10
c0001479:	83 f9 0f             	cmp    ecx,0xf
c000147c:	76 05                	jbe    c0001483 <iALLOc+0xc2>
c000147e:	83 e1 f8             	and    ecx,0xfffffff8
c0001481:	89 cb                	mov    ebx,ecx
c0001483:	01 de                	add    esi,ebx
c0001485:	83 c0 04             	add    eax,0x4
c0001488:	39 c7                	cmp    edi,eax
c000148a:	75 e3                	jne    c000146f <iALLOc+0xae>
c000148c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001494:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001498:	8b 1d 54 8b 02 c0    	mov    ebx,DWORD PTR ds:0xc0028b54
c000149e:	83 ec 0c             	sub    esp,0xc
c00014a1:	c7 05 54 8b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028b54,0x0
c00014ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00014af:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00014b3:	50                   	push   eax
c00014b4:	e8 7a fb ff ff       	call   c0001033 <dlmalloc>
c00014b9:	83 c4 10             	add    esp,0x10
c00014bc:	89 1d 54 8b 02 c0    	mov    DWORD PTR ds:0xc0028b54,ebx
c00014c2:	85 c0                	test   eax,eax
c00014c4:	0f 84 92 00 00 00    	je     c000155c <iALLOc+0x19b>
c00014ca:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014cd:	8d 78 f8             	lea    edi,[eax-0x8]
c00014d0:	83 e3 fc             	and    ebx,0xfffffffc
c00014d3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014d7:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014dc:	74 1e                	je     c00014fc <iALLOc+0x13b>
c00014de:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014e2:	89 d9                	mov    ecx,ebx
c00014e4:	52                   	push   edx
c00014e5:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014e9:	83 e9 04             	sub    ecx,0x4
c00014ec:	51                   	push   ecx
c00014ed:	6a 00                	push   0x0
c00014ef:	50                   	push   eax
c00014f0:	e8 9f f1 ff ff       	call   c0000694 <memset>
c00014f5:	83 c4 10             	add    esp,0x10
c00014f8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014fc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001501:	75 14                	jne    c0001517 <iALLOc+0x156>
c0001503:	8d 04 37             	lea    eax,[edi+esi*1]
c0001506:	29 f3                	sub    ebx,esi
c0001508:	8d 48 08             	lea    ecx,[eax+0x8]
c000150b:	83 cb 01             	or     ebx,0x1
c000150e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001512:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001515:	89 f3                	mov    ebx,esi
c0001517:	31 c0                	xor    eax,eax
c0001519:	4d                   	dec    ebp
c000151a:	8d 4f 08             	lea    ecx,[edi+0x8]
c000151d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001521:	39 c5                	cmp    ebp,eax
c0001523:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001526:	74 2c                	je     c0001554 <iALLOc+0x193>
c0001528:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000152c:	85 c9                	test   ecx,ecx
c000152e:	75 15                	jne    c0001545 <iALLOc+0x184>
c0001530:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001533:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001536:	b9 10 00 00 00       	mov    ecx,0x10
c000153b:	83 fe 0f             	cmp    esi,0xf
c000153e:	76 05                	jbe    c0001545 <iALLOc+0x184>
c0001540:	83 e6 f8             	and    esi,0xfffffff8
c0001543:	89 f1                	mov    ecx,esi
c0001545:	89 ce                	mov    esi,ecx
c0001547:	29 cb                	sub    ebx,ecx
c0001549:	83 ce 01             	or     esi,0x1
c000154c:	40                   	inc    eax
c000154d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001550:	01 cf                	add    edi,ecx
c0001552:	eb c6                	jmp    c000151a <iALLOc+0x159>
c0001554:	83 cb 01             	or     ebx,0x1
c0001557:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000155a:	eb 08                	jmp    c0001564 <iALLOc+0x1a3>
c000155c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001564:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001568:	83 c4 2c             	add    esp,0x2c
c000156b:	5b                   	pop    ebx
c000156c:	5e                   	pop    esi
c000156d:	5f                   	pop    edi
c000156e:	5d                   	pop    ebp
c000156f:	c3                   	ret    

c0001570 <dlrealloc>:
c0001570:	55                   	push   ebp
c0001571:	57                   	push   edi
c0001572:	56                   	push   esi
c0001573:	53                   	push   ebx
c0001574:	83 ec 1c             	sub    esp,0x1c
c0001577:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000157b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000157f:	85 db                	test   ebx,ebx
c0001581:	75 10                	jne    c0001593 <dlrealloc+0x23>
c0001583:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001587:	83 c4 1c             	add    esp,0x1c
c000158a:	5b                   	pop    ebx
c000158b:	5e                   	pop    esi
c000158c:	5f                   	pop    edi
c000158d:	5d                   	pop    ebp
c000158e:	e9 a0 fa ff ff       	jmp    c0001033 <dlmalloc>
c0001593:	83 f8 df             	cmp    eax,0xffffffdf
c0001596:	76 07                	jbe    c000159f <dlrealloc+0x2f>
c0001598:	31 db                	xor    ebx,ebx
c000159a:	e9 6a 01 00 00       	jmp    c0001709 <dlrealloc+0x199>
c000159f:	83 c0 0b             	add    eax,0xb
c00015a2:	bd 10 00 00 00       	mov    ebp,0x10
c00015a7:	83 f8 0f             	cmp    eax,0xf
c00015aa:	76 05                	jbe    c00015b1 <dlrealloc+0x41>
c00015ac:	83 e0 f8             	and    eax,0xfffffff8
c00015af:	89 c5                	mov    ebp,eax
c00015b1:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00015b4:	8d 7b f8             	lea    edi,[ebx-0x8]
c00015b7:	89 c6                	mov    esi,eax
c00015b9:	83 e6 fc             	and    esi,0xfffffffc
c00015bc:	a8 02                	test   al,0x2
c00015be:	75 d8                	jne    c0001598 <dlrealloc+0x28>
c00015c0:	39 f5                	cmp    ebp,esi
c00015c2:	0f 86 04 01 00 00    	jbe    c00016cc <dlrealloc+0x15c>
c00015c8:	8d 14 37             	lea    edx,[edi+esi*1]
c00015cb:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015ce:	39 15 2c 88 02 c0    	cmp    DWORD PTR ds:0xc002882c,edx
c00015d4:	75 33                	jne    c0001609 <dlrealloc+0x99>
c00015d6:	83 e1 fc             	and    ecx,0xfffffffc
c00015d9:	01 f1                	add    ecx,esi
c00015db:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015df:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015e2:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015e6:	77 49                	ja     c0001631 <dlrealloc+0xc1>
c00015e8:	01 ef                	add    edi,ebp
c00015ea:	83 e0 01             	and    eax,0x1
c00015ed:	09 e8                	or     eax,ebp
c00015ef:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015f2:	89 3d 2c 88 02 c0    	mov    DWORD PTR ds:0xc002882c,edi
c00015f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015fc:	29 e8                	sub    eax,ebp
c00015fe:	83 c8 01             	or     eax,0x1
c0001601:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0001604:	e9 00 01 00 00       	jmp    c0001709 <dlrealloc+0x199>
c0001609:	89 c8                	mov    eax,ecx
c000160b:	83 e0 fe             	and    eax,0xfffffffe
c000160e:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001613:	75 1c                	jne    c0001631 <dlrealloc+0xc1>
c0001615:	83 e1 fc             	and    ecx,0xfffffffc
c0001618:	01 f1                	add    ecx,esi
c000161a:	39 cd                	cmp    ebp,ecx
c000161c:	77 13                	ja     c0001631 <dlrealloc+0xc1>
c000161e:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001621:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001624:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001627:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000162a:	89 ce                	mov    esi,ecx
c000162c:	e9 9b 00 00 00       	jmp    c00016cc <dlrealloc+0x15c>
c0001631:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001635:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001638:	83 ec 0c             	sub    esp,0xc
c000163b:	50                   	push   eax
c000163c:	e8 f2 f9 ff ff       	call   c0001033 <dlmalloc>
c0001641:	83 c4 10             	add    esp,0x10
c0001644:	85 c0                	test   eax,eax
c0001646:	0f 84 4c ff ff ff    	je     c0001598 <dlrealloc+0x28>
c000164c:	8d 48 f8             	lea    ecx,[eax-0x8]
c000164f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001653:	39 ca                	cmp    edx,ecx
c0001655:	75 0a                	jne    c0001661 <dlrealloc+0xf1>
c0001657:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000165a:	83 e0 fc             	and    eax,0xfffffffc
c000165d:	01 c6                	add    esi,eax
c000165f:	eb 6b                	jmp    c00016cc <dlrealloc+0x15c>
c0001661:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001664:	83 f9 27             	cmp    ecx,0x27
c0001667:	76 08                	jbe    c0001671 <dlrealloc+0x101>
c0001669:	89 de                	mov    esi,ebx
c000166b:	89 c7                	mov    edi,eax
c000166d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000166f:	eb 43                	jmp    c00016b4 <dlrealloc+0x144>
c0001671:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001673:	83 f9 13             	cmp    ecx,0x13
c0001676:	89 10                	mov    DWORD PTR [eax],edx
c0001678:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000167b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000167e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001681:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001684:	76 2e                	jbe    c00016b4 <dlrealloc+0x144>
c0001686:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001689:	83 f9 1b             	cmp    ecx,0x1b
c000168c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000168f:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001692:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001695:	76 1d                	jbe    c00016b4 <dlrealloc+0x144>
c0001697:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000169a:	83 f9 23             	cmp    ecx,0x23
c000169d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00016a0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00016a3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00016a6:	76 0c                	jbe    c00016b4 <dlrealloc+0x144>
c00016a8:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00016ab:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00016ae:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00016b1:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00016b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00016b8:	83 ec 0c             	sub    esp,0xc
c00016bb:	53                   	push   ebx
c00016bc:	e8 17 f6 ff ff       	call   c0000cd8 <dlfree>
c00016c1:	83 c4 10             	add    esp,0x10
c00016c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016c8:	89 c3                	mov    ebx,eax
c00016ca:	eb 3d                	jmp    c0001709 <dlrealloc+0x199>
c00016cc:	89 f2                	mov    edx,esi
c00016ce:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016d1:	29 ea                	sub    edx,ebp
c00016d3:	83 e1 01             	and    ecx,0x1
c00016d6:	8d 04 37             	lea    eax,[edi+esi*1]
c00016d9:	83 fa 0f             	cmp    edx,0xf
c00016dc:	77 0b                	ja     c00016e9 <dlrealloc+0x179>
c00016de:	09 ce                	or     esi,ecx
c00016e0:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016e3:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016e7:	eb 20                	jmp    c0001709 <dlrealloc+0x199>
c00016e9:	01 ef                	add    edi,ebp
c00016eb:	83 ec 0c             	sub    esp,0xc
c00016ee:	09 cd                	or     ebp,ecx
c00016f0:	83 ca 01             	or     edx,0x1
c00016f3:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016f6:	83 c7 08             	add    edi,0x8
c00016f9:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016fc:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001700:	57                   	push   edi
c0001701:	e8 d2 f5 ff ff       	call   c0000cd8 <dlfree>
c0001706:	83 c4 10             	add    esp,0x10
c0001709:	83 c4 1c             	add    esp,0x1c
c000170c:	89 d8                	mov    eax,ebx
c000170e:	5b                   	pop    ebx
c000170f:	5e                   	pop    esi
c0001710:	5f                   	pop    edi
c0001711:	5d                   	pop    ebp
c0001712:	c3                   	ret    

c0001713 <dlmemalign>:
c0001713:	55                   	push   ebp
c0001714:	57                   	push   edi
c0001715:	56                   	push   esi
c0001716:	53                   	push   ebx
c0001717:	83 ec 0c             	sub    esp,0xc
c000171a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000171e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001722:	83 fa 08             	cmp    edx,0x8
c0001725:	77 10                	ja     c0001737 <dlmemalign+0x24>
c0001727:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000172b:	83 c4 0c             	add    esp,0xc
c000172e:	5b                   	pop    ebx
c000172f:	5e                   	pop    esi
c0001730:	5f                   	pop    edi
c0001731:	5d                   	pop    ebp
c0001732:	e9 fc f8 ff ff       	jmp    c0001033 <dlmalloc>
c0001737:	bf 10 00 00 00       	mov    edi,0x10
c000173c:	83 fa 0f             	cmp    edx,0xf
c000173f:	76 13                	jbe    c0001754 <dlmemalign+0x41>
c0001741:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001744:	85 d1                	test   ecx,edx
c0001746:	75 04                	jne    c000174c <dlmemalign+0x39>
c0001748:	89 d7                	mov    edi,edx
c000174a:	eb 08                	jmp    c0001754 <dlmemalign+0x41>
c000174c:	39 d7                	cmp    edi,edx
c000174e:	73 04                	jae    c0001754 <dlmemalign+0x41>
c0001750:	01 ff                	add    edi,edi
c0001752:	eb f8                	jmp    c000174c <dlmemalign+0x39>
c0001754:	83 f8 df             	cmp    eax,0xffffffdf
c0001757:	76 07                	jbe    c0001760 <dlmemalign+0x4d>
c0001759:	31 c0                	xor    eax,eax
c000175b:	e9 ce 00 00 00       	jmp    c000182e <dlmemalign+0x11b>
c0001760:	83 c0 0b             	add    eax,0xb
c0001763:	bd 10 00 00 00       	mov    ebp,0x10
c0001768:	83 f8 0f             	cmp    eax,0xf
c000176b:	76 05                	jbe    c0001772 <dlmemalign+0x5f>
c000176d:	83 e0 f8             	and    eax,0xfffffff8
c0001770:	89 c5                	mov    ebp,eax
c0001772:	83 ec 0c             	sub    esp,0xc
c0001775:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001779:	50                   	push   eax
c000177a:	e8 b4 f8 ff ff       	call   c0001033 <dlmalloc>
c000177f:	83 c4 10             	add    esp,0x10
c0001782:	89 c1                	mov    ecx,eax
c0001784:	85 c0                	test   eax,eax
c0001786:	74 d1                	je     c0001759 <dlmemalign+0x46>
c0001788:	31 d2                	xor    edx,edx
c000178a:	8d 70 f8             	lea    esi,[eax-0x8]
c000178d:	f7 f7                	div    edi
c000178f:	85 d2                	test   edx,edx
c0001791:	74 62                	je     c00017f5 <dlmemalign+0xe2>
c0001793:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001797:	89 f8                	mov    eax,edi
c0001799:	f7 d8                	neg    eax
c000179b:	21 c3                	and    ebx,eax
c000179d:	83 eb 08             	sub    ebx,0x8
c00017a0:	89 d8                	mov    eax,ebx
c00017a2:	29 f0                	sub    eax,esi
c00017a4:	83 f8 0f             	cmp    eax,0xf
c00017a7:	77 02                	ja     c00017ab <dlmemalign+0x98>
c00017a9:	01 fb                	add    ebx,edi
c00017ab:	89 d8                	mov    eax,ebx
c00017ad:	29 f0                	sub    eax,esi
c00017af:	89 c6                	mov    esi,eax
c00017b1:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017b4:	89 c2                	mov    edx,eax
c00017b6:	83 e2 fc             	and    edx,0xfffffffc
c00017b9:	29 f2                	sub    edx,esi
c00017bb:	a8 02                	test   al,0x2
c00017bd:	74 10                	je     c00017cf <dlmemalign+0xbc>
c00017bf:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017c2:	83 ca 02             	or     edx,0x2
c00017c5:	8d 43 08             	lea    eax,[ebx+0x8]
c00017c8:	89 33                	mov    DWORD PTR [ebx],esi
c00017ca:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017cd:	eb 5f                	jmp    c000182e <dlmemalign+0x11b>
c00017cf:	83 ec 0c             	sub    esp,0xc
c00017d2:	89 d0                	mov    eax,edx
c00017d4:	83 c8 01             	or     eax,0x1
c00017d7:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017da:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017df:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017e2:	83 e0 01             	and    eax,0x1
c00017e5:	09 f0                	or     eax,esi
c00017e7:	89 de                	mov    esi,ebx
c00017e9:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017ec:	51                   	push   ecx
c00017ed:	e8 e6 f4 ff ff       	call   c0000cd8 <dlfree>
c00017f2:	83 c4 10             	add    esp,0x10
c00017f5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017f8:	a8 02                	test   al,0x2
c00017fa:	75 2f                	jne    c000182b <dlmemalign+0x118>
c00017fc:	83 e0 fc             	and    eax,0xfffffffc
c00017ff:	8d 55 10             	lea    edx,[ebp+0x10]
c0001802:	39 c2                	cmp    edx,eax
c0001804:	73 25                	jae    c000182b <dlmemalign+0x118>
c0001806:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001809:	83 ec 0c             	sub    esp,0xc
c000180c:	29 e8                	sub    eax,ebp
c000180e:	83 c2 08             	add    edx,0x8
c0001811:	83 c8 01             	or     eax,0x1
c0001814:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001817:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000181a:	83 e0 01             	and    eax,0x1
c000181d:	09 c5                	or     ebp,eax
c000181f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001822:	52                   	push   edx
c0001823:	e8 b0 f4 ff ff       	call   c0000cd8 <dlfree>
c0001828:	83 c4 10             	add    esp,0x10
c000182b:	8d 46 08             	lea    eax,[esi+0x8]
c000182e:	83 c4 0c             	add    esp,0xc
c0001831:	5b                   	pop    ebx
c0001832:	5e                   	pop    esi
c0001833:	5f                   	pop    edi
c0001834:	5d                   	pop    ebp
c0001835:	c3                   	ret    

c0001836 <dlcalloc>:
c0001836:	53                   	push   ebx
c0001837:	83 ec 14             	sub    esp,0x14
c000183a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000183e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001843:	50                   	push   eax
c0001844:	e8 ea f7 ff ff       	call   c0001033 <dlmalloc>
c0001849:	83 c4 10             	add    esp,0x10
c000184c:	89 c3                	mov    ebx,eax
c000184e:	85 c0                	test   eax,eax
c0001850:	74 77                	je     c00018c9 <dlcalloc+0x93>
c0001852:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001855:	89 d0                	mov    eax,edx
c0001857:	83 e0 fc             	and    eax,0xfffffffc
c000185a:	80 e2 02             	and    dl,0x2
c000185d:	75 5a                	jne    c00018b9 <dlcalloc+0x83>
c000185f:	83 e8 04             	sub    eax,0x4
c0001862:	83 f8 27             	cmp    eax,0x27
c0001865:	76 03                	jbe    c000186a <dlcalloc+0x34>
c0001867:	51                   	push   ecx
c0001868:	eb 53                	jmp    c00018bd <dlcalloc+0x87>
c000186a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001870:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001877:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000187e:	83 f8 13             	cmp    eax,0x13
c0001881:	76 46                	jbe    c00018c9 <dlcalloc+0x93>
c0001883:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000188a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001891:	83 f8 1b             	cmp    eax,0x1b
c0001894:	76 33                	jbe    c00018c9 <dlcalloc+0x93>
c0001896:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000189d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00018a4:	83 f8 23             	cmp    eax,0x23
c00018a7:	76 20                	jbe    c00018c9 <dlcalloc+0x93>
c00018a9:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00018b0:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00018b7:	eb 10                	jmp    c00018c9 <dlcalloc+0x93>
c00018b9:	83 e8 08             	sub    eax,0x8
c00018bc:	52                   	push   edx
c00018bd:	50                   	push   eax
c00018be:	6a 00                	push   0x0
c00018c0:	53                   	push   ebx
c00018c1:	e8 ce ed ff ff       	call   c0000694 <memset>
c00018c6:	83 c4 10             	add    esp,0x10
c00018c9:	89 d8                	mov    eax,ebx
c00018cb:	83 c4 08             	add    esp,0x8
c00018ce:	5b                   	pop    ebx
c00018cf:	c3                   	ret    

c00018d0 <dlcfree>:
c00018d0:	e9 03 f4 ff ff       	jmp    c0000cd8 <dlfree>

c00018d5 <dlindependent_calloc>:
c00018d5:	83 ec 28             	sub    esp,0x28
c00018d8:	b9 03 00 00 00       	mov    ecx,0x3
c00018dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018e1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018e5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018e9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018f1:	e8 cb fa ff ff       	call   c00013c1 <iALLOc>
c00018f6:	83 c4 2c             	add    esp,0x2c
c00018f9:	c3                   	ret    

c00018fa <dlindependent_comalloc>:
c00018fa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001902:	31 c9                	xor    ecx,ecx
c0001904:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001908:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000190c:	e9 b0 fa ff ff       	jmp    c00013c1 <iALLOc>

c0001911 <dlvalloc>:
c0001911:	83 ec 0c             	sub    esp,0xc
c0001914:	83 3d 00 88 02 c0 00 	cmp    DWORD PTR ds:0xc0028800,0x0
c000191b:	75 0a                	jne    c0001927 <dlvalloc+0x16>
c000191d:	b8 00 88 02 c0       	mov    eax,0xc0028800
c0001922:	e8 ca f2 ff ff       	call   c0000bf1 <malloc_consolidate>
c0001927:	50                   	push   eax
c0001928:	50                   	push   eax
c0001929:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000192d:	ff 35 5c 8b 02 c0    	push   DWORD PTR ds:0xc0028b5c
c0001933:	e8 db fd ff ff       	call   c0001713 <dlmemalign>
c0001938:	83 c4 1c             	add    esp,0x1c
c000193b:	c3                   	ret    

c000193c <dlpvalloc>:
c000193c:	83 ec 0c             	sub    esp,0xc
c000193f:	83 3d 00 88 02 c0 00 	cmp    DWORD PTR ds:0xc0028800,0x0
c0001946:	75 0a                	jne    c0001952 <dlpvalloc+0x16>
c0001948:	b8 00 88 02 c0       	mov    eax,0xc0028800
c000194d:	e8 9f f2 ff ff       	call   c0000bf1 <malloc_consolidate>
c0001952:	a1 5c 8b 02 c0       	mov    eax,ds:0xc0028b5c
c0001957:	89 c1                	mov    ecx,eax
c0001959:	52                   	push   edx
c000195a:	f7 d9                	neg    ecx
c000195c:	52                   	push   edx
c000195d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001961:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001965:	21 ca                	and    edx,ecx
c0001967:	52                   	push   edx
c0001968:	50                   	push   eax
c0001969:	e8 a5 fd ff ff       	call   c0001713 <dlmemalign>
c000196e:	83 c4 1c             	add    esp,0x1c
c0001971:	c3                   	ret    

c0001972 <dlmalloc_trim>:
c0001972:	b8 00 88 02 c0       	mov    eax,0xc0028800
c0001977:	e8 75 f2 ff ff       	call   c0000bf1 <malloc_consolidate>
c000197c:	31 c0                	xor    eax,eax
c000197e:	c3                   	ret    

c000197f <dlmalloc_usable_size>:
c000197f:	53                   	push   ebx
c0001980:	31 c0                	xor    eax,eax
c0001982:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001986:	85 c9                	test   ecx,ecx
c0001988:	74 24                	je     c00019ae <dlmalloc_usable_size+0x2f>
c000198a:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000198d:	f6 c2 02             	test   dl,0x2
c0001990:	74 08                	je     c000199a <dlmalloc_usable_size+0x1b>
c0001992:	83 e2 fc             	and    edx,0xfffffffc
c0001995:	8d 42 f8             	lea    eax,[edx-0x8]
c0001998:	eb 14                	jmp    c00019ae <dlmalloc_usable_size+0x2f>
c000199a:	89 d3                	mov    ebx,edx
c000199c:	31 c0                	xor    eax,eax
c000199e:	83 e3 fe             	and    ebx,0xfffffffe
c00019a1:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c00019a6:	74 06                	je     c00019ae <dlmalloc_usable_size+0x2f>
c00019a8:	83 e2 fc             	and    edx,0xfffffffc
c00019ab:	8d 42 fc             	lea    eax,[edx-0x4]
c00019ae:	5b                   	pop    ebx
c00019af:	c3                   	ret    

c00019b0 <dlmallinfo>:
c00019b0:	55                   	push   ebp
c00019b1:	57                   	push   edi
c00019b2:	56                   	push   esi
c00019b3:	53                   	push   ebx
c00019b4:	83 ec 08             	sub    esp,0x8
c00019b7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00019bb:	83 3d 2c 88 02 c0 00 	cmp    DWORD PTR ds:0xc002882c,0x0
c00019c2:	75 0a                	jne    c00019ce <dlmallinfo+0x1e>
c00019c4:	b8 00 88 02 c0       	mov    eax,0xc0028800
c00019c9:	e8 23 f2 ff ff       	call   c0000bf1 <malloc_consolidate>
c00019ce:	a1 2c 88 02 c0       	mov    eax,ds:0xc002882c
c00019d3:	31 ed                	xor    ebp,ebp
c00019d5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019d8:	31 c9                	xor    ecx,ecx
c00019da:	83 e0 fc             	and    eax,0xfffffffc
c00019dd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019e1:	31 c0                	xor    eax,eax
c00019e3:	8b 14 85 04 88 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd77fc]
c00019ea:	85 d2                	test   edx,edx
c00019ec:	74 0e                	je     c00019fc <dlmallinfo+0x4c>
c00019ee:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019f1:	45                   	inc    ebp
c00019f2:	83 e6 fc             	and    esi,0xfffffffc
c00019f5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019f8:	01 f1                	add    ecx,esi
c00019fa:	eb ee                	jmp    c00019ea <dlmallinfo+0x3a>
c00019fc:	40                   	inc    eax
c00019fd:	83 f8 0a             	cmp    eax,0xa
c0001a00:	75 e1                	jne    c00019e3 <dlmallinfo+0x33>
c0001a02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a06:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001a0d:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a10:	b8 34 88 02 c0       	mov    eax,0xc0028834
c0001a15:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a18:	39 f0                	cmp    eax,esi
c0001a1a:	74 10                	je     c0001a2c <dlmallinfo+0x7c>
c0001a1c:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a1f:	ff 04 24             	inc    DWORD PTR [esp]
c0001a22:	83 e7 fc             	and    edi,0xfffffffc
c0001a25:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a28:	01 fa                	add    edx,edi
c0001a2a:	eb ec                	jmp    c0001a18 <dlmallinfo+0x68>
c0001a2c:	83 c0 08             	add    eax,0x8
c0001a2f:	3d 2c 8b 02 c0       	cmp    eax,0xc0028b2c
c0001a34:	75 df                	jne    c0001a15 <dlmallinfo+0x65>
c0001a36:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a39:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a3c:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a3f:	a1 68 8b 02 c0       	mov    eax,ds:0xc0028b68
c0001a44:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a47:	89 03                	mov    DWORD PTR [ebx],eax
c0001a49:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a4c:	8b 35 50 8b 02 c0    	mov    esi,DWORD PTR ds:0xc0028b50
c0001a52:	29 d0                	sub    eax,edx
c0001a54:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a57:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a5a:	8b 35 64 8b 02 c0    	mov    esi,DWORD PTR ds:0xc0028b64
c0001a60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a64:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a67:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a6a:	8b 35 74 8b 02 c0    	mov    esi,DWORD PTR ds:0xc0028b74
c0001a70:	89 d8                	mov    eax,ebx
c0001a72:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a75:	83 c4 08             	add    esp,0x8
c0001a78:	5b                   	pop    ebx
c0001a79:	5e                   	pop    esi
c0001a7a:	5f                   	pop    edi
c0001a7b:	5d                   	pop    ebp
c0001a7c:	c2 04 00             	ret    0x4

c0001a7f <dlmalloc_stats>:
c0001a7f:	83 ec 30             	sub    esp,0x30
c0001a82:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a86:	50                   	push   eax
c0001a87:	e8 24 ff ff ff       	call   c00019b0 <dlmallinfo>
c0001a8c:	83 c4 30             	add    esp,0x30
c0001a8f:	c3                   	ret    

c0001a90 <dlmallopt>:
c0001a90:	56                   	push   esi
c0001a91:	b8 00 88 02 c0       	mov    eax,0xc0028800
c0001a96:	53                   	push   ebx
c0001a97:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a9b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a9f:	e8 4d f1 ff ff       	call   c0000bf1 <malloc_consolidate>
c0001aa4:	8d 46 04             	lea    eax,[esi+0x4]
c0001aa7:	83 f8 05             	cmp    eax,0x5
c0001aaa:	77 67                	ja     c0001b13 <dlmallopt+0x83>
c0001aac:	ff 24 85 a4 3f 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdc05c]
c0001ab3:	83 fb 50             	cmp    ebx,0x50
c0001ab6:	77 5b                	ja     c0001b13 <dlmallopt+0x83>
c0001ab8:	ba 08 00 00 00       	mov    edx,0x8
c0001abd:	85 db                	test   ebx,ebx
c0001abf:	74 12                	je     c0001ad3 <dlmallopt+0x43>
c0001ac1:	83 c3 0b             	add    ebx,0xb
c0001ac4:	ba 10 00 00 00       	mov    edx,0x10
c0001ac9:	83 fb 0f             	cmp    ebx,0xf
c0001acc:	76 05                	jbe    c0001ad3 <dlmallopt+0x43>
c0001ace:	89 da                	mov    edx,ebx
c0001ad0:	83 e2 f8             	and    edx,0xfffffff8
c0001ad3:	a1 00 88 02 c0       	mov    eax,ds:0xc0028800
c0001ad8:	83 e0 03             	and    eax,0x3
c0001adb:	09 d0                	or     eax,edx
c0001add:	a3 00 88 02 c0       	mov    ds:0xc0028800,eax
c0001ae2:	eb 31                	jmp    c0001b15 <dlmallopt+0x85>
c0001ae4:	89 1d 44 8b 02 c0    	mov    DWORD PTR ds:0xc0028b44,ebx
c0001aea:	eb 06                	jmp    c0001af2 <dlmallopt+0x62>
c0001aec:	89 1d 48 8b 02 c0    	mov    DWORD PTR ds:0xc0028b48,ebx
c0001af2:	be 01 00 00 00       	mov    esi,0x1
c0001af7:	eb 1c                	jmp    c0001b15 <dlmallopt+0x85>
c0001af9:	89 1d 4c 8b 02 c0    	mov    DWORD PTR ds:0xc0028b4c,ebx
c0001aff:	eb f1                	jmp    c0001af2 <dlmallopt+0x62>
c0001b01:	31 f6                	xor    esi,esi
c0001b03:	85 db                	test   ebx,ebx
c0001b05:	75 0e                	jne    c0001b15 <dlmallopt+0x85>
c0001b07:	c7 05 54 8b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028b54,0x0
c0001b11:	eb df                	jmp    c0001af2 <dlmallopt+0x62>
c0001b13:	31 f6                	xor    esi,esi
c0001b15:	89 f0                	mov    eax,esi
c0001b17:	5b                   	pop    ebx
c0001b18:	5e                   	pop    esi
c0001b19:	c3                   	ret    

c0001b1a <disk_status>:
c0001b1a:	31 c0                	xor    eax,eax
c0001b1c:	c3                   	ret    

c0001b1d <disk_initialize>:
c0001b1d:	31 c0                	xor    eax,eax
c0001b1f:	c3                   	ret    

c0001b20 <disk_read>:
c0001b20:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b25:	0f b6 04 85 c0 a2 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd5d40]
c0001b2d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b31:	e9 ba a5 01 00       	jmp    c001c0f0 <fatWrapperReadDisk>

c0001b36 <disk_write>:
c0001b36:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b3b:	0f b6 04 85 c0 a2 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd5d40]
c0001b43:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b47:	e9 ec a5 01 00       	jmp    c001c138 <fatWrapperWriteDisk>

c0001b4c <disk_ioctl>:
c0001b4c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001b51:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001b55:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b5a:	0f b6 04 85 c0 a2 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd5d40]
c0001b62:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b66:	e9 15 a6 01 00       	jmp    c001c180 <fatWrapperIoctl>

c0001b6b <ld_word>:
c0001b6b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b6f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b72:	c1 e2 08             	shl    edx,0x8
c0001b75:	09 d0                	or     eax,edx
c0001b77:	c3                   	ret    

c0001b78 <ld_dword>:
c0001b78:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001b7c:	89 d1                	mov    ecx,edx
c0001b7e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b82:	c1 e1 08             	shl    ecx,0x8
c0001b85:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b88:	09 ca                	or     edx,ecx
c0001b8a:	c1 e2 08             	shl    edx,0x8
c0001b8d:	09 d0                	or     eax,edx
c0001b8f:	c3                   	ret    

c0001b90 <ld_qword>:
c0001b90:	57                   	push   edi
c0001b91:	56                   	push   esi
c0001b92:	53                   	push   ebx
c0001b93:	31 db                	xor    ebx,ebx
c0001b95:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001b98:	89 df                	mov    edi,ebx
c0001b9a:	89 ce                	mov    esi,ecx
c0001b9c:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001ba0:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ba4:	c1 e6 08             	shl    esi,0x8
c0001ba7:	09 f2                	or     edx,esi
c0001ba9:	89 d6                	mov    esi,edx
c0001bab:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001baf:	0f a4 f7 08          	shld   edi,esi,0x8
c0001bb3:	c1 e6 08             	shl    esi,0x8
c0001bb6:	09 f2                	or     edx,esi
c0001bb8:	89 d6                	mov    esi,edx
c0001bba:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001bbe:	0f a4 f7 08          	shld   edi,esi,0x8
c0001bc2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001bc5:	c1 e6 08             	shl    esi,0x8
c0001bc8:	89 fb                	mov    ebx,edi
c0001bca:	09 f2                	or     edx,esi
c0001bcc:	89 d1                	mov    ecx,edx
c0001bce:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001bd2:	c1 e1 08             	shl    ecx,0x8
c0001bd5:	89 da                	mov    edx,ebx
c0001bd7:	09 c8                	or     eax,ecx
c0001bd9:	5b                   	pop    ebx
c0001bda:	5e                   	pop    esi
c0001bdb:	5f                   	pop    edi
c0001bdc:	c3                   	ret    

c0001bdd <st_word>:
c0001bdd:	66 89 10             	mov    WORD PTR [eax],dx
c0001be0:	c3                   	ret    

c0001be1 <st_dword>:
c0001be1:	89 10                	mov    DWORD PTR [eax],edx
c0001be3:	c3                   	ret    

c0001be4 <st_qword>:
c0001be4:	89 10                	mov    DWORD PTR [eax],edx
c0001be6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001be9:	c3                   	ret    

c0001bea <mem_cpy>:
c0001bea:	85 c9                	test   ecx,ecx
c0001bec:	74 10                	je     c0001bfe <mem_cpy+0x14>
c0001bee:	57                   	push   edi
c0001bef:	01 c1                	add    ecx,eax
c0001bf1:	56                   	push   esi
c0001bf2:	89 c7                	mov    edi,eax
c0001bf4:	89 d6                	mov    esi,edx
c0001bf6:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001bf7:	39 f9                	cmp    ecx,edi
c0001bf9:	75 fb                	jne    c0001bf6 <mem_cpy+0xc>
c0001bfb:	5e                   	pop    esi
c0001bfc:	5f                   	pop    edi
c0001bfd:	c3                   	ret    
c0001bfe:	c3                   	ret    

c0001bff <mem_set>:
c0001bff:	01 c1                	add    ecx,eax
c0001c01:	40                   	inc    eax
c0001c02:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001c05:	39 c8                	cmp    eax,ecx
c0001c07:	75 f8                	jne    c0001c01 <mem_set+0x2>
c0001c09:	c3                   	ret    

c0001c0a <mem_cmp>:
c0001c0a:	57                   	push   edi
c0001c0b:	56                   	push   esi
c0001c0c:	89 c6                	mov    esi,eax
c0001c0e:	53                   	push   ebx
c0001c0f:	46                   	inc    esi
c0001c10:	42                   	inc    edx
c0001c11:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001c15:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001c19:	29 fb                	sub    ebx,edi
c0001c1b:	89 cf                	mov    edi,ecx
c0001c1d:	29 f7                	sub    edi,esi
c0001c1f:	01 c7                	add    edi,eax
c0001c21:	74 04                	je     c0001c27 <mem_cmp+0x1d>
c0001c23:	85 db                	test   ebx,ebx
c0001c25:	74 e8                	je     c0001c0f <mem_cmp+0x5>
c0001c27:	89 d8                	mov    eax,ebx
c0001c29:	5b                   	pop    ebx
c0001c2a:	5e                   	pop    esi
c0001c2b:	5f                   	pop    edi
c0001c2c:	c3                   	ret    

c0001c2d <chk_chr>:
c0001c2d:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001c30:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001c33:	74 07                	je     c0001c3c <chk_chr+0xf>
c0001c35:	39 d1                	cmp    ecx,edx
c0001c37:	74 03                	je     c0001c3c <chk_chr+0xf>
c0001c39:	40                   	inc    eax
c0001c3a:	eb f1                	jmp    c0001c2d <chk_chr>
c0001c3c:	89 c8                	mov    eax,ecx
c0001c3e:	c3                   	ret    

c0001c3f <dbc_1st>:
c0001c3f:	31 c0                	xor    eax,eax
c0001c41:	c3                   	ret    

c0001c42 <dbc_2nd>:
c0001c42:	31 c0                	xor    eax,eax
c0001c44:	c3                   	ret    

c0001c45 <tchar2uni>:
c0001c45:	57                   	push   edi
c0001c46:	89 c7                	mov    edi,eax
c0001c48:	56                   	push   esi
c0001c49:	53                   	push   ebx
c0001c4a:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001c4c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001c4e:	8d 73 01             	lea    esi,[ebx+0x1]
c0001c51:	84 c9                	test   cl,cl
c0001c53:	78 0a                	js     c0001c5f <tchar2uni+0x1a>
c0001c55:	0f b6 d1             	movzx  edx,cl
c0001c58:	89 f3                	mov    ebx,esi
c0001c5a:	e9 9f 00 00 00       	jmp    c0001cfe <tchar2uni+0xb9>
c0001c5f:	88 ca                	mov    dl,cl
c0001c61:	83 e2 e0             	and    edx,0xffffffe0
c0001c64:	80 fa c0             	cmp    dl,0xc0
c0001c67:	75 0c                	jne    c0001c75 <tchar2uni+0x30>
c0001c69:	89 ca                	mov    edx,ecx
c0001c6b:	b9 01 00 00 00       	mov    ecx,0x1
c0001c70:	83 e2 1f             	and    edx,0x1f
c0001c73:	eb 2e                	jmp    c0001ca3 <tchar2uni+0x5e>
c0001c75:	88 ca                	mov    dl,cl
c0001c77:	83 e2 f0             	and    edx,0xfffffff0
c0001c7a:	80 fa e0             	cmp    dl,0xe0
c0001c7d:	75 0c                	jne    c0001c8b <tchar2uni+0x46>
c0001c7f:	89 ca                	mov    edx,ecx
c0001c81:	b9 02 00 00 00       	mov    ecx,0x2
c0001c86:	83 e2 0f             	and    edx,0xf
c0001c89:	eb 18                	jmp    c0001ca3 <tchar2uni+0x5e>
c0001c8b:	88 ca                	mov    dl,cl
c0001c8d:	83 e2 f8             	and    edx,0xfffffff8
c0001c90:	88 d0                	mov    al,dl
c0001c92:	83 ca ff             	or     edx,0xffffffff
c0001c95:	3c f0                	cmp    al,0xf0
c0001c97:	75 6c                	jne    c0001d05 <tchar2uni+0xc0>
c0001c99:	89 ca                	mov    edx,ecx
c0001c9b:	b9 03 00 00 00       	mov    ecx,0x3
c0001ca0:	83 e2 07             	and    edx,0x7
c0001ca3:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001ca7:	46                   	inc    esi
c0001ca8:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001cab:	88 c8                	mov    al,cl
c0001cad:	83 e0 c0             	and    eax,0xffffffc0
c0001cb0:	3c 80                	cmp    al,0x80
c0001cb2:	75 4e                	jne    c0001d02 <tchar2uni+0xbd>
c0001cb4:	c1 e2 06             	shl    edx,0x6
c0001cb7:	83 e1 3f             	and    ecx,0x3f
c0001cba:	09 ca                	or     edx,ecx
c0001cbc:	39 de                	cmp    esi,ebx
c0001cbe:	75 e7                	jne    c0001ca7 <tchar2uni+0x62>
c0001cc0:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001cc3:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001cc9:	77 37                	ja     c0001d02 <tchar2uni+0xbd>
c0001ccb:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001cd1:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001cd7:	76 29                	jbe    c0001d02 <tchar2uni+0xbd>
c0001cd9:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001cdf:	76 1d                	jbe    c0001cfe <tchar2uni+0xb9>
c0001ce1:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ce7:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001ced:	c1 e1 06             	shl    ecx,0x6
c0001cf0:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001cf6:	09 ca                	or     edx,ecx
c0001cf8:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001cfe:	89 1f                	mov    DWORD PTR [edi],ebx
c0001d00:	eb 03                	jmp    c0001d05 <tchar2uni+0xc0>
c0001d02:	83 ca ff             	or     edx,0xffffffff
c0001d05:	5b                   	pop    ebx
c0001d06:	89 d0                	mov    eax,edx
c0001d08:	5e                   	pop    esi
c0001d09:	5f                   	pop    edi
c0001d0a:	c3                   	ret    

c0001d0b <put_utf>:
c0001d0b:	53                   	push   ebx
c0001d0c:	83 f8 7f             	cmp    eax,0x7f
c0001d0f:	89 c3                	mov    ebx,eax
c0001d11:	b0 00                	mov    al,0x0
c0001d13:	77 11                	ja     c0001d26 <put_utf+0x1b>
c0001d15:	85 c9                	test   ecx,ecx
c0001d17:	0f 84 e5 00 00 00    	je     c0001e02 <put_utf+0xf7>
c0001d1d:	88 1a                	mov    BYTE PTR [edx],bl
c0001d1f:	b0 01                	mov    al,0x1
c0001d21:	e9 dc 00 00 00       	jmp    c0001e02 <put_utf+0xf7>
c0001d26:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001d2c:	77 23                	ja     c0001d51 <put_utf+0x46>
c0001d2e:	83 f9 01             	cmp    ecx,0x1
c0001d31:	0f 86 cb 00 00 00    	jbe    c0001e02 <put_utf+0xf7>
c0001d37:	89 d8                	mov    eax,ebx
c0001d39:	83 e3 3f             	and    ebx,0x3f
c0001d3c:	c1 e8 06             	shr    eax,0x6
c0001d3f:	83 cb 80             	or     ebx,0xffffff80
c0001d42:	83 c8 c0             	or     eax,0xffffffc0
c0001d45:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001d48:	88 02                	mov    BYTE PTR [edx],al
c0001d4a:	b0 02                	mov    al,0x2
c0001d4c:	e9 b1 00 00 00       	jmp    c0001e02 <put_utf+0xf7>
c0001d51:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001d57:	77 40                	ja     c0001d99 <put_utf+0x8e>
c0001d59:	83 f9 02             	cmp    ecx,0x2
c0001d5c:	0f 86 a0 00 00 00    	jbe    c0001e02 <put_utf+0xf7>
c0001d62:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001d68:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d6e:	0f 86 8e 00 00 00    	jbe    c0001e02 <put_utf+0xf7>
c0001d74:	89 d8                	mov    eax,ebx
c0001d76:	c1 e8 0c             	shr    eax,0xc
c0001d79:	83 c8 e0             	or     eax,0xffffffe0
c0001d7c:	88 02                	mov    BYTE PTR [edx],al
c0001d7e:	89 d8                	mov    eax,ebx
c0001d80:	83 e3 3f             	and    ebx,0x3f
c0001d83:	c1 e8 06             	shr    eax,0x6
c0001d86:	83 cb 80             	or     ebx,0xffffff80
c0001d89:	83 e0 3f             	and    eax,0x3f
c0001d8c:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001d8f:	83 c8 80             	or     eax,0xffffff80
c0001d92:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001d95:	b0 03                	mov    al,0x3
c0001d97:	eb 69                	jmp    c0001e02 <put_utf+0xf7>
c0001d99:	83 f9 03             	cmp    ecx,0x3
c0001d9c:	76 64                	jbe    c0001e02 <put_utf+0xf7>
c0001d9e:	89 d9                	mov    ecx,ebx
c0001da0:	0f b7 c3             	movzx  eax,bx
c0001da3:	66 31 c9             	xor    cx,cx
c0001da6:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001dac:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001db2:	c1 e9 06             	shr    ecx,0x6
c0001db5:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001dbb:	77 43                	ja     c0001e00 <put_utf+0xf5>
c0001dbd:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001dc3:	77 3b                	ja     c0001e00 <put_utf+0xf5>
c0001dc5:	09 cb                	or     ebx,ecx
c0001dc7:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001dcd:	89 d8                	mov    eax,ebx
c0001dcf:	c1 e8 12             	shr    eax,0x12
c0001dd2:	83 c8 f0             	or     eax,0xfffffff0
c0001dd5:	88 02                	mov    BYTE PTR [edx],al
c0001dd7:	89 d8                	mov    eax,ebx
c0001dd9:	c1 e8 0c             	shr    eax,0xc
c0001ddc:	83 e0 3f             	and    eax,0x3f
c0001ddf:	83 c8 80             	or     eax,0xffffff80
c0001de2:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001de5:	89 d8                	mov    eax,ebx
c0001de7:	83 e3 3f             	and    ebx,0x3f
c0001dea:	c1 e8 06             	shr    eax,0x6
c0001ded:	83 cb 80             	or     ebx,0xffffff80
c0001df0:	83 e0 3f             	and    eax,0x3f
c0001df3:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001df6:	83 c8 80             	or     eax,0xffffff80
c0001df9:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001dfc:	b0 04                	mov    al,0x4
c0001dfe:	eb 02                	jmp    c0001e02 <put_utf+0xf7>
c0001e00:	31 c0                	xor    eax,eax
c0001e02:	5b                   	pop    ebx
c0001e03:	c3                   	ret    

c0001e04 <clst2sect>:
c0001e04:	89 c1                	mov    ecx,eax
c0001e06:	83 ea 02             	sub    edx,0x2
c0001e09:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001e0c:	83 e8 02             	sub    eax,0x2
c0001e0f:	39 d0                	cmp    eax,edx
c0001e11:	76 0d                	jbe    c0001e20 <clst2sect+0x1c>
c0001e13:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001e17:	f7 e2                	mul    edx
c0001e19:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001e1c:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001e1f:	c3                   	ret    
c0001e20:	31 c0                	xor    eax,eax
c0001e22:	31 d2                	xor    edx,edx
c0001e24:	c3                   	ret    

c0001e25 <clmt_clust>:
c0001e25:	57                   	push   edi
c0001e26:	89 cf                	mov    edi,ecx
c0001e28:	56                   	push   esi
c0001e29:	89 d6                	mov    esi,edx
c0001e2b:	53                   	push   ebx
c0001e2c:	0f ac fe 09          	shrd   esi,edi,0x9
c0001e30:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001e33:	89 f2                	mov    edx,esi
c0001e35:	8b 00                	mov    eax,DWORD PTR [eax]
c0001e37:	c1 ef 09             	shr    edi,0x9
c0001e3a:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001e3e:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001e41:	89 f9                	mov    ecx,edi
c0001e43:	31 ff                	xor    edi,edi
c0001e45:	57                   	push   edi
c0001e46:	56                   	push   esi
c0001e47:	51                   	push   ecx
c0001e48:	52                   	push   edx
c0001e49:	e8 92 11 02 00       	call   c0022fe0 <__udivdi3>
c0001e4e:	83 c4 10             	add    esp,0x10
c0001e51:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001e53:	85 d2                	test   edx,edx
c0001e55:	74 10                	je     c0001e67 <clmt_clust+0x42>
c0001e57:	39 d0                	cmp    eax,edx
c0001e59:	72 07                	jb     c0001e62 <clmt_clust+0x3d>
c0001e5b:	29 d0                	sub    eax,edx
c0001e5d:	83 c3 08             	add    ebx,0x8
c0001e60:	eb ef                	jmp    c0001e51 <clmt_clust+0x2c>
c0001e62:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001e65:	89 c2                	mov    edx,eax
c0001e67:	5b                   	pop    ebx
c0001e68:	89 d0                	mov    eax,edx
c0001e6a:	5e                   	pop    esi
c0001e6b:	5f                   	pop    edi
c0001e6c:	c3                   	ret    

c0001e6d <pick_lfn>:
c0001e6d:	55                   	push   ebp
c0001e6e:	57                   	push   edi
c0001e6f:	56                   	push   esi
c0001e70:	89 d6                	mov    esi,edx
c0001e72:	53                   	push   ebx
c0001e73:	89 c3                	mov    ebx,eax
c0001e75:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001e78:	e8 ee fc ff ff       	call   c0001b6b <ld_word>
c0001e7d:	66 85 c0             	test   ax,ax
c0001e80:	74 04                	je     c0001e86 <pick_lfn+0x19>
c0001e82:	31 c0                	xor    eax,eax
c0001e84:	eb 5c                	jmp    c0001ee2 <pick_lfn+0x75>
c0001e86:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001e89:	bd 01 00 00 00       	mov    ebp,0x1
c0001e8e:	83 e1 bf             	and    ecx,0xffffffbf
c0001e91:	31 ff                	xor    edi,edi
c0001e93:	49                   	dec    ecx
c0001e94:	6b c9 0d             	imul   ecx,ecx,0xd
c0001e97:	0f b6 87 c0 40 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffdbf40]
c0001e9e:	01 f0                	add    eax,esi
c0001ea0:	e8 c6 fc ff ff       	call   c0001b6b <ld_word>
c0001ea5:	66 85 ed             	test   bp,bp
c0001ea8:	74 11                	je     c0001ebb <pick_lfn+0x4e>
c0001eaa:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001eb0:	77 d0                	ja     c0001e82 <pick_lfn+0x15>
c0001eb2:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001eb6:	89 c5                	mov    ebp,eax
c0001eb8:	41                   	inc    ecx
c0001eb9:	eb 04                	jmp    c0001ebf <pick_lfn+0x52>
c0001ebb:	66 40                	inc    ax
c0001ebd:	75 c3                	jne    c0001e82 <pick_lfn+0x15>
c0001ebf:	47                   	inc    edi
c0001ec0:	83 ff 0d             	cmp    edi,0xd
c0001ec3:	75 d2                	jne    c0001e97 <pick_lfn+0x2a>
c0001ec5:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001ec8:	74 13                	je     c0001edd <pick_lfn+0x70>
c0001eca:	66 85 ed             	test   bp,bp
c0001ecd:	74 0e                	je     c0001edd <pick_lfn+0x70>
c0001ecf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ed5:	77 ab                	ja     c0001e82 <pick_lfn+0x15>
c0001ed7:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001edd:	b8 01 00 00 00       	mov    eax,0x1
c0001ee2:	5b                   	pop    ebx
c0001ee3:	5e                   	pop    esi
c0001ee4:	5f                   	pop    edi
c0001ee5:	5d                   	pop    ebp
c0001ee6:	c3                   	ret    

c0001ee7 <put_lfn>:
c0001ee7:	55                   	push   ebp
c0001ee8:	31 ed                	xor    ebp,ebp
c0001eea:	57                   	push   edi
c0001eeb:	89 d7                	mov    edi,edx
c0001eed:	56                   	push   esi
c0001eee:	31 f6                	xor    esi,esi
c0001ef0:	53                   	push   ebx
c0001ef1:	83 ec 08             	sub    esp,0x8
c0001ef4:	89 04 24             	mov    DWORD PTR [esp],eax
c0001ef7:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001efb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001eff:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001f05:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001f08:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f0b:	31 d2                	xor    edx,edx
c0001f0d:	e8 cb fc ff ff       	call   c0001bdd <st_word>
c0001f12:	0f b6 d9             	movzx  ebx,cl
c0001f15:	4b                   	dec    ebx
c0001f16:	6b db 0d             	imul   ebx,ebx,0xd
c0001f19:	66 83 fe ff          	cmp    si,0xffff
c0001f1d:	74 08                	je     c0001f27 <put_lfn+0x40>
c0001f1f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f22:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001f26:	43                   	inc    ebx
c0001f27:	0f b6 85 c0 40 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffdbf40]
c0001f2e:	0f b7 d6             	movzx  edx,si
c0001f31:	01 f8                	add    eax,edi
c0001f33:	e8 a5 fc ff ff       	call   c0001bdd <st_word>
c0001f38:	66 85 f6             	test   si,si
c0001f3b:	75 03                	jne    c0001f40 <put_lfn+0x59>
c0001f3d:	83 ce ff             	or     esi,0xffffffff
c0001f40:	45                   	inc    ebp
c0001f41:	83 fd 0d             	cmp    ebp,0xd
c0001f44:	75 d3                	jne    c0001f19 <put_lfn+0x32>
c0001f46:	66 46                	inc    si
c0001f48:	74 0a                	je     c0001f54 <put_lfn+0x6d>
c0001f4a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f4d:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001f52:	75 09                	jne    c0001f5d <put_lfn+0x76>
c0001f54:	88 c8                	mov    al,cl
c0001f56:	83 c8 40             	or     eax,0x40
c0001f59:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001f5d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001f61:	88 07                	mov    BYTE PTR [edi],al
c0001f63:	83 c4 08             	add    esp,0x8
c0001f66:	5b                   	pop    ebx
c0001f67:	5e                   	pop    esi
c0001f68:	5f                   	pop    edi
c0001f69:	5d                   	pop    ebp
c0001f6a:	c3                   	ret    

c0001f6b <gen_numname>:
c0001f6b:	57                   	push   edi
c0001f6c:	89 cf                	mov    edi,ecx
c0001f6e:	56                   	push   esi
c0001f6f:	b9 0b 00 00 00       	mov    ecx,0xb
c0001f74:	53                   	push   ebx
c0001f75:	89 c6                	mov    esi,eax
c0001f77:	83 ec 10             	sub    esp,0x10
c0001f7a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001f7e:	e8 67 fc ff ff       	call   c0001bea <mem_cpy>
c0001f83:	83 fb 05             	cmp    ebx,0x5
c0001f86:	76 2d                	jbe    c0001fb5 <gen_numname+0x4a>
c0001f88:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001f8b:	66 85 c0             	test   ax,ax
c0001f8e:	74 25                	je     c0001fb5 <gen_numname+0x4a>
c0001f90:	83 c7 02             	add    edi,0x2
c0001f93:	ba 10 00 00 00       	mov    edx,0x10
c0001f98:	01 db                	add    ebx,ebx
c0001f9a:	89 c1                	mov    ecx,eax
c0001f9c:	66 d1 e8             	shr    ax,1
c0001f9f:	83 e1 01             	and    ecx,0x1
c0001fa2:	01 cb                	add    ebx,ecx
c0001fa4:	0f ba e3 10          	bt     ebx,0x10
c0001fa8:	73 06                	jae    c0001fb0 <gen_numname+0x45>
c0001faa:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001fb0:	4a                   	dec    edx
c0001fb1:	75 e5                	jne    c0001f98 <gen_numname+0x2d>
c0001fb3:	eb d3                	jmp    c0001f88 <gen_numname+0x1d>
c0001fb5:	b8 07 00 00 00       	mov    eax,0x7
c0001fba:	88 d9                	mov    cl,bl
c0001fbc:	83 e1 0f             	and    ecx,0xf
c0001fbf:	8d 51 30             	lea    edx,[ecx+0x30]
c0001fc2:	80 fa 39             	cmp    dl,0x39
c0001fc5:	76 03                	jbe    c0001fca <gen_numname+0x5f>
c0001fc7:	8d 51 37             	lea    edx,[ecx+0x37]
c0001fca:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001fcd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001fd1:	89 da                	mov    edx,ebx
c0001fd3:	c1 ea 04             	shr    edx,0x4
c0001fd6:	83 fb 0f             	cmp    ebx,0xf
c0001fd9:	76 06                	jbe    c0001fe1 <gen_numname+0x76>
c0001fdb:	89 c8                	mov    eax,ecx
c0001fdd:	89 d3                	mov    ebx,edx
c0001fdf:	eb d9                	jmp    c0001fba <gen_numname+0x4f>
c0001fe1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001fe6:	31 d2                	xor    edx,edx
c0001fe8:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001feb:	8d 04 16             	lea    eax,[esi+edx*1]
c0001fee:	39 ca                	cmp    edx,ecx
c0001ff0:	73 18                	jae    c000200a <gen_numname+0x9f>
c0001ff2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ff5:	3c 20                	cmp    al,0x20
c0001ff7:	74 11                	je     c000200a <gen_numname+0x9f>
c0001ff9:	e8 41 fc ff ff       	call   c0001c3f <dbc_1st>
c0001ffe:	85 c0                	test   eax,eax
c0002000:	74 05                	je     c0002007 <gen_numname+0x9c>
c0002002:	39 d3                	cmp    ebx,edx
c0002004:	74 04                	je     c000200a <gen_numname+0x9f>
c0002006:	42                   	inc    edx
c0002007:	42                   	inc    edx
c0002008:	eb e1                	jmp    c0001feb <gen_numname+0x80>
c000200a:	b0 20                	mov    al,0x20
c000200c:	83 f9 07             	cmp    ecx,0x7
c000200f:	77 05                	ja     c0002016 <gen_numname+0xab>
c0002011:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002015:	41                   	inc    ecx
c0002016:	42                   	inc    edx
c0002017:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000201b:	83 fa 07             	cmp    edx,0x7
c000201e:	76 ea                	jbe    c000200a <gen_numname+0x9f>
c0002020:	83 c4 10             	add    esp,0x10
c0002023:	5b                   	pop    ebx
c0002024:	5e                   	pop    esi
c0002025:	5f                   	pop    edi
c0002026:	c3                   	ret    

c0002027 <sum_sfn>:
c0002027:	31 c9                	xor    ecx,ecx
c0002029:	31 d2                	xor    edx,edx
c000202b:	d0 ca                	ror    dl,1
c000202d:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002030:	41                   	inc    ecx
c0002031:	83 f9 0b             	cmp    ecx,0xb
c0002034:	75 f5                	jne    c000202b <sum_sfn+0x4>
c0002036:	88 d0                	mov    al,dl
c0002038:	c3                   	ret    

c0002039 <xdir_sum>:
c0002039:	56                   	push   esi
c000203a:	31 c9                	xor    ecx,ecx
c000203c:	53                   	push   ebx
c000203d:	31 d2                	xor    edx,edx
c000203f:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002043:	43                   	inc    ebx
c0002044:	c1 e3 05             	shl    ebx,0x5
c0002047:	83 fa 02             	cmp    edx,0x2
c000204a:	74 0b                	je     c0002057 <xdir_sum+0x1e>
c000204c:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002050:	66 d1 c9             	ror    cx,1
c0002053:	01 f1                	add    ecx,esi
c0002055:	eb 05                	jmp    c000205c <xdir_sum+0x23>
c0002057:	ba 03 00 00 00       	mov    edx,0x3
c000205c:	42                   	inc    edx
c000205d:	39 d3                	cmp    ebx,edx
c000205f:	77 e6                	ja     c0002047 <xdir_sum+0xe>
c0002061:	89 c8                	mov    eax,ecx
c0002063:	5b                   	pop    ebx
c0002064:	5e                   	pop    esi
c0002065:	c3                   	ret    

c0002066 <xsum32>:
c0002066:	d1 ca                	ror    edx,1
c0002068:	0f b6 c0             	movzx  eax,al
c000206b:	01 d0                	add    eax,edx
c000206d:	c3                   	ret    

c000206e <get_xfileinfo>:
c000206e:	55                   	push   ebp
c000206f:	31 c9                	xor    ecx,ecx
c0002071:	57                   	push   edi
c0002072:	bd 40 00 00 00       	mov    ebp,0x40
c0002077:	56                   	push   esi
c0002078:	31 ff                	xor    edi,edi
c000207a:	53                   	push   ebx
c000207b:	89 c6                	mov    esi,eax
c000207d:	83 ec 0c             	sub    esp,0xc
c0002080:	89 d3                	mov    ebx,edx
c0002082:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002089:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c000208d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002090:	76 6d                	jbe    c00020ff <get_xfileinfo+0x91>
c0002092:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002098:	76 0b                	jbe    c00020a5 <get_xfileinfo+0x37>
c000209a:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000209e:	bf 01 00 00 00       	mov    edi,0x1
c00020a3:	eb 63                	jmp    c0002108 <get_xfileinfo+0x9a>
c00020a5:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00020ab:	75 03                	jne    c00020b0 <get_xfileinfo+0x42>
c00020ad:	83 c5 02             	add    ebp,0x2
c00020b0:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00020b3:	83 c5 02             	add    ebp,0x2
c00020b6:	e8 b0 fa ff ff       	call   c0001b6b <ld_word>
c00020bb:	ff 04 24             	inc    DWORD PTR [esp]
c00020be:	66 85 c9             	test   cx,cx
c00020c1:	75 0d                	jne    c00020d0 <get_xfileinfo+0x62>
c00020c3:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00020c9:	66 81 fa ff 07       	cmp    dx,0x7ff
c00020ce:	76 2b                	jbe    c00020fb <get_xfileinfo+0x8d>
c00020d0:	c1 e1 10             	shl    ecx,0x10
c00020d3:	ba ff 00 00 00       	mov    edx,0xff
c00020d8:	0f b7 c0             	movzx  eax,ax
c00020db:	29 fa                	sub    edx,edi
c00020dd:	09 c8                	or     eax,ecx
c00020df:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00020e3:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00020e7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00020eb:	e8 1b fc ff ff       	call   c0001d0b <put_utf>
c00020f0:	84 c0                	test   al,al
c00020f2:	74 a6                	je     c000209a <get_xfileinfo+0x2c>
c00020f4:	0f b6 c0             	movzx  eax,al
c00020f7:	01 c7                	add    edi,eax
c00020f9:	31 c0                	xor    eax,eax
c00020fb:	89 c1                	mov    ecx,eax
c00020fd:	eb 8a                	jmp    c0002089 <get_xfileinfo+0x1b>
c00020ff:	85 ff                	test   edi,edi
c0002101:	74 97                	je     c000209a <get_xfileinfo+0x2c>
c0002103:	66 85 c9             	test   cx,cx
c0002106:	75 92                	jne    c000209a <get_xfileinfo+0x2c>
c0002108:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c000210d:	31 c0                	xor    eax,eax
c000210f:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002113:	31 d2                	xor    edx,edx
c0002115:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002118:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c000211b:	80 e1 10             	and    cl,0x10
c000211e:	75 08                	jne    c0002128 <get_xfileinfo+0xba>
c0002120:	8d 46 38             	lea    eax,[esi+0x38]
c0002123:	e8 68 fa ff ff       	call   c0001b90 <ld_qword>
c0002128:	89 03                	mov    DWORD PTR [ebx],eax
c000212a:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000212d:	8d 46 0c             	lea    eax,[esi+0xc]
c0002130:	e8 36 fa ff ff       	call   c0001b6b <ld_word>
c0002135:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002139:	8d 46 0e             	lea    eax,[esi+0xe]
c000213c:	e8 2a fa ff ff       	call   c0001b6b <ld_word>
c0002141:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002145:	83 c4 0c             	add    esp,0xc
c0002148:	5b                   	pop    ebx
c0002149:	5e                   	pop    esi
c000214a:	5f                   	pop    edi
c000214b:	5d                   	pop    ebp
c000214c:	c3                   	ret    

c000214d <get_ldnumber>:
c000214d:	8b 10                	mov    edx,DWORD PTR [eax]
c000214f:	85 d2                	test   edx,edx
c0002151:	74 14                	je     c0002167 <get_ldnumber+0x1a>
c0002153:	56                   	push   esi
c0002154:	53                   	push   ebx
c0002155:	89 d3                	mov    ebx,edx
c0002157:	43                   	inc    ebx
c0002158:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000215b:	80 f9 1f             	cmp    cl,0x1f
c000215e:	76 0d                	jbe    c000216d <get_ldnumber+0x20>
c0002160:	80 f9 3a             	cmp    cl,0x3a
c0002163:	75 f2                	jne    c0002157 <get_ldnumber+0xa>
c0002165:	eb 0a                	jmp    c0002171 <get_ldnumber+0x24>
c0002167:	83 c9 ff             	or     ecx,0xffffffff
c000216a:	89 c8                	mov    eax,ecx
c000216c:	c3                   	ret    
c000216d:	31 c9                	xor    ecx,ecx
c000216f:	eb 24                	jmp    c0002195 <get_ldnumber+0x48>
c0002171:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002174:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002177:	80 f9 09             	cmp    cl,0x9
c000217a:	77 16                	ja     c0002192 <get_ldnumber+0x45>
c000217c:	83 c2 02             	add    edx,0x2
c000217f:	83 c9 ff             	or     ecx,0xffffffff
c0002182:	39 d3                	cmp    ebx,edx
c0002184:	75 0f                	jne    c0002195 <get_ldnumber+0x48>
c0002186:	89 f2                	mov    edx,esi
c0002188:	89 18                	mov    DWORD PTR [eax],ebx
c000218a:	0f be ca             	movsx  ecx,dl
c000218d:	83 e9 30             	sub    ecx,0x30
c0002190:	eb 03                	jmp    c0002195 <get_ldnumber+0x48>
c0002192:	83 c9 ff             	or     ecx,0xffffffff
c0002195:	89 c8                	mov    eax,ecx
c0002197:	5b                   	pop    ebx
c0002198:	5e                   	pop    esi
c0002199:	c3                   	ret    

c000219a <crc32>:
c000219a:	56                   	push   esi
c000219b:	89 d6                	mov    esi,edx
c000219d:	53                   	push   ebx
c000219e:	b2 01                	mov    dl,0x1
c00021a0:	bb 08 00 00 00       	mov    ebx,0x8
c00021a5:	89 f1                	mov    ecx,esi
c00021a7:	84 d1                	test   cl,dl
c00021a9:	0f 95 c1             	setne  cl
c00021ac:	0f b6 c9             	movzx  ecx,cl
c00021af:	31 c1                	xor    ecx,eax
c00021b1:	89 c8                	mov    eax,ecx
c00021b3:	d1 e8                	shr    eax,1
c00021b5:	80 e1 01             	and    cl,0x1
c00021b8:	74 05                	je     c00021bf <crc32+0x25>
c00021ba:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00021bf:	d1 e2                	shl    edx,1
c00021c1:	4b                   	dec    ebx
c00021c2:	75 e1                	jne    c00021a5 <crc32+0xb>
c00021c4:	5b                   	pop    ebx
c00021c5:	5e                   	pop    esi
c00021c6:	c3                   	ret    

c00021c7 <test_gpt_header>:
c00021c7:	55                   	push   ebp
c00021c8:	b9 10 00 00 00       	mov    ecx,0x10
c00021cd:	57                   	push   edi
c00021ce:	ba c0 3f 02 c0       	mov    edx,0xc0023fc0
c00021d3:	56                   	push   esi
c00021d4:	31 ff                	xor    edi,edi
c00021d6:	53                   	push   ebx
c00021d7:	89 c3                	mov    ebx,eax
c00021d9:	e8 2c fa ff ff       	call   c0001c0a <mem_cmp>
c00021de:	85 c0                	test   eax,eax
c00021e0:	75 55                	jne    c0002237 <test_gpt_header+0x70>
c00021e2:	89 c7                	mov    edi,eax
c00021e4:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00021e9:	83 ce ff             	or     esi,0xffffffff
c00021ec:	31 d2                	xor    edx,edx
c00021ee:	83 fd 03             	cmp    ebp,0x3
c00021f1:	76 05                	jbe    c00021f8 <test_gpt_header+0x31>
c00021f3:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00021f8:	89 f0                	mov    eax,esi
c00021fa:	45                   	inc    ebp
c00021fb:	e8 9a ff ff ff       	call   c000219a <crc32>
c0002200:	83 fd 4c             	cmp    ebp,0x4c
c0002203:	89 c6                	mov    esi,eax
c0002205:	75 e5                	jne    c00021ec <test_gpt_header+0x25>
c0002207:	8d 43 10             	lea    eax,[ebx+0x10]
c000220a:	f7 d6                	not    esi
c000220c:	e8 67 f9 ff ff       	call   c0001b78 <ld_dword>
c0002211:	39 c6                	cmp    esi,eax
c0002213:	75 22                	jne    c0002237 <test_gpt_header+0x70>
c0002215:	8d 43 54             	lea    eax,[ebx+0x54]
c0002218:	e8 5b f9 ff ff       	call   c0001b78 <ld_dword>
c000221d:	83 c0 80             	add    eax,0xffffff80
c0002220:	75 15                	jne    c0002237 <test_gpt_header+0x70>
c0002222:	8d 43 50             	lea    eax,[ebx+0x50]
c0002225:	e8 4e f9 ff ff       	call   c0001b78 <ld_dword>
c000222a:	3d 80 00 00 00       	cmp    eax,0x80
c000222f:	0f 96 c0             	setbe  al
c0002232:	0f b6 c0             	movzx  eax,al
c0002235:	89 c7                	mov    edi,eax
c0002237:	5b                   	pop    ebx
c0002238:	89 f8                	mov    eax,edi
c000223a:	5e                   	pop    esi
c000223b:	5f                   	pop    edi
c000223c:	5d                   	pop    ebp
c000223d:	c3                   	ret    

c000223e <make_rand>:
c000223e:	56                   	push   esi
c000223f:	85 c0                	test   eax,eax
c0002241:	53                   	push   ebx
c0002242:	75 05                	jne    c0002249 <make_rand+0xb>
c0002244:	b8 01 00 00 00       	mov    eax,0x1
c0002249:	01 d1                	add    ecx,edx
c000224b:	bb 08 00 00 00       	mov    ebx,0x8
c0002250:	89 c6                	mov    esi,eax
c0002252:	d1 e8                	shr    eax,1
c0002254:	83 e6 01             	and    esi,0x1
c0002257:	85 f6                	test   esi,esi
c0002259:	74 05                	je     c0002260 <make_rand+0x22>
c000225b:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002260:	4b                   	dec    ebx
c0002261:	75 ed                	jne    c0002250 <make_rand+0x12>
c0002263:	42                   	inc    edx
c0002264:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002267:	39 ca                	cmp    edx,ecx
c0002269:	75 e0                	jne    c000224b <make_rand+0xd>
c000226b:	5b                   	pop    ebx
c000226c:	5e                   	pop    esi
c000226d:	c3                   	ret    

c000226e <validate>:
c000226e:	56                   	push   esi
c000226f:	53                   	push   ebx
c0002270:	89 d6                	mov    esi,edx
c0002272:	51                   	push   ecx
c0002273:	85 c0                	test   eax,eax
c0002275:	75 09                	jne    c0002280 <validate+0x12>
c0002277:	b8 09 00 00 00       	mov    eax,0x9
c000227c:	31 c9                	xor    ecx,ecx
c000227e:	eb 2f                	jmp    c00022af <validate+0x41>
c0002280:	89 c3                	mov    ebx,eax
c0002282:	8b 00                	mov    eax,DWORD PTR [eax]
c0002284:	85 c0                	test   eax,eax
c0002286:	74 ef                	je     c0002277 <validate+0x9>
c0002288:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000228b:	74 ea                	je     c0002277 <validate+0x9>
c000228d:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002291:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002295:	75 e0                	jne    c0002277 <validate+0x9>
c0002297:	83 ec 0c             	sub    esp,0xc
c000229a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000229e:	50                   	push   eax
c000229f:	e8 76 f8 ff ff       	call   c0001b1a <disk_status>
c00022a4:	83 c4 10             	add    esp,0x10
c00022a7:	a8 01                	test   al,0x1
c00022a9:	75 cc                	jne    c0002277 <validate+0x9>
c00022ab:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00022ad:	31 c0                	xor    eax,eax
c00022af:	89 0e                	mov    DWORD PTR [esi],ecx
c00022b1:	5a                   	pop    edx
c00022b2:	5b                   	pop    ebx
c00022b3:	5e                   	pop    esi
c00022b4:	c3                   	ret    

c00022b5 <sync_window>:
c00022b5:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022b9:	0f 84 85 00 00 00    	je     c0002344 <sync_window+0x8f>
c00022bf:	55                   	push   ebp
c00022c0:	8d 68 54             	lea    ebp,[eax+0x54]
c00022c3:	57                   	push   edi
c00022c4:	56                   	push   esi
c00022c5:	53                   	push   ebx
c00022c6:	89 c3                	mov    ebx,eax
c00022c8:	83 ec 28             	sub    esp,0x28
c00022cb:	6a 01                	push   0x1
c00022cd:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00022d0:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00022d3:	55                   	push   ebp
c00022d4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022d8:	50                   	push   eax
c00022d9:	e8 58 f8 ff ff       	call   c0001b36 <disk_write>
c00022de:	83 c4 20             	add    esp,0x20
c00022e1:	ba 01 00 00 00       	mov    edx,0x1
c00022e6:	85 c0                	test   eax,eax
c00022e8:	75 50                	jne    c000233a <sync_window+0x85>
c00022ea:	31 ff                	xor    edi,edi
c00022ec:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00022ef:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00022f3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00022f7:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00022fa:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00022fd:	89 c6                	mov    esi,eax
c00022ff:	89 d7                	mov    edi,edx
c0002301:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c0002304:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002308:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c000230b:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c000230f:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002313:	73 23                	jae    c0002338 <sync_window+0x83>
c0002315:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002319:	75 1d                	jne    c0002338 <sync_window+0x83>
c000231b:	83 ec 0c             	sub    esp,0xc
c000231e:	6a 01                	push   0x1
c0002320:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002324:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002328:	52                   	push   edx
c0002329:	50                   	push   eax
c000232a:	55                   	push   ebp
c000232b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000232f:	50                   	push   eax
c0002330:	e8 01 f8 ff ff       	call   c0001b36 <disk_write>
c0002335:	83 c4 20             	add    esp,0x20
c0002338:	31 d2                	xor    edx,edx
c000233a:	83 c4 1c             	add    esp,0x1c
c000233d:	89 d0                	mov    eax,edx
c000233f:	5b                   	pop    ebx
c0002340:	5e                   	pop    esi
c0002341:	5f                   	pop    edi
c0002342:	5d                   	pop    ebp
c0002343:	c3                   	ret    
c0002344:	31 d2                	xor    edx,edx
c0002346:	89 d0                	mov    eax,edx
c0002348:	c3                   	ret    

c0002349 <move_window>:
c0002349:	56                   	push   esi
c000234a:	53                   	push   ebx
c000234b:	89 c3                	mov    ebx,eax
c000234d:	83 ec 14             	sub    esp,0x14
c0002350:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002353:	75 07                	jne    c000235c <move_window+0x13>
c0002355:	31 f6                	xor    esi,esi
c0002357:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000235a:	74 59                	je     c00023b5 <move_window+0x6c>
c000235c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002360:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002364:	89 d8                	mov    eax,ebx
c0002366:	e8 4a ff ff ff       	call   c00022b5 <sync_window>
c000236b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000236f:	89 c6                	mov    esi,eax
c0002371:	85 c0                	test   eax,eax
c0002373:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002377:	75 3c                	jne    c00023b5 <move_window+0x6c>
c0002379:	83 ec 0c             	sub    esp,0xc
c000237c:	8d 43 54             	lea    eax,[ebx+0x54]
c000237f:	6a 01                	push   0x1
c0002381:	51                   	push   ecx
c0002382:	52                   	push   edx
c0002383:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002387:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000238b:	50                   	push   eax
c000238c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002390:	50                   	push   eax
c0002391:	e8 8a f7 ff ff       	call   c0001b20 <disk_read>
c0002396:	83 c4 20             	add    esp,0x20
c0002399:	85 c0                	test   eax,eax
c000239b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000239f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00023a3:	74 0a                	je     c00023af <move_window+0x66>
c00023a5:	83 ca ff             	or     edx,0xffffffff
c00023a8:	be 01 00 00 00       	mov    esi,0x1
c00023ad:	89 d1                	mov    ecx,edx
c00023af:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00023b2:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00023b5:	89 f0                	mov    eax,esi
c00023b7:	83 c4 14             	add    esp,0x14
c00023ba:	5b                   	pop    ebx
c00023bb:	5e                   	pop    esi
c00023bc:	c3                   	ret    

c00023bd <check_fs>:
c00023bd:	53                   	push   ebx
c00023be:	89 c3                	mov    ebx,eax
c00023c0:	83 ec 08             	sub    esp,0x8
c00023c3:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023c7:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00023ce:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00023d5:	e8 6f ff ff ff       	call   c0002349 <move_window>
c00023da:	ba 04 00 00 00       	mov    edx,0x4
c00023df:	85 c0                	test   eax,eax
c00023e1:	0f 85 89 00 00 00    	jne    c0002470 <check_fs+0xb3>
c00023e7:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00023ed:	e8 79 f7 ff ff       	call   c0001b6b <ld_word>
c00023f2:	ba 03 00 00 00       	mov    edx,0x3
c00023f7:	66 3d 55 aa          	cmp    ax,0xaa55
c00023fb:	75 73                	jne    c0002470 <check_fs+0xb3>
c00023fd:	ba e0 40 02 c0       	mov    edx,0xc00240e0
c0002402:	8d 43 54             	lea    eax,[ebx+0x54]
c0002405:	b9 0b 00 00 00       	mov    ecx,0xb
c000240a:	e8 fb f7 ff ff       	call   c0001c0a <mem_cmp>
c000240f:	ba 01 00 00 00       	mov    edx,0x1
c0002414:	85 c0                	test   eax,eax
c0002416:	74 58                	je     c0002470 <check_fs+0xb3>
c0002418:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000241b:	8d 50 18             	lea    edx,[eax+0x18]
c000241e:	80 fa 01             	cmp    dl,0x1
c0002421:	76 09                	jbe    c000242c <check_fs+0x6f>
c0002423:	ba 02 00 00 00       	mov    edx,0x2
c0002428:	3c eb                	cmp    al,0xeb
c000242a:	75 44                	jne    c0002470 <check_fs+0xb3>
c000242c:	ba f4 6f 02 c0       	mov    edx,0xc0026ff4
c0002431:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002437:	b9 03 00 00 00       	mov    ecx,0x3
c000243c:	e8 c9 f7 ff ff       	call   c0001c0a <mem_cmp>
c0002441:	31 d2                	xor    edx,edx
c0002443:	85 c0                	test   eax,eax
c0002445:	74 29                	je     c0002470 <check_fs+0xb3>
c0002447:	ba ec 40 02 c0       	mov    edx,0xc00240ec
c000244c:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002452:	b9 05 00 00 00       	mov    ecx,0x5
c0002457:	e8 ae f7 ff ff       	call   c0001c0a <mem_cmp>
c000245c:	31 d2                	xor    edx,edx
c000245e:	85 c0                	test   eax,eax
c0002460:	74 0e                	je     c0002470 <check_fs+0xb3>
c0002462:	31 d2                	xor    edx,edx
c0002464:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000246b:	0f 95 c2             	setne  dl
c000246e:	01 d2                	add    edx,edx
c0002470:	89 d0                	mov    eax,edx
c0002472:	83 c4 08             	add    esp,0x8
c0002475:	5b                   	pop    ebx
c0002476:	c3                   	ret    

c0002477 <find_volume>:
c0002477:	55                   	push   ebp
c0002478:	31 c9                	xor    ecx,ecx
c000247a:	57                   	push   edi
c000247b:	56                   	push   esi
c000247c:	89 d6                	mov    esi,edx
c000247e:	53                   	push   ebx
c000247f:	31 d2                	xor    edx,edx
c0002481:	83 ec 3c             	sub    esp,0x3c
c0002484:	89 c3                	mov    ebx,eax
c0002486:	e8 32 ff ff ff       	call   c00023bd <check_fs>
c000248b:	83 f8 02             	cmp    eax,0x2
c000248e:	74 0e                	je     c000249e <find_volume+0x27>
c0002490:	0f 87 5d 01 00 00    	ja     c00025f3 <find_volume+0x17c>
c0002496:	85 f6                	test   esi,esi
c0002498:	0f 84 55 01 00 00    	je     c00025f3 <find_volume+0x17c>
c000249e:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c00024a5:	0f 85 dd 00 00 00    	jne    c0002588 <find_volume+0x111>
c00024ab:	31 c9                	xor    ecx,ecx
c00024ad:	ba 01 00 00 00       	mov    edx,0x1
c00024b2:	89 d8                	mov    eax,ebx
c00024b4:	e8 90 fe ff ff       	call   c0002349 <move_window>
c00024b9:	85 c0                	test   eax,eax
c00024bb:	74 0a                	je     c00024c7 <find_volume+0x50>
c00024bd:	b8 04 00 00 00       	mov    eax,0x4
c00024c2:	e9 2c 01 00 00       	jmp    c00025f3 <find_volume+0x17c>
c00024c7:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00024ca:	89 e8                	mov    eax,ebp
c00024cc:	e8 f6 fc ff ff       	call   c00021c7 <test_gpt_header>
c00024d1:	85 c0                	test   eax,eax
c00024d3:	75 0a                	jne    c00024df <find_volume+0x68>
c00024d5:	b8 03 00 00 00       	mov    eax,0x3
c00024da:	e9 14 01 00 00       	jmp    c00025f3 <find_volume+0x17c>
c00024df:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00024e5:	e8 8e f6 ff ff       	call   c0001b78 <ld_dword>
c00024ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00024ee:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00024f4:	e8 97 f6 ff ff       	call   c0001b90 <ld_qword>
c00024f9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0002501:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002505:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002509:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002511:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002515:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002519:	74 ba                	je     c00024d5 <find_volume+0x5e>
c000251b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000251f:	31 c9                	xor    ecx,ecx
c0002521:	c1 e7 07             	shl    edi,0x7
c0002524:	89 d8                	mov    eax,ebx
c0002526:	89 fa                	mov    edx,edi
c0002528:	c1 ea 09             	shr    edx,0x9
c000252b:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000252f:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002533:	e8 11 fe ff ff       	call   c0002349 <move_window>
c0002538:	85 c0                	test   eax,eax
c000253a:	75 81                	jne    c00024bd <find_volume+0x46>
c000253c:	81 e7 80 01 00 00    	and    edi,0x180
c0002542:	b9 10 00 00 00       	mov    ecx,0x10
c0002547:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000254b:	ba d0 40 02 c0       	mov    edx,0xc00240d0
c0002550:	e8 b5 f6 ff ff       	call   c0001c0a <mem_cmp>
c0002555:	85 c0                	test   eax,eax
c0002557:	75 29                	jne    c0002582 <find_volume+0x10b>
c0002559:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000255d:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002561:	e8 2a f6 ff ff       	call   c0001b90 <ld_qword>
c0002566:	89 d1                	mov    ecx,edx
c0002568:	89 c2                	mov    edx,eax
c000256a:	89 d8                	mov    eax,ebx
c000256c:	e8 4c fe ff ff       	call   c00023bd <check_fs>
c0002571:	85 f6                	test   esi,esi
c0002573:	75 07                	jne    c000257c <find_volume+0x105>
c0002575:	83 f8 01             	cmp    eax,0x1
c0002578:	77 08                	ja     c0002582 <find_volume+0x10b>
c000257a:	eb 77                	jmp    c00025f3 <find_volume+0x17c>
c000257c:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002580:	74 71                	je     c00025f3 <find_volume+0x17c>
c0002582:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002586:	eb 89                	jmp    c0002511 <find_volume+0x9a>
c0002588:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000258c:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002592:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002598:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000259c:	89 cd                	mov    ebp,ecx
c000259e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00025a2:	89 f8                	mov    eax,edi
c00025a4:	83 c7 10             	add    edi,0x10
c00025a7:	e8 cc f5 ff ff       	call   c0001b78 <ld_dword>
c00025ac:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00025b0:	89 01                	mov    DWORD PTR [ecx],eax
c00025b2:	83 c1 04             	add    ecx,0x4
c00025b5:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00025b9:	75 e3                	jne    c000259e <find_volume+0x127>
c00025bb:	31 ff                	xor    edi,edi
c00025bd:	85 f6                	test   esi,esi
c00025bf:	74 03                	je     c00025c4 <find_volume+0x14d>
c00025c1:	8d 7e ff             	lea    edi,[esi-0x1]
c00025c4:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00025c8:	85 d2                	test   edx,edx
c00025ca:	74 14                	je     c00025e0 <find_volume+0x169>
c00025cc:	31 c9                	xor    ecx,ecx
c00025ce:	89 d8                	mov    eax,ebx
c00025d0:	e8 e8 fd ff ff       	call   c00023bd <check_fs>
c00025d5:	83 f8 01             	cmp    eax,0x1
c00025d8:	76 19                	jbe    c00025f3 <find_volume+0x17c>
c00025da:	85 f6                	test   esi,esi
c00025dc:	74 0f                	je     c00025ed <find_volume+0x176>
c00025de:	eb 13                	jmp    c00025f3 <find_volume+0x17c>
c00025e0:	85 f6                	test   esi,esi
c00025e2:	0f 85 ed fe ff ff    	jne    c00024d5 <find_volume+0x5e>
c00025e8:	b8 03 00 00 00       	mov    eax,0x3
c00025ed:	47                   	inc    edi
c00025ee:	83 ff 03             	cmp    edi,0x3
c00025f1:	76 d1                	jbe    c00025c4 <find_volume+0x14d>
c00025f3:	83 c4 3c             	add    esp,0x3c
c00025f6:	5b                   	pop    ebx
c00025f7:	5e                   	pop    esi
c00025f8:	5f                   	pop    edi
c00025f9:	5d                   	pop    ebp
c00025fa:	c3                   	ret    

c00025fb <mount_volume>:
c00025fb:	55                   	push   ebp
c00025fc:	57                   	push   edi
c00025fd:	89 cf                	mov    edi,ecx
c00025ff:	56                   	push   esi
c0002600:	53                   	push   ebx
c0002601:	bb 0b 00 00 00       	mov    ebx,0xb
c0002606:	83 ec 3c             	sub    esp,0x3c
c0002609:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000260f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002613:	e8 35 fb ff ff       	call   c000214d <get_ldnumber>
c0002618:	85 c0                	test   eax,eax
c000261a:	0f 88 3a 05 00 00    	js     c0002b5a <mount_volume+0x55f>
c0002620:	8b 2c 85 a0 8b 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd7460]
c0002627:	89 c6                	mov    esi,eax
c0002629:	bb 0c 00 00 00       	mov    ebx,0xc
c000262e:	85 ed                	test   ebp,ebp
c0002630:	0f 84 24 05 00 00    	je     c0002b5a <mount_volume+0x55f>
c0002636:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000263a:	83 e7 fe             	and    edi,0xfffffffe
c000263d:	89 2a                	mov    DWORD PTR [edx],ebp
c000263f:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002643:	74 32                	je     c0002677 <mount_volume+0x7c>
c0002645:	83 ec 0c             	sub    esp,0xc
c0002648:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000264c:	50                   	push   eax
c000264d:	e8 c8 f4 ff ff       	call   c0001b1a <disk_status>
c0002652:	83 c4 10             	add    esp,0x10
c0002655:	a8 01                	test   al,0x1
c0002657:	75 1e                	jne    c0002677 <mount_volume+0x7c>
c0002659:	31 db                	xor    ebx,ebx
c000265b:	89 f9                	mov    ecx,edi
c000265d:	84 c9                	test   cl,cl
c000265f:	0f 84 f5 04 00 00    	je     c0002b5a <mount_volume+0x55f>
c0002665:	a8 04                	test   al,0x4
c0002667:	0f 84 ed 04 00 00    	je     c0002b5a <mount_volume+0x55f>
c000266d:	bb 0a 00 00 00       	mov    ebx,0xa
c0002672:	e9 e3 04 00 00       	jmp    c0002b5a <mount_volume+0x55f>
c0002677:	83 ec 0c             	sub    esp,0xc
c000267a:	89 f0                	mov    eax,esi
c000267c:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002680:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002683:	0f b6 f0             	movzx  esi,al
c0002686:	bb 03 00 00 00       	mov    ebx,0x3
c000268b:	56                   	push   esi
c000268c:	e8 8c f4 ff ff       	call   c0001b1d <disk_initialize>
c0002691:	83 c4 10             	add    esp,0x10
c0002694:	a8 01                	test   al,0x1
c0002696:	0f 85 be 04 00 00    	jne    c0002b5a <mount_volume+0x55f>
c000269c:	89 f9                	mov    ecx,edi
c000269e:	84 c9                	test   cl,cl
c00026a0:	74 04                	je     c00026a6 <mount_volume+0xab>
c00026a2:	a8 04                	test   al,0x4
c00026a4:	75 c7                	jne    c000266d <mount_volume+0x72>
c00026a6:	31 d2                	xor    edx,edx
c00026a8:	89 e8                	mov    eax,ebp
c00026aa:	e8 c8 fd ff ff       	call   c0002477 <find_volume>
c00026af:	83 f8 04             	cmp    eax,0x4
c00026b2:	75 0a                	jne    c00026be <mount_volume+0xc3>
c00026b4:	bb 01 00 00 00       	mov    ebx,0x1
c00026b9:	e9 9c 04 00 00       	jmp    c0002b5a <mount_volume+0x55f>
c00026be:	83 f8 01             	cmp    eax,0x1
c00026c1:	76 0a                	jbe    c00026cd <mount_volume+0xd2>
c00026c3:	bb 0d 00 00 00       	mov    ebx,0xd
c00026c8:	e9 8d 04 00 00       	jmp    c0002b5a <mount_volume+0x55f>
c00026cd:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00026d0:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00026d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00026d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00026db:	75 17                	jne    c00026f4 <mount_volume+0xf9>
c00026dd:	b8 0b 00 00 00       	mov    eax,0xb
c00026e2:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00026e7:	75 da                	jne    c00026c3 <mount_volume+0xc8>
c00026e9:	40                   	inc    eax
c00026ea:	83 f8 40             	cmp    eax,0x40
c00026ed:	75 f3                	jne    c00026e2 <mount_volume+0xe7>
c00026ef:	e9 5a 02 00 00       	jmp    c000294e <mount_volume+0x353>
c00026f4:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00026f7:	e8 6f f4 ff ff       	call   c0001b6b <ld_word>
c00026fc:	66 3d 00 02          	cmp    ax,0x200
c0002700:	75 c1                	jne    c00026c3 <mount_volume+0xc8>
c0002702:	8d 45 6a             	lea    eax,[ebp+0x6a]
c0002705:	e8 61 f4 ff ff       	call   c0001b6b <ld_word>
c000270a:	0f b7 c0             	movzx  eax,ax
c000270d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002711:	85 c0                	test   eax,eax
c0002713:	75 0c                	jne    c0002721 <mount_volume+0x126>
c0002715:	8d 45 78             	lea    eax,[ebp+0x78]
c0002718:	e8 5b f4 ff ff       	call   c0001b78 <ld_dword>
c000271d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002721:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002725:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002728:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000272b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000272f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002732:	48                   	dec    eax
c0002733:	3c 01                	cmp    al,0x1
c0002735:	77 8c                	ja     c00026c3 <mount_volume+0xc8>
c0002737:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000273b:	89 c3                	mov    ebx,eax
c000273d:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002741:	66 85 c0             	test   ax,ax
c0002744:	0f 84 79 ff ff ff    	je     c00026c3 <mount_volume+0xc8>
c000274a:	8d 40 ff             	lea    eax,[eax-0x1]
c000274d:	85 d8                	test   eax,ebx
c000274f:	0f 85 6e ff ff ff    	jne    c00026c3 <mount_volume+0xc8>
c0002755:	8d 45 65             	lea    eax,[ebp+0x65]
c0002758:	e8 0e f4 ff ff       	call   c0001b6b <ld_word>
c000275d:	89 c7                	mov    edi,eax
c000275f:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002763:	a8 0f                	test   al,0xf
c0002765:	0f 85 58 ff ff ff    	jne    c00026c3 <mount_volume+0xc8>
c000276b:	8d 45 67             	lea    eax,[ebp+0x67]
c000276e:	e8 f8 f3 ff ff       	call   c0001b6b <ld_word>
c0002773:	0f b7 f0             	movzx  esi,ax
c0002776:	85 f6                	test   esi,esi
c0002778:	75 0a                	jne    c0002784 <mount_volume+0x189>
c000277a:	8d 45 74             	lea    eax,[ebp+0x74]
c000277d:	e8 f6 f3 ff ff       	call   c0001b78 <ld_dword>
c0002782:	89 c6                	mov    esi,eax
c0002784:	8d 45 62             	lea    eax,[ebp+0x62]
c0002787:	e8 df f3 ff ff       	call   c0001b6b <ld_word>
c000278c:	66 85 c0             	test   ax,ax
c000278f:	0f 84 2e ff ff ff    	je     c00026c3 <mount_volume+0xc8>
c0002795:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c000279a:	0f b7 c8             	movzx  ecx,ax
c000279d:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c00027a2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00027a6:	89 fa                	mov    edx,edi
c00027a8:	66 c1 ea 04          	shr    dx,0x4
c00027ac:	0f b7 d2             	movzx  edx,dx
c00027af:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00027b3:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00027b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027ba:	39 c6                	cmp    esi,eax
c00027bc:	0f 82 01 ff ff ff    	jb     c00026c3 <mount_volume+0xc8>
c00027c2:	29 c6                	sub    esi,eax
c00027c4:	31 d2                	xor    edx,edx
c00027c6:	89 f0                	mov    eax,esi
c00027c8:	f7 f3                	div    ebx
c00027ca:	39 de                	cmp    esi,ebx
c00027cc:	0f 82 f1 fe ff ff    	jb     c00026c3 <mount_volume+0xc8>
c00027d2:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00027d7:	0f 87 e6 fe ff ff    	ja     c00026c3 <mount_volume+0xc8>
c00027dd:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00027e2:	0f 86 63 03 00 00    	jbe    c0002b4b <mount_volume+0x550>
c00027e8:	bb 03 00 00 00       	mov    ebx,0x3
c00027ed:	8d 70 02             	lea    esi,[eax+0x2]
c00027f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00027f8:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00027fb:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00027fe:	31 d2                	xor    edx,edx
c0002800:	89 c8                	mov    eax,ecx
c0002802:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c0002805:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002809:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000280d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002811:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002815:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002818:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000281b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000281f:	31 d2                	xor    edx,edx
c0002821:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002825:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002829:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000282c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000282f:	83 fb 03             	cmp    ebx,0x3
c0002832:	75 2b                	jne    c000285f <mount_volume+0x264>
c0002834:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002837:	e8 2f f3 ff ff       	call   c0001b6b <ld_word>
c000283c:	66 09 c7             	or     di,ax
c000283f:	0f 85 7e fe ff ff    	jne    c00026c3 <mount_volume+0xc8>
c0002845:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000284b:	c1 e6 02             	shl    esi,0x2
c000284e:	e8 25 f3 ff ff       	call   c0001b78 <ld_dword>
c0002853:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000285a:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000285d:	eb 30                	jmp    c000288f <mount_volume+0x294>
c000285f:	66 85 ff             	test   di,di
c0002862:	0f 84 5b fe ff ff    	je     c00026c3 <mount_volume+0xc8>
c0002868:	31 d2                	xor    edx,edx
c000286a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000286e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002872:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002876:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002879:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000287c:	83 fb 02             	cmp    ebx,0x2
c000287f:	75 04                	jne    c0002885 <mount_volume+0x28a>
c0002881:	01 f6                	add    esi,esi
c0002883:	eb 0a                	jmp    c000288f <mount_volume+0x294>
c0002885:	8d 04 76             	lea    eax,[esi+esi*2]
c0002888:	83 e6 01             	and    esi,0x1
c000288b:	d1 e8                	shr    eax,1
c000288d:	01 c6                	add    esi,eax
c000288f:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002895:	c1 ee 09             	shr    esi,0x9
c0002898:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000289c:	0f 87 21 fe ff ff    	ja     c00026c3 <mount_volume+0xc8>
c00028a2:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00028a9:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00028b0:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00028b4:	83 fb 03             	cmp    ebx,0x3
c00028b7:	75 7a                	jne    c0002933 <mount_volume+0x338>
c00028b9:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00028bf:	e8 a7 f2 ff ff       	call   c0001b6b <ld_word>
c00028c4:	66 48                	dec    ax
c00028c6:	75 6b                	jne    c0002933 <mount_volume+0x338>
c00028c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00028cc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00028d0:	83 c2 01             	add    edx,0x1
c00028d3:	89 e8                	mov    eax,ebp
c00028d5:	83 d1 00             	adc    ecx,0x0
c00028d8:	e8 6c fa ff ff       	call   c0002349 <move_window>
c00028dd:	85 c0                	test   eax,eax
c00028df:	75 52                	jne    c0002933 <mount_volume+0x338>
c00028e1:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00028e5:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00028eb:	e8 7b f2 ff ff       	call   c0001b6b <ld_word>
c00028f0:	66 3d 55 aa          	cmp    ax,0xaa55
c00028f4:	75 3d                	jne    c0002933 <mount_volume+0x338>
c00028f6:	8d 45 54             	lea    eax,[ebp+0x54]
c00028f9:	e8 7a f2 ff ff       	call   c0001b78 <ld_dword>
c00028fe:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002903:	75 2e                	jne    c0002933 <mount_volume+0x338>
c0002905:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c000290b:	e8 68 f2 ff ff       	call   c0001b78 <ld_dword>
c0002910:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002915:	75 1c                	jne    c0002933 <mount_volume+0x338>
c0002917:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c000291d:	e8 56 f2 ff ff       	call   c0001b78 <ld_dword>
c0002922:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002925:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000292b:	e8 48 f2 ff ff       	call   c0001b78 <ld_dword>
c0002930:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002933:	66 a1 80 8b 02 c0    	mov    ax,ds:0xc0028b80
c0002939:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000293c:	40                   	inc    eax
c000293d:	31 db                	xor    ebx,ebx
c000293f:	66 a3 80 8b 02 c0    	mov    ds:0xc0028b80,ax
c0002945:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002949:	e9 0c 02 00 00       	jmp    c0002b5a <mount_volume+0x55f>
c000294e:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002954:	e8 12 f2 ff ff       	call   c0001b6b <ld_word>
c0002959:	66 3d 00 01          	cmp    ax,0x100
c000295d:	0f 85 60 fd ff ff    	jne    c00026c3 <mount_volume+0xc8>
c0002963:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000296a:	0f 85 53 fd ff ff    	jne    c00026c3 <mount_volume+0xc8>
c0002970:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002976:	e8 15 f2 ff ff       	call   c0001b90 <ld_qword>
c000297b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000297f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002983:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002989:	e8 ea f1 ff ff       	call   c0001b78 <ld_dword>
c000298e:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002991:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002997:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000299a:	fe c8                	dec    al
c000299c:	0f 85 21 fd ff ff    	jne    c00026c3 <mount_volume+0xc8>
c00029a2:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c00029a9:	bb 01 00 00 00       	mov    ebx,0x1
c00029ae:	d3 e3                	shl    ebx,cl
c00029b0:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00029b4:	66 85 db             	test   bx,bx
c00029b7:	0f 84 06 fd ff ff    	je     c00026c3 <mount_volume+0xc8>
c00029bd:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00029c3:	e8 b0 f1 ff ff       	call   c0001b78 <ld_dword>
c00029c8:	89 c6                	mov    esi,eax
c00029ca:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00029cf:	0f 87 ee fc ff ff    	ja     c00026c3 <mount_volume+0xc8>
c00029d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029d9:	8d 40 02             	lea    eax,[eax+0x2]
c00029dc:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00029df:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00029e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00029e6:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00029e9:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00029ef:	e8 84 f1 ff ff       	call   c0001b78 <ld_dword>
c00029f4:	31 d2                	xor    edx,edx
c00029f6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00029fa:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00029fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002a02:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002a06:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002a09:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002a0c:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002a12:	e8 61 f1 ff ff       	call   c0001b78 <ld_dword>
c0002a17:	31 d2                	xor    edx,edx
c0002a19:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002a1d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a21:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002a25:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002a28:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002a2b:	0f b7 c3             	movzx  eax,bx
c0002a2e:	31 d2                	xor    edx,edx
c0002a30:	0f af f0             	imul   esi,eax
c0002a33:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002a37:	89 f0                	mov    eax,esi
c0002a39:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002a3d:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002a41:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a45:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002a49:	39 c1                	cmp    ecx,eax
c0002a4b:	89 df                	mov    edi,ebx
c0002a4d:	19 d7                	sbb    edi,edx
c0002a4f:	0f 82 6e fc ff ff    	jb     c00026c3 <mount_volume+0xc8>
c0002a55:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002a5b:	31 db                	xor    ebx,ebx
c0002a5d:	e8 16 f1 ff ff       	call   c0001b78 <ld_dword>
c0002a62:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002a69:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002a6c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002a74:	85 db                	test   ebx,ebx
c0002a76:	75 39                	jne    c0002ab1 <mount_volume+0x4b6>
c0002a78:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002a7c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002a80:	0f 86 3d fc ff ff    	jbe    c00026c3 <mount_volume+0xc8>
c0002a86:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002a89:	31 ff                	xor    edi,edi
c0002a8b:	89 e8                	mov    eax,ebp
c0002a8d:	e8 72 f3 ff ff       	call   c0001e04 <clst2sect>
c0002a92:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002a96:	01 c6                	add    esi,eax
c0002a98:	89 e8                	mov    eax,ebp
c0002a9a:	11 d7                	adc    edi,edx
c0002a9c:	89 f2                	mov    edx,esi
c0002a9e:	89 f9                	mov    ecx,edi
c0002aa0:	e8 a4 f8 ff ff       	call   c0002349 <move_window>
c0002aa5:	85 c0                	test   eax,eax
c0002aa7:	0f 85 07 fc ff ff    	jne    c00026b4 <mount_volume+0xb9>
c0002aad:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002ab1:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002ab6:	74 0b                	je     c0002ac3 <mount_volume+0x4c8>
c0002ab8:	83 c3 20             	add    ebx,0x20
c0002abb:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002ac1:	eb b1                	jmp    c0002a74 <mount_volume+0x479>
c0002ac3:	8d 75 54             	lea    esi,[ebp+0x54]
c0002ac6:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002aca:	e8 a9 f0 ff ff       	call   c0001b78 <ld_dword>
c0002acf:	89 c3                	mov    ebx,eax
c0002ad1:	83 f8 01             	cmp    eax,0x1
c0002ad4:	0f 86 e9 fb ff ff    	jbe    c00026c3 <mount_volume+0xc8>
c0002ada:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002add:	0f 86 e0 fb ff ff    	jbe    c00026c3 <mount_volume+0xc8>
c0002ae3:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ae6:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002aea:	0f af c2             	imul   eax,edx
c0002aed:	31 d2                	xor    edx,edx
c0002aef:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002af2:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002af5:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002af8:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002afb:	31 c9                	xor    ecx,ecx
c0002afd:	89 da                	mov    edx,ebx
c0002aff:	89 e8                	mov    eax,ebp
c0002b01:	c1 ea 07             	shr    edx,0x7
c0002b04:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002b07:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002b0a:	e8 3a f8 ff ff       	call   c0002349 <move_window>
c0002b0f:	85 c0                	test   eax,eax
c0002b11:	0f 85 9d fb ff ff    	jne    c00026b4 <mount_volume+0xb9>
c0002b17:	89 d8                	mov    eax,ebx
c0002b19:	83 e0 7f             	and    eax,0x7f
c0002b1c:	8d 04 86             	lea    eax,[esi+eax*4]
c0002b1f:	e8 54 f0 ff ff       	call   c0001b78 <ld_dword>
c0002b24:	83 f8 ff             	cmp    eax,0xffffffff
c0002b27:	74 0a                	je     c0002b33 <mount_volume+0x538>
c0002b29:	43                   	inc    ebx
c0002b2a:	39 d8                	cmp    eax,ebx
c0002b2c:	74 cd                	je     c0002afb <mount_volume+0x500>
c0002b2e:	e9 90 fb ff ff       	jmp    c00026c3 <mount_volume+0xc8>
c0002b33:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002b3a:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002b41:	bb 04 00 00 00       	mov    ebx,0x4
c0002b46:	e9 e8 fd ff ff       	jmp    c0002933 <mount_volume+0x338>
c0002b4b:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002b50:	19 db                	sbb    ebx,ebx
c0002b52:	83 c3 02             	add    ebx,0x2
c0002b55:	e9 93 fc ff ff       	jmp    c00027ed <mount_volume+0x1f2>
c0002b5a:	83 c4 3c             	add    esp,0x3c
c0002b5d:	89 d8                	mov    eax,ebx
c0002b5f:	5b                   	pop    ebx
c0002b60:	5e                   	pop    esi
c0002b61:	5f                   	pop    edi
c0002b62:	5d                   	pop    ebp
c0002b63:	c3                   	ret    

c0002b64 <find_bitmap>:
c0002b64:	55                   	push   ebp
c0002b65:	57                   	push   edi
c0002b66:	89 c7                	mov    edi,eax
c0002b68:	56                   	push   esi
c0002b69:	8d 72 fe             	lea    esi,[edx-0x2]
c0002b6c:	53                   	push   ebx
c0002b6d:	83 ec 1c             	sub    esp,0x1c
c0002b70:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002b73:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002b77:	83 e8 02             	sub    eax,0x2
c0002b7a:	39 f0                	cmp    eax,esi
c0002b7c:	77 02                	ja     c0002b80 <find_bitmap+0x1c>
c0002b7e:	31 f6                	xor    esi,esi
c0002b80:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002b84:	89 f3                	mov    ebx,esi
c0002b86:	31 ed                	xor    ebp,ebp
c0002b88:	31 c9                	xor    ecx,ecx
c0002b8a:	89 da                	mov    edx,ebx
c0002b8c:	89 f8                	mov    eax,edi
c0002b8e:	c1 ea 0c             	shr    edx,0xc
c0002b91:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002b94:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002b97:	e8 ad f7 ff ff       	call   c0002349 <move_window>
c0002b9c:	85 c0                	test   eax,eax
c0002b9e:	75 68                	jne    c0002c08 <find_bitmap+0xa4>
c0002ba0:	89 da                	mov    edx,ebx
c0002ba2:	89 d9                	mov    ecx,ebx
c0002ba4:	c1 ea 03             	shr    edx,0x3
c0002ba7:	83 e1 07             	and    ecx,0x7
c0002baa:	b8 01 00 00 00       	mov    eax,0x1
c0002baf:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002bb5:	d3 e0                	shl    eax,cl
c0002bb7:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002bba:	83 e9 02             	sub    ecx,0x2
c0002bbd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002bc1:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002bc5:	43                   	inc    ebx
c0002bc6:	21 c1                	and    ecx,eax
c0002bc8:	d1 e0                	shl    eax,1
c0002bca:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002bce:	77 09                	ja     c0002bd9 <find_bitmap+0x75>
c0002bd0:	31 db                	xor    ebx,ebx
c0002bd2:	ba 00 02 00 00       	mov    edx,0x200
c0002bd7:	31 c0                	xor    eax,eax
c0002bd9:	84 c9                	test   cl,cl
c0002bdb:	75 10                	jne    c0002bed <find_bitmap+0x89>
c0002bdd:	45                   	inc    ebp
c0002bde:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002be2:	75 0f                	jne    c0002bf3 <find_bitmap+0x8f>
c0002be4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002be8:	83 c0 02             	add    eax,0x2
c0002beb:	eb 22                	jmp    c0002c0f <find_bitmap+0xab>
c0002bed:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002bf1:	31 ed                	xor    ebp,ebp
c0002bf3:	39 de                	cmp    esi,ebx
c0002bf5:	74 16                	je     c0002c0d <find_bitmap+0xa9>
c0002bf7:	84 c0                	test   al,al
c0002bf9:	75 c6                	jne    c0002bc1 <find_bitmap+0x5d>
c0002bfb:	42                   	inc    edx
c0002bfc:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002c02:	77 84                	ja     c0002b88 <find_bitmap+0x24>
c0002c04:	b0 01                	mov    al,0x1
c0002c06:	eb b9                	jmp    c0002bc1 <find_bitmap+0x5d>
c0002c08:	83 c8 ff             	or     eax,0xffffffff
c0002c0b:	eb 02                	jmp    c0002c0f <find_bitmap+0xab>
c0002c0d:	31 c0                	xor    eax,eax
c0002c0f:	83 c4 1c             	add    esp,0x1c
c0002c12:	5b                   	pop    ebx
c0002c13:	5e                   	pop    esi
c0002c14:	5f                   	pop    edi
c0002c15:	5d                   	pop    ebp
c0002c16:	c3                   	ret    

c0002c17 <change_bitmap>:
c0002c17:	55                   	push   ebp
c0002c18:	89 cd                	mov    ebp,ecx
c0002c1a:	57                   	push   edi
c0002c1b:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002c1e:	56                   	push   esi
c0002c1f:	89 c7                	mov    edi,eax
c0002c21:	53                   	push   ebx
c0002c22:	89 c8                	mov    eax,ecx
c0002c24:	83 ec 1c             	sub    esp,0x1c
c0002c27:	31 d2                	xor    edx,edx
c0002c29:	89 ce                	mov    esi,ecx
c0002c2b:	c1 e8 0c             	shr    eax,0xc
c0002c2e:	bb 01 00 00 00       	mov    ebx,0x1
c0002c33:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002c36:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002c39:	c1 ee 03             	shr    esi,0x3
c0002c3c:	83 e1 07             	and    ecx,0x7
c0002c3f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002c45:	d3 e3                	shl    ebx,cl
c0002c47:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002c4b:	89 c1                	mov    ecx,eax
c0002c4d:	89 d3                	mov    ebx,edx
c0002c4f:	83 c1 01             	add    ecx,0x1
c0002c52:	83 d3 00             	adc    ebx,0x0
c0002c55:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c59:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002c5d:	89 d1                	mov    ecx,edx
c0002c5f:	89 c2                	mov    edx,eax
c0002c61:	89 f8                	mov    eax,edi
c0002c63:	e8 e1 f6 ff ff       	call   c0002349 <move_window>
c0002c68:	89 c1                	mov    ecx,eax
c0002c6a:	85 c0                	test   eax,eax
c0002c6c:	75 48                	jne    c0002cb6 <change_bitmap+0x9f>
c0002c6e:	31 d2                	xor    edx,edx
c0002c70:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002c74:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002c78:	0f 95 c2             	setne  dl
c0002c7b:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002c7f:	74 3c                	je     c0002cbd <change_bitmap+0xa6>
c0002c81:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002c85:	4d                   	dec    ebp
c0002c86:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002c8a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002c8e:	74 32                	je     c0002cc2 <change_bitmap+0xab>
c0002c90:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002c94:	75 d8                	jne    c0002c6e <change_bitmap+0x57>
c0002c96:	8d 46 01             	lea    eax,[esi+0x1]
c0002c99:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002c9e:	89 c3                	mov    ebx,eax
c0002ca0:	31 f6                	xor    esi,esi
c0002ca2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ca6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002caa:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002cb0:	74 99                	je     c0002c4b <change_bitmap+0x34>
c0002cb2:	89 de                	mov    esi,ebx
c0002cb4:	eb b8                	jmp    c0002c6e <change_bitmap+0x57>
c0002cb6:	b9 01 00 00 00       	mov    ecx,0x1
c0002cbb:	eb 05                	jmp    c0002cc2 <change_bitmap+0xab>
c0002cbd:	b9 02 00 00 00       	mov    ecx,0x2
c0002cc2:	83 c4 1c             	add    esp,0x1c
c0002cc5:	89 c8                	mov    eax,ecx
c0002cc7:	5b                   	pop    ebx
c0002cc8:	5e                   	pop    esi
c0002cc9:	5f                   	pop    edi
c0002cca:	5d                   	pop    ebp
c0002ccb:	c3                   	ret    

c0002ccc <put_fat>:
c0002ccc:	83 fa 01             	cmp    edx,0x1
c0002ccf:	0f 86 7b 01 00 00    	jbe    c0002e50 <put_fat+0x184>
c0002cd5:	55                   	push   ebp
c0002cd6:	57                   	push   edi
c0002cd7:	89 cf                	mov    edi,ecx
c0002cd9:	56                   	push   esi
c0002cda:	b9 02 00 00 00       	mov    ecx,0x2
c0002cdf:	53                   	push   ebx
c0002ce0:	89 c6                	mov    esi,eax
c0002ce2:	83 ec 1c             	sub    esp,0x1c
c0002ce5:	89 d3                	mov    ebx,edx
c0002ce7:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002cea:	0f 86 68 01 00 00    	jbe    c0002e58 <put_fat+0x18c>
c0002cf0:	8a 00                	mov    al,BYTE PTR [eax]
c0002cf2:	3c 02                	cmp    al,0x2
c0002cf4:	0f 84 c7 00 00 00    	je     c0002dc1 <put_fat+0xf5>
c0002cfa:	77 09                	ja     c0002d05 <put_fat+0x39>
c0002cfc:	fe c8                	dec    al
c0002cfe:	74 17                	je     c0002d17 <put_fat+0x4b>
c0002d00:	e9 53 01 00 00       	jmp    c0002e58 <put_fat+0x18c>
c0002d05:	b9 02 00 00 00       	mov    ecx,0x2
c0002d0a:	3c 04                	cmp    al,0x4
c0002d0c:	0f 86 e1 00 00 00    	jbe    c0002df3 <put_fat+0x127>
c0002d12:	e9 41 01 00 00       	jmp    c0002e58 <put_fat+0x18c>
c0002d17:	89 d5                	mov    ebp,edx
c0002d19:	31 c9                	xor    ecx,ecx
c0002d1b:	d1 ed                	shr    ebp,1
c0002d1d:	89 f0                	mov    eax,esi
c0002d1f:	01 d5                	add    ebp,edx
c0002d21:	89 ea                	mov    edx,ebp
c0002d23:	c1 ea 09             	shr    edx,0x9
c0002d26:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d29:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d2c:	e8 18 f6 ff ff       	call   c0002349 <move_window>
c0002d31:	89 c1                	mov    ecx,eax
c0002d33:	85 c0                	test   eax,eax
c0002d35:	0f 85 1d 01 00 00    	jne    c0002e58 <put_fat+0x18c>
c0002d3b:	8d 46 54             	lea    eax,[esi+0x54]
c0002d3e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d42:	8d 45 01             	lea    eax,[ebp+0x1]
c0002d45:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002d4f:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d53:	89 f8                	mov    eax,edi
c0002d55:	83 e3 01             	and    ebx,0x1
c0002d58:	74 0d                	je     c0002d67 <put_fat+0x9b>
c0002d5a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002d5d:	89 fa                	mov    edx,edi
c0002d5f:	83 e0 0f             	and    eax,0xf
c0002d62:	c1 e2 04             	shl    edx,0x4
c0002d65:	09 d0                	or     eax,edx
c0002d67:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002d6a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d6e:	31 c9                	xor    ecx,ecx
c0002d70:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d74:	c1 ea 09             	shr    edx,0x9
c0002d77:	89 f0                	mov    eax,esi
c0002d79:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d7c:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d7f:	e8 c5 f5 ff ff       	call   c0002349 <move_window>
c0002d84:	89 c1                	mov    ecx,eax
c0002d86:	85 c0                	test   eax,eax
c0002d88:	0f 85 ca 00 00 00    	jne    c0002e58 <put_fat+0x18c>
c0002d8e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002d92:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d98:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d9c:	85 db                	test   ebx,ebx
c0002d9e:	74 07                	je     c0002da7 <put_fat+0xdb>
c0002da0:	c1 ef 04             	shr    edi,0x4
c0002da3:	89 fa                	mov    edx,edi
c0002da5:	eb 0e                	jmp    c0002db5 <put_fat+0xe9>
c0002da7:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002daa:	c1 ef 08             	shr    edi,0x8
c0002dad:	83 e2 f0             	and    edx,0xfffffff0
c0002db0:	83 e7 0f             	and    edi,0xf
c0002db3:	09 fa                	or     edx,edi
c0002db5:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002db8:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002dbc:	e9 97 00 00 00       	jmp    c0002e58 <put_fat+0x18c>
c0002dc1:	31 c9                	xor    ecx,ecx
c0002dc3:	c1 ea 08             	shr    edx,0x8
c0002dc6:	89 f0                	mov    eax,esi
c0002dc8:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002dcb:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002dce:	e8 76 f5 ff ff       	call   c0002349 <move_window>
c0002dd3:	89 c1                	mov    ecx,eax
c0002dd5:	85 c0                	test   eax,eax
c0002dd7:	75 7f                	jne    c0002e58 <put_fat+0x18c>
c0002dd9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ddd:	01 db                	add    ebx,ebx
c0002ddf:	0f b7 d7             	movzx  edx,di
c0002de2:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002de8:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002dec:	e8 ec ed ff ff       	call   c0001bdd <st_word>
c0002df1:	eb 53                	jmp    c0002e46 <put_fat+0x17a>
c0002df3:	31 c9                	xor    ecx,ecx
c0002df5:	c1 ea 07             	shr    edx,0x7
c0002df8:	89 f0                	mov    eax,esi
c0002dfa:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002dfd:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e00:	e8 44 f5 ff ff       	call   c0002349 <move_window>
c0002e05:	89 c1                	mov    ecx,eax
c0002e07:	85 c0                	test   eax,eax
c0002e09:	75 4d                	jne    c0002e58 <put_fat+0x18c>
c0002e0b:	c1 e3 02             	shl    ebx,0x2
c0002e0e:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002e14:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002e17:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002e1b:	74 1c                	je     c0002e39 <put_fat+0x16d>
c0002e1d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e21:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002e27:	89 d8                	mov    eax,ebx
c0002e29:	e8 4a ed ff ff       	call   c0001b78 <ld_dword>
c0002e2e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e32:	25 00 00 00 f0       	and    eax,0xf0000000
c0002e37:	09 c7                	or     edi,eax
c0002e39:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002e3d:	89 fa                	mov    edx,edi
c0002e3f:	89 d8                	mov    eax,ebx
c0002e41:	e8 9b ed ff ff       	call   c0001be1 <st_dword>
c0002e46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e4a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e4e:	eb 08                	jmp    c0002e58 <put_fat+0x18c>
c0002e50:	b9 02 00 00 00       	mov    ecx,0x2
c0002e55:	89 c8                	mov    eax,ecx
c0002e57:	c3                   	ret    
c0002e58:	83 c4 1c             	add    esp,0x1c
c0002e5b:	89 c8                	mov    eax,ecx
c0002e5d:	5b                   	pop    ebx
c0002e5e:	5e                   	pop    esi
c0002e5f:	5f                   	pop    edi
c0002e60:	5d                   	pop    ebp
c0002e61:	c3                   	ret    

c0002e62 <fill_last_frag>:
c0002e62:	57                   	push   edi
c0002e63:	89 cf                	mov    edi,ecx
c0002e65:	56                   	push   esi
c0002e66:	89 d6                	mov    esi,edx
c0002e68:	53                   	push   ebx
c0002e69:	89 c3                	mov    ebx,eax
c0002e6b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002e6e:	85 c0                	test   eax,eax
c0002e70:	74 21                	je     c0002e93 <fill_last_frag+0x31>
c0002e72:	89 f9                	mov    ecx,edi
c0002e74:	83 f8 01             	cmp    eax,0x1
c0002e77:	76 05                	jbe    c0002e7e <fill_last_frag+0x1c>
c0002e79:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002e7c:	29 c1                	sub    ecx,eax
c0002e7e:	8d 56 01             	lea    edx,[esi+0x1]
c0002e81:	29 c2                	sub    edx,eax
c0002e83:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002e85:	e8 42 fe ff ff       	call   c0002ccc <put_fat>
c0002e8a:	85 c0                	test   eax,eax
c0002e8c:	75 05                	jne    c0002e93 <fill_last_frag+0x31>
c0002e8e:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002e91:	eb d8                	jmp    c0002e6b <fill_last_frag+0x9>
c0002e93:	5b                   	pop    ebx
c0002e94:	5e                   	pop    esi
c0002e95:	5f                   	pop    edi
c0002e96:	c3                   	ret    

c0002e97 <fill_first_frag>:
c0002e97:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002e9b:	75 2d                	jne    c0002eca <fill_first_frag+0x33>
c0002e9d:	57                   	push   edi
c0002e9e:	56                   	push   esi
c0002e9f:	53                   	push   ebx
c0002ea0:	89 c3                	mov    ebx,eax
c0002ea2:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002ea5:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002ea8:	01 d7                	add    edi,edx
c0002eaa:	39 fa                	cmp    edx,edi
c0002eac:	74 14                	je     c0002ec2 <fill_first_frag+0x2b>
c0002eae:	8d 72 01             	lea    esi,[edx+0x1]
c0002eb1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002eb3:	89 f1                	mov    ecx,esi
c0002eb5:	e8 12 fe ff ff       	call   c0002ccc <put_fat>
c0002eba:	89 f2                	mov    edx,esi
c0002ebc:	85 c0                	test   eax,eax
c0002ebe:	74 ea                	je     c0002eaa <fill_first_frag+0x13>
c0002ec0:	eb 0b                	jmp    c0002ecd <fill_first_frag+0x36>
c0002ec2:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002ec6:	31 c0                	xor    eax,eax
c0002ec8:	eb 03                	jmp    c0002ecd <fill_first_frag+0x36>
c0002eca:	31 c0                	xor    eax,eax
c0002ecc:	c3                   	ret    
c0002ecd:	5b                   	pop    ebx
c0002ece:	5e                   	pop    esi
c0002ecf:	5f                   	pop    edi
c0002ed0:	c3                   	ret    

c0002ed1 <get_fat>:
c0002ed1:	83 fa 01             	cmp    edx,0x1
c0002ed4:	0f 86 db 01 00 00    	jbe    c00030b5 <get_fat+0x1e4>
c0002eda:	55                   	push   ebp
c0002edb:	b9 01 00 00 00       	mov    ecx,0x1
c0002ee0:	57                   	push   edi
c0002ee1:	56                   	push   esi
c0002ee2:	53                   	push   ebx
c0002ee3:	83 ec 1c             	sub    esp,0x1c
c0002ee6:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ee8:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002eeb:	0f 86 cc 01 00 00    	jbe    c00030bd <get_fat+0x1ec>
c0002ef1:	89 c3                	mov    ebx,eax
c0002ef3:	89 d6                	mov    esi,edx
c0002ef5:	8a 07                	mov    al,BYTE PTR [edi]
c0002ef7:	3c 02                	cmp    al,0x2
c0002ef9:	0f 84 99 00 00 00    	je     c0002f98 <get_fat+0xc7>
c0002eff:	77 09                	ja     c0002f0a <get_fat+0x39>
c0002f01:	fe c8                	dec    al
c0002f03:	74 1a                	je     c0002f1f <get_fat+0x4e>
c0002f05:	e9 b3 01 00 00       	jmp    c00030bd <get_fat+0x1ec>
c0002f0a:	3c 03                	cmp    al,0x3
c0002f0c:	0f 84 b5 00 00 00    	je     c0002fc7 <get_fat+0xf6>
c0002f12:	3c 04                	cmp    al,0x4
c0002f14:	0f 84 e3 00 00 00    	je     c0002ffd <get_fat+0x12c>
c0002f1a:	e9 9e 01 00 00       	jmp    c00030bd <get_fat+0x1ec>
c0002f1f:	89 d3                	mov    ebx,edx
c0002f21:	31 c9                	xor    ecx,ecx
c0002f23:	d1 eb                	shr    ebx,1
c0002f25:	89 f8                	mov    eax,edi
c0002f27:	01 d3                	add    ebx,edx
c0002f29:	89 da                	mov    edx,ebx
c0002f2b:	c1 ea 09             	shr    edx,0x9
c0002f2e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f31:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f34:	e8 10 f4 ff ff       	call   c0002349 <move_window>
c0002f39:	85 c0                	test   eax,eax
c0002f3b:	74 08                	je     c0002f45 <get_fat+0x74>
c0002f3d:	83 c9 ff             	or     ecx,0xffffffff
c0002f40:	e9 78 01 00 00       	jmp    c00030bd <get_fat+0x1ec>
c0002f45:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002f48:	31 c9                	xor    ecx,ecx
c0002f4a:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002f50:	89 ea                	mov    edx,ebp
c0002f52:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002f56:	c1 ea 09             	shr    edx,0x9
c0002f59:	89 f8                	mov    eax,edi
c0002f5b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f5e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f61:	e8 e3 f3 ff ff       	call   c0002349 <move_window>
c0002f66:	85 c0                	test   eax,eax
c0002f68:	75 d3                	jne    c0002f3d <get_fat+0x6c>
c0002f6a:	0f b6 c3             	movzx  eax,bl
c0002f6d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002f73:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002f78:	c1 e3 08             	shl    ebx,0x8
c0002f7b:	09 c3                	or     ebx,eax
c0002f7d:	89 d9                	mov    ecx,ebx
c0002f7f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002f85:	83 e6 01             	and    esi,0x1
c0002f88:	0f 84 2f 01 00 00    	je     c00030bd <get_fat+0x1ec>
c0002f8e:	89 d9                	mov    ecx,ebx
c0002f90:	c1 e9 04             	shr    ecx,0x4
c0002f93:	e9 25 01 00 00       	jmp    c00030bd <get_fat+0x1ec>
c0002f98:	31 c9                	xor    ecx,ecx
c0002f9a:	c1 ea 08             	shr    edx,0x8
c0002f9d:	89 f8                	mov    eax,edi
c0002f9f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fa2:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002fa5:	e8 9f f3 ff ff       	call   c0002349 <move_window>
c0002faa:	85 c0                	test   eax,eax
c0002fac:	75 8f                	jne    c0002f3d <get_fat+0x6c>
c0002fae:	01 f6                	add    esi,esi
c0002fb0:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002fb6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fba:	e8 ac eb ff ff       	call   c0001b6b <ld_word>
c0002fbf:	0f b7 c8             	movzx  ecx,ax
c0002fc2:	e9 f6 00 00 00       	jmp    c00030bd <get_fat+0x1ec>
c0002fc7:	31 c9                	xor    ecx,ecx
c0002fc9:	c1 ea 07             	shr    edx,0x7
c0002fcc:	89 f8                	mov    eax,edi
c0002fce:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fd1:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002fd4:	e8 70 f3 ff ff       	call   c0002349 <move_window>
c0002fd9:	85 c0                	test   eax,eax
c0002fdb:	0f 85 5c ff ff ff    	jne    c0002f3d <get_fat+0x6c>
c0002fe1:	c1 e6 02             	shl    esi,0x2
c0002fe4:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002fea:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fee:	e8 85 eb ff ff       	call   c0001b78 <ld_dword>
c0002ff3:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002ff8:	e9 b4 00 00 00       	jmp    c00030b1 <get_fat+0x1e0>
c0002ffd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003000:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003003:	89 d1                	mov    ecx,edx
c0003005:	09 c1                	or     ecx,eax
c0003007:	74 06                	je     c000300f <get_fat+0x13e>
c0003009:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000300d:	75 0f                	jne    c000301e <get_fat+0x14d>
c000300f:	b9 01 00 00 00       	mov    ecx,0x1
c0003014:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003018:	0f 85 9f 00 00 00    	jne    c00030bd <get_fat+0x1ec>
c000301e:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003022:	89 f5                	mov    ebp,esi
c0003024:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003029:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c000302c:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c000302f:	80 f9 02             	cmp    cl,0x2
c0003032:	75 35                	jne    c0003069 <get_fat+0x198>
c0003034:	83 c0 ff             	add    eax,0xffffffff
c0003037:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c000303c:	83 d2 ff             	adc    edx,0xffffffff
c000303f:	31 db                	xor    ebx,ebx
c0003041:	0f ac d0 09          	shrd   eax,edx,0x9
c0003045:	53                   	push   ebx
c0003046:	c1 ea 09             	shr    edx,0x9
c0003049:	51                   	push   ecx
c000304a:	52                   	push   edx
c000304b:	50                   	push   eax
c000304c:	e8 8f ff 01 00       	call   c0022fe0 <__udivdi3>
c0003051:	83 c4 10             	add    esp,0x10
c0003054:	b9 01 00 00 00       	mov    ecx,0x1
c0003059:	39 c5                	cmp    ebp,eax
c000305b:	77 60                	ja     c00030bd <get_fat+0x1ec>
c000305d:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003062:	74 59                	je     c00030bd <get_fat+0x1ec>
c0003064:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003067:	eb 54                	jmp    c00030bd <get_fat+0x1ec>
c0003069:	80 f9 03             	cmp    cl,0x3
c000306c:	75 05                	jne    c0003073 <get_fat+0x1a2>
c000306e:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003071:	77 f1                	ja     c0003064 <get_fat+0x193>
c0003073:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003078:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c000307c:	75 3f                	jne    c00030bd <get_fat+0x1ec>
c000307e:	31 c9                	xor    ecx,ecx
c0003080:	89 f2                	mov    edx,esi
c0003082:	89 f8                	mov    eax,edi
c0003084:	c1 ea 07             	shr    edx,0x7
c0003087:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000308d:	e8 b7 f2 ff ff       	call   c0002349 <move_window>
c0003092:	85 c0                	test   eax,eax
c0003094:	0f 85 a3 fe ff ff    	jne    c0002f3d <get_fat+0x6c>
c000309a:	c1 e6 02             	shl    esi,0x2
c000309d:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a3:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030a7:	e8 cc ea ff ff       	call   c0001b78 <ld_dword>
c00030ac:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00030b1:	89 c1                	mov    ecx,eax
c00030b3:	eb 08                	jmp    c00030bd <get_fat+0x1ec>
c00030b5:	b9 01 00 00 00       	mov    ecx,0x1
c00030ba:	89 c8                	mov    eax,ecx
c00030bc:	c3                   	ret    
c00030bd:	83 c4 1c             	add    esp,0x1c
c00030c0:	89 c8                	mov    eax,ecx
c00030c2:	5b                   	pop    ebx
c00030c3:	5e                   	pop    esi
c00030c4:	5f                   	pop    edi
c00030c5:	5d                   	pop    ebp
c00030c6:	c3                   	ret    

c00030c7 <dir_sdi>:
c00030c7:	55                   	push   ebp
c00030c8:	57                   	push   edi
c00030c9:	56                   	push   esi
c00030ca:	53                   	push   ebx
c00030cb:	89 c3                	mov    ebx,eax
c00030cd:	83 ec 1c             	sub    esp,0x1c
c00030d0:	8b 38                	mov    edi,DWORD PTR [eax]
c00030d2:	31 c0                	xor    eax,eax
c00030d4:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00030d7:	0f 94 c0             	sete   al
c00030da:	48                   	dec    eax
c00030db:	25 00 00 20 f0       	and    eax,0xf0200000
c00030e0:	05 00 00 00 10       	add    eax,0x10000000
c00030e5:	39 d0                	cmp    eax,edx
c00030e7:	77 0a                	ja     c00030f3 <dir_sdi+0x2c>
c00030e9:	b8 02 00 00 00       	mov    eax,0x2
c00030ee:	e9 c4 00 00 00       	jmp    c00031b7 <dir_sdi+0xf0>
c00030f3:	89 d6                	mov    esi,edx
c00030f5:	f6 c2 1f             	test   dl,0x1f
c00030f8:	75 ef                	jne    c00030e9 <dir_sdi+0x22>
c00030fa:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00030fd:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0003100:	85 c9                	test   ecx,ecx
c0003102:	75 2d                	jne    c0003131 <dir_sdi+0x6a>
c0003104:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003107:	77 1b                	ja     c0003124 <dir_sdi+0x5d>
c0003109:	89 f2                	mov    edx,esi
c000310b:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000310f:	c1 ea 05             	shr    edx,0x5
c0003112:	39 c2                	cmp    edx,eax
c0003114:	73 d3                	jae    c00030e9 <dir_sdi+0x22>
c0003116:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003119:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c000311c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000311f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003122:	eb 4b                	jmp    c000316f <dir_sdi+0xa8>
c0003124:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003127:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c000312b:	85 c0                	test   eax,eax
c000312d:	74 da                	je     c0003109 <dir_sdi+0x42>
c000312f:	89 c1                	mov    ecx,eax
c0003131:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003135:	c1 e5 09             	shl    ebp,0x9
c0003138:	89 ca                	mov    edx,ecx
c000313a:	39 ee                	cmp    esi,ebp
c000313c:	72 1c                	jb     c000315a <dir_sdi+0x93>
c000313e:	89 d8                	mov    eax,ebx
c0003140:	e8 8c fd ff ff       	call   c0002ed1 <get_fat>
c0003145:	89 c1                	mov    ecx,eax
c0003147:	83 f8 ff             	cmp    eax,0xffffffff
c000314a:	74 66                	je     c00031b2 <dir_sdi+0xeb>
c000314c:	83 f8 01             	cmp    eax,0x1
c000314f:	76 98                	jbe    c00030e9 <dir_sdi+0x22>
c0003151:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003154:	76 93                	jbe    c00030e9 <dir_sdi+0x22>
c0003156:	29 ee                	sub    esi,ebp
c0003158:	eb de                	jmp    c0003138 <dir_sdi+0x71>
c000315a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000315e:	89 f8                	mov    eax,edi
c0003160:	e8 9f ec ff ff       	call   c0001e04 <clst2sect>
c0003165:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003169:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000316c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000316f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003172:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003175:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003178:	89 d1                	mov    ecx,edx
c000317a:	09 c1                	or     ecx,eax
c000317c:	0f 84 67 ff ff ff    	je     c00030e9 <dir_sdi+0x22>
c0003182:	89 f1                	mov    ecx,esi
c0003184:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000318c:	c1 e9 09             	shr    ecx,0x9
c000318f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003193:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003197:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000319b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000319e:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00031a4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031a7:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00031ab:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00031ae:	31 c0                	xor    eax,eax
c00031b0:	eb 05                	jmp    c00031b7 <dir_sdi+0xf0>
c00031b2:	b8 01 00 00 00       	mov    eax,0x1
c00031b7:	83 c4 1c             	add    esp,0x1c
c00031ba:	5b                   	pop    ebx
c00031bb:	5e                   	pop    esi
c00031bc:	5f                   	pop    edi
c00031bd:	5d                   	pop    ebp
c00031be:	c3                   	ret    

c00031bf <create_chain>:
c00031bf:	55                   	push   ebp
c00031c0:	89 c5                	mov    ebp,eax
c00031c2:	57                   	push   edi
c00031c3:	56                   	push   esi
c00031c4:	53                   	push   ebx
c00031c5:	83 ec 1c             	sub    esp,0x1c
c00031c8:	85 d2                	test   edx,edx
c00031ca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00031ce:	8b 30                	mov    esi,DWORD PTR [eax]
c00031d0:	75 0e                	jne    c00031e0 <create_chain+0x21>
c00031d2:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00031d5:	85 ff                	test   edi,edi
c00031d7:	74 39                	je     c0003212 <create_chain+0x53>
c00031d9:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00031dc:	77 39                	ja     c0003217 <create_chain+0x58>
c00031de:	eb 32                	jmp    c0003212 <create_chain+0x53>
c00031e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031e4:	e8 e8 fc ff ff       	call   c0002ed1 <get_fat>
c00031e9:	89 c3                	mov    ebx,eax
c00031eb:	83 f8 01             	cmp    eax,0x1
c00031ee:	77 0a                	ja     c00031fa <create_chain+0x3b>
c00031f0:	bb 01 00 00 00       	mov    ebx,0x1
c00031f5:	e9 ba 01 00 00       	jmp    c00033b4 <create_chain+0x1f5>
c00031fa:	83 f8 ff             	cmp    eax,0xffffffff
c00031fd:	0f 84 62 01 00 00    	je     c0003365 <create_chain+0x1a6>
c0003203:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003206:	0f 87 a8 01 00 00    	ja     c00033b4 <create_chain+0x1f5>
c000320c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003210:	eb 05                	jmp    c0003217 <create_chain+0x58>
c0003212:	bf 01 00 00 00       	mov    edi,0x1
c0003217:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000321b:	75 07                	jne    c0003224 <create_chain+0x65>
c000321d:	31 db                	xor    ebx,ebx
c000321f:	e9 90 01 00 00       	jmp    c00033b4 <create_chain+0x1f5>
c0003224:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003227:	75 74                	jne    c000329d <create_chain+0xde>
c0003229:	b9 01 00 00 00       	mov    ecx,0x1
c000322e:	89 fa                	mov    edx,edi
c0003230:	89 f0                	mov    eax,esi
c0003232:	e8 2d f9 ff ff       	call   c0002b64 <find_bitmap>
c0003237:	89 c3                	mov    ebx,eax
c0003239:	8d 40 ff             	lea    eax,[eax-0x1]
c000323c:	83 f8 fd             	cmp    eax,0xfffffffd
c000323f:	0f 87 6f 01 00 00    	ja     c00033b4 <create_chain+0x1f5>
c0003245:	83 ec 0c             	sub    esp,0xc
c0003248:	b9 01 00 00 00       	mov    ecx,0x1
c000324d:	6a 01                	push   0x1
c000324f:	89 da                	mov    edx,ebx
c0003251:	89 f0                	mov    eax,esi
c0003253:	e8 bf f9 ff ff       	call   c0002c17 <change_bitmap>
c0003258:	83 c4 10             	add    esp,0x10
c000325b:	83 f8 02             	cmp    eax,0x2
c000325e:	74 90                	je     c00031f0 <create_chain+0x31>
c0003260:	83 f8 01             	cmp    eax,0x1
c0003263:	0f 84 fc 00 00 00    	je     c0003365 <create_chain+0x1a6>
c0003269:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000326e:	75 09                	jne    c0003279 <create_chain+0xba>
c0003270:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003274:	e9 0c 01 00 00       	jmp    c0003385 <create_chain+0x1c6>
c0003279:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000327d:	0f 85 e7 00 00 00    	jne    c000336a <create_chain+0x1ab>
c0003283:	8d 57 01             	lea    edx,[edi+0x1]
c0003286:	39 da                	cmp    edx,ebx
c0003288:	0f 84 f7 00 00 00    	je     c0003385 <create_chain+0x1c6>
c000328e:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003291:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003295:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003298:	e9 cd 00 00 00       	jmp    c000336a <create_chain+0x1ab>
c000329d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00032a1:	75 41                	jne    c00032e4 <create_chain+0x125>
c00032a3:	8d 5f 01             	lea    ebx,[edi+0x1]
c00032a6:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00032a9:	77 05                	ja     c00032b0 <create_chain+0xf1>
c00032ab:	bb 02 00 00 00       	mov    ebx,0x2
c00032b0:	89 da                	mov    edx,ebx
c00032b2:	89 e8                	mov    eax,ebp
c00032b4:	e8 18 fc ff ff       	call   c0002ed1 <get_fat>
c00032b9:	83 f8 01             	cmp    eax,0x1
c00032bc:	0f 84 2e ff ff ff    	je     c00031f0 <create_chain+0x31>
c00032c2:	83 f8 ff             	cmp    eax,0xffffffff
c00032c5:	0f 84 9a 00 00 00    	je     c0003365 <create_chain+0x1a6>
c00032cb:	85 c0                	test   eax,eax
c00032cd:	74 11                	je     c00032e0 <create_chain+0x121>
c00032cf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00032d2:	83 f8 01             	cmp    eax,0x1
c00032d5:	76 0d                	jbe    c00032e4 <create_chain+0x125>
c00032d7:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032da:	76 08                	jbe    c00032e4 <create_chain+0x125>
c00032dc:	89 c7                	mov    edi,eax
c00032de:	eb 04                	jmp    c00032e4 <create_chain+0x125>
c00032e0:	85 db                	test   ebx,ebx
c00032e2:	75 38                	jne    c000331c <create_chain+0x15d>
c00032e4:	89 fb                	mov    ebx,edi
c00032e6:	43                   	inc    ebx
c00032e7:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00032ea:	77 0e                	ja     c00032fa <create_chain+0x13b>
c00032ec:	83 ff 01             	cmp    edi,0x1
c00032ef:	0f 86 28 ff ff ff    	jbe    c000321d <create_chain+0x5e>
c00032f5:	bb 02 00 00 00       	mov    ebx,0x2
c00032fa:	89 da                	mov    edx,ebx
c00032fc:	89 e8                	mov    eax,ebp
c00032fe:	e8 ce fb ff ff       	call   c0002ed1 <get_fat>
c0003303:	85 c0                	test   eax,eax
c0003305:	74 15                	je     c000331c <create_chain+0x15d>
c0003307:	83 f8 01             	cmp    eax,0x1
c000330a:	0f 84 e0 fe ff ff    	je     c00031f0 <create_chain+0x31>
c0003310:	40                   	inc    eax
c0003311:	74 52                	je     c0003365 <create_chain+0x1a6>
c0003313:	39 fb                	cmp    ebx,edi
c0003315:	75 cf                	jne    c00032e6 <create_chain+0x127>
c0003317:	e9 01 ff ff ff       	jmp    c000321d <create_chain+0x5e>
c000331c:	83 c9 ff             	or     ecx,0xffffffff
c000331f:	89 da                	mov    edx,ebx
c0003321:	89 f0                	mov    eax,esi
c0003323:	e8 a4 f9 ff ff       	call   c0002ccc <put_fat>
c0003328:	85 c0                	test   eax,eax
c000332a:	75 32                	jne    c000335e <create_chain+0x19f>
c000332c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003331:	74 11                	je     c0003344 <create_chain+0x185>
c0003333:	89 d9                	mov    ecx,ebx
c0003335:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003339:	89 f0                	mov    eax,esi
c000333b:	e8 8c f9 ff ff       	call   c0002ccc <put_fat>
c0003340:	85 c0                	test   eax,eax
c0003342:	75 1a                	jne    c000335e <create_chain+0x19f>
c0003344:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003347:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000334a:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000334d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003350:	39 d0                	cmp    eax,edx
c0003352:	77 04                	ja     c0003358 <create_chain+0x199>
c0003354:	48                   	dec    eax
c0003355:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003358:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000335c:	eb 56                	jmp    c00033b4 <create_chain+0x1f5>
c000335e:	48                   	dec    eax
c000335f:	0f 85 8b fe ff ff    	jne    c00031f0 <create_chain+0x31>
c0003365:	83 cb ff             	or     ebx,0xffffffff
c0003368:	eb 4a                	jmp    c00033b4 <create_chain+0x1f5>
c000336a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000336e:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003371:	41                   	inc    ecx
c0003372:	39 d9                	cmp    ecx,ebx
c0003374:	75 19                	jne    c000338f <create_chain+0x1d0>
c0003376:	b9 02 00 00 00       	mov    ecx,0x2
c000337b:	85 d2                	test   edx,edx
c000337d:	74 03                	je     c0003382 <create_chain+0x1c3>
c000337f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003382:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003385:	85 c0                	test   eax,eax
c0003387:	0f 85 63 fe ff ff    	jne    c00031f0 <create_chain+0x31>
c000338d:	eb b5                	jmp    c0003344 <create_chain+0x185>
c000338f:	85 d2                	test   edx,edx
c0003391:	75 07                	jne    c000339a <create_chain+0x1db>
c0003393:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000339a:	89 d9                	mov    ecx,ebx
c000339c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033a0:	89 e8                	mov    eax,ebp
c00033a2:	e8 bb fa ff ff       	call   c0002e62 <fill_last_frag>
c00033a7:	85 c0                	test   eax,eax
c00033a9:	75 b3                	jne    c000335e <create_chain+0x19f>
c00033ab:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00033b2:	eb 90                	jmp    c0003344 <create_chain+0x185>
c00033b4:	83 c4 1c             	add    esp,0x1c
c00033b7:	89 d8                	mov    eax,ebx
c00033b9:	5b                   	pop    ebx
c00033ba:	5e                   	pop    esi
c00033bb:	5f                   	pop    edi
c00033bc:	5d                   	pop    ebp
c00033bd:	c3                   	ret    

c00033be <remove_chain>:
c00033be:	55                   	push   ebp
c00033bf:	57                   	push   edi
c00033c0:	56                   	push   esi
c00033c1:	53                   	push   ebx
c00033c2:	83 ec 1c             	sub    esp,0x1c
c00033c5:	83 fa 01             	cmp    edx,0x1
c00033c8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00033cc:	8b 18                	mov    ebx,DWORD PTR [eax]
c00033ce:	77 0a                	ja     c00033da <remove_chain+0x1c>
c00033d0:	b8 02 00 00 00       	mov    eax,0x2
c00033d5:	e9 24 01 00 00       	jmp    c00034fe <remove_chain+0x140>
c00033da:	89 d6                	mov    esi,edx
c00033dc:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00033df:	76 ef                	jbe    c00033d0 <remove_chain+0x12>
c00033e1:	89 c7                	mov    edi,eax
c00033e3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033e8:	75 06                	jne    c00033f0 <remove_chain+0x32>
c00033ea:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00033ee:	eb 54                	jmp    c0003444 <remove_chain+0x86>
c00033f0:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00033f3:	75 06                	jne    c00033fb <remove_chain+0x3d>
c00033f5:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00033f9:	74 ef                	je     c00033ea <remove_chain+0x2c>
c00033fb:	83 c9 ff             	or     ecx,0xffffffff
c00033fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003402:	89 d8                	mov    eax,ebx
c0003404:	e8 c3 f8 ff ff       	call   c0002ccc <put_fat>
c0003409:	85 c0                	test   eax,eax
c000340b:	74 dd                	je     c00033ea <remove_chain+0x2c>
c000340d:	e9 ec 00 00 00       	jmp    c00034fe <remove_chain+0x140>
c0003412:	83 f8 01             	cmp    eax,0x1
c0003415:	74 b9                	je     c00033d0 <remove_chain+0x12>
c0003417:	83 f8 ff             	cmp    eax,0xffffffff
c000341a:	74 6d                	je     c0003489 <remove_chain+0xcb>
c000341c:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000341f:	75 6f                	jne    c0003490 <remove_chain+0xd2>
c0003421:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003424:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003427:	8d 51 fe             	lea    edx,[ecx-0x2]
c000342a:	39 d0                	cmp    eax,edx
c000342c:	73 08                	jae    c0003436 <remove_chain+0x78>
c000342e:	40                   	inc    eax
c000342f:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003433:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003436:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003439:	39 e9                	cmp    ecx,ebp
c000343b:	75 64                	jne    c00034a1 <remove_chain+0xe3>
c000343d:	89 ee                	mov    esi,ebp
c000343f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003442:	76 0f                	jbe    c0003453 <remove_chain+0x95>
c0003444:	89 f2                	mov    edx,esi
c0003446:	89 f8                	mov    eax,edi
c0003448:	e8 84 fa ff ff       	call   c0002ed1 <get_fat>
c000344d:	89 c5                	mov    ebp,eax
c000344f:	85 c0                	test   eax,eax
c0003451:	75 bf                	jne    c0003412 <remove_chain+0x54>
c0003453:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003456:	0f 85 a0 00 00 00    	jne    c00034fc <remove_chain+0x13e>
c000345c:	eb 6c                	jmp    c00034ca <remove_chain+0x10c>
c000345e:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003461:	84 c0                	test   al,al
c0003463:	75 7d                	jne    c00034e2 <remove_chain+0x124>
c0003465:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003468:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000346c:	0f 84 86 00 00 00    	je     c00034f8 <remove_chain+0x13a>
c0003472:	89 da                	mov    edx,ebx
c0003474:	89 f8                	mov    eax,edi
c0003476:	e8 56 fa ff ff       	call   c0002ed1 <get_fat>
c000347b:	83 f8 01             	cmp    eax,0x1
c000347e:	0f 86 4c ff ff ff    	jbe    c00033d0 <remove_chain+0x12>
c0003484:	83 f8 ff             	cmp    eax,0xffffffff
c0003487:	75 4e                	jne    c00034d7 <remove_chain+0x119>
c0003489:	b8 01 00 00 00       	mov    eax,0x1
c000348e:	eb 6e                	jmp    c00034fe <remove_chain+0x140>
c0003490:	31 c9                	xor    ecx,ecx
c0003492:	89 f2                	mov    edx,esi
c0003494:	89 d8                	mov    eax,ebx
c0003496:	e8 31 f8 ff ff       	call   c0002ccc <put_fat>
c000349b:	85 c0                	test   eax,eax
c000349d:	74 82                	je     c0003421 <remove_chain+0x63>
c000349f:	eb 5d                	jmp    c00034fe <remove_chain+0x140>
c00034a1:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034a4:	75 1b                	jne    c00034c1 <remove_chain+0x103>
c00034a6:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00034aa:	89 d8                	mov    eax,ebx
c00034ac:	83 ec 0c             	sub    esp,0xc
c00034af:	6a 00                	push   0x0
c00034b1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00034b5:	e8 5d f7 ff ff       	call   c0002c17 <change_bitmap>
c00034ba:	83 c4 10             	add    esp,0x10
c00034bd:	85 c0                	test   eax,eax
c00034bf:	75 3d                	jne    c00034fe <remove_chain+0x140>
c00034c1:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00034c5:	e9 73 ff ff ff       	jmp    c000343d <remove_chain+0x7f>
c00034ca:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034cf:	75 8d                	jne    c000345e <remove_chain+0xa0>
c00034d1:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00034d5:	eb 25                	jmp    c00034fc <remove_chain+0x13e>
c00034d7:	8d 53 01             	lea    edx,[ebx+0x1]
c00034da:	89 c3                	mov    ebx,eax
c00034dc:	39 c2                	cmp    edx,eax
c00034de:	74 88                	je     c0003468 <remove_chain+0xaa>
c00034e0:	eb 1a                	jmp    c00034fc <remove_chain+0x13e>
c00034e2:	3c 03                	cmp    al,0x3
c00034e4:	75 16                	jne    c00034fc <remove_chain+0x13e>
c00034e6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00034e9:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034ed:	77 0d                	ja     c00034fc <remove_chain+0x13e>
c00034ef:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00034f2:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034f6:	72 04                	jb     c00034fc <remove_chain+0x13e>
c00034f8:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00034fc:	31 c0                	xor    eax,eax
c00034fe:	83 c4 1c             	add    esp,0x1c
c0003501:	5b                   	pop    ebx
c0003502:	5e                   	pop    esi
c0003503:	5f                   	pop    edi
c0003504:	5d                   	pop    ebp
c0003505:	c3                   	ret    

c0003506 <dir_clear>:
c0003506:	55                   	push   ebp
c0003507:	57                   	push   edi
c0003508:	56                   	push   esi
c0003509:	89 c6                	mov    esi,eax
c000350b:	53                   	push   ebx
c000350c:	83 ec 1c             	sub    esp,0x1c
c000350f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003513:	e8 9d ed ff ff       	call   c00022b5 <sync_window>
c0003518:	85 c0                	test   eax,eax
c000351a:	0f 85 de 00 00 00    	jne    c00035fe <dir_clear+0xf8>
c0003520:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003524:	89 f0                	mov    eax,esi
c0003526:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003529:	e8 d6 e8 ff ff       	call   c0001e04 <clst2sect>
c000352e:	b9 00 02 00 00       	mov    ecx,0x200
c0003533:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003537:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000353b:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000353e:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003541:	89 e8                	mov    eax,ebp
c0003543:	31 d2                	xor    edx,edx
c0003545:	e8 b5 e6 ff ff       	call   c0001bff <mem_set>
c000354a:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000354e:	c1 e3 09             	shl    ebx,0x9
c0003551:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003557:	76 1f                	jbe    c0003578 <dir_clear+0x72>
c0003559:	bb 00 80 00 00       	mov    ebx,0x8000
c000355e:	eb 18                	jmp    c0003578 <dir_clear+0x72>
c0003560:	83 ec 0c             	sub    esp,0xc
c0003563:	53                   	push   ebx
c0003564:	e8 6b 50 00 00       	call   c00085d4 <ff_memalloc>
c0003569:	83 c4 10             	add    esp,0x10
c000356c:	89 c7                	mov    edi,eax
c000356e:	85 c0                	test   eax,eax
c0003570:	0f 85 8f 00 00 00    	jne    c0003605 <dir_clear+0xff>
c0003576:	d1 eb                	shr    ebx,1
c0003578:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000357e:	77 e0                	ja     c0003560 <dir_clear+0x5a>
c0003580:	31 db                	xor    ebx,ebx
c0003582:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003586:	39 d8                	cmp    eax,ebx
c0003588:	76 66                	jbe    c00035f0 <dir_clear+0xea>
c000358a:	83 ec 0c             	sub    esp,0xc
c000358d:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003591:	6a 01                	push   0x1
c0003593:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003597:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000359b:	55                   	push   ebp
c000359c:	50                   	push   eax
c000359d:	e8 94 e5 ff ff       	call   c0001b36 <disk_write>
c00035a2:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c00035a7:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00035ac:	83 c4 20             	add    esp,0x20
c00035af:	85 c0                	test   eax,eax
c00035b1:	75 3d                	jne    c00035f0 <dir_clear+0xea>
c00035b3:	43                   	inc    ebx
c00035b4:	eb cc                	jmp    c0003582 <dir_clear+0x7c>
c00035b6:	83 ec 0c             	sub    esp,0xc
c00035b9:	31 d2                	xor    edx,edx
c00035bb:	55                   	push   ebp
c00035bc:	89 d8                	mov    eax,ebx
c00035be:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00035c2:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00035c6:	52                   	push   edx
c00035c7:	50                   	push   eax
c00035c8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00035cc:	57                   	push   edi
c00035cd:	50                   	push   eax
c00035ce:	e8 63 e5 ff ff       	call   c0001b36 <disk_write>
c00035d3:	83 c4 20             	add    esp,0x20
c00035d6:	85 c0                	test   eax,eax
c00035d8:	75 0a                	jne    c00035e4 <dir_clear+0xde>
c00035da:	01 eb                	add    ebx,ebp
c00035dc:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035e0:	39 d8                	cmp    eax,ebx
c00035e2:	77 d2                	ja     c00035b6 <dir_clear+0xb0>
c00035e4:	83 ec 0c             	sub    esp,0xc
c00035e7:	57                   	push   edi
c00035e8:	e8 ff 4f 00 00       	call   c00085ec <ff_memfree>
c00035ed:	83 c4 10             	add    esp,0x10
c00035f0:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035f4:	39 d8                	cmp    eax,ebx
c00035f6:	0f 95 c0             	setne  al
c00035f9:	0f b6 c0             	movzx  eax,al
c00035fc:	eb 19                	jmp    c0003617 <dir_clear+0x111>
c00035fe:	b8 01 00 00 00       	mov    eax,0x1
c0003603:	eb 12                	jmp    c0003617 <dir_clear+0x111>
c0003605:	89 d9                	mov    ecx,ebx
c0003607:	31 d2                	xor    edx,edx
c0003609:	c1 eb 09             	shr    ebx,0x9
c000360c:	e8 ee e5 ff ff       	call   c0001bff <mem_set>
c0003611:	89 dd                	mov    ebp,ebx
c0003613:	31 db                	xor    ebx,ebx
c0003615:	eb c5                	jmp    c00035dc <dir_clear+0xd6>
c0003617:	83 c4 1c             	add    esp,0x1c
c000361a:	5b                   	pop    ebx
c000361b:	5e                   	pop    esi
c000361c:	5f                   	pop    edi
c000361d:	5d                   	pop    ebp
c000361e:	c3                   	ret    

c000361f <dir_next>:
c000361f:	55                   	push   ebp
c0003620:	57                   	push   edi
c0003621:	56                   	push   esi
c0003622:	53                   	push   ebx
c0003623:	89 c3                	mov    ebx,eax
c0003625:	83 ec 1c             	sub    esp,0x1c
c0003628:	8b 28                	mov    ebp,DWORD PTR [eax]
c000362a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000362e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003631:	8d 78 20             	lea    edi,[eax+0x20]
c0003634:	31 c0                	xor    eax,eax
c0003636:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000363a:	0f 94 c0             	sete   al
c000363d:	48                   	dec    eax
c000363e:	25 00 00 20 f0       	and    eax,0xf0200000
c0003643:	05 00 00 00 10       	add    eax,0x10000000
c0003648:	39 f8                	cmp    eax,edi
c000364a:	77 0e                	ja     c000365a <dir_next+0x3b>
c000364c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003653:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000365a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000365d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003660:	b8 04 00 00 00       	mov    eax,0x4
c0003665:	89 ce                	mov    esi,ecx
c0003667:	09 d6                	or     esi,edx
c0003669:	0f 84 da 00 00 00    	je     c0003749 <dir_next+0x12a>
c000366f:	89 f8                	mov    eax,edi
c0003671:	25 ff 01 00 00       	and    eax,0x1ff
c0003676:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000367a:	0f 85 b9 00 00 00    	jne    c0003739 <dir_next+0x11a>
c0003680:	83 c2 01             	add    edx,0x1
c0003683:	83 d1 00             	adc    ecx,0x0
c0003686:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003689:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000368c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000368f:	85 d2                	test   edx,edx
c0003691:	75 29                	jne    c00036bc <dir_next+0x9d>
c0003693:	89 fa                	mov    edx,edi
c0003695:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003699:	c1 ea 05             	shr    edx,0x5
c000369c:	39 c2                	cmp    edx,eax
c000369e:	0f 82 95 00 00 00    	jb     c0003739 <dir_next+0x11a>
c00036a4:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00036ab:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00036b2:	b8 04 00 00 00       	mov    eax,0x4
c00036b7:	e9 8d 00 00 00       	jmp    c0003749 <dir_next+0x12a>
c00036bc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00036c0:	89 f9                	mov    ecx,edi
c00036c2:	48                   	dec    eax
c00036c3:	c1 e9 09             	shr    ecx,0x9
c00036c6:	85 c8                	test   eax,ecx
c00036c8:	75 6f                	jne    c0003739 <dir_next+0x11a>
c00036ca:	89 d8                	mov    eax,ebx
c00036cc:	e8 00 f8 ff ff       	call   c0002ed1 <get_fat>
c00036d1:	89 c6                	mov    esi,eax
c00036d3:	83 f8 01             	cmp    eax,0x1
c00036d6:	77 07                	ja     c00036df <dir_next+0xc0>
c00036d8:	b8 02 00 00 00       	mov    eax,0x2
c00036dd:	eb 6a                	jmp    c0003749 <dir_next+0x12a>
c00036df:	83 f8 ff             	cmp    eax,0xffffffff
c00036e2:	75 07                	jne    c00036eb <dir_next+0xcc>
c00036e4:	b8 01 00 00 00       	mov    eax,0x1
c00036e9:	eb 5e                	jmp    c0003749 <dir_next+0x12a>
c00036eb:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00036ee:	77 37                	ja     c0003727 <dir_next+0x108>
c00036f0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00036f5:	74 ad                	je     c00036a4 <dir_next+0x85>
c00036f7:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00036fa:	89 d8                	mov    eax,ebx
c00036fc:	e8 be fa ff ff       	call   c00031bf <create_chain>
c0003701:	89 c6                	mov    esi,eax
c0003703:	b8 07 00 00 00       	mov    eax,0x7
c0003708:	85 f6                	test   esi,esi
c000370a:	74 3d                	je     c0003749 <dir_next+0x12a>
c000370c:	83 fe 01             	cmp    esi,0x1
c000370f:	74 c7                	je     c00036d8 <dir_next+0xb9>
c0003711:	83 fe ff             	cmp    esi,0xffffffff
c0003714:	74 ce                	je     c00036e4 <dir_next+0xc5>
c0003716:	89 f2                	mov    edx,esi
c0003718:	89 e8                	mov    eax,ebp
c000371a:	e8 e7 fd ff ff       	call   c0003506 <dir_clear>
c000371f:	85 c0                	test   eax,eax
c0003721:	75 c1                	jne    c00036e4 <dir_next+0xc5>
c0003723:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003727:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000372a:	89 f2                	mov    edx,esi
c000372c:	89 e8                	mov    eax,ebp
c000372e:	e8 d1 e6 ff ff       	call   c0001e04 <clst2sect>
c0003733:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003736:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003739:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000373d:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003740:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003744:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003747:	31 c0                	xor    eax,eax
c0003749:	83 c4 1c             	add    esp,0x1c
c000374c:	5b                   	pop    ebx
c000374d:	5e                   	pop    esi
c000374e:	5f                   	pop    edi
c000374f:	5d                   	pop    ebp
c0003750:	c3                   	ret    

c0003751 <load_xdir>:
c0003751:	55                   	push   ebp
c0003752:	57                   	push   edi
c0003753:	56                   	push   esi
c0003754:	89 c6                	mov    esi,eax
c0003756:	53                   	push   ebx
c0003757:	83 ec 1c             	sub    esp,0x1c
c000375a:	8b 00                	mov    eax,DWORD PTR [eax]
c000375c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000375f:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003762:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003765:	e8 df eb ff ff       	call   c0002349 <move_window>
c000376a:	89 c3                	mov    ebx,eax
c000376c:	85 c0                	test   eax,eax
c000376e:	0f 85 0c 01 00 00    	jne    c0003880 <load_xdir+0x12f>
c0003774:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003777:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000377a:	0f 85 fb 00 00 00    	jne    c000387b <load_xdir+0x12a>
c0003780:	89 f8                	mov    eax,edi
c0003782:	b9 20 00 00 00       	mov    ecx,0x20
c0003787:	e8 5e e4 ff ff       	call   c0001bea <mem_cpy>
c000378c:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003790:	40                   	inc    eax
c0003791:	c1 e0 05             	shl    eax,0x5
c0003794:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003798:	83 e8 60             	sub    eax,0x60
c000379b:	3d 00 02 00 00       	cmp    eax,0x200
c00037a0:	0f 87 d5 00 00 00    	ja     c000387b <load_xdir+0x12a>
c00037a6:	31 d2                	xor    edx,edx
c00037a8:	89 f0                	mov    eax,esi
c00037aa:	e8 70 fe ff ff       	call   c000361f <dir_next>
c00037af:	89 c3                	mov    ebx,eax
c00037b1:	83 f8 04             	cmp    eax,0x4
c00037b4:	0f 84 c1 00 00 00    	je     c000387b <load_xdir+0x12a>
c00037ba:	85 c0                	test   eax,eax
c00037bc:	0f 85 be 00 00 00    	jne    c0003880 <load_xdir+0x12f>
c00037c2:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00037c5:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00037c8:	8b 06                	mov    eax,DWORD PTR [esi]
c00037ca:	e8 7a eb ff ff       	call   c0002349 <move_window>
c00037cf:	89 c3                	mov    ebx,eax
c00037d1:	85 c0                	test   eax,eax
c00037d3:	0f 85 a7 00 00 00    	jne    c0003880 <load_xdir+0x12f>
c00037d9:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00037dc:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00037df:	0f 85 96 00 00 00    	jne    c000387b <load_xdir+0x12a>
c00037e5:	8d 47 20             	lea    eax,[edi+0x20]
c00037e8:	b9 20 00 00 00       	mov    ecx,0x20
c00037ed:	e8 f8 e3 ff ff       	call   c0001bea <mem_cpy>
c00037f2:	31 d2                	xor    edx,edx
c00037f4:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00037f8:	b9 0f 00 00 00       	mov    ecx,0xf
c00037fd:	83 c0 2c             	add    eax,0x2c
c0003800:	f7 f1                	div    ecx
c0003802:	c1 e0 05             	shl    eax,0x5
c0003805:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003809:	77 70                	ja     c000387b <load_xdir+0x12a>
c000380b:	bd 40 00 00 00       	mov    ebp,0x40
c0003810:	31 d2                	xor    edx,edx
c0003812:	89 f0                	mov    eax,esi
c0003814:	e8 06 fe ff ff       	call   c000361f <dir_next>
c0003819:	89 c3                	mov    ebx,eax
c000381b:	83 f8 04             	cmp    eax,0x4
c000381e:	74 5b                	je     c000387b <load_xdir+0x12a>
c0003820:	85 c0                	test   eax,eax
c0003822:	75 5c                	jne    c0003880 <load_xdir+0x12f>
c0003824:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003827:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000382a:	8b 06                	mov    eax,DWORD PTR [esi]
c000382c:	e8 18 eb ff ff       	call   c0002349 <move_window>
c0003831:	89 c3                	mov    ebx,eax
c0003833:	85 c0                	test   eax,eax
c0003835:	75 49                	jne    c0003880 <load_xdir+0x12f>
c0003837:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000383a:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000383d:	75 3c                	jne    c000387b <load_xdir+0x12a>
c000383f:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003845:	77 0d                	ja     c0003854 <load_xdir+0x103>
c0003847:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000384a:	b9 20 00 00 00       	mov    ecx,0x20
c000384f:	e8 96 e3 ff ff       	call   c0001bea <mem_cpy>
c0003854:	83 c5 20             	add    ebp,0x20
c0003857:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000385b:	77 b3                	ja     c0003810 <load_xdir+0xbf>
c000385d:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003863:	77 1b                	ja     c0003880 <load_xdir+0x12f>
c0003865:	89 f8                	mov    eax,edi
c0003867:	e8 cd e7 ff ff       	call   c0002039 <xdir_sum>
c000386c:	89 c1                	mov    ecx,eax
c000386e:	8d 47 02             	lea    eax,[edi+0x2]
c0003871:	e8 f5 e2 ff ff       	call   c0001b6b <ld_word>
c0003876:	66 39 c1             	cmp    cx,ax
c0003879:	74 05                	je     c0003880 <load_xdir+0x12f>
c000387b:	bb 02 00 00 00       	mov    ebx,0x2
c0003880:	83 c4 1c             	add    esp,0x1c
c0003883:	89 d8                	mov    eax,ebx
c0003885:	5b                   	pop    ebx
c0003886:	5e                   	pop    esi
c0003887:	5f                   	pop    edi
c0003888:	5d                   	pop    ebp
c0003889:	c3                   	ret    

c000388a <load_obj_xdir>:
c000388a:	53                   	push   ebx
c000388b:	89 c3                	mov    ebx,eax
c000388d:	83 ec 08             	sub    esp,0x8
c0003890:	8b 02                	mov    eax,DWORD PTR [edx]
c0003892:	89 03                	mov    DWORD PTR [ebx],eax
c0003894:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003897:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000389a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000389d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c00038a0:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00038a3:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00038aa:	30 c0                	xor    al,al
c00038ac:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00038b3:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00038b6:	89 d8                	mov    eax,ebx
c00038b8:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00038bb:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00038be:	e8 04 f8 ff ff       	call   c00030c7 <dir_sdi>
c00038c3:	85 c0                	test   eax,eax
c00038c5:	75 0b                	jne    c00038d2 <load_obj_xdir+0x48>
c00038c7:	89 d8                	mov    eax,ebx
c00038c9:	83 c4 08             	add    esp,0x8
c00038cc:	5b                   	pop    ebx
c00038cd:	e9 7f fe ff ff       	jmp    c0003751 <load_xdir>
c00038d2:	83 c4 08             	add    esp,0x8
c00038d5:	5b                   	pop    ebx
c00038d6:	c3                   	ret    

c00038d7 <dir_read>:
c00038d7:	55                   	push   ebp
c00038d8:	bd 04 00 00 00       	mov    ebp,0x4
c00038dd:	57                   	push   edi
c00038de:	56                   	push   esi
c00038df:	be ff ff ff ff       	mov    esi,0xffffffff
c00038e4:	53                   	push   ebx
c00038e5:	89 c3                	mov    ebx,eax
c00038e7:	83 ec 1c             	sub    esp,0x1c
c00038ea:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038ee:	8b 38                	mov    edi,DWORD PTR [eax]
c00038f0:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038f5:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00038f8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00038fb:	89 c8                	mov    eax,ecx
c00038fd:	09 d0                	or     eax,edx
c00038ff:	0f 84 25 01 00 00    	je     c0003a2a <dir_read+0x153>
c0003905:	89 f8                	mov    eax,edi
c0003907:	e8 3d ea ff ff       	call   c0002349 <move_window>
c000390c:	89 c5                	mov    ebp,eax
c000390e:	85 c0                	test   eax,eax
c0003910:	0f 85 23 01 00 00    	jne    c0003a39 <dir_read+0x162>
c0003916:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003919:	8a 0a                	mov    cl,BYTE PTR [edx]
c000391b:	84 c9                	test   cl,cl
c000391d:	0f 84 11 01 00 00    	je     c0003a34 <dir_read+0x15d>
c0003923:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003926:	75 48                	jne    c0003970 <dir_read+0x99>
c0003928:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000392d:	74 10                	je     c000393f <dir_read+0x68>
c000392f:	80 f9 83             	cmp    cl,0x83
c0003932:	0f 85 dd 00 00 00    	jne    c0003a15 <dir_read+0x13e>
c0003938:	31 ed                	xor    ebp,ebp
c000393a:	e9 08 01 00 00       	jmp    c0003a47 <dir_read+0x170>
c000393f:	80 f9 85             	cmp    cl,0x85
c0003942:	0f 85 cd 00 00 00    	jne    c0003a15 <dir_read+0x13e>
c0003948:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000394b:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000394e:	89 d8                	mov    eax,ebx
c0003950:	e8 fc fd ff ff       	call   c0003751 <load_xdir>
c0003955:	89 c5                	mov    ebp,eax
c0003957:	85 c0                	test   eax,eax
c0003959:	0f 85 da 00 00 00    	jne    c0003a39 <dir_read+0x162>
c000395f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003962:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003965:	83 e0 3f             	and    eax,0x3f
c0003968:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000396b:	e9 d7 00 00 00       	jmp    c0003a47 <dir_read+0x170>
c0003970:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003973:	83 e0 3f             	and    eax,0x3f
c0003976:	80 f9 2e             	cmp    cl,0x2e
c0003979:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000397d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003980:	0f 84 8a 00 00 00    	je     c0003a10 <dir_read+0x139>
c0003986:	80 f9 e5             	cmp    cl,0xe5
c0003989:	0f 84 81 00 00 00    	je     c0003a10 <dir_read+0x139>
c000398f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003993:	83 e0 1f             	and    eax,0x1f
c0003996:	83 f8 08             	cmp    eax,0x8
c0003999:	0f 94 c0             	sete   al
c000399c:	0f b6 c0             	movzx  eax,al
c000399f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00039a3:	75 6b                	jne    c0003a10 <dir_read+0x139>
c00039a5:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00039aa:	75 44                	jne    c00039f0 <dir_read+0x119>
c00039ac:	f6 c1 40             	test   cl,0x40
c00039af:	74 12                	je     c00039c3 <dir_read+0xec>
c00039b1:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00039b4:	83 e1 bf             	and    ecx,0xffffffbf
c00039b7:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039bb:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00039be:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00039c1:	eb 06                	jmp    c00039c9 <dir_read+0xf2>
c00039c3:	89 f0                	mov    eax,esi
c00039c5:	38 c8                	cmp    al,cl
c00039c7:	75 47                	jne    c0003a10 <dir_read+0x139>
c00039c9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039cd:	be ff ff ff ff       	mov    esi,0xffffffff
c00039d2:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00039d5:	75 3e                	jne    c0003a15 <dir_read+0x13e>
c00039d7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039db:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00039de:	e8 8a e4 ff ff       	call   c0001e6d <pick_lfn>
c00039e3:	85 c0                	test   eax,eax
c00039e5:	74 2e                	je     c0003a15 <dir_read+0x13e>
c00039e7:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039eb:	8d 71 ff             	lea    esi,[ecx-0x1]
c00039ee:	eb 25                	jmp    c0003a15 <dir_read+0x13e>
c00039f0:	89 f0                	mov    eax,esi
c00039f2:	84 c0                	test   al,al
c00039f4:	75 11                	jne    c0003a07 <dir_read+0x130>
c00039f6:	89 d0                	mov    eax,edx
c00039f8:	e8 2a e6 ff ff       	call   c0002027 <sum_sfn>
c00039fd:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003a01:	0f 84 31 ff ff ff    	je     c0003938 <dir_read+0x61>
c0003a07:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003a0e:	eb 37                	jmp    c0003a47 <dir_read+0x170>
c0003a10:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a15:	31 d2                	xor    edx,edx
c0003a17:	89 d8                	mov    eax,ebx
c0003a19:	e8 01 fc ff ff       	call   c000361f <dir_next>
c0003a1e:	89 c5                	mov    ebp,eax
c0003a20:	85 c0                	test   eax,eax
c0003a22:	0f 84 cd fe ff ff    	je     c00038f5 <dir_read+0x1e>
c0003a28:	eb 0f                	jmp    c0003a39 <dir_read+0x162>
c0003a2a:	85 ed                	test   ebp,ebp
c0003a2c:	0f 84 06 ff ff ff    	je     c0003938 <dir_read+0x61>
c0003a32:	eb 05                	jmp    c0003a39 <dir_read+0x162>
c0003a34:	bd 04 00 00 00       	mov    ebp,0x4
c0003a39:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003a40:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003a47:	83 c4 1c             	add    esp,0x1c
c0003a4a:	89 e8                	mov    eax,ebp
c0003a4c:	5b                   	pop    ebx
c0003a4d:	5e                   	pop    esi
c0003a4e:	5f                   	pop    edi
c0003a4f:	5d                   	pop    ebp
c0003a50:	c3                   	ret    

c0003a51 <dir_alloc>:
c0003a51:	55                   	push   ebp
c0003a52:	89 d5                	mov    ebp,edx
c0003a54:	57                   	push   edi
c0003a55:	31 d2                	xor    edx,edx
c0003a57:	56                   	push   esi
c0003a58:	53                   	push   ebx
c0003a59:	89 c3                	mov    ebx,eax
c0003a5b:	83 ec 0c             	sub    esp,0xc
c0003a5e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a60:	e8 62 f6 ff ff       	call   c00030c7 <dir_sdi>
c0003a65:	85 c0                	test   eax,eax
c0003a67:	75 4e                	jne    c0003ab7 <dir_alloc+0x66>
c0003a69:	31 f6                	xor    esi,esi
c0003a6b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a6e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a71:	89 f8                	mov    eax,edi
c0003a73:	e8 d1 e8 ff ff       	call   c0002349 <move_window>
c0003a78:	85 c0                	test   eax,eax
c0003a7a:	75 3b                	jne    c0003ab7 <dir_alloc+0x66>
c0003a7c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a7f:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a82:	8a 12                	mov    dl,BYTE PTR [edx]
c0003a84:	75 07                	jne    c0003a8d <dir_alloc+0x3c>
c0003a86:	f7 d2                	not    edx
c0003a88:	c0 ea 07             	shr    dl,0x7
c0003a8b:	eb 0d                	jmp    c0003a9a <dir_alloc+0x49>
c0003a8d:	84 d2                	test   dl,dl
c0003a8f:	0f 94 c1             	sete   cl
c0003a92:	80 fa e5             	cmp    dl,0xe5
c0003a95:	0f 94 c2             	sete   dl
c0003a98:	09 ca                	or     edx,ecx
c0003a9a:	84 d2                	test   dl,dl
c0003a9c:	74 07                	je     c0003aa5 <dir_alloc+0x54>
c0003a9e:	46                   	inc    esi
c0003a9f:	39 ee                	cmp    esi,ebp
c0003aa1:	75 04                	jne    c0003aa7 <dir_alloc+0x56>
c0003aa3:	eb 1c                	jmp    c0003ac1 <dir_alloc+0x70>
c0003aa5:	31 f6                	xor    esi,esi
c0003aa7:	ba 01 00 00 00       	mov    edx,0x1
c0003aac:	89 d8                	mov    eax,ebx
c0003aae:	e8 6c fb ff ff       	call   c000361f <dir_next>
c0003ab3:	85 c0                	test   eax,eax
c0003ab5:	74 b4                	je     c0003a6b <dir_alloc+0x1a>
c0003ab7:	83 f8 04             	cmp    eax,0x4
c0003aba:	75 05                	jne    c0003ac1 <dir_alloc+0x70>
c0003abc:	b8 07 00 00 00       	mov    eax,0x7
c0003ac1:	83 c4 0c             	add    esp,0xc
c0003ac4:	5b                   	pop    ebx
c0003ac5:	5e                   	pop    esi
c0003ac6:	5f                   	pop    edi
c0003ac7:	5d                   	pop    ebp
c0003ac8:	c3                   	ret    

c0003ac9 <store_xdir>:
c0003ac9:	55                   	push   ebp
c0003aca:	57                   	push   edi
c0003acb:	89 c7                	mov    edi,eax
c0003acd:	56                   	push   esi
c0003ace:	53                   	push   ebx
c0003acf:	83 ec 0c             	sub    esp,0xc
c0003ad2:	8b 00                	mov    eax,DWORD PTR [eax]
c0003ad4:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003ad7:	89 e8                	mov    eax,ebp
c0003ad9:	e8 5b e5 ff ff       	call   c0002039 <xdir_sum>
c0003ade:	0f b7 d0             	movzx  edx,ax
c0003ae1:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ae4:	e8 f4 e0 ff ff       	call   c0001bdd <st_word>
c0003ae9:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003aed:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003af0:	89 f8                	mov    eax,edi
c0003af2:	e8 d0 f5 ff ff       	call   c00030c7 <dir_sdi>
c0003af7:	89 c6                	mov    esi,eax
c0003af9:	85 f6                	test   esi,esi
c0003afb:	75 3d                	jne    c0003b3a <store_xdir+0x71>
c0003afd:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003b00:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003b03:	8b 07                	mov    eax,DWORD PTR [edi]
c0003b05:	e8 3f e8 ff ff       	call   c0002349 <move_window>
c0003b0a:	89 c6                	mov    esi,eax
c0003b0c:	85 c0                	test   eax,eax
c0003b0e:	75 2a                	jne    c0003b3a <store_xdir+0x71>
c0003b10:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003b13:	b9 20 00 00 00       	mov    ecx,0x20
c0003b18:	89 ea                	mov    edx,ebp
c0003b1a:	e8 cb e0 ff ff       	call   c0001bea <mem_cpy>
c0003b1f:	8b 07                	mov    eax,DWORD PTR [edi]
c0003b21:	85 db                	test   ebx,ebx
c0003b23:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003b27:	74 11                	je     c0003b3a <store_xdir+0x71>
c0003b29:	31 d2                	xor    edx,edx
c0003b2b:	89 f8                	mov    eax,edi
c0003b2d:	83 c5 20             	add    ebp,0x20
c0003b30:	e8 ea fa ff ff       	call   c000361f <dir_next>
c0003b35:	4b                   	dec    ebx
c0003b36:	89 c6                	mov    esi,eax
c0003b38:	eb bf                	jmp    c0003af9 <store_xdir+0x30>
c0003b3a:	89 f0                	mov    eax,esi
c0003b3c:	83 fe 02             	cmp    esi,0x2
c0003b3f:	76 05                	jbe    c0003b46 <store_xdir+0x7d>
c0003b41:	b8 02 00 00 00       	mov    eax,0x2
c0003b46:	83 c4 0c             	add    esp,0xc
c0003b49:	5b                   	pop    ebx
c0003b4a:	5e                   	pop    esi
c0003b4b:	5f                   	pop    edi
c0003b4c:	5d                   	pop    ebp
c0003b4d:	c3                   	ret    

c0003b4e <dir_remove>:
c0003b4e:	57                   	push   edi
c0003b4f:	56                   	push   esi
c0003b50:	53                   	push   ebx
c0003b51:	89 c3                	mov    ebx,eax
c0003b53:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003b56:	8b 30                	mov    esi,DWORD PTR [eax]
c0003b58:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003b5b:	83 fa ff             	cmp    edx,0xffffffff
c0003b5e:	74 09                	je     c0003b69 <dir_remove+0x1b>
c0003b60:	e8 62 f5 ff ff       	call   c00030c7 <dir_sdi>
c0003b65:	85 c0                	test   eax,eax
c0003b67:	75 41                	jne    c0003baa <dir_remove+0x5c>
c0003b69:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b6c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b6f:	89 f0                	mov    eax,esi
c0003b71:	e8 d3 e7 ff ff       	call   c0002349 <move_window>
c0003b76:	85 c0                	test   eax,eax
c0003b78:	75 26                	jne    c0003ba0 <dir_remove+0x52>
c0003b7a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b7d:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003b80:	75 05                	jne    c0003b87 <dir_remove+0x39>
c0003b82:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003b85:	eb 03                	jmp    c0003b8a <dir_remove+0x3c>
c0003b87:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003b8a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003b8e:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003b91:	73 17                	jae    c0003baa <dir_remove+0x5c>
c0003b93:	31 d2                	xor    edx,edx
c0003b95:	89 d8                	mov    eax,ebx
c0003b97:	e8 83 fa ff ff       	call   c000361f <dir_next>
c0003b9c:	85 c0                	test   eax,eax
c0003b9e:	74 c9                	je     c0003b69 <dir_remove+0x1b>
c0003ba0:	83 f8 04             	cmp    eax,0x4
c0003ba3:	75 05                	jne    c0003baa <dir_remove+0x5c>
c0003ba5:	b8 02 00 00 00       	mov    eax,0x2
c0003baa:	5b                   	pop    ebx
c0003bab:	5e                   	pop    esi
c0003bac:	5f                   	pop    edi
c0003bad:	c3                   	ret    

c0003bae <create_name>:
c0003bae:	55                   	push   ebp
c0003baf:	89 d5                	mov    ebp,edx
c0003bb1:	57                   	push   edi
c0003bb2:	89 c7                	mov    edi,eax
c0003bb4:	56                   	push   esi
c0003bb5:	31 f6                	xor    esi,esi
c0003bb7:	53                   	push   ebx
c0003bb8:	83 ec 3c             	sub    esp,0x3c
c0003bbb:	8b 02                	mov    eax,DWORD PTR [edx]
c0003bbd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003bc1:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003bc6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003bca:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003bce:	e8 72 e0 ff ff       	call   c0001c45 <tchar2uni>
c0003bd3:	89 c3                	mov    ebx,eax
c0003bd5:	83 f8 ff             	cmp    eax,0xffffffff
c0003bd8:	75 0a                	jne    c0003be4 <create_name+0x36>
c0003bda:	b8 06 00 00 00       	mov    eax,0x6
c0003bdf:	e9 9e 02 00 00       	jmp    c0003e82 <create_name+0x2d4>
c0003be4:	3d ff ff 00 00       	cmp    eax,0xffff
c0003be9:	76 0c                	jbe    c0003bf7 <create_name+0x49>
c0003beb:	c1 e8 10             	shr    eax,0x10
c0003bee:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003bf2:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003bf6:	46                   	inc    esi
c0003bf7:	66 83 fb 1f          	cmp    bx,0x1f
c0003bfb:	76 4f                	jbe    c0003c4c <create_name+0x9e>
c0003bfd:	66 83 fb 5c          	cmp    bx,0x5c
c0003c01:	74 35                	je     c0003c38 <create_name+0x8a>
c0003c03:	66 83 fb 2f          	cmp    bx,0x2f
c0003c07:	74 2f                	je     c0003c38 <create_name+0x8a>
c0003c09:	66 83 fb 7f          	cmp    bx,0x7f
c0003c0d:	77 11                	ja     c0003c20 <create_name+0x72>
c0003c0f:	0f b7 d3             	movzx  edx,bx
c0003c12:	b8 f2 40 02 c0       	mov    eax,0xc00240f2
c0003c17:	e8 11 e0 ff ff       	call   c0001c2d <chk_chr>
c0003c1c:	85 c0                	test   eax,eax
c0003c1e:	75 ba                	jne    c0003bda <create_name+0x2c>
c0003c20:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003c26:	77 b2                	ja     c0003bda <create_name+0x2c>
c0003c28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c2c:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003c30:	46                   	inc    esi
c0003c31:	eb 97                	jmp    c0003bca <create_name+0x1c>
c0003c33:	40                   	inc    eax
c0003c34:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c38:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c3c:	8a 10                	mov    dl,BYTE PTR [eax]
c0003c3e:	80 fa 2f             	cmp    dl,0x2f
c0003c41:	74 f0                	je     c0003c33 <create_name+0x85>
c0003c43:	80 fa 5c             	cmp    dl,0x5c
c0003c46:	74 eb                	je     c0003c33 <create_name+0x85>
c0003c48:	31 db                	xor    ebx,ebx
c0003c4a:	eb 02                	jmp    c0003c4e <create_name+0xa0>
c0003c4c:	b3 04                	mov    bl,0x4
c0003c4e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c52:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003c55:	85 f6                	test   esi,esi
c0003c57:	74 18                	je     c0003c71 <create_name+0xc3>
c0003c59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c5d:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003c62:	66 83 f8 20          	cmp    ax,0x20
c0003c66:	74 06                	je     c0003c6e <create_name+0xc0>
c0003c68:	66 83 f8 2e          	cmp    ax,0x2e
c0003c6c:	75 03                	jne    c0003c71 <create_name+0xc3>
c0003c6e:	4e                   	dec    esi
c0003c6f:	eb e4                	jmp    c0003c55 <create_name+0xa7>
c0003c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c75:	31 ed                	xor    ebp,ebp
c0003c77:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003c7d:	85 f6                	test   esi,esi
c0003c7f:	0f 84 55 ff ff ff    	je     c0003bda <create_name+0x2c>
c0003c85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c89:	8d 55 01             	lea    edx,[ebp+0x1]
c0003c8c:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003c90:	66 83 f8 20          	cmp    ax,0x20
c0003c94:	75 04                	jne    c0003c9a <create_name+0xec>
c0003c96:	89 d5                	mov    ebp,edx
c0003c98:	eb eb                	jmp    c0003c85 <create_name+0xd7>
c0003c9a:	85 ed                	test   ebp,ebp
c0003c9c:	75 06                	jne    c0003ca4 <create_name+0xf6>
c0003c9e:	66 83 f8 2e          	cmp    ax,0x2e
c0003ca2:	75 08                	jne    c0003cac <create_name+0xfe>
c0003ca4:	83 cb 03             	or     ebx,0x3
c0003ca7:	eb 03                	jmp    c0003cac <create_name+0xfe>
c0003ca9:	4e                   	dec    esi
c0003caa:	74 0c                	je     c0003cb8 <create_name+0x10a>
c0003cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003cb0:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003cb6:	75 f1                	jne    c0003ca9 <create_name+0xfb>
c0003cb8:	b9 0b 00 00 00       	mov    ecx,0xb
c0003cbd:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003cc0:	ba 20 00 00 00       	mov    edx,0x20
c0003cc5:	e8 35 df ff ff       	call   c0001bff <mem_set>
c0003cca:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003cd2:	31 c9                	xor    ecx,ecx
c0003cd4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003cd9:	8d 45 01             	lea    eax,[ebp+0x1]
c0003cdc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003ce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce4:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003ce8:	66 85 ed             	test   bp,bp
c0003ceb:	0f 84 30 01 00 00    	je     c0003e21 <create_name+0x273>
c0003cf1:	66 83 fd 20          	cmp    bp,0x20
c0003cf5:	74 10                	je     c0003d07 <create_name+0x159>
c0003cf7:	66 83 fd 2e          	cmp    bp,0x2e
c0003cfb:	75 13                	jne    c0003d10 <create_name+0x162>
c0003cfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d01:	0f 84 6b 01 00 00    	je     c0003e72 <create_name+0x2c4>
c0003d07:	83 cb 03             	or     ebx,0x3
c0003d0a:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003d0e:	eb c9                	jmp    c0003cd9 <create_name+0x12b>
c0003d10:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003d14:	73 0b                	jae    c0003d21 <create_name+0x173>
c0003d16:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d1a:	75 47                	jne    c0003d63 <create_name+0x1b5>
c0003d1c:	e9 51 01 00 00       	jmp    c0003e72 <create_name+0x2c4>
c0003d21:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d26:	75 10                	jne    c0003d38 <create_name+0x18a>
c0003d28:	83 cb 03             	or     ebx,0x3
c0003d2b:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d33:	e9 e9 00 00 00       	jmp    c0003e21 <create_name+0x273>
c0003d38:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d3c:	74 0d                	je     c0003d4b <create_name+0x19d>
c0003d3e:	83 cb 03             	or     ebx,0x3
c0003d41:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d45:	0f 87 d6 00 00 00    	ja     c0003e21 <create_name+0x273>
c0003d4b:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d50:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003d54:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d5c:	b9 08 00 00 00       	mov    ecx,0x8
c0003d61:	eb a7                	jmp    c0003d0a <create_name+0x15c>
c0003d63:	66 83 fd 7f          	cmp    bp,0x7f
c0003d67:	76 68                	jbe    c0003dd1 <create_name+0x223>
c0003d69:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003d6d:	88 da                	mov    dl,bl
c0003d6f:	83 ca 02             	or     edx,0x2
c0003d72:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003d76:	50                   	push   eax
c0003d77:	50                   	push   eax
c0003d78:	68 b5 01 00 00       	push   0x1b5
c0003d7d:	55                   	push   ebp
c0003d7e:	e8 81 48 00 00       	call   c0008604 <ff_uni2oem>
c0003d83:	83 c4 10             	add    esp,0x10
c0003d86:	89 c5                	mov    ebp,eax
c0003d88:	a8 80                	test   al,0x80
c0003d8a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003d8e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003d92:	74 0c                	je     c0003da0 <create_name+0x1f2>
c0003d94:	83 e5 7f             	and    ebp,0x7f
c0003d97:	0f b6 ad 40 40 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffdbfc0]
c0003d9e:	eb 2a                	jmp    c0003dca <create_name+0x21c>
c0003da0:	66 3d ff 00          	cmp    ax,0xff
c0003da4:	76 24                	jbe    c0003dca <create_name+0x21c>
c0003da6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003daa:	48                   	dec    eax
c0003dab:	39 c8                	cmp    eax,ecx
c0003dad:	77 0c                	ja     c0003dbb <create_name+0x20d>
c0003daf:	83 cb 03             	or     ebx,0x3
c0003db2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003db6:	e9 4f ff ff ff       	jmp    c0003d0a <create_name+0x15c>
c0003dbb:	89 e8                	mov    eax,ebp
c0003dbd:	88 d3                	mov    bl,dl
c0003dbf:	66 c1 e8 08          	shr    ax,0x8
c0003dc3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003dc7:	41                   	inc    ecx
c0003dc8:	eb 4b                	jmp    c0003e15 <create_name+0x267>
c0003dca:	88 d3                	mov    bl,dl
c0003dcc:	66 85 ed             	test   bp,bp
c0003dcf:	74 19                	je     c0003dea <create_name+0x23c>
c0003dd1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003dd5:	0f b7 d5             	movzx  edx,bp
c0003dd8:	b8 fb 40 02 c0       	mov    eax,0xc00240fb
c0003ddd:	e8 4b de ff ff       	call   c0001c2d <chk_chr>
c0003de2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003de6:	85 c0                	test   eax,eax
c0003de8:	74 0a                	je     c0003df4 <create_name+0x246>
c0003dea:	83 cb 03             	or     ebx,0x3
c0003ded:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003df2:	eb 21                	jmp    c0003e15 <create_name+0x267>
c0003df4:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003df7:	66 83 f8 19          	cmp    ax,0x19
c0003dfb:	77 07                	ja     c0003e04 <create_name+0x256>
c0003dfd:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003e02:	eb 11                	jmp    c0003e15 <create_name+0x267>
c0003e04:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003e07:	66 83 f8 19          	cmp    ax,0x19
c0003e0b:	77 08                	ja     c0003e15 <create_name+0x267>
c0003e0d:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003e12:	83 ed 20             	sub    ebp,0x20
c0003e15:	89 e8                	mov    eax,ebp
c0003e17:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e1b:	41                   	inc    ecx
c0003e1c:	e9 e9 fe ff ff       	jmp    c0003d0a <create_name+0x15c>
c0003e21:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003e25:	75 04                	jne    c0003e2b <create_name+0x27d>
c0003e27:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003e2b:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003e30:	75 05                	jne    c0003e37 <create_name+0x289>
c0003e32:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e37:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e3b:	83 e0 0c             	and    eax,0xc
c0003e3e:	3c 0c                	cmp    al,0xc
c0003e40:	74 0b                	je     c0003e4d <create_name+0x29f>
c0003e42:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e46:	83 e0 03             	and    eax,0x3
c0003e49:	3c 03                	cmp    al,0x3
c0003e4b:	75 05                	jne    c0003e52 <create_name+0x2a4>
c0003e4d:	83 cb 02             	or     ebx,0x2
c0003e50:	eb 19                	jmp    c0003e6b <create_name+0x2bd>
c0003e52:	f6 c3 02             	test   bl,0x2
c0003e55:	75 14                	jne    c0003e6b <create_name+0x2bd>
c0003e57:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003e5c:	74 03                	je     c0003e61 <create_name+0x2b3>
c0003e5e:	83 cb 10             	or     ebx,0x10
c0003e61:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003e66:	74 03                	je     c0003e6b <create_name+0x2bd>
c0003e68:	83 cb 08             	or     ebx,0x8
c0003e6b:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003e6e:	31 c0                	xor    eax,eax
c0003e70:	eb 10                	jmp    c0003e82 <create_name+0x2d4>
c0003e72:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e77:	0f 85 ce fe ff ff    	jne    c0003d4b <create_name+0x19d>
c0003e7d:	e9 a6 fe ff ff       	jmp    c0003d28 <create_name+0x17a>
c0003e82:	83 c4 3c             	add    esp,0x3c
c0003e85:	5b                   	pop    ebx
c0003e86:	5e                   	pop    esi
c0003e87:	5f                   	pop    edi
c0003e88:	5d                   	pop    ebp
c0003e89:	c3                   	ret    

c0003e8a <xname_sum>:
c0003e8a:	56                   	push   esi
c0003e8b:	53                   	push   ebx
c0003e8c:	89 c6                	mov    esi,eax
c0003e8e:	51                   	push   ecx
c0003e8f:	31 db                	xor    ebx,ebx
c0003e91:	83 c6 02             	add    esi,0x2
c0003e94:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003e98:	66 85 c0             	test   ax,ax
c0003e9b:	74 1f                	je     c0003ebc <xname_sum+0x32>
c0003e9d:	83 ec 0c             	sub    esp,0xc
c0003ea0:	66 d1 cb             	ror    bx,1
c0003ea3:	50                   	push   eax
c0003ea4:	e8 67 48 00 00       	call   c0008710 <ff_wtoupper>
c0003ea9:	83 c4 10             	add    esp,0x10
c0003eac:	0f b6 d0             	movzx  edx,al
c0003eaf:	66 c1 e8 08          	shr    ax,0x8
c0003eb3:	01 d3                	add    ebx,edx
c0003eb5:	66 d1 cb             	ror    bx,1
c0003eb8:	01 c3                	add    ebx,eax
c0003eba:	eb d5                	jmp    c0003e91 <xname_sum+0x7>
c0003ebc:	89 d8                	mov    eax,ebx
c0003ebe:	5a                   	pop    edx
c0003ebf:	5b                   	pop    ebx
c0003ec0:	5e                   	pop    esi
c0003ec1:	c3                   	ret    

c0003ec2 <create_xdir>:
c0003ec2:	55                   	push   ebp
c0003ec3:	b9 40 00 00 00       	mov    ecx,0x40
c0003ec8:	57                   	push   edi
c0003ec9:	bd 01 00 00 00       	mov    ebp,0x1
c0003ece:	56                   	push   esi
c0003ecf:	31 ff                	xor    edi,edi
c0003ed1:	53                   	push   ebx
c0003ed2:	be 40 00 00 00       	mov    esi,0x40
c0003ed7:	89 c3                	mov    ebx,eax
c0003ed9:	83 ec 1c             	sub    esp,0x1c
c0003edc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003ee0:	31 d2                	xor    edx,edx
c0003ee2:	e8 18 dd ff ff       	call   c0001bff <mem_set>
c0003ee7:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003eea:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003eee:	31 c9                	xor    ecx,ecx
c0003ef0:	8d 46 01             	lea    eax,[esi+0x1]
c0003ef3:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003ef7:	83 c6 02             	add    esi,0x2
c0003efa:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003efe:	66 85 ed             	test   bp,bp
c0003f01:	74 12                	je     c0003f15 <create_xdir+0x53>
c0003f03:	0f b6 c1             	movzx  eax,cl
c0003f06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f0a:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003f0e:	66 83 fd 01          	cmp    bp,0x1
c0003f12:	80 d9 ff             	sbb    cl,0xff
c0003f15:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003f18:	0f b7 d5             	movzx  edx,bp
c0003f1b:	83 c6 02             	add    esi,0x2
c0003f1e:	e8 ba dc ff ff       	call   c0001bdd <st_word>
c0003f23:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003f29:	75 d3                	jne    c0003efe <create_xdir+0x3c>
c0003f2b:	8d 47 01             	lea    eax,[edi+0x1]
c0003f2e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f32:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003f36:	0f b6 c1             	movzx  eax,cl
c0003f39:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003f3e:	74 07                	je     c0003f47 <create_xdir+0x85>
c0003f40:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003f45:	eb a9                	jmp    c0003ef0 <create_xdir+0x2e>
c0003f47:	8d 47 02             	lea    eax,[edi+0x2]
c0003f4a:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003f4d:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003f50:	89 d0                	mov    eax,edx
c0003f52:	e8 33 ff ff ff       	call   c0003e8a <xname_sum>
c0003f57:	83 c4 1c             	add    esp,0x1c
c0003f5a:	0f b7 d0             	movzx  edx,ax
c0003f5d:	8d 43 24             	lea    eax,[ebx+0x24]
c0003f60:	5b                   	pop    ebx
c0003f61:	5e                   	pop    esi
c0003f62:	5f                   	pop    edi
c0003f63:	5d                   	pop    ebp
c0003f64:	e9 74 dc ff ff       	jmp    c0001bdd <st_word>

c0003f69 <cmp_lfn>:
c0003f69:	55                   	push   ebp
c0003f6a:	57                   	push   edi
c0003f6b:	89 d7                	mov    edi,edx
c0003f6d:	56                   	push   esi
c0003f6e:	53                   	push   ebx
c0003f6f:	83 ec 1c             	sub    esp,0x1c
c0003f72:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003f76:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003f79:	e8 ed db ff ff       	call   c0001b6b <ld_word>
c0003f7e:	66 85 c0             	test   ax,ax
c0003f81:	74 07                	je     c0003f8a <cmp_lfn+0x21>
c0003f83:	31 c0                	xor    eax,eax
c0003f85:	e9 9a 00 00 00       	jmp    c0004024 <cmp_lfn+0xbb>
c0003f8a:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003f8c:	bd 01 00 00 00       	mov    ebp,0x1
c0003f91:	83 e3 3f             	and    ebx,0x3f
c0003f94:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003f9c:	4b                   	dec    ebx
c0003f9d:	6b db 0d             	imul   ebx,ebx,0xd
c0003fa0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003fa4:	0f b6 80 c0 40 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdbf40]
c0003fab:	01 f8                	add    eax,edi
c0003fad:	e8 b9 db ff ff       	call   c0001b6b <ld_word>
c0003fb2:	66 85 ed             	test   bp,bp
c0003fb5:	89 c6                	mov    esi,eax
c0003fb7:	74 3c                	je     c0003ff5 <cmp_lfn+0x8c>
c0003fb9:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003fbf:	77 c2                	ja     c0003f83 <cmp_lfn+0x1a>
c0003fc1:	83 ec 0c             	sub    esp,0xc
c0003fc4:	0f b7 c0             	movzx  eax,ax
c0003fc7:	50                   	push   eax
c0003fc8:	e8 43 47 00 00       	call   c0008710 <ff_wtoupper>
c0003fcd:	89 c5                	mov    ebp,eax
c0003fcf:	8d 43 01             	lea    eax,[ebx+0x1]
c0003fd2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003fd6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003fda:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003fde:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fe1:	e8 2a 47 00 00       	call   c0008710 <ff_wtoupper>
c0003fe6:	83 c4 10             	add    esp,0x10
c0003fe9:	39 c5                	cmp    ebp,eax
c0003feb:	75 96                	jne    c0003f83 <cmp_lfn+0x1a>
c0003fed:	89 f5                	mov    ebp,esi
c0003fef:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003ff3:	eb 04                	jmp    c0003ff9 <cmp_lfn+0x90>
c0003ff5:	66 46                	inc    si
c0003ff7:	75 8a                	jne    c0003f83 <cmp_lfn+0x1a>
c0003ff9:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003ffd:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0004002:	75 9c                	jne    c0003fa0 <cmp_lfn+0x37>
c0004004:	f6 07 40             	test   BYTE PTR [edi],0x40
c0004007:	74 16                	je     c000401f <cmp_lfn+0xb6>
c0004009:	66 85 ed             	test   bp,bp
c000400c:	74 11                	je     c000401f <cmp_lfn+0xb6>
c000400e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004012:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0004017:	0f 94 c0             	sete   al
c000401a:	0f b6 c0             	movzx  eax,al
c000401d:	eb 05                	jmp    c0004024 <cmp_lfn+0xbb>
c000401f:	b8 01 00 00 00       	mov    eax,0x1
c0004024:	83 c4 1c             	add    esp,0x1c
c0004027:	5b                   	pop    ebx
c0004028:	5e                   	pop    esi
c0004029:	5f                   	pop    edi
c000402a:	5d                   	pop    ebp
c000402b:	c3                   	ret    

c000402c <dir_find>:
c000402c:	55                   	push   ebp
c000402d:	31 d2                	xor    edx,edx
c000402f:	57                   	push   edi
c0004030:	56                   	push   esi
c0004031:	53                   	push   ebx
c0004032:	89 c3                	mov    ebx,eax
c0004034:	83 ec 1c             	sub    esp,0x1c
c0004037:	8b 30                	mov    esi,DWORD PTR [eax]
c0004039:	e8 89 f0 ff ff       	call   c00030c7 <dir_sdi>
c000403e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004041:	85 c0                	test   eax,eax
c0004043:	0f 85 9e 01 00 00    	jne    c00041e7 <dir_find+0x1bb>
c0004049:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000404c:	0f 85 8d 00 00 00    	jne    c00040df <dir_find+0xb3>
c0004052:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004055:	e8 30 fe ff ff       	call   c0003e8a <xname_sum>
c000405a:	89 c7                	mov    edi,eax
c000405c:	31 d2                	xor    edx,edx
c000405e:	89 d8                	mov    eax,ebx
c0004060:	e8 72 f8 ff ff       	call   c00038d7 <dir_read>
c0004065:	85 c0                	test   eax,eax
c0004067:	0f 85 5e 01 00 00    	jne    c00041cb <dir_find+0x19f>
c000406d:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004070:	8d 41 24             	lea    eax,[ecx+0x24]
c0004073:	e8 f3 da ff ff       	call   c0001b6b <ld_word>
c0004078:	66 39 f8             	cmp    ax,di
c000407b:	75 df                	jne    c000405c <dir_find+0x30>
c000407d:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004080:	31 ed                	xor    ebp,ebp
c0004082:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004086:	ba 40 00 00 00       	mov    edx,0x40
c000408b:	89 e9                	mov    ecx,ebp
c000408d:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004091:	0f 84 42 01 00 00    	je     c00041d9 <dir_find+0x1ad>
c0004097:	f6 c2 1f             	test   dl,0x1f
c000409a:	75 03                	jne    c000409f <dir_find+0x73>
c000409c:	83 c2 02             	add    edx,0x2
c000409f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00040a3:	89 d0                	mov    eax,edx
c00040a5:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c00040a8:	e8 be da ff ff       	call   c0001b6b <ld_word>
c00040ad:	83 ec 0c             	sub    esp,0xc
c00040b0:	0f b7 c0             	movzx  eax,ax
c00040b3:	50                   	push   eax
c00040b4:	e8 57 46 00 00       	call   c0008710 <ff_wtoupper>
c00040b9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00040bd:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040c0:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00040c4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040c7:	e8 44 46 00 00       	call   c0008710 <ff_wtoupper>
c00040cc:	83 c4 10             	add    esp,0x10
c00040cf:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00040d3:	75 87                	jne    c000405c <dir_find+0x30>
c00040d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00040d9:	45                   	inc    ebp
c00040da:	83 c2 02             	add    edx,0x2
c00040dd:	eb ac                	jmp    c000408b <dir_find+0x5f>
c00040df:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00040e6:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00040eb:	bf ff ff ff ff       	mov    edi,0xffffffff
c00040f0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00040f3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00040f6:	89 f0                	mov    eax,esi
c00040f8:	e8 4c e2 ff ff       	call   c0002349 <move_window>
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 c6 00 00 00    	jne    c00041cb <dir_find+0x19f>
c0004105:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0004108:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c000410b:	84 c9                	test   cl,cl
c000410d:	0f 84 bd 00 00 00    	je     c00041d0 <dir_find+0x1a4>
c0004113:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0004116:	88 d0                	mov    al,dl
c0004118:	83 e0 3f             	and    eax,0x3f
c000411b:	80 f9 e5             	cmp    cl,0xe5
c000411e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004121:	0f 84 87 00 00 00    	je     c00041ae <dir_find+0x182>
c0004127:	80 e2 08             	and    dl,0x8
c000412a:	74 06                	je     c0004132 <dir_find+0x106>
c000412c:	3c 0f                	cmp    al,0xf
c000412e:	75 7e                	jne    c00041ae <dir_find+0x182>
c0004130:	eb 04                	jmp    c0004136 <dir_find+0x10a>
c0004132:	3c 0f                	cmp    al,0xf
c0004134:	75 4c                	jne    c0004182 <dir_find+0x156>
c0004136:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c000413a:	75 7e                	jne    c00041ba <dir_find+0x18e>
c000413c:	f6 c1 40             	test   cl,0x40
c000413f:	74 12                	je     c0004153 <dir_find+0x127>
c0004141:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004144:	83 e1 bf             	and    ecx,0xffffffbf
c0004147:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000414b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000414e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004151:	eb 06                	jmp    c0004159 <dir_find+0x12d>
c0004153:	89 f8                	mov    eax,edi
c0004155:	38 c8                	cmp    al,cl
c0004157:	75 5c                	jne    c00041b5 <dir_find+0x189>
c0004159:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000415d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004162:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004165:	75 53                	jne    c00041ba <dir_find+0x18e>
c0004167:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c000416b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000416e:	89 ea                	mov    edx,ebp
c0004170:	e8 f4 fd ff ff       	call   c0003f69 <cmp_lfn>
c0004175:	85 c0                	test   eax,eax
c0004177:	74 41                	je     c00041ba <dir_find+0x18e>
c0004179:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000417d:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004180:	eb 38                	jmp    c00041ba <dir_find+0x18e>
c0004182:	89 f8                	mov    eax,edi
c0004184:	84 c0                	test   al,al
c0004186:	75 0d                	jne    c0004195 <dir_find+0x169>
c0004188:	89 e8                	mov    eax,ebp
c000418a:	e8 98 de ff ff       	call   c0002027 <sum_sfn>
c000418f:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004193:	74 52                	je     c00041e7 <dir_find+0x1bb>
c0004195:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004199:	75 13                	jne    c00041ae <dir_find+0x182>
c000419b:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000419e:	b9 0b 00 00 00       	mov    ecx,0xb
c00041a3:	89 e8                	mov    eax,ebp
c00041a5:	e8 60 da ff ff       	call   c0001c0a <mem_cmp>
c00041aa:	85 c0                	test   eax,eax
c00041ac:	74 39                	je     c00041e7 <dir_find+0x1bb>
c00041ae:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041b5:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ba:	31 d2                	xor    edx,edx
c00041bc:	89 d8                	mov    eax,ebx
c00041be:	e8 5c f4 ff ff       	call   c000361f <dir_next>
c00041c3:	85 c0                	test   eax,eax
c00041c5:	0f 84 25 ff ff ff    	je     c00040f0 <dir_find+0xc4>
c00041cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00041ce:	eb 17                	jmp    c00041e7 <dir_find+0x1bb>
c00041d0:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00041d7:	eb 0e                	jmp    c00041e7 <dir_find+0x1bb>
c00041d9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041dc:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00041e1:	0f 85 75 fe ff ff    	jne    c000405c <dir_find+0x30>
c00041e7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00041ea:	83 c4 1c             	add    esp,0x1c
c00041ed:	5b                   	pop    ebx
c00041ee:	5e                   	pop    esi
c00041ef:	5f                   	pop    edi
c00041f0:	5d                   	pop    ebp
c00041f1:	c3                   	ret    

c00041f2 <dir_register>:
c00041f2:	55                   	push   ebp
c00041f3:	57                   	push   edi
c00041f4:	56                   	push   esi
c00041f5:	be 06 00 00 00       	mov    esi,0x6
c00041fa:	53                   	push   ebx
c00041fb:	83 ec 6c             	sub    esp,0x6c
c00041fe:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c0004202:	0f 85 62 02 00 00    	jne    c000446a <dir_register+0x278>
c0004208:	8b 28                	mov    ebp,DWORD PTR [eax]
c000420a:	31 ff                	xor    edi,edi
c000420c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000420f:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004214:	74 03                	je     c0004219 <dir_register+0x27>
c0004216:	47                   	inc    edi
c0004217:	eb f6                	jmp    c000420f <dir_register+0x1d>
c0004219:	89 c3                	mov    ebx,eax
c000421b:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000421f:	0f 85 e1 00 00 00    	jne    c0004306 <dir_register+0x114>
c0004225:	83 c7 0e             	add    edi,0xe
c0004228:	b9 0f 00 00 00       	mov    ecx,0xf
c000422d:	89 f8                	mov    eax,edi
c000422f:	31 d2                	xor    edx,edx
c0004231:	f7 f1                	div    ecx
c0004233:	8d 50 02             	lea    edx,[eax+0x2]
c0004236:	89 c7                	mov    edi,eax
c0004238:	89 d8                	mov    eax,ebx
c000423a:	e8 12 f8 ff ff       	call   c0003a51 <dir_alloc>
c000423f:	89 c6                	mov    esi,eax
c0004241:	85 c0                	test   eax,eax
c0004243:	0f 85 21 02 00 00    	jne    c000446a <dir_register+0x278>
c0004249:	81 c7 01 00 00 08    	add    edi,0x8000001
c000424f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004252:	c1 e7 05             	shl    edi,0x5
c0004255:	29 f8                	sub    eax,edi
c0004257:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000425a:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000425d:	a8 04                	test   al,0x4
c000425f:	0f 84 91 00 00 00    	je     c00042f6 <dir_register+0x104>
c0004265:	83 e0 fb             	and    eax,0xfffffffb
c0004268:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000426b:	89 d8                	mov    eax,ebx
c000426d:	e8 25 ec ff ff       	call   c0002e97 <fill_first_frag>
c0004272:	85 c0                	test   eax,eax
c0004274:	0f 85 ee 01 00 00    	jne    c0004468 <dir_register+0x276>
c000427a:	83 c9 ff             	or     ecx,0xffffffff
c000427d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004280:	89 d8                	mov    eax,ebx
c0004282:	e8 db eb ff ff       	call   c0002e62 <fill_last_frag>
c0004287:	85 c0                	test   eax,eax
c0004289:	0f 85 d9 01 00 00    	jne    c0004468 <dir_register+0x276>
c000428f:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004293:	74 61                	je     c00042f6 <dir_register+0x104>
c0004295:	89 da                	mov    edx,ebx
c0004297:	8d 44 24 14          	lea    eax,[esp+0x14]
c000429b:	e8 ea f5 ff ff       	call   c000388a <load_obj_xdir>
c00042a0:	85 c0                	test   eax,eax
c00042a2:	0f 85 c0 01 00 00    	jne    c0004468 <dir_register+0x276>
c00042a8:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00042ac:	31 c9                	xor    ecx,ecx
c00042ae:	c1 e2 09             	shl    edx,0x9
c00042b1:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00042b4:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00042b7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00042ba:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00042bd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042c0:	83 c0 38             	add    eax,0x38
c00042c3:	e8 1c d9 ff ff       	call   c0001be4 <st_qword>
c00042c8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042cb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00042ce:	83 c0 28             	add    eax,0x28
c00042d1:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00042d4:	e8 0b d9 ff ff       	call   c0001be4 <st_qword>
c00042d9:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00042dc:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00042df:	83 c8 01             	or     eax,0x1
c00042e2:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00042e5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00042e9:	e8 db f7 ff ff       	call   c0003ac9 <store_xdir>
c00042ee:	85 c0                	test   eax,eax
c00042f0:	0f 85 72 01 00 00    	jne    c0004468 <dir_register+0x276>
c00042f6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042f9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042fc:	e8 c1 fb ff ff       	call   c0003ec2 <create_xdir>
c0004301:	e9 64 01 00 00       	jmp    c000446a <dir_register+0x278>
c0004306:	8d 40 3c             	lea    eax,[eax+0x3c]
c0004309:	b9 0c 00 00 00       	mov    ecx,0xc
c000430e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004312:	89 c2                	mov    edx,eax
c0004314:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004318:	e8 cd d8 ff ff       	call   c0001bea <mem_cpy>
c000431d:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004322:	74 58                	je     c000437c <dir_register+0x18a>
c0004324:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004328:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004330:	83 ec 0c             	sub    esp,0xc
c0004333:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004336:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000433a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000433e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004342:	e8 24 dc ff ff       	call   c0001f6b <gen_numname>
c0004347:	89 d8                	mov    eax,ebx
c0004349:	e8 de fc ff ff       	call   c000402c <dir_find>
c000434e:	83 c4 10             	add    esp,0x10
c0004351:	89 c6                	mov    esi,eax
c0004353:	85 c0                	test   eax,eax
c0004355:	75 15                	jne    c000436c <dir_register+0x17a>
c0004357:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000435b:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004360:	75 ce                	jne    c0004330 <dir_register+0x13e>
c0004362:	be 07 00 00 00       	mov    esi,0x7
c0004367:	e9 fe 00 00 00       	jmp    c000446a <dir_register+0x278>
c000436c:	83 f8 04             	cmp    eax,0x4
c000436f:	0f 85 f5 00 00 00    	jne    c000446a <dir_register+0x278>
c0004375:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004379:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000437c:	b9 01 00 00 00       	mov    ecx,0x1
c0004381:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004386:	74 0f                	je     c0004397 <dir_register+0x1a5>
c0004388:	b9 0d 00 00 00       	mov    ecx,0xd
c000438d:	8d 47 0c             	lea    eax,[edi+0xc]
c0004390:	31 d2                	xor    edx,edx
c0004392:	f7 f1                	div    ecx
c0004394:	8d 48 01             	lea    ecx,[eax+0x1]
c0004397:	89 ca                	mov    edx,ecx
c0004399:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000439d:	89 d8                	mov    eax,ebx
c000439f:	e8 ad f6 ff ff       	call   c0003a51 <dir_alloc>
c00043a4:	89 c6                	mov    esi,eax
c00043a6:	85 c0                	test   eax,eax
c00043a8:	0f 85 bc 00 00 00    	jne    c000446a <dir_register+0x278>
c00043ae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043b2:	49                   	dec    ecx
c00043b3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00043b7:	74 6a                	je     c0004423 <dir_register+0x231>
c00043b9:	89 c8                	mov    eax,ecx
c00043bb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043be:	c1 e0 05             	shl    eax,0x5
c00043c1:	29 c2                	sub    edx,eax
c00043c3:	89 d8                	mov    eax,ebx
c00043c5:	e8 fd ec ff ff       	call   c00030c7 <dir_sdi>
c00043ca:	89 c6                	mov    esi,eax
c00043cc:	85 c0                	test   eax,eax
c00043ce:	0f 85 96 00 00 00    	jne    c000446a <dir_register+0x278>
c00043d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00043d8:	e8 4a dc ff ff       	call   c0002027 <sum_sfn>
c00043dd:	0f b6 f8             	movzx  edi,al
c00043e0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00043e3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00043e6:	89 e8                	mov    eax,ebp
c00043e8:	e8 5c df ff ff       	call   c0002349 <move_window>
c00043ed:	89 c6                	mov    esi,eax
c00043ef:	85 c0                	test   eax,eax
c00043f1:	75 77                	jne    c000446a <dir_register+0x278>
c00043f3:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00043f8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00043fb:	83 ec 0c             	sub    esp,0xc
c00043fe:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0004401:	57                   	push   edi
c0004402:	e8 e0 da ff ff       	call   c0001ee7 <put_lfn>
c0004407:	31 d2                	xor    edx,edx
c0004409:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000440d:	89 d8                	mov    eax,ebx
c000440f:	e8 0b f2 ff ff       	call   c000361f <dir_next>
c0004414:	83 c4 10             	add    esp,0x10
c0004417:	89 c6                	mov    esi,eax
c0004419:	85 c0                	test   eax,eax
c000441b:	75 4d                	jne    c000446a <dir_register+0x278>
c000441d:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004421:	75 bd                	jne    c00043e0 <dir_register+0x1ee>
c0004423:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004426:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004429:	89 e8                	mov    eax,ebp
c000442b:	e8 19 df ff ff       	call   c0002349 <move_window>
c0004430:	89 c6                	mov    esi,eax
c0004432:	85 c0                	test   eax,eax
c0004434:	75 34                	jne    c000446a <dir_register+0x278>
c0004436:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004439:	b9 20 00 00 00       	mov    ecx,0x20
c000443e:	31 d2                	xor    edx,edx
c0004440:	e8 ba d7 ff ff       	call   c0001bff <mem_set>
c0004445:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004448:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000444c:	b9 0b 00 00 00       	mov    ecx,0xb
c0004451:	e8 94 d7 ff ff       	call   c0001bea <mem_cpy>
c0004456:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004459:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000445c:	83 e0 18             	and    eax,0x18
c000445f:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004462:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004466:	eb 02                	jmp    c000446a <dir_register+0x278>
c0004468:	89 c6                	mov    esi,eax
c000446a:	83 c4 6c             	add    esp,0x6c
c000446d:	89 f0                	mov    eax,esi
c000446f:	5b                   	pop    ebx
c0004470:	5e                   	pop    esi
c0004471:	5f                   	pop    edi
c0004472:	5d                   	pop    ebp
c0004473:	c3                   	ret    

c0004474 <sync_fs>:
c0004474:	56                   	push   esi
c0004475:	53                   	push   ebx
c0004476:	53                   	push   ebx
c0004477:	89 c3                	mov    ebx,eax
c0004479:	e8 37 de ff ff       	call   c00022b5 <sync_window>
c000447e:	85 c0                	test   eax,eax
c0004480:	0f 85 b1 00 00 00    	jne    c0004537 <sync_fs+0xc3>
c0004486:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004489:	0f 85 8e 00 00 00    	jne    c000451d <sync_fs+0xa9>
c000448f:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004493:	0f 85 84 00 00 00    	jne    c000451d <sync_fs+0xa9>
c0004499:	b9 00 02 00 00       	mov    ecx,0x200
c000449e:	8d 73 54             	lea    esi,[ebx+0x54]
c00044a1:	31 d2                	xor    edx,edx
c00044a3:	89 f0                	mov    eax,esi
c00044a5:	e8 55 d7 ff ff       	call   c0001bff <mem_set>
c00044aa:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00044b0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00044b5:	e8 23 d7 ff ff       	call   c0001bdd <st_word>
c00044ba:	ba 52 52 61 41       	mov    edx,0x41615252
c00044bf:	89 f0                	mov    eax,esi
c00044c1:	e8 1b d7 ff ff       	call   c0001be1 <st_dword>
c00044c6:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00044cc:	ba 72 72 41 61       	mov    edx,0x61417272
c00044d1:	e8 0b d7 ff ff       	call   c0001be1 <st_dword>
c00044d6:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00044d9:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00044df:	e8 fd d6 ff ff       	call   c0001be1 <st_dword>
c00044e4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00044e7:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00044ed:	e8 ef d6 ff ff       	call   c0001be1 <st_dword>
c00044f2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00044f5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044f8:	83 c0 01             	add    eax,0x1
c00044fb:	83 d2 00             	adc    edx,0x0
c00044fe:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c0004501:	83 ec 0c             	sub    esp,0xc
c0004504:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c0004507:	6a 01                	push   0x1
c0004509:	52                   	push   edx
c000450a:	50                   	push   eax
c000450b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000450f:	56                   	push   esi
c0004510:	50                   	push   eax
c0004511:	e8 20 d6 ff ff       	call   c0001b36 <disk_write>
c0004516:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000451a:	83 c4 20             	add    esp,0x20
c000451d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004521:	51                   	push   ecx
c0004522:	6a 00                	push   0x0
c0004524:	6a 00                	push   0x0
c0004526:	50                   	push   eax
c0004527:	e8 20 d6 ff ff       	call   c0001b4c <disk_ioctl>
c000452c:	83 c4 10             	add    esp,0x10
c000452f:	85 c0                	test   eax,eax
c0004531:	0f 95 c0             	setne  al
c0004534:	0f b6 c0             	movzx  eax,al
c0004537:	5a                   	pop    edx
c0004538:	5b                   	pop    ebx
c0004539:	5e                   	pop    esi
c000453a:	c3                   	ret    

c000453b <create_partition>:
c000453b:	55                   	push   ebp
c000453c:	0f b6 c0             	movzx  eax,al
c000453f:	57                   	push   edi
c0004540:	56                   	push   esi
c0004541:	53                   	push   ebx
c0004542:	83 ec 60             	sub    esp,0x60
c0004545:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004549:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000454d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004551:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004555:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004559:	50                   	push   eax
c000455a:	6a 01                	push   0x1
c000455c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004560:	e8 e7 d5 ff ff       	call   c0001b4c <disk_ioctl>
c0004565:	83 c4 10             	add    esp,0x10
c0004568:	85 c0                	test   eax,eax
c000456a:	74 0a                	je     c0004576 <create_partition+0x3b>
c000456c:	b8 01 00 00 00       	mov    eax,0x1
c0004571:	e9 67 05 00 00       	jmp    c0004add <create_partition+0x5a2>
c0004576:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000457a:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000457e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004582:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004586:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000458b:	0f 86 ed 03 00 00    	jbe    c000497e <create_partition+0x443>
c0004591:	83 c0 df             	add    eax,0xffffffdf
c0004594:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000459c:	83 d2 ff             	adc    edx,0xffffffff
c000459f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00045a3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00045a7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00045ab:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00045af:	83 c0 bd             	add    eax,0xffffffbd
c00045b2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00045b9:	83 d2 ff             	adc    edx,0xffffffff
c00045bc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00045c0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00045c4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045cc:	be 22 00 00 00       	mov    esi,0x22
c00045d1:	31 ff                	xor    edi,edi
c00045d3:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00045db:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00045e3:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00045eb:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00045ef:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045f5:	75 0e                	jne    c0004605 <create_partition+0xca>
c00045f7:	b9 00 02 00 00       	mov    ecx,0x200
c00045fc:	31 d2                	xor    edx,edx
c00045fe:	89 d8                	mov    eax,ebx
c0004600:	e8 fa d5 ff ff       	call   c0001bff <mem_set>
c0004605:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004609:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000460d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004611:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004614:	0f 84 23 01 00 00    	je     c000473d <create_partition+0x202>
c000461a:	89 f0                	mov    eax,esi
c000461c:	89 fa                	mov    edx,edi
c000461e:	05 ff 07 00 00       	add    eax,0x7ff
c0004623:	83 d2 00             	adc    edx,0x0
c0004626:	89 c1                	mov    ecx,eax
c0004628:	89 d7                	mov    edi,edx
c000462a:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004630:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004634:	89 ce                	mov    esi,ecx
c0004636:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000463a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000463e:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004642:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004645:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004649:	89 04 24             	mov    DWORD PTR [esp],eax
c000464c:	b8 64 00 00 00       	mov    eax,0x64
c0004651:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004654:	b8 00 00 00 00       	mov    eax,0x0
c0004659:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000465d:	72 41                	jb     c00046a0 <create_partition+0x165>
c000465f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004663:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004667:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000466b:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004670:	01 c1                	add    ecx,eax
c0004672:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004676:	f7 24 24             	mul    DWORD PTR [esp]
c0004679:	6a 00                	push   0x0
c000467b:	01 ca                	add    edx,ecx
c000467d:	6a 64                	push   0x64
c000467f:	52                   	push   edx
c0004680:	50                   	push   eax
c0004681:	e8 5a e9 01 00       	call   c0022fe0 <__udivdi3>
c0004686:	83 c4 10             	add    esp,0x10
c0004689:	05 ff 07 00 00       	add    eax,0x7ff
c000468e:	83 d2 00             	adc    edx,0x0
c0004691:	89 c1                	mov    ecx,eax
c0004693:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004697:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000469d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00046a0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00046a3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00046a7:	01 f0                	add    eax,esi
c00046a9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00046ad:	11 fa                	adc    edx,edi
c00046af:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00046b3:	19 d1                	sbb    ecx,edx
c00046b5:	73 2e                	jae    c00046e5 <create_partition+0x1aa>
c00046b7:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00046bb:	89 f8                	mov    eax,edi
c00046bd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00046c4:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00046c8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046d0:	73 6b                	jae    c000473d <create_partition+0x202>
c00046d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00046d6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00046da:	29 f0                	sub    eax,esi
c00046dc:	19 fa                	sbb    edx,edi
c00046de:	89 04 24             	mov    DWORD PTR [esp],eax
c00046e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00046e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046e9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046ec:	74 4f                	je     c000473d <create_partition+0x202>
c00046ee:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00046f1:	b9 10 00 00 00       	mov    ecx,0x10
c00046f6:	ba d0 40 02 c0       	mov    edx,0xc00240d0
c00046fb:	e8 ea d4 ff ff       	call   c0001bea <mem_cpy>
c0004700:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c0004704:	b9 10 00 00 00       	mov    ecx,0x10
c0004709:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000470d:	e8 2c db ff ff       	call   c000223e <make_rand>
c0004712:	89 f2                	mov    edx,esi
c0004714:	89 f9                	mov    ecx,edi
c0004716:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000471a:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c000471e:	e8 c1 d4 ff ff       	call   c0001be4 <st_qword>
c0004723:	03 34 24             	add    esi,DWORD PTR [esp]
c0004726:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000472a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000472e:	89 f2                	mov    edx,esi
c0004730:	89 f9                	mov    ecx,edi
c0004732:	83 c2 ff             	add    edx,0xffffffff
c0004735:	83 d1 ff             	adc    ecx,0xffffffff
c0004738:	e8 a7 d4 ff ff       	call   c0001be4 <st_qword>
c000473d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004741:	83 e8 80             	sub    eax,0xffffff80
c0004744:	89 c5                	mov    ebp,eax
c0004746:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000474a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004750:	75 6b                	jne    c00047bd <create_partition+0x282>
c0004752:	45                   	inc    ebp
c0004753:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004757:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000475c:	e8 39 da ff ff       	call   c000219a <crc32>
c0004761:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004767:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000476b:	75 e5                	jne    c0004752 <create_partition+0x217>
c000476d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004771:	31 d2                	xor    edx,edx
c0004773:	83 ec 0c             	sub    esp,0xc
c0004776:	c1 ed 09             	shr    ebp,0x9
c0004779:	6a 01                	push   0x1
c000477b:	8d 45 02             	lea    eax,[ebp+0x2]
c000477e:	52                   	push   edx
c000477f:	50                   	push   eax
c0004780:	53                   	push   ebx
c0004781:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004785:	e8 ac d3 ff ff       	call   c0001b36 <disk_write>
c000478a:	83 c4 20             	add    esp,0x20
c000478d:	85 c0                	test   eax,eax
c000478f:	0f 85 d7 fd ff ff    	jne    c000456c <create_partition+0x31>
c0004795:	83 ec 0c             	sub    esp,0xc
c0004798:	31 d2                	xor    edx,edx
c000479a:	6a 01                	push   0x1
c000479c:	89 e8                	mov    eax,ebp
c000479e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00047a2:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00047a6:	52                   	push   edx
c00047a7:	50                   	push   eax
c00047a8:	53                   	push   ebx
c00047a9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00047ad:	e8 84 d3 ff ff       	call   c0001b36 <disk_write>
c00047b2:	83 c4 20             	add    esp,0x20
c00047b5:	85 c0                	test   eax,eax
c00047b7:	0f 85 af fd ff ff    	jne    c000456c <create_partition+0x31>
c00047bd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00047c1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00047c5:	3d 00 40 00 00       	cmp    eax,0x4000
c00047ca:	74 0d                	je     c00047d9 <create_partition+0x29e>
c00047cc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00047d0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00047d4:	e9 12 fe ff ff       	jmp    c00045eb <create_partition+0xb0>
c00047d9:	31 d2                	xor    edx,edx
c00047db:	b9 00 02 00 00       	mov    ecx,0x200
c00047e0:	89 d8                	mov    eax,ebx
c00047e2:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00047e5:	e8 15 d4 ff ff       	call   c0001bff <mem_set>
c00047ea:	8d 7b 48             	lea    edi,[ebx+0x48]
c00047ed:	b9 10 00 00 00       	mov    ecx,0x10
c00047f2:	ba c0 3f 02 c0       	mov    edx,0xc0023fc0
c00047f7:	89 d8                	mov    eax,ebx
c00047f9:	e8 ec d3 ff ff       	call   c0001bea <mem_cpy>
c00047fe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0004802:	8d 43 58             	lea    eax,[ebx+0x58]
c0004805:	f7 d2                	not    edx
c0004807:	e8 d5 d3 ff ff       	call   c0001be1 <st_dword>
c000480c:	8d 43 18             	lea    eax,[ebx+0x18]
c000480f:	31 c9                	xor    ecx,ecx
c0004811:	89 04 24             	mov    DWORD PTR [esp],eax
c0004814:	ba 01 00 00 00       	mov    edx,0x1
c0004819:	e8 c6 d3 ff ff       	call   c0001be4 <st_qword>
c000481e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004822:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004826:	83 c2 ff             	add    edx,0xffffffff
c0004829:	89 e8                	mov    eax,ebp
c000482b:	83 d1 ff             	adc    ecx,0xffffffff
c000482e:	e8 b1 d3 ff ff       	call   c0001be4 <st_qword>
c0004833:	31 c9                	xor    ecx,ecx
c0004835:	8d 43 28             	lea    eax,[ebx+0x28]
c0004838:	ba 22 00 00 00       	mov    edx,0x22
c000483d:	e8 a2 d3 ff ff       	call   c0001be4 <st_qword>
c0004842:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004846:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000484a:	83 c2 de             	add    edx,0xffffffde
c000484d:	8d 43 30             	lea    eax,[ebx+0x30]
c0004850:	83 d1 ff             	adc    ecx,0xffffffff
c0004853:	31 f6                	xor    esi,esi
c0004855:	e8 8a d3 ff ff       	call   c0001be4 <st_qword>
c000485a:	8d 43 54             	lea    eax,[ebx+0x54]
c000485d:	ba 80 00 00 00       	mov    edx,0x80
c0004862:	e8 7a d3 ff ff       	call   c0001be1 <st_dword>
c0004867:	8d 43 50             	lea    eax,[ebx+0x50]
c000486a:	ba 80 00 00 00       	mov    edx,0x80
c000486f:	e8 6d d3 ff ff       	call   c0001be1 <st_dword>
c0004874:	ba 02 00 00 00       	mov    edx,0x2
c0004879:	89 f8                	mov    eax,edi
c000487b:	e8 61 d3 ff ff       	call   c0001be1 <st_dword>
c0004880:	8d 53 38             	lea    edx,[ebx+0x38]
c0004883:	b9 10 00 00 00       	mov    ecx,0x10
c0004888:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000488c:	e8 ad d9 ff ff       	call   c000223e <make_rand>
c0004891:	83 c8 ff             	or     eax,0xffffffff
c0004894:	46                   	inc    esi
c0004895:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c000489a:	e8 fb d8 ff ff       	call   c000219a <crc32>
c000489f:	83 fe 5c             	cmp    esi,0x5c
c00048a2:	75 f0                	jne    c0004894 <create_partition+0x359>
c00048a4:	f7 d0                	not    eax
c00048a6:	8d 73 10             	lea    esi,[ebx+0x10]
c00048a9:	89 c2                	mov    edx,eax
c00048ab:	89 f0                	mov    eax,esi
c00048ad:	e8 2f d3 ff ff       	call   c0001be1 <st_dword>
c00048b2:	83 ec 0c             	sub    esp,0xc
c00048b5:	6a 01                	push   0x1
c00048b7:	6a 00                	push   0x0
c00048b9:	6a 01                	push   0x1
c00048bb:	53                   	push   ebx
c00048bc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048c0:	e8 71 d2 ff ff       	call   c0001b36 <disk_write>
c00048c5:	83 c4 20             	add    esp,0x20
c00048c8:	85 c0                	test   eax,eax
c00048ca:	0f 85 9c fc ff ff    	jne    c000456c <create_partition+0x31>
c00048d0:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048d4:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048d8:	83 c2 ff             	add    edx,0xffffffff
c00048db:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048de:	83 d1 ff             	adc    ecx,0xffffffff
c00048e1:	e8 fe d2 ff ff       	call   c0001be4 <st_qword>
c00048e6:	ba 01 00 00 00       	mov    edx,0x1
c00048eb:	31 c9                	xor    ecx,ecx
c00048ed:	89 e8                	mov    eax,ebp
c00048ef:	e8 f0 d2 ff ff       	call   c0001be4 <st_qword>
c00048f4:	89 f8                	mov    eax,edi
c00048f6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00048fa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00048fe:	31 ff                	xor    edi,edi
c0004900:	e8 df d2 ff ff       	call   c0001be4 <st_qword>
c0004905:	89 f0                	mov    eax,esi
c0004907:	31 d2                	xor    edx,edx
c0004909:	e8 d3 d2 ff ff       	call   c0001be1 <st_dword>
c000490e:	83 c8 ff             	or     eax,0xffffffff
c0004911:	47                   	inc    edi
c0004912:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004917:	e8 7e d8 ff ff       	call   c000219a <crc32>
c000491c:	83 ff 5c             	cmp    edi,0x5c
c000491f:	75 f0                	jne    c0004911 <create_partition+0x3d6>
c0004921:	f7 d0                	not    eax
c0004923:	89 c2                	mov    edx,eax
c0004925:	89 f0                	mov    eax,esi
c0004927:	e8 b5 d2 ff ff       	call   c0001be1 <st_dword>
c000492c:	83 ec 0c             	sub    esp,0xc
c000492f:	6a 01                	push   0x1
c0004931:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004935:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004939:	83 c0 ff             	add    eax,0xffffffff
c000493c:	83 d2 ff             	adc    edx,0xffffffff
c000493f:	52                   	push   edx
c0004940:	50                   	push   eax
c0004941:	53                   	push   ebx
c0004942:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004946:	e8 eb d1 ff ff       	call   c0001b36 <disk_write>
c000494b:	83 c4 20             	add    esp,0x20
c000494e:	85 c0                	test   eax,eax
c0004950:	0f 85 16 fc ff ff    	jne    c000456c <create_partition+0x31>
c0004956:	31 d2                	xor    edx,edx
c0004958:	89 d8                	mov    eax,ebx
c000495a:	b9 00 02 00 00       	mov    ecx,0x200
c000495f:	e8 9b d2 ff ff       	call   c0001bff <mem_set>
c0004964:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000496a:	b9 10 00 00 00       	mov    ecx,0x10
c000496f:	ba d0 3f 02 c0       	mov    edx,0xc0023fd0
c0004974:	e8 71 d2 ff ff       	call   c0001bea <mem_cpy>
c0004979:	e9 21 01 00 00       	jmp    c0004a9f <create_partition+0x564>
c000497e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004982:	b9 05 00 00 00       	mov    ecx,0x5
c0004987:	89 04 24             	mov    DWORD PTR [esp],eax
c000498a:	bf 08 00 00 00       	mov    edi,0x8
c000498f:	89 f8                	mov    eax,edi
c0004991:	31 d2                	xor    edx,edx
c0004993:	0f b6 f0             	movzx  esi,al
c0004996:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004999:	f7 f6                	div    esi
c000499b:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c00049a0:	76 0a                	jbe    c00049ac <create_partition+0x471>
c00049a2:	d1 e7                	shl    edi,1
c00049a4:	49                   	dec    ecx
c00049a5:	75 e8                	jne    c000498f <create_partition+0x454>
c00049a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00049ac:	b9 00 02 00 00       	mov    ecx,0x200
c00049b1:	31 d2                	xor    edx,edx
c00049b3:	89 d8                	mov    eax,ebx
c00049b5:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00049bb:	e8 3f d2 ff ff       	call   c0001bff <mem_set>
c00049c0:	b9 64 00 00 00       	mov    ecx,0x64
c00049c5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049c8:	31 d2                	xor    edx,edx
c00049ca:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00049d2:	f7 f1                	div    ecx
c00049d4:	b9 3f 00 00 00       	mov    ecx,0x3f
c00049d9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00049dd:	89 f8                	mov    eax,edi
c00049df:	0f b6 c0             	movzx  eax,al
c00049e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00049e6:	e9 80 00 00 00       	jmp    c0004a6b <create_partition+0x530>
c00049eb:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049ee:	29 cf                	sub    edi,ecx
c00049f0:	89 ca                	mov    edx,ecx
c00049f2:	89 f0                	mov    eax,esi
c00049f4:	bd 3f 00 00 00       	mov    ebp,0x3f
c00049f9:	e8 e3 d1 ff ff       	call   c0001be1 <st_dword>
c00049fe:	8d 46 04             	lea    eax,[esi+0x4]
c0004a01:	89 fa                	mov    edx,edi
c0004a03:	83 c6 10             	add    esi,0x10
c0004a06:	e8 d6 d1 ff ff       	call   c0001be1 <st_dword>
c0004a0b:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004a0f:	31 d2                	xor    edx,edx
c0004a11:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004a14:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004a18:	89 c8                	mov    eax,ecx
c0004a1a:	01 f9                	add    ecx,edi
c0004a1c:	f7 f5                	div    ebp
c0004a1e:	89 d5                	mov    ebp,edx
c0004a20:	31 d2                	xor    edx,edx
c0004a22:	45                   	inc    ebp
c0004a23:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a27:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004a2a:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004a2d:	89 c2                	mov    edx,eax
c0004a2f:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004a32:	c1 ea 02             	shr    edx,0x2
c0004a35:	83 e2 c0             	and    edx,0xffffffc0
c0004a38:	09 ea                	or     edx,ebp
c0004a3a:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004a3f:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004a42:	31 d2                	xor    edx,edx
c0004a44:	f7 f5                	div    ebp
c0004a46:	89 d7                	mov    edi,edx
c0004a48:	31 d2                	xor    edx,edx
c0004a4a:	47                   	inc    edi
c0004a4b:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a4f:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004a52:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004a55:	89 c5                	mov    ebp,eax
c0004a57:	c1 ed 02             	shr    ebp,0x2
c0004a5a:	83 e5 c0             	and    ebp,0xffffffc0
c0004a5d:	09 ef                	or     edi,ebp
c0004a5f:	89 fa                	mov    edx,edi
c0004a61:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004a64:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004a69:	74 34                	je     c0004a9f <create_partition+0x564>
c0004a6b:	85 c9                	test   ecx,ecx
c0004a6d:	74 30                	je     c0004a9f <create_partition+0x564>
c0004a6f:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004a72:	76 2b                	jbe    c0004a9f <create_partition+0x564>
c0004a74:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004a78:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004a7c:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004a7f:	83 ff 64             	cmp    edi,0x64
c0004a82:	76 4b                	jbe    c0004acf <create_partition+0x594>
c0004a84:	89 f8                	mov    eax,edi
c0004a86:	01 c8                	add    eax,ecx
c0004a88:	0f 82 5d ff ff ff    	jb     c00049eb <create_partition+0x4b0>
c0004a8e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004a91:	0f 87 54 ff ff ff    	ja     c00049eb <create_partition+0x4b0>
c0004a97:	85 ff                	test   edi,edi
c0004a99:	0f 85 51 ff ff ff    	jne    c00049f0 <create_partition+0x4b5>
c0004a9f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004aa5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004aaa:	e8 2e d1 ff ff       	call   c0001bdd <st_word>
c0004aaf:	83 ec 0c             	sub    esp,0xc
c0004ab2:	6a 01                	push   0x1
c0004ab4:	6a 00                	push   0x0
c0004ab6:	6a 00                	push   0x0
c0004ab8:	53                   	push   ebx
c0004ab9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004abd:	e8 74 d0 ff ff       	call   c0001b36 <disk_write>
c0004ac2:	83 c4 20             	add    esp,0x20
c0004ac5:	85 c0                	test   eax,eax
c0004ac7:	0f 95 c0             	setne  al
c0004aca:	0f b6 c0             	movzx  eax,al
c0004acd:	eb 0e                	jmp    c0004add <create_partition+0x5a2>
c0004acf:	74 07                	je     c0004ad8 <create_partition+0x59d>
c0004ad1:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004ad6:	eb ac                	jmp    c0004a84 <create_partition+0x549>
c0004ad8:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004adb:	eb a7                	jmp    c0004a84 <create_partition+0x549>
c0004add:	83 c4 5c             	add    esp,0x5c
c0004ae0:	5b                   	pop    ebx
c0004ae1:	5e                   	pop    esi
c0004ae2:	5f                   	pop    edi
c0004ae3:	5d                   	pop    ebp
c0004ae4:	c3                   	ret    

c0004ae5 <get_fileinfo>:
c0004ae5:	55                   	push   ebp
c0004ae6:	57                   	push   edi
c0004ae7:	56                   	push   esi
c0004ae8:	53                   	push   ebx
c0004ae9:	83 ec 1c             	sub    esp,0x1c
c0004aec:	8b 30                	mov    esi,DWORD PTR [eax]
c0004aee:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004af2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004af6:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004af9:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004afc:	0f 84 dc 01 00 00    	je     c0004cde <get_fileinfo+0x1f9>
c0004b02:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004b05:	75 0f                	jne    c0004b16 <get_fileinfo+0x31>
c0004b07:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004b0a:	83 c4 1c             	add    esp,0x1c
c0004b0d:	5b                   	pop    ebx
c0004b0e:	5e                   	pop    esi
c0004b0f:	5f                   	pop    edi
c0004b10:	5d                   	pop    ebp
c0004b11:	e9 58 d5 ff ff       	jmp    c000206e <get_xfileinfo>
c0004b16:	89 d3                	mov    ebx,edx
c0004b18:	89 c6                	mov    esi,eax
c0004b1a:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004b1e:	74 6a                	je     c0004b8a <get_fileinfo+0xa5>
c0004b20:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004b28:	31 ed                	xor    ebp,ebp
c0004b2a:	31 ff                	xor    edi,edi
c0004b2c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004b30:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b34:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004b37:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004b3b:	66 85 d2             	test   dx,dx
c0004b3e:	74 3e                	je     c0004b7e <get_fileinfo+0x99>
c0004b40:	66 85 ed             	test   bp,bp
c0004b43:	75 0c                	jne    c0004b51 <get_fileinfo+0x6c>
c0004b45:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004b4b:	66 3d ff 07          	cmp    ax,0x7ff
c0004b4f:	76 22                	jbe    c0004b73 <get_fileinfo+0x8e>
c0004b51:	b9 ff 00 00 00       	mov    ecx,0xff
c0004b56:	89 e8                	mov    eax,ebp
c0004b58:	29 f9                	sub    ecx,edi
c0004b5a:	c1 e0 10             	shl    eax,0x10
c0004b5d:	09 d0                	or     eax,edx
c0004b5f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004b63:	e8 a3 d1 ff ff       	call   c0001d0b <put_utf>
c0004b68:	84 c0                	test   al,al
c0004b6a:	74 10                	je     c0004b7c <get_fileinfo+0x97>
c0004b6c:	0f b6 c0             	movzx  eax,al
c0004b6f:	31 d2                	xor    edx,edx
c0004b71:	01 c7                	add    edi,eax
c0004b73:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004b78:	89 d5                	mov    ebp,edx
c0004b7a:	eb b0                	jmp    c0004b2c <get_fileinfo+0x47>
c0004b7c:	31 ff                	xor    edi,edi
c0004b7e:	66 85 ed             	test   bp,bp
c0004b81:	74 02                	je     c0004b85 <get_fileinfo+0xa0>
c0004b83:	31 ff                	xor    edi,edi
c0004b85:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004b8a:	31 ff                	xor    edi,edi
c0004b8c:	31 c9                	xor    ecx,ecx
c0004b8e:	83 f9 0a             	cmp    ecx,0xa
c0004b91:	0f 87 ad 00 00 00    	ja     c0004c44 <get_fileinfo+0x15f>
c0004b97:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b9a:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004b9d:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004ba1:	66 83 fa 20          	cmp    dx,0x20
c0004ba5:	0f 84 92 00 00 00    	je     c0004c3d <get_fileinfo+0x158>
c0004bab:	66 83 fa 05          	cmp    dx,0x5
c0004baf:	75 05                	jne    c0004bb6 <get_fileinfo+0xd1>
c0004bb1:	ba e5 00 00 00       	mov    edx,0xe5
c0004bb6:	83 ff 0b             	cmp    edi,0xb
c0004bb9:	77 0b                	ja     c0004bc6 <get_fileinfo+0xe1>
c0004bbb:	83 fd 09             	cmp    ebp,0x9
c0004bbe:	75 06                	jne    c0004bc6 <get_fileinfo+0xe1>
c0004bc0:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004bc5:	47                   	inc    edi
c0004bc6:	0f b7 c2             	movzx  eax,dx
c0004bc9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bcd:	e8 6d d0 ff ff       	call   c0001c3f <dbc_1st>
c0004bd2:	85 c0                	test   eax,eax
c0004bd4:	74 2f                	je     c0004c05 <get_fileinfo+0x120>
c0004bd6:	83 fd 08             	cmp    ebp,0x8
c0004bd9:	74 2a                	je     c0004c05 <get_fileinfo+0x120>
c0004bdb:	83 fd 0b             	cmp    ebp,0xb
c0004bde:	74 25                	je     c0004c05 <get_fileinfo+0x120>
c0004be0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004be3:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004be7:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004beb:	e8 52 d0 ff ff       	call   c0001c42 <dbc_2nd>
c0004bf0:	85 c0                	test   eax,eax
c0004bf2:	74 11                	je     c0004c05 <get_fileinfo+0x120>
c0004bf4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004bf8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004bfd:	c1 e2 08             	shl    edx,0x8
c0004c00:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004c03:	09 c2                	or     edx,eax
c0004c05:	0f b7 d2             	movzx  edx,dx
c0004c08:	50                   	push   eax
c0004c09:	50                   	push   eax
c0004c0a:	68 b5 01 00 00       	push   0x1b5
c0004c0f:	52                   	push   edx
c0004c10:	e8 87 3a 00 00       	call   c000869c <ff_oem2uni>
c0004c15:	83 c4 10             	add    esp,0x10
c0004c18:	66 85 c0             	test   ax,ax
c0004c1b:	75 04                	jne    c0004c21 <get_fileinfo+0x13c>
c0004c1d:	31 ff                	xor    edi,edi
c0004c1f:	eb 23                	jmp    c0004c44 <get_fileinfo+0x15f>
c0004c21:	b9 0c 00 00 00       	mov    ecx,0xc
c0004c26:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004c2a:	29 f9                	sub    ecx,edi
c0004c2c:	0f b7 c0             	movzx  eax,ax
c0004c2f:	e8 d7 d0 ff ff       	call   c0001d0b <put_utf>
c0004c34:	84 c0                	test   al,al
c0004c36:	74 e5                	je     c0004c1d <get_fileinfo+0x138>
c0004c38:	0f b6 c0             	movzx  eax,al
c0004c3b:	01 c7                	add    edi,eax
c0004c3d:	89 e9                	mov    ecx,ebp
c0004c3f:	e9 4a ff ff ff       	jmp    c0004b8e <get_fileinfo+0xa9>
c0004c44:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004c49:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004c4d:	75 54                	jne    c0004ca3 <get_fileinfo+0x1be>
c0004c4f:	85 ff                	test   edi,edi
c0004c51:	75 0b                	jne    c0004c5e <get_fileinfo+0x179>
c0004c53:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004c57:	ba 01 00 00 00       	mov    edx,0x1
c0004c5c:	eb 33                	jmp    c0004c91 <get_fileinfo+0x1ac>
c0004c5e:	b1 08                	mov    cl,0x8
c0004c60:	31 d2                	xor    edx,edx
c0004c62:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004c68:	84 c0                	test   al,al
c0004c6a:	74 25                	je     c0004c91 <get_fileinfo+0x1ac>
c0004c6c:	66 83 f8 2e          	cmp    ax,0x2e
c0004c70:	74 16                	je     c0004c88 <get_fileinfo+0x1a3>
c0004c72:	8d 78 bf             	lea    edi,[eax-0x41]
c0004c75:	66 83 ff 19          	cmp    di,0x19
c0004c79:	77 0f                	ja     c0004c8a <get_fileinfo+0x1a5>
c0004c7b:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004c7e:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004c81:	74 07                	je     c0004c8a <get_fileinfo+0x1a5>
c0004c83:	83 c0 20             	add    eax,0x20
c0004c86:	eb 02                	jmp    c0004c8a <get_fileinfo+0x1a5>
c0004c88:	b1 10                	mov    cl,0x10
c0004c8a:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004c8e:	42                   	inc    edx
c0004c8f:	eb d1                	jmp    c0004c62 <get_fileinfo+0x17d>
c0004c91:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004c96:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c99:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004c9d:	75 04                	jne    c0004ca3 <get_fileinfo+0x1be>
c0004c9f:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004ca3:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ca6:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004ca9:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004cac:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004caf:	83 c0 1c             	add    eax,0x1c
c0004cb2:	e8 c1 ce ff ff       	call   c0001b78 <ld_dword>
c0004cb7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004cbe:	89 03                	mov    DWORD PTR [ebx],eax
c0004cc0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cc3:	83 c0 16             	add    eax,0x16
c0004cc6:	e8 a0 ce ff ff       	call   c0001b6b <ld_word>
c0004ccb:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004ccf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cd2:	83 c0 18             	add    eax,0x18
c0004cd5:	e8 91 ce ff ff       	call   c0001b6b <ld_word>
c0004cda:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004cde:	83 c4 1c             	add    esp,0x1c
c0004ce1:	5b                   	pop    ebx
c0004ce2:	5e                   	pop    esi
c0004ce3:	5f                   	pop    edi
c0004ce4:	5d                   	pop    ebp
c0004ce5:	c3                   	ret    

c0004ce6 <ld_clust.isra.0>:
c0004ce6:	56                   	push   esi
c0004ce7:	89 c6                	mov    esi,eax
c0004ce9:	53                   	push   ebx
c0004cea:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004ced:	89 d3                	mov    ebx,edx
c0004cef:	e8 77 ce ff ff       	call   c0001b6b <ld_word>
c0004cf4:	0f b7 c8             	movzx  ecx,ax
c0004cf7:	89 f0                	mov    eax,esi
c0004cf9:	3c 03                	cmp    al,0x3
c0004cfb:	75 0d                	jne    c0004d0a <ld_clust.isra.0+0x24>
c0004cfd:	8d 43 14             	lea    eax,[ebx+0x14]
c0004d00:	e8 66 ce ff ff       	call   c0001b6b <ld_word>
c0004d05:	c1 e0 10             	shl    eax,0x10
c0004d08:	09 c1                	or     ecx,eax
c0004d0a:	89 c8                	mov    eax,ecx
c0004d0c:	5b                   	pop    ebx
c0004d0d:	5e                   	pop    esi
c0004d0e:	c3                   	ret    

c0004d0f <st_clust.isra.1>:
c0004d0f:	56                   	push   esi
c0004d10:	89 c6                	mov    esi,eax
c0004d12:	53                   	push   ebx
c0004d13:	89 d3                	mov    ebx,edx
c0004d15:	0f b7 d1             	movzx  edx,cx
c0004d18:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004d1b:	e8 bd ce ff ff       	call   c0001bdd <st_word>
c0004d20:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004d23:	75 0f                	jne    c0004d34 <st_clust.isra.1+0x25>
c0004d25:	c1 e9 10             	shr    ecx,0x10
c0004d28:	8d 43 14             	lea    eax,[ebx+0x14]
c0004d2b:	89 ca                	mov    edx,ecx
c0004d2d:	5b                   	pop    ebx
c0004d2e:	5e                   	pop    esi
c0004d2f:	e9 a9 ce ff ff       	jmp    c0001bdd <st_word>
c0004d34:	5b                   	pop    ebx
c0004d35:	5e                   	pop    esi
c0004d36:	c3                   	ret    

c0004d37 <init_alloc_info.isra.2>:
c0004d37:	56                   	push   esi
c0004d38:	53                   	push   ebx
c0004d39:	89 c6                	mov    esi,eax
c0004d3b:	89 d3                	mov    ebx,edx
c0004d3d:	51                   	push   ecx
c0004d3e:	8b 00                	mov    eax,DWORD PTR [eax]
c0004d40:	83 c0 34             	add    eax,0x34
c0004d43:	e8 30 ce ff ff       	call   c0001b78 <ld_dword>
c0004d48:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d4b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d4d:	83 c0 38             	add    eax,0x38
c0004d50:	e8 3b ce ff ff       	call   c0001b90 <ld_qword>
c0004d55:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004d58:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004d5b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d5d:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004d60:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d67:	83 e0 02             	and    eax,0x2
c0004d6a:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004d6d:	5b                   	pop    ebx
c0004d6e:	5b                   	pop    ebx
c0004d6f:	5e                   	pop    esi
c0004d70:	c3                   	ret    

c0004d71 <follow_path>:
c0004d71:	56                   	push   esi
c0004d72:	53                   	push   ebx
c0004d73:	89 c3                	mov    ebx,eax
c0004d75:	83 ec 14             	sub    esp,0x14
c0004d78:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004d7c:	8b 30                	mov    esi,DWORD PTR [eax]
c0004d7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d82:	8a 10                	mov    dl,BYTE PTR [eax]
c0004d84:	80 fa 5c             	cmp    dl,0x5c
c0004d87:	75 07                	jne    c0004d90 <follow_path+0x1f>
c0004d89:	40                   	inc    eax
c0004d8a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d8e:	eb ee                	jmp    c0004d7e <follow_path+0xd>
c0004d90:	80 fa 2f             	cmp    dl,0x2f
c0004d93:	74 f4                	je     c0004d89 <follow_path+0x18>
c0004d95:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004d9c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004da3:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004da6:	77 52                	ja     c0004dfa <follow_path+0x89>
c0004da8:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004dac:	31 d2                	xor    edx,edx
c0004dae:	89 d8                	mov    eax,ebx
c0004db0:	e8 12 e3 ff ff       	call   c00030c7 <dir_sdi>
c0004db5:	eb 7c                	jmp    c0004e33 <follow_path+0xc2>
c0004db7:	89 d8                	mov    eax,ebx
c0004db9:	e8 6e f2 ff ff       	call   c000402c <dir_find>
c0004dbe:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004dc1:	85 c0                	test   eax,eax
c0004dc3:	75 46                	jne    c0004e0b <follow_path+0x9a>
c0004dc5:	80 e2 04             	and    dl,0x4
c0004dc8:	75 69                	jne    c0004e33 <follow_path+0xc2>
c0004dca:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004dce:	74 5e                	je     c0004e2e <follow_path+0xbd>
c0004dd0:	8a 06                	mov    al,BYTE PTR [esi]
c0004dd2:	3c 04                	cmp    al,0x4
c0004dd4:	75 41                	jne    c0004e17 <follow_path+0xa6>
c0004dd6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004dd9:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ddd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004de0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004de3:	30 c0                	xor    al,al
c0004de5:	09 d0                	or     eax,edx
c0004de7:	89 da                	mov    edx,ebx
c0004de9:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004dec:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004def:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004df2:	8d 46 10             	lea    eax,[esi+0x10]
c0004df5:	e8 3d ff ff ff       	call   c0004d37 <init_alloc_info.isra.2>
c0004dfa:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004dfe:	89 d8                	mov    eax,ebx
c0004e00:	e8 a9 ed ff ff       	call   c0003bae <create_name>
c0004e05:	85 c0                	test   eax,eax
c0004e07:	74 ae                	je     c0004db7 <follow_path+0x46>
c0004e09:	eb 28                	jmp    c0004e33 <follow_path+0xc2>
c0004e0b:	83 f8 04             	cmp    eax,0x4
c0004e0e:	75 23                	jne    c0004e33 <follow_path+0xc2>
c0004e10:	80 e2 04             	and    dl,0x4
c0004e13:	74 19                	je     c0004e2e <follow_path+0xbd>
c0004e15:	eb 1c                	jmp    c0004e33 <follow_path+0xc2>
c0004e17:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004e1a:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004e20:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004e24:	e8 bd fe ff ff       	call   c0004ce6 <ld_clust.isra.0>
c0004e29:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e2c:	eb cc                	jmp    c0004dfa <follow_path+0x89>
c0004e2e:	b8 05 00 00 00       	mov    eax,0x5
c0004e33:	83 c4 14             	add    esp,0x14
c0004e36:	5b                   	pop    ebx
c0004e37:	5e                   	pop    esi
c0004e38:	c3                   	ret    

c0004e39 <f_mount>:
c0004e39:	53                   	push   ebx
c0004e3a:	83 ec 18             	sub    esp,0x18
c0004e3d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004e41:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004e45:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e49:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004e4d:	e8 fb d2 ff ff       	call   c000214d <get_ldnumber>
c0004e52:	89 c2                	mov    edx,eax
c0004e54:	b8 0b 00 00 00       	mov    eax,0xb
c0004e59:	85 d2                	test   edx,edx
c0004e5b:	78 39                	js     c0004e96 <f_mount+0x5d>
c0004e5d:	8b 04 95 a0 8b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7460]
c0004e64:	85 c0                	test   eax,eax
c0004e66:	74 03                	je     c0004e6b <f_mount+0x32>
c0004e68:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e6f:	85 c0                	test   eax,eax
c0004e71:	74 03                	je     c0004e76 <f_mount+0x3d>
c0004e73:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e7a:	89 04 95 a0 8b 02 c0 	mov    DWORD PTR [edx*4-0x3ffd7460],eax
c0004e81:	31 c0                	xor    eax,eax
c0004e83:	84 db                	test   bl,bl
c0004e85:	74 0f                	je     c0004e96 <f_mount+0x5d>
c0004e87:	31 c9                	xor    ecx,ecx
c0004e89:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004e8d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e91:	e8 65 d7 ff ff       	call   c00025fb <mount_volume>
c0004e96:	83 c4 18             	add    esp,0x18
c0004e99:	5b                   	pop    ebx
c0004e9a:	c3                   	ret    

c0004e9b <f_open>:
c0004e9b:	55                   	push   ebp
c0004e9c:	bd 09 00 00 00       	mov    ebp,0x9
c0004ea1:	57                   	push   edi
c0004ea2:	56                   	push   esi
c0004ea3:	53                   	push   ebx
c0004ea4:	83 ec 7c             	sub    esp,0x7c
c0004ea7:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004eae:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004eb5:	85 db                	test   ebx,ebx
c0004eb7:	0f 84 10 04 00 00    	je     c00052cd <f_open+0x432>
c0004ebd:	89 fe                	mov    esi,edi
c0004ebf:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004ec3:	83 e6 3f             	and    esi,0x3f
c0004ec6:	89 f0                	mov    eax,esi
c0004ec8:	0f b6 c8             	movzx  ecx,al
c0004ecb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004ed2:	e8 24 d7 ff ff       	call   c00025fb <mount_volume>
c0004ed7:	89 c5                	mov    ebp,eax
c0004ed9:	85 c0                	test   eax,eax
c0004edb:	0f 85 e6 03 00 00    	jne    c00052c7 <f_open+0x42c>
c0004ee1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ee5:	bd 11 00 00 00       	mov    ebp,0x11
c0004eea:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004eee:	83 ec 0c             	sub    esp,0xc
c0004ef1:	68 60 04 00 00       	push   0x460
c0004ef6:	e8 d9 36 00 00       	call   c00085d4 <ff_memalloc>
c0004efb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004eff:	83 c4 10             	add    esp,0x10
c0004f02:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004f07:	0f 84 c0 03 00 00    	je     c00052cd <f_open+0x432>
c0004f0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f11:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004f15:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004f1b:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004f1e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004f21:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004f28:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f2c:	e8 40 fe ff ff       	call   c0004d71 <follow_path>
c0004f31:	89 c5                	mov    ebp,eax
c0004f33:	85 c0                	test   eax,eax
c0004f35:	75 0c                	jne    c0004f43 <f_open+0xa8>
c0004f37:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004f3c:	79 05                	jns    c0004f43 <f_open+0xa8>
c0004f3e:	bd 06 00 00 00       	mov    ebp,0x6
c0004f43:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004f49:	0f 84 84 01 00 00    	je     c00050d3 <f_open+0x238>
c0004f4f:	85 ed                	test   ebp,ebp
c0004f51:	74 20                	je     c0004f73 <f_open+0xd8>
c0004f53:	83 fd 04             	cmp    ebp,0x4
c0004f56:	0f 85 58 03 00 00    	jne    c00052b4 <f_open+0x419>
c0004f5c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f60:	83 ce 08             	or     esi,0x8
c0004f63:	e8 8a f2 ff ff       	call   c00041f2 <dir_register>
c0004f68:	89 c5                	mov    ebp,eax
c0004f6a:	85 c0                	test   eax,eax
c0004f6c:	74 2f                	je     c0004f9d <f_open+0x102>
c0004f6e:	e9 41 03 00 00       	jmp    c00052b4 <f_open+0x419>
c0004f73:	bd 07 00 00 00       	mov    ebp,0x7
c0004f78:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004f7d:	0f 85 31 03 00 00    	jne    c00052b4 <f_open+0x419>
c0004f83:	bd 08 00 00 00       	mov    ebp,0x8
c0004f88:	f7 c7 04 00 00 00    	test   edi,0x4
c0004f8e:	0f 85 20 03 00 00    	jne    c00052b4 <f_open+0x419>
c0004f94:	83 e7 08             	and    edi,0x8
c0004f97:	0f 84 65 01 00 00    	je     c0005102 <f_open+0x267>
c0004f9d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004fa1:	8a 02                	mov    al,BYTE PTR [edx]
c0004fa3:	3c 04                	cmp    al,0x4
c0004fa5:	0f 85 97 00 00 00    	jne    c0005042 <f_open+0x1a7>
c0004fab:	8d 42 10             	lea    eax,[edx+0x10]
c0004fae:	89 13                	mov    DWORD PTR [ebx],edx
c0004fb0:	89 da                	mov    edx,ebx
c0004fb2:	e8 80 fd ff ff       	call   c0004d37 <init_alloc_info.isra.2>
c0004fb7:	31 d2                	xor    edx,edx
c0004fb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fbd:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004fc2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fc5:	83 c0 02             	add    eax,0x2
c0004fc8:	e8 32 cc ff ff       	call   c0001bff <mem_set>
c0004fcd:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004fd2:	31 d2                	xor    edx,edx
c0004fd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fd8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fdb:	83 c0 26             	add    eax,0x26
c0004fde:	e8 1c cc ff ff       	call   c0001bff <mem_set>
c0004fe3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fe7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004fea:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004fee:	ba 00 00 21 50       	mov    edx,0x50210000
c0004ff3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ff6:	83 c0 08             	add    eax,0x8
c0004ff9:	e8 e3 cb ff ff       	call   c0001be1 <st_dword>
c0004ffe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005002:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005005:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0005009:	8d 44 24 24          	lea    eax,[esp+0x24]
c000500d:	e8 b7 ea ff ff       	call   c0003ac9 <store_xdir>
c0005012:	89 c5                	mov    ebp,eax
c0005014:	85 c0                	test   eax,eax
c0005016:	0f 85 98 02 00 00    	jne    c00052b4 <f_open+0x419>
c000501c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000501f:	85 d2                	test   edx,edx
c0005021:	0f 84 db 00 00 00    	je     c0005102 <f_open+0x267>
c0005027:	31 c9                	xor    ecx,ecx
c0005029:	89 d8                	mov    eax,ebx
c000502b:	e8 8e e3 ff ff       	call   c00033be <remove_chain>
c0005030:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005034:	89 c5                	mov    ebp,eax
c0005036:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005039:	48                   	dec    eax
c000503a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000503d:	e9 b8 00 00 00       	jmp    c00050fa <f_open+0x25f>
c0005042:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005046:	89 ea                	mov    edx,ebp
c0005048:	e8 99 fc ff ff       	call   c0004ce6 <ld_clust.isra.0>
c000504d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005052:	89 c7                	mov    edi,eax
c0005054:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005057:	e8 85 cb ff ff       	call   c0001be1 <st_dword>
c000505c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005060:	31 c9                	xor    ecx,ecx
c0005062:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005066:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000506a:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000506e:	e8 9c fc ff ff       	call   c0004d0f <st_clust.isra.1>
c0005073:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005077:	31 d2                	xor    edx,edx
c0005079:	83 c0 1c             	add    eax,0x1c
c000507c:	e8 60 cb ff ff       	call   c0001be1 <st_dword>
c0005081:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005085:	85 ff                	test   edi,edi
c0005087:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000508b:	74 75                	je     c0005102 <f_open+0x267>
c000508d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005091:	31 c9                	xor    ecx,ecx
c0005093:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005096:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005099:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000509d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00050a1:	89 fa                	mov    edx,edi
c00050a3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050a7:	e8 12 e3 ff ff       	call   c00033be <remove_chain>
c00050ac:	89 c5                	mov    ebp,eax
c00050ae:	85 c0                	test   eax,eax
c00050b0:	0f 85 fe 01 00 00    	jne    c00052b4 <f_open+0x419>
c00050b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00050ba:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00050be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050c2:	4f                   	dec    edi
c00050c3:	e8 81 d2 ff ff       	call   c0002349 <move_window>
c00050c8:	89 c5                	mov    ebp,eax
c00050ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050ce:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00050d1:	eb 27                	jmp    c00050fa <f_open+0x25f>
c00050d3:	85 ed                	test   ebp,ebp
c00050d5:	0f 85 d9 01 00 00    	jne    c00052b4 <f_open+0x419>
c00050db:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00050df:	bd 04 00 00 00       	mov    ebp,0x4
c00050e4:	a8 10                	test   al,0x10
c00050e6:	0f 85 c8 01 00 00    	jne    c00052b4 <f_open+0x419>
c00050ec:	83 e7 02             	and    edi,0x2
c00050ef:	74 11                	je     c0005102 <f_open+0x267>
c00050f1:	bd 07 00 00 00       	mov    ebp,0x7
c00050f6:	a8 01                	test   al,0x1
c00050f8:	eb 02                	jmp    c00050fc <f_open+0x261>
c00050fa:	85 ed                	test   ebp,ebp
c00050fc:	0f 85 b2 01 00 00    	jne    c00052b4 <f_open+0x419>
c0005102:	f7 c6 08 00 00 00    	test   esi,0x8
c0005108:	74 03                	je     c000510d <f_open+0x272>
c000510a:	83 ce 40             	or     esi,0x40
c000510d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005111:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0005114:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0005117:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c000511a:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c000511d:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005121:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005124:	8a 02                	mov    al,BYTE PTR [edx]
c0005126:	3c 04                	cmp    al,0x4
c0005128:	75 2a                	jne    c0005154 <f_open+0x2b9>
c000512a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000512e:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005133:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005136:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000513a:	30 c0                	xor    al,al
c000513c:	09 c8                	or     eax,ecx
c000513e:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005141:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005145:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005148:	8d 42 10             	lea    eax,[edx+0x10]
c000514b:	89 da                	mov    edx,ebx
c000514d:	e8 e5 fb ff ff       	call   c0004d37 <init_alloc_info.isra.2>
c0005152:	eb 1c                	jmp    c0005170 <f_open+0x2d5>
c0005154:	89 fa                	mov    edx,edi
c0005156:	e8 8b fb ff ff       	call   c0004ce6 <ld_clust.isra.0>
c000515b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000515e:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005161:	e8 12 ca ff ff       	call   c0001b78 <ld_dword>
c0005166:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000516d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005170:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005174:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c000517b:	89 03                	mov    DWORD PTR [ebx],eax
c000517d:	31 d2                	xor    edx,edx
c000517f:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005183:	b9 00 02 00 00       	mov    ecx,0x200
c0005188:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000518c:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005190:	89 f0                	mov    eax,esi
c0005192:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005199:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000519c:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c00051a3:	8d 43 50             	lea    eax,[ebx+0x50]
c00051a6:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00051ad:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00051b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00051b8:	e8 42 ca ff ff       	call   c0001bff <mem_set>
c00051bd:	83 e6 20             	and    esi,0x20
c00051c0:	75 07                	jne    c00051c9 <f_open+0x32e>
c00051c2:	31 ed                	xor    ebp,ebp
c00051c4:	e9 eb 00 00 00       	jmp    c00052b4 <f_open+0x419>
c00051c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051cc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00051d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00051d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051db:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00051df:	74 e1                	je     c00051c2 <f_open+0x327>
c00051e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00051e5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051e9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00051ec:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00051ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051f3:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00051f6:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00051fa:	31 ff                	xor    edi,edi
c00051fc:	c1 e5 09             	shl    ebp,0x9
c00051ff:	89 ee                	mov    esi,ebp
c0005201:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0005205:	89 f8                	mov    eax,edi
c0005207:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c000520b:	73 22                	jae    c000522f <f_open+0x394>
c000520d:	89 d8                	mov    eax,ebx
c000520f:	e8 bd dc ff ff       	call   c0002ed1 <get_fat>
c0005214:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005218:	89 c2                	mov    edx,eax
c000521a:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c000521e:	83 f8 01             	cmp    eax,0x1
c0005221:	76 10                	jbe    c0005233 <f_open+0x398>
c0005223:	83 f8 ff             	cmp    eax,0xffffffff
c0005226:	75 d9                	jne    c0005201 <f_open+0x366>
c0005228:	bd 01 00 00 00       	mov    ebp,0x1
c000522d:	eb 09                	jmp    c0005238 <f_open+0x39d>
c000522f:	31 ed                	xor    ebp,ebp
c0005231:	eb 05                	jmp    c0005238 <f_open+0x39d>
c0005233:	bd 02 00 00 00       	mov    ebp,0x2
c0005238:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000523b:	85 ed                	test   ebp,ebp
c000523d:	75 75                	jne    c00052b4 <f_open+0x419>
c000523f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005243:	25 ff 01 00 00       	and    eax,0x1ff
c0005248:	0f 84 74 ff ff ff    	je     c00051c2 <f_open+0x327>
c000524e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005252:	bd 02 00 00 00       	mov    ebp,0x2
c0005257:	89 c8                	mov    eax,ecx
c0005259:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000525d:	e8 a2 cb ff ff       	call   c0001e04 <clst2sect>
c0005262:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005266:	89 d7                	mov    edi,edx
c0005268:	09 c7                	or     edi,eax
c000526a:	74 48                	je     c00052b4 <f_open+0x419>
c000526c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005270:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005274:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000527c:	0f ac fe 09          	shrd   esi,edi,0x9
c0005280:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005284:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005288:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000528b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000528f:	83 ec 0c             	sub    esp,0xc
c0005292:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005295:	6a 01                	push   0x1
c0005297:	52                   	push   edx
c0005298:	50                   	push   eax
c0005299:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000529d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00052a1:	50                   	push   eax
c00052a2:	e8 79 c8 ff ff       	call   c0001b20 <disk_read>
c00052a7:	83 c4 20             	add    esp,0x20
c00052aa:	85 c0                	test   eax,eax
c00052ac:	0f 95 c0             	setne  al
c00052af:	0f b6 c0             	movzx  eax,al
c00052b2:	89 c5                	mov    ebp,eax
c00052b4:	83 ec 0c             	sub    esp,0xc
c00052b7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00052bb:	e8 2c 33 00 00       	call   c00085ec <ff_memfree>
c00052c0:	83 c4 10             	add    esp,0x10
c00052c3:	85 ed                	test   ebp,ebp
c00052c5:	74 06                	je     c00052cd <f_open+0x432>
c00052c7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00052cd:	83 c4 7c             	add    esp,0x7c
c00052d0:	89 e8                	mov    eax,ebp
c00052d2:	5b                   	pop    ebx
c00052d3:	5e                   	pop    esi
c00052d4:	5f                   	pop    edi
c00052d5:	5d                   	pop    ebp
c00052d6:	c3                   	ret    

c00052d7 <f_read>:
c00052d7:	55                   	push   ebp
c00052d8:	57                   	push   edi
c00052d9:	56                   	push   esi
c00052da:	53                   	push   ebx
c00052db:	83 ec 2c             	sub    esp,0x2c
c00052de:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052e2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052e6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00052ec:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052f0:	89 d8                	mov    eax,ebx
c00052f2:	e8 77 cf ff ff       	call   c000226e <validate>
c00052f7:	89 c5                	mov    ebp,eax
c00052f9:	85 c0                	test   eax,eax
c00052fb:	0f 85 4c 02 00 00    	jne    c000554d <f_read+0x276>
c0005301:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005305:	85 ed                	test   ebp,ebp
c0005307:	0f 85 40 02 00 00    	jne    c000554d <f_read+0x276>
c000530d:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005311:	0f 84 31 02 00 00    	je     c0005548 <f_read+0x271>
c0005317:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000531a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000531d:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005320:	bf 00 00 00 00       	mov    edi,0x0
c0005325:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005328:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000532c:	89 d1                	mov    ecx,edx
c000532e:	19 f9                	sbb    ecx,edi
c0005330:	0f 83 cf 00 00 00    	jae    c0005405 <f_read+0x12e>
c0005336:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000533a:	e9 c6 00 00 00       	jmp    c0005405 <f_read+0x12e>
c000533f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005342:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005345:	89 d0                	mov    eax,edx
c0005347:	25 ff 01 00 00       	and    eax,0x1ff
c000534c:	0f 85 c9 01 00 00    	jne    c000551b <f_read+0x244>
c0005352:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005356:	89 d6                	mov    esi,edx
c0005358:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000535c:	89 cf                	mov    edi,ecx
c000535e:	48                   	dec    eax
c000535f:	0f ac fe 09          	shrd   esi,edi,0x9
c0005363:	21 f0                	and    eax,esi
c0005365:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005369:	0f 84 a6 00 00 00    	je     c0005415 <f_read+0x13e>
c000536f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005373:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005376:	89 c8                	mov    eax,ecx
c0005378:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000537b:	e8 84 ca ff ff       	call   c0001e04 <clst2sect>
c0005380:	89 d7                	mov    edi,edx
c0005382:	09 c7                	or     edi,eax
c0005384:	0f 84 b4 00 00 00    	je     c000543e <f_read+0x167>
c000538a:	31 ff                	xor    edi,edi
c000538c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005390:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005393:	01 c6                	add    esi,eax
c0005395:	11 d7                	adc    edi,edx
c0005397:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000539f:	0f 86 fd 00 00 00    	jbe    c00054a2 <f_read+0x1cb>
c00053a5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00053a9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00053ad:	c1 e8 09             	shr    eax,0x9
c00053b0:	89 04 24             	mov    DWORD PTR [esp],eax
c00053b3:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00053b7:	03 14 24             	add    edx,DWORD PTR [esp]
c00053ba:	39 c2                	cmp    edx,eax
c00053bc:	76 07                	jbe    c00053c5 <f_read+0xee>
c00053be:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00053c2:	89 04 24             	mov    DWORD PTR [esp],eax
c00053c5:	83 ec 0c             	sub    esp,0xc
c00053c8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00053cc:	57                   	push   edi
c00053cd:	56                   	push   esi
c00053ce:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00053d2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053d6:	50                   	push   eax
c00053d7:	e8 44 c7 ff ff       	call   c0001b20 <disk_read>
c00053dc:	83 c4 20             	add    esp,0x20
c00053df:	85 c0                	test   eax,eax
c00053e1:	75 6e                	jne    c0005451 <f_read+0x17a>
c00053e3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053e7:	78 7e                	js     c0005467 <f_read+0x190>
c00053e9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00053ec:	c1 e6 09             	shl    esi,0x9
c00053ef:	31 ff                	xor    edi,edi
c00053f1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00053f5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053f9:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00053fd:	01 30                	add    DWORD PTR [eax],esi
c00053ff:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c0005402:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0005405:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000540a:	0f 85 2f ff ff ff    	jne    c000533f <f_read+0x68>
c0005410:	e9 38 01 00 00       	jmp    c000554d <f_read+0x276>
c0005415:	89 c8                	mov    eax,ecx
c0005417:	09 d0                	or     eax,edx
c0005419:	75 05                	jne    c0005420 <f_read+0x149>
c000541b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000541e:	eb 19                	jmp    c0005439 <f_read+0x162>
c0005420:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005424:	74 09                	je     c000542f <f_read+0x158>
c0005426:	89 d8                	mov    eax,ebx
c0005428:	e8 f8 c9 ff ff       	call   c0001e25 <clmt_clust>
c000542d:	eb 0a                	jmp    c0005439 <f_read+0x162>
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 d8                	mov    eax,ebx
c0005434:	e8 98 da ff ff       	call   c0002ed1 <get_fat>
c0005439:	83 f8 01             	cmp    eax,0x1
c000543c:	77 0e                	ja     c000544c <f_read+0x175>
c000543e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005442:	bd 02 00 00 00       	mov    ebp,0x2
c0005447:	e9 01 01 00 00       	jmp    c000554d <f_read+0x276>
c000544c:	83 f8 ff             	cmp    eax,0xffffffff
c000544f:	75 0e                	jne    c000545f <f_read+0x188>
c0005451:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005455:	bd 01 00 00 00       	mov    ebp,0x1
c000545a:	e9 ee 00 00 00       	jmp    c000554d <f_read+0x276>
c000545f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005462:	e9 08 ff ff ff       	jmp    c000536f <f_read+0x98>
c0005467:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000546a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000546d:	29 f0                	sub    eax,esi
c000546f:	19 fa                	sbb    edx,edi
c0005471:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005474:	89 d7                	mov    edi,edx
c0005476:	ba 00 00 00 00       	mov    edx,0x0
c000547b:	89 f9                	mov    ecx,edi
c000547d:	19 d1                	sbb    ecx,edx
c000547f:	0f 83 64 ff ff ff    	jae    c00053e9 <f_read+0x112>
c0005485:	89 c7                	mov    edi,eax
c0005487:	8d 53 50             	lea    edx,[ebx+0x50]
c000548a:	c1 e7 09             	shl    edi,0x9
c000548d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005491:	b9 00 02 00 00       	mov    ecx,0x200
c0005496:	01 f8                	add    eax,edi
c0005498:	e8 4d c7 ff ff       	call   c0001bea <mem_cpy>
c000549d:	e9 47 ff ff ff       	jmp    c00053e9 <f_read+0x112>
c00054a2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00054a5:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00054a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00054ab:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00054af:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00054b3:	75 05                	jne    c00054ba <f_read+0x1e3>
c00054b5:	39 34 24             	cmp    DWORD PTR [esp],esi
c00054b8:	74 5b                	je     c0005515 <f_read+0x23e>
c00054ba:	8d 43 50             	lea    eax,[ebx+0x50]
c00054bd:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054c5:	79 2a                	jns    c00054f1 <f_read+0x21a>
c00054c7:	83 ec 0c             	sub    esp,0xc
c00054ca:	6a 01                	push   0x1
c00054cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054d8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054dc:	50                   	push   eax
c00054dd:	e8 54 c6 ff ff       	call   c0001b36 <disk_write>
c00054e2:	83 c4 20             	add    esp,0x20
c00054e5:	85 c0                	test   eax,eax
c00054e7:	0f 85 64 ff ff ff    	jne    c0005451 <f_read+0x17a>
c00054ed:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054f1:	83 ec 0c             	sub    esp,0xc
c00054f4:	6a 01                	push   0x1
c00054f6:	57                   	push   edi
c00054f7:	56                   	push   esi
c00054f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005500:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005504:	50                   	push   eax
c0005505:	e8 16 c6 ff ff       	call   c0001b20 <disk_read>
c000550a:	83 c4 20             	add    esp,0x20
c000550d:	85 c0                	test   eax,eax
c000550f:	0f 85 3c ff ff ff    	jne    c0005451 <f_read+0x17a>
c0005515:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005518:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000551b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000551e:	ba 00 02 00 00       	mov    edx,0x200
c0005523:	25 ff 01 00 00       	and    eax,0x1ff
c0005528:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000552c:	29 c2                	sub    edx,eax
c000552e:	39 d6                	cmp    esi,edx
c0005530:	76 02                	jbe    c0005534 <f_read+0x25d>
c0005532:	89 d6                	mov    esi,edx
c0005534:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005538:	89 f1                	mov    ecx,esi
c000553a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000553e:	e8 a7 c6 ff ff       	call   c0001bea <mem_cpy>
c0005543:	e9 a7 fe ff ff       	jmp    c00053ef <f_read+0x118>
c0005548:	bd 07 00 00 00       	mov    ebp,0x7
c000554d:	83 c4 2c             	add    esp,0x2c
c0005550:	89 e8                	mov    eax,ebp
c0005552:	5b                   	pop    ebx
c0005553:	5e                   	pop    esi
c0005554:	5f                   	pop    edi
c0005555:	5d                   	pop    ebp
c0005556:	c3                   	ret    

c0005557 <f_write>:
c0005557:	55                   	push   ebp
c0005558:	57                   	push   edi
c0005559:	56                   	push   esi
c000555a:	53                   	push   ebx
c000555b:	83 ec 2c             	sub    esp,0x2c
c000555e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005562:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005566:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000556c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005570:	89 d8                	mov    eax,ebx
c0005572:	e8 f7 cc ff ff       	call   c000226e <validate>
c0005577:	89 c5                	mov    ebp,eax
c0005579:	85 c0                	test   eax,eax
c000557b:	0f 85 86 02 00 00    	jne    c0005807 <f_write+0x2b0>
c0005581:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005585:	85 ed                	test   ebp,ebp
c0005587:	0f 85 7a 02 00 00    	jne    c0005807 <f_write+0x2b0>
c000558d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005591:	0f 84 6b 02 00 00    	je     c0005802 <f_write+0x2ab>
c0005597:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000559b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000559e:	0f 84 43 01 00 00    	je     c00056e7 <f_write+0x190>
c00055a4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055a7:	89 c1                	mov    ecx,eax
c00055a9:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00055ad:	0f 83 34 01 00 00    	jae    c00056e7 <f_write+0x190>
c00055b3:	f7 d0                	not    eax
c00055b5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00055b9:	e9 29 01 00 00       	jmp    c00056e7 <f_write+0x190>
c00055be:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00055c1:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00055c4:	89 d0                	mov    eax,edx
c00055c6:	25 ff 01 00 00       	and    eax,0x1ff
c00055cb:	0f 85 00 02 00 00    	jne    c00057d1 <f_write+0x27a>
c00055d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055d5:	89 d6                	mov    esi,edx
c00055d7:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00055db:	89 cf                	mov    edi,ecx
c00055dd:	48                   	dec    eax
c00055de:	0f ac fe 09          	shrd   esi,edi,0x9
c00055e2:	21 f0                	and    eax,esi
c00055e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055e8:	0f 84 06 01 00 00    	je     c00056f4 <f_write+0x19d>
c00055ee:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055f2:	0f 88 6e 01 00 00    	js     c0005766 <f_write+0x20f>
c00055f8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00055fc:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055ff:	89 c8                	mov    eax,ecx
c0005601:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0005605:	e8 fa c7 ff ff       	call   c0001e04 <clst2sect>
c000560a:	89 d1                	mov    ecx,edx
c000560c:	09 c1                	or     ecx,eax
c000560e:	0f 84 1c 01 00 00    	je     c0005730 <f_write+0x1d9>
c0005614:	31 ff                	xor    edi,edi
c0005616:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000561a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000561e:	01 c6                	add    esi,eax
c0005620:	11 d7                	adc    edi,edx
c0005622:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000562a:	0f 86 63 01 00 00    	jbe    c0005793 <f_write+0x23c>
c0005630:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005634:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005638:	c1 e8 09             	shr    eax,0x9
c000563b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000563f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005643:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005647:	39 c2                	cmp    edx,eax
c0005649:	76 08                	jbe    c0005653 <f_write+0xfc>
c000564b:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000564f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005653:	83 ec 0c             	sub    esp,0xc
c0005656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000565a:	57                   	push   edi
c000565b:	56                   	push   esi
c000565c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005660:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005664:	50                   	push   eax
c0005665:	e8 cc c4 ff ff       	call   c0001b36 <disk_write>
c000566a:	83 c4 20             	add    esp,0x20
c000566d:	85 c0                	test   eax,eax
c000566f:	0f 85 ce 00 00 00    	jne    c0005743 <f_write+0x1ec>
c0005675:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005678:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000567b:	29 f0                	sub    eax,esi
c000567d:	19 fa                	sbb    edx,edi
c000567f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005683:	89 d7                	mov    edi,edx
c0005685:	ba 00 00 00 00       	mov    edx,0x0
c000568a:	89 f9                	mov    ecx,edi
c000568c:	19 d1                	sbb    ecx,edx
c000568e:	73 1c                	jae    c00056ac <f_write+0x155>
c0005690:	89 c7                	mov    edi,eax
c0005692:	b9 00 02 00 00       	mov    ecx,0x200
c0005697:	c1 e7 09             	shl    edi,0x9
c000569a:	8d 43 50             	lea    eax,[ebx+0x50]
c000569d:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c00056a1:	89 fa                	mov    edx,edi
c00056a3:	e8 42 c5 ff ff       	call   c0001bea <mem_cpy>
c00056a8:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00056ac:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00056b0:	c1 e6 09             	shl    esi,0x9
c00056b3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00056b7:	31 ff                	xor    edi,edi
c00056b9:	01 30                	add    DWORD PTR [eax],esi
c00056bb:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00056bf:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00056c3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00056c6:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00056c9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00056cc:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00056cf:	89 c1                	mov    ecx,eax
c00056d1:	39 f2                	cmp    edx,esi
c00056d3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00056d6:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00056d9:	19 f9                	sbb    ecx,edi
c00056db:	73 04                	jae    c00056e1 <f_write+0x18a>
c00056dd:	89 f2                	mov    edx,esi
c00056df:	89 f8                	mov    eax,edi
c00056e1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00056e4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00056e7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00056ec:	0f 85 cc fe ff ff    	jne    c00055be <f_write+0x67>
c00056f2:	eb 2e                	jmp    c0005722 <f_write+0x1cb>
c00056f4:	89 c8                	mov    eax,ecx
c00056f6:	09 d0                	or     eax,edx
c00056f8:	75 0b                	jne    c0005705 <f_write+0x1ae>
c00056fa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056fd:	31 d2                	xor    edx,edx
c00056ff:	85 c0                	test   eax,eax
c0005701:	75 28                	jne    c000572b <f_write+0x1d4>
c0005703:	eb 12                	jmp    c0005717 <f_write+0x1c0>
c0005705:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005709:	74 09                	je     c0005714 <f_write+0x1bd>
c000570b:	89 d8                	mov    eax,ebx
c000570d:	e8 13 c7 ff ff       	call   c0001e25 <clmt_clust>
c0005712:	eb 0a                	jmp    c000571e <f_write+0x1c7>
c0005714:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005717:	89 d8                	mov    eax,ebx
c0005719:	e8 a1 da ff ff       	call   c00031bf <create_chain>
c000571e:	85 c0                	test   eax,eax
c0005720:	75 09                	jne    c000572b <f_write+0x1d4>
c0005722:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005726:	e9 dc 00 00 00       	jmp    c0005807 <f_write+0x2b0>
c000572b:	83 f8 01             	cmp    eax,0x1
c000572e:	75 0e                	jne    c000573e <f_write+0x1e7>
c0005730:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005734:	bd 02 00 00 00       	mov    ebp,0x2
c0005739:	e9 c9 00 00 00       	jmp    c0005807 <f_write+0x2b0>
c000573e:	83 f8 ff             	cmp    eax,0xffffffff
c0005741:	75 0e                	jne    c0005751 <f_write+0x1fa>
c0005743:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005747:	bd 01 00 00 00       	mov    ebp,0x1
c000574c:	e9 b6 00 00 00       	jmp    c0005807 <f_write+0x2b0>
c0005751:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005754:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005758:	0f 85 90 fe ff ff    	jne    c00055ee <f_write+0x97>
c000575e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005761:	e9 88 fe ff ff       	jmp    c00055ee <f_write+0x97>
c0005766:	83 ec 0c             	sub    esp,0xc
c0005769:	8d 43 50             	lea    eax,[ebx+0x50]
c000576c:	6a 01                	push   0x1
c000576e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005771:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005774:	50                   	push   eax
c0005775:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005779:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000577d:	50                   	push   eax
c000577e:	e8 b3 c3 ff ff       	call   c0001b36 <disk_write>
c0005783:	83 c4 20             	add    esp,0x20
c0005786:	85 c0                	test   eax,eax
c0005788:	75 b9                	jne    c0005743 <f_write+0x1ec>
c000578a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000578e:	e9 65 fe ff ff       	jmp    c00055f8 <f_write+0xa1>
c0005793:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005796:	75 05                	jne    c000579d <f_write+0x246>
c0005798:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c000579b:	74 2e                	je     c00057cb <f_write+0x274>
c000579d:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00057a0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057a3:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c00057a6:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c00057a9:	73 20                	jae    c00057cb <f_write+0x274>
c00057ab:	83 ec 0c             	sub    esp,0xc
c00057ae:	8d 43 50             	lea    eax,[ebx+0x50]
c00057b1:	6a 01                	push   0x1
c00057b3:	57                   	push   edi
c00057b4:	56                   	push   esi
c00057b5:	50                   	push   eax
c00057b6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00057ba:	50                   	push   eax
c00057bb:	e8 60 c3 ff ff       	call   c0001b20 <disk_read>
c00057c0:	83 c4 20             	add    esp,0x20
c00057c3:	85 c0                	test   eax,eax
c00057c5:	0f 85 78 ff ff ff    	jne    c0005743 <f_write+0x1ec>
c00057cb:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00057ce:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00057d1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00057d4:	ba 00 02 00 00       	mov    edx,0x200
c00057d9:	25 ff 01 00 00       	and    eax,0x1ff
c00057de:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00057e2:	29 c2                	sub    edx,eax
c00057e4:	39 d6                	cmp    esi,edx
c00057e6:	76 02                	jbe    c00057ea <f_write+0x293>
c00057e8:	89 d6                	mov    esi,edx
c00057ea:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00057ee:	89 f1                	mov    ecx,esi
c00057f0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00057f4:	e8 f1 c3 ff ff       	call   c0001bea <mem_cpy>
c00057f9:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00057fd:	e9 b1 fe ff ff       	jmp    c00056b3 <f_write+0x15c>
c0005802:	bd 07 00 00 00       	mov    ebp,0x7
c0005807:	83 c4 2c             	add    esp,0x2c
c000580a:	89 e8                	mov    eax,ebp
c000580c:	5b                   	pop    ebx
c000580d:	5e                   	pop    esi
c000580e:	5f                   	pop    edi
c000580f:	5d                   	pop    ebp
c0005810:	c3                   	ret    

c0005811 <f_sync>:
c0005811:	56                   	push   esi
c0005812:	53                   	push   ebx
c0005813:	83 ec 64             	sub    esp,0x64
c0005816:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000581a:	8d 54 24 10          	lea    edx,[esp+0x10]
c000581e:	89 d8                	mov    eax,ebx
c0005820:	e8 49 ca ff ff       	call   c000226e <validate>
c0005825:	85 c0                	test   eax,eax
c0005827:	0f 85 ba 01 00 00    	jne    c00059e7 <f_sync+0x1d6>
c000582d:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005830:	f6 c2 40             	test   dl,0x40
c0005833:	0f 84 ae 01 00 00    	je     c00059e7 <f_sync+0x1d6>
c0005839:	84 d2                	test   dl,dl
c000583b:	79 33                	jns    c0005870 <f_sync+0x5f>
c000583d:	83 ec 0c             	sub    esp,0xc
c0005840:	8d 43 50             	lea    eax,[ebx+0x50]
c0005843:	6a 01                	push   0x1
c0005845:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005848:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000584b:	50                   	push   eax
c000584c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005850:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005854:	50                   	push   eax
c0005855:	e8 dc c2 ff ff       	call   c0001b36 <disk_write>
c000585a:	83 c4 20             	add    esp,0x20
c000585d:	89 c2                	mov    edx,eax
c000585f:	b8 01 00 00 00       	mov    eax,0x1
c0005864:	85 d2                	test   edx,edx
c0005866:	0f 85 7b 01 00 00    	jne    c00059e7 <f_sync+0x1d6>
c000586c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005874:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005877:	0f 85 11 01 00 00    	jne    c000598e <f_sync+0x17d>
c000587d:	89 d8                	mov    eax,ebx
c000587f:	e8 13 d6 ff ff       	call   c0002e97 <fill_first_frag>
c0005884:	85 c0                	test   eax,eax
c0005886:	0f 85 5b 01 00 00    	jne    c00059e7 <f_sync+0x1d6>
c000588c:	83 c9 ff             	or     ecx,0xffffffff
c000588f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005892:	89 d8                	mov    eax,ebx
c0005894:	e8 c9 d5 ff ff       	call   c0002e62 <fill_last_frag>
c0005899:	85 c0                	test   eax,eax
c000589b:	0f 85 46 01 00 00    	jne    c00059e7 <f_sync+0x1d6>
c00058a1:	83 ec 0c             	sub    esp,0xc
c00058a4:	68 60 04 00 00       	push   0x460
c00058a9:	e8 26 2d 00 00       	call   c00085d4 <ff_memalloc>
c00058ae:	83 c4 10             	add    esp,0x10
c00058b1:	89 c6                	mov    esi,eax
c00058b3:	b8 11 00 00 00       	mov    eax,0x11
c00058b8:	85 f6                	test   esi,esi
c00058ba:	0f 84 27 01 00 00    	je     c00059e7 <f_sync+0x1d6>
c00058c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058c4:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00058ca:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00058cd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00058d0:	89 da                	mov    edx,ebx
c00058d2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00058d6:	e8 af df ff ff       	call   c000388a <load_obj_xdir>
c00058db:	85 c0                	test   eax,eax
c00058dd:	0f 85 95 00 00 00    	jne    c0005978 <f_sync+0x167>
c00058e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058e7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00058ea:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00058ee:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00058f1:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00058f4:	83 ca 01             	or     edx,0x1
c00058f7:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00058fa:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00058fd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005900:	83 c0 34             	add    eax,0x34
c0005903:	e8 d9 c2 ff ff       	call   c0001be1 <st_dword>
c0005908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000590c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000590f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005912:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005915:	83 c0 38             	add    eax,0x38
c0005918:	e8 c7 c2 ff ff       	call   c0001be4 <st_qword>
c000591d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005920:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005924:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005927:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000592a:	83 c0 28             	add    eax,0x28
c000592d:	e8 b2 c2 ff ff       	call   c0001be4 <st_qword>
c0005932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005936:	ba 00 00 21 50       	mov    edx,0x50210000
c000593b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000593e:	83 c0 0c             	add    eax,0xc
c0005941:	e8 9b c2 ff ff       	call   c0001be1 <st_dword>
c0005946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000594a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000594d:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005951:	31 d2                	xor    edx,edx
c0005953:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005956:	83 c0 10             	add    eax,0x10
c0005959:	e8 83 c2 ff ff       	call   c0001be1 <st_dword>
c000595e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005962:	e8 62 e1 ff ff       	call   c0003ac9 <store_xdir>
c0005967:	85 c0                	test   eax,eax
c0005969:	75 0d                	jne    c0005978 <f_sync+0x167>
c000596b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000596f:	e8 00 eb ff ff       	call   c0004474 <sync_fs>
c0005974:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005978:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000597c:	83 ec 0c             	sub    esp,0xc
c000597f:	56                   	push   esi
c0005980:	e8 67 2c 00 00       	call   c00085ec <ff_memfree>
c0005985:	83 c4 10             	add    esp,0x10
c0005988:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000598c:	eb 59                	jmp    c00059e7 <f_sync+0x1d6>
c000598e:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005991:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005994:	e8 b0 c9 ff ff       	call   c0002349 <move_window>
c0005999:	85 c0                	test   eax,eax
c000599b:	75 4a                	jne    c00059e7 <f_sync+0x1d6>
c000599d:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c00059a0:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00059a4:	89 f2                	mov    edx,esi
c00059a6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00059a9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00059ab:	e8 5f f3 ff ff       	call   c0004d0f <st_clust.isra.1>
c00059b0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059b3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00059b6:	e8 26 c2 ff ff       	call   c0001be1 <st_dword>
c00059bb:	8d 46 16             	lea    eax,[esi+0x16]
c00059be:	ba 00 00 21 50       	mov    edx,0x50210000
c00059c3:	e8 19 c2 ff ff       	call   c0001be1 <st_dword>
c00059c8:	8d 46 12             	lea    eax,[esi+0x12]
c00059cb:	31 d2                	xor    edx,edx
c00059cd:	e8 0b c2 ff ff       	call   c0001bdd <st_word>
c00059d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059d6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00059da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059de:	e8 91 ea ff ff       	call   c0004474 <sync_fs>
c00059e3:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00059e7:	83 c4 64             	add    esp,0x64
c00059ea:	5b                   	pop    ebx
c00059eb:	5e                   	pop    esi
c00059ec:	c3                   	ret    

c00059ed <f_close>:
c00059ed:	53                   	push   ebx
c00059ee:	83 ec 24             	sub    esp,0x24
c00059f1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00059f5:	53                   	push   ebx
c00059f6:	e8 16 fe ff ff       	call   c0005811 <f_sync>
c00059fb:	83 c4 10             	add    esp,0x10
c00059fe:	85 c0                	test   eax,eax
c0005a00:	75 15                	jne    c0005a17 <f_close+0x2a>
c0005a02:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005a06:	89 d8                	mov    eax,ebx
c0005a08:	e8 61 c8 ff ff       	call   c000226e <validate>
c0005a0d:	85 c0                	test   eax,eax
c0005a0f:	75 06                	jne    c0005a17 <f_close+0x2a>
c0005a11:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005a17:	83 c4 18             	add    esp,0x18
c0005a1a:	5b                   	pop    ebx
c0005a1b:	c3                   	ret    

c0005a1c <f_lseek>:
c0005a1c:	55                   	push   ebp
c0005a1d:	57                   	push   edi
c0005a1e:	56                   	push   esi
c0005a1f:	53                   	push   ebx
c0005a20:	83 ec 3c             	sub    esp,0x3c
c0005a23:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005a27:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005a2b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005a2f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005a32:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005a36:	89 d8                	mov    eax,ebx
c0005a38:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005a3c:	e8 2d c8 ff ff       	call   c000226e <validate>
c0005a41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a45:	85 c0                	test   eax,eax
c0005a47:	0f 85 7a 04 00 00    	jne    c0005ec7 <f_lseek+0x4ab>
c0005a4d:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005a51:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a55:	85 c0                	test   eax,eax
c0005a57:	0f 85 6a 04 00 00    	jne    c0005ec7 <f_lseek+0x4ab>
c0005a5d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005a61:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005a64:	74 0c                	je     c0005a72 <f_lseek+0x56>
c0005a66:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a69:	85 c0                	test   eax,eax
c0005a6b:	75 1f                	jne    c0005a8c <f_lseek+0x70>
c0005a6d:	e9 b5 01 00 00       	jmp    c0005c27 <f_lseek+0x20b>
c0005a72:	83 c9 ff             	or     ecx,0xffffffff
c0005a75:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005a78:	89 d8                	mov    eax,ebx
c0005a7a:	e8 e3 d3 ff ff       	call   c0002e62 <fill_last_frag>
c0005a7f:	85 c0                	test   eax,eax
c0005a81:	74 e3                	je     c0005a66 <f_lseek+0x4a>
c0005a83:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a87:	e9 3b 04 00 00       	jmp    c0005ec7 <f_lseek+0x4ab>
c0005a8c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005a91:	0f 85 ac 00 00 00    	jne    c0005b43 <f_lseek+0x127>
c0005a97:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005a9b:	0f 85 a2 00 00 00    	jne    c0005b43 <f_lseek+0x127>
c0005aa1:	8d 78 04             	lea    edi,[eax+0x4]
c0005aa4:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005aa7:	8b 00                	mov    eax,DWORD PTR [eax]
c0005aa9:	be 02 00 00 00       	mov    esi,0x2
c0005aae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ab2:	85 ed                	test   ebp,ebp
c0005ab4:	74 73                	je     c0005b29 <f_lseek+0x10d>
c0005ab6:	89 e9                	mov    ecx,ebp
c0005ab8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005abf:	ff 04 24             	inc    DWORD PTR [esp]
c0005ac2:	89 ca                	mov    edx,ecx
c0005ac4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ac8:	89 d8                	mov    eax,ebx
c0005aca:	e8 02 d4 ff ff       	call   c0002ed1 <get_fat>
c0005acf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ad3:	83 f8 01             	cmp    eax,0x1
c0005ad6:	77 11                	ja     c0005ae9 <f_lseek+0xcd>
c0005ad8:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005adc:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ae4:	e9 de 03 00 00       	jmp    c0005ec7 <f_lseek+0x4ab>
c0005ae9:	83 f8 ff             	cmp    eax,0xffffffff
c0005aec:	75 11                	jne    c0005aff <f_lseek+0xe3>
c0005aee:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005af2:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005afa:	e9 c8 03 00 00       	jmp    c0005ec7 <f_lseek+0x4ab>
c0005aff:	8d 51 01             	lea    edx,[ecx+0x1]
c0005b02:	89 c1                	mov    ecx,eax
c0005b04:	39 c2                	cmp    edx,eax
c0005b06:	74 b7                	je     c0005abf <f_lseek+0xa3>
c0005b08:	83 c6 02             	add    esi,0x2
c0005b0b:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005b0f:	72 0b                	jb     c0005b1c <f_lseek+0x100>
c0005b11:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005b14:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005b17:	89 0f                	mov    DWORD PTR [edi],ecx
c0005b19:	83 c7 08             	add    edi,0x8
c0005b1c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005b20:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005b23:	76 04                	jbe    c0005b29 <f_lseek+0x10d>
c0005b25:	89 c5                	mov    ebp,eax
c0005b27:	eb 8d                	jmp    c0005ab6 <f_lseek+0x9a>
c0005b29:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b2c:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005b30:	89 30                	mov    DWORD PTR [eax],esi
c0005b32:	0f 87 87 03 00 00    	ja     c0005ebf <f_lseek+0x4a3>
c0005b38:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005b3e:	e9 84 03 00 00       	jmp    c0005ec7 <f_lseek+0x4ab>
c0005b43:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005b46:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005b49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b4d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b51:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b55:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005b58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b5c:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005b60:	73 0f                	jae    c0005b71 <f_lseek+0x155>
c0005b62:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b71:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b75:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b79:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005b7c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b83:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005b87:	0f 84 3a 03 00 00    	je     c0005ec7 <f_lseek+0x4ab>
c0005b8d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005b91:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005b95:	83 c6 ff             	add    esi,0xffffffff
c0005b98:	89 d8                	mov    eax,ebx
c0005b9a:	83 d7 ff             	adc    edi,0xffffffff
c0005b9d:	89 f2                	mov    edx,esi
c0005b9f:	89 f9                	mov    ecx,edi
c0005ba1:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005ba5:	89 34 24             	mov    DWORD PTR [esp],esi
c0005ba8:	e8 78 c2 ff ff       	call   c0001e25 <clmt_clust>
c0005bad:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005bb1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005bb4:	89 c2                	mov    edx,eax
c0005bb6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bba:	89 c8                	mov    eax,ecx
c0005bbc:	e8 43 c2 ff ff       	call   c0001e04 <clst2sect>
c0005bc1:	89 d7                	mov    edi,edx
c0005bc3:	09 c7                	or     edi,eax
c0005bc5:	0f 84 0d ff ff ff    	je     c0005ad8 <f_lseek+0xbc>
c0005bcb:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005bcf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005bd5:	0f 84 ec 02 00 00    	je     c0005ec7 <f_lseek+0x4ab>
c0005bdb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005bdf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005be3:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005be6:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005bea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005bee:	4d                   	dec    ebp
c0005bef:	31 ff                	xor    edi,edi
c0005bf1:	21 ee                	and    esi,ebp
c0005bf3:	01 c6                	add    esi,eax
c0005bf5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005bf8:	11 d7                	adc    edi,edx
c0005bfa:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005bfd:	39 fa                	cmp    edx,edi
c0005bff:	75 08                	jne    c0005c09 <f_lseek+0x1ed>
c0005c01:	39 f0                	cmp    eax,esi
c0005c03:	0f 84 be 02 00 00    	je     c0005ec7 <f_lseek+0x4ab>
c0005c09:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005c0c:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c10:	0f 89 80 02 00 00    	jns    c0005e96 <f_lseek+0x47a>
c0005c16:	83 ec 0c             	sub    esp,0xc
c0005c19:	6a 01                	push   0x1
c0005c1b:	52                   	push   edx
c0005c1c:	50                   	push   eax
c0005c1d:	55                   	push   ebp
c0005c1e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005c22:	e9 5a 02 00 00       	jmp    c0005e81 <f_lseek+0x465>
c0005c27:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c2b:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005c2e:	74 16                	je     c0005c46 <f_lseek+0x22a>
c0005c30:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005c35:	76 0f                	jbe    c0005c46 <f_lseek+0x22a>
c0005c37:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005c3e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c46:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005c49:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005c4c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005c4f:	89 c7                	mov    edi,eax
c0005c51:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c55:	73 0d                	jae    c0005c64 <f_lseek+0x248>
c0005c57:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005c5b:	75 07                	jne    c0005c64 <f_lseek+0x248>
c0005c5d:	89 14 24             	mov    DWORD PTR [esp],edx
c0005c60:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005c64:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c67:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c6a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c6e:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005c75:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005c7c:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005c7f:	75 09                	jne    c0005c8a <f_lseek+0x26e>
c0005c81:	31 f6                	xor    esi,esi
c0005c83:	31 ff                	xor    edi,edi
c0005c85:	e9 af 01 00 00       	jmp    c0005e39 <f_lseek+0x41d>
c0005c8a:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005c8e:	89 d7                	mov    edi,edx
c0005c90:	c1 e1 09             	shl    ecx,0x9
c0005c93:	09 c7                	or     edi,eax
c0005c95:	89 cd                	mov    ebp,ecx
c0005c97:	74 6d                	je     c0005d06 <f_lseek+0x2ea>
c0005c99:	83 c0 ff             	add    eax,0xffffffff
c0005c9c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ca0:	83 d2 ff             	adc    edx,0xffffffff
c0005ca3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005ca6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005caa:	83 c0 ff             	add    eax,0xffffffff
c0005cad:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005cb1:	83 d2 ff             	adc    edx,0xffffffff
c0005cb4:	31 ff                	xor    edi,edi
c0005cb6:	57                   	push   edi
c0005cb7:	51                   	push   ecx
c0005cb8:	52                   	push   edx
c0005cb9:	50                   	push   eax
c0005cba:	e8 21 d3 01 00       	call   c0022fe0 <__udivdi3>
c0005cbf:	83 c4 10             	add    esp,0x10
c0005cc2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005cc6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005cca:	57                   	push   edi
c0005ccb:	55                   	push   ebp
c0005ccc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cd4:	e8 07 d3 01 00       	call   c0022fe0 <__udivdi3>
c0005cd9:	83 c4 10             	add    esp,0x10
c0005cdc:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005ce0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005ce4:	19 d1                	sbb    ecx,edx
c0005ce6:	72 1e                	jb     c0005d06 <f_lseek+0x2ea>
c0005ce8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005cec:	89 e9                	mov    ecx,ebp
c0005cee:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005cf1:	f7 d9                	neg    ecx
c0005cf3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005cf6:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005cfa:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005cfd:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005d00:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005d04:	eb 28                	jmp    c0005d2e <f_lseek+0x312>
c0005d06:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005d09:	85 c0                	test   eax,eax
c0005d0b:	75 1e                	jne    c0005d2b <f_lseek+0x30f>
c0005d0d:	31 d2                	xor    edx,edx
c0005d0f:	89 d8                	mov    eax,ebx
c0005d11:	e8 a9 d4 ff ff       	call   c00031bf <create_chain>
c0005d16:	83 f8 01             	cmp    eax,0x1
c0005d19:	0f 84 b9 fd ff ff    	je     c0005ad8 <f_lseek+0xbc>
c0005d1f:	83 f8 ff             	cmp    eax,0xffffffff
c0005d22:	0f 84 c6 fd ff ff    	je     c0005aee <f_lseek+0xd2>
c0005d28:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005d2b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005d2e:	85 c0                	test   eax,eax
c0005d30:	0f 84 4b ff ff ff    	je     c0005c81 <f_lseek+0x265>
c0005d36:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005d3a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005d42:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005d45:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d49:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005d4c:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005d4f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d53:	0f 83 9d 00 00 00    	jae    c0005df6 <f_lseek+0x3da>
c0005d59:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d5d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d61:	29 34 24             	sub    DWORD PTR [esp],esi
c0005d64:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005d68:	01 f2                	add    edx,esi
c0005d6a:	11 f9                	adc    ecx,edi
c0005d6c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005d70:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005d74:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005d77:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005d7a:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005d7d:	f6 c1 02             	test   cl,0x2
c0005d80:	74 35                	je     c0005db7 <f_lseek+0x39b>
c0005d82:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005d86:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005d89:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005d8c:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005d90:	73 16                	jae    c0005da8 <f_lseek+0x38c>
c0005d92:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005d96:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005d9a:	88 ca                	mov    dl,cl
c0005d9c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005d9f:	83 ca 40             	or     edx,0x40
c0005da2:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005da5:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005da8:	89 c2                	mov    edx,eax
c0005daa:	89 d8                	mov    eax,ebx
c0005dac:	e8 0e d4 ff ff       	call   c00031bf <create_chain>
c0005db1:	85 c0                	test   eax,eax
c0005db3:	75 0b                	jne    c0005dc0 <f_lseek+0x3a4>
c0005db5:	eb 30                	jmp    c0005de7 <f_lseek+0x3cb>
c0005db7:	89 c2                	mov    edx,eax
c0005db9:	89 d8                	mov    eax,ebx
c0005dbb:	e8 11 d1 ff ff       	call   c0002ed1 <get_fat>
c0005dc0:	83 f8 ff             	cmp    eax,0xffffffff
c0005dc3:	0f 84 25 fd ff ff    	je     c0005aee <f_lseek+0xd2>
c0005dc9:	83 f8 01             	cmp    eax,0x1
c0005dcc:	0f 86 06 fd ff ff    	jbe    c0005ad8 <f_lseek+0xbc>
c0005dd2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005dd6:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005dd9:	0f 86 f9 fc ff ff    	jbe    c0005ad8 <f_lseek+0xbc>
c0005ddf:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005de2:	e9 5b ff ff ff       	jmp    c0005d42 <f_lseek+0x326>
c0005de7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005dee:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005df6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005df9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005dfd:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005e00:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005e03:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005e06:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005e0c:	0f 84 6f fe ff ff    	je     c0005c81 <f_lseek+0x265>
c0005e12:	89 c2                	mov    edx,eax
c0005e14:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005e18:	e8 e7 bf ff ff       	call   c0001e04 <clst2sect>
c0005e1d:	89 d7                	mov    edi,edx
c0005e1f:	09 c7                	or     edi,eax
c0005e21:	0f 84 b1 fc ff ff    	je     c0005ad8 <f_lseek+0xbc>
c0005e27:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005e2b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005e2e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005e32:	c1 ef 09             	shr    edi,0x9
c0005e35:	01 c6                	add    esi,eax
c0005e37:	11 d7                	adc    edi,edx
c0005e39:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005e3c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005e3f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005e42:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005e45:	19 d1                	sbb    ecx,edx
c0005e47:	73 0a                	jae    c0005e53 <f_lseek+0x437>
c0005e49:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005e4c:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005e4f:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005e53:	a9 ff 01 00 00       	test   eax,0x1ff
c0005e58:	74 6d                	je     c0005ec7 <f_lseek+0x4ab>
c0005e5a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005e5d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005e60:	39 fa                	cmp    edx,edi
c0005e62:	75 04                	jne    c0005e68 <f_lseek+0x44c>
c0005e64:	39 f0                	cmp    eax,esi
c0005e66:	74 5f                	je     c0005ec7 <f_lseek+0x4ab>
c0005e68:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005e6b:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005e6f:	79 25                	jns    c0005e96 <f_lseek+0x47a>
c0005e71:	83 ec 0c             	sub    esp,0xc
c0005e74:	6a 01                	push   0x1
c0005e76:	52                   	push   edx
c0005e77:	50                   	push   eax
c0005e78:	55                   	push   ebp
c0005e79:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e7d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e81:	50                   	push   eax
c0005e82:	e8 af bc ff ff       	call   c0001b36 <disk_write>
c0005e87:	83 c4 20             	add    esp,0x20
c0005e8a:	85 c0                	test   eax,eax
c0005e8c:	0f 85 5c fc ff ff    	jne    c0005aee <f_lseek+0xd2>
c0005e92:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005e96:	83 ec 0c             	sub    esp,0xc
c0005e99:	6a 01                	push   0x1
c0005e9b:	57                   	push   edi
c0005e9c:	56                   	push   esi
c0005e9d:	55                   	push   ebp
c0005e9e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005ea2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005ea6:	50                   	push   eax
c0005ea7:	e8 74 bc ff ff       	call   c0001b20 <disk_read>
c0005eac:	83 c4 20             	add    esp,0x20
c0005eaf:	85 c0                	test   eax,eax
c0005eb1:	0f 85 37 fc ff ff    	jne    c0005aee <f_lseek+0xd2>
c0005eb7:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005eba:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ebd:	eb 08                	jmp    c0005ec7 <f_lseek+0x4ab>
c0005ebf:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005ec7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ecb:	83 c4 3c             	add    esp,0x3c
c0005ece:	5b                   	pop    ebx
c0005ecf:	5e                   	pop    esi
c0005ed0:	5f                   	pop    edi
c0005ed1:	5d                   	pop    ebp
c0005ed2:	c3                   	ret    

c0005ed3 <f_opendir>:
c0005ed3:	56                   	push   esi
c0005ed4:	b8 09 00 00 00       	mov    eax,0x9
c0005ed9:	53                   	push   ebx
c0005eda:	83 ec 24             	sub    esp,0x24
c0005edd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ee1:	85 db                	test   ebx,ebx
c0005ee3:	0f 84 e6 00 00 00    	je     c0005fcf <f_opendir+0xfc>
c0005ee9:	31 c9                	xor    ecx,ecx
c0005eeb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005eef:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005ef3:	e8 03 c7 ff ff       	call   c00025fb <mount_volume>
c0005ef8:	85 c0                	test   eax,eax
c0005efa:	0f 85 c9 00 00 00    	jne    c0005fc9 <f_opendir+0xf6>
c0005f00:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f04:	83 ec 0c             	sub    esp,0xc
c0005f07:	89 03                	mov    DWORD PTR [ebx],eax
c0005f09:	68 60 04 00 00       	push   0x460
c0005f0e:	e8 c1 26 00 00       	call   c00085d4 <ff_memalloc>
c0005f13:	83 c4 10             	add    esp,0x10
c0005f16:	89 c6                	mov    esi,eax
c0005f18:	b8 11 00 00 00       	mov    eax,0x11
c0005f1d:	85 f6                	test   esi,esi
c0005f1f:	0f 84 aa 00 00 00    	je     c0005fcf <f_opendir+0xfc>
c0005f25:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f29:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f2f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f32:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f35:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005f39:	89 d8                	mov    eax,ebx
c0005f3b:	e8 31 ee ff ff       	call   c0004d71 <follow_path>
c0005f40:	85 c0                	test   eax,eax
c0005f42:	75 61                	jne    c0005fa5 <f_opendir+0xd2>
c0005f44:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005f48:	78 46                	js     c0005f90 <f_opendir+0xbd>
c0005f4a:	b8 05 00 00 00       	mov    eax,0x5
c0005f4f:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005f53:	74 50                	je     c0005fa5 <f_opendir+0xd2>
c0005f55:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005f59:	8a 01                	mov    al,BYTE PTR [ecx]
c0005f5b:	3c 04                	cmp    al,0x4
c0005f5d:	75 26                	jne    c0005f85 <f_opendir+0xb2>
c0005f5f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005f62:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005f65:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005f68:	30 d2                	xor    dl,dl
c0005f6a:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005f6e:	09 c2                	or     edx,eax
c0005f70:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005f73:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005f76:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005f79:	89 da                	mov    edx,ebx
c0005f7b:	8d 41 10             	lea    eax,[ecx+0x10]
c0005f7e:	e8 b4 ed ff ff       	call   c0004d37 <init_alloc_info.isra.2>
c0005f83:	eb 0b                	jmp    c0005f90 <f_opendir+0xbd>
c0005f85:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005f88:	e8 59 ed ff ff       	call   c0004ce6 <ld_clust.isra.0>
c0005f8d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005f90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f94:	31 d2                	xor    edx,edx
c0005f96:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005f9a:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005f9e:	89 d8                	mov    eax,ebx
c0005fa0:	e8 22 d1 ff ff       	call   c00030c7 <dir_sdi>
c0005fa5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005fa9:	83 ec 0c             	sub    esp,0xc
c0005fac:	56                   	push   esi
c0005fad:	e8 3a 26 00 00       	call   c00085ec <ff_memfree>
c0005fb2:	83 c4 10             	add    esp,0x10
c0005fb5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fb9:	83 f8 04             	cmp    eax,0x4
c0005fbc:	74 06                	je     c0005fc4 <f_opendir+0xf1>
c0005fbe:	85 c0                	test   eax,eax
c0005fc0:	74 0d                	je     c0005fcf <f_opendir+0xfc>
c0005fc2:	eb 05                	jmp    c0005fc9 <f_opendir+0xf6>
c0005fc4:	b8 05 00 00 00       	mov    eax,0x5
c0005fc9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fcf:	83 c4 24             	add    esp,0x24
c0005fd2:	5b                   	pop    ebx
c0005fd3:	5e                   	pop    esi
c0005fd4:	c3                   	ret    

c0005fd5 <f_closedir>:
c0005fd5:	53                   	push   ebx
c0005fd6:	83 ec 18             	sub    esp,0x18
c0005fd9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005fdd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005fe1:	89 d8                	mov    eax,ebx
c0005fe3:	e8 86 c2 ff ff       	call   c000226e <validate>
c0005fe8:	85 c0                	test   eax,eax
c0005fea:	75 06                	jne    c0005ff2 <f_closedir+0x1d>
c0005fec:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ff2:	83 c4 18             	add    esp,0x18
c0005ff5:	5b                   	pop    ebx
c0005ff6:	c3                   	ret    

c0005ff7 <f_readdir>:
c0005ff7:	57                   	push   edi
c0005ff8:	56                   	push   esi
c0005ff9:	53                   	push   ebx
c0005ffa:	83 ec 20             	sub    esp,0x20
c0005ffd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006001:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006005:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006009:	89 d8                	mov    eax,ebx
c000600b:	e8 5e c2 ff ff       	call   c000226e <validate>
c0006010:	85 c0                	test   eax,eax
c0006012:	75 77                	jne    c000608b <f_readdir+0x94>
c0006014:	85 ff                	test   edi,edi
c0006016:	75 0b                	jne    c0006023 <f_readdir+0x2c>
c0006018:	31 d2                	xor    edx,edx
c000601a:	89 d8                	mov    eax,ebx
c000601c:	e8 a6 d0 ff ff       	call   c00030c7 <dir_sdi>
c0006021:	eb 68                	jmp    c000608b <f_readdir+0x94>
c0006023:	83 ec 0c             	sub    esp,0xc
c0006026:	68 60 04 00 00       	push   0x460
c000602b:	e8 a4 25 00 00       	call   c00085d4 <ff_memalloc>
c0006030:	83 c4 10             	add    esp,0x10
c0006033:	89 c6                	mov    esi,eax
c0006035:	b8 11 00 00 00       	mov    eax,0x11
c000603a:	85 f6                	test   esi,esi
c000603c:	74 4d                	je     c000608b <f_readdir+0x94>
c000603e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006042:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006048:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000604b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000604e:	31 d2                	xor    edx,edx
c0006050:	89 d8                	mov    eax,ebx
c0006052:	e8 80 d8 ff ff       	call   c00038d7 <dir_read>
c0006057:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000605c:	75 19                	jne    c0006077 <f_readdir+0x80>
c000605e:	89 fa                	mov    edx,edi
c0006060:	89 d8                	mov    eax,ebx
c0006062:	e8 7e ea ff ff       	call   c0004ae5 <get_fileinfo>
c0006067:	31 d2                	xor    edx,edx
c0006069:	89 d8                	mov    eax,ebx
c000606b:	e8 af d5 ff ff       	call   c000361f <dir_next>
c0006070:	83 f8 04             	cmp    eax,0x4
c0006073:	75 02                	jne    c0006077 <f_readdir+0x80>
c0006075:	31 c0                	xor    eax,eax
c0006077:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000607b:	83 ec 0c             	sub    esp,0xc
c000607e:	56                   	push   esi
c000607f:	e8 68 25 00 00       	call   c00085ec <ff_memfree>
c0006084:	83 c4 10             	add    esp,0x10
c0006087:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000608b:	83 c4 20             	add    esp,0x20
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	5f                   	pop    edi
c0006091:	c3                   	ret    

c0006092 <f_stat>:
c0006092:	57                   	push   edi
c0006093:	31 c9                	xor    ecx,ecx
c0006095:	56                   	push   esi
c0006096:	53                   	push   ebx
c0006097:	83 ec 50             	sub    esp,0x50
c000609a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000609e:	8d 54 24 04          	lea    edx,[esp+0x4]
c00060a2:	8d 44 24 60          	lea    eax,[esp+0x60]
c00060a6:	e8 50 c5 ff ff       	call   c00025fb <mount_volume>
c00060ab:	89 c3                	mov    ebx,eax
c00060ad:	85 c0                	test   eax,eax
c00060af:	75 67                	jne    c0006118 <f_stat+0x86>
c00060b1:	83 ec 0c             	sub    esp,0xc
c00060b4:	bb 11 00 00 00       	mov    ebx,0x11
c00060b9:	68 60 04 00 00       	push   0x460
c00060be:	e8 11 25 00 00       	call   c00085d4 <ff_memalloc>
c00060c3:	83 c4 10             	add    esp,0x10
c00060c6:	89 c6                	mov    esi,eax
c00060c8:	85 c0                	test   eax,eax
c00060ca:	74 4c                	je     c0006118 <f_stat+0x86>
c00060cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00060d0:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00060d6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00060d9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00060dc:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00060e0:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060e4:	e8 88 ec ff ff       	call   c0004d71 <follow_path>
c00060e9:	89 c3                	mov    ebx,eax
c00060eb:	85 c0                	test   eax,eax
c00060ed:	75 1d                	jne    c000610c <f_stat+0x7a>
c00060ef:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00060f4:	78 11                	js     c0006107 <f_stat+0x75>
c00060f6:	85 ff                	test   edi,edi
c00060f8:	74 12                	je     c000610c <f_stat+0x7a>
c00060fa:	89 fa                	mov    edx,edi
c00060fc:	8d 44 24 04          	lea    eax,[esp+0x4]
c0006100:	e8 e0 e9 ff ff       	call   c0004ae5 <get_fileinfo>
c0006105:	eb 05                	jmp    c000610c <f_stat+0x7a>
c0006107:	bb 06 00 00 00       	mov    ebx,0x6
c000610c:	83 ec 0c             	sub    esp,0xc
c000610f:	56                   	push   esi
c0006110:	e8 d7 24 00 00       	call   c00085ec <ff_memfree>
c0006115:	83 c4 10             	add    esp,0x10
c0006118:	83 c4 50             	add    esp,0x50
c000611b:	89 d8                	mov    eax,ebx
c000611d:	5b                   	pop    ebx
c000611e:	5e                   	pop    esi
c000611f:	5f                   	pop    edi
c0006120:	c3                   	ret    

c0006121 <f_getfree>:
c0006121:	55                   	push   ebp
c0006122:	31 c9                	xor    ecx,ecx
c0006124:	57                   	push   edi
c0006125:	56                   	push   esi
c0006126:	53                   	push   ebx
c0006127:	83 ec 5c             	sub    esp,0x5c
c000612a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000612e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006132:	e8 c4 c4 ff ff       	call   c00025fb <mount_volume>
c0006137:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000613b:	85 c0                	test   eax,eax
c000613d:	0f 85 9d 01 00 00    	jne    c00062e0 <f_getfree+0x1bf>
c0006143:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006147:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000614b:	89 02                	mov    DWORD PTR [edx],eax
c000614d:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006150:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006153:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006156:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000615a:	39 f2                	cmp    edx,esi
c000615c:	77 0b                	ja     c0006169 <f_getfree+0x48>
c000615e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006162:	89 10                	mov    DWORD PTR [eax],edx
c0006164:	e9 77 01 00 00       	jmp    c00062e0 <f_getfree+0x1bf>
c0006169:	8a 10                	mov    dl,BYTE PTR [eax]
c000616b:	80 fa 01             	cmp    dl,0x1
c000616e:	75 3a                	jne    c00061aa <f_getfree+0x89>
c0006170:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006174:	be 02 00 00 00       	mov    esi,0x2
c0006179:	31 db                	xor    ebx,ebx
c000617b:	89 f2                	mov    edx,esi
c000617d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006181:	e8 4b cd ff ff       	call   c0002ed1 <get_fat>
c0006186:	83 f8 ff             	cmp    eax,0xffffffff
c0006189:	0f 84 28 01 00 00    	je     c00062b7 <f_getfree+0x196>
c000618f:	83 f8 01             	cmp    eax,0x1
c0006192:	0f 84 29 01 00 00    	je     c00062c1 <f_getfree+0x1a0>
c0006198:	83 d3 00             	adc    ebx,0x0
c000619b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000619f:	46                   	inc    esi
c00061a0:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c00061a3:	77 d6                	ja     c000617b <f_getfree+0x5a>
c00061a5:	e9 25 01 00 00       	jmp    c00062cf <f_getfree+0x1ae>
c00061aa:	80 fa 04             	cmp    dl,0x4
c00061ad:	0f 85 88 00 00 00    	jne    c000623b <f_getfree+0x11a>
c00061b3:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00061b6:	31 ed                	xor    ebp,ebp
c00061b8:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00061bb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061bf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061c3:	31 db                	xor    ebx,ebx
c00061c5:	85 ed                	test   ebp,ebp
c00061c7:	75 3f                	jne    c0006208 <f_getfree+0xe7>
c00061c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00061cd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00061d1:	83 c0 01             	add    eax,0x1
c00061d4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00061d8:	83 d2 00             	adc    edx,0x0
c00061db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00061df:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00061e3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061e7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00061eb:	e8 59 c1 ff ff       	call   c0002349 <move_window>
c00061f0:	85 c0                	test   eax,eax
c00061f2:	0f 85 d3 00 00 00    	jne    c00062cb <f_getfree+0x1aa>
c00061f8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00061fc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006200:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006204:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006208:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000620c:	8d 4e f8             	lea    ecx,[esi-0x8]
c000620f:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006213:	89 cf                	mov    edi,ecx
c0006215:	85 f6                	test   esi,esi
c0006217:	74 12                	je     c000622b <f_getfree+0x10a>
c0006219:	88 c1                	mov    cl,al
c000621b:	83 e1 01             	and    ecx,0x1
c000621e:	80 f9 01             	cmp    cl,0x1
c0006221:	83 d3 00             	adc    ebx,0x0
c0006224:	d0 e8                	shr    al,1
c0006226:	4e                   	dec    esi
c0006227:	39 fe                	cmp    esi,edi
c0006229:	75 ea                	jne    c0006215 <f_getfree+0xf4>
c000622b:	45                   	inc    ebp
c000622c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006232:	85 f6                	test   esi,esi
c0006234:	75 8f                	jne    c00061c5 <f_getfree+0xa4>
c0006236:	e9 94 00 00 00       	jmp    c00062cf <f_getfree+0x1ae>
c000623b:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000623e:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006241:	31 f6                	xor    esi,esi
c0006243:	31 db                	xor    ebx,ebx
c0006245:	85 f6                	test   esi,esi
c0006247:	75 1b                	jne    c0006264 <f_getfree+0x143>
c0006249:	89 d7                	mov    edi,edx
c000624b:	89 cd                	mov    ebp,ecx
c000624d:	83 c7 01             	add    edi,0x1
c0006250:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006254:	83 d5 00             	adc    ebp,0x0
c0006257:	e8 ed c0 ff ff       	call   c0002349 <move_window>
c000625c:	85 c0                	test   eax,eax
c000625e:	75 6b                	jne    c00062cb <f_getfree+0x1aa>
c0006260:	89 fa                	mov    edx,edi
c0006262:	89 e9                	mov    ecx,ebp
c0006264:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006268:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000626c:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006270:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006273:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006277:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000627b:	75 11                	jne    c000628e <f_getfree+0x16d>
c000627d:	e8 e9 b8 ff ff       	call   c0001b6b <ld_word>
c0006282:	66 83 f8 01          	cmp    ax,0x1
c0006286:	83 d3 00             	adc    ebx,0x0
c0006289:	83 c6 02             	add    esi,0x2
c000628c:	eb 13                	jmp    c00062a1 <f_getfree+0x180>
c000628e:	e8 e5 b8 ff ff       	call   c0001b78 <ld_dword>
c0006293:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006298:	83 f8 01             	cmp    eax,0x1
c000629b:	83 d3 00             	adc    ebx,0x0
c000629e:	83 c6 04             	add    esi,0x4
c00062a1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00062a7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00062ab:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00062af:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00062b3:	75 90                	jne    c0006245 <f_getfree+0x124>
c00062b5:	eb 18                	jmp    c00062cf <f_getfree+0x1ae>
c00062b7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00062bf:	eb 0e                	jmp    c00062cf <f_getfree+0x1ae>
c00062c1:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00062c9:	eb 04                	jmp    c00062cf <f_getfree+0x1ae>
c00062cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062cf:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00062d3:	89 18                	mov    DWORD PTR [eax],ebx
c00062d5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062d9:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00062dc:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00062e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00062e4:	83 c4 5c             	add    esp,0x5c
c00062e7:	5b                   	pop    ebx
c00062e8:	5e                   	pop    esi
c00062e9:	5f                   	pop    edi
c00062ea:	5d                   	pop    ebp
c00062eb:	c3                   	ret    

c00062ec <f_truncate>:
c00062ec:	56                   	push   esi
c00062ed:	53                   	push   ebx
c00062ee:	83 ec 14             	sub    esp,0x14
c00062f1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00062f5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00062f9:	89 d8                	mov    eax,ebx
c00062fb:	e8 6e bf ff ff       	call   c000226e <validate>
c0006300:	89 c6                	mov    esi,eax
c0006302:	85 c0                	test   eax,eax
c0006304:	0f 85 d2 00 00 00    	jne    c00063dc <f_truncate+0xf0>
c000630a:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c000630e:	85 f6                	test   esi,esi
c0006310:	0f 85 c6 00 00 00    	jne    c00063dc <f_truncate+0xf0>
c0006316:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000631a:	0f 84 b7 00 00 00    	je     c00063d7 <f_truncate+0xeb>
c0006320:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006323:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006326:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006329:	89 d1                	mov    ecx,edx
c000632b:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000632e:	0f 83 a8 00 00 00    	jae    c00063dc <f_truncate+0xf0>
c0006334:	09 c2                	or     edx,eax
c0006336:	75 15                	jne    c000634d <f_truncate+0x61>
c0006338:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000633b:	31 c9                	xor    ecx,ecx
c000633d:	89 d8                	mov    eax,ebx
c000633f:	e8 7a d0 ff ff       	call   c00033be <remove_chain>
c0006344:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000634b:	eb 35                	jmp    c0006382 <f_truncate+0x96>
c000634d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006350:	89 d8                	mov    eax,ebx
c0006352:	e8 7a cb ff ff       	call   c0002ed1 <get_fat>
c0006357:	89 c2                	mov    edx,eax
c0006359:	b8 01 00 00 00       	mov    eax,0x1
c000635e:	83 fa ff             	cmp    edx,0xffffffff
c0006361:	74 1f                	je     c0006382 <f_truncate+0x96>
c0006363:	b8 02 00 00 00       	mov    eax,0x2
c0006368:	83 fa 01             	cmp    edx,0x1
c000636b:	74 15                	je     c0006382 <f_truncate+0x96>
c000636d:	31 c0                	xor    eax,eax
c000636f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006373:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006376:	76 0a                	jbe    c0006382 <f_truncate+0x96>
c0006378:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000637b:	89 d8                	mov    eax,ebx
c000637d:	e8 3c d0 ff ff       	call   c00033be <remove_chain>
c0006382:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006385:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006388:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000638b:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000638e:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006391:	83 ca 40             	or     edx,0x40
c0006394:	85 c0                	test   eax,eax
c0006396:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006399:	75 35                	jne    c00063d0 <f_truncate+0xe4>
c000639b:	84 d2                	test   dl,dl
c000639d:	79 3d                	jns    c00063dc <f_truncate+0xf0>
c000639f:	83 ec 0c             	sub    esp,0xc
c00063a2:	8d 43 50             	lea    eax,[ebx+0x50]
c00063a5:	6a 01                	push   0x1
c00063a7:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00063aa:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00063ad:	50                   	push   eax
c00063ae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00063b2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00063b6:	50                   	push   eax
c00063b7:	e8 7a b7 ff ff       	call   c0001b36 <disk_write>
c00063bc:	83 c4 20             	add    esp,0x20
c00063bf:	85 c0                	test   eax,eax
c00063c1:	75 08                	jne    c00063cb <f_truncate+0xdf>
c00063c3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00063c7:	31 f6                	xor    esi,esi
c00063c9:	eb 11                	jmp    c00063dc <f_truncate+0xf0>
c00063cb:	b8 01 00 00 00       	mov    eax,0x1
c00063d0:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00063d3:	89 c6                	mov    esi,eax
c00063d5:	eb 05                	jmp    c00063dc <f_truncate+0xf0>
c00063d7:	be 07 00 00 00       	mov    esi,0x7
c00063dc:	89 f0                	mov    eax,esi
c00063de:	83 c4 14             	add    esp,0x14
c00063e1:	5b                   	pop    ebx
c00063e2:	5e                   	pop    esi
c00063e3:	c3                   	ret    

c00063e4 <f_unlink>:
c00063e4:	56                   	push   esi
c00063e5:	b9 02 00 00 00       	mov    ecx,0x2
c00063ea:	53                   	push   ebx
c00063eb:	81 ec e4 00 00 00    	sub    esp,0xe4
c00063f1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00063f5:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00063fc:	e8 fa c1 ff ff       	call   c00025fb <mount_volume>
c0006401:	85 c0                	test   eax,eax
c0006403:	0f 85 55 01 00 00    	jne    c000655e <f_unlink+0x17a>
c0006409:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000640d:	83 ec 0c             	sub    esp,0xc
c0006410:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006414:	68 60 04 00 00       	push   0x460
c0006419:	e8 b6 21 00 00       	call   c00085d4 <ff_memalloc>
c000641e:	83 c4 10             	add    esp,0x10
c0006421:	89 c3                	mov    ebx,eax
c0006423:	b8 11 00 00 00       	mov    eax,0x11
c0006428:	85 db                	test   ebx,ebx
c000642a:	0f 84 2e 01 00 00    	je     c000655e <f_unlink+0x17a>
c0006430:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006434:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000643a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000643d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006440:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006447:	8d 44 24 48          	lea    eax,[esp+0x48]
c000644b:	e8 21 e9 ff ff       	call   c0004d71 <follow_path>
c0006450:	85 c0                	test   eax,eax
c0006452:	0f 85 f2 00 00 00    	jne    c000654a <f_unlink+0x166>
c0006458:	b8 06 00 00 00       	mov    eax,0x6
c000645d:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006465:	0f 88 df 00 00 00    	js     c000654a <f_unlink+0x166>
c000646b:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006470:	74 0a                	je     c000647c <f_unlink+0x98>
c0006472:	b8 07 00 00 00       	mov    eax,0x7
c0006477:	e9 ce 00 00 00       	jmp    c000654a <f_unlink+0x166>
c000647c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006480:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006484:	8a 02                	mov    al,BYTE PTR [edx]
c0006486:	3c 04                	cmp    al,0x4
c0006488:	75 12                	jne    c000649c <f_unlink+0xb8>
c000648a:	8d 42 10             	lea    eax,[edx+0x10]
c000648d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006491:	e8 a1 e8 ff ff       	call   c0004d37 <init_alloc_info.isra.2>
c0006496:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000649a:	eb 0e                	jmp    c00064aa <f_unlink+0xc6>
c000649c:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00064a3:	e8 3e e8 ff ff       	call   c0004ce6 <ld_clust.isra.0>
c00064a8:	89 c6                	mov    esi,eax
c00064aa:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00064af:	75 12                	jne    c00064c3 <f_unlink+0xdf>
c00064b1:	8d 44 24 48          	lea    eax,[esp+0x48]
c00064b5:	e8 94 d6 ff ff       	call   c0003b4e <dir_remove>
c00064ba:	85 c0                	test   eax,eax
c00064bc:	74 6c                	je     c000652a <f_unlink+0x146>
c00064be:	e9 87 00 00 00       	jmp    c000654a <f_unlink+0x166>
c00064c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c7:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00064ce:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00064d5:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064d8:	75 21                	jne    c00064fb <f_unlink+0x117>
c00064da:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00064de:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00064e2:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00064e9:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00064f0:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00064f4:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00064fb:	31 d2                	xor    edx,edx
c00064fd:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006504:	e8 be cb ff ff       	call   c00030c7 <dir_sdi>
c0006509:	85 c0                	test   eax,eax
c000650b:	75 3d                	jne    c000654a <f_unlink+0x166>
c000650d:	31 d2                	xor    edx,edx
c000650f:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006516:	e8 bc d3 ff ff       	call   c00038d7 <dir_read>
c000651b:	85 c0                	test   eax,eax
c000651d:	0f 84 4f ff ff ff    	je     c0006472 <f_unlink+0x8e>
c0006523:	83 f8 04             	cmp    eax,0x4
c0006526:	75 22                	jne    c000654a <f_unlink+0x166>
c0006528:	eb 87                	jmp    c00064b1 <f_unlink+0xcd>
c000652a:	85 f6                	test   esi,esi
c000652c:	75 0b                	jne    c0006539 <f_unlink+0x155>
c000652e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006532:	e8 3d df ff ff       	call   c0004474 <sync_fs>
c0006537:	eb 11                	jmp    c000654a <f_unlink+0x166>
c0006539:	31 c9                	xor    ecx,ecx
c000653b:	89 f2                	mov    edx,esi
c000653d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006541:	e8 78 ce ff ff       	call   c00033be <remove_chain>
c0006546:	85 c0                	test   eax,eax
c0006548:	74 e4                	je     c000652e <f_unlink+0x14a>
c000654a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000654e:	83 ec 0c             	sub    esp,0xc
c0006551:	53                   	push   ebx
c0006552:	e8 95 20 00 00       	call   c00085ec <ff_memfree>
c0006557:	83 c4 10             	add    esp,0x10
c000655a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000655e:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006564:	5b                   	pop    ebx
c0006565:	5e                   	pop    esi
c0006566:	c3                   	ret    

c0006567 <f_mkdir>:
c0006567:	57                   	push   edi
c0006568:	b9 02 00 00 00       	mov    ecx,0x2
c000656d:	56                   	push   esi
c000656e:	53                   	push   ebx
c000656f:	83 c4 80             	add    esp,0xffffff80
c0006572:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006576:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000657d:	e8 79 c0 ff ff       	call   c00025fb <mount_volume>
c0006582:	89 c3                	mov    ebx,eax
c0006584:	85 c0                	test   eax,eax
c0006586:	0f 85 fe 01 00 00    	jne    c000678a <f_mkdir+0x223>
c000658c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006590:	bb 11 00 00 00       	mov    ebx,0x11
c0006595:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006599:	83 ec 0c             	sub    esp,0xc
c000659c:	68 60 04 00 00       	push   0x460
c00065a1:	e8 2e 20 00 00       	call   c00085d4 <ff_memalloc>
c00065a6:	83 c4 10             	add    esp,0x10
c00065a9:	89 c7                	mov    edi,eax
c00065ab:	85 c0                	test   eax,eax
c00065ad:	0f 84 d7 01 00 00    	je     c000678a <f_mkdir+0x223>
c00065b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065b7:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00065bd:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00065c0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00065c3:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00065ca:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065ce:	e8 9e e7 ff ff       	call   c0004d71 <follow_path>
c00065d3:	89 c3                	mov    ebx,eax
c00065d5:	85 c0                	test   eax,eax
c00065d7:	74 3e                	je     c0006617 <f_mkdir+0xb0>
c00065d9:	83 f8 04             	cmp    eax,0x4
c00065dc:	75 3e                	jne    c000661c <f_mkdir+0xb5>
c00065de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065e2:	31 d2                	xor    edx,edx
c00065e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00065e8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00065ec:	e8 ce cb ff ff       	call   c00031bf <create_chain>
c00065f1:	89 c6                	mov    esi,eax
c00065f3:	85 c0                	test   eax,eax
c00065f5:	74 0c                	je     c0006603 <f_mkdir+0x9c>
c00065f7:	bb 02 00 00 00       	mov    ebx,0x2
c00065fc:	83 f8 01             	cmp    eax,0x1
c00065ff:	74 07                	je     c0006608 <f_mkdir+0xa1>
c0006601:	eb 2a                	jmp    c000662d <f_mkdir+0xc6>
c0006603:	bb 07 00 00 00       	mov    ebx,0x7
c0006608:	31 c9                	xor    ecx,ecx
c000660a:	89 f2                	mov    edx,esi
c000660c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006610:	e8 a9 cd ff ff       	call   c00033be <remove_chain>
c0006615:	eb 05                	jmp    c000661c <f_mkdir+0xb5>
c0006617:	bb 08 00 00 00       	mov    ebx,0x8
c000661c:	83 ec 0c             	sub    esp,0xc
c000661f:	57                   	push   edi
c0006620:	e8 c7 1f 00 00       	call   c00085ec <ff_memfree>
c0006625:	83 c4 10             	add    esp,0x10
c0006628:	e9 5d 01 00 00       	jmp    c000678a <f_mkdir+0x223>
c000662d:	bb 01 00 00 00       	mov    ebx,0x1
c0006632:	83 f8 ff             	cmp    eax,0xffffffff
c0006635:	74 d1                	je     c0006608 <f_mkdir+0xa1>
c0006637:	89 f2                	mov    edx,esi
c0006639:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000663d:	e8 c4 ce ff ff       	call   c0003506 <dir_clear>
c0006642:	89 c3                	mov    ebx,eax
c0006644:	85 c0                	test   eax,eax
c0006646:	75 c0                	jne    c0006608 <f_mkdir+0xa1>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000664f:	74 69                	je     c00066ba <f_mkdir+0x153>
c0006651:	b9 0b 00 00 00       	mov    ecx,0xb
c0006656:	83 c0 54             	add    eax,0x54
c0006659:	ba 20 00 00 00       	mov    edx,0x20
c000665e:	e8 9c b5 ff ff       	call   c0001bff <mem_set>
c0006663:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006667:	ba 00 00 21 50       	mov    edx,0x50210000
c000666c:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006670:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006674:	83 c0 6a             	add    eax,0x6a
c0006677:	e8 65 b5 ff ff       	call   c0001be1 <st_dword>
c000667c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006680:	89 f1                	mov    ecx,esi
c0006682:	8d 50 54             	lea    edx,[eax+0x54]
c0006685:	e8 85 e6 ff ff       	call   c0004d0f <st_clust.isra.1>
c000668a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000668e:	b9 20 00 00 00       	mov    ecx,0x20
c0006693:	8d 50 54             	lea    edx,[eax+0x54]
c0006696:	83 c0 74             	add    eax,0x74
c0006699:	e8 4c b5 ff ff       	call   c0001bea <mem_cpy>
c000669e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066a2:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00066a6:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00066aa:	8d 50 74             	lea    edx,[eax+0x74]
c00066ad:	e8 5d e6 ff ff       	call   c0004d0f <st_clust.isra.1>
c00066b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066b6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00066ba:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066be:	e8 2f db ff ff       	call   c00041f2 <dir_register>
c00066c3:	89 c3                	mov    ebx,eax
c00066c5:	85 c0                	test   eax,eax
c00066c7:	0f 85 3b ff ff ff    	jne    c0006608 <f_mkdir+0xa1>
c00066cd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066d4:	75 74                	jne    c000674a <f_mkdir+0x1e3>
c00066d6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066d9:	ba 00 00 21 50       	mov    edx,0x50210000
c00066de:	83 c0 0c             	add    eax,0xc
c00066e1:	e8 fb b4 ff ff       	call   c0001be1 <st_dword>
c00066e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066ea:	89 f2                	mov    edx,esi
c00066ec:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066ef:	83 c0 34             	add    eax,0x34
c00066f2:	e8 ea b4 ff ff       	call   c0001be1 <st_dword>
c00066f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066fb:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00066ff:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006702:	c1 e2 09             	shl    edx,0x9
c0006705:	83 c0 38             	add    eax,0x38
c0006708:	e8 d4 b4 ff ff       	call   c0001be1 <st_dword>
c000670d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006711:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006715:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006718:	c1 e2 09             	shl    edx,0x9
c000671b:	83 c0 28             	add    eax,0x28
c000671e:	e8 be b4 ff ff       	call   c0001be1 <st_dword>
c0006723:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006727:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000672a:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000672e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006731:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006735:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006739:	e8 8b d3 ff ff       	call   c0003ac9 <store_xdir>
c000673e:	89 c3                	mov    ebx,eax
c0006740:	85 c0                	test   eax,eax
c0006742:	0f 85 d4 fe ff ff    	jne    c000661c <f_mkdir+0xb5>
c0006748:	eb 30                	jmp    c000677a <f_mkdir+0x213>
c000674a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000674e:	ba 00 00 21 50       	mov    edx,0x50210000
c0006753:	83 c0 16             	add    eax,0x16
c0006756:	e8 86 b4 ff ff       	call   c0001be1 <st_dword>
c000675b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675f:	89 f1                	mov    ecx,esi
c0006761:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006765:	e8 a5 e5 ff ff       	call   c0004d0f <st_clust.isra.1>
c000676a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000676e:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006776:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000677a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000677e:	e8 f1 dc ff ff       	call   c0004474 <sync_fs>
c0006783:	89 c3                	mov    ebx,eax
c0006785:	e9 92 fe ff ff       	jmp    c000661c <f_mkdir+0xb5>
c000678a:	83 ec 80             	sub    esp,0xffffff80
c000678d:	89 d8                	mov    eax,ebx
c000678f:	5b                   	pop    ebx
c0006790:	5e                   	pop    esi
c0006791:	5f                   	pop    edi
c0006792:	c3                   	ret    

c0006793 <f_rename>:
c0006793:	55                   	push   ebp
c0006794:	57                   	push   edi
c0006795:	56                   	push   esi
c0006796:	53                   	push   ebx
c0006797:	81 ec fc 00 00 00    	sub    esp,0xfc
c000679d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00067a4:	e8 a4 b9 ff ff       	call   c000214d <get_ldnumber>
c00067a9:	b9 02 00 00 00       	mov    ecx,0x2
c00067ae:	8d 54 24 14          	lea    edx,[esp+0x14]
c00067b2:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00067b9:	e8 3d be ff ff       	call   c00025fb <mount_volume>
c00067be:	85 c0                	test   eax,eax
c00067c0:	0f 85 b5 02 00 00    	jne    c0006a7b <f_rename+0x2e8>
c00067c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067ca:	83 ec 0c             	sub    esp,0xc
c00067cd:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00067d1:	68 60 04 00 00       	push   0x460
c00067d6:	e8 f9 1d 00 00       	call   c00085d4 <ff_memalloc>
c00067db:	83 c4 10             	add    esp,0x10
c00067de:	89 c3                	mov    ebx,eax
c00067e0:	b8 11 00 00 00       	mov    eax,0x11
c00067e5:	85 db                	test   ebx,ebx
c00067e7:	0f 84 8e 02 00 00    	je     c0006a7b <f_rename+0x2e8>
c00067ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067f1:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00067f7:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00067fa:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00067fd:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c0006804:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006808:	e8 64 e5 ff ff       	call   c0004d71 <follow_path>
c000680d:	85 c0                	test   eax,eax
c000680f:	0f 85 52 02 00 00    	jne    c0006a67 <f_rename+0x2d4>
c0006815:	b8 06 00 00 00       	mov    eax,0x6
c000681a:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006822:	0f 85 3f 02 00 00    	jne    c0006a67 <f_rename+0x2d4>
c0006828:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000682c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000682f:	0f 85 05 01 00 00    	jne    c000693a <f_rename+0x1a7>
c0006835:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006838:	b9 40 00 00 00       	mov    ecx,0x40
c000683d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006841:	e8 a4 b3 ff ff       	call   c0001bea <mem_cpy>
c0006846:	b9 4c 00 00 00       	mov    ecx,0x4c
c000684b:	8d 54 24 58          	lea    edx,[esp+0x58]
c000684f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006856:	e8 8f b3 ff ff       	call   c0001bea <mem_cpy>
c000685b:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006862:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006869:	e8 03 e5 ff ff       	call   c0004d71 <follow_path>
c000686e:	85 c0                	test   eax,eax
c0006870:	75 29                	jne    c000689b <f_rename+0x108>
c0006872:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006876:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000687d:	74 0a                	je     c0006889 <f_rename+0xf6>
c000687f:	b8 08 00 00 00       	mov    eax,0x8
c0006884:	e9 de 01 00 00       	jmp    c0006a67 <f_rename+0x2d4>
c0006889:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006890:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006897:	75 e6                	jne    c000687f <f_rename+0xec>
c0006899:	eb 09                	jmp    c00068a4 <f_rename+0x111>
c000689b:	83 f8 04             	cmp    eax,0x4
c000689e:	0f 85 c3 01 00 00    	jne    c0006a67 <f_rename+0x2d4>
c00068a4:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00068ab:	e8 42 d9 ff ff       	call   c00041f2 <dir_register>
c00068b0:	85 c0                	test   eax,eax
c00068b2:	0f 85 af 01 00 00    	jne    c0006a67 <f_rename+0x2d4>
c00068b8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068bc:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00068bf:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00068c2:	89 c5                	mov    ebp,eax
c00068c4:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00068c7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00068cb:	8d 46 24             	lea    eax,[esi+0x24]
c00068ce:	e8 98 b2 ff ff       	call   c0001b6b <ld_word>
c00068d3:	b9 40 00 00 00       	mov    ecx,0x40
c00068d8:	89 c7                	mov    edi,eax
c00068da:	8d 54 24 18          	lea    edx,[esp+0x18]
c00068de:	89 f0                	mov    eax,esi
c00068e0:	e8 05 b3 ff ff       	call   c0001bea <mem_cpy>
c00068e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e9:	89 e9                	mov    ecx,ebp
c00068eb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068ee:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00068f1:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00068f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068f9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068fc:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00068ff:	0f b7 d7             	movzx  edx,di
c0006902:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006905:	83 c0 24             	add    eax,0x24
c0006908:	e8 d0 b2 ff ff       	call   c0001bdd <st_word>
c000690d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006911:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006914:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006917:	a8 10                	test   al,0x10
c0006919:	75 06                	jne    c0006921 <f_rename+0x18e>
c000691b:	83 c8 20             	or     eax,0x20
c000691e:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006921:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006928:	e8 9c d1 ff ff       	call   c0003ac9 <store_xdir>
c000692d:	85 c0                	test   eax,eax
c000692f:	0f 84 1c 01 00 00    	je     c0006a51 <f_rename+0x2be>
c0006935:	e9 2d 01 00 00       	jmp    c0006a67 <f_rename+0x2d4>
c000693a:	b9 20 00 00 00       	mov    ecx,0x20
c000693f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006946:	8d 44 24 18          	lea    eax,[esp+0x18]
c000694a:	e8 9b b2 ff ff       	call   c0001bea <mem_cpy>
c000694f:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006954:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006958:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695f:	e8 86 b2 ff ff       	call   c0001bea <mem_cpy>
c0006964:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000696b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006972:	e8 fa e3 ff ff       	call   c0004d71 <follow_path>
c0006977:	85 c0                	test   eax,eax
c0006979:	75 27                	jne    c00069a2 <f_rename+0x20f>
c000697b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000697f:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006986:	0f 85 f3 fe ff ff    	jne    c000687f <f_rename+0xec>
c000698c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006993:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000699a:	0f 85 df fe ff ff    	jne    c000687f <f_rename+0xec>
c00069a0:	eb 09                	jmp    c00069ab <f_rename+0x218>
c00069a2:	83 f8 04             	cmp    eax,0x4
c00069a5:	0f 85 bc 00 00 00    	jne    c0006a67 <f_rename+0x2d4>
c00069ab:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069b2:	e8 3b d8 ff ff       	call   c00041f2 <dir_register>
c00069b7:	85 c0                	test   eax,eax
c00069b9:	0f 85 a8 00 00 00    	jne    c0006a67 <f_rename+0x2d4>
c00069bf:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00069c6:	b9 13 00 00 00       	mov    ecx,0x13
c00069cb:	8d 46 0d             	lea    eax,[esi+0xd]
c00069ce:	8d 54 24 25          	lea    edx,[esp+0x25]
c00069d2:	e8 13 b2 ff ff       	call   c0001bea <mem_cpy>
c00069d7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00069db:	a8 10                	test   al,0x10
c00069dd:	75 03                	jne    c00069e2 <f_rename+0x24f>
c00069df:	83 c8 20             	or     eax,0x20
c00069e2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00069e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069e9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069ed:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00069f1:	74 5e                	je     c0006a51 <f_rename+0x2be>
c00069f3:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00069fa:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00069fe:	74 51                	je     c0006a51 <f_rename+0x2be>
c0006a00:	89 f2                	mov    edx,esi
c0006a02:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006a06:	8a 07                	mov    al,BYTE PTR [edi]
c0006a08:	e8 d9 e2 ff ff       	call   c0004ce6 <ld_clust.isra.0>
c0006a0d:	89 c2                	mov    edx,eax
c0006a0f:	89 f8                	mov    eax,edi
c0006a11:	e8 ee b3 ff ff       	call   c0001e04 <clst2sect>
c0006a16:	89 c6                	mov    esi,eax
c0006a18:	89 d1                	mov    ecx,edx
c0006a1a:	b8 02 00 00 00       	mov    eax,0x2
c0006a1f:	09 f2                	or     edx,esi
c0006a21:	74 44                	je     c0006a67 <f_rename+0x2d4>
c0006a23:	89 f2                	mov    edx,esi
c0006a25:	89 f8                	mov    eax,edi
c0006a27:	e8 1d b9 ff ff       	call   c0002349 <move_window>
c0006a2c:	85 c0                	test   eax,eax
c0006a2e:	75 37                	jne    c0006a67 <f_rename+0x2d4>
c0006a30:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a34:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006a38:	75 17                	jne    c0006a51 <f_rename+0x2be>
c0006a3a:	8d 50 74             	lea    edx,[eax+0x74]
c0006a3d:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006a44:	e8 c6 e2 ff ff       	call   c0004d0f <st_clust.isra.1>
c0006a49:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a4d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a51:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006a55:	e8 f4 d0 ff ff       	call   c0003b4e <dir_remove>
c0006a5a:	85 c0                	test   eax,eax
c0006a5c:	75 09                	jne    c0006a67 <f_rename+0x2d4>
c0006a5e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a62:	e8 0d da ff ff       	call   c0004474 <sync_fs>
c0006a67:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a6b:	83 ec 0c             	sub    esp,0xc
c0006a6e:	53                   	push   ebx
c0006a6f:	e8 78 1b 00 00       	call   c00085ec <ff_memfree>
c0006a74:	83 c4 10             	add    esp,0x10
c0006a77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a7b:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006a81:	5b                   	pop    ebx
c0006a82:	5e                   	pop    esi
c0006a83:	5f                   	pop    edi
c0006a84:	5d                   	pop    ebp
c0006a85:	c3                   	ret    

c0006a86 <f_chmod>:
c0006a86:	57                   	push   edi
c0006a87:	b9 02 00 00 00       	mov    ecx,0x2
c0006a8c:	56                   	push   esi
c0006a8d:	53                   	push   ebx
c0006a8e:	83 ec 60             	sub    esp,0x60
c0006a91:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006a95:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006a99:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a9d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006aa1:	e8 55 bb ff ff       	call   c00025fb <mount_volume>
c0006aa6:	85 c0                	test   eax,eax
c0006aa8:	0f 85 af 00 00 00    	jne    c0006b5d <f_chmod+0xd7>
c0006aae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ab2:	83 ec 0c             	sub    esp,0xc
c0006ab5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006ab9:	68 60 04 00 00       	push   0x460
c0006abe:	e8 11 1b 00 00       	call   c00085d4 <ff_memalloc>
c0006ac3:	83 c4 10             	add    esp,0x10
c0006ac6:	89 c6                	mov    esi,eax
c0006ac8:	b8 11 00 00 00       	mov    eax,0x11
c0006acd:	85 f6                	test   esi,esi
c0006acf:	0f 84 88 00 00 00    	je     c0006b5d <f_chmod+0xd7>
c0006ad5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ad9:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006adf:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006ae2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ae5:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ae9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006aed:	e8 7f e2 ff ff       	call   c0004d71 <follow_path>
c0006af2:	85 c0                	test   eax,eax
c0006af4:	75 53                	jne    c0006b49 <f_chmod+0xc3>
c0006af6:	b8 06 00 00 00       	mov    eax,0x6
c0006afb:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006b00:	75 47                	jne    c0006b49 <f_chmod+0xc3>
c0006b02:	89 f9                	mov    ecx,edi
c0006b04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b08:	83 e1 27             	and    ecx,0x27
c0006b0b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b0e:	75 1d                	jne    c0006b2d <f_chmod+0xa7>
c0006b10:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006b13:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b16:	21 cb                	and    ebx,ecx
c0006b18:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b1b:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006b1e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b22:	e8 a2 cf ff ff       	call   c0003ac9 <store_xdir>
c0006b27:	85 c0                	test   eax,eax
c0006b29:	75 1e                	jne    c0006b49 <f_chmod+0xc3>
c0006b2b:	eb 13                	jmp    c0006b40 <f_chmod+0xba>
c0006b2d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006b31:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b34:	21 cb                	and    ebx,ecx
c0006b36:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b39:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006b3c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b44:	e8 2b d9 ff ff       	call   c0004474 <sync_fs>
c0006b49:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b4d:	83 ec 0c             	sub    esp,0xc
c0006b50:	56                   	push   esi
c0006b51:	e8 96 1a 00 00       	call   c00085ec <ff_memfree>
c0006b56:	83 c4 10             	add    esp,0x10
c0006b59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b5d:	83 c4 60             	add    esp,0x60
c0006b60:	5b                   	pop    ebx
c0006b61:	5e                   	pop    esi
c0006b62:	5f                   	pop    edi
c0006b63:	c3                   	ret    

c0006b64 <f_utime>:
c0006b64:	56                   	push   esi
c0006b65:	b9 02 00 00 00       	mov    ecx,0x2
c0006b6a:	53                   	push   ebx
c0006b6b:	83 ec 64             	sub    esp,0x64
c0006b6e:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006b72:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b76:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b7a:	e8 7c ba ff ff       	call   c00025fb <mount_volume>
c0006b7f:	85 c0                	test   eax,eax
c0006b81:	0f 85 b5 00 00 00    	jne    c0006c3c <f_utime+0xd8>
c0006b87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b8b:	83 ec 0c             	sub    esp,0xc
c0006b8e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b92:	68 60 04 00 00       	push   0x460
c0006b97:	e8 38 1a 00 00       	call   c00085d4 <ff_memalloc>
c0006b9c:	83 c4 10             	add    esp,0x10
c0006b9f:	89 c3                	mov    ebx,eax
c0006ba1:	b8 11 00 00 00       	mov    eax,0x11
c0006ba6:	85 db                	test   ebx,ebx
c0006ba8:	0f 84 8e 00 00 00    	je     c0006c3c <f_utime+0xd8>
c0006bae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bb2:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006bb8:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006bbb:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bbe:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bc2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bc6:	e8 a6 e1 ff ff       	call   c0004d71 <follow_path>
c0006bcb:	85 c0                	test   eax,eax
c0006bcd:	75 59                	jne    c0006c28 <f_utime+0xc4>
c0006bcf:	b8 06 00 00 00       	mov    eax,0x6
c0006bd4:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bd9:	75 4d                	jne    c0006c28 <f_utime+0xc4>
c0006bdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bdf:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006be3:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006be7:	c1 e2 10             	shl    edx,0x10
c0006bea:	09 ca                	or     edx,ecx
c0006bec:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bef:	75 1a                	jne    c0006c0b <f_utime+0xa7>
c0006bf1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bf4:	83 c0 0c             	add    eax,0xc
c0006bf7:	e8 e5 af ff ff       	call   c0001be1 <st_dword>
c0006bfc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c00:	e8 c4 ce ff ff       	call   c0003ac9 <store_xdir>
c0006c05:	85 c0                	test   eax,eax
c0006c07:	75 1f                	jne    c0006c28 <f_utime+0xc4>
c0006c09:	eb 14                	jmp    c0006c1f <f_utime+0xbb>
c0006c0b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006c0f:	83 c0 16             	add    eax,0x16
c0006c12:	e8 ca af ff ff       	call   c0001be1 <st_dword>
c0006c17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c1b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c23:	e8 4c d8 ff ff       	call   c0004474 <sync_fs>
c0006c28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c2c:	83 ec 0c             	sub    esp,0xc
c0006c2f:	53                   	push   ebx
c0006c30:	e8 b7 19 00 00       	call   c00085ec <ff_memfree>
c0006c35:	83 c4 10             	add    esp,0x10
c0006c38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c3c:	83 c4 64             	add    esp,0x64
c0006c3f:	5b                   	pop    ebx
c0006c40:	5e                   	pop    esi
c0006c41:	c3                   	ret    

c0006c42 <f_getlabel>:
c0006c42:	55                   	push   ebp
c0006c43:	31 c9                	xor    ecx,ecx
c0006c45:	57                   	push   edi
c0006c46:	56                   	push   esi
c0006c47:	53                   	push   ebx
c0006c48:	83 ec 6c             	sub    esp,0x6c
c0006c4b:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c4f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c56:	e8 a0 b9 ff ff       	call   c00025fb <mount_volume>
c0006c5b:	89 c6                	mov    esi,eax
c0006c5d:	85 c0                	test   eax,eax
c0006c5f:	0f 85 c1 01 00 00    	jne    c0006e26 <f_getlabel+0x1e4>
c0006c65:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006c6d:	0f 84 5f 01 00 00    	je     c0006dd2 <f_getlabel+0x190>
c0006c73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c77:	31 d2                	xor    edx,edx
c0006c79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006c7d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006c85:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c89:	e8 39 c4 ff ff       	call   c00030c7 <dir_sdi>
c0006c8e:	85 c0                	test   eax,eax
c0006c90:	0f 85 2d 01 00 00    	jne    c0006dc3 <f_getlabel+0x181>
c0006c96:	ba 01 00 00 00       	mov    edx,0x1
c0006c9b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c9f:	e8 33 cc ff ff       	call   c00038d7 <dir_read>
c0006ca4:	85 c0                	test   eax,eax
c0006ca6:	0f 85 17 01 00 00    	jne    c0006dc3 <f_getlabel+0x181>
c0006cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cb0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cb3:	74 09                	je     c0006cbe <f_getlabel+0x7c>
c0006cb5:	31 db                	xor    ebx,ebx
c0006cb7:	31 c9                	xor    ecx,ecx
c0006cb9:	e9 c8 00 00 00       	jmp    c0006d86 <f_getlabel+0x144>
c0006cbe:	31 ed                	xor    ebp,ebp
c0006cc0:	31 db                	xor    ebx,ebx
c0006cc2:	31 ff                	xor    edi,edi
c0006cc4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006cc8:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006ccc:	39 fa                	cmp    edx,edi
c0006cce:	76 4b                	jbe    c0006d1b <f_getlabel+0xd9>
c0006cd0:	47                   	inc    edi
c0006cd1:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006cd4:	01 d0                	add    eax,edx
c0006cd6:	e8 90 ae ff ff       	call   c0001b6b <ld_word>
c0006cdb:	66 85 ed             	test   bp,bp
c0006cde:	75 0d                	jne    c0006ced <f_getlabel+0xab>
c0006ce0:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006ce6:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006ceb:	76 28                	jbe    c0006d15 <f_getlabel+0xd3>
c0006ced:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006cf4:	89 e9                	mov    ecx,ebp
c0006cf6:	01 da                	add    edx,ebx
c0006cf8:	c1 e1 10             	shl    ecx,0x10
c0006cfb:	0f b7 c0             	movzx  eax,ax
c0006cfe:	09 c8                	or     eax,ecx
c0006d00:	b9 04 00 00 00       	mov    ecx,0x4
c0006d05:	e8 01 b0 ff ff       	call   c0001d0b <put_utf>
c0006d0a:	84 c0                	test   al,al
c0006d0c:	74 0b                	je     c0006d19 <f_getlabel+0xd7>
c0006d0e:	0f b6 c0             	movzx  eax,al
c0006d11:	01 c3                	add    ebx,eax
c0006d13:	31 c0                	xor    eax,eax
c0006d15:	89 c5                	mov    ebp,eax
c0006d17:	eb ab                	jmp    c0006cc4 <f_getlabel+0x82>
c0006d19:	31 db                	xor    ebx,ebx
c0006d1b:	66 85 ed             	test   bp,bp
c0006d1e:	74 02                	je     c0006d22 <f_getlabel+0xe0>
c0006d20:	31 db                	xor    ebx,ebx
c0006d22:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006d29:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006d2d:	e9 a0 00 00 00       	jmp    c0006dd2 <f_getlabel+0x190>
c0006d32:	83 ff 0b             	cmp    edi,0xb
c0006d35:	74 11                	je     c0006d48 <f_getlabel+0x106>
c0006d37:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006d3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d40:	8d 79 02             	lea    edi,[ecx+0x2]
c0006d43:	c1 e0 08             	shl    eax,0x8
c0006d46:	09 c2                	or     edx,eax
c0006d48:	0f b7 d2             	movzx  edx,dx
c0006d4b:	50                   	push   eax
c0006d4c:	50                   	push   eax
c0006d4d:	68 b5 01 00 00       	push   0x1b5
c0006d52:	52                   	push   edx
c0006d53:	e8 44 19 00 00       	call   c000869c <ff_oem2uni>
c0006d58:	83 c4 10             	add    esp,0x10
c0006d5b:	66 85 c0             	test   ax,ax
c0006d5e:	74 46                	je     c0006da6 <f_getlabel+0x164>
c0006d60:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006d67:	0f b7 c0             	movzx  eax,ax
c0006d6a:	01 da                	add    edx,ebx
c0006d6c:	b9 04 00 00 00       	mov    ecx,0x4
c0006d71:	e8 95 af ff ff       	call   c0001d0b <put_utf>
c0006d76:	84 c0                	test   al,al
c0006d78:	74 2c                	je     c0006da6 <f_getlabel+0x164>
c0006d7a:	0f b6 c0             	movzx  eax,al
c0006d7d:	01 c3                	add    ebx,eax
c0006d7f:	83 ff 0b             	cmp    edi,0xb
c0006d82:	74 24                	je     c0006da8 <f_getlabel+0x166>
c0006d84:	89 f9                	mov    ecx,edi
c0006d86:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006d8a:	8d 79 01             	lea    edi,[ecx+0x1]
c0006d8d:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006d92:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006d97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d9b:	e8 9f ae ff ff       	call   c0001c3f <dbc_1st>
c0006da0:	85 c0                	test   eax,eax
c0006da2:	74 a4                	je     c0006d48 <f_getlabel+0x106>
c0006da4:	eb 8c                	jmp    c0006d32 <f_getlabel+0xf0>
c0006da6:	31 db                	xor    ebx,ebx
c0006da8:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006daf:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006db2:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006db9:	74 17                	je     c0006dd2 <f_getlabel+0x190>
c0006dbb:	4b                   	dec    ebx
c0006dbc:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006dbf:	74 ee                	je     c0006daf <f_getlabel+0x16d>
c0006dc1:	eb 0f                	jmp    c0006dd2 <f_getlabel+0x190>
c0006dc3:	83 f8 04             	cmp    eax,0x4
c0006dc6:	75 5c                	jne    c0006e24 <f_getlabel+0x1e2>
c0006dc8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006dcf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006dd2:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006dda:	74 4a                	je     c0006e26 <f_getlabel+0x1e4>
c0006ddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006de0:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006de3:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006de6:	e8 5e b5 ff ff       	call   c0002349 <move_window>
c0006deb:	89 c6                	mov    esi,eax
c0006ded:	85 c0                	test   eax,eax
c0006def:	75 35                	jne    c0006e26 <f_getlabel+0x1e4>
c0006df1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006df5:	b8 43 00 00 00       	mov    eax,0x43
c0006dfa:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006dfc:	80 f9 03             	cmp    cl,0x3
c0006dff:	74 0f                	je     c0006e10 <f_getlabel+0x1ce>
c0006e01:	31 c0                	xor    eax,eax
c0006e03:	80 f9 04             	cmp    cl,0x4
c0006e06:	0f 94 c0             	sete   al
c0006e09:	48                   	dec    eax
c0006e0a:	83 e0 c3             	and    eax,0xffffffc3
c0006e0d:	83 c0 64             	add    eax,0x64
c0006e10:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006e14:	e8 5f ad ff ff       	call   c0001b78 <ld_dword>
c0006e19:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006e20:	89 07                	mov    DWORD PTR [edi],eax
c0006e22:	eb 02                	jmp    c0006e26 <f_getlabel+0x1e4>
c0006e24:	89 c6                	mov    esi,eax
c0006e26:	83 c4 6c             	add    esp,0x6c
c0006e29:	89 f0                	mov    eax,esi
c0006e2b:	5b                   	pop    ebx
c0006e2c:	5e                   	pop    esi
c0006e2d:	5f                   	pop    edi
c0006e2e:	5d                   	pop    ebp
c0006e2f:	c3                   	ret    

c0006e30 <f_setlabel>:
c0006e30:	56                   	push   esi
c0006e31:	b9 02 00 00 00       	mov    ecx,0x2
c0006e36:	53                   	push   ebx
c0006e37:	83 ec 74             	sub    esp,0x74
c0006e3a:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006e3e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e45:	e8 b1 b7 ff ff       	call   c00025fb <mount_volume>
c0006e4a:	89 c6                	mov    esi,eax
c0006e4c:	85 c0                	test   eax,eax
c0006e4e:	0f 85 41 02 00 00    	jne    c0007095 <f_setlabel+0x265>
c0006e54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e58:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e5b:	0f 85 8e 00 00 00    	jne    c0006eef <f_setlabel+0xbf>
c0006e61:	b9 16 00 00 00       	mov    ecx,0x16
c0006e66:	31 d2                	xor    edx,edx
c0006e68:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006e6c:	31 db                	xor    ebx,ebx
c0006e6e:	e8 8c ad ff ff       	call   c0001bff <mem_set>
c0006e73:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006e7a:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006e7d:	0f 86 0a 01 00 00    	jbe    c0006f8d <f_setlabel+0x15d>
c0006e83:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e8a:	e8 b6 ad ff ff       	call   c0001c45 <tchar2uni>
c0006e8f:	89 c6                	mov    esi,eax
c0006e91:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e96:	76 2a                	jbe    c0006ec2 <f_setlabel+0x92>
c0006e98:	83 f8 ff             	cmp    eax,0xffffffff
c0006e9b:	74 05                	je     c0006ea2 <f_setlabel+0x72>
c0006e9d:	83 fb 09             	cmp    ebx,0x9
c0006ea0:	76 0a                	jbe    c0006eac <f_setlabel+0x7c>
c0006ea2:	be 06 00 00 00       	mov    esi,0x6
c0006ea7:	e9 e9 01 00 00       	jmp    c0007095 <f_setlabel+0x265>
c0006eac:	89 c2                	mov    edx,eax
c0006eae:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006eb2:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006eb5:	c1 ea 10             	shr    edx,0x10
c0006eb8:	01 c8                	add    eax,ecx
c0006eba:	43                   	inc    ebx
c0006ebb:	e8 1d ad ff ff       	call   c0001bdd <st_word>
c0006ec0:	eb 04                	jmp    c0006ec6 <f_setlabel+0x96>
c0006ec2:	85 c0                	test   eax,eax
c0006ec4:	74 dc                	je     c0006ea2 <f_setlabel+0x72>
c0006ec6:	89 f2                	mov    edx,esi
c0006ec8:	b8 17 40 02 c0       	mov    eax,0xc0024017
c0006ecd:	e8 5b ad ff ff       	call   c0001c2d <chk_chr>
c0006ed2:	85 c0                	test   eax,eax
c0006ed4:	75 cc                	jne    c0006ea2 <f_setlabel+0x72>
c0006ed6:	83 fb 0a             	cmp    ebx,0xa
c0006ed9:	77 c7                	ja     c0006ea2 <f_setlabel+0x72>
c0006edb:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ede:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ee2:	0f b7 d6             	movzx  edx,si
c0006ee5:	01 c8                	add    eax,ecx
c0006ee7:	43                   	inc    ebx
c0006ee8:	e8 f0 ac ff ff       	call   c0001bdd <st_word>
c0006eed:	eb 84                	jmp    c0006e73 <f_setlabel+0x43>
c0006eef:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ef4:	ba 20 00 00 00       	mov    edx,0x20
c0006ef9:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006efd:	31 db                	xor    ebx,ebx
c0006eff:	e8 fb ac ff ff       	call   c0001bff <mem_set>
c0006f04:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f0b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f0e:	76 60                	jbe    c0006f70 <f_setlabel+0x140>
c0006f10:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f17:	e8 29 ad ff ff       	call   c0001c45 <tchar2uni>
c0006f1c:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f21:	0f 87 7b ff ff ff    	ja     c0006ea2 <f_setlabel+0x72>
c0006f27:	83 ec 0c             	sub    esp,0xc
c0006f2a:	50                   	push   eax
c0006f2b:	e8 e0 17 00 00       	call   c0008710 <ff_wtoupper>
c0006f30:	5a                   	pop    edx
c0006f31:	59                   	pop    ecx
c0006f32:	68 b5 01 00 00       	push   0x1b5
c0006f37:	50                   	push   eax
c0006f38:	e8 c7 16 00 00       	call   c0008604 <ff_uni2oem>
c0006f3d:	83 c4 10             	add    esp,0x10
c0006f40:	89 c6                	mov    esi,eax
c0006f42:	66 85 c0             	test   ax,ax
c0006f45:	0f 84 57 ff ff ff    	je     c0006ea2 <f_setlabel+0x72>
c0006f4b:	0f b7 d0             	movzx  edx,ax
c0006f4e:	b8 10 40 02 c0       	mov    eax,0xc0024010
c0006f53:	e8 d5 ac ff ff       	call   c0001c2d <chk_chr>
c0006f58:	85 c0                	test   eax,eax
c0006f5a:	0f 85 42 ff ff ff    	jne    c0006ea2 <f_setlabel+0x72>
c0006f60:	66 81 fe ff 00       	cmp    si,0xff
c0006f65:	0f 87 14 01 00 00    	ja     c000707f <f_setlabel+0x24f>
c0006f6b:	e9 fa 00 00 00       	jmp    c000706a <f_setlabel+0x23a>
c0006f70:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006f75:	0f 84 27 ff ff ff    	je     c0006ea2 <f_setlabel+0x72>
c0006f7b:	85 db                	test   ebx,ebx
c0006f7d:	74 0e                	je     c0006f8d <f_setlabel+0x15d>
c0006f7f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006f82:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006f87:	75 04                	jne    c0006f8d <f_setlabel+0x15d>
c0006f89:	89 c3                	mov    ebx,eax
c0006f8b:	eb ee                	jmp    c0006f7b <f_setlabel+0x14b>
c0006f8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f91:	31 d2                	xor    edx,edx
c0006f93:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006f97:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006f9f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006fa3:	e8 1f c1 ff ff       	call   c00030c7 <dir_sdi>
c0006fa8:	89 c6                	mov    esi,eax
c0006faa:	85 c0                	test   eax,eax
c0006fac:	0f 85 e3 00 00 00    	jne    c0007095 <f_setlabel+0x265>
c0006fb2:	ba 01 00 00 00       	mov    edx,0x1
c0006fb7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006fbb:	e8 17 c9 ff ff       	call   c00038d7 <dir_read>
c0006fc0:	85 c0                	test   eax,eax
c0006fc2:	75 21                	jne    c0006fe5 <f_setlabel+0x1b5>
c0006fc4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006fc8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006fcc:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006fcf:	74 5d                	je     c000702e <f_setlabel+0x1fe>
c0006fd1:	85 db                	test   ebx,ebx
c0006fd3:	74 0b                	je     c0006fe0 <f_setlabel+0x1b0>
c0006fd5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fda:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006fde:	eb 70                	jmp    c0007050 <f_setlabel+0x220>
c0006fe0:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006fe3:	eb 70                	jmp    c0007055 <f_setlabel+0x225>
c0006fe5:	83 f8 04             	cmp    eax,0x4
c0006fe8:	75 7c                	jne    c0007066 <f_setlabel+0x236>
c0006fea:	85 db                	test   ebx,ebx
c0006fec:	0f 84 a3 00 00 00    	je     c0007095 <f_setlabel+0x265>
c0006ff2:	ba 01 00 00 00       	mov    edx,0x1
c0006ff7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006ffb:	e8 51 ca ff ff       	call   c0003a51 <dir_alloc>
c0007000:	89 c6                	mov    esi,eax
c0007002:	85 c0                	test   eax,eax
c0007004:	0f 85 8b 00 00 00    	jne    c0007095 <f_setlabel+0x265>
c000700a:	31 d2                	xor    edx,edx
c000700c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007010:	b9 20 00 00 00       	mov    ecx,0x20
c0007015:	e8 e5 ab ff ff       	call   c0001bff <mem_set>
c000701a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000701e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007021:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007025:	75 18                	jne    c000703f <f_setlabel+0x20f>
c0007027:	c6 00 83             	mov    BYTE PTR [eax],0x83
c000702a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000702e:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007031:	b9 16 00 00 00       	mov    ecx,0x16
c0007036:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000703a:	83 c0 02             	add    eax,0x2
c000703d:	eb 9b                	jmp    c0006fda <f_setlabel+0x1aa>
c000703f:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007043:	b9 0b 00 00 00       	mov    ecx,0xb
c0007048:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000704c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007050:	e8 95 ab ff ff       	call   c0001bea <mem_cpy>
c0007055:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007059:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000705d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007061:	e8 0e d4 ff ff       	call   c0004474 <sync_fs>
c0007066:	89 c6                	mov    esi,eax
c0007068:	eb 2b                	jmp    c0007095 <f_setlabel+0x265>
c000706a:	83 fb 0a             	cmp    ebx,0xa
c000706d:	0f 87 2f fe ff ff    	ja     c0006ea2 <f_setlabel+0x72>
c0007073:	89 f0                	mov    eax,esi
c0007075:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007079:	43                   	inc    ebx
c000707a:	e9 85 fe ff ff       	jmp    c0006f04 <f_setlabel+0xd4>
c000707f:	83 fb 09             	cmp    ebx,0x9
c0007082:	0f 87 1a fe ff ff    	ja     c0006ea2 <f_setlabel+0x72>
c0007088:	89 f0                	mov    eax,esi
c000708a:	66 c1 e8 08          	shr    ax,0x8
c000708e:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007092:	43                   	inc    ebx
c0007093:	eb de                	jmp    c0007073 <f_setlabel+0x243>
c0007095:	89 f0                	mov    eax,esi
c0007097:	83 c4 74             	add    esp,0x74
c000709a:	5b                   	pop    ebx
c000709b:	5e                   	pop    esi
c000709c:	c3                   	ret    

c000709d <f_expand>:
c000709d:	55                   	push   ebp
c000709e:	57                   	push   edi
c000709f:	56                   	push   esi
c00070a0:	53                   	push   ebx
c00070a1:	83 ec 3c             	sub    esp,0x3c
c00070a4:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00070a8:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00070ac:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00070b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00070b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00070b8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070bc:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00070c0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070c4:	89 d8                	mov    eax,ebx
c00070c6:	e8 a3 b1 ff ff       	call   c000226e <validate>
c00070cb:	89 c5                	mov    ebp,eax
c00070cd:	85 c0                	test   eax,eax
c00070cf:	0f 85 f4 01 00 00    	jne    c00072c9 <f_expand+0x22c>
c00070d5:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00070d9:	85 ed                	test   ebp,ebp
c00070db:	0f 85 e8 01 00 00    	jne    c00072c9 <f_expand+0x22c>
c00070e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070e5:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00070e9:	75 0a                	jne    c00070f5 <f_expand+0x58>
c00070eb:	bd 07 00 00 00       	mov    ebp,0x7
c00070f0:	e9 d4 01 00 00       	jmp    c00072c9 <f_expand+0x22c>
c00070f5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00070f8:	0b 43 0c             	or     eax,DWORD PTR [ebx+0xc]
c00070fb:	75 ee                	jne    c00070eb <f_expand+0x4e>
c00070fd:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0007101:	74 e8                	je     c00070eb <f_expand+0x4e>
c0007103:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0007107:	8a 0e                	mov    cl,BYTE PTR [esi]
c0007109:	80 f9 04             	cmp    cl,0x4
c000710c:	74 07                	je     c0007115 <f_expand+0x78>
c000710e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007113:	77 d6                	ja     c00070eb <f_expand+0x4e>
c0007115:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0007119:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000711d:	c1 e0 09             	shl    eax,0x9
c0007120:	8d 50 ff             	lea    edx,[eax-0x1]
c0007123:	85 54 24 08          	test   DWORD PTR [esp+0x8],edx
c0007127:	0f 95 c2             	setne  dl
c000712a:	0f b6 d2             	movzx  edx,dl
c000712d:	89 d7                	mov    edi,edx
c000712f:	31 d2                	xor    edx,edx
c0007131:	52                   	push   edx
c0007132:	50                   	push   eax
c0007133:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007137:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000713b:	e8 a0 be 01 00       	call   c0022fe0 <__udivdi3>
c0007140:	83 c4 10             	add    esp,0x10
c0007143:	01 f8                	add    eax,edi
c0007145:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0007149:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000714c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007150:	83 ff 01             	cmp    edi,0x1
c0007153:	76 05                	jbe    c000715a <f_expand+0xbd>
c0007155:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0007158:	77 05                	ja     c000715f <f_expand+0xc2>
c000715a:	bf 02 00 00 00       	mov    edi,0x2
c000715f:	80 f9 04             	cmp    cl,0x4
c0007162:	75 19                	jne    c000717d <f_expand+0xe0>
c0007164:	89 f0                	mov    eax,esi
c0007166:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000716a:	89 fa                	mov    edx,edi
c000716c:	e8 f3 b9 ff ff       	call   c0002b64 <find_bitmap>
c0007171:	89 c6                	mov    esi,eax
c0007173:	85 c0                	test   eax,eax
c0007175:	0f 84 70 ff ff ff    	je     c00070eb <f_expand+0x4e>
c000717b:	eb 7f                	jmp    c00071fc <f_expand+0x15f>
c000717d:	89 fe                	mov    esi,edi
c000717f:	89 f9                	mov    ecx,edi
c0007181:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007189:	89 ca                	mov    edx,ecx
c000718b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000718f:	89 d8                	mov    eax,ebx
c0007191:	e8 3b bd ff ff       	call   c0002ed1 <get_fat>
c0007196:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000719a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000719e:	41                   	inc    ecx
c000719f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00071a3:	39 48 1c             	cmp    DWORD PTR [eax+0x1c],ecx
c00071a6:	77 05                	ja     c00071ad <f_expand+0x110>
c00071a8:	b9 02 00 00 00       	mov    ecx,0x2
c00071ad:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00071b2:	74 3e                	je     c00071f2 <f_expand+0x155>
c00071b4:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00071b9:	75 0a                	jne    c00071c5 <f_expand+0x128>
c00071bb:	bd 01 00 00 00       	mov    ebp,0x1
c00071c0:	e9 04 01 00 00       	jmp    c00072c9 <f_expand+0x22c>
c00071c5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00071ca:	75 13                	jne    c00071df <f_expand+0x142>
c00071cc:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00071d0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071d4:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c00071d8:	75 0f                	jne    c00071e9 <f_expand+0x14c>
c00071da:	e9 ce 00 00 00       	jmp    c00072ad <f_expand+0x210>
c00071df:	89 ce                	mov    esi,ecx
c00071e1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00071e9:	39 f9                	cmp    ecx,edi
c00071eb:	75 9c                	jne    c0007189 <f_expand+0xec>
c00071ed:	e9 f9 fe ff ff       	jmp    c00070eb <f_expand+0x4e>
c00071f2:	bd 02 00 00 00       	mov    ebp,0x2
c00071f7:	e9 cd 00 00 00       	jmp    c00072c9 <f_expand+0x22c>
c00071fc:	83 f8 ff             	cmp    eax,0xffffffff
c00071ff:	74 ba                	je     c00071bb <f_expand+0x11e>
c0007201:	8d 7e ff             	lea    edi,[esi-0x1]
c0007204:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007208:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000720c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007211:	74 51                	je     c0007264 <f_expand+0x1c7>
c0007213:	83 ec 0c             	sub    esp,0xc
c0007216:	89 f2                	mov    edx,esi
c0007218:	6a 01                	push   0x1
c000721a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000721e:	e8 f4 b9 ff ff       	call   c0002c17 <change_bitmap>
c0007223:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007227:	8d 54 3e ff          	lea    edx,[esi+edi*1-0x1]
c000722b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000722f:	83 c4 10             	add    esp,0x10
c0007232:	85 c0                	test   eax,eax
c0007234:	74 2e                	je     c0007264 <f_expand+0x1c7>
c0007236:	eb 71                	jmp    c00072a9 <f_expand+0x20c>
c0007238:	83 c9 ff             	or     ecx,0xffffffff
c000723b:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0007240:	74 03                	je     c0007245 <f_expand+0x1a8>
c0007242:	8d 4f 01             	lea    ecx,[edi+0x1]
c0007245:	89 fa                	mov    edx,edi
c0007247:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000724b:	e8 7c ba ff ff       	call   c0002ccc <put_fat>
c0007250:	85 c0                	test   eax,eax
c0007252:	75 55                	jne    c00072a9 <f_expand+0x20c>
c0007254:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007258:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c000725c:	47                   	inc    edi
c000725d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007262:	75 d4                	jne    c0007238 <f_expand+0x19b>
c0007264:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007268:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000726c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007271:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0007274:	74 53                	je     c00072c9 <f_expand+0x22c>
c0007276:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c0007279:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000727d:	c6 43 07 02          	mov    BYTE PTR [ebx+0x7],0x2
c0007281:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007285:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007289:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000728c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000728f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0007292:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0007295:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0007298:	39 ca                	cmp    edx,ecx
c000729a:	77 2d                	ja     c00072c9 <f_expand+0x22c>
c000729c:	2b 54 24 10          	sub    edx,DWORD PTR [esp+0x10]
c00072a0:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00072a4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00072a7:	eb 20                	jmp    c00072c9 <f_expand+0x22c>
c00072a9:	89 c5                	mov    ebp,eax
c00072ab:	eb 1c                	jmp    c00072c9 <f_expand+0x22c>
c00072ad:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00072b2:	74 0c                	je     c00072c0 <f_expand+0x223>
c00072b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00072b8:	89 f7                	mov    edi,esi
c00072ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00072be:	eb 9d                	jmp    c000725d <f_expand+0x1c0>
c00072c0:	8d 46 ff             	lea    eax,[esi-0x1]
c00072c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00072c7:	eb 9b                	jmp    c0007264 <f_expand+0x1c7>
c00072c9:	83 c4 3c             	add    esp,0x3c
c00072cc:	89 e8                	mov    eax,ebp
c00072ce:	5b                   	pop    ebx
c00072cf:	5e                   	pop    esi
c00072d0:	5f                   	pop    edi
c00072d1:	5d                   	pop    ebp
c00072d2:	c3                   	ret    

c00072d3 <f_forward>:
c00072d3:	55                   	push   ebp
c00072d4:	57                   	push   edi
c00072d5:	56                   	push   esi
c00072d6:	53                   	push   ebx
c00072d7:	83 ec 2c             	sub    esp,0x2c
c00072da:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00072de:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00072e2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00072e8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00072ec:	89 d8                	mov    eax,ebx
c00072ee:	e8 7b af ff ff       	call   c000226e <validate>
c00072f3:	89 c5                	mov    ebp,eax
c00072f5:	85 c0                	test   eax,eax
c00072f7:	0f 85 aa 01 00 00    	jne    c00074a7 <f_forward+0x1d4>
c00072fd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007301:	85 ed                	test   ebp,ebp
c0007303:	0f 85 9e 01 00 00    	jne    c00074a7 <f_forward+0x1d4>
c0007309:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c000730d:	0f 84 8f 01 00 00    	je     c00074a2 <f_forward+0x1cf>
c0007313:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0007316:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0007319:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c000731c:	bf 00 00 00 00       	mov    edi,0x0
c0007321:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0007324:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0007328:	89 d1                	mov    ecx,edx
c000732a:	19 f9                	sbb    ecx,edi
c000732c:	0f 83 cf 00 00 00    	jae    c0007401 <f_forward+0x12e>
c0007332:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007336:	e9 c6 00 00 00       	jmp    c0007401 <f_forward+0x12e>
c000733b:	50                   	push   eax
c000733c:	50                   	push   eax
c000733d:	6a 00                	push   0x0
c000733f:	6a 00                	push   0x0
c0007341:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007345:	83 c4 10             	add    esp,0x10
c0007348:	85 c0                	test   eax,eax
c000734a:	0f 84 57 01 00 00    	je     c00074a7 <f_forward+0x1d4>
c0007350:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007353:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007357:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000735a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000735e:	89 d7                	mov    edi,edx
c0007360:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007363:	89 c6                	mov    esi,eax
c0007365:	0f ac fe 09          	shrd   esi,edi,0x9
c0007369:	21 ce                	and    esi,ecx
c000736b:	89 c1                	mov    ecx,eax
c000736d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007373:	0f 84 98 00 00 00    	je     c0007411 <f_forward+0x13e>
c0007379:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000737d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007380:	89 c8                	mov    eax,ecx
c0007382:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007386:	e8 79 aa ff ff       	call   c0001e04 <clst2sect>
c000738b:	89 d7                	mov    edi,edx
c000738d:	09 c7                	or     edi,eax
c000738f:	0f 84 9e 00 00 00    	je     c0007433 <f_forward+0x160>
c0007395:	31 ff                	xor    edi,edi
c0007397:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000739a:	01 c6                	add    esi,eax
c000739c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00073a0:	11 d7                	adc    edi,edx
c00073a2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00073a5:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00073a8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00073ac:	39 fa                	cmp    edx,edi
c00073ae:	0f 85 a2 00 00 00    	jne    c0007456 <f_forward+0x183>
c00073b4:	39 f0                	cmp    eax,esi
c00073b6:	0f 85 9a 00 00 00    	jne    c0007456 <f_forward+0x183>
c00073bc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00073bf:	ba 00 02 00 00       	mov    edx,0x200
c00073c4:	25 ff 01 00 00       	and    eax,0x1ff
c00073c9:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00073cd:	29 c2                	sub    edx,eax
c00073cf:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00073d2:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00073d5:	39 d1                	cmp    ecx,edx
c00073d7:	76 02                	jbe    c00073db <f_forward+0x108>
c00073d9:	89 d1                	mov    ecx,edx
c00073db:	8d 73 50             	lea    esi,[ebx+0x50]
c00073de:	52                   	push   edx
c00073df:	01 c6                	add    esi,eax
c00073e1:	52                   	push   edx
c00073e2:	51                   	push   ecx
c00073e3:	56                   	push   esi
c00073e4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00073e8:	83 c4 10             	add    esp,0x10
c00073eb:	85 c0                	test   eax,eax
c00073ed:	74 44                	je     c0007433 <f_forward+0x160>
c00073ef:	31 ff                	xor    edi,edi
c00073f1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00073f4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00073f7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00073fb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00073ff:	01 07                	add    DWORD PTR [edi],eax
c0007401:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0007406:	0f 85 2f ff ff ff    	jne    c000733b <f_forward+0x68>
c000740c:	e9 96 00 00 00       	jmp    c00074a7 <f_forward+0x1d4>
c0007411:	85 f6                	test   esi,esi
c0007413:	0f 85 60 ff ff ff    	jne    c0007379 <f_forward+0xa6>
c0007419:	89 d7                	mov    edi,edx
c000741b:	09 c7                	or     edi,eax
c000741d:	75 05                	jne    c0007424 <f_forward+0x151>
c000741f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007422:	eb 0a                	jmp    c000742e <f_forward+0x15b>
c0007424:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007427:	89 d8                	mov    eax,ebx
c0007429:	e8 a3 ba ff ff       	call   c0002ed1 <get_fat>
c000742e:	83 f8 01             	cmp    eax,0x1
c0007431:	77 0b                	ja     c000743e <f_forward+0x16b>
c0007433:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007437:	bd 02 00 00 00       	mov    ebp,0x2
c000743c:	eb 69                	jmp    c00074a7 <f_forward+0x1d4>
c000743e:	83 f8 ff             	cmp    eax,0xffffffff
c0007441:	75 0b                	jne    c000744e <f_forward+0x17b>
c0007443:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007447:	bd 01 00 00 00       	mov    ebp,0x1
c000744c:	eb 59                	jmp    c00074a7 <f_forward+0x1d4>
c000744e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007451:	e9 23 ff ff ff       	jmp    c0007379 <f_forward+0xa6>
c0007456:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000745a:	79 20                	jns    c000747c <f_forward+0x1a9>
c000745c:	83 ec 0c             	sub    esp,0xc
c000745f:	6a 01                	push   0x1
c0007461:	52                   	push   edx
c0007462:	50                   	push   eax
c0007463:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007467:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000746b:	50                   	push   eax
c000746c:	e8 c5 a6 ff ff       	call   c0001b36 <disk_write>
c0007471:	83 c4 20             	add    esp,0x20
c0007474:	85 c0                	test   eax,eax
c0007476:	75 cb                	jne    c0007443 <f_forward+0x170>
c0007478:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000747c:	83 ec 0c             	sub    esp,0xc
c000747f:	6a 01                	push   0x1
c0007481:	57                   	push   edi
c0007482:	56                   	push   esi
c0007483:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007487:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000748b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000748f:	50                   	push   eax
c0007490:	e8 8b a6 ff ff       	call   c0001b20 <disk_read>
c0007495:	83 c4 20             	add    esp,0x20
c0007498:	85 c0                	test   eax,eax
c000749a:	0f 84 1c ff ff ff    	je     c00073bc <f_forward+0xe9>
c00074a0:	eb a1                	jmp    c0007443 <f_forward+0x170>
c00074a2:	bd 07 00 00 00       	mov    ebp,0x7
c00074a7:	83 c4 2c             	add    esp,0x2c
c00074aa:	89 e8                	mov    eax,ebp
c00074ac:	5b                   	pop    ebx
c00074ad:	5e                   	pop    esi
c00074ae:	5f                   	pop    edi
c00074af:	5d                   	pop    ebp
c00074b0:	c3                   	ret    

c00074b1 <f_mkfs>:
c00074b1:	55                   	push   ebp
c00074b2:	57                   	push   edi
c00074b3:	56                   	push   esi
c00074b4:	53                   	push   ebx
c00074b5:	bb 0b 00 00 00       	mov    ebx,0xb
c00074ba:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00074c0:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00074c7:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00074ce:	e8 7a ac ff ff       	call   c000214d <get_ldnumber>
c00074d3:	85 c0                	test   eax,eax
c00074d5:	0f 88 ec 10 00 00    	js     c00085c7 <f_mkfs+0x1116>
c00074db:	8b 14 85 a0 8b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7460]
c00074e2:	85 d2                	test   edx,edx
c00074e4:	74 03                	je     c00074e9 <f_mkfs+0x38>
c00074e6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00074e9:	85 f6                	test   esi,esi
c00074eb:	75 05                	jne    c00074f2 <f_mkfs+0x41>
c00074ed:	be 00 40 02 c0       	mov    esi,0xc0024000
c00074f2:	83 ec 0c             	sub    esp,0xc
c00074f5:	0f b6 c0             	movzx  eax,al
c00074f8:	bb 03 00 00 00       	mov    ebx,0x3
c00074fd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007501:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007505:	e8 13 a6 ff ff       	call   c0001b1d <disk_initialize>
c000750a:	83 c4 10             	add    esp,0x10
c000750d:	a8 01                	test   al,0x1
c000750f:	0f 85 b2 10 00 00    	jne    c00085c7 <f_mkfs+0x1116>
c0007515:	bb 0a 00 00 00       	mov    ebx,0xa
c000751a:	a8 04                	test   al,0x4
c000751c:	0f 85 a5 10 00 00    	jne    c00085c7 <f_mkfs+0x1116>
c0007522:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007525:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007529:	85 c0                	test   eax,eax
c000752b:	75 20                	jne    c000754d <f_mkfs+0x9c>
c000752d:	51                   	push   ecx
c000752e:	8d 44 24 78          	lea    eax,[esp+0x78]
c0007532:	50                   	push   eax
c0007533:	6a 03                	push   0x3
c0007535:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007539:	e8 0e a6 ff ff       	call   c0001b4c <disk_ioctl>
c000753e:	83 c4 10             	add    esp,0x10
c0007541:	85 c0                	test   eax,eax
c0007543:	74 08                	je     c000754d <f_mkfs+0x9c>
c0007545:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000754d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007551:	8d 42 ff             	lea    eax,[edx-0x1]
c0007554:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007559:	77 04                	ja     c000755f <f_mkfs+0xae>
c000755b:	85 c2                	test   edx,eax
c000755d:	74 08                	je     c0007567 <f_mkfs+0xb6>
c000755f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007567:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000756a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000756e:	48                   	dec    eax
c000756f:	3c 01                	cmp    al,0x1
c0007571:	76 05                	jbe    c0007578 <f_mkfs+0xc7>
c0007573:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007578:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000757b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000757f:	48                   	dec    eax
c0007580:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007585:	77 07                	ja     c000758e <f_mkfs+0xdd>
c0007587:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000758c:	74 08                	je     c0007596 <f_mkfs+0xe5>
c000758e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007596:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007599:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000759f:	77 07                	ja     c00075a8 <f_mkfs+0xf7>
c00075a1:	8d 43 ff             	lea    eax,[ebx-0x1]
c00075a4:	85 d8                	test   eax,ebx
c00075a6:	74 02                	je     c00075aa <f_mkfs+0xf9>
c00075a8:	31 db                	xor    ebx,ebx
c00075aa:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00075b5:	77 0a                	ja     c00075c1 <f_mkfs+0x110>
c00075b7:	bb 11 00 00 00       	mov    ebx,0x11
c00075bc:	e9 06 10 00 00       	jmp    c00085c7 <f_mkfs+0x1116>
c00075c1:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00075c8:	8b 36                	mov    esi,DWORD PTR [esi]
c00075ca:	85 ed                	test   ebp,ebp
c00075cc:	75 1e                	jne    c00075ec <f_mkfs+0x13b>
c00075ce:	83 ec 0c             	sub    esp,0xc
c00075d1:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00075d8:	25 00 fe ff ff       	and    eax,0xfffffe00
c00075dd:	50                   	push   eax
c00075de:	e8 f1 0f 00 00       	call   c00085d4 <ff_memalloc>
c00075e3:	83 c4 10             	add    esp,0x10
c00075e6:	89 c5                	mov    ebp,eax
c00075e8:	85 c0                	test   eax,eax
c00075ea:	74 cb                	je     c00075b7 <f_mkfs+0x106>
c00075ec:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00075f4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00075fc:	52                   	push   edx
c00075fd:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007601:	50                   	push   eax
c0007602:	6a 01                	push   0x1
c0007604:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007608:	e8 3f a5 ff ff       	call   c0001b4c <disk_ioctl>
c000760d:	83 c4 10             	add    esp,0x10
c0007610:	85 c0                	test   eax,eax
c0007612:	0f 85 4a 0f 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c0007618:	89 f1                	mov    ecx,esi
c000761a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007622:	83 e1 0f             	and    ecx,0xf
c0007625:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000762d:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007631:	83 e6 08             	and    esi,0x8
c0007634:	75 56                	jne    c000768c <f_mkfs+0x1db>
c0007636:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c000763a:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c000763e:	83 ff 00             	cmp    edi,0x0
c0007641:	76 20                	jbe    c0007663 <f_mkfs+0x1b2>
c0007643:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007648:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007650:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007656:	83 d7 ff             	adc    edi,0xffffffff
c0007659:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000765d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007661:	eb 21                	jmp    c0007684 <f_mkfs+0x1d3>
c0007663:	ba 3f 00 00 00       	mov    edx,0x3f
c0007668:	39 f2                	cmp    edx,esi
c000766a:	19 f8                	sbb    eax,edi
c000766c:	73 1e                	jae    c000768c <f_mkfs+0x1db>
c000766e:	83 c6 c1             	add    esi,0xffffffc1
c0007671:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007679:	83 d7 ff             	adc    edi,0xffffffff
c000767c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007680:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007684:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000768c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007690:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007694:	89 04 24             	mov    DWORD PTR [esp],eax
c0007697:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000769b:	31 c0                	xor    eax,eax
c000769d:	ba 7f 00 00 00       	mov    edx,0x7f
c00076a2:	89 c7                	mov    edi,eax
c00076a4:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00076a7:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00076ab:	0f 83 c5 0a 00 00    	jae    c0008176 <f_mkfs+0xcc5>
c00076b1:	89 df                	mov    edi,ebx
c00076b3:	c1 ef 09             	shr    edi,0x9
c00076b6:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00076ba:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00076c1:	c1 ef 09             	shr    edi,0x9
c00076c4:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00076c9:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00076cd:	74 29                	je     c00076f8 <f_mkfs+0x247>
c00076cf:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076d5:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00076da:	0f 97 c2             	seta   dl
c00076dd:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00076e0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00076e4:	0f 92 c0             	setb   al
c00076e7:	08 c2                	or     dl,al
c00076e9:	75 5b                	jne    c0007746 <f_mkfs+0x295>
c00076eb:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00076ef:	83 e0 07             	and    eax,0x7
c00076f2:	3c 04                	cmp    al,0x4
c00076f4:	74 50                	je     c0007746 <f_mkfs+0x295>
c00076f6:	eb 1b                	jmp    c0007713 <f_mkfs+0x262>
c00076f8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00076fd:	0f 87 73 0a 00 00    	ja     c0008176 <f_mkfs+0xcc5>
c0007703:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007709:	76 08                	jbe    c0007713 <f_mkfs+0x262>
c000770b:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007713:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007717:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000771b:	83 e0 01             	and    eax,0x1
c000771e:	80 e1 02             	and    cl,0x2
c0007721:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007725:	74 0d                	je     c0007734 <f_mkfs+0x283>
c0007727:	84 c0                	test   al,al
c0007729:	0f 84 53 09 00 00    	je     c0008082 <f_mkfs+0xbd1>
c000772f:	e9 12 08 00 00       	jmp    c0007f46 <f_mkfs+0xa95>
c0007734:	bb 13 00 00 00       	mov    ebx,0x13
c0007739:	84 c0                	test   al,al
c000773b:	0f 85 05 08 00 00    	jne    c0007f46 <f_mkfs+0xa95>
c0007741:	e9 39 0e 00 00       	jmp    c000857f <f_mkfs+0x10ce>
c0007746:	31 c0                	xor    eax,eax
c0007748:	ba ff 0f 00 00       	mov    edx,0xfff
c000774d:	89 c7                	mov    edi,eax
c000774f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007752:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007756:	0f 83 1a 0a 00 00    	jae    c0008176 <f_mkfs+0xcc5>
c000775c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007762:	77 39                	ja     c000779d <f_mkfs+0x2ec>
c0007764:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007769:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007771:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007774:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007778:	73 08                	jae    c0007782 <f_mkfs+0x2d1>
c000777a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007782:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007787:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000778a:	b8 00 00 00 00       	mov    eax,0x0
c000778f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007793:	73 08                	jae    c000779d <f_mkfs+0x2ec>
c0007795:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000779d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00077a1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00077a5:	83 c0 20             	add    eax,0x20
c00077a8:	83 d2 00             	adc    edx,0x0
c00077ab:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00077af:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00077b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077b7:	31 d2                	xor    edx,edx
c00077b9:	31 ff                	xor    edi,edi
c00077bb:	52                   	push   edx
c00077bc:	89 fb                	mov    ebx,edi
c00077be:	50                   	push   eax
c00077bf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077c3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077c7:	e8 14 b8 01 00       	call   c0022fe0 <__udivdi3>
c00077cc:	83 c4 10             	add    esp,0x10
c00077cf:	c1 e0 02             	shl    eax,0x2
c00077d2:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00077d6:	05 07 02 00 00       	add    eax,0x207
c00077db:	89 f1                	mov    ecx,esi
c00077dd:	c1 e8 09             	shr    eax,0x9
c00077e0:	83 c1 ff             	add    ecx,0xffffffff
c00077e3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00077e7:	83 d3 ff             	adc    ebx,0xffffffff
c00077ea:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00077ee:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00077f2:	31 d2                	xor    edx,edx
c00077f4:	01 c8                	add    eax,ecx
c00077f6:	11 da                	adc    edx,ebx
c00077f8:	89 c1                	mov    ecx,eax
c00077fa:	f7 de                	neg    esi
c00077fc:	89 d0                	mov    eax,edx
c00077fe:	83 d7 00             	adc    edi,0x0
c0007801:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007805:	f7 df                	neg    edi
c0007807:	21 f1                	and    ecx,esi
c0007809:	21 f8                	and    eax,edi
c000780b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000780f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007813:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007817:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000781b:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000781f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007822:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007826:	0f ac d0 01          	shrd   eax,edx,0x1
c000782a:	89 df                	mov    edi,ebx
c000782c:	d1 ea                	shr    edx,1
c000782e:	39 c1                	cmp    ecx,eax
c0007830:	19 d7                	sbb    edi,edx
c0007832:	0f 83 3e 09 00 00    	jae    c0008176 <f_mkfs+0xcc5>
c0007838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000783c:	31 d2                	xor    edx,edx
c000783e:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007842:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007846:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000784a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000784d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007851:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007855:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007859:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000785d:	83 f8 0f             	cmp    eax,0xf
c0007860:	0f 86 10 09 00 00    	jbe    c0008176 <f_mkfs+0xcc5>
c0007866:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000786e:	0f 87 02 09 00 00    	ja     c0008176 <f_mkfs+0xcc5>
c0007874:	31 d2                	xor    edx,edx
c0007876:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000787a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007882:	83 c0 07             	add    eax,0x7
c0007885:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000788d:	c1 e8 03             	shr    eax,0x3
c0007890:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007897:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000789b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000789f:	c1 e0 09             	shl    eax,0x9
c00078a2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078a6:	48                   	dec    eax
c00078a7:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078ab:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c00078af:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00078b3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078b7:	31 d2                	xor    edx,edx
c00078b9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00078bd:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00078c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078c8:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00078cd:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00078d1:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00078d5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00078d9:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00078dd:	31 ff                	xor    edi,edi
c00078df:	31 f6                	xor    esi,esi
c00078e1:	31 db                	xor    ebx,ebx
c00078e3:	85 ff                	test   edi,edi
c00078e5:	74 05                	je     c00078ec <f_mkfs+0x43b>
c00078e7:	4f                   	dec    edi
c00078e8:	74 44                	je     c000792e <f_mkfs+0x47d>
c00078ea:	eb 4f                	jmp    c000793b <f_mkfs+0x48a>
c00078ec:	83 ec 0c             	sub    esp,0xc
c00078ef:	0f b7 c3             	movzx  eax,bx
c00078f2:	50                   	push   eax
c00078f3:	e8 18 0e 00 00       	call   c0008710 <ff_wtoupper>
c00078f8:	83 c4 10             	add    esp,0x10
c00078fb:	89 c1                	mov    ecx,eax
c00078fd:	8d 53 01             	lea    edx,[ebx+0x1]
c0007900:	66 39 c3             	cmp    bx,ax
c0007903:	75 3e                	jne    c0007943 <f_mkfs+0x492>
c0007905:	be 01 00 00 00       	mov    esi,0x1
c000790a:	89 df                	mov    edi,ebx
c000790c:	66 01 f7             	add    di,si
c000790f:	75 07                	jne    c0007918 <f_mkfs+0x467>
c0007911:	83 fe 7f             	cmp    esi,0x7f
c0007914:	77 31                	ja     c0007947 <f_mkfs+0x496>
c0007916:	eb 16                	jmp    c000792e <f_mkfs+0x47d>
c0007918:	83 ec 0c             	sub    esp,0xc
c000791b:	0f b7 ff             	movzx  edi,di
c000791e:	57                   	push   edi
c000791f:	e8 ec 0d 00 00       	call   c0008710 <ff_wtoupper>
c0007924:	83 c4 10             	add    esp,0x10
c0007927:	39 c7                	cmp    edi,eax
c0007929:	75 e6                	jne    c0007911 <f_mkfs+0x460>
c000792b:	46                   	inc    esi
c000792c:	eb dc                	jmp    c000790a <f_mkfs+0x459>
c000792e:	31 c0                	xor    eax,eax
c0007930:	89 d9                	mov    ecx,ebx
c0007932:	4e                   	dec    esi
c0007933:	0f 95 c0             	setne  al
c0007936:	43                   	inc    ebx
c0007937:	89 c7                	mov    edi,eax
c0007939:	eb 14                	jmp    c000794f <f_mkfs+0x49e>
c000793b:	89 f1                	mov    ecx,esi
c000793d:	01 f3                	add    ebx,esi
c000793f:	31 ff                	xor    edi,edi
c0007941:	eb 0c                	jmp    c000794f <f_mkfs+0x49e>
c0007943:	89 d3                	mov    ebx,edx
c0007945:	eb 08                	jmp    c000794f <f_mkfs+0x49e>
c0007947:	bf 02 00 00 00       	mov    edi,0x2
c000794c:	83 c9 ff             	or     ecx,0xffffffff
c000794f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007953:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007956:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000795a:	0f b6 c1             	movzx  eax,cl
c000795d:	e8 04 a7 ff ff       	call   c0002066 <xsum32>
c0007962:	66 c1 e9 08          	shr    cx,0x8
c0007966:	89 c2                	mov    edx,eax
c0007968:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000796b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000796f:	0f b7 c1             	movzx  eax,cx
c0007972:	e8 ef a6 ff ff       	call   c0002066 <xsum32>
c0007977:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000797c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007980:	66 85 db             	test   bx,bx
c0007983:	74 1f                	je     c00079a4 <f_mkfs+0x4f3>
c0007985:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007988:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000798f:	83 c0 02             	add    eax,0x2
c0007992:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007998:	39 c2                	cmp    edx,eax
c000799a:	74 08                	je     c00079a4 <f_mkfs+0x4f3>
c000799c:	89 04 24             	mov    DWORD PTR [esp],eax
c000799f:	e9 3f ff ff ff       	jmp    c00078e3 <f_mkfs+0x432>
c00079a4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00079a7:	83 ec 0c             	sub    esp,0xc
c00079aa:	05 01 02 00 00       	add    eax,0x201
c00079af:	c1 e8 09             	shr    eax,0x9
c00079b2:	50                   	push   eax
c00079b3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00079b7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079bb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079bf:	55                   	push   ebp
c00079c0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079c4:	e8 6d a1 ff ff       	call   c0001b36 <disk_write>
c00079c9:	83 c4 20             	add    esp,0x20
c00079cc:	85 c0                	test   eax,eax
c00079ce:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00079d1:	0f 85 8b 0b 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c00079d7:	89 d0                	mov    eax,edx
c00079d9:	31 d2                	xor    edx,edx
c00079db:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00079df:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00079e3:	66 85 db             	test   bx,bx
c00079e6:	74 04                	je     c00079ec <f_mkfs+0x53b>
c00079e8:	31 c0                	xor    eax,eax
c00079ea:	eb b0                	jmp    c000799c <f_mkfs+0x4eb>
c00079ec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00079f0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00079f4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00079f8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00079fe:	31 d2                	xor    edx,edx
c0007a00:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007a0b:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007a0f:	c1 eb 09             	shr    ebx,0x9
c0007a12:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007a19:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007a1d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007a21:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a25:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007a29:	8d 70 01             	lea    esi,[eax+0x1]
c0007a2c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007a30:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a34:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007a3b:	31 d2                	xor    edx,edx
c0007a3d:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007a42:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a45:	89 c1                	mov    ecx,eax
c0007a47:	89 e8                	mov    eax,ebp
c0007a49:	e8 b1 a1 ff ff       	call   c0001bff <mem_set>
c0007a4e:	31 c0                	xor    eax,eax
c0007a50:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a53:	76 10                	jbe    c0007a65 <f_mkfs+0x5b4>
c0007a55:	83 fe 07             	cmp    esi,0x7
c0007a58:	76 0b                	jbe    c0007a65 <f_mkfs+0x5b4>
c0007a5a:	40                   	inc    eax
c0007a5b:	83 ee 08             	sub    esi,0x8
c0007a5e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007a63:	eb eb                	jmp    c0007a50 <f_mkfs+0x59f>
c0007a65:	b2 01                	mov    dl,0x1
c0007a67:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007a6b:	85 f6                	test   esi,esi
c0007a6d:	74 0c                	je     c0007a7b <f_mkfs+0x5ca>
c0007a6f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a72:	76 07                	jbe    c0007a7b <f_mkfs+0x5ca>
c0007a74:	08 11                	or     BYTE PTR [ecx],dl
c0007a76:	4e                   	dec    esi
c0007a77:	d1 e2                	shl    edx,1
c0007a79:	eb f0                	jmp    c0007a6b <f_mkfs+0x5ba>
c0007a7b:	89 df                	mov    edi,ebx
c0007a7d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007a81:	76 04                	jbe    c0007a87 <f_mkfs+0x5d6>
c0007a83:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007a87:	83 ec 0c             	sub    esp,0xc
c0007a8a:	57                   	push   edi
c0007a8b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a8f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a93:	55                   	push   ebp
c0007a94:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a98:	e8 99 a0 ff ff       	call   c0001b36 <disk_write>
c0007a9d:	83 c4 20             	add    esp,0x20
c0007aa0:	85 c0                	test   eax,eax
c0007aa2:	0f 85 ba 0a 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c0007aa8:	31 d2                	xor    edx,edx
c0007aaa:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007aae:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007ab2:	29 fb                	sub    ebx,edi
c0007ab4:	0f 85 7a ff ff ff    	jne    c0007a34 <f_mkfs+0x583>
c0007aba:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007abe:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007ac6:	31 f6                	xor    esi,esi
c0007ac8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007acc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007acf:	31 d2                	xor    edx,edx
c0007ad1:	89 e8                	mov    eax,ebp
c0007ad3:	e8 27 a1 ff ff       	call   c0001bff <mem_set>
c0007ad8:	31 c9                	xor    ecx,ecx
c0007ada:	85 db                	test   ebx,ebx
c0007adc:	75 40                	jne    c0007b1e <f_mkfs+0x66d>
c0007ade:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007ae3:	89 e8                	mov    eax,ebp
c0007ae5:	bb 02 00 00 00       	mov    ebx,0x2
c0007aea:	e8 f2 a0 ff ff       	call   c0001be1 <st_dword>
c0007aef:	8d 45 04             	lea    eax,[ebp+0x4]
c0007af2:	83 ca ff             	or     edx,0xffffffff
c0007af5:	e8 e7 a0 ff ff       	call   c0001be1 <st_dword>
c0007afa:	b9 08 00 00 00       	mov    ecx,0x8
c0007aff:	eb 1d                	jmp    c0007b1e <f_mkfs+0x66d>
c0007b01:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007b04:	76 3b                	jbe    c0007b41 <f_mkfs+0x690>
c0007b06:	43                   	inc    ebx
c0007b07:	83 fe 01             	cmp    esi,0x1
c0007b0a:	89 da                	mov    edx,ebx
c0007b0c:	77 03                	ja     c0007b11 <f_mkfs+0x660>
c0007b0e:	83 ca ff             	or     edx,0xffffffff
c0007b11:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007b15:	4e                   	dec    esi
c0007b16:	e8 c6 a0 ff ff       	call   c0001be1 <st_dword>
c0007b1b:	83 c1 04             	add    ecx,0x4
c0007b1e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b22:	85 f6                	test   esi,esi
c0007b24:	75 db                	jne    c0007b01 <f_mkfs+0x650>
c0007b26:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007b2b:	77 14                	ja     c0007b41 <f_mkfs+0x690>
c0007b2d:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007b31:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007b38:	85 f6                	test   esi,esi
c0007b3a:	74 05                	je     c0007b41 <f_mkfs+0x690>
c0007b3c:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007b3f:	77 dd                	ja     c0007b1e <f_mkfs+0x66d>
c0007b41:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007b45:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007b49:	39 cf                	cmp    edi,ecx
c0007b4b:	76 02                	jbe    c0007b4f <f_mkfs+0x69e>
c0007b4d:	89 cf                	mov    edi,ecx
c0007b4f:	83 ec 0c             	sub    esp,0xc
c0007b52:	57                   	push   edi
c0007b53:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b57:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b5b:	55                   	push   ebp
c0007b5c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b60:	e8 d1 9f ff ff       	call   c0001b36 <disk_write>
c0007b65:	83 c4 20             	add    esp,0x20
c0007b68:	85 c0                	test   eax,eax
c0007b6a:	0f 85 f2 09 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c0007b70:	31 d2                	xor    edx,edx
c0007b72:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007b76:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007b7a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007b7e:	0f 85 48 ff ff ff    	jne    c0007acc <f_mkfs+0x61b>
c0007b84:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b87:	31 d2                	xor    edx,edx
c0007b89:	89 e8                	mov    eax,ebp
c0007b8b:	31 ff                	xor    edi,edi
c0007b8d:	e8 6d a0 ff ff       	call   c0001bff <mem_set>
c0007b92:	8d 45 34             	lea    eax,[ebp+0x34]
c0007b95:	ba 02 00 00 00       	mov    edx,0x2
c0007b9a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007b9e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007ba2:	e8 3a a0 ff ff       	call   c0001be1 <st_dword>
c0007ba7:	8d 45 38             	lea    eax,[ebp+0x38]
c0007baa:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007bae:	e8 2e a0 ff ff       	call   c0001be1 <st_dword>
c0007bb3:	8d 45 44             	lea    eax,[ebp+0x44]
c0007bb6:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007bba:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007bbe:	e8 1e a0 ff ff       	call   c0001be1 <st_dword>
c0007bc3:	8d 45 54             	lea    eax,[ebp+0x54]
c0007bc6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007bca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007bce:	83 c2 02             	add    edx,0x2
c0007bd1:	e8 0b a0 ff ff       	call   c0001be1 <st_dword>
c0007bd6:	8d 45 58             	lea    eax,[ebp+0x58]
c0007bd9:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007bdd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007be1:	e8 fb 9f ff ff       	call   c0001be1 <st_dword>
c0007be6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bea:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007bef:	89 c6                	mov    esi,eax
c0007bf1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bf5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007bf9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bfc:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007c00:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007c03:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007c07:	39 cb                	cmp    ebx,ecx
c0007c09:	76 02                	jbe    c0007c0d <f_mkfs+0x75c>
c0007c0b:	89 cb                	mov    ebx,ecx
c0007c0d:	83 ec 0c             	sub    esp,0xc
c0007c10:	53                   	push   ebx
c0007c11:	57                   	push   edi
c0007c12:	56                   	push   esi
c0007c13:	55                   	push   ebp
c0007c14:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c18:	e8 19 9f ff ff       	call   c0001b36 <disk_write>
c0007c1d:	83 c4 20             	add    esp,0x20
c0007c20:	85 c0                	test   eax,eax
c0007c22:	0f 85 3a 09 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c0007c28:	31 d2                	xor    edx,edx
c0007c2a:	b9 00 02 00 00       	mov    ecx,0x200
c0007c2f:	89 e8                	mov    eax,ebp
c0007c31:	e8 c9 9f ff ff       	call   c0001bff <mem_set>
c0007c36:	31 d2                	xor    edx,edx
c0007c38:	01 de                	add    esi,ebx
c0007c3a:	11 d7                	adc    edi,edx
c0007c3c:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007c3f:	75 bf                	jne    c0007c00 <f_mkfs+0x74f>
c0007c41:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007c45:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007c49:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007c51:	b9 00 02 00 00       	mov    ecx,0x200
c0007c56:	31 d2                	xor    edx,edx
c0007c58:	89 e8                	mov    eax,ebp
c0007c5a:	e8 a0 9f ff ff       	call   c0001bff <mem_set>
c0007c5f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007c64:	ba e0 40 02 c0       	mov    edx,0xc00240e0
c0007c69:	89 e8                	mov    eax,ebp
c0007c6b:	e8 7a 9f ff ff       	call   c0001bea <mem_cpy>
c0007c70:	8d 45 40             	lea    eax,[ebp+0x40]
c0007c73:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007c77:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007c7b:	e8 64 9f ff ff       	call   c0001be4 <st_qword>
c0007c80:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007c84:	8d 45 48             	lea    eax,[ebp+0x48]
c0007c87:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007c8b:	e8 54 9f ff ff       	call   c0001be4 <st_qword>
c0007c90:	8d 45 50             	lea    eax,[ebp+0x50]
c0007c93:	ba 20 00 00 00       	mov    edx,0x20
c0007c98:	e8 44 9f ff ff       	call   c0001be1 <st_dword>
c0007c9d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007ca1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007ca5:	e8 37 9f ff ff       	call   c0001be1 <st_dword>
c0007caa:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007cae:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007cb2:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007cb6:	e8 26 9f ff ff       	call   c0001be1 <st_dword>
c0007cbb:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007cbe:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007cc2:	e8 1a 9f ff ff       	call   c0001be1 <st_dword>
c0007cc7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007ccb:	8d 50 02             	lea    edx,[eax+0x2]
c0007cce:	8d 45 60             	lea    eax,[ebp+0x60]
c0007cd1:	e8 0b 9f ff ff       	call   c0001be1 <st_dword>
c0007cd6:	8d 45 64             	lea    eax,[ebp+0x64]
c0007cd9:	ba 00 00 21 50       	mov    edx,0x50210000
c0007cde:	e8 fe 9e ff ff       	call   c0001be1 <st_dword>
c0007ce3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007ce6:	ba 00 01 00 00       	mov    edx,0x100
c0007ceb:	e8 ed 9e ff ff       	call   c0001bdd <st_word>
c0007cf0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007cf4:	b8 0a 00 00 00       	mov    eax,0xa
c0007cf9:	48                   	dec    eax
c0007cfa:	74 05                	je     c0007d01 <f_mkfs+0x850>
c0007cfc:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007cff:	eb f8                	jmp    c0007cf9 <f_mkfs+0x848>
c0007d01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007d05:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007d09:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007d0d:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007d11:	74 05                	je     c0007d18 <f_mkfs+0x867>
c0007d13:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007d16:	eb f5                	jmp    c0007d0d <f_mkfs+0x85c>
c0007d18:	8d 45 78             	lea    eax,[ebp+0x78]
c0007d1b:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007d20:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007d26:	31 db                	xor    ebx,ebx
c0007d28:	e8 b0 9e ff ff       	call   c0001bdd <st_word>
c0007d2d:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007d33:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d38:	89 04 24             	mov    DWORD PTR [esp],eax
c0007d3b:	e8 9d 9e ff ff       	call   c0001bdd <st_word>
c0007d40:	31 c9                	xor    ecx,ecx
c0007d42:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007d45:	83 f8 01             	cmp    eax,0x1
c0007d48:	76 13                	jbe    c0007d5d <f_mkfs+0x8ac>
c0007d4a:	83 f9 70             	cmp    ecx,0x70
c0007d4d:	74 0e                	je     c0007d5d <f_mkfs+0x8ac>
c0007d4f:	89 da                	mov    edx,ebx
c0007d51:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007d56:	e8 0b a3 ff ff       	call   c0002066 <xsum32>
c0007d5b:	89 c3                	mov    ebx,eax
c0007d5d:	41                   	inc    ecx
c0007d5e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d64:	75 dc                	jne    c0007d42 <f_mkfs+0x891>
c0007d66:	89 f0                	mov    eax,esi
c0007d68:	89 fa                	mov    edx,edi
c0007d6a:	83 c0 01             	add    eax,0x1
c0007d6d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007d71:	83 d2 00             	adc    edx,0x0
c0007d74:	83 ec 0c             	sub    esp,0xc
c0007d77:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d7b:	6a 01                	push   0x1
c0007d7d:	57                   	push   edi
c0007d7e:	56                   	push   esi
c0007d7f:	55                   	push   ebp
c0007d80:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d84:	e8 ad 9d ff ff       	call   c0001b36 <disk_write>
c0007d89:	83 c4 20             	add    esp,0x20
c0007d8c:	85 c0                	test   eax,eax
c0007d8e:	0f 85 ce 07 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c0007d94:	31 d2                	xor    edx,edx
c0007d96:	b9 00 02 00 00       	mov    ecx,0x200
c0007d9b:	89 e8                	mov    eax,ebp
c0007d9d:	e8 5d 9e ff ff       	call   c0001bff <mem_set>
c0007da2:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007da7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007daa:	e8 2e 9e ff ff       	call   c0001bdd <st_word>
c0007daf:	89 f0                	mov    eax,esi
c0007db1:	89 fa                	mov    edx,edi
c0007db3:	83 c0 09             	add    eax,0x9
c0007db6:	83 d2 00             	adc    edx,0x0
c0007db9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007dbc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007dc0:	31 c9                	xor    ecx,ecx
c0007dc2:	41                   	inc    ecx
c0007dc3:	89 da                	mov    edx,ebx
c0007dc5:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007dca:	e8 97 a2 ff ff       	call   c0002066 <xsum32>
c0007dcf:	89 c3                	mov    ebx,eax
c0007dd1:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007dd7:	75 e9                	jne    c0007dc2 <f_mkfs+0x911>
c0007dd9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007ddd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007de1:	83 c0 01             	add    eax,0x1
c0007de4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007de8:	83 d2 00             	adc    edx,0x0
c0007deb:	83 ec 0c             	sub    esp,0xc
c0007dee:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007df2:	6a 01                	push   0x1
c0007df4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007df8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007dfc:	55                   	push   ebp
c0007dfd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e01:	e8 30 9d ff ff       	call   c0001b36 <disk_write>
c0007e06:	83 c4 20             	add    esp,0x20
c0007e09:	85 c0                	test   eax,eax
c0007e0b:	0f 85 51 07 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c0007e11:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007e15:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007e19:	75 09                	jne    c0007e24 <f_mkfs+0x973>
c0007e1b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e1e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007e22:	74 12                	je     c0007e36 <f_mkfs+0x985>
c0007e24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007e28:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007e2c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007e30:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007e34:	eb 8a                	jmp    c0007dc0 <f_mkfs+0x90f>
c0007e36:	31 d2                	xor    edx,edx
c0007e38:	b9 00 02 00 00       	mov    ecx,0x200
c0007e3d:	89 e8                	mov    eax,ebp
c0007e3f:	e8 bb 9d ff ff       	call   c0001bff <mem_set>
c0007e44:	83 c6 0b             	add    esi,0xb
c0007e47:	83 d7 00             	adc    edi,0x0
c0007e4a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007e4e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007e52:	31 c9                	xor    ecx,ecx
c0007e54:	41                   	inc    ecx
c0007e55:	89 da                	mov    edx,ebx
c0007e57:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007e5c:	e8 05 a2 ff ff       	call   c0002066 <xsum32>
c0007e61:	89 c3                	mov    ebx,eax
c0007e63:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e69:	75 e9                	jne    c0007e54 <f_mkfs+0x9a3>
c0007e6b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007e6e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007e72:	83 c6 01             	add    esi,0x1
c0007e75:	83 d7 00             	adc    edi,0x0
c0007e78:	83 ec 0c             	sub    esp,0xc
c0007e7b:	6a 01                	push   0x1
c0007e7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e85:	55                   	push   ebp
c0007e86:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e8a:	e8 a7 9c ff ff       	call   c0001b36 <disk_write>
c0007e8f:	83 c4 20             	add    esp,0x20
c0007e92:	85 c0                	test   eax,eax
c0007e94:	0f 85 c8 06 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c0007e9a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007e9e:	75 06                	jne    c0007ea6 <f_mkfs+0x9f5>
c0007ea0:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007ea4:	74 09                	je     c0007eaf <f_mkfs+0x9fe>
c0007ea6:	89 34 24             	mov    DWORD PTR [esp],esi
c0007ea9:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007ead:	eb a3                	jmp    c0007e52 <f_mkfs+0x9a1>
c0007eaf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007eb3:	89 da                	mov    edx,ebx
c0007eb5:	01 e8                	add    eax,ebp
c0007eb7:	e8 25 9d ff ff       	call   c0001be1 <st_dword>
c0007ebc:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007ec1:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007ec9:	75 e4                	jne    c0007eaf <f_mkfs+0x9fe>
c0007ecb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ece:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ed2:	83 c6 02             	add    esi,0x2
c0007ed5:	83 d7 00             	adc    edi,0x0
c0007ed8:	83 ec 0c             	sub    esp,0xc
c0007edb:	6a 01                	push   0x1
c0007edd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ee1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ee5:	55                   	push   ebp
c0007ee6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007eea:	e8 47 9c ff ff       	call   c0001b36 <disk_write>
c0007eef:	83 c4 20             	add    esp,0x20
c0007ef2:	85 c0                	test   eax,eax
c0007ef4:	0f 85 68 06 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c0007efa:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007eff:	74 0d                	je     c0007f0e <f_mkfs+0xa5d>
c0007f01:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007f09:	e9 43 fd ff ff       	jmp    c0007c51 <f_mkfs+0x7a0>
c0007f0e:	b1 07                	mov    cl,0x7
c0007f10:	e9 e3 05 00 00       	jmp    c00084f8 <f_mkfs+0x1047>
c0007f15:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007f1a:	0f 85 4f 02 00 00    	jne    c000816f <f_mkfs+0xcbe>
c0007f20:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f25:	0f 86 22 02 00 00    	jbe    c000814d <f_mkfs+0xc9c>
c0007f2b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f30:	0f 85 81 06 00 00    	jne    c00085b7 <f_mkfs+0x1106>
c0007f36:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007f39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007f3d:	83 f8 40             	cmp    eax,0x40
c0007f40:	0f 87 51 06 00 00    	ja     c0008597 <f_mkfs+0x10e6>
c0007f46:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f4a:	85 ff                	test   edi,edi
c0007f4c:	75 1c                	jne    c0007f6a <f_mkfs+0xab9>
c0007f4e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f51:	ba e0 3f 02 c0       	mov    edx,0xc0023fe0
c0007f56:	c1 e9 0c             	shr    ecx,0xc
c0007f59:	bf 01 00 00 00       	mov    edi,0x1
c0007f5e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f61:	66 85 c0             	test   ax,ax
c0007f64:	0f 85 95 01 00 00    	jne    c00080ff <f_mkfs+0xc4e>
c0007f6a:	31 d2                	xor    edx,edx
c0007f6c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007f6f:	f7 f7                	div    edi
c0007f71:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007f76:	0f 86 95 01 00 00    	jbe    c0008111 <f_mkfs+0xc60>
c0007f7c:	83 c0 02             	add    eax,0x2
c0007f7f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007f84:	01 c0                	add    eax,eax
c0007f86:	05 ff 01 00 00       	add    eax,0x1ff
c0007f8b:	be 01 00 00 00       	mov    esi,0x1
c0007f90:	c1 e8 09             	shr    eax,0x9
c0007f93:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007f97:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007f9b:	c1 e0 05             	shl    eax,0x5
c0007f9e:	c1 e8 09             	shr    eax,0x9
c0007fa1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007fa5:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007faa:	31 d2                	xor    edx,edx
c0007fac:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007fb0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007fb4:	89 f0                	mov    eax,esi
c0007fb6:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007fba:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007fbe:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007fc2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007fc6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007fca:	31 d2                	xor    edx,edx
c0007fcc:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007fd1:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007fd5:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007fd9:	31 db                	xor    ebx,ebx
c0007fdb:	01 c8                	add    eax,ecx
c0007fdd:	11 da                	adc    edx,ebx
c0007fdf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007fe3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007fe7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007feb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007fef:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007ff3:	f7 da                	neg    edx
c0007ff5:	21 d1                	and    ecx,edx
c0007ff7:	29 d9                	sub    ecx,ebx
c0007ff9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ffe:	0f 85 20 01 00 00    	jne    c0008124 <f_mkfs+0xc73>
c0008004:	31 db                	xor    ebx,ebx
c0008006:	01 ce                	add    esi,ecx
c0008008:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c000800c:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0008010:	31 d2                	xor    edx,edx
c0008012:	89 f8                	mov    eax,edi
c0008014:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0008018:	c1 e0 04             	shl    eax,0x4
c000801b:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c000801f:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0008023:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0008027:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c000802b:	39 04 24             	cmp    DWORD PTR [esp],eax
c000802e:	19 d3                	sbb    ebx,edx
c0008030:	0f 82 40 01 00 00    	jb     c0008176 <f_mkfs+0xcc5>
c0008036:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008039:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000803d:	89 c8                	mov    eax,ecx
c000803f:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0008044:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0008048:	29 f0                	sub    eax,esi
c000804a:	29 d0                	sub    eax,edx
c000804c:	31 d2                	xor    edx,edx
c000804e:	f7 f7                	div    edi
c0008050:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008055:	89 c3                	mov    ebx,eax
c0008057:	0f 85 b8 fe ff ff    	jne    c0007f15 <f_mkfs+0xa64>
c000805d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0008062:	0f 87 1d 01 00 00    	ja     c0008185 <f_mkfs+0xcd4>
c0008068:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000806d:	0f 85 03 01 00 00    	jne    c0008176 <f_mkfs+0xcc5>
c0008073:	83 ff 01             	cmp    edi,0x1
c0008076:	0f 86 fa 00 00 00    	jbe    c0008176 <f_mkfs+0xcc5>
c000807c:	d1 ef                	shr    edi,1
c000807e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008082:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0008086:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008089:	85 db                	test   ebx,ebx
c000808b:	75 2d                	jne    c00080ba <f_mkfs+0xc09>
c000808d:	89 cb                	mov    ebx,ecx
c000808f:	ba f0 3f 02 c0       	mov    edx,0xc0023ff0
c0008094:	c1 eb 11             	shr    ebx,0x11
c0008097:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c000809f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00080a2:	66 85 c0             	test   ax,ax
c00080a5:	74 11                	je     c00080b8 <f_mkfs+0xc07>
c00080a7:	83 c2 02             	add    edx,0x2
c00080aa:	39 d8                	cmp    eax,ebx
c00080ac:	77 0a                	ja     c00080b8 <f_mkfs+0xc07>
c00080ae:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00080b2:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c00080b6:	eb e7                	jmp    c000809f <f_mkfs+0xbee>
c00080b8:	31 db                	xor    ebx,ebx
c00080ba:	31 d2                	xor    edx,edx
c00080bc:	89 c8                	mov    eax,ecx
c00080be:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00080c2:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00080c9:	2d f6 ff 00 00       	sub    eax,0xfff6
c00080ce:	c1 ea 09             	shr    edx,0x9
c00080d1:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00080d6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00080da:	0f 87 96 00 00 00    	ja     c0008176 <f_mkfs+0xcc5>
c00080e0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080e4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c00080ec:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00080f0:	be 20 00 00 00       	mov    esi,0x20
c00080f5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c00080fa:	e9 a6 fe ff ff       	jmp    c0007fa5 <f_mkfs+0xaf4>
c00080ff:	83 c2 02             	add    edx,0x2
c0008102:	39 c8                	cmp    eax,ecx
c0008104:	0f 87 60 fe ff ff    	ja     c0007f6a <f_mkfs+0xab9>
c000810a:	01 ff                	add    edi,edi
c000810c:	e9 4d fe ff ff       	jmp    c0007f5e <f_mkfs+0xaad>
c0008111:	8d 04 40             	lea    eax,[eax+eax*2]
c0008114:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008119:	40                   	inc    eax
c000811a:	d1 e8                	shr    eax,1
c000811c:	83 c0 03             	add    eax,0x3
c000811f:	e9 62 fe ff ff       	jmp    c0007f86 <f_mkfs+0xad5>
c0008124:	31 d2                	xor    edx,edx
c0008126:	89 c8                	mov    eax,ecx
c0008128:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c000812c:	85 d2                	test   edx,edx
c000812e:	74 0c                	je     c000813c <f_mkfs+0xc8b>
c0008130:	49                   	dec    ecx
c0008131:	46                   	inc    esi
c0008132:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0008137:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c000813c:	89 c8                	mov    eax,ecx
c000813e:	31 d2                	xor    edx,edx
c0008140:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008144:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008148:	e9 c3 fe ff ff       	jmp    c0008010 <f_mkfs+0xb5f>
c000814d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008152:	77 31                	ja     c0008185 <f_mkfs+0xcd4>
c0008154:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008159:	75 1b                	jne    c0008176 <f_mkfs+0xcc5>
c000815b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000815e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008162:	3d 80 00 00 00       	cmp    eax,0x80
c0008167:	0f 86 d9 fd ff ff    	jbe    c0007f46 <f_mkfs+0xa95>
c000816d:	eb 07                	jmp    c0008176 <f_mkfs+0xcc5>
c000816f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008174:	76 0a                	jbe    c0008180 <f_mkfs+0xccf>
c0008176:	bb 0e 00 00 00       	mov    ebx,0xe
c000817b:	e9 ff 03 00 00       	jmp    c000857f <f_mkfs+0x10ce>
c0008180:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008185:	31 d2                	xor    edx,edx
c0008187:	b9 00 02 00 00       	mov    ecx,0x200
c000818c:	89 e8                	mov    eax,ebp
c000818e:	e8 6c 9a ff ff       	call   c0001bff <mem_set>
c0008193:	b9 0b 00 00 00       	mov    ecx,0xb
c0008198:	ba 02 41 02 c0       	mov    edx,0xc0024102
c000819d:	89 e8                	mov    eax,ebp
c000819f:	e8 46 9a ff ff       	call   c0001bea <mem_cpy>
c00081a4:	8d 45 0b             	lea    eax,[ebp+0xb]
c00081a7:	ba 00 02 00 00       	mov    edx,0x200
c00081ac:	e8 2c 9a ff ff       	call   c0001bdd <st_word>
c00081b1:	89 f8                	mov    eax,edi
c00081b3:	0f b7 d6             	movzx  edx,si
c00081b6:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c00081b9:	8d 45 0e             	lea    eax,[ebp+0xe]
c00081bc:	e8 1c 9a ff ff       	call   c0001bdd <st_word>
c00081c1:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c00081c5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081ca:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c00081cd:	75 08                	jne    c00081d7 <f_mkfs+0xd26>
c00081cf:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00081d7:	8d 45 11             	lea    eax,[ebp+0x11]
c00081da:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00081de:	e8 fa 99 ff ff       	call   c0001bdd <st_word>
c00081e3:	b8 ff ff 00 00       	mov    eax,0xffff
c00081e8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00081ec:	39 d0                	cmp    eax,edx
c00081ee:	b8 00 00 00 00       	mov    eax,0x0
c00081f3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00081f7:	72 0a                	jb     c0008203 <f_mkfs+0xd52>
c00081f9:	8d 45 13             	lea    eax,[ebp+0x13]
c00081fc:	e8 dc 99 ff ff       	call   c0001bdd <st_word>
c0008201:	eb 08                	jmp    c000820b <f_mkfs+0xd5a>
c0008203:	8d 45 20             	lea    eax,[ebp+0x20]
c0008206:	e8 d6 99 ff ff       	call   c0001be1 <st_dword>
c000820b:	8d 45 18             	lea    eax,[ebp+0x18]
c000820e:	ba 3f 00 00 00       	mov    edx,0x3f
c0008213:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0008217:	e8 c1 99 ff ff       	call   c0001bdd <st_word>
c000821c:	8d 45 1a             	lea    eax,[ebp+0x1a]
c000821f:	ba ff 00 00 00       	mov    edx,0xff
c0008224:	e8 b4 99 ff ff       	call   c0001bdd <st_word>
c0008229:	8d 45 1c             	lea    eax,[ebp+0x1c]
c000822c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008230:	e8 ac 99 ff ff       	call   c0001be1 <st_dword>
c0008235:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000823a:	75 57                	jne    c0008293 <f_mkfs+0xde2>
c000823c:	8d 45 43             	lea    eax,[ebp+0x43]
c000823f:	ba 00 00 21 50       	mov    edx,0x50210000
c0008244:	e8 98 99 ff ff       	call   c0001be1 <st_dword>
c0008249:	8d 45 24             	lea    eax,[ebp+0x24]
c000824c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008250:	e8 8c 99 ff ff       	call   c0001be1 <st_dword>
c0008255:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008258:	ba 02 00 00 00       	mov    edx,0x2
c000825d:	e8 7f 99 ff ff       	call   c0001be1 <st_dword>
c0008262:	8d 45 30             	lea    eax,[ebp+0x30]
c0008265:	ba 01 00 00 00       	mov    edx,0x1
c000826a:	e8 6e 99 ff ff       	call   c0001bdd <st_word>
c000826f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008272:	ba 06 00 00 00       	mov    edx,0x6
c0008277:	e8 61 99 ff ff       	call   c0001bdd <st_word>
c000827c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008280:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008284:	8d 45 47             	lea    eax,[ebp+0x47]
c0008287:	b9 13 00 00 00       	mov    ecx,0x13
c000828c:	ba 0e 41 02 c0       	mov    edx,0xc002410e
c0008291:	eb 2f                	jmp    c00082c2 <f_mkfs+0xe11>
c0008293:	8d 45 27             	lea    eax,[ebp+0x27]
c0008296:	ba 00 00 21 50       	mov    edx,0x50210000
c000829b:	e8 41 99 ff ff       	call   c0001be1 <st_dword>
c00082a0:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c00082a5:	8d 45 16             	lea    eax,[ebp+0x16]
c00082a8:	e8 30 99 ff ff       	call   c0001bdd <st_word>
c00082ad:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c00082b1:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c00082b5:	8d 45 2b             	lea    eax,[ebp+0x2b]
c00082b8:	b9 13 00 00 00       	mov    ecx,0x13
c00082bd:	ba 22 41 02 c0       	mov    edx,0xc0024122
c00082c2:	e8 23 99 ff ff       	call   c0001bea <mem_cpy>
c00082c7:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c00082cd:	ba 55 aa 00 00       	mov    edx,0xaa55
c00082d2:	89 f0                	mov    eax,esi
c00082d4:	e8 04 99 ff ff       	call   c0001bdd <st_word>
c00082d9:	83 ec 0c             	sub    esp,0xc
c00082dc:	6a 01                	push   0x1
c00082de:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082e2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082e6:	55                   	push   ebp
c00082e7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082eb:	e8 46 98 ff ff       	call   c0001b36 <disk_write>
c00082f0:	83 c4 20             	add    esp,0x20
c00082f3:	85 c0                	test   eax,eax
c00082f5:	0f 85 67 02 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c00082fb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008300:	0f 85 b7 00 00 00    	jne    c00083bd <f_mkfs+0xf0c>
c0008306:	83 ec 0c             	sub    esp,0xc
c0008309:	6a 01                	push   0x1
c000830b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000830f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008313:	83 c0 06             	add    eax,0x6
c0008316:	83 d2 00             	adc    edx,0x0
c0008319:	52                   	push   edx
c000831a:	50                   	push   eax
c000831b:	55                   	push   ebp
c000831c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008320:	e8 11 98 ff ff       	call   c0001b36 <disk_write>
c0008325:	83 c4 20             	add    esp,0x20
c0008328:	b9 00 02 00 00       	mov    ecx,0x200
c000832d:	31 d2                	xor    edx,edx
c000832f:	89 e8                	mov    eax,ebp
c0008331:	e8 c9 98 ff ff       	call   c0001bff <mem_set>
c0008336:	ba 52 52 61 41       	mov    edx,0x41615252
c000833b:	89 e8                	mov    eax,ebp
c000833d:	e8 9f 98 ff ff       	call   c0001be1 <st_dword>
c0008342:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008348:	ba 72 72 41 61       	mov    edx,0x61417272
c000834d:	e8 8f 98 ff ff       	call   c0001be1 <st_dword>
c0008352:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008355:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000835b:	e8 81 98 ff ff       	call   c0001be1 <st_dword>
c0008360:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008366:	ba 02 00 00 00       	mov    edx,0x2
c000836b:	e8 71 98 ff ff       	call   c0001be1 <st_dword>
c0008370:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008375:	89 f0                	mov    eax,esi
c0008377:	e8 61 98 ff ff       	call   c0001bdd <st_word>
c000837c:	83 ec 0c             	sub    esp,0xc
c000837f:	6a 01                	push   0x1
c0008381:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008385:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008389:	83 c0 07             	add    eax,0x7
c000838c:	83 d2 00             	adc    edx,0x0
c000838f:	52                   	push   edx
c0008390:	50                   	push   eax
c0008391:	55                   	push   ebp
c0008392:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008396:	e8 9b 97 ff ff       	call   c0001b36 <disk_write>
c000839b:	83 c4 14             	add    esp,0x14
c000839e:	6a 01                	push   0x1
c00083a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00083a4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00083a8:	83 c0 01             	add    eax,0x1
c00083ab:	83 d2 00             	adc    edx,0x0
c00083ae:	52                   	push   edx
c00083af:	50                   	push   eax
c00083b0:	55                   	push   ebp
c00083b1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083b5:	e8 7c 97 ff ff       	call   c0001b36 <disk_write>
c00083ba:	83 c4 20             	add    esp,0x20
c00083bd:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c00083c4:	31 d2                	xor    edx,edx
c00083c6:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00083cc:	31 db                	xor    ebx,ebx
c00083ce:	89 e8                	mov    eax,ebp
c00083d0:	e8 2a 98 ff ff       	call   c0001bff <mem_set>
c00083d5:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00083da:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00083e1:	0f 94 c3             	sete   bl
c00083e4:	4b                   	dec    ebx
c00083e5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00083eb:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00083f1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083f6:	75 21                	jne    c0008419 <f_mkfs+0xf68>
c00083f8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00083fd:	89 e8                	mov    eax,ebp
c00083ff:	e8 dd 97 ff ff       	call   c0001be1 <st_dword>
c0008404:	8d 45 04             	lea    eax,[ebp+0x4]
c0008407:	83 ca ff             	or     edx,0xffffffff
c000840a:	e8 d2 97 ff ff       	call   c0001be1 <st_dword>
c000840f:	8d 45 08             	lea    eax,[ebp+0x8]
c0008412:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008417:	eb 04                	jmp    c000841d <f_mkfs+0xf6c>
c0008419:	89 da                	mov    edx,ebx
c000841b:	89 e8                	mov    eax,ebp
c000841d:	e8 bf 97 ff ff       	call   c0001be1 <st_dword>
c0008422:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008426:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000842a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000842e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008432:	39 ce                	cmp    esi,ecx
c0008434:	76 02                	jbe    c0008438 <f_mkfs+0xf87>
c0008436:	89 ce                	mov    esi,ecx
c0008438:	83 ec 0c             	sub    esp,0xc
c000843b:	56                   	push   esi
c000843c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008440:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008444:	55                   	push   ebp
c0008445:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008449:	e8 e8 96 ff ff       	call   c0001b36 <disk_write>
c000844e:	83 c4 20             	add    esp,0x20
c0008451:	85 c0                	test   eax,eax
c0008453:	0f 85 09 01 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c0008459:	31 d2                	xor    edx,edx
c000845b:	b9 00 02 00 00       	mov    ecx,0x200
c0008460:	89 e8                	mov    eax,ebp
c0008462:	e8 98 97 ff ff       	call   c0001bff <mem_set>
c0008467:	31 d2                	xor    edx,edx
c0008469:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000846d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008471:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008475:	75 b3                	jne    c000842a <f_mkfs+0xf79>
c0008477:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000847a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008481:	40                   	inc    eax
c0008482:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008486:	0f 87 65 ff ff ff    	ja     c00083f1 <f_mkfs+0xf40>
c000848c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008491:	74 04                	je     c0008497 <f_mkfs+0xfe6>
c0008493:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008497:	89 fb                	mov    ebx,edi
c0008499:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000849d:	76 04                	jbe    c00084a3 <f_mkfs+0xff2>
c000849f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00084a3:	83 ec 0c             	sub    esp,0xc
c00084a6:	53                   	push   ebx
c00084a7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00084ab:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00084af:	55                   	push   ebp
c00084b0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00084b4:	e8 7d 96 ff ff       	call   c0001b36 <disk_write>
c00084b9:	83 c4 20             	add    esp,0x20
c00084bc:	85 c0                	test   eax,eax
c00084be:	0f 85 9e 00 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c00084c4:	31 d2                	xor    edx,edx
c00084c6:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00084ca:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00084ce:	29 df                	sub    edi,ebx
c00084d0:	75 c5                	jne    c0008497 <f_mkfs+0xfe6>
c00084d2:	b1 0c                	mov    cl,0xc
c00084d4:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00084d9:	74 1d                	je     c00084f8 <f_mkfs+0x1047>
c00084db:	b8 ff ff 00 00       	mov    eax,0xffff
c00084e0:	b1 06                	mov    cl,0x6
c00084e2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00084e6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00084ea:	72 0c                	jb     c00084f8 <f_mkfs+0x1047>
c00084ec:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00084f1:	0f 94 c1             	sete   cl
c00084f4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00084f8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00084fd:	75 4c                	jne    c000854b <f_mkfs+0x109a>
c00084ff:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008503:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0008507:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000850e:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008515:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008520:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000852b:	0f b6 c9             	movzx  ecx,cl
c000852e:	83 ec 0c             	sub    esp,0xc
c0008531:	55                   	push   ebp
c0008532:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008539:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000853d:	e8 f9 bf ff ff       	call   c000453b <create_partition>
c0008542:	83 c4 10             	add    esp,0x10
c0008545:	89 c3                	mov    ebx,eax
c0008547:	85 c0                	test   eax,eax
c0008549:	75 34                	jne    c000857f <f_mkfs+0x10ce>
c000854b:	31 db                	xor    ebx,ebx
c000854d:	50                   	push   eax
c000854e:	6a 00                	push   0x0
c0008550:	6a 00                	push   0x0
c0008552:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008556:	e8 f1 95 ff ff       	call   c0001b4c <disk_ioctl>
c000855b:	83 c4 10             	add    esp,0x10
c000855e:	85 c0                	test   eax,eax
c0008560:	74 1d                	je     c000857f <f_mkfs+0x10ce>
c0008562:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000856a:	75 0c                	jne    c0008578 <f_mkfs+0x10c7>
c000856c:	83 ec 0c             	sub    esp,0xc
c000856f:	55                   	push   ebp
c0008570:	e8 77 00 00 00       	call   c00085ec <ff_memfree>
c0008575:	83 c4 10             	add    esp,0x10
c0008578:	bb 01 00 00 00       	mov    ebx,0x1
c000857d:	eb 48                	jmp    c00085c7 <f_mkfs+0x1116>
c000857f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008587:	75 3e                	jne    c00085c7 <f_mkfs+0x1116>
c0008589:	83 ec 0c             	sub    esp,0xc
c000858c:	55                   	push   ebp
c000858d:	e8 5a 00 00 00       	call   c00085ec <ff_memfree>
c0008592:	83 c4 10             	add    esp,0x10
c0008595:	eb 30                	jmp    c00085c7 <f_mkfs+0x1116>
c0008597:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000859c:	0f 85 eb fa ff ff    	jne    c000808d <f_mkfs+0xbdc>
c00085a2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00085a6:	81 ff 80 00 00 00    	cmp    edi,0x80
c00085ac:	0f 86 b8 f9 ff ff    	jbe    c0007f6a <f_mkfs+0xab9>
c00085b2:	e9 bf fb ff ff       	jmp    c0008176 <f_mkfs+0xcc5>
c00085b7:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00085bc:	0f 85 c0 fa ff ff    	jne    c0008082 <f_mkfs+0xbd1>
c00085c2:	e9 af fb ff ff       	jmp    c0008176 <f_mkfs+0xcc5>
c00085c7:	81 c4 9c 00 00 00    	add    esp,0x9c
c00085cd:	89 d8                	mov    eax,ebx
c00085cf:	5b                   	pop    ebx
c00085d0:	5e                   	pop    esi
c00085d1:	5f                   	pop    edi
c00085d2:	5d                   	pop    ebp
c00085d3:	c3                   	ret    

c00085d4 <ff_memalloc>:
c00085d4:	83 ec 0c             	sub    esp,0xc
c00085d7:	83 ec 0c             	sub    esp,0xc
c00085da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085de:	e8 04 18 00 00       	call   c0009de7 <malloc>
c00085e3:	83 c4 10             	add    esp,0x10
c00085e6:	83 c4 0c             	add    esp,0xc
c00085e9:	c3                   	ret    
c00085ea:	66 90                	xchg   ax,ax

c00085ec <ff_memfree>:
c00085ec:	83 ec 0c             	sub    esp,0xc
c00085ef:	83 ec 0c             	sub    esp,0xc
c00085f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085f6:	e8 fc 17 00 00       	call   c0009df7 <free>
c00085fb:	83 c4 10             	add    esp,0x10
c00085fe:	90                   	nop
c00085ff:	83 c4 0c             	add    esp,0xc
c0008602:	c3                   	ret    
c0008603:	90                   	nop

c0008604 <ff_uni2oem>:
c0008604:	83 ec 14             	sub    esp,0x14
c0008607:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000860b:	66 89 04 24          	mov    WORD PTR [esp],ax
c000860f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008616:	c7 44 24 0c 40 44 02 c0 	mov    DWORD PTR [esp+0xc],0xc0024440
c000861e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008623:	77 0b                	ja     c0008630 <ff_uni2oem+0x2c>
c0008625:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008629:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000862e:	eb 60                	jmp    c0008690 <ff_uni2oem+0x8c>
c0008630:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008638:	77 56                	ja     c0008690 <ff_uni2oem+0x8c>
c000863a:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008640:	75 4e                	jne    c0008690 <ff_uni2oem+0x8c>
c0008642:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008649:	eb 0d                	jmp    c0008658 <ff_uni2oem+0x54>
c000864b:	90                   	nop
c000864c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008651:	40                   	inc    eax
c0008652:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008657:	90                   	nop
c0008658:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c000865e:	77 1c                	ja     c000867c <ff_uni2oem+0x78>
c0008660:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008665:	01 c0                	add    eax,eax
c0008667:	89 c2                	mov    edx,eax
c0008669:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000866d:	01 d0                	add    eax,edx
c000866f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008672:	0f b7 c0             	movzx  eax,ax
c0008675:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008679:	75 d1                	jne    c000864c <ff_uni2oem+0x48>
c000867b:	90                   	nop
c000867c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008681:	83 e8 80             	sub    eax,0xffffff80
c0008684:	25 ff 00 00 00       	and    eax,0xff
c0008689:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000868e:	66 90                	xchg   ax,ax
c0008690:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008695:	83 c4 14             	add    esp,0x14
c0008698:	c3                   	ret    
c0008699:	8d 76 00             	lea    esi,[esi+0x0]

c000869c <ff_oem2uni>:
c000869c:	83 ec 18             	sub    esp,0x18
c000869f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00086a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00086a7:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c00086ac:	66 89 04 24          	mov    WORD PTR [esp],ax
c00086b0:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00086b7:	c7 44 24 10 40 44 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024440
c00086bf:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00086c5:	77 0d                	ja     c00086d4 <ff_oem2uni+0x38>
c00086c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086cb:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086d0:	eb 32                	jmp    c0008704 <ff_oem2uni+0x68>
c00086d2:	66 90                	xchg   ax,ax
c00086d4:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00086da:	75 28                	jne    c0008704 <ff_oem2uni+0x68>
c00086dc:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00086e3:	77 1f                	ja     c0008704 <ff_oem2uni+0x68>
c00086e5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00086ea:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00086ef:	01 c0                	add    eax,eax
c00086f1:	89 c2                	mov    edx,eax
c00086f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086f7:	01 d0                	add    eax,edx
c00086f9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00086fc:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008701:	8d 76 00             	lea    esi,[esi+0x0]
c0008704:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0008709:	83 c4 18             	add    esp,0x18
c000870c:	c3                   	ret    
c000870d:	8d 76 00             	lea    esi,[esi+0x0]

c0008710 <ff_wtoupper>:
c0008710:	83 ec 10             	sub    esp,0x10
c0008713:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000871b:	0f 87 4f 01 00 00    	ja     c0008870 <ff_wtoupper+0x160>
c0008721:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008725:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000872a:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008731:	77 09                	ja     c000873c <ff_wtoupper+0x2c>
c0008733:	b8 40 42 02 c0       	mov    eax,0xc0024240
c0008738:	eb 0a                	jmp    c0008744 <ff_wtoupper+0x34>
c000873a:	66 90                	xchg   ax,ax
c000873c:	b8 80 41 02 c0       	mov    eax,0xc0024180
c0008741:	8d 76 00             	lea    esi,[esi+0x0]
c0008744:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008748:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000874c:	8d 50 02             	lea    edx,[eax+0x2]
c000874f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008753:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008756:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000875b:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008761:	0f 84 fd 00 00 00    	je     c0008864 <ff_wtoupper+0x154>
c0008767:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000876c:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008771:	0f 82 ed 00 00 00    	jb     c0008864 <ff_wtoupper+0x154>
c0008777:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000877b:	8d 50 02             	lea    edx,[eax+0x2]
c000877e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008782:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008785:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000878a:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000878f:	66 c1 e8 08          	shr    ax,0x8
c0008793:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008798:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000879f:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00087a4:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c00087a9:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c00087ae:	01 ca                	add    edx,ecx
c00087b0:	39 d0                	cmp    eax,edx
c00087b2:	0f 8d 8c 00 00 00    	jge    c0008844 <ff_wtoupper+0x134>
c00087b8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00087bd:	83 f8 08             	cmp    eax,0x8
c00087c0:	0f 87 9a 00 00 00    	ja     c0008860 <ff_wtoupper+0x150>
c00087c6:	8b 04 85 40 41 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbec0]
c00087cd:	ff e0                	jmp    eax
c00087cf:	90                   	nop
c00087d0:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00087d5:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00087da:	29 c2                	sub    edx,eax
c00087dc:	89 d0                	mov    eax,edx
c00087de:	01 c0                	add    eax,eax
c00087e0:	89 c2                	mov    edx,eax
c00087e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087e6:	01 d0                	add    eax,edx
c00087e8:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087eb:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00087f0:	eb 4e                	jmp    c0008840 <ff_wtoupper+0x130>
c00087f2:	66 90                	xchg   ax,ax
c00087f4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00087f9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00087fd:	83 e0 01             	and    eax,0x1
c0008800:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008805:	eb 39                	jmp    c0008840 <ff_wtoupper+0x130>
c0008807:	90                   	nop
c0008808:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c000880e:	eb 30                	jmp    c0008840 <ff_wtoupper+0x130>
c0008810:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008816:	eb 28                	jmp    c0008840 <ff_wtoupper+0x130>
c0008818:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c000881e:	eb 20                	jmp    c0008840 <ff_wtoupper+0x130>
c0008820:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008826:	eb 18                	jmp    c0008840 <ff_wtoupper+0x130>
c0008828:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c000882e:	eb 10                	jmp    c0008840 <ff_wtoupper+0x130>
c0008830:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008836:	eb 08                	jmp    c0008840 <ff_wtoupper+0x130>
c0008838:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c000883f:	90                   	nop
c0008840:	eb 1e                	jmp    c0008860 <ff_wtoupper+0x150>
c0008842:	66 90                	xchg   ax,ax
c0008844:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000884a:	0f 85 f8 fe ff ff    	jne    c0008748 <ff_wtoupper+0x38>
c0008850:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008855:	01 c0                	add    eax,eax
c0008857:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000885b:	e9 e8 fe ff ff       	jmp    c0008748 <ff_wtoupper+0x38>
c0008860:	90                   	nop
c0008861:	8d 76 00             	lea    esi,[esi+0x0]
c0008864:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008869:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000886d:	8d 76 00             	lea    esi,[esi+0x0]
c0008870:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008874:	83 c4 10             	add    esp,0x10
c0008877:	c3                   	ret    

c0008878 <CPU::current()>:
c0008878:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c000887d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008883:	c3                   	ret    

c0008884 <operator new(unsigned long)>:
c0008884:	e9 5e 15 00 00       	jmp    c0009de7 <malloc>

c0008889 <operator delete(void*)>:
c0008889:	e9 79 15 00 00       	jmp    c0009e07 <rfree>

c000888e <disableIRQs()>:
c000888e:	fa                   	cli    
c000888f:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c0008895:	c3                   	ret    

c0008896 <enableIRQs()>:
c0008896:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c000889b:	48                   	dec    eax
c000889c:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c00088a1:	75 01                	jne    c00088a4 <enableIRQs()+0xe>
c00088a3:	fb                   	sti    
c00088a4:	c3                   	ret    

c00088a5 <lockScheduler()>:
c00088a5:	fa                   	cli    
c00088a6:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c00088ac:	c3                   	ret    

c00088ad <unlockScheduler()>:
c00088ad:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c00088b2:	48                   	dec    eax
c00088b3:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c00088b8:	75 01                	jne    c00088bb <unlockScheduler()+0xe>
c00088ba:	fb                   	sti    
c00088bb:	c3                   	ret    

c00088bc <lockStuff()>:
c00088bc:	fa                   	cli    
c00088bd:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c00088c3:	ff 05 24 a1 02 c0    	inc    DWORD PTR ds:0xc002a124
c00088c9:	c3                   	ret    

c00088ca <unlockStuff()>:
c00088ca:	83 ec 0c             	sub    esp,0xc
c00088cd:	a1 24 a1 02 c0       	mov    eax,ds:0xc002a124
c00088d2:	48                   	dec    eax
c00088d3:	a3 24 a1 02 c0       	mov    ds:0xc002a124,eax
c00088d8:	75 18                	jne    c00088f2 <unlockStuff()+0x28>
c00088da:	83 3d 20 a1 02 c0 00 	cmp    DWORD PTR ds:0xc002a120,0x0
c00088e1:	74 0f                	je     c00088f2 <unlockStuff()+0x28>
c00088e3:	c7 05 20 a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a120,0x0
c00088ed:	e8 62 06 01 00       	call   c0018f54 <schedule()>
c00088f2:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c00088f7:	48                   	dec    eax
c00088f8:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c00088fd:	75 01                	jne    c0008900 <unlockStuff()+0x36>
c00088ff:	fb                   	sti    
c0008900:	83 c4 0c             	add    esp,0xc
c0008903:	c3                   	ret    

c0008904 <Virt::getAKernelVAS()>:
c0008904:	a1 34 8d 02 c0       	mov    eax,ds:0xc0028d34
c0008909:	c3                   	ret    

c000890a <__not_memcpy>:
c000890a:	57                   	push   edi
c000890b:	56                   	push   esi
c000890c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008910:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008914:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008918:	89 c7                	mov    edi,eax
c000891a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000891c:	5e                   	pop    esi
c000891d:	5f                   	pop    edi
c000891e:	c3                   	ret    
c000891f:	90                   	nop

c0008920 <Krnl::resolveCompatibilitySymbol(char*)>:
c0008920:	83 ec 0c             	sub    esp,0xc
c0008923:	83 ec 08             	sub    esp,0x8
c0008926:	68 40 45 02 c0       	push   0xc0024540
c000892b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000892f:	e8 a8 7e ff ff       	call   c00007dc <strcmp>
c0008934:	83 c4 10             	add    esp,0x10
c0008937:	85 c0                	test   eax,eax
c0008939:	0f 94 c0             	sete   al
c000893c:	84 c0                	test   al,al
c000893e:	74 0c                	je     c000894c <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0008940:	b8 08 8c 02 c0       	mov    eax,0xc0028c08
c0008945:	e9 ea 00 00 00       	jmp    c0008a34 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000894a:	66 90                	xchg   ax,ax
c000894c:	83 ec 08             	sub    esp,0x8
c000894f:	68 49 45 02 c0       	push   0xc0024549
c0008954:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008958:	e8 7f 7e ff ff       	call   c00007dc <strcmp>
c000895d:	83 c4 10             	add    esp,0x10
c0008960:	85 c0                	test   eax,eax
c0008962:	0f 94 c0             	sete   al
c0008965:	84 c0                	test   al,al
c0008967:	74 0b                	je     c0008974 <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0008969:	b8 e0 2f 02 c0       	mov    eax,0xc0022fe0
c000896e:	e9 c1 00 00 00       	jmp    c0008a34 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008973:	90                   	nop
c0008974:	83 ec 08             	sub    esp,0x8
c0008977:	68 53 45 02 c0       	push   0xc0024553
c000897c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008980:	e8 57 7e ff ff       	call   c00007dc <strcmp>
c0008985:	83 c4 10             	add    esp,0x10
c0008988:	85 c0                	test   eax,eax
c000898a:	0f 94 c0             	sete   al
c000898d:	84 c0                	test   al,al
c000898f:	74 0b                	je     c000899c <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0008991:	b8 14 2d 02 c0       	mov    eax,0xc0022d14
c0008996:	e9 99 00 00 00       	jmp    c0008a34 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000899b:	90                   	nop
c000899c:	83 ec 08             	sub    esp,0x8
c000899f:	68 5c 45 02 c0       	push   0xc002455c
c00089a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089a8:	e8 2f 7e ff ff       	call   c00007dc <strcmp>
c00089ad:	83 c4 10             	add    esp,0x10
c00089b0:	85 c0                	test   eax,eax
c00089b2:	0f 94 c0             	sete   al
c00089b5:	84 c0                	test   al,al
c00089b7:	74 07                	je     c00089c0 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c00089b9:	b8 e0 30 02 c0       	mov    eax,0xc00230e0
c00089be:	eb 74                	jmp    c0008a34 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089c0:	83 ec 08             	sub    esp,0x8
c00089c3:	68 66 45 02 c0       	push   0xc0024566
c00089c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089cc:	e8 0b 7e ff ff       	call   c00007dc <strcmp>
c00089d1:	83 c4 10             	add    esp,0x10
c00089d4:	85 c0                	test   eax,eax
c00089d6:	0f 94 c0             	sete   al
c00089d9:	84 c0                	test   al,al
c00089db:	74 07                	je     c00089e4 <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c00089dd:	b8 60 2e 02 c0       	mov    eax,0xc0022e60
c00089e2:	eb 50                	jmp    c0008a34 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089e4:	83 ec 08             	sub    esp,0x8
c00089e7:	68 6f 45 02 c0       	push   0xc002456f
c00089ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089f0:	e8 e7 7d ff ff       	call   c00007dc <strcmp>
c00089f5:	83 c4 10             	add    esp,0x10
c00089f8:	85 c0                	test   eax,eax
c00089fa:	0f 94 c0             	sete   al
c00089fd:	84 c0                	test   al,al
c00089ff:	74 07                	je     c0008a08 <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c0008a01:	b8 0c 8c 02 c0       	mov    eax,0xc0028c0c
c0008a06:	eb 2c                	jmp    c0008a34 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008a08:	83 ec 08             	sub    esp,0x8
c0008a0b:	68 7c 45 02 c0       	push   0xc002457c
c0008a10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a14:	e8 c3 7d ff ff       	call   c00007dc <strcmp>
c0008a19:	83 c4 10             	add    esp,0x10
c0008a1c:	85 c0                	test   eax,eax
c0008a1e:	0f 94 c0             	sete   al
c0008a21:	84 c0                	test   al,al
c0008a23:	74 07                	je     c0008a2c <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0008a25:	b8 0d 8c 02 c0       	mov    eax,0xc0028c0d
c0008a2a:	eb 08                	jmp    c0008a34 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008a2c:	b8 00 00 00 00       	mov    eax,0x0
c0008a31:	8d 76 00             	lea    esi,[esi+0x0]
c0008a34:	83 c4 0c             	add    esp,0xc
c0008a37:	c3                   	ret    

c0008a38 <Computer::close(int, int, void*)>:
c0008a38:	57                   	push   edi
c0008a39:	56                   	push   esi
c0008a3a:	53                   	push   ebx
c0008a3b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a3f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a43:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a47:	83 ec 0c             	sub    esp,0xc
c0008a4a:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c0008a50:	e8 bf 5d 00 00       	call   c000e814 <Device::closeAll()>
c0008a55:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c0008a5b:	83 c4 10             	add    esp,0x10
c0008a5e:	8b 10                	mov    edx,DWORD PTR [eax]
c0008a60:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0008a64:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0008a6c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008a70:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008a74:	5b                   	pop    ebx
c0008a75:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0008a78:	5e                   	pop    esi
c0008a79:	5f                   	pop    edi
c0008a7a:	ff e0                	jmp    eax

c0008a7c <Krnl::firstTask()>:
c0008a7c:	53                   	push   ebx
c0008a7d:	83 ec 14             	sub    esp,0x14
c0008a80:	68 89 45 02 c0       	push   0xc0024589
c0008a85:	e8 b7 13 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0008a8a:	fb                   	sti    
c0008a8b:	c7 04 24 a0 45 02 c0 	mov    DWORD PTR [esp],0xc00245a0
c0008a92:	e8 aa 13 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0008a97:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0008a9e:	e8 44 13 00 00       	call   c0009de7 <malloc>
c0008aa3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008aaa:	89 c3                	mov    ebx,eax
c0008aac:	ff 35 50 a1 02 c0    	push   DWORD PTR ds:0xc002a150
c0008ab2:	68 b9 45 02 c0       	push   0xc00245b9
c0008ab7:	6a 01                	push   0x1
c0008ab9:	50                   	push   eax
c0008aba:	e8 71 00 01 00       	call   c0018b30 <Process::Process(bool, char const*, Process*, char**)>
c0008abf:	83 c4 20             	add    esp,0x20
c0008ac2:	68 ff 00 00 00       	push   0xff
c0008ac7:	6a 00                	push   0x0
c0008ac9:	68 df 97 00 c0       	push   0xc00097df
c0008ace:	53                   	push   ebx
c0008acf:	e8 64 02 01 00       	call   c0018d38 <Process::createThread(void (*)(void*), void*, int)>
c0008ad4:	6a 7a                	push   0x7a
c0008ad6:	6a 00                	push   0x0
c0008ad8:	68 7c 97 01 c0       	push   0xc001977c
c0008add:	ff 35 50 a1 02 c0    	push   DWORD PTR ds:0xc002a150
c0008ae3:	e8 50 02 01 00       	call   c0018d38 <Process::createThread(void (*)(void*), void*, int)>
c0008ae8:	83 c4 14             	add    esp,0x14
c0008aeb:	a3 08 a1 02 c0       	mov    ds:0xc002a108,eax
c0008af0:	68 ac 48 02 c0       	push   0xc00248ac
c0008af5:	c6 05 0d 8c 02 c0 01 	mov    BYTE PTR ds:0xc0028c0d,0x1
c0008afc:	e8 40 13 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0008b01:	e8 51 10 01 00       	call   c0019b57 <Vm::initialise8086()>
c0008b06:	e8 a3 49 00 00       	call   c000d4ae <Fs::initVFS()>
c0008b0b:	c7 04 24 c6 45 02 c0 	mov    DWORD PTR [esp],0xc00245c6
c0008b12:	e8 2a 13 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0008b17:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c0008b1c:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008b22:	8b 10                	mov    edx,DWORD PTR [eax]
c0008b24:	6a 00                	push   0x0
c0008b26:	6a 00                	push   0x0
c0008b28:	6a 00                	push   0x0
c0008b2a:	50                   	push   eax
c0008b2b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0008b2e:	83 c4 14             	add    esp,0x14
c0008b31:	68 ac 48 02 c0       	push   0xc00248ac
c0008b36:	e8 06 13 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0008b3b:	e8 5e e8 00 00       	call   c001739e <Sys::loadSyscalls()>
c0008b40:	e8 ab c5 00 00       	call   c00150f0 <Krnl::loadSystemEnv()>
c0008b45:	e8 12 ca 00 00       	call   c001555c <Krnl::setupPowerManager()>
c0008b4a:	83 c4 0c             	add    esp,0xc
c0008b4d:	6a 3a                	push   0x3a
c0008b4f:	68 e0 45 02 c0       	push   0xc00245e0
c0008b54:	68 e9 45 02 c0       	push   0xc00245e9
c0008b59:	e8 03 d6 00 00       	call   c0016161 <Reg::readIntWithDefault(char*, char*, int)>
c0008b5e:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b61:	e8 66 55 00 00       	call   c000e0cc <User::loadClockSettings(int)>
c0008b66:	c7 04 24 d0 48 02 c0 	mov    DWORD PTR [esp],0xc00248d0
c0008b6d:	e8 cf 12 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0008b72:	58                   	pop    eax
c0008b73:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c0008b78:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c0008b7e:	e8 51 5c 00 00       	call   c000e7d4 <Device::loadDriversForAll()>
c0008b83:	c7 04 24 f1 45 02 c0 	mov    DWORD PTR [esp],0xc00245f1
c0008b8a:	e8 b2 12 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0008b8f:	e8 c4 c0 00 00       	call   c0014c58 <Krnl::startCPUs()>
c0008b94:	c7 04 24 0b 46 02 c0 	mov    DWORD PTR [esp],0xc002460b
c0008b9b:	e8 a1 12 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0008ba0:	5a                   	pop    edx
c0008ba1:	8b 1d 08 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028c08
c0008ba7:	59                   	pop    ecx
c0008ba8:	6a 01                	push   0x1
c0008baa:	68 1c 46 02 c0       	push   0xc002461c
c0008baf:	e8 ba f9 00 00       	call   c001856e <Thr::loadDLL(char const*, bool)>
c0008bb4:	5a                   	pop    edx
c0008bb5:	59                   	pop    ecx
c0008bb6:	53                   	push   ebx
c0008bb7:	50                   	push   eax
c0008bb8:	e8 e2 fb 00 00       	call   c001879f <Thr::executeDLL(unsigned long, void*)>
c0008bbd:	83 c4 10             	add    esp,0x10
c0008bc0:	83 ec 0c             	sub    esp,0xc
c0008bc3:	6a 02                	push   0x2
c0008bc5:	e8 82 05 01 00       	call   c001914c <blockTask(TaskState)>
c0008bca:	83 c4 10             	add    esp,0x10
c0008bcd:	eb f1                	jmp    c0008bc0 <Krnl::firstTask()+0x144>
c0008bcf:	90                   	nop

c0008bd0 <Computer::Computer()>:
c0008bd0:	83 ec 0c             	sub    esp,0xc
c0008bd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bd7:	83 ec 08             	sub    esp,0x8
c0008bda:	68 38 46 02 c0       	push   0xc0024638
c0008bdf:	50                   	push   eax
c0008be0:	e8 a9 5c 00 00       	call   c000e88e <Device::Device(char const*)>
c0008be5:	83 c4 10             	add    esp,0x10
c0008be8:	ba 80 49 02 c0       	mov    edx,0xc0024980
c0008bed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bf1:	89 10                	mov    DWORD PTR [eax],edx
c0008bf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bf7:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008c01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c05:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0008c0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c13:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0008c19:	83 ca 04             	or     edx,0x4
c0008c1c:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0008c22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c26:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c2c:	0f b6 d0             	movzx  edx,al
c0008c2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c33:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0008c3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c3e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c44:	0f b6 d0             	movzx  edx,al
c0008c47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c4b:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0008c50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c54:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c5a:	8d 50 01             	lea    edx,[eax+0x1]
c0008c5d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008c61:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008c67:	0f b6 d0             	movzx  edx,al
c0008c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c6e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008c72:	83 e1 3f             	and    ecx,0x3f
c0008c75:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008c79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c7d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c83:	0f b6 d0             	movzx  edx,al
c0008c86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8a:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c0008c91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c95:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c9b:	0f b6 d0             	movzx  edx,al
c0008c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca2:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008ca7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cab:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cb1:	8d 50 01             	lea    edx,[eax+0x1]
c0008cb4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008cb8:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008cbe:	0f b6 d0             	movzx  edx,al
c0008cc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008cc9:	83 e1 3f             	and    ecx,0x3f
c0008ccc:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cda:	0f b6 d0             	movzx  edx,al
c0008cdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce1:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c0008ce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cec:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cf2:	0f b6 d0             	movzx  edx,al
c0008cf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf9:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008cfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d02:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008d08:	8d 50 01             	lea    edx,[eax+0x1]
c0008d0b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008d0f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008d15:	0f b6 d0             	movzx  edx,al
c0008d18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d1c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008d20:	83 e1 3f             	and    ecx,0x3f
c0008d23:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008d27:	90                   	nop
c0008d28:	83 c4 0c             	add    esp,0xc
c0008d2b:	c3                   	ret    

c0008d2c <Computer::setBootMessage(char const*)>:
c0008d2c:	c3                   	ret    
c0008d2d:	90                   	nop

c0008d2e <Computer::detectFeatures()>:
c0008d2e:	55                   	push   ebp
c0008d2f:	57                   	push   edi
c0008d30:	56                   	push   esi
c0008d31:	53                   	push   ebx
c0008d32:	83 ec 1c             	sub    esp,0x1c
c0008d35:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008d39:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c0008d43:	e8 e1 74 ff ff       	call   c0000229 <detectCPUID>
c0008d48:	85 c0                	test   eax,eax
c0008d4a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d50:	0f 95 c2             	setne  dl
c0008d53:	83 e0 fd             	and    eax,0xfffffffd
c0008d56:	d1 e2                	shl    edx,1
c0008d58:	09 d0                	or     eax,edx
c0008d5a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d60:	a8 02                	test   al,0x2
c0008d62:	75 46                	jne    c0008daa <Computer::detectFeatures()+0x7c>
c0008d64:	f6 05 21 8c 02 c0 04 	test   BYTE PTR ds:0xc0028c21,0x4
c0008d6b:	74 07                	je     c0008d74 <Computer::detectFeatures()+0x46>
c0008d6d:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c0008d74:	e8 2d 9f 01 00       	call   c0022ca6 <x87Detect>
c0008d79:	83 e0 01             	and    eax,0x1
c0008d7c:	c1 e0 04             	shl    eax,0x4
c0008d7f:	88 c2                	mov    dl,al
c0008d81:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d87:	83 e0 ef             	and    eax,0xffffffef
c0008d8a:	09 d0                	or     eax,edx
c0008d8c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d92:	a8 10                	test   al,0x10
c0008d94:	0f 85 2a 01 00 00    	jne    c0008ec4 <Computer::detectFeatures()+0x196>
c0008d9a:	84 c0                	test   al,al
c0008d9c:	0f 88 45 01 00 00    	js     c0008ee7 <Computer::detectFeatures()+0x1b9>
c0008da2:	83 c4 1c             	add    esp,0x1c
c0008da5:	5b                   	pop    ebx
c0008da6:	5e                   	pop    esi
c0008da7:	5f                   	pop    edi
c0008da8:	5d                   	pop    ebp
c0008da9:	c3                   	ret    
c0008daa:	83 ec 0c             	sub    esp,0xc
c0008dad:	6a 20                	push   0x20
c0008daf:	e8 6a aa 00 00       	call   c001381e <CPU::cpuidCheckEDX(unsigned int)>
c0008db4:	83 e0 01             	and    eax,0x1
c0008db7:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0008dbe:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008dc4:	83 e0 f7             	and    eax,0xfffffff7
c0008dc7:	09 d0                	or     eax,edx
c0008dc9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008dcf:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0008dd6:	e8 43 aa 00 00       	call   c001381e <CPU::cpuidCheckEDX(unsigned int)>
c0008ddb:	83 e0 01             	and    eax,0x1
c0008dde:	88 c2                	mov    dl,al
c0008de0:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008de6:	83 e0 fe             	and    eax,0xfffffffe
c0008de9:	09 d0                	or     eax,edx
c0008deb:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008df1:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0008df8:	e8 21 aa 00 00       	call   c001381e <CPU::cpuidCheckEDX(unsigned int)>
c0008dfd:	c1 e0 07             	shl    eax,0x7
c0008e00:	88 c2                	mov    dl,al
c0008e02:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008e08:	83 e0 7f             	and    eax,0x7f
c0008e0b:	09 d0                	or     eax,edx
c0008e0d:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008e13:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0008e1a:	e8 ff a9 00 00       	call   c001381e <CPU::cpuidCheckEDX(unsigned int)>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	83 e0 01             	and    eax,0x1
c0008e25:	c1 e0 05             	shl    eax,0x5
c0008e28:	88 c2                	mov    dl,al
c0008e2a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e30:	83 e0 df             	and    eax,0xffffffdf
c0008e33:	09 d0                	or     eax,edx
c0008e35:	f7 05 20 8c 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0028c20,0x401
c0008e3f:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e45:	0f 84 c2 00 00 00    	je     c0008f0d <Computer::detectFeatures()+0x1df>
c0008e4b:	83 e0 fe             	and    eax,0xfffffffe
c0008e4e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e54:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e5a:	88 c2                	mov    dl,al
c0008e5c:	83 e2 09             	and    edx,0x9
c0008e5f:	fe ca                	dec    dl
c0008e61:	75 09                	jne    c0008e6c <Computer::detectFeatures()+0x13e>
c0008e63:	83 e0 fe             	and    eax,0xfffffffe
c0008e66:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e6c:	83 ec 0c             	sub    esp,0xc
c0008e6f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008e73:	50                   	push   eax
c0008e74:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0008e78:	55                   	push   ebp
c0008e79:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0008e7d:	57                   	push   edi
c0008e7e:	8d 74 24 18          	lea    esi,[esp+0x18]
c0008e82:	56                   	push   esi
c0008e83:	68 00 00 00 80       	push   0x80000000
c0008e88:	e8 0d a9 00 00       	call   c001379a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e8d:	83 c4 20             	add    esp,0x20
c0008e90:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0008e97:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0008e9b:	0f 86 c3 fe ff ff    	jbe    c0008d64 <Computer::detectFeatures()+0x36>
c0008ea1:	83 ec 0c             	sub    esp,0xc
c0008ea4:	50                   	push   eax
c0008ea5:	55                   	push   ebp
c0008ea6:	57                   	push   edi
c0008ea7:	56                   	push   esi
c0008ea8:	68 01 00 00 80       	push   0x80000001
c0008ead:	e8 e8 a8 00 00       	call   c001379a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008eb2:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c0008ebc:	83 c4 20             	add    esp,0x20
c0008ebf:	e9 a0 fe ff ff       	jmp    c0008d64 <Computer::detectFeatures()+0x36>
c0008ec4:	e8 97 9d 01 00       	call   c0022c60 <absolutelyNoChanceInHell>
c0008ec9:	88 c2                	mov    dl,al
c0008ecb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008ed1:	c1 e2 07             	shl    edx,0x7
c0008ed4:	83 e0 7f             	and    eax,0x7f
c0008ed7:	09 d0                	or     eax,edx
c0008ed9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008edf:	84 c0                	test   al,al
c0008ee1:	0f 89 bb fe ff ff    	jns    c0008da2 <Computer::detectFeatures()+0x74>
c0008ee7:	e8 e4 9c 01 00       	call   c0022bd0 <avxDetect>
c0008eec:	83 e0 01             	and    eax,0x1
c0008eef:	c1 e0 05             	shl    eax,0x5
c0008ef2:	88 c2                	mov    dl,al
c0008ef4:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008efa:	83 e0 df             	and    eax,0xffffffdf
c0008efd:	09 d0                	or     eax,edx
c0008eff:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008f05:	83 c4 1c             	add    esp,0x1c
c0008f08:	5b                   	pop    ebx
c0008f09:	5e                   	pop    esi
c0008f0a:	5f                   	pop    edi
c0008f0b:	5d                   	pop    ebp
c0008f0c:	c3                   	ret    
c0008f0d:	83 ec 0c             	sub    esp,0xc
c0008f10:	68 00 02 00 00       	push   0x200
c0008f15:	e8 04 a9 00 00       	call   c001381e <CPU::cpuidCheckEDX(unsigned int)>
c0008f1a:	83 c4 10             	add    esp,0x10
c0008f1d:	83 e0 01             	and    eax,0x1
c0008f20:	88 c2                	mov    dl,al
c0008f22:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008f28:	83 e0 fe             	and    eax,0xfffffffe
c0008f2b:	09 d0                	or     eax,edx
c0008f2d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008f33:	e9 1c ff ff ff       	jmp    c0008e54 <Computer::detectFeatures()+0x126>

c0008f38 <Computer::displayFeatures()>:
c0008f38:	53                   	push   ebx
c0008f39:	83 ec 14             	sub    esp,0x14
c0008f3c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008f40:	68 48 46 02 c0       	push   0xc0024648
c0008f45:	e8 cd 41 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0008f4a:	83 c4 10             	add    esp,0x10
c0008f4d:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c0008f54:	0f 85 73 02 00 00    	jne    c00091cd <Computer::displayFeatures()+0x295>
c0008f5a:	b8 45 46 02 c0       	mov    eax,0xc0024645
c0008f5f:	83 ec 08             	sub    esp,0x8
c0008f62:	50                   	push   eax
c0008f63:	68 5b 46 02 c0       	push   0xc002465b
c0008f68:	e8 aa 41 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0008f6d:	83 c4 10             	add    esp,0x10
c0008f70:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c0008f77:	0f 85 8c 02 00 00    	jne    c0009209 <Computer::displayFeatures()+0x2d1>
c0008f7d:	b8 45 46 02 c0       	mov    eax,0xc0024645
c0008f82:	83 ec 08             	sub    esp,0x8
c0008f85:	50                   	push   eax
c0008f86:	68 6c 46 02 c0       	push   0xc002466c
c0008f8b:	e8 87 41 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0008f90:	83 c4 10             	add    esp,0x10
c0008f93:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c0008f9a:	0f 85 5f 02 00 00    	jne    c00091ff <Computer::displayFeatures()+0x2c7>
c0008fa0:	b8 45 46 02 c0       	mov    eax,0xc0024645
c0008fa5:	83 ec 08             	sub    esp,0x8
c0008fa8:	50                   	push   eax
c0008fa9:	68 7d 46 02 c0       	push   0xc002467d
c0008fae:	e8 64 41 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0008fb3:	83 c4 10             	add    esp,0x10
c0008fb6:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c0008fbd:	0f 85 32 02 00 00    	jne    c00091f5 <Computer::displayFeatures()+0x2bd>
c0008fc3:	b8 45 46 02 c0       	mov    eax,0xc0024645
c0008fc8:	83 ec 08             	sub    esp,0x8
c0008fcb:	50                   	push   eax
c0008fcc:	68 8e 46 02 c0       	push   0xc002468e
c0008fd1:	e8 41 41 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0008fd6:	83 c4 10             	add    esp,0x10
c0008fd9:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c0008fe0:	0f 85 05 02 00 00    	jne    c00091eb <Computer::displayFeatures()+0x2b3>
c0008fe6:	b8 45 46 02 c0       	mov    eax,0xc0024645
c0008feb:	83 ec 08             	sub    esp,0x8
c0008fee:	50                   	push   eax
c0008fef:	68 9f 46 02 c0       	push   0xc002469f
c0008ff4:	e8 1e 41 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0008ff9:	83 c4 10             	add    esp,0x10
c0008ffc:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c0009003:	0f 85 d8 01 00 00    	jne    c00091e1 <Computer::displayFeatures()+0x2a9>
c0009009:	b8 45 46 02 c0       	mov    eax,0xc0024645
c000900e:	83 ec 08             	sub    esp,0x8
c0009011:	50                   	push   eax
c0009012:	68 b0 46 02 c0       	push   0xc00246b0
c0009017:	e8 fb 40 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000901c:	83 c4 10             	add    esp,0x10
c000901f:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c0009026:	0f 85 ab 01 00 00    	jne    c00091d7 <Computer::displayFeatures()+0x29f>
c000902c:	b8 45 46 02 c0       	mov    eax,0xc0024645
c0009031:	83 ec 08             	sub    esp,0x8
c0009034:	50                   	push   eax
c0009035:	68 c1 46 02 c0       	push   0xc00246c1
c000903a:	e8 d8 40 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000903f:	83 c4 10             	add    esp,0x10
c0009042:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c0009049:	0f 88 1b 02 00 00    	js     c000926a <Computer::displayFeatures()+0x332>
c000904f:	b8 45 46 02 c0       	mov    eax,0xc0024645
c0009054:	83 ec 08             	sub    esp,0x8
c0009057:	50                   	push   eax
c0009058:	68 d2 46 02 c0       	push   0xc00246d2
c000905d:	e8 b5 40 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0009062:	83 c4 10             	add    esp,0x10
c0009065:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000906c:	0f 85 a1 01 00 00    	jne    c0009213 <Computer::displayFeatures()+0x2db>
c0009072:	b8 45 46 02 c0       	mov    eax,0xc0024645
c0009077:	83 ec 08             	sub    esp,0x8
c000907a:	50                   	push   eax
c000907b:	68 e3 46 02 c0       	push   0xc00246e3
c0009080:	e8 92 40 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0009085:	83 c4 10             	add    esp,0x10
c0009088:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000908f:	0f 85 cb 01 00 00    	jne    c0009260 <Computer::displayFeatures()+0x328>
c0009095:	b8 45 46 02 c0       	mov    eax,0xc0024645
c000909a:	83 ec 08             	sub    esp,0x8
c000909d:	50                   	push   eax
c000909e:	68 f4 46 02 c0       	push   0xc00246f4
c00090a3:	e8 6f 40 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c00090a8:	83 c4 10             	add    esp,0x10
c00090ab:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c00090b2:	0f 85 9e 01 00 00    	jne    c0009256 <Computer::displayFeatures()+0x31e>
c00090b8:	b8 45 46 02 c0       	mov    eax,0xc0024645
c00090bd:	83 ec 08             	sub    esp,0x8
c00090c0:	50                   	push   eax
c00090c1:	68 05 47 02 c0       	push   0xc0024705
c00090c6:	e8 4c 40 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c00090cb:	83 c4 10             	add    esp,0x10
c00090ce:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c00090d5:	0f 85 71 01 00 00    	jne    c000924c <Computer::displayFeatures()+0x314>
c00090db:	b8 45 46 02 c0       	mov    eax,0xc0024645
c00090e0:	83 ec 08             	sub    esp,0x8
c00090e3:	50                   	push   eax
c00090e4:	68 16 47 02 c0       	push   0xc0024716
c00090e9:	e8 29 40 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c00090ee:	83 c4 10             	add    esp,0x10
c00090f1:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c00090f8:	0f 85 44 01 00 00    	jne    c0009242 <Computer::displayFeatures()+0x30a>
c00090fe:	b8 45 46 02 c0       	mov    eax,0xc0024645
c0009103:	83 ec 08             	sub    esp,0x8
c0009106:	50                   	push   eax
c0009107:	68 27 47 02 c0       	push   0xc0024727
c000910c:	e8 06 40 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0009111:	83 c4 10             	add    esp,0x10
c0009114:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000911b:	0f 85 17 01 00 00    	jne    c0009238 <Computer::displayFeatures()+0x300>
c0009121:	b8 45 46 02 c0       	mov    eax,0xc0024645
c0009126:	83 ec 08             	sub    esp,0x8
c0009129:	50                   	push   eax
c000912a:	68 38 47 02 c0       	push   0xc0024738
c000912f:	e8 e3 3f 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0009134:	83 c4 10             	add    esp,0x10
c0009137:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000913e:	0f 85 ea 00 00 00    	jne    c000922e <Computer::displayFeatures()+0x2f6>
c0009144:	b8 45 46 02 c0       	mov    eax,0xc0024645
c0009149:	83 ec 08             	sub    esp,0x8
c000914c:	50                   	push   eax
c000914d:	68 49 47 02 c0       	push   0xc0024749
c0009152:	e8 c0 3f 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0009157:	83 c4 10             	add    esp,0x10
c000915a:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c0009161:	0f 88 0d 01 00 00    	js     c0009274 <Computer::displayFeatures()+0x33c>
c0009167:	b8 45 46 02 c0       	mov    eax,0xc0024645
c000916c:	83 ec 08             	sub    esp,0x8
c000916f:	50                   	push   eax
c0009170:	68 5a 47 02 c0       	push   0xc002475a
c0009175:	e8 9d 3f 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000917a:	83 c4 10             	add    esp,0x10
c000917d:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c0009184:	0f 85 9a 00 00 00    	jne    c0009224 <Computer::displayFeatures()+0x2ec>
c000918a:	b8 45 46 02 c0       	mov    eax,0xc0024645
c000918f:	83 ec 08             	sub    esp,0x8
c0009192:	50                   	push   eax
c0009193:	68 6b 47 02 c0       	push   0xc002476b
c0009198:	e8 7a 3f 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000919d:	83 c4 10             	add    esp,0x10
c00091a0:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c00091a7:	75 74                	jne    c000921d <Computer::displayFeatures()+0x2e5>
c00091a9:	b8 45 46 02 c0       	mov    eax,0xc0024645
c00091ae:	83 ec 08             	sub    esp,0x8
c00091b1:	50                   	push   eax
c00091b2:	68 7c 47 02 c0       	push   0xc002477c
c00091b7:	e8 5b 3f 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c00091bc:	c7 44 24 20 7b 67 02 c0 	mov    DWORD PTR [esp+0x20],0xc002677b
c00091c4:	83 c4 18             	add    esp,0x18
c00091c7:	5b                   	pop    ebx
c00091c8:	e9 4a 3f 00 00       	jmp    c000d117 <Dbg::kprintf(char const*, ...)>
c00091cd:	b8 41 46 02 c0       	mov    eax,0xc0024641
c00091d2:	e9 88 fd ff ff       	jmp    c0008f5f <Computer::displayFeatures()+0x27>
c00091d7:	b8 41 46 02 c0       	mov    eax,0xc0024641
c00091dc:	e9 50 fe ff ff       	jmp    c0009031 <Computer::displayFeatures()+0xf9>
c00091e1:	b8 41 46 02 c0       	mov    eax,0xc0024641
c00091e6:	e9 23 fe ff ff       	jmp    c000900e <Computer::displayFeatures()+0xd6>
c00091eb:	b8 41 46 02 c0       	mov    eax,0xc0024641
c00091f0:	e9 f6 fd ff ff       	jmp    c0008feb <Computer::displayFeatures()+0xb3>
c00091f5:	b8 41 46 02 c0       	mov    eax,0xc0024641
c00091fa:	e9 c9 fd ff ff       	jmp    c0008fc8 <Computer::displayFeatures()+0x90>
c00091ff:	b8 41 46 02 c0       	mov    eax,0xc0024641
c0009204:	e9 9c fd ff ff       	jmp    c0008fa5 <Computer::displayFeatures()+0x6d>
c0009209:	b8 41 46 02 c0       	mov    eax,0xc0024641
c000920e:	e9 6f fd ff ff       	jmp    c0008f82 <Computer::displayFeatures()+0x4a>
c0009213:	b8 41 46 02 c0       	mov    eax,0xc0024641
c0009218:	e9 5a fe ff ff       	jmp    c0009077 <Computer::displayFeatures()+0x13f>
c000921d:	b8 41 46 02 c0       	mov    eax,0xc0024641
c0009222:	eb 8a                	jmp    c00091ae <Computer::displayFeatures()+0x276>
c0009224:	b8 41 46 02 c0       	mov    eax,0xc0024641
c0009229:	e9 61 ff ff ff       	jmp    c000918f <Computer::displayFeatures()+0x257>
c000922e:	b8 41 46 02 c0       	mov    eax,0xc0024641
c0009233:	e9 11 ff ff ff       	jmp    c0009149 <Computer::displayFeatures()+0x211>
c0009238:	b8 41 46 02 c0       	mov    eax,0xc0024641
c000923d:	e9 e4 fe ff ff       	jmp    c0009126 <Computer::displayFeatures()+0x1ee>
c0009242:	b8 41 46 02 c0       	mov    eax,0xc0024641
c0009247:	e9 b7 fe ff ff       	jmp    c0009103 <Computer::displayFeatures()+0x1cb>
c000924c:	b8 41 46 02 c0       	mov    eax,0xc0024641
c0009251:	e9 8a fe ff ff       	jmp    c00090e0 <Computer::displayFeatures()+0x1a8>
c0009256:	b8 41 46 02 c0       	mov    eax,0xc0024641
c000925b:	e9 5d fe ff ff       	jmp    c00090bd <Computer::displayFeatures()+0x185>
c0009260:	b8 41 46 02 c0       	mov    eax,0xc0024641
c0009265:	e9 30 fe ff ff       	jmp    c000909a <Computer::displayFeatures()+0x162>
c000926a:	b8 41 46 02 c0       	mov    eax,0xc0024641
c000926f:	e9 e0 fd ff ff       	jmp    c0009054 <Computer::displayFeatures()+0x11c>
c0009274:	b8 41 46 02 c0       	mov    eax,0xc0024641
c0009279:	e9 ee fe ff ff       	jmp    c000916c <Computer::displayFeatures()+0x234>

c000927e <Computer::rdmsr(unsigned int)>:
c000927e:	83 ec 0c             	sub    esp,0xc
c0009281:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009285:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000928c:	74 0a                	je     c0009298 <Computer::rdmsr(unsigned int)+0x1a>
c000928e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009292:	0f 32                	rdmsr  
c0009294:	83 c4 0c             	add    esp,0xc
c0009297:	c3                   	ret    
c0009298:	83 ec 0c             	sub    esp,0xc
c000929b:	68 8d 47 02 c0       	push   0xc002478d
c00092a0:	e8 54 bf 00 00       	call   c00151f9 <Krnl::panic(char const*)>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	eb e4                	jmp    c000928e <Computer::rdmsr(unsigned int)+0x10>

c00092aa <Computer::wrmsr(unsigned int, unsigned long long)>:
c00092aa:	57                   	push   edi
c00092ab:	56                   	push   esi
c00092ac:	52                   	push   edx
c00092ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00092b1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00092b5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00092b9:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00092c0:	74 0e                	je     c00092d0 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c00092c2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00092c6:	89 f0                	mov    eax,esi
c00092c8:	89 fa                	mov    edx,edi
c00092ca:	0f 30                	wrmsr  
c00092cc:	58                   	pop    eax
c00092cd:	5e                   	pop    esi
c00092ce:	5f                   	pop    edi
c00092cf:	c3                   	ret    
c00092d0:	83 ec 0c             	sub    esp,0xc
c00092d3:	68 93 47 02 c0       	push   0xc0024793
c00092d8:	e8 1c bf 00 00       	call   c00151f9 <Krnl::panic(char const*)>
c00092dd:	83 c4 10             	add    esp,0x10
c00092e0:	eb e0                	jmp    c00092c2 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c00092e2 <Computer::shutdown()>:
c00092e2:	83 ec 0c             	sub    esp,0xc
c00092e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00092e9:	8b 10                	mov    edx,DWORD PTR [eax]
c00092eb:	6a 00                	push   0x0
c00092ed:	6a 00                	push   0x0
c00092ef:	6a 00                	push   0x0
c00092f1:	50                   	push   eax
c00092f2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00092f5:	83 c4 1c             	add    esp,0x1c
c00092f8:	c3                   	ret    
c00092f9:	90                   	nop

c00092fa <Computer::restart()>:
c00092fa:	83 ec 0c             	sub    esp,0xc
c00092fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009301:	8b 10                	mov    edx,DWORD PTR [eax]
c0009303:	6a 00                	push   0x0
c0009305:	6a 00                	push   0x0
c0009307:	6a 01                	push   0x1
c0009309:	50                   	push   eax
c000930a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000930d:	83 c4 1c             	add    esp,0x1c
c0009310:	c3                   	ret    
c0009311:	90                   	nop

c0009312 <Computer::sleep()>:
c0009312:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009316:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000931c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009320:	e9 c7 9a 00 00       	jmp    c0012dec <ACPI::sleep()>
c0009325:	90                   	nop

c0009326 <Computer::nmiEnabled()>:
c0009326:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000932a:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0009330:	c3                   	ret    
c0009331:	90                   	nop

c0009332 <Computer::readCMOS(unsigned char)>:
c0009332:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009336:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000933d:	19 c0                	sbb    eax,eax
c000933f:	83 e0 80             	and    eax,0xffffff80
c0009342:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0009346:	e6 70                	out    0x70,al
c0009348:	e4 71                	in     al,0x71
c000934a:	c3                   	ret    
c000934b:	90                   	nop

c000934c <Computer::enableNMI(bool)>:
c000934c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009350:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009354:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000935a:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0009362:	eb ce                	jmp    c0009332 <Computer::readCMOS(unsigned char)>

c0009364 <Computer::open(int, int, void*)>:
c0009364:	56                   	push   esi
c0009365:	53                   	push   ebx
c0009366:	83 ec 10             	sub    esp,0x10
c0009369:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000936d:	68 f0 48 02 c0       	push   0xc00248f0
c0009372:	e8 ca 0a 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0009377:	58                   	pop    eax
c0009378:	f6 05 20 8c 02 c0 04 	test   BYTE PTR ds:0xc0028c20,0x4
c000937f:	5a                   	pop    edx
c0009380:	0f 94 05 e0 7f 02 c0 	sete   BYTE PTR ds:0xc0027fe0
c0009387:	68 58 01 00 00       	push   0x158
c000938c:	68 99 47 02 c0       	push   0xc0024799
c0009391:	e8 81 3d 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0009396:	59                   	pop    ecx
c0009397:	5e                   	pop    esi
c0009398:	68 14 01 00 00       	push   0x114
c000939d:	68 af 47 02 c0       	push   0xc00247af
c00093a2:	e8 70 3d 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c00093a7:	58                   	pop    eax
c00093a8:	5a                   	pop    edx
c00093a9:	6a 14                	push   0x14
c00093ab:	68 c3 47 02 c0       	push   0xc00247c3
c00093b0:	e8 62 3d 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c00093b5:	59                   	pop    ecx
c00093b6:	5e                   	pop    esi
c00093b7:	68 1f 07 00 00       	push   0x71f
c00093bc:	68 d6 47 02 c0       	push   0xc00247d6
c00093c1:	e8 51 3d 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c00093c6:	58                   	pop    eax
c00093c7:	5a                   	pop    edx
c00093c8:	6a 5f                	push   0x5f
c00093ca:	68 ed 47 02 c0       	push   0xc00247ed
c00093cf:	e8 43 3d 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c00093d4:	c7 04 24 03 48 02 c0 	mov    DWORD PTR [esp],0xc0024803
c00093db:	e8 37 3d 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c00093e0:	c7 04 24 15 48 02 c0 	mov    DWORD PTR [esp],0xc0024815
c00093e7:	e8 55 0a 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00093ec:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00093f3:	e8 ef 09 00 00       	call   c0009de7 <malloc>
c00093f8:	89 c6                	mov    esi,eax
c00093fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fd:	e8 a2 92 00 00       	call   c00126a4 <ACPI::ACPI()>
c0009402:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c0009408:	c7 04 24 2f 48 02 c0 	mov    DWORD PTR [esp],0xc002482f
c000940f:	e8 2d 0a 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0009414:	59                   	pop    ecx
c0009415:	5e                   	pop    esi
c0009416:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000941c:	53                   	push   ebx
c000941d:	e8 68 52 00 00       	call   c000e68a <Device::addChild(Device*)>
c0009422:	c7 04 24 14 49 02 c0 	mov    DWORD PTR [esp],0xc0024914
c0009429:	e8 13 0a 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c000942e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009431:	e8 f8 f8 ff ff       	call   c0008d2e <Computer::detectFeatures()>
c0009436:	c7 04 24 34 49 02 c0 	mov    DWORD PTR [esp],0xc0024934
c000943d:	e8 ff 09 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0009442:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009445:	e8 ee fa ff ff       	call   c0008f38 <Computer::displayFeatures()>
c000944a:	c7 04 24 49 48 02 c0 	mov    DWORD PTR [esp],0xc0024849
c0009451:	e8 eb 09 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0009456:	58                   	pop    eax
c0009457:	5a                   	pop    edx
c0009458:	6a 01                	push   0x1
c000945a:	53                   	push   ebx
c000945b:	e8 ec fe ff ff       	call   c000934c <Computer::enableNMI(bool)>
c0009460:	c7 04 24 f1 45 02 c0 	mov    DWORD PTR [esp],0xc00245f1
c0009467:	e8 d5 09 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c000946c:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c0009473:	e8 6f 09 00 00       	call   c0009de7 <malloc>
c0009478:	89 04 24             	mov    DWORD PTR [esp],eax
c000947b:	89 c6                	mov    esi,eax
c000947d:	e8 54 a4 00 00       	call   c00138d6 <CPU::CPU()>
c0009482:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0009488:	59                   	pop    ecx
c0009489:	58                   	pop    eax
c000948a:	56                   	push   esi
c000948b:	53                   	push   ebx
c000948c:	e8 f9 51 00 00       	call   c000e68a <Device::addChild(Device*)>
c0009491:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0009497:	8b 10                	mov    edx,DWORD PTR [eax]
c0009499:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000949d:	6a 00                	push   0x0
c000949f:	6a 00                	push   0x0
c00094a1:	50                   	push   eax
c00094a2:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00094a5:	83 c4 20             	add    esp,0x20
c00094a8:	e8 38 c1 00 00       	call   c00155e5 <Krnl::initRNG()>
c00094ad:	83 ec 0c             	sub    esp,0xc
c00094b0:	68 54 49 02 c0       	push   0xc0024954
c00094b5:	e8 87 09 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00094ba:	e8 67 57 00 00       	call   c000ec26 <setupFPU()>
c00094bf:	83 c4 10             	add    esp,0x10
c00094c2:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c00094c8:	85 c0                	test   eax,eax
c00094ca:	74 1f                	je     c00094eb <Computer::open(int, int, void*)+0x187>
c00094cc:	83 ec 08             	sub    esp,0x8
c00094cf:	50                   	push   eax
c00094d0:	53                   	push   ebx
c00094d1:	e8 b4 51 00 00       	call   c000e68a <Device::addChild(Device*)>
c00094d6:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c00094dc:	8b 10                	mov    edx,DWORD PTR [eax]
c00094de:	6a 00                	push   0x0
c00094e0:	6a 00                	push   0x0
c00094e2:	6a 00                	push   0x0
c00094e4:	50                   	push   eax
c00094e5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00094e8:	83 c4 20             	add    esp,0x20
c00094eb:	83 ec 0c             	sub    esp,0xc
c00094ee:	68 5a 48 02 c0       	push   0xc002485a
c00094f3:	e8 49 09 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00094f8:	c7 04 24 7c 8a 00 c0 	mov    DWORD PTR [esp],0xc0008a7c
c00094ff:	e8 48 f9 00 00       	call   c0018e4c <setupMultitasking(void (*)())>
c0009504:	83 c4 14             	add    esp,0x14
c0009507:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000950c:	5b                   	pop    ebx
c000950d:	5e                   	pop    esi
c000950e:	c3                   	ret    
c000950f:	90                   	nop

c0009510 <Computer::disableNMI()>:
c0009510:	6a 00                	push   0x0
c0009512:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0009516:	e8 31 fe ff ff       	call   c000934c <Computer::enableNMI(bool)>
c000951b:	58                   	pop    eax
c000951c:	5a                   	pop    edx
c000951d:	c3                   	ret    

c000951e <Computer::writeCMOS(unsigned char, unsigned char)>:
c000951e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009522:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0009529:	19 c0                	sbb    eax,eax
c000952b:	83 e0 80             	and    eax,0xffffff80
c000952e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0009532:	e6 70                	out    0x70,al
c0009534:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009538:	e6 71                	out    0x71,al
c000953a:	c3                   	ret    
c000953b:	90                   	nop

c000953c <Computer::handleNMI()>:
c000953c:	56                   	push   esi
c000953d:	53                   	push   ebx
c000953e:	83 ec 10             	sub    esp,0x10
c0009541:	e4 92                	in     al,0x92
c0009543:	89 c6                	mov    esi,eax
c0009545:	e4 61                	in     al,0x61
c0009547:	68 75 48 02 c0       	push   0xc0024875
c000954c:	88 c3                	mov    bl,al
c000954e:	e8 c4 3b 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0009553:	83 c4 10             	add    esp,0x10
c0009556:	83 e6 10             	and    esi,0x10
c0009559:	75 0d                	jne    c0009568 <Computer::handleNMI()+0x2c>
c000955b:	f6 c3 40             	test   bl,0x40
c000955e:	75 1d                	jne    c000957d <Computer::handleNMI()+0x41>
c0009560:	84 db                	test   bl,bl
c0009562:	78 2d                	js     c0009591 <Computer::handleNMI()+0x55>
c0009564:	58                   	pop    eax
c0009565:	5b                   	pop    ebx
c0009566:	5e                   	pop    esi
c0009567:	c3                   	ret    
c0009568:	83 ec 0c             	sub    esp,0xc
c000956b:	68 86 48 02 c0       	push   0xc0024886
c0009570:	e8 84 bc 00 00       	call   c00151f9 <Krnl::panic(char const*)>
c0009575:	83 c4 10             	add    esp,0x10
c0009578:	f6 c3 40             	test   bl,0x40
c000957b:	74 e3                	je     c0009560 <Computer::handleNMI()+0x24>
c000957d:	83 ec 0c             	sub    esp,0xc
c0009580:	68 93 48 02 c0       	push   0xc0024893
c0009585:	e8 6f bc 00 00       	call   c00151f9 <Krnl::panic(char const*)>
c000958a:	83 c4 10             	add    esp,0x10
c000958d:	84 db                	test   bl,bl
c000958f:	79 d3                	jns    c0009564 <Computer::handleNMI()+0x28>
c0009591:	c7 44 24 10 9d 48 02 c0 	mov    DWORD PTR [esp+0x10],0xc002489d
c0009599:	5a                   	pop    edx
c000959a:	5b                   	pop    ebx
c000959b:	5e                   	pop    esi
c000959c:	e9 58 bc 00 00       	jmp    c00151f9 <Krnl::panic(char const*)>
c00095a1:	90                   	nop

c00095a2 <Computer::setDiskActivityLight(int, bool)>:
c00095a2:	56                   	push   esi
c00095a3:	53                   	push   ebx
c00095a4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00095a8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00095ad:	77 1b                	ja     c00095ca <Computer::setDiskActivityLight(int, bool)+0x28>
c00095af:	e4 92                	in     al,0x92
c00095b1:	bb 40 00 00 00       	mov    ebx,0x40
c00095b6:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00095ba:	89 da                	mov    edx,ebx
c00095bc:	d3 e2                	shl    edx,cl
c00095be:	89 f1                	mov    ecx,esi
c00095c0:	f7 d2                	not    edx
c00095c2:	d3 e3                	shl    ebx,cl
c00095c4:	21 d0                	and    eax,edx
c00095c6:	09 d8                	or     eax,ebx
c00095c8:	e6 92                	out    0x92,al
c00095ca:	5b                   	pop    ebx
c00095cb:	5e                   	pop    esi
c00095cc:	c3                   	ret    
c00095cd:	90                   	nop

c00095ce <GDTEntry::setBase(unsigned int)>:
c00095ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095d2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00095d6:	89 c1                	mov    ecx,eax
c00095d8:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00095dc:	c1 e9 10             	shr    ecx,0x10
c00095df:	c1 e8 18             	shr    eax,0x18
c00095e2:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c00095e5:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c00095e8:	c3                   	ret    
c00095e9:	90                   	nop

c00095ea <GDTEntry::setLimit(unsigned int)>:
c00095ea:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00095ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095f2:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c00095f5:	66 89 01             	mov    WORD PTR [ecx],ax
c00095f8:	83 e2 f0             	and    edx,0xfffffff0
c00095fb:	c1 e8 10             	shr    eax,0x10
c00095fe:	83 e0 0f             	and    eax,0xf
c0009601:	09 d0                	or     eax,edx
c0009603:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0009606:	c3                   	ret    
c0009607:	90                   	nop

c0009608 <GDT::GDT()>:
c0009608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000960c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009612:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009616:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000961c:	90                   	nop
c000961d:	c3                   	ret    

c000961e <GDT::addEntry(GDTEntry)>:
c000961e:	53                   	push   ebx
c000961f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009623:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009627:	8b 02                	mov    eax,DWORD PTR [edx]
c0009629:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000962d:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0009631:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0009635:	8d 48 01             	lea    ecx,[eax+0x1]
c0009638:	c1 e0 03             	shl    eax,0x3
c000963b:	89 0a                	mov    DWORD PTR [edx],ecx
c000963d:	5b                   	pop    ebx
c000963e:	c3                   	ret    
c000963f:	90                   	nop

c0009640 <GDT::getNumberOfEntries()>:
c0009640:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009644:	8b 00                	mov    eax,DWORD PTR [eax]
c0009646:	c3                   	ret    
c0009647:	90                   	nop

c0009648 <GDT::flush()>:
c0009648:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000964c:	8b 10                	mov    edx,DWORD PTR [eax]
c000964e:	83 c0 04             	add    eax,0x4
c0009651:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0009658:	a3 12 8c 02 c0       	mov    ds:0xc0028c12,eax
c000965d:	66 89 15 10 8c 02 c0 	mov    WORD PTR ds:0xc0028c10,dx
c0009664:	e9 2c 6d ff ff       	jmp    c0000395 <loadGDT>
c0009669:	90                   	nop

c000966a <GDT::setup()>:
c000966a:	57                   	push   edi
c000966b:	56                   	push   esi
c000966c:	53                   	push   ebx
c000966d:	83 ec 40             	sub    esp,0x40
c0009670:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0009674:	6a 00                	push   0x0
c0009676:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000967a:	56                   	push   esi
c000967b:	e8 4e ff ff ff       	call   c00095ce <GDTEntry::setBase(unsigned int)>
c0009680:	6a 00                	push   0x0
c0009682:	56                   	push   esi
c0009683:	e8 62 ff ff ff       	call   c00095ea <GDTEntry::setLimit(unsigned int)>
c0009688:	81 64 24 3c ff 00 0f ff 	and    DWORD PTR [esp+0x3c],0xff0f00ff
c0009690:	6a 00                	push   0x0
c0009692:	8d 74 24 44          	lea    esi,[esp+0x44]
c0009696:	56                   	push   esi
c0009697:	e8 32 ff ff ff       	call   c00095ce <GDTEntry::setBase(unsigned int)>
c000969c:	68 ff ff ff 00       	push   0xffffff
c00096a1:	56                   	push   esi
c00096a2:	e8 43 ff ff ff       	call   c00095ea <GDTEntry::setLimit(unsigned int)>
c00096a7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00096ab:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00096b0:	0d 00 9a c0 00       	or     eax,0xc09a00
c00096b5:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00096b9:	83 c4 20             	add    esp,0x20
c00096bc:	6a 00                	push   0x0
c00096be:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00096c2:	56                   	push   esi
c00096c3:	e8 06 ff ff ff       	call   c00095ce <GDTEntry::setBase(unsigned int)>
c00096c8:	68 ff ff ff 00       	push   0xffffff
c00096cd:	56                   	push   esi
c00096ce:	e8 17 ff ff ff       	call   c00095ea <GDTEntry::setLimit(unsigned int)>
c00096d3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00096d7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00096db:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00096df:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00096e3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00096e7:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00096ec:	0d 00 92 c0 00       	or     eax,0xc09200
c00096f1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00096f5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00096f9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00096fd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009701:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009705:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009709:	89 fa                	mov    edx,edi
c000970b:	80 cc 60             	or     ah,0x60
c000970e:	81 e2 00 00 3f 00    	and    edx,0x3f0000
c0009714:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009718:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000971c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009720:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009724:	80 cc 60             	or     ah,0x60
c0009727:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000972b:	89 f8                	mov    eax,edi
c000972d:	25 ff ff 00 ff       	and    eax,0xff00ffff
c0009732:	09 d0                	or     eax,edx
c0009734:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0009738:	89 c7                	mov    edi,eax
c000973a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000973e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0009742:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009746:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000974a:	81 e2 00 00 3f 00    	and    edx,0x3f0000
c0009750:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009754:	25 ff ff 00 ff       	and    eax,0xff00ffff
c0009759:	09 d0                	or     eax,edx
c000975b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000975f:	83 c4 0c             	add    esp,0xc
c0009762:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009766:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000976a:	53                   	push   ebx
c000976b:	e8 ae fe ff ff       	call   c000961e <GDT::addEntry(GDTEntry)>
c0009770:	83 c4 0c             	add    esp,0xc
c0009773:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0009777:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000977b:	53                   	push   ebx
c000977c:	e8 9d fe ff ff       	call   c000961e <GDT::addEntry(GDTEntry)>
c0009781:	83 c4 0c             	add    esp,0xc
c0009784:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0009788:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000978c:	53                   	push   ebx
c000978d:	e8 8c fe ff ff       	call   c000961e <GDT::addEntry(GDTEntry)>
c0009792:	83 c4 0c             	add    esp,0xc
c0009795:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009799:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000979d:	53                   	push   ebx
c000979e:	e8 7b fe ff ff       	call   c000961e <GDT::addEntry(GDTEntry)>
c00097a3:	83 c4 0c             	add    esp,0xc
c00097a6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00097aa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00097ae:	53                   	push   ebx
c00097af:	e8 6a fe ff ff       	call   c000961e <GDT::addEntry(GDTEntry)>
c00097b4:	83 c4 0c             	add    esp,0xc
c00097b7:	57                   	push   edi
c00097b8:	56                   	push   esi
c00097b9:	53                   	push   ebx
c00097ba:	e8 5f fe ff ff       	call   c000961e <GDT::addEntry(GDTEntry)>
c00097bf:	83 c4 0c             	add    esp,0xc
c00097c2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00097c6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00097ca:	53                   	push   ebx
c00097cb:	e8 4e fe ff ff       	call   c000961e <GDT::addEntry(GDTEntry)>
c00097d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00097d3:	e8 70 fe ff ff       	call   c0009648 <GDT::flush()>
c00097d8:	83 c4 50             	add    esp,0x50
c00097db:	5b                   	pop    ebx
c00097dc:	5e                   	pop    esi
c00097dd:	5f                   	pop    edi
c00097de:	c3                   	ret    

c00097df <idleFunction(void*)>:
c00097df:	53                   	push   ebx
c00097e0:	83 ec 08             	sub    esp,0x8
c00097e3:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c00097e8:	48                   	dec    eax
c00097e9:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c00097ee:	75 01                	jne    c00097f1 <idleFunction(void*)+0x12>
c00097f0:	fb                   	sti    
c00097f1:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c00097f6:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00097fc:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c0009803:	74 3c                	je     c0009841 <idleFunction(void*)+0x62>
c0009805:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000980c:	74 33                	je     c0009841 <idleFunction(void*)+0x62>
c000980e:	31 db                	xor    ebx,ebx
c0009810:	52                   	push   edx
c0009811:	52                   	push   edx
c0009812:	68 e1 00 00 00       	push   0xe1
c0009817:	50                   	push   eax
c0009818:	e8 61 fa ff ff       	call   c000927e <Computer::rdmsr(unsigned int)>
c000981d:	53                   	push   ebx
c000981e:	83 e0 02             	and    eax,0x2
c0009821:	50                   	push   eax
c0009822:	68 e1 00 00 00       	push   0xe1
c0009827:	ff 35 08 8c 02 c0    	push   DWORD PTR ds:0xc0028c08
c000982d:	e8 78 fa ff ff       	call   c00092aa <Computer::wrmsr(unsigned int, unsigned long long)>
c0009832:	83 c4 20             	add    esp,0x20
c0009835:	e8 7a 69 ff ff       	call   c00001b4 <doTPAUSE>
c000983a:	e8 23 9a 01 00       	call   c0023262 <idleCommon()>
c000983f:	eb f4                	jmp    c0009835 <idleFunction(void*)+0x56>
c0009841:	fb                   	sti    
c0009842:	f4                   	hlt    
c0009843:	e8 1a 9a 01 00       	call   c0023262 <idleCommon()>
c0009848:	eb f7                	jmp    c0009841 <idleFunction(void*)+0x62>
c000984a:	66 90                	xchg   ax,ax

c000984c <IDTEntry::IDTEntry(bool)>:
c000984c:	83 ec 04             	sub    esp,0x4
c000984f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009853:	88 04 24             	mov    BYTE PTR [esp],al
c0009856:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000985a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0009860:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009864:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0009868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000986c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000986f:	83 e2 f0             	and    edx,0xfffffff0
c0009872:	83 ca 0e             	or     edx,0xe
c0009875:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009878:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000987c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000987f:	83 e2 ef             	and    edx,0xffffffef
c0009882:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009885:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0009889:	74 05                	je     c0009890 <IDTEntry::IDTEntry(bool)+0x44>
c000988b:	b2 03                	mov    dl,0x3
c000988d:	eb 05                	jmp    c0009894 <IDTEntry::IDTEntry(bool)+0x48>
c000988f:	90                   	nop
c0009890:	b2 00                	mov    dl,0x0
c0009892:	66 90                	xchg   ax,ax
c0009894:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009898:	83 e2 03             	and    edx,0x3
c000989b:	88 d1                	mov    cl,dl
c000989d:	c1 e1 05             	shl    ecx,0x5
c00098a0:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00098a3:	83 e2 9f             	and    edx,0xffffff9f
c00098a6:	09 ca                	or     edx,ecx
c00098a8:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00098ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098af:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00098b2:	83 ca 80             	or     edx,0xffffff80
c00098b5:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00098b8:	90                   	nop
c00098b9:	83 c4 04             	add    esp,0x4
c00098bc:	c3                   	ret    
c00098bd:	90                   	nop

c00098be <IDTEntry::setOffset(unsigned int)>:
c00098be:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00098c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098c6:	66 89 02             	mov    WORD PTR [edx],ax
c00098c9:	c1 e8 10             	shr    eax,0x10
c00098cc:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00098d0:	c3                   	ret    
c00098d1:	90                   	nop
c00098d2:	66 90                	xchg   ax,ax

c00098d4 <IDT::IDT()>:
c00098d4:	90                   	nop
c00098d5:	c3                   	ret    

c00098d6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00098d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00098da:	83 c0 30             	add    eax,0x30
c00098dd:	c3                   	ret    

c00098de <IDT::addEntry(IDTEntry, int)>:
c00098de:	53                   	push   ebx
c00098df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098e3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00098e7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00098eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00098ef:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00098f2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00098f6:	5b                   	pop    ebx
c00098f7:	c3                   	ret    

c00098f8 <IDT::addEntry(int, void (*)(), bool)>:
c00098f8:	53                   	push   ebx
c00098f9:	83 ec 10             	sub    esp,0x10
c00098fc:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0009901:	50                   	push   eax
c0009902:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0009906:	53                   	push   ebx
c0009907:	e8 40 ff ff ff       	call   c000984c <IDTEntry::IDTEntry(bool)>
c000990c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009910:	53                   	push   ebx
c0009911:	e8 a8 ff ff ff       	call   c00098be <IDTEntry::setOffset(unsigned int)>
c0009916:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000991a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000991e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009922:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009926:	e8 b3 ff ff ff       	call   c00098de <IDT::addEntry(IDTEntry, int)>
c000992b:	83 c4 30             	add    esp,0x30
c000992e:	5b                   	pop    ebx
c000992f:	c3                   	ret    

c0009930 <IDT::flush()>:
c0009930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009934:	66 c7 05 18 8c 02 c0 ff 07 	mov    WORD PTR ds:0xc0028c18,0x7ff
c000993d:	a3 1a 8c 02 c0       	mov    ds:0xc0028c1a,eax
c0009942:	0f 01 1d 18 8c 02 c0 	lidtd  ds:0xc0028c18
c0009949:	c3                   	ret    

c000994a <IDT::setup()>:
c000994a:	57                   	push   edi
c000994b:	56                   	push   esi
c000994c:	53                   	push   ebx
c000994d:	83 ec 10             	sub    esp,0x10
c0009950:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009954:	6a 00                	push   0x0
c0009956:	68 b5 03 00 c0       	push   0xc00003b5
c000995b:	6a 00                	push   0x0
c000995d:	53                   	push   ebx
c000995e:	e8 95 ff ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009963:	6a 00                	push   0x0
c0009965:	68 c5 03 00 c0       	push   0xc00003c5
c000996a:	6a 01                	push   0x1
c000996c:	53                   	push   ebx
c000996d:	e8 86 ff ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009972:	83 c4 20             	add    esp,0x20
c0009975:	6a 00                	push   0x0
c0009977:	68 cf 03 00 c0       	push   0xc00003cf
c000997c:	6a 02                	push   0x2
c000997e:	53                   	push   ebx
c000997f:	e8 74 ff ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009984:	6a 00                	push   0x0
c0009986:	68 d9 03 00 c0       	push   0xc00003d9
c000998b:	6a 03                	push   0x3
c000998d:	53                   	push   ebx
c000998e:	e8 65 ff ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009993:	83 c4 20             	add    esp,0x20
c0009996:	6a 00                	push   0x0
c0009998:	68 e3 03 00 c0       	push   0xc00003e3
c000999d:	6a 04                	push   0x4
c000999f:	53                   	push   ebx
c00099a0:	e8 53 ff ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c00099a5:	6a 00                	push   0x0
c00099a7:	68 ed 03 00 c0       	push   0xc00003ed
c00099ac:	6a 05                	push   0x5
c00099ae:	53                   	push   ebx
c00099af:	e8 44 ff ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c00099b4:	83 c4 20             	add    esp,0x20
c00099b7:	6a 00                	push   0x0
c00099b9:	68 f7 03 00 c0       	push   0xc00003f7
c00099be:	6a 06                	push   0x6
c00099c0:	53                   	push   ebx
c00099c1:	e8 32 ff ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c00099c6:	6a 00                	push   0x0
c00099c8:	68 01 04 00 c0       	push   0xc0000401
c00099cd:	6a 07                	push   0x7
c00099cf:	53                   	push   ebx
c00099d0:	e8 23 ff ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c00099d5:	83 c4 20             	add    esp,0x20
c00099d8:	6a 00                	push   0x0
c00099da:	68 0b 04 00 c0       	push   0xc000040b
c00099df:	6a 08                	push   0x8
c00099e1:	53                   	push   ebx
c00099e2:	e8 11 ff ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c00099e7:	6a 00                	push   0x0
c00099e9:	68 13 04 00 c0       	push   0xc0000413
c00099ee:	6a 09                	push   0x9
c00099f0:	53                   	push   ebx
c00099f1:	e8 02 ff ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c00099f6:	83 c4 20             	add    esp,0x20
c00099f9:	6a 00                	push   0x0
c00099fb:	68 1d 04 00 c0       	push   0xc000041d
c0009a00:	6a 0a                	push   0xa
c0009a02:	53                   	push   ebx
c0009a03:	e8 f0 fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009a08:	6a 00                	push   0x0
c0009a0a:	68 25 04 00 c0       	push   0xc0000425
c0009a0f:	6a 0b                	push   0xb
c0009a11:	53                   	push   ebx
c0009a12:	e8 e1 fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009a17:	83 c4 20             	add    esp,0x20
c0009a1a:	6a 00                	push   0x0
c0009a1c:	68 2d 04 00 c0       	push   0xc000042d
c0009a21:	6a 0c                	push   0xc
c0009a23:	53                   	push   ebx
c0009a24:	e8 cf fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009a29:	6a 00                	push   0x0
c0009a2b:	68 35 04 00 c0       	push   0xc0000435
c0009a30:	6a 0d                	push   0xd
c0009a32:	53                   	push   ebx
c0009a33:	e8 c0 fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009a38:	83 c4 20             	add    esp,0x20
c0009a3b:	6a 00                	push   0x0
c0009a3d:	68 3d 04 00 c0       	push   0xc000043d
c0009a42:	6a 0e                	push   0xe
c0009a44:	53                   	push   ebx
c0009a45:	e8 ae fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009a4a:	6a 00                	push   0x0
c0009a4c:	68 45 04 00 c0       	push   0xc0000445
c0009a51:	6a 0f                	push   0xf
c0009a53:	53                   	push   ebx
c0009a54:	e8 9f fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009a59:	83 c4 20             	add    esp,0x20
c0009a5c:	6a 00                	push   0x0
c0009a5e:	68 4f 04 00 c0       	push   0xc000044f
c0009a63:	6a 10                	push   0x10
c0009a65:	53                   	push   ebx
c0009a66:	e8 8d fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009a6b:	6a 00                	push   0x0
c0009a6d:	68 59 04 00 c0       	push   0xc0000459
c0009a72:	6a 11                	push   0x11
c0009a74:	53                   	push   ebx
c0009a75:	e8 7e fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009a7a:	83 c4 20             	add    esp,0x20
c0009a7d:	6a 00                	push   0x0
c0009a7f:	68 63 04 00 c0       	push   0xc0000463
c0009a84:	6a 12                	push   0x12
c0009a86:	53                   	push   ebx
c0009a87:	e8 6c fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009a8c:	6a 01                	push   0x1
c0009a8e:	68 fd 04 00 c0       	push   0xc00004fd
c0009a93:	6a 60                	push   0x60
c0009a95:	53                   	push   ebx
c0009a96:	e8 5d fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009a9b:	83 c4 20             	add    esp,0x20
c0009a9e:	6a 00                	push   0x0
c0009aa0:	68 04 05 00 c0       	push   0xc0000504
c0009aa5:	6a 20                	push   0x20
c0009aa7:	53                   	push   ebx
c0009aa8:	e8 4b fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009aad:	6a 00                	push   0x0
c0009aaf:	68 ef 04 00 c0       	push   0xc00004ef
c0009ab4:	6a 21                	push   0x21
c0009ab6:	53                   	push   ebx
c0009ab7:	e8 3c fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009abc:	83 c4 20             	add    esp,0x20
c0009abf:	6a 00                	push   0x0
c0009ac1:	68 f6 04 00 c0       	push   0xc00004f6
c0009ac6:	6a 22                	push   0x22
c0009ac8:	53                   	push   ebx
c0009ac9:	e8 2a fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009ace:	6a 00                	push   0x0
c0009ad0:	68 6d 04 00 c0       	push   0xc000046d
c0009ad5:	6a 23                	push   0x23
c0009ad7:	53                   	push   ebx
c0009ad8:	e8 1b fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009add:	83 c4 20             	add    esp,0x20
c0009ae0:	6a 00                	push   0x0
c0009ae2:	68 77 04 00 c0       	push   0xc0000477
c0009ae7:	6a 24                	push   0x24
c0009ae9:	53                   	push   ebx
c0009aea:	e8 09 fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009aef:	6a 00                	push   0x0
c0009af1:	68 81 04 00 c0       	push   0xc0000481
c0009af6:	6a 25                	push   0x25
c0009af8:	53                   	push   ebx
c0009af9:	e8 fa fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009afe:	83 c4 20             	add    esp,0x20
c0009b01:	6a 00                	push   0x0
c0009b03:	68 8b 04 00 c0       	push   0xc000048b
c0009b08:	6a 26                	push   0x26
c0009b0a:	53                   	push   ebx
c0009b0b:	e8 e8 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009b10:	6a 00                	push   0x0
c0009b12:	68 95 04 00 c0       	push   0xc0000495
c0009b17:	6a 27                	push   0x27
c0009b19:	53                   	push   ebx
c0009b1a:	e8 d9 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009b1f:	83 c4 20             	add    esp,0x20
c0009b22:	6a 00                	push   0x0
c0009b24:	68 9f 04 00 c0       	push   0xc000049f
c0009b29:	6a 28                	push   0x28
c0009b2b:	53                   	push   ebx
c0009b2c:	e8 c7 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009b31:	6a 00                	push   0x0
c0009b33:	68 a9 04 00 c0       	push   0xc00004a9
c0009b38:	6a 29                	push   0x29
c0009b3a:	53                   	push   ebx
c0009b3b:	e8 b8 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009b40:	83 c4 20             	add    esp,0x20
c0009b43:	6a 00                	push   0x0
c0009b45:	68 b3 04 00 c0       	push   0xc00004b3
c0009b4a:	6a 2a                	push   0x2a
c0009b4c:	53                   	push   ebx
c0009b4d:	e8 a6 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009b52:	6a 00                	push   0x0
c0009b54:	68 bd 04 00 c0       	push   0xc00004bd
c0009b59:	6a 2b                	push   0x2b
c0009b5b:	53                   	push   ebx
c0009b5c:	e8 97 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009b61:	83 c4 20             	add    esp,0x20
c0009b64:	6a 00                	push   0x0
c0009b66:	68 c7 04 00 c0       	push   0xc00004c7
c0009b6b:	6a 2c                	push   0x2c
c0009b6d:	53                   	push   ebx
c0009b6e:	e8 85 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009b73:	6a 00                	push   0x0
c0009b75:	68 d1 04 00 c0       	push   0xc00004d1
c0009b7a:	6a 2d                	push   0x2d
c0009b7c:	53                   	push   ebx
c0009b7d:	e8 76 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009b82:	83 c4 20             	add    esp,0x20
c0009b85:	6a 00                	push   0x0
c0009b87:	68 db 04 00 c0       	push   0xc00004db
c0009b8c:	6a 2e                	push   0x2e
c0009b8e:	53                   	push   ebx
c0009b8f:	e8 64 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009b94:	6a 00                	push   0x0
c0009b96:	68 e5 04 00 c0       	push   0xc00004e5
c0009b9b:	6a 2f                	push   0x2f
c0009b9d:	53                   	push   ebx
c0009b9e:	e8 55 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009ba3:	83 c4 20             	add    esp,0x20
c0009ba6:	6a 00                	push   0x0
c0009ba8:	68 3b 05 00 c0       	push   0xc000053b
c0009bad:	6a 30                	push   0x30
c0009baf:	53                   	push   ebx
c0009bb0:	e8 43 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009bb5:	6a 00                	push   0x0
c0009bb7:	68 45 05 00 c0       	push   0xc0000545
c0009bbc:	6a 31                	push   0x31
c0009bbe:	53                   	push   ebx
c0009bbf:	e8 34 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009bc4:	83 c4 20             	add    esp,0x20
c0009bc7:	6a 00                	push   0x0
c0009bc9:	68 4f 05 00 c0       	push   0xc000054f
c0009bce:	6a 32                	push   0x32
c0009bd0:	53                   	push   ebx
c0009bd1:	e8 22 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009bd6:	6a 00                	push   0x0
c0009bd8:	68 59 05 00 c0       	push   0xc0000559
c0009bdd:	6a 33                	push   0x33
c0009bdf:	53                   	push   ebx
c0009be0:	e8 13 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009be5:	83 c4 20             	add    esp,0x20
c0009be8:	6a 00                	push   0x0
c0009bea:	68 63 05 00 c0       	push   0xc0000563
c0009bef:	6a 34                	push   0x34
c0009bf1:	53                   	push   ebx
c0009bf2:	e8 01 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009bf7:	6a 00                	push   0x0
c0009bf9:	68 6d 05 00 c0       	push   0xc000056d
c0009bfe:	6a 35                	push   0x35
c0009c00:	53                   	push   ebx
c0009c01:	e8 f2 fc ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009c06:	83 c4 20             	add    esp,0x20
c0009c09:	6a 00                	push   0x0
c0009c0b:	68 77 05 00 c0       	push   0xc0000577
c0009c10:	6a 36                	push   0x36
c0009c12:	53                   	push   ebx
c0009c13:	e8 e0 fc ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009c18:	6a 00                	push   0x0
c0009c1a:	68 81 05 00 c0       	push   0xc0000581
c0009c1f:	6a 37                	push   0x37
c0009c21:	53                   	push   ebx
c0009c22:	e8 d1 fc ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009c27:	83 c4 1c             	add    esp,0x1c
c0009c2a:	6a 03                	push   0x3
c0009c2c:	6a 02                	push   0x2
c0009c2e:	ff 35 34 8d 02 c0    	push   DWORD PTR ds:0xc0028d34
c0009c34:	e8 d5 28 00 00       	call   c000c50e <VAS::allocatePages(int, int)>
c0009c39:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0009c40:	89 c6                	mov    esi,eax
c0009c42:	e8 a0 01 00 00       	call   c0009de7 <malloc>
c0009c47:	81 c6 00 20 00 00    	add    esi,0x2000
c0009c4d:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c50:	89 c7                	mov    edi,eax
c0009c52:	e8 8d 1a 00 00       	call   c000b6e4 <TSS::TSS()>
c0009c57:	83 c4 0c             	add    esp,0xc
c0009c5a:	68 0b 04 00 c0       	push   0xc000040b
c0009c5f:	56                   	push   esi
c0009c60:	57                   	push   edi
c0009c61:	e8 c2 1a 00 00       	call   c000b728 <TSS::setup(unsigned long, unsigned long)>
c0009c66:	89 c6                	mov    esi,eax
c0009c68:	58                   	pop    eax
c0009c69:	5a                   	pop    edx
c0009c6a:	6a 00                	push   0x0
c0009c6c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009c70:	50                   	push   eax
c0009c71:	e8 d6 fb ff ff       	call   c000984c <IDTEntry::IDTEntry(bool)>
c0009c76:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009c7a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0009c7f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0009c86:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0009c8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c90:	80 ce 05             	or     dh,0x5
c0009c93:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0009c96:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009c9a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009c9e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0009ca1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009ca4:	e8 87 fc ff ff       	call   c0009930 <IDT::flush()>
c0009ca9:	83 c4 20             	add    esp,0x20
c0009cac:	5b                   	pop    ebx
c0009cad:	5e                   	pop    esi
c0009cae:	5f                   	pop    edi
c0009caf:	c3                   	ret    

c0009cb0 <sbrk>:
c0009cb0:	55                   	push   ebp
c0009cb1:	57                   	push   edi
c0009cb2:	56                   	push   esi
c0009cb3:	53                   	push   ebx
c0009cb4:	83 ec 24             	sub    esp,0x24
c0009cb7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009cbb:	53                   	push   ebx
c0009cbc:	68 a4 49 02 c0       	push   0xc00249a4
c0009cc1:	e8 51 34 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0009cc6:	83 c4 10             	add    esp,0x10
c0009cc9:	85 db                	test   ebx,ebx
c0009ccb:	74 5f                	je     c0009d2c <sbrk+0x7c>
c0009ccd:	78 64                	js     c0009d33 <sbrk+0x83>
c0009ccf:	a1 7c 7e 02 c0       	mov    eax,ds:0xc0027e7c
c0009cd4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009cd8:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c0009cde:	89 dd                	mov    ebp,ebx
c0009ce0:	78 69                	js     c0009d4b <sbrk+0x9b>
c0009ce2:	c1 fd 0c             	sar    ebp,0xc
c0009ce5:	bb 00 00 00 00       	mov    ebx,0x0
c0009cea:	8b 35 34 8d 02 c0    	mov    esi,DWORD PTR ds:0xc0028d34
c0009cf0:	8b 3d 7c 7e 02 c0    	mov    edi,DWORD PTR ds:0xc0027e7c
c0009cf6:	e8 a3 07 00 00       	call   c000a49e <Phys::allocatePage()>
c0009cfb:	68 01 04 00 00       	push   0x401
c0009d00:	57                   	push   edi
c0009d01:	50                   	push   eax
c0009d02:	56                   	push   esi
c0009d03:	e8 04 27 00 00       	call   c000c40c <VAS::mapPage(unsigned long, unsigned long, int)>
c0009d08:	81 05 7c 7e 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0027e7c,0x1000
c0009d12:	43                   	inc    ebx
c0009d13:	83 c4 10             	add    esp,0x10
c0009d16:	39 dd                	cmp    ebp,ebx
c0009d18:	75 d0                	jne    c0009cea <sbrk+0x3a>
c0009d1a:	0f 20 d8             	mov    eax,cr3
c0009d1d:	0f 22 d8             	mov    cr3,eax
c0009d20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009d24:	83 c4 1c             	add    esp,0x1c
c0009d27:	5b                   	pop    ebx
c0009d28:	5e                   	pop    esi
c0009d29:	5f                   	pop    edi
c0009d2a:	5d                   	pop    ebp
c0009d2b:	c3                   	ret    
c0009d2c:	a1 7c 7e 02 c0       	mov    eax,ds:0xc0027e7c
c0009d31:	eb f1                	jmp    c0009d24 <sbrk+0x74>
c0009d33:	83 ec 08             	sub    esp,0x8
c0009d36:	53                   	push   ebx
c0009d37:	68 d0 49 02 c0       	push   0xc00249d0
c0009d3c:	e8 d6 33 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0009d41:	83 c4 10             	add    esp,0x10
c0009d44:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009d49:	eb d9                	jmp    c0009d24 <sbrk+0x74>
c0009d4b:	8d ab ff 0f 00 00    	lea    ebp,[ebx+0xfff]
c0009d51:	eb 8f                	jmp    c0009ce2 <sbrk+0x32>

c0009d53 <mmap>:
c0009d53:	83 ec 18             	sub    esp,0x18
c0009d56:	68 c2 49 02 c0       	push   0xc00249c2
c0009d5b:	e8 99 b4 00 00       	call   c00151f9 <Krnl::panic(char const*)>
c0009d60:	b8 00 00 00 00       	mov    eax,0x0
c0009d65:	83 c4 1c             	add    esp,0x1c
c0009d68:	c3                   	ret    

c0009d69 <munmap>:
c0009d69:	83 ec 18             	sub    esp,0x18
c0009d6c:	68 c7 49 02 c0       	push   0xc00249c7
c0009d71:	e8 83 b4 00 00       	call   c00151f9 <Krnl::panic(char const*)>
c0009d76:	b8 00 00 00 00       	mov    eax,0x0
c0009d7b:	83 c4 1c             	add    esp,0x1c
c0009d7e:	c3                   	ret    

c0009d7f <liballoc_lock()>:
c0009d7f:	fa                   	cli    
c0009d80:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c0009d86:	b8 00 00 00 00       	mov    eax,0x0
c0009d8b:	c3                   	ret    

c0009d8c <liballoc_unlock()>:
c0009d8c:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c0009d91:	48                   	dec    eax
c0009d92:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c0009d97:	75 01                	jne    c0009d9a <liballoc_unlock()+0xe>
c0009d99:	fb                   	sti    
c0009d9a:	b8 00 00 00 00       	mov    eax,0x0
c0009d9f:	c3                   	ret    

c0009da0 <liballoc_alloc(int)>:
c0009da0:	83 ec 10             	sub    esp,0x10
c0009da3:	6a 01                	push   0x1
c0009da5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009da9:	ff 35 34 8d 02 c0    	push   DWORD PTR ds:0xc0028d34
c0009daf:	e8 5a 27 00 00       	call   c000c50e <VAS::allocatePages(int, int)>
c0009db4:	83 c4 1c             	add    esp,0x1c
c0009db7:	c3                   	ret    

c0009db8 <liballoc_free(void*, int)>:
c0009db8:	83 ec 14             	sub    esp,0x14
c0009dbb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009dbf:	ff 35 34 8d 02 c0    	push   DWORD PTR ds:0xc0028d34
c0009dc5:	e8 ee 23 00 00       	call   c000c1b8 <VAS::freeAllocatedPages(unsigned long)>
c0009dca:	b8 00 00 00 00       	mov    eax,0x0
c0009dcf:	83 c4 1c             	add    esp,0x1c
c0009dd2:	c3                   	ret    

c0009dd3 <realloc>:
c0009dd3:	83 ec 14             	sub    esp,0x14
c0009dd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dde:	e8 8d 77 ff ff       	call   c0001570 <dlrealloc>
c0009de3:	83 c4 1c             	add    esp,0x1c
c0009de6:	c3                   	ret    

c0009de7 <malloc>:
c0009de7:	83 ec 18             	sub    esp,0x18
c0009dea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dee:	e8 40 72 ff ff       	call   c0001033 <dlmalloc>
c0009df3:	83 c4 1c             	add    esp,0x1c
c0009df6:	c3                   	ret    

c0009df7 <free>:
c0009df7:	83 ec 18             	sub    esp,0x18
c0009dfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dfe:	e8 d5 6e ff ff       	call   c0000cd8 <dlfree>
c0009e03:	83 c4 1c             	add    esp,0x1c
c0009e06:	c3                   	ret    

c0009e07 <rfree>:
c0009e07:	83 ec 18             	sub    esp,0x18
c0009e0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e0e:	e8 c5 6e ff ff       	call   c0000cd8 <dlfree>
c0009e13:	83 c4 1c             	add    esp,0x1c
c0009e16:	c3                   	ret    

c0009e17 <calloc>:
c0009e17:	56                   	push   esi
c0009e18:	53                   	push   ebx
c0009e19:	83 ec 10             	sub    esp,0x10
c0009e1c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009e20:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0009e25:	53                   	push   ebx
c0009e26:	e8 bc ff ff ff       	call   c0009de7 <malloc>
c0009e2b:	89 c6                	mov    esi,eax
c0009e2d:	83 c4 0c             	add    esp,0xc
c0009e30:	53                   	push   ebx
c0009e31:	6a 00                	push   0x0
c0009e33:	50                   	push   eax
c0009e34:	e8 5b 68 ff ff       	call   c0000694 <memset>
c0009e39:	89 f0                	mov    eax,esi
c0009e3b:	83 c4 14             	add    esp,0x14
c0009e3e:	5b                   	pop    ebx
c0009e3f:	5e                   	pop    esi
c0009e40:	c3                   	ret    

c0009e41 <Krnl::setBootMessage(char const*)>:
c0009e41:	57                   	push   edi
c0009e42:	56                   	push   esi
c0009e43:	53                   	push   ebx
c0009e44:	81 ec a4 00 00 00    	sub    esp,0xa4
c0009e4a:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0009e51:	68 9e 00 00 00       	push   0x9e
c0009e56:	6a 00                	push   0x0
c0009e58:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0009e5c:	56                   	push   esi
c0009e5d:	e8 32 68 ff ff       	call   c0000694 <memset>
c0009e62:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009e65:	e8 46 68 ff ff       	call   c00006b0 <strlen>
c0009e6a:	ba 50 00 00 00       	mov    edx,0x50
c0009e6f:	83 c4 10             	add    esp,0x10
c0009e72:	29 c2                	sub    edx,eax
c0009e74:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0009e78:	d1 ea                	shr    edx,1
c0009e7a:	84 c0                	test   al,al
c0009e7c:	74 19                	je     c0009e97 <Krnl::setBootMessage(char const*)+0x56>
c0009e7e:	01 d2                	add    edx,edx
c0009e80:	43                   	inc    ebx
c0009e81:	01 f2                	add    edx,esi
c0009e83:	80 cc 0f             	or     ah,0xf
c0009e86:	83 c2 02             	add    edx,0x2
c0009e89:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0009e8d:	43                   	inc    ebx
c0009e8e:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0009e93:	84 c0                	test   al,al
c0009e95:	75 ec                	jne    c0009e83 <Krnl::setBootMessage(char const*)+0x42>
c0009e97:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0009e9c:	b9 9e 00 00 00       	mov    ecx,0x9e
c0009ea1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009ea3:	81 c4 a0 00 00 00    	add    esp,0xa0
c0009ea9:	5b                   	pop    ebx
c0009eaa:	5e                   	pop    esi
c0009eab:	5f                   	pop    edi
c0009eac:	c3                   	ret    

c0009ead <kernel_main>:
c0009ead:	57                   	push   edi
c0009eae:	56                   	push   esi
c0009eaf:	53                   	push   ebx
c0009eb0:	83 ec 20             	sub    esp,0x20
c0009eb3:	a1 00 05 00 00       	mov    eax,ds:0x500
c0009eb8:	a3 20 8c 02 c0       	mov    ds:0xc0028c20,eax
c0009ebd:	f6 c4 08             	test   ah,0x8
c0009ec0:	0f 85 7a 03 00 00    	jne    c000a240 <kernel_main+0x393>
c0009ec6:	31 f6                	xor    esi,esi
c0009ec8:	bf f9 03 00 00       	mov    edi,0x3f9
c0009ecd:	89 f0                	mov    eax,esi
c0009ecf:	89 fa                	mov    edx,edi
c0009ed1:	ee                   	out    dx,al
c0009ed2:	bb fb 03 00 00       	mov    ebx,0x3fb
c0009ed7:	b0 80                	mov    al,0x80
c0009ed9:	89 da                	mov    edx,ebx
c0009edb:	ee                   	out    dx,al
c0009edc:	b1 03                	mov    cl,0x3
c0009ede:	ba f8 03 00 00       	mov    edx,0x3f8
c0009ee3:	88 c8                	mov    al,cl
c0009ee5:	ee                   	out    dx,al
c0009ee6:	89 f0                	mov    eax,esi
c0009ee8:	89 fa                	mov    edx,edi
c0009eea:	ee                   	out    dx,al
c0009eeb:	88 c8                	mov    al,cl
c0009eed:	89 da                	mov    edx,ebx
c0009eef:	ee                   	out    dx,al
c0009ef0:	b0 c7                	mov    al,0xc7
c0009ef2:	ba fa 03 00 00       	mov    edx,0x3fa
c0009ef7:	ee                   	out    dx,al
c0009ef8:	b0 0b                	mov    al,0xb
c0009efa:	ba fc 03 00 00       	mov    edx,0x3fc
c0009eff:	ee                   	out    dx,al
c0009f00:	83 ec 0c             	sub    esp,0xc
c0009f03:	68 00 4a 02 c0       	push   0xc0024a00
c0009f08:	e8 0a 32 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c0009f17:	0f 85 eb 02 00 00    	jne    c000a208 <kernel_main+0x35b>
c0009f1d:	e8 c6 0c 00 00       	call   c000abe8 <installVgaTextImplementation()>
c0009f22:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c0009f29:	0f 85 94 02 00 00    	jne    c000a1c3 <kernel_main+0x316>
c0009f2f:	0f b6 05 80 7e 02 c0 	movzx  eax,BYTE PTR ds:0xc0027e80
c0009f36:	84 c0                	test   al,al
c0009f38:	74 7b                	je     c0009fb5 <kernel_main+0x108>
c0009f3a:	31 db                	xor    ebx,ebx
c0009f3c:	bf 0a 00 00 00       	mov    edi,0xa
c0009f41:	be 05 00 00 00       	mov    esi,0x5
c0009f46:	31 c9                	xor    ecx,ecx
c0009f48:	eb 2a                	jmp    c0009f74 <kernel_main+0xc7>
c0009f4a:	3c 0d                	cmp    al,0xd
c0009f4c:	74 1a                	je     c0009f68 <kernel_main+0xbb>
c0009f4e:	3c 0a                	cmp    al,0xa
c0009f50:	74 40                	je     c0009f92 <kernel_main+0xe5>
c0009f52:	8d 14 b6             	lea    edx,[esi+esi*4]
c0009f55:	80 cc 0e             	or     ah,0xe
c0009f58:	c1 e2 04             	shl    edx,0x4
c0009f5b:	01 ca                	add    edx,ecx
c0009f5d:	41                   	inc    ecx
c0009f5e:	01 fa                	add    edx,edi
c0009f60:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c0009f68:	43                   	inc    ebx
c0009f69:	0f b6 83 80 7e 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd8180]
c0009f70:	84 c0                	test   al,al
c0009f72:	74 32                	je     c0009fa6 <kernel_main+0xf9>
c0009f74:	80 b9 b6 7e 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd814a],0xdb
c0009f7b:	75 cd                	jne    c0009f4a <kernel_main+0x9d>
c0009f7d:	0f b6 91 b5 7e 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd814b]
c0009f84:	83 e2 fe             	and    edx,0xfffffffe
c0009f87:	81 fa ba 00 00 00    	cmp    edx,0xba
c0009f8d:	75 bb                	jne    c0009f4a <kernel_main+0x9d>
c0009f8f:	47                   	inc    edi
c0009f90:	eb b8                	jmp    c0009f4a <kernel_main+0x9d>
c0009f92:	43                   	inc    ebx
c0009f93:	46                   	inc    esi
c0009f94:	31 c9                	xor    ecx,ecx
c0009f96:	0f b6 83 80 7e 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd8180]
c0009f9d:	bf 0a 00 00 00       	mov    edi,0xa
c0009fa2:	84 c0                	test   al,al
c0009fa4:	75 ce                	jne    c0009f74 <kernel_main+0xc7>
c0009fa6:	8b 15 20 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028c20
c0009fac:	80 e6 08             	and    dh,0x8
c0009faf:	0f 85 bf 00 00 00    	jne    c000a074 <kernel_main+0x1c7>
c0009fb5:	83 ec 0c             	sub    esp,0xc
c0009fb8:	68 9c 4a 02 c0       	push   0xc0024a9c
c0009fbd:	e8 7f fe ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0009fc2:	a1 24 05 00 00       	mov    eax,ds:0x524
c0009fc7:	05 ff 0f 00 00       	add    eax,0xfff
c0009fcc:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009fd1:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fd4:	e8 44 06 00 00       	call   c000a61d <Phys::physicalMemorySetup(unsigned int)>
c0009fd9:	83 c4 10             	add    esp,0x10
c0009fdc:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c0009fe3:	0f 85 a2 01 00 00    	jne    c000a18b <kernel_main+0x2de>
c0009fe9:	e8 72 1f 00 00       	call   c000bf60 <Virt::virtualMemorySetup()>
c0009fee:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c0009ff5:	0f 85 58 01 00 00    	jne    c000a153 <kernel_main+0x2a6>
c0009ffb:	83 ec 0c             	sub    esp,0xc
c0009ffe:	8d 74 24 18          	lea    esi,[esp+0x18]
c000a002:	56                   	push   esi
c000a003:	e8 2e 2b 00 00       	call   c000cb36 <VAS::VAS()>
c000a008:	83 c4 10             	add    esp,0x10
c000a00b:	89 35 34 8d 02 c0    	mov    DWORD PTR ds:0xc0028d34,esi
c000a011:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c000a018:	0f 85 fd 00 00 00    	jne    c000a11b <kernel_main+0x26e>
c000a01e:	e8 fd 5f ff ff       	call   c0000020 <callGlobalConstructors>
c000a023:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c000a02a:	0f 85 b3 00 00 00    	jne    c000a0e3 <kernel_main+0x236>
c000a030:	83 ec 0c             	sub    esp,0xc
c000a033:	68 ec 01 00 00       	push   0x1ec
c000a038:	e8 aa fd ff ff       	call   c0009de7 <malloc>
c000a03d:	89 c3                	mov    ebx,eax
c000a03f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a042:	e8 89 eb ff ff       	call   c0008bd0 <Computer::Computer()>
c000a047:	83 c4 10             	add    esp,0x10
c000a04a:	89 1d 08 8c 02 c0    	mov    DWORD PTR ds:0xc0028c08,ebx
c000a050:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c000a057:	75 53                	jne    c000a0ac <kernel_main+0x1ff>
c000a059:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a05b:	6a 00                	push   0x0
c000a05d:	6a 00                	push   0x0
c000a05f:	6a 00                	push   0x0
c000a061:	53                   	push   ebx
c000a062:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000a065:	89 34 24             	mov    DWORD PTR [esp],esi
c000a068:	e8 23 22 00 00       	call   c000c290 <VAS::~VAS()>
c000a06d:	83 c4 30             	add    esp,0x30
c000a070:	5b                   	pop    ebx
c000a071:	5e                   	pop    esi
c000a072:	5f                   	pop    edi
c000a073:	c3                   	ret    
c000a074:	83 ec 0c             	sub    esp,0xc
c000a077:	68 4b 4a 02 c0       	push   0xc0024a4b
c000a07c:	e8 c0 fd ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c000a081:	83 c4 10             	add    esp,0x10
c000a084:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c000a08b:	0f 85 24 ff ff ff    	jne    c0009fb5 <kernel_main+0x108>
c000a091:	eb 04                	jmp    c000a097 <kernel_main+0x1ea>
c000a093:	3c 1c                	cmp    al,0x1c
c000a095:	74 06                	je     c000a09d <kernel_main+0x1f0>
c000a097:	e4 60                	in     al,0x60
c000a099:	3c 5a                	cmp    al,0x5a
c000a09b:	75 f6                	jne    c000a093 <kernel_main+0x1e6>
c000a09d:	e4 60                	in     al,0x60
c000a09f:	3c 5a                	cmp    al,0x5a
c000a0a1:	74 fa                	je     c000a09d <kernel_main+0x1f0>
c000a0a3:	3c 1c                	cmp    al,0x1c
c000a0a5:	74 f6                	je     c000a09d <kernel_main+0x1f0>
c000a0a7:	e9 09 ff ff ff       	jmp    c0009fb5 <kernel_main+0x108>
c000a0ac:	83 ec 0c             	sub    esp,0xc
c000a0af:	68 8a 4a 02 c0       	push   0xc0024a8a
c000a0b4:	e8 88 fd ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c000a0b9:	83 c4 10             	add    esp,0x10
c000a0bc:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c000a0c3:	74 0c                	je     c000a0d1 <kernel_main+0x224>
c000a0c5:	8b 1d 08 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028c08
c000a0cb:	eb 8c                	jmp    c000a059 <kernel_main+0x1ac>
c000a0cd:	3c 1c                	cmp    al,0x1c
c000a0cf:	74 06                	je     c000a0d7 <kernel_main+0x22a>
c000a0d1:	e4 60                	in     al,0x60
c000a0d3:	3c 5a                	cmp    al,0x5a
c000a0d5:	75 f6                	jne    c000a0cd <kernel_main+0x220>
c000a0d7:	e4 60                	in     al,0x60
c000a0d9:	3c 5a                	cmp    al,0x5a
c000a0db:	74 fa                	je     c000a0d7 <kernel_main+0x22a>
c000a0dd:	3c 1c                	cmp    al,0x1c
c000a0df:	74 f6                	je     c000a0d7 <kernel_main+0x22a>
c000a0e1:	eb e2                	jmp    c000a0c5 <kernel_main+0x218>
c000a0e3:	83 ec 0c             	sub    esp,0xc
c000a0e6:	68 77 4a 02 c0       	push   0xc0024a77
c000a0eb:	e8 51 fd ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c000a0f0:	83 c4 10             	add    esp,0x10
c000a0f3:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c000a0fa:	0f 85 30 ff ff ff    	jne    c000a030 <kernel_main+0x183>
c000a100:	eb 04                	jmp    c000a106 <kernel_main+0x259>
c000a102:	3c 1c                	cmp    al,0x1c
c000a104:	74 06                	je     c000a10c <kernel_main+0x25f>
c000a106:	e4 60                	in     al,0x60
c000a108:	3c 5a                	cmp    al,0x5a
c000a10a:	75 f6                	jne    c000a102 <kernel_main+0x255>
c000a10c:	e4 60                	in     al,0x60
c000a10e:	3c 5a                	cmp    al,0x5a
c000a110:	74 fa                	je     c000a10c <kernel_main+0x25f>
c000a112:	3c 1c                	cmp    al,0x1c
c000a114:	74 f6                	je     c000a10c <kernel_main+0x25f>
c000a116:	e9 15 ff ff ff       	jmp    c000a030 <kernel_main+0x183>
c000a11b:	83 ec 0c             	sub    esp,0xc
c000a11e:	68 6d 4a 02 c0       	push   0xc0024a6d
c000a123:	e8 19 fd ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c000a128:	83 c4 10             	add    esp,0x10
c000a12b:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c000a132:	0f 85 e6 fe ff ff    	jne    c000a01e <kernel_main+0x171>
c000a138:	eb 04                	jmp    c000a13e <kernel_main+0x291>
c000a13a:	3c 1c                	cmp    al,0x1c
c000a13c:	74 06                	je     c000a144 <kernel_main+0x297>
c000a13e:	e4 60                	in     al,0x60
c000a140:	3c 5a                	cmp    al,0x5a
c000a142:	75 f6                	jne    c000a13a <kernel_main+0x28d>
c000a144:	e4 60                	in     al,0x60
c000a146:	3c 5a                	cmp    al,0x5a
c000a148:	74 fa                	je     c000a144 <kernel_main+0x297>
c000a14a:	3c 1c                	cmp    al,0x1c
c000a14c:	74 f6                	je     c000a144 <kernel_main+0x297>
c000a14e:	e9 cb fe ff ff       	jmp    c000a01e <kernel_main+0x171>
c000a153:	83 ec 0c             	sub    esp,0xc
c000a156:	68 62 4a 02 c0       	push   0xc0024a62
c000a15b:	e8 e1 fc ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c000a160:	83 c4 10             	add    esp,0x10
c000a163:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c000a16a:	0f 85 8b fe ff ff    	jne    c0009ffb <kernel_main+0x14e>
c000a170:	eb 04                	jmp    c000a176 <kernel_main+0x2c9>
c000a172:	3c 1c                	cmp    al,0x1c
c000a174:	74 06                	je     c000a17c <kernel_main+0x2cf>
c000a176:	e4 60                	in     al,0x60
c000a178:	3c 5a                	cmp    al,0x5a
c000a17a:	75 f6                	jne    c000a172 <kernel_main+0x2c5>
c000a17c:	e4 60                	in     al,0x60
c000a17e:	3c 5a                	cmp    al,0x5a
c000a180:	74 fa                	je     c000a17c <kernel_main+0x2cf>
c000a182:	3c 1c                	cmp    al,0x1c
c000a184:	74 f6                	je     c000a17c <kernel_main+0x2cf>
c000a186:	e9 70 fe ff ff       	jmp    c0009ffb <kernel_main+0x14e>
c000a18b:	83 ec 0c             	sub    esp,0xc
c000a18e:	68 57 4a 02 c0       	push   0xc0024a57
c000a193:	e8 a9 fc ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c000a198:	83 c4 10             	add    esp,0x10
c000a19b:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c000a1a2:	0f 85 41 fe ff ff    	jne    c0009fe9 <kernel_main+0x13c>
c000a1a8:	eb 04                	jmp    c000a1ae <kernel_main+0x301>
c000a1aa:	3c 1c                	cmp    al,0x1c
c000a1ac:	74 06                	je     c000a1b4 <kernel_main+0x307>
c000a1ae:	e4 60                	in     al,0x60
c000a1b0:	3c 5a                	cmp    al,0x5a
c000a1b2:	75 f6                	jne    c000a1aa <kernel_main+0x2fd>
c000a1b4:	e4 60                	in     al,0x60
c000a1b6:	3c 5a                	cmp    al,0x5a
c000a1b8:	74 fa                	je     c000a1b4 <kernel_main+0x307>
c000a1ba:	3c 1c                	cmp    al,0x1c
c000a1bc:	74 f6                	je     c000a1b4 <kernel_main+0x307>
c000a1be:	e9 26 fe ff ff       	jmp    c0009fe9 <kernel_main+0x13c>
c000a1c3:	83 ec 0c             	sub    esp,0xc
c000a1c6:	68 39 4a 02 c0       	push   0xc0024a39
c000a1cb:	e8 71 fc ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c000a1d0:	8b 15 20 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028c20
c000a1d6:	83 c4 10             	add    esp,0x10
c000a1d9:	f6 c2 80             	test   dl,0x80
c000a1dc:	74 18                	je     c000a1f6 <kernel_main+0x349>
c000a1de:	0f b6 05 80 7e 02 c0 	movzx  eax,BYTE PTR ds:0xc0027e80
c000a1e5:	84 c0                	test   al,al
c000a1e7:	0f 85 4d fd ff ff    	jne    c0009f3a <kernel_main+0x8d>
c000a1ed:	e9 ba fd ff ff       	jmp    c0009fac <kernel_main+0xff>
c000a1f2:	3c 1c                	cmp    al,0x1c
c000a1f4:	74 06                	je     c000a1fc <kernel_main+0x34f>
c000a1f6:	e4 60                	in     al,0x60
c000a1f8:	3c 5a                	cmp    al,0x5a
c000a1fa:	75 f6                	jne    c000a1f2 <kernel_main+0x345>
c000a1fc:	e4 60                	in     al,0x60
c000a1fe:	3c 5a                	cmp    al,0x5a
c000a200:	74 fa                	je     c000a1fc <kernel_main+0x34f>
c000a202:	3c 1c                	cmp    al,0x1c
c000a204:	74 f6                	je     c000a1fc <kernel_main+0x34f>
c000a206:	eb d6                	jmp    c000a1de <kernel_main+0x331>
c000a208:	83 ec 0c             	sub    esp,0xc
c000a20b:	68 2a 4a 02 c0       	push   0xc0024a2a
c000a210:	e8 2c fc ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c000a215:	83 c4 10             	add    esp,0x10
c000a218:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c000a21f:	0f 85 f8 fc ff ff    	jne    c0009f1d <kernel_main+0x70>
c000a225:	eb 04                	jmp    c000a22b <kernel_main+0x37e>
c000a227:	3c 1c                	cmp    al,0x1c
c000a229:	74 06                	je     c000a231 <kernel_main+0x384>
c000a22b:	e4 60                	in     al,0x60
c000a22d:	3c 5a                	cmp    al,0x5a
c000a22f:	75 f6                	jne    c000a227 <kernel_main+0x37a>
c000a231:	e4 60                	in     al,0x60
c000a233:	3c 5a                	cmp    al,0x5a
c000a235:	74 fa                	je     c000a231 <kernel_main+0x384>
c000a237:	3c 1c                	cmp    al,0x1c
c000a239:	74 f6                	je     c000a231 <kernel_main+0x384>
c000a23b:	e9 dd fc ff ff       	jmp    c0009f1d <kernel_main+0x70>
c000a240:	83 ec 0c             	sub    esp,0xc
c000a243:	68 17 4a 02 c0       	push   0xc0024a17
c000a248:	e8 f4 fb ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c000a24d:	83 c4 10             	add    esp,0x10
c000a250:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c000a257:	0f 85 69 fc ff ff    	jne    c0009ec6 <kernel_main+0x19>
c000a25d:	eb 04                	jmp    c000a263 <kernel_main+0x3b6>
c000a25f:	3c 1c                	cmp    al,0x1c
c000a261:	74 06                	je     c000a269 <kernel_main+0x3bc>
c000a263:	e4 60                	in     al,0x60
c000a265:	3c 5a                	cmp    al,0x5a
c000a267:	75 f6                	jne    c000a25f <kernel_main+0x3b2>
c000a269:	e4 60                	in     al,0x60
c000a26b:	3c 5a                	cmp    al,0x5a
c000a26d:	74 fa                	je     c000a269 <kernel_main+0x3bc>
c000a26f:	3c 1c                	cmp    al,0x1c
c000a271:	74 f6                	je     c000a269 <kernel_main+0x3bc>
c000a273:	e9 4e fc ff ff       	jmp    c0009ec6 <kernel_main+0x19>

c000a278 <Phys::allocateDMA(unsigned long)>:
c000a278:	55                   	push   ebp
c000a279:	31 ed                	xor    ebp,ebp
c000a27b:	57                   	push   edi
c000a27c:	56                   	push   esi
c000a27d:	53                   	push   ebx
c000a27e:	31 db                	xor    ebx,ebx
c000a280:	83 ec 28             	sub    esp,0x28
c000a283:	68 bb 4a 02 c0       	push   0xc0024abb
c000a288:	e8 8a 2e 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000a28d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a291:	83 c4 10             	add    esp,0x10
c000a294:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000a29a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000a2a2:	c1 ef 0c             	shr    edi,0xc
c000a2a5:	31 c0                	xor    eax,eax
c000a2a7:	eb 19                	jmp    c000a2c2 <Phys::allocateDMA(unsigned long)+0x4a>
c000a2a9:	85 c0                	test   eax,eax
c000a2ab:	75 06                	jne    c000a2b3 <Phys::allocateDMA(unsigned long)+0x3b>
c000a2ad:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a2b1:	89 dd                	mov    ebp,ebx
c000a2b3:	8d 70 01             	lea    esi,[eax+0x1]
c000a2b6:	39 f7                	cmp    edi,esi
c000a2b8:	74 3f                	je     c000a2f9 <Phys::allocateDMA(unsigned long)+0x81>
c000a2ba:	89 f0                	mov    eax,esi
c000a2bc:	43                   	inc    ebx
c000a2bd:	83 fb 0f             	cmp    ebx,0xf
c000a2c0:	7f 11                	jg     c000a2d3 <Phys::allocateDMA(unsigned long)+0x5b>
c000a2c2:	80 bb 3c 8c 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd73c4],0x0
c000a2c9:	74 de                	je     c000a2a9 <Phys::allocateDMA(unsigned long)+0x31>
c000a2cb:	31 c0                	xor    eax,eax
c000a2cd:	43                   	inc    ebx
c000a2ce:	83 fb 0f             	cmp    ebx,0xf
c000a2d1:	7e ef                	jle    c000a2c2 <Phys::allocateDMA(unsigned long)+0x4a>
c000a2d3:	83 ec 0c             	sub    esp,0xc
c000a2d6:	68 eb 4a 02 c0       	push   0xc0024aeb
c000a2db:	e8 37 2e 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000a2e0:	c7 04 24 a8 4b 02 c0 	mov    DWORD PTR [esp],0xc0024ba8
c000a2e7:	e8 0d af 00 00       	call   c00151f9 <Krnl::panic(char const*)>
c000a2ec:	83 c4 10             	add    esp,0x10
c000a2ef:	31 c0                	xor    eax,eax
c000a2f1:	83 c4 1c             	add    esp,0x1c
c000a2f4:	5b                   	pop    ebx
c000a2f5:	5e                   	pop    esi
c000a2f6:	5f                   	pop    edi
c000a2f7:	5d                   	pop    ebp
c000a2f8:	c3                   	ret    
c000a2f9:	89 e9                	mov    ecx,ebp
c000a2fb:	c1 f9 04             	sar    ecx,0x4
c000a2fe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a302:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c000a306:	89 ca                	mov    edx,ecx
c000a308:	4a                   	dec    edx
c000a309:	79 03                	jns    c000a30e <Phys::allocateDMA(unsigned long)+0x96>
c000a30b:	8d 51 0e             	lea    edx,[ecx+0xe]
c000a30e:	c1 fa 04             	sar    edx,0x4
c000a311:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c000a315:	74 08                	je     c000a31f <Phys::allocateDMA(unsigned long)+0xa7>
c000a317:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a31b:	31 c0                	xor    eax,eax
c000a31d:	eb ae                	jmp    c000a2cd <Phys::allocateDMA(unsigned long)+0x55>
c000a31f:	85 f6                	test   esi,esi
c000a321:	74 15                	je     c000a338 <Phys::allocateDMA(unsigned long)+0xc0>
c000a323:	8d 95 3c 8c 02 c0    	lea    edx,[ebp-0x3ffd73c4]
c000a329:	8d 84 05 3d 8c 02 c0 	lea    eax,[ebp+eax*1-0x3ffd73c3]
c000a330:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000a333:	42                   	inc    edx
c000a334:	39 d0                	cmp    eax,edx
c000a336:	75 f8                	jne    c000a330 <Phys::allocateDMA(unsigned long)+0xb8>
c000a338:	83 ec 0c             	sub    esp,0xc
c000a33b:	01 3d 34 8c 02 c0    	add    DWORD PTR ds:0xc0028c34,edi
c000a341:	68 d4 4a 02 c0       	push   0xc0024ad4
c000a346:	e8 cc 2d 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000a34b:	83 c4 10             	add    esp,0x10
c000a34e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a352:	85 c0                	test   eax,eax
c000a354:	74 23                	je     c000a379 <Phys::allocateDMA(unsigned long)+0x101>
c000a356:	83 ec 0c             	sub    esp,0xc
c000a359:	68 cc 7a 02 c0       	push   0xc0027acc
c000a35e:	e8 b4 2d 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000a363:	c7 04 24 a8 4b 02 c0 	mov    DWORD PTR [esp],0xc0024ba8
c000a36a:	e8 8a ae 00 00       	call   c00151f9 <Krnl::panic(char const*)>
c000a36f:	83 c4 10             	add    esp,0x10
c000a372:	89 f0                	mov    eax,esi
c000a374:	e9 43 ff ff ff       	jmp    c000a2bc <Phys::allocateDMA(unsigned long)+0x44>
c000a379:	c1 e5 0c             	shl    ebp,0xc
c000a37c:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c000a382:	e9 6a ff ff ff       	jmp    c000a2f1 <Phys::allocateDMA(unsigned long)+0x79>

c000a387 <Phys::freeDMA(unsigned long, unsigned long)>:
c000a387:	83 ec 18             	sub    esp,0x18
c000a38a:	68 ef 4a 02 c0       	push   0xc0024aef
c000a38f:	e8 83 2d 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000a394:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a398:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000a39e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a3a2:	c1 ea 0c             	shr    edx,0xc
c000a3a5:	05 00 00 ff 3d       	add    eax,0x3dff0000
c000a3aa:	29 15 34 8c 02 c0    	sub    DWORD PTR ds:0xc0028c34,edx
c000a3b0:	c1 e8 0c             	shr    eax,0xc
c000a3b3:	83 c4 10             	add    esp,0x10
c000a3b6:	85 d2                	test   edx,edx
c000a3b8:	74 0f                	je     c000a3c9 <Phys::freeDMA(unsigned long, unsigned long)+0x42>
c000a3ba:	05 3c 8c 02 c0       	add    eax,0xc0028c3c
c000a3bf:	01 c2                	add    edx,eax
c000a3c1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000a3c4:	40                   	inc    eax
c000a3c5:	39 d0                	cmp    eax,edx
c000a3c7:	75 f8                	jne    c000a3c1 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c000a3c9:	83 c4 0c             	add    esp,0xc
c000a3cc:	c3                   	ret    

c000a3cd <Phys::setPageState(unsigned long, bool)>:
c000a3cd:	56                   	push   esi
c000a3ce:	ba 01 00 00 00       	mov    edx,0x1
c000a3d3:	53                   	push   ebx
c000a3d4:	8b 35 c4 7f 02 c0    	mov    esi,DWORD PTR ds:0xc0027fc4
c000a3da:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a3de:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a3e2:	89 c8                	mov    eax,ecx
c000a3e4:	83 e1 07             	and    ecx,0x7
c000a3e7:	c1 e8 03             	shr    eax,0x3
c000a3ea:	d3 e3                	shl    ebx,cl
c000a3ec:	01 c6                	add    esi,eax
c000a3ee:	d3 e2                	shl    edx,cl
c000a3f0:	f7 d2                	not    edx
c000a3f2:	20 16                	and    BYTE PTR [esi],dl
c000a3f4:	03 05 c4 7f 02 c0    	add    eax,DWORD PTR ds:0xc0027fc4
c000a3fa:	08 18                	or     BYTE PTR [eax],bl
c000a3fc:	5b                   	pop    ebx
c000a3fd:	5e                   	pop    esi
c000a3fe:	c3                   	ret    

c000a3ff <Phys::getPageState(unsigned long)>:
c000a3ff:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a403:	8b 15 c4 7f 02 c0    	mov    edx,DWORD PTR ds:0xc0027fc4
c000a409:	89 c8                	mov    eax,ecx
c000a40b:	83 e1 07             	and    ecx,0x7
c000a40e:	c1 e8 03             	shr    eax,0x3
c000a411:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000a415:	d3 f8                	sar    eax,cl
c000a417:	83 e0 01             	and    eax,0x1
c000a41a:	c3                   	ret    

c000a41b <Phys::freePage(unsigned long)>:
c000a41b:	53                   	push   ebx
c000a41c:	83 ec 10             	sub    esp,0x10
c000a41f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a423:	53                   	push   ebx
c000a424:	68 05 4b 02 c0       	push   0xc0024b05
c000a429:	e8 e9 2c 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000a42e:	8d 83 00 00 ff ff    	lea    eax,[ebx-0x10000]
c000a434:	83 c4 10             	add    esp,0x10
c000a437:	3d ff ff 00 00       	cmp    eax,0xffff
c000a43c:	76 3d                	jbe    c000a47b <Phys::freePage(unsigned long)+0x60>
c000a43e:	83 ec 0c             	sub    esp,0xc
c000a441:	c1 eb 0c             	shr    ebx,0xc
c000a444:	53                   	push   ebx
c000a445:	e8 b5 ff ff ff       	call   c000a3ff <Phys::getPageState(unsigned long)>
c000a44a:	83 c4 10             	add    esp,0x10
c000a44d:	84 c0                	test   al,al
c000a44f:	74 19                	je     c000a46a <Phys::freePage(unsigned long)+0x4f>
c000a451:	83 ec 08             	sub    esp,0x8
c000a454:	ff 0d 34 8c 02 c0    	dec    DWORD PTR ds:0xc0028c34
c000a45a:	6a 00                	push   0x0
c000a45c:	53                   	push   ebx
c000a45d:	e8 6b ff ff ff       	call   c000a3cd <Phys::setPageState(unsigned long, bool)>
c000a462:	83 c4 10             	add    esp,0x10
c000a465:	83 c4 08             	add    esp,0x8
c000a468:	5b                   	pop    ebx
c000a469:	c3                   	ret    
c000a46a:	c7 44 24 10 2f 4b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024b2f
c000a472:	83 c4 08             	add    esp,0x8
c000a475:	5b                   	pop    ebx
c000a476:	e9 7e ad 00 00       	jmp    c00151f9 <Krnl::panic(char const*)>
c000a47b:	83 ec 08             	sub    esp,0x8
c000a47e:	53                   	push   ebx
c000a47f:	68 18 4b 02 c0       	push   0xc0024b18
c000a484:	e8 8e 2c 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000a489:	58                   	pop    eax
c000a48a:	5a                   	pop    edx
c000a48b:	68 00 10 00 00       	push   0x1000
c000a490:	53                   	push   ebx
c000a491:	e8 f1 fe ff ff       	call   c000a387 <Phys::freeDMA(unsigned long, unsigned long)>
c000a496:	83 c4 10             	add    esp,0x10
c000a499:	83 c4 08             	add    esp,0x8
c000a49c:	5b                   	pop    ebx
c000a49d:	c3                   	ret    

c000a49e <Phys::allocatePage()>:
c000a49e:	56                   	push   esi
c000a49f:	53                   	push   ebx
c000a4a0:	83 ec 14             	sub    esp,0x14
c000a4a3:	8b 35 28 8c 02 c0    	mov    esi,DWORD PTR ds:0xc0028c28
c000a4a9:	89 f3                	mov    ebx,esi
c000a4ab:	eb 0a                	jmp    c000a4b7 <Phys::allocatePage()+0x19>
c000a4ad:	89 1d 28 8c 02 c0    	mov    DWORD PTR ds:0xc0028c28,ebx
c000a4b3:	39 de                	cmp    esi,ebx
c000a4b5:	74 24                	je     c000a4db <Phys::allocatePage()+0x3d>
c000a4b7:	53                   	push   ebx
c000a4b8:	e8 42 ff ff ff       	call   c000a3ff <Phys::getPageState(unsigned long)>
c000a4bd:	5a                   	pop    edx
c000a4be:	84 c0                	test   al,al
c000a4c0:	74 69                	je     c000a52b <Phys::allocatePage()+0x8d>
c000a4c2:	43                   	inc    ebx
c000a4c3:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a4c9:	75 e2                	jne    c000a4ad <Phys::allocatePage()+0xf>
c000a4cb:	31 db                	xor    ebx,ebx
c000a4cd:	c7 05 28 8c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028c28,0x0
c000a4d7:	39 de                	cmp    esi,ebx
c000a4d9:	75 dc                	jne    c000a4b7 <Phys::allocatePage()+0x19>
c000a4db:	83 ec 0c             	sub    esp,0xc
c000a4de:	80 35 4c 8c 02 c0 01 	xor    BYTE PTR ds:0xc0028c4c,0x1
c000a4e5:	68 d0 4b 02 c0       	push   0xc0024bd0
c000a4ea:	e8 28 2c 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000a4ef:	58                   	pop    eax
c000a4f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a4f5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a4f8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000a4fe:	e8 a3 28 00 00       	call   c000cda6 <VAS::scanForEviction()>
c000a503:	83 c4 10             	add    esp,0x10
c000a506:	85 c0                	test   eax,eax
c000a508:	75 62                	jne    c000a56c <Phys::allocatePage()+0xce>
c000a50a:	83 ec 0c             	sub    esp,0xc
c000a50d:	68 f4 4b 02 c0       	push   0xc0024bf4
c000a512:	e8 e2 ac 00 00       	call   c00151f9 <Krnl::panic(char const*)>
c000a517:	83 c4 10             	add    esp,0x10
c000a51a:	8b 1d 28 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028c28
c000a520:	53                   	push   ebx
c000a521:	e8 d9 fe ff ff       	call   c000a3ff <Phys::getPageState(unsigned long)>
c000a526:	5a                   	pop    edx
c000a527:	84 c0                	test   al,al
c000a529:	75 97                	jne    c000a4c2 <Phys::allocatePage()+0x24>
c000a52b:	6a 01                	push   0x1
c000a52d:	53                   	push   ebx
c000a52e:	e8 9a fe ff ff       	call   c000a3cd <Phys::setPageState(unsigned long, bool)>
c000a533:	5a                   	pop    edx
c000a534:	a1 34 8c 02 c0       	mov    eax,ds:0xc0028c34
c000a539:	59                   	pop    ecx
c000a53a:	40                   	inc    eax
c000a53b:	8b 15 28 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028c28
c000a541:	a3 34 8c 02 c0       	mov    ds:0xc0028c34,eax
c000a546:	c1 e2 0c             	shl    edx,0xc
c000a549:	52                   	push   edx
c000a54a:	ff 35 38 8c 02 c0    	push   DWORD PTR ds:0xc0028c38
c000a550:	50                   	push   eax
c000a551:	68 45 4b 02 c0       	push   0xc0024b45
c000a556:	e8 bc 2b 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000a55b:	a1 28 8c 02 c0       	mov    eax,ds:0xc0028c28
c000a560:	83 c4 10             	add    esp,0x10
c000a563:	c1 e0 0c             	shl    eax,0xc
c000a566:	83 c4 14             	add    esp,0x14
c000a569:	5b                   	pop    ebx
c000a56a:	5e                   	pop    esi
c000a56b:	c3                   	ret    
c000a56c:	83 ec 08             	sub    esp,0x8
c000a56f:	89 c2                	mov    edx,eax
c000a571:	6a 01                	push   0x1
c000a573:	c1 ea 0c             	shr    edx,0xc
c000a576:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a57a:	52                   	push   edx
c000a57b:	e8 4d fe ff ff       	call   c000a3cd <Phys::setPageState(unsigned long, bool)>
c000a580:	83 c4 10             	add    esp,0x10
c000a583:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a587:	eb dd                	jmp    c000a566 <Phys::allocatePage()+0xc8>

c000a589 <Phys::allocateContiguousPages(int)>:
c000a589:	57                   	push   edi
c000a58a:	56                   	push   esi
c000a58b:	53                   	push   ebx
c000a58c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a590:	fa                   	cli    
c000a591:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c000a597:	31 db                	xor    ebx,ebx
c000a599:	85 db                	test   ebx,ebx
c000a59b:	75 11                	jne    c000a5ae <Phys::allocateContiguousPages(int)+0x25>
c000a59d:	e8 fc fe ff ff       	call   c000a49e <Phys::allocatePage()>
c000a5a2:	83 fe 01             	cmp    esi,0x1
c000a5a5:	89 c7                	mov    edi,eax
c000a5a7:	74 21                	je     c000a5ca <Phys::allocateContiguousPages(int)+0x41>
c000a5a9:	bb 01 00 00 00       	mov    ebx,0x1
c000a5ae:	e8 eb fe ff ff       	call   c000a49e <Phys::allocatePage()>
c000a5b3:	89 da                	mov    edx,ebx
c000a5b5:	c1 e2 0c             	shl    edx,0xc
c000a5b8:	01 fa                	add    edx,edi
c000a5ba:	39 c2                	cmp    edx,eax
c000a5bc:	74 20                	je     c000a5de <Phys::allocateContiguousPages(int)+0x55>
c000a5be:	bb 01 00 00 00       	mov    ebx,0x1
c000a5c3:	89 c7                	mov    edi,eax
c000a5c5:	83 fe 01             	cmp    esi,0x1
c000a5c8:	75 e4                	jne    c000a5ae <Phys::allocateContiguousPages(int)+0x25>
c000a5ca:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c000a5cf:	48                   	dec    eax
c000a5d0:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c000a5d5:	75 01                	jne    c000a5d8 <Phys::allocateContiguousPages(int)+0x4f>
c000a5d7:	fb                   	sti    
c000a5d8:	89 f8                	mov    eax,edi
c000a5da:	5b                   	pop    ebx
c000a5db:	5e                   	pop    esi
c000a5dc:	5f                   	pop    edi
c000a5dd:	c3                   	ret    
c000a5de:	43                   	inc    ebx
c000a5df:	39 f3                	cmp    ebx,esi
c000a5e1:	75 b6                	jne    c000a599 <Phys::allocateContiguousPages(int)+0x10>
c000a5e3:	eb e5                	jmp    c000a5ca <Phys::allocateContiguousPages(int)+0x41>

c000a5e5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000a5e5:	56                   	push   esi
c000a5e6:	53                   	push   ebx
c000a5e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a5eb:	39 1d 2c 8c 02 c0    	cmp    DWORD PTR ds:0xc0028c2c,ebx
c000a5f1:	73 06                	jae    c000a5f9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000a5f3:	89 1d 2c 8c 02 c0    	mov    DWORD PTR ds:0xc0028c2c,ebx
c000a5f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a5fd:	c1 eb 0c             	shr    ebx,0xc
c000a600:	c1 e8 0c             	shr    eax,0xc
c000a603:	39 d8                	cmp    eax,ebx
c000a605:	73 13                	jae    c000a61a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000a607:	6a 00                	push   0x0
c000a609:	8d 70 01             	lea    esi,[eax+0x1]
c000a60c:	50                   	push   eax
c000a60d:	e8 bb fd ff ff       	call   c000a3cd <Phys::setPageState(unsigned long, bool)>
c000a612:	5a                   	pop    edx
c000a613:	89 f0                	mov    eax,esi
c000a615:	59                   	pop    ecx
c000a616:	39 f3                	cmp    ebx,esi
c000a618:	75 ed                	jne    c000a607 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000a61a:	5b                   	pop    ebx
c000a61b:	5e                   	pop    esi
c000a61c:	c3                   	ret    

c000a61d <Phys::physicalMemorySetup(unsigned int)>:
c000a61d:	55                   	push   ebp
c000a61e:	57                   	push   edi
c000a61f:	56                   	push   esi
c000a620:	53                   	push   ebx
c000a621:	31 db                	xor    ebx,ebx
c000a623:	83 ec 40             	sub    esp,0x40
c000a626:	6a 10                	push   0x10
c000a628:	6a 00                	push   0x0
c000a62a:	68 3c 8c 02 c0       	push   0xc0028c3c
c000a62f:	e8 60 60 ff ff       	call   c0000694 <memset>
c000a634:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000a638:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a63d:	05 00 10 00 00       	add    eax,0x1000
c000a642:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a646:	5a                   	pop    edx
c000a647:	59                   	pop    ecx
c000a648:	50                   	push   eax
c000a649:	68 63 4b 02 c0       	push   0xc0024b63
c000a64e:	e8 c4 2a 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000a653:	83 c4 10             	add    esp,0x10
c000a656:	83 ec 08             	sub    esp,0x8
c000a659:	6a 01                	push   0x1
c000a65b:	53                   	push   ebx
c000a65c:	43                   	inc    ebx
c000a65d:	e8 6b fd ff ff       	call   c000a3cd <Phys::setPageState(unsigned long, bool)>
c000a662:	83 c4 10             	add    esp,0x10
c000a665:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a66b:	75 e9                	jne    c000a656 <Phys::physicalMemorySetup(unsigned int)+0x39>
c000a66d:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000a674:	66 85 c0             	test   ax,ax
c000a677:	0f 84 8e 01 00 00    	je     c000a80b <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c000a67d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a681:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000a689:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a68d:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000a692:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a696:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000a69e:	eb 15                	jmp    c000a6b5 <Phys::physicalMemorySetup(unsigned int)+0x98>
c000a6a0:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000a6a4:	83 c3 18             	add    ebx,0x18
c000a6a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a6ab:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000a6af:	0f 84 66 01 00 00    	je     c000a81b <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a6b5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000a6b8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000a6bb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000a6be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a6c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a6c6:	8b 33                	mov    esi,DWORD PTR [ebx]
c000a6c8:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000a6cb:	01 f0                	add    eax,esi
c000a6cd:	55                   	push   ebp
c000a6ce:	11 fa                	adc    edx,edi
c000a6d0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a6d4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000a6d8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a6dc:	56                   	push   esi
c000a6dd:	68 24 4c 02 c0       	push   0xc0024c24
c000a6e2:	e8 30 2a 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000a6e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6eb:	83 c4 10             	add    esp,0x10
c000a6ee:	09 f8                	or     eax,edi
c000a6f0:	0f 85 25 01 00 00    	jne    c000a81b <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a6f6:	4d                   	dec    ebp
c000a6f7:	75 a7                	jne    c000a6a0 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a6f9:	ba 00 00 08 00       	mov    edx,0x80000
c000a6fe:	89 c1                	mov    ecx,eax
c000a700:	39 f2                	cmp    edx,esi
c000a702:	19 f9                	sbb    ecx,edi
c000a704:	0f 82 a7 00 00 00    	jb     c000a7b1 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a70a:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000a70e:	89 c1                	mov    ecx,eax
c000a710:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000a714:	0f 83 97 00 00 00    	jae    c000a7b1 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a71a:	ba 00 00 0a 00       	mov    edx,0xa0000
c000a71f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a723:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a727:	39 fa                	cmp    edx,edi
c000a729:	19 e8                	sbb    eax,ebp
c000a72b:	0f 82 9a 01 00 00    	jb     c000a8cb <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c000a731:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a735:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a739:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000a73f:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a744:	83 d5 ff             	adc    ebp,0xffffffff
c000a747:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000a74b:	31 c0                	xor    eax,eax
c000a74d:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000a751:	39 fa                	cmp    edx,edi
c000a753:	89 c1                	mov    ecx,eax
c000a755:	19 e9                	sbb    ecx,ebp
c000a757:	0f 83 43 ff ff ff    	jae    c000a6a0 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a75d:	be 00 00 08 00       	mov    esi,0x80000
c000a762:	51                   	push   ecx
c000a763:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000a767:	57                   	push   edi
c000a768:	56                   	push   esi
c000a769:	68 48 4c 02 c0       	push   0xc0024c48
c000a76e:	e8 a4 29 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000a773:	5d                   	pop    ebp
c000a774:	58                   	pop    eax
c000a775:	57                   	push   edi
c000a776:	56                   	push   esi
c000a777:	e8 69 fe ff ff       	call   c000a5e5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000a77c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000a780:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a784:	83 c4 0c             	add    esp,0xc
c000a787:	0f ac d0 0c          	shrd   eax,edx,0xc
c000a78b:	03 05 38 8c 02 c0    	add    eax,DWORD PTR ds:0xc0028c38
c000a791:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a798:	a3 38 8c 02 c0       	mov    ds:0xc0028c38,eax
c000a79d:	52                   	push   edx
c000a79e:	50                   	push   eax
c000a79f:	68 89 4b 02 c0       	push   0xc0024b89
c000a7a4:	e8 6e 29 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000a7a9:	83 c4 10             	add    esp,0x10
c000a7ac:	e9 ef fe ff ff       	jmp    c000a6a0 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a7b1:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000a7b5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a7b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a7bd:	39 ea                	cmp    edx,ebp
c000a7bf:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000a7c3:	0f 82 d7 fe ff ff    	jb     c000a6a0 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a7c9:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a7ce:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000a7d2:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000a7d6:	0f 83 c4 fe ff ff    	jae    c000a6a0 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a7dc:	39 ee                	cmp    esi,ebp
c000a7de:	89 f8                	mov    eax,edi
c000a7e0:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000a7e4:	0f 83 78 ff ff ff    	jae    c000a762 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a7ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a7ee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a7f2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000a7f6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000a7fa:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000a7fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a802:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a806:	e9 57 ff ff ff       	jmp    c000a762 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a80b:	83 ec 0c             	sub    esp,0xc
c000a80e:	68 7b 4b 02 c0       	push   0xc0024b7b
c000a813:	e8 e1 a9 00 00       	call   c00151f9 <Krnl::panic(char const*)>
c000a818:	83 c4 10             	add    esp,0x10
c000a81b:	83 ec 08             	sub    esp,0x8
c000a81e:	bb 60 00 00 00       	mov    ebx,0x60
c000a823:	6a 00                	push   0x0
c000a825:	6a 06                	push   0x6
c000a827:	e8 a1 fb ff ff       	call   c000a3cd <Phys::setPageState(unsigned long, bool)>
c000a82c:	58                   	pop    eax
c000a82d:	5a                   	pop    edx
c000a82e:	6a 00                	push   0x0
c000a830:	6a 07                	push   0x7
c000a832:	e8 96 fb ff ff       	call   c000a3cd <Phys::setPageState(unsigned long, bool)>
c000a837:	83 05 38 8c 02 c0 02 	add    DWORD PTR ds:0xc0028c38,0x2
c000a83e:	83 c4 10             	add    esp,0x10
c000a841:	83 ec 08             	sub    esp,0x8
c000a844:	6a 00                	push   0x0
c000a846:	53                   	push   ebx
c000a847:	43                   	inc    ebx
c000a848:	e8 80 fb ff ff       	call   c000a3cd <Phys::setPageState(unsigned long, bool)>
c000a84d:	83 c4 10             	add    esp,0x10
c000a850:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000a856:	75 e9                	jne    c000a841 <Phys::physicalMemorySetup(unsigned int)+0x224>
c000a858:	a1 38 8c 02 c0       	mov    eax,ds:0xc0028c38
c000a85d:	bb 40 01 00 00       	mov    ebx,0x140
c000a862:	83 c0 20             	add    eax,0x20
c000a865:	a3 38 8c 02 c0       	mov    ds:0xc0028c38,eax
c000a86a:	eb 22                	jmp    c000a88e <Phys::physicalMemorySetup(unsigned int)+0x271>
c000a86c:	83 ec 08             	sub    esp,0x8
c000a86f:	6a 00                	push   0x0
c000a871:	53                   	push   ebx
c000a872:	43                   	inc    ebx
c000a873:	e8 55 fb ff ff       	call   c000a3cd <Phys::setPageState(unsigned long, bool)>
c000a878:	a1 38 8c 02 c0       	mov    eax,ds:0xc0028c38
c000a87d:	83 c4 10             	add    esp,0x10
c000a880:	40                   	inc    eax
c000a881:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000a887:	a3 38 8c 02 c0       	mov    ds:0xc0028c38,eax
c000a88c:	74 07                	je     c000a895 <Phys::physicalMemorySetup(unsigned int)+0x278>
c000a88e:	3d ff 03 00 00       	cmp    eax,0x3ff
c000a893:	7e d7                	jle    c000a86c <Phys::physicalMemorySetup(unsigned int)+0x24f>
c000a895:	bb d0 01 00 00       	mov    ebx,0x1d0
c000a89a:	3d ff 07 00 00       	cmp    eax,0x7ff
c000a89f:	7f 22                	jg     c000a8c3 <Phys::physicalMemorySetup(unsigned int)+0x2a6>
c000a8a1:	83 ec 08             	sub    esp,0x8
c000a8a4:	6a 00                	push   0x0
c000a8a6:	53                   	push   ebx
c000a8a7:	43                   	inc    ebx
c000a8a8:	e8 20 fb ff ff       	call   c000a3cd <Phys::setPageState(unsigned long, bool)>
c000a8ad:	a1 38 8c 02 c0       	mov    eax,ds:0xc0028c38
c000a8b2:	83 c4 10             	add    esp,0x10
c000a8b5:	40                   	inc    eax
c000a8b6:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000a8bc:	a3 38 8c 02 c0       	mov    ds:0xc0028c38,eax
c000a8c1:	75 d7                	jne    c000a89a <Phys::physicalMemorySetup(unsigned int)+0x27d>
c000a8c3:	83 c4 3c             	add    esp,0x3c
c000a8c6:	5b                   	pop    ebx
c000a8c7:	5e                   	pop    esi
c000a8c8:	5f                   	pop    edi
c000a8c9:	5d                   	pop    ebp
c000a8ca:	c3                   	ret    
c000a8cb:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000a8d3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000a8db:	e9 51 fe ff ff       	jmp    c000a731 <Phys::physicalMemorySetup(unsigned int)+0x114>

c000a8e0 <Pipe::isAtty()>:
c000a8e0:	31 c0                	xor    eax,eax
c000a8e2:	c3                   	ret    
c000a8e3:	90                   	nop

c000a8e4 <Pipe::~Pipe()>:
c000a8e4:	83 ec 0c             	sub    esp,0xc
c000a8e7:	ba b4 4c 02 c0       	mov    edx,0xc0024cb4
c000a8ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8f0:	89 10                	mov    DWORD PTR [eax],edx
c000a8f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8f6:	83 ec 0c             	sub    esp,0xc
c000a8f9:	50                   	push   eax
c000a8fa:	e8 41 12 00 00       	call   c000bb40 <UnixFile::~UnixFile()>
c000a8ff:	83 c4 10             	add    esp,0x10
c000a902:	90                   	nop
c000a903:	83 c4 0c             	add    esp,0xc
c000a906:	c3                   	ret    
c000a907:	90                   	nop

c000a908 <Pipe::~Pipe()>:
c000a908:	83 ec 0c             	sub    esp,0xc
c000a90b:	83 ec 0c             	sub    esp,0xc
c000a90e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a912:	e8 cd ff ff ff       	call   c000a8e4 <Pipe::~Pipe()>
c000a917:	83 c4 10             	add    esp,0x10
c000a91a:	83 ec 08             	sub    esp,0x8
c000a91d:	6a 20                	push   0x20
c000a91f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a923:	e8 0e 27 00 00       	call   c000d036 <operator delete(void*, unsigned long)>
c000a928:	83 c4 10             	add    esp,0x10
c000a92b:	83 c4 0c             	add    esp,0xc
c000a92e:	c3                   	ret    
c000a92f:	90                   	nop

c000a930 <Pipe::read(unsigned long long, void*, int*)>:
c000a930:	55                   	push   ebp
c000a931:	57                   	push   edi
c000a932:	56                   	push   esi
c000a933:	53                   	push   ebx
c000a934:	83 ec 1c             	sub    esp,0x1c
c000a937:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000a93b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000a93f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a943:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a946:	89 c8                	mov    eax,ecx
c000a948:	99                   	cdq    
c000a949:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000a94d:	74 24                	je     c000a973 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a94f:	39 f9                	cmp    ecx,edi
c000a951:	89 d1                	mov    ecx,edx
c000a953:	19 f1                	sbb    ecx,esi
c000a955:	73 1c                	jae    c000a973 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a957:	fa                   	cli    
c000a958:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c000a95e:	e8 f1 e5 00 00       	call   c0018f54 <schedule()>
c000a963:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c000a968:	48                   	dec    eax
c000a969:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c000a96e:	75 d3                	jne    c000a943 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a970:	fb                   	sti    
c000a971:	eb d0                	jmp    c000a943 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a973:	39 f8                	cmp    eax,edi
c000a975:	89 d1                	mov    ecx,edx
c000a977:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a97a:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000a97e:	19 f1                	sbb    ecx,esi
c000a980:	73 07                	jae    c000a989 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000a982:	89 04 24             	mov    DWORD PTR [esp],eax
c000a985:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a989:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000a98c:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000a98f:	29 f7                	sub    edi,esi
c000a991:	89 f8                	mov    eax,edi
c000a993:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000a997:	99                   	cdq    
c000a998:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000a99b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a99f:	19 d0                	sbb    eax,edx
c000a9a1:	73 07                	jae    c000a9aa <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000a9a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a9a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a9aa:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a9ad:	89 ea                	mov    edx,ebp
c000a9af:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000a9b3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a9b8:	74 0d                	je     c000a9c7 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000a9ba:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a9bd:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000a9c1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a9c5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a9c7:	85 d2                	test   edx,edx
c000a9c9:	74 11                	je     c000a9dc <Pipe::read(unsigned long long, void*, int*)+0xac>
c000a9cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a9cf:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000a9d2:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000a9d6:	89 d1                	mov    ecx,edx
c000a9d8:	89 c7                	mov    edi,eax
c000a9da:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a9dc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a9df:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000a9e2:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000a9e5:	99                   	cdq    
c000a9e6:	89 f7                	mov    edi,esi
c000a9e8:	03 04 24             	add    eax,DWORD PTR [esp]
c000a9eb:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000a9ef:	c1 ff 1f             	sar    edi,0x1f
c000a9f2:	57                   	push   edi
c000a9f3:	56                   	push   esi
c000a9f4:	52                   	push   edx
c000a9f5:	50                   	push   eax
c000a9f6:	e8 e5 86 01 00       	call   c00230e0 <__umoddi3>
c000a9fb:	83 c4 10             	add    esp,0x10
c000a9fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000aa01:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000aa06:	75 10                	jne    c000aa18 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000aa08:	83 ec 0c             	sub    esp,0xc
c000aa0b:	68 71 4c 02 c0       	push   0xc0024c71
c000aa10:	e8 e4 a7 00 00       	call   c00151f9 <Krnl::panic(char const*)>
c000aa15:	83 c4 10             	add    esp,0x10
c000aa18:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000aa1c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000aa1f:	89 10                	mov    DWORD PTR [eax],edx
c000aa21:	83 c4 1c             	add    esp,0x1c
c000aa24:	31 c0                	xor    eax,eax
c000aa26:	5b                   	pop    ebx
c000aa27:	5e                   	pop    esi
c000aa28:	5f                   	pop    edi
c000aa29:	5d                   	pop    ebp
c000aa2a:	c3                   	ret    
c000aa2b:	90                   	nop

c000aa2c <Pipe::write(unsigned long long, void*, int*)>:
c000aa2c:	55                   	push   ebp
c000aa2d:	57                   	push   edi
c000aa2e:	56                   	push   esi
c000aa2f:	53                   	push   ebx
c000aa30:	83 ec 1c             	sub    esp,0x1c
c000aa33:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000aa37:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000aa3b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000aa3e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000aa42:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa45:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa49:	89 d8                	mov    eax,ebx
c000aa4b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000aa4e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000aa52:	89 d6                	mov    esi,edx
c000aa54:	89 d7                	mov    edi,edx
c000aa56:	c1 ff 1f             	sar    edi,0x1f
c000aa59:	03 34 24             	add    esi,DWORD PTR [esp]
c000aa5c:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000aa60:	c1 f8 1f             	sar    eax,0x1f
c000aa63:	39 f3                	cmp    ebx,esi
c000aa65:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa69:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa6d:	19 f8                	sbb    eax,edi
c000aa6f:	b8 01 00 00 00       	mov    eax,0x1
c000aa74:	72 6e                	jb     c000aae4 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000aa76:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000aa79:	01 d0                	add    eax,edx
c000aa7b:	99                   	cdq    
c000aa7c:	f7 fb                	idiv   ebx
c000aa7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa82:	29 d3                	sub    ebx,edx
c000aa84:	89 d7                	mov    edi,edx
c000aa86:	89 de                	mov    esi,ebx
c000aa88:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000aa8b:	c1 fb 1f             	sar    ebx,0x1f
c000aa8e:	39 f2                	cmp    edx,esi
c000aa90:	19 d8                	sbb    eax,ebx
c000aa92:	b8 00 00 00 00       	mov    eax,0x0
c000aa97:	72 04                	jb     c000aa9d <Pipe::write(unsigned long long, void*, int*)+0x71>
c000aa99:	89 d0                	mov    eax,edx
c000aa9b:	29 f0                	sub    eax,esi
c000aa9d:	89 d3                	mov    ebx,edx
c000aa9f:	29 c3                	sub    ebx,eax
c000aaa1:	74 0b                	je     c000aaae <Pipe::write(unsigned long long, void*, int*)+0x82>
c000aaa3:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000aaa6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000aaaa:	89 d9                	mov    ecx,ebx
c000aaac:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000aaae:	85 c0                	test   eax,eax
c000aab0:	74 0d                	je     c000aabf <Pipe::write(unsigned long long, void*, int*)+0x93>
c000aab2:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000aab6:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000aab9:	89 de                	mov    esi,ebx
c000aabb:	89 c1                	mov    ecx,eax
c000aabd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000aabf:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000aac2:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000aac7:	75 10                	jne    c000aad9 <Pipe::write(unsigned long long, void*, int*)+0xad>
c000aac9:	83 ec 0c             	sub    esp,0xc
c000aacc:	68 8d 4c 02 c0       	push   0xc0024c8d
c000aad1:	e8 23 a7 00 00       	call   c00151f9 <Krnl::panic(char const*)>
c000aad6:	83 c4 10             	add    esp,0x10
c000aad9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000aadd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000aae0:	89 08                	mov    DWORD PTR [eax],ecx
c000aae2:	31 c0                	xor    eax,eax
c000aae4:	83 c4 1c             	add    esp,0x1c
c000aae7:	5b                   	pop    ebx
c000aae8:	5e                   	pop    esi
c000aae9:	5f                   	pop    edi
c000aaea:	5d                   	pop    ebp
c000aaeb:	c3                   	ret    

c000aaec <Pipe::Pipe(int)>:
c000aaec:	83 ec 0c             	sub    esp,0xc
c000aaef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaf3:	83 ec 08             	sub    esp,0x8
c000aaf6:	6a 00                	push   0x0
c000aaf8:	50                   	push   eax
c000aaf9:	e8 60 0e 00 00       	call   c000b95e <UnixFile::UnixFile(int)>
c000aafe:	83 c4 10             	add    esp,0x10
c000ab01:	ba b4 4c 02 c0       	mov    edx,0xc0024cb4
c000ab06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab0a:	89 10                	mov    DWORD PTR [eax],edx
c000ab0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab10:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab14:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ab17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab1b:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000ab22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab26:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000ab2d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ab31:	83 ec 0c             	sub    esp,0xc
c000ab34:	50                   	push   eax
c000ab35:	e8 ad f2 ff ff       	call   c0009de7 <malloc>
c000ab3a:	83 c4 10             	add    esp,0x10
c000ab3d:	89 c2                	mov    edx,eax
c000ab3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab43:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ab46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab4a:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000ab4e:	90                   	nop
c000ab4f:	83 c4 0c             	add    esp,0xc
c000ab52:	c3                   	ret    
c000ab53:	90                   	nop

c000ab54 <VgaText::isAtty()>:
c000ab54:	b0 01                	mov    al,0x1
c000ab56:	c3                   	ret    
c000ab57:	90                   	nop

c000ab58 <VgaText::~VgaText()>:
c000ab58:	83 ec 0c             	sub    esp,0xc
c000ab5b:	ba 3c 4d 02 c0       	mov    edx,0xc0024d3c
c000ab60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab64:	89 10                	mov    DWORD PTR [eax],edx
c000ab66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab6a:	83 ec 0c             	sub    esp,0xc
c000ab6d:	50                   	push   eax
c000ab6e:	e8 cd 0f 00 00       	call   c000bb40 <UnixFile::~UnixFile()>
c000ab73:	83 c4 10             	add    esp,0x10
c000ab76:	90                   	nop
c000ab77:	83 c4 0c             	add    esp,0xc
c000ab7a:	c3                   	ret    
c000ab7b:	90                   	nop

c000ab7c <VgaText::~VgaText()>:
c000ab7c:	83 ec 0c             	sub    esp,0xc
c000ab7f:	83 ec 0c             	sub    esp,0xc
c000ab82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab86:	e8 cd ff ff ff       	call   c000ab58 <VgaText::~VgaText()>
c000ab8b:	83 c4 10             	add    esp,0x10
c000ab8e:	83 ec 08             	sub    esp,0x8
c000ab91:	68 b4 01 00 00       	push   0x1b4
c000ab96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab9a:	e8 97 24 00 00       	call   c000d036 <operator delete(void*, unsigned long)>
c000ab9f:	83 c4 10             	add    esp,0x10
c000aba2:	83 c4 0c             	add    esp,0xc
c000aba5:	c3                   	ret    

c000aba6 <VgaText::read(unsigned long long, void*, int*)>:
c000aba6:	83 ec 10             	sub    esp,0x10
c000aba9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000abb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abb5:	e8 13 5a 00 00       	call   c00105cd <readKeyboard(VgaText*, char*, unsigned long)>
c000abba:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000abbe:	89 02                	mov    DWORD PTR [edx],eax
c000abc0:	31 c0                	xor    eax,eax
c000abc2:	83 c4 1c             	add    esp,0x1c
c000abc5:	c3                   	ret    

c000abc6 <setTerminalScrollLock(bool)>:
c000abc6:	c3                   	ret    

c000abc7 <addToTerminalCycle(VgaText*)>:
c000abc7:	8b 15 80 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028c80
c000abcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000abd1:	85 d2                	test   edx,edx
c000abd3:	75 09                	jne    c000abde <addToTerminalCycle(VgaText*)+0x17>
c000abd5:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c000abd8:	a3 80 8c 02 c0       	mov    ds:0xc0028c80,eax
c000abdd:	c3                   	ret    
c000abde:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c000abe1:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c000abe4:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c000abe7:	c3                   	ret    

c000abe8 <installVgaTextImplementation()>:
c000abe8:	83 ec 10             	sub    esp,0x10
c000abeb:	6a 20                	push   0x20
c000abed:	6a 00                	push   0x0
c000abef:	68 60 8c 02 c0       	push   0xc0028c60
c000abf4:	e8 9b 5a ff ff       	call   c0000694 <memset>
c000abf9:	83 c4 1c             	add    esp,0x1c
c000abfc:	c3                   	ret    

c000abfd <scrollTerminalScrollLock(int)>:
c000abfd:	c3                   	ret    

c000abfe <VgaText::updateTitle()>:
c000abfe:	53                   	push   ebx
c000abff:	31 c0                	xor    eax,eax
c000ac01:	83 ec 58             	sub    esp,0x58
c000ac04:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000ac08:	89 e1                	mov    ecx,esp
c000ac0a:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000ac0e:	40                   	inc    eax
c000ac0f:	83 f8 50             	cmp    eax,0x50
c000ac12:	75 f6                	jne    c000ac0a <VgaText::updateTitle()+0xc>
c000ac14:	31 c0                	xor    eax,eax
c000ac16:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c000ac1d:	84 db                	test   bl,bl
c000ac1f:	74 06                	je     c000ac27 <VgaText::updateTitle()+0x29>
c000ac21:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000ac24:	40                   	inc    eax
c000ac25:	eb ef                	jmp    c000ac16 <VgaText::updateTitle()+0x18>
c000ac27:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c000ac2a:	85 c0                	test   eax,eax
c000ac2c:	74 09                	je     c000ac37 <VgaText::updateTitle()+0x39>
c000ac2e:	53                   	push   ebx
c000ac2f:	53                   	push   ebx
c000ac30:	51                   	push   ecx
c000ac31:	52                   	push   edx
c000ac32:	ff d0                	call   eax
c000ac34:	83 c4 10             	add    esp,0x10
c000ac37:	83 c4 58             	add    esp,0x58
c000ac3a:	5b                   	pop    ebx
c000ac3b:	c3                   	ret    

c000ac3c <VgaText::load()>:
c000ac3c:	53                   	push   ebx
c000ac3d:	31 c0                	xor    eax,eax
c000ac3f:	83 ec 58             	sub    esp,0x58
c000ac42:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ac46:	89 e2                	mov    edx,esp
c000ac48:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000ac4c:	40                   	inc    eax
c000ac4d:	83 f8 50             	cmp    eax,0x50
c000ac50:	75 f6                	jne    c000ac48 <VgaText::load()+0xc>
c000ac52:	31 c0                	xor    eax,eax
c000ac54:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c000ac5b:	84 c9                	test   cl,cl
c000ac5d:	74 06                	je     c000ac65 <VgaText::load()+0x29>
c000ac5f:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000ac62:	40                   	inc    eax
c000ac63:	eb ef                	jmp    c000ac54 <VgaText::load()+0x18>
c000ac65:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c000ac68:	85 c0                	test   eax,eax
c000ac6a:	74 09                	je     c000ac75 <VgaText::load()+0x39>
c000ac6c:	51                   	push   ecx
c000ac6d:	51                   	push   ecx
c000ac6e:	52                   	push   edx
c000ac6f:	53                   	push   ebx
c000ac70:	ff d0                	call   eax
c000ac72:	83 c4 10             	add    esp,0x10
c000ac75:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c000ac78:	85 c0                	test   eax,eax
c000ac7a:	74 09                	je     c000ac85 <VgaText::load()+0x49>
c000ac7c:	83 ec 0c             	sub    esp,0xc
c000ac7f:	53                   	push   ebx
c000ac80:	ff d0                	call   eax
c000ac82:	83 c4 10             	add    esp,0x10
c000ac85:	83 c4 58             	add    esp,0x58
c000ac88:	5b                   	pop    ebx
c000ac89:	c3                   	ret    

c000ac8a <VgaText::updateCursor()>:
c000ac8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac8e:	39 05 84 8c 02 c0    	cmp    DWORD PTR ds:0xc0028c84,eax
c000ac94:	75 09                	jne    c000ac9f <VgaText::updateCursor()+0x15>
c000ac96:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000ac99:	85 c0                	test   eax,eax
c000ac9b:	74 02                	je     c000ac9f <VgaText::updateCursor()+0x15>
c000ac9d:	ff e0                	jmp    eax
c000ac9f:	c3                   	ret    

c000aca0 <VgaText::doANSI_SGR(int)>:
c000aca0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000aca4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aca8:	85 d2                	test   edx,edx
c000acaa:	75 0b                	jne    c000acb7 <VgaText::doANSI_SGR(int)+0x17>
c000acac:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000acaf:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000acb2:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000acb5:	eb 59                	jmp    c000ad10 <VgaText::doANSI_SGR(int)+0x70>
c000acb7:	83 fa 07             	cmp    edx,0x7
c000acba:	75 0b                	jne    c000acc7 <VgaText::doANSI_SGR(int)+0x27>
c000acbc:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000acbf:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000acc2:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000acc5:	eb 49                	jmp    c000ad10 <VgaText::doANSI_SGR(int)+0x70>
c000acc7:	83 fa 1b             	cmp    edx,0x1b
c000acca:	74 e0                	je     c000acac <VgaText::doANSI_SGR(int)+0xc>
c000accc:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000accf:	83 f9 07             	cmp    ecx,0x7
c000acd2:	77 09                	ja     c000acdd <VgaText::doANSI_SGR(int)+0x3d>
c000acd4:	8b 14 8d 00 80 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd8000]
c000acdb:	eb 20                	jmp    c000acfd <VgaText::doANSI_SGR(int)+0x5d>
c000acdd:	8d 4a d8             	lea    ecx,[edx-0x28]
c000ace0:	83 f9 07             	cmp    ecx,0x7
c000ace3:	77 09                	ja     c000acee <VgaText::doANSI_SGR(int)+0x4e>
c000ace5:	8b 14 8d 00 80 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd8000]
c000acec:	eb 22                	jmp    c000ad10 <VgaText::doANSI_SGR(int)+0x70>
c000acee:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000acf1:	83 f9 07             	cmp    ecx,0x7
c000acf4:	77 0b                	ja     c000ad01 <VgaText::doANSI_SGR(int)+0x61>
c000acf6:	8b 14 95 b8 7e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8148]
c000acfd:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000ad00:	c3                   	ret    
c000ad01:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000ad04:	83 f9 07             	cmp    ecx,0x7
c000ad07:	77 0a                	ja     c000ad13 <VgaText::doANSI_SGR(int)+0x73>
c000ad09:	8b 14 95 90 7e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8170]
c000ad10:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000ad13:	c3                   	ret    

c000ad14 <VgaText::setDefaultBgColour(VgaColour)>:
c000ad14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad18:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad1c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000ad1f:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000ad22:	c3                   	ret    
c000ad23:	90                   	nop

c000ad24 <VgaText::setDefaultFgColour(VgaColour)>:
c000ad24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad2c:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000ad2f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000ad32:	c3                   	ret    
c000ad33:	90                   	nop

c000ad34 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000ad34:	53                   	push   ebx
c000ad35:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ad39:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ad3d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ad41:	51                   	push   ecx
c000ad42:	e8 cd ff ff ff       	call   c000ad14 <VgaText::setDefaultBgColour(VgaColour)>
c000ad47:	58                   	pop    eax
c000ad48:	5a                   	pop    edx
c000ad49:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000ad4d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ad51:	5b                   	pop    ebx
c000ad52:	eb d0                	jmp    c000ad24 <VgaText::setDefaultFgColour(VgaColour)>

c000ad54 <VgaText::setTitleTextColour(VgaColour)>:
c000ad54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad58:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad5c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000ad5f:	e9 9a fe ff ff       	jmp    c000abfe <VgaText::updateTitle()>

c000ad64 <VgaText::setTitleColour(VgaColour)>:
c000ad64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad68:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad6c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000ad6f:	e9 8a fe ff ff       	jmp    c000abfe <VgaText::updateTitle()>

c000ad74 <VgaText::setTitle(char*)>:
c000ad74:	53                   	push   ebx
c000ad75:	83 ec 10             	sub    esp,0x10
c000ad78:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ad7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ad80:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c000ad86:	50                   	push   eax
c000ad87:	e8 c4 59 ff ff       	call   c0000750 <strcpy>
c000ad8c:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000ad90:	83 c4 18             	add    esp,0x18
c000ad93:	5b                   	pop    ebx
c000ad94:	e9 65 fe ff ff       	jmp    c000abfe <VgaText::updateTitle()>
c000ad99:	90                   	nop

c000ad9a <VgaText::combineColours(unsigned char, unsigned char)>:
c000ad9a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000ad9e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000ada3:	83 e0 0f             	and    eax,0xf
c000ada6:	c1 e2 04             	shl    edx,0x4
c000ada9:	09 d0                	or     eax,edx
c000adab:	c3                   	ret    

c000adac <VgaText::scrollScreen()>:
c000adac:	55                   	push   ebp
c000adad:	b9 01 00 00 00       	mov    ecx,0x1
c000adb2:	57                   	push   edi
c000adb3:	56                   	push   esi
c000adb4:	53                   	push   ebx
c000adb5:	83 ec 0c             	sub    esp,0xc
c000adb8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000adbc:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c000adc2:	31 ff                	xor    edi,edi
c000adc4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000adc7:	83 f9 17             	cmp    ecx,0x17
c000adca:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c000adcd:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c000add4:	75 27                	jne    c000adfd <VgaText::scrollScreen()+0x51>
c000add6:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000add9:	01 f5                	add    ebp,esi
c000addb:	f7 c7 01 00 00 00    	test   edi,0x1
c000ade1:	74 16                	je     c000adf9 <VgaText::scrollScreen()+0x4d>
c000ade3:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000ade7:	50                   	push   eax
c000ade8:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000adec:	50                   	push   eax
c000aded:	e8 a8 ff ff ff       	call   c000ad9a <VgaText::combineColours(unsigned char, unsigned char)>
c000adf2:	5a                   	pop    edx
c000adf3:	5a                   	pop    edx
c000adf4:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c000adf7:	eb 04                	jmp    c000adfd <VgaText::scrollScreen()+0x51>
c000adf9:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c000adfd:	47                   	inc    edi
c000adfe:	46                   	inc    esi
c000adff:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000ae05:	75 bd                	jne    c000adc4 <VgaText::scrollScreen()+0x18>
c000ae07:	41                   	inc    ecx
c000ae08:	83 f9 18             	cmp    ecx,0x18
c000ae0b:	75 af                	jne    c000adbc <VgaText::scrollScreen()+0x10>
c000ae0d:	39 1d 84 8c 02 c0    	cmp    DWORD PTR ds:0xc0028c84,ebx
c000ae13:	75 1b                	jne    c000ae30 <VgaText::scrollScreen()+0x84>
c000ae15:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000ae19:	74 05                	je     c000ae20 <VgaText::scrollScreen()+0x74>
c000ae1b:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000ae1e:	eb 10                	jmp    c000ae30 <VgaText::scrollScreen()+0x84>
c000ae20:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c000ae23:	85 c0                	test   eax,eax
c000ae25:	74 09                	je     c000ae30 <VgaText::scrollScreen()+0x84>
c000ae27:	83 ec 0c             	sub    esp,0xc
c000ae2a:	53                   	push   ebx
c000ae2b:	ff d0                	call   eax
c000ae2d:	83 c4 10             	add    esp,0x10
c000ae30:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000ae34:	83 c4 0c             	add    esp,0xc
c000ae37:	5b                   	pop    ebx
c000ae38:	5e                   	pop    esi
c000ae39:	5f                   	pop    edi
c000ae3a:	5d                   	pop    ebp
c000ae3b:	e9 4a fe ff ff       	jmp    c000ac8a <VgaText::updateCursor()>

c000ae40 <VgaText::combineCharAndColour(char, unsigned char)>:
c000ae40:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ae45:	c1 e0 08             	shl    eax,0x8
c000ae48:	89 c2                	mov    edx,eax
c000ae4a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000ae4f:	09 d0                	or     eax,edx
c000ae51:	c3                   	ret    

c000ae52 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000ae52:	56                   	push   esi
c000ae53:	53                   	push   ebx
c000ae54:	51                   	push   ecx
c000ae55:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ae59:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ae5e:	50                   	push   eax
c000ae5f:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ae64:	50                   	push   eax
c000ae65:	e8 30 ff ff ff       	call   c000ad9a <VgaText::combineColours(unsigned char, unsigned char)>
c000ae6a:	5b                   	pop    ebx
c000ae6b:	0f b6 c0             	movzx  eax,al
c000ae6e:	5e                   	pop    esi
c000ae6f:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000ae74:	50                   	push   eax
c000ae75:	53                   	push   ebx
c000ae76:	e8 c5 ff ff ff       	call   c000ae40 <VgaText::combineCharAndColour(char, unsigned char)>
c000ae7b:	5a                   	pop    edx
c000ae7c:	5e                   	pop    esi
c000ae7d:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c000ae80:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000ae86:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000ae8a:	0f b7 d2             	movzx  edx,dx
c000ae8d:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000ae91:	39 0d 84 8c 02 c0    	cmp    DWORD PTR ds:0xc0028c84,ecx
c000ae97:	75 10                	jne    c000aea9 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000ae99:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c000ae9c:	85 c0                	test   eax,eax
c000ae9e:	74 09                	je     c000aea9 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000aea0:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000aea4:	5a                   	pop    edx
c000aea5:	5b                   	pop    ebx
c000aea6:	5e                   	pop    esi
c000aea7:	ff e0                	jmp    eax
c000aea9:	58                   	pop    eax
c000aeaa:	5b                   	pop    ebx
c000aeab:	5e                   	pop    esi
c000aeac:	c3                   	ret    
c000aead:	90                   	nop

c000aeae <VgaText::getCursorX()>:
c000aeae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aeb2:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000aeb5:	c3                   	ret    

c000aeb6 <VgaText::getCursorY()>:
c000aeb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aeba:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000aebd:	c3                   	ret    

c000aebe <VgaText::setCursor(int, int)>:
c000aebe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aec2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000aec6:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000aec9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000aecd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000aed0:	e9 b5 fd ff ff       	jmp    c000ac8a <VgaText::updateCursor()>

c000aed5 <setActiveTerminal(VgaText*)>:
c000aed5:	53                   	push   ebx
c000aed6:	83 ec 08             	sub    esp,0x8
c000aed9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000aedd:	85 db                	test   ebx,ebx
c000aedf:	75 11                	jne    c000aef2 <setActiveTerminal(VgaText*)+0x1d>
c000aee1:	c7 44 24 10 c8 4c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024cc8
c000aee9:	83 c4 08             	add    esp,0x8
c000aeec:	5b                   	pop    ebx
c000aeed:	e9 07 a3 00 00       	jmp    c00151f9 <Krnl::panic(char const*)>
c000aef2:	a1 84 8c 02 c0       	mov    eax,ds:0xc0028c84
c000aef7:	85 c0                	test   eax,eax
c000aef9:	74 0c                	je     c000af07 <setActiveTerminal(VgaText*)+0x32>
c000aefb:	83 ec 0c             	sub    esp,0xc
c000aefe:	50                   	push   eax
c000aeff:	e8 86 fd ff ff       	call   c000ac8a <VgaText::updateCursor()>
c000af04:	83 c4 10             	add    esp,0x10
c000af07:	89 1d 84 8c 02 c0    	mov    DWORD PTR ds:0xc0028c84,ebx
c000af0d:	51                   	push   ecx
c000af0e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000af11:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000af14:	53                   	push   ebx
c000af15:	e8 a4 ff ff ff       	call   c000aebe <VgaText::setCursor(int, int)>
c000af1a:	83 c4 10             	add    esp,0x10
c000af1d:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000af21:	75 07                	jne    c000af2a <setActiveTerminal(VgaText*)+0x55>
c000af23:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c000af2a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000af2e:	83 c4 08             	add    esp,0x8
c000af31:	5b                   	pop    ebx
c000af32:	e9 05 fd ff ff       	jmp    c000ac3c <VgaText::load()>

c000af37 <doTerminalCycle()>:
c000af37:	83 ec 18             	sub    esp,0x18
c000af3a:	a1 80 8c 02 c0       	mov    eax,ds:0xc0028c80
c000af3f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000af42:	50                   	push   eax
c000af43:	a3 80 8c 02 c0       	mov    ds:0xc0028c80,eax
c000af48:	e8 88 ff ff ff       	call   c000aed5 <setActiveTerminal(VgaText*)>
c000af4d:	83 c4 1c             	add    esp,0x1c
c000af50:	c3                   	ret    
c000af51:	90                   	nop

c000af52 <VgaText::setCursorX(int)>:
c000af52:	83 ec 10             	sub    esp,0x10
c000af55:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af59:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000af5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af60:	50                   	push   eax
c000af61:	e8 58 ff ff ff       	call   c000aebe <VgaText::setCursor(int, int)>
c000af66:	83 c4 1c             	add    esp,0x1c
c000af69:	c3                   	ret    

c000af6a <VgaText::setCursorY(int)>:
c000af6a:	83 ec 10             	sub    esp,0x10
c000af6d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af71:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000af75:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000af78:	50                   	push   eax
c000af79:	e8 40 ff ff ff       	call   c000aebe <VgaText::setCursor(int, int)>
c000af7e:	83 c4 1c             	add    esp,0x1c
c000af81:	c3                   	ret    

c000af82 <VgaText::incrementCursor(bool)>:
c000af82:	56                   	push   esi
c000af83:	53                   	push   ebx
c000af84:	51                   	push   ecx
c000af85:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000af89:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000af8d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000af90:	40                   	inc    eax
c000af91:	83 f8 50             	cmp    eax,0x50
c000af94:	74 05                	je     c000af9b <VgaText::incrementCursor(bool)+0x19>
c000af96:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000af99:	eb 24                	jmp    c000afbf <VgaText::incrementCursor(bool)+0x3d>
c000af9b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000af9e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000afa5:	8d 50 01             	lea    edx,[eax+0x1]
c000afa8:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000afab:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000afae:	75 0f                	jne    c000afbf <VgaText::incrementCursor(bool)+0x3d>
c000afb0:	83 ec 0c             	sub    esp,0xc
c000afb3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000afb6:	53                   	push   ebx
c000afb7:	e8 f0 fd ff ff       	call   c000adac <VgaText::scrollScreen()>
c000afbc:	83 c4 10             	add    esp,0x10
c000afbf:	89 f0                	mov    eax,esi
c000afc1:	84 c0                	test   al,al
c000afc3:	74 0c                	je     c000afd1 <VgaText::incrementCursor(bool)+0x4f>
c000afc5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000afc9:	5a                   	pop    edx
c000afca:	5b                   	pop    ebx
c000afcb:	5e                   	pop    esi
c000afcc:	e9 b9 fc ff ff       	jmp    c000ac8a <VgaText::updateCursor()>
c000afd1:	58                   	pop    eax
c000afd2:	5b                   	pop    ebx
c000afd3:	5e                   	pop    esi
c000afd4:	c3                   	ret    
c000afd5:	90                   	nop

c000afd6 <VgaText::decrementCursor(bool)>:
c000afd6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000afda:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000afde:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000afe1:	85 c0                	test   eax,eax
c000afe3:	74 04                	je     c000afe9 <VgaText::decrementCursor(bool)+0x13>
c000afe5:	48                   	dec    eax
c000afe6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000afe9:	84 c9                	test   cl,cl
c000afeb:	74 09                	je     c000aff6 <VgaText::decrementCursor(bool)+0x20>
c000afed:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aff1:	e9 94 fc ff ff       	jmp    c000ac8a <VgaText::updateCursor()>
c000aff6:	c3                   	ret    
c000aff7:	90                   	nop

c000aff8 <VgaText::putchar(char, VgaColour, VgaColour)>:
c000aff8:	53                   	push   ebx
c000aff9:	83 ec 08             	sub    esp,0x8
c000affc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b000:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b004:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b008:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000b00c:	3c 07                	cmp    al,0x7
c000b00e:	75 2a                	jne    c000b03a <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000b010:	a1 3c 8d 02 c0       	mov    eax,ds:0xc0028d3c
c000b015:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b01d:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000b025:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000b02d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b031:	83 c4 08             	add    esp,0x8
c000b034:	5b                   	pop    ebx
c000b035:	e9 24 30 00 00       	jmp    c000e05e <Buzzer::beep(int, int, bool)>
c000b03a:	3c 0d                	cmp    al,0xd
c000b03c:	75 09                	jne    c000b047 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c000b03e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b045:	eb 2c                	jmp    c000b073 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c000b047:	3c 0a                	cmp    al,0xa
c000b049:	75 31                	jne    c000b07c <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c000b04b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000b04e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b055:	8d 50 01             	lea    edx,[eax+0x1]
c000b058:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000b05b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000b05e:	75 0f                	jne    c000b06f <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c000b060:	83 ec 0c             	sub    esp,0xc
c000b063:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000b066:	53                   	push   ebx
c000b067:	e8 40 fd ff ff       	call   c000adac <VgaText::scrollScreen()>
c000b06c:	83 c4 10             	add    esp,0x10
c000b06f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b073:	83 c4 08             	add    esp,0x8
c000b076:	5b                   	pop    ebx
c000b077:	e9 0e fc ff ff       	jmp    c000ac8a <VgaText::updateCursor()>
c000b07c:	3c 08                	cmp    al,0x8
c000b07e:	75 25                	jne    c000b0a5 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c000b080:	50                   	push   eax
c000b081:	50                   	push   eax
c000b082:	6a 01                	push   0x1
c000b084:	53                   	push   ebx
c000b085:	e8 4c ff ff ff       	call   c000afd6 <VgaText::decrementCursor(bool)>
c000b08a:	5a                   	pop    edx
c000b08b:	59                   	pop    ecx
c000b08c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b08f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000b092:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b095:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b098:	6a 20                	push   0x20
c000b09a:	53                   	push   ebx
c000b09b:	e8 b2 fd ff ff       	call   c000ae52 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000b0a0:	83 c4 28             	add    esp,0x28
c000b0a3:	5b                   	pop    ebx
c000b0a4:	c3                   	ret    
c000b0a5:	83 ec 08             	sub    esp,0x8
c000b0a8:	0f be c0             	movsx  eax,al
c000b0ab:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b0ae:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000b0b1:	51                   	push   ecx
c000b0b2:	52                   	push   edx
c000b0b3:	50                   	push   eax
c000b0b4:	53                   	push   ebx
c000b0b5:	e8 98 fd ff ff       	call   c000ae52 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000b0ba:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000b0be:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000b0c6:	83 c4 28             	add    esp,0x28
c000b0c9:	5b                   	pop    ebx
c000b0ca:	e9 b3 fe ff ff       	jmp    c000af82 <VgaText::incrementCursor(bool)>
c000b0cf:	90                   	nop

c000b0d0 <VgaText::doUpdate()>:
c000b0d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0d4:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000b0d7:	85 c0                	test   eax,eax
c000b0d9:	74 02                	je     c000b0dd <VgaText::doUpdate()+0xd>
c000b0db:	ff e0                	jmp    eax
c000b0dd:	c3                   	ret    

c000b0de <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000b0de:	55                   	push   ebp
c000b0df:	31 ed                	xor    ebp,ebp
c000b0e1:	57                   	push   edi
c000b0e2:	56                   	push   esi
c000b0e3:	53                   	push   ebx
c000b0e4:	83 ec 1c             	sub    esp,0x1c
c000b0e7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b0eb:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000b0f0:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000b0f7:	50                   	push   eax
c000b0f8:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000b0fd:	50                   	push   eax
c000b0fe:	e8 97 fc ff ff       	call   c000ad9a <VgaText::combineColours(unsigned char, unsigned char)>
c000b103:	59                   	pop    ecx
c000b104:	0f b6 c0             	movzx  eax,al
c000b107:	5e                   	pop    esi
c000b108:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b10d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b111:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000b114:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b118:	0f b7 f6             	movzx  esi,si
c000b11b:	01 f6                	add    esi,esi
c000b11d:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b120:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000b123:	84 c0                	test   al,al
c000b125:	0f 84 fd 00 00 00    	je     c000b228 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c000b12b:	3c 0d                	cmp    al,0xd
c000b12d:	75 0c                	jne    c000b13b <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c000b12f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b136:	e9 e7 00 00 00       	jmp    c000b222 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000b13b:	3c 0a                	cmp    al,0xa
c000b13d:	75 47                	jne    c000b186 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c000b13f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000b142:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b149:	8d 48 01             	lea    ecx,[eax+0x1]
c000b14c:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000b14f:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c000b152:	75 0f                	jne    c000b163 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c000b154:	83 ec 0c             	sub    esp,0xc
c000b157:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000b15a:	53                   	push   ebx
c000b15b:	e8 4c fc ff ff       	call   c000adac <VgaText::scrollScreen()>
c000b160:	83 c4 10             	add    esp,0x10
c000b163:	83 ec 0c             	sub    esp,0xc
c000b166:	31 ed                	xor    ebp,ebp
c000b168:	53                   	push   ebx
c000b169:	e8 1c fb ff ff       	call   c000ac8a <VgaText::updateCursor()>
c000b16e:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b173:	83 c4 10             	add    esp,0x10
c000b176:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000b179:	0f b7 f6             	movzx  esi,si
c000b17c:	01 f6                	add    esi,esi
c000b17e:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b181:	e9 9c 00 00 00       	jmp    c000b222 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000b186:	3c 08                	cmp    al,0x8
c000b188:	75 35                	jne    c000b1bf <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c000b18a:	56                   	push   esi
c000b18b:	56                   	push   esi
c000b18c:	6a 01                	push   0x1
c000b18e:	53                   	push   ebx
c000b18f:	e8 42 fe ff ff       	call   c000afd6 <VgaText::decrementCursor(bool)>
c000b194:	58                   	pop    eax
c000b195:	5a                   	pop    edx
c000b196:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b199:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000b19c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b19f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b1a2:	6a 20                	push   0x20
c000b1a4:	53                   	push   ebx
c000b1a5:	e8 a8 fc ff ff       	call   c000ae52 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000b1aa:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b1af:	83 c4 20             	add    esp,0x20
c000b1b2:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000b1b5:	0f b7 f6             	movzx  esi,si
c000b1b8:	01 f6                	add    esi,esi
c000b1ba:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b1bd:	eb 63                	jmp    c000b222 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000b1bf:	51                   	push   ecx
c000b1c0:	51                   	push   ecx
c000b1c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1c5:	50                   	push   eax
c000b1c6:	e8 75 fc ff ff       	call   c000ae40 <VgaText::combineCharAndColour(char, unsigned char)>
c000b1cb:	83 c4 10             	add    esp,0x10
c000b1ce:	66 89 06             	mov    WORD PTR [esi],ax
c000b1d1:	39 1d 84 8c 02 c0    	cmp    DWORD PTR ds:0xc0028c84,ebx
c000b1d7:	75 21                	jne    c000b1fa <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000b1d9:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c000b1dc:	85 c0                	test   eax,eax
c000b1de:	74 1a                	je     c000b1fa <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000b1e0:	52                   	push   edx
c000b1e1:	52                   	push   edx
c000b1e2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b1e5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000b1e8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b1ec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b1f0:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c000b1f3:	51                   	push   ecx
c000b1f4:	53                   	push   ebx
c000b1f5:	ff d0                	call   eax
c000b1f7:	83 c4 20             	add    esp,0x20
c000b1fa:	83 c6 02             	add    esi,0x2
c000b1fd:	50                   	push   eax
c000b1fe:	50                   	push   eax
c000b1ff:	6a 00                	push   0x0
c000b201:	53                   	push   ebx
c000b202:	e8 7b fd ff ff       	call   c000af82 <VgaText::incrementCursor(bool)>
c000b207:	83 c4 10             	add    esp,0x10
c000b20a:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c000b20e:	75 0d                	jne    c000b21d <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c000b210:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b215:	0f b7 f6             	movzx  esi,si
c000b218:	01 f6                	add    esi,esi
c000b21a:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b21d:	bd 01 00 00 00       	mov    ebp,0x1
c000b222:	47                   	inc    edi
c000b223:	e9 f8 fe ff ff       	jmp    c000b120 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c000b228:	83 ec 0c             	sub    esp,0xc
c000b22b:	53                   	push   ebx
c000b22c:	e8 59 fa ff ff       	call   c000ac8a <VgaText::updateCursor()>
c000b231:	83 c4 10             	add    esp,0x10
c000b234:	89 e8                	mov    eax,ebp
c000b236:	84 c0                	test   al,al
c000b238:	74 0c                	je     c000b246 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c000b23a:	83 ec 0c             	sub    esp,0xc
c000b23d:	53                   	push   ebx
c000b23e:	e8 8d fe ff ff       	call   c000b0d0 <VgaText::doUpdate()>
c000b243:	83 c4 10             	add    esp,0x10
c000b246:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000b24d:	83 c4 1c             	add    esp,0x1c
c000b250:	5b                   	pop    ebx
c000b251:	5e                   	pop    esi
c000b252:	5f                   	pop    edi
c000b253:	5d                   	pop    ebp
c000b254:	c3                   	ret    
c000b255:	90                   	nop

c000b256 <VgaText::clearScreen()>:
c000b256:	57                   	push   edi
c000b257:	56                   	push   esi
c000b258:	31 f6                	xor    esi,esi
c000b25a:	53                   	push   ebx
c000b25b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b25f:	52                   	push   edx
c000b260:	6a 00                	push   0x0
c000b262:	6a 00                	push   0x0
c000b264:	53                   	push   ebx
c000b265:	e8 54 fc ff ff       	call   c000aebe <VgaText::setCursor(int, int)>
c000b26a:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000b271:	83 c4 10             	add    esp,0x10
c000b274:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c000b277:	7e 20                	jle    c000b299 <VgaText::clearScreen()+0x43>
c000b279:	31 ff                	xor    edi,edi
c000b27b:	50                   	push   eax
c000b27c:	50                   	push   eax
c000b27d:	56                   	push   esi
c000b27e:	57                   	push   edi
c000b27f:	47                   	inc    edi
c000b280:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b283:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b286:	6a 20                	push   0x20
c000b288:	53                   	push   ebx
c000b289:	e8 c4 fb ff ff       	call   c000ae52 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000b28e:	83 c4 20             	add    esp,0x20
c000b291:	83 ff 50             	cmp    edi,0x50
c000b294:	75 e5                	jne    c000b27b <VgaText::clearScreen()+0x25>
c000b296:	46                   	inc    esi
c000b297:	eb db                	jmp    c000b274 <VgaText::clearScreen()+0x1e>
c000b299:	83 ec 0c             	sub    esp,0xc
c000b29c:	53                   	push   ebx
c000b29d:	e8 2e fe ff ff       	call   c000b0d0 <VgaText::doUpdate()>
c000b2a2:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000b2a9:	83 c4 10             	add    esp,0x10
c000b2ac:	5b                   	pop    ebx
c000b2ad:	5e                   	pop    esi
c000b2ae:	5f                   	pop    edi
c000b2af:	c3                   	ret    

c000b2b0 <VgaText::putchar(char)>:
c000b2b0:	56                   	push   esi
c000b2b1:	53                   	push   ebx
c000b2b2:	83 ec 14             	sub    esp,0x14
c000b2b5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b2b9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b2bd:	3c 5b                	cmp    al,0x5b
c000b2bf:	75 18                	jne    c000b2d9 <VgaText::putchar(char)+0x29>
c000b2c1:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000b2c5:	74 1f                	je     c000b2e6 <VgaText::putchar(char)+0x36>
c000b2c7:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000b2cd:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000b2d4:	e9 bd 00 00 00       	jmp    c000b396 <VgaText::putchar(char)+0xe6>
c000b2d9:	3c 1b                	cmp    al,0x1b
c000b2db:	75 09                	jne    c000b2e6 <VgaText::putchar(char)+0x36>
c000b2dd:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000b2e1:	e9 b0 00 00 00       	jmp    c000b396 <VgaText::putchar(char)+0xe6>
c000b2e6:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000b2e9:	84 c9                	test   cl,cl
c000b2eb:	0f 84 92 00 00 00    	je     c000b383 <VgaText::putchar(char)+0xd3>
c000b2f1:	8d 50 c0             	lea    edx,[eax-0x40]
c000b2f4:	80 fa 3e             	cmp    dl,0x3e
c000b2f7:	77 76                	ja     c000b36f <VgaText::putchar(char)+0xbf>
c000b2f9:	3c 6d                	cmp    al,0x6d
c000b2fb:	75 47                	jne    c000b344 <VgaText::putchar(char)+0x94>
c000b2fd:	31 f6                	xor    esi,esi
c000b2ff:	31 d2                	xor    edx,edx
c000b301:	31 c0                	xor    eax,eax
c000b303:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000b306:	7e 2d                	jle    c000b335 <VgaText::putchar(char)+0x85>
c000b308:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c000b30d:	80 fa 3b             	cmp    dl,0x3b
c000b310:	75 17                	jne    c000b329 <VgaText::putchar(char)+0x79>
c000b312:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000b316:	50                   	push   eax
c000b317:	53                   	push   ebx
c000b318:	e8 83 f9 ff ff       	call   c000aca0 <VgaText::doANSI_SGR(int)>
c000b31d:	59                   	pop    ecx
c000b31e:	31 d2                	xor    edx,edx
c000b320:	58                   	pop    eax
c000b321:	31 c0                	xor    eax,eax
c000b323:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000b327:	eb 09                	jmp    c000b332 <VgaText::putchar(char)+0x82>
c000b329:	6b c0 0a             	imul   eax,eax,0xa
c000b32c:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000b330:	88 ca                	mov    dl,cl
c000b332:	46                   	inc    esi
c000b333:	eb ce                	jmp    c000b303 <VgaText::putchar(char)+0x53>
c000b335:	84 d2                	test   dl,dl
c000b337:	74 2e                	je     c000b367 <VgaText::putchar(char)+0xb7>
c000b339:	50                   	push   eax
c000b33a:	53                   	push   ebx
c000b33b:	e8 60 f9 ff ff       	call   c000aca0 <VgaText::doANSI_SGR(int)>
c000b340:	58                   	pop    eax
c000b341:	5a                   	pop    edx
c000b342:	eb 23                	jmp    c000b367 <VgaText::putchar(char)+0xb7>
c000b344:	3c 4a                	cmp    al,0x4a
c000b346:	75 1f                	jne    c000b367 <VgaText::putchar(char)+0xb7>
c000b348:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c000b34c:	75 19                	jne    c000b367 <VgaText::putchar(char)+0xb7>
c000b34e:	83 ec 0c             	sub    esp,0xc
c000b351:	53                   	push   ebx
c000b352:	e8 ff fe ff ff       	call   c000b256 <VgaText::clearScreen()>
c000b357:	83 c4 0c             	add    esp,0xc
c000b35a:	6a 00                	push   0x0
c000b35c:	6a 00                	push   0x0
c000b35e:	53                   	push   ebx
c000b35f:	e8 5a fb ff ff       	call   c000aebe <VgaText::setCursor(int, int)>
c000b364:	83 c4 10             	add    esp,0x10
c000b367:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c000b36d:	eb 27                	jmp    c000b396 <VgaText::putchar(char)+0xe6>
c000b36f:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c000b372:	83 fa 0e             	cmp    edx,0xe
c000b375:	7f 1f                	jg     c000b396 <VgaText::putchar(char)+0xe6>
c000b377:	8d 4a 01             	lea    ecx,[edx+0x1]
c000b37a:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c000b37d:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c000b381:	eb 13                	jmp    c000b396 <VgaText::putchar(char)+0xe6>
c000b383:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b386:	0f be c0             	movsx  eax,al
c000b389:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b38c:	50                   	push   eax
c000b38d:	53                   	push   ebx
c000b38e:	e8 65 fc ff ff       	call   c000aff8 <VgaText::putchar(char, VgaColour, VgaColour)>
c000b393:	83 c4 10             	add    esp,0x10
c000b396:	83 c4 14             	add    esp,0x14
c000b399:	5b                   	pop    ebx
c000b39a:	5e                   	pop    esi
c000b39b:	c3                   	ret    

c000b39c <VgaText::putx(unsigned int)>:
c000b39c:	57                   	push   edi
c000b39d:	b9 11 00 00 00       	mov    ecx,0x11
c000b3a2:	56                   	push   esi
c000b3a3:	be d6 4c 02 c0       	mov    esi,0xc0024cd6
c000b3a8:	53                   	push   ebx
c000b3a9:	83 ec 20             	sub    esp,0x20
c000b3ac:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b3b0:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000b3b4:	fc                   	cld    
c000b3b5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b3b7:	be 08 00 00 00       	mov    esi,0x8
c000b3bc:	50                   	push   eax
c000b3bd:	50                   	push   eax
c000b3be:	89 d8                	mov    eax,ebx
c000b3c0:	c1 e3 04             	shl    ebx,0x4
c000b3c3:	c1 e8 1c             	shr    eax,0x1c
c000b3c6:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000b3cb:	50                   	push   eax
c000b3cc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b3d0:	e8 db fe ff ff       	call   c000b2b0 <VgaText::putchar(char)>
c000b3d5:	83 c4 10             	add    esp,0x10
c000b3d8:	4e                   	dec    esi
c000b3d9:	75 e1                	jne    c000b3bc <VgaText::putx(unsigned int)+0x20>
c000b3db:	83 c4 20             	add    esp,0x20
c000b3de:	5b                   	pop    ebx
c000b3df:	5e                   	pop    esi
c000b3e0:	5f                   	pop    edi
c000b3e1:	c3                   	ret    

c000b3e2 <VgaText::puts(char const*)>:
c000b3e2:	53                   	push   ebx
c000b3e3:	83 ec 08             	sub    esp,0x8
c000b3e6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b3ea:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000b3ed:	84 c0                	test   al,al
c000b3ef:	74 12                	je     c000b403 <VgaText::puts(char const*)+0x21>
c000b3f1:	43                   	inc    ebx
c000b3f2:	51                   	push   ecx
c000b3f3:	51                   	push   ecx
c000b3f4:	50                   	push   eax
c000b3f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3f9:	e8 b2 fe ff ff       	call   c000b2b0 <VgaText::putchar(char)>
c000b3fe:	83 c4 10             	add    esp,0x10
c000b401:	eb e7                	jmp    c000b3ea <VgaText::puts(char const*)+0x8>
c000b403:	83 c4 08             	add    esp,0x8
c000b406:	5b                   	pop    ebx
c000b407:	c3                   	ret    

c000b408 <VgaText::VgaText(char const*)>:
c000b408:	57                   	push   edi
c000b409:	56                   	push   esi
c000b40a:	53                   	push   ebx
c000b40b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b40f:	83 ec 08             	sub    esp,0x8
c000b412:	6a 00                	push   0x0
c000b414:	50                   	push   eax
c000b415:	e8 44 05 00 00       	call   c000b95e <UnixFile::UnixFile(int)>
c000b41a:	83 c4 10             	add    esp,0x10
c000b41d:	ba 3c 4d 02 c0       	mov    edx,0xc0024d3c
c000b422:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b426:	89 10                	mov    DWORD PTR [eax],edx
c000b428:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b42c:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000b433:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b437:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c000b43e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b442:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000b446:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b44a:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c000b44e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b452:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000b459:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b45d:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c000b464:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b468:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c000b46f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b473:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000b47a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b47e:	8d 50 60             	lea    edx,[eax+0x60]
c000b481:	bb 60 8c 02 c0       	mov    ebx,0xc0028c60
c000b486:	b8 08 00 00 00       	mov    eax,0x8
c000b48b:	fc                   	cld    
c000b48c:	89 d7                	mov    edi,edx
c000b48e:	89 de                	mov    esi,ebx
c000b490:	89 c1                	mov    ecx,eax
c000b492:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b494:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b498:	05 82 00 00 00       	add    eax,0x82
c000b49d:	83 ec 08             	sub    esp,0x8
c000b4a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4a4:	50                   	push   eax
c000b4a5:	e8 a6 52 ff ff       	call   c0000750 <strcpy>
c000b4aa:	83 c4 10             	add    esp,0x10
c000b4ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4b1:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c000b4b8:	83 ec 0c             	sub    esp,0xc
c000b4bb:	6a 01                	push   0x1
c000b4bd:	e8 df 08 00 00       	call   c000bda1 <Virt::allocateKernelVirtualPages(int)>
c000b4c2:	83 c4 10             	add    esp,0x10
c000b4c5:	89 c2                	mov    edx,eax
c000b4c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4cb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b4ce:	8b 1d 34 8d 02 c0    	mov    ebx,DWORD PTR ds:0xc0028d34
c000b4d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4d8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b4db:	89 c6                	mov    esi,eax
c000b4dd:	e8 bc ef ff ff       	call   c000a49e <Phys::allocatePage()>
c000b4e2:	68 05 0c 00 00       	push   0xc05
c000b4e7:	56                   	push   esi
c000b4e8:	50                   	push   eax
c000b4e9:	53                   	push   ebx
c000b4ea:	e8 1d 0f 00 00       	call   c000c40c <VAS::mapPage(unsigned long, unsigned long, int)>
c000b4ef:	83 c4 10             	add    esp,0x10
c000b4f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4f6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b4f9:	83 ec 04             	sub    esp,0x4
c000b4fc:	68 00 0f 00 00       	push   0xf00
c000b501:	6a 00                	push   0x0
c000b503:	50                   	push   eax
c000b504:	e8 8b 51 ff ff       	call   c0000694 <memset>
c000b509:	83 c4 10             	add    esp,0x10
c000b50c:	83 ec 04             	sub    esp,0x4
c000b50f:	6a 00                	push   0x0
c000b511:	6a 07                	push   0x7
c000b513:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b517:	e8 18 f8 ff ff       	call   c000ad34 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000b51c:	83 c4 10             	add    esp,0x10
c000b51f:	83 ec 04             	sub    esp,0x4
c000b522:	6a 00                	push   0x0
c000b524:	6a 00                	push   0x0
c000b526:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b52a:	e8 8f f9 ff ff       	call   c000aebe <VgaText::setCursor(int, int)>
c000b52f:	83 c4 10             	add    esp,0x10
c000b532:	83 ec 0c             	sub    esp,0xc
c000b535:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b539:	e8 18 fd ff ff       	call   c000b256 <VgaText::clearScreen()>
c000b53e:	83 c4 10             	add    esp,0x10
c000b541:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b545:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c000b549:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b54d:	05 02 01 00 00       	add    eax,0x102
c000b552:	83 ec 04             	sub    esp,0x4
c000b555:	6a 30                	push   0x30
c000b557:	6a 00                	push   0x0
c000b559:	50                   	push   eax
c000b55a:	e8 35 51 ff ff       	call   c0000694 <memset>
c000b55f:	83 c4 10             	add    esp,0x10
c000b562:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b566:	05 32 01 00 00       	add    eax,0x132
c000b56b:	83 ec 04             	sub    esp,0x4
c000b56e:	68 80 00 00 00       	push   0x80
c000b573:	6a 00                	push   0x0
c000b575:	50                   	push   eax
c000b576:	e8 19 51 ff ff       	call   c0000694 <memset>
c000b57b:	83 c4 10             	add    esp,0x10
c000b57e:	90                   	nop
c000b57f:	5b                   	pop    ebx
c000b580:	5e                   	pop    esi
c000b581:	5f                   	pop    edi
c000b582:	c3                   	ret    
c000b583:	90                   	nop

c000b584 <VgaText::receiveKey(unsigned char)>:
c000b584:	55                   	push   ebp
c000b585:	57                   	push   edi
c000b586:	56                   	push   esi
c000b587:	53                   	push   ebx
c000b588:	83 ec 1c             	sub    esp,0x1c
c000b58b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b58f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b593:	84 db                	test   bl,bl
c000b595:	0f 84 c6 00 00 00    	je     c000b661 <VgaText::receiveKey(unsigned char)+0xdd>
c000b59b:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c000b5a1:	80 fb 08             	cmp    bl,0x8
c000b5a4:	75 2c                	jne    c000b5d2 <VgaText::receiveKey(unsigned char)+0x4e>
c000b5a6:	83 ec 0c             	sub    esp,0xc
c000b5a9:	57                   	push   edi
c000b5aa:	e8 01 51 ff ff       	call   c00006b0 <strlen>
c000b5af:	83 c4 10             	add    esp,0x10
c000b5b2:	85 c0                	test   eax,eax
c000b5b4:	74 41                	je     c000b5f7 <VgaText::receiveKey(unsigned char)+0x73>
c000b5b6:	50                   	push   eax
c000b5b7:	50                   	push   eax
c000b5b8:	6a 08                	push   0x8
c000b5ba:	56                   	push   esi
c000b5bb:	e8 f0 fc ff ff       	call   c000b2b0 <VgaText::putchar(char)>
c000b5c0:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b5c3:	e8 e8 50 ff ff       	call   c00006b0 <strlen>
c000b5c8:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c000b5d0:	eb 22                	jmp    c000b5f4 <VgaText::receiveKey(unsigned char)+0x70>
c000b5d2:	0f be c3             	movsx  eax,bl
c000b5d5:	52                   	push   edx
c000b5d6:	52                   	push   edx
c000b5d7:	50                   	push   eax
c000b5d8:	56                   	push   esi
c000b5d9:	e8 d2 fc ff ff       	call   c000b2b0 <VgaText::putchar(char)>
c000b5de:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000b5e2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000b5e7:	59                   	pop    ecx
c000b5e8:	5d                   	pop    ebp
c000b5e9:	8d 44 24 16          	lea    eax,[esp+0x16]
c000b5ed:	50                   	push   eax
c000b5ee:	57                   	push   edi
c000b5ef:	e8 9c 52 ff ff       	call   c0000890 <strcat>
c000b5f4:	83 c4 10             	add    esp,0x10
c000b5f7:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c000b5fe:	75 05                	jne    c000b605 <VgaText::receiveKey(unsigned char)+0x81>
c000b600:	80 fb 0a             	cmp    bl,0xa
c000b603:	75 50                	jne    c000b655 <VgaText::receiveKey(unsigned char)+0xd1>
c000b605:	83 ec 0c             	sub    esp,0xc
c000b608:	8d 9e 32 01 00 00    	lea    ebx,[esi+0x132]
c000b60e:	53                   	push   ebx
c000b60f:	e8 9c 50 ff ff       	call   c00006b0 <strlen>
c000b614:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b617:	89 c5                	mov    ebp,eax
c000b619:	e8 92 50 ff ff       	call   c00006b0 <strlen>
c000b61e:	83 c4 10             	add    esp,0x10
c000b621:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000b625:	3d 80 00 00 00       	cmp    eax,0x80
c000b62a:	76 10                	jbe    c000b63c <VgaText::receiveKey(unsigned char)+0xb8>
c000b62c:	83 ec 0c             	sub    esp,0xc
c000b62f:	68 e7 4c 02 c0       	push   0xc0024ce7
c000b634:	e8 c0 9b 00 00       	call   c00151f9 <Krnl::panic(char const*)>
c000b639:	83 c4 10             	add    esp,0x10
c000b63c:	50                   	push   eax
c000b63d:	50                   	push   eax
c000b63e:	57                   	push   edi
c000b63f:	53                   	push   ebx
c000b640:	e8 4b 52 ff ff       	call   c0000890 <strcat>
c000b645:	83 c4 0c             	add    esp,0xc
c000b648:	6a 30                	push   0x30
c000b64a:	6a 00                	push   0x0
c000b64c:	57                   	push   edi
c000b64d:	e8 42 50 ff ff       	call   c0000694 <memset>
c000b652:	83 c4 10             	add    esp,0x10
c000b655:	83 ec 0c             	sub    esp,0xc
c000b658:	56                   	push   esi
c000b659:	e8 72 fa ff ff       	call   c000b0d0 <VgaText::doUpdate()>
c000b65e:	83 c4 10             	add    esp,0x10
c000b661:	83 c4 1c             	add    esp,0x1c
c000b664:	5b                   	pop    ebx
c000b665:	5e                   	pop    esi
c000b666:	5f                   	pop    edi
c000b667:	5d                   	pop    ebp
c000b668:	c3                   	ret    
c000b669:	90                   	nop

c000b66a <VgaText::write(unsigned long long, void*, int*)>:
c000b66a:	55                   	push   ebp
c000b66b:	57                   	push   edi
c000b66c:	56                   	push   esi
c000b66d:	53                   	push   ebx
c000b66e:	83 ec 0c             	sub    esp,0xc
c000b671:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000b675:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000b679:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000b67d:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c000b684:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000b687:	39 eb                	cmp    ebx,ebp
c000b689:	74 13                	je     c000b69e <VgaText::write(unsigned long long, void*, int*)+0x34>
c000b68b:	43                   	inc    ebx
c000b68c:	50                   	push   eax
c000b68d:	50                   	push   eax
c000b68e:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000b692:	50                   	push   eax
c000b693:	56                   	push   esi
c000b694:	e8 17 fc ff ff       	call   c000b2b0 <VgaText::putchar(char)>
c000b699:	83 c4 10             	add    esp,0x10
c000b69c:	eb e9                	jmp    c000b687 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000b69e:	83 ec 0c             	sub    esp,0xc
c000b6a1:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c000b6a8:	56                   	push   esi
c000b6a9:	e8 22 fa ff ff       	call   c000b0d0 <VgaText::doUpdate()>
c000b6ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b6b2:	89 38                	mov    DWORD PTR [eax],edi
c000b6b4:	83 c4 1c             	add    esp,0x1c
c000b6b7:	31 c0                	xor    eax,eax
c000b6b9:	5b                   	pop    ebx
c000b6ba:	5e                   	pop    esi
c000b6bb:	5f                   	pop    edi
c000b6bc:	5d                   	pop    ebp
c000b6bd:	c3                   	ret    

c000b6be <newTerminal(char*)>:
c000b6be:	83 ec 28             	sub    esp,0x28
c000b6c1:	68 b4 01 00 00       	push   0x1b4
c000b6c6:	e8 1c e7 ff ff       	call   c0009de7 <malloc>
c000b6cb:	5a                   	pop    edx
c000b6cc:	59                   	pop    ecx
c000b6cd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b6d1:	50                   	push   eax
c000b6d2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b6d6:	e8 2d fd ff ff       	call   c000b408 <VgaText::VgaText(char const*)>
c000b6db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6df:	83 c4 2c             	add    esp,0x2c
c000b6e2:	c3                   	ret    
c000b6e3:	90                   	nop

c000b6e4 <TSS::TSS()>:
c000b6e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6e8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b6ef:	90                   	nop
c000b6f0:	c3                   	ret    
c000b6f1:	90                   	nop
c000b6f2:	66 90                	xchg   ax,ax

c000b6f4 <TSS::setESP(unsigned long)>:
c000b6f4:	55                   	push   ebp
c000b6f5:	89 e5                	mov    ebp,esp
c000b6f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6fd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b700:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b703:	90                   	nop
c000b704:	5d                   	pop    ebp
c000b705:	c3                   	ret    
c000b706:	66 90                	xchg   ax,ax

c000b708 <TSS::flush()>:
c000b708:	55                   	push   ebp
c000b709:	89 e5                	mov    ebp,esp
c000b70b:	83 ec 10             	sub    esp,0x10
c000b70e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b711:	8b 00                	mov    eax,DWORD PTR [eax]
c000b713:	83 c8 03             	or     eax,0x3
c000b716:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000b71a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000b71e:	66 89 d0             	mov    ax,dx
c000b721:	0f 00 d8             	ltr    ax
c000b724:	90                   	nop
c000b725:	c9                   	leave  
c000b726:	c3                   	ret    
c000b727:	90                   	nop

c000b728 <TSS::setup(unsigned long, unsigned long)>:
c000b728:	55                   	push   ebp
c000b729:	89 e5                	mov    ebp,esp
c000b72b:	83 ec 18             	sub    esp,0x18
c000b72e:	83 ec 0c             	sub    esp,0xc
c000b731:	6a 68                	push   0x68
c000b733:	e8 af e6 ff ff       	call   c0009de7 <malloc>
c000b738:	83 c4 10             	add    esp,0x10
c000b73b:	89 c2                	mov    edx,eax
c000b73d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b740:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b743:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b746:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b749:	83 ec 04             	sub    esp,0x4
c000b74c:	6a 68                	push   0x68
c000b74e:	6a 00                	push   0x0
c000b750:	50                   	push   eax
c000b751:	e8 3e 4f ff ff       	call   c0000694 <memset>
c000b756:	83 c4 10             	add    esp,0x10
c000b759:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b75c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b75f:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000b765:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b768:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b76b:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000b771:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b774:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b777:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b77a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b77d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b780:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b783:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000b789:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b78c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b78f:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000b795:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b798:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b79b:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000b7a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b7a7:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000b7ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b7b3:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c000b7b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b7bf:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000b7c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b7cb:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000b7ce:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000b7d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b7d7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b7da:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b7dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b7e3:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000b7ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7ed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b7f0:	0f 20 da             	mov    edx,cr3
c000b7f3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000b7f6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000b7f9:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000b7fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7ff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b802:	83 ec 08             	sub    esp,0x8
c000b805:	50                   	push   eax
c000b806:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b809:	50                   	push   eax
c000b80a:	e8 bf dd ff ff       	call   c00095ce <GDTEntry::setBase(unsigned int)>
c000b80f:	83 c4 10             	add    esp,0x10
c000b812:	83 ec 08             	sub    esp,0x8
c000b815:	6a 68                	push   0x68
c000b817:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b81a:	50                   	push   eax
c000b81b:	e8 ca dd ff ff       	call   c00095ea <GDTEntry::setLimit(unsigned int)>
c000b820:	83 c4 10             	add    esp,0x10
c000b823:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000b827:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b82a:	83 e0 0f             	and    eax,0xf
c000b82d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b830:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b833:	83 c8 40             	or     eax,0x40
c000b836:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b839:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c000b83e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b844:	05 78 01 00 00       	add    eax,0x178
c000b849:	83 ec 04             	sub    esp,0x4
c000b84c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000b84f:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000b852:	50                   	push   eax
c000b853:	e8 c6 dd ff ff       	call   c000961e <GDT::addEntry(GDTEntry)>
c000b858:	83 c4 10             	add    esp,0x10
c000b85b:	89 c2                	mov    edx,eax
c000b85d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b860:	89 10                	mov    DWORD PTR [eax],edx
c000b862:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c000b867:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b86d:	05 78 01 00 00       	add    eax,0x178
c000b872:	83 ec 0c             	sub    esp,0xc
c000b875:	50                   	push   eax
c000b876:	e8 cd dd ff ff       	call   c0009648 <GDT::flush()>
c000b87b:	83 c4 10             	add    esp,0x10
c000b87e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b881:	8b 00                	mov    eax,DWORD PTR [eax]
c000b883:	c9                   	leave  
c000b884:	c3                   	ret    
c000b885:	90                   	nop

c000b886 <ReservedFilename::read(unsigned long long, void*, int*)>:
c000b886:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b88a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b88e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b891:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b896:	75 08                	jne    c000b8a0 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000b898:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b89e:	eb 38                	jmp    c000b8d8 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000b8a0:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b8a5:	75 17                	jne    c000b8be <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000b8a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b8ac:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b8af:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b8b5:	8b 10                	mov    edx,DWORD PTR [eax]
c000b8b7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b8bb:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000b8be:	89 c1                	mov    ecx,eax
c000b8c0:	83 e1 fd             	and    ecx,0xfffffffd
c000b8c3:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000b8c9:	74 cd                	je     c000b898 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b8cb:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b8d0:	83 e0 ef             	and    eax,0xffffffef
c000b8d3:	83 f8 08             	cmp    eax,0x8
c000b8d6:	76 c0                	jbe    c000b898 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b8d8:	31 c0                	xor    eax,eax
c000b8da:	c3                   	ret    
c000b8db:	90                   	nop

c000b8dc <ReservedFilename::isAtty()>:
c000b8dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8e0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b8e3:	31 c0                	xor    eax,eax
c000b8e5:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000b8eb:	74 09                	je     c000b8f6 <ReservedFilename::isAtty()+0x1a>
c000b8ed:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000b8f3:	0f 94 c0             	sete   al
c000b8f6:	c3                   	ret    
c000b8f7:	90                   	nop

c000b8f8 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000b8f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8fc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b900:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b903:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b907:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b90c:	75 08                	jne    c000b916 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000b90e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b914:	eb 3d                	jmp    c000b953 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b916:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b91b:	75 17                	jne    c000b934 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000b91d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b922:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b925:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b92b:	8b 10                	mov    edx,DWORD PTR [eax]
c000b92d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b931:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000b934:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000b939:	75 04                	jne    c000b93f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000b93b:	89 0a                	mov    DWORD PTR [edx],ecx
c000b93d:	eb 14                	jmp    c000b953 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b93f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000b944:	74 c8                	je     c000b90e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b946:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b94b:	83 e0 ef             	and    eax,0xffffffef
c000b94e:	83 f8 08             	cmp    eax,0x8
c000b951:	76 bb                	jbe    c000b90e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b953:	31 c0                	xor    eax,eax
c000b955:	c3                   	ret    

c000b956 <UnixFile::getFileDescriptor()>:
c000b956:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b95a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b95d:	c3                   	ret    

c000b95e <UnixFile::UnixFile(int)>:
c000b95e:	53                   	push   ebx
c000b95f:	83 ec 28             	sub    esp,0x28
c000b962:	ba 04 4e 02 c0       	mov    edx,0xc0024e04
c000b967:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b96b:	89 10                	mov    DWORD PTR [eax],edx
c000b96d:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c000b975:	0f 8f 8c 01 00 00    	jg     c000bb07 <UnixFile::UnixFile(int)+0x1a9>
c000b97b:	a1 40 80 02 c0       	mov    eax,ds:0xc0028040
c000b980:	8d 50 01             	lea    edx,[eax+0x1]
c000b983:	89 15 40 80 02 c0    	mov    DWORD PTR ds:0xc0028040,edx
c000b989:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b98d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000b990:	83 ec 08             	sub    esp,0x8
c000b993:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b997:	68 18 8d 02 c0       	push   0xc0028d18
c000b99c:	e8 27 79 01 00       	call   c00232c8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b9a1:	83 c4 10             	add    esp,0x10
c000b9a4:	a0 14 8d 02 c0       	mov    al,ds:0xc0028d14
c000b9a9:	83 f0 01             	xor    eax,0x1
c000b9ac:	84 c0                	test   al,al
c000b9ae:	0f 84 54 01 00 00    	je     c000bb08 <UnixFile::UnixFile(int)+0x1aa>
c000b9b4:	c6 05 14 8d 02 c0 01 	mov    BYTE PTR ds:0xc0028d14,0x1
c000b9bb:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000b9c3:	83 ec 0c             	sub    esp,0xc
c000b9c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b9ca:	e8 18 e4 ff ff       	call   c0009de7 <malloc>
c000b9cf:	83 c4 10             	add    esp,0x10
c000b9d2:	89 c3                	mov    ebx,eax
c000b9d4:	83 ec 08             	sub    esp,0x8
c000b9d7:	68 03 ff ff 0f       	push   0xfffff03
c000b9dc:	53                   	push   ebx
c000b9dd:	e8 2c 01 00 00       	call   c000bb0e <ReservedFilename::ReservedFilename(int)>
c000b9e2:	83 c4 10             	add    esp,0x10
c000b9e5:	89 1d 0c 8d 02 c0    	mov    DWORD PTR ds:0xc0028d0c,ebx
c000b9eb:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000b9f3:	83 ec 0c             	sub    esp,0xc
c000b9f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9fa:	e8 e8 e3 ff ff       	call   c0009de7 <malloc>
c000b9ff:	83 c4 10             	add    esp,0x10
c000ba02:	89 c3                	mov    ebx,eax
c000ba04:	83 ec 08             	sub    esp,0x8
c000ba07:	68 01 ff ff 0f       	push   0xfffff01
c000ba0c:	53                   	push   ebx
c000ba0d:	e8 fc 00 00 00       	call   c000bb0e <ReservedFilename::ReservedFilename(int)>
c000ba12:	83 c4 10             	add    esp,0x10
c000ba15:	89 1d 10 8d 02 c0    	mov    DWORD PTR ds:0xc0028d10,ebx
c000ba1b:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000ba23:	83 ec 0c             	sub    esp,0xc
c000ba26:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ba2a:	e8 b8 e3 ff ff       	call   c0009de7 <malloc>
c000ba2f:	83 c4 10             	add    esp,0x10
c000ba32:	89 c3                	mov    ebx,eax
c000ba34:	83 ec 08             	sub    esp,0x8
c000ba37:	68 00 ff ff 0f       	push   0xfffff00
c000ba3c:	53                   	push   ebx
c000ba3d:	e8 cc 00 00 00       	call   c000bb0e <ReservedFilename::ReservedFilename(int)>
c000ba42:	83 c4 10             	add    esp,0x10
c000ba45:	89 1d 04 8d 02 c0    	mov    DWORD PTR ds:0xc0028d04,ebx
c000ba4b:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000ba53:	83 ec 0c             	sub    esp,0xc
c000ba56:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba5a:	e8 88 e3 ff ff       	call   c0009de7 <malloc>
c000ba5f:	83 c4 10             	add    esp,0x10
c000ba62:	89 c3                	mov    ebx,eax
c000ba64:	83 ec 08             	sub    esp,0x8
c000ba67:	68 02 ff ff 0f       	push   0xfffff02
c000ba6c:	53                   	push   ebx
c000ba6d:	e8 9c 00 00 00       	call   c000bb0e <ReservedFilename::ReservedFilename(int)>
c000ba72:	83 c4 10             	add    esp,0x10
c000ba75:	89 1d 08 8d 02 c0    	mov    DWORD PTR ds:0xc0028d08,ebx
c000ba7b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000ba83:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000ba88:	7f 7e                	jg     c000bb08 <UnixFile::UnixFile(int)+0x1aa>
c000ba8a:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000ba92:	83 ec 0c             	sub    esp,0xc
c000ba95:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ba99:	e8 49 e3 ff ff       	call   c0009de7 <malloc>
c000ba9e:	83 c4 10             	add    esp,0x10
c000baa1:	89 c3                	mov    ebx,eax
c000baa3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000baa7:	05 10 ff ff 0f       	add    eax,0xfffff10
c000baac:	83 ec 08             	sub    esp,0x8
c000baaf:	50                   	push   eax
c000bab0:	53                   	push   ebx
c000bab1:	e8 58 00 00 00       	call   c000bb0e <ReservedFilename::ReservedFilename(int)>
c000bab6:	83 c4 10             	add    esp,0x10
c000bab9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000babd:	89 1c 85 e0 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7320],ebx
c000bac4:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000bacc:	83 ec 0c             	sub    esp,0xc
c000bacf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bad3:	e8 0f e3 ff ff       	call   c0009de7 <malloc>
c000bad8:	83 c4 10             	add    esp,0x10
c000badb:	89 c3                	mov    ebx,eax
c000badd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000bae1:	05 20 ff ff 0f       	add    eax,0xfffff20
c000bae6:	83 ec 08             	sub    esp,0x8
c000bae9:	50                   	push   eax
c000baea:	53                   	push   ebx
c000baeb:	e8 1e 00 00 00       	call   c000bb0e <ReservedFilename::ReservedFilename(int)>
c000baf0:	83 c4 10             	add    esp,0x10
c000baf3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000baf7:	89 1c 85 a0 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7360],ebx
c000bafe:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bb02:	e9 7c ff ff ff       	jmp    c000ba83 <UnixFile::UnixFile(int)+0x125>
c000bb07:	90                   	nop
c000bb08:	83 c4 28             	add    esp,0x28
c000bb0b:	5b                   	pop    ebx
c000bb0c:	c3                   	ret    
c000bb0d:	90                   	nop

c000bb0e <ReservedFilename::ReservedFilename(int)>:
c000bb0e:	83 ec 0c             	sub    esp,0xc
c000bb11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb15:	83 ec 08             	sub    esp,0x8
c000bb18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb1c:	50                   	push   eax
c000bb1d:	e8 3c fe ff ff       	call   c000b95e <UnixFile::UnixFile(int)>
c000bb22:	83 c4 10             	add    esp,0x10
c000bb25:	ba 20 4e 02 c0       	mov    edx,0xc0024e20
c000bb2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb2e:	89 10                	mov    DWORD PTR [eax],edx
c000bb30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb34:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb38:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000bb3b:	90                   	nop
c000bb3c:	83 c4 0c             	add    esp,0xc
c000bb3f:	c3                   	ret    

c000bb40 <UnixFile::~UnixFile()>:
c000bb40:	83 ec 1c             	sub    esp,0x1c
c000bb43:	ba 04 4e 02 c0       	mov    edx,0xc0024e04
c000bb48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb4c:	89 10                	mov    DWORD PTR [eax],edx
c000bb4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb52:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bb55:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000bb5a:	7f 73                	jg     c000bbcf <UnixFile::~UnixFile()+0x8f>
c000bb5c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000bb64:	83 ec 0c             	sub    esp,0xc
c000bb67:	68 18 8d 02 c0       	push   0xc0028d18
c000bb6c:	e8 2b 78 01 00       	call   c002339c <LinkedList<UnixFile>::getFirstElement()>
c000bb71:	83 c4 10             	add    esp,0x10
c000bb74:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb78:	83 ec 0c             	sub    esp,0xc
c000bb7b:	68 18 8d 02 c0       	push   0xc0028d18
c000bb80:	e8 1f 78 01 00       	call   c00233a4 <LinkedList<UnixFile>::removeFirst()>
c000bb85:	83 c4 10             	add    esp,0x10
c000bb88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bb8c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000bb90:	74 40                	je     c000bbd2 <UnixFile::~UnixFile()+0x92>
c000bb92:	83 ec 08             	sub    esp,0x8
c000bb95:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bb99:	68 18 8d 02 c0       	push   0xc0028d18
c000bb9e:	e8 25 77 01 00       	call   c00232c8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000bba3:	83 c4 10             	add    esp,0x10
c000bba6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bbaa:	8d 50 01             	lea    edx,[eax+0x1]
c000bbad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbb1:	3d 88 13 00 00       	cmp    eax,0x1388
c000bbb6:	0f 94 c0             	sete   al
c000bbb9:	84 c0                	test   al,al
c000bbbb:	74 a7                	je     c000bb64 <UnixFile::~UnixFile()+0x24>
c000bbbd:	83 ec 0c             	sub    esp,0xc
c000bbc0:	68 dc 4d 02 c0       	push   0xc0024ddc
c000bbc5:	e8 2f 96 00 00       	call   c00151f9 <Krnl::panic(char const*)>
c000bbca:	83 c4 10             	add    esp,0x10
c000bbcd:	eb 95                	jmp    c000bb64 <UnixFile::~UnixFile()+0x24>
c000bbcf:	90                   	nop
c000bbd0:	eb 01                	jmp    c000bbd3 <UnixFile::~UnixFile()+0x93>
c000bbd2:	90                   	nop
c000bbd3:	90                   	nop
c000bbd4:	83 c4 1c             	add    esp,0x1c
c000bbd7:	c3                   	ret    

c000bbd8 <UnixFile::~UnixFile()>:
c000bbd8:	83 ec 0c             	sub    esp,0xc
c000bbdb:	83 ec 0c             	sub    esp,0xc
c000bbde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbe2:	e8 59 ff ff ff       	call   c000bb40 <UnixFile::~UnixFile()>
c000bbe7:	83 c4 10             	add    esp,0x10
c000bbea:	83 ec 08             	sub    esp,0x8
c000bbed:	6a 0c                	push   0xc
c000bbef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbf3:	e8 3e 14 00 00       	call   c000d036 <operator delete(void*, unsigned long)>
c000bbf8:	83 c4 10             	add    esp,0x10
c000bbfb:	83 c4 0c             	add    esp,0xc
c000bbfe:	c3                   	ret    
c000bbff:	90                   	nop

c000bc00 <ReservedFilename::~ReservedFilename()>:
c000bc00:	83 ec 0c             	sub    esp,0xc
c000bc03:	ba 20 4e 02 c0       	mov    edx,0xc0024e20
c000bc08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc0c:	89 10                	mov    DWORD PTR [eax],edx
c000bc0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc12:	83 ec 0c             	sub    esp,0xc
c000bc15:	50                   	push   eax
c000bc16:	e8 25 ff ff ff       	call   c000bb40 <UnixFile::~UnixFile()>
c000bc1b:	83 c4 10             	add    esp,0x10
c000bc1e:	90                   	nop
c000bc1f:	83 c4 0c             	add    esp,0xc
c000bc22:	c3                   	ret    
c000bc23:	90                   	nop

c000bc24 <ReservedFilename::~ReservedFilename()>:
c000bc24:	83 ec 0c             	sub    esp,0xc
c000bc27:	83 ec 0c             	sub    esp,0xc
c000bc2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc2e:	e8 cd ff ff ff       	call   c000bc00 <ReservedFilename::~ReservedFilename()>
c000bc33:	83 c4 10             	add    esp,0x10
c000bc36:	83 ec 08             	sub    esp,0x8
c000bc39:	6a 0c                	push   0xc
c000bc3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc3f:	e8 f2 13 00 00       	call   c000d036 <operator delete(void*, unsigned long)>
c000bc44:	83 c4 10             	add    esp,0x10
c000bc47:	83 c4 0c             	add    esp,0xc
c000bc4a:	c3                   	ret    

c000bc4b <getFromFileDescriptor(int)>:
c000bc4b:	53                   	push   ebx
c000bc4c:	83 ec 08             	sub    esp,0x8
c000bc4f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bc53:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000bc59:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000bc5f:	7f 2c                	jg     c000bc8d <getFromFileDescriptor(int)+0x42>
c000bc61:	83 ec 0c             	sub    esp,0xc
c000bc64:	68 18 8d 02 c0       	push   0xc0028d18
c000bc69:	e8 2e 77 01 00       	call   c002339c <LinkedList<UnixFile>::getFirstElement()>
c000bc6e:	83 c4 10             	add    esp,0x10
c000bc71:	85 c0                	test   eax,eax
c000bc73:	75 04                	jne    c000bc79 <getFromFileDescriptor(int)+0x2e>
c000bc75:	31 c0                	xor    eax,eax
c000bc77:	eb 6e                	jmp    c000bce7 <getFromFileDescriptor(int)+0x9c>
c000bc79:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000bc7c:	74 69                	je     c000bce7 <getFromFileDescriptor(int)+0x9c>
c000bc7e:	52                   	push   edx
c000bc7f:	52                   	push   edx
c000bc80:	50                   	push   eax
c000bc81:	68 18 8d 02 c0       	push   0xc0028d18
c000bc86:	e8 bb 77 01 00       	call   c0023446 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000bc8b:	eb e1                	jmp    c000bc6e <getFromFileDescriptor(int)+0x23>
c000bc8d:	a1 0c 8d 02 c0       	mov    eax,ds:0xc0028d0c
c000bc92:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000bc98:	74 4d                	je     c000bce7 <getFromFileDescriptor(int)+0x9c>
c000bc9a:	a1 10 8d 02 c0       	mov    eax,ds:0xc0028d10
c000bc9f:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000bca5:	74 40                	je     c000bce7 <getFromFileDescriptor(int)+0x9c>
c000bca7:	a1 08 8d 02 c0       	mov    eax,ds:0xc0028d08
c000bcac:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000bcb2:	74 33                	je     c000bce7 <getFromFileDescriptor(int)+0x9c>
c000bcb4:	a1 04 8d 02 c0       	mov    eax,ds:0xc0028d04
c000bcb9:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000bcbf:	74 26                	je     c000bce7 <getFromFileDescriptor(int)+0x9c>
c000bcc1:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000bcc7:	83 f8 08             	cmp    eax,0x8
c000bcca:	77 09                	ja     c000bcd5 <getFromFileDescriptor(int)+0x8a>
c000bccc:	8b 04 85 e0 8c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7320]
c000bcd3:	eb 12                	jmp    c000bce7 <getFromFileDescriptor(int)+0x9c>
c000bcd5:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000bcdb:	83 fb 08             	cmp    ebx,0x8
c000bcde:	77 95                	ja     c000bc75 <getFromFileDescriptor(int)+0x2a>
c000bce0:	8b 04 9d a0 8c 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd7360]
c000bce7:	83 c4 08             	add    esp,0x8
c000bcea:	5b                   	pop    ebx
c000bceb:	c3                   	ret    

c000bcec <__static_initialization_and_destruction_0(int, int)>:
c000bcec:	83 ec 0c             	sub    esp,0xc
c000bcef:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000bcf4:	75 34                	jne    c000bd2a <__static_initialization_and_destruction_0(int, int)+0x3e>
c000bcf6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000bcfe:	75 2a                	jne    c000bd2a <__static_initialization_and_destruction_0(int, int)+0x3e>
c000bd00:	83 ec 0c             	sub    esp,0xc
c000bd03:	68 18 8d 02 c0       	push   0xc0028d18
c000bd08:	e8 79 75 01 00       	call   c0023286 <LinkedList<UnixFile>::LinkedList()>
c000bd0d:	83 c4 10             	add    esp,0x10
c000bd10:	83 ec 04             	sub    esp,0x4
c000bd13:	68 78 7e 02 c0       	push   0xc0027e78
c000bd18:	68 18 8d 02 c0       	push   0xc0028d18
c000bd1d:	68 84 32 02 c0       	push   0xc0023284
c000bd22:	e8 89 12 00 00       	call   c000cfb0 <__cxa_atexit>
c000bd27:	83 c4 10             	add    esp,0x10
c000bd2a:	90                   	nop
c000bd2b:	83 c4 0c             	add    esp,0xc
c000bd2e:	c3                   	ret    

c000bd2f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000bd2f:	83 ec 0c             	sub    esp,0xc
c000bd32:	83 ec 08             	sub    esp,0x8
c000bd35:	68 ff ff 00 00       	push   0xffff
c000bd3a:	6a 01                	push   0x1
c000bd3c:	e8 ab ff ff ff       	call   c000bcec <__static_initialization_and_destruction_0(int, int)>
c000bd41:	83 c4 10             	add    esp,0x10
c000bd44:	83 c4 0c             	add    esp,0xc
c000bd47:	c3                   	ret    

c000bd48 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000bd48:	53                   	push   ebx
c000bd49:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd4d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bd51:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000bd57:	89 c8                	mov    eax,ecx
c000bd59:	d1 e8                	shr    eax,1
c000bd5b:	03 05 48 80 02 c0    	add    eax,DWORD PTR ds:0xc0028048
c000bd61:	83 e1 01             	and    ecx,0x1
c000bd64:	8a 10                	mov    dl,BYTE PTR [eax]
c000bd66:	75 09                	jne    c000bd71 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000bd68:	83 e2 f0             	and    edx,0xfffffff0
c000bd6b:	09 da                	or     edx,ebx
c000bd6d:	88 10                	mov    BYTE PTR [eax],dl
c000bd6f:	5b                   	pop    ebx
c000bd70:	c3                   	ret    
c000bd71:	c1 e3 04             	shl    ebx,0x4
c000bd74:	83 e2 0f             	and    edx,0xf
c000bd77:	09 da                	or     edx,ebx
c000bd79:	88 10                	mov    BYTE PTR [eax],dl
c000bd7b:	5b                   	pop    ebx
c000bd7c:	c3                   	ret    

c000bd7d <Virt::getPageState(unsigned long)>:
c000bd7d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bd81:	8b 0d 48 80 02 c0    	mov    ecx,DWORD PTR ds:0xc0028048
c000bd87:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000bd8d:	89 d0                	mov    eax,edx
c000bd8f:	d1 e8                	shr    eax,1
c000bd91:	83 e2 01             	and    edx,0x1
c000bd94:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000bd97:	75 04                	jne    c000bd9d <Virt::getPageState(unsigned long)+0x20>
c000bd99:	83 e0 0f             	and    eax,0xf
c000bd9c:	c3                   	ret    
c000bd9d:	c0 e8 04             	shr    al,0x4
c000bda0:	c3                   	ret    

c000bda1 <Virt::allocateKernelVirtualPages(int)>:
c000bda1:	55                   	push   ebp
c000bda2:	31 ed                	xor    ebp,ebp
c000bda4:	57                   	push   edi
c000bda5:	56                   	push   esi
c000bda6:	53                   	push   ebx
c000bda7:	31 db                	xor    ebx,ebx
c000bda9:	83 ec 1c             	sub    esp,0x1c
c000bdac:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000bdb0:	8b 3d 44 80 02 c0    	mov    edi,DWORD PTR ds:0xc0028044
c000bdb6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000bdbb:	57                   	push   edi
c000bdbc:	e8 bc ff ff ff       	call   c000bd7d <Virt::getPageState(unsigned long)>
c000bdc1:	5a                   	pop    edx
c000bdc2:	84 c0                	test   al,al
c000bdc4:	75 3a                	jne    c000be00 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000bdc6:	85 db                	test   ebx,ebx
c000bdc8:	75 02                	jne    c000bdcc <Virt::allocateKernelVirtualPages(int)+0x2b>
c000bdca:	89 fd                	mov    ebp,edi
c000bdcc:	43                   	inc    ebx
c000bdcd:	39 f3                	cmp    ebx,esi
c000bdcf:	74 5a                	je     c000be2b <Virt::allocateKernelVirtualPages(int)+0x8a>
c000bdd1:	47                   	inc    edi
c000bdd2:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000bdd8:	76 31                	jbe    c000be0b <Virt::allocateKernelVirtualPages(int)+0x6a>
c000bdda:	c7 05 44 80 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0028044,0xc8000
c000bde4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000bde9:	75 28                	jne    c000be13 <Virt::allocateKernelVirtualPages(int)+0x72>
c000bdeb:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000bdf0:	bf 00 80 0c 00       	mov    edi,0xc8000
c000bdf5:	57                   	push   edi
c000bdf6:	e8 82 ff ff ff       	call   c000bd7d <Virt::getPageState(unsigned long)>
c000bdfb:	5a                   	pop    edx
c000bdfc:	84 c0                	test   al,al
c000bdfe:	74 c6                	je     c000bdc6 <Virt::allocateKernelVirtualPages(int)+0x25>
c000be00:	31 db                	xor    ebx,ebx
c000be02:	47                   	inc    edi
c000be03:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000be09:	77 cf                	ja     c000bdda <Virt::allocateKernelVirtualPages(int)+0x39>
c000be0b:	89 3d 44 80 02 c0    	mov    DWORD PTR ds:0xc0028044,edi
c000be11:	eb a8                	jmp    c000bdbb <Virt::allocateKernelVirtualPages(int)+0x1a>
c000be13:	83 ec 0c             	sub    esp,0xc
c000be16:	68 34 4e 02 c0       	push   0xc0024e34
c000be1b:	e8 d9 93 00 00       	call   c00151f9 <Krnl::panic(char const*)>
c000be20:	8b 3d 44 80 02 c0    	mov    edi,DWORD PTR ds:0xc0028044
c000be26:	83 c4 10             	add    esp,0x10
c000be29:	eb 90                	jmp    c000bdbb <Virt::allocateKernelVirtualPages(int)+0x1a>
c000be2b:	89 2d 44 80 02 c0    	mov    DWORD PTR ds:0xc0028044,ebp
c000be31:	4b                   	dec    ebx
c000be32:	74 5f                	je     c000be93 <Virt::allocateKernelVirtualPages(int)+0xf2>
c000be34:	85 f6                	test   esi,esi
c000be36:	74 3d                	je     c000be75 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000be38:	89 e8                	mov    eax,ebp
c000be3a:	31 db                	xor    ebx,ebx
c000be3c:	8d 7e ff             	lea    edi,[esi-0x1]
c000be3f:	eb 14                	jmp    c000be55 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000be41:	6a 01                	push   0x1
c000be43:	43                   	inc    ebx
c000be44:	50                   	push   eax
c000be45:	e8 fe fe ff ff       	call   c000bd48 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000be4a:	58                   	pop    eax
c000be4b:	39 f3                	cmp    ebx,esi
c000be4d:	5a                   	pop    edx
c000be4e:	74 25                	je     c000be75 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000be50:	a1 44 80 02 c0       	mov    eax,ds:0xc0028044
c000be55:	8d 50 01             	lea    edx,[eax+0x1]
c000be58:	85 db                	test   ebx,ebx
c000be5a:	89 15 44 80 02 c0    	mov    DWORD PTR ds:0xc0028044,edx
c000be60:	74 20                	je     c000be82 <Virt::allocateKernelVirtualPages(int)+0xe1>
c000be62:	39 df                	cmp    edi,ebx
c000be64:	75 db                	jne    c000be41 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000be66:	6a 03                	push   0x3
c000be68:	43                   	inc    ebx
c000be69:	50                   	push   eax
c000be6a:	e8 d9 fe ff ff       	call   c000bd48 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000be6f:	59                   	pop    ecx
c000be70:	39 f3                	cmp    ebx,esi
c000be72:	58                   	pop    eax
c000be73:	75 db                	jne    c000be50 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000be75:	83 c4 1c             	add    esp,0x1c
c000be78:	89 e8                	mov    eax,ebp
c000be7a:	5b                   	pop    ebx
c000be7b:	c1 e0 0c             	shl    eax,0xc
c000be7e:	5e                   	pop    esi
c000be7f:	5f                   	pop    edi
c000be80:	5d                   	pop    ebp
c000be81:	c3                   	ret    
c000be82:	6a 02                	push   0x2
c000be84:	bb 01 00 00 00       	mov    ebx,0x1
c000be89:	50                   	push   eax
c000be8a:	e8 b9 fe ff ff       	call   c000bd48 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000be8f:	58                   	pop    eax
c000be90:	5a                   	pop    edx
c000be91:	eb bd                	jmp    c000be50 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000be93:	6a 04                	push   0x4
c000be95:	8d 45 01             	lea    eax,[ebp+0x1]
c000be98:	55                   	push   ebp
c000be99:	a3 44 80 02 c0       	mov    ds:0xc0028044,eax
c000be9e:	e8 a5 fe ff ff       	call   c000bd48 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bea3:	59                   	pop    ecx
c000bea4:	89 e8                	mov    eax,ebp
c000bea6:	5b                   	pop    ebx
c000bea7:	c1 e0 0c             	shl    eax,0xc
c000beaa:	83 c4 1c             	add    esp,0x1c
c000bead:	5b                   	pop    ebx
c000beae:	5e                   	pop    esi
c000beaf:	5f                   	pop    edi
c000beb0:	5d                   	pop    ebp
c000beb1:	c3                   	ret    

c000beb2 <Virt::freeSwapfilePage(unsigned long)>:
c000beb2:	53                   	push   ebx
c000beb3:	8b 15 30 8d 02 c0    	mov    edx,DWORD PTR ds:0xc0028d30
c000beb9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bebd:	b8 01 00 00 00       	mov    eax,0x1
c000bec2:	89 cb                	mov    ebx,ecx
c000bec4:	d3 e0                	shl    eax,cl
c000bec6:	c1 eb 05             	shr    ebx,0x5
c000bec9:	f7 d0                	not    eax
c000becb:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000bece:	5b                   	pop    ebx
c000becf:	c3                   	ret    

c000bed0 <Virt::swapIDToSector(unsigned long)>:
c000bed0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bed4:	0f af 05 4c 80 02 c0 	imul   eax,DWORD PTR ds:0xc002804c
c000bedb:	03 05 54 80 02 c0    	add    eax,DWORD PTR ds:0xc0028054
c000bee1:	c3                   	ret    

c000bee2 <Virt::allocateSwapfilePage()>:
c000bee2:	55                   	push   ebp
c000bee3:	31 d2                	xor    edx,edx
c000bee5:	57                   	push   edi
c000bee6:	56                   	push   esi
c000bee7:	53                   	push   ebx
c000bee8:	83 ec 0c             	sub    esp,0xc
c000beeb:	8b 0d 4c 80 02 c0    	mov    ecx,DWORD PTR ds:0xc002804c
c000bef1:	a1 50 80 02 c0       	mov    eax,ds:0xc0028050
c000bef6:	f7 f1                	div    ecx
c000bef8:	39 0d 50 80 02 c0    	cmp    DWORD PTR ds:0xc0028050,ecx
c000befe:	72 2d                	jb     c000bf2d <Virt::allocateSwapfilePage()+0x4b>
c000bf00:	8b 35 30 8d 02 c0    	mov    esi,DWORD PTR ds:0xc0028d30
c000bf06:	8b 16                	mov    edx,DWORD PTR [esi]
c000bf08:	f6 c2 01             	test   dl,0x1
c000bf0b:	74 3c                	je     c000bf49 <Virt::allocateSwapfilePage()+0x67>
c000bf0d:	31 c9                	xor    ecx,ecx
c000bf0f:	bf 01 00 00 00       	mov    edi,0x1
c000bf14:	eb 12                	jmp    c000bf28 <Virt::allocateSwapfilePage()+0x46>
c000bf16:	89 fd                	mov    ebp,edi
c000bf18:	89 ca                	mov    edx,ecx
c000bf1a:	d3 e5                	shl    ebp,cl
c000bf1c:	c1 ea 05             	shr    edx,0x5
c000bf1f:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000bf22:	8b 13                	mov    edx,DWORD PTR [ebx]
c000bf24:	85 ea                	test   edx,ebp
c000bf26:	74 2a                	je     c000bf52 <Virt::allocateSwapfilePage()+0x70>
c000bf28:	41                   	inc    ecx
c000bf29:	39 c8                	cmp    eax,ecx
c000bf2b:	77 e9                	ja     c000bf16 <Virt::allocateSwapfilePage()+0x34>
c000bf2d:	83 ec 0c             	sub    esp,0xc
c000bf30:	68 ec 4f 02 c0       	push   0xc0024fec
c000bf35:	e8 bf 92 00 00       	call   c00151f9 <Krnl::panic(char const*)>
c000bf3a:	83 c4 10             	add    esp,0x10
c000bf3d:	31 c9                	xor    ecx,ecx
c000bf3f:	83 c4 0c             	add    esp,0xc
c000bf42:	89 c8                	mov    eax,ecx
c000bf44:	5b                   	pop    ebx
c000bf45:	5e                   	pop    esi
c000bf46:	5f                   	pop    edi
c000bf47:	5d                   	pop    ebp
c000bf48:	c3                   	ret    
c000bf49:	89 f3                	mov    ebx,esi
c000bf4b:	bd 01 00 00 00       	mov    ebp,0x1
c000bf50:	31 c9                	xor    ecx,ecx
c000bf52:	09 ea                	or     edx,ebp
c000bf54:	89 c8                	mov    eax,ecx
c000bf56:	89 13                	mov    DWORD PTR [ebx],edx
c000bf58:	83 c4 0c             	add    esp,0xc
c000bf5b:	5b                   	pop    ebx
c000bf5c:	5e                   	pop    esi
c000bf5d:	5f                   	pop    edi
c000bf5e:	5d                   	pop    ebp
c000bf5f:	c3                   	ret    

c000bf60 <Virt::virtualMemorySetup()>:
c000bf60:	53                   	push   ebx
c000bf61:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000bf66:	6a 0f                	push   0xf
c000bf68:	53                   	push   ebx
c000bf69:	43                   	inc    ebx
c000bf6a:	e8 d9 fd ff ff       	call   c000bd48 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bf6f:	58                   	pop    eax
c000bf70:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000bf76:	5a                   	pop    edx
c000bf77:	75 ed                	jne    c000bf66 <Virt::virtualMemorySetup()+0x6>
c000bf79:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000bf7e:	6a 00                	push   0x0
c000bf80:	53                   	push   ebx
c000bf81:	43                   	inc    ebx
c000bf82:	e8 c1 fd ff ff       	call   c000bd48 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bf87:	59                   	pop    ecx
c000bf88:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000bf8e:	58                   	pop    eax
c000bf8f:	75 ed                	jne    c000bf7e <Virt::virtualMemorySetup()+0x1e>
c000bf91:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000bf96:	6a 0f                	push   0xf
c000bf98:	53                   	push   ebx
c000bf99:	43                   	inc    ebx
c000bf9a:	e8 a9 fd ff ff       	call   c000bd48 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bf9f:	58                   	pop    eax
c000bfa0:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000bfa6:	5a                   	pop    edx
c000bfa7:	75 ed                	jne    c000bf96 <Virt::virtualMemorySetup()+0x36>
c000bfa9:	5b                   	pop    ebx
c000bfaa:	c3                   	ret    

c000bfab <Virt::setupPageSwapping(int)>:
c000bfab:	53                   	push   ebx
c000bfac:	83 ec 0c             	sub    esp,0xc
c000bfaf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bfb3:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c000bfb8:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000bfbe:	8b 10                	mov    edx,DWORD PTR [eax]
c000bfc0:	53                   	push   ebx
c000bfc1:	c1 e3 0b             	shl    ebx,0xb
c000bfc4:	68 03 50 02 c0       	push   0xc0025003
c000bfc9:	50                   	push   eax
c000bfca:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000bfcd:	89 1d 50 80 02 c0    	mov    DWORD PTR ds:0xc0028050,ebx
c000bfd3:	c6 05 58 80 02 c0 43 	mov    BYTE PTR ds:0xc0028058,0x43
c000bfda:	c1 eb 08             	shr    ebx,0x8
c000bfdd:	a3 54 80 02 c0       	mov    ds:0xc0028054,eax
c000bfe2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bfe5:	c7 05 4c 80 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002804c,0x8
c000bfef:	e8 f3 dd ff ff       	call   c0009de7 <malloc>
c000bff4:	83 c4 0c             	add    esp,0xc
c000bff7:	89 c1                	mov    ecx,eax
c000bff9:	a3 30 8d 02 c0       	mov    ds:0xc0028d30,eax
c000bffe:	31 d2                	xor    edx,edx
c000c000:	a1 50 80 02 c0       	mov    eax,ds:0xc0028050
c000c005:	f7 35 4c 80 02 c0    	div    DWORD PTR ds:0xc002804c
c000c00b:	c1 e8 05             	shr    eax,0x5
c000c00e:	50                   	push   eax
c000c00f:	6a 00                	push   0x0
c000c011:	51                   	push   ecx
c000c012:	e8 7d 46 ff ff       	call   c0000694 <memset>
c000c017:	83 c4 18             	add    esp,0x18
c000c01a:	5b                   	pop    ebx
c000c01b:	c3                   	ret    

c000c01c <VAS::VAS(VAS*)>:
c000c01c:	83 ec 0c             	sub    esp,0xc
c000c01f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c023:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c02a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c02e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000c035:	83 ec 0c             	sub    esp,0xc
c000c038:	68 54 4e 02 c0       	push   0xc0024e54
c000c03d:	e8 b7 91 00 00       	call   c00151f9 <Krnl::panic(char const*)>
c000c042:	83 c4 10             	add    esp,0x10
c000c045:	90                   	nop
c000c046:	83 c4 0c             	add    esp,0xc
c000c049:	c3                   	ret    

c000c04a <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000c04a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c04e:	89 c2                	mov    edx,eax
c000c050:	c1 e8 0a             	shr    eax,0xa
c000c053:	c1 ea 16             	shr    edx,0x16
c000c056:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000c05b:	19 c9                	sbb    ecx,ecx
c000c05d:	c1 e2 0c             	shl    edx,0xc
c000c060:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000c066:	25 fc 0f 00 00       	and    eax,0xffc
c000c06b:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000c072:	01 d0                	add    eax,edx
c000c074:	c3                   	ret    
c000c075:	90                   	nop

c000c076 <VAS::getPageTableEntry(unsigned long)>:
c000c076:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c07a:	89 ca                	mov    edx,ecx
c000c07c:	c1 e9 0a             	shr    ecx,0xa
c000c07f:	c1 ea 16             	shr    edx,0x16
c000c082:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000c088:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000c08e:	c1 e0 0c             	shl    eax,0xc
c000c091:	8d 04 08             	lea    eax,[eax+ecx*1]
c000c094:	c3                   	ret    

c000c095 <Virt::freeKernelVirtualPages(unsigned long)>:
c000c095:	57                   	push   edi
c000c096:	56                   	push   esi
c000c097:	be 01 00 00 00       	mov    esi,0x1
c000c09c:	53                   	push   ebx
c000c09d:	83 ec 10             	sub    esp,0x10
c000c0a0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c0a4:	c1 eb 0c             	shr    ebx,0xc
c000c0a7:	eb 3f                	jmp    c000c0e8 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000c0a9:	83 ec 08             	sub    esp,0x8
c000c0ac:	57                   	push   edi
c000c0ad:	ff 35 34 8d 02 c0    	push   DWORD PTR ds:0xc0028d34
c000c0b3:	e8 be ff ff ff       	call   c000c076 <VAS::getPageTableEntry(unsigned long)>
c000c0b8:	83 c4 10             	add    esp,0x10
c000c0bb:	8b 00                	mov    eax,DWORD PTR [eax]
c000c0bd:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000c0c1:	f6 c4 04             	test   ah,0x4
c000c0c4:	75 5f                	jne    c000c125 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000c0c6:	80 fa 04             	cmp    dl,0x4
c000c0c9:	74 78                	je     c000c143 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000c0cb:	80 fa 02             	cmp    dl,0x2
c000c0ce:	0f 84 88 00 00 00    	je     c000c15c <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000c0d4:	80 fa 03             	cmp    dl,0x3
c000c0d7:	0f 84 ad 00 00 00    	je     c000c18a <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000c0dd:	fe ca                	dec    dl
c000c0df:	0f 84 92 00 00 00    	je     c000c177 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000c0e5:	43                   	inc    ebx
c000c0e6:	31 f6                	xor    esi,esi
c000c0e8:	53                   	push   ebx
c000c0e9:	89 df                	mov    edi,ebx
c000c0eb:	e8 8d fc ff ff       	call   c000bd7d <Virt::getPageState(unsigned long)>
c000c0f0:	c1 e7 0c             	shl    edi,0xc
c000c0f3:	59                   	pop    ecx
c000c0f4:	84 c0                	test   al,al
c000c0f6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000c0fa:	75 ad                	jne    c000c0a9 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000c0fc:	83 ec 0c             	sub    esp,0xc
c000c0ff:	68 1a 50 02 c0       	push   0xc002501a
c000c104:	e8 f0 90 00 00       	call   c00151f9 <Krnl::panic(char const*)>
c000c109:	58                   	pop    eax
c000c10a:	5a                   	pop    edx
c000c10b:	57                   	push   edi
c000c10c:	ff 35 34 8d 02 c0    	push   DWORD PTR ds:0xc0028d34
c000c112:	e8 5f ff ff ff       	call   c000c076 <VAS::getPageTableEntry(unsigned long)>
c000c117:	83 c4 10             	add    esp,0x10
c000c11a:	8b 00                	mov    eax,DWORD PTR [eax]
c000c11c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000c120:	f6 c4 04             	test   ah,0x4
c000c123:	74 c0                	je     c000c0e5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000c125:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000c129:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c12e:	83 ec 0c             	sub    esp,0xc
c000c131:	50                   	push   eax
c000c132:	e8 e4 e2 ff ff       	call   c000a41b <Phys::freePage(unsigned long)>
c000c137:	83 c4 10             	add    esp,0x10
c000c13a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000c13e:	80 fa 04             	cmp    dl,0x4
c000c141:	75 88                	jne    c000c0cb <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000c143:	89 f0                	mov    eax,esi
c000c145:	84 c0                	test   al,al
c000c147:	75 47                	jne    c000c190 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000c149:	c7 44 24 20 78 4e 02 c0 	mov    DWORD PTR [esp+0x20],0xc0024e78
c000c151:	83 c4 10             	add    esp,0x10
c000c154:	5b                   	pop    ebx
c000c155:	5e                   	pop    esi
c000c156:	5f                   	pop    edi
c000c157:	e9 9d 90 00 00       	jmp    c00151f9 <Krnl::panic(char const*)>
c000c15c:	89 f0                	mov    eax,esi
c000c15e:	84 c0                	test   al,al
c000c160:	75 15                	jne    c000c177 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000c162:	83 ec 0c             	sub    esp,0xc
c000c165:	68 36 50 02 c0       	push   0xc0025036
c000c16a:	e8 8a 90 00 00       	call   c00151f9 <Krnl::panic(char const*)>
c000c16f:	83 c4 10             	add    esp,0x10
c000c172:	e9 6e ff ff ff       	jmp    c000c0e5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000c177:	83 ec 08             	sub    esp,0x8
c000c17a:	6a 00                	push   0x0
c000c17c:	53                   	push   ebx
c000c17d:	e8 c6 fb ff ff       	call   c000bd48 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000c182:	83 c4 10             	add    esp,0x10
c000c185:	e9 5b ff ff ff       	jmp    c000c0e5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000c18a:	89 f0                	mov    eax,esi
c000c18c:	84 c0                	test   al,al
c000c18e:	75 15                	jne    c000c1a5 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000c190:	83 ec 08             	sub    esp,0x8
c000c193:	6a 00                	push   0x0
c000c195:	53                   	push   ebx
c000c196:	e8 ad fb ff ff       	call   c000bd48 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000c19b:	83 c4 10             	add    esp,0x10
c000c19e:	83 c4 10             	add    esp,0x10
c000c1a1:	5b                   	pop    ebx
c000c1a2:	5e                   	pop    esi
c000c1a3:	5f                   	pop    edi
c000c1a4:	c3                   	ret    
c000c1a5:	c7 44 24 20 52 50 02 c0 	mov    DWORD PTR [esp+0x20],0xc0025052
c000c1ad:	83 c4 10             	add    esp,0x10
c000c1b0:	5b                   	pop    ebx
c000c1b1:	5e                   	pop    esi
c000c1b2:	5f                   	pop    edi
c000c1b3:	e9 41 90 00 00       	jmp    c00151f9 <Krnl::panic(char const*)>

c000c1b8 <VAS::freeAllocatedPages(unsigned long)>:
c000c1b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c1bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c1c0:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000c1c4:	74 09                	je     c000c1cf <VAS::freeAllocatedPages(unsigned long)+0x17>
c000c1c6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c1ca:	e9 c6 fe ff ff       	jmp    c000c095 <Virt::freeKernelVirtualPages(unsigned long)>
c000c1cf:	c7 44 24 04 9c 4e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024e9c
c000c1d7:	e9 3b 0f 00 00       	jmp    c000d117 <Dbg::kprintf(char const*, ...)>

c000c1dc <VAS::virtualToPhysical(unsigned long)>:
c000c1dc:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000c1e0:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000c1e4:	e8 8d fe ff ff       	call   c000c076 <VAS::getPageTableEntry(unsigned long)>
c000c1e9:	5a                   	pop    edx
c000c1ea:	8b 00                	mov    eax,DWORD PTR [eax]
c000c1ec:	59                   	pop    ecx
c000c1ed:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c1f2:	c3                   	ret    
c000c1f3:	90                   	nop

c000c1f4 <VAS::reflagRange(unsigned long, int, int, int)>:
c000c1f4:	55                   	push   ebp
c000c1f5:	57                   	push   edi
c000c1f6:	56                   	push   esi
c000c1f7:	53                   	push   ebx
c000c1f8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c1fc:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000c200:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c204:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000c208:	85 db                	test   ebx,ebx
c000c20a:	7e 22                	jle    c000c22e <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c000c20c:	c1 e3 0c             	shl    ebx,0xc
c000c20f:	01 f3                	add    ebx,esi
c000c211:	56                   	push   esi
c000c212:	81 c6 00 10 00 00    	add    esi,0x1000
c000c218:	55                   	push   ebp
c000c219:	e8 58 fe ff ff       	call   c000c076 <VAS::getPageTableEntry(unsigned long)>
c000c21e:	5a                   	pop    edx
c000c21f:	59                   	pop    ecx
c000c220:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c222:	21 f9                	and    ecx,edi
c000c224:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000c228:	39 f3                	cmp    ebx,esi
c000c22a:	89 08                	mov    DWORD PTR [eax],ecx
c000c22c:	75 e3                	jne    c000c211 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c000c22e:	5b                   	pop    ebx
c000c22f:	5e                   	pop    esi
c000c230:	5f                   	pop    edi
c000c231:	5d                   	pop    ebp
c000c232:	c3                   	ret    
c000c233:	90                   	nop

c000c234 <VAS::setToWriteCombining(unsigned long, int)>:
c000c234:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c000c239:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c23f:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000c246:	75 01                	jne    c000c249 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000c248:	c3                   	ret    
c000c249:	68 80 00 00 00       	push   0x80
c000c24e:	6a ff                	push   0xffffffff
c000c250:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c254:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c258:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c25c:	e8 93 ff ff ff       	call   c000c1f4 <VAS::reflagRange(unsigned long, int, int, int)>
c000c261:	83 c4 14             	add    esp,0x14
c000c264:	c3                   	ret    
c000c265:	90                   	nop

c000c266 <VAS::mapOtherVASIn(bool, VAS*)>:
c000c266:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000c26b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c26f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000c272:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c276:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000c279:	19 c0                	sbb    eax,eax
c000c27b:	83 ca 03             	or     edx,0x3
c000c27e:	83 e0 fc             	and    eax,0xfffffffc
c000c281:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000c288:	0f 20 d8             	mov    eax,cr3
c000c28b:	0f 22 d8             	mov    cr3,eax
c000c28e:	c3                   	ret    
c000c28f:	90                   	nop

c000c290 <VAS::~VAS()>:
c000c290:	83 ec 2c             	sub    esp,0x2c
c000c293:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c29b:	fa                   	cli    
c000c29c:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c000c2a1:	40                   	inc    eax
c000c2a2:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c000c2a7:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c2ac:	8b 00                	mov    eax,DWORD PTR [eax]
c000c2ae:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c2b1:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000c2b7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c2bb:	6a 01                	push   0x1
c000c2bd:	50                   	push   eax
c000c2be:	e8 a3 ff ff ff       	call   c000c266 <VAS::mapOtherVASIn(bool, VAS*)>
c000c2c3:	83 c4 0c             	add    esp,0xc
c000c2c6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c2ce:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000c2d6:	0f 8f d4 00 00 00    	jg     c000c3b0 <VAS::~VAS()+0x120>
c000c2dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c2e0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c2e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c2e7:	c1 e2 02             	shl    edx,0x2
c000c2ea:	01 d0                	add    eax,edx
c000c2ec:	8b 00                	mov    eax,DWORD PTR [eax]
c000c2ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c2f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2f6:	83 e0 01             	and    eax,0x1
c000c2f9:	0f 84 a8 00 00 00    	je     c000c3a7 <VAS::~VAS()+0x117>
c000c2ff:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c307:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000c30f:	7f 72                	jg     c000c383 <VAS::~VAS()+0xf3>
c000c311:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c315:	c1 e0 0a             	shl    eax,0xa
c000c318:	89 c2                	mov    edx,eax
c000c31a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c31e:	01 d0                	add    eax,edx
c000c320:	c1 e0 0c             	shl    eax,0xc
c000c323:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c327:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c32c:	8b 00                	mov    eax,DWORD PTR [eax]
c000c32e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c331:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000c337:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c33b:	6a 01                	push   0x1
c000c33d:	50                   	push   eax
c000c33e:	e8 07 fd ff ff       	call   c000c04a <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000c343:	83 c4 0c             	add    esp,0xc
c000c346:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c34a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c34e:	8b 00                	mov    eax,DWORD PTR [eax]
c000c350:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c354:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c358:	25 01 04 00 00       	and    eax,0x401
c000c35d:	3d 01 04 00 00       	cmp    eax,0x401
c000c362:	75 19                	jne    c000c37d <VAS::~VAS()+0xed>
c000c364:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c368:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c36d:	83 ec 0c             	sub    esp,0xc
c000c370:	50                   	push   eax
c000c371:	e8 a5 e0 ff ff       	call   c000a41b <Phys::freePage(unsigned long)>
c000c376:	83 c4 10             	add    esp,0x10
c000c379:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c37d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000c381:	eb 84                	jmp    c000c307 <VAS::~VAS()+0x77>
c000c383:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c387:	25 00 04 00 00       	and    eax,0x400
c000c38c:	74 19                	je     c000c3a7 <VAS::~VAS()+0x117>
c000c38e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c392:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c397:	83 ec 0c             	sub    esp,0xc
c000c39a:	50                   	push   eax
c000c39b:	e8 7b e0 ff ff       	call   c000a41b <Phys::freePage(unsigned long)>
c000c3a0:	83 c4 10             	add    esp,0x10
c000c3a3:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c3a7:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c3ab:	e9 1e ff ff ff       	jmp    c000c2ce <VAS::~VAS()+0x3e>
c000c3b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c3b4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c3b7:	83 ec 0c             	sub    esp,0xc
c000c3ba:	50                   	push   eax
c000c3bb:	e8 d5 fc ff ff       	call   c000c095 <Virt::freeKernelVirtualPages(unsigned long)>
c000c3c0:	83 c4 10             	add    esp,0x10
c000c3c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c3c7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c3ca:	83 ec 0c             	sub    esp,0xc
c000c3cd:	50                   	push   eax
c000c3ce:	e8 48 e0 ff ff       	call   c000a41b <Phys::freePage(unsigned long)>
c000c3d3:	83 c4 10             	add    esp,0x10
c000c3d6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c3da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c3de:	c1 e0 02             	shl    eax,0x2
c000c3e1:	83 ec 08             	sub    esp,0x8
c000c3e4:	50                   	push   eax
c000c3e5:	68 c0 4e 02 c0       	push   0xc0024ec0
c000c3ea:	e8 28 0d 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000c3ef:	83 c4 10             	add    esp,0x10
c000c3f2:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c000c3f7:	48                   	dec    eax
c000c3f8:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c000c3fd:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c000c402:	85 c0                	test   eax,eax
c000c404:	75 01                	jne    c000c407 <VAS::~VAS()+0x177>
c000c406:	fb                   	sti    
c000c407:	90                   	nop
c000c408:	83 c4 2c             	add    esp,0x2c
c000c40b:	c3                   	ret    

c000c40c <VAS::mapPage(unsigned long, unsigned long, int)>:
c000c40c:	55                   	push   ebp
c000c40d:	57                   	push   edi
c000c40e:	56                   	push   esi
c000c40f:	53                   	push   ebx
c000c410:	83 ec 1c             	sub    esp,0x1c
c000c413:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000c417:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c41b:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000c421:	77 08                	ja     c000c42b <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000c423:	0f 20 d8             	mov    eax,cr3
c000c426:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000c429:	75 47                	jne    c000c472 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c000c42b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c42f:	09 d8                	or     eax,ebx
c000c431:	a9 ff 0f 00 00       	test   eax,0xfff
c000c436:	75 57                	jne    c000c48f <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c000c438:	89 de                	mov    esi,ebx
c000c43a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c43d:	c1 ee 16             	shr    esi,0x16
c000c440:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000c447:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000c44b:	74 54                	je     c000c4a1 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c000c44d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c451:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000c457:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000c45b:	c1 e6 0c             	shl    esi,0xc
c000c45e:	c1 eb 0a             	shr    ebx,0xa
c000c461:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000c467:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000c46a:	83 c4 1c             	add    esp,0x1c
c000c46d:	5b                   	pop    ebx
c000c46e:	5e                   	pop    esi
c000c46f:	5f                   	pop    edi
c000c470:	5d                   	pop    ebp
c000c471:	c3                   	ret    
c000c472:	83 ec 0c             	sub    esp,0xc
c000c475:	68 e0 4e 02 c0       	push   0xc0024ee0
c000c47a:	e8 98 0c 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000c47f:	83 c4 10             	add    esp,0x10
c000c482:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c486:	09 d8                	or     eax,ebx
c000c488:	a9 ff 0f 00 00       	test   eax,0xfff
c000c48d:	74 a9                	je     c000c438 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000c48f:	83 ec 0c             	sub    esp,0xc
c000c492:	68 48 4f 02 c0       	push   0xc0024f48
c000c497:	e8 5d 8d 00 00       	call   c00151f9 <Krnl::panic(char const*)>
c000c49c:	83 c4 10             	add    esp,0x10
c000c49f:	eb 97                	jmp    c000c438 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000c4a1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c4a5:	e8 f4 df ff ff       	call   c000a49e <Phys::allocatePage()>
c000c4aa:	83 ec 0c             	sub    esp,0xc
c000c4ad:	89 c5                	mov    ebp,eax
c000c4af:	8b 0d 34 8d 02 c0    	mov    ecx,DWORD PTR ds:0xc0028d34
c000c4b5:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c4b9:	6a 01                	push   0x1
c000c4bb:	e8 e1 f8 ff ff       	call   c000bda1 <Virt::allocateKernelVirtualPages(int)>
c000c4c0:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c4c7:	6a 01                	push   0x1
c000c4c9:	50                   	push   eax
c000c4ca:	55                   	push   ebp
c000c4cb:	81 cd 07 04 00 00    	or     ebp,0x407
c000c4d1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c4d5:	51                   	push   ecx
c000c4d6:	e8 27 02 00 00       	call   c000c702 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c4db:	83 c4 1c             	add    esp,0x1c
c000c4de:	68 00 10 00 00       	push   0x1000
c000c4e3:	6a 00                	push   0x0
c000c4e5:	50                   	push   eax
c000c4e6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c4ea:	e8 a5 41 ff ff       	call   c0000694 <memset>
c000c4ef:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c4f3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c4f6:	e8 9a fb ff ff       	call   c000c095 <Virt::freeKernelVirtualPages(unsigned long)>
c000c4fb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c4ff:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c502:	83 c4 10             	add    esp,0x10
c000c505:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000c508:	e9 40 ff ff ff       	jmp    c000c44d <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c000c50d:	90                   	nop

c000c50e <VAS::allocatePages(int, int)>:
c000c50e:	55                   	push   ebp
c000c50f:	57                   	push   edi
c000c510:	56                   	push   esi
c000c511:	53                   	push   ebx
c000c512:	83 ec 1c             	sub    esp,0x1c
c000c515:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c519:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c000c51e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c524:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c52a:	83 e0 01             	and    eax,0x1
c000c52d:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000c531:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c535:	0f 85 cc 00 00 00    	jne    c000c607 <VAS::allocatePages(int, int)+0xf9>
c000c53b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c53e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c542:	85 c0                	test   eax,eax
c000c544:	0f 84 a1 00 00 00    	je     c000c5eb <VAS::allocatePages(int, int)+0xdd>
c000c54a:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000c54e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c552:	c1 e6 0c             	shl    esi,0xc
c000c555:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000c559:	85 c0                	test   eax,eax
c000c55b:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000c55e:	7e 33                	jle    c000c593 <VAS::allocatePages(int, int)+0x85>
c000c560:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c564:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c568:	81 cd 00 04 00 00    	or     ebp,0x400
c000c56e:	e8 2b df ff ff       	call   c000a49e <Phys::allocatePage()>
c000c573:	55                   	push   ebp
c000c574:	53                   	push   ebx
c000c575:	50                   	push   eax
c000c576:	57                   	push   edi
c000c577:	e8 90 fe ff ff       	call   c000c40c <VAS::mapPage(unsigned long, unsigned long, int)>
c000c57c:	83 c4 10             	add    esp,0x10
c000c57f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c584:	74 03                	je     c000c589 <VAS::allocatePages(int, int)+0x7b>
c000c586:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c589:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c58f:	39 de                	cmp    esi,ebx
c000c591:	75 db                	jne    c000c56e <VAS::allocatePages(int, int)+0x60>
c000c593:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c598:	75 12                	jne    c000c5ac <VAS::allocatePages(int, int)+0x9e>
c000c59a:	0f 20 d8             	mov    eax,cr3
c000c59d:	0f 22 d8             	mov    cr3,eax
c000c5a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c5a4:	83 c4 1c             	add    esp,0x1c
c000c5a7:	5b                   	pop    ebx
c000c5a8:	5e                   	pop    esi
c000c5a9:	5f                   	pop    edi
c000c5aa:	5d                   	pop    ebp
c000c5ab:	c3                   	ret    
c000c5ac:	c1 ee 0a             	shr    esi,0xa
c000c5af:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c5b3:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000c5b9:	c1 eb 0a             	shr    ebx,0xa
c000c5bc:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000c5c2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c5c8:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c5ce:	39 c3                	cmp    ebx,eax
c000c5d0:	77 ce                	ja     c000c5a0 <VAS::allocatePages(int, int)+0x92>
c000c5d2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c5d5:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c5db:	39 d8                	cmp    eax,ebx
c000c5dd:	73 f3                	jae    c000c5d2 <VAS::allocatePages(int, int)+0xc4>
c000c5df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c5e3:	83 c4 1c             	add    esp,0x1c
c000c5e6:	5b                   	pop    ebx
c000c5e7:	5e                   	pop    esi
c000c5e8:	5f                   	pop    edi
c000c5e9:	5d                   	pop    ebp
c000c5ea:	c3                   	ret    
c000c5eb:	83 ec 0c             	sub    esp,0xc
c000c5ee:	68 6c 4f 02 c0       	push   0xc0024f6c
c000c5f3:	e8 01 8c 00 00       	call   c00151f9 <Krnl::panic(char const*)>
c000c5f8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c5fb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c5ff:	83 c4 10             	add    esp,0x10
c000c602:	e9 43 ff ff ff       	jmp    c000c54a <VAS::allocatePages(int, int)+0x3c>
c000c607:	83 ec 0c             	sub    esp,0xc
c000c60a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000c60e:	e8 8e f7 ff ff       	call   c000bda1 <Virt::allocateKernelVirtualPages(int)>
c000c613:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c617:	83 c4 10             	add    esp,0x10
c000c61a:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000c61f:	0f 87 9b 00 00 00    	ja     c000c6c0 <VAS::allocatePages(int, int)+0x1b2>
c000c625:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c629:	85 d2                	test   edx,edx
c000c62b:	7e 3c                	jle    c000c669 <VAS::allocatePages(int, int)+0x15b>
c000c62d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c631:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c635:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c639:	c1 e5 0c             	shl    ebp,0xc
c000c63c:	81 ce 00 04 00 00    	or     esi,0x400
c000c642:	01 dd                	add    ebp,ebx
c000c644:	e8 55 de ff ff       	call   c000a49e <Phys::allocatePage()>
c000c649:	56                   	push   esi
c000c64a:	53                   	push   ebx
c000c64b:	50                   	push   eax
c000c64c:	57                   	push   edi
c000c64d:	e8 ba fd ff ff       	call   c000c40c <VAS::mapPage(unsigned long, unsigned long, int)>
c000c652:	83 c4 10             	add    esp,0x10
c000c655:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c65a:	74 03                	je     c000c65f <VAS::allocatePages(int, int)+0x151>
c000c65c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c65f:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c665:	39 dd                	cmp    ebp,ebx
c000c667:	75 db                	jne    c000c644 <VAS::allocatePages(int, int)+0x136>
c000c669:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c66e:	0f 84 26 ff ff ff    	je     c000c59a <VAS::allocatePages(int, int)+0x8c>
c000c674:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c678:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c67c:	89 d3                	mov    ebx,edx
c000c67e:	c1 e0 0c             	shl    eax,0xc
c000c681:	c1 eb 0a             	shr    ebx,0xa
c000c684:	01 d0                	add    eax,edx
c000c686:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c68c:	c1 e8 0a             	shr    eax,0xa
c000c68f:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c695:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c69a:	2d 00 00 40 00       	sub    eax,0x400000
c000c69f:	39 c3                	cmp    ebx,eax
c000c6a1:	0f 87 f9 fe ff ff    	ja     c000c5a0 <VAS::allocatePages(int, int)+0x92>
c000c6a7:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c6aa:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c6b0:	39 d8                	cmp    eax,ebx
c000c6b2:	73 f3                	jae    c000c6a7 <VAS::allocatePages(int, int)+0x199>
c000c6b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c6b8:	83 c4 1c             	add    esp,0x1c
c000c6bb:	5b                   	pop    ebx
c000c6bc:	5e                   	pop    esi
c000c6bd:	5f                   	pop    edi
c000c6be:	5d                   	pop    ebp
c000c6bf:	c3                   	ret    
c000c6c0:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c000c6c5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c6cb:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000c6d2:	0f 84 4d ff ff ff    	je     c000c625 <VAS::allocatePages(int, int)+0x117>
c000c6d8:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000c6e0:	e9 40 ff ff ff       	jmp    c000c625 <VAS::allocatePages(int, int)+0x117>
c000c6e5:	90                   	nop

c000c6e6 <VAS::setCPUSpecific(unsigned long)>:
c000c6e6:	83 ec 0c             	sub    esp,0xc
c000c6e9:	6a 05                	push   0x5
c000c6eb:	68 00 00 40 c2       	push   0xc2400000
c000c6f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6f8:	e8 0f fd ff ff       	call   c000c40c <VAS::mapPage(unsigned long, unsigned long, int)>
c000c6fd:	83 c4 1c             	add    esp,0x1c
c000c700:	c3                   	ret    
c000c701:	90                   	nop

c000c702 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000c702:	55                   	push   ebp
c000c703:	57                   	push   edi
c000c704:	56                   	push   esi
c000c705:	53                   	push   ebx
c000c706:	83 ec 1c             	sub    esp,0x1c
c000c709:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c000c70e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c712:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c718:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c71c:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c722:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000c726:	83 e0 01             	and    eax,0x1
c000c729:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c72d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c731:	85 c0                	test   eax,eax
c000c733:	7e 39                	jle    c000c76e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000c735:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c739:	89 f3                	mov    ebx,esi
c000c73b:	c1 e0 0c             	shl    eax,0xc
c000c73e:	01 f0                	add    eax,esi
c000c740:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c744:	55                   	push   ebp
c000c745:	53                   	push   ebx
c000c746:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c74a:	29 f0                	sub    eax,esi
c000c74c:	01 d8                	add    eax,ebx
c000c74e:	50                   	push   eax
c000c74f:	57                   	push   edi
c000c750:	e8 b7 fc ff ff       	call   c000c40c <VAS::mapPage(unsigned long, unsigned long, int)>
c000c755:	83 c4 10             	add    esp,0x10
c000c758:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c75d:	74 03                	je     c000c762 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000c75f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c762:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c768:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000c76c:	75 d6                	jne    c000c744 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000c76e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c773:	75 10                	jne    c000c785 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000c775:	0f 20 d8             	mov    eax,cr3
c000c778:	0f 22 d8             	mov    cr3,eax
c000c77b:	83 c4 1c             	add    esp,0x1c
c000c77e:	89 f0                	mov    eax,esi
c000c780:	5b                   	pop    ebx
c000c781:	5e                   	pop    esi
c000c782:	5f                   	pop    edi
c000c783:	5d                   	pop    ebp
c000c784:	c3                   	ret    
c000c785:	89 f3                	mov    ebx,esi
c000c787:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c78b:	c1 eb 0a             	shr    ebx,0xa
c000c78e:	c1 e0 0c             	shl    eax,0xc
c000c791:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c797:	01 f0                	add    eax,esi
c000c799:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c79f:	c1 e8 0a             	shr    eax,0xa
c000c7a2:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c7a7:	2d 00 00 40 00       	sub    eax,0x400000
c000c7ac:	39 c3                	cmp    ebx,eax
c000c7ae:	77 cb                	ja     c000c77b <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000c7b0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c7b3:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c7b9:	39 d8                	cmp    eax,ebx
c000c7bb:	73 f3                	jae    c000c7b0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000c7bd:	83 c4 1c             	add    esp,0x1c
c000c7c0:	89 f0                	mov    eax,esi
c000c7c2:	5b                   	pop    ebx
c000c7c3:	5e                   	pop    esi
c000c7c4:	5f                   	pop    edi
c000c7c5:	5d                   	pop    ebp
c000c7c6:	c3                   	ret    
c000c7c7:	90                   	nop

c000c7c8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000c7c8:	55                   	push   ebp
c000c7c9:	57                   	push   edi
c000c7ca:	56                   	push   esi
c000c7cb:	53                   	push   ebx
c000c7cc:	83 ec 1c             	sub    esp,0x1c
c000c7cf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c7d3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c7d7:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000c7db:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000c7df:	a9 ff 0f 00 00       	test   eax,0xfff
c000c7e4:	75 4a                	jne    c000c830 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000c7e6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000c7ea:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c7ed:	c1 eb 16             	shr    ebx,0x16
c000c7f0:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000c7f7:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000c7fb:	74 4d                	je     c000c84a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000c7fd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c801:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000c805:	c1 e8 0a             	shr    eax,0xa
c000c808:	80 fa 01             	cmp    dl,0x1
c000c80b:	19 d2                	sbb    edx,edx
c000c80d:	c1 e3 0c             	shl    ebx,0xc
c000c810:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000c814:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000c81a:	25 fc 0f 00 00       	and    eax,0xffc
c000c81f:	01 d8                	add    eax,ebx
c000c821:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000c828:	83 c4 1c             	add    esp,0x1c
c000c82b:	5b                   	pop    ebx
c000c82c:	5e                   	pop    esi
c000c82d:	5f                   	pop    edi
c000c82e:	5d                   	pop    ebp
c000c82f:	c3                   	ret    
c000c830:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c834:	83 ec 0c             	sub    esp,0xc
c000c837:	68 98 4f 02 c0       	push   0xc0024f98
c000c83c:	e8 b8 89 00 00       	call   c00151f9 <Krnl::panic(char const*)>
c000c841:	83 c4 10             	add    esp,0x10
c000c844:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c848:	eb 9c                	jmp    c000c7e6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000c84a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c84e:	e8 4b dc ff ff       	call   c000a49e <Phys::allocatePage()>
c000c853:	83 ec 0c             	sub    esp,0xc
c000c856:	89 c5                	mov    ebp,eax
c000c858:	8b 0d 34 8d 02 c0    	mov    ecx,DWORD PTR ds:0xc0028d34
c000c85e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c862:	6a 01                	push   0x1
c000c864:	e8 38 f5 ff ff       	call   c000bda1 <Virt::allocateKernelVirtualPages(int)>
c000c869:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c870:	6a 01                	push   0x1
c000c872:	50                   	push   eax
c000c873:	55                   	push   ebp
c000c874:	81 cd 07 04 00 00    	or     ebp,0x407
c000c87a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c87e:	51                   	push   ecx
c000c87f:	e8 7e fe ff ff       	call   c000c702 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c884:	83 c4 1c             	add    esp,0x1c
c000c887:	68 00 10 00 00       	push   0x1000
c000c88c:	6a 00                	push   0x0
c000c88e:	50                   	push   eax
c000c88f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c893:	e8 fc 3d ff ff       	call   c0000694 <memset>
c000c898:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c89c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c89f:	e8 f1 f7 ff ff       	call   c000c095 <Virt::freeKernelVirtualPages(unsigned long)>
c000c8a4:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c8a7:	83 c4 10             	add    esp,0x10
c000c8aa:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000c8ad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c8b1:	e9 47 ff ff ff       	jmp    c000c7fd <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000c8b6 <VAS::VAS(bool)>:
c000c8b6:	53                   	push   ebx
c000c8b7:	83 ec 28             	sub    esp,0x28
c000c8ba:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c8be:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000c8c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c8c6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c8cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c8d1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000c8d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c8dc:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000c8e0:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000c8e3:	e8 b6 db ff ff       	call   c000a49e <Phys::allocatePage()>
c000c8e8:	89 c2                	mov    edx,eax
c000c8ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c8ee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000c8f1:	8b 1d 34 8d 02 c0    	mov    ebx,DWORD PTR ds:0xc0028d34
c000c8f7:	83 ec 0c             	sub    esp,0xc
c000c8fa:	6a 01                	push   0x1
c000c8fc:	e8 a0 f4 ff ff       	call   c000bda1 <Virt::allocateKernelVirtualPages(int)>
c000c901:	83 c4 10             	add    esp,0x10
c000c904:	89 c2                	mov    edx,eax
c000c906:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c90a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c90d:	83 ec 0c             	sub    esp,0xc
c000c910:	6a 03                	push   0x3
c000c912:	6a 01                	push   0x1
c000c914:	52                   	push   edx
c000c915:	50                   	push   eax
c000c916:	53                   	push   ebx
c000c917:	e8 e6 fd ff ff       	call   c000c702 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c91c:	83 c4 20             	add    esp,0x20
c000c91f:	89 c2                	mov    edx,eax
c000c921:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c925:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c928:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c930:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000c938:	7f 1c                	jg     c000c956 <VAS::VAS(bool)+0xa0>
c000c93a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c93e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c941:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c945:	c1 e2 02             	shl    edx,0x2
c000c948:	01 d0                	add    eax,edx
c000c94a:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c950:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c954:	eb da                	jmp    c000c930 <VAS::VAS(bool)+0x7a>
c000c956:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000c95e:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000c966:	7f 7a                	jg     c000c9e2 <VAS::VAS(bool)+0x12c>
c000c968:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c96c:	2d 00 02 00 00       	sub    eax,0x200
c000c971:	c1 e0 0c             	shl    eax,0xc
c000c974:	83 c8 03             	or     eax,0x3
c000c977:	89 c2                	mov    edx,eax
c000c979:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c000c97e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c984:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c98a:	83 e0 10             	and    eax,0x10
c000c98d:	84 c0                	test   al,al
c000c98f:	74 07                	je     c000c998 <VAS::VAS(bool)+0xe2>
c000c991:	b8 00 01 00 00       	mov    eax,0x100
c000c996:	eb 05                	jmp    c000c99d <VAS::VAS(bool)+0xe7>
c000c998:	b8 00 00 00 00       	mov    eax,0x0
c000c99d:	09 d0                	or     eax,edx
c000c99f:	89 c1                	mov    ecx,eax
c000c9a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c9a5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c9a8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c9ac:	c1 e2 02             	shl    edx,0x2
c000c9af:	01 d0                	add    eax,edx
c000c9b1:	89 ca                	mov    edx,ecx
c000c9b3:	89 10                	mov    DWORD PTR [eax],edx
c000c9b5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c9b9:	2d 40 03 00 00       	sub    eax,0x340
c000c9be:	83 f8 7f             	cmp    eax,0x7f
c000c9c1:	77 16                	ja     c000c9d9 <VAS::VAS(bool)+0x123>
c000c9c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c9c7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c9ca:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c9ce:	c1 e2 02             	shl    edx,0x2
c000c9d1:	01 d0                	add    eax,edx
c000c9d3:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c9d9:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c9dd:	e9 7c ff ff ff       	jmp    c000c95e <VAS::VAS(bool)+0xa8>
c000c9e2:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c000c9e7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c9ed:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c9f3:	83 e0 10             	and    eax,0x10
c000c9f6:	84 c0                	test   al,al
c000c9f8:	74 07                	je     c000ca01 <VAS::VAS(bool)+0x14b>
c000c9fa:	b8 03 41 00 00       	mov    eax,0x4103
c000c9ff:	eb 05                	jmp    c000ca06 <VAS::VAS(bool)+0x150>
c000ca01:	b8 03 40 00 00       	mov    eax,0x4003
c000ca06:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ca0a:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000ca0d:	81 c2 20 0c 00 00    	add    edx,0xc20
c000ca13:	89 02                	mov    DWORD PTR [edx],eax
c000ca15:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c000ca1a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ca20:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000ca26:	83 ec 08             	sub    esp,0x8
c000ca29:	50                   	push   eax
c000ca2a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ca2e:	e8 b3 fc ff ff       	call   c000c6e6 <VAS::setCPUSpecific(unsigned long)>
c000ca33:	83 c4 10             	add    esp,0x10
c000ca36:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca3a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000ca3d:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c000ca42:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ca48:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ca4e:	83 e0 10             	and    eax,0x10
c000ca51:	84 c0                	test   al,al
c000ca53:	74 07                	je     c000ca5c <VAS::VAS(bool)+0x1a6>
c000ca55:	b8 00 01 00 00       	mov    eax,0x100
c000ca5a:	eb 05                	jmp    c000ca61 <VAS::VAS(bool)+0x1ab>
c000ca5c:	b8 00 00 00 00       	mov    eax,0x0
c000ca61:	09 c2                	or     edx,eax
c000ca63:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca67:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ca6a:	05 fc 0f 00 00       	add    eax,0xffc
c000ca6f:	83 ca 03             	or     edx,0x3
c000ca72:	89 10                	mov    DWORD PTR [eax],edx
c000ca74:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c000ca79:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ca7f:	83 ec 0c             	sub    esp,0xc
c000ca82:	50                   	push   eax
c000ca83:	e8 02 1f 00 00       	call   c000e98a <Device::getName()>
c000ca88:	83 c4 10             	add    esp,0x10
c000ca8b:	83 ec 08             	sub    esp,0x8
c000ca8e:	68 6c 50 02 c0       	push   0xc002506c
c000ca93:	50                   	push   eax
c000ca94:	e8 43 3d ff ff       	call   c00007dc <strcmp>
c000ca99:	83 c4 10             	add    esp,0x10
c000ca9c:	85 c0                	test   eax,eax
c000ca9e:	0f 94 c0             	sete   al
c000caa1:	84 c0                	test   al,al
c000caa3:	0f 84 87 00 00 00    	je     c000cb30 <VAS::VAS(bool)+0x27a>
c000caa9:	fa                   	cli    
c000caaa:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c000caaf:	40                   	inc    eax
c000cab0:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c000cab5:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c000caba:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000cac0:	05 7c 09 00 00       	add    eax,0x97c
c000cac5:	83 ec 0c             	sub    esp,0xc
c000cac8:	50                   	push   eax
c000cac9:	e8 08 ce ff ff       	call   c00098d6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000cace:	83 c4 10             	add    esp,0x10
c000cad1:	25 00 f0 ff ff       	and    eax,0xfffff000
c000cad6:	89 c3                	mov    ebx,eax
c000cad8:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c000cadd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000cae3:	05 7c 09 00 00       	add    eax,0x97c
c000cae8:	83 ec 0c             	sub    esp,0xc
c000caeb:	50                   	push   eax
c000caec:	e8 e5 cd ff ff       	call   c00098d6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000caf1:	83 c4 10             	add    esp,0x10
c000caf4:	83 ec 08             	sub    esp,0x8
c000caf7:	50                   	push   eax
c000caf8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cafc:	e8 75 f5 ff ff       	call   c000c076 <VAS::getPageTableEntry(unsigned long)>
c000cb01:	83 c4 10             	add    esp,0x10
c000cb04:	8b 00                	mov    eax,DWORD PTR [eax]
c000cb06:	25 00 f0 ff ff       	and    eax,0xfffff000
c000cb0b:	6a 11                	push   0x11
c000cb0d:	53                   	push   ebx
c000cb0e:	50                   	push   eax
c000cb0f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb13:	e8 f4 f8 ff ff       	call   c000c40c <VAS::mapPage(unsigned long, unsigned long, int)>
c000cb18:	83 c4 10             	add    esp,0x10
c000cb1b:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c000cb20:	48                   	dec    eax
c000cb21:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c000cb26:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c000cb2b:	85 c0                	test   eax,eax
c000cb2d:	75 01                	jne    c000cb30 <VAS::VAS(bool)+0x27a>
c000cb2f:	fb                   	sti    
c000cb30:	90                   	nop
c000cb31:	83 c4 28             	add    esp,0x28
c000cb34:	5b                   	pop    ebx
c000cb35:	c3                   	ret    

c000cb36 <VAS::VAS()>:
c000cb36:	53                   	push   ebx
c000cb37:	83 ec 18             	sub    esp,0x18
c000cb3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb3e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cb45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb49:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000cb50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb54:	a3 34 8d 02 c0       	mov    ds:0xc0028d34,eax
c000cb59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb5d:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000cb61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb65:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000cb68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb6c:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000cb73:	c7 44 24 0c 14 00 00 00 	mov    DWORD PTR [esp+0xc],0x14
c000cb7b:	83 ec 0c             	sub    esp,0xc
c000cb7e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cb82:	e8 60 d2 ff ff       	call   c0009de7 <malloc>
c000cb87:	83 c4 10             	add    esp,0x10
c000cb8a:	89 c3                	mov    ebx,eax
c000cb8c:	83 ec 08             	sub    esp,0x8
c000cb8f:	6a 01                	push   0x1
c000cb91:	53                   	push   ebx
c000cb92:	e8 1f fd ff ff       	call   c000c8b6 <VAS::VAS(bool)>
c000cb97:	83 c4 10             	add    esp,0x10
c000cb9a:	89 1d 2c 8d 02 c0    	mov    DWORD PTR ds:0xc0028d2c,ebx
c000cba0:	a1 2c 8d 02 c0       	mov    eax,ds:0xc0028d2c
c000cba5:	83 ec 0c             	sub    esp,0xc
c000cba8:	6a 01                	push   0x1
c000cbaa:	68 00 01 00 00       	push   0x100
c000cbaf:	6a 00                	push   0x0
c000cbb1:	6a 00                	push   0x0
c000cbb3:	50                   	push   eax
c000cbb4:	e8 49 fb ff ff       	call   c000c702 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000cbb9:	83 c4 20             	add    esp,0x20
c000cbbc:	90                   	nop
c000cbbd:	83 c4 18             	add    esp,0x18
c000cbc0:	5b                   	pop    ebx
c000cbc1:	c3                   	ret    

c000cbc2 <VAS::evict(unsigned long)>:
c000cbc2:	55                   	push   ebp
c000cbc3:	57                   	push   edi
c000cbc4:	56                   	push   esi
c000cbc5:	53                   	push   ebx
c000cbc6:	83 ec 1c             	sub    esp,0x1c
c000cbc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cbcd:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000cbd1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cbd5:	e8 08 f3 ff ff       	call   c000bee2 <Virt::allocateSwapfilePage()>
c000cbda:	89 c7                	mov    edi,eax
c000cbdc:	a1 4c 80 02 c0       	mov    eax,ds:0xc002804c
c000cbe1:	85 c0                	test   eax,eax
c000cbe3:	7e 3d                	jle    c000cc22 <VAS::evict(unsigned long)+0x60>
c000cbe5:	89 ee                	mov    esi,ebp
c000cbe7:	31 db                	xor    ebx,ebx
c000cbe9:	83 ec 0c             	sub    esp,0xc
c000cbec:	57                   	push   edi
c000cbed:	e8 de f2 ff ff       	call   c000bed0 <Virt::swapIDToSector(unsigned long)>
c000cbf2:	89 34 24             	mov    DWORD PTR [esp],esi
c000cbf5:	01 d8                	add    eax,ebx
c000cbf7:	6a 01                	push   0x1
c000cbf9:	31 d2                	xor    edx,edx
c000cbfb:	43                   	inc    ebx
c000cbfc:	52                   	push   edx
c000cbfd:	81 c6 00 02 00 00    	add    esi,0x200
c000cc03:	50                   	push   eax
c000cc04:	0f be 05 58 80 02 c0 	movsx  eax,BYTE PTR ds:0xc0028058
c000cc0b:	ff 34 85 bc 90 02 c0 	push   DWORD PTR [eax*4-0x3ffd6f44]
c000cc12:	e8 ef 3e 00 00       	call   c0010b06 <LogicalDisk::write(unsigned long long, int, void*)>
c000cc17:	83 c4 20             	add    esp,0x20
c000cc1a:	39 1d 4c 80 02 c0    	cmp    DWORD PTR ds:0xc002804c,ebx
c000cc20:	7f c7                	jg     c000cbe9 <VAS::evict(unsigned long)+0x27>
c000cc22:	83 ec 08             	sub    esp,0x8
c000cc25:	c1 e7 0b             	shl    edi,0xb
c000cc28:	55                   	push   ebp
c000cc29:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cc2d:	e8 44 f4 ff ff       	call   c000c076 <VAS::getPageTableEntry(unsigned long)>
c000cc32:	8b 10                	mov    edx,DWORD PTR [eax]
c000cc34:	89 d3                	mov    ebx,edx
c000cc36:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000cc3c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000cc42:	09 d7                	or     edi,edx
c000cc44:	89 38                	mov    DWORD PTR [eax],edi
c000cc46:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cc49:	ff 05 28 8d 02 c0    	inc    DWORD PTR ds:0xc0028d28
c000cc4f:	e8 c7 d7 ff ff       	call   c000a41b <Phys::freePage(unsigned long)>
c000cc54:	0f 20 d8             	mov    eax,cr3
c000cc57:	0f 22 d8             	mov    cr3,eax
c000cc5a:	ff 35 28 8d 02 c0    	push   DWORD PTR ds:0xc0028d28
c000cc60:	55                   	push   ebp
c000cc61:	53                   	push   ebx
c000cc62:	68 bc 4f 02 c0       	push   0xc0024fbc
c000cc67:	e8 ab 04 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000cc6c:	a1 24 8d 02 c0       	mov    eax,ds:0xc0028d24
c000cc71:	c7 44 24 50 7a 50 02 c0 	mov    DWORD PTR [esp+0x50],0xc002507a
c000cc79:	8d 50 01             	lea    edx,[eax+0x1]
c000cc7c:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000cc80:	89 15 24 8d 02 c0    	mov    DWORD PTR ds:0xc0028d24,edx
c000cc86:	83 c4 3c             	add    esp,0x3c
c000cc89:	5b                   	pop    ebx
c000cc8a:	5e                   	pop    esi
c000cc8b:	5f                   	pop    edi
c000cc8c:	5d                   	pop    ebp
c000cc8d:	e9 85 04 00 00       	jmp    c000d117 <Dbg::kprintf(char const*, ...)>

c000cc92 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000cc92:	55                   	push   ebp
c000cc93:	57                   	push   edi
c000cc94:	56                   	push   esi
c000cc95:	53                   	push   ebx
c000cc96:	83 ec 14             	sub    esp,0x14
c000cc99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc9d:	68 8b 50 02 c0       	push   0xc002508b
c000cca2:	e8 70 04 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000cca7:	83 c4 10             	add    esp,0x10
c000ccaa:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000ccae:	81 e5 00 f0 ff ff    	and    ebp,0xfffff000
c000ccb4:	74 20                	je     c000ccd6 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000ccb6:	83 ec 08             	sub    esp,0x8
c000ccb9:	55                   	push   ebp
c000ccba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccbe:	e8 b3 f3 ff ff       	call   c000c076 <VAS::getPageTableEntry(unsigned long)>
c000ccc3:	83 c4 10             	add    esp,0x10
c000ccc6:	89 c3                	mov    ebx,eax
c000ccc8:	85 c0                	test   eax,eax
c000ccca:	74 0a                	je     c000ccd6 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000cccc:	8b 38                	mov    edi,DWORD PTR [eax]
c000ccce:	f7 c7 01 00 00 00    	test   edi,0x1
c000ccd4:	74 0a                	je     c000cce0 <VAS::tryLoadBackOffDisk(unsigned long)+0x4e>
c000ccd6:	31 c0                	xor    eax,eax
c000ccd8:	83 c4 0c             	add    esp,0xc
c000ccdb:	5b                   	pop    ebx
c000ccdc:	5e                   	pop    esi
c000ccdd:	5f                   	pop    edi
c000ccde:	5d                   	pop    ebp
c000ccdf:	c3                   	ret    
c000cce0:	e8 b9 d7 ff ff       	call   c000a49e <Phys::allocatePage()>
c000cce5:	c1 ef 0b             	shr    edi,0xb
c000cce8:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ccea:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000ccf0:	09 c2                	or     edx,eax
c000ccf2:	81 ca 01 08 00 00    	or     edx,0x801
c000ccf8:	89 13                	mov    DWORD PTR [ebx],edx
c000ccfa:	8b 0d 4c 80 02 c0    	mov    ecx,DWORD PTR ds:0xc002804c
c000cd00:	85 c9                	test   ecx,ecx
c000cd02:	7e 3d                	jle    c000cd41 <VAS::tryLoadBackOffDisk(unsigned long)+0xaf>
c000cd04:	89 ee                	mov    esi,ebp
c000cd06:	31 db                	xor    ebx,ebx
c000cd08:	83 ec 0c             	sub    esp,0xc
c000cd0b:	57                   	push   edi
c000cd0c:	e8 bf f1 ff ff       	call   c000bed0 <Virt::swapIDToSector(unsigned long)>
c000cd11:	89 34 24             	mov    DWORD PTR [esp],esi
c000cd14:	01 d8                	add    eax,ebx
c000cd16:	6a 01                	push   0x1
c000cd18:	31 d2                	xor    edx,edx
c000cd1a:	43                   	inc    ebx
c000cd1b:	52                   	push   edx
c000cd1c:	81 c6 00 02 00 00    	add    esi,0x200
c000cd22:	50                   	push   eax
c000cd23:	0f be 05 58 80 02 c0 	movsx  eax,BYTE PTR ds:0xc0028058
c000cd2a:	ff 34 85 bc 90 02 c0 	push   DWORD PTR [eax*4-0x3ffd6f44]
c000cd31:	e8 64 3d 00 00       	call   c0010a9a <LogicalDisk::read(unsigned long long, int, void*)>
c000cd36:	83 c4 20             	add    esp,0x20
c000cd39:	39 1d 4c 80 02 c0    	cmp    DWORD PTR ds:0xc002804c,ebx
c000cd3f:	7f c7                	jg     c000cd08 <VAS::tryLoadBackOffDisk(unsigned long)+0x76>
c000cd41:	a1 28 8d 02 c0       	mov    eax,ds:0xc0028d28
c000cd46:	48                   	dec    eax
c000cd47:	52                   	push   edx
c000cd48:	a3 28 8d 02 c0       	mov    ds:0xc0028d28,eax
c000cd4d:	50                   	push   eax
c000cd4e:	55                   	push   ebp
c000cd4f:	68 9e 50 02 c0       	push   0xc002509e
c000cd54:	e8 be 03 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000cd59:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cd5c:	e8 51 f1 ff ff       	call   c000beb2 <Virt::freeSwapfilePage(unsigned long)>
c000cd61:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c000cd66:	83 c4 10             	add    esp,0x10
c000cd69:	48                   	dec    eax
c000cd6a:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c000cd6f:	85 c0                	test   eax,eax
c000cd71:	74 1d                	je     c000cd90 <VAS::tryLoadBackOffDisk(unsigned long)+0xfe>
c000cd73:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000cd77:	25 ff 0f 00 00       	and    eax,0xfff
c000cd7c:	3d e0 0f 00 00       	cmp    eax,0xfe0
c000cd81:	77 10                	ja     c000cd93 <VAS::tryLoadBackOffDisk(unsigned long)+0x101>
c000cd83:	0f 20 d8             	mov    eax,cr3
c000cd86:	0f 22 d8             	mov    cr3,eax
c000cd89:	b0 01                	mov    al,0x1
c000cd8b:	e9 48 ff ff ff       	jmp    c000ccd8 <VAS::tryLoadBackOffDisk(unsigned long)+0x46>
c000cd90:	fb                   	sti    
c000cd91:	eb e0                	jmp    c000cd73 <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000cd93:	83 ec 0c             	sub    esp,0xc
c000cd96:	68 b3 50 02 c0       	push   0xc00250b3
c000cd9b:	e8 77 03 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000cda0:	83 c4 10             	add    esp,0x10
c000cda3:	eb de                	jmp    c000cd83 <VAS::tryLoadBackOffDisk(unsigned long)+0xf1>
c000cda5:	90                   	nop

c000cda6 <VAS::scanForEviction()>:
c000cda6:	57                   	push   edi
c000cda7:	31 ff                	xor    edi,edi
c000cda9:	56                   	push   esi
c000cdaa:	53                   	push   ebx
c000cdab:	83 ec 10             	sub    esp,0x10
c000cdae:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cdb2:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000cdb5:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000cdbb:	75 0e                	jne    c000cdcb <VAS::scanForEviction()+0x25>
c000cdbd:	89 da                	mov    edx,ebx
c000cdbf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cdc2:	c1 ea 16             	shr    edx,0x16
c000cdc5:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000cdc9:	74 4e                	je     c000ce19 <VAS::scanForEviction()+0x73>
c000cdcb:	53                   	push   ebx
c000cdcc:	56                   	push   esi
c000cdcd:	e8 a4 f2 ff ff       	call   c000c076 <VAS::getPageTableEntry(unsigned long)>
c000cdd2:	5a                   	pop    edx
c000cdd3:	8b 10                	mov    edx,DWORD PTR [eax]
c000cdd5:	59                   	pop    ecx
c000cdd6:	89 d1                	mov    ecx,edx
c000cdd8:	81 e1 01 08 00 00    	and    ecx,0x801
c000cdde:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000cde4:	74 3e                	je     c000ce24 <VAS::scanForEviction()+0x7e>
c000cde6:	81 c3 00 10 00 00    	add    ebx,0x1000
c000cdec:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000cdf2:	76 2b                	jbe    c000ce1f <VAS::scanForEviction()+0x79>
c000cdf4:	47                   	inc    edi
c000cdf5:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000cdfc:	83 ff 03             	cmp    edi,0x3
c000cdff:	74 32                	je     c000ce33 <VAS::scanForEviction()+0x8d>
c000ce01:	31 db                	xor    ebx,ebx
c000ce03:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000ce09:	75 c0                	jne    c000cdcb <VAS::scanForEviction()+0x25>
c000ce0b:	89 da                	mov    edx,ebx
c000ce0d:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ce10:	c1 ea 16             	shr    edx,0x16
c000ce13:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000ce17:	75 b2                	jne    c000cdcb <VAS::scanForEviction()+0x25>
c000ce19:	81 c3 00 00 40 00    	add    ebx,0x400000
c000ce1f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000ce22:	eb 91                	jmp    c000cdb5 <VAS::scanForEviction()+0xf>
c000ce24:	f6 c2 20             	test   dl,0x20
c000ce27:	74 13                	je     c000ce3c <VAS::scanForEviction()+0x96>
c000ce29:	83 e2 df             	and    edx,0xffffffdf
c000ce2c:	89 10                	mov    DWORD PTR [eax],edx
c000ce2e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000ce31:	eb b3                	jmp    c000cde6 <VAS::scanForEviction()+0x40>
c000ce33:	83 c4 10             	add    esp,0x10
c000ce36:	31 c0                	xor    eax,eax
c000ce38:	5b                   	pop    ebx
c000ce39:	5e                   	pop    esi
c000ce3a:	5f                   	pop    edi
c000ce3b:	c3                   	ret    
c000ce3c:	83 ec 08             	sub    esp,0x8
c000ce3f:	89 d0                	mov    eax,edx
c000ce41:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ce46:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ce4a:	53                   	push   ebx
c000ce4b:	68 c3 50 02 c0       	push   0xc00250c3
c000ce50:	e8 c2 02 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000ce55:	58                   	pop    eax
c000ce56:	5a                   	pop    edx
c000ce57:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000ce5a:	56                   	push   esi
c000ce5b:	e8 62 fd ff ff       	call   c000cbc2 <VAS::evict(unsigned long)>
c000ce60:	59                   	pop    ecx
c000ce61:	5b                   	pop    ebx
c000ce62:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000ce65:	68 d7 50 02 c0       	push   0xc00250d7
c000ce6a:	e8 a8 02 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000ce6f:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000ce76:	83 c4 10             	add    esp,0x10
c000ce79:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ce7d:	83 c4 10             	add    esp,0x10
c000ce80:	5b                   	pop    ebx
c000ce81:	5e                   	pop    esi
c000ce82:	5f                   	pop    edi
c000ce83:	c3                   	ret    

c000ce84 <mapVASFirstTime>:
c000ce84:	55                   	push   ebp
c000ce85:	57                   	push   edi
c000ce86:	56                   	push   esi
c000ce87:	53                   	push   ebx
c000ce88:	83 ec 0c             	sub    esp,0xc
c000ce8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ce90:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000ce93:	4a                   	dec    edx
c000ce94:	0f 84 fe 00 00 00    	je     c000cf98 <mapVASFirstTime+0x114>
c000ce9a:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000ce9d:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000cea0:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000cea5:	c1 e5 15             	shl    ebp,0x15
c000cea8:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000cead:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000ceb3:	29 eb                	sub    ebx,ebp
c000ceb5:	29 ef                	sub    edi,ebp
c000ceb7:	83 ec 08             	sub    esp,0x8
c000ceba:	53                   	push   ebx
c000cebb:	68 03 51 02 c0       	push   0xc0025103
c000cec0:	e8 52 02 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000cec5:	e8 d4 d5 ff ff       	call   c000a49e <Phys::allocatePage()>
c000ceca:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c000ced1:	6a 01                	push   0x1
c000ced3:	53                   	push   ebx
c000ced4:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000ceda:	50                   	push   eax
c000cedb:	56                   	push   esi
c000cedc:	e8 21 f8 ff ff       	call   c000c702 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000cee1:	83 c4 20             	add    esp,0x20
c000cee4:	39 fb                	cmp    ebx,edi
c000cee6:	75 cf                	jne    c000ceb7 <mapVASFirstTime+0x33>
c000cee8:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000ceed:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000cef2:	29 eb                	sub    ebx,ebp
c000cef4:	29 ef                	sub    edi,ebp
c000cef6:	83 ec 08             	sub    esp,0x8
c000cef9:	53                   	push   ebx
c000cefa:	68 1f 51 02 c0       	push   0xc002511f
c000ceff:	e8 13 02 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000cf04:	58                   	pop    eax
c000cf05:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000cf09:	5a                   	pop    edx
c000cf0a:	19 c0                	sbb    eax,eax
c000cf0c:	83 e0 04             	and    eax,0x4
c000cf0f:	05 03 04 00 00       	add    eax,0x403
c000cf14:	50                   	push   eax
c000cf15:	68 33 51 02 c0       	push   0xc0025133
c000cf1a:	e8 f8 01 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000cf1f:	e8 7a d5 ff ff       	call   c000a49e <Phys::allocatePage()>
c000cf24:	59                   	pop    ecx
c000cf25:	89 c5                	mov    ebp,eax
c000cf27:	58                   	pop    eax
c000cf28:	55                   	push   ebp
c000cf29:	68 41 51 02 c0       	push   0xc0025141
c000cf2e:	e8 e4 01 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000cf33:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000cf37:	19 d2                	sbb    edx,edx
c000cf39:	83 e2 04             	and    edx,0x4
c000cf3c:	81 c2 03 04 00 00    	add    edx,0x403
c000cf42:	89 14 24             	mov    DWORD PTR [esp],edx
c000cf45:	6a 01                	push   0x1
c000cf47:	53                   	push   ebx
c000cf48:	55                   	push   ebp
c000cf49:	56                   	push   esi
c000cf4a:	e8 b3 f7 ff ff       	call   c000c702 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000cf4f:	83 c4 18             	add    esp,0x18
c000cf52:	53                   	push   ebx
c000cf53:	56                   	push   esi
c000cf54:	e8 1d f1 ff ff       	call   c000c076 <VAS::getPageTableEntry(unsigned long)>
c000cf59:	5a                   	pop    edx
c000cf5a:	59                   	pop    ecx
c000cf5b:	ff 30                	push   DWORD PTR [eax]
c000cf5d:	68 5d 51 02 c0       	push   0xc002515d
c000cf62:	e8 b0 01 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000cf67:	0f 20 d8             	mov    eax,cr3
c000cf6a:	83 c4 0c             	add    esp,0xc
c000cf6d:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000cf73:	56                   	push   esi
c000cf74:	50                   	push   eax
c000cf75:	68 68 51 02 c0       	push   0xc0025168
c000cf7a:	e8 98 01 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000cf7f:	83 c4 10             	add    esp,0x10
c000cf82:	39 df                	cmp    edi,ebx
c000cf84:	0f 85 6c ff ff ff    	jne    c000cef6 <mapVASFirstTime+0x72>
c000cf8a:	0f 20 d8             	mov    eax,cr3
c000cf8d:	0f 22 d8             	mov    cr3,eax
c000cf90:	83 c4 0c             	add    esp,0xc
c000cf93:	5b                   	pop    ebx
c000cf94:	5e                   	pop    esi
c000cf95:	5f                   	pop    edi
c000cf96:	5d                   	pop    ebp
c000cf97:	c3                   	ret    
c000cf98:	83 ec 0c             	sub    esp,0xc
c000cf9b:	68 ea 50 02 c0       	push   0xc00250ea
c000cfa0:	e8 72 01 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000cfa5:	83 c4 10             	add    esp,0x10
c000cfa8:	83 c4 0c             	add    esp,0xc
c000cfab:	5b                   	pop    ebx
c000cfac:	5e                   	pop    esi
c000cfad:	5f                   	pop    edi
c000cfae:	5d                   	pop    ebp
c000cfaf:	c3                   	ret    

c000cfb0 <__cxa_atexit>:
c000cfb0:	31 c0                	xor    eax,eax
c000cfb2:	c3                   	ret    

c000cfb3 <__cxa_finalize>:
c000cfb3:	c3                   	ret    

c000cfb4 <__stack_chk_fail>:
c000cfb4:	55                   	push   ebp
c000cfb5:	89 e5                	mov    ebp,esp
c000cfb7:	83 ec 14             	sub    esp,0x14
c000cfba:	68 80 51 02 c0       	push   0xc0025180
c000cfbf:	e8 53 01 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000cfc4:	58                   	pop    eax
c000cfc5:	5a                   	pop    edx
c000cfc6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cfc9:	68 d0 51 02 c0       	push   0xc00251d0
c000cfce:	e8 44 01 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000cfd3:	59                   	pop    ecx
c000cfd4:	58                   	pop    eax
c000cfd5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cfd8:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cfdb:	68 d0 51 02 c0       	push   0xc00251d0
c000cfe0:	e8 32 01 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000cfe5:	5a                   	pop    edx
c000cfe6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cfe9:	59                   	pop    ecx
c000cfea:	8b 00                	mov    eax,DWORD PTR [eax]
c000cfec:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cfef:	68 d0 51 02 c0       	push   0xc00251d0
c000cff4:	e8 1e 01 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000cff9:	5a                   	pop    edx
c000cffa:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cffd:	59                   	pop    ecx
c000cffe:	8b 00                	mov    eax,DWORD PTR [eax]
c000d000:	8b 00                	mov    eax,DWORD PTR [eax]
c000d002:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d005:	68 d0 51 02 c0       	push   0xc00251d0
c000d00a:	e8 08 01 00 00       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000d00f:	c7 04 24 d8 51 02 c0 	mov    DWORD PTR [esp],0xc00251d8
c000d016:	e8 de 81 00 00       	call   c00151f9 <Krnl::panic(char const*)>
c000d01b:	83 c4 10             	add    esp,0x10
c000d01e:	c9                   	leave  
c000d01f:	c3                   	ret    

c000d020 <__cxa_pure_virtual>:
c000d020:	83 ec 18             	sub    esp,0x18
c000d023:	68 f0 51 02 c0       	push   0xc00251f0
c000d028:	e8 cc 81 00 00       	call   c00151f9 <Krnl::panic(char const*)>
c000d02d:	83 c4 1c             	add    esp,0x1c
c000d030:	c3                   	ret    

c000d031 <operator new[](unsigned long)>:
c000d031:	e9 b1 cd ff ff       	jmp    c0009de7 <malloc>

c000d036 <operator delete(void*, unsigned long)>:
c000d036:	e9 cc cd ff ff       	jmp    c0009e07 <rfree>

c000d03b <operator delete[](void*)>:
c000d03b:	e9 c7 cd ff ff       	jmp    c0009e07 <rfree>

c000d040 <operator delete[](void*, unsigned long)>:
c000d040:	e9 c2 cd ff ff       	jmp    c0009e07 <rfree>

c000d045 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000d045:	55                   	push   ebp
c000d046:	b9 11 00 00 00       	mov    ecx,0x11
c000d04b:	57                   	push   edi
c000d04c:	56                   	push   esi
c000d04d:	be d6 4c 02 c0       	mov    esi,0xc0024cd6
c000d052:	53                   	push   ebx
c000d053:	83 ec 20             	sub    esp,0x20
c000d056:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d05a:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000d05e:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000d062:	fc                   	cld    
c000d063:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d065:	89 ee                	mov    esi,ebp
c000d067:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d06b:	eb 02                	jmp    c000d06f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c000d06d:	89 c6                	mov    esi,eax
c000d06f:	31 d2                	xor    edx,edx
c000d071:	41                   	inc    ecx
c000d072:	89 f0                	mov    eax,esi
c000d074:	f7 f3                	div    ebx
c000d076:	39 de                	cmp    esi,ebx
c000d078:	73 f3                	jae    c000d06d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c000d07a:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000d07d:	eb 02                	jmp    c000d081 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000d07f:	89 c5                	mov    ebp,eax
c000d081:	31 d2                	xor    edx,edx
c000d083:	49                   	dec    ecx
c000d084:	89 e8                	mov    eax,ebp
c000d086:	f7 f3                	div    ebx
c000d088:	39 dd                	cmp    ebp,ebx
c000d08a:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000d08e:	88 11                	mov    BYTE PTR [ecx],dl
c000d090:	73 ed                	jae    c000d07f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000d092:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d096:	83 c4 20             	add    esp,0x20
c000d099:	5b                   	pop    ebx
c000d09a:	5e                   	pop    esi
c000d09b:	5f                   	pop    edi
c000d09c:	5d                   	pop    ebp
c000d09d:	c3                   	ret    

c000d09e <Dbg::logc(char)>:
c000d09e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d0a2:	f6 05 20 8c 02 c0 10 	test   BYTE PTR ds:0xc0028c20,0x10
c000d0a9:	75 12                	jne    c000d0bd <Dbg::logc(char)+0x1f>
c000d0ab:	ba fd 03 00 00       	mov    edx,0x3fd
c000d0b0:	ec                   	in     al,dx
c000d0b1:	a8 20                	test   al,0x20
c000d0b3:	74 fb                	je     c000d0b0 <Dbg::logc(char)+0x12>
c000d0b5:	ba f8 03 00 00       	mov    edx,0x3f8
c000d0ba:	88 c8                	mov    al,cl
c000d0bc:	ee                   	out    dx,al
c000d0bd:	c3                   	ret    

c000d0be <Dbg::logs(char*)>:
c000d0be:	53                   	push   ebx
c000d0bf:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000d0c3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000d0c6:	84 c0                	test   al,al
c000d0c8:	74 0f                	je     c000d0d9 <Dbg::logs(char*)+0x1b>
c000d0ca:	50                   	push   eax
c000d0cb:	43                   	inc    ebx
c000d0cc:	e8 cd ff ff ff       	call   c000d09e <Dbg::logc(char)>
c000d0d1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000d0d4:	5a                   	pop    edx
c000d0d5:	84 c0                	test   al,al
c000d0d7:	75 f1                	jne    c000d0ca <Dbg::logs(char*)+0xc>
c000d0d9:	5b                   	pop    ebx
c000d0da:	c3                   	ret    

c000d0db <Dbg::logWriteInt(unsigned int)>:
c000d0db:	83 ec 10             	sub    esp,0x10
c000d0de:	6a 0a                	push   0xa
c000d0e0:	8d 44 24 08          	lea    eax,[esp+0x8]
c000d0e4:	50                   	push   eax
c000d0e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0e9:	e8 57 ff ff ff       	call   c000d045 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000d0ee:	50                   	push   eax
c000d0ef:	e8 ca ff ff ff       	call   c000d0be <Dbg::logs(char*)>
c000d0f4:	83 c4 20             	add    esp,0x20
c000d0f7:	c3                   	ret    

c000d0f8 <Dbg::logWriteIntBase(unsigned int, int)>:
c000d0f8:	83 ec 10             	sub    esp,0x10
c000d0fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d0ff:	8d 44 24 08          	lea    eax,[esp+0x8]
c000d103:	50                   	push   eax
c000d104:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d108:	e8 38 ff ff ff       	call   c000d045 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000d10d:	50                   	push   eax
c000d10e:	e8 ab ff ff ff       	call   c000d0be <Dbg::logs(char*)>
c000d113:	83 c4 20             	add    esp,0x20
c000d116:	c3                   	ret    

c000d117 <Dbg::kprintf(char const*, ...)>:
c000d117:	55                   	push   ebp
c000d118:	57                   	push   edi
c000d119:	56                   	push   esi
c000d11a:	53                   	push   ebx
c000d11b:	83 ec 0c             	sub    esp,0xc
c000d11e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000d122:	f6 05 20 8c 02 c0 10 	test   BYTE PTR ds:0xc0028c20,0x10
c000d129:	74 08                	je     c000d133 <Dbg::kprintf(char const*, ...)+0x1c>
c000d12b:	83 c4 0c             	add    esp,0xc
c000d12e:	5b                   	pop    ebx
c000d12f:	5e                   	pop    esi
c000d130:	5f                   	pop    edi
c000d131:	5d                   	pop    ebp
c000d132:	c3                   	ret    
c000d133:	8d 44 24 24          	lea    eax,[esp+0x24]
c000d137:	31 db                	xor    ebx,ebx
c000d139:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d13d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000d140:	84 c0                	test   al,al
c000d142:	74 e7                	je     c000d12b <Dbg::kprintf(char const*, ...)+0x14>
c000d144:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000d147:	3c 25                	cmp    al,0x25
c000d149:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000d14c:	75 44                	jne    c000d192 <Dbg::kprintf(char const*, ...)+0x7b>
c000d14e:	83 c3 02             	add    ebx,0x2
c000d151:	8a 07                	mov    al,BYTE PTR [edi]
c000d153:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000d156:	83 e8 25             	sub    eax,0x25
c000d159:	3c 53                	cmp    al,0x53
c000d15b:	0f 87 c9 00 00 00    	ja     c000d22a <Dbg::kprintf(char const*, ...)+0x113>
c000d161:	0f b6 c0             	movzx  eax,al
c000d164:	ff 24 85 04 52 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdadfc]
c000d16b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d16f:	89 c8                	mov    eax,ecx
c000d171:	83 c1 04             	add    ecx,0x4
c000d174:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000d178:	ff 30                	push   DWORD PTR [eax]
c000d17a:	e8 5c ff ff ff       	call   c000d0db <Dbg::logWriteInt(unsigned int)>
c000d17f:	5f                   	pop    edi
c000d180:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000d184:	84 c0                	test   al,al
c000d186:	74 a3                	je     c000d12b <Dbg::kprintf(char const*, ...)+0x14>
c000d188:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000d18b:	3c 25                	cmp    al,0x25
c000d18d:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000d190:	74 bc                	je     c000d14e <Dbg::kprintf(char const*, ...)+0x37>
c000d192:	50                   	push   eax
c000d193:	89 eb                	mov    ebx,ebp
c000d195:	e8 04 ff ff ff       	call   c000d09e <Dbg::logc(char)>
c000d19a:	89 fd                	mov    ebp,edi
c000d19c:	58                   	pop    eax
c000d19d:	eb e1                	jmp    c000d180 <Dbg::kprintf(char const*, ...)+0x69>
c000d19f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d1a3:	89 c8                	mov    eax,ecx
c000d1a5:	83 c1 04             	add    ecx,0x4
c000d1a8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000d1ac:	ff 30                	push   DWORD PTR [eax]
c000d1ae:	e8 0b ff ff ff       	call   c000d0be <Dbg::logs(char*)>
c000d1b3:	58                   	pop    eax
c000d1b4:	eb ca                	jmp    c000d180 <Dbg::kprintf(char const*, ...)+0x69>
c000d1b6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d1ba:	89 d0                	mov    eax,edx
c000d1bc:	83 c2 04             	add    edx,0x4
c000d1bf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d1c3:	ff 30                	push   DWORD PTR [eax]
c000d1c5:	e8 11 ff ff ff       	call   c000d0db <Dbg::logWriteInt(unsigned int)>
c000d1ca:	58                   	pop    eax
c000d1cb:	eb b3                	jmp    c000d180 <Dbg::kprintf(char const*, ...)+0x69>
c000d1cd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d1d1:	89 d0                	mov    eax,edx
c000d1d3:	83 c2 04             	add    edx,0x4
c000d1d6:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000d1d9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d1dd:	50                   	push   eax
c000d1de:	e8 bb fe ff ff       	call   c000d09e <Dbg::logc(char)>
c000d1e3:	58                   	pop    eax
c000d1e4:	eb 9a                	jmp    c000d180 <Dbg::kprintf(char const*, ...)+0x69>
c000d1e6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d1ea:	89 c8                	mov    eax,ecx
c000d1ec:	83 c1 04             	add    ecx,0x4
c000d1ef:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000d1f3:	6a 10                	push   0x10
c000d1f5:	ff 30                	push   DWORD PTR [eax]
c000d1f7:	e8 fc fe ff ff       	call   c000d0f8 <Dbg::logWriteIntBase(unsigned int, int)>
c000d1fc:	59                   	pop    ecx
c000d1fd:	5f                   	pop    edi
c000d1fe:	eb 80                	jmp    c000d180 <Dbg::kprintf(char const*, ...)+0x69>
c000d200:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d204:	89 d0                	mov    eax,edx
c000d206:	83 c2 08             	add    edx,0x8
c000d209:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d20d:	6a 10                	push   0x10
c000d20f:	ff 30                	push   DWORD PTR [eax]
c000d211:	e8 e2 fe ff ff       	call   c000d0f8 <Dbg::logWriteIntBase(unsigned int, int)>
c000d216:	58                   	pop    eax
c000d217:	5a                   	pop    edx
c000d218:	e9 63 ff ff ff       	jmp    c000d180 <Dbg::kprintf(char const*, ...)+0x69>
c000d21d:	6a 25                	push   0x25
c000d21f:	e8 7a fe ff ff       	call   c000d09e <Dbg::logc(char)>
c000d224:	58                   	pop    eax
c000d225:	e9 56 ff ff ff       	jmp    c000d180 <Dbg::kprintf(char const*, ...)+0x69>
c000d22a:	6a 25                	push   0x25
c000d22c:	e8 6d fe ff ff       	call   c000d09e <Dbg::logc(char)>
c000d231:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000d234:	50                   	push   eax
c000d235:	e8 64 fe ff ff       	call   c000d09e <Dbg::logc(char)>
c000d23a:	5a                   	pop    edx
c000d23b:	59                   	pop    ecx
c000d23c:	e9 3f ff ff ff       	jmp    c000d180 <Dbg::kprintf(char const*, ...)+0x69>
c000d241:	90                   	nop

c000d242 <File::read(unsigned long long, void*, int*)>:
c000d242:	53                   	push   ebx
c000d243:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d247:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d24b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000d252:	3c 19                	cmp    al,0x19
c000d254:	77 35                	ja     c000d28b <File::read(unsigned long long, void*, int*)+0x49>
c000d256:	8b 04 85 c0 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e40]
c000d25d:	85 c0                	test   eax,eax
c000d25f:	74 2a                	je     c000d28b <File::read(unsigned long long, void*, int*)+0x49>
c000d261:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d267:	85 c0                	test   eax,eax
c000d269:	74 20                	je     c000d28b <File::read(unsigned long long, void*, int*)+0x49>
c000d26b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d26f:	74 21                	je     c000d292 <File::read(unsigned long long, void*, int*)+0x50>
c000d271:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d273:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d277:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000d27d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d281:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d285:	5b                   	pop    ebx
c000d286:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000d289:	ff e0                	jmp    eax
c000d28b:	b8 0b 00 00 00       	mov    eax,0xb
c000d290:	eb 05                	jmp    c000d297 <File::read(unsigned long long, void*, int*)+0x55>
c000d292:	b8 05 00 00 00       	mov    eax,0x5
c000d297:	5b                   	pop    ebx
c000d298:	c3                   	ret    
c000d299:	90                   	nop

c000d29a <File::write(unsigned long long, void*, int*)>:
c000d29a:	53                   	push   ebx
c000d29b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d29f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d2a3:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000d2aa:	3c 19                	cmp    al,0x19
c000d2ac:	77 35                	ja     c000d2e3 <File::write(unsigned long long, void*, int*)+0x49>
c000d2ae:	8b 04 85 c0 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e40]
c000d2b5:	85 c0                	test   eax,eax
c000d2b7:	74 2a                	je     c000d2e3 <File::write(unsigned long long, void*, int*)+0x49>
c000d2b9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d2bf:	85 c0                	test   eax,eax
c000d2c1:	74 20                	je     c000d2e3 <File::write(unsigned long long, void*, int*)+0x49>
c000d2c3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d2c7:	74 21                	je     c000d2ea <File::write(unsigned long long, void*, int*)+0x50>
c000d2c9:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d2cb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d2cf:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000d2d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d2d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d2dd:	5b                   	pop    ebx
c000d2de:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000d2e1:	ff e0                	jmp    eax
c000d2e3:	b8 0b 00 00 00       	mov    eax,0xb
c000d2e8:	eb 05                	jmp    c000d2ef <File::write(unsigned long long, void*, int*)+0x55>
c000d2ea:	b8 05 00 00 00       	mov    eax,0x5
c000d2ef:	5b                   	pop    ebx
c000d2f0:	c3                   	ret    
c000d2f1:	90                   	nop

c000d2f2 <Directory::read(unsigned long long, void*, int*)>:
c000d2f2:	53                   	push   ebx
c000d2f3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d2f7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d2fb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000d302:	3c 19                	cmp    al,0x19
c000d304:	77 35                	ja     c000d33b <Directory::read(unsigned long long, void*, int*)+0x49>
c000d306:	8b 04 85 c0 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e40]
c000d30d:	85 c0                	test   eax,eax
c000d30f:	74 2a                	je     c000d33b <Directory::read(unsigned long long, void*, int*)+0x49>
c000d311:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d317:	85 c0                	test   eax,eax
c000d319:	74 20                	je     c000d33b <Directory::read(unsigned long long, void*, int*)+0x49>
c000d31b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d31f:	74 21                	je     c000d342 <Directory::read(unsigned long long, void*, int*)+0x50>
c000d321:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d323:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d327:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000d32d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d331:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d335:	5b                   	pop    ebx
c000d336:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000d339:	ff e0                	jmp    eax
c000d33b:	b8 0b 00 00 00       	mov    eax,0xb
c000d340:	eb 05                	jmp    c000d347 <Directory::read(unsigned long long, void*, int*)+0x55>
c000d342:	b8 05 00 00 00       	mov    eax,0x5
c000d347:	5b                   	pop    ebx
c000d348:	c3                   	ret    
c000d349:	90                   	nop

c000d34a <Directory::write(unsigned long long, void*, int*)>:
c000d34a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d34e:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000d355:	b8 0b 00 00 00       	mov    eax,0xb
c000d35a:	80 fa 19             	cmp    dl,0x19
c000d35d:	77 18                	ja     c000d377 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000d35f:	8b 14 95 c0 91 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6e40]
c000d366:	85 d2                	test   edx,edx
c000d368:	74 0d                	je     c000d377 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000d36a:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000d371:	19 c0                	sbb    eax,eax
c000d373:	83 e0 0a             	and    eax,0xa
c000d376:	40                   	inc    eax
c000d377:	c3                   	ret    

c000d378 <File::isAtty()>:
c000d378:	31 c0                	xor    eax,eax
c000d37a:	c3                   	ret    
c000d37b:	90                   	nop

c000d37c <Directory::isAtty()>:
c000d37c:	31 c0                	xor    eax,eax
c000d37e:	c3                   	ret    
c000d37f:	90                   	nop

c000d380 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000d380:	b8 0a 00 00 00       	mov    eax,0xa
c000d385:	c3                   	ret    

c000d386 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000d386:	b8 0a 00 00 00       	mov    eax,0xa
c000d38b:	c3                   	ret    

c000d38c <Filesystem::allocateSwapfile(char const*, int)>:
c000d38c:	31 c0                	xor    eax,eax
c000d38e:	31 d2                	xor    edx,edx
c000d390:	c3                   	ret    
c000d391:	90                   	nop

c000d392 <File::~File()>:
c000d392:	83 ec 0c             	sub    esp,0xc
c000d395:	ba 40 54 02 c0       	mov    edx,0xc0025440
c000d39a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d39e:	89 10                	mov    DWORD PTR [eax],edx
c000d3a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3a4:	83 ec 0c             	sub    esp,0xc
c000d3a7:	50                   	push   eax
c000d3a8:	e8 93 e7 ff ff       	call   c000bb40 <UnixFile::~UnixFile()>
c000d3ad:	83 c4 10             	add    esp,0x10
c000d3b0:	90                   	nop
c000d3b1:	83 c4 0c             	add    esp,0xc
c000d3b4:	c3                   	ret    
c000d3b5:	90                   	nop

c000d3b6 <File::~File()>:
c000d3b6:	83 ec 0c             	sub    esp,0xc
c000d3b9:	83 ec 0c             	sub    esp,0xc
c000d3bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3c0:	e8 cd ff ff ff       	call   c000d392 <File::~File()>
c000d3c5:	83 c4 10             	add    esp,0x10
c000d3c8:	83 ec 08             	sub    esp,0x8
c000d3cb:	68 14 01 00 00       	push   0x114
c000d3d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3d4:	e8 5d fc ff ff       	call   c000d036 <operator delete(void*, unsigned long)>
c000d3d9:	83 c4 10             	add    esp,0x10
c000d3dc:	83 c4 0c             	add    esp,0xc
c000d3df:	c3                   	ret    

c000d3e0 <Directory::~Directory()>:
c000d3e0:	83 ec 0c             	sub    esp,0xc
c000d3e3:	ba 5c 54 02 c0       	mov    edx,0xc002545c
c000d3e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3ec:	89 10                	mov    DWORD PTR [eax],edx
c000d3ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3f2:	83 ec 0c             	sub    esp,0xc
c000d3f5:	50                   	push   eax
c000d3f6:	e8 45 e7 ff ff       	call   c000bb40 <UnixFile::~UnixFile()>
c000d3fb:	83 c4 10             	add    esp,0x10
c000d3fe:	90                   	nop
c000d3ff:	83 c4 0c             	add    esp,0xc
c000d402:	c3                   	ret    
c000d403:	90                   	nop

c000d404 <Directory::~Directory()>:
c000d404:	83 ec 0c             	sub    esp,0xc
c000d407:	83 ec 0c             	sub    esp,0xc
c000d40a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d40e:	e8 cd ff ff ff       	call   c000d3e0 <Directory::~Directory()>
c000d413:	83 c4 10             	add    esp,0x10
c000d416:	83 ec 08             	sub    esp,0x8
c000d419:	68 14 01 00 00       	push   0x114
c000d41e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d422:	e8 0f fc ff ff       	call   c000d036 <operator delete(void*, unsigned long)>
c000d427:	83 c4 10             	add    esp,0x10
c000d42a:	83 c4 0c             	add    esp,0xc
c000d42d:	c3                   	ret    

c000d42e <Filesystem::Filesystem()>:
c000d42e:	ba d8 53 02 c0       	mov    edx,0xc00253d8
c000d433:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d437:	89 10                	mov    DWORD PTR [eax],edx
c000d439:	8b 15 38 8d 02 c0    	mov    edx,DWORD PTR ds:0xc0028d38
c000d43f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d443:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d446:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d44a:	a3 38 8d 02 c0       	mov    ds:0xc0028d38,eax
c000d44f:	90                   	nop
c000d450:	c3                   	ret    
c000d451:	90                   	nop

c000d452 <Filesystem::~Filesystem()>:
c000d452:	ba d8 53 02 c0       	mov    edx,0xc00253d8
c000d457:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d45b:	89 10                	mov    DWORD PTR [eax],edx
c000d45d:	90                   	nop
c000d45e:	c3                   	ret    
c000d45f:	90                   	nop

c000d460 <Filesystem::~Filesystem()>:
c000d460:	83 ec 0c             	sub    esp,0xc
c000d463:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d467:	e8 e6 ff ff ff       	call   c000d452 <Filesystem::~Filesystem()>
c000d46c:	83 c4 04             	add    esp,0x4
c000d46f:	83 ec 08             	sub    esp,0x8
c000d472:	6a 08                	push   0x8
c000d474:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d478:	e8 b9 fb ff ff       	call   c000d036 <operator delete(void*, unsigned long)>
c000d47d:	83 c4 10             	add    esp,0x10
c000d480:	83 c4 0c             	add    esp,0xc
c000d483:	c3                   	ret    

c000d484 <Fs::getcwd(Process*, char*, int)>:
c000d484:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d488:	31 c0                	xor    eax,eax
c000d48a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000d48d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000d491:	7d 15                	jge    c000d4a8 <Fs::getcwd(Process*, char*, int)+0x24>
c000d493:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d497:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000d49e:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000d4a1:	84 c9                	test   cl,cl
c000d4a3:	74 06                	je     c000d4ab <Fs::getcwd(Process*, char*, int)+0x27>
c000d4a5:	40                   	inc    eax
c000d4a6:	eb e2                	jmp    c000d48a <Fs::getcwd(Process*, char*, int)+0x6>
c000d4a8:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000d4ab:	31 c0                	xor    eax,eax
c000d4ad:	c3                   	ret    

c000d4ae <Fs::initVFS()>:
c000d4ae:	83 ec 18             	sub    esp,0x18
c000d4b1:	6a 08                	push   0x8
c000d4b3:	e8 2f c9 ff ff       	call   c0009de7 <malloc>
c000d4b8:	89 04 24             	mov    DWORD PTR [esp],eax
c000d4bb:	e8 d0 ed 00 00       	call   c001c290 <FAT::FAT()>
c000d4c0:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000d4c7:	e8 1b c9 ff ff       	call   c0009de7 <malloc>
c000d4cc:	89 04 24             	mov    DWORD PTR [esp],eax
c000d4cf:	e8 4c 00 01 00       	call   c001d520 <ISO9660::ISO9660()>
c000d4d4:	83 c4 1c             	add    esp,0x1c
c000d4d7:	c3                   	ret    

c000d4d8 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000d4d8:	55                   	push   ebp
c000d4d9:	57                   	push   edi
c000d4da:	56                   	push   esi
c000d4db:	53                   	push   ebx
c000d4dc:	81 ec 10 04 00 00    	sub    esp,0x410
c000d4e2:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000d4e9:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000d4f0:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000d4f7:	68 00 04 00 00       	push   0x400
c000d4fc:	6a 00                	push   0x0
c000d4fe:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000d502:	56                   	push   esi
c000d503:	e8 8c 31 ff ff       	call   c0000694 <memset>
c000d508:	83 c4 10             	add    esp,0x10
c000d50b:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000d50f:	75 0b                	jne    c000d51c <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000d511:	50                   	push   eax
c000d512:	50                   	push   eax
c000d513:	57                   	push   edi
c000d514:	56                   	push   esi
c000d515:	e8 36 32 ff ff       	call   c0000750 <strcpy>
c000d51a:	eb 41                	jmp    c000d55d <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000d51c:	8a 07                	mov    al,BYTE PTR [edi]
c000d51e:	3c 5c                	cmp    al,0x5c
c000d520:	74 04                	je     c000d526 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000d522:	3c 2f                	cmp    al,0x2f
c000d524:	75 18                	jne    c000d53e <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000d526:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000d529:	3c 60                	cmp    al,0x60
c000d52b:	7e 03                	jle    c000d530 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000d52d:	83 e8 20             	sub    eax,0x20
c000d530:	88 04 24             	mov    BYTE PTR [esp],al
c000d533:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000d53a:	50                   	push   eax
c000d53b:	50                   	push   eax
c000d53c:	eb 18                	jmp    c000d556 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000d53e:	50                   	push   eax
c000d53f:	50                   	push   eax
c000d540:	55                   	push   ebp
c000d541:	56                   	push   esi
c000d542:	e8 09 32 ff ff       	call   c0000750 <strcpy>
c000d547:	5a                   	pop    edx
c000d548:	59                   	pop    ecx
c000d549:	68 0a 6d 02 c0       	push   0xc0026d0a
c000d54e:	56                   	push   esi
c000d54f:	e8 3c 33 ff ff       	call   c0000890 <strcat>
c000d554:	5d                   	pop    ebp
c000d555:	58                   	pop    eax
c000d556:	57                   	push   edi
c000d557:	56                   	push   esi
c000d558:	e8 33 33 ff ff       	call   c0000890 <strcat>
c000d55d:	83 c4 10             	add    esp,0x10
c000d560:	8a 04 24             	mov    al,BYTE PTR [esp]
c000d563:	3c 60                	cmp    al,0x60
c000d565:	7e 03                	jle    c000d56a <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000d567:	83 e8 20             	sub    eax,0x20
c000d56a:	88 04 24             	mov    BYTE PTR [esp],al
c000d56d:	88 03                	mov    BYTE PTR [ebx],al
c000d56f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000d576:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000d57c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000d580:	bf 03 00 00 00       	mov    edi,0x3
c000d585:	b8 03 00 00 00       	mov    eax,0x3
c000d58a:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000d58d:	84 d2                	test   dl,dl
c000d58f:	0f 84 91 00 00 00    	je     c000d626 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000d595:	8d 4f 01             	lea    ecx,[edi+0x1]
c000d598:	80 fa 5c             	cmp    dl,0x5c
c000d59b:	74 05                	je     c000d5a2 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000d59d:	80 fa 2f             	cmp    dl,0x2f
c000d5a0:	75 12                	jne    c000d5b4 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000d5a2:	89 c5                	mov    ebp,eax
c000d5a4:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d5a9:	74 09                	je     c000d5b4 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000d5ab:	40                   	inc    eax
c000d5ac:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000d5b0:	89 cf                	mov    edi,ecx
c000d5b2:	eb d6                	jmp    c000d58a <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000d5b4:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000d5b9:	75 5b                	jne    c000d616 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000d5bb:	80 fa 2e             	cmp    dl,0x2e
c000d5be:	75 56                	jne    c000d616 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000d5c0:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000d5c4:	74 19                	je     c000d5df <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000d5c6:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000d5cb:	74 53                	je     c000d620 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000d5cd:	89 f9                	mov    ecx,edi
c000d5cf:	41                   	inc    ecx
c000d5d0:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000d5d3:	80 fa 2f             	cmp    dl,0x2f
c000d5d6:	74 f7                	je     c000d5cf <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000d5d8:	80 fa 5c             	cmp    dl,0x5c
c000d5db:	74 f2                	je     c000d5cf <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000d5dd:	eb d1                	jmp    c000d5b0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d5df:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000d5e4:	74 3a                	je     c000d620 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000d5e6:	83 f8 03             	cmp    eax,0x3
c000d5e9:	74 c5                	je     c000d5b0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d5eb:	41                   	inc    ecx
c000d5ec:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000d5ef:	80 fa 2f             	cmp    dl,0x2f
c000d5f2:	74 f7                	je     c000d5eb <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000d5f4:	80 fa 5c             	cmp    dl,0x5c
c000d5f7:	74 f2                	je     c000d5eb <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000d5f9:	48                   	dec    eax
c000d5fa:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d5fe:	75 06                	jne    c000d606 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000d600:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d604:	eb f3                	jmp    c000d5f9 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000d606:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d60a:	74 07                	je     c000d613 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000d60c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d610:	48                   	dec    eax
c000d611:	eb f3                	jmp    c000d606 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000d613:	40                   	inc    eax
c000d614:	eb 9a                	jmp    c000d5b0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d616:	80 fa 2f             	cmp    dl,0x2f
c000d619:	74 95                	je     c000d5b0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d61b:	80 fa 5c             	cmp    dl,0x5c
c000d61e:	74 90                	je     c000d5b0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d620:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000d623:	40                   	inc    eax
c000d624:	eb 8a                	jmp    c000d5b0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d626:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d62a:	83 ec 0c             	sub    esp,0xc
c000d62d:	53                   	push   ebx
c000d62e:	e8 7d 30 ff ff       	call   c00006b0 <strlen>
c000d633:	83 c4 10             	add    esp,0x10
c000d636:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000d63b:	75 26                	jne    c000d663 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000d63d:	83 ec 0c             	sub    esp,0xc
c000d640:	53                   	push   ebx
c000d641:	e8 6a 30 ff ff       	call   c00006b0 <strlen>
c000d646:	83 c4 10             	add    esp,0x10
c000d649:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000d64e:	74 26                	je     c000d676 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000d650:	83 ec 0c             	sub    esp,0xc
c000d653:	53                   	push   ebx
c000d654:	e8 57 30 ff ff       	call   c00006b0 <strlen>
c000d659:	83 c4 10             	add    esp,0x10
c000d65c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000d661:	eb c7                	jmp    c000d62a <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000d663:	83 ec 0c             	sub    esp,0xc
c000d666:	53                   	push   ebx
c000d667:	e8 44 30 ff ff       	call   c00006b0 <strlen>
c000d66c:	83 c4 10             	add    esp,0x10
c000d66f:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d674:	74 c7                	je     c000d63d <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000d676:	81 c4 0c 04 00 00    	add    esp,0x40c
c000d67c:	5b                   	pop    ebx
c000d67d:	5e                   	pop    esi
c000d67e:	5f                   	pop    edi
c000d67f:	5d                   	pop    ebp
c000d680:	c3                   	ret    
c000d681:	90                   	nop

c000d682 <File::File(char const*, Process*)>:
c000d682:	83 ec 0c             	sub    esp,0xc
c000d685:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d689:	83 ec 08             	sub    esp,0x8
c000d68c:	6a 00                	push   0x0
c000d68e:	50                   	push   eax
c000d68f:	e8 ca e2 ff ff       	call   c000b95e <UnixFile::UnixFile(int)>
c000d694:	83 c4 10             	add    esp,0x10
c000d697:	ba 40 54 02 c0       	mov    edx,0xc0025440
c000d69c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6a0:	89 10                	mov    DWORD PTR [eax],edx
c000d6a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d6a6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d6ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6b0:	83 c0 0d             	add    eax,0xd
c000d6b3:	83 ec 04             	sub    esp,0x4
c000d6b6:	52                   	push   edx
c000d6b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6bb:	50                   	push   eax
c000d6bc:	e8 17 fe ff ff       	call   c000d4d8 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d6c1:	83 c4 10             	add    esp,0x10
c000d6c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c8:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d6cb:	8d 50 bf             	lea    edx,[eax-0x41]
c000d6ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6d2:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d6d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6dc:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d6e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6e4:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d6ea:	0f b6 c0             	movzx  eax,al
c000d6ed:	8b 04 85 c0 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e40]
c000d6f4:	85 c0                	test   eax,eax
c000d6f6:	74 5e                	je     c000d756 <File::File(char const*, Process*)+0xd4>
c000d6f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6fc:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d702:	0f b6 c0             	movzx  eax,al
c000d705:	8b 04 85 c0 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e40]
c000d70c:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d712:	85 c0                	test   eax,eax
c000d714:	75 40                	jne    c000d756 <File::File(char const*, Process*)+0xd4>
c000d716:	83 ec 0c             	sub    esp,0xc
c000d719:	68 7c 53 02 c0       	push   0xc002537c
c000d71e:	e8 f4 f9 ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000d723:	83 c4 10             	add    esp,0x10
c000d726:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d72a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d730:	0f b6 c0             	movzx  eax,al
c000d733:	8b 04 85 c0 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e40]
c000d73a:	83 ec 0c             	sub    esp,0xc
c000d73d:	50                   	push   eax
c000d73e:	e8 55 32 00 00       	call   c0010998 <LogicalDisk::mount()>
c000d743:	83 c4 10             	add    esp,0x10
c000d746:	83 ec 0c             	sub    esp,0xc
c000d749:	68 3b 77 02 c0       	push   0xc002773b
c000d74e:	e8 c4 f9 ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000d753:	83 c4 10             	add    esp,0x10
c000d756:	90                   	nop
c000d757:	83 c4 0c             	add    esp,0xc
c000d75a:	c3                   	ret    
c000d75b:	90                   	nop

c000d75c <File::open(FileOpenMode)>:
c000d75c:	53                   	push   ebx
c000d75d:	b8 0b 00 00 00       	mov    eax,0xb
c000d762:	83 ec 08             	sub    esp,0x8
c000d765:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d769:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d770:	80 fa 19             	cmp    dl,0x19
c000d773:	77 40                	ja     c000d7b5 <File::open(FileOpenMode)+0x59>
c000d775:	8b 14 95 c0 91 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6e40]
c000d77c:	85 d2                	test   edx,edx
c000d77e:	74 35                	je     c000d7b5 <File::open(FileOpenMode)+0x59>
c000d780:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d786:	85 d2                	test   edx,edx
c000d788:	74 2b                	je     c000d7b5 <File::open(FileOpenMode)+0x59>
c000d78a:	b8 06 00 00 00       	mov    eax,0x6
c000d78f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d793:	75 20                	jne    c000d7b5 <File::open(FileOpenMode)+0x59>
c000d795:	8b 02                	mov    eax,DWORD PTR [edx]
c000d797:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7a1:	51                   	push   ecx
c000d7a2:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d7a5:	51                   	push   ecx
c000d7a6:	52                   	push   edx
c000d7a7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000d7aa:	83 c4 10             	add    esp,0x10
c000d7ad:	85 c0                	test   eax,eax
c000d7af:	75 04                	jne    c000d7b5 <File::open(FileOpenMode)+0x59>
c000d7b1:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d7b5:	83 c4 08             	add    esp,0x8
c000d7b8:	5b                   	pop    ebx
c000d7b9:	c3                   	ret    

c000d7ba <File::close()>:
c000d7ba:	53                   	push   ebx
c000d7bb:	b8 0b 00 00 00       	mov    eax,0xb
c000d7c0:	83 ec 08             	sub    esp,0x8
c000d7c3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d7c7:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d7ce:	80 fa 19             	cmp    dl,0x19
c000d7d1:	77 41                	ja     c000d814 <File::close()+0x5a>
c000d7d3:	8b 1c 95 c0 91 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd6e40]
c000d7da:	85 db                	test   ebx,ebx
c000d7dc:	74 36                	je     c000d814 <File::close()+0x5a>
c000d7de:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d7e5:	74 2d                	je     c000d814 <File::close()+0x5a>
c000d7e7:	b8 05 00 00 00       	mov    eax,0x5
c000d7ec:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d7f0:	74 22                	je     c000d814 <File::close()+0x5a>
c000d7f2:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d7f6:	8b 04 95 c0 91 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6e40]
c000d7fd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d803:	53                   	push   ebx
c000d804:	53                   	push   ebx
c000d805:	8b 10                	mov    edx,DWORD PTR [eax]
c000d807:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d80d:	50                   	push   eax
c000d80e:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000d811:	83 c4 10             	add    esp,0x10
c000d814:	83 c4 08             	add    esp,0x8
c000d817:	5b                   	pop    ebx
c000d818:	c3                   	ret    
c000d819:	90                   	nop

c000d81a <File::seek(unsigned long long)>:
c000d81a:	56                   	push   esi
c000d81b:	53                   	push   ebx
c000d81c:	b8 0b 00 00 00       	mov    eax,0xb
c000d821:	51                   	push   ecx
c000d822:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d826:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d82a:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000d831:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d835:	80 fa 19             	cmp    dl,0x19
c000d838:	77 31                	ja     c000d86b <File::seek(unsigned long long)+0x51>
c000d83a:	8b 14 95 c0 91 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6e40]
c000d841:	85 d2                	test   edx,edx
c000d843:	74 26                	je     c000d86b <File::seek(unsigned long long)+0x51>
c000d845:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d84b:	85 d2                	test   edx,edx
c000d84d:	74 1c                	je     c000d86b <File::seek(unsigned long long)+0x51>
c000d84f:	b8 05 00 00 00       	mov    eax,0x5
c000d854:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000d858:	74 11                	je     c000d86b <File::seek(unsigned long long)+0x51>
c000d85a:	8b 02                	mov    eax,DWORD PTR [edx]
c000d85c:	53                   	push   ebx
c000d85d:	51                   	push   ecx
c000d85e:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000d864:	52                   	push   edx
c000d865:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d868:	83 c4 10             	add    esp,0x10
c000d86b:	5a                   	pop    edx
c000d86c:	5b                   	pop    ebx
c000d86d:	5e                   	pop    esi
c000d86e:	c3                   	ret    
c000d86f:	90                   	nop

c000d870 <File::tell(unsigned long long*)>:
c000d870:	83 ec 0c             	sub    esp,0xc
c000d873:	b8 0b 00 00 00       	mov    eax,0xb
c000d878:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d87c:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d883:	80 fa 19             	cmp    dl,0x19
c000d886:	77 34                	ja     c000d8bc <File::tell(unsigned long long*)+0x4c>
c000d888:	8b 14 95 c0 91 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6e40]
c000d88f:	85 d2                	test   edx,edx
c000d891:	74 29                	je     c000d8bc <File::tell(unsigned long long*)+0x4c>
c000d893:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d899:	85 d2                	test   edx,edx
c000d89b:	74 1f                	je     c000d8bc <File::tell(unsigned long long*)+0x4c>
c000d89d:	b8 05 00 00 00       	mov    eax,0x5
c000d8a2:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d8a6:	74 14                	je     c000d8bc <File::tell(unsigned long long*)+0x4c>
c000d8a8:	50                   	push   eax
c000d8a9:	8b 02                	mov    eax,DWORD PTR [edx]
c000d8ab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d8af:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d8b5:	52                   	push   edx
c000d8b6:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d8b9:	83 c4 10             	add    esp,0x10
c000d8bc:	83 c4 0c             	add    esp,0xc
c000d8bf:	c3                   	ret    

c000d8c0 <File::rewind()>:
c000d8c0:	83 ec 10             	sub    esp,0x10
c000d8c3:	6a 00                	push   0x0
c000d8c5:	6a 00                	push   0x0
c000d8c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8cb:	e8 4a ff ff ff       	call   c000d81a <File::seek(unsigned long long)>
c000d8d0:	83 c4 1c             	add    esp,0x1c
c000d8d3:	c3                   	ret    

c000d8d4 <File::unlink()>:
c000d8d4:	83 ec 0c             	sub    esp,0xc
c000d8d7:	b8 0b 00 00 00       	mov    eax,0xb
c000d8dc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d8e0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d8e7:	80 f9 19             	cmp    cl,0x19
c000d8ea:	77 2f                	ja     c000d91b <File::unlink()+0x47>
c000d8ec:	8b 0c 8d c0 91 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6e40]
c000d8f3:	85 c9                	test   ecx,ecx
c000d8f5:	74 24                	je     c000d91b <File::unlink()+0x47>
c000d8f7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d8fd:	85 c9                	test   ecx,ecx
c000d8ff:	74 1a                	je     c000d91b <File::unlink()+0x47>
c000d901:	b8 06 00 00 00       	mov    eax,0x6
c000d906:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d90a:	75 0f                	jne    c000d91b <File::unlink()+0x47>
c000d90c:	83 c2 0d             	add    edx,0xd
c000d90f:	50                   	push   eax
c000d910:	50                   	push   eax
c000d911:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d913:	52                   	push   edx
c000d914:	51                   	push   ecx
c000d915:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d918:	83 c4 10             	add    esp,0x10
c000d91b:	83 c4 0c             	add    esp,0xc
c000d91e:	c3                   	ret    
c000d91f:	90                   	nop

c000d920 <File::rename(char const*)>:
c000d920:	83 ec 0c             	sub    esp,0xc
c000d923:	b8 0b 00 00 00       	mov    eax,0xb
c000d928:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d92c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d933:	80 f9 19             	cmp    cl,0x19
c000d936:	77 32                	ja     c000d96a <File::rename(char const*)+0x4a>
c000d938:	8b 0c 8d c0 91 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6e40]
c000d93f:	85 c9                	test   ecx,ecx
c000d941:	74 27                	je     c000d96a <File::rename(char const*)+0x4a>
c000d943:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d949:	85 c9                	test   ecx,ecx
c000d94b:	74 1d                	je     c000d96a <File::rename(char const*)+0x4a>
c000d94d:	b8 06 00 00 00       	mov    eax,0x6
c000d952:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d956:	75 12                	jne    c000d96a <File::rename(char const*)+0x4a>
c000d958:	83 c2 0d             	add    edx,0xd
c000d95b:	50                   	push   eax
c000d95c:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d95e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d962:	52                   	push   edx
c000d963:	51                   	push   ecx
c000d964:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d967:	83 c4 10             	add    esp,0x10
c000d96a:	83 c4 0c             	add    esp,0xc
c000d96d:	c3                   	ret    

c000d96e <File::chfatattr(unsigned char, unsigned char)>:
c000d96e:	57                   	push   edi
c000d96f:	b8 0b 00 00 00       	mov    eax,0xb
c000d974:	56                   	push   esi
c000d975:	53                   	push   ebx
c000d976:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d97a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d97e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d985:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000d989:	80 f9 19             	cmp    cl,0x19
c000d98c:	77 37                	ja     c000d9c5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d98e:	8b 0c 8d c0 91 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6e40]
c000d995:	85 c9                	test   ecx,ecx
c000d997:	74 2c                	je     c000d9c5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d999:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d99f:	85 c9                	test   ecx,ecx
c000d9a1:	74 22                	je     c000d9c5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d9a3:	b8 06 00 00 00       	mov    eax,0x6
c000d9a8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d9ac:	75 17                	jne    c000d9c5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d9ae:	8b 39                	mov    edi,DWORD PTR [ecx]
c000d9b0:	89 f0                	mov    eax,esi
c000d9b2:	83 c2 0d             	add    edx,0xd
c000d9b5:	0f b6 f0             	movzx  esi,al
c000d9b8:	0f b6 db             	movzx  ebx,bl
c000d9bb:	56                   	push   esi
c000d9bc:	53                   	push   ebx
c000d9bd:	52                   	push   edx
c000d9be:	51                   	push   ecx
c000d9bf:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000d9c2:	83 c4 10             	add    esp,0x10
c000d9c5:	5b                   	pop    ebx
c000d9c6:	5e                   	pop    esi
c000d9c7:	5f                   	pop    edi
c000d9c8:	c3                   	ret    
c000d9c9:	90                   	nop

c000d9ca <File::exists()>:
c000d9ca:	83 ec 0c             	sub    esp,0xc
c000d9cd:	31 c0                	xor    eax,eax
c000d9cf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d9d3:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d9da:	80 f9 19             	cmp    cl,0x19
c000d9dd:	77 24                	ja     c000da03 <File::exists()+0x39>
c000d9df:	8b 0c 8d c0 91 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6e40]
c000d9e6:	85 c9                	test   ecx,ecx
c000d9e8:	74 19                	je     c000da03 <File::exists()+0x39>
c000d9ea:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d9f0:	85 c9                	test   ecx,ecx
c000d9f2:	74 0f                	je     c000da03 <File::exists()+0x39>
c000d9f4:	83 c2 0d             	add    edx,0xd
c000d9f7:	50                   	push   eax
c000d9f8:	50                   	push   eax
c000d9f9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d9fb:	52                   	push   edx
c000d9fc:	51                   	push   ecx
c000d9fd:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000da00:	83 c4 10             	add    esp,0x10
c000da03:	83 c4 0c             	add    esp,0xc
c000da06:	c3                   	ret    
c000da07:	90                   	nop

c000da08 <File::stat(unsigned long long*, bool*)>:
c000da08:	56                   	push   esi
c000da09:	53                   	push   ebx
c000da0a:	50                   	push   eax
c000da0b:	b8 0b 00 00 00       	mov    eax,0xb
c000da10:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000da14:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000da18:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000da1f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000da23:	80 f9 19             	cmp    cl,0x19
c000da26:	77 3d                	ja     c000da65 <File::stat(unsigned long long*, bool*)+0x5d>
c000da28:	8b 0c 8d c0 91 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6e40]
c000da2f:	85 c9                	test   ecx,ecx
c000da31:	74 32                	je     c000da65 <File::stat(unsigned long long*, bool*)+0x5d>
c000da33:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000da39:	85 c9                	test   ecx,ecx
c000da3b:	74 28                	je     c000da65 <File::stat(unsigned long long*, bool*)+0x5d>
c000da3d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000da3f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000da43:	74 13                	je     c000da58 <File::stat(unsigned long long*, bool*)+0x50>
c000da45:	83 ec 04             	sub    esp,0x4
c000da48:	56                   	push   esi
c000da49:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000da4f:	51                   	push   ecx
c000da50:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000da53:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000da56:	eb 0a                	jmp    c000da62 <File::stat(unsigned long long*, bool*)+0x5a>
c000da58:	53                   	push   ebx
c000da59:	83 c2 0d             	add    edx,0xd
c000da5c:	56                   	push   esi
c000da5d:	52                   	push   edx
c000da5e:	51                   	push   ecx
c000da5f:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000da62:	83 c4 10             	add    esp,0x10
c000da65:	5a                   	pop    edx
c000da66:	5b                   	pop    ebx
c000da67:	5e                   	pop    esi
c000da68:	c3                   	ret    

c000da69 <Fs::setcwd(Process*, char*)>:
c000da69:	55                   	push   ebp
c000da6a:	57                   	push   edi
c000da6b:	56                   	push   esi
c000da6c:	53                   	push   ebx
c000da6d:	81 ec 20 02 00 00    	sub    esp,0x220
c000da73:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000da7a:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000da80:	57                   	push   edi
c000da81:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000da88:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000da8c:	56                   	push   esi
c000da8d:	e8 46 fa ff ff       	call   c000d4d8 <Fs::standardiseFiles(char*, char const*, char const*)>
c000da92:	89 34 24             	mov    DWORD PTR [esp],esi
c000da95:	e8 16 2c ff ff       	call   c00006b0 <strlen>
c000da9a:	83 c4 10             	add    esp,0x10
c000da9d:	83 f8 02             	cmp    eax,0x2
c000daa0:	77 15                	ja     c000dab7 <Fs::setcwd(Process*, char*)+0x4e>
c000daa2:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000daa7:	83 eb 41             	sub    ebx,0x41
c000daaa:	8b 04 9d c0 91 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd6e40]
c000dab1:	85 c0                	test   eax,eax
c000dab3:	75 1c                	jne    c000dad1 <Fs::setcwd(Process*, char*)+0x68>
c000dab5:	eb 4c                	jmp    c000db03 <Fs::setcwd(Process*, char*)+0x9a>
c000dab7:	83 ec 0c             	sub    esp,0xc
c000daba:	56                   	push   esi
c000dabb:	e8 f0 2b ff ff       	call   c00006b0 <strlen>
c000dac0:	83 c4 10             	add    esp,0x10
c000dac3:	83 f8 03             	cmp    eax,0x3
c000dac6:	75 74                	jne    c000db3c <Fs::setcwd(Process*, char*)+0xd3>
c000dac8:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000dacd:	75 6d                	jne    c000db3c <Fs::setcwd(Process*, char*)+0xd3>
c000dacf:	eb d1                	jmp    c000daa2 <Fs::setcwd(Process*, char*)+0x39>
c000dad1:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000dad8:	75 29                	jne    c000db03 <Fs::setcwd(Process*, char*)+0x9a>
c000dada:	83 ec 0c             	sub    esp,0xc
c000dadd:	68 54 53 02 c0       	push   0xc0025354
c000dae2:	e8 30 f6 ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000dae7:	5a                   	pop    edx
c000dae8:	ff 34 9d c0 91 02 c0 	push   DWORD PTR [ebx*4-0x3ffd6e40]
c000daef:	e8 a4 2e 00 00       	call   c0010998 <LogicalDisk::mount()>
c000daf4:	c7 04 24 3b 77 02 c0 	mov    DWORD PTR [esp],0xc002773b
c000dafb:	e8 17 f6 ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000db00:	83 c4 10             	add    esp,0x10
c000db03:	b8 03 00 00 00       	mov    eax,0x3
c000db08:	83 fb 19             	cmp    ebx,0x19
c000db0b:	0f 87 c6 00 00 00    	ja     c000dbd7 <Fs::setcwd(Process*, char*)+0x16e>
c000db11:	8b 14 9d c0 91 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd6e40]
c000db18:	b8 05 00 00 00       	mov    eax,0x5
c000db1d:	85 d2                	test   edx,edx
c000db1f:	0f 84 b2 00 00 00    	je     c000dbd7 <Fs::setcwd(Process*, char*)+0x16e>
c000db25:	b8 06 00 00 00       	mov    eax,0x6
c000db2a:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000db31:	0f 85 92 00 00 00    	jne    c000dbc9 <Fs::setcwd(Process*, char*)+0x160>
c000db37:	e9 9b 00 00 00       	jmp    c000dbd7 <Fs::setcwd(Process*, char*)+0x16e>
c000db3c:	83 ec 0c             	sub    esp,0xc
c000db3f:	68 14 01 00 00       	push   0x114
c000db44:	e8 9e c2 ff ff       	call   c0009de7 <malloc>
c000db49:	83 c4 0c             	add    esp,0xc
c000db4c:	89 c3                	mov    ebx,eax
c000db4e:	55                   	push   ebp
c000db4f:	56                   	push   esi
c000db50:	50                   	push   eax
c000db51:	e8 2c fb ff ff       	call   c000d682 <File::File(char const*, Process*)>
c000db56:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000db5b:	83 c4 0c             	add    esp,0xc
c000db5e:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000db62:	50                   	push   eax
c000db63:	8d 44 24 10          	lea    eax,[esp+0x10]
c000db67:	50                   	push   eax
c000db68:	53                   	push   ebx
c000db69:	e8 9a fe ff ff       	call   c000da08 <File::stat(unsigned long long*, bool*)>
c000db6e:	83 c4 10             	add    esp,0x10
c000db71:	83 f8 02             	cmp    eax,0x2
c000db74:	74 04                	je     c000db7a <Fs::setcwd(Process*, char*)+0x111>
c000db76:	85 c0                	test   eax,eax
c000db78:	74 1c                	je     c000db96 <Fs::setcwd(Process*, char*)+0x12d>
c000db7a:	b8 01 00 00 00       	mov    eax,0x1
c000db7f:	85 db                	test   ebx,ebx
c000db81:	74 54                	je     c000dbd7 <Fs::setcwd(Process*, char*)+0x16e>
c000db83:	83 ec 0c             	sub    esp,0xc
c000db86:	8b 03                	mov    eax,DWORD PTR [ebx]
c000db88:	53                   	push   ebx
c000db89:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000db8c:	83 c4 10             	add    esp,0x10
c000db8f:	b8 01 00 00 00       	mov    eax,0x1
c000db94:	eb 41                	jmp    c000dbd7 <Fs::setcwd(Process*, char*)+0x16e>
c000db96:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000db9b:	75 1c                	jne    c000dbb9 <Fs::setcwd(Process*, char*)+0x150>
c000db9d:	b8 02 00 00 00       	mov    eax,0x2
c000dba2:	85 db                	test   ebx,ebx
c000dba4:	74 31                	je     c000dbd7 <Fs::setcwd(Process*, char*)+0x16e>
c000dba6:	83 ec 0c             	sub    esp,0xc
c000dba9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dbab:	53                   	push   ebx
c000dbac:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000dbaf:	83 c4 10             	add    esp,0x10
c000dbb2:	b8 02 00 00 00       	mov    eax,0x2
c000dbb7:	eb 1e                	jmp    c000dbd7 <Fs::setcwd(Process*, char*)+0x16e>
c000dbb9:	85 db                	test   ebx,ebx
c000dbbb:	74 0c                	je     c000dbc9 <Fs::setcwd(Process*, char*)+0x160>
c000dbbd:	83 ec 0c             	sub    esp,0xc
c000dbc0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dbc2:	53                   	push   ebx
c000dbc3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000dbc6:	83 c4 10             	add    esp,0x10
c000dbc9:	50                   	push   eax
c000dbca:	50                   	push   eax
c000dbcb:	56                   	push   esi
c000dbcc:	57                   	push   edi
c000dbcd:	e8 7e 2b ff ff       	call   c0000750 <strcpy>
c000dbd2:	83 c4 10             	add    esp,0x10
c000dbd5:	31 c0                	xor    eax,eax
c000dbd7:	81 c4 1c 02 00 00    	add    esp,0x21c
c000dbdd:	5b                   	pop    ebx
c000dbde:	5e                   	pop    esi
c000dbdf:	5f                   	pop    edi
c000dbe0:	5d                   	pop    ebp
c000dbe1:	c3                   	ret    

c000dbe2 <Directory::Directory(char const*, Process*)>:
c000dbe2:	83 ec 0c             	sub    esp,0xc
c000dbe5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbe9:	83 ec 08             	sub    esp,0x8
c000dbec:	6a 00                	push   0x0
c000dbee:	50                   	push   eax
c000dbef:	e8 6a dd ff ff       	call   c000b95e <UnixFile::UnixFile(int)>
c000dbf4:	83 c4 10             	add    esp,0x10
c000dbf7:	ba 5c 54 02 c0       	mov    edx,0xc002545c
c000dbfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc00:	89 10                	mov    DWORD PTR [eax],edx
c000dc02:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dc06:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000dc0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc10:	83 c0 0d             	add    eax,0xd
c000dc13:	83 ec 04             	sub    esp,0x4
c000dc16:	52                   	push   edx
c000dc17:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc1b:	50                   	push   eax
c000dc1c:	e8 b7 f8 ff ff       	call   c000d4d8 <Fs::standardiseFiles(char*, char const*, char const*)>
c000dc21:	83 c4 10             	add    esp,0x10
c000dc24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc28:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000dc2b:	8d 50 bf             	lea    edx,[eax-0x41]
c000dc2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc32:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000dc38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc3c:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000dc40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc44:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000dc4a:	0f b6 c0             	movzx  eax,al
c000dc4d:	8b 04 85 c0 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e40]
c000dc54:	85 c0                	test   eax,eax
c000dc56:	74 5e                	je     c000dcb6 <Directory::Directory(char const*, Process*)+0xd4>
c000dc58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc5c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000dc62:	0f b6 c0             	movzx  eax,al
c000dc65:	8b 04 85 c0 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e40]
c000dc6c:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000dc72:	85 c0                	test   eax,eax
c000dc74:	75 40                	jne    c000dcb6 <Directory::Directory(char const*, Process*)+0xd4>
c000dc76:	83 ec 0c             	sub    esp,0xc
c000dc79:	68 a4 53 02 c0       	push   0xc00253a4
c000dc7e:	e8 94 f4 ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000dc83:	83 c4 10             	add    esp,0x10
c000dc86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc8a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000dc90:	0f b6 c0             	movzx  eax,al
c000dc93:	8b 04 85 c0 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e40]
c000dc9a:	83 ec 0c             	sub    esp,0xc
c000dc9d:	50                   	push   eax
c000dc9e:	e8 f5 2c 00 00       	call   c0010998 <LogicalDisk::mount()>
c000dca3:	83 c4 10             	add    esp,0x10
c000dca6:	83 ec 0c             	sub    esp,0xc
c000dca9:	68 3b 77 02 c0       	push   0xc002773b
c000dcae:	e8 64 f4 ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000dcb3:	83 c4 10             	add    esp,0x10
c000dcb6:	90                   	nop
c000dcb7:	83 c4 0c             	add    esp,0xc
c000dcba:	c3                   	ret    
c000dcbb:	90                   	nop

c000dcbc <Directory::open()>:
c000dcbc:	53                   	push   ebx
c000dcbd:	b8 0b 00 00 00       	mov    eax,0xb
c000dcc2:	83 ec 08             	sub    esp,0x8
c000dcc5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dcc9:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000dcd0:	80 fa 19             	cmp    dl,0x19
c000dcd3:	77 3d                	ja     c000dd12 <Directory::open()+0x56>
c000dcd5:	8b 14 95 c0 91 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6e40]
c000dcdc:	85 d2                	test   edx,edx
c000dcde:	74 32                	je     c000dd12 <Directory::open()+0x56>
c000dce0:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000dce6:	85 d2                	test   edx,edx
c000dce8:	74 28                	je     c000dd12 <Directory::open()+0x56>
c000dcea:	b8 06 00 00 00       	mov    eax,0x6
c000dcef:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000dcf3:	75 1d                	jne    c000dd12 <Directory::open()+0x56>
c000dcf5:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000dcfb:	50                   	push   eax
c000dcfc:	8b 02                	mov    eax,DWORD PTR [edx]
c000dcfe:	51                   	push   ecx
c000dcff:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000dd02:	51                   	push   ecx
c000dd03:	52                   	push   edx
c000dd04:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000dd07:	83 c4 10             	add    esp,0x10
c000dd0a:	85 c0                	test   eax,eax
c000dd0c:	75 04                	jne    c000dd12 <Directory::open()+0x56>
c000dd0e:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000dd12:	83 c4 08             	add    esp,0x8
c000dd15:	5b                   	pop    ebx
c000dd16:	c3                   	ret    
c000dd17:	90                   	nop

c000dd18 <Directory::close()>:
c000dd18:	53                   	push   ebx
c000dd19:	b8 0b 00 00 00       	mov    eax,0xb
c000dd1e:	83 ec 08             	sub    esp,0x8
c000dd21:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000dd25:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000dd2c:	80 fa 19             	cmp    dl,0x19
c000dd2f:	77 41                	ja     c000dd72 <Directory::close()+0x5a>
c000dd31:	8b 1c 95 c0 91 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd6e40]
c000dd38:	85 db                	test   ebx,ebx
c000dd3a:	74 36                	je     c000dd72 <Directory::close()+0x5a>
c000dd3c:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000dd43:	74 2d                	je     c000dd72 <Directory::close()+0x5a>
c000dd45:	b8 05 00 00 00       	mov    eax,0x5
c000dd4a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000dd4e:	74 22                	je     c000dd72 <Directory::close()+0x5a>
c000dd50:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000dd54:	8b 04 95 c0 91 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6e40]
c000dd5b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000dd61:	53                   	push   ebx
c000dd62:	53                   	push   ebx
c000dd63:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd65:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000dd6b:	50                   	push   eax
c000dd6c:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000dd6f:	83 c4 10             	add    esp,0x10
c000dd72:	83 c4 08             	add    esp,0x8
c000dd75:	5b                   	pop    ebx
c000dd76:	c3                   	ret    
c000dd77:	90                   	nop

c000dd78 <Directory::unlink()>:
c000dd78:	83 ec 0c             	sub    esp,0xc
c000dd7b:	b8 0b 00 00 00       	mov    eax,0xb
c000dd80:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dd84:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000dd8b:	80 f9 19             	cmp    cl,0x19
c000dd8e:	77 2f                	ja     c000ddbf <Directory::unlink()+0x47>
c000dd90:	8b 0c 8d c0 91 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6e40]
c000dd97:	85 c9                	test   ecx,ecx
c000dd99:	74 24                	je     c000ddbf <Directory::unlink()+0x47>
c000dd9b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000dda1:	85 c9                	test   ecx,ecx
c000dda3:	74 1a                	je     c000ddbf <Directory::unlink()+0x47>
c000dda5:	b8 06 00 00 00       	mov    eax,0x6
c000ddaa:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ddae:	75 0f                	jne    c000ddbf <Directory::unlink()+0x47>
c000ddb0:	83 c2 0d             	add    edx,0xd
c000ddb3:	50                   	push   eax
c000ddb4:	50                   	push   eax
c000ddb5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ddb7:	52                   	push   edx
c000ddb8:	51                   	push   ecx
c000ddb9:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000ddbc:	83 c4 10             	add    esp,0x10
c000ddbf:	83 c4 0c             	add    esp,0xc
c000ddc2:	c3                   	ret    
c000ddc3:	90                   	nop

c000ddc4 <Directory::rename(char const*)>:
c000ddc4:	83 ec 0c             	sub    esp,0xc
c000ddc7:	b8 0b 00 00 00       	mov    eax,0xb
c000ddcc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ddd0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ddd7:	80 f9 19             	cmp    cl,0x19
c000ddda:	77 32                	ja     c000de0e <Directory::rename(char const*)+0x4a>
c000dddc:	8b 0c 8d c0 91 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6e40]
c000dde3:	85 c9                	test   ecx,ecx
c000dde5:	74 27                	je     c000de0e <Directory::rename(char const*)+0x4a>
c000dde7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000dded:	85 c9                	test   ecx,ecx
c000ddef:	74 1d                	je     c000de0e <Directory::rename(char const*)+0x4a>
c000ddf1:	b8 06 00 00 00       	mov    eax,0x6
c000ddf6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ddfa:	75 12                	jne    c000de0e <Directory::rename(char const*)+0x4a>
c000ddfc:	83 c2 0d             	add    edx,0xd
c000ddff:	50                   	push   eax
c000de00:	8b 01                	mov    eax,DWORD PTR [ecx]
c000de02:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000de06:	52                   	push   edx
c000de07:	51                   	push   ecx
c000de08:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000de0b:	83 c4 10             	add    esp,0x10
c000de0e:	83 c4 0c             	add    esp,0xc
c000de11:	c3                   	ret    

c000de12 <Directory::exists()>:
c000de12:	83 ec 0c             	sub    esp,0xc
c000de15:	31 c0                	xor    eax,eax
c000de17:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000de1b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000de22:	80 f9 19             	cmp    cl,0x19
c000de25:	77 24                	ja     c000de4b <Directory::exists()+0x39>
c000de27:	8b 0c 8d c0 91 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6e40]
c000de2e:	85 c9                	test   ecx,ecx
c000de30:	74 19                	je     c000de4b <Directory::exists()+0x39>
c000de32:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000de38:	85 c9                	test   ecx,ecx
c000de3a:	74 0f                	je     c000de4b <Directory::exists()+0x39>
c000de3c:	83 c2 0d             	add    edx,0xd
c000de3f:	50                   	push   eax
c000de40:	50                   	push   eax
c000de41:	8b 01                	mov    eax,DWORD PTR [ecx]
c000de43:	52                   	push   edx
c000de44:	51                   	push   ecx
c000de45:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000de48:	83 c4 10             	add    esp,0x10
c000de4b:	83 c4 0c             	add    esp,0xc
c000de4e:	c3                   	ret    
c000de4f:	90                   	nop

c000de50 <Directory::read(dirent*)>:
c000de50:	83 ec 1c             	sub    esp,0x1c
c000de53:	b8 0b 00 00 00       	mov    eax,0xb
c000de58:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000de5c:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000de63:	80 fa 19             	cmp    dl,0x19
c000de66:	77 30                	ja     c000de98 <Directory::read(dirent*)+0x48>
c000de68:	8b 14 95 c0 91 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6e40]
c000de6f:	85 d2                	test   edx,edx
c000de71:	74 25                	je     c000de98 <Directory::read(dirent*)+0x48>
c000de73:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000de7a:	74 1c                	je     c000de98 <Directory::read(dirent*)+0x48>
c000de7c:	83 ec 0c             	sub    esp,0xc
c000de7f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000de81:	8d 54 24 18          	lea    edx,[esp+0x18]
c000de85:	52                   	push   edx
c000de86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000de8a:	6a 00                	push   0x0
c000de8c:	68 10 01 00 00       	push   0x110
c000de91:	51                   	push   ecx
c000de92:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000de95:	83 c4 20             	add    esp,0x20
c000de98:	83 c4 1c             	add    esp,0x1c
c000de9b:	c3                   	ret    

c000de9c <Directory::create()>:
c000de9c:	83 ec 0c             	sub    esp,0xc
c000de9f:	b8 0b 00 00 00       	mov    eax,0xb
c000dea4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dea8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000deaf:	80 f9 19             	cmp    cl,0x19
c000deb2:	77 2f                	ja     c000dee3 <Directory::create()+0x47>
c000deb4:	8b 0c 8d c0 91 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6e40]
c000debb:	85 c9                	test   ecx,ecx
c000debd:	74 24                	je     c000dee3 <Directory::create()+0x47>
c000debf:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000dec5:	85 c9                	test   ecx,ecx
c000dec7:	74 1a                	je     c000dee3 <Directory::create()+0x47>
c000dec9:	b8 06 00 00 00       	mov    eax,0x6
c000dece:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ded2:	75 0f                	jne    c000dee3 <Directory::create()+0x47>
c000ded4:	83 c2 0d             	add    edx,0xd
c000ded7:	50                   	push   eax
c000ded8:	50                   	push   eax
c000ded9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dedb:	52                   	push   edx
c000dedc:	51                   	push   ecx
c000dedd:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000dee0:	83 c4 10             	add    esp,0x10
c000dee3:	83 c4 0c             	add    esp,0xc
c000dee6:	c3                   	ret    
c000dee7:	90                   	nop

c000dee8 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000dee8:	b8 0a 00 00 00       	mov    eax,0xa
c000deed:	c3                   	ret    
c000deee:	66 90                	xchg   ax,ax

c000def0 <Bus::Bus(char const*)>:
c000def0:	83 ec 0c             	sub    esp,0xc
c000def3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000def7:	83 ec 08             	sub    esp,0x8
c000defa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000defe:	50                   	push   eax
c000deff:	e8 8a 09 00 00       	call   c000e88e <Device::Device(char const*)>
c000df04:	83 c4 10             	add    esp,0x10
c000df07:	ba 78 54 02 c0       	mov    edx,0xc0025478
c000df0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df10:	89 10                	mov    DWORD PTR [eax],edx
c000df12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df16:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000df20:	90                   	nop
c000df21:	83 c4 0c             	add    esp,0xc
c000df24:	c3                   	ret    
c000df25:	90                   	nop
c000df26:	66 90                	xchg   ax,ax

c000df28 <Bus::~Bus()>:
c000df28:	83 ec 0c             	sub    esp,0xc
c000df2b:	ba 78 54 02 c0       	mov    edx,0xc0025478
c000df30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df34:	89 10                	mov    DWORD PTR [eax],edx
c000df36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df3a:	83 ec 0c             	sub    esp,0xc
c000df3d:	50                   	push   eax
c000df3e:	e8 15 06 00 00       	call   c000e558 <Device::~Device()>
c000df43:	83 c4 10             	add    esp,0x10
c000df46:	90                   	nop
c000df47:	83 c4 0c             	add    esp,0xc
c000df4a:	c3                   	ret    
c000df4b:	90                   	nop

c000df4c <Bus::~Bus()>:
c000df4c:	83 ec 0c             	sub    esp,0xc
c000df4f:	83 ec 0c             	sub    esp,0xc
c000df52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df56:	e8 cd ff ff ff       	call   c000df28 <Bus::~Bus()>
c000df5b:	83 c4 10             	add    esp,0x10
c000df5e:	83 ec 08             	sub    esp,0x8
c000df61:	68 58 01 00 00       	push   0x158
c000df66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df6a:	e8 c7 f0 ff ff       	call   c000d036 <operator delete(void*, unsigned long)>
c000df6f:	83 c4 10             	add    esp,0x10
c000df72:	83 c4 0c             	add    esp,0xc
c000df75:	c3                   	ret    
c000df76:	66 90                	xchg   ax,ax

c000df78 <Buzzer::Buzzer(char const*)>:
c000df78:	83 ec 0c             	sub    esp,0xc
c000df7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df7f:	83 ec 08             	sub    esp,0x8
c000df82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df86:	50                   	push   eax
c000df87:	e8 02 09 00 00       	call   c000e88e <Device::Device(char const*)>
c000df8c:	83 c4 10             	add    esp,0x10
c000df8f:	ba a4 54 02 c0       	mov    edx,0xc00254a4
c000df94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df98:	89 10                	mov    DWORD PTR [eax],edx
c000df9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df9e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000dfa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfac:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000dfb6:	90                   	nop
c000dfb7:	83 c4 0c             	add    esp,0xc
c000dfba:	c3                   	ret    
c000dfbb:	90                   	nop

c000dfbc <Buzzer::~Buzzer()>:
c000dfbc:	83 ec 0c             	sub    esp,0xc
c000dfbf:	ba a4 54 02 c0       	mov    edx,0xc00254a4
c000dfc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfc8:	89 10                	mov    DWORD PTR [eax],edx
c000dfca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfce:	83 ec 0c             	sub    esp,0xc
c000dfd1:	50                   	push   eax
c000dfd2:	e8 81 05 00 00       	call   c000e558 <Device::~Device()>
c000dfd7:	83 c4 10             	add    esp,0x10
c000dfda:	90                   	nop
c000dfdb:	83 c4 0c             	add    esp,0xc
c000dfde:	c3                   	ret    
c000dfdf:	90                   	nop

c000dfe0 <Buzzer::~Buzzer()>:
c000dfe0:	83 ec 0c             	sub    esp,0xc
c000dfe3:	83 ec 0c             	sub    esp,0xc
c000dfe6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfea:	e8 cd ff ff ff       	call   c000dfbc <Buzzer::~Buzzer()>
c000dfef:	83 c4 10             	add    esp,0x10
c000dff2:	83 ec 08             	sub    esp,0x8
c000dff5:	68 5c 01 00 00       	push   0x15c
c000dffa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dffe:	e8 33 f0 ff ff       	call   c000d036 <operator delete(void*, unsigned long)>
c000e003:	83 c4 10             	add    esp,0x10
c000e006:	83 c4 0c             	add    esp,0xc
c000e009:	c3                   	ret    

c000e00a <Buzzer::stop()>:
c000e00a:	83 ec 14             	sub    esp,0x14
c000e00d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e011:	8b 10                	mov    edx,DWORD PTR [eax]
c000e013:	6a 00                	push   0x0
c000e015:	50                   	push   eax
c000e016:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000e019:	83 c4 1c             	add    esp,0x1c
c000e01c:	c3                   	ret    

c000e01d <beepThread(void*)>:
c000e01d:	53                   	push   ebx
c000e01e:	83 ec 08             	sub    esp,0x8
c000e021:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c000e026:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e02a:	48                   	dec    eax
c000e02b:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c000e030:	75 02                	jne    c000e034 <beepThread(void*)+0x17>
c000e032:	fb                   	sti    
c000e033:	90                   	nop
c000e034:	83 ec 0c             	sub    esp,0xc
c000e037:	6b 83 58 01 00 00 0a 	imul   eax,DWORD PTR [ebx+0x158],0xa
c000e03e:	50                   	push   eax
c000e03f:	e8 08 b2 00 00       	call   c001924c <milliTenthSleep(unsigned int)>
c000e044:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e047:	e8 be ff ff ff       	call   c000e00a <Buzzer::stop()>
c000e04c:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000e054:	83 c4 18             	add    esp,0x18
c000e057:	5b                   	pop    ebx
c000e058:	e9 ef b0 00 00       	jmp    c001914c <blockTask(TaskState)>
c000e05d:	90                   	nop

c000e05e <Buzzer::beep(int, int, bool)>:
c000e05e:	57                   	push   edi
c000e05f:	56                   	push   esi
c000e060:	53                   	push   ebx
c000e061:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e065:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e069:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e06d:	50                   	push   eax
c000e06e:	50                   	push   eax
c000e06f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e071:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e075:	53                   	push   ebx
c000e076:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e079:	83 c4 10             	add    esp,0x10
c000e07c:	89 f8                	mov    eax,edi
c000e07e:	84 c0                	test   al,al
c000e080:	74 1e                	je     c000e0a0 <Buzzer::beep(int, int, bool)+0x42>
c000e082:	83 ec 0c             	sub    esp,0xc
c000e085:	6b f6 0a             	imul   esi,esi,0xa
c000e088:	56                   	push   esi
c000e089:	e8 be b1 00 00       	call   c001924c <milliTenthSleep(unsigned int)>
c000e08e:	83 c4 10             	add    esp,0x10
c000e091:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000e095:	5b                   	pop    ebx
c000e096:	5e                   	pop    esi
c000e097:	5f                   	pop    edi
c000e098:	e9 6d ff ff ff       	jmp    c000e00a <Buzzer::stop()>
c000e09d:	8d 76 00             	lea    esi,[esi+0x0]
c000e0a0:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000e0a6:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000e0ab:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000e0b3:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000e0b7:	c7 44 24 14 1d e0 00 c0 	mov    DWORD PTR [esp+0x14],0xc000e01d
c000e0bf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0c3:	5b                   	pop    ebx
c000e0c4:	5e                   	pop    esi
c000e0c5:	5f                   	pop    edi
c000e0c6:	e9 6d ac 00 00       	jmp    c0018d38 <Process::createThread(void (*)(void*), void*, int)>
c000e0cb:	90                   	nop

c000e0cc <User::loadClockSettings(int)>:
c000e0cc:	53                   	push   ebx
c000e0cd:	83 ec 14             	sub    esp,0x14
c000e0d0:	68 14 01 00 00       	push   0x114
c000e0d5:	e8 0d bd ff ff       	call   c0009de7 <malloc>
c000e0da:	83 c4 0c             	add    esp,0xc
c000e0dd:	89 c3                	mov    ebx,eax
c000e0df:	ff 35 50 a1 02 c0    	push   DWORD PTR ds:0xc002a150
c000e0e5:	68 cc 54 02 c0       	push   0xc00254cc
c000e0ea:	50                   	push   eax
c000e0eb:	e8 92 f5 ff ff       	call   c000d682 <File::File(char const*, Process*)>
c000e0f0:	58                   	pop    eax
c000e0f1:	5a                   	pop    edx
c000e0f2:	6a 01                	push   0x1
c000e0f4:	53                   	push   ebx
c000e0f5:	e8 62 f6 ff ff       	call   c000d75c <File::open(FileOpenMode)>
c000e0fa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e0fd:	e8 b8 f6 ff ff       	call   c000d7ba <File::close()>
c000e102:	83 c4 10             	add    esp,0x10
c000e105:	85 db                	test   ebx,ebx
c000e107:	74 0f                	je     c000e118 <User::loadClockSettings(int)+0x4c>
c000e109:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e10b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000e10f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e112:	83 c4 08             	add    esp,0x8
c000e115:	5b                   	pop    ebx
c000e116:	ff e0                	jmp    eax
c000e118:	83 c4 08             	add    esp,0x8
c000e11b:	5b                   	pop    ebx
c000e11c:	c3                   	ret    
c000e11d:	90                   	nop

c000e11e <Clock::Clock(char const*)>:
c000e11e:	83 ec 0c             	sub    esp,0xc
c000e121:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e125:	83 ec 08             	sub    esp,0x8
c000e128:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e12c:	50                   	push   eax
c000e12d:	e8 5c 07 00 00       	call   c000e88e <Device::Device(char const*)>
c000e132:	83 c4 10             	add    esp,0x10
c000e135:	ba f4 54 02 c0       	mov    edx,0xc00254f4
c000e13a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e13e:	89 10                	mov    DWORD PTR [eax],edx
c000e140:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e144:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000e14e:	90                   	nop
c000e14f:	83 c4 0c             	add    esp,0xc
c000e152:	c3                   	ret    
c000e153:	90                   	nop

c000e154 <Clock::~Clock()>:
c000e154:	83 ec 0c             	sub    esp,0xc
c000e157:	ba f4 54 02 c0       	mov    edx,0xc00254f4
c000e15c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e160:	89 10                	mov    DWORD PTR [eax],edx
c000e162:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e166:	83 ec 0c             	sub    esp,0xc
c000e169:	50                   	push   eax
c000e16a:	e8 e9 03 00 00       	call   c000e558 <Device::~Device()>
c000e16f:	83 c4 10             	add    esp,0x10
c000e172:	90                   	nop
c000e173:	83 c4 0c             	add    esp,0xc
c000e176:	c3                   	ret    
c000e177:	90                   	nop

c000e178 <Clock::~Clock()>:
c000e178:	83 ec 0c             	sub    esp,0xc
c000e17b:	83 ec 0c             	sub    esp,0xc
c000e17e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e182:	e8 cd ff ff ff       	call   c000e154 <Clock::~Clock()>
c000e187:	83 c4 10             	add    esp,0x10
c000e18a:	83 ec 08             	sub    esp,0x8
c000e18d:	68 58 01 00 00       	push   0x158
c000e192:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e196:	e8 9b ee ff ff       	call   c000d036 <operator delete(void*, unsigned long)>
c000e19b:	83 c4 10             	add    esp,0x10
c000e19e:	83 c4 0c             	add    esp,0xc
c000e1a1:	c3                   	ret    

c000e1a2 <Clock::timeInSecondsLocal()>:
c000e1a2:	53                   	push   ebx
c000e1a3:	83 ec 14             	sub    esp,0x14
c000e1a6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e1aa:	8b 10                	mov    edx,DWORD PTR [eax]
c000e1ac:	50                   	push   eax
c000e1ad:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000e1b0:	0f b6 0d 40 8d 02 c0 	movzx  ecx,BYTE PTR ds:0xc0028d40
c000e1b7:	03 0d 44 8d 02 c0    	add    ecx,DWORD PTR ds:0xc0028d44
c000e1bd:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000e1c3:	89 cb                	mov    ebx,ecx
c000e1c5:	c1 fb 1f             	sar    ebx,0x1f
c000e1c8:	01 c8                	add    eax,ecx
c000e1ca:	11 da                	adc    edx,ebx
c000e1cc:	83 c4 10             	add    esp,0x10
c000e1cf:	31 c9                	xor    ecx,ecx
c000e1d1:	80 3d 41 8d 02 c0 00 	cmp    BYTE PTR ds:0xc0028d41,0x0
c000e1d8:	74 05                	je     c000e1df <Clock::timeInSecondsLocal()+0x3d>
c000e1da:	b9 08 07 00 00       	mov    ecx,0x708
c000e1df:	31 db                	xor    ebx,ebx
c000e1e1:	01 c8                	add    eax,ecx
c000e1e3:	11 da                	adc    edx,ebx
c000e1e5:	83 c4 08             	add    esp,0x8
c000e1e8:	5b                   	pop    ebx
c000e1e9:	c3                   	ret    

c000e1ea <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000e1ea:	57                   	push   edi
c000e1eb:	56                   	push   esi
c000e1ec:	53                   	push   ebx
c000e1ed:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e1f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e1f5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000e1f7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e1fb:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000e1fe:	0f b6 05 40 8d 02 c0 	movzx  eax,BYTE PTR ds:0xc0028d40
c000e205:	03 05 44 8d 02 c0    	add    eax,DWORD PTR ds:0xc0028d44
c000e20b:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000e211:	99                   	cdq    
c000e212:	29 c6                	sub    esi,eax
c000e214:	19 d7                	sbb    edi,edx
c000e216:	89 f0                	mov    eax,esi
c000e218:	89 fa                	mov    edx,edi
c000e21a:	31 f6                	xor    esi,esi
c000e21c:	80 3d 41 8d 02 c0 00 	cmp    BYTE PTR ds:0xc0028d41,0x0
c000e223:	74 05                	je     c000e22a <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000e225:	be 08 07 00 00       	mov    esi,0x708
c000e22a:	31 ff                	xor    edi,edi
c000e22c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000e230:	29 f0                	sub    eax,esi
c000e232:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e236:	19 fa                	sbb    edx,edi
c000e238:	89 d8                	mov    eax,ebx
c000e23a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e23e:	5b                   	pop    ebx
c000e23f:	5e                   	pop    esi
c000e240:	5f                   	pop    edi
c000e241:	ff e0                	jmp    eax

c000e243 <datetimeToSeconds(datetime_t)>:
c000e243:	55                   	push   ebp
c000e244:	57                   	push   edi
c000e245:	56                   	push   esi
c000e246:	53                   	push   ebx
c000e247:	83 ec 14             	sub    esp,0x14
c000e24a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e24e:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e252:	89 d3                	mov    ebx,edx
c000e254:	0f b6 c6             	movzx  eax,dh
c000e257:	c1 eb 10             	shr    ebx,0x10
c000e25a:	48                   	dec    eax
c000e25b:	66 81 eb 6c 07       	sub    bx,0x76c
c000e260:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000e264:	0f b6 f5             	movzx  esi,ch
c000e267:	89 cf                	mov    edi,ecx
c000e269:	6b f6 3c             	imul   esi,esi,0x3c
c000e26c:	c1 ef 10             	shr    edi,0x10
c000e26f:	0f b6 c9             	movzx  ecx,cl
c000e272:	89 f8                	mov    eax,edi
c000e274:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000e27a:	0f b6 f8             	movzx  edi,al
c000e27d:	0f b6 d2             	movzx  edx,dl
c000e280:	01 fe                	add    esi,edi
c000e282:	01 f1                	add    ecx,esi
c000e284:	0f b7 f3             	movzx  esi,bx
c000e287:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e28b:	c1 f9 1f             	sar    ecx,0x1f
c000e28e:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000e293:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e297:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000e29c:	8b 0c 8d 40 55 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdaac0]
c000e2a3:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000e2a7:	76 29                	jbe    c000e2d2 <datetimeToSeconds(datetime_t)+0x8f>
c000e2a9:	f6 c3 03             	test   bl,0x3
c000e2ac:	75 24                	jne    c000e2d2 <datetimeToSeconds(datetime_t)+0x8f>
c000e2ae:	31 d2                	xor    edx,edx
c000e2b0:	bf 64 00 00 00       	mov    edi,0x64
c000e2b5:	89 d8                	mov    eax,ebx
c000e2b7:	66 f7 f7             	div    di
c000e2ba:	66 85 d2             	test   dx,dx
c000e2bd:	75 12                	jne    c000e2d1 <datetimeToSeconds(datetime_t)+0x8e>
c000e2bf:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000e2c5:	bf 90 01 00 00       	mov    edi,0x190
c000e2ca:	99                   	cdq    
c000e2cb:	f7 ff                	idiv   edi
c000e2cd:	85 d2                	test   edx,edx
c000e2cf:	75 01                	jne    c000e2d2 <datetimeToSeconds(datetime_t)+0x8f>
c000e2d1:	41                   	inc    ecx
c000e2d2:	66 83 fb 46          	cmp    bx,0x46
c000e2d6:	76 45                	jbe    c000e31d <datetimeToSeconds(datetime_t)+0xda>
c000e2d8:	bb 46 00 00 00       	mov    ebx,0x46
c000e2dd:	bf 64 00 00 00       	mov    edi,0x64
c000e2e2:	bd 90 01 00 00       	mov    ebp,0x190
c000e2e7:	b8 6d 01 00 00       	mov    eax,0x16d
c000e2ec:	f6 c3 03             	test   bl,0x3
c000e2ef:	75 23                	jne    c000e314 <datetimeToSeconds(datetime_t)+0xd1>
c000e2f1:	89 d8                	mov    eax,ebx
c000e2f3:	99                   	cdq    
c000e2f4:	f7 ff                	idiv   edi
c000e2f6:	b8 6e 01 00 00       	mov    eax,0x16e
c000e2fb:	85 d2                	test   edx,edx
c000e2fd:	75 15                	jne    c000e314 <datetimeToSeconds(datetime_t)+0xd1>
c000e2ff:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000e305:	99                   	cdq    
c000e306:	f7 fd                	idiv   ebp
c000e308:	83 fa 01             	cmp    edx,0x1
c000e30b:	19 c0                	sbb    eax,eax
c000e30d:	f7 d0                	not    eax
c000e30f:	05 6e 01 00 00       	add    eax,0x16e
c000e314:	01 c1                	add    ecx,eax
c000e316:	43                   	inc    ebx
c000e317:	39 f3                	cmp    ebx,esi
c000e319:	7c cc                	jl     c000e2e7 <datetimeToSeconds(datetime_t)+0xa4>
c000e31b:	eb 35                	jmp    c000e352 <datetimeToSeconds(datetime_t)+0x10f>
c000e31d:	74 33                	je     c000e352 <datetimeToSeconds(datetime_t)+0x10f>
c000e31f:	b8 45 00 00 00       	mov    eax,0x45
c000e324:	89 c2                	mov    edx,eax
c000e326:	83 e2 03             	and    edx,0x3
c000e329:	39 f0                	cmp    eax,esi
c000e32b:	7e 0f                	jle    c000e33c <datetimeToSeconds(datetime_t)+0xf9>
c000e32d:	83 fa 01             	cmp    edx,0x1
c000e330:	19 d2                	sbb    edx,edx
c000e332:	48                   	dec    eax
c000e333:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000e33a:	eb e8                	jmp    c000e324 <datetimeToSeconds(datetime_t)+0xe1>
c000e33c:	b8 6d 01 00 00       	mov    eax,0x16d
c000e341:	85 d2                	test   edx,edx
c000e343:	75 0b                	jne    c000e350 <datetimeToSeconds(datetime_t)+0x10d>
c000e345:	66 83 fb 01          	cmp    bx,0x1
c000e349:	19 c0                	sbb    eax,eax
c000e34b:	05 6e 01 00 00       	add    eax,0x16e
c000e350:	29 c1                	sub    ecx,eax
c000e352:	b8 80 51 01 00       	mov    eax,0x15180
c000e357:	f7 e9                	imul   ecx
c000e359:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000e35d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000e361:	83 c4 14             	add    esp,0x14
c000e364:	5b                   	pop    ebx
c000e365:	5e                   	pop    esi
c000e366:	5f                   	pop    edi
c000e367:	5d                   	pop    ebp
c000e368:	c3                   	ret    
c000e369:	90                   	nop

c000e36a <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000e36a:	57                   	push   edi
c000e36b:	56                   	push   esi
c000e36c:	53                   	push   ebx
c000e36d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e371:	8b 06                	mov    eax,DWORD PTR [esi]
c000e373:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000e376:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e37a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e37e:	e8 c0 fe ff ff       	call   c000e243 <datetimeToSeconds(datetime_t)>
c000e383:	59                   	pop    ecx
c000e384:	0f b6 0d 40 8d 02 c0 	movzx  ecx,BYTE PTR ds:0xc0028d40
c000e38b:	5b                   	pop    ebx
c000e38c:	03 0d 44 8d 02 c0    	add    ecx,DWORD PTR ds:0xc0028d44
c000e392:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000e398:	89 cb                	mov    ebx,ecx
c000e39a:	c1 fb 1f             	sar    ebx,0x1f
c000e39d:	29 c8                	sub    eax,ecx
c000e39f:	19 da                	sbb    edx,ebx
c000e3a1:	31 c9                	xor    ecx,ecx
c000e3a3:	80 3d 41 8d 02 c0 00 	cmp    BYTE PTR ds:0xc0028d41,0x0
c000e3aa:	74 05                	je     c000e3b1 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000e3ac:	b9 08 07 00 00       	mov    ecx,0x708
c000e3b1:	31 db                	xor    ebx,ebx
c000e3b3:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000e3b7:	29 c8                	sub    eax,ecx
c000e3b9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e3bd:	19 da                	sbb    edx,ebx
c000e3bf:	89 f8                	mov    eax,edi
c000e3c1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e3c5:	5b                   	pop    ebx
c000e3c6:	5e                   	pop    esi
c000e3c7:	5f                   	pop    edi
c000e3c8:	ff e0                	jmp    eax

c000e3ca <secondsToDatetime(unsigned long long)>:
c000e3ca:	55                   	push   ebp
c000e3cb:	57                   	push   edi
c000e3cc:	56                   	push   esi
c000e3cd:	53                   	push   ebx
c000e3ce:	83 ec 1c             	sub    esp,0x1c
c000e3d1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e3d5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000e3d9:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e3dd:	6a 00                	push   0x0
c000e3df:	68 80 51 01 00       	push   0x15180
c000e3e4:	55                   	push   ebp
c000e3e5:	57                   	push   edi
c000e3e6:	e8 f5 4b 01 00       	call   c0022fe0 <__udivdi3>
c000e3eb:	83 c4 10             	add    esp,0x10
c000e3ee:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000e3f4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e3f8:	6a 00                	push   0x0
c000e3fa:	68 80 51 01 00       	push   0x15180
c000e3ff:	55                   	push   ebp
c000e400:	57                   	push   edi
c000e401:	bf 10 0e 00 00       	mov    edi,0xe10
c000e406:	e8 d5 4c 01 00       	call   c00230e0 <__umoddi3>
c000e40b:	83 c4 10             	add    esp,0x10
c000e40e:	99                   	cdq    
c000e40f:	f7 ff                	idiv   edi
c000e411:	bf 3c 00 00 00       	mov    edi,0x3c
c000e416:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000e419:	89 d0                	mov    eax,edx
c000e41b:	99                   	cdq    
c000e41c:	f7 ff                	idiv   edi
c000e41e:	85 db                	test   ebx,ebx
c000e420:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000e423:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000e426:	79 11                	jns    c000e439 <secondsToDatetime(unsigned long long)+0x6f>
c000e428:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e42c:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000e432:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000e437:	eb 07                	jmp    c000e440 <secondsToDatetime(unsigned long long)+0x76>
c000e439:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000e43e:	89 d8                	mov    eax,ebx
c000e440:	bf b4 05 00 00       	mov    edi,0x5b4
c000e445:	99                   	cdq    
c000e446:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000e44b:	f7 f9                	idiv   ecx
c000e44d:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000e452:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e456:	31 d2                	xor    edx,edx
c000e458:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000e460:	01 c3                	add    ebx,eax
c000e462:	89 d8                	mov    eax,ebx
c000e464:	f7 f1                	div    ecx
c000e466:	31 d2                	xor    edx,edx
c000e468:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000e46b:	89 d8                	mov    eax,ebx
c000e46d:	f7 f7                	div    edi
c000e46f:	31 d2                	xor    edx,edx
c000e471:	29 c1                	sub    ecx,eax
c000e473:	89 d8                	mov    eax,ebx
c000e475:	f7 f5                	div    ebp
c000e477:	bd 6d 01 00 00       	mov    ebp,0x16d
c000e47c:	29 c1                	sub    ecx,eax
c000e47e:	31 d2                	xor    edx,edx
c000e480:	89 c8                	mov    eax,ecx
c000e482:	f7 f5                	div    ebp
c000e484:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000e489:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e48d:	31 d2                	xor    edx,edx
c000e48f:	89 c8                	mov    eax,ecx
c000e491:	f7 f5                	div    ebp
c000e493:	31 d2                	xor    edx,edx
c000e495:	01 c3                	add    ebx,eax
c000e497:	89 c8                	mov    eax,ecx
c000e499:	f7 f7                	div    edi
c000e49b:	bf 99 00 00 00       	mov    edi,0x99
c000e4a0:	29 c3                	sub    ebx,eax
c000e4a2:	31 d2                	xor    edx,edx
c000e4a4:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000e4ac:	29 c3                	sub    ebx,eax
c000e4ae:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000e4b1:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000e4b4:	bb 05 00 00 00       	mov    ebx,0x5
c000e4b9:	83 c1 02             	add    ecx,0x2
c000e4bc:	89 c8                	mov    eax,ecx
c000e4be:	f7 f7                	div    edi
c000e4c0:	31 d2                	xor    edx,edx
c000e4c2:	89 c7                	mov    edi,eax
c000e4c4:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000e4ca:	83 c0 02             	add    eax,0x2
c000e4cd:	f7 f3                	div    ebx
c000e4cf:	89 eb                	mov    ebx,ebp
c000e4d1:	29 c3                	sub    ebx,eax
c000e4d3:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000e4d9:	88 1e                	mov    BYTE PTR [esi],bl
c000e4db:	19 c0                	sbb    eax,eax
c000e4dd:	31 d2                	xor    edx,edx
c000e4df:	83 e0 0c             	and    eax,0xc
c000e4e2:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000e4e6:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000e4ee:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e4f2:	83 f9 01             	cmp    ecx,0x1
c000e4f5:	0f 96 c2             	setbe  dl
c000e4f8:	41                   	inc    ecx
c000e4f9:	01 d0                	add    eax,edx
c000e4fb:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000e4fe:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000e502:	83 c4 1c             	add    esp,0x1c
c000e505:	89 f0                	mov    eax,esi
c000e507:	5b                   	pop    ebx
c000e508:	5e                   	pop    esi
c000e509:	5f                   	pop    edi
c000e50a:	5d                   	pop    ebp
c000e50b:	c2 04 00             	ret    0x4

c000e50e <Clock::timeInDatetimeLocal()>:
c000e50e:	53                   	push   ebx
c000e50f:	83 ec 14             	sub    esp,0x14
c000e512:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e516:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e51a:	e8 83 fc ff ff       	call   c000e1a2 <Clock::timeInSecondsLocal()>
c000e51f:	83 c4 0c             	add    esp,0xc
c000e522:	52                   	push   edx
c000e523:	50                   	push   eax
c000e524:	53                   	push   ebx
c000e525:	e8 a0 fe ff ff       	call   c000e3ca <secondsToDatetime(unsigned long long)>
c000e52a:	89 d8                	mov    eax,ebx
c000e52c:	83 c4 14             	add    esp,0x14
c000e52f:	5b                   	pop    ebx
c000e530:	c2 04 00             	ret    0x4
c000e533:	90                   	nop

c000e534 <Device::hibernate()>:
c000e534:	c3                   	ret    
c000e535:	90                   	nop

c000e536 <Device::wake()>:
c000e536:	c3                   	ret    
c000e537:	90                   	nop

c000e538 <Device::detect()>:
c000e538:	c3                   	ret    
c000e539:	90                   	nop

c000e53a <Device::disableLegacy()>:
c000e53a:	c3                   	ret    
c000e53b:	90                   	nop

c000e53c <Device::powerSaving(PowerSavingLevel)>:
c000e53c:	c3                   	ret    
c000e53d:	90                   	nop

c000e53e <DriverlessDevice::close(int, int, void*)>:
c000e53e:	31 c0                	xor    eax,eax
c000e540:	c3                   	ret    
c000e541:	90                   	nop

c000e542 <DriverlessDevice::detect()>:
c000e542:	c3                   	ret    
c000e543:	90                   	nop

c000e544 <DriverlessDevice::open(int, int, void*)>:
c000e544:	83 ec 18             	sub    esp,0x18
c000e547:	68 70 55 02 c0       	push   0xc0025570
c000e54c:	e8 a8 6c 00 00       	call   c00151f9 <Krnl::panic(char const*)>
c000e551:	83 c8 ff             	or     eax,0xffffffff
c000e554:	83 c4 1c             	add    esp,0x1c
c000e557:	c3                   	ret    

c000e558 <Device::~Device()>:
c000e558:	ba d0 55 02 c0       	mov    edx,0xc00255d0
c000e55d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e561:	89 10                	mov    DWORD PTR [eax],edx
c000e563:	90                   	nop
c000e564:	c3                   	ret    
c000e565:	90                   	nop

c000e566 <Device::~Device()>:
c000e566:	83 ec 0c             	sub    esp,0xc
c000e569:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e56d:	e8 e6 ff ff ff       	call   c000e558 <Device::~Device()>
c000e572:	83 c4 04             	add    esp,0x4
c000e575:	83 ec 08             	sub    esp,0x8
c000e578:	68 58 01 00 00       	push   0x158
c000e57d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e581:	e8 b0 ea ff ff       	call   c000d036 <operator delete(void*, unsigned long)>
c000e586:	83 c4 10             	add    esp,0x10
c000e589:	83 c4 0c             	add    esp,0xc
c000e58c:	c3                   	ret    
c000e58d:	90                   	nop

c000e58e <Device::findAndLoadDriver()>:
c000e58e:	c7 44 24 04 8e 55 02 c0 	mov    DWORD PTR [esp+0x4],0xc002558e
c000e596:	e9 7c eb ff ff       	jmp    c000d117 <Dbg::kprintf(char const*, ...)>
c000e59b:	90                   	nop

c000e59c <Device::preOpenPCI(PCIDeviceInfo)>:
c000e59c:	57                   	push   edi
c000e59d:	b9 09 00 00 00       	mov    ecx,0x9
c000e5a2:	56                   	push   esi
c000e5a3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000e5a7:	8d 74 24 10          	lea    esi,[esp+0x10]
c000e5ab:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000e5b5:	81 c7 18 01 00 00    	add    edi,0x118
c000e5bb:	fc                   	cld    
c000e5bc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000e5be:	5e                   	pop    esi
c000e5bf:	5f                   	pop    edi
c000e5c0:	c3                   	ret    
c000e5c1:	90                   	nop

c000e5c2 <Device::preOpenACPI(void*, char*, char*)>:
c000e5c2:	57                   	push   edi
c000e5c3:	b9 1e 00 00 00       	mov    ecx,0x1e
c000e5c8:	56                   	push   esi
c000e5c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5cd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e5d1:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000e5db:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000e5e1:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000e5e7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e5eb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e5ed:	b9 0e 00 00 00       	mov    ecx,0xe
c000e5f2:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000e5f8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e5fc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e5fe:	5e                   	pop    esi
c000e5ff:	5f                   	pop    edi
c000e600:	c3                   	ret    
c000e601:	90                   	nop

c000e602 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000e602:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e606:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000e60b:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000e612:	75 0b                	jne    c000e61f <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c000e614:	8b 00                	mov    eax,DWORD PTR [eax]
c000e616:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e61a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e61d:	eb 1e                	jmp    c000e63d <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c000e61f:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c000e624:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e62a:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000e630:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e632:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e636:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e63a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c000e63d:	ff e0                	jmp    eax
c000e63f:	90                   	nop

c000e640 <Device::getParent()>:
c000e640:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e644:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000e64a:	c3                   	ret    
c000e64b:	90                   	nop

c000e64c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000e64c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e650:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000e655:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000e65c:	75 0b                	jne    c000e669 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000e65e:	8b 00                	mov    eax,DWORD PTR [eax]
c000e660:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e664:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000e667:	eb 1e                	jmp    c000e687 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c000e669:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c000e66e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e674:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000e67a:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e67c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e680:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e684:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c000e687:	ff e0                	jmp    eax
c000e689:	90                   	nop

c000e68a <Device::addChild(Device*)>:
c000e68a:	53                   	push   ebx
c000e68b:	83 ec 08             	sub    esp,0x8
c000e68e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e692:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e696:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000e69c:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000e6a2:	8b 13                	mov    edx,DWORD PTR [ebx]
c000e6a4:	85 d2                	test   edx,edx
c000e6a6:	74 04                	je     c000e6ac <Device::addChild(Device*)+0x22>
c000e6a8:	89 d3                	mov    ebx,edx
c000e6aa:	eb f6                	jmp    c000e6a2 <Device::addChild(Device*)+0x18>
c000e6ac:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e6af:	83 ec 0c             	sub    esp,0xc
c000e6b2:	6a 08                	push   0x8
c000e6b4:	e8 2e b7 ff ff       	call   c0009de7 <malloc>
c000e6b9:	89 03                	mov    DWORD PTR [ebx],eax
c000e6bb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e6c1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e6c8:	83 c4 18             	add    esp,0x18
c000e6cb:	5b                   	pop    ebx
c000e6cc:	c3                   	ret    
c000e6cd:	90                   	nop

c000e6ce <Device::removeAllChildren()>:
c000e6ce:	56                   	push   esi
c000e6cf:	53                   	push   ebx
c000e6d0:	52                   	push   edx
c000e6d1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e6d5:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000e6db:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e6de:	74 17                	je     c000e6f7 <Device::removeAllChildren()+0x29>
c000e6e0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e6e3:	85 c0                	test   eax,eax
c000e6e5:	74 0c                	je     c000e6f3 <Device::removeAllChildren()+0x25>
c000e6e7:	83 ec 0c             	sub    esp,0xc
c000e6ea:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6ec:	50                   	push   eax
c000e6ed:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000e6f0:	83 c4 10             	add    esp,0x10
c000e6f3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e6f5:	eb e4                	jmp    c000e6db <Device::removeAllChildren()+0xd>
c000e6f7:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000e6fd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e703:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000e709:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e710:	58                   	pop    eax
c000e711:	5b                   	pop    ebx
c000e712:	5e                   	pop    esi
c000e713:	c3                   	ret    

c000e714 <Device::hibernateAll()>:
c000e714:	53                   	push   ebx
c000e715:	83 ec 14             	sub    esp,0x14
c000e718:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e71c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e71e:	53                   	push   ebx
c000e71f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000e722:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e728:	83 c4 10             	add    esp,0x10
c000e72b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e72e:	74 0f                	je     c000e73f <Device::hibernateAll()+0x2b>
c000e730:	83 ec 0c             	sub    esp,0xc
c000e733:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e736:	e8 d9 ff ff ff       	call   c000e714 <Device::hibernateAll()>
c000e73b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e73d:	eb e9                	jmp    c000e728 <Device::hibernateAll()+0x14>
c000e73f:	83 c4 08             	add    esp,0x8
c000e742:	5b                   	pop    ebx
c000e743:	c3                   	ret    

c000e744 <Device::wakeAll()>:
c000e744:	53                   	push   ebx
c000e745:	83 ec 14             	sub    esp,0x14
c000e748:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e74c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e74e:	53                   	push   ebx
c000e74f:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000e752:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e758:	83 c4 10             	add    esp,0x10
c000e75b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e75e:	74 0f                	je     c000e76f <Device::wakeAll()+0x2b>
c000e760:	83 ec 0c             	sub    esp,0xc
c000e763:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e766:	e8 d9 ff ff ff       	call   c000e744 <Device::wakeAll()>
c000e76b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e76d:	eb e9                	jmp    c000e758 <Device::wakeAll()+0x14>
c000e76f:	83 c4 08             	add    esp,0x8
c000e772:	5b                   	pop    ebx
c000e773:	c3                   	ret    

c000e774 <Device::detectAll()>:
c000e774:	53                   	push   ebx
c000e775:	83 ec 14             	sub    esp,0x14
c000e778:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e77c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e77e:	53                   	push   ebx
c000e77f:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000e782:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e788:	83 c4 10             	add    esp,0x10
c000e78b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e78e:	74 0f                	je     c000e79f <Device::detectAll()+0x2b>
c000e790:	83 ec 0c             	sub    esp,0xc
c000e793:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e796:	e8 d9 ff ff ff       	call   c000e774 <Device::detectAll()>
c000e79b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e79d:	eb e9                	jmp    c000e788 <Device::detectAll()+0x14>
c000e79f:	83 c4 08             	add    esp,0x8
c000e7a2:	5b                   	pop    ebx
c000e7a3:	c3                   	ret    

c000e7a4 <Device::disableLegacyAll()>:
c000e7a4:	53                   	push   ebx
c000e7a5:	83 ec 14             	sub    esp,0x14
c000e7a8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e7ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e7ae:	53                   	push   ebx
c000e7af:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c000e7b2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e7b8:	83 c4 10             	add    esp,0x10
c000e7bb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e7be:	74 0f                	je     c000e7cf <Device::disableLegacyAll()+0x2b>
c000e7c0:	83 ec 0c             	sub    esp,0xc
c000e7c3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e7c6:	e8 d9 ff ff ff       	call   c000e7a4 <Device::disableLegacyAll()>
c000e7cb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e7cd:	eb e9                	jmp    c000e7b8 <Device::disableLegacyAll()+0x14>
c000e7cf:	83 c4 08             	add    esp,0x8
c000e7d2:	5b                   	pop    ebx
c000e7d3:	c3                   	ret    

c000e7d4 <Device::loadDriversForAll()>:
c000e7d4:	53                   	push   ebx
c000e7d5:	83 ec 08             	sub    esp,0x8
c000e7d8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e7dc:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c000e7e3:	75 0c                	jne    c000e7f1 <Device::loadDriversForAll()+0x1d>
c000e7e5:	83 ec 0c             	sub    esp,0xc
c000e7e8:	53                   	push   ebx
c000e7e9:	e8 a0 fd ff ff       	call   c000e58e <Device::findAndLoadDriver()>
c000e7ee:	83 c4 10             	add    esp,0x10
c000e7f1:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e7f7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e7fa:	74 12                	je     c000e80e <Device::loadDriversForAll()+0x3a>
c000e7fc:	83 ec 0c             	sub    esp,0xc
c000e7ff:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e802:	e8 cd ff ff ff       	call   c000e7d4 <Device::loadDriversForAll()>
c000e807:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e809:	83 c4 10             	add    esp,0x10
c000e80c:	eb e9                	jmp    c000e7f7 <Device::loadDriversForAll()+0x23>
c000e80e:	83 c4 08             	add    esp,0x8
c000e811:	5b                   	pop    ebx
c000e812:	c3                   	ret    
c000e813:	90                   	nop

c000e814 <Device::closeAll()>:
c000e814:	53                   	push   ebx
c000e815:	83 ec 08             	sub    esp,0x8
c000e818:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e81c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e81e:	6a 00                	push   0x0
c000e820:	6a 00                	push   0x0
c000e822:	6a 00                	push   0x0
c000e824:	53                   	push   ebx
c000e825:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e828:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e82e:	83 c4 10             	add    esp,0x10
c000e831:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e834:	74 0f                	je     c000e845 <Device::closeAll()+0x31>
c000e836:	83 ec 0c             	sub    esp,0xc
c000e839:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e83c:	e8 d3 ff ff ff       	call   c000e814 <Device::closeAll()>
c000e841:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e843:	eb e9                	jmp    c000e82e <Device::closeAll()+0x1a>
c000e845:	83 c4 08             	add    esp,0x8
c000e848:	5b                   	pop    ebx
c000e849:	c3                   	ret    

c000e84a <Device::powerSavingAll(PowerSavingLevel)>:
c000e84a:	56                   	push   esi
c000e84b:	53                   	push   ebx
c000e84c:	83 ec 0c             	sub    esp,0xc
c000e84f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e853:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000e857:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e859:	56                   	push   esi
c000e85a:	53                   	push   ebx
c000e85b:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000e85e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e864:	83 c4 10             	add    esp,0x10
c000e867:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e86a:	74 0f                	je     c000e87b <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000e86c:	52                   	push   edx
c000e86d:	52                   	push   edx
c000e86e:	56                   	push   esi
c000e86f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e872:	e8 d3 ff ff ff       	call   c000e84a <Device::powerSavingAll(PowerSavingLevel)>
c000e877:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e879:	eb e9                	jmp    c000e864 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000e87b:	58                   	pop    eax
c000e87c:	5b                   	pop    ebx
c000e87d:	5e                   	pop    esi
c000e87e:	c3                   	ret    
c000e87f:	90                   	nop

c000e880 <Device::setName(char const*)>:
c000e880:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000e888:	e9 c3 1e ff ff       	jmp    c0000750 <strcpy>
c000e88d:	90                   	nop

c000e88e <Device::Device(char const*)>:
c000e88e:	83 ec 1c             	sub    esp,0x1c
c000e891:	ba d0 55 02 c0       	mov    edx,0xc00255d0
c000e896:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e89a:	89 10                	mov    DWORD PTR [eax],edx
c000e89c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8a0:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000e8aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8ae:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e8b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8bc:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e8c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8ca:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e8d4:	83 ec 08             	sub    esp,0x8
c000e8d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e8db:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e8df:	e8 9c ff ff ff       	call   c000e880 <Device::setName(char const*)>
c000e8e4:	83 c4 10             	add    esp,0x10
c000e8e7:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000e8ef:	83 ec 0c             	sub    esp,0xc
c000e8f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e8f6:	e8 ec b4 ff ff       	call   c0009de7 <malloc>
c000e8fb:	83 c4 10             	add    esp,0x10
c000e8fe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e904:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e90b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e90f:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000e915:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e919:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e91f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e925:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e929:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e92f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e936:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e93a:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000e941:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e945:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000e94c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e950:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e95a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e95e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e968:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e96c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e976:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e97a:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000e984:	90                   	nop
c000e985:	83 c4 1c             	add    esp,0x1c
c000e988:	c3                   	ret    
c000e989:	90                   	nop

c000e98a <Device::getName()>:
c000e98a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e98e:	05 d0 00 00 00       	add    eax,0xd0
c000e993:	c3                   	ret    

c000e994 <DriverlessDevice::DriverlessDevice(char const*)>:
c000e994:	83 ec 0c             	sub    esp,0xc
c000e997:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e99b:	83 ec 08             	sub    esp,0x8
c000e99e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e9a2:	50                   	push   eax
c000e9a3:	e8 e6 fe ff ff       	call   c000e88e <Device::Device(char const*)>
c000e9a8:	83 c4 10             	add    esp,0x10
c000e9ab:	ba fc 55 02 c0       	mov    edx,0xc00255fc
c000e9b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e9b4:	89 10                	mov    DWORD PTR [eax],edx
c000e9b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e9ba:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000e9c4:	90                   	nop
c000e9c5:	83 c4 0c             	add    esp,0xc
c000e9c8:	c3                   	ret    
c000e9c9:	90                   	nop

c000e9ca <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000e9ca:	57                   	push   edi
c000e9cb:	56                   	push   esi
c000e9cc:	53                   	push   ebx
c000e9cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e9d1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e9d5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e9d9:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000e9df:	75 0c                	jne    c000e9ed <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000e9e1:	52                   	push   edx
c000e9e2:	52                   	push   edx
c000e9e3:	53                   	push   ebx
c000e9e4:	56                   	push   esi
c000e9e5:	e8 a8 4a 01 00       	call   c0023492 <LinkedList<Device>::addElement(Device*)>
c000e9ea:	83 c4 10             	add    esp,0x10
c000e9ed:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e9f3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e9f6:	74 12                	je     c000ea0a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000e9f8:	50                   	push   eax
c000e9f9:	57                   	push   edi
c000e9fa:	56                   	push   esi
c000e9fb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e9fe:	e8 c7 ff ff ff       	call   c000e9ca <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000ea03:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ea05:	83 c4 10             	add    esp,0x10
c000ea08:	eb e9                	jmp    c000e9f3 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000ea0a:	5b                   	pop    ebx
c000ea0b:	5e                   	pop    esi
c000ea0c:	5f                   	pop    edi
c000ea0d:	c3                   	ret    

c000ea0e <getDevicesOfType(DeviceType)>:
c000ea0e:	53                   	push   ebx
c000ea0f:	83 ec 14             	sub    esp,0x14
c000ea12:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ea16:	53                   	push   ebx
c000ea17:	e8 52 4b 01 00       	call   c002356e <LinkedList<Device>::LinkedList()>
c000ea1c:	83 c4 0c             	add    esp,0xc
c000ea1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ea23:	53                   	push   ebx
c000ea24:	ff 35 08 8c 02 c0    	push   DWORD PTR ds:0xc0028c08
c000ea2a:	e8 9b ff ff ff       	call   c000e9ca <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000ea2f:	89 d8                	mov    eax,ebx
c000ea31:	83 c4 18             	add    esp,0x18
c000ea34:	5b                   	pop    ebx
c000ea35:	c2 04 00             	ret    0x4

c000ea38 <HardDiskController::HardDiskController(char const*)>:
c000ea38:	83 ec 0c             	sub    esp,0xc
c000ea3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea3f:	83 ec 08             	sub    esp,0x8
c000ea42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ea46:	50                   	push   eax
c000ea47:	e8 42 fe ff ff       	call   c000e88e <Device::Device(char const*)>
c000ea4c:	83 c4 10             	add    esp,0x10
c000ea4f:	ba 28 56 02 c0       	mov    edx,0xc0025628
c000ea54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea58:	89 10                	mov    DWORD PTR [eax],edx
c000ea5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea5e:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000ea68:	90                   	nop
c000ea69:	83 c4 0c             	add    esp,0xc
c000ea6c:	c3                   	ret    
c000ea6d:	90                   	nop
c000ea6e:	66 90                	xchg   ax,ax

c000ea70 <HardDiskController::~HardDiskController()>:
c000ea70:	83 ec 0c             	sub    esp,0xc
c000ea73:	ba 28 56 02 c0       	mov    edx,0xc0025628
c000ea78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea7c:	89 10                	mov    DWORD PTR [eax],edx
c000ea7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea82:	83 ec 0c             	sub    esp,0xc
c000ea85:	50                   	push   eax
c000ea86:	e8 cd fa ff ff       	call   c000e558 <Device::~Device()>
c000ea8b:	83 c4 10             	add    esp,0x10
c000ea8e:	90                   	nop
c000ea8f:	83 c4 0c             	add    esp,0xc
c000ea92:	c3                   	ret    
c000ea93:	90                   	nop

c000ea94 <HardDiskController::~HardDiskController()>:
c000ea94:	83 ec 0c             	sub    esp,0xc
c000ea97:	83 ec 0c             	sub    esp,0xc
c000ea9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ea9e:	e8 cd ff ff ff       	call   c000ea70 <HardDiskController::~HardDiskController()>
c000eaa3:	83 c4 10             	add    esp,0x10
c000eaa6:	83 ec 08             	sub    esp,0x8
c000eaa9:	68 58 01 00 00       	push   0x158
c000eaae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eab2:	e8 7f e5 ff ff       	call   c000d036 <operator delete(void*, unsigned long)>
c000eab7:	83 c4 10             	add    esp,0x10
c000eaba:	83 c4 0c             	add    esp,0xc
c000eabd:	c3                   	ret    

c000eabe <PhysicalDisk::eject()>:
c000eabe:	83 c8 ff             	or     eax,0xffffffff
c000eac1:	c3                   	ret    

c000eac2 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000eac2:	83 ec 0c             	sub    esp,0xc
c000eac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eac9:	83 ec 08             	sub    esp,0x8
c000eacc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ead0:	50                   	push   eax
c000ead1:	e8 b8 fd ff ff       	call   c000e88e <Device::Device(char const*)>
c000ead6:	83 c4 10             	add    esp,0x10
c000ead9:	ba 54 56 02 c0       	mov    edx,0xc0025654
c000eade:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eae2:	89 10                	mov    DWORD PTR [eax],edx
c000eae4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eae8:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000eaef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eaf3:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000eafa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eafe:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000eb08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb0c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000eb10:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000eb16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb1a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000eb24:	90                   	nop
c000eb25:	83 c4 0c             	add    esp,0xc
c000eb28:	c3                   	ret    
c000eb29:	90                   	nop

c000eb2a <PhysicalDisk::startCache()>:
c000eb2a:	56                   	push   esi
c000eb2b:	53                   	push   ebx
c000eb2c:	83 ec 10             	sub    esp,0x10
c000eb2f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eb33:	6a 44                	push   0x44
c000eb35:	e8 ad b2 ff ff       	call   c0009de7 <malloc>
c000eb3a:	89 c6                	mov    esi,eax
c000eb3c:	58                   	pop    eax
c000eb3d:	5a                   	pop    edx
c000eb3e:	53                   	push   ebx
c000eb3f:	56                   	push   esi
c000eb40:	e8 6b 27 00 00       	call   c00112b0 <VCache::VCache(PhysicalDisk*)>
c000eb45:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000eb4b:	83 c4 14             	add    esp,0x14
c000eb4e:	5b                   	pop    ebx
c000eb4f:	5e                   	pop    esi
c000eb50:	c3                   	ret    
c000eb51:	90                   	nop

c000eb52 <PhysicalDisk::~PhysicalDisk()>:
c000eb52:	83 ec 0c             	sub    esp,0xc
c000eb55:	ba 54 56 02 c0       	mov    edx,0xc0025654
c000eb5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb5e:	89 10                	mov    DWORD PTR [eax],edx
c000eb60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb64:	83 ec 0c             	sub    esp,0xc
c000eb67:	50                   	push   eax
c000eb68:	e8 eb f9 ff ff       	call   c000e558 <Device::~Device()>
c000eb6d:	83 c4 10             	add    esp,0x10
c000eb70:	90                   	nop
c000eb71:	83 c4 0c             	add    esp,0xc
c000eb74:	c3                   	ret    
c000eb75:	90                   	nop

c000eb76 <PhysicalDisk::~PhysicalDisk()>:
c000eb76:	83 ec 0c             	sub    esp,0xc
c000eb79:	83 ec 0c             	sub    esp,0xc
c000eb7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb80:	e8 cd ff ff ff       	call   c000eb52 <PhysicalDisk::~PhysicalDisk()>
c000eb85:	83 c4 10             	add    esp,0x10
c000eb88:	83 ec 08             	sub    esp,0x8
c000eb8b:	68 6c 01 00 00       	push   0x16c
c000eb90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb94:	e8 9d e4 ff ff       	call   c000d036 <operator delete(void*, unsigned long)>
c000eb99:	83 c4 10             	add    esp,0x10
c000eb9c:	83 c4 0c             	add    esp,0xc
c000eb9f:	c3                   	ret    

c000eba0 <FPU::FPU(char const*)>:
c000eba0:	83 ec 0c             	sub    esp,0xc
c000eba3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eba7:	83 ec 08             	sub    esp,0x8
c000ebaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebae:	50                   	push   eax
c000ebaf:	e8 da fc ff ff       	call   c000e88e <Device::Device(char const*)>
c000ebb4:	83 c4 10             	add    esp,0x10
c000ebb7:	ba b4 56 02 c0       	mov    edx,0xc00256b4
c000ebbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebc0:	89 10                	mov    DWORD PTR [eax],edx
c000ebc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebc6:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000ebd0:	90                   	nop
c000ebd1:	83 c4 0c             	add    esp,0xc
c000ebd4:	c3                   	ret    
c000ebd5:	90                   	nop
c000ebd6:	66 90                	xchg   ax,ax

c000ebd8 <FPU::~FPU()>:
c000ebd8:	83 ec 0c             	sub    esp,0xc
c000ebdb:	ba b4 56 02 c0       	mov    edx,0xc00256b4
c000ebe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebe4:	89 10                	mov    DWORD PTR [eax],edx
c000ebe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebea:	83 ec 0c             	sub    esp,0xc
c000ebed:	50                   	push   eax
c000ebee:	e8 65 f9 ff ff       	call   c000e558 <Device::~Device()>
c000ebf3:	83 c4 10             	add    esp,0x10
c000ebf6:	90                   	nop
c000ebf7:	83 c4 0c             	add    esp,0xc
c000ebfa:	c3                   	ret    
c000ebfb:	90                   	nop

c000ebfc <FPU::~FPU()>:
c000ebfc:	83 ec 0c             	sub    esp,0xc
c000ebff:	83 ec 0c             	sub    esp,0xc
c000ec02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec06:	e8 cd ff ff ff       	call   c000ebd8 <FPU::~FPU()>
c000ec0b:	83 c4 10             	add    esp,0x10
c000ec0e:	83 ec 08             	sub    esp,0x8
c000ec11:	68 58 01 00 00       	push   0x158
c000ec16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec1a:	e8 17 e4 ff ff       	call   c000d036 <operator delete(void*, unsigned long)>
c000ec1f:	83 c4 10             	add    esp,0x10
c000ec22:	83 c4 0c             	add    esp,0xc
c000ec25:	c3                   	ret    

c000ec26 <setupFPU()>:
c000ec26:	53                   	push   ebx
c000ec27:	83 ec 14             	sub    esp,0x14
c000ec2a:	68 84 56 02 c0       	push   0xc0025684
c000ec2f:	e8 e3 e4 ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000ec34:	8b 15 08 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028c08
c000ec3a:	83 c4 10             	add    esp,0x10
c000ec3d:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c000ec44:	74 1a                	je     c000ec60 <setupFPU()+0x3a>
c000ec46:	83 ec 0c             	sub    esp,0xc
c000ec49:	68 58 01 00 00       	push   0x158
c000ec4e:	e8 94 b1 ff ff       	call   c0009de7 <malloc>
c000ec53:	89 c3                	mov    ebx,eax
c000ec55:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec58:	e8 b7 2e 01 00       	call   c0021b14 <AVX::AVX()>
c000ec5d:	eb 6d                	jmp    c000eccc <setupFPU()+0xa6>
c000ec5f:	90                   	nop
c000ec60:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c000ec66:	84 c0                	test   al,al
c000ec68:	79 1a                	jns    c000ec84 <setupFPU()+0x5e>
c000ec6a:	83 ec 0c             	sub    esp,0xc
c000ec6d:	68 58 01 00 00       	push   0x158
c000ec72:	e8 70 b1 ff ff       	call   c0009de7 <malloc>
c000ec77:	89 c3                	mov    ebx,eax
c000ec79:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec7c:	e8 c3 2f 01 00       	call   c0021c44 <SSE::SSE()>
c000ec81:	eb 49                	jmp    c000eccc <setupFPU()+0xa6>
c000ec83:	90                   	nop
c000ec84:	a8 20                	test   al,0x20
c000ec86:	74 1c                	je     c000eca4 <setupFPU()+0x7e>
c000ec88:	83 ec 0c             	sub    esp,0xc
c000ec8b:	68 58 01 00 00       	push   0x158
c000ec90:	e8 52 b1 ff ff       	call   c0009de7 <malloc>
c000ec95:	89 c3                	mov    ebx,eax
c000ec97:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec9a:	e8 09 2f 01 00       	call   c0021ba8 <MMX::MMX()>
c000ec9f:	eb 2b                	jmp    c000eccc <setupFPU()+0xa6>
c000eca1:	8d 76 00             	lea    esi,[esi+0x0]
c000eca4:	a8 10                	test   al,0x10
c000eca6:	74 2c                	je     c000ecd4 <setupFPU()+0xae>
c000eca8:	83 ec 0c             	sub    esp,0xc
c000ecab:	68 97 56 02 c0       	push   0xc0025697
c000ecb0:	e8 62 e4 ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000ecb5:	c7 04 24 58 01 00 00 	mov    DWORD PTR [esp],0x158
c000ecbc:	e8 26 b1 ff ff       	call   c0009de7 <malloc>
c000ecc1:	89 c3                	mov    ebx,eax
c000ecc3:	89 04 24             	mov    DWORD PTR [esp],eax
c000ecc6:	e8 07 30 01 00       	call   c0021cd2 <x87::x87()>
c000eccb:	90                   	nop
c000eccc:	83 c4 10             	add    esp,0x10
c000eccf:	eb 27                	jmp    c000ecf8 <setupFPU()+0xd2>
c000ecd1:	8d 76 00             	lea    esi,[esi+0x0]
c000ecd4:	83 e0 ef             	and    eax,0xffffffef
c000ecd7:	83 ec 0c             	sub    esp,0xc
c000ecda:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c000ece0:	68 a1 56 02 c0       	push   0xc00256a1
c000ece5:	e8 2d e4 ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000ecea:	0f 20 c0             	mov    eax,cr0
c000eced:	83 c8 04             	or     eax,0x4
c000ecf0:	0f 22 c0             	mov    cr0,eax
c000ecf3:	31 db                	xor    ebx,ebx
c000ecf5:	83 c4 10             	add    esp,0x10
c000ecf8:	89 d8                	mov    eax,ebx
c000ecfa:	83 c4 08             	add    esp,0x8
c000ecfd:	5b                   	pop    ebx
c000ecfe:	c3                   	ret    
c000ecff:	90                   	nop

c000ed00 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c000ed00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ed04:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ed08:	c1 e0 04             	shl    eax,0x4
c000ed0b:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c000ed0f:	8d 50 10             	lea    edx,[eax+0x10]
c000ed12:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c000ed18:	74 08                	je     c000ed22 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c000ed1a:	83 c0 04             	add    eax,0x4
c000ed1d:	39 d0                	cmp    eax,edx
c000ed1f:	75 f1                	jne    c000ed12 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c000ed21:	c3                   	ret    
c000ed22:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ed2c:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000ed36:	eb e2                	jmp    c000ed1a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c000ed38 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c000ed38:	57                   	push   edi
c000ed39:	31 c0                	xor    eax,eax
c000ed3b:	56                   	push   esi
c000ed3c:	53                   	push   ebx
c000ed3d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ed41:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ed45:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ed49:	89 da                	mov    edx,ebx
c000ed4b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ed4f:	c1 e2 04             	shl    edx,0x4
c000ed52:	01 ca                	add    edx,ecx
c000ed54:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c000ed5c:	74 16                	je     c000ed74 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c000ed5e:	40                   	inc    eax
c000ed5f:	83 f8 04             	cmp    eax,0x4
c000ed62:	75 f0                	jne    c000ed54 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c000ed64:	c7 44 24 10 e4 56 02 c0 	mov    DWORD PTR [esp+0x10],0xc00256e4
c000ed6c:	5b                   	pop    ebx
c000ed6d:	5e                   	pop    esi
c000ed6e:	5f                   	pop    edi
c000ed6f:	e9 85 64 00 00       	jmp    c00151f9 <Krnl::panic(char const*)>
c000ed74:	8d 04 98             	lea    eax,[eax+ebx*4]
c000ed77:	8d 04 81             	lea    eax,[ecx+eax*4]
c000ed7a:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c000ed80:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c000ed86:	5b                   	pop    ebx
c000ed87:	5e                   	pop    esi
c000ed88:	5f                   	pop    edi
c000ed89:	c3                   	ret    

c000ed8a <doubleFault(regs*, void*)>:
c000ed8a:	55                   	push   ebp
c000ed8b:	89 e5                	mov    ebp,esp
c000ed8d:	83 ec 08             	sub    esp,0x8
c000ed90:	83 ec 0c             	sub    esp,0xc
c000ed93:	68 f1 56 02 c0       	push   0xc00256f1
c000ed98:	e8 5c 64 00 00       	call   c00151f9 <Krnl::panic(char const*)>
c000ed9d:	83 c4 10             	add    esp,0x10
c000eda0:	90                   	nop
c000eda1:	c9                   	leave  
c000eda2:	c3                   	ret    
c000eda3:	90                   	nop

c000eda4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000eda4:	56                   	push   esi
c000eda5:	53                   	push   ebx
c000eda6:	50                   	push   eax
c000eda7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000edab:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000edaf:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000edb4:	75 35                	jne    c000edeb <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c000edb6:	8d 43 20             	lea    eax,[ebx+0x20]
c000edb9:	31 d2                	xor    edx,edx
c000edbb:	89 c1                	mov    ecx,eax
c000edbd:	c1 e1 04             	shl    ecx,0x4
c000edc0:	01 f1                	add    ecx,esi
c000edc2:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c000edca:	74 3e                	je     c000ee0a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c000edcc:	42                   	inc    edx
c000edcd:	83 fa 04             	cmp    edx,0x4
c000edd0:	75 f0                	jne    c000edc2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c000edd2:	83 ec 0c             	sub    esp,0xc
c000edd5:	68 0b 57 02 c0       	push   0xc002570b
c000edda:	e8 1a 64 00 00       	call   c00151f9 <Krnl::panic(char const*)>
c000eddf:	83 c4 10             	add    esp,0x10
c000ede2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ede7:	5a                   	pop    edx
c000ede8:	5b                   	pop    ebx
c000ede9:	5e                   	pop    esi
c000edea:	c3                   	ret    
c000edeb:	83 ec 0c             	sub    esp,0xc
c000edee:	56                   	push   esi
c000edef:	e8 96 fb ff ff       	call   c000e98a <Device::getName()>
c000edf4:	83 c4 10             	add    esp,0x10
c000edf7:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000edfa:	75 ba                	jne    c000edb6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000edfc:	83 fb 0f             	cmp    ebx,0xf
c000edff:	7f 29                	jg     c000ee2a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c000ee01:	0f b6 9b 00 83 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd7d00]
c000ee08:	eb ac                	jmp    c000edb6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000ee0a:	8d 04 82             	lea    eax,[edx+eax*4]
c000ee0d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee11:	8d 04 86             	lea    eax,[esi+eax*4]
c000ee14:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c000ee1a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ee1e:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c000ee24:	89 d8                	mov    eax,ebx
c000ee26:	5a                   	pop    edx
c000ee27:	5b                   	pop    ebx
c000ee28:	5e                   	pop    esi
c000ee29:	c3                   	ret    
c000ee2a:	83 ec 0c             	sub    esp,0xc
c000ee2d:	68 fe 56 02 c0       	push   0xc00256fe
c000ee32:	e8 c2 63 00 00       	call   c00151f9 <Krnl::panic(char const*)>
c000ee37:	83 c4 10             	add    esp,0x10
c000ee3a:	e9 77 ff ff ff       	jmp    c000edb6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000ee3f:	90                   	nop

c000ee40 <InterruptController::clearAllHandlers(int, bool)>:
c000ee40:	56                   	push   esi
c000ee41:	53                   	push   ebx
c000ee42:	52                   	push   edx
c000ee43:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ee47:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ee4b:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000ee50:	75 61                	jne    c000eeb3 <InterruptController::clearAllHandlers(int, bool)+0x73>
c000ee52:	8d 46 20             	lea    eax,[esi+0x20]
c000ee55:	c1 e6 04             	shl    esi,0x4
c000ee58:	c1 e0 04             	shl    eax,0x4
c000ee5b:	01 de                	add    esi,ebx
c000ee5d:	01 d8                	add    eax,ebx
c000ee5f:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c000ee69:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c000ee73:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c000ee7d:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000ee87:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c000ee91:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c000ee9b:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c000eea5:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c000eeaf:	58                   	pop    eax
c000eeb0:	5b                   	pop    ebx
c000eeb1:	5e                   	pop    esi
c000eeb2:	c3                   	ret    
c000eeb3:	83 ec 0c             	sub    esp,0xc
c000eeb6:	53                   	push   ebx
c000eeb7:	e8 ce fa ff ff       	call   c000e98a <Device::getName()>
c000eebc:	83 c4 10             	add    esp,0x10
c000eebf:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000eec2:	75 8e                	jne    c000ee52 <InterruptController::clearAllHandlers(int, bool)+0x12>
c000eec4:	83 fe 0f             	cmp    esi,0xf
c000eec7:	7f 09                	jg     c000eed2 <InterruptController::clearAllHandlers(int, bool)+0x92>
c000eec9:	0f b6 b6 00 83 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd7d00]
c000eed0:	eb 80                	jmp    c000ee52 <InterruptController::clearAllHandlers(int, bool)+0x12>
c000eed2:	83 ec 0c             	sub    esp,0xc
c000eed5:	68 18 57 02 c0       	push   0xc0025718
c000eeda:	e8 1a 63 00 00       	call   c00151f9 <Krnl::panic(char const*)>
c000eedf:	83 c4 10             	add    esp,0x10
c000eee2:	e9 6b ff ff ff       	jmp    c000ee52 <InterruptController::clearAllHandlers(int, bool)+0x12>
c000eee7:	90                   	nop

c000eee8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000eee8:	56                   	push   esi
c000eee9:	53                   	push   ebx
c000eeea:	52                   	push   edx
c000eeeb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000eeef:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000eef3:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000eef8:	75 3a                	jne    c000ef34 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c000eefa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eefe:	8d 50 20             	lea    edx,[eax+0x20]
c000ef01:	c1 e2 04             	shl    edx,0x4
c000ef04:	8d 04 16             	lea    eax,[esi+edx*1]
c000ef07:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c000ef0b:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c000ef11:	74 0b                	je     c000ef1e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c000ef13:	83 c0 04             	add    eax,0x4
c000ef16:	39 d0                	cmp    eax,edx
c000ef18:	75 f1                	jne    c000ef0b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c000ef1a:	58                   	pop    eax
c000ef1b:	5b                   	pop    ebx
c000ef1c:	5e                   	pop    esi
c000ef1d:	c3                   	ret    
c000ef1e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ef28:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000ef32:	eb df                	jmp    c000ef13 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000ef34:	83 ec 0c             	sub    esp,0xc
c000ef37:	56                   	push   esi
c000ef38:	e8 4d fa ff ff       	call   c000e98a <Device::getName()>
c000ef3d:	83 c4 10             	add    esp,0x10
c000ef40:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000ef43:	75 b5                	jne    c000eefa <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000ef45:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c000ef4a:	7f 11                	jg     c000ef5d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c000ef4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ef50:	0f b6 80 00 83 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd7d00]
c000ef57:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ef5b:	eb 9d                	jmp    c000eefa <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000ef5d:	83 ec 0c             	sub    esp,0xc
c000ef60:	68 25 57 02 c0       	push   0xc0025725
c000ef65:	e8 8f 62 00 00       	call   c00151f9 <Krnl::panic(char const*)>
c000ef6a:	83 c4 10             	add    esp,0x10
c000ef6d:	eb 8b                	jmp    c000eefa <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c000ef6f <nmiHandler(regs*, void*)>:
c000ef6f:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c000ef74:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ef78:	e9 bf a5 ff ff       	jmp    c000953c <Computer::handleNMI()>

c000ef7d <int_handler>:
c000ef7d:	55                   	push   ebp
c000ef7e:	57                   	push   edi
c000ef7f:	56                   	push   esi
c000ef80:	53                   	push   ebx
c000ef81:	83 ec 0c             	sub    esp,0xc
c000ef84:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000ef88:	80 3d e4 96 02 c0 00 	cmp    BYTE PTR ds:0xc00296e4,0x0
c000ef8f:	74 0b                	je     c000ef9c <int_handler+0x1f>
c000ef91:	fa                   	cli    
c000ef92:	f4                   	hlt    
c000ef93:	80 3d e4 96 02 c0 00 	cmp    BYTE PTR ds:0xc00296e4,0x0
c000ef9a:	75 f5                	jne    c000ef91 <int_handler+0x14>
c000ef9c:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c000efa1:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c000efa4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000efaa:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c000efb0:	8d 43 e0             	lea    eax,[ebx-0x20]
c000efb3:	83 f8 17             	cmp    eax,0x17
c000efb6:	77 13                	ja     c000efcb <int_handler+0x4e>
c000efb8:	83 ec 08             	sub    esp,0x8
c000efbb:	8b 17                	mov    edx,DWORD PTR [edi]
c000efbd:	8d 43 e0             	lea    eax,[ebx-0x20]
c000efc0:	0f b6 c0             	movzx  eax,al
c000efc3:	50                   	push   eax
c000efc4:	57                   	push   edi
c000efc5:	ff 52 38             	call   DWORD PTR [edx+0x38]
c000efc8:	83 c4 10             	add    esp,0x10
c000efcb:	83 c3 15             	add    ebx,0x15
c000efce:	c1 e3 04             	shl    ebx,0x4
c000efd1:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c000efd5:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c000efdc:	31 db                	xor    ebx,ebx
c000efde:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000efe2:	85 c0                	test   eax,eax
c000efe4:	74 13                	je     c000eff9 <int_handler+0x7c>
c000efe6:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c000efe9:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c000efed:	74 1c                	je     c000f00b <int_handler+0x8e>
c000efef:	83 ec 08             	sub    esp,0x8
c000eff2:	52                   	push   edx
c000eff3:	56                   	push   esi
c000eff4:	ff d0                	call   eax
c000eff6:	83 c4 10             	add    esp,0x10
c000eff9:	43                   	inc    ebx
c000effa:	83 fb 04             	cmp    ebx,0x4
c000effd:	75 df                	jne    c000efde <int_handler+0x61>
c000efff:	83 c4 0c             	add    esp,0xc
c000f002:	31 c0                	xor    eax,eax
c000f004:	5b                   	pop    ebx
c000f005:	31 d2                	xor    edx,edx
c000f007:	5e                   	pop    esi
c000f008:	5f                   	pop    edi
c000f009:	5d                   	pop    ebp
c000f00a:	c3                   	ret    
c000f00b:	83 ec 08             	sub    esp,0x8
c000f00e:	52                   	push   edx
c000f00f:	56                   	push   esi
c000f010:	ff d0                	call   eax
c000f012:	83 c4 10             	add    esp,0x10
c000f015:	83 c4 0c             	add    esp,0xc
c000f018:	5b                   	pop    ebx
c000f019:	5e                   	pop    esi
c000f01a:	5f                   	pop    edi
c000f01b:	5d                   	pop    ebp
c000f01c:	c3                   	ret    
c000f01d:	90                   	nop

c000f01e <InterruptController::InterruptController(char const*)>:
c000f01e:	83 ec 1c             	sub    esp,0x1c
c000f021:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f025:	83 ec 08             	sub    esp,0x8
c000f028:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f02c:	50                   	push   eax
c000f02d:	e8 5c f8 ff ff       	call   c000e88e <Device::Device(char const*)>
c000f032:	83 c4 10             	add    esp,0x10
c000f035:	ba 5c 5a 02 c0       	mov    edx,0xc0025a5c
c000f03a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f03e:	89 10                	mov    DWORD PTR [eax],edx
c000f040:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f044:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000f04e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f056:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000f05e:	7f 5e                	jg     c000f0be <InterruptController::InterruptController(char const*)+0xa0>
c000f060:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000f068:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000f06d:	7f 49                	jg     c000f0b8 <InterruptController::InterruptController(char const*)+0x9a>
c000f06f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f073:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f077:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000f07e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f082:	01 ca                	add    edx,ecx
c000f084:	83 c2 54             	add    edx,0x54
c000f087:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000f08f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f093:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f097:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000f09e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f0a2:	01 ca                	add    edx,ecx
c000f0a4:	81 c2 54 04 00 00    	add    edx,0x454
c000f0aa:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000f0b2:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000f0b6:	eb b0                	jmp    c000f068 <InterruptController::InterruptController(char const*)+0x4a>
c000f0b8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000f0bc:	eb 98                	jmp    c000f056 <InterruptController::InterruptController(char const*)+0x38>
c000f0be:	90                   	nop
c000f0bf:	83 c4 1c             	add    esp,0x1c
c000f0c2:	c3                   	ret    
c000f0c3:	90                   	nop

c000f0c4 <InterruptController::~InterruptController()>:
c000f0c4:	83 ec 0c             	sub    esp,0xc
c000f0c7:	ba 5c 5a 02 c0       	mov    edx,0xc0025a5c
c000f0cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0d0:	89 10                	mov    DWORD PTR [eax],edx
c000f0d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0d6:	83 ec 0c             	sub    esp,0xc
c000f0d9:	50                   	push   eax
c000f0da:	e8 79 f4 ff ff       	call   c000e558 <Device::~Device()>
c000f0df:	83 c4 10             	add    esp,0x10
c000f0e2:	90                   	nop
c000f0e3:	83 c4 0c             	add    esp,0xc
c000f0e6:	c3                   	ret    
c000f0e7:	90                   	nop

c000f0e8 <InterruptController::~InterruptController()>:
c000f0e8:	83 ec 0c             	sub    esp,0xc
c000f0eb:	83 ec 0c             	sub    esp,0xc
c000f0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f0f2:	e8 cd ff ff ff       	call   c000f0c4 <InterruptController::~InterruptController()>
c000f0f7:	83 c4 10             	add    esp,0x10
c000f0fa:	83 ec 08             	sub    esp,0x8
c000f0fd:	68 58 21 00 00       	push   0x2158
c000f102:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f106:	e8 2b df ff ff       	call   c000d036 <operator delete(void*, unsigned long)>
c000f10b:	83 c4 10             	add    esp,0x10
c000f10e:	83 c4 0c             	add    esp,0xc
c000f111:	c3                   	ret    

c000f112 <displayDebugInfo(regs*)>:
c000f112:	55                   	push   ebp
c000f113:	57                   	push   edi
c000f114:	56                   	push   esi
c000f115:	53                   	push   ebx
c000f116:	83 ec 24             	sub    esp,0x24
c000f119:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000f11d:	0f 20 c2             	mov    edx,cr0
c000f120:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000f124:	0f 20 d7             	mov    edi,cr2
c000f127:	0f 20 de             	mov    esi,cr3
c000f12a:	0f 20 e5             	mov    ebp,cr4
c000f12d:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c000f130:	68 32 57 02 c0       	push   0xc0025732
c000f135:	e8 dd df ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000f13a:	59                   	pop    ecx
c000f13b:	58                   	pop    eax
c000f13c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000f13f:	68 3d 57 02 c0       	push   0xc002573d
c000f144:	e8 ce df ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000f149:	58                   	pop    eax
c000f14a:	5a                   	pop    edx
c000f14b:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000f14e:	68 48 57 02 c0       	push   0xc0025748
c000f153:	e8 bf df ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000f158:	59                   	pop    ecx
c000f159:	58                   	pop    eax
c000f15a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f15d:	68 53 57 02 c0       	push   0xc0025753
c000f162:	e8 b0 df ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000f167:	58                   	pop    eax
c000f168:	5a                   	pop    edx
c000f169:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000f16c:	68 5e 57 02 c0       	push   0xc002575e
c000f171:	e8 a1 df ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000f176:	59                   	pop    ecx
c000f177:	58                   	pop    eax
c000f178:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000f17b:	68 69 57 02 c0       	push   0xc0025769
c000f180:	e8 92 df ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000f185:	58                   	pop    eax
c000f186:	5a                   	pop    edx
c000f187:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000f18a:	68 74 57 02 c0       	push   0xc0025774
c000f18f:	e8 83 df ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000f194:	59                   	pop    ecx
c000f195:	58                   	pop    eax
c000f196:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000f199:	68 7f 57 02 c0       	push   0xc002577f
c000f19e:	e8 74 df ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000f1a3:	58                   	pop    eax
c000f1a4:	5a                   	pop    edx
c000f1a5:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000f1a8:	68 8a 57 02 c0       	push   0xc002578a
c000f1ad:	e8 65 df ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000f1b2:	59                   	pop    ecx
c000f1b3:	58                   	pop    eax
c000f1b4:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f1b7:	68 99 57 02 c0       	push   0xc0025799
c000f1bc:	e8 56 df ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000f1c1:	58                   	pop    eax
c000f1c2:	5a                   	pop    edx
c000f1c3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000f1c6:	68 a4 57 02 c0       	push   0xc00257a4
c000f1cb:	e8 47 df ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000f1d0:	59                   	pop    ecx
c000f1d1:	58                   	pop    eax
c000f1d2:	57                   	push   edi
c000f1d3:	68 af 57 02 c0       	push   0xc00257af
c000f1d8:	e8 3a df ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000f1dd:	58                   	pop    eax
c000f1de:	5a                   	pop    edx
c000f1df:	56                   	push   esi
c000f1e0:	68 ba 57 02 c0       	push   0xc00257ba
c000f1e5:	e8 2d df ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000f1ea:	59                   	pop    ecx
c000f1eb:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f1f0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f1f6:	e8 da bc ff ff       	call   c000aed5 <setActiveTerminal(VgaText*)>
c000f1fb:	58                   	pop    eax
c000f1fc:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000f1ff:	5a                   	pop    edx
c000f200:	c1 e0 05             	shl    eax,0x5
c000f203:	05 60 80 02 c0       	add    eax,0xc0028060
c000f208:	50                   	push   eax
c000f209:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f20e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f214:	e8 c9 c1 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f219:	59                   	pop    ecx
c000f21a:	58                   	pop    eax
c000f21b:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f220:	68 c5 57 02 c0       	push   0xc00257c5
c000f225:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f22b:	e8 b2 c1 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f230:	58                   	pop    eax
c000f231:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f236:	5a                   	pop    edx
c000f237:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f23a:	83 c0 0c             	add    eax,0xc
c000f23d:	50                   	push   eax
c000f23e:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f243:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f249:	e8 94 c1 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f24e:	59                   	pop    ecx
c000f24f:	58                   	pop    eax
c000f250:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f255:	68 ce 57 02 c0       	push   0xc00257ce
c000f25a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f260:	e8 7d c1 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f265:	58                   	pop    eax
c000f266:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f26b:	5a                   	pop    edx
c000f26c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f26f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f275:	e8 22 c1 ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f27a:	59                   	pop    ecx
c000f27b:	58                   	pop    eax
c000f27c:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f281:	68 d6 57 02 c0       	push   0xc00257d6
c000f286:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f28c:	e8 51 c1 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f291:	58                   	pop    eax
c000f292:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f297:	5a                   	pop    edx
c000f298:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000f29b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f2a1:	e8 f6 c0 ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f2a6:	59                   	pop    ecx
c000f2a7:	58                   	pop    eax
c000f2a8:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f2ad:	68 de 57 02 c0       	push   0xc00257de
c000f2b2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f2b8:	e8 25 c1 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f2bd:	58                   	pop    eax
c000f2be:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f2c3:	5a                   	pop    edx
c000f2c4:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000f2c7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f2cd:	e8 ca c0 ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f2d2:	59                   	pop    ecx
c000f2d3:	58                   	pop    eax
c000f2d4:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f2d9:	68 e6 57 02 c0       	push   0xc00257e6
c000f2de:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f2e4:	e8 f9 c0 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f2e9:	58                   	pop    eax
c000f2ea:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f2ef:	5a                   	pop    edx
c000f2f0:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000f2f3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f2f9:	e8 9e c0 ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f2fe:	59                   	pop    ecx
c000f2ff:	58                   	pop    eax
c000f300:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f305:	68 ee 57 02 c0       	push   0xc00257ee
c000f30a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f310:	e8 cd c0 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f315:	58                   	pop    eax
c000f316:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f31b:	5a                   	pop    edx
c000f31c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000f31f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f325:	e8 72 c0 ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f32a:	59                   	pop    ecx
c000f32b:	58                   	pop    eax
c000f32c:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f331:	68 f6 57 02 c0       	push   0xc00257f6
c000f336:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f33c:	e8 a1 c0 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f341:	58                   	pop    eax
c000f342:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f347:	5a                   	pop    edx
c000f348:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c000f34b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f351:	e8 46 c0 ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f356:	59                   	pop    ecx
c000f357:	58                   	pop    eax
c000f358:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f35d:	68 fe 57 02 c0       	push   0xc00257fe
c000f362:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f368:	e8 75 c0 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f36d:	58                   	pop    eax
c000f36e:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f373:	5a                   	pop    edx
c000f374:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f378:	52                   	push   edx
c000f379:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f37f:	e8 18 c0 ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f384:	59                   	pop    ecx
c000f385:	58                   	pop    eax
c000f386:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f38b:	68 07 58 02 c0       	push   0xc0025807
c000f390:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f396:	e8 47 c0 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f39b:	58                   	pop    eax
c000f39c:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f3a1:	5a                   	pop    edx
c000f3a2:	57                   	push   edi
c000f3a3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f3a9:	e8 ee bf ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f3ae:	59                   	pop    ecx
c000f3af:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f3b4:	5f                   	pop    edi
c000f3b5:	68 0f 58 02 c0       	push   0xc002580f
c000f3ba:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f3c0:	e8 1d c0 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f3c5:	58                   	pop    eax
c000f3c6:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f3cb:	5a                   	pop    edx
c000f3cc:	56                   	push   esi
c000f3cd:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f3d3:	e8 c4 bf ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f3d8:	59                   	pop    ecx
c000f3d9:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f3de:	5e                   	pop    esi
c000f3df:	68 17 58 02 c0       	push   0xc0025817
c000f3e4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f3ea:	e8 f3 bf ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f3ef:	5f                   	pop    edi
c000f3f0:	58                   	pop    eax
c000f3f1:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f3f6:	55                   	push   ebp
c000f3f7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f3fd:	e8 9a bf ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f402:	58                   	pop    eax
c000f403:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f408:	5a                   	pop    edx
c000f409:	68 1f 58 02 c0       	push   0xc002581f
c000f40e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f414:	e8 c9 bf ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f419:	0f 21 c0             	mov    eax,db0
c000f41c:	59                   	pop    ecx
c000f41d:	5e                   	pop    esi
c000f41e:	50                   	push   eax
c000f41f:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f424:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f42a:	e8 6d bf ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f42f:	5f                   	pop    edi
c000f430:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f435:	5d                   	pop    ebp
c000f436:	68 28 58 02 c0       	push   0xc0025828
c000f43b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f441:	e8 9c bf ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f446:	0f 21 c8             	mov    eax,db1
c000f449:	5a                   	pop    edx
c000f44a:	59                   	pop    ecx
c000f44b:	50                   	push   eax
c000f44c:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f451:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f457:	e8 40 bf ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f45c:	5e                   	pop    esi
c000f45d:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f462:	5f                   	pop    edi
c000f463:	68 30 58 02 c0       	push   0xc0025830
c000f468:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f46e:	e8 6f bf ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f473:	0f 21 d0             	mov    eax,db2
c000f476:	5d                   	pop    ebp
c000f477:	5a                   	pop    edx
c000f478:	50                   	push   eax
c000f479:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f47e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f484:	e8 13 bf ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f489:	59                   	pop    ecx
c000f48a:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f48f:	5e                   	pop    esi
c000f490:	68 38 58 02 c0       	push   0xc0025838
c000f495:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f49b:	e8 42 bf ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f4a0:	0f 21 d8             	mov    eax,db3
c000f4a3:	5f                   	pop    edi
c000f4a4:	5d                   	pop    ebp
c000f4a5:	50                   	push   eax
c000f4a6:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f4ab:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f4b1:	e8 e6 be ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f4b6:	58                   	pop    eax
c000f4b7:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f4bc:	5a                   	pop    edx
c000f4bd:	68 40 58 02 c0       	push   0xc0025840
c000f4c2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f4c8:	e8 15 bf ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f4cd:	0f 21 f0             	mov    eax,db6
c000f4d0:	59                   	pop    ecx
c000f4d1:	5e                   	pop    esi
c000f4d2:	50                   	push   eax
c000f4d3:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f4d8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f4de:	e8 b9 be ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f4e3:	5f                   	pop    edi
c000f4e4:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f4e9:	5d                   	pop    ebp
c000f4ea:	68 48 58 02 c0       	push   0xc0025848
c000f4ef:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f4f5:	e8 e8 be ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f4fa:	0f 21 f8             	mov    eax,db7
c000f4fd:	5a                   	pop    edx
c000f4fe:	59                   	pop    ecx
c000f4ff:	50                   	push   eax
c000f500:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f505:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f50b:	e8 8c be ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f510:	5e                   	pop    esi
c000f511:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f514:	e8 04 90 00 00       	call   c001851d <Thr::getDriverNameFromAddress(unsigned long)>
c000f519:	83 c4 10             	add    esp,0x10
c000f51c:	85 c0                	test   eax,eax
c000f51e:	74 7d                	je     c000f59d <displayDebugInfo(regs*)+0x48b>
c000f520:	89 c6                	mov    esi,eax
c000f522:	50                   	push   eax
c000f523:	50                   	push   eax
c000f524:	56                   	push   esi
c000f525:	68 50 58 02 c0       	push   0xc0025850
c000f52a:	e8 e8 db ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000f52f:	5a                   	pop    edx
c000f530:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f535:	59                   	pop    ecx
c000f536:	68 5e 58 02 c0       	push   0xc002585e
c000f53b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f541:	e8 9c be ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f546:	5f                   	pop    edi
c000f547:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f54c:	5d                   	pop    ebp
c000f54d:	56                   	push   esi
c000f54e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f554:	e8 89 be ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f559:	58                   	pop    eax
c000f55a:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f55f:	5a                   	pop    edx
c000f560:	68 6a 58 02 c0       	push   0xc002586a
c000f565:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f56b:	e8 72 be ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f570:	59                   	pop    ecx
c000f571:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f576:	8b b8 06 05 00 00    	mov    edi,DWORD PTR [eax+0x506]
c000f57c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f57f:	e8 d0 8f 00 00       	call   c0018554 <Thr::getDriverOffsetFromAddress(unsigned long)>
c000f584:	5b                   	pop    ebx
c000f585:	5d                   	pop    ebp
c000f586:	50                   	push   eax
c000f587:	57                   	push   edi
c000f588:	e8 0f be ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f58d:	58                   	pop    eax
c000f58e:	5a                   	pop    edx
c000f58f:	56                   	push   esi
c000f590:	68 76 58 02 c0       	push   0xc0025876
c000f595:	e8 7d db ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000f59a:	83 c4 10             	add    esp,0x10
c000f59d:	fa                   	cli    
c000f59e:	f4                   	hlt    
c000f59f:	eb fe                	jmp    c000f59f <displayDebugInfo(regs*)+0x48d>

c000f5a1 <x87EmulHandler(regs*, void*)>:
c000f5a1:	53                   	push   ebx
c000f5a2:	83 ec 14             	sub    esp,0x14
c000f5a5:	68 86 58 02 c0       	push   0xc0025886
c000f5aa:	e8 68 db ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000f5af:	0f 20 c2             	mov    edx,cr0
c000f5b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f5b7:	83 c4 10             	add    esp,0x10
c000f5ba:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c000f5be:	0f 85 0f 01 00 00    	jne    c000f6d3 <x87EmulHandler(regs*, void*)+0x132>
c000f5c4:	f6 05 21 8c 02 c0 40 	test   BYTE PTR ds:0xc0028c21,0x40
c000f5cb:	75 30                	jne    c000f5fd <x87EmulHandler(regs*, void*)+0x5c>
c000f5cd:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c000f5d2:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c000f5d8:	85 c0                	test   eax,eax
c000f5da:	74 05                	je     c000f5e1 <x87EmulHandler(regs*, void*)+0x40>
c000f5dc:	83 e2 08             	and    edx,0x8
c000f5df:	75 23                	jne    c000f604 <x87EmulHandler(regs*, void*)+0x63>
c000f5e1:	83 ec 0c             	sub    esp,0xc
c000f5e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5e8:	e8 95 b4 00 00       	call   c001aa82 <Vm::x87Handler(regs*)>
c000f5ed:	83 c4 10             	add    esp,0x10
c000f5f0:	84 c0                	test   al,al
c000f5f2:	0f 84 db 00 00 00    	je     c000f6d3 <x87EmulHandler(regs*, void*)+0x132>
c000f5f8:	83 c4 08             	add    esp,0x8
c000f5fb:	5b                   	pop    ebx
c000f5fc:	c3                   	ret    
c000f5fd:	0f 06                	clts   
c000f5ff:	83 c4 08             	add    esp,0x8
c000f602:	5b                   	pop    ebx
c000f603:	c3                   	ret    
c000f604:	83 ec 0c             	sub    esp,0xc
c000f607:	68 b6 58 02 c0       	push   0xc00258b6
c000f60c:	e8 06 db ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000f611:	0f 06                	clts   
c000f613:	a1 4c 8d 02 c0       	mov    eax,ds:0xc0028d4c
c000f618:	83 c4 10             	add    esp,0x10
c000f61b:	85 c0                	test   eax,eax
c000f61d:	74 33                	je     c000f652 <x87EmulHandler(regs*, void*)+0xb1>
c000f61f:	83 ec 0c             	sub    esp,0xc
c000f622:	68 c3 58 02 c0       	push   0xc00258c3
c000f627:	e8 eb da ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000f62c:	59                   	pop    ecx
c000f62d:	a1 4c 8d 02 c0       	mov    eax,ds:0xc0028d4c
c000f632:	5b                   	pop    ebx
c000f633:	8b 40 55             	mov    eax,DWORD PTR [eax+0x55]
c000f636:	8b 15 08 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028c08
c000f63c:	83 c0 3f             	add    eax,0x3f
c000f63f:	8b 92 e0 01 00 00    	mov    edx,DWORD PTR [edx+0x1e0]
c000f645:	83 e0 c0             	and    eax,0xffffffc0
c000f648:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000f64a:	50                   	push   eax
c000f64b:	52                   	push   edx
c000f64c:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000f64f:	83 c4 10             	add    esp,0x10
c000f652:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f657:	8b 40 55             	mov    eax,DWORD PTR [eax+0x55]
c000f65a:	85 c0                	test   eax,eax
c000f65c:	74 4e                	je     c000f6ac <x87EmulHandler(regs*, void*)+0x10b>
c000f65e:	83 ec 0c             	sub    esp,0xc
c000f661:	68 ef 58 02 c0       	push   0xc00258ef
c000f666:	e8 ac da ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000f66b:	59                   	pop    ecx
c000f66c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f671:	5b                   	pop    ebx
c000f672:	8b 40 55             	mov    eax,DWORD PTR [eax+0x55]
c000f675:	8b 15 08 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028c08
c000f67b:	83 c0 3f             	add    eax,0x3f
c000f67e:	8b 92 e0 01 00 00    	mov    edx,DWORD PTR [edx+0x1e0]
c000f684:	83 e0 c0             	and    eax,0xffffffc0
c000f687:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000f689:	50                   	push   eax
c000f68a:	52                   	push   edx
c000f68b:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000f68e:	c7 04 24 05 59 02 c0 	mov    DWORD PTR [esp],0xc0025905
c000f695:	e8 7d da ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000f69a:	83 c4 10             	add    esp,0x10
c000f69d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f6a2:	a3 4c 8d 02 c0       	mov    ds:0xc0028d4c,eax
c000f6a7:	83 c4 08             	add    esp,0x8
c000f6aa:	5b                   	pop    ebx
c000f6ab:	c3                   	ret    
c000f6ac:	83 ec 0c             	sub    esp,0xc
c000f6af:	68 d6 58 02 c0       	push   0xc00258d6
c000f6b4:	e8 5e da ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000f6b9:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c000f6bf:	c7 04 24 40 02 00 00 	mov    DWORD PTR [esp],0x240
c000f6c6:	e8 1c a7 ff ff       	call   c0009de7 <malloc>
c000f6cb:	83 c4 10             	add    esp,0x10
c000f6ce:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c000f6d1:	eb ca                	jmp    c000f69d <x87EmulHandler(regs*, void*)+0xfc>
c000f6d3:	83 ec 0c             	sub    esp,0xc
c000f6d6:	68 a0 58 02 c0       	push   0xc00258a0
c000f6db:	e8 37 da ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000f6e0:	58                   	pop    eax
c000f6e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f6e5:	e8 28 fa ff ff       	call   c000f112 <displayDebugInfo(regs*)>

c000f6ea <gpFault(regs*, void*)>:
c000f6ea:	53                   	push   ebx
c000f6eb:	83 ec 14             	sub    esp,0x14
c000f6ee:	c7 05 48 8d 02 c0 3f 9f 01 c0 	mov    DWORD PTR ds:0xc0028d48,0xc0019f3f
c000f6f8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000f6fc:	53                   	push   ebx
c000f6fd:	e8 3d a8 00 00       	call   c0019f3f <Vm::faultHandler(regs*)>
c000f702:	83 c4 10             	add    esp,0x10
c000f705:	84 c0                	test   al,al
c000f707:	74 05                	je     c000f70e <gpFault(regs*, void*)+0x24>
c000f709:	83 c4 08             	add    esp,0x8
c000f70c:	5b                   	pop    ebx
c000f70d:	c3                   	ret    
c000f70e:	83 ec 0c             	sub    esp,0xc
c000f711:	68 1a 59 02 c0       	push   0xc002591a
c000f716:	e8 fc d9 ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000f71b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f71e:	e8 ef f9 ff ff       	call   c000f112 <displayDebugInfo(regs*)>

c000f723 <pgFault(regs*, void*)>:
c000f723:	53                   	push   ebx
c000f724:	83 ec 10             	sub    esp,0x10
c000f727:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f72b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f72e:	68 35 59 02 c0       	push   0xc0025935
c000f733:	e8 df d9 ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000f738:	0f 20 d0             	mov    eax,cr2
c000f73b:	5a                   	pop    edx
c000f73c:	59                   	pop    ecx
c000f73d:	50                   	push   eax
c000f73e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f743:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f746:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000f74c:	e8 41 d5 ff ff       	call   c000cc92 <VAS::tryLoadBackOffDisk(unsigned long)>
c000f751:	83 c4 10             	add    esp,0x10
c000f754:	84 c0                	test   al,al
c000f756:	74 05                	je     c000f75d <pgFault(regs*, void*)+0x3a>
c000f758:	83 c4 08             	add    esp,0x8
c000f75b:	5b                   	pop    ebx
c000f75c:	c3                   	ret    
c000f75d:	83 ec 0c             	sub    esp,0xc
c000f760:	68 4a 59 02 c0       	push   0xc002594a
c000f765:	e8 ad d9 ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000f76a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f76d:	e8 a0 f9 ff ff       	call   c000f112 <displayDebugInfo(regs*)>

c000f772 <otherISRHandler(regs*, void*)>:
c000f772:	53                   	push   ebx
c000f773:	83 ec 0c             	sub    esp,0xc
c000f776:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f77a:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000f77d:	50                   	push   eax
c000f77e:	50                   	push   eax
c000f77f:	68 57 59 02 c0       	push   0xc0025957
c000f784:	e8 8e d9 ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000f789:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f78c:	e8 81 f9 ff ff       	call   c000f112 <displayDebugInfo(regs*)>

c000f791 <opcodeFault(regs*, void*)>:
c000f791:	55                   	push   ebp
c000f792:	89 e5                	mov    ebp,esp
c000f794:	56                   	push   esi
c000f795:	53                   	push   ebx
c000f796:	83 ec 30             	sub    esp,0x30
c000f799:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f79c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f79f:	83 ec 08             	sub    esp,0x8
c000f7a2:	50                   	push   eax
c000f7a3:	68 74 59 02 c0       	push   0xc0025974
c000f7a8:	e8 6a d9 ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000f7ad:	83 c4 10             	add    esp,0x10
c000f7b0:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c000f7b5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000f7bb:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c000f7c1:	84 c0                	test   al,al
c000f7c3:	74 24                	je     c000f7e9 <opcodeFault(regs*, void*)+0x58>
c000f7c5:	83 ec 0c             	sub    esp,0xc
c000f7c8:	68 84 59 02 c0       	push   0xc0025984
c000f7cd:	e8 45 d9 ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000f7d2:	83 c4 10             	add    esp,0x10
c000f7d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f7d8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f7db:	8d 50 19             	lea    edx,[eax+0x19]
c000f7de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f7e1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f7e4:	e9 7b 03 00 00       	jmp    c000fb64 <opcodeFault(regs*, void*)+0x3d3>
c000f7e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f7ec:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f7ef:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000f7f2:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c000f7f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f7f9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f7fc:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000f7ff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f802:	8a 00                	mov    al,BYTE PTR [eax]
c000f804:	3c f0                	cmp    al,0xf0
c000f806:	75 17                	jne    c000f81f <opcodeFault(regs*, void*)+0x8e>
c000f808:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f80b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f80e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f811:	8d 50 01             	lea    edx,[eax+0x1]
c000f814:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f817:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f81a:	e9 d6 00 00 00       	jmp    c000f8f5 <opcodeFault(regs*, void*)+0x164>
c000f81f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f822:	8a 00                	mov    al,BYTE PTR [eax]
c000f824:	3c f2                	cmp    al,0xf2
c000f826:	74 09                	je     c000f831 <opcodeFault(regs*, void*)+0xa0>
c000f828:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f82b:	8a 00                	mov    al,BYTE PTR [eax]
c000f82d:	3c f3                	cmp    al,0xf3
c000f82f:	75 1b                	jne    c000f84c <opcodeFault(regs*, void*)+0xbb>
c000f831:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f835:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f838:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f83b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f83e:	8d 50 01             	lea    edx,[eax+0x1]
c000f841:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f844:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f847:	e9 a9 00 00 00       	jmp    c000f8f5 <opcodeFault(regs*, void*)+0x164>
c000f84c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f84f:	8a 00                	mov    al,BYTE PTR [eax]
c000f851:	3c 66                	cmp    al,0x66
c000f853:	75 1b                	jne    c000f870 <opcodeFault(regs*, void*)+0xdf>
c000f855:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f859:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f85c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f85f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f862:	8d 50 01             	lea    edx,[eax+0x1]
c000f865:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f868:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f86b:	e9 85 00 00 00       	jmp    c000f8f5 <opcodeFault(regs*, void*)+0x164>
c000f870:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f873:	8a 00                	mov    al,BYTE PTR [eax]
c000f875:	3c 67                	cmp    al,0x67
c000f877:	75 18                	jne    c000f891 <opcodeFault(regs*, void*)+0x100>
c000f879:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f87d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f880:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f883:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f886:	8d 50 01             	lea    edx,[eax+0x1]
c000f889:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f88c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f88f:	eb 64                	jmp    c000f8f5 <opcodeFault(regs*, void*)+0x164>
c000f891:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f894:	8a 00                	mov    al,BYTE PTR [eax]
c000f896:	3c 2e                	cmp    al,0x2e
c000f898:	74 09                	je     c000f8a3 <opcodeFault(regs*, void*)+0x112>
c000f89a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f89d:	8a 00                	mov    al,BYTE PTR [eax]
c000f89f:	3c 3e                	cmp    al,0x3e
c000f8a1:	75 18                	jne    c000f8bb <opcodeFault(regs*, void*)+0x12a>
c000f8a3:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f8a7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f8aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8ad:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f8b0:	8d 50 01             	lea    edx,[eax+0x1]
c000f8b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8b6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f8b9:	eb 3a                	jmp    c000f8f5 <opcodeFault(regs*, void*)+0x164>
c000f8bb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8be:	8a 00                	mov    al,BYTE PTR [eax]
c000f8c0:	3c 36                	cmp    al,0x36
c000f8c2:	74 1b                	je     c000f8df <opcodeFault(regs*, void*)+0x14e>
c000f8c4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8c7:	8a 00                	mov    al,BYTE PTR [eax]
c000f8c9:	3c 26                	cmp    al,0x26
c000f8cb:	74 12                	je     c000f8df <opcodeFault(regs*, void*)+0x14e>
c000f8cd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8d0:	8a 00                	mov    al,BYTE PTR [eax]
c000f8d2:	3c 64                	cmp    al,0x64
c000f8d4:	74 09                	je     c000f8df <opcodeFault(regs*, void*)+0x14e>
c000f8d6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8d9:	8a 00                	mov    al,BYTE PTR [eax]
c000f8db:	3c 65                	cmp    al,0x65
c000f8dd:	75 16                	jne    c000f8f5 <opcodeFault(regs*, void*)+0x164>
c000f8df:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f8e3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f8e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8e9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f8ec:	8d 50 01             	lea    edx,[eax+0x1]
c000f8ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8f2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f8f5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8f8:	8a 00                	mov    al,BYTE PTR [eax]
c000f8fa:	3c 0f                	cmp    al,0xf
c000f8fc:	0f 85 8d 01 00 00    	jne    c000fa8f <opcodeFault(regs*, void*)+0x2fe>
c000f902:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f905:	40                   	inc    eax
c000f906:	8a 00                	mov    al,BYTE PTR [eax]
c000f908:	3c c7                	cmp    al,0xc7
c000f90a:	0f 85 7f 01 00 00    	jne    c000fa8f <opcodeFault(regs*, void*)+0x2fe>
c000f910:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f913:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f916:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f919:	8d 50 01             	lea    edx,[eax+0x1]
c000f91c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f91f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f922:	8d 45 d2             	lea    eax,[ebp-0x2e]
c000f925:	50                   	push   eax
c000f926:	8d 45 d3             	lea    eax,[ebp-0x2d]
c000f929:	50                   	push   eax
c000f92a:	8d 45 d4             	lea    eax,[ebp-0x2c]
c000f92d:	50                   	push   eax
c000f92e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f931:	e8 dc 4f 00 00       	call   c0014912 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c000f936:	83 c4 10             	add    esp,0x10
c000f939:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000f93c:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c000f93f:	83 f0 01             	xor    eax,0x1
c000f942:	84 c0                	test   al,al
c000f944:	0f 84 45 01 00 00    	je     c000fa8f <opcodeFault(regs*, void*)+0x2fe>
c000f94a:	8a 45 d2             	mov    al,BYTE PTR [ebp-0x2e]
c000f94d:	3c 01                	cmp    al,0x1
c000f94f:	0f 85 3a 01 00 00    	jne    c000fa8f <opcodeFault(regs*, void*)+0x2fe>
c000f955:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c000f958:	83 f0 01             	xor    eax,0x1
c000f95b:	84 c0                	test   al,al
c000f95d:	0f 84 2c 01 00 00    	je     c000fa8f <opcodeFault(regs*, void*)+0x2fe>
c000f963:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f966:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000f969:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f96c:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c000f973:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f976:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f979:	89 c2                	mov    edx,eax
c000f97b:	b8 00 00 00 00       	mov    eax,0x0
c000f980:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f983:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f986:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f989:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000f98c:	ba 00 00 00 00       	mov    edx,0x0
c000f991:	09 45 e0             	or     DWORD PTR [ebp-0x20],eax
c000f994:	09 55 e4             	or     DWORD PTR [ebp-0x1c],edx
c000f997:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f99a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000f99d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f9a0:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c000f9a7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f9aa:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f9ad:	89 c2                	mov    edx,eax
c000f9af:	b8 00 00 00 00       	mov    eax,0x0
c000f9b4:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f9b7:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
c000f9ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9bd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f9c0:	ba 00 00 00 00       	mov    edx,0x0
c000f9c5:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
c000f9c8:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
c000f9cb:	fa                   	cli    
c000f9cc:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c000f9d1:	40                   	inc    eax
c000f9d2:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c000f9d7:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f9da:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f9dd:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9df:	89 c1                	mov    ecx,eax
c000f9e1:	33 4d e0             	xor    ecx,DWORD PTR [ebp-0x20]
c000f9e4:	89 cb                	mov    ebx,ecx
c000f9e6:	89 d0                	mov    eax,edx
c000f9e8:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c000f9eb:	89 c6                	mov    esi,eax
c000f9ed:	89 f0                	mov    eax,esi
c000f9ef:	09 d8                	or     eax,ebx
c000f9f1:	85 c0                	test   eax,eax
c000f9f3:	75 21                	jne    c000fa16 <opcodeFault(regs*, void*)+0x285>
c000f9f5:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c000f9f8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f9fb:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f9fe:	89 01                	mov    DWORD PTR [ecx],eax
c000fa00:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000fa03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa06:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fa09:	83 c8 40             	or     eax,0x40
c000fa0c:	89 c2                	mov    edx,eax
c000fa0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa11:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000fa14:	eb 3e                	jmp    c000fa54 <opcodeFault(regs*, void*)+0x2c3>
c000fa16:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000fa19:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000fa1c:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa1e:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000fa21:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000fa24:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c000fa27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000fa2d:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000fa30:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000fa33:	89 d0                	mov    eax,edx
c000fa35:	31 d2                	xor    edx,edx
c000fa37:	89 c3                	mov    ebx,eax
c000fa39:	89 d6                	mov    esi,edx
c000fa3b:	89 da                	mov    edx,ebx
c000fa3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa40:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c000fa43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa46:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fa49:	83 e0 bf             	and    eax,0xffffffbf
c000fa4c:	89 c2                	mov    edx,eax
c000fa4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa51:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000fa54:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c000fa59:	48                   	dec    eax
c000fa5a:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c000fa5f:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c000fa64:	85 c0                	test   eax,eax
c000fa66:	75 01                	jne    c000fa69 <opcodeFault(regs*, void*)+0x2d8>
c000fa68:	fb                   	sti    
c000fa69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa6c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000fa6f:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c000fa72:	01 c2                	add    edx,eax
c000fa74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa77:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000fa7a:	83 ec 0c             	sub    esp,0xc
c000fa7d:	68 a7 59 02 c0       	push   0xc00259a7
c000fa82:	e8 90 d6 ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000fa87:	83 c4 10             	add    esp,0x10
c000fa8a:	e9 d5 00 00 00       	jmp    c000fb64 <opcodeFault(regs*, void*)+0x3d3>
c000fa8f:	83 ec 0c             	sub    esp,0xc
c000fa92:	68 ba 59 02 c0       	push   0xc00259ba
c000fa97:	e8 7b d6 ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000fa9c:	83 c4 10             	add    esp,0x10
c000fa9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000faa2:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000faa5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000faa8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000faab:	c1 e0 04             	shl    eax,0x4
c000faae:	01 d0                	add    eax,edx
c000fab0:	83 c0 03             	add    eax,0x3
c000fab3:	8a 00                	mov    al,BYTE PTR [eax]
c000fab5:	0f b6 d8             	movzx  ebx,al
c000fab8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fabb:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000fabe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fac1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000fac4:	c1 e0 04             	shl    eax,0x4
c000fac7:	01 d0                	add    eax,edx
c000fac9:	83 c0 02             	add    eax,0x2
c000facc:	8a 00                	mov    al,BYTE PTR [eax]
c000face:	0f b6 c8             	movzx  ecx,al
c000fad1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fad4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000fad7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fada:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000fadd:	c1 e0 04             	shl    eax,0x4
c000fae0:	01 d0                	add    eax,edx
c000fae2:	40                   	inc    eax
c000fae3:	8a 00                	mov    al,BYTE PTR [eax]
c000fae5:	0f b6 d0             	movzx  edx,al
c000fae8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000faeb:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c000faee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000faf1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000faf4:	c1 e0 04             	shl    eax,0x4
c000faf7:	01 f0                	add    eax,esi
c000faf9:	8a 00                	mov    al,BYTE PTR [eax]
c000fafb:	0f b6 c0             	movzx  eax,al
c000fafe:	83 ec 0c             	sub    esp,0xc
c000fb01:	53                   	push   ebx
c000fb02:	51                   	push   ecx
c000fb03:	52                   	push   edx
c000fb04:	50                   	push   eax
c000fb05:	68 cc 59 02 c0       	push   0xc00259cc
c000fb0a:	e8 08 d6 ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000fb0f:	83 c4 20             	add    esp,0x20
c000fb12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb15:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000fb18:	83 c0 03             	add    eax,0x3
c000fb1b:	8a 00                	mov    al,BYTE PTR [eax]
c000fb1d:	0f b6 d8             	movzx  ebx,al
c000fb20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb23:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000fb26:	83 c0 02             	add    eax,0x2
c000fb29:	8a 00                	mov    al,BYTE PTR [eax]
c000fb2b:	0f b6 c8             	movzx  ecx,al
c000fb2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb31:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000fb34:	40                   	inc    eax
c000fb35:	8a 00                	mov    al,BYTE PTR [eax]
c000fb37:	0f b6 d0             	movzx  edx,al
c000fb3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb3d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000fb40:	8a 00                	mov    al,BYTE PTR [eax]
c000fb42:	0f b6 c0             	movzx  eax,al
c000fb45:	83 ec 0c             	sub    esp,0xc
c000fb48:	53                   	push   ebx
c000fb49:	51                   	push   ecx
c000fb4a:	52                   	push   edx
c000fb4b:	50                   	push   eax
c000fb4c:	68 f4 59 02 c0       	push   0xc00259f4
c000fb51:	e8 c1 d5 ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c000fb56:	83 c4 20             	add    esp,0x20
c000fb59:	83 ec 0c             	sub    esp,0xc
c000fb5c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fb5f:	e8 ae f5 ff ff       	call   c000f112 <displayDebugInfo(regs*)>
c000fb64:	8d 65 f8             	lea    esp,[ebp-0x8]
c000fb67:	5b                   	pop    ebx
c000fb68:	5e                   	pop    esi
c000fb69:	5d                   	pop    ebp
c000fb6a:	c3                   	ret    

c000fb6b <displayProgramFault(char const*)>:
c000fb6b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fb70:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000fb73:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000fb79:	85 c0                	test   eax,eax
c000fb7b:	74 15                	je     c000fb92 <displayProgramFault(char const*)+0x27>
c000fb7d:	83 ec 0c             	sub    esp,0xc
c000fb80:	6a 04                	push   0x4
c000fb82:	6a 0f                	push   0xf
c000fb84:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fb88:	50                   	push   eax
c000fb89:	e8 50 b5 ff ff       	call   c000b0de <VgaText::puts(char const*, VgaColour, VgaColour)>
c000fb8e:	83 c4 1c             	add    esp,0x1c
c000fb91:	c3                   	ret    
c000fb92:	c3                   	ret    

c000fb93 <setupInterruptController()>:
c000fb93:	55                   	push   ebp
c000fb94:	89 e5                	mov    ebp,esp
c000fb96:	53                   	push   ebx
c000fb97:	83 ec 24             	sub    esp,0x24
c000fb9a:	b8 00 00 00 00       	mov    eax,0x0
c000fb9f:	85 c0                	test   eax,eax
c000fba1:	0f 95 c0             	setne  al
c000fba4:	84 c0                	test   al,al
c000fba6:	74 5b                	je     c000fc03 <setupInterruptController()+0x70>
c000fba8:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c000fbaf:	83 ec 0c             	sub    esp,0xc
c000fbb2:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000fbb5:	e8 2d a2 ff ff       	call   c0009de7 <malloc>
c000fbba:	83 c4 10             	add    esp,0x10
c000fbbd:	89 c3                	mov    ebx,eax
c000fbbf:	83 ec 0c             	sub    esp,0xc
c000fbc2:	53                   	push   ebx
c000fbc3:	e8 48 23 01 00       	call   c0021f10 <APIC::APIC()>
c000fbc8:	83 c4 10             	add    esp,0x10
c000fbcb:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000fbce:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c000fbd1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fbd4:	8b 00                	mov    eax,DWORD PTR [eax]
c000fbd6:	83 c0 08             	add    eax,0x8
c000fbd9:	8b 00                	mov    eax,DWORD PTR [eax]
c000fbdb:	6a 00                	push   0x0
c000fbdd:	6a 00                	push   0x0
c000fbdf:	6a 00                	push   0x0
c000fbe1:	52                   	push   edx
c000fbe2:	ff d0                	call   eax
c000fbe4:	83 c4 10             	add    esp,0x10
c000fbe7:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c000fbec:	83 ec 08             	sub    esp,0x8
c000fbef:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fbf2:	50                   	push   eax
c000fbf3:	e8 92 ea ff ff       	call   c000e68a <Device::addChild(Device*)>
c000fbf8:	83 c4 10             	add    esp,0x10
c000fbfb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fbfe:	e9 79 03 00 00       	jmp    c000ff7c <setupInterruptController()+0x3e9>
c000fc03:	a0 20 95 02 c0       	mov    al,ds:0xc0029520
c000fc08:	84 c0                	test   al,al
c000fc0a:	75 14                	jne    c000fc20 <setupInterruptController()+0x8d>
c000fc0c:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c000fc11:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000fc17:	83 e2 fe             	and    edx,0xfffffffe
c000fc1a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000fc20:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c000fc25:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000fc2b:	83 e0 01             	and    eax,0x1
c000fc2e:	84 c0                	test   al,al
c000fc30:	0f 95 c0             	setne  al
c000fc33:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c000fc36:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c000fc3d:	83 ec 0c             	sub    esp,0xc
c000fc40:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c000fc43:	e8 9f a1 ff ff       	call   c0009de7 <malloc>
c000fc48:	83 c4 10             	add    esp,0x10
c000fc4b:	89 c3                	mov    ebx,eax
c000fc4d:	83 ec 0c             	sub    esp,0xc
c000fc50:	53                   	push   ebx
c000fc51:	e8 12 28 01 00       	call   c0022468 <PIC::PIC()>
c000fc56:	83 c4 10             	add    esp,0x10
c000fc59:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000fc5c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000fc5f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fc62:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc64:	83 c0 08             	add    eax,0x8
c000fc67:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc69:	6a 00                	push   0x0
c000fc6b:	6a 00                	push   0x0
c000fc6d:	6a 00                	push   0x0
c000fc6f:	52                   	push   edx
c000fc70:	ff d0                	call   eax
c000fc72:	83 c4 10             	add    esp,0x10
c000fc75:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c000fc79:	74 73                	je     c000fcee <setupInterruptController()+0x15b>
c000fc7b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000fc7e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fc81:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc83:	83 c0 0c             	add    eax,0xc
c000fc86:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc88:	6a 00                	push   0x0
c000fc8a:	6a 00                	push   0x0
c000fc8c:	6a 00                	push   0x0
c000fc8e:	52                   	push   edx
c000fc8f:	ff d0                	call   eax
c000fc91:	83 c4 10             	add    esp,0x10
c000fc94:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000fc98:	74 15                	je     c000fcaf <setupInterruptController()+0x11c>
c000fc9a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fc9d:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc9f:	83 c0 04             	add    eax,0x4
c000fca2:	8b 00                	mov    eax,DWORD PTR [eax]
c000fca4:	83 ec 0c             	sub    esp,0xc
c000fca7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fcaa:	ff d0                	call   eax
c000fcac:	83 c4 10             	add    esp,0x10
c000fcaf:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c000fcb6:	83 ec 0c             	sub    esp,0xc
c000fcb9:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000fcbc:	e8 26 a1 ff ff       	call   c0009de7 <malloc>
c000fcc1:	83 c4 10             	add    esp,0x10
c000fcc4:	89 c3                	mov    ebx,eax
c000fcc6:	83 ec 0c             	sub    esp,0xc
c000fcc9:	53                   	push   ebx
c000fcca:	e8 41 22 01 00       	call   c0021f10 <APIC::APIC()>
c000fccf:	83 c4 10             	add    esp,0x10
c000fcd2:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000fcd5:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000fcd8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fcdb:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcdd:	83 c0 08             	add    eax,0x8
c000fce0:	8b 00                	mov    eax,DWORD PTR [eax]
c000fce2:	6a 00                	push   0x0
c000fce4:	6a 00                	push   0x0
c000fce6:	6a 00                	push   0x0
c000fce8:	52                   	push   edx
c000fce9:	ff d0                	call   eax
c000fceb:	83 c4 10             	add    esp,0x10
c000fcee:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c000fcf3:	83 ec 08             	sub    esp,0x8
c000fcf6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fcf9:	50                   	push   eax
c000fcfa:	e8 8b e9 ff ff       	call   c000e68a <Device::addChild(Device*)>
c000fcff:	83 c4 10             	add    esp,0x10
c000fd02:	c7 05 4c 8d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028d4c,0x0
c000fd0c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd0f:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd11:	83 c0 24             	add    eax,0x24
c000fd14:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd16:	6a 00                	push   0x0
c000fd18:	68 72 f7 00 c0       	push   0xc000f772
c000fd1d:	6a 00                	push   0x0
c000fd1f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd22:	ff d0                	call   eax
c000fd24:	83 c4 10             	add    esp,0x10
c000fd27:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd2a:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd2c:	83 c0 24             	add    eax,0x24
c000fd2f:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd31:	6a 00                	push   0x0
c000fd33:	68 72 f7 00 c0       	push   0xc000f772
c000fd38:	6a 01                	push   0x1
c000fd3a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd3d:	ff d0                	call   eax
c000fd3f:	83 c4 10             	add    esp,0x10
c000fd42:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd45:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd47:	83 c0 24             	add    eax,0x24
c000fd4a:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd4c:	6a 00                	push   0x0
c000fd4e:	68 6f ef 00 c0       	push   0xc000ef6f
c000fd53:	6a 02                	push   0x2
c000fd55:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd58:	ff d0                	call   eax
c000fd5a:	83 c4 10             	add    esp,0x10
c000fd5d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd60:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd62:	83 c0 24             	add    eax,0x24
c000fd65:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd67:	6a 00                	push   0x0
c000fd69:	68 72 f7 00 c0       	push   0xc000f772
c000fd6e:	6a 03                	push   0x3
c000fd70:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd73:	ff d0                	call   eax
c000fd75:	83 c4 10             	add    esp,0x10
c000fd78:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd7b:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd7d:	83 c0 24             	add    eax,0x24
c000fd80:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd82:	6a 00                	push   0x0
c000fd84:	68 72 f7 00 c0       	push   0xc000f772
c000fd89:	6a 04                	push   0x4
c000fd8b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd8e:	ff d0                	call   eax
c000fd90:	83 c4 10             	add    esp,0x10
c000fd93:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd96:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd98:	83 c0 24             	add    eax,0x24
c000fd9b:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd9d:	6a 00                	push   0x0
c000fd9f:	68 72 f7 00 c0       	push   0xc000f772
c000fda4:	6a 05                	push   0x5
c000fda6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fda9:	ff d0                	call   eax
c000fdab:	83 c4 10             	add    esp,0x10
c000fdae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fdb1:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdb3:	83 c0 24             	add    eax,0x24
c000fdb6:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdb8:	6a 00                	push   0x0
c000fdba:	68 91 f7 00 c0       	push   0xc000f791
c000fdbf:	6a 06                	push   0x6
c000fdc1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fdc4:	ff d0                	call   eax
c000fdc6:	83 c4 10             	add    esp,0x10
c000fdc9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fdcc:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdce:	83 c0 24             	add    eax,0x24
c000fdd1:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdd3:	6a 00                	push   0x0
c000fdd5:	68 a1 f5 00 c0       	push   0xc000f5a1
c000fdda:	6a 07                	push   0x7
c000fddc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fddf:	ff d0                	call   eax
c000fde1:	83 c4 10             	add    esp,0x10
c000fde4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fde7:	8b 00                	mov    eax,DWORD PTR [eax]
c000fde9:	83 c0 24             	add    eax,0x24
c000fdec:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdee:	6a 00                	push   0x0
c000fdf0:	68 8a ed 00 c0       	push   0xc000ed8a
c000fdf5:	6a 08                	push   0x8
c000fdf7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fdfa:	ff d0                	call   eax
c000fdfc:	83 c4 10             	add    esp,0x10
c000fdff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fe02:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe04:	83 c0 24             	add    eax,0x24
c000fe07:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe09:	6a 00                	push   0x0
c000fe0b:	68 72 f7 00 c0       	push   0xc000f772
c000fe10:	6a 09                	push   0x9
c000fe12:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fe15:	ff d0                	call   eax
c000fe17:	83 c4 10             	add    esp,0x10
c000fe1a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fe1d:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe1f:	83 c0 24             	add    eax,0x24
c000fe22:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe24:	6a 00                	push   0x0
c000fe26:	68 72 f7 00 c0       	push   0xc000f772
c000fe2b:	6a 0a                	push   0xa
c000fe2d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fe30:	ff d0                	call   eax
c000fe32:	83 c4 10             	add    esp,0x10
c000fe35:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fe38:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe3a:	83 c0 24             	add    eax,0x24
c000fe3d:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe3f:	6a 00                	push   0x0
c000fe41:	68 72 f7 00 c0       	push   0xc000f772
c000fe46:	6a 0b                	push   0xb
c000fe48:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fe4b:	ff d0                	call   eax
c000fe4d:	83 c4 10             	add    esp,0x10
c000fe50:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fe53:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe55:	83 c0 24             	add    eax,0x24
c000fe58:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe5a:	6a 00                	push   0x0
c000fe5c:	68 72 f7 00 c0       	push   0xc000f772
c000fe61:	6a 0c                	push   0xc
c000fe63:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fe66:	ff d0                	call   eax
c000fe68:	83 c4 10             	add    esp,0x10
c000fe6b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fe6e:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe70:	83 c0 24             	add    eax,0x24
c000fe73:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe75:	6a 00                	push   0x0
c000fe77:	68 ea f6 00 c0       	push   0xc000f6ea
c000fe7c:	6a 0d                	push   0xd
c000fe7e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fe81:	ff d0                	call   eax
c000fe83:	83 c4 10             	add    esp,0x10
c000fe86:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fe89:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe8b:	83 c0 24             	add    eax,0x24
c000fe8e:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe90:	6a 00                	push   0x0
c000fe92:	68 23 f7 00 c0       	push   0xc000f723
c000fe97:	6a 0e                	push   0xe
c000fe99:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fe9c:	ff d0                	call   eax
c000fe9e:	83 c4 10             	add    esp,0x10
c000fea1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fea4:	8b 00                	mov    eax,DWORD PTR [eax]
c000fea6:	83 c0 24             	add    eax,0x24
c000fea9:	8b 00                	mov    eax,DWORD PTR [eax]
c000feab:	6a 00                	push   0x0
c000fead:	68 72 f7 00 c0       	push   0xc000f772
c000feb2:	6a 0f                	push   0xf
c000feb4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000feb7:	ff d0                	call   eax
c000feb9:	83 c4 10             	add    esp,0x10
c000febc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000febf:	8b 00                	mov    eax,DWORD PTR [eax]
c000fec1:	83 c0 24             	add    eax,0x24
c000fec4:	8b 00                	mov    eax,DWORD PTR [eax]
c000fec6:	6a 00                	push   0x0
c000fec8:	68 72 f7 00 c0       	push   0xc000f772
c000fecd:	6a 10                	push   0x10
c000fecf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fed2:	ff d0                	call   eax
c000fed4:	83 c4 10             	add    esp,0x10
c000fed7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000feda:	8b 00                	mov    eax,DWORD PTR [eax]
c000fedc:	83 c0 24             	add    eax,0x24
c000fedf:	8b 00                	mov    eax,DWORD PTR [eax]
c000fee1:	6a 00                	push   0x0
c000fee3:	68 72 f7 00 c0       	push   0xc000f772
c000fee8:	6a 11                	push   0x11
c000feea:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000feed:	ff d0                	call   eax
c000feef:	83 c4 10             	add    esp,0x10
c000fef2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fef5:	8b 00                	mov    eax,DWORD PTR [eax]
c000fef7:	83 c0 24             	add    eax,0x24
c000fefa:	8b 00                	mov    eax,DWORD PTR [eax]
c000fefc:	6a 00                	push   0x0
c000fefe:	68 72 f7 00 c0       	push   0xc000f772
c000ff03:	6a 12                	push   0x12
c000ff05:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000ff08:	ff d0                	call   eax
c000ff0a:	83 c4 10             	add    esp,0x10
c000ff0d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ff10:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff12:	83 c0 24             	add    eax,0x24
c000ff15:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff17:	6a 00                	push   0x0
c000ff19:	68 72 f7 00 c0       	push   0xc000f772
c000ff1e:	6a 13                	push   0x13
c000ff20:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000ff23:	ff d0                	call   eax
c000ff25:	83 c4 10             	add    esp,0x10
c000ff28:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ff2b:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff2d:	83 c0 24             	add    eax,0x24
c000ff30:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff32:	6a 00                	push   0x0
c000ff34:	68 72 f7 00 c0       	push   0xc000f772
c000ff39:	6a 14                	push   0x14
c000ff3b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000ff3e:	ff d0                	call   eax
c000ff40:	83 c4 10             	add    esp,0x10
c000ff43:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ff46:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff48:	83 c0 24             	add    eax,0x24
c000ff4b:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff4d:	6a 00                	push   0x0
c000ff4f:	68 72 f7 00 c0       	push   0xc000f772
c000ff54:	6a 1e                	push   0x1e
c000ff56:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000ff59:	ff d0                	call   eax
c000ff5b:	83 c4 10             	add    esp,0x10
c000ff5e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ff61:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff63:	83 c0 24             	add    eax,0x24
c000ff66:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff68:	6a 00                	push   0x0
c000ff6a:	68 93 75 01 c0       	push   0xc0017593
c000ff6f:	6a 60                	push   0x60
c000ff71:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000ff74:	ff d0                	call   eax
c000ff76:	83 c4 10             	add    esp,0x10
c000ff79:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ff7c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000ff7f:	c9                   	leave  
c000ff80:	c3                   	ret    
c000ff81:	90                   	nop

c000ff82 <InterruptController::convertLegacyIRQNumber(int)>:
c000ff82:	55                   	push   ebp
c000ff83:	89 e5                	mov    ebp,esp
c000ff85:	83 ec 08             	sub    esp,0x8
c000ff88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff8b:	83 ec 0c             	sub    esp,0xc
c000ff8e:	50                   	push   eax
c000ff8f:	e8 f6 e9 ff ff       	call   c000e98a <Device::getName()>
c000ff94:	83 c4 10             	add    esp,0x10
c000ff97:	8a 00                	mov    al,BYTE PTR [eax]
c000ff99:	3c 41                	cmp    al,0x41
c000ff9b:	0f 94 c0             	sete   al
c000ff9e:	84 c0                	test   al,al
c000ffa0:	74 28                	je     c000ffca <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000ffa2:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c000ffa6:	7f 12                	jg     c000ffba <InterruptController::convertLegacyIRQNumber(int)+0x38>
c000ffa8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000ffab:	05 00 83 02 c0       	add    eax,0xc0028300
c000ffb0:	8a 00                	mov    al,BYTE PTR [eax]
c000ffb2:	0f b6 c0             	movzx  eax,al
c000ffb5:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c000ffb8:	eb 10                	jmp    c000ffca <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000ffba:	83 ec 0c             	sub    esp,0xc
c000ffbd:	68 1c 5a 02 c0       	push   0xc0025a1c
c000ffc2:	e8 32 52 00 00       	call   c00151f9 <Krnl::panic(char const*)>
c000ffc7:	83 c4 10             	add    esp,0x10
c000ffca:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000ffcd:	c9                   	leave  
c000ffce:	c3                   	ret    
c000ffcf:	90                   	nop

c000ffd0 <startGUI(void*)>:
c000ffd0:	55                   	push   ebp
c000ffd1:	89 e5                	mov    ebp,esp
c000ffd3:	53                   	push   ebx
c000ffd4:	83 ec 04             	sub    esp,0x4
c000ffd7:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c000ffdc:	48                   	dec    eax
c000ffdd:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c000ffe2:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c000ffe7:	85 c0                	test   eax,eax
c000ffe9:	75 01                	jne    c000ffec <startGUI(void*)+0x1c>
c000ffeb:	fb                   	sti    
c000ffec:	8b 1d 08 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028c08
c000fff2:	83 ec 08             	sub    esp,0x8
c000fff5:	6a 01                	push   0x1
c000fff7:	68 9c 5a 02 c0       	push   0xc0025a9c
c000fffc:	e8 6d 85 00 00       	call   c001856e <Thr::loadDLL(char const*, bool)>
c0010001:	83 c4 10             	add    esp,0x10
c0010004:	83 ec 08             	sub    esp,0x8
c0010007:	53                   	push   ebx
c0010008:	50                   	push   eax
c0010009:	e8 91 87 00 00       	call   c001879f <Thr::executeDLL(unsigned long, void*)>
c001000e:	83 c4 10             	add    esp,0x10
c0010011:	8b 1d 08 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028c08
c0010017:	83 ec 08             	sub    esp,0x8
c001001a:	6a 01                	push   0x1
c001001c:	68 b6 5a 02 c0       	push   0xc0025ab6
c0010021:	e8 48 85 00 00       	call   c001856e <Thr::loadDLL(char const*, bool)>
c0010026:	83 c4 10             	add    esp,0x10
c0010029:	83 ec 08             	sub    esp,0x8
c001002c:	53                   	push   ebx
c001002d:	50                   	push   eax
c001002e:	e8 6c 87 00 00       	call   c001879f <Thr::executeDLL(unsigned long, void*)>
c0010033:	83 c4 10             	add    esp,0x10
c0010036:	90                   	nop
c0010037:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001003a:	c9                   	leave  
c001003b:	c3                   	ret    

c001003c <startGUIVESA(void*)>:
c001003c:	55                   	push   ebp
c001003d:	89 e5                	mov    ebp,esp
c001003f:	53                   	push   ebx
c0010040:	83 ec 04             	sub    esp,0x4
c0010043:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c0010048:	48                   	dec    eax
c0010049:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c001004e:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c0010053:	85 c0                	test   eax,eax
c0010055:	75 01                	jne    c0010058 <startGUIVESA(void*)+0x1c>
c0010057:	fb                   	sti    
c0010058:	8b 1d 08 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028c08
c001005e:	83 ec 08             	sub    esp,0x8
c0010061:	6a 01                	push   0x1
c0010063:	68 d4 5a 02 c0       	push   0xc0025ad4
c0010068:	e8 01 85 00 00       	call   c001856e <Thr::loadDLL(char const*, bool)>
c001006d:	83 c4 10             	add    esp,0x10
c0010070:	83 ec 08             	sub    esp,0x8
c0010073:	53                   	push   ebx
c0010074:	50                   	push   eax
c0010075:	e8 25 87 00 00       	call   c001879f <Thr::executeDLL(unsigned long, void*)>
c001007a:	83 c4 10             	add    esp,0x10
c001007d:	8b 1d 08 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028c08
c0010083:	83 ec 08             	sub    esp,0x8
c0010086:	6a 01                	push   0x1
c0010088:	68 b6 5a 02 c0       	push   0xc0025ab6
c001008d:	e8 dc 84 00 00       	call   c001856e <Thr::loadDLL(char const*, bool)>
c0010092:	83 c4 10             	add    esp,0x10
c0010095:	83 ec 08             	sub    esp,0x8
c0010098:	53                   	push   ebx
c0010099:	50                   	push   eax
c001009a:	e8 00 87 00 00       	call   c001879f <Thr::executeDLL(unsigned long, void*)>
c001009f:	83 c4 10             	add    esp,0x10
c00100a2:	90                   	nop
c00100a3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00100a6:	c9                   	leave  
c00100a7:	c3                   	ret    

c00100a8 <sendKeyToTerminal(unsigned char)>:
c00100a8:	55                   	push   ebp
c00100a9:	89 e5                	mov    ebp,esp
c00100ab:	83 ec 28             	sub    esp,0x28
c00100ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00100b1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00100b4:	a1 84 8c 02 c0       	mov    eax,ds:0xc0028c84
c00100b9:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c00100bd:	83 ec 08             	sub    esp,0x8
c00100c0:	52                   	push   edx
c00100c1:	50                   	push   eax
c00100c2:	e8 bd b4 ff ff       	call   c000b584 <VgaText::receiveKey(unsigned char)>
c00100c7:	83 c4 10             	add    esp,0x10
c00100ca:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c00100ce:	0f 85 8f 00 00 00    	jne    c0010163 <sendKeyToTerminal(unsigned char)+0xbb>
c00100d4:	fa                   	cli    
c00100d5:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c00100da:	40                   	inc    eax
c00100db:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c00100e0:	a1 24 a1 02 c0       	mov    eax,ds:0xc002a124
c00100e5:	40                   	inc    eax
c00100e6:	a3 24 a1 02 c0       	mov    ds:0xc002a124,eax
c00100eb:	a1 60 8d 02 c0       	mov    eax,ds:0xc0028d60
c00100f0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00100f3:	c7 05 60 8d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028d60,0x0
c00100fd:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0010101:	74 1f                	je     c0010122 <sendKeyToTerminal(unsigned char)+0x7a>
c0010103:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0010106:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0010109:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001010c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001010f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0010112:	83 ec 0c             	sub    esp,0xc
c0010115:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010118:	e8 f3 92 00 00       	call   c0019410 <unblockTask(ThreadControlBlock*)>
c001011d:	83 c4 10             	add    esp,0x10
c0010120:	eb db                	jmp    c00100fd <sendKeyToTerminal(unsigned char)+0x55>
c0010122:	a1 24 a1 02 c0       	mov    eax,ds:0xc002a124
c0010127:	48                   	dec    eax
c0010128:	a3 24 a1 02 c0       	mov    ds:0xc002a124,eax
c001012d:	a1 24 a1 02 c0       	mov    eax,ds:0xc002a124
c0010132:	85 c0                	test   eax,eax
c0010134:	75 18                	jne    c001014e <sendKeyToTerminal(unsigned char)+0xa6>
c0010136:	a1 20 a1 02 c0       	mov    eax,ds:0xc002a120
c001013b:	85 c0                	test   eax,eax
c001013d:	74 0f                	je     c001014e <sendKeyToTerminal(unsigned char)+0xa6>
c001013f:	c7 05 20 a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a120,0x0
c0010149:	e8 06 8e 00 00       	call   c0018f54 <schedule()>
c001014e:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c0010153:	48                   	dec    eax
c0010154:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c0010159:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c001015e:	85 c0                	test   eax,eax
c0010160:	75 01                	jne    c0010163 <sendKeyToTerminal(unsigned char)+0xbb>
c0010162:	fb                   	sti    
c0010163:	90                   	nop
c0010164:	c9                   	leave  
c0010165:	c3                   	ret    

c0010166 <sendKeyboardToken(KeyboardToken)>:
c0010166:	55                   	push   ebp
c0010167:	89 e5                	mov    ebp,esp
c0010169:	83 ec 18             	sub    esp,0x18
c001016c:	e8 76 53 00 00       	call   c00154e7 <Krnl::userIOReceived()>
c0010171:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0010174:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010177:	0f b7 c0             	movzx  eax,ax
c001017a:	83 f2 01             	xor    edx,0x1
c001017d:	88 90 80 8d 02 c0    	mov    BYTE PTR [eax-0x3ffd7280],dl
c0010183:	a1 68 8d 02 c0       	mov    eax,ds:0xc0028d68
c0010188:	85 c0                	test   eax,eax
c001018a:	74 24                	je     c00101b0 <sendKeyboardToken(KeyboardToken)+0x4a>
c001018c:	8b 0d 68 8d 02 c0    	mov    ecx,DWORD PTR ds:0xc0028d68
c0010192:	83 ec 04             	sub    esp,0x4
c0010195:	68 80 8d 02 c0       	push   0xc0028d80
c001019a:	83 ec 08             	sub    esp,0x8
c001019d:	89 e2                	mov    edx,esp
c001019f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00101a2:	89 02                	mov    DWORD PTR [edx],eax
c00101a4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00101a7:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c00101ab:	ff d1                	call   ecx
c00101ad:	83 c4 10             	add    esp,0x10
c00101b0:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00101b4:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c00101b7:	a0 88 91 02 c0       	mov    al,ds:0xc0029188
c00101bc:	38 c2                	cmp    dl,al
c00101be:	74 1c                	je     c00101dc <sendKeyboardToken(KeyboardToken)+0x76>
c00101c0:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c00101c3:	a2 88 91 02 c0       	mov    ds:0xc0029188,al
c00101c8:	a0 88 91 02 c0       	mov    al,ds:0xc0029188
c00101cd:	0f b6 c0             	movzx  eax,al
c00101d0:	83 ec 0c             	sub    esp,0xc
c00101d3:	50                   	push   eax
c00101d4:	e8 ed a9 ff ff       	call   c000abc6 <setTerminalScrollLock(bool)>
c00101d9:	83 c4 10             	add    esp,0x10
c00101dc:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c00101df:	84 c0                	test   al,al
c00101e1:	0f 84 ae 00 00 00    	je     c0010295 <sendKeyboardToken(KeyboardToken)+0x12f>
c00101e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00101ea:	66 3d 10 03          	cmp    ax,0x310
c00101ee:	75 06                	jne    c00101f6 <sendKeyboardToken(KeyboardToken)+0x90>
c00101f0:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c00101f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00101f9:	66 3d 11 03          	cmp    ax,0x311
c00101fd:	75 06                	jne    c0010205 <sendKeyboardToken(KeyboardToken)+0x9f>
c00101ff:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0010205:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010208:	66 3d 12 03          	cmp    ax,0x312
c001020c:	75 06                	jne    c0010214 <sendKeyboardToken(KeyboardToken)+0xae>
c001020e:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0010214:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010217:	66 3d 13 03          	cmp    ax,0x313
c001021b:	75 06                	jne    c0010223 <sendKeyboardToken(KeyboardToken)+0xbd>
c001021d:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0010223:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010226:	66 3d 14 03          	cmp    ax,0x314
c001022a:	75 06                	jne    c0010232 <sendKeyboardToken(KeyboardToken)+0xcc>
c001022c:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0010232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010235:	66 3d 15 03          	cmp    ax,0x315
c0010239:	75 06                	jne    c0010241 <sendKeyboardToken(KeyboardToken)+0xdb>
c001023b:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0010241:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010244:	66 3d 16 03          	cmp    ax,0x316
c0010248:	75 06                	jne    c0010250 <sendKeyboardToken(KeyboardToken)+0xea>
c001024a:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0010250:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010253:	66 3d 17 03          	cmp    ax,0x317
c0010257:	75 06                	jne    c001025f <sendKeyboardToken(KeyboardToken)+0xf9>
c0010259:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c001025f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010262:	66 3d 18 03          	cmp    ax,0x318
c0010266:	75 06                	jne    c001026e <sendKeyboardToken(KeyboardToken)+0x108>
c0010268:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001026e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010271:	66 3d 19 03          	cmp    ax,0x319
c0010275:	75 06                	jne    c001027d <sendKeyboardToken(KeyboardToken)+0x117>
c0010277:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c001027d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010280:	66 3d 1a 03          	cmp    ax,0x31a
c0010284:	0f 85 c9 00 00 00    	jne    c0010353 <sendKeyboardToken(KeyboardToken)+0x1ed>
c001028a:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0010290:	e9 be 00 00 00       	jmp    c0010353 <sendKeyboardToken(KeyboardToken)+0x1ed>
c0010295:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010298:	66 3d 10 03          	cmp    ax,0x310
c001029c:	75 0a                	jne    c00102a8 <sendKeyboardToken(KeyboardToken)+0x142>
c001029e:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c00102a4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00102a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00102ab:	66 3d 11 03          	cmp    ax,0x311
c00102af:	75 0a                	jne    c00102bb <sendKeyboardToken(KeyboardToken)+0x155>
c00102b1:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c00102b7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00102bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00102be:	66 3d 12 03          	cmp    ax,0x312
c00102c2:	75 0a                	jne    c00102ce <sendKeyboardToken(KeyboardToken)+0x168>
c00102c4:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c00102ca:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00102ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00102d1:	66 3d 13 03          	cmp    ax,0x313
c00102d5:	75 0a                	jne    c00102e1 <sendKeyboardToken(KeyboardToken)+0x17b>
c00102d7:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c00102dd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00102e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00102e4:	66 3d 14 03          	cmp    ax,0x314
c00102e8:	75 0a                	jne    c00102f4 <sendKeyboardToken(KeyboardToken)+0x18e>
c00102ea:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c00102f0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00102f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00102f7:	66 3d 15 03          	cmp    ax,0x315
c00102fb:	75 0a                	jne    c0010307 <sendKeyboardToken(KeyboardToken)+0x1a1>
c00102fd:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0010303:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0010307:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001030a:	66 3d 16 03          	cmp    ax,0x316
c001030e:	75 0a                	jne    c001031a <sendKeyboardToken(KeyboardToken)+0x1b4>
c0010310:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0010316:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001031a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001031d:	66 3d 17 03          	cmp    ax,0x317
c0010321:	75 0a                	jne    c001032d <sendKeyboardToken(KeyboardToken)+0x1c7>
c0010323:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0010329:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001032d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010330:	66 3d 18 03          	cmp    ax,0x318
c0010334:	75 0a                	jne    c0010340 <sendKeyboardToken(KeyboardToken)+0x1da>
c0010336:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c001033c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0010340:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010343:	66 3d 19 03          	cmp    ax,0x319
c0010347:	75 0a                	jne    c0010353 <sendKeyboardToken(KeyboardToken)+0x1ed>
c0010349:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c001034f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0010353:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010356:	66 3d 00 02          	cmp    ax,0x200
c001035a:	75 2c                	jne    c0010388 <sendKeyboardToken(KeyboardToken)+0x222>
c001035c:	a0 80 91 02 c0       	mov    al,ds:0xc0029180
c0010361:	83 f0 01             	xor    eax,0x1
c0010364:	84 c0                	test   al,al
c0010366:	74 20                	je     c0010388 <sendKeyboardToken(KeyboardToken)+0x222>
c0010368:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c001036d:	6a 01                	push   0x1
c001036f:	6a 00                	push   0x0
c0010371:	68 d0 ff 00 c0       	push   0xc000ffd0
c0010376:	50                   	push   eax
c0010377:	e8 bc 89 00 00       	call   c0018d38 <Process::createThread(void (*)(void*), void*, int)>
c001037c:	83 c4 10             	add    esp,0x10
c001037f:	c6 05 80 91 02 c0 01 	mov    BYTE PTR ds:0xc0029180,0x1
c0010386:	eb 33                	jmp    c00103bb <sendKeyboardToken(KeyboardToken)+0x255>
c0010388:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001038b:	66 3d 01 02          	cmp    ax,0x201
c001038f:	75 2a                	jne    c00103bb <sendKeyboardToken(KeyboardToken)+0x255>
c0010391:	a0 80 91 02 c0       	mov    al,ds:0xc0029180
c0010396:	83 f0 01             	xor    eax,0x1
c0010399:	84 c0                	test   al,al
c001039b:	74 1e                	je     c00103bb <sendKeyboardToken(KeyboardToken)+0x255>
c001039d:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c00103a2:	6a 01                	push   0x1
c00103a4:	6a 00                	push   0x0
c00103a6:	68 3c 00 01 c0       	push   0xc001003c
c00103ab:	50                   	push   eax
c00103ac:	e8 87 89 00 00       	call   c0018d38 <Process::createThread(void (*)(void*), void*, int)>
c00103b1:	83 c4 10             	add    esp,0x10
c00103b4:	c6 05 80 91 02 c0 01 	mov    BYTE PTR ds:0xc0029180,0x1
c00103bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00103be:	66 3d 1d 03          	cmp    ax,0x31d
c00103c2:	75 06                	jne    c00103ca <sendKeyboardToken(KeyboardToken)+0x264>
c00103c4:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00103ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00103cd:	66 3d 1c 03          	cmp    ax,0x31c
c00103d1:	75 06                	jne    c00103d9 <sendKeyboardToken(KeyboardToken)+0x273>
c00103d3:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00103d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00103dc:	66 3d 1b 03          	cmp    ax,0x31b
c00103e0:	75 06                	jne    c00103e8 <sendKeyboardToken(KeyboardToken)+0x282>
c00103e2:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00103e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00103eb:	66 3d 1e 03          	cmp    ax,0x31e
c00103ef:	75 06                	jne    c00103f7 <sendKeyboardToken(KeyboardToken)+0x291>
c00103f1:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00103f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00103fa:	66 3d 1f 03          	cmp    ax,0x31f
c00103fe:	75 06                	jne    c0010406 <sendKeyboardToken(KeyboardToken)+0x2a0>
c0010400:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0010406:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010409:	66 3d 1a 03          	cmp    ax,0x31a
c001040d:	75 06                	jne    c0010415 <sendKeyboardToken(KeyboardToken)+0x2af>
c001040f:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0010415:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0010419:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001041c:	83 f0 01             	xor    eax,0x1
c001041f:	84 c0                	test   al,al
c0010421:	74 77                	je     c001049a <sendKeyboardToken(KeyboardToken)+0x334>
c0010423:	a0 81 8e 02 c0       	mov    al,ds:0xc0028e81
c0010428:	84 c0                	test   al,al
c001042a:	74 41                	je     c001046d <sendKeyboardToken(KeyboardToken)+0x307>
c001042c:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0010430:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0010434:	74 2b                	je     c0010461 <sendKeyboardToken(KeyboardToken)+0x2fb>
c0010436:	8b 15 84 91 02 c0    	mov    edx,DWORD PTR ds:0xc0029184
c001043c:	89 d0                	mov    eax,edx
c001043e:	c1 e0 02             	shl    eax,0x2
c0010441:	01 d0                	add    eax,edx
c0010443:	01 c0                	add    eax,eax
c0010445:	a3 84 91 02 c0       	mov    ds:0xc0029184,eax
c001044a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001044d:	0f b7 c0             	movzx  eax,ax
c0010450:	8d 50 d0             	lea    edx,[eax-0x30]
c0010453:	a1 84 91 02 c0       	mov    eax,ds:0xc0029184
c0010458:	01 d0                	add    eax,edx
c001045a:	a3 84 91 02 c0       	mov    ds:0xc0029184,eax
c001045f:	eb 6d                	jmp    c00104ce <sendKeyboardToken(KeyboardToken)+0x368>
c0010461:	c7 05 84 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029184,0x0
c001046b:	eb 61                	jmp    c00104ce <sendKeyboardToken(KeyboardToken)+0x368>
c001046d:	a1 84 91 02 c0       	mov    eax,ds:0xc0029184
c0010472:	85 c0                	test   eax,eax
c0010474:	74 18                	je     c001048e <sendKeyboardToken(KeyboardToken)+0x328>
c0010476:	a1 84 91 02 c0       	mov    eax,ds:0xc0029184
c001047b:	0f b6 c0             	movzx  eax,al
c001047e:	83 ec 0c             	sub    esp,0xc
c0010481:	50                   	push   eax
c0010482:	e8 21 fc ff ff       	call   c00100a8 <sendKeyToTerminal(unsigned char)>
c0010487:	83 c4 10             	add    esp,0x10
c001048a:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001048e:	c7 05 84 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029184,0x0
c0010498:	eb 34                	jmp    c00104ce <sendKeyboardToken(KeyboardToken)+0x368>
c001049a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001049d:	66 3d 01 01          	cmp    ax,0x101
c00104a1:	75 2b                	jne    c00104ce <sendKeyboardToken(KeyboardToken)+0x368>
c00104a3:	a1 84 91 02 c0       	mov    eax,ds:0xc0029184
c00104a8:	85 c0                	test   eax,eax
c00104aa:	74 18                	je     c00104c4 <sendKeyboardToken(KeyboardToken)+0x35e>
c00104ac:	a1 84 91 02 c0       	mov    eax,ds:0xc0029184
c00104b1:	0f b6 c0             	movzx  eax,al
c00104b4:	83 ec 0c             	sub    esp,0xc
c00104b7:	50                   	push   eax
c00104b8:	e8 eb fb ff ff       	call   c00100a8 <sendKeyToTerminal(unsigned char)>
c00104bd:	83 c4 10             	add    esp,0x10
c00104c0:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00104c4:	c7 05 84 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029184,0x0
c00104ce:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00104d1:	83 f0 01             	xor    eax,0x1
c00104d4:	84 c0                	test   al,al
c00104d6:	74 4c                	je     c0010524 <sendKeyboardToken(KeyboardToken)+0x3be>
c00104d8:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00104db:	83 f0 01             	xor    eax,0x1
c00104de:	84 c0                	test   al,al
c00104e0:	74 42                	je     c0010524 <sendKeyboardToken(KeyboardToken)+0x3be>
c00104e2:	a0 80 8e 02 c0       	mov    al,ds:0xc0028e80
c00104e7:	83 f0 01             	xor    eax,0x1
c00104ea:	84 c0                	test   al,al
c00104ec:	74 36                	je     c0010524 <sendKeyboardToken(KeyboardToken)+0x3be>
c00104ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00104f1:	66 83 f8 1f          	cmp    ax,0x1f
c00104f5:	76 09                	jbe    c0010500 <sendKeyboardToken(KeyboardToken)+0x39a>
c00104f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00104fa:	66 83 f8 7e          	cmp    ax,0x7e
c00104fe:	76 12                	jbe    c0010512 <sendKeyboardToken(KeyboardToken)+0x3ac>
c0010500:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010503:	66 83 f8 0a          	cmp    ax,0xa
c0010507:	74 09                	je     c0010512 <sendKeyboardToken(KeyboardToken)+0x3ac>
c0010509:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001050c:	66 83 f8 08          	cmp    ax,0x8
c0010510:	75 12                	jne    c0010524 <sendKeyboardToken(KeyboardToken)+0x3be>
c0010512:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010515:	0f b6 c0             	movzx  eax,al
c0010518:	83 ec 0c             	sub    esp,0xc
c001051b:	50                   	push   eax
c001051c:	e8 87 fb ff ff       	call   c00100a8 <sendKeyToTerminal(unsigned char)>
c0010521:	83 c4 10             	add    esp,0x10
c0010524:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0010527:	83 f0 01             	xor    eax,0x1
c001052a:	84 c0                	test   al,al
c001052c:	74 4f                	je     c001057d <sendKeyboardToken(KeyboardToken)+0x417>
c001052e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0010531:	83 f0 01             	xor    eax,0x1
c0010534:	84 c0                	test   al,al
c0010536:	74 45                	je     c001057d <sendKeyboardToken(KeyboardToken)+0x417>
c0010538:	a0 80 8e 02 c0       	mov    al,ds:0xc0028e80
c001053d:	84 c0                	test   al,al
c001053f:	74 3c                	je     c001057d <sendKeyboardToken(KeyboardToken)+0x417>
c0010541:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010544:	66 83 f8 3f          	cmp    ax,0x3f
c0010548:	76 33                	jbe    c001057d <sendKeyboardToken(KeyboardToken)+0x417>
c001054a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001054d:	66 83 f8 7f          	cmp    ax,0x7f
c0010551:	77 2a                	ja     c001057d <sendKeyboardToken(KeyboardToken)+0x417>
c0010553:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010556:	88 c2                	mov    dl,al
c0010558:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001055b:	66 83 f8 5f          	cmp    ax,0x5f
c001055f:	76 04                	jbe    c0010565 <sendKeyboardToken(KeyboardToken)+0x3ff>
c0010561:	b0 20                	mov    al,0x20
c0010563:	eb 02                	jmp    c0010567 <sendKeyboardToken(KeyboardToken)+0x401>
c0010565:	b0 00                	mov    al,0x0
c0010567:	29 c2                	sub    edx,eax
c0010569:	88 d0                	mov    al,dl
c001056b:	83 e8 40             	sub    eax,0x40
c001056e:	0f b6 c0             	movzx  eax,al
c0010571:	83 ec 0c             	sub    esp,0xc
c0010574:	50                   	push   eax
c0010575:	e8 2e fb ff ff       	call   c00100a8 <sendKeyToTerminal(unsigned char)>
c001057a:	83 c4 10             	add    esp,0x10
c001057d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010580:	66 3d 00 03          	cmp    ax,0x300
c0010584:	75 0f                	jne    c0010595 <sendKeyboardToken(KeyboardToken)+0x42f>
c0010586:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0010589:	83 f0 01             	xor    eax,0x1
c001058c:	84 c0                	test   al,al
c001058e:	74 05                	je     c0010595 <sendKeyboardToken(KeyboardToken)+0x42f>
c0010590:	e8 a2 a9 ff ff       	call   c000af37 <doTerminalCycle()>
c0010595:	90                   	nop
c0010596:	c9                   	leave  
c0010597:	c3                   	ret    

c0010598 <clearInternalKeybuffer(VgaText*)>:
c0010598:	55                   	push   ebp
c0010599:	89 e5                	mov    ebp,esp
c001059b:	83 ec 08             	sub    esp,0x8
c001059e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00105a1:	05 32 01 00 00       	add    eax,0x132
c00105a6:	83 ec 0c             	sub    esp,0xc
c00105a9:	50                   	push   eax
c00105aa:	e8 01 01 ff ff       	call   c00006b0 <strlen>
c00105af:	83 c4 10             	add    esp,0x10
c00105b2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00105b5:	81 c2 32 01 00 00    	add    edx,0x132
c00105bb:	83 ec 04             	sub    esp,0x4
c00105be:	50                   	push   eax
c00105bf:	6a 00                	push   0x0
c00105c1:	52                   	push   edx
c00105c2:	e8 cd 00 ff ff       	call   c0000694 <memset>
c00105c7:	83 c4 10             	add    esp,0x10
c00105ca:	90                   	nop
c00105cb:	c9                   	leave  
c00105cc:	c3                   	ret    

c00105cd <readKeyboard(VgaText*, char*, unsigned long)>:
c00105cd:	55                   	push   ebp
c00105ce:	89 e5                	mov    ebp,esp
c00105d0:	83 ec 18             	sub    esp,0x18
c00105d3:	a1 68 8d 02 c0       	mov    eax,ds:0xc0028d68
c00105d8:	85 c0                	test   eax,eax
c00105da:	74 2a                	je     c0010606 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c00105dc:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c00105e2:	8b 0d 68 8d 02 c0    	mov    ecx,DWORD PTR ds:0xc0028d68
c00105e8:	83 ec 04             	sub    esp,0x4
c00105eb:	68 80 8d 02 c0       	push   0xc0028d80
c00105f0:	83 ec 08             	sub    esp,0x8
c00105f3:	89 e2                	mov    edx,esp
c00105f5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00105f8:	89 02                	mov    DWORD PTR [edx],eax
c00105fa:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00105fd:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0010601:	ff d1                	call   ecx
c0010603:	83 c4 10             	add    esp,0x10
c0010606:	fb                   	sti    
c0010607:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c001060e:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0010612:	0f 84 a1 00 00 00    	je     c00106b9 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c0010618:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001061b:	8a 80 32 01 00 00    	mov    al,BYTE PTR [eax+0x132]
c0010621:	84 c0                	test   al,al
c0010623:	75 28                	jne    c001064d <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c0010625:	fa                   	cli    
c0010626:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c001062b:	40                   	inc    eax
c001062c:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c0010631:	e8 1e 89 00 00       	call   c0018f54 <schedule()>
c0010636:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c001063b:	48                   	dec    eax
c001063c:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c0010641:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c0010646:	85 c0                	test   eax,eax
c0010648:	75 ce                	jne    c0010618 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c001064a:	fb                   	sti    
c001064b:	eb cb                	jmp    c0010618 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c001064d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0010650:	8d 50 01             	lea    edx,[eax+0x1]
c0010653:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0010656:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0010659:	8a 92 32 01 00 00    	mov    dl,BYTE PTR [edx+0x132]
c001065f:	88 10                	mov    BYTE PTR [eax],dl
c0010661:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010664:	8a 80 32 01 00 00    	mov    al,BYTE PTR [eax+0x132]
c001066a:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001066d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010670:	05 32 01 00 00       	add    eax,0x132
c0010675:	83 ec 0c             	sub    esp,0xc
c0010678:	50                   	push   eax
c0010679:	e8 32 00 ff ff       	call   c00006b0 <strlen>
c001067e:	83 c4 10             	add    esp,0x10
c0010681:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0010684:	81 c2 32 01 00 00    	add    edx,0x132
c001068a:	8d 4a 01             	lea    ecx,[edx+0x1]
c001068d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0010690:	81 c2 32 01 00 00    	add    edx,0x132
c0010696:	83 ec 04             	sub    esp,0x4
c0010699:	50                   	push   eax
c001069a:	51                   	push   ecx
c001069b:	52                   	push   edx
c001069c:	e8 2b ff fe ff       	call   c00005cc <memmove>
c00106a1:	83 c4 10             	add    esp,0x10
c00106a4:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00106a7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00106aa:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00106ae:	0f 85 5a ff ff ff    	jne    c001060e <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c00106b4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00106b7:	eb 03                	jmp    c00106bc <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c00106b9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00106bc:	c9                   	leave  
c00106bd:	c3                   	ret    

c00106be <Keyboard::Keyboard(char const*)>:
c00106be:	83 ec 0c             	sub    esp,0xc
c00106c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106c5:	83 ec 08             	sub    esp,0x8
c00106c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106cc:	50                   	push   eax
c00106cd:	e8 bc e1 ff ff       	call   c000e88e <Device::Device(char const*)>
c00106d2:	83 c4 10             	add    esp,0x10
c00106d5:	ba f8 5a 02 c0       	mov    edx,0xc0025af8
c00106da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106de:	89 10                	mov    DWORD PTR [eax],edx
c00106e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106e4:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00106ee:	c6 05 64 8d 02 c0 01 	mov    BYTE PTR ds:0xc0028d64,0x1
c00106f5:	90                   	nop
c00106f6:	83 c4 0c             	add    esp,0xc
c00106f9:	c3                   	ret    

c00106fa <Keyboard::~Keyboard()>:
c00106fa:	83 ec 0c             	sub    esp,0xc
c00106fd:	ba f8 5a 02 c0       	mov    edx,0xc0025af8
c0010702:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010706:	89 10                	mov    DWORD PTR [eax],edx
c0010708:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001070c:	83 ec 0c             	sub    esp,0xc
c001070f:	50                   	push   eax
c0010710:	e8 43 de ff ff       	call   c000e558 <Device::~Device()>
c0010715:	83 c4 10             	add    esp,0x10
c0010718:	90                   	nop
c0010719:	83 c4 0c             	add    esp,0xc
c001071c:	c3                   	ret    
c001071d:	90                   	nop

c001071e <Keyboard::~Keyboard()>:
c001071e:	83 ec 0c             	sub    esp,0xc
c0010721:	83 ec 0c             	sub    esp,0xc
c0010724:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010728:	e8 cd ff ff ff       	call   c00106fa <Keyboard::~Keyboard()>
c001072d:	83 c4 10             	add    esp,0x10
c0010730:	83 ec 08             	sub    esp,0x8
c0010733:	68 5c 01 00 00       	push   0x15c
c0010738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001073c:	e8 f5 c8 ff ff       	call   c000d036 <operator delete(void*, unsigned long)>
c0010741:	83 c4 10             	add    esp,0x10
c0010744:	83 c4 0c             	add    esp,0xc
c0010747:	c3                   	ret    

c0010748 <LogicalDisk::close(int, int, void*)>:
c0010748:	83 c8 ff             	or     eax,0xffffffff
c001074b:	c3                   	ret    

c001074c <LogicalDisk::~LogicalDisk()>:
c001074c:	83 ec 0c             	sub    esp,0xc
c001074f:	ba c8 5b 02 c0       	mov    edx,0xc0025bc8
c0010754:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010758:	89 10                	mov    DWORD PTR [eax],edx
c001075a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001075e:	83 ec 0c             	sub    esp,0xc
c0010761:	50                   	push   eax
c0010762:	e8 f1 dd ff ff       	call   c000e558 <Device::~Device()>
c0010767:	83 c4 10             	add    esp,0x10
c001076a:	90                   	nop
c001076b:	83 c4 0c             	add    esp,0xc
c001076e:	c3                   	ret    
c001076f:	90                   	nop

c0010770 <LogicalDisk::~LogicalDisk()>:
c0010770:	83 ec 0c             	sub    esp,0xc
c0010773:	83 ec 0c             	sub    esp,0xc
c0010776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001077a:	e8 cd ff ff ff       	call   c001074c <LogicalDisk::~LogicalDisk()>
c001077f:	83 c4 10             	add    esp,0x10
c0010782:	83 ec 08             	sub    esp,0x8
c0010785:	68 74 01 00 00       	push   0x174
c001078a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001078e:	e8 a3 c8 ff ff       	call   c000d036 <operator delete(void*, unsigned long)>
c0010793:	83 c4 10             	add    esp,0x10
c0010796:	83 c4 0c             	add    esp,0xc
c0010799:	c3                   	ret    

c001079a <LogicalDisk::open(int, int, void*)>:
c001079a:	83 ec 18             	sub    esp,0x18
c001079d:	68 24 5b 02 c0       	push   0xc0025b24
c00107a2:	e8 52 4a 00 00       	call   c00151f9 <Krnl::panic(char const*)>
c00107a7:	83 c8 ff             	or     eax,0xffffffff
c00107aa:	83 c4 1c             	add    esp,0x1c
c00107ad:	c3                   	ret    

c00107ae <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00107ae:	53                   	push   ebx
c00107af:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00107b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00107b7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00107bb:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00107c1:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00107c7:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00107cd:	77 10                	ja     c00107df <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00107cf:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00107d5:	89 d3                	mov    ebx,edx
c00107d7:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00107dd:	72 05                	jb     c00107e4 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00107df:	83 c8 ff             	or     eax,0xffffffff
c00107e2:	89 c2                	mov    edx,eax
c00107e4:	5b                   	pop    ebx
c00107e5:	c3                   	ret    

c00107e6 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00107e6:	56                   	push   esi
c00107e7:	83 c8 ff             	or     eax,0xffffffff
c00107ea:	53                   	push   ebx
c00107eb:	89 c2                	mov    edx,eax
c00107ed:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00107f1:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00107f5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00107f9:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00107ff:	77 27                	ja     c0010828 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0010801:	89 d8                	mov    eax,ebx
c0010803:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0010809:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c001080f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010814:	89 c2                	mov    edx,eax
c0010816:	73 10                	jae    c0010828 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0010818:	89 c8                	mov    eax,ecx
c001081a:	89 da                	mov    edx,ebx
c001081c:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0010822:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0010828:	5b                   	pop    ebx
c0010829:	5e                   	pop    esi
c001082a:	c3                   	ret    
c001082b:	90                   	nop

c001082c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c001082c:	83 ec 1c             	sub    esp,0x1c
c001082f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010833:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010837:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001083b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001083f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010843:	89 04 24             	mov    DWORD PTR [esp],eax
c0010846:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001084a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001084e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010852:	83 ec 08             	sub    esp,0x8
c0010855:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010859:	50                   	push   eax
c001085a:	e8 2f e0 ff ff       	call   c000e88e <Device::Device(char const*)>
c001085f:	83 c4 10             	add    esp,0x10
c0010862:	ba c8 5b 02 c0       	mov    edx,0xc0025bc8
c0010867:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001086b:	89 10                	mov    DWORD PTR [eax],edx
c001086d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010871:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0010878:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001087c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0010883:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010887:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0010891:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010895:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010899:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001089d:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00108a3:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00108a9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00108ad:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00108b0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00108b4:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00108ba:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00108c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00108c4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00108c8:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00108ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00108d2:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00108dc:	90                   	nop
c00108dd:	83 c4 1c             	add    esp,0x1c
c00108e0:	c3                   	ret    
c00108e1:	90                   	nop

c00108e2 <LogicalDisk::assignDriveLetter()>:
c00108e2:	55                   	push   ebp
c00108e3:	57                   	push   edi
c00108e4:	56                   	push   esi
c00108e5:	53                   	push   ebx
c00108e6:	83 ec 14             	sub    esp,0x14
c00108e9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00108ed:	8b 3d a0 91 02 c0    	mov    edi,DWORD PTR ds:0xc00291a0
c00108f3:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00108f9:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00108fd:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0010903:	8b 3d a4 91 02 c0    	mov    edi,DWORD PTR ds:0xc00291a4
c0010909:	3c 01                	cmp    al,0x1
c001090b:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001090f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0010913:	19 c0                	sbb    eax,eax
c0010915:	83 e0 02             	and    eax,0x2
c0010918:	83 c0 41             	add    eax,0x41
c001091b:	0f be e8             	movsx  ebp,al
c001091e:	3c 43                	cmp    al,0x43
c0010920:	75 10                	jne    c0010932 <LogicalDisk::assignDriveLetter()+0x50>
c0010922:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0010929:	75 5d                	jne    c0010988 <LogicalDisk::assignDriveLetter()+0xa6>
c001092b:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0010930:	75 56                	jne    c0010988 <LogicalDisk::assignDriveLetter()+0xa6>
c0010932:	8d 75 bf             	lea    esi,[ebp-0x41]
c0010935:	ba 01 00 00 00       	mov    edx,0x1
c001093a:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c001093e:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0010942:	d3 e2                	shl    edx,cl
c0010944:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010948:	89 d7                	mov    edi,edx
c001094a:	89 d6                	mov    esi,edx
c001094c:	c1 ff 1f             	sar    edi,0x1f
c001094f:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0010953:	21 f9                	and    ecx,edi
c0010955:	09 d1                	or     ecx,edx
c0010957:	75 2f                	jne    c0010988 <LogicalDisk::assignDriveLetter()+0xa6>
c0010959:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001095d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010961:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0010967:	09 f2                	or     edx,esi
c0010969:	89 15 a0 91 02 c0    	mov    DWORD PTR ds:0xc00291a0,edx
c001096f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010973:	09 fa                	or     edx,edi
c0010975:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0010979:	89 15 a4 91 02 c0    	mov    DWORD PTR ds:0xc00291a4,edx
c001097f:	89 1c bd c0 91 02 c0 	mov    DWORD PTR [edi*4-0x3ffd6e40],ebx
c0010986:	eb 08                	jmp    c0010990 <LogicalDisk::assignDriveLetter()+0xae>
c0010988:	45                   	inc    ebp
c0010989:	40                   	inc    eax
c001098a:	3c 5b                	cmp    al,0x5b
c001098c:	75 90                	jne    c001091e <LogicalDisk::assignDriveLetter()+0x3c>
c001098e:	31 c0                	xor    eax,eax
c0010990:	83 c4 14             	add    esp,0x14
c0010993:	5b                   	pop    ebx
c0010994:	5e                   	pop    esi
c0010995:	5f                   	pop    edi
c0010996:	5d                   	pop    ebp
c0010997:	c3                   	ret    

c0010998 <LogicalDisk::mount()>:
c0010998:	56                   	push   esi
c0010999:	53                   	push   ebx
c001099a:	83 ec 1c             	sub    esp,0x1c
c001099d:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00109a1:	8b 1d 38 8d 02 c0    	mov    ebx,DWORD PTR ds:0xc0028d38
c00109a7:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00109ae:	50                   	push   eax
c00109af:	68 48 5b 02 c0       	push   0xc0025b48
c00109b4:	e8 5e c7 ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c00109b9:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00109c3:	83 c4 10             	add    esp,0x10
c00109c6:	85 db                	test   ebx,ebx
c00109c8:	74 4e                	je     c0010a18 <LogicalDisk::mount()+0x80>
c00109ca:	83 ec 0c             	sub    esp,0xc
c00109cd:	68 69 5b 02 c0       	push   0xc0025b69
c00109d2:	e8 40 c7 ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c00109d7:	83 c4 0c             	add    esp,0xc
c00109da:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00109e1:	8b 13                	mov    edx,DWORD PTR [ebx]
c00109e3:	83 e8 41             	sub    eax,0x41
c00109e6:	50                   	push   eax
c00109e7:	56                   	push   esi
c00109e8:	53                   	push   ebx
c00109e9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00109ec:	83 c4 10             	add    esp,0x10
c00109ef:	84 c0                	test   al,al
c00109f1:	74 20                	je     c0010a13 <LogicalDisk::mount()+0x7b>
c00109f3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00109f7:	83 ec 0c             	sub    esp,0xc
c00109fa:	68 85 5b 02 c0       	push   0xc0025b85
c00109ff:	e8 13 c7 ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0010a04:	83 c4 10             	add    esp,0x10
c0010a07:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0010a0d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0010a11:	eb 07                	jmp    c0010a1a <LogicalDisk::mount()+0x82>
c0010a13:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010a16:	eb ae                	jmp    c00109c6 <LogicalDisk::mount()+0x2e>
c0010a18:	31 c0                	xor    eax,eax
c0010a1a:	83 c4 14             	add    esp,0x14
c0010a1d:	5b                   	pop    ebx
c0010a1e:	5e                   	pop    esi
c0010a1f:	c3                   	ret    

c0010a20 <LogicalDisk::unmount()>:
c0010a20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a24:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0010a2e:	c3                   	ret    
c0010a2f:	90                   	nop

c0010a30 <LogicalDisk::eject()>:
c0010a30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a34:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0010a3a:	8b 10                	mov    edx,DWORD PTR [eax]
c0010a3c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010a40:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0010a43:	90                   	nop

c0010a44 <LogicalDisk::unassignDriveLetter()>:
c0010a44:	57                   	push   edi
c0010a45:	56                   	push   esi
c0010a46:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010a4a:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0010a51:	84 c9                	test   cl,cl
c0010a53:	75 0f                	jne    c0010a64 <LogicalDisk::unassignDriveLetter()+0x20>
c0010a55:	c7 44 24 0c 9e 5b 02 c0 	mov    DWORD PTR [esp+0xc],0xc0025b9e
c0010a5d:	5e                   	pop    esi
c0010a5e:	5f                   	pop    edi
c0010a5f:	e9 95 47 00 00       	jmp    c00151f9 <Krnl::panic(char const*)>
c0010a64:	83 e9 41             	sub    ecx,0x41
c0010a67:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0010a6e:	b8 01 00 00 00       	mov    eax,0x1
c0010a73:	c7 04 8d c0 91 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd6e40],0x0
c0010a7e:	d3 e0                	shl    eax,cl
c0010a80:	89 c7                	mov    edi,eax
c0010a82:	f7 d0                	not    eax
c0010a84:	c1 ff 1f             	sar    edi,0x1f
c0010a87:	21 05 a0 91 02 c0    	and    DWORD PTR ds:0xc00291a0,eax
c0010a8d:	89 fe                	mov    esi,edi
c0010a8f:	f7 d6                	not    esi
c0010a91:	21 35 a4 91 02 c0    	and    DWORD PTR ds:0xc00291a4,esi
c0010a97:	5e                   	pop    esi
c0010a98:	5f                   	pop    edi
c0010a99:	c3                   	ret    

c0010a9a <LogicalDisk::read(unsigned long long, int, void*)>:
c0010a9a:	57                   	push   edi
c0010a9b:	56                   	push   esi
c0010a9c:	53                   	push   ebx
c0010a9d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010aa1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010aa5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010aa9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010aad:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0010ab3:	77 41                	ja     c0010af6 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0010ab5:	99                   	cdq    
c0010ab6:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0010abc:	01 c8                	add    eax,ecx
c0010abe:	11 da                	adc    edx,ebx
c0010ac0:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0010ac6:	19 d7                	sbb    edi,edx
c0010ac8:	72 33                	jb     c0010afd <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0010aca:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0010ad0:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0010ad6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010ada:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0010ade:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0010ae4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010aea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010aee:	5b                   	pop    ebx
c0010aef:	5e                   	pop    esi
c0010af0:	5f                   	pop    edi
c0010af1:	e9 f4 0a 00 00       	jmp    c00115ea <VCache::read(unsigned long long, int, void*)>
c0010af6:	b8 05 00 00 00       	mov    eax,0x5
c0010afb:	eb 05                	jmp    c0010b02 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0010afd:	b8 07 00 00 00       	mov    eax,0x7
c0010b02:	5b                   	pop    ebx
c0010b03:	5e                   	pop    esi
c0010b04:	5f                   	pop    edi
c0010b05:	c3                   	ret    

c0010b06 <LogicalDisk::write(unsigned long long, int, void*)>:
c0010b06:	57                   	push   edi
c0010b07:	56                   	push   esi
c0010b08:	53                   	push   ebx
c0010b09:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010b0d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010b11:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010b15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010b19:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0010b1f:	77 41                	ja     c0010b62 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0010b21:	99                   	cdq    
c0010b22:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0010b28:	01 c8                	add    eax,ecx
c0010b2a:	11 da                	adc    edx,ebx
c0010b2c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0010b32:	19 d7                	sbb    edi,edx
c0010b34:	72 33                	jb     c0010b69 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0010b36:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0010b3c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0010b42:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010b46:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0010b4a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0010b50:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010b56:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010b5a:	5b                   	pop    ebx
c0010b5b:	5e                   	pop    esi
c0010b5c:	5f                   	pop    edi
c0010b5d:	e9 8e 09 00 00       	jmp    c00114f0 <VCache::write(unsigned long long, int, void*)>
c0010b62:	b8 05 00 00 00       	mov    eax,0x5
c0010b67:	eb 05                	jmp    c0010b6e <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0010b69:	b8 07 00 00 00       	mov    eax,0x7
c0010b6e:	5b                   	pop    ebx
c0010b6f:	5e                   	pop    esi
c0010b70:	5f                   	pop    edi
c0010b71:	c3                   	ret    
c0010b72:	66 90                	xchg   ax,ax

c0010b74 <Mouse::Mouse(char const*)>:
c0010b74:	83 ec 0c             	sub    esp,0xc
c0010b77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b7b:	83 ec 08             	sub    esp,0x8
c0010b7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b82:	50                   	push   eax
c0010b83:	e8 06 dd ff ff       	call   c000e88e <Device::Device(char const*)>
c0010b88:	83 c4 10             	add    esp,0x10
c0010b8b:	ba f4 5b 02 c0       	mov    edx,0xc0025bf4
c0010b90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b94:	89 10                	mov    DWORD PTR [eax],edx
c0010b96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b9a:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0010ba4:	90                   	nop
c0010ba5:	83 c4 0c             	add    esp,0xc
c0010ba8:	c3                   	ret    
c0010ba9:	90                   	nop
c0010baa:	66 90                	xchg   ax,ax

c0010bac <Mouse::~Mouse()>:
c0010bac:	83 ec 0c             	sub    esp,0xc
c0010baf:	ba f4 5b 02 c0       	mov    edx,0xc0025bf4
c0010bb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bb8:	89 10                	mov    DWORD PTR [eax],edx
c0010bba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bbe:	83 ec 0c             	sub    esp,0xc
c0010bc1:	50                   	push   eax
c0010bc2:	e8 91 d9 ff ff       	call   c000e558 <Device::~Device()>
c0010bc7:	83 c4 10             	add    esp,0x10
c0010bca:	90                   	nop
c0010bcb:	83 c4 0c             	add    esp,0xc
c0010bce:	c3                   	ret    
c0010bcf:	90                   	nop

c0010bd0 <Mouse::~Mouse()>:
c0010bd0:	83 ec 0c             	sub    esp,0xc
c0010bd3:	83 ec 0c             	sub    esp,0xc
c0010bd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bda:	e8 cd ff ff ff       	call   c0010bac <Mouse::~Mouse()>
c0010bdf:	83 c4 10             	add    esp,0x10
c0010be2:	83 ec 08             	sub    esp,0x8
c0010be5:	68 58 01 00 00       	push   0x158
c0010bea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bee:	e8 43 c4 ff ff       	call   c000d036 <operator delete(void*, unsigned long)>
c0010bf3:	83 c4 10             	add    esp,0x10
c0010bf6:	83 c4 0c             	add    esp,0xc
c0010bf9:	c3                   	ret    

c0010bfa <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0010bfa:	55                   	push   ebp
c0010bfb:	57                   	push   edi
c0010bfc:	56                   	push   esi
c0010bfd:	53                   	push   ebx
c0010bfe:	81 ec 28 01 00 00    	sub    esp,0x128
c0010c04:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0010c0b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0010c12:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0010c19:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0010c20:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010c24:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0010c28:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0010c2f:	e8 56 dd ff ff       	call   c000e98a <Device::getName()>
c0010c34:	5a                   	pop    edx
c0010c35:	59                   	pop    ecx
c0010c36:	50                   	push   eax
c0010c37:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0010c3b:	55                   	push   ebp
c0010c3c:	e8 0f fb fe ff       	call   c0000750 <strcpy>
c0010c41:	5b                   	pop    ebx
c0010c42:	58                   	pop    eax
c0010c43:	68 18 5c 02 c0       	push   0xc0025c18
c0010c48:	55                   	push   ebp
c0010c49:	e8 42 fc fe ff       	call   c0000890 <strcat>
c0010c4e:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0010c55:	e8 8d 91 ff ff       	call   c0009de7 <malloc>
c0010c5a:	83 c4 0c             	add    esp,0xc
c0010c5d:	89 c3                	mov    ebx,eax
c0010c5f:	57                   	push   edi
c0010c60:	56                   	push   esi
c0010c61:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010c65:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010c69:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0010c70:	55                   	push   ebp
c0010c71:	50                   	push   eax
c0010c72:	e8 b5 fb ff ff       	call   c001082c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0010c77:	83 c4 14             	add    esp,0x14
c0010c7a:	53                   	push   ebx
c0010c7b:	e8 62 fc ff ff       	call   c00108e2 <LogicalDisk::assignDriveLetter()>
c0010c80:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c83:	e8 10 fd ff ff       	call   c0010998 <LogicalDisk::mount()>
c0010c88:	58                   	pop    eax
c0010c89:	5a                   	pop    edx
c0010c8a:	53                   	push   ebx
c0010c8b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0010c92:	e8 f3 d9 ff ff       	call   c000e68a <Device::addChild(Device*)>
c0010c97:	81 c4 2c 01 00 00    	add    esp,0x12c
c0010c9d:	5b                   	pop    ebx
c0010c9e:	5e                   	pop    esi
c0010c9f:	5f                   	pop    edi
c0010ca0:	5d                   	pop    ebp
c0010ca1:	c3                   	ret    

c0010ca2 <createPartitionsForDisk(PhysicalDisk*)>:
c0010ca2:	55                   	push   ebp
c0010ca3:	57                   	push   edi
c0010ca4:	56                   	push   esi
c0010ca5:	53                   	push   ebx
c0010ca6:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0010cac:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0010cb3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0010cb9:	3d 00 02 00 00       	cmp    eax,0x200
c0010cbe:	74 27                	je     c0010ce7 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0010cc0:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0010cc6:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0010ccc:	83 ec 10             	sub    esp,0x10
c0010ccf:	0f a4 f7 0a          	shld   edi,esi,0xa
c0010cd3:	99                   	cdq    
c0010cd4:	c1 e6 0a             	shl    esi,0xa
c0010cd7:	52                   	push   edx
c0010cd8:	89 fd                	mov    ebp,edi
c0010cda:	50                   	push   eax
c0010cdb:	55                   	push   ebp
c0010cdc:	56                   	push   esi
c0010cdd:	e8 fe 22 01 00       	call   c0022fe0 <__udivdi3>
c0010ce2:	e9 b1 00 00 00       	jmp    c0010d98 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0010ce7:	83 ec 0c             	sub    esp,0xc
c0010cea:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010cec:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0010cf0:	56                   	push   esi
c0010cf1:	6a 01                	push   0x1
c0010cf3:	6a 00                	push   0x0
c0010cf5:	6a 00                	push   0x0
c0010cf7:	53                   	push   ebx
c0010cf8:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0010cfb:	83 c4 20             	add    esp,0x20
c0010cfe:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0010d06:	75 0a                	jne    c0010d12 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0010d08:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0010d10:	74 2c                	je     c0010d3e <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0010d12:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010d18:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010d1e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010d24:	83 ec 10             	sub    esp,0x10
c0010d27:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010d2b:	89 f7                	mov    edi,esi
c0010d2d:	c1 e0 0a             	shl    eax,0xa
c0010d30:	c1 ff 1f             	sar    edi,0x1f
c0010d33:	57                   	push   edi
c0010d34:	56                   	push   esi
c0010d35:	52                   	push   edx
c0010d36:	50                   	push   eax
c0010d37:	e8 a4 22 01 00       	call   c0022fe0 <__udivdi3>
c0010d3c:	eb 5a                	jmp    c0010d98 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0010d3e:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0010d45:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0010d4c:	83 e1 7f             	and    ecx,0x7f
c0010d4f:	83 e0 7f             	and    eax,0x7f
c0010d52:	01 c1                	add    ecx,eax
c0010d54:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0010d5b:	83 e0 7f             	and    eax,0x7f
c0010d5e:	01 c1                	add    ecx,eax
c0010d60:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0010d67:	83 e0 7f             	and    eax,0x7f
c0010d6a:	00 c1                	add    cl,al
c0010d6c:	74 41                	je     c0010daf <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0010d6e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010d74:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010d7a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010d80:	83 ec 10             	sub    esp,0x10
c0010d83:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010d87:	89 f7                	mov    edi,esi
c0010d89:	c1 e0 0a             	shl    eax,0xa
c0010d8c:	c1 ff 1f             	sar    edi,0x1f
c0010d8f:	57                   	push   edi
c0010d90:	56                   	push   esi
c0010d91:	52                   	push   edx
c0010d92:	50                   	push   eax
c0010d93:	e8 48 22 01 00       	call   c0022fe0 <__udivdi3>
c0010d98:	83 c4 14             	add    esp,0x14
c0010d9b:	52                   	push   edx
c0010d9c:	50                   	push   eax
c0010d9d:	6a 00                	push   0x0
c0010d9f:	6a 00                	push   0x0
c0010da1:	53                   	push   ebx
c0010da2:	e8 53 fe ff ff       	call   c0010bfa <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0010da7:	83 c4 20             	add    esp,0x20
c0010daa:	e9 79 01 00 00       	jmp    c0010f28 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0010daf:	89 f0                	mov    eax,esi
c0010db1:	31 f6                	xor    esi,esi
c0010db3:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0010dba:	75 02                	jne    c0010dbe <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0010dbc:	89 f1                	mov    ecx,esi
c0010dbe:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0010dc5:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0010dcc:	c1 e2 08             	shl    edx,0x8
c0010dcf:	c1 e7 10             	shl    edi,0x10
c0010dd2:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0010dda:	09 fa                	or     edx,edi
c0010ddc:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0010de4:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0010deb:	83 c0 10             	add    eax,0x10
c0010dee:	09 fa                	or     edx,edi
c0010df0:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0010df7:	c1 e7 18             	shl    edi,0x18
c0010dfa:	09 fa                	or     edx,edi
c0010dfc:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0010e03:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0010e07:	c1 e7 10             	shl    edi,0x10
c0010e0a:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0010e11:	c1 e2 08             	shl    edx,0x8
c0010e14:	09 fa                	or     edx,edi
c0010e16:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0010e1d:	09 fa                	or     edx,edi
c0010e1f:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0010e26:	c1 e7 18             	shl    edi,0x18
c0010e29:	09 fa                	or     edx,edi
c0010e2b:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0010e2f:	46                   	inc    esi
c0010e30:	83 fe 04             	cmp    esi,0x4
c0010e33:	0f 85 7a ff ff ff    	jne    c0010db3 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0010e39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e3d:	83 f0 01             	xor    eax,0x1
c0010e40:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010e44:	75 57                	jne    c0010e9d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0010e46:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010e4a:	83 f0 01             	xor    eax,0x1
c0010e4d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0010e51:	75 4a                	jne    c0010e9d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0010e53:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010e57:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0010e5f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010e67:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010e6d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010e73:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010e79:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010e7d:	89 f7                	mov    edi,esi
c0010e7f:	c1 e0 0a             	shl    eax,0xa
c0010e82:	c1 ff 1f             	sar    edi,0x1f
c0010e85:	57                   	push   edi
c0010e86:	56                   	push   esi
c0010e87:	52                   	push   edx
c0010e88:	50                   	push   eax
c0010e89:	e8 52 21 01 00       	call   c0022fe0 <__udivdi3>
c0010e8e:	83 c4 10             	add    esp,0x10
c0010e91:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010e95:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0010e99:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010e9d:	84 c9                	test   cl,cl
c0010e9f:	74 53                	je     c0010ef4 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0010ea1:	0f b6 c9             	movzx  ecx,cl
c0010ea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ea8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010eac:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010eb0:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010eb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010eb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010ebc:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0010ec0:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0010ec4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010ec8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0010ecc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010ed0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010ed4:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0010ed8:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0010edc:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0010ee0:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0010ee4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010ee8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0010eec:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0010ef0:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0010ef4:	31 ed                	xor    ebp,ebp
c0010ef6:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0010efa:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0010efe:	89 f8                	mov    eax,edi
c0010f00:	09 f0                	or     eax,esi
c0010f02:	74 1e                	je     c0010f22 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0010f04:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0010f08:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0010f0c:	89 d1                	mov    ecx,edx
c0010f0e:	09 c1                	or     ecx,eax
c0010f10:	74 10                	je     c0010f22 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0010f12:	83 ec 0c             	sub    esp,0xc
c0010f15:	57                   	push   edi
c0010f16:	56                   	push   esi
c0010f17:	52                   	push   edx
c0010f18:	50                   	push   eax
c0010f19:	53                   	push   ebx
c0010f1a:	e8 db fc ff ff       	call   c0010bfa <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0010f1f:	83 c4 20             	add    esp,0x20
c0010f22:	45                   	inc    ebp
c0010f23:	83 fd 04             	cmp    ebp,0x4
c0010f26:	75 ce                	jne    c0010ef6 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0010f28:	81 c4 5c 02 00 00    	add    esp,0x25c
c0010f2e:	5b                   	pop    ebx
c0010f2f:	5e                   	pop    esi
c0010f30:	5f                   	pop    edi
c0010f31:	5d                   	pop    ebp
c0010f32:	c3                   	ret    
c0010f33:	90                   	nop

c0010f34 <Serial::Serial(char const*)>:
c0010f34:	83 ec 0c             	sub    esp,0xc
c0010f37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f3b:	83 ec 08             	sub    esp,0x8
c0010f3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f42:	50                   	push   eax
c0010f43:	e8 46 d9 ff ff       	call   c000e88e <Device::Device(char const*)>
c0010f48:	83 c4 10             	add    esp,0x10
c0010f4b:	ba 2c 5c 02 c0       	mov    edx,0xc0025c2c
c0010f50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f54:	89 10                	mov    DWORD PTR [eax],edx
c0010f56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f5a:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0010f64:	90                   	nop
c0010f65:	83 c4 0c             	add    esp,0xc
c0010f68:	c3                   	ret    
c0010f69:	90                   	nop
c0010f6a:	66 90                	xchg   ax,ax

c0010f6c <Serial::~Serial()>:
c0010f6c:	83 ec 0c             	sub    esp,0xc
c0010f6f:	ba 2c 5c 02 c0       	mov    edx,0xc0025c2c
c0010f74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f78:	89 10                	mov    DWORD PTR [eax],edx
c0010f7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f7e:	83 ec 0c             	sub    esp,0xc
c0010f81:	50                   	push   eax
c0010f82:	e8 d1 d5 ff ff       	call   c000e558 <Device::~Device()>
c0010f87:	83 c4 10             	add    esp,0x10
c0010f8a:	90                   	nop
c0010f8b:	83 c4 0c             	add    esp,0xc
c0010f8e:	c3                   	ret    
c0010f8f:	90                   	nop

c0010f90 <Serial::~Serial()>:
c0010f90:	83 ec 0c             	sub    esp,0xc
c0010f93:	83 ec 0c             	sub    esp,0xc
c0010f96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f9a:	e8 cd ff ff ff       	call   c0010f6c <Serial::~Serial()>
c0010f9f:	83 c4 10             	add    esp,0x10
c0010fa2:	83 ec 08             	sub    esp,0x8
c0010fa5:	68 58 01 00 00       	push   0x158
c0010faa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fae:	e8 83 c0 ff ff       	call   c000d036 <operator delete(void*, unsigned long)>
c0010fb3:	83 c4 10             	add    esp,0x10
c0010fb6:	83 c4 0c             	add    esp,0xc
c0010fb9:	c3                   	ret    
c0010fba:	66 90                	xchg   ax,ax

c0010fbc <Timer::Timer(char const*)>:
c0010fbc:	83 ec 0c             	sub    esp,0xc
c0010fbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fc3:	83 ec 08             	sub    esp,0x8
c0010fc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fca:	50                   	push   eax
c0010fcb:	e8 be d8 ff ff       	call   c000e88e <Device::Device(char const*)>
c0010fd0:	83 c4 10             	add    esp,0x10
c0010fd3:	ba 70 5c 02 c0       	mov    edx,0xc0025c70
c0010fd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fdc:	89 10                	mov    DWORD PTR [eax],edx
c0010fde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fe2:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0010fec:	90                   	nop
c0010fed:	83 c4 0c             	add    esp,0xc
c0010ff0:	c3                   	ret    
c0010ff1:	90                   	nop
c0010ff2:	66 90                	xchg   ax,ax

c0010ff4 <Timer::~Timer()>:
c0010ff4:	83 ec 0c             	sub    esp,0xc
c0010ff7:	ba 70 5c 02 c0       	mov    edx,0xc0025c70
c0010ffc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011000:	89 10                	mov    DWORD PTR [eax],edx
c0011002:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011006:	83 ec 0c             	sub    esp,0xc
c0011009:	50                   	push   eax
c001100a:	e8 49 d5 ff ff       	call   c000e558 <Device::~Device()>
c001100f:	83 c4 10             	add    esp,0x10
c0011012:	90                   	nop
c0011013:	83 c4 0c             	add    esp,0xc
c0011016:	c3                   	ret    
c0011017:	90                   	nop

c0011018 <Timer::~Timer()>:
c0011018:	83 ec 0c             	sub    esp,0xc
c001101b:	83 ec 0c             	sub    esp,0xc
c001101e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011022:	e8 cd ff ff ff       	call   c0010ff4 <Timer::~Timer()>
c0011027:	83 c4 10             	add    esp,0x10
c001102a:	83 ec 08             	sub    esp,0x8
c001102d:	68 5c 01 00 00       	push   0x15c
c0011032:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011036:	e8 fb bf ff ff       	call   c000d036 <operator delete(void*, unsigned long)>
c001103b:	83 c4 10             	add    esp,0x10
c001103e:	83 c4 0c             	add    esp,0xc
c0011041:	c3                   	ret    

c0011042 <Timer::read()>:
c0011042:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011046:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001104c:	c3                   	ret    

c001104d <timerHandler(unsigned int)>:
c001104d:	56                   	push   esi
c001104e:	53                   	push   ebx
c001104f:	51                   	push   ecx
c0011050:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011054:	01 05 2c 92 02 c0    	add    DWORD PTR ds:0xc002922c,eax
c001105a:	80 3d 0d 8c 02 c0 00 	cmp    BYTE PTR ds:0xc0028c0d,0x0
c0011061:	0f 84 49 01 00 00    	je     c00111b0 <timerHandler(unsigned int)+0x163>
c0011067:	fa                   	cli    
c0011068:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c001106e:	83 ec 0c             	sub    esp,0xc
c0011071:	ff 05 24 a1 02 c0    	inc    DWORD PTR ds:0xc002a124
c0011077:	68 38 a1 02 c0       	push   0xc002a138
c001107c:	e8 2f 25 01 00       	call   c00235b0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0011081:	83 c4 10             	add    esp,0x10
c0011084:	84 c0                	test   al,al
c0011086:	0f 85 a0 00 00 00    	jne    c001112c <timerHandler(unsigned int)+0xdf>
c001108c:	83 ec 0c             	sub    esp,0xc
c001108f:	68 38 a1 02 c0       	push   0xc002a138
c0011094:	e8 33 25 01 00       	call   c00235cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0011099:	83 c4 10             	add    esp,0x10
c001109c:	89 c6                	mov    esi,eax
c001109e:	66 90                	xchg   ax,ax
c00110a0:	83 ec 0c             	sub    esp,0xc
c00110a3:	68 38 a1 02 c0       	push   0xc002a138
c00110a8:	e8 1f 25 01 00       	call   c00235cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00110ad:	c7 04 24 38 a1 02 c0 	mov    DWORD PTR [esp],0xc002a138
c00110b4:	89 c3                	mov    ebx,eax
c00110b6:	e8 19 25 01 00       	call   c00235d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00110bb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00110be:	83 c4 10             	add    esp,0x10
c00110c1:	3b 05 2c 92 02 c0    	cmp    eax,DWORD PTR ds:0xc002922c
c00110c7:	77 23                	ja     c00110ec <timerHandler(unsigned int)+0x9f>
c00110c9:	83 ec 0c             	sub    esp,0xc
c00110cc:	53                   	push   ebx
c00110cd:	e8 3e 83 00 00       	call   c0019410 <unblockTask(ThreadControlBlock*)>
c00110d2:	83 c4 10             	add    esp,0x10
c00110d5:	39 de                	cmp    esi,ebx
c00110d7:	75 27                	jne    c0011100 <timerHandler(unsigned int)+0xb3>
c00110d9:	83 ec 0c             	sub    esp,0xc
c00110dc:	68 38 a1 02 c0       	push   0xc002a138
c00110e1:	e8 e6 24 01 00       	call   c00235cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00110e6:	89 c6                	mov    esi,eax
c00110e8:	eb 12                	jmp    c00110fc <timerHandler(unsigned int)+0xaf>
c00110ea:	66 90                	xchg   ax,ax
c00110ec:	52                   	push   edx
c00110ed:	52                   	push   edx
c00110ee:	53                   	push   ebx
c00110ef:	68 38 a1 02 c0       	push   0xc002a138
c00110f4:	e8 93 25 01 00       	call   c002368c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00110f9:	8d 76 00             	lea    esi,[esi+0x0]
c00110fc:	83 c4 10             	add    esp,0x10
c00110ff:	90                   	nop
c0011100:	83 ec 0c             	sub    esp,0xc
c0011103:	68 38 a1 02 c0       	push   0xc002a138
c0011108:	e8 a3 24 01 00       	call   c00235b0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001110d:	83 c4 10             	add    esp,0x10
c0011110:	84 c0                	test   al,al
c0011112:	75 18                	jne    c001112c <timerHandler(unsigned int)+0xdf>
c0011114:	83 ec 0c             	sub    esp,0xc
c0011117:	68 38 a1 02 c0       	push   0xc002a138
c001111c:	e8 ab 24 01 00       	call   c00235cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0011121:	83 c4 10             	add    esp,0x10
c0011124:	39 f0                	cmp    eax,esi
c0011126:	0f 85 74 ff ff ff    	jne    c00110a0 <timerHandler(unsigned int)+0x53>
c001112c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011131:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c0011135:	74 41                	je     c0011178 <timerHandler(unsigned int)+0x12b>
c0011137:	80 3d 0c 8c 02 c0 00 	cmp    BYTE PTR ds:0xc0028c0c,0x0
c001113e:	74 38                	je     c0011178 <timerHandler(unsigned int)+0x12b>
c0011140:	fa                   	cli    
c0011141:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c0011147:	a1 2c 92 02 c0       	mov    eax,ds:0xc002922c
c001114c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011152:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c0011155:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001115b:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c001115e:	72 08                	jb     c0011168 <timerHandler(unsigned int)+0x11b>
c0011160:	e8 ef 7d 00 00       	call   c0018f54 <schedule()>
c0011165:	8d 76 00             	lea    esi,[esi+0x0]
c0011168:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c001116d:	48                   	dec    eax
c001116e:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c0011173:	75 03                	jne    c0011178 <timerHandler(unsigned int)+0x12b>
c0011175:	fb                   	sti    
c0011176:	66 90                	xchg   ax,ax
c0011178:	a1 24 a1 02 c0       	mov    eax,ds:0xc002a124
c001117d:	48                   	dec    eax
c001117e:	a3 24 a1 02 c0       	mov    ds:0xc002a124,eax
c0011183:	75 1b                	jne    c00111a0 <timerHandler(unsigned int)+0x153>
c0011185:	83 3d 20 a1 02 c0 00 	cmp    DWORD PTR ds:0xc002a120,0x0
c001118c:	74 12                	je     c00111a0 <timerHandler(unsigned int)+0x153>
c001118e:	c7 05 20 a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a120,0x0
c0011198:	e8 b7 7d 00 00       	call   c0018f54 <schedule()>
c001119d:	8d 76 00             	lea    esi,[esi+0x0]
c00111a0:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c00111a5:	48                   	dec    eax
c00111a6:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c00111ab:	75 03                	jne    c00111b0 <timerHandler(unsigned int)+0x163>
c00111ad:	fb                   	sti    
c00111ae:	66 90                	xchg   ax,ax
c00111b0:	58                   	pop    eax
c00111b1:	5b                   	pop    ebx
c00111b2:	5e                   	pop    esi
c00111b3:	c3                   	ret    

c00111b4 <setupTimer(int)>:
c00111b4:	57                   	push   edi
c00111b5:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c00111ba:	56                   	push   esi
c00111bb:	53                   	push   ebx
c00111bc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00111c0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00111c6:	83 ec 0c             	sub    esp,0xc
c00111c9:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00111cf:	e8 b6 d7 ff ff       	call   c000e98a <Device::getName()>
c00111d4:	83 c4 10             	add    esp,0x10
c00111d7:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00111da:	0f 85 94 00 00 00    	jne    c0011274 <setupTimer(int)+0xc0>
c00111e0:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c00111e5:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c00111ec:	0f 84 82 00 00 00    	je     c0011274 <setupTimer(int)+0xc0>
c00111f2:	83 ec 0c             	sub    esp,0xc
c00111f5:	68 5c 01 00 00       	push   0x15c
c00111fa:	e8 e8 8b ff ff       	call   c0009de7 <malloc>
c00111ff:	89 04 24             	mov    DWORD PTR [esp],eax
c0011202:	89 c3                	mov    ebx,eax
c0011204:	e8 47 19 01 00       	call   c0022b50 <PIT::PIT()>
c0011209:	59                   	pop    ecx
c001120a:	5f                   	pop    edi
c001120b:	53                   	push   ebx
c001120c:	ff 35 08 8c 02 c0    	push   DWORD PTR ds:0xc0028c08
c0011212:	e8 73 d4 ff ff       	call   c000e68a <Device::addChild(Device*)>
c0011217:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011219:	6a 00                	push   0x0
c001121b:	6a 00                	push   0x0
c001121d:	56                   	push   esi
c001121e:	53                   	push   ebx
c001121f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011222:	83 c4 14             	add    esp,0x14
c0011225:	68 60 01 00 00       	push   0x160
c001122a:	e8 b8 8b ff ff       	call   c0009de7 <malloc>
c001122f:	89 04 24             	mov    DWORD PTR [esp],eax
c0011232:	89 c7                	mov    edi,eax
c0011234:	e8 cb 17 01 00       	call   c0022a04 <APICTimer::APICTimer()>
c0011239:	6a 00                	push   0x0
c001123b:	6a 00                	push   0x0
c001123d:	56                   	push   esi
c001123e:	57                   	push   edi
c001123f:	e8 c0 16 01 00       	call   c0022904 <APICTimer::open(int, int, void*)>
c0011244:	83 c4 20             	add    esp,0x20
c0011247:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011249:	6a 00                	push   0x0
c001124b:	6a 00                	push   0x0
c001124d:	6a 00                	push   0x0
c001124f:	53                   	push   ebx
c0011250:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011253:	58                   	pop    eax
c0011254:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c0011259:	5a                   	pop    edx
c001125a:	57                   	push   edi
c001125b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011261:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0011267:	e8 1e d4 ff ff       	call   c000e68a <Device::addChild(Device*)>
c001126c:	83 c4 10             	add    esp,0x10
c001126f:	eb 37                	jmp    c00112a8 <setupTimer(int)+0xf4>
c0011271:	8d 76 00             	lea    esi,[esi+0x0]
c0011274:	83 ec 0c             	sub    esp,0xc
c0011277:	68 5c 01 00 00       	push   0x15c
c001127c:	e8 66 8b ff ff       	call   c0009de7 <malloc>
c0011281:	89 04 24             	mov    DWORD PTR [esp],eax
c0011284:	89 c3                	mov    ebx,eax
c0011286:	e8 c5 18 01 00       	call   c0022b50 <PIT::PIT()>
c001128b:	58                   	pop    eax
c001128c:	5a                   	pop    edx
c001128d:	53                   	push   ebx
c001128e:	ff 35 08 8c 02 c0    	push   DWORD PTR ds:0xc0028c08
c0011294:	e8 f1 d3 ff ff       	call   c000e68a <Device::addChild(Device*)>
c0011299:	8b 03                	mov    eax,DWORD PTR [ebx]
c001129b:	6a 00                	push   0x0
c001129d:	6a 00                	push   0x0
c001129f:	56                   	push   esi
c00112a0:	53                   	push   ebx
c00112a1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00112a4:	83 c4 20             	add    esp,0x20
c00112a7:	90                   	nop
c00112a8:	89 d8                	mov    eax,ebx
c00112aa:	5b                   	pop    ebx
c00112ab:	5e                   	pop    esi
c00112ac:	5f                   	pop    edi
c00112ad:	c3                   	ret    
c00112ae:	66 90                	xchg   ax,ax

c00112b0 <VCache::VCache(PhysicalDisk*)>:
c00112b0:	53                   	push   ebx
c00112b1:	83 ec 18             	sub    esp,0x18
c00112b4:	ba a0 5c 02 c0       	mov    edx,0xc0025ca0
c00112b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00112bd:	89 10                	mov    DWORD PTR [eax],edx
c00112bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00112c3:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c00112ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00112ce:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c00112d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00112d9:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c00112e0:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00112e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00112eb:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00112f2:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00112f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00112fd:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0011304:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011308:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001130c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011310:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0011317:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c001131e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011322:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0011326:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001132a:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c001132e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011332:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0011336:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001133a:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0011341:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0011349:	83 ec 0c             	sub    esp,0xc
c001134c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011350:	e8 92 8a ff ff       	call   c0009de7 <malloc>
c0011355:	83 c4 10             	add    esp,0x10
c0011358:	89 c3                	mov    ebx,eax
c001135a:	83 ec 0c             	sub    esp,0xc
c001135d:	53                   	push   ebx
c001135e:	e8 c1 79 00 00       	call   c0018d24 <Mutex::Mutex()>
c0011363:	83 c4 10             	add    esp,0x10
c0011366:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001136a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001136d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011371:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011375:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0011378:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001137c:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0011383:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011387:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001138d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011391:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011394:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011398:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001139e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00113a4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00113a8:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00113ab:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00113ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00113b2:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c00113b6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00113ba:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00113c0:	05 00 01 00 00       	add    eax,0x100
c00113c5:	c1 e0 04             	shl    eax,0x4
c00113c8:	83 ec 0c             	sub    esp,0xc
c00113cb:	50                   	push   eax
c00113cc:	e8 16 8a ff ff       	call   c0009de7 <malloc>
c00113d1:	83 c4 10             	add    esp,0x10
c00113d4:	89 c2                	mov    edx,eax
c00113d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00113da:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00113dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00113e1:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c00113e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00113ec:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00113f0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00113f4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00113fa:	c1 e0 06             	shl    eax,0x6
c00113fd:	83 ec 0c             	sub    esp,0xc
c0011400:	50                   	push   eax
c0011401:	e8 e1 89 ff ff       	call   c0009de7 <malloc>
c0011406:	83 c4 10             	add    esp,0x10
c0011409:	89 c2                	mov    edx,eax
c001140b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001140f:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0011412:	90                   	nop
c0011413:	83 c4 18             	add    esp,0x18
c0011416:	5b                   	pop    ebx
c0011417:	c3                   	ret    

c0011418 <VCache::invalidateReadBuffer()>:
c0011418:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001141c:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0011422:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0011426:	c3                   	ret    
c0011427:	90                   	nop

c0011428 <VCache::writeWriteBuffer()>:
c0011428:	53                   	push   ebx
c0011429:	83 ec 08             	sub    esp,0x8
c001142c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011430:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0011434:	74 1e                	je     c0011454 <VCache::writeWriteBuffer()+0x2c>
c0011436:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0011439:	83 ec 0c             	sub    esp,0xc
c001143c:	8b 10                	mov    edx,DWORD PTR [eax]
c001143e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0011441:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011444:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011447:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001144a:	50                   	push   eax
c001144b:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001144e:	83 c4 20             	add    esp,0x20
c0011451:	8d 76 00             	lea    esi,[esi+0x0]
c0011454:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c001145b:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0011462:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0011466:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c001146d:	83 c4 08             	add    esp,0x8
c0011470:	5b                   	pop    ebx
c0011471:	c3                   	ret    
c0011472:	66 90                	xchg   ax,ax

c0011474 <VCache::~VCache()>:
c0011474:	83 ec 0c             	sub    esp,0xc
c0011477:	ba a0 5c 02 c0       	mov    edx,0xc0025ca0
c001147c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011480:	89 10                	mov    DWORD PTR [eax],edx
c0011482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011486:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0011489:	84 c0                	test   al,al
c001148b:	74 0f                	je     c001149c <VCache::~VCache()+0x28>
c001148d:	83 ec 0c             	sub    esp,0xc
c0011490:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011494:	e8 8f ff ff ff       	call   c0011428 <VCache::writeWriteBuffer()>
c0011499:	83 c4 10             	add    esp,0x10
c001149c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114a0:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00114a3:	83 ec 0c             	sub    esp,0xc
c00114a6:	50                   	push   eax
c00114a7:	e8 4b 89 ff ff       	call   c0009df7 <free>
c00114ac:	83 c4 10             	add    esp,0x10
c00114af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114b3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00114b6:	83 ec 0c             	sub    esp,0xc
c00114b9:	50                   	push   eax
c00114ba:	e8 38 89 ff ff       	call   c0009df7 <free>
c00114bf:	83 c4 10             	add    esp,0x10
c00114c2:	90                   	nop
c00114c3:	83 c4 0c             	add    esp,0xc
c00114c6:	c3                   	ret    
c00114c7:	90                   	nop

c00114c8 <VCache::~VCache()>:
c00114c8:	83 ec 0c             	sub    esp,0xc
c00114cb:	83 ec 0c             	sub    esp,0xc
c00114ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114d2:	e8 9d ff ff ff       	call   c0011474 <VCache::~VCache()>
c00114d7:	83 c4 10             	add    esp,0x10
c00114da:	83 ec 08             	sub    esp,0x8
c00114dd:	6a 44                	push   0x44
c00114df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114e3:	e8 4e bb ff ff       	call   c000d036 <operator delete(void*, unsigned long)>
c00114e8:	83 c4 10             	add    esp,0x10
c00114eb:	83 c4 0c             	add    esp,0xc
c00114ee:	c3                   	ret    
c00114ef:	90                   	nop

c00114f0 <VCache::write(unsigned long long, int, void*)>:
c00114f0:	55                   	push   ebp
c00114f1:	31 c0                	xor    eax,eax
c00114f3:	57                   	push   edi
c00114f4:	56                   	push   esi
c00114f5:	53                   	push   ebx
c00114f6:	83 ec 0c             	sub    esp,0xc
c00114f9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00114fd:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0011501:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0011505:	8d 76 00             	lea    esi,[esi+0x0]
c0011508:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c001150c:	7d 1a                	jge    c0011528 <VCache::write(unsigned long long, int, void*)+0x38>
c001150e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0011511:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c0011517:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001151b:	0f af c8             	imul   ecx,eax
c001151e:	01 ca                	add    edx,ecx
c0011520:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0011522:	40                   	inc    eax
c0011523:	eb e3                	jmp    c0011508 <VCache::write(unsigned long long, int, void*)+0x18>
c0011525:	8d 76 00             	lea    esi,[esi+0x0]
c0011528:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001152c:	74 0a                	je     c0011538 <VCache::write(unsigned long long, int, void*)+0x48>
c001152e:	53                   	push   ebx
c001152f:	e8 e4 fe ff ff       	call   c0011418 <VCache::invalidateReadBuffer()>
c0011534:	58                   	pop    eax
c0011535:	8d 76 00             	lea    esi,[esi+0x0]
c0011538:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001153c:	74 5e                	je     c001159c <VCache::write(unsigned long long, int, void*)+0xac>
c001153e:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c0011541:	89 e8                	mov    eax,ebp
c0011543:	99                   	cdq    
c0011544:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0011547:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c001154a:	89 c1                	mov    ecx,eax
c001154c:	89 d0                	mov    eax,edx
c001154e:	31 f1                	xor    ecx,esi
c0011550:	31 f8                	xor    eax,edi
c0011552:	09 c1                	or     ecx,eax
c0011554:	75 3a                	jne    c0011590 <VCache::write(unsigned long long, int, void*)+0xa0>
c0011556:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001155b:	75 33                	jne    c0011590 <VCache::write(unsigned long long, int, void*)+0xa0>
c001155d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0011560:	89 ef                	mov    edi,ebp
c0011562:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0011568:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001156c:	0f af f9             	imul   edi,ecx
c001156f:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0011572:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011574:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011577:	40                   	inc    eax
c0011578:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c001157b:	83 f8 40             	cmp    eax,0x40
c001157e:	75 60                	jne    c00115e0 <VCache::write(unsigned long long, int, void*)+0xf0>
c0011580:	83 ec 0c             	sub    esp,0xc
c0011583:	53                   	push   ebx
c0011584:	e8 9f fe ff ff       	call   c0011428 <VCache::writeWriteBuffer()>
c0011589:	83 c4 10             	add    esp,0x10
c001158c:	eb 52                	jmp    c00115e0 <VCache::write(unsigned long long, int, void*)+0xf0>
c001158e:	66 90                	xchg   ax,ax
c0011590:	83 ec 0c             	sub    esp,0xc
c0011593:	53                   	push   ebx
c0011594:	e8 8f fe ff ff       	call   c0011428 <VCache::writeWriteBuffer()>
c0011599:	83 c4 10             	add    esp,0x10
c001159c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001159f:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c00115a4:	7f 22                	jg     c00115c8 <VCache::write(unsigned long long, int, void*)+0xd8>
c00115a6:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00115a9:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00115ac:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00115b0:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00115b4:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c00115b7:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c00115ba:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c00115c0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00115c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00115c6:	eb 18                	jmp    c00115e0 <VCache::write(unsigned long long, int, void*)+0xf0>
c00115c8:	83 ec 0c             	sub    esp,0xc
c00115cb:	8b 10                	mov    edx,DWORD PTR [eax]
c00115cd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00115d1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00115d5:	57                   	push   edi
c00115d6:	56                   	push   esi
c00115d7:	50                   	push   eax
c00115d8:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00115db:	83 c4 20             	add    esp,0x20
c00115de:	66 90                	xchg   ax,ax
c00115e0:	83 c4 0c             	add    esp,0xc
c00115e3:	31 c0                	xor    eax,eax
c00115e5:	5b                   	pop    ebx
c00115e6:	5e                   	pop    esi
c00115e7:	5f                   	pop    edi
c00115e8:	5d                   	pop    ebp
c00115e9:	c3                   	ret    

c00115ea <VCache::read(unsigned long long, int, void*)>:
c00115ea:	55                   	push   ebp
c00115eb:	31 c0                	xor    eax,eax
c00115ed:	57                   	push   edi
c00115ee:	56                   	push   esi
c00115ef:	53                   	push   ebx
c00115f0:	83 ec 1c             	sub    esp,0x1c
c00115f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00115f7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00115fb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00115ff:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0011603:	90                   	nop
c0011604:	39 e8                	cmp    eax,ebp
c0011606:	7d 18                	jge    c0011620 <VCache::read(unsigned long long, int, void*)+0x36>
c0011608:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c001160b:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c0011611:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0011615:	0f af c8             	imul   ecx,eax
c0011618:	01 ca                	add    edx,ecx
c001161a:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001161c:	40                   	inc    eax
c001161d:	eb e5                	jmp    c0011604 <VCache::read(unsigned long long, int, void*)+0x1a>
c001161f:	90                   	nop
c0011620:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0011624:	74 0e                	je     c0011634 <VCache::read(unsigned long long, int, void*)+0x4a>
c0011626:	83 ec 0c             	sub    esp,0xc
c0011629:	53                   	push   ebx
c001162a:	e8 f9 fd ff ff       	call   c0011428 <VCache::writeWriteBuffer()>
c001162f:	83 c4 10             	add    esp,0x10
c0011632:	66 90                	xchg   ax,ax
c0011634:	83 fd 01             	cmp    ebp,0x1
c0011637:	0f 85 87 00 00 00    	jne    c00116c4 <VCache::read(unsigned long long, int, void*)+0xda>
c001163d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0011640:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011644:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c001164b:	75 77                	jne    c00116c4 <VCache::read(unsigned long long, int, void*)+0xda>
c001164d:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c0011650:	89 e9                	mov    ecx,ebp
c0011652:	f7 d9                	neg    ecx
c0011654:	89 c8                	mov    eax,ecx
c0011656:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001165a:	c1 f8 1f             	sar    eax,0x1f
c001165d:	21 f1                	and    ecx,esi
c001165f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011663:	89 c8                	mov    eax,ecx
c0011665:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011669:	21 f9                	and    ecx,edi
c001166b:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001166f:	89 ca                	mov    edx,ecx
c0011671:	74 0d                	je     c0011680 <VCache::read(unsigned long long, int, void*)+0x96>
c0011673:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0011676:	75 08                	jne    c0011680 <VCache::read(unsigned long long, int, void*)+0x96>
c0011678:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c001167b:	74 27                	je     c00116a4 <VCache::read(unsigned long long, int, void*)+0xba>
c001167d:	8d 76 00             	lea    esi,[esi+0x0]
c0011680:	83 ec 0c             	sub    esp,0xc
c0011683:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0011687:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001168b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c001168e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0011691:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0011693:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0011696:	55                   	push   ebp
c0011697:	52                   	push   edx
c0011698:	50                   	push   eax
c0011699:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001169d:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c00116a0:	83 c4 20             	add    esp,0x20
c00116a3:	90                   	nop
c00116a4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00116a7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00116ab:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c00116b1:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00116b4:	48                   	dec    eax
c00116b5:	21 c6                	and    esi,eax
c00116b7:	0f af f1             	imul   esi,ecx
c00116ba:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c00116bd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00116bf:	eb 23                	jmp    c00116e4 <VCache::read(unsigned long long, int, void*)+0xfa>
c00116c1:	8d 76 00             	lea    esi,[esi+0x0]
c00116c4:	83 ec 0c             	sub    esp,0xc
c00116c7:	53                   	push   ebx
c00116c8:	e8 4b fd ff ff       	call   c0011418 <VCache::invalidateReadBuffer()>
c00116cd:	5a                   	pop    edx
c00116ce:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00116d1:	8b 10                	mov    edx,DWORD PTR [eax]
c00116d3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00116d7:	55                   	push   ebp
c00116d8:	57                   	push   edi
c00116d9:	56                   	push   esi
c00116da:	50                   	push   eax
c00116db:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00116de:	83 c4 20             	add    esp,0x20
c00116e1:	8d 76 00             	lea    esi,[esi+0x0]
c00116e4:	83 c4 1c             	add    esp,0x1c
c00116e7:	31 c0                	xor    eax,eax
c00116e9:	5b                   	pop    ebx
c00116ea:	5e                   	pop    esi
c00116eb:	5f                   	pop    edi
c00116ec:	5d                   	pop    ebp
c00116ed:	c3                   	ret    

c00116ee <Video::putrect(int, int, int, int, unsigned int)>:
c00116ee:	55                   	push   ebp
c00116ef:	57                   	push   edi
c00116f0:	56                   	push   esi
c00116f1:	53                   	push   ebx
c00116f2:	83 ec 1c             	sub    esp,0x1c
c00116f5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00116f9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00116fd:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0011701:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0011705:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011709:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001170d:	01 df                	add    edi,ebx
c001170f:	39 fb                	cmp    ebx,edi
c0011711:	7d 1f                	jge    c0011732 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0011713:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011717:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001171b:	7d 12                	jge    c001172f <Video::putrect(int, int, int, int, unsigned int)+0x41>
c001171d:	8b 16                	mov    edx,DWORD PTR [esi]
c001171f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0011723:	53                   	push   ebx
c0011724:	55                   	push   ebp
c0011725:	45                   	inc    ebp
c0011726:	56                   	push   esi
c0011727:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001172a:	83 c4 10             	add    esp,0x10
c001172d:	eb e8                	jmp    c0011717 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c001172f:	43                   	inc    ebx
c0011730:	eb dd                	jmp    c001170f <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0011732:	83 c4 1c             	add    esp,0x1c
c0011735:	5b                   	pop    ebx
c0011736:	5e                   	pop    esi
c0011737:	5f                   	pop    edi
c0011738:	5d                   	pop    ebp
c0011739:	c3                   	ret    

c001173a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c001173a:	55                   	push   ebp
c001173b:	57                   	push   edi
c001173c:	31 ff                	xor    edi,edi
c001173e:	56                   	push   esi
c001173f:	53                   	push   ebx
c0011740:	83 ec 1c             	sub    esp,0x1c
c0011743:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0011747:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001174b:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0011752:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0011757:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001175b:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001175f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0011763:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0011766:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001176a:	01 f9                	add    ecx,edi
c001176c:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0011770:	7d 2f                	jge    c00117a1 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0011772:	31 f6                	xor    esi,esi
c0011774:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011778:	01 f2                	add    edx,esi
c001177a:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001177e:	7d 1a                	jge    c001179a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0011780:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011783:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0011786:	46                   	inc    esi
c0011787:	51                   	push   ecx
c0011788:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001178c:	52                   	push   edx
c001178d:	55                   	push   ebp
c001178e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011791:	83 c4 10             	add    esp,0x10
c0011794:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011798:	eb da                	jmp    c0011774 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c001179a:	47                   	inc    edi
c001179b:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001179f:	eb c5                	jmp    c0011766 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c00117a1:	83 c4 1c             	add    esp,0x1c
c00117a4:	5b                   	pop    ebx
c00117a5:	5e                   	pop    esi
c00117a6:	5f                   	pop    edi
c00117a7:	5d                   	pop    ebp
c00117a8:	c3                   	ret    
c00117a9:	90                   	nop

c00117aa <Video::blit(unsigned int*, int, int, int, int)>:
c00117aa:	55                   	push   ebp
c00117ab:	57                   	push   edi
c00117ac:	56                   	push   esi
c00117ad:	53                   	push   ebx
c00117ae:	83 ec 1c             	sub    esp,0x1c
c00117b1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00117b5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00117b9:	85 c0                	test   eax,eax
c00117bb:	79 02                	jns    c00117bf <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00117bd:	31 c0                	xor    eax,eax
c00117bf:	c1 e0 02             	shl    eax,0x2
c00117c2:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00117c6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00117ca:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00117ce:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00117d2:	39 d8                	cmp    eax,ebx
c00117d4:	7e 49                	jle    c001181f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00117d6:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00117dc:	7c 41                	jl     c001181f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00117de:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00117e2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00117e6:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00117ea:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00117ee:	39 f9                	cmp    ecx,edi
c00117f0:	7e 22                	jle    c0011814 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00117f2:	83 c5 04             	add    ebp,0x4
c00117f5:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00117fb:	7c 14                	jl     c0011811 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00117fd:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00117ff:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0011802:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011806:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001180a:	56                   	push   esi
c001180b:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c001180e:	83 c4 10             	add    esp,0x10
c0011811:	47                   	inc    edi
c0011812:	eb d2                	jmp    c00117e6 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0011814:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011818:	43                   	inc    ebx
c0011819:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001181d:	eb ab                	jmp    c00117ca <Video::blit(unsigned int*, int, int, int, int)+0x20>
c001181f:	83 c4 1c             	add    esp,0x1c
c0011822:	5b                   	pop    ebx
c0011823:	5e                   	pop    esi
c0011824:	5f                   	pop    edi
c0011825:	5d                   	pop    ebp
c0011826:	c3                   	ret    
c0011827:	90                   	nop

c0011828 <Video::clearScreen(unsigned int)>:
c0011828:	57                   	push   edi
c0011829:	56                   	push   esi
c001182a:	53                   	push   ebx
c001182b:	31 db                	xor    ebx,ebx
c001182d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011831:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0011837:	7e 1f                	jle    c0011858 <Video::clearScreen(unsigned int)+0x30>
c0011839:	31 ff                	xor    edi,edi
c001183b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0011841:	7e 12                	jle    c0011855 <Video::clearScreen(unsigned int)+0x2d>
c0011843:	8b 06                	mov    eax,DWORD PTR [esi]
c0011845:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011849:	53                   	push   ebx
c001184a:	57                   	push   edi
c001184b:	47                   	inc    edi
c001184c:	56                   	push   esi
c001184d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011850:	83 c4 10             	add    esp,0x10
c0011853:	eb e6                	jmp    c001183b <Video::clearScreen(unsigned int)+0x13>
c0011855:	43                   	inc    ebx
c0011856:	eb d9                	jmp    c0011831 <Video::clearScreen(unsigned int)+0x9>
c0011858:	5b                   	pop    ebx
c0011859:	5e                   	pop    esi
c001185a:	5f                   	pop    edi
c001185b:	c3                   	ret    

c001185c <Video::putpixel(int, int, unsigned int)>:
c001185c:	c7 44 24 04 a8 5c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025ca8
c0011864:	e9 90 39 00 00       	jmp    c00151f9 <Krnl::panic(char const*)>
c0011869:	90                   	nop

c001186a <Video::Video(char const*)>:
c001186a:	83 ec 0c             	sub    esp,0xc
c001186d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011871:	83 ec 08             	sub    esp,0x8
c0011874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011878:	50                   	push   eax
c0011879:	e8 10 d0 ff ff       	call   c000e88e <Device::Device(char const*)>
c001187e:	83 c4 10             	add    esp,0x10
c0011881:	ba 18 5d 02 c0       	mov    edx,0xc0025d18
c0011886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001188a:	89 10                	mov    DWORD PTR [eax],edx
c001188c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011890:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001189a:	90                   	nop
c001189b:	83 c4 0c             	add    esp,0xc
c001189e:	c3                   	ret    
c001189f:	90                   	nop

c00118a0 <Video::~Video()>:
c00118a0:	83 ec 0c             	sub    esp,0xc
c00118a3:	ba 18 5d 02 c0       	mov    edx,0xc0025d18
c00118a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118ac:	89 10                	mov    DWORD PTR [eax],edx
c00118ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118b2:	83 ec 0c             	sub    esp,0xc
c00118b5:	50                   	push   eax
c00118b6:	e8 9d cc ff ff       	call   c000e558 <Device::~Device()>
c00118bb:	83 c4 10             	add    esp,0x10
c00118be:	90                   	nop
c00118bf:	83 c4 0c             	add    esp,0xc
c00118c2:	c3                   	ret    
c00118c3:	90                   	nop

c00118c4 <Video::~Video()>:
c00118c4:	83 ec 0c             	sub    esp,0xc
c00118c7:	83 ec 0c             	sub    esp,0xc
c00118ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118ce:	e8 cd ff ff ff       	call   c00118a0 <Video::~Video()>
c00118d3:	83 c4 10             	add    esp,0x10
c00118d6:	83 ec 08             	sub    esp,0x8
c00118d9:	68 64 01 00 00       	push   0x164
c00118de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118e2:	e8 4f b7 ff ff       	call   c000d036 <operator delete(void*, unsigned long)>
c00118e7:	83 c4 10             	add    esp,0x10
c00118ea:	83 c4 0c             	add    esp,0xc
c00118ed:	c3                   	ret    

c00118ee <Video::isMonochrome()>:
c00118ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118f2:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00118f8:	c3                   	ret    
c00118f9:	90                   	nop

c00118fa <Video::getWidth()>:
c00118fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118fe:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0011904:	c3                   	ret    
c0011905:	90                   	nop

c0011906 <Video::getHeight()>:
c0011906:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001190a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011910:	c3                   	ret    
c0011911:	90                   	nop

c0011912 <Video::drawCursor(int, int, unsigned char*, int)>:
c0011912:	55                   	push   ebp
c0011913:	57                   	push   edi
c0011914:	56                   	push   esi
c0011915:	53                   	push   ebx
c0011916:	83 ec 2c             	sub    esp,0x2c
c0011919:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001191d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0011921:	83 f8 01             	cmp    eax,0x1
c0011924:	19 c9                	sbb    ecx,ecx
c0011926:	31 db                	xor    ebx,ebx
c0011928:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001192c:	89 cd                	mov    ebp,ecx
c001192e:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0011936:	f7 d5                	not    ebp
c0011938:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c001193e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0011942:	01 d8                	add    eax,ebx
c0011944:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011948:	56                   	push   esi
c0011949:	e8 b8 ff ff ff       	call   c0011906 <Video::getHeight()>
c001194e:	59                   	pop    ecx
c001194f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0011953:	7e 70                	jle    c00119c5 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0011955:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011959:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001195d:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0011960:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011964:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011968:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001196f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011973:	89 f8                	mov    eax,edi
c0011975:	83 c0 20             	add    eax,0x20
c0011978:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001197c:	56                   	push   esi
c001197d:	e8 78 ff ff ff       	call   c00118fa <Video::getWidth()>
c0011982:	5a                   	pop    edx
c0011983:	39 c7                	cmp    edi,eax
c0011985:	7d 34                	jge    c00119bb <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0011987:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001198c:	74 05                	je     c0011993 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c001198e:	8b 06                	mov    eax,DWORD PTR [esi]
c0011990:	55                   	push   ebp
c0011991:	eb 0d                	jmp    c00119a0 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0011993:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0011998:	74 12                	je     c00119ac <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c001199a:	8b 06                	mov    eax,DWORD PTR [esi]
c001199c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00119a0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00119a4:	57                   	push   edi
c00119a5:	56                   	push   esi
c00119a6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00119a9:	83 c4 10             	add    esp,0x10
c00119ac:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00119b0:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00119b4:	47                   	inc    edi
c00119b5:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00119b9:	75 c1                	jne    c001197c <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00119bb:	43                   	inc    ebx
c00119bc:	83 fb 20             	cmp    ebx,0x20
c00119bf:	0f 85 79 ff ff ff    	jne    c001193e <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00119c5:	83 c4 2c             	add    esp,0x2c
c00119c8:	5b                   	pop    ebx
c00119c9:	5e                   	pop    esi
c00119ca:	5f                   	pop    edi
c00119cb:	5d                   	pop    ebp
c00119cc:	c3                   	ret    
c00119cd:	90                   	nop

c00119ce <Video::tgaParse(unsigned char*, int, int*, int*)>:
c00119ce:	55                   	push   ebp
c00119cf:	57                   	push   edi
c00119d0:	56                   	push   esi
c00119d1:	53                   	push   ebx
c00119d2:	83 ec 28             	sub    esp,0x28
c00119d5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00119d9:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c00119dd:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c00119e1:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00119e5:	c1 e6 08             	shl    esi,0x8
c00119e8:	01 c6                	add    esi,eax
c00119ea:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00119ee:	c1 e0 08             	shl    eax,0x8
c00119f1:	01 d0                	add    eax,edx
c00119f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00119f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119fb:	0f af c6             	imul   eax,esi
c00119fe:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0011a05:	50                   	push   eax
c0011a06:	e8 dc 83 ff ff       	call   c0009de7 <malloc>
c0011a0b:	83 c4 10             	add    esp,0x10
c0011a0e:	89 c7                	mov    edi,eax
c0011a10:	85 c0                	test   eax,eax
c0011a12:	75 10                	jne    c0011a24 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c0011a14:	83 ec 0c             	sub    esp,0xc
c0011a17:	68 c9 5c 02 c0       	push   0xc0025cc9
c0011a1c:	e8 d8 37 00 00       	call   c00151f9 <Krnl::panic(char const*)>
c0011a21:	83 c4 10             	add    esp,0x10
c0011a24:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0011a27:	ba 12 00 00 00       	mov    edx,0x12
c0011a2c:	84 c0                	test   al,al
c0011a2e:	74 11                	je     c0011a41 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c0011a30:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0011a34:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c0011a38:	c1 fa 03             	sar    edx,0x3
c0011a3b:	0f af d1             	imul   edx,ecx
c0011a3e:	83 c2 12             	add    edx,0x12
c0011a41:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0011a45:	74 04                	je     c0011a4b <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c0011a47:	85 f6                	test   esi,esi
c0011a49:	75 12                	jne    c0011a5d <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c0011a4b:	83 ec 0c             	sub    esp,0xc
c0011a4e:	68 d9 5c 02 c0       	push   0xc0025cd9
c0011a53:	e8 bf b6 ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0011a58:	e9 b8 00 00 00       	jmp    c0011b15 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c0011a5d:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c0011a61:	80 f9 02             	cmp    cl,0x2
c0011a64:	0f 85 96 00 00 00    	jne    c0011b00 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c0011a6a:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0011a6f:	75 0e                	jne    c0011a7f <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0011a71:	84 c0                	test   al,al
c0011a73:	75 0a                	jne    c0011a7f <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0011a75:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0011a78:	83 e8 18             	sub    eax,0x18
c0011a7b:	a8 f7                	test   al,0xf7
c0011a7d:	74 0a                	je     c0011a89 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c0011a7f:	83 ec 0c             	sub    esp,0xc
c0011a82:	68 ee 5c 02 c0       	push   0xc0025cee
c0011a87:	eb 7f                	jmp    c0011b08 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c0011a89:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011a91:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0011a99:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0011a9d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011aa5:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0011aa9:	75 0c                	jne    c0011ab7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0011aab:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c0011ab0:	c1 e0 18             	shl    eax,0x18
c0011ab3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011ab7:	45                   	inc    ebp
c0011ab8:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c0011abd:	c1 e1 10             	shl    ecx,0x10
c0011ac0:	89 c8                	mov    eax,ecx
c0011ac2:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c0011ac7:	c1 e1 08             	shl    ecx,0x8
c0011aca:	09 c1                	or     ecx,eax
c0011acc:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c0011ad0:	09 c1                	or     ecx,eax
c0011ad2:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c0011ad6:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c0011ada:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0011ade:	c1 f8 03             	sar    eax,0x3
c0011ae1:	01 c2                	add    edx,eax
c0011ae3:	89 e8                	mov    eax,ebp
c0011ae5:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0011ae9:	39 c6                	cmp    esi,eax
c0011aeb:	7f b0                	jg     c0011a9d <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c0011aed:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0011af1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011af5:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0011af8:	7e 22                	jle    c0011b1c <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c0011afa:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c0011afe:	eb 99                	jmp    c0011a99 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0011b00:	50                   	push   eax
c0011b01:	50                   	push   eax
c0011b02:	51                   	push   ecx
c0011b03:	68 fc 5c 02 c0       	push   0xc0025cfc
c0011b08:	e8 0a b6 ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0011b0d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011b10:	e8 e2 82 ff ff       	call   c0009df7 <free>
c0011b15:	83 c4 10             	add    esp,0x10
c0011b18:	31 ff                	xor    edi,edi
c0011b1a:	eb 0f                	jmp    c0011b2b <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c0011b1c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011b20:	89 30                	mov    DWORD PTR [eax],esi
c0011b22:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011b26:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0011b29:	89 30                	mov    DWORD PTR [eax],esi
c0011b2b:	83 c4 1c             	add    esp,0x1c
c0011b2e:	89 f8                	mov    eax,edi
c0011b30:	5b                   	pop    ebx
c0011b31:	5e                   	pop    esi
c0011b32:	5f                   	pop    edi
c0011b33:	5d                   	pop    ebp
c0011b34:	c3                   	ret    
c0011b35:	90                   	nop

c0011b36 <Video::putTGA(int, int, unsigned char*, int)>:
c0011b36:	55                   	push   ebp
c0011b37:	57                   	push   edi
c0011b38:	56                   	push   esi
c0011b39:	53                   	push   ebx
c0011b3a:	83 ec 28             	sub    esp,0x28
c0011b3d:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0011b41:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011b45:	50                   	push   eax
c0011b46:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011b4a:	50                   	push   eax
c0011b4b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0011b4f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0011b53:	56                   	push   esi
c0011b54:	e8 75 fe ff ff       	call   c00119ce <Video::tgaParse(unsigned char*, int, int*, int*)>
c0011b59:	83 c4 20             	add    esp,0x20
c0011b5c:	85 c0                	test   eax,eax
c0011b5e:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011b62:	74 35                	je     c0011b99 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0011b64:	89 c7                	mov    edi,eax
c0011b66:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011b6a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0011b6e:	39 d8                	cmp    eax,ebx
c0011b70:	7e 27                	jle    c0011b99 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0011b72:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011b76:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011b7a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0011b7e:	39 e8                	cmp    eax,ebp
c0011b80:	7e 14                	jle    c0011b96 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0011b82:	8b 06                	mov    eax,DWORD PTR [esi]
c0011b84:	83 c7 04             	add    edi,0x4
c0011b87:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0011b8a:	53                   	push   ebx
c0011b8b:	55                   	push   ebp
c0011b8c:	45                   	inc    ebp
c0011b8d:	56                   	push   esi
c0011b8e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011b91:	83 c4 10             	add    esp,0x10
c0011b94:	eb e0                	jmp    c0011b76 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0011b96:	43                   	inc    ebx
c0011b97:	eb cd                	jmp    c0011b66 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0011b99:	83 c4 1c             	add    esp,0x1c
c0011b9c:	5b                   	pop    ebx
c0011b9d:	5e                   	pop    esi
c0011b9e:	5f                   	pop    edi
c0011b9f:	5d                   	pop    ebp
c0011ba0:	c3                   	ret    
c0011ba1:	66 90                	xchg   ax,ax
c0011ba3:	90                   	nop

c0011ba4 <ACPI::close(int, int, void*)>:
c0011ba4:	83 ec 1c             	sub    esp,0x1c
c0011ba7:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0011baf:	74 0b                	je     c0011bbc <ACPI::close(int, int, void*)+0x18>
c0011bb1:	b8 00 00 00 00       	mov    eax,0x0
c0011bb6:	e9 99 00 00 00       	jmp    c0011c54 <ACPI::close(int, int, void*)+0xb0>
c0011bbb:	90                   	nop
c0011bbc:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0011bc1:	75 29                	jne    c0011bec <ACPI::close(int, int, void*)+0x48>
c0011bc3:	a1 48 92 02 c0       	mov    eax,ds:0xc0029248
c0011bc8:	85 c0                	test   eax,eax
c0011bca:	74 08                	je     c0011bd4 <ACPI::close(int, int, void*)+0x30>
c0011bcc:	a1 48 92 02 c0       	mov    eax,ds:0xc0029248
c0011bd1:	ff d0                	call   eax
c0011bd3:	90                   	nop
c0011bd4:	83 ec 0c             	sub    esp,0xc
c0011bd7:	68 58 5d 02 c0       	push   0xc0025d58
c0011bdc:	e8 18 36 00 00       	call   c00151f9 <Krnl::panic(char const*)>
c0011be1:	83 c4 10             	add    esp,0x10
c0011be4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011be9:	eb 69                	jmp    c0011c54 <ACPI::close(int, int, void*)+0xb0>
c0011beb:	90                   	nop
c0011bec:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0011bf1:	75 59                	jne    c0011c4c <ACPI::close(int, int, void*)+0xa8>
c0011bf3:	a1 44 92 02 c0       	mov    eax,ds:0xc0029244
c0011bf8:	85 c0                	test   eax,eax
c0011bfa:	74 08                	je     c0011c04 <ACPI::close(int, int, void*)+0x60>
c0011bfc:	a1 44 92 02 c0       	mov    eax,ds:0xc0029244
c0011c01:	ff d0                	call   eax
c0011c03:	90                   	nop
c0011c04:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0011c09:	8d 76 00             	lea    esi,[esi+0x0]
c0011c0c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011c11:	83 e0 02             	and    eax,0x2
c0011c14:	74 1e                	je     c0011c34 <ACPI::close(int, int, void*)+0x90>
c0011c16:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0011c1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c21:	89 c2                	mov    edx,eax
c0011c23:	ec                   	in     al,dx
c0011c24:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011c28:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0011c2c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011c30:	eb da                	jmp    c0011c0c <ACPI::close(int, int, void*)+0x68>
c0011c32:	66 90                	xchg   ax,ax
c0011c34:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0011c3b:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0011c40:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0011c44:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011c48:	ee                   	out    dx,al
c0011c49:	8d 76 00             	lea    esi,[esi+0x0]
c0011c4c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c51:	8d 76 00             	lea    esi,[esi+0x0]
c0011c54:	83 c4 1c             	add    esp,0x1c
c0011c57:	c3                   	ret    

c0011c58 <findRSDP()>:
c0011c58:	83 ec 1c             	sub    esp,0x1c
c0011c5b:	83 ec 0c             	sub    esp,0xc
c0011c5e:	68 7b 5e 02 c0       	push   0xc0025e7b
c0011c63:	e8 d9 81 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0011c68:	83 c4 10             	add    esp,0x10
c0011c6b:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c0011c70:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011c76:	83 e0 04             	and    eax,0x4
c0011c79:	84 c0                	test   al,al
c0011c7b:	75 0b                	jne    c0011c88 <findRSDP()+0x30>
c0011c7d:	b8 00 00 00 00       	mov    eax,0x0
c0011c82:	e9 a1 00 00 00       	jmp    c0011d28 <findRSDP()+0xd0>
c0011c87:	90                   	nop
c0011c88:	a1 38 8c 02 c0       	mov    eax,ds:0xc0028c38
c0011c8d:	3d ff 07 00 00       	cmp    eax,0x7ff
c0011c92:	7f 1c                	jg     c0011cb0 <findRSDP()+0x58>
c0011c94:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c0011c99:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011c9f:	83 e2 fb             	and    edx,0xfffffffb
c0011ca2:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011ca8:	b8 00 00 00 00       	mov    eax,0x0
c0011cad:	eb 79                	jmp    c0011d28 <findRSDP()+0xd0>
c0011caf:	90                   	nop
c0011cb0:	83 ec 0c             	sub    esp,0xc
c0011cb3:	68 8b 5e 02 c0       	push   0xc0025e8b
c0011cb8:	e8 84 81 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0011cbd:	83 c4 10             	add    esp,0x10
c0011cc0:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0011cc8:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0011cd0:	77 3e                	ja     c0011d10 <findRSDP()+0xb8>
c0011cd2:	83 ec 04             	sub    esp,0x4
c0011cd5:	6a 08                	push   0x8
c0011cd7:	68 a4 5e 02 c0       	push   0xc0025ea4
c0011cdc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011ce0:	e8 ab e8 fe ff       	call   c0000590 <memcmp>
c0011ce5:	83 c4 10             	add    esp,0x10
c0011ce8:	85 c0                	test   eax,eax
c0011cea:	0f 94 c0             	sete   al
c0011ced:	84 c0                	test   al,al
c0011cef:	74 17                	je     c0011d08 <findRSDP()+0xb0>
c0011cf1:	83 ec 0c             	sub    esp,0xc
c0011cf4:	68 ad 5e 02 c0       	push   0xc0025ead
c0011cf9:	e8 43 81 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0011cfe:	83 c4 10             	add    esp,0x10
c0011d01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d05:	eb 21                	jmp    c0011d28 <findRSDP()+0xd0>
c0011d07:	90                   	nop
c0011d08:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0011d0d:	eb b9                	jmp    c0011cc8 <findRSDP()+0x70>
c0011d0f:	90                   	nop
c0011d10:	83 ec 0c             	sub    esp,0xc
c0011d13:	68 bb 5e 02 c0       	push   0xc0025ebb
c0011d18:	e8 24 81 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0011d1d:	83 c4 10             	add    esp,0x10
c0011d20:	b8 00 00 00 00       	mov    eax,0x0
c0011d25:	8d 76 00             	lea    esi,[esi+0x0]
c0011d28:	83 c4 1c             	add    esp,0x1c
c0011d2b:	c3                   	ret    

c0011d2c <loadACPITables(unsigned char*)>:
c0011d2c:	57                   	push   edi
c0011d2d:	56                   	push   esi
c0011d2e:	53                   	push   ebx
c0011d2f:	83 ec 60             	sub    esp,0x60
c0011d32:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c0011d37:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011d3d:	83 e0 04             	and    eax,0x4
c0011d40:	84 c0                	test   al,al
c0011d42:	0f 84 3c 02 00 00    	je     c0011f84 <loadACPITables(unsigned char*)+0x258>
c0011d48:	a0 60 94 02 c0       	mov    al,ds:0xc0029460
c0011d4d:	84 c0                	test   al,al
c0011d4f:	74 77                	je     c0011dc8 <loadACPITables(unsigned char*)+0x9c>
c0011d51:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011d55:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0011d59:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0011d5d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011d60:	83 e8 24             	sub    eax,0x24
c0011d63:	c1 e8 03             	shr    eax,0x3
c0011d66:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011d6a:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0011d72:	66 90                	xchg   ax,ax
c0011d74:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0011d78:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0011d7c:	0f 8d b6 00 00 00    	jge    c0011e38 <loadACPITables(unsigned char*)+0x10c>
c0011d82:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011d86:	83 c0 24             	add    eax,0x24
c0011d89:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0011d8d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0011d91:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011d95:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0011d99:	c1 e0 03             	shl    eax,0x3
c0011d9c:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0011da0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011da4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011da7:	8b 00                	mov    eax,DWORD PTR [eax]
c0011da9:	89 c1                	mov    ecx,eax
c0011dab:	a1 4c 92 02 c0       	mov    eax,ds:0xc002924c
c0011db0:	8d 50 01             	lea    edx,[eax+0x1]
c0011db3:	89 15 4c 92 02 c0    	mov    DWORD PTR ds:0xc002924c,edx
c0011db9:	89 ca                	mov    edx,ecx
c0011dbb:	89 14 c5 64 92 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6d9c],edx
c0011dc2:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0011dc6:	eb ac                	jmp    c0011d74 <loadACPITables(unsigned char*)+0x48>
c0011dc8:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011dcc:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011dd0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011dd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011dd7:	83 e8 24             	sub    eax,0x24
c0011dda:	c1 e8 02             	shr    eax,0x2
c0011ddd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011de1:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0011de9:	8d 76 00             	lea    esi,[esi+0x0]
c0011dec:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0011df0:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0011df4:	7d 42                	jge    c0011e38 <loadACPITables(unsigned char*)+0x10c>
c0011df6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011dfa:	83 c0 24             	add    eax,0x24
c0011dfd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011e01:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011e05:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0011e09:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0011e0d:	c1 e0 02             	shl    eax,0x2
c0011e10:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0011e14:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e18:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011e1a:	a1 4c 92 02 c0       	mov    eax,ds:0xc002924c
c0011e1f:	8d 50 01             	lea    edx,[eax+0x1]
c0011e22:	89 15 4c 92 02 c0    	mov    DWORD PTR ds:0xc002924c,edx
c0011e28:	89 ca                	mov    edx,ecx
c0011e2a:	89 14 c5 64 92 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6d9c],edx
c0011e31:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0011e35:	eb b5                	jmp    c0011dec <loadACPITables(unsigned char*)+0xc0>
c0011e37:	90                   	nop
c0011e38:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0011e40:	a1 4c 92 02 c0       	mov    eax,ds:0xc002924c
c0011e45:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0011e49:	0f 8d 39 01 00 00    	jge    c0011f88 <loadACPITables(unsigned char*)+0x25c>
c0011e4f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011e53:	8b 04 c5 64 92 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd6d9c]
c0011e5a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011e5e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e62:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011e66:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e6a:	25 ff 0f 00 00       	and    eax,0xfff
c0011e6f:	89 c6                	mov    esi,eax
c0011e71:	8b 1d 34 8d 02 c0    	mov    ebx,DWORD PTR ds:0xc0028d34
c0011e77:	83 ec 0c             	sub    esp,0xc
c0011e7a:	6a 01                	push   0x1
c0011e7c:	e8 20 9f ff ff       	call   c000bda1 <Virt::allocateKernelVirtualPages(int)>
c0011e81:	83 c4 10             	add    esp,0x10
c0011e84:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011e88:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011e8e:	83 ec 0c             	sub    esp,0xc
c0011e91:	6a 01                	push   0x1
c0011e93:	6a 01                	push   0x1
c0011e95:	50                   	push   eax
c0011e96:	52                   	push   edx
c0011e97:	53                   	push   ebx
c0011e98:	e8 65 a8 ff ff       	call   c000c702 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011e9d:	83 c4 20             	add    esp,0x20
c0011ea0:	09 f0                	or     eax,esi
c0011ea2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011ea6:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011eaa:	c1 e0 03             	shl    eax,0x3
c0011ead:	05 60 92 02 c0       	add    eax,0xc0029260
c0011eb2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011eb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011eba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011ebe:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0011ec6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011eca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011ece:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011ed2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011ed6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011eda:	89 c6                	mov    esi,eax
c0011edc:	89 d7                	mov    edi,edx
c0011ede:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011ee0:	89 c8                	mov    eax,ecx
c0011ee2:	89 fa                	mov    edx,edi
c0011ee4:	89 f3                	mov    ebx,esi
c0011ee6:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0011eea:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011eee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011ef2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ef6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011ef9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011efd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011f01:	05 00 10 00 00       	add    eax,0x1000
c0011f06:	c1 e8 0c             	shr    eax,0xc
c0011f09:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011f0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f11:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011f15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f19:	25 ff 0f 00 00       	and    eax,0xfff
c0011f1e:	89 c6                	mov    esi,eax
c0011f20:	8b 1d 34 8d 02 c0    	mov    ebx,DWORD PTR ds:0xc0028d34
c0011f26:	83 ec 0c             	sub    esp,0xc
c0011f29:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011f2d:	e8 6f 9e ff ff       	call   c000bda1 <Virt::allocateKernelVirtualPages(int)>
c0011f32:	83 c4 10             	add    esp,0x10
c0011f35:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011f39:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011f3f:	83 ec 0c             	sub    esp,0xc
c0011f42:	6a 01                	push   0x1
c0011f44:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011f48:	50                   	push   eax
c0011f49:	52                   	push   edx
c0011f4a:	53                   	push   ebx
c0011f4b:	e8 b2 a7 ff ff       	call   c000c702 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011f50:	83 c4 20             	add    esp,0x20
c0011f53:	09 f0                	or     eax,esi
c0011f55:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011f59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f5d:	83 ec 0c             	sub    esp,0xc
c0011f60:	50                   	push   eax
c0011f61:	e8 2f a1 ff ff       	call   c000c095 <Virt::freeKernelVirtualPages(unsigned long)>
c0011f66:	83 c4 10             	add    esp,0x10
c0011f69:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011f6d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011f71:	89 14 c5 64 92 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6d9c],edx
c0011f78:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0011f7c:	e9 bf fe ff ff       	jmp    c0011e40 <loadACPITables(unsigned char*)+0x114>
c0011f81:	8d 76 00             	lea    esi,[esi+0x0]
c0011f84:	90                   	nop
c0011f85:	8d 76 00             	lea    esi,[esi+0x0]
c0011f88:	83 c4 60             	add    esp,0x60
c0011f8b:	5b                   	pop    ebx
c0011f8c:	5e                   	pop    esi
c0011f8d:	5f                   	pop    edi
c0011f8e:	c3                   	ret    
c0011f8f:	90                   	nop

c0011f90 <findRSDT(unsigned char*)>:
c0011f90:	57                   	push   edi
c0011f91:	56                   	push   esi
c0011f92:	53                   	push   ebx
c0011f93:	83 ec 50             	sub    esp,0x50
c0011f96:	83 ec 0c             	sub    esp,0xc
c0011f99:	68 cf 5e 02 c0       	push   0xc0025ecf
c0011f9e:	e8 9e 7e ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0011fa3:	83 c4 10             	add    esp,0x10
c0011fa6:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c0011fab:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011fb1:	83 e0 04             	and    eax,0x4
c0011fb4:	84 c0                	test   al,al
c0011fb6:	75 0c                	jne    c0011fc4 <findRSDT(unsigned char*)+0x34>
c0011fb8:	b8 00 00 00 00       	mov    eax,0x0
c0011fbd:	e9 86 01 00 00       	jmp    c0012148 <findRSDT(unsigned char*)+0x1b8>
c0011fc2:	66 90                	xchg   ax,ax
c0011fc4:	83 ec 0c             	sub    esp,0xc
c0011fc7:	68 e1 5e 02 c0       	push   0xc0025ee1
c0011fcc:	e8 70 7e ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0011fd1:	83 c4 10             	add    esp,0x10
c0011fd4:	89 e0                	mov    eax,esp
c0011fd6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011fda:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0011fde:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011fe2:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0011fea:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011fee:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011ff2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011ff6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0011ffa:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0011ffe:	89 c6                	mov    esi,eax
c0012000:	89 d7                	mov    edi,edx
c0012002:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012004:	89 c8                	mov    eax,ecx
c0012006:	89 fa                	mov    edx,edi
c0012008:	89 f3                	mov    ebx,esi
c001200a:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001200e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0012012:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0012016:	83 ec 0c             	sub    esp,0xc
c0012019:	68 f3 5e 02 c0       	push   0xc0025ef3
c001201e:	e8 1e 7e ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0012023:	83 c4 10             	add    esp,0x10
c0012026:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001202a:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c001202e:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0012036:	83 ec 0c             	sub    esp,0xc
c0012039:	68 05 5f 02 c0       	push   0xc0025f05
c001203e:	e8 fe 7d ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0012043:	83 c4 10             	add    esp,0x10
c0012046:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001204a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001204e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012052:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012056:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001205a:	83 ec 04             	sub    esp,0x4
c001205d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012061:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012065:	68 7c 5d 02 c0       	push   0xc0025d7c
c001206a:	e8 a8 b0 ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c001206f:	83 c4 10             	add    esp,0x10
c0012072:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0012076:	25 ff 0f 00 00       	and    eax,0xfff
c001207b:	89 c6                	mov    esi,eax
c001207d:	8b 1d 34 8d 02 c0    	mov    ebx,DWORD PTR ds:0xc0028d34
c0012083:	83 ec 0c             	sub    esp,0xc
c0012086:	6a 02                	push   0x2
c0012088:	e8 14 9d ff ff       	call   c000bda1 <Virt::allocateKernelVirtualPages(int)>
c001208d:	83 c4 10             	add    esp,0x10
c0012090:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0012094:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001209a:	83 ec 0c             	sub    esp,0xc
c001209d:	6a 01                	push   0x1
c001209f:	6a 02                	push   0x2
c00120a1:	50                   	push   eax
c00120a2:	52                   	push   edx
c00120a3:	53                   	push   ebx
c00120a4:	e8 59 a6 ff ff       	call   c000c702 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00120a9:	83 c4 20             	add    esp,0x20
c00120ac:	09 f0                	or     eax,esi
c00120ae:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00120b2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00120b6:	25 ff 0f 00 00       	and    eax,0xfff
c00120bb:	89 c6                	mov    esi,eax
c00120bd:	8b 1d 34 8d 02 c0    	mov    ebx,DWORD PTR ds:0xc0028d34
c00120c3:	83 ec 0c             	sub    esp,0xc
c00120c6:	6a 02                	push   0x2
c00120c8:	e8 d4 9c ff ff       	call   c000bda1 <Virt::allocateKernelVirtualPages(int)>
c00120cd:	83 c4 10             	add    esp,0x10
c00120d0:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00120d4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00120da:	83 ec 0c             	sub    esp,0xc
c00120dd:	6a 01                	push   0x1
c00120df:	6a 02                	push   0x2
c00120e1:	50                   	push   eax
c00120e2:	52                   	push   edx
c00120e3:	53                   	push   ebx
c00120e4:	e8 19 a6 ff ff       	call   c000c702 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00120e9:	83 c4 20             	add    esp,0x20
c00120ec:	09 f0                	or     eax,esi
c00120ee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00120f2:	83 ec 04             	sub    esp,0x4
c00120f5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00120f9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00120fd:	68 9c 5d 02 c0       	push   0xc0025d9c
c0012102:	e8 10 b0 ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0012107:	83 c4 10             	add    esp,0x10
c001210a:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c001210f:	75 13                	jne    c0012124 <findRSDT(unsigned char*)+0x194>
c0012111:	c6 05 60 94 02 c0 00 	mov    BYTE PTR ds:0xc0029460,0x0
c0012118:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001211c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0012120:	eb 22                	jmp    c0012144 <findRSDT(unsigned char*)+0x1b4>
c0012122:	66 90                	xchg   ax,ax
c0012124:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0012129:	75 11                	jne    c001213c <findRSDT(unsigned char*)+0x1ac>
c001212b:	c6 05 60 94 02 c0 01 	mov    BYTE PTR ds:0xc0029460,0x1
c0012132:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0012136:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001213a:	eb 08                	jmp    c0012144 <findRSDT(unsigned char*)+0x1b4>
c001213c:	b8 00 00 00 00       	mov    eax,0x0
c0012141:	eb 05                	jmp    c0012148 <findRSDT(unsigned char*)+0x1b8>
c0012143:	90                   	nop
c0012144:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0012148:	83 c4 50             	add    esp,0x50
c001214b:	5b                   	pop    ebx
c001214c:	5e                   	pop    esi
c001214d:	5f                   	pop    edi
c001214e:	c3                   	ret    
c001214f:	90                   	nop

c0012150 <findDataTable(unsigned char*, char*)>:
c0012150:	83 ec 1c             	sub    esp,0x1c
c0012153:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c0012158:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001215e:	83 e0 04             	and    eax,0x4
c0012161:	84 c0                	test   al,al
c0012163:	75 07                	jne    c001216c <findDataTable(unsigned char*, char*)+0x1c>
c0012165:	b8 00 00 00 00       	mov    eax,0x0
c001216a:	eb 58                	jmp    c00121c4 <findDataTable(unsigned char*, char*)+0x74>
c001216c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012174:	a1 4c 92 02 c0       	mov    eax,ds:0xc002924c
c0012179:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001217d:	7d 3d                	jge    c00121bc <findDataTable(unsigned char*, char*)+0x6c>
c001217f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012183:	c1 e0 03             	shl    eax,0x3
c0012186:	05 60 92 02 c0       	add    eax,0xc0029260
c001218b:	83 ec 04             	sub    esp,0x4
c001218e:	6a 04                	push   0x4
c0012190:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012194:	50                   	push   eax
c0012195:	e8 f6 e3 fe ff       	call   c0000590 <memcmp>
c001219a:	83 c4 10             	add    esp,0x10
c001219d:	85 c0                	test   eax,eax
c001219f:	0f 94 c0             	sete   al
c00121a2:	84 c0                	test   al,al
c00121a4:	74 0e                	je     c00121b4 <findDataTable(unsigned char*, char*)+0x64>
c00121a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121aa:	8b 04 c5 64 92 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd6d9c]
c00121b1:	eb 11                	jmp    c00121c4 <findDataTable(unsigned char*, char*)+0x74>
c00121b3:	90                   	nop
c00121b4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00121b8:	eb ba                	jmp    c0012174 <findDataTable(unsigned char*, char*)+0x24>
c00121ba:	66 90                	xchg   ax,ax
c00121bc:	b8 00 00 00 00       	mov    eax,0x0
c00121c1:	8d 76 00             	lea    esi,[esi+0x0]
c00121c4:	83 c4 1c             	add    esp,0x1c
c00121c7:	c3                   	ret    

c00121c8 <scanMADT()>:
c00121c8:	53                   	push   ebx
c00121c9:	83 ec 38             	sub    esp,0x38
c00121cc:	83 ec 0c             	sub    esp,0xc
c00121cf:	68 17 5f 02 c0       	push   0xc0025f17
c00121d4:	e8 68 7c ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00121d9:	83 c4 10             	add    esp,0x10
c00121dc:	a1 20 8c 02 c0       	mov    eax,ds:0xc0028c20
c00121e1:	25 00 04 00 00       	and    eax,0x400
c00121e6:	74 14                	je     c00121fc <scanMADT()+0x34>
c00121e8:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c00121ed:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00121f3:	83 e2 fb             	and    edx,0xfffffffb
c00121f6:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00121fc:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c0012201:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012207:	83 e0 04             	and    eax,0x4
c001220a:	84 c0                	test   al,al
c001220c:	0f 84 82 04 00 00    	je     c0012694 <scanMADT()+0x4cc>
c0012212:	83 ec 0c             	sub    esp,0xc
c0012215:	68 24 5f 02 c0       	push   0xc0025f24
c001221a:	e8 22 7c ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001221f:	83 c4 10             	add    esp,0x10
c0012222:	e8 31 fa ff ff       	call   c0011c58 <findRSDP()>
c0012227:	a3 6c 94 02 c0       	mov    ds:0xc002946c,eax
c001222c:	a1 6c 94 02 c0       	mov    eax,ds:0xc002946c
c0012231:	85 c0                	test   eax,eax
c0012233:	75 1b                	jne    c0012250 <scanMADT()+0x88>
c0012235:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c001223a:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0012240:	83 e2 fb             	and    edx,0xfffffffb
c0012243:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0012249:	e9 4e 04 00 00       	jmp    c001269c <scanMADT()+0x4d4>
c001224e:	66 90                	xchg   ax,ax
c0012250:	83 ec 0c             	sub    esp,0xc
c0012253:	68 36 5f 02 c0       	push   0xc0025f36
c0012258:	e8 e4 7b ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001225d:	83 c4 10             	add    esp,0x10
c0012260:	a1 6c 94 02 c0       	mov    eax,ds:0xc002946c
c0012265:	83 ec 0c             	sub    esp,0xc
c0012268:	50                   	push   eax
c0012269:	e8 22 fd ff ff       	call   c0011f90 <findRSDT(unsigned char*)>
c001226e:	83 c4 10             	add    esp,0x10
c0012271:	a3 68 94 02 c0       	mov    ds:0xc0029468,eax
c0012276:	a1 68 94 02 c0       	mov    eax,ds:0xc0029468
c001227b:	85 c0                	test   eax,eax
c001227d:	75 19                	jne    c0012298 <scanMADT()+0xd0>
c001227f:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c0012284:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001228a:	83 e2 fb             	and    edx,0xfffffffb
c001228d:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0012293:	e9 04 04 00 00       	jmp    c001269c <scanMADT()+0x4d4>
c0012298:	83 ec 0c             	sub    esp,0xc
c001229b:	68 46 5f 02 c0       	push   0xc0025f46
c00122a0:	e8 9c 7b ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00122a5:	83 c4 10             	add    esp,0x10
c00122a8:	a1 68 94 02 c0       	mov    eax,ds:0xc0029468
c00122ad:	83 ec 0c             	sub    esp,0xc
c00122b0:	50                   	push   eax
c00122b1:	e8 76 fa ff ff       	call   c0011d2c <loadACPITables(unsigned char*)>
c00122b6:	83 c4 10             	add    esp,0x10
c00122b9:	a1 68 94 02 c0       	mov    eax,ds:0xc0029468
c00122be:	83 ec 08             	sub    esp,0x8
c00122c1:	68 5e 5f 02 c0       	push   0xc0025f5e
c00122c6:	50                   	push   eax
c00122c7:	e8 84 fe ff ff       	call   c0012150 <findDataTable(unsigned char*, char*)>
c00122cc:	83 c4 10             	add    esp,0x10
c00122cf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00122d3:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00122d8:	75 1a                	jne    c00122f4 <scanMADT()+0x12c>
c00122da:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c00122df:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00122e5:	83 e2 fe             	and    edx,0xfffffffe
c00122e8:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00122ee:	e9 a9 03 00 00       	jmp    c001269c <scanMADT()+0x4d4>
c00122f3:	90                   	nop
c00122f4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00122fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012300:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012303:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0012307:	0f 87 8f 03 00 00    	ja     c001269c <scanMADT()+0x4d4>
c001230d:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0012315:	0f 87 81 03 00 00    	ja     c001269c <scanMADT()+0x4d4>
c001231b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001231f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0012323:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012327:	8d 50 01             	lea    edx,[eax+0x1]
c001232a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001232e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012332:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0012336:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001233a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001233e:	8d 50 01             	lea    edx,[eax+0x1]
c0012341:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0012345:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012349:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001234d:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0012351:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0012356:	0f 86 3c 03 00 00    	jbe    c0012698 <scanMADT()+0x4d0>
c001235c:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0012361:	75 59                	jne    c00123bc <scanMADT()+0x1f4>
c0012363:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012367:	8d 50 01             	lea    edx,[eax+0x1]
c001236a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001236e:	8a 15 60 96 02 c0    	mov    dl,BYTE PTR ds:0xc0029660
c0012374:	0f b6 d2             	movzx  edx,dl
c0012377:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001237b:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001237f:	88 82 a0 96 02 c0    	mov    BYTE PTR [edx-0x3ffd6960],al
c0012385:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012389:	8d 50 01             	lea    edx,[eax+0x1]
c001238c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0012390:	8a 15 60 96 02 c0    	mov    dl,BYTE PTR ds:0xc0029660
c0012396:	8d 4a 01             	lea    ecx,[edx+0x1]
c0012399:	88 0d 60 96 02 c0    	mov    BYTE PTR ds:0xc0029660,cl
c001239f:	0f b6 d2             	movzx  edx,dl
c00123a2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00123a6:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00123aa:	88 82 80 96 02 c0    	mov    BYTE PTR [edx-0x3ffd6980],al
c00123b0:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00123b5:	e9 c6 02 00 00       	jmp    c0012680 <scanMADT()+0x4b8>
c00123ba:	66 90                	xchg   ax,ax
c00123bc:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c00123c1:	0f 85 15 01 00 00    	jne    c00124dc <scanMADT()+0x314>
c00123c7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00123cb:	8d 50 01             	lea    edx,[eax+0x1]
c00123ce:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00123d2:	8a 15 20 95 02 c0    	mov    dl,BYTE PTR ds:0xc0029520
c00123d8:	0f b6 d2             	movzx  edx,dl
c00123db:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00123df:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00123e3:	88 82 40 95 02 c0    	mov    BYTE PTR [edx-0x3ffd6ac0],al
c00123e9:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c00123ed:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00123f1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00123f5:	01 d0                	add    eax,edx
c00123f7:	83 c0 2c             	add    eax,0x2c
c00123fa:	8a 00                	mov    al,BYTE PTR [eax]
c00123fc:	0f b6 d0             	movzx  edx,al
c00123ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012403:	8d 48 01             	lea    ecx,[eax+0x1]
c0012406:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001240a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001240e:	0f b6 c0             	movzx  eax,al
c0012411:	c1 e0 08             	shl    eax,0x8
c0012414:	89 d1                	mov    ecx,edx
c0012416:	09 c1                	or     ecx,eax
c0012418:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001241c:	8d 50 02             	lea    edx,[eax+0x2]
c001241f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012423:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0012427:	0f b6 c0             	movzx  eax,al
c001242a:	c1 e0 10             	shl    eax,0x10
c001242d:	09 c1                	or     ecx,eax
c001242f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012433:	8d 50 03             	lea    edx,[eax+0x3]
c0012436:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001243a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001243e:	0f b6 c0             	movzx  eax,al
c0012441:	c1 e0 18             	shl    eax,0x18
c0012444:	09 c1                	or     ecx,eax
c0012446:	89 ca                	mov    edx,ecx
c0012448:	a0 20 95 02 c0       	mov    al,ds:0xc0029520
c001244d:	0f b6 c0             	movzx  eax,al
c0012450:	89 14 85 60 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6aa0],edx
c0012457:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001245c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012460:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012464:	01 d0                	add    eax,edx
c0012466:	83 c0 2c             	add    eax,0x2c
c0012469:	8a 00                	mov    al,BYTE PTR [eax]
c001246b:	0f b6 d0             	movzx  edx,al
c001246e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012472:	8d 48 01             	lea    ecx,[eax+0x1]
c0012475:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012479:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001247d:	0f b6 c0             	movzx  eax,al
c0012480:	c1 e0 08             	shl    eax,0x8
c0012483:	89 d1                	mov    ecx,edx
c0012485:	09 c1                	or     ecx,eax
c0012487:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001248b:	8d 50 02             	lea    edx,[eax+0x2]
c001248e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012492:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0012496:	0f b6 c0             	movzx  eax,al
c0012499:	c1 e0 10             	shl    eax,0x10
c001249c:	09 c1                	or     ecx,eax
c001249e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00124a2:	8d 50 03             	lea    edx,[eax+0x3]
c00124a5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00124a9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00124ad:	0f b6 c0             	movzx  eax,al
c00124b0:	c1 e0 18             	shl    eax,0x18
c00124b3:	09 c1                	or     ecx,eax
c00124b5:	89 ca                	mov    edx,ecx
c00124b7:	a0 20 95 02 c0       	mov    al,ds:0xc0029520
c00124bc:	0f b6 c0             	movzx  eax,al
c00124bf:	89 14 85 e0 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6a20],edx
c00124c6:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00124cb:	a0 20 95 02 c0       	mov    al,ds:0xc0029520
c00124d0:	40                   	inc    eax
c00124d1:	a2 20 95 02 c0       	mov    ds:0xc0029520,al
c00124d6:	e9 a5 01 00 00       	jmp    c0012680 <scanMADT()+0x4b8>
c00124db:	90                   	nop
c00124dc:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c00124e1:	0f 85 e9 00 00 00    	jne    c00125d0 <scanMADT()+0x408>
c00124e7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00124eb:	8d 50 01             	lea    edx,[eax+0x1]
c00124ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00124f2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00124f6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00124fa:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c00124fe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012502:	8d 50 01             	lea    edx,[eax+0x1]
c0012505:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0012509:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001250d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0012511:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0012515:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012519:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001251d:	01 d0                	add    eax,edx
c001251f:	83 c0 2c             	add    eax,0x2c
c0012522:	8a 00                	mov    al,BYTE PTR [eax]
c0012524:	0f b6 d0             	movzx  edx,al
c0012527:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001252b:	8d 48 01             	lea    ecx,[eax+0x1]
c001252e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012532:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0012536:	0f b6 c0             	movzx  eax,al
c0012539:	c1 e0 08             	shl    eax,0x8
c001253c:	89 d1                	mov    ecx,edx
c001253e:	09 c1                	or     ecx,eax
c0012540:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012544:	8d 50 02             	lea    edx,[eax+0x2]
c0012547:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001254b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001254f:	0f b6 c0             	movzx  eax,al
c0012552:	c1 e0 10             	shl    eax,0x10
c0012555:	09 c1                	or     ecx,eax
c0012557:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001255b:	8d 50 03             	lea    edx,[eax+0x3]
c001255e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012562:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0012566:	0f b6 c0             	movzx  eax,al
c0012569:	c1 e0 18             	shl    eax,0x18
c001256c:	09 c8                	or     eax,ecx
c001256e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012572:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0012577:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001257b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001257f:	01 d0                	add    eax,edx
c0012581:	83 c0 2c             	add    eax,0x2c
c0012584:	8a 00                	mov    al,BYTE PTR [eax]
c0012586:	0f b6 c0             	movzx  eax,al
c0012589:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001258d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0012590:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012594:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0012598:	0f b6 d2             	movzx  edx,dl
c001259b:	c1 e2 08             	shl    edx,0x8
c001259e:	09 d0                	or     eax,edx
c00125a0:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00125a5:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00125aa:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00125af:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00125b3:	88 90 00 83 02 c0    	mov    BYTE PTR [eax-0x3ffd7d00],dl
c00125b9:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00125be:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00125c3:	66 89 84 12 00 95 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd6b00],ax
c00125cb:	e9 b0 00 00 00       	jmp    c0012680 <scanMADT()+0x4b8>
c00125d0:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c00125d5:	0f 85 99 00 00 00    	jne    c0012674 <scanMADT()+0x4ac>
c00125db:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00125df:	8d 50 01             	lea    edx,[eax+0x1]
c00125e2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00125e6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00125ea:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00125ee:	0f b6 c0             	movzx  eax,al
c00125f1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00125f5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00125f9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00125fd:	01 d0                	add    eax,edx
c00125ff:	83 c0 2c             	add    eax,0x2c
c0012602:	8a 00                	mov    al,BYTE PTR [eax]
c0012604:	0f b6 d0             	movzx  edx,al
c0012607:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001260b:	8d 48 01             	lea    ecx,[eax+0x1]
c001260e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012612:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0012616:	0f b6 c0             	movzx  eax,al
c0012619:	c1 e0 08             	shl    eax,0x8
c001261c:	09 d0                	or     eax,edx
c001261e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012622:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0012627:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001262b:	8d 50 01             	lea    edx,[eax+0x1]
c001262e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0012632:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012636:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001263a:	0f b6 c0             	movzx  eax,al
c001263d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012641:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012645:	c1 e0 08             	shl    eax,0x8
c0012648:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001264c:	89 c1                	mov    ecx,eax
c001264e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012652:	c1 e0 18             	shl    eax,0x18
c0012655:	89 c3                	mov    ebx,eax
c0012657:	a1 70 94 02 c0       	mov    eax,ds:0xc0029470
c001265c:	8d 50 01             	lea    edx,[eax+0x1]
c001265f:	89 15 70 94 02 c0    	mov    DWORD PTR ds:0xc0029470,edx
c0012665:	09 d9                	or     ecx,ebx
c0012667:	89 ca                	mov    edx,ecx
c0012669:	89 14 85 80 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6b80],edx
c0012670:	eb 0e                	jmp    c0012680 <scanMADT()+0x4b8>
c0012672:	66 90                	xchg   ax,ax
c0012674:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0012679:	75 05                	jne    c0012680 <scanMADT()+0x4b8>
c001267b:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0012680:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0012685:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012689:	01 d0                	add    eax,edx
c001268b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001268f:	e9 68 fc ff ff       	jmp    c00122fc <scanMADT()+0x134>
c0012694:	90                   	nop
c0012695:	eb 05                	jmp    c001269c <scanMADT()+0x4d4>
c0012697:	90                   	nop
c0012698:	90                   	nop
c0012699:	8d 76 00             	lea    esi,[esi+0x0]
c001269c:	83 c4 38             	add    esp,0x38
c001269f:	5b                   	pop    ebx
c00126a0:	c3                   	ret    
c00126a1:	90                   	nop
c00126a2:	66 90                	xchg   ax,ax

c00126a4 <ACPI::ACPI()>:
c00126a4:	83 ec 0c             	sub    esp,0xc
c00126a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00126ab:	83 ec 08             	sub    esp,0x8
c00126ae:	68 63 5f 02 c0       	push   0xc0025f63
c00126b3:	50                   	push   eax
c00126b4:	e8 d5 c1 ff ff       	call   c000e88e <Device::Device(char const*)>
c00126b9:	83 c4 10             	add    esp,0x10
c00126bc:	ba 24 61 02 c0       	mov    edx,0xc0026124
c00126c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00126c5:	89 10                	mov    DWORD PTR [eax],edx
c00126c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00126cb:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00126d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00126d6:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00126e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00126e4:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c00126ee:	83 ec 0c             	sub    esp,0xc
c00126f1:	68 68 5f 02 c0       	push   0xc0025f68
c00126f6:	e8 46 77 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00126fb:	83 c4 10             	add    esp,0x10
c00126fe:	e8 c5 fa ff ff       	call   c00121c8 <scanMADT()>
c0012703:	90                   	nop
c0012704:	83 c4 0c             	add    esp,0xc
c0012707:	c3                   	ret    

c0012708 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0012708:	83 ec 2c             	sub    esp,0x2c
c001270b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001270f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012713:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0012717:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001271b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0012720:	88 d0                	mov    al,dl
c0012722:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0012726:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001272b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012733:	90                   	nop
c0012734:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012738:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001273e:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0012742:	0f 8d 9c 00 00 00    	jge    c00127e4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c0012748:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001274c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012750:	83 c2 2a             	add    edx,0x2a
c0012753:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0012757:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c001275c:	75 7a                	jne    c00127d8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c001275e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012762:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012766:	83 c2 2a             	add    edx,0x2a
c0012769:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001276d:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0012771:	75 65                	jne    c00127d8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c0012773:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012778:	74 3a                	je     c00127b4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c001277a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001277e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012782:	83 c2 2a             	add    edx,0x2a
c0012785:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0012789:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001278d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012790:	39 c2                	cmp    edx,eax
c0012792:	74 10                	je     c00127a4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c0012794:	83 ec 0c             	sub    esp,0xc
c0012797:	68 bc 5d 02 c0       	push   0xc0025dbc
c001279c:	e8 58 2a 00 00       	call   c00151f9 <Krnl::panic(char const*)>
c00127a1:	83 c4 10             	add    esp,0x10
c00127a4:	83 ec 0c             	sub    esp,0xc
c00127a7:	68 76 5f 02 c0       	push   0xc0025f76
c00127ac:	e8 48 2a 00 00       	call   c00151f9 <Krnl::panic(char const*)>
c00127b1:	83 c4 10             	add    esp,0x10
c00127b4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00127b8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00127bc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00127c0:	83 c2 2a             	add    edx,0x2a
c00127c3:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00127c7:	8b 02                	mov    eax,DWORD PTR [edx]
c00127c9:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00127cc:	89 01                	mov    DWORD PTR [ecx],eax
c00127ce:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00127d1:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00127d6:	66 90                	xchg   ax,ax
c00127d8:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00127dc:	e9 53 ff ff ff       	jmp    c0012734 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c00127e1:	8d 76 00             	lea    esi,[esi+0x0]
c00127e4:	90                   	nop
c00127e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127e9:	83 c4 2c             	add    esp,0x2c
c00127ec:	c2 04 00             	ret    0x4
c00127ef:	90                   	nop

c00127f0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00127f0:	83 ec 1c             	sub    esp,0x1c
c00127f3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00127f7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00127fb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00127ff:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0012804:	88 c8                	mov    al,cl
c0012806:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001280a:	88 d0                	mov    al,dl
c001280c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0012810:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012814:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001281a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001281e:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0012821:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0012825:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0012829:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001282d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0012833:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0012837:	8d 48 2a             	lea    ecx,[eax+0x2a]
c001283a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001283e:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0012843:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012847:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001284d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0012851:	8d 48 01             	lea    ecx,[eax+0x1]
c0012854:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012858:	83 c2 2a             	add    edx,0x2a
c001285b:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001285f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012863:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0012869:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001286d:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0012870:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012874:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0012878:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001287c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0012882:	8d 50 01             	lea    edx,[eax+0x1]
c0012885:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012889:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c001288f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012893:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0012899:	3d 00 02 00 00       	cmp    eax,0x200
c001289e:	75 10                	jne    c00128b0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c00128a0:	83 ec 0c             	sub    esp,0xc
c00128a3:	68 85 5f 02 c0       	push   0xc0025f85
c00128a8:	e8 4c 29 00 00       	call   c00151f9 <Krnl::panic(char const*)>
c00128ad:	83 c4 10             	add    esp,0x10
c00128b0:	90                   	nop
c00128b1:	83 c4 1c             	add    esp,0x1c
c00128b4:	c3                   	ret    
c00128b5:	90                   	nop
c00128b6:	66 90                	xchg   ax,ax

c00128b8 <ACPI::setScreenBrightnessLevel(void*, int)>:
c00128b8:	b8 00 00 00 00       	mov    eax,0x0
c00128bd:	c3                   	ret    
c00128be:	66 90                	xchg   ax,ax

c00128c0 <ACPI::detectPCI()>:
c00128c0:	53                   	push   ebx
c00128c1:	83 ec 68             	sub    esp,0x68
c00128c4:	c6 44 24 5f 00       	mov    BYTE PTR [esp+0x5f],0x0
c00128c9:	c6 44 24 5e 00       	mov    BYTE PTR [esp+0x5e],0x0
c00128ce:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c00128d3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00128d9:	83 e0 04             	and    eax,0x4
c00128dc:	84 c0                	test   al,al
c00128de:	74 2c                	je     c001290c <ACPI::detectPCI()+0x4c>
c00128e0:	a1 68 94 02 c0       	mov    eax,ds:0xc0029468
c00128e5:	83 ec 08             	sub    esp,0x8
c00128e8:	68 a2 5f 02 c0       	push   0xc0025fa2
c00128ed:	50                   	push   eax
c00128ee:	e8 5d f8 ff ff       	call   c0012150 <findDataTable(unsigned char*, char*)>
c00128f3:	83 c4 10             	add    esp,0x10
c00128f6:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00128fa:	83 7c 24 58 00       	cmp    DWORD PTR [esp+0x58],0x0
c00128ff:	74 0b                	je     c001290c <ACPI::detectPCI()+0x4c>
c0012901:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0012906:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c001290b:	90                   	nop
c001290c:	c7 44 24 54 5f 0c 00 00 	mov    DWORD PTR [esp+0x54],0xc5f
c0012914:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012918:	8a 00                	mov    al,BYTE PTR [eax]
c001291a:	3c 01                	cmp    al,0x1
c001291c:	75 0e                	jne    c001292c <ACPI::detectPCI()+0x6c>
c001291e:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0012923:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c0012928:	eb 2a                	jmp    c0012954 <ACPI::detectPCI()+0x94>
c001292a:	66 90                	xchg   ax,ax
c001292c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012930:	8a 00                	mov    al,BYTE PTR [eax]
c0012932:	3c 02                	cmp    al,0x2
c0012934:	75 1e                	jne    c0012954 <ACPI::detectPCI()+0x94>
c0012936:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c001293b:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0012940:	74 12                	je     c0012954 <ACPI::detectPCI()+0x94>
c0012942:	83 ec 0c             	sub    esp,0xc
c0012945:	68 ec 5d 02 c0       	push   0xc0025dec
c001294a:	e8 aa 28 00 00       	call   c00151f9 <Krnl::panic(char const*)>
c001294f:	83 c4 10             	add    esp,0x10
c0012952:	66 90                	xchg   ax,ax
c0012954:	8a 44 24 5f          	mov    al,BYTE PTR [esp+0x5f]
c0012958:	83 f0 01             	xor    eax,0x1
c001295b:	84 c0                	test   al,al
c001295d:	74 41                	je     c00129a0 <ACPI::detectPCI()+0xe0>
c001295f:	e8 ec d7 fe ff       	call   c0000150 <manualPCIProbe>
c0012964:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0012968:	83 7c 24 50 01       	cmp    DWORD PTR [esp+0x50],0x1
c001296d:	75 0d                	jne    c001297c <ACPI::detectPCI()+0xbc>
c001296f:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0012974:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c0012979:	eb 25                	jmp    c00129a0 <ACPI::detectPCI()+0xe0>
c001297b:	90                   	nop
c001297c:	83 7c 24 50 02       	cmp    DWORD PTR [esp+0x50],0x2
c0012981:	75 1d                	jne    c00129a0 <ACPI::detectPCI()+0xe0>
c0012983:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0012988:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c001298d:	74 11                	je     c00129a0 <ACPI::detectPCI()+0xe0>
c001298f:	83 ec 0c             	sub    esp,0xc
c0012992:	68 ec 5d 02 c0       	push   0xc0025dec
c0012997:	e8 5d 28 00 00       	call   c00151f9 <Krnl::panic(char const*)>
c001299c:	83 c4 10             	add    esp,0x10
c001299f:	90                   	nop
c00129a0:	80 7c 24 5f 00       	cmp    BYTE PTR [esp+0x5f],0x0
c00129a5:	0f 84 49 03 00 00    	je     c0012cf4 <ACPI::detectPCI()+0x434>
c00129ab:	83 ec 0c             	sub    esp,0xc
c00129ae:	68 a7 5f 02 c0       	push   0xc0025fa7
c00129b3:	e8 89 74 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00129b8:	83 c4 10             	add    esp,0x10
c00129bb:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c00129c0:	0f 84 8e 00 00 00    	je     c0012a54 <ACPI::detectPCI()+0x194>
c00129c6:	a1 20 8c 02 c0       	mov    eax,ds:0xc0028c20
c00129cb:	25 00 08 00 00       	and    eax,0x800
c00129d0:	0f 84 16 01 00 00    	je     c0012aec <ACPI::detectPCI()+0x22c>
c00129d6:	83 ec 0c             	sub    esp,0xc
c00129d9:	68 14 5e 02 c0       	push   0xc0025e14
c00129de:	e8 5e 74 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00129e3:	83 c4 10             	add    esp,0x10
c00129e6:	a1 20 8c 02 c0       	mov    eax,ds:0xc0028c20
c00129eb:	25 80 00 00 00       	and    eax,0x80
c00129f0:	0f 85 f6 00 00 00    	jne    c0012aec <ACPI::detectPCI()+0x22c>
c00129f6:	66 90                	xchg   ax,ax
c00129f8:	66 c7 44 24 3a 60 00 	mov    WORD PTR [esp+0x3a],0x60
c00129ff:	66 8b 44 24 3a       	mov    ax,WORD PTR [esp+0x3a]
c0012a04:	89 c2                	mov    edx,eax
c0012a06:	ec                   	in     al,dx
c0012a07:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c0012a0b:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c0012a0f:	88 44 24 4f          	mov    BYTE PTR [esp+0x4f],al
c0012a13:	80 7c 24 4f 5a       	cmp    BYTE PTR [esp+0x4f],0x5a
c0012a18:	74 0a                	je     c0012a24 <ACPI::detectPCI()+0x164>
c0012a1a:	80 7c 24 4f 1c       	cmp    BYTE PTR [esp+0x4f],0x1c
c0012a1f:	74 03                	je     c0012a24 <ACPI::detectPCI()+0x164>
c0012a21:	eb d5                	jmp    c00129f8 <ACPI::detectPCI()+0x138>
c0012a23:	90                   	nop
c0012a24:	66 c7 44 24 36 60 00 	mov    WORD PTR [esp+0x36],0x60
c0012a2b:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c0012a30:	89 c2                	mov    edx,eax
c0012a32:	ec                   	in     al,dx
c0012a33:	88 44 24 35          	mov    BYTE PTR [esp+0x35],al
c0012a37:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c0012a3b:	88 44 24 4e          	mov    BYTE PTR [esp+0x4e],al
c0012a3f:	80 7c 24 4e 5a       	cmp    BYTE PTR [esp+0x4e],0x5a
c0012a44:	74 de                	je     c0012a24 <ACPI::detectPCI()+0x164>
c0012a46:	80 7c 24 4e 1c       	cmp    BYTE PTR [esp+0x4e],0x1c
c0012a4b:	0f 85 93 00 00 00    	jne    c0012ae4 <ACPI::detectPCI()+0x224>
c0012a51:	eb d1                	jmp    c0012a24 <ACPI::detectPCI()+0x164>
c0012a53:	90                   	nop
c0012a54:	8a 44 24 5e          	mov    al,BYTE PTR [esp+0x5e]
c0012a58:	83 f0 01             	xor    eax,0x1
c0012a5b:	84 c0                	test   al,al
c0012a5d:	0f 84 89 00 00 00    	je     c0012aec <ACPI::detectPCI()+0x22c>
c0012a63:	a1 20 8c 02 c0       	mov    eax,ds:0xc0028c20
c0012a68:	25 00 08 00 00       	and    eax,0x800
c0012a6d:	74 7d                	je     c0012aec <ACPI::detectPCI()+0x22c>
c0012a6f:	83 ec 0c             	sub    esp,0xc
c0012a72:	68 38 5e 02 c0       	push   0xc0025e38
c0012a77:	e8 c5 73 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0012a7c:	83 c4 10             	add    esp,0x10
c0012a7f:	a1 20 8c 02 c0       	mov    eax,ds:0xc0028c20
c0012a84:	25 80 00 00 00       	and    eax,0x80
c0012a89:	75 61                	jne    c0012aec <ACPI::detectPCI()+0x22c>
c0012a8b:	90                   	nop
c0012a8c:	66 c7 44 24 32 60 00 	mov    WORD PTR [esp+0x32],0x60
c0012a93:	66 8b 44 24 32       	mov    ax,WORD PTR [esp+0x32]
c0012a98:	89 c2                	mov    edx,eax
c0012a9a:	ec                   	in     al,dx
c0012a9b:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0012a9f:	8a 44 24 31          	mov    al,BYTE PTR [esp+0x31]
c0012aa3:	88 44 24 4d          	mov    BYTE PTR [esp+0x4d],al
c0012aa7:	80 7c 24 4d 5a       	cmp    BYTE PTR [esp+0x4d],0x5a
c0012aac:	74 0a                	je     c0012ab8 <ACPI::detectPCI()+0x1f8>
c0012aae:	80 7c 24 4d 1c       	cmp    BYTE PTR [esp+0x4d],0x1c
c0012ab3:	74 03                	je     c0012ab8 <ACPI::detectPCI()+0x1f8>
c0012ab5:	eb d5                	jmp    c0012a8c <ACPI::detectPCI()+0x1cc>
c0012ab7:	90                   	nop
c0012ab8:	66 c7 44 24 2e 60 00 	mov    WORD PTR [esp+0x2e],0x60
c0012abf:	66 8b 44 24 2e       	mov    ax,WORD PTR [esp+0x2e]
c0012ac4:	89 c2                	mov    edx,eax
c0012ac6:	ec                   	in     al,dx
c0012ac7:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0012acb:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c0012acf:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c0012ad3:	80 7c 24 4c 5a       	cmp    BYTE PTR [esp+0x4c],0x5a
c0012ad8:	74 de                	je     c0012ab8 <ACPI::detectPCI()+0x1f8>
c0012ada:	80 7c 24 4c 1c       	cmp    BYTE PTR [esp+0x4c],0x1c
c0012adf:	75 07                	jne    c0012ae8 <ACPI::detectPCI()+0x228>
c0012ae1:	eb d5                	jmp    c0012ab8 <ACPI::detectPCI()+0x1f8>
c0012ae3:	90                   	nop
c0012ae4:	90                   	nop
c0012ae5:	eb 05                	jmp    c0012aec <ACPI::detectPCI()+0x22c>
c0012ae7:	90                   	nop
c0012ae8:	90                   	nop
c0012ae9:	8d 76 00             	lea    esi,[esi+0x0]
c0012aec:	c7 44 24 28 5c 01 00 00 	mov    DWORD PTR [esp+0x28],0x15c
c0012af4:	83 ec 0c             	sub    esp,0xc
c0012af7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012afb:	e8 e7 72 ff ff       	call   c0009de7 <malloc>
c0012b00:	83 c4 10             	add    esp,0x10
c0012b03:	89 c3                	mov    ebx,eax
c0012b05:	83 ec 0c             	sub    esp,0xc
c0012b08:	53                   	push   ebx
c0012b09:	e8 ec b0 00 00       	call   c001dbfa <PCI::PCI()>
c0012b0e:	83 c4 10             	add    esp,0x10
c0012b11:	89 5c 24 48          	mov    DWORD PTR [esp+0x48],ebx
c0012b15:	a1 20 8c 02 c0       	mov    eax,ds:0xc0028c20
c0012b1a:	25 00 08 00 00       	and    eax,0x800
c0012b1f:	74 7b                	je     c0012b9c <ACPI::detectPCI()+0x2dc>
c0012b21:	83 ec 0c             	sub    esp,0xc
c0012b24:	68 bf 5f 02 c0       	push   0xc0025fbf
c0012b29:	e8 13 73 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0012b2e:	83 c4 10             	add    esp,0x10
c0012b31:	a1 20 8c 02 c0       	mov    eax,ds:0xc0028c20
c0012b36:	25 80 00 00 00       	and    eax,0x80
c0012b3b:	75 5f                	jne    c0012b9c <ACPI::detectPCI()+0x2dc>
c0012b3d:	8d 76 00             	lea    esi,[esi+0x0]
c0012b40:	66 c7 44 24 26 60 00 	mov    WORD PTR [esp+0x26],0x60
c0012b47:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0012b4c:	89 c2                	mov    edx,eax
c0012b4e:	ec                   	in     al,dx
c0012b4f:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c0012b53:	8a 44 24 25          	mov    al,BYTE PTR [esp+0x25]
c0012b57:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0012b5b:	80 7c 24 47 5a       	cmp    BYTE PTR [esp+0x47],0x5a
c0012b60:	74 0a                	je     c0012b6c <ACPI::detectPCI()+0x2ac>
c0012b62:	80 7c 24 47 1c       	cmp    BYTE PTR [esp+0x47],0x1c
c0012b67:	74 03                	je     c0012b6c <ACPI::detectPCI()+0x2ac>
c0012b69:	eb d5                	jmp    c0012b40 <ACPI::detectPCI()+0x280>
c0012b6b:	90                   	nop
c0012b6c:	66 c7 44 24 22 60 00 	mov    WORD PTR [esp+0x22],0x60
c0012b73:	66 8b 44 24 22       	mov    ax,WORD PTR [esp+0x22]
c0012b78:	89 c2                	mov    edx,eax
c0012b7a:	ec                   	in     al,dx
c0012b7b:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0012b7f:	8a 44 24 21          	mov    al,BYTE PTR [esp+0x21]
c0012b83:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012b87:	80 7c 24 46 5a       	cmp    BYTE PTR [esp+0x46],0x5a
c0012b8c:	74 de                	je     c0012b6c <ACPI::detectPCI()+0x2ac>
c0012b8e:	80 7c 24 46 1c       	cmp    BYTE PTR [esp+0x46],0x1c
c0012b93:	75 03                	jne    c0012b98 <ACPI::detectPCI()+0x2d8>
c0012b95:	eb d5                	jmp    c0012b6c <ACPI::detectPCI()+0x2ac>
c0012b97:	90                   	nop
c0012b98:	90                   	nop
c0012b99:	8d 76 00             	lea    esi,[esi+0x0]
c0012b9c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0012ba0:	83 ec 08             	sub    esp,0x8
c0012ba3:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0012ba7:	50                   	push   eax
c0012ba8:	e8 dd ba ff ff       	call   c000e68a <Device::addChild(Device*)>
c0012bad:	83 c4 10             	add    esp,0x10
c0012bb0:	a1 20 8c 02 c0       	mov    eax,ds:0xc0028c20
c0012bb5:	25 00 08 00 00       	and    eax,0x800
c0012bba:	74 78                	je     c0012c34 <ACPI::detectPCI()+0x374>
c0012bbc:	83 ec 0c             	sub    esp,0xc
c0012bbf:	68 c5 5f 02 c0       	push   0xc0025fc5
c0012bc4:	e8 78 72 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0012bc9:	83 c4 10             	add    esp,0x10
c0012bcc:	a1 20 8c 02 c0       	mov    eax,ds:0xc0028c20
c0012bd1:	25 80 00 00 00       	and    eax,0x80
c0012bd6:	75 5c                	jne    c0012c34 <ACPI::detectPCI()+0x374>
c0012bd8:	66 c7 44 24 1e 60 00 	mov    WORD PTR [esp+0x1e],0x60
c0012bdf:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0012be4:	89 c2                	mov    edx,eax
c0012be6:	ec                   	in     al,dx
c0012be7:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c0012beb:	8a 44 24 1d          	mov    al,BYTE PTR [esp+0x1d]
c0012bef:	88 44 24 45          	mov    BYTE PTR [esp+0x45],al
c0012bf3:	80 7c 24 45 5a       	cmp    BYTE PTR [esp+0x45],0x5a
c0012bf8:	74 0a                	je     c0012c04 <ACPI::detectPCI()+0x344>
c0012bfa:	80 7c 24 45 1c       	cmp    BYTE PTR [esp+0x45],0x1c
c0012bff:	74 03                	je     c0012c04 <ACPI::detectPCI()+0x344>
c0012c01:	eb d5                	jmp    c0012bd8 <ACPI::detectPCI()+0x318>
c0012c03:	90                   	nop
c0012c04:	66 c7 44 24 1a 60 00 	mov    WORD PTR [esp+0x1a],0x60
c0012c0b:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0012c10:	89 c2                	mov    edx,eax
c0012c12:	ec                   	in     al,dx
c0012c13:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c0012c17:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c0012c1b:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c0012c1f:	80 7c 24 44 5a       	cmp    BYTE PTR [esp+0x44],0x5a
c0012c24:	74 de                	je     c0012c04 <ACPI::detectPCI()+0x344>
c0012c26:	80 7c 24 44 1c       	cmp    BYTE PTR [esp+0x44],0x1c
c0012c2b:	75 03                	jne    c0012c30 <ACPI::detectPCI()+0x370>
c0012c2d:	eb d5                	jmp    c0012c04 <ACPI::detectPCI()+0x344>
c0012c2f:	90                   	nop
c0012c30:	90                   	nop
c0012c31:	8d 76 00             	lea    esi,[esi+0x0]
c0012c34:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0012c38:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c3a:	83 c0 08             	add    eax,0x8
c0012c3d:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c3f:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0012c44:	74 0a                	je     c0012c50 <ACPI::detectPCI()+0x390>
c0012c46:	ba 01 00 00 00       	mov    edx,0x1
c0012c4b:	eb 0b                	jmp    c0012c58 <ACPI::detectPCI()+0x398>
c0012c4d:	8d 76 00             	lea    esi,[esi+0x0]
c0012c50:	ba 02 00 00 00       	mov    edx,0x2
c0012c55:	8d 76 00             	lea    esi,[esi+0x0]
c0012c58:	6a 00                	push   0x0
c0012c5a:	6a 00                	push   0x0
c0012c5c:	52                   	push   edx
c0012c5d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012c61:	ff d0                	call   eax
c0012c63:	83 c4 10             	add    esp,0x10
c0012c66:	a1 20 8c 02 c0       	mov    eax,ds:0xc0028c20
c0012c6b:	25 00 08 00 00       	and    eax,0x800
c0012c70:	0f 84 26 01 00 00    	je     c0012d9c <ACPI::detectPCI()+0x4dc>
c0012c76:	83 ec 0c             	sub    esp,0xc
c0012c79:	68 cb 5f 02 c0       	push   0xc0025fcb
c0012c7e:	e8 be 71 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0012c83:	83 c4 10             	add    esp,0x10
c0012c86:	a1 20 8c 02 c0       	mov    eax,ds:0xc0028c20
c0012c8b:	25 80 00 00 00       	and    eax,0x80
c0012c90:	0f 85 06 01 00 00    	jne    c0012d9c <ACPI::detectPCI()+0x4dc>
c0012c96:	66 90                	xchg   ax,ax
c0012c98:	66 c7 44 24 16 60 00 	mov    WORD PTR [esp+0x16],0x60
c0012c9f:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0012ca4:	89 c2                	mov    edx,eax
c0012ca6:	ec                   	in     al,dx
c0012ca7:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012cab:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0012caf:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0012cb3:	80 7c 24 43 5a       	cmp    BYTE PTR [esp+0x43],0x5a
c0012cb8:	74 0a                	je     c0012cc4 <ACPI::detectPCI()+0x404>
c0012cba:	80 7c 24 43 1c       	cmp    BYTE PTR [esp+0x43],0x1c
c0012cbf:	74 03                	je     c0012cc4 <ACPI::detectPCI()+0x404>
c0012cc1:	eb d5                	jmp    c0012c98 <ACPI::detectPCI()+0x3d8>
c0012cc3:	90                   	nop
c0012cc4:	66 c7 44 24 12 60 00 	mov    WORD PTR [esp+0x12],0x60
c0012ccb:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0012cd0:	89 c2                	mov    edx,eax
c0012cd2:	ec                   	in     al,dx
c0012cd3:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0012cd7:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0012cdb:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c0012cdf:	80 7c 24 42 5a       	cmp    BYTE PTR [esp+0x42],0x5a
c0012ce4:	74 de                	je     c0012cc4 <ACPI::detectPCI()+0x404>
c0012ce6:	80 7c 24 42 1c       	cmp    BYTE PTR [esp+0x42],0x1c
c0012ceb:	0f 85 a7 00 00 00    	jne    c0012d98 <ACPI::detectPCI()+0x4d8>
c0012cf1:	eb d1                	jmp    c0012cc4 <ACPI::detectPCI()+0x404>
c0012cf3:	90                   	nop
c0012cf4:	83 ec 0c             	sub    esp,0xc
c0012cf7:	68 d1 5f 02 c0       	push   0xc0025fd1
c0012cfc:	e8 16 a4 ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0012d01:	83 c4 10             	add    esp,0x10
c0012d04:	83 ec 0c             	sub    esp,0xc
c0012d07:	68 dc 5f 02 c0       	push   0xc0025fdc
c0012d0c:	e8 30 71 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0012d11:	83 c4 10             	add    esp,0x10
c0012d14:	c7 44 24 0c 70 02 00 00 	mov    DWORD PTR [esp+0xc],0x270
c0012d1c:	83 ec 0c             	sub    esp,0xc
c0012d1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012d23:	e8 bf 70 ff ff       	call   c0009de7 <malloc>
c0012d28:	83 c4 10             	add    esp,0x10
c0012d2b:	89 c3                	mov    ebx,eax
c0012d2d:	83 ec 0c             	sub    esp,0xc
c0012d30:	53                   	push   ebx
c0012d31:	e8 2e c0 00 00       	call   c001ed64 <IDE::IDE()>
c0012d36:	83 c4 10             	add    esp,0x10
c0012d39:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c0012d3d:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0012d41:	83 ec 08             	sub    esp,0x8
c0012d44:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012d48:	50                   	push   eax
c0012d49:	e8 3c b9 ff ff       	call   c000e68a <Device::addChild(Device*)>
c0012d4e:	83 c4 10             	add    esp,0x10
c0012d51:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012d55:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c0012d5f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012d63:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0012d6c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012d70:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0012d79:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012d7d:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d7f:	83 c0 08             	add    eax,0x8
c0012d82:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d84:	6a 00                	push   0x0
c0012d86:	6a 00                	push   0x0
c0012d88:	6a 00                	push   0x0
c0012d8a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012d8e:	ff d0                	call   eax
c0012d90:	83 c4 10             	add    esp,0x10
c0012d93:	eb 07                	jmp    c0012d9c <ACPI::detectPCI()+0x4dc>
c0012d95:	8d 76 00             	lea    esi,[esi+0x0]
c0012d98:	90                   	nop
c0012d99:	8d 76 00             	lea    esi,[esi+0x0]
c0012d9c:	90                   	nop
c0012d9d:	83 c4 68             	add    esp,0x68
c0012da0:	5b                   	pop    ebx
c0012da1:	c3                   	ret    
c0012da2:	66 90                	xchg   ax,ax

c0012da4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0012da4:	83 ec 1c             	sub    esp,0x1c
c0012da7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012dab:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0012dae:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012db2:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c0012db7:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0012dbc:	83 ec 08             	sub    esp,0x8
c0012dbf:	52                   	push   edx
c0012dc0:	50                   	push   eax
c0012dc1:	e8 6c 65 ff ff       	call   c0009332 <Computer::readCMOS(unsigned char)>
c0012dc6:	83 c4 10             	add    esp,0x10
c0012dc9:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0012dcd:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c0012dd2:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0012dd7:	83 ec 04             	sub    esp,0x4
c0012dda:	6a 01                	push   0x1
c0012ddc:	52                   	push   edx
c0012ddd:	50                   	push   eax
c0012dde:	e8 3b 67 ff ff       	call   c000951e <Computer::writeCMOS(unsigned char, unsigned char)>
c0012de3:	83 c4 10             	add    esp,0x10
c0012de6:	90                   	nop
c0012de7:	83 c4 1c             	add    esp,0x1c
c0012dea:	c3                   	ret    
c0012deb:	90                   	nop

c0012dec <ACPI::sleep()>:
c0012dec:	83 ec 0c             	sub    esp,0xc
c0012def:	83 ec 0c             	sub    esp,0xc
c0012df2:	68 f1 5f 02 c0       	push   0xc0025ff1
c0012df7:	e8 1b a3 ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0012dfc:	83 c4 10             	add    esp,0x10
c0012dff:	a1 40 92 02 c0       	mov    eax,ds:0xc0029240
c0012e04:	85 c0                	test   eax,eax
c0012e06:	74 18                	je     c0012e20 <ACPI::sleep()+0x34>
c0012e08:	83 ec 0c             	sub    esp,0xc
c0012e0b:	68 fe 5f 02 c0       	push   0xc0025ffe
c0012e10:	e8 02 a3 ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0012e15:	83 c4 10             	add    esp,0x10
c0012e18:	a1 40 92 02 c0       	mov    eax,ds:0xc0029240
c0012e1d:	ff d0                	call   eax
c0012e1f:	90                   	nop
c0012e20:	90                   	nop
c0012e21:	83 c4 0c             	add    esp,0xc
c0012e24:	c3                   	ret    
c0012e25:	90                   	nop
c0012e26:	66 90                	xchg   ax,ax

c0012e28 <ACPI::open(int, int, void*)>:
c0012e28:	57                   	push   edi
c0012e29:	56                   	push   esi
c0012e2a:	53                   	push   ebx
c0012e2b:	81 ec 70 01 00 00    	sub    esp,0x170
c0012e31:	83 ec 0c             	sub    esp,0xc
c0012e34:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0012e3b:	e8 80 fa ff ff       	call   c00128c0 <ACPI::detectPCI()>
c0012e40:	83 c4 10             	add    esp,0x10
c0012e43:	83 ec 0c             	sub    esp,0xc
c0012e46:	68 5c 5e 02 c0       	push   0xc0025e5c
c0012e4b:	e8 f1 6f ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0012e50:	83 c4 10             	add    esp,0x10
c0012e53:	83 ec 0c             	sub    esp,0xc
c0012e56:	68 18 60 02 c0       	push   0xc0026018
c0012e5b:	e8 97 4c 00 00       	call   c0017af7 <Thr::loadKernelSymbolTable(char const*)>
c0012e60:	83 c4 10             	add    esp,0x10
c0012e63:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c0012e6b:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c0012e76:	83 ec 0c             	sub    esp,0xc
c0012e79:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0012e80:	e8 62 6f ff ff       	call   c0009de7 <malloc>
c0012e85:	83 c4 10             	add    esp,0x10
c0012e88:	89 c3                	mov    ebx,eax
c0012e8a:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c0012e8f:	83 ec 04             	sub    esp,0x4
c0012e92:	50                   	push   eax
c0012e93:	68 36 60 02 c0       	push   0xc0026036
c0012e98:	53                   	push   ebx
c0012e99:	e8 e4 a7 ff ff       	call   c000d682 <File::File(char const*, Process*)>
c0012e9e:	83 c4 10             	add    esp,0x10
c0012ea1:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c0012ea8:	83 ec 08             	sub    esp,0x8
c0012eab:	6a 01                	push   0x1
c0012ead:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012eb4:	e8 a3 a8 ff ff       	call   c000d75c <File::open(FileOpenMode)>
c0012eb9:	83 c4 10             	add    esp,0x10
c0012ebc:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c0012ec3:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c0012ecb:	75 17                	jne    c0012ee4 <ACPI::open(int, int, void*)+0xbc>
c0012ecd:	83 ec 0c             	sub    esp,0xc
c0012ed0:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012ed7:	e8 de a8 ff ff       	call   c000d7ba <File::close()>
c0012edc:	83 c4 10             	add    esp,0x10
c0012edf:	eb 0b                	jmp    c0012eec <ACPI::open(int, int, void*)+0xc4>
c0012ee1:	8d 76 00             	lea    esi,[esi+0x0]
c0012ee4:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c0012eec:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c0012ef4:	74 1e                	je     c0012f14 <ACPI::open(int, int, void*)+0xec>
c0012ef6:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c0012efd:	8b 00                	mov    eax,DWORD PTR [eax]
c0012eff:	83 c0 08             	add    eax,0x8
c0012f02:	8b 00                	mov    eax,DWORD PTR [eax]
c0012f04:	83 ec 0c             	sub    esp,0xc
c0012f07:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012f0e:	ff d0                	call   eax
c0012f10:	83 c4 10             	add    esp,0x10
c0012f13:	90                   	nop
c0012f14:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c0012f1b:	83 f0 01             	xor    eax,0x1
c0012f1e:	84 c0                	test   al,al
c0012f20:	74 42                	je     c0012f64 <ACPI::open(int, int, void*)+0x13c>
c0012f22:	83 ec 0c             	sub    esp,0xc
c0012f25:	68 54 60 02 c0       	push   0xc0026054
c0012f2a:	e8 12 6f ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0012f2f:	83 c4 10             	add    esp,0x10
c0012f32:	83 ec 04             	sub    esp,0x4
c0012f35:	6a 0c                	push   0xc
c0012f37:	68 6f 60 02 c0       	push   0xc002606f
c0012f3c:	68 80 60 02 c0       	push   0xc0026080
c0012f41:	e8 1b 32 00 00       	call   c0016161 <Reg::readIntWithDefault(char*, char*, int)>
c0012f46:	83 c4 10             	add    esp,0x10
c0012f49:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c0012f50:	83 ec 0c             	sub    esp,0xc
c0012f53:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c0012f5a:	e8 4c 90 ff ff       	call   c000bfab <Virt::setupPageSwapping(int)>
c0012f5f:	83 c4 10             	add    esp,0x10
c0012f62:	66 90                	xchg   ax,ax
c0012f64:	83 ec 0c             	sub    esp,0xc
c0012f67:	68 c6 45 02 c0       	push   0xc00245c6
c0012f6c:	e8 d0 6e ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0012f71:	83 c4 10             	add    esp,0x10
c0012f74:	8b 1d 08 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028c08
c0012f7a:	83 ec 08             	sub    esp,0x8
c0012f7d:	6a 01                	push   0x1
c0012f7f:	68 87 60 02 c0       	push   0xc0026087
c0012f84:	e8 e5 55 00 00       	call   c001856e <Thr::loadDLL(char const*, bool)>
c0012f89:	83 c4 10             	add    esp,0x10
c0012f8c:	83 ec 08             	sub    esp,0x8
c0012f8f:	53                   	push   ebx
c0012f90:	50                   	push   eax
c0012f91:	e8 09 58 00 00       	call   c001879f <Thr::executeDLL(unsigned long, void*)>
c0012f96:	83 c4 10             	add    esp,0x10
c0012f99:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0012fa0:	83 ec 08             	sub    esp,0x8
c0012fa3:	6a 12                	push   0x12
c0012fa5:	50                   	push   eax
c0012fa6:	e8 63 ba ff ff       	call   c000ea0e <getDevicesOfType(DeviceType)>
c0012fab:	83 c4 0c             	add    esp,0xc
c0012fae:	66 90                	xchg   ax,ax
c0012fb0:	83 ec 0c             	sub    esp,0xc
c0012fb3:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012fba:	50                   	push   eax
c0012fbb:	e8 fc 07 01 00       	call   c00237bc <LinkedList<Device>::isEmpty()>
c0012fc0:	83 c4 10             	add    esp,0x10
c0012fc3:	83 f0 01             	xor    eax,0x1
c0012fc6:	84 c0                	test   al,al
c0012fc8:	0f 84 46 01 00 00    	je     c0013114 <ACPI::open(int, int, void*)+0x2ec>
c0012fce:	83 ec 0c             	sub    esp,0xc
c0012fd1:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012fd8:	50                   	push   eax
c0012fd9:	e8 fa 07 01 00       	call   c00237d8 <LinkedList<Device>::getFirstElement()>
c0012fde:	83 c4 10             	add    esp,0x10
c0012fe1:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0012fe8:	83 ec 0c             	sub    esp,0xc
c0012feb:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012ff2:	50                   	push   eax
c0012ff3:	e8 e8 07 01 00       	call   c00237e0 <LinkedList<Device>::removeFirst()>
c0012ff8:	83 c4 10             	add    esp,0x10
c0012ffb:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c0013002:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0013009:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c0013010:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013014:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c001301a:	ba 09 00 00 00       	mov    edx,0x9
c001301f:	fc                   	cld    
c0013020:	89 c7                	mov    edi,eax
c0013022:	89 de                	mov    esi,ebx
c0013024:	89 d1                	mov    ecx,edx
c0013026:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013028:	83 ec 08             	sub    esp,0x8
c001302b:	8d 44 24 38          	lea    eax,[esp+0x38]
c001302f:	50                   	push   eax
c0013030:	83 ec 24             	sub    esp,0x24
c0013033:	89 e0                	mov    eax,esp
c0013035:	89 c3                	mov    ebx,eax
c0013037:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001303b:	ba 09 00 00 00       	mov    edx,0x9
c0013040:	89 df                	mov    edi,ebx
c0013042:	89 c6                	mov    esi,eax
c0013044:	89 d1                	mov    ecx,edx
c0013046:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013048:	e8 8b b0 00 00       	call   c001e0d8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c001304d:	83 c4 30             	add    esp,0x30
c0013050:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0013057:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c001305f:	0f 84 4b ff ff ff    	je     c0012fb0 <ACPI::open(int, int, void*)+0x188>
c0013065:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0013070:	83 ec 0c             	sub    esp,0xc
c0013073:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001307a:	e8 68 6d ff ff       	call   c0009de7 <malloc>
c001307f:	83 c4 10             	add    esp,0x10
c0013082:	89 c3                	mov    ebx,eax
c0013084:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c0013089:	83 ec 04             	sub    esp,0x4
c001308c:	50                   	push   eax
c001308d:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0013094:	53                   	push   ebx
c0013095:	e8 e8 a5 ff ff       	call   c000d682 <File::File(char const*, Process*)>
c001309a:	83 c4 10             	add    esp,0x10
c001309d:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c00130a4:	83 ec 0c             	sub    esp,0xc
c00130a7:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00130ae:	e8 17 a9 ff ff       	call   c000d9ca <File::exists()>
c00130b3:	83 c4 10             	add    esp,0x10
c00130b6:	84 c0                	test   al,al
c00130b8:	74 2a                	je     c00130e4 <ACPI::open(int, int, void*)+0x2bc>
c00130ba:	83 ec 08             	sub    esp,0x8
c00130bd:	6a 01                	push   0x1
c00130bf:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c00130c6:	e8 a3 54 00 00       	call   c001856e <Thr::loadDLL(char const*, bool)>
c00130cb:	83 c4 10             	add    esp,0x10
c00130ce:	83 ec 08             	sub    esp,0x8
c00130d1:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c00130d8:	50                   	push   eax
c00130d9:	e8 c1 56 00 00       	call   c001879f <Thr::executeDLL(unsigned long, void*)>
c00130de:	83 c4 10             	add    esp,0x10
c00130e1:	8d 76 00             	lea    esi,[esi+0x0]
c00130e4:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c00130ec:	0f 84 be fe ff ff    	je     c0012fb0 <ACPI::open(int, int, void*)+0x188>
c00130f2:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c00130f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00130fb:	83 c0 08             	add    eax,0x8
c00130fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0013100:	83 ec 0c             	sub    esp,0xc
c0013103:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001310a:	ff d0                	call   eax
c001310c:	83 c4 10             	add    esp,0x10
c001310f:	e9 9c fe ff ff       	jmp    c0012fb0 <ACPI::open(int, int, void*)+0x188>
c0013114:	83 ec 0c             	sub    esp,0xc
c0013117:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001311e:	50                   	push   eax
c001311f:	e8 94 06 01 00       	call   c00237b8 <LinkedList<Device>::~LinkedList()>
c0013124:	83 c4 10             	add    esp,0x10
c0013127:	8b 1d 08 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028c08
c001312d:	83 ec 08             	sub    esp,0x8
c0013130:	6a 01                	push   0x1
c0013132:	68 a2 60 02 c0       	push   0xc00260a2
c0013137:	e8 32 54 00 00       	call   c001856e <Thr::loadDLL(char const*, bool)>
c001313c:	83 c4 10             	add    esp,0x10
c001313f:	83 ec 08             	sub    esp,0x8
c0013142:	53                   	push   ebx
c0013143:	50                   	push   eax
c0013144:	e8 56 56 00 00       	call   c001879f <Thr::executeDLL(unsigned long, void*)>
c0013149:	83 c4 10             	add    esp,0x10
c001314c:	8b 1d 08 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028c08
c0013152:	83 ec 08             	sub    esp,0x8
c0013155:	6a 01                	push   0x1
c0013157:	68 bf 60 02 c0       	push   0xc00260bf
c001315c:	e8 0d 54 00 00       	call   c001856e <Thr::loadDLL(char const*, bool)>
c0013161:	83 c4 10             	add    esp,0x10
c0013164:	83 ec 08             	sub    esp,0x8
c0013167:	53                   	push   ebx
c0013168:	50                   	push   eax
c0013169:	e8 31 56 00 00       	call   c001879f <Thr::executeDLL(unsigned long, void*)>
c001316e:	83 c4 10             	add    esp,0x10
c0013171:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c0013176:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001317c:	83 e0 04             	and    eax,0x4
c001317f:	84 c0                	test   al,al
c0013181:	0f 84 15 01 00 00    	je     c001329c <ACPI::open(int, int, void*)+0x474>
c0013187:	83 ec 0c             	sub    esp,0xc
c001318a:	68 dc 60 02 c0       	push   0xc00260dc
c001318f:	e8 ad 6c ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0013194:	83 c4 10             	add    esp,0x10
c0013197:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c00131a2:	83 ec 0c             	sub    esp,0xc
c00131a5:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c00131ac:	e8 36 6c ff ff       	call   c0009de7 <malloc>
c00131b1:	83 c4 10             	add    esp,0x10
c00131b4:	89 c3                	mov    ebx,eax
c00131b6:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c00131bb:	83 ec 04             	sub    esp,0x4
c00131be:	50                   	push   eax
c00131bf:	68 f9 60 02 c0       	push   0xc00260f9
c00131c4:	53                   	push   ebx
c00131c5:	e8 b8 a4 ff ff       	call   c000d682 <File::File(char const*, Process*)>
c00131ca:	83 c4 10             	add    esp,0x10
c00131cd:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c00131d4:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00131dc:	74 1a                	je     c00131f8 <ACPI::open(int, int, void*)+0x3d0>
c00131de:	83 ec 0c             	sub    esp,0xc
c00131e1:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00131e8:	e8 dd a7 ff ff       	call   c000d9ca <File::exists()>
c00131ed:	83 c4 10             	add    esp,0x10
c00131f0:	84 c0                	test   al,al
c00131f2:	74 04                	je     c00131f8 <ACPI::open(int, int, void*)+0x3d0>
c00131f4:	b0 01                	mov    al,0x1
c00131f6:	eb 04                	jmp    c00131fc <ACPI::open(int, int, void*)+0x3d4>
c00131f8:	b0 00                	mov    al,0x0
c00131fa:	66 90                	xchg   ax,ax
c00131fc:	84 c0                	test   al,al
c00131fe:	74 28                	je     c0013228 <ACPI::open(int, int, void*)+0x400>
c0013200:	83 ec 08             	sub    esp,0x8
c0013203:	6a 01                	push   0x1
c0013205:	68 f9 60 02 c0       	push   0xc00260f9
c001320a:	e8 5f 53 00 00       	call   c001856e <Thr::loadDLL(char const*, bool)>
c001320f:	83 c4 10             	add    esp,0x10
c0013212:	83 ec 08             	sub    esp,0x8
c0013215:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c001321c:	50                   	push   eax
c001321d:	e8 7d 55 00 00       	call   c001879f <Thr::executeDLL(unsigned long, void*)>
c0013222:	83 c4 10             	add    esp,0x10
c0013225:	8d 76 00             	lea    esi,[esi+0x0]
c0013228:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0013230:	74 2a                	je     c001325c <ACPI::open(int, int, void*)+0x434>
c0013232:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001323a:	74 20                	je     c001325c <ACPI::open(int, int, void*)+0x434>
c001323c:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0013243:	8b 00                	mov    eax,DWORD PTR [eax]
c0013245:	83 c0 08             	add    eax,0x8
c0013248:	8b 00                	mov    eax,DWORD PTR [eax]
c001324a:	83 ec 0c             	sub    esp,0xc
c001324d:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0013254:	ff d0                	call   eax
c0013256:	83 c4 10             	add    esp,0x10
c0013259:	8d 76 00             	lea    esi,[esi+0x0]
c001325c:	a1 68 94 02 c0       	mov    eax,ds:0xc0029468
c0013261:	83 ec 08             	sub    esp,0x8
c0013264:	68 16 61 02 c0       	push   0xc0026116
c0013269:	50                   	push   eax
c001326a:	e8 e1 ee ff ff       	call   c0012150 <findDataTable(unsigned char*, char*)>
c001326f:	83 c4 10             	add    esp,0x10
c0013272:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c0013279:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0013281:	74 19                	je     c001329c <ACPI::open(int, int, void*)+0x474>
c0013283:	83 ec 08             	sub    esp,0x8
c0013286:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001328d:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0013294:	e8 0b fb ff ff       	call   c0012da4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0013299:	83 c4 10             	add    esp,0x10
c001329c:	b8 00 00 00 00       	mov    eax,0x0
c00132a1:	81 c4 70 01 00 00    	add    esp,0x170
c00132a7:	5b                   	pop    ebx
c00132a8:	5e                   	pop    esi
c00132a9:	5f                   	pop    edi
c00132aa:	c3                   	ret    
c00132ab:	90                   	nop

c00132ac <CPU::close(int, int, void*)>:
c00132ac:	31 c0                	xor    eax,eax
c00132ae:	c3                   	ret    
c00132af:	90                   	nop

c00132b0 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00132b0:	55                   	push   ebp
c00132b1:	57                   	push   edi
c00132b2:	56                   	push   esi
c00132b3:	53                   	push   ebx
c00132b4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00132b8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00132bc:	89 ce                	mov    esi,ecx
c00132be:	89 d5                	mov    ebp,edx
c00132c0:	80 f9 04             	cmp    cl,0x4
c00132c3:	75 28                	jne    c00132ed <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00132c5:	8d 42 f9             	lea    eax,[edx-0x7]
c00132c8:	3c 03                	cmp    al,0x3
c00132ca:	0f 86 63 01 00 00    	jbe    c0013433 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00132d0:	80 fa 03             	cmp    dl,0x3
c00132d3:	0f 84 5a 01 00 00    	je     c0013433 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00132d9:	8d 7a f2             	lea    edi,[edx-0xe]
c00132dc:	b8 d0 84 02 c0       	mov    eax,0xc00284d0
c00132e1:	89 fb                	mov    ebx,edi
c00132e3:	80 fb 01             	cmp    bl,0x1
c00132e6:	77 4e                	ja     c0013336 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00132e8:	e9 52 01 00 00       	jmp    c001343f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00132ed:	80 f9 05             	cmp    cl,0x5
c00132f0:	75 4d                	jne    c001333f <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00132f2:	b8 e0 84 02 c0       	mov    eax,0xc00284e0
c00132f7:	80 fa 03             	cmp    dl,0x3
c00132fa:	0f 86 3f 01 00 00    	jbe    c001343f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013300:	8d 7a fa             	lea    edi,[edx-0x6]
c0013303:	b8 f0 84 02 c0       	mov    eax,0xc00284f0
c0013308:	89 fb                	mov    ebx,edi
c001330a:	80 fb 01             	cmp    bl,0x1
c001330d:	0f 86 2c 01 00 00    	jbe    c001343f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013313:	b8 00 85 02 c0       	mov    eax,0xc0028500
c0013318:	80 fa 08             	cmp    dl,0x8
c001331b:	0f 84 1e 01 00 00    	je     c001343f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013321:	89 d7                	mov    edi,edx
c0013323:	b8 10 85 02 c0       	mov    eax,0xc0028510
c0013328:	83 e7 fb             	and    edi,0xfffffffb
c001332b:	89 fb                	mov    ebx,edi
c001332d:	80 fb 09             	cmp    bl,0x9
c0013330:	0f 84 09 01 00 00    	je     c001343f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013336:	31 c0                	xor    eax,eax
c0013338:	89 eb                	mov    ebx,ebp
c001333a:	0f b6 fb             	movzx  edi,bl
c001333d:	eb 30                	jmp    c001336f <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c001333f:	31 c0                	xor    eax,eax
c0013341:	80 f9 06             	cmp    cl,0x6
c0013344:	75 f2                	jne    c0013338 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0013346:	80 fa 0a             	cmp    dl,0xa
c0013349:	77 ed                	ja     c0013338 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001334b:	bf de 05 00 00       	mov    edi,0x5de
c0013350:	0f a3 d7             	bt     edi,edx
c0013353:	73 e3                	jae    c0013338 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0013355:	b8 20 85 02 c0       	mov    eax,0xc0028520
c001335a:	e9 e0 00 00 00       	jmp    c001343f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001335f:	39 c7                	cmp    edi,eax
c0013361:	0f 84 d3 00 00 00    	je     c001343a <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0013367:	40                   	inc    eax
c0013368:	3d d0 00 00 00       	cmp    eax,0xd0
c001336d:	74 09                	je     c0013378 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c001336f:	89 f3                	mov    ebx,esi
c0013371:	80 fb 0f             	cmp    bl,0xf
c0013374:	75 f1                	jne    c0013367 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0013376:	eb e7                	jmp    c001335f <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0013378:	80 f9 10             	cmp    cl,0x10
c001337b:	75 14                	jne    c0013391 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c001337d:	8d 42 fc             	lea    eax,[edx-0x4]
c0013380:	83 e0 fb             	and    eax,0xfffffffb
c0013383:	3c 02                	cmp    al,0x2
c0013385:	76 34                	jbe    c00133bb <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0013387:	b8 51 64 02 c0       	mov    eax,0xc0026451
c001338c:	80 fa 02             	cmp    dl,0x2
c001338f:	eb 24                	jmp    c00133b5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0013391:	80 f9 11             	cmp    cl,0x11
c0013394:	75 13                	jne    c00133a9 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0013396:	b8 51 64 02 c0       	mov    eax,0xc0026451
c001339b:	80 fa 03             	cmp    dl,0x3
c001339e:	0f 85 9b 00 00 00    	jne    c001343f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00133a4:	e9 91 00 00 00       	jmp    c001343a <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00133a9:	80 f9 12             	cmp    cl,0x12
c00133ac:	75 14                	jne    c00133c2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c00133ae:	b8 51 64 02 c0       	mov    eax,0xc0026451
c00133b3:	fe ca                	dec    dl
c00133b5:	0f 85 84 00 00 00    	jne    c001343f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00133bb:	b8 40 85 02 c0       	mov    eax,0xc0028540
c00133c0:	eb 7d                	jmp    c001343f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00133c2:	80 f9 14             	cmp    cl,0x14
c00133c5:	75 12                	jne    c00133d9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00133c7:	4a                   	dec    edx
c00133c8:	b8 51 64 02 c0       	mov    eax,0xc0026451
c00133cd:	80 fa 01             	cmp    dl,0x1
c00133d0:	77 6d                	ja     c001343f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00133d2:	b8 50 85 02 c0       	mov    eax,0xc0028550
c00133d7:	eb 66                	jmp    c001343f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00133d9:	80 f9 15             	cmp    cl,0x15
c00133dc:	75 31                	jne    c001340f <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c00133de:	b8 60 85 02 c0       	mov    eax,0xc0028560
c00133e3:	80 fa 01             	cmp    dl,0x1
c00133e6:	74 57                	je     c001343f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00133e8:	b8 51 64 02 c0       	mov    eax,0xc0026451
c00133ed:	80 fa 13             	cmp    dl,0x13
c00133f0:	76 0c                	jbe    c00133fe <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00133f2:	80 fa 30             	cmp    dl,0x30
c00133f5:	75 48                	jne    c001343f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00133f7:	b8 80 85 02 c0       	mov    eax,0xc0028580
c00133fc:	eb 41                	jmp    c001343f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00133fe:	b9 04 00 09 00       	mov    ecx,0x90004
c0013403:	0f a3 d1             	bt     ecx,edx
c0013406:	73 37                	jae    c001343f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013408:	b8 70 85 02 c0       	mov    eax,0xc0028570
c001340d:	eb 30                	jmp    c001343f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001340f:	b8 51 64 02 c0       	mov    eax,0xc0026451
c0013414:	80 f9 16             	cmp    cl,0x16
c0013417:	75 26                	jne    c001343f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013419:	b8 90 85 02 c0       	mov    eax,0xc0028590
c001341e:	84 d2                	test   dl,dl
c0013420:	74 1d                	je     c001343f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013422:	b8 51 64 02 c0       	mov    eax,0xc0026451
c0013427:	80 fa 30             	cmp    dl,0x30
c001342a:	75 13                	jne    c001343f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001342c:	b8 a0 85 02 c0       	mov    eax,0xc00285a0
c0013431:	eb 0c                	jmp    c001343f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013433:	b8 c0 84 02 c0       	mov    eax,0xc00284c0
c0013438:	eb 05                	jmp    c001343f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001343a:	b8 30 85 02 c0       	mov    eax,0xc0028530
c001343f:	5b                   	pop    ebx
c0013440:	5e                   	pop    esi
c0013441:	5f                   	pop    edi
c0013442:	5d                   	pop    ebp
c0013443:	c3                   	ret    

c0013444 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0013444:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013448:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001344c:	80 f9 04             	cmp    cl,0x4
c001344f:	75 6b                	jne    c00134bc <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0013451:	b8 20 83 02 c0       	mov    eax,0xc0028320
c0013456:	80 fa 01             	cmp    dl,0x1
c0013459:	0f 86 92 02 00 00    	jbe    c00136f1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001345f:	b8 30 83 02 c0       	mov    eax,0xc0028330
c0013464:	80 fa 02             	cmp    dl,0x2
c0013467:	0f 84 84 02 00 00    	je     c00136f1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001346d:	b8 40 83 02 c0       	mov    eax,0xc0028340
c0013472:	80 fa 03             	cmp    dl,0x3
c0013475:	0f 84 76 02 00 00    	je     c00136f1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001347b:	b8 50 83 02 c0       	mov    eax,0xc0028350
c0013480:	80 fa 04             	cmp    dl,0x4
c0013483:	0f 84 68 02 00 00    	je     c00136f1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013489:	b8 60 83 02 c0       	mov    eax,0xc0028360
c001348e:	80 fa 05             	cmp    dl,0x5
c0013491:	0f 84 5a 02 00 00    	je     c00136f1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013497:	b8 40 83 02 c0       	mov    eax,0xc0028340
c001349c:	80 fa 07             	cmp    dl,0x7
c001349f:	0f 84 4c 02 00 00    	je     c00136f1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00134a5:	83 ea 08             	sub    edx,0x8
c00134a8:	b8 51 64 02 c0       	mov    eax,0xc0026451
c00134ad:	80 fa 01             	cmp    dl,0x1
c00134b0:	0f 87 3b 02 00 00    	ja     c00136f1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00134b6:	b8 70 83 02 c0       	mov    eax,0xc0028370
c00134bb:	c3                   	ret    
c00134bc:	80 f9 05             	cmp    cl,0x5
c00134bf:	75 45                	jne    c0013506 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00134c1:	8d 4a ff             	lea    ecx,[edx-0x1]
c00134c4:	b8 80 83 02 c0       	mov    eax,0xc0028380
c00134c9:	80 f9 02             	cmp    cl,0x2
c00134cc:	0f 86 1f 02 00 00    	jbe    c00136f1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00134d2:	80 fa 04             	cmp    dl,0x4
c00134d5:	0f 84 f3 01 00 00    	je     c00136ce <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00134db:	80 fa 07             	cmp    dl,0x7
c00134de:	0f 84 0d 02 00 00    	je     c00136f1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00134e4:	b8 90 83 02 c0       	mov    eax,0xc0028390
c00134e9:	80 fa 08             	cmp    dl,0x8
c00134ec:	0f 84 ff 01 00 00    	je     c00136f1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00134f2:	b8 51 64 02 c0       	mov    eax,0xc0026451
c00134f7:	80 fa 09             	cmp    dl,0x9
c00134fa:	0f 85 f1 01 00 00    	jne    c00136f1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013500:	b8 a0 83 02 c0       	mov    eax,0xc00283a0
c0013505:	c3                   	ret    
c0013506:	80 f9 06             	cmp    cl,0x6
c0013509:	0f 85 85 01 00 00    	jne    c0013694 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c001350f:	b8 b0 83 02 c0       	mov    eax,0xc00283b0
c0013514:	80 fa 01             	cmp    dl,0x1
c0013517:	0f 84 d4 01 00 00    	je     c00136f1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001351d:	8d 42 fb             	lea    eax,[edx-0x5]
c0013520:	3c 01                	cmp    al,0x1
c0013522:	0f 86 ac 01 00 00    	jbe    c00136d4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0013528:	80 fa 03             	cmp    dl,0x3
c001352b:	0f 84 a3 01 00 00    	je     c00136d4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0013531:	8d 4a f9             	lea    ecx,[edx-0x7]
c0013534:	b8 d0 83 02 c0       	mov    eax,0xc00283d0
c0013539:	80 f9 01             	cmp    cl,0x1
c001353c:	0f 86 af 01 00 00    	jbe    c00136f1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013542:	80 fa 09             	cmp    dl,0x9
c0013545:	0f 84 8f 01 00 00    	je     c00136da <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c001354b:	8d 4a f6             	lea    ecx,[edx-0xa]
c001354e:	80 f9 01             	cmp    cl,0x1
c0013551:	0f 86 9a 01 00 00    	jbe    c00136f1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013557:	b8 e0 83 02 c0       	mov    eax,0xc00283e0
c001355c:	80 fa 0d             	cmp    dl,0xd
c001355f:	0f 84 8c 01 00 00    	je     c00136f1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013565:	b8 f0 83 02 c0       	mov    eax,0xc00283f0
c001356a:	80 fa 0e             	cmp    dl,0xe
c001356d:	0f 84 7e 01 00 00    	je     c00136f1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013573:	b8 00 84 02 c0       	mov    eax,0xc0028400
c0013578:	80 fa 0f             	cmp    dl,0xf
c001357b:	0f 84 70 01 00 00    	je     c00136f1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013581:	b8 e0 83 02 c0       	mov    eax,0xc00283e0
c0013586:	80 fa 15             	cmp    dl,0x15
c0013589:	0f 84 62 01 00 00    	je     c00136f1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001358f:	8d 4a ea             	lea    ecx,[edx-0x16]
c0013592:	b8 00 84 02 c0       	mov    eax,0xc0028400
c0013597:	80 f9 01             	cmp    cl,0x1
c001359a:	0f 86 51 01 00 00    	jbe    c00136f1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00135a0:	80 fa 1a             	cmp    dl,0x1a
c00135a3:	0f 84 37 01 00 00    	je     c00136e0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c00135a9:	80 fa 1c             	cmp    dl,0x1c
c00135ac:	0f 84 34 01 00 00    	je     c00136e6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c00135b2:	80 fa 1d             	cmp    dl,0x1d
c00135b5:	0f 84 36 01 00 00    	je     c00136f1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00135bb:	b8 30 84 02 c0       	mov    eax,0xc0028430
c00135c0:	80 fa 25             	cmp    dl,0x25
c00135c3:	0f 84 28 01 00 00    	je     c00136f1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00135c9:	8d 4a da             	lea    ecx,[edx-0x26]
c00135cc:	b8 20 84 02 c0       	mov    eax,0xc0028420
c00135d1:	80 f9 01             	cmp    cl,0x1
c00135d4:	0f 86 17 01 00 00    	jbe    c00136f1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00135da:	b8 40 84 02 c0       	mov    eax,0xc0028440
c00135df:	80 fa 2a             	cmp    dl,0x2a
c00135e2:	0f 84 09 01 00 00    	je     c00136f1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00135e8:	b8 30 84 02 c0       	mov    eax,0xc0028430
c00135ed:	80 fa 2c             	cmp    dl,0x2c
c00135f0:	0f 84 fb 00 00 00    	je     c00136f1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00135f6:	b8 40 84 02 c0       	mov    eax,0xc0028440
c00135fb:	80 fa 2d             	cmp    dl,0x2d
c00135fe:	0f 84 ed 00 00 00    	je     c00136f1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013604:	b8 10 84 02 c0       	mov    eax,0xc0028410
c0013609:	80 fa 2e             	cmp    dl,0x2e
c001360c:	0f 84 df 00 00 00    	je     c00136f1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013612:	b8 30 84 02 c0       	mov    eax,0xc0028430
c0013617:	80 fa 2f             	cmp    dl,0x2f
c001361a:	0f 84 d1 00 00 00    	je     c00136f1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013620:	8d 4a cb             	lea    ecx,[edx-0x35]
c0013623:	b8 20 84 02 c0       	mov    eax,0xc0028420
c0013628:	80 f9 01             	cmp    cl,0x1
c001362b:	0f 86 c0 00 00 00    	jbe    c00136f1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013631:	b8 50 84 02 c0       	mov    eax,0xc0028450
c0013636:	80 fa 37             	cmp    dl,0x37
c0013639:	0f 84 b2 00 00 00    	je     c00136f1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001363f:	b8 60 84 02 c0       	mov    eax,0xc0028460
c0013644:	80 fa 3a             	cmp    dl,0x3a
c0013647:	0f 84 a4 00 00 00    	je     c00136f1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001364d:	b8 70 84 02 c0       	mov    eax,0xc0028470
c0013652:	80 fa 3c             	cmp    dl,0x3c
c0013655:	0f 84 96 00 00 00    	je     c00136f1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001365b:	b8 80 84 02 c0       	mov    eax,0xc0028480
c0013660:	80 fa 3d             	cmp    dl,0x3d
c0013663:	0f 84 88 00 00 00    	je     c00136f1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013669:	b8 60 84 02 c0       	mov    eax,0xc0028460
c001366e:	80 fa 3e             	cmp    dl,0x3e
c0013671:	74 7e                	je     c00136f1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013673:	8d 42 bb             	lea    eax,[edx-0x45]
c0013676:	3c 01                	cmp    al,0x1
c0013678:	76 72                	jbe    c00136ec <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c001367a:	80 fa 3f             	cmp    dl,0x3f
c001367d:	74 6d                	je     c00136ec <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c001367f:	80 fa 4a             	cmp    dl,0x4a
c0013682:	74 0a                	je     c001368e <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0013684:	b8 51 64 02 c0       	mov    eax,0xc0026451
c0013689:	80 fa 4d             	cmp    dl,0x4d
c001368c:	75 63                	jne    c00136f1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001368e:	b8 50 84 02 c0       	mov    eax,0xc0028450
c0013693:	c3                   	ret    
c0013694:	b8 51 64 02 c0       	mov    eax,0xc0026451
c0013699:	80 f9 0b             	cmp    cl,0xb
c001369c:	75 0a                	jne    c00136a8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c001369e:	fe ca                	dec    dl
c00136a0:	75 4f                	jne    c00136f1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00136a2:	b8 90 84 02 c0       	mov    eax,0xc0028490
c00136a7:	c3                   	ret    
c00136a8:	80 f9 0f             	cmp    cl,0xf
c00136ab:	75 44                	jne    c00136f1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00136ad:	b8 a0 84 02 c0       	mov    eax,0xc00284a0
c00136b2:	80 fa 02             	cmp    dl,0x2
c00136b5:	76 3a                	jbe    c00136f1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00136b7:	8d 42 fd             	lea    eax,[edx-0x3]
c00136ba:	3c 01                	cmp    al,0x1
c00136bc:	76 0a                	jbe    c00136c8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c00136be:	b8 51 64 02 c0       	mov    eax,0xc0026451
c00136c3:	80 fa 06             	cmp    dl,0x6
c00136c6:	75 29                	jne    c00136f1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00136c8:	b8 b0 84 02 c0       	mov    eax,0xc00284b0
c00136cd:	c3                   	ret    
c00136ce:	b8 90 83 02 c0       	mov    eax,0xc0028390
c00136d3:	c3                   	ret    
c00136d4:	b8 c0 83 02 c0       	mov    eax,0xc00283c0
c00136d9:	c3                   	ret    
c00136da:	b8 e0 83 02 c0       	mov    eax,0xc00283e0
c00136df:	c3                   	ret    
c00136e0:	b8 10 84 02 c0       	mov    eax,0xc0028410
c00136e5:	c3                   	ret    
c00136e6:	b8 20 84 02 c0       	mov    eax,0xc0028420
c00136eb:	c3                   	ret    
c00136ec:	b8 70 84 02 c0       	mov    eax,0xc0028470
c00136f1:	c3                   	ret    

c00136f2 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c00136f2:	60                   	pusha  
c00136f3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00136f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00136fb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00136ff:	9c                   	pushf  
c0013700:	fa                   	cli    
c0013701:	0f 09                	wbinvd 
c0013703:	0f 30                	wrmsr  
c0013705:	9d                   	popf   
c0013706:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001370a:	89 02                	mov    DWORD PTR [edx],eax
c001370c:	61                   	popa   
c001370d:	c3                   	ret    

c001370e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c001370e:	60                   	pusha  
c001370f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013713:	9c                   	pushf  
c0013714:	fa                   	cli    
c0013715:	0f 09                	wbinvd 
c0013717:	31 c0                	xor    eax,eax
c0013719:	31 d2                	xor    edx,edx
c001371b:	0f 32                	rdmsr  
c001371d:	9d                   	popf   
c001371e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013722:	89 02                	mov    DWORD PTR [edx],eax
c0013724:	61                   	popa   
c0013725:	c3                   	ret    

c0013726 <CPU::AMD_K6_writeback(int, int, int)>:
c0013726:	56                   	push   esi
c0013727:	53                   	push   ebx
c0013728:	83 ec 10             	sub    esp,0x10
c001372b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001372f:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0013734:	75 5d                	jne    c0013793 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0013736:	83 f8 08             	cmp    eax,0x8
c0013739:	75 09                	jne    c0013744 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c001373b:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0013740:	7e 13                	jle    c0013755 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0013742:	eb 30                	jmp    c0013774 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0013744:	83 f8 06             	cmp    eax,0x6
c0013747:	7c 4a                	jl     c0013793 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0013749:	83 f8 07             	cmp    eax,0x7
c001374c:	7e 07                	jle    c0013755 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001374e:	83 f8 09             	cmp    eax,0x9
c0013751:	74 21                	je     c0013774 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0013753:	eb 3e                	jmp    c0013793 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0013755:	89 e6                	mov    esi,esp
c0013757:	8b 1d 2c 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028c2c
c001375d:	56                   	push   esi
c001375e:	c1 eb 15             	shr    ebx,0x15
c0013761:	68 82 00 00 c0       	push   0xc0000082
c0013766:	83 e3 7e             	and    ebx,0x7e
c0013769:	e8 a0 ff ff ff       	call   c001370e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001376e:	56                   	push   esi
c001376f:	6a 00                	push   0x0
c0013771:	53                   	push   ebx
c0013772:	eb 12                	jmp    c0013786 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0013774:	89 e3                	mov    ebx,esp
c0013776:	53                   	push   ebx
c0013777:	68 82 00 00 c0       	push   0xc0000082
c001377c:	e8 8d ff ff ff       	call   c001370e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0013781:	53                   	push   ebx
c0013782:	6a 00                	push   0x0
c0013784:	6a 00                	push   0x0
c0013786:	68 82 00 00 c0       	push   0xc0000082
c001378b:	e8 62 ff ff ff       	call   c00136f2 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0013790:	83 c4 18             	add    esp,0x18
c0013793:	83 c4 10             	add    esp,0x10
c0013796:	5b                   	pop    ebx
c0013797:	5e                   	pop    esi
c0013798:	c3                   	ret    
c0013799:	90                   	nop

c001379a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001379a:	55                   	push   ebp
c001379b:	57                   	push   edi
c001379c:	56                   	push   esi
c001379d:	53                   	push   ebx
c001379e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00137a2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00137a6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00137aa:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00137ae:	39 05 c0 85 02 c0    	cmp    DWORD PTR ds:0xc00285c0,eax
c00137b4:	75 23                	jne    c00137d9 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00137b6:	a1 cc 96 02 c0       	mov    eax,ds:0xc00296cc
c00137bb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00137bf:	89 06                	mov    DWORD PTR [esi],eax
c00137c1:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00137c6:	89 07                	mov    DWORD PTR [edi],eax
c00137c8:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c00137cd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00137d0:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c00137d5:	89 02                	mov    DWORD PTR [edx],eax
c00137d7:	eb 3f                	jmp    c0013818 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00137d9:	31 c9                	xor    ecx,ecx
c00137db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00137df:	0f a2                	cpuid  
c00137e1:	89 06                	mov    DWORD PTR [esi],eax
c00137e3:	89 1f                	mov    DWORD PTR [edi],ebx
c00137e5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00137e9:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00137ec:	89 10                	mov    DWORD PTR [eax],edx
c00137ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00137f2:	a3 c0 85 02 c0       	mov    ds:0xc00285c0,eax
c00137f7:	8b 06                	mov    eax,DWORD PTR [esi]
c00137f9:	a3 cc 96 02 c0       	mov    ds:0xc00296cc,eax
c00137fe:	8b 07                	mov    eax,DWORD PTR [edi]
c0013800:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0013805:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013808:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c001380d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013811:	8b 00                	mov    eax,DWORD PTR [eax]
c0013813:	a3 c0 96 02 c0       	mov    ds:0xc00296c0,eax
c0013818:	5b                   	pop    ebx
c0013819:	5e                   	pop    esi
c001381a:	5f                   	pop    edi
c001381b:	5d                   	pop    ebp
c001381c:	c3                   	ret    
c001381d:	90                   	nop

c001381e <CPU::cpuidCheckEDX(unsigned int)>:
c001381e:	83 ec 10             	sub    esp,0x10
c0013821:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013825:	50                   	push   eax
c0013826:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001382a:	50                   	push   eax
c001382b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001382f:	50                   	push   eax
c0013830:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013834:	50                   	push   eax
c0013835:	6a 01                	push   0x1
c0013837:	e8 5e ff ff ff       	call   c001379a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001383c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013840:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0013844:	0f 95 c0             	setne  al
c0013847:	83 c4 24             	add    esp,0x24
c001384a:	c3                   	ret    
c001384b:	90                   	nop

c001384c <CPU::cpuidCheckECX(unsigned int)>:
c001384c:	83 ec 10             	sub    esp,0x10
c001384f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013853:	50                   	push   eax
c0013854:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013858:	50                   	push   eax
c0013859:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001385d:	50                   	push   eax
c001385e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013862:	50                   	push   eax
c0013863:	6a 01                	push   0x1
c0013865:	e8 30 ff ff ff       	call   c001379a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001386a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001386e:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0013872:	0f 95 c0             	setne  al
c0013875:	83 c4 24             	add    esp,0x24
c0013878:	c3                   	ret    
c0013879:	90                   	nop

c001387a <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001387a:	83 ec 10             	sub    esp,0x10
c001387d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013881:	50                   	push   eax
c0013882:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013886:	50                   	push   eax
c0013887:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001388b:	50                   	push   eax
c001388c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013890:	50                   	push   eax
c0013891:	6a 07                	push   0x7
c0013893:	e8 02 ff ff ff       	call   c001379a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013898:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001389c:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00138a0:	0f 95 c0             	setne  al
c00138a3:	83 c4 24             	add    esp,0x24
c00138a6:	c3                   	ret    
c00138a7:	90                   	nop

c00138a8 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00138a8:	83 ec 10             	sub    esp,0x10
c00138ab:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00138af:	50                   	push   eax
c00138b0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00138b4:	50                   	push   eax
c00138b5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00138b9:	50                   	push   eax
c00138ba:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00138be:	50                   	push   eax
c00138bf:	6a 07                	push   0x7
c00138c1:	e8 d4 fe ff ff       	call   c001379a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00138c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00138ca:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00138ce:	0f 95 c0             	setne  al
c00138d1:	83 c4 24             	add    esp,0x24
c00138d4:	c3                   	ret    
c00138d5:	90                   	nop

c00138d6 <CPU::CPU()>:
c00138d6:	83 ec 0c             	sub    esp,0xc
c00138d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138dd:	83 ec 08             	sub    esp,0x8
c00138e0:	68 51 64 02 c0       	push   0xc0026451
c00138e5:	50                   	push   eax
c00138e6:	e8 a3 af ff ff       	call   c000e88e <Device::Device(char const*)>
c00138eb:	83 c4 10             	add    esp,0x10
c00138ee:	ba b4 66 02 c0       	mov    edx,0xc00266b4
c00138f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138f7:	89 10                	mov    DWORD PTR [eax],edx
c00138f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138fd:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0013907:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001390b:	05 78 01 00 00       	add    eax,0x178
c0013910:	83 ec 0c             	sub    esp,0xc
c0013913:	50                   	push   eax
c0013914:	e8 ef 5c ff ff       	call   c0009608 <GDT::GDT()>
c0013919:	83 c4 10             	add    esp,0x10
c001391c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013920:	05 7c 09 00 00       	add    eax,0x97c
c0013925:	83 ec 0c             	sub    esp,0xc
c0013928:	50                   	push   eax
c0013929:	e8 a6 5f ff ff       	call   c00098d4 <IDT::IDT()>
c001392e:	83 c4 10             	add    esp,0x10
c0013931:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013935:	05 7c 11 00 00       	add    eax,0x117c
c001393a:	83 ec 0c             	sub    esp,0xc
c001393d:	50                   	push   eax
c001393e:	e8 a1 7d ff ff       	call   c000b6e4 <TSS::TSS()>
c0013943:	83 c4 10             	add    esp,0x10
c0013946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001394a:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0013951:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013955:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c001395f:	90                   	nop
c0013960:	83 c4 0c             	add    esp,0xc
c0013963:	c3                   	ret    

c0013964 <CPU::displayFeatures()>:
c0013964:	53                   	push   ebx
c0013965:	83 ec 10             	sub    esp,0x10
c0013968:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001396c:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0013972:	68 48 61 02 c0       	push   0xc0026148
c0013977:	e8 9b 97 ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c001397c:	58                   	pop    eax
c001397d:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0013983:	5a                   	pop    edx
c0013984:	50                   	push   eax
c0013985:	68 59 61 02 c0       	push   0xc0026159
c001398a:	e8 88 97 ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c001398f:	59                   	pop    ecx
c0013990:	58                   	pop    eax
c0013991:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013997:	c1 e8 0e             	shr    eax,0xe
c001399a:	0f b6 c0             	movzx  eax,al
c001399d:	50                   	push   eax
c001399e:	68 6a 61 02 c0       	push   0xc002616a
c00139a3:	e8 6f 97 ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c00139a8:	58                   	pop    eax
c00139a9:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00139af:	5a                   	pop    edx
c00139b0:	66 c1 e8 06          	shr    ax,0x6
c00139b4:	0f b6 c0             	movzx  eax,al
c00139b7:	50                   	push   eax
c00139b8:	68 7b 61 02 c0       	push   0xc002617b
c00139bd:	e8 55 97 ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c00139c2:	c7 04 24 7b 67 02 c0 	mov    DWORD PTR [esp],0xc002677b
c00139c9:	e8 49 97 ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c00139ce:	83 c4 10             	add    esp,0x10
c00139d1:	b8 45 46 02 c0       	mov    eax,0xc0024645
c00139d6:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c00139dd:	74 05                	je     c00139e4 <CPU::displayFeatures()+0x80>
c00139df:	b8 41 46 02 c0       	mov    eax,0xc0024641
c00139e4:	51                   	push   ecx
c00139e5:	51                   	push   ecx
c00139e6:	50                   	push   eax
c00139e7:	68 8c 61 02 c0       	push   0xc002618c
c00139ec:	e8 26 97 ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c00139f1:	83 c4 10             	add    esp,0x10
c00139f4:	b8 41 46 02 c0       	mov    eax,0xc0024641
c00139f9:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0013a00:	78 05                	js     c0013a07 <CPU::displayFeatures()+0xa3>
c0013a02:	b8 45 46 02 c0       	mov    eax,0xc0024645
c0013a07:	52                   	push   edx
c0013a08:	52                   	push   edx
c0013a09:	50                   	push   eax
c0013a0a:	68 a3 61 02 c0       	push   0xc00261a3
c0013a0f:	e8 03 97 ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0013a14:	83 c4 10             	add    esp,0x10
c0013a17:	b8 41 46 02 c0       	mov    eax,0xc0024641
c0013a1c:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0013a23:	75 05                	jne    c0013a2a <CPU::displayFeatures()+0xc6>
c0013a25:	b8 45 46 02 c0       	mov    eax,0xc0024645
c0013a2a:	51                   	push   ecx
c0013a2b:	51                   	push   ecx
c0013a2c:	50                   	push   eax
c0013a2d:	68 ba 61 02 c0       	push   0xc00261ba
c0013a32:	e8 e0 96 ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0013a37:	83 c4 10             	add    esp,0x10
c0013a3a:	b8 41 46 02 c0       	mov    eax,0xc0024641
c0013a3f:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0013a46:	75 05                	jne    c0013a4d <CPU::displayFeatures()+0xe9>
c0013a48:	b8 45 46 02 c0       	mov    eax,0xc0024645
c0013a4d:	52                   	push   edx
c0013a4e:	52                   	push   edx
c0013a4f:	50                   	push   eax
c0013a50:	68 d1 61 02 c0       	push   0xc00261d1
c0013a55:	e8 bd 96 ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0013a5a:	83 c4 10             	add    esp,0x10
c0013a5d:	b8 41 46 02 c0       	mov    eax,0xc0024641
c0013a62:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0013a69:	75 05                	jne    c0013a70 <CPU::displayFeatures()+0x10c>
c0013a6b:	b8 45 46 02 c0       	mov    eax,0xc0024645
c0013a70:	51                   	push   ecx
c0013a71:	51                   	push   ecx
c0013a72:	50                   	push   eax
c0013a73:	68 e8 61 02 c0       	push   0xc00261e8
c0013a78:	e8 9a 96 ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0013a7d:	83 c4 10             	add    esp,0x10
c0013a80:	b8 41 46 02 c0       	mov    eax,0xc0024641
c0013a85:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0013a8c:	75 05                	jne    c0013a93 <CPU::displayFeatures()+0x12f>
c0013a8e:	b8 45 46 02 c0       	mov    eax,0xc0024645
c0013a93:	52                   	push   edx
c0013a94:	52                   	push   edx
c0013a95:	50                   	push   eax
c0013a96:	68 ff 61 02 c0       	push   0xc00261ff
c0013a9b:	e8 77 96 ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0013aa0:	83 c4 10             	add    esp,0x10
c0013aa3:	b8 41 46 02 c0       	mov    eax,0xc0024641
c0013aa8:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0013aaf:	75 05                	jne    c0013ab6 <CPU::displayFeatures()+0x152>
c0013ab1:	b8 45 46 02 c0       	mov    eax,0xc0024645
c0013ab6:	51                   	push   ecx
c0013ab7:	51                   	push   ecx
c0013ab8:	50                   	push   eax
c0013ab9:	68 16 62 02 c0       	push   0xc0026216
c0013abe:	e8 54 96 ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0013ac3:	83 c4 10             	add    esp,0x10
c0013ac6:	b8 41 46 02 c0       	mov    eax,0xc0024641
c0013acb:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0013ad2:	75 05                	jne    c0013ad9 <CPU::displayFeatures()+0x175>
c0013ad4:	b8 45 46 02 c0       	mov    eax,0xc0024645
c0013ad9:	52                   	push   edx
c0013ada:	52                   	push   edx
c0013adb:	50                   	push   eax
c0013adc:	68 2d 62 02 c0       	push   0xc002622d
c0013ae1:	e8 31 96 ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0013ae6:	83 c4 10             	add    esp,0x10
c0013ae9:	b8 41 46 02 c0       	mov    eax,0xc0024641
c0013aee:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0013af5:	75 05                	jne    c0013afc <CPU::displayFeatures()+0x198>
c0013af7:	b8 45 46 02 c0       	mov    eax,0xc0024645
c0013afc:	51                   	push   ecx
c0013afd:	51                   	push   ecx
c0013afe:	50                   	push   eax
c0013aff:	68 44 62 02 c0       	push   0xc0026244
c0013b04:	e8 0e 96 ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0013b09:	83 c4 10             	add    esp,0x10
c0013b0c:	b8 41 46 02 c0       	mov    eax,0xc0024641
c0013b11:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0013b18:	75 05                	jne    c0013b1f <CPU::displayFeatures()+0x1bb>
c0013b1a:	b8 45 46 02 c0       	mov    eax,0xc0024645
c0013b1f:	52                   	push   edx
c0013b20:	52                   	push   edx
c0013b21:	50                   	push   eax
c0013b22:	68 5b 62 02 c0       	push   0xc002625b
c0013b27:	e8 eb 95 ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0013b2c:	83 c4 10             	add    esp,0x10
c0013b2f:	b8 41 46 02 c0       	mov    eax,0xc0024641
c0013b34:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0013b3b:	75 05                	jne    c0013b42 <CPU::displayFeatures()+0x1de>
c0013b3d:	b8 45 46 02 c0       	mov    eax,0xc0024645
c0013b42:	51                   	push   ecx
c0013b43:	51                   	push   ecx
c0013b44:	50                   	push   eax
c0013b45:	68 72 62 02 c0       	push   0xc0026272
c0013b4a:	e8 c8 95 ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0013b4f:	83 c4 10             	add    esp,0x10
c0013b52:	b8 41 46 02 c0       	mov    eax,0xc0024641
c0013b57:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0013b5e:	75 05                	jne    c0013b65 <CPU::displayFeatures()+0x201>
c0013b60:	b8 45 46 02 c0       	mov    eax,0xc0024645
c0013b65:	52                   	push   edx
c0013b66:	52                   	push   edx
c0013b67:	50                   	push   eax
c0013b68:	68 89 62 02 c0       	push   0xc0026289
c0013b6d:	e8 a5 95 ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0013b72:	83 c4 10             	add    esp,0x10
c0013b75:	b8 41 46 02 c0       	mov    eax,0xc0024641
c0013b7a:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0013b81:	75 05                	jne    c0013b88 <CPU::displayFeatures()+0x224>
c0013b83:	b8 45 46 02 c0       	mov    eax,0xc0024645
c0013b88:	51                   	push   ecx
c0013b89:	51                   	push   ecx
c0013b8a:	50                   	push   eax
c0013b8b:	68 a0 62 02 c0       	push   0xc00262a0
c0013b90:	e8 82 95 ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0013b95:	83 c4 10             	add    esp,0x10
c0013b98:	b8 41 46 02 c0       	mov    eax,0xc0024641
c0013b9d:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0013ba4:	78 05                	js     c0013bab <CPU::displayFeatures()+0x247>
c0013ba6:	b8 45 46 02 c0       	mov    eax,0xc0024645
c0013bab:	52                   	push   edx
c0013bac:	52                   	push   edx
c0013bad:	50                   	push   eax
c0013bae:	68 b7 62 02 c0       	push   0xc00262b7
c0013bb3:	e8 5f 95 ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0013bb8:	83 c4 10             	add    esp,0x10
c0013bbb:	b8 41 46 02 c0       	mov    eax,0xc0024641
c0013bc0:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0013bc7:	75 05                	jne    c0013bce <CPU::displayFeatures()+0x26a>
c0013bc9:	b8 45 46 02 c0       	mov    eax,0xc0024645
c0013bce:	51                   	push   ecx
c0013bcf:	51                   	push   ecx
c0013bd0:	50                   	push   eax
c0013bd1:	68 ce 62 02 c0       	push   0xc00262ce
c0013bd6:	e8 3c 95 ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0013bdb:	83 c4 10             	add    esp,0x10
c0013bde:	b8 41 46 02 c0       	mov    eax,0xc0024641
c0013be3:	f6 83 92 11 00 00 02 	test   BYTE PTR [ebx+0x1192],0x2
c0013bea:	75 05                	jne    c0013bf1 <CPU::displayFeatures()+0x28d>
c0013bec:	b8 45 46 02 c0       	mov    eax,0xc0024645
c0013bf1:	52                   	push   edx
c0013bf2:	52                   	push   edx
c0013bf3:	50                   	push   eax
c0013bf4:	68 e5 62 02 c0       	push   0xc00262e5
c0013bf9:	e8 19 95 ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0013bfe:	83 c4 18             	add    esp,0x18
c0013c01:	5b                   	pop    ebx
c0013c02:	c3                   	ret    
c0013c03:	90                   	nop

c0013c04 <CPU::detectFeatures()>:
c0013c04:	55                   	push   ebp
c0013c05:	57                   	push   edi
c0013c06:	56                   	push   esi
c0013c07:	53                   	push   ebx
c0013c08:	83 ec 50             	sub    esp,0x50
c0013c0b:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0013c0f:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0013c19:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0013c20:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0013c26:	6a 0d                	push   0xd
c0013c28:	6a 00                	push   0x0
c0013c2a:	55                   	push   ebp
c0013c2b:	e8 64 ca fe ff       	call   c0000694 <memset>
c0013c30:	83 c4 10             	add    esp,0x10
c0013c33:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c0013c38:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0013c3f:	0f 84 22 09 00 00    	je     c0014567 <CPU::detectFeatures()+0x963>
c0013c45:	83 ec 0c             	sub    esp,0xc
c0013c48:	89 ef                	mov    edi,ebp
c0013c4a:	6a 10                	push   0x10
c0013c4c:	e8 cd fb ff ff       	call   c001381e <CPU::cpuidCheckEDX(unsigned int)>
c0013c51:	83 e0 01             	and    eax,0x1
c0013c54:	8d 14 00             	lea    edx,[eax+eax*1]
c0013c57:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013c5d:	83 e0 fd             	and    eax,0xfffffffd
c0013c60:	09 d0                	or     eax,edx
c0013c62:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013c68:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0013c6f:	e8 aa fb ff ff       	call   c001381e <CPU::cpuidCheckEDX(unsigned int)>
c0013c74:	83 e0 01             	and    eax,0x1
c0013c77:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0013c7e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013c84:	83 e0 fb             	and    eax,0xfffffffb
c0013c87:	09 d0                	or     eax,edx
c0013c89:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013c8f:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0013c96:	e8 83 fb ff ff       	call   c001381e <CPU::cpuidCheckEDX(unsigned int)>
c0013c9b:	83 e0 01             	and    eax,0x1
c0013c9e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0013ca5:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013cab:	83 e0 f7             	and    eax,0xfffffff7
c0013cae:	09 d0                	or     eax,edx
c0013cb0:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013cb6:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0013cbd:	e8 5c fb ff ff       	call   c001381e <CPU::cpuidCheckEDX(unsigned int)>
c0013cc2:	83 e0 01             	and    eax,0x1
c0013cc5:	c1 e0 04             	shl    eax,0x4
c0013cc8:	88 c2                	mov    dl,al
c0013cca:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013cd0:	83 e0 ef             	and    eax,0xffffffef
c0013cd3:	09 d0                	or     eax,edx
c0013cd5:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013cdb:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0013ce2:	e8 37 fb ff ff       	call   c001381e <CPU::cpuidCheckEDX(unsigned int)>
c0013ce7:	83 e0 01             	and    eax,0x1
c0013cea:	c1 e0 05             	shl    eax,0x5
c0013ced:	88 c2                	mov    dl,al
c0013cef:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013cf5:	83 e0 df             	and    eax,0xffffffdf
c0013cf8:	09 d0                	or     eax,edx
c0013cfa:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013d00:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0013d07:	e8 12 fb ff ff       	call   c001381e <CPU::cpuidCheckEDX(unsigned int)>
c0013d0c:	83 e0 01             	and    eax,0x1
c0013d0f:	8d 14 00             	lea    edx,[eax+eax*1]
c0013d12:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0013d18:	83 e0 fd             	and    eax,0xfffffffd
c0013d1b:	09 d0                	or     eax,edx
c0013d1d:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013d23:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0013d2a:	e8 ef fa ff ff       	call   c001381e <CPU::cpuidCheckEDX(unsigned int)>
c0013d2f:	83 e0 01             	and    eax,0x1
c0013d32:	c1 e0 06             	shl    eax,0x6
c0013d35:	88 c2                	mov    dl,al
c0013d37:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013d3d:	83 e0 bf             	and    eax,0xffffffbf
c0013d40:	09 d0                	or     eax,edx
c0013d42:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013d48:	58                   	pop    eax
c0013d49:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013d4d:	50                   	push   eax
c0013d4e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013d52:	50                   	push   eax
c0013d53:	8d 74 24 28          	lea    esi,[esp+0x28]
c0013d57:	56                   	push   esi
c0013d58:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013d5c:	50                   	push   eax
c0013d5d:	6a 00                	push   0x0
c0013d5f:	e8 36 fa ff ff       	call   c001379a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013d64:	b8 04 00 00 00       	mov    eax,0x4
c0013d69:	89 c1                	mov    ecx,eax
c0013d6b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013d6d:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0013d73:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0013d77:	89 c1                	mov    ecx,eax
c0013d79:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013d7b:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0013d81:	8d 74 24 38          	lea    esi,[esp+0x38]
c0013d85:	89 c1                	mov    ecx,eax
c0013d87:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013d89:	83 c4 18             	add    esp,0x18
c0013d8c:	68 fc 62 02 c0       	push   0xc00262fc
c0013d91:	55                   	push   ebp
c0013d92:	e8 45 ca fe ff       	call   c00007dc <strcmp>
c0013d97:	83 c4 10             	add    esp,0x10
c0013d9a:	85 c0                	test   eax,eax
c0013d9c:	75 0f                	jne    c0013dad <CPU::detectFeatures()+0x1a9>
c0013d9e:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0013da8:	e9 22 02 00 00       	jmp    c0013fcf <CPU::detectFeatures()+0x3cb>
c0013dad:	50                   	push   eax
c0013dae:	50                   	push   eax
c0013daf:	68 09 63 02 c0       	push   0xc0026309
c0013db4:	55                   	push   ebp
c0013db5:	e8 22 ca fe ff       	call   c00007dc <strcmp>
c0013dba:	83 c4 10             	add    esp,0x10
c0013dbd:	85 c0                	test   eax,eax
c0013dbf:	74 dd                	je     c0013d9e <CPU::detectFeatures()+0x19a>
c0013dc1:	50                   	push   eax
c0013dc2:	50                   	push   eax
c0013dc3:	68 16 63 02 c0       	push   0xc0026316
c0013dc8:	55                   	push   ebp
c0013dc9:	e8 0e ca fe ff       	call   c00007dc <strcmp>
c0013dce:	83 c4 10             	add    esp,0x10
c0013dd1:	85 c0                	test   eax,eax
c0013dd3:	74 2a                	je     c0013dff <CPU::detectFeatures()+0x1fb>
c0013dd5:	50                   	push   eax
c0013dd6:	50                   	push   eax
c0013dd7:	68 23 63 02 c0       	push   0xc0026323
c0013ddc:	55                   	push   ebp
c0013ddd:	e8 fa c9 fe ff       	call   c00007dc <strcmp>
c0013de2:	83 c4 10             	add    esp,0x10
c0013de5:	85 c0                	test   eax,eax
c0013de7:	74 16                	je     c0013dff <CPU::detectFeatures()+0x1fb>
c0013de9:	50                   	push   eax
c0013dea:	50                   	push   eax
c0013deb:	68 30 63 02 c0       	push   0xc0026330
c0013df0:	55                   	push   ebp
c0013df1:	e8 e6 c9 fe ff       	call   c00007dc <strcmp>
c0013df6:	83 c4 10             	add    esp,0x10
c0013df9:	85 c0                	test   eax,eax
c0013dfb:	74 48                	je     c0013e45 <CPU::detectFeatures()+0x241>
c0013dfd:	eb 0f                	jmp    c0013e0e <CPU::detectFeatures()+0x20a>
c0013dff:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0013e09:	e9 c1 01 00 00       	jmp    c0013fcf <CPU::detectFeatures()+0x3cb>
c0013e0e:	50                   	push   eax
c0013e0f:	50                   	push   eax
c0013e10:	68 3d 63 02 c0       	push   0xc002633d
c0013e15:	55                   	push   ebp
c0013e16:	e8 c1 c9 fe ff       	call   c00007dc <strcmp>
c0013e1b:	83 c4 10             	add    esp,0x10
c0013e1e:	85 c0                	test   eax,eax
c0013e20:	74 23                	je     c0013e45 <CPU::detectFeatures()+0x241>
c0013e22:	57                   	push   edi
c0013e23:	57                   	push   edi
c0013e24:	68 4a 63 02 c0       	push   0xc002634a
c0013e29:	55                   	push   ebp
c0013e2a:	e8 ad c9 fe ff       	call   c00007dc <strcmp>
c0013e2f:	83 c4 10             	add    esp,0x10
c0013e32:	85 c0                	test   eax,eax
c0013e34:	75 1e                	jne    c0013e54 <CPU::detectFeatures()+0x250>
c0013e36:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0013e40:	e9 8a 01 00 00       	jmp    c0013fcf <CPU::detectFeatures()+0x3cb>
c0013e45:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0013e4f:	e9 7b 01 00 00       	jmp    c0013fcf <CPU::detectFeatures()+0x3cb>
c0013e54:	56                   	push   esi
c0013e55:	56                   	push   esi
c0013e56:	68 57 63 02 c0       	push   0xc0026357
c0013e5b:	55                   	push   ebp
c0013e5c:	e8 7b c9 fe ff       	call   c00007dc <strcmp>
c0013e61:	83 c4 10             	add    esp,0x10
c0013e64:	85 c0                	test   eax,eax
c0013e66:	75 0f                	jne    c0013e77 <CPU::detectFeatures()+0x273>
c0013e68:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0013e72:	e9 58 01 00 00       	jmp    c0013fcf <CPU::detectFeatures()+0x3cb>
c0013e77:	51                   	push   ecx
c0013e78:	51                   	push   ecx
c0013e79:	68 16 63 02 c0       	push   0xc0026316
c0013e7e:	55                   	push   ebp
c0013e7f:	e8 58 c9 fe ff       	call   c00007dc <strcmp>
c0013e84:	83 c4 10             	add    esp,0x10
c0013e87:	85 c0                	test   eax,eax
c0013e89:	75 0f                	jne    c0013e9a <CPU::detectFeatures()+0x296>
c0013e8b:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0013e95:	e9 35 01 00 00       	jmp    c0013fcf <CPU::detectFeatures()+0x3cb>
c0013e9a:	52                   	push   edx
c0013e9b:	52                   	push   edx
c0013e9c:	68 64 63 02 c0       	push   0xc0026364
c0013ea1:	55                   	push   ebp
c0013ea2:	e8 35 c9 fe ff       	call   c00007dc <strcmp>
c0013ea7:	83 c4 10             	add    esp,0x10
c0013eaa:	85 c0                	test   eax,eax
c0013eac:	75 0f                	jne    c0013ebd <CPU::detectFeatures()+0x2b9>
c0013eae:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0013eb8:	e9 12 01 00 00       	jmp    c0013fcf <CPU::detectFeatures()+0x3cb>
c0013ebd:	50                   	push   eax
c0013ebe:	50                   	push   eax
c0013ebf:	68 71 63 02 c0       	push   0xc0026371
c0013ec4:	55                   	push   ebp
c0013ec5:	e8 12 c9 fe ff       	call   c00007dc <strcmp>
c0013eca:	83 c4 10             	add    esp,0x10
c0013ecd:	85 c0                	test   eax,eax
c0013ecf:	75 0f                	jne    c0013ee0 <CPU::detectFeatures()+0x2dc>
c0013ed1:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0013edb:	e9 ef 00 00 00       	jmp    c0013fcf <CPU::detectFeatures()+0x3cb>
c0013ee0:	50                   	push   eax
c0013ee1:	50                   	push   eax
c0013ee2:	68 7e 63 02 c0       	push   0xc002637e
c0013ee7:	55                   	push   ebp
c0013ee8:	e8 ef c8 fe ff       	call   c00007dc <strcmp>
c0013eed:	83 c4 10             	add    esp,0x10
c0013ef0:	85 c0                	test   eax,eax
c0013ef2:	75 0f                	jne    c0013f03 <CPU::detectFeatures()+0x2ff>
c0013ef4:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0013efe:	e9 cc 00 00 00       	jmp    c0013fcf <CPU::detectFeatures()+0x3cb>
c0013f03:	50                   	push   eax
c0013f04:	50                   	push   eax
c0013f05:	68 8b 63 02 c0       	push   0xc002638b
c0013f0a:	55                   	push   ebp
c0013f0b:	e8 cc c8 fe ff       	call   c00007dc <strcmp>
c0013f10:	83 c4 10             	add    esp,0x10
c0013f13:	85 c0                	test   eax,eax
c0013f15:	75 0f                	jne    c0013f26 <CPU::detectFeatures()+0x322>
c0013f17:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0013f21:	e9 a9 00 00 00       	jmp    c0013fcf <CPU::detectFeatures()+0x3cb>
c0013f26:	50                   	push   eax
c0013f27:	50                   	push   eax
c0013f28:	68 98 63 02 c0       	push   0xc0026398
c0013f2d:	55                   	push   ebp
c0013f2e:	e8 a9 c8 fe ff       	call   c00007dc <strcmp>
c0013f33:	83 c4 10             	add    esp,0x10
c0013f36:	85 c0                	test   eax,eax
c0013f38:	75 0f                	jne    c0013f49 <CPU::detectFeatures()+0x345>
c0013f3a:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0013f44:	e9 86 00 00 00       	jmp    c0013fcf <CPU::detectFeatures()+0x3cb>
c0013f49:	50                   	push   eax
c0013f4a:	50                   	push   eax
c0013f4b:	68 a5 63 02 c0       	push   0xc00263a5
c0013f50:	55                   	push   ebp
c0013f51:	e8 86 c8 fe ff       	call   c00007dc <strcmp>
c0013f56:	83 c4 10             	add    esp,0x10
c0013f59:	85 c0                	test   eax,eax
c0013f5b:	75 0c                	jne    c0013f69 <CPU::detectFeatures()+0x365>
c0013f5d:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0013f67:	eb 66                	jmp    c0013fcf <CPU::detectFeatures()+0x3cb>
c0013f69:	50                   	push   eax
c0013f6a:	50                   	push   eax
c0013f6b:	68 b2 63 02 c0       	push   0xc00263b2
c0013f70:	55                   	push   ebp
c0013f71:	e8 66 c8 fe ff       	call   c00007dc <strcmp>
c0013f76:	83 c4 10             	add    esp,0x10
c0013f79:	85 c0                	test   eax,eax
c0013f7b:	75 0c                	jne    c0013f89 <CPU::detectFeatures()+0x385>
c0013f7d:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0013f87:	eb 46                	jmp    c0013fcf <CPU::detectFeatures()+0x3cb>
c0013f89:	57                   	push   edi
c0013f8a:	57                   	push   edi
c0013f8b:	68 bf 63 02 c0       	push   0xc00263bf
c0013f90:	55                   	push   ebp
c0013f91:	e8 46 c8 fe ff       	call   c00007dc <strcmp>
c0013f96:	83 c4 10             	add    esp,0x10
c0013f99:	85 c0                	test   eax,eax
c0013f9b:	74 e0                	je     c0013f7d <CPU::detectFeatures()+0x379>
c0013f9d:	56                   	push   esi
c0013f9e:	56                   	push   esi
c0013f9f:	68 cc 63 02 c0       	push   0xc00263cc
c0013fa4:	55                   	push   ebp
c0013fa5:	e8 32 c8 fe ff       	call   c00007dc <strcmp>
c0013faa:	83 c4 10             	add    esp,0x10
c0013fad:	85 c0                	test   eax,eax
c0013faf:	74 cc                	je     c0013f7d <CPU::detectFeatures()+0x379>
c0013fb1:	51                   	push   ecx
c0013fb2:	51                   	push   ecx
c0013fb3:	68 d9 63 02 c0       	push   0xc00263d9
c0013fb8:	55                   	push   ebp
c0013fb9:	e8 1e c8 fe ff       	call   c00007dc <strcmp>
c0013fbe:	83 c4 10             	add    esp,0x10
c0013fc1:	85 c0                	test   eax,eax
c0013fc3:	74 b8                	je     c0013f7d <CPU::detectFeatures()+0x379>
c0013fc5:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0013fcf:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0013fd4:	0f 86 be 00 00 00    	jbe    c0014098 <CPU::detectFeatures()+0x494>
c0013fda:	83 ec 0c             	sub    esp,0xc
c0013fdd:	68 80 00 00 00       	push   0x80
c0013fe2:	e8 93 f8 ff ff       	call   c001387a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013fe7:	83 e0 01             	and    eax,0x1
c0013fea:	c1 e0 06             	shl    eax,0x6
c0013fed:	88 c2                	mov    dl,al
c0013fef:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013ff5:	83 e0 bf             	and    eax,0xffffffbf
c0013ff8:	09 d0                	or     eax,edx
c0013ffa:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014000:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0014007:	e8 6e f8 ff ff       	call   c001387a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001400c:	83 e0 01             	and    eax,0x1
c001400f:	c1 e0 04             	shl    eax,0x4
c0014012:	88 c2                	mov    dl,al
c0014014:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001401a:	83 e0 ef             	and    eax,0xffffffef
c001401d:	09 d0                	or     eax,edx
c001401f:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014025:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001402c:	e8 49 f8 ff ff       	call   c001387a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0014031:	c1 e0 07             	shl    eax,0x7
c0014034:	88 c2                	mov    dl,al
c0014036:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001403c:	83 e0 7f             	and    eax,0x7f
c001403f:	09 d0                	or     eax,edx
c0014041:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014047:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001404e:	e8 55 f8 ff ff       	call   c00138a8 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0014053:	83 e0 01             	and    eax,0x1
c0014056:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001405d:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014063:	83 e0 f7             	and    eax,0xfffffff7
c0014066:	09 d0                	or     eax,edx
c0014068:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001406e:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0014075:	e8 2e f8 ff ff       	call   c00138a8 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001407a:	83 c4 10             	add    esp,0x10
c001407d:	83 e0 01             	and    eax,0x1
c0014080:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0014087:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001408d:	83 e0 fb             	and    eax,0xfffffffb
c0014090:	09 d0                	or     eax,edx
c0014092:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0014098:	83 ec 0c             	sub    esp,0xc
c001409b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001409f:	50                   	push   eax
c00140a0:	8d 44 24 28          	lea    eax,[esp+0x28]
c00140a4:	50                   	push   eax
c00140a5:	8d 74 24 28          	lea    esi,[esp+0x28]
c00140a9:	56                   	push   esi
c00140aa:	8d 44 24 28          	lea    eax,[esp+0x28]
c00140ae:	50                   	push   eax
c00140af:	6a 01                	push   0x1
c00140b1:	e8 e4 f6 ff ff       	call   c001379a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00140b6:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00140ba:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00140c0:	88 ca                	mov    dl,cl
c00140c2:	83 e0 f0             	and    eax,0xfffffff0
c00140c5:	83 e2 0f             	and    edx,0xf
c00140c8:	09 d0                	or     eax,edx
c00140ca:	88 ca                	mov    dl,cl
c00140cc:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00140d2:	c0 ea 04             	shr    dl,0x4
c00140d5:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00140d9:	0f b6 c2             	movzx  eax,dl
c00140dc:	83 c4 20             	add    esp,0x20
c00140df:	c1 e0 06             	shl    eax,0x6
c00140e2:	89 c7                	mov    edi,eax
c00140e4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00140ea:	66 25 3f c0          	and    ax,0xc03f
c00140ee:	09 f8                	or     eax,edi
c00140f0:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00140f7:	89 c8                	mov    eax,ecx
c00140f9:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0014100:	c1 e8 08             	shr    eax,0x8
c0014103:	83 e5 3f             	and    ebp,0x3f
c0014106:	83 e0 0f             	and    eax,0xf
c0014109:	89 c7                	mov    edi,eax
c001410b:	c1 e7 06             	shl    edi,0x6
c001410e:	09 ef                	or     edi,ebp
c0014110:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0014117:	89 fa                	mov    edx,edi
c0014119:	83 e5 c0             	and    ebp,0xffffffc0
c001411c:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0014122:	88 c2                	mov    dl,al
c0014124:	c0 ea 02             	shr    dl,0x2
c0014127:	89 d7                	mov    edi,edx
c0014129:	09 ef                	or     edi,ebp
c001412b:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0014131:	89 fa                	mov    edx,edi
c0014133:	83 e5 cf             	and    ebp,0xffffffcf
c0014136:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c001413c:	89 cf                	mov    edi,ecx
c001413e:	c1 ef 0c             	shr    edi,0xc
c0014141:	83 e7 03             	and    edi,0x3
c0014144:	c1 e7 04             	shl    edi,0x4
c0014147:	09 ef                	or     edi,ebp
c0014149:	3c 06                	cmp    al,0x6
c001414b:	89 fa                	mov    edx,edi
c001414d:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0014153:	74 04                	je     c0014159 <CPU::detectFeatures()+0x555>
c0014155:	3c 0f                	cmp    al,0xf
c0014157:	75 5c                	jne    c00141b5 <CPU::detectFeatures()+0x5b1>
c0014159:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001415d:	89 cf                	mov    edi,ecx
c001415f:	c1 ef 10             	shr    edi,0x10
c0014162:	c1 e7 04             	shl    edi,0x4
c0014165:	09 fa                	or     edx,edi
c0014167:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c001416d:	0f b6 d2             	movzx  edx,dl
c0014170:	66 81 e7 3f c0       	and    di,0xc03f
c0014175:	c1 e2 06             	shl    edx,0x6
c0014178:	09 fa                	or     edx,edi
c001417a:	3c 0f                	cmp    al,0xf
c001417c:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0014183:	75 30                	jne    c00141b5 <CPU::detectFeatures()+0x5b1>
c0014185:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c001418b:	c1 e9 14             	shr    ecx,0x14
c001418e:	83 e0 3f             	and    eax,0x3f
c0014191:	83 c1 0f             	add    ecx,0xf
c0014194:	88 ca                	mov    dl,cl
c0014196:	c0 e9 02             	shr    cl,0x2
c0014199:	c1 e2 06             	shl    edx,0x6
c001419c:	09 d0                	or     eax,edx
c001419e:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00141a4:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00141aa:	83 e0 c0             	and    eax,0xffffffc0
c00141ad:	09 c1                	or     ecx,eax
c00141af:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00141b5:	83 ec 0c             	sub    esp,0xc
c00141b8:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00141bf:	8d 44 24 28          	lea    eax,[esp+0x28]
c00141c3:	50                   	push   eax
c00141c4:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00141c8:	55                   	push   ebp
c00141c9:	56                   	push   esi
c00141ca:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00141ce:	57                   	push   edi
c00141cf:	68 00 00 00 80       	push   0x80000000
c00141d4:	e8 c1 f5 ff ff       	call   c001379a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00141d9:	83 c4 20             	add    esp,0x20
c00141dc:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00141e4:	76 22                	jbe    c0014208 <CPU::detectFeatures()+0x604>
c00141e6:	83 ec 0c             	sub    esp,0xc
c00141e9:	8d 44 24 28          	lea    eax,[esp+0x28]
c00141ed:	50                   	push   eax
c00141ee:	55                   	push   ebp
c00141ef:	56                   	push   esi
c00141f0:	57                   	push   edi
c00141f1:	68 01 00 00 80       	push   0x80000001
c00141f6:	e8 9f f5 ff ff       	call   c001379a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00141fb:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0014205:	83 c4 20             	add    esp,0x20
c0014208:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001420e:	83 f8 01             	cmp    eax,0x1
c0014211:	75 6f                	jne    c0014282 <CPU::detectFeatures()+0x67e>
c0014213:	51                   	push   ecx
c0014214:	51                   	push   ecx
c0014215:	68 e5 63 02 c0       	push   0xc00263e5
c001421a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001421e:	56                   	push   esi
c001421f:	e8 2c c5 fe ff       	call   c0000750 <strcpy>
c0014224:	5f                   	pop    edi
c0014225:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001422b:	5d                   	pop    ebp
c001422c:	66 c1 e8 06          	shr    ax,0x6
c0014230:	0f b6 c0             	movzx  eax,al
c0014233:	50                   	push   eax
c0014234:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001423a:	c1 e8 0e             	shr    eax,0xe
c001423d:	0f b6 c0             	movzx  eax,al
c0014240:	50                   	push   eax
c0014241:	e8 fe f1 ff ff       	call   c0013444 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0014246:	5a                   	pop    edx
c0014247:	59                   	pop    ecx
c0014248:	50                   	push   eax
c0014249:	56                   	push   esi
c001424a:	e8 41 c6 fe ff       	call   c0000890 <strcat>
c001424f:	5f                   	pop    edi
c0014250:	5d                   	pop    ebp
c0014251:	56                   	push   esi
c0014252:	53                   	push   ebx
c0014253:	e8 28 a6 ff ff       	call   c000e880 <Device::setName(char const*)>
c0014258:	58                   	pop    eax
c0014259:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001425f:	5a                   	pop    edx
c0014260:	68 ec 63 02 c0       	push   0xc00263ec
c0014265:	50                   	push   eax
c0014266:	e8 71 c5 fe ff       	call   c00007dc <strcmp>
c001426b:	83 c4 10             	add    esp,0x10
c001426e:	85 c0                	test   eax,eax
c0014270:	0f 85 71 03 00 00    	jne    c00145e7 <CPU::detectFeatures()+0x9e3>
c0014276:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c001427d:	e9 65 03 00 00       	jmp    c00145e7 <CPU::detectFeatures()+0x9e3>
c0014282:	83 f8 02             	cmp    eax,0x2
c0014285:	0f 85 b5 00 00 00    	jne    c0014340 <CPU::detectFeatures()+0x73c>
c001428b:	57                   	push   edi
c001428c:	57                   	push   edi
c001428d:	68 fe 63 02 c0       	push   0xc00263fe
c0014292:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0014296:	56                   	push   esi
c0014297:	e8 b4 c4 fe ff       	call   c0000750 <strcpy>
c001429c:	5d                   	pop    ebp
c001429d:	58                   	pop    eax
c001429e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00142a4:	66 c1 e8 06          	shr    ax,0x6
c00142a8:	0f b6 c0             	movzx  eax,al
c00142ab:	50                   	push   eax
c00142ac:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00142b2:	c1 e8 0e             	shr    eax,0xe
c00142b5:	0f b6 c0             	movzx  eax,al
c00142b8:	50                   	push   eax
c00142b9:	e8 f2 ef ff ff       	call   c00132b0 <CPU::lookupAMDName(unsigned char, unsigned char)>
c00142be:	5a                   	pop    edx
c00142bf:	59                   	pop    ecx
c00142c0:	50                   	push   eax
c00142c1:	56                   	push   esi
c00142c2:	e8 c9 c5 fe ff       	call   c0000890 <strcat>
c00142c7:	5f                   	pop    edi
c00142c8:	5d                   	pop    ebp
c00142c9:	56                   	push   esi
c00142ca:	53                   	push   ebx
c00142cb:	e8 b0 a5 ff ff       	call   c000e880 <Device::setName(char const*)>
c00142d0:	58                   	pop    eax
c00142d1:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00142d7:	5a                   	pop    edx
c00142d8:	68 03 64 02 c0       	push   0xc0026403
c00142dd:	50                   	push   eax
c00142de:	e8 f9 c4 fe ff       	call   c00007dc <strcmp>
c00142e3:	83 c4 10             	add    esp,0x10
c00142e6:	85 c0                	test   eax,eax
c00142e8:	75 20                	jne    c001430a <CPU::detectFeatures()+0x706>
c00142ea:	8b 15 08 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028c08
c00142f0:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00142f6:	a8 01                	test   al,0x1
c00142f8:	74 10                	je     c001430a <CPU::detectFeatures()+0x706>
c00142fa:	83 e0 fe             	and    eax,0xfffffffe
c00142fd:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014303:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c001430a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014310:	c1 e8 0e             	shr    eax,0xe
c0014313:	3c 05                	cmp    al,0x5
c0014315:	0f 85 cc 02 00 00    	jne    c00145e7 <CPU::detectFeatures()+0x9e3>
c001431b:	56                   	push   esi
c001431c:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0014322:	83 e0 0f             	and    eax,0xf
c0014325:	50                   	push   eax
c0014326:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001432c:	66 c1 e8 06          	shr    ax,0x6
c0014330:	0f b6 c0             	movzx  eax,al
c0014333:	50                   	push   eax
c0014334:	6a 05                	push   0x5
c0014336:	e8 eb f3 ff ff       	call   c0013726 <CPU::AMD_K6_writeback(int, int, int)>
c001433b:	e9 1f 02 00 00       	jmp    c001455f <CPU::detectFeatures()+0x95b>
c0014340:	8d 50 fd             	lea    edx,[eax-0x3]
c0014343:	83 fa 01             	cmp    edx,0x1
c0014346:	76 09                	jbe    c0014351 <CPU::detectFeatures()+0x74d>
c0014348:	83 f8 06             	cmp    eax,0x6
c001434b:	0f 85 91 01 00 00    	jne    c00144e2 <CPU::detectFeatures()+0x8de>
c0014351:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0014357:	c1 ea 0e             	shr    edx,0xe
c001435a:	80 fa 05             	cmp    dl,0x5
c001435d:	75 7b                	jne    c00143da <CPU::detectFeatures()+0x7d6>
c001435f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0014365:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001436a:	66 81 fa 00 01       	cmp    dx,0x100
c001436f:	75 0c                	jne    c001437d <CPU::detectFeatures()+0x779>
c0014371:	51                   	push   ecx
c0014372:	51                   	push   ecx
c0014373:	68 0a 64 02 c0       	push   0xc002640a
c0014378:	e9 dc 01 00 00       	jmp    c0014559 <CPU::detectFeatures()+0x955>
c001437d:	66 81 fa 00 02       	cmp    dx,0x200
c0014382:	75 0c                	jne    c0014390 <CPU::detectFeatures()+0x78c>
c0014384:	52                   	push   edx
c0014385:	52                   	push   edx
c0014386:	68 1d 64 02 c0       	push   0xc002641d
c001438b:	e9 c9 01 00 00       	jmp    c0014559 <CPU::detectFeatures()+0x955>
c0014390:	66 81 fa 40 02       	cmp    dx,0x240
c0014395:	75 0c                	jne    c00143a3 <CPU::detectFeatures()+0x79f>
c0014397:	50                   	push   eax
c0014398:	50                   	push   eax
c0014399:	68 2f 64 02 c0       	push   0xc002642f
c001439e:	e9 b6 01 00 00       	jmp    c0014559 <CPU::detectFeatures()+0x955>
c00143a3:	83 f8 06             	cmp    eax,0x6
c00143a6:	75 0c                	jne    c00143b4 <CPU::detectFeatures()+0x7b0>
c00143a8:	50                   	push   eax
c00143a9:	50                   	push   eax
c00143aa:	68 41 64 02 c0       	push   0xc0026441
c00143af:	e9 a5 01 00 00       	jmp    c0014559 <CPU::detectFeatures()+0x955>
c00143b4:	83 f8 04             	cmp    eax,0x4
c00143b7:	75 0c                	jne    c00143c5 <CPU::detectFeatures()+0x7c1>
c00143b9:	50                   	push   eax
c00143ba:	50                   	push   eax
c00143bb:	68 4d 64 02 c0       	push   0xc002644d
c00143c0:	e9 94 01 00 00       	jmp    c0014559 <CPU::detectFeatures()+0x955>
c00143c5:	83 f8 03             	cmp    eax,0x3
c00143c8:	0f 85 19 02 00 00    	jne    c00145e7 <CPU::detectFeatures()+0x9e3>
c00143ce:	50                   	push   eax
c00143cf:	50                   	push   eax
c00143d0:	68 55 64 02 c0       	push   0xc0026455
c00143d5:	e9 7f 01 00 00       	jmp    c0014559 <CPU::detectFeatures()+0x955>
c00143da:	80 fa 06             	cmp    dl,0x6
c00143dd:	0f 85 db 00 00 00    	jne    c00144be <CPU::detectFeatures()+0x8ba>
c00143e3:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00143e9:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00143ee:	66 81 fa 80 01       	cmp    dx,0x180
c00143f3:	75 0c                	jne    c0014401 <CPU::detectFeatures()+0x7fd>
c00143f5:	50                   	push   eax
c00143f6:	50                   	push   eax
c00143f7:	68 60 64 02 c0       	push   0xc0026460
c00143fc:	e9 58 01 00 00       	jmp    c0014559 <CPU::detectFeatures()+0x955>
c0014401:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0014407:	66 f7 c1 80 ff       	test   cx,0xff80
c001440c:	75 0c                	jne    c001441a <CPU::detectFeatures()+0x816>
c001440e:	50                   	push   eax
c001440f:	50                   	push   eax
c0014410:	68 70 64 02 c0       	push   0xc0026470
c0014415:	e9 3f 01 00 00       	jmp    c0014559 <CPU::detectFeatures()+0x955>
c001441a:	66 81 fa 40 02       	cmp    dx,0x240
c001441f:	75 0c                	jne    c001442d <CPU::detectFeatures()+0x829>
c0014421:	55                   	push   ebp
c0014422:	55                   	push   ebp
c0014423:	68 77 64 02 c0       	push   0xc0026477
c0014428:	e9 2c 01 00 00       	jmp    c0014559 <CPU::detectFeatures()+0x955>
c001442d:	66 81 fa 80 02       	cmp    dx,0x280
c0014432:	75 0c                	jne    c0014440 <CPU::detectFeatures()+0x83c>
c0014434:	57                   	push   edi
c0014435:	57                   	push   edi
c0014436:	68 80 64 02 c0       	push   0xc0026480
c001443b:	e9 19 01 00 00       	jmp    c0014559 <CPU::detectFeatures()+0x955>
c0014440:	66 81 fa 40 03       	cmp    dx,0x340
c0014445:	74 ed                	je     c0014434 <CPU::detectFeatures()+0x830>
c0014447:	66 81 fa c0 03       	cmp    dx,0x3c0
c001444c:	75 0c                	jne    c001445a <CPU::detectFeatures()+0x856>
c001444e:	56                   	push   esi
c001444f:	56                   	push   esi
c0014450:	68 87 64 02 c0       	push   0xc0026487
c0014455:	e9 ff 00 00 00       	jmp    c0014559 <CPU::detectFeatures()+0x955>
c001445a:	83 f8 06             	cmp    eax,0x6
c001445d:	0f 84 45 ff ff ff    	je     c00143a8 <CPU::detectFeatures()+0x7a4>
c0014463:	83 f8 04             	cmp    eax,0x4
c0014466:	0f 84 4d ff ff ff    	je     c00143b9 <CPU::detectFeatures()+0x7b5>
c001446c:	83 f8 03             	cmp    eax,0x3
c001446f:	0f 85 72 01 00 00    	jne    c00145e7 <CPU::detectFeatures()+0x9e3>
c0014475:	51                   	push   ecx
c0014476:	51                   	push   ecx
c0014477:	68 90 64 02 c0       	push   0xc0026490
c001447c:	53                   	push   ebx
c001447d:	e8 fe a3 ff ff       	call   c000e880 <Device::setName(char const*)>
c0014482:	b1 c1                	mov    cl,0xc1
c0014484:	88 c8                	mov    al,cl
c0014486:	e6 22                	out    0x22,al
c0014488:	e4 23                	in     al,0x23
c001448a:	88 c2                	mov    dl,al
c001448c:	88 c8                	mov    al,cl
c001448e:	e6 22                	out    0x22,al
c0014490:	88 d0                	mov    al,dl
c0014492:	83 c8 10             	or     eax,0x10
c0014495:	e6 23                	out    0x23,al
c0014497:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001449e:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00144a1:	89 d0                	mov    eax,edx
c00144a3:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00144a9:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00144ad:	40                   	inc    eax
c00144ae:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00144b4:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00144b9:	e9 a1 00 00 00       	jmp    c001455f <CPU::detectFeatures()+0x95b>
c00144be:	83 f8 06             	cmp    eax,0x6
c00144c1:	0f 84 e1 fe ff ff    	je     c00143a8 <CPU::detectFeatures()+0x7a4>
c00144c7:	83 f8 04             	cmp    eax,0x4
c00144ca:	0f 84 e9 fe ff ff    	je     c00143b9 <CPU::detectFeatures()+0x7b5>
c00144d0:	83 f8 03             	cmp    eax,0x3
c00144d3:	0f 85 0e 01 00 00    	jne    c00145e7 <CPU::detectFeatures()+0x9e3>
c00144d9:	52                   	push   edx
c00144da:	52                   	push   edx
c00144db:	68 9b 64 02 c0       	push   0xc002649b
c00144e0:	eb 77                	jmp    c0014559 <CPU::detectFeatures()+0x955>
c00144e2:	83 f8 07             	cmp    eax,0x7
c00144e5:	75 09                	jne    c00144f0 <CPU::detectFeatures()+0x8ec>
c00144e7:	50                   	push   eax
c00144e8:	50                   	push   eax
c00144e9:	68 a5 64 02 c0       	push   0xc00264a5
c00144ee:	eb 69                	jmp    c0014559 <CPU::detectFeatures()+0x955>
c00144f0:	83 f8 0a             	cmp    eax,0xa
c00144f3:	75 09                	jne    c00144fe <CPU::detectFeatures()+0x8fa>
c00144f5:	50                   	push   eax
c00144f6:	50                   	push   eax
c00144f7:	68 b0 64 02 c0       	push   0xc00264b0
c00144fc:	eb 5b                	jmp    c0014559 <CPU::detectFeatures()+0x955>
c00144fe:	83 f8 0b             	cmp    eax,0xb
c0014501:	75 09                	jne    c001450c <CPU::detectFeatures()+0x908>
c0014503:	50                   	push   eax
c0014504:	50                   	push   eax
c0014505:	68 b8 64 02 c0       	push   0xc00264b8
c001450a:	eb 4d                	jmp    c0014559 <CPU::detectFeatures()+0x955>
c001450c:	83 f8 08             	cmp    eax,0x8
c001450f:	75 09                	jne    c001451a <CPU::detectFeatures()+0x916>
c0014511:	50                   	push   eax
c0014512:	50                   	push   eax
c0014513:	68 c1 64 02 c0       	push   0xc00264c1
c0014518:	eb 3f                	jmp    c0014559 <CPU::detectFeatures()+0x955>
c001451a:	83 f8 09             	cmp    eax,0x9
c001451d:	75 09                	jne    c0014528 <CPU::detectFeatures()+0x924>
c001451f:	50                   	push   eax
c0014520:	50                   	push   eax
c0014521:	68 c9 64 02 c0       	push   0xc00264c9
c0014526:	eb 31                	jmp    c0014559 <CPU::detectFeatures()+0x955>
c0014528:	83 f8 05             	cmp    eax,0x5
c001452b:	75 09                	jne    c0014536 <CPU::detectFeatures()+0x932>
c001452d:	50                   	push   eax
c001452e:	50                   	push   eax
c001452f:	68 d1 64 02 c0       	push   0xc00264d1
c0014534:	eb 23                	jmp    c0014559 <CPU::detectFeatures()+0x955>
c0014536:	83 f8 0c             	cmp    eax,0xc
c0014539:	75 09                	jne    c0014544 <CPU::detectFeatures()+0x940>
c001453b:	55                   	push   ebp
c001453c:	55                   	push   ebp
c001453d:	68 df 64 02 c0       	push   0xc00264df
c0014542:	eb 15                	jmp    c0014559 <CPU::detectFeatures()+0x955>
c0014544:	83 f8 0d             	cmp    eax,0xd
c0014547:	75 09                	jne    c0014552 <CPU::detectFeatures()+0x94e>
c0014549:	57                   	push   edi
c001454a:	57                   	push   edi
c001454b:	68 ea 64 02 c0       	push   0xc00264ea
c0014550:	eb 07                	jmp    c0014559 <CPU::detectFeatures()+0x955>
c0014552:	56                   	push   esi
c0014553:	56                   	push   esi
c0014554:	68 fe 64 02 c0       	push   0xc00264fe
c0014559:	53                   	push   ebx
c001455a:	e8 21 a3 ff ff       	call   c000e880 <Device::setName(char const*)>
c001455f:	83 c4 10             	add    esp,0x10
c0014562:	e9 80 00 00 00       	jmp    c00145e7 <CPU::detectFeatures()+0x9e3>
c0014567:	51                   	push   ecx
c0014568:	51                   	push   ecx
c0014569:	68 4a 63 02 c0       	push   0xc002634a
c001456e:	55                   	push   ebp
c001456f:	e8 dc c1 fe ff       	call   c0000750 <strcpy>
c0014574:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001457e:	e8 60 bc fe ff       	call   c00001e3 <is486>
c0014583:	83 c4 10             	add    esp,0x10
c0014586:	85 c0                	test   eax,eax
c0014588:	74 2b                	je     c00145b5 <CPU::detectFeatures()+0x9b1>
c001458a:	52                   	push   edx
c001458b:	52                   	push   edx
c001458c:	68 0a 65 02 c0       	push   0xc002650a
c0014591:	53                   	push   ebx
c0014592:	e8 e9 a2 ff ff       	call   c000e880 <Device::setName(char const*)>
c0014597:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001459e:	0f 20 c0             	mov    eax,cr0
c00145a1:	83 e0 14             	and    eax,0x14
c00145a4:	83 c4 10             	add    esp,0x10
c00145a7:	83 f8 04             	cmp    eax,0x4
c00145aa:	75 1f                	jne    c00145cb <CPU::detectFeatures()+0x9c7>
c00145ac:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c00145b3:	eb 32                	jmp    c00145e7 <CPU::detectFeatures()+0x9e3>
c00145b5:	50                   	push   eax
c00145b6:	50                   	push   eax
c00145b7:	68 15 65 02 c0       	push   0xc0026515
c00145bc:	53                   	push   ebx
c00145bd:	e8 be a2 ff ff       	call   c000e880 <Device::setName(char const*)>
c00145c2:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00145c9:	eb d3                	jmp    c001459e <CPU::detectFeatures()+0x99a>
c00145cb:	e8 ee bb fe ff       	call   c00001be <hasLegacyFPU>
c00145d0:	83 e0 01             	and    eax,0x1
c00145d3:	8d 14 00             	lea    edx,[eax+eax*1]
c00145d6:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00145dc:	83 e0 fd             	and    eax,0xfffffffd
c00145df:	09 d0                	or     eax,edx
c00145e1:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00145e7:	f6 83 92 11 00 00 02 	test   BYTE PTR [ebx+0x1192],0x2
c00145ee:	74 0e                	je     c00145fe <CPU::detectFeatures()+0x9fa>
c00145f0:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c00145f5:	80 88 e8 01 00 00 10 	or     BYTE PTR [eax+0x1e8],0x10
c00145fc:	eb 20                	jmp    c001461e <CPU::detectFeatures()+0xa1a>
c00145fe:	e8 bb bb fe ff       	call   c00001be <hasLegacyFPU>
c0014603:	83 e0 01             	and    eax,0x1
c0014606:	8d 14 00             	lea    edx,[eax+eax*1]
c0014609:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001460f:	83 e0 fd             	and    eax,0xfffffffd
c0014612:	09 d0                	or     eax,edx
c0014614:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001461a:	a8 02                	test   al,0x2
c001461c:	75 d2                	jne    c00145f0 <CPU::detectFeatures()+0x9ec>
c001461e:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0014625:	83 c4 4c             	add    esp,0x4c
c0014628:	5b                   	pop    ebx
c0014629:	5e                   	pop    esi
c001462a:	5f                   	pop    edi
c001462b:	5d                   	pop    ebp
c001462c:	c3                   	ret    
c001462d:	90                   	nop

c001462e <CPU::setupSMEP()>:
c001462e:	0f 20 e0             	mov    eax,cr4
c0014631:	0d 00 00 10 00       	or     eax,0x100000
c0014636:	0f 22 e0             	mov    cr4,eax
c0014639:	c3                   	ret    

c001463a <CPU::setupUMIP()>:
c001463a:	0f 20 e0             	mov    eax,cr4
c001463d:	80 cc 08             	or     ah,0x8
c0014640:	0f 22 e0             	mov    cr4,eax
c0014643:	c3                   	ret    

c0014644 <CPU::setupTSC()>:
c0014644:	0f 20 e0             	mov    eax,cr4
c0014647:	83 c8 04             	or     eax,0x4
c001464a:	0f 22 e0             	mov    cr4,eax
c001464d:	c3                   	ret    

c001464e <CPU::setupLargePages()>:
c001464e:	0f 20 e0             	mov    eax,cr4
c0014651:	83 c8 10             	or     eax,0x10
c0014654:	0f 22 e0             	mov    cr4,eax
c0014657:	c3                   	ret    

c0014658 <CPU::setupPAT()>:
c0014658:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c001465d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0014664:	74 2c                	je     c0014692 <CPU::setupPAT()+0x3a>
c0014666:	53                   	push   ebx
c0014667:	83 ec 10             	sub    esp,0x10
c001466a:	68 77 02 00 00       	push   0x277
c001466f:	50                   	push   eax
c0014670:	e8 09 4c ff ff       	call   c000927e <Computer::rdmsr(unsigned int)>
c0014675:	83 e2 f8             	and    edx,0xfffffff8
c0014678:	83 ca 01             	or     edx,0x1
c001467b:	52                   	push   edx
c001467c:	50                   	push   eax
c001467d:	68 77 02 00 00       	push   0x277
c0014682:	ff 35 08 8c 02 c0    	push   DWORD PTR ds:0xc0028c08
c0014688:	e8 1d 4c ff ff       	call   c00092aa <Computer::wrmsr(unsigned int, unsigned long long)>
c001468d:	83 c4 28             	add    esp,0x28
c0014690:	5b                   	pop    ebx
c0014691:	c3                   	ret    
c0014692:	c3                   	ret    
c0014693:	90                   	nop

c0014694 <CPU::setupMTRR()>:
c0014694:	c3                   	ret    
c0014695:	90                   	nop

c0014696 <CPU::setupGlobalPages()>:
c0014696:	0f 20 e0             	mov    eax,cr4
c0014699:	0c 80                	or     al,0x80
c001469b:	0f 22 e0             	mov    cr4,eax
c001469e:	c3                   	ret    
c001469f:	90                   	nop

c00146a0 <CPU::allowUsermodeDataAccess()>:
c00146a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00146a4:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00146ab:	74 03                	je     c00146b0 <CPU::allowUsermodeDataAccess()+0x10>
c00146ad:	0f 01 cb             	stac   
c00146b0:	c3                   	ret    
c00146b1:	90                   	nop

c00146b2 <CPU::prohibitUsermodeDataAccess()>:
c00146b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00146b6:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00146bd:	74 03                	je     c00146c2 <CPU::prohibitUsermodeDataAccess()+0x10>
c00146bf:	0f 01 ca             	clac   
c00146c2:	c3                   	ret    
c00146c3:	90                   	nop

c00146c4 <CPU::setupSMAP()>:
c00146c4:	0f 20 e0             	mov    eax,cr4
c00146c7:	0d 00 00 20 00       	or     eax,0x200000
c00146cc:	0f 22 e0             	mov    cr4,eax
c00146cf:	eb e1                	jmp    c00146b2 <CPU::prohibitUsermodeDataAccess()>
c00146d1:	90                   	nop

c00146d2 <CPU::setupFeatures()>:
c00146d2:	53                   	push   ebx
c00146d3:	83 ec 08             	sub    esp,0x8
c00146d6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00146da:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c00146e1:	74 18                	je     c00146fb <CPU::setupFeatures()+0x29>
c00146e3:	83 ec 0c             	sub    esp,0xc
c00146e6:	68 20 65 02 c0       	push   0xc0026520
c00146eb:	e8 27 8a ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c00146f0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00146f3:	e8 42 ff ff ff       	call   c001463a <CPU::setupUMIP()>
c00146f8:	83 c4 10             	add    esp,0x10
c00146fb:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0014702:	74 18                	je     c001471c <CPU::setupFeatures()+0x4a>
c0014704:	83 ec 0c             	sub    esp,0xc
c0014707:	68 2a 65 02 c0       	push   0xc002652a
c001470c:	e8 06 8a ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0014711:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014714:	e8 2b ff ff ff       	call   c0014644 <CPU::setupTSC()>
c0014719:	83 c4 10             	add    esp,0x10
c001471c:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0014723:	74 18                	je     c001473d <CPU::setupFeatures()+0x6b>
c0014725:	83 ec 0c             	sub    esp,0xc
c0014728:	68 33 65 02 c0       	push   0xc0026533
c001472d:	e8 e5 89 ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0014732:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014735:	e8 14 ff ff ff       	call   c001464e <CPU::setupLargePages()>
c001473a:	83 c4 10             	add    esp,0x10
c001473d:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0014744:	74 18                	je     c001475e <CPU::setupFeatures()+0x8c>
c0014746:	83 ec 0c             	sub    esp,0xc
c0014749:	68 3c 65 02 c0       	push   0xc002653c
c001474e:	e8 c4 89 ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0014753:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014756:	e8 3b ff ff ff       	call   c0014696 <CPU::setupGlobalPages()>
c001475b:	83 c4 10             	add    esp,0x10
c001475e:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0014765:	74 18                	je     c001477f <CPU::setupFeatures()+0xad>
c0014767:	83 ec 0c             	sub    esp,0xc
c001476a:	68 4e 65 02 c0       	push   0xc002654e
c001476f:	e8 a3 89 ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0014774:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014777:	e8 dc fe ff ff       	call   c0014658 <CPU::setupPAT()>
c001477c:	83 c4 10             	add    esp,0x10
c001477f:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0014786:	74 11                	je     c0014799 <CPU::setupFeatures()+0xc7>
c0014788:	c7 44 24 10 57 65 02 c0 	mov    DWORD PTR [esp+0x10],0xc0026557
c0014790:	83 c4 08             	add    esp,0x8
c0014793:	5b                   	pop    ebx
c0014794:	e9 7e 89 ff ff       	jmp    c000d117 <Dbg::kprintf(char const*, ...)>
c0014799:	83 c4 08             	add    esp,0x8
c001479c:	5b                   	pop    ebx
c001479d:	c3                   	ret    

c001479e <CPU::open(int, int, void*)>:
c001479e:	57                   	push   edi
c001479f:	56                   	push   esi
c00147a0:	53                   	push   ebx
c00147a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00147a5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00147a9:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00147af:	83 ec 0c             	sub    esp,0xc
c00147b2:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00147b8:	68 61 65 02 c0       	push   0xc0026561
c00147bd:	e8 7f 56 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00147c2:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00147c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00147cb:	e8 9a 4e ff ff       	call   c000966a <GDT::setup()>
c00147d0:	c7 04 24 73 65 02 c0 	mov    DWORD PTR [esp],0xc0026573
c00147d7:	e8 65 56 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00147dc:	83 c4 0c             	add    esp,0xc
c00147df:	6a 00                	push   0x0
c00147e1:	68 ef be ad de       	push   0xdeadbeef
c00147e6:	57                   	push   edi
c00147e7:	e8 3c 6f ff ff       	call   c000b728 <TSS::setup(unsigned long, unsigned long)>
c00147ec:	c7 04 24 85 65 02 c0 	mov    DWORD PTR [esp],0xc0026585
c00147f3:	e8 49 56 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00147f8:	89 3c 24             	mov    DWORD PTR [esp],edi
c00147fb:	e8 08 6f ff ff       	call   c000b708 <TSS::flush()>
c0014800:	c7 04 24 99 65 02 c0 	mov    DWORD PTR [esp],0xc0026599
c0014807:	e8 35 56 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001480c:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0014812:	89 04 24             	mov    DWORD PTR [esp],eax
c0014815:	e8 30 51 ff ff       	call   c000994a <IDT::setup()>
c001481a:	c7 04 24 ab 65 02 c0 	mov    DWORD PTR [esp],0xc00265ab
c0014821:	e8 1b 56 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0014826:	b8 00 04 00 00       	mov    eax,0x400
c001482b:	0f 23 f8             	mov    db7,eax
c001482e:	c7 04 24 c9 65 02 c0 	mov    DWORD PTR [esp],0xc00265c9
c0014835:	e8 07 56 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001483a:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0014844:	e8 55 5c ff ff       	call   c000a49e <Phys::allocatePage()>
c0014849:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001484f:	89 30                	mov    DWORD PTR [eax],esi
c0014851:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0014857:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001485a:	c7 04 24 eb 65 02 c0 	mov    DWORD PTR [esp],0xc00265eb
c0014861:	e8 db 55 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0014866:	58                   	pop    eax
c0014867:	5a                   	pop    edx
c0014868:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001486e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014872:	e8 6f 7e ff ff       	call   c000c6e6 <VAS::setCPUSpecific(unsigned long)>
c0014877:	c7 04 24 13 66 02 c0 	mov    DWORD PTR [esp],0xc0026613
c001487e:	e8 be 55 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0014883:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014886:	e8 79 f3 ff ff       	call   c0013c04 <CPU::detectFeatures()>
c001488b:	c7 04 24 36 66 02 c0 	mov    DWORD PTR [esp],0xc0026636
c0014892:	e8 aa 55 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0014897:	e8 f7 b2 ff ff       	call   c000fb93 <setupInterruptController()>
c001489c:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00148a2:	c7 04 24 5a 66 02 c0 	mov    DWORD PTR [esp],0xc002665a
c00148a9:	e8 93 55 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00148ae:	a1 20 8c 02 c0       	mov    eax,ds:0xc0028c20
c00148b3:	83 e0 10             	and    eax,0x10
c00148b6:	83 f8 01             	cmp    eax,0x1
c00148b9:	19 c0                	sbb    eax,eax
c00148bb:	83 e0 46             	and    eax,0x46
c00148be:	83 c0 1e             	add    eax,0x1e
c00148c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00148c4:	e8 eb c8 ff ff       	call   c00111b4 <setupTimer(int)>
c00148c9:	83 c4 10             	add    esp,0x10
c00148cc:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c00148d2:	f6 05 20 8c 02 c0 20 	test   BYTE PTR ds:0xc0028c20,0x20
c00148d9:	74 18                	je     c00148f3 <CPU::open(int, int, void*)+0x155>
c00148db:	83 ec 0c             	sub    esp,0xc
c00148de:	68 75 66 02 c0       	push   0xc0026675
c00148e3:	e8 59 55 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00148e8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00148eb:	e8 e2 fd ff ff       	call   c00146d2 <CPU::setupFeatures()>
c00148f0:	83 c4 10             	add    esp,0x10
c00148f3:	83 ec 0c             	sub    esp,0xc
c00148f6:	68 90 66 02 c0       	push   0xc0026690
c00148fb:	e8 41 55 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0014900:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014903:	e8 5c f0 ff ff       	call   c0013964 <CPU::displayFeatures()>
c0014908:	83 c4 10             	add    esp,0x10
c001490b:	31 c0                	xor    eax,eax
c001490d:	5b                   	pop    ebx
c001490e:	5e                   	pop    esi
c001490f:	5f                   	pop    edi
c0014910:	c3                   	ret    
c0014911:	90                   	nop

c0014912 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0014912:	57                   	push   edi
c0014913:	56                   	push   esi
c0014914:	53                   	push   ebx
c0014915:	51                   	push   ecx
c0014916:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001491a:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c001491d:	0f 02 c0             	lar    eax,ax
c0014920:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0014923:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0014927:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c001492a:	88 ca                	mov    dl,cl
c001492c:	c0 ea 06             	shr    dl,0x6
c001492f:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0014933:	89 ca                	mov    edx,ecx
c0014935:	66 c1 ea 03          	shr    dx,0x3
c0014939:	83 e2 07             	and    edx,0x7
c001493c:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0014941:	88 17                	mov    BYTE PTR [edi],dl
c0014943:	0f 84 a6 01 00 00    	je     c0014aef <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0014949:	83 e1 07             	and    ecx,0x7
c001494c:	80 f9 04             	cmp    cl,0x4
c001494f:	0f 84 98 00 00 00    	je     c00149ed <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0014955:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001495a:	0f 95 c0             	setne  al
c001495d:	80 f9 05             	cmp    cl,0x5
c0014960:	0f 95 c2             	setne  dl
c0014963:	08 c2                	or     dl,al
c0014965:	74 79                	je     c00149e0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0014967:	84 c9                	test   cl,cl
c0014969:	75 05                	jne    c0014970 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c001496b:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001496e:	eb 3c                	jmp    c00149ac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014970:	80 f9 01             	cmp    cl,0x1
c0014973:	75 05                	jne    c001497a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0014975:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0014978:	eb 32                	jmp    c00149ac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001497a:	80 f9 02             	cmp    cl,0x2
c001497d:	75 05                	jne    c0014984 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c001497f:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0014982:	eb 28                	jmp    c00149ac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014984:	31 c0                	xor    eax,eax
c0014986:	80 f9 03             	cmp    cl,0x3
c0014989:	75 05                	jne    c0014990 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c001498b:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001498e:	eb 1c                	jmp    c00149ac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014990:	80 f9 05             	cmp    cl,0x5
c0014993:	75 05                	jne    c001499a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0014995:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0014998:	eb 12                	jmp    c00149ac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001499a:	80 f9 06             	cmp    cl,0x6
c001499d:	75 05                	jne    c00149a4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c001499f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00149a2:	eb 08                	jmp    c00149ac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00149a4:	80 f9 07             	cmp    cl,0x7
c00149a7:	75 03                	jne    c00149ac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00149a9:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00149ac:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00149b1:	75 10                	jne    c00149c3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c00149b3:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c00149b7:	b9 03 00 00 00       	mov    ecx,0x3
c00149bc:	01 d0                	add    eax,edx
c00149be:	e9 37 01 00 00       	jmp    c0014afa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00149c3:	b9 02 00 00 00       	mov    ecx,0x2
c00149c8:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c00149cd:	0f 85 27 01 00 00    	jne    c0014afa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00149d3:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00149d6:	b9 06 00 00 00       	mov    ecx,0x6
c00149db:	e9 1a 01 00 00       	jmp    c0014afa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00149e0:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c00149e3:	b9 06 00 00 00       	mov    ecx,0x6
c00149e8:	e9 0f 01 00 00       	jmp    c0014afc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00149ed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c00149f0:	88 ca                	mov    dl,cl
c00149f2:	c0 ea 06             	shr    dl,0x6
c00149f5:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c00149f9:	89 ca                	mov    edx,ecx
c00149fb:	66 c1 ea 03          	shr    dx,0x3
c00149ff:	83 e2 07             	and    edx,0x7
c0014a02:	80 e1 07             	and    cl,0x7
c0014a05:	75 05                	jne    c0014a0c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0014a07:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0014a0a:	eb 4c                	jmp    c0014a58 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014a0c:	80 f9 01             	cmp    cl,0x1
c0014a0f:	75 05                	jne    c0014a16 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0014a11:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0014a14:	eb 42                	jmp    c0014a58 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014a16:	80 f9 02             	cmp    cl,0x2
c0014a19:	75 05                	jne    c0014a20 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0014a1b:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0014a1e:	eb 38                	jmp    c0014a58 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014a20:	80 f9 03             	cmp    cl,0x3
c0014a23:	75 05                	jne    c0014a2a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0014a25:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0014a28:	eb 2e                	jmp    c0014a58 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014a2a:	80 f9 04             	cmp    cl,0x4
c0014a2d:	75 12                	jne    c0014a41 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0014a2f:	f6 c4 60             	test   ah,0x60
c0014a32:	75 08                	jne    c0014a3c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0014a34:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0014a37:	8d 78 14             	lea    edi,[eax+0x14]
c0014a3a:	eb 1c                	jmp    c0014a58 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014a3c:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0014a3f:	eb 17                	jmp    c0014a58 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014a41:	80 f9 05             	cmp    cl,0x5
c0014a44:	75 05                	jne    c0014a4b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0014a46:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0014a49:	eb 0d                	jmp    c0014a58 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014a4b:	80 f9 06             	cmp    cl,0x6
c0014a4e:	75 05                	jne    c0014a55 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0014a50:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0014a53:	eb 03                	jmp    c0014a58 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014a55:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0014a58:	84 d2                	test   dl,dl
c0014a5a:	75 05                	jne    c0014a61 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0014a5c:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0014a5f:	eb 3c                	jmp    c0014a9d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014a61:	80 fa 01             	cmp    dl,0x1
c0014a64:	75 05                	jne    c0014a6b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0014a66:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0014a69:	eb 32                	jmp    c0014a9d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014a6b:	80 fa 02             	cmp    dl,0x2
c0014a6e:	75 05                	jne    c0014a75 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0014a70:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0014a73:	eb 28                	jmp    c0014a9d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014a75:	80 fa 03             	cmp    dl,0x3
c0014a78:	75 05                	jne    c0014a7f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0014a7a:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0014a7d:	eb 1e                	jmp    c0014a9d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014a7f:	31 c0                	xor    eax,eax
c0014a81:	80 fa 04             	cmp    dl,0x4
c0014a84:	74 17                	je     c0014a9d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014a86:	80 fa 05             	cmp    dl,0x5
c0014a89:	75 05                	jne    c0014a90 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0014a8b:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0014a8e:	eb 0d                	jmp    c0014a9d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014a90:	80 fa 06             	cmp    dl,0x6
c0014a93:	75 05                	jne    c0014a9a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0014a95:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014a98:	eb 03                	jmp    c0014a9d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014a9a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014a9d:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0014aa2:	0f 94 c2             	sete   dl
c0014aa5:	80 f9 05             	cmp    cl,0x5
c0014aa8:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0014aac:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0014ab1:	d3 e0                	shl    eax,cl
c0014ab3:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0014ab7:	74 0a                	je     c0014ac3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0014ab9:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0014abc:	b9 07 00 00 00       	mov    ecx,0x7
c0014ac1:	eb 37                	jmp    c0014afa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0014ac3:	01 f8                	add    eax,edi
c0014ac5:	b9 03 00 00 00       	mov    ecx,0x3
c0014aca:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0014acf:	74 2b                	je     c0014afc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014ad1:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0014ad6:	75 0d                	jne    c0014ae5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0014ad8:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0014adc:	01 c8                	add    eax,ecx
c0014ade:	b9 04 00 00 00       	mov    ecx,0x4
c0014ae3:	eb 17                	jmp    c0014afc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014ae5:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0014ae8:	b9 07 00 00 00       	mov    ecx,0x7
c0014aed:	eb 0d                	jmp    c0014afc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014aef:	b9 02 00 00 00       	mov    ecx,0x2
c0014af4:	b2 01                	mov    dl,0x1
c0014af6:	31 c0                	xor    eax,eax
c0014af8:	eb 02                	jmp    c0014afc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014afa:	31 d2                	xor    edx,edx
c0014afc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014b00:	89 0b                	mov    DWORD PTR [ebx],ecx
c0014b02:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014b06:	88 11                	mov    BYTE PTR [ecx],dl
c0014b08:	5a                   	pop    edx
c0014b09:	5b                   	pop    ebx
c0014b0a:	5e                   	pop    esi
c0014b0b:	5f                   	pop    edi
c0014b0c:	c3                   	ret    

c0014b0d <Krnl::smpEntry()>:
c0014b0d:	eb fe                	jmp    c0014b0d <Krnl::smpEntry()>

c0014b0f <Krnl::startCPU(int)>:
c0014b0f:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c0014b14:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0014b1b:	0f 84 36 01 00 00    	je     c0014c57 <Krnl::startCPU(int)+0x148>
c0014b21:	53                   	push   ebx
c0014b22:	83 ec 10             	sub    esp,0x10
c0014b25:	fa                   	cli    
c0014b26:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c0014b2c:	6a 1b                	push   0x1b
c0014b2e:	ff 35 08 8c 02 c0    	push   DWORD PTR ds:0xc0028c08
c0014b34:	e8 45 47 ff ff       	call   c000927e <Computer::rdmsr(unsigned int)>
c0014b39:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014b3e:	89 c3                	mov    ebx,eax
c0014b40:	58                   	pop    eax
c0014b41:	5a                   	pop    edx
c0014b42:	53                   	push   ebx
c0014b43:	68 d8 66 02 c0       	push   0xc00266d8
c0014b48:	e8 ca 85 ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0014b4d:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014b57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b5b:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014b65:	c1 e0 18             	shl    eax,0x18
c0014b68:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0014b6e:	83 c4 10             	add    esp,0x10
c0014b71:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0014b77:	09 c2                	or     edx,eax
c0014b79:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0014b7f:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0014b85:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0014b8b:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0014b91:	80 cd c5             	or     ch,0xc5
c0014b94:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0014b9a:	f3 90                	pause  
c0014b9c:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014b9e:	0f ba e1 0c          	bt     ecx,0xc
c0014ba2:	72 f6                	jb     c0014b9a <Krnl::startCPU(int)+0x8b>
c0014ba4:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0014baa:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0014bb0:	09 c1                	or     ecx,eax
c0014bb2:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0014bb8:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0014bbe:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0014bc4:	80 cd 85             	or     ch,0x85
c0014bc7:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0014bcd:	f3 90                	pause  
c0014bcf:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014bd1:	0f ba e1 0c          	bt     ecx,0xc
c0014bd5:	72 f6                	jb     c0014bcd <Krnl::startCPU(int)+0xbe>
c0014bd7:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014be1:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0014be7:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0014bed:	09 c1                	or     ecx,eax
c0014bef:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0014bf5:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0014bfb:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0014c01:	81 c9 02 06 00 00    	or     ecx,0x602
c0014c07:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0014c0d:	f3 90                	pause  
c0014c0f:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014c11:	0f ba e1 0c          	bt     ecx,0xc
c0014c15:	72 f6                	jb     c0014c0d <Krnl::startCPU(int)+0xfe>
c0014c17:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014c21:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0014c27:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0014c2d:	09 c8                	or     eax,ecx
c0014c2f:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0014c35:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0014c3b:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0014c40:	0d 02 06 00 00       	or     eax,0x602
c0014c45:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0014c4b:	f3 90                	pause  
c0014c4d:	8b 02                	mov    eax,DWORD PTR [edx]
c0014c4f:	0f ba e0 0c          	bt     eax,0xc
c0014c53:	72 f6                	jb     c0014c4b <Krnl::startCPU(int)+0x13c>
c0014c55:	eb fe                	jmp    c0014c55 <Krnl::startCPU(int)+0x146>
c0014c57:	c3                   	ret    

c0014c58 <Krnl::startCPUs()>:
c0014c58:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c0014c5d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0014c63:	88 c2                	mov    dl,al
c0014c65:	83 e2 0a             	and    edx,0xa
c0014c68:	80 fa 0a             	cmp    dl,0xa
c0014c6b:	75 09                	jne    c0014c76 <Krnl::startCPUs()+0x1e>
c0014c6d:	a8 01                	test   al,0x1
c0014c6f:	74 05                	je     c0014c76 <Krnl::startCPUs()+0x1e>
c0014c71:	e9 25 b5 fe ff       	jmp    c000019b <prepareTramp>
c0014c76:	c3                   	ret    
c0014c77:	90                   	nop

c0014c78 <EnvVarContainer::getEnv(char const*)>:
c0014c78:	57                   	push   edi
c0014c79:	56                   	push   esi
c0014c7a:	53                   	push   ebx
c0014c7b:	31 db                	xor    ebx,ebx
c0014c7d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014c81:	39 1e                	cmp    DWORD PTR [esi],ebx
c0014c83:	7e 2b                	jle    c0014cb0 <EnvVarContainer::getEnv(char const*)+0x38>
c0014c85:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0014c8c:	50                   	push   eax
c0014c8d:	50                   	push   eax
c0014c8e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014c91:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0014c94:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014c98:	e8 3f bb fe ff       	call   c00007dc <strcmp>
c0014c9d:	83 c4 10             	add    esp,0x10
c0014ca0:	85 c0                	test   eax,eax
c0014ca2:	75 09                	jne    c0014cad <EnvVarContainer::getEnv(char const*)+0x35>
c0014ca4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014ca7:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0014cab:	eb 05                	jmp    c0014cb2 <EnvVarContainer::getEnv(char const*)+0x3a>
c0014cad:	43                   	inc    ebx
c0014cae:	eb d1                	jmp    c0014c81 <EnvVarContainer::getEnv(char const*)+0x9>
c0014cb0:	31 c0                	xor    eax,eax
c0014cb2:	5b                   	pop    ebx
c0014cb3:	5e                   	pop    esi
c0014cb4:	5f                   	pop    edi
c0014cb5:	c3                   	ret    

c0014cb6 <EnvVarContainer::setEnv(char const*, char const*)>:
c0014cb6:	55                   	push   ebp
c0014cb7:	57                   	push   edi
c0014cb8:	56                   	push   esi
c0014cb9:	53                   	push   ebx
c0014cba:	83 ec 28             	sub    esp,0x28
c0014cbd:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0014cc1:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0014cc5:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0014cc9:	56                   	push   esi
c0014cca:	e8 e1 b9 fe ff       	call   c00006b0 <strlen>
c0014ccf:	40                   	inc    eax
c0014cd0:	89 04 24             	mov    DWORD PTR [esp],eax
c0014cd3:	e8 0f 51 ff ff       	call   c0009de7 <malloc>
c0014cd8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014cdb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014cdf:	e8 cc b9 fe ff       	call   c00006b0 <strlen>
c0014ce4:	40                   	inc    eax
c0014ce5:	89 04 24             	mov    DWORD PTR [esp],eax
c0014ce8:	e8 fa 50 ff ff       	call   c0009de7 <malloc>
c0014ced:	89 34 24             	mov    DWORD PTR [esp],esi
c0014cf0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014cf4:	e8 b7 b9 fe ff       	call   c00006b0 <strlen>
c0014cf9:	83 c4 0c             	add    esp,0xc
c0014cfc:	40                   	inc    eax
c0014cfd:	50                   	push   eax
c0014cfe:	6a 00                	push   0x0
c0014d00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014d04:	e8 8b b9 fe ff       	call   c0000694 <memset>
c0014d09:	89 34 24             	mov    DWORD PTR [esp],esi
c0014d0c:	e8 9f b9 fe ff       	call   c00006b0 <strlen>
c0014d11:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014d15:	8d 48 01             	lea    ecx,[eax+0x1]
c0014d18:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014d1a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014d1d:	89 de                	mov    esi,ebx
c0014d1f:	e8 8c b9 fe ff       	call   c00006b0 <strlen>
c0014d24:	83 c4 0c             	add    esp,0xc
c0014d27:	40                   	inc    eax
c0014d28:	50                   	push   eax
c0014d29:	6a 00                	push   0x0
c0014d2b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014d2f:	e8 60 b9 fe ff       	call   c0000694 <memset>
c0014d34:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014d37:	e8 74 b9 fe ff       	call   c00006b0 <strlen>
c0014d3c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014d40:	8d 48 01             	lea    ecx,[eax+0x1]
c0014d43:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014d45:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014d48:	40                   	inc    eax
c0014d49:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0014d4c:	c1 e0 03             	shl    eax,0x3
c0014d4f:	5a                   	pop    edx
c0014d50:	59                   	pop    ecx
c0014d51:	50                   	push   eax
c0014d52:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014d55:	e8 79 50 ff ff       	call   c0009dd3 <realloc>
c0014d5a:	8d 74 24 18          	lea    esi,[esp+0x18]
c0014d5e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014d61:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0014d64:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0014d68:	b9 08 00 00 00       	mov    ecx,0x8
c0014d6d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014d6f:	83 c4 2c             	add    esp,0x2c
c0014d72:	5b                   	pop    ebx
c0014d73:	5e                   	pop    esi
c0014d74:	5f                   	pop    edi
c0014d75:	5d                   	pop    ebp
c0014d76:	c3                   	ret    
c0014d77:	90                   	nop

c0014d78 <EnvVarContainer::deleteEnv(char const*)>:
c0014d78:	c3                   	ret    
c0014d79:	90                   	nop

c0014d7a <EnvVarContainer::loadFrom(char const*, char const*)>:
c0014d7a:	55                   	push   ebp
c0014d7b:	57                   	push   edi
c0014d7c:	56                   	push   esi
c0014d7d:	53                   	push   ebx
c0014d7e:	81 ec 38 01 00 00    	sub    esp,0x138
c0014d84:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0014d8b:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0014d92:	68 14 01 00 00       	push   0x114
c0014d97:	e8 4b 50 ff ff       	call   c0009de7 <malloc>
c0014d9c:	83 c4 0c             	add    esp,0xc
c0014d9f:	89 c3                	mov    ebx,eax
c0014da1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014da4:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0014dab:	50                   	push   eax
c0014dac:	e8 d1 88 ff ff       	call   c000d682 <File::File(char const*, Process*)>
c0014db1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014db4:	e8 11 8c ff ff       	call   c000d9ca <File::exists()>
c0014db9:	83 c4 10             	add    esp,0x10
c0014dbc:	84 c0                	test   al,al
c0014dbe:	75 31                	jne    c0014df1 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0014dc0:	50                   	push   eax
c0014dc1:	50                   	push   eax
c0014dc2:	6a 12                	push   0x12
c0014dc4:	53                   	push   ebx
c0014dc5:	e8 92 89 ff ff       	call   c000d75c <File::open(FileOpenMode)>
c0014dca:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014dcc:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0014dcf:	89 34 24             	mov    DWORD PTR [esp],esi
c0014dd2:	e8 d9 b8 fe ff       	call   c00006b0 <strlen>
c0014dd7:	5a                   	pop    edx
c0014dd8:	31 d2                	xor    edx,edx
c0014dda:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0014dde:	51                   	push   ecx
c0014ddf:	56                   	push   esi
c0014de0:	52                   	push   edx
c0014de1:	50                   	push   eax
c0014de2:	53                   	push   ebx
c0014de3:	ff d7                	call   edi
c0014de5:	83 c4 14             	add    esp,0x14
c0014de8:	53                   	push   ebx
c0014de9:	e8 cc 89 ff ff       	call   c000d7ba <File::close()>
c0014dee:	83 c4 10             	add    esp,0x10
c0014df1:	56                   	push   esi
c0014df2:	31 f6                	xor    esi,esi
c0014df4:	68 00 01 00 00       	push   0x100
c0014df9:	6a 00                	push   0x0
c0014dfb:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0014dff:	50                   	push   eax
c0014e00:	e8 8f b8 fe ff       	call   c0000694 <memset>
c0014e05:	5f                   	pop    edi
c0014e06:	58                   	pop    eax
c0014e07:	6a 01                	push   0x1
c0014e09:	53                   	push   ebx
c0014e0a:	e8 4d 89 ff ff       	call   c000d75c <File::open(FileOpenMode)>
c0014e0f:	83 c4 10             	add    esp,0x10
c0014e12:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014e1a:	83 ec 0c             	sub    esp,0xc
c0014e1d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e1f:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0014e23:	51                   	push   ecx
c0014e24:	8d 54 24 23          	lea    edx,[esp+0x23]
c0014e28:	52                   	push   edx
c0014e29:	6a 00                	push   0x0
c0014e2b:	6a 01                	push   0x1
c0014e2d:	53                   	push   ebx
c0014e2e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014e31:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0014e35:	83 c4 20             	add    esp,0x20
c0014e38:	3c 0d                	cmp    al,0xd
c0014e3a:	0f 84 09 01 00 00    	je     c0014f49 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014e40:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0014e45:	0f 84 ef 00 00 00    	je     c0014f3a <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0014e4b:	3c 0a                	cmp    al,0xa
c0014e4d:	74 13                	je     c0014e62 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0014e4f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014e54:	74 0c                	je     c0014e62 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0014e56:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0014e5c:	0f 8e d8 00 00 00    	jle    c0014f3a <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0014e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014e66:	83 ec 0c             	sub    esp,0xc
c0014e69:	8d 78 01             	lea    edi,[eax+0x1]
c0014e6c:	57                   	push   edi
c0014e6d:	e8 75 4f ff ff       	call   c0009de7 <malloc>
c0014e72:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0014e76:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014e7a:	8d 56 04             	lea    edx,[esi+0x4]
c0014e7d:	89 14 24             	mov    DWORD PTR [esp],edx
c0014e80:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0014e84:	e8 5e 4f ff ff       	call   c0009de7 <malloc>
c0014e89:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014e8d:	83 c4 0c             	add    esp,0xc
c0014e90:	57                   	push   edi
c0014e91:	6a 00                	push   0x0
c0014e93:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014e97:	e8 f8 b7 fe ff       	call   c0000694 <memset>
c0014e9c:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014ea0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014ea4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0014ea8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014eaa:	83 c4 0c             	add    esp,0xc
c0014ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014eb1:	52                   	push   edx
c0014eb2:	6a 00                	push   0x0
c0014eb4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014eb8:	e8 d7 b7 fe ff       	call   c0000694 <memset>
c0014ebd:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014ec1:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0014ec5:	89 34 24             	mov    DWORD PTR [esp],esi
c0014ec8:	e8 e3 b7 fe ff       	call   c00006b0 <strlen>
c0014ecd:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0014ed1:	89 c1                	mov    ecx,eax
c0014ed3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014ed5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014ed8:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0014edb:	40                   	inc    eax
c0014edc:	83 c4 10             	add    esp,0x10
c0014edf:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0014ee2:	85 d2                	test   edx,edx
c0014ee4:	75 0c                	jne    c0014ef2 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0014ee6:	83 ec 0c             	sub    esp,0xc
c0014ee9:	6a 08                	push   0x8
c0014eeb:	e8 f7 4e ff ff       	call   c0009de7 <malloc>
c0014ef0:	eb 0c                	jmp    c0014efe <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0014ef2:	c1 e0 03             	shl    eax,0x3
c0014ef5:	51                   	push   ecx
c0014ef6:	51                   	push   ecx
c0014ef7:	50                   	push   eax
c0014ef8:	52                   	push   edx
c0014ef9:	e8 d5 4e ff ff       	call   c0009dd3 <realloc>
c0014efe:	83 c4 10             	add    esp,0x10
c0014f01:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0014f04:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014f07:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0014f0a:	8d 74 24 18          	lea    esi,[esp+0x18]
c0014f0e:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0014f12:	b9 08 00 00 00       	mov    ecx,0x8
c0014f17:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014f19:	31 f6                	xor    esi,esi
c0014f1b:	50                   	push   eax
c0014f1c:	68 00 01 00 00       	push   0x100
c0014f21:	6a 00                	push   0x0
c0014f23:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0014f27:	50                   	push   eax
c0014f28:	e8 67 b7 fe ff       	call   c0000694 <memset>
c0014f2d:	83 c4 10             	add    esp,0x10
c0014f30:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014f38:	eb 0f                	jmp    c0014f49 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014f3a:	3c 3d                	cmp    al,0x3d
c0014f3c:	74 07                	je     c0014f45 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0014f3e:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0014f42:	46                   	inc    esi
c0014f43:	eb 04                	jmp    c0014f49 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014f45:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0014f49:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014f4e:	0f 85 c6 fe ff ff    	jne    c0014e1a <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0014f54:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014f5a:	5b                   	pop    ebx
c0014f5b:	5e                   	pop    esi
c0014f5c:	5f                   	pop    edi
c0014f5d:	5d                   	pop    ebp
c0014f5e:	c3                   	ret    
c0014f5f:	90                   	nop

c0014f60 <EnvVarContainer::__loadSystem()>:
c0014f60:	83 ec 10             	sub    esp,0x10
c0014f63:	68 e0 85 02 c0       	push   0xc00285e0
c0014f68:	68 e9 66 02 c0       	push   0xc00266e9
c0014f6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014f71:	e8 04 fe ff ff       	call   c0014d7a <EnvVarContainer::loadFrom(char const*, char const*)>
c0014f76:	83 c4 1c             	add    esp,0x1c
c0014f79:	c3                   	ret    

c0014f7a <EnvVarContainer::__loadUser()>:
c0014f7a:	c3                   	ret    
c0014f7b:	90                   	nop

c0014f7c <EnvVarContainer::EnvVarContainer(Process*)>:
c0014f7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014f80:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014f86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014f8a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014f8e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0014f91:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014f95:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014f9c:	90                   	nop
c0014f9d:	c3                   	ret    

c0014f9e <EnvVarContainer::~EnvVarContainer()>:
c0014f9e:	83 ec 0c             	sub    esp,0xc
c0014fa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014fa5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014fa8:	85 c0                	test   eax,eax
c0014faa:	74 1d                	je     c0014fc9 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0014fac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014fb0:	8b 00                	mov    eax,DWORD PTR [eax]
c0014fb2:	85 c0                	test   eax,eax
c0014fb4:	74 13                	je     c0014fc9 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0014fb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014fba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014fbd:	83 ec 0c             	sub    esp,0xc
c0014fc0:	50                   	push   eax
c0014fc1:	e8 31 4e ff ff       	call   c0009df7 <free>
c0014fc6:	83 c4 10             	add    esp,0x10
c0014fc9:	90                   	nop
c0014fca:	83 c4 0c             	add    esp,0xc
c0014fcd:	c3                   	ret    

c0014fce <Krnl::getEnv(Process*, char const*)>:
c0014fce:	53                   	push   ebx
c0014fcf:	83 ec 08             	sub    esp,0x8
c0014fd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014fd6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014fda:	39 05 50 a1 02 c0    	cmp    DWORD PTR ds:0xc002a150,eax
c0014fe0:	74 04                	je     c0014fe6 <Krnl::getEnv(Process*, char const*)+0x18>
c0014fe2:	85 c0                	test   eax,eax
c0014fe4:	75 0b                	jne    c0014ff1 <Krnl::getEnv(Process*, char const*)+0x23>
c0014fe6:	a1 d4 96 02 c0       	mov    eax,ds:0xc00296d4
c0014feb:	85 c0                	test   eax,eax
c0014fed:	75 19                	jne    c0015008 <Krnl::getEnv(Process*, char const*)+0x3a>
c0014fef:	eb 27                	jmp    c0015018 <Krnl::getEnv(Process*, char const*)+0x4a>
c0014ff1:	52                   	push   edx
c0014ff2:	52                   	push   edx
c0014ff3:	53                   	push   ebx
c0014ff4:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0014ffa:	e8 79 fc ff ff       	call   c0014c78 <EnvVarContainer::getEnv(char const*)>
c0014fff:	83 c4 10             	add    esp,0x10
c0015002:	85 c0                	test   eax,eax
c0015004:	75 28                	jne    c001502e <Krnl::getEnv(Process*, char const*)+0x60>
c0015006:	eb de                	jmp    c0014fe6 <Krnl::getEnv(Process*, char const*)+0x18>
c0015008:	52                   	push   edx
c0015009:	52                   	push   edx
c001500a:	53                   	push   ebx
c001500b:	50                   	push   eax
c001500c:	e8 67 fc ff ff       	call   c0014c78 <EnvVarContainer::getEnv(char const*)>
c0015011:	83 c4 10             	add    esp,0x10
c0015014:	85 c0                	test   eax,eax
c0015016:	75 16                	jne    c001502e <Krnl::getEnv(Process*, char const*)+0x60>
c0015018:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001501c:	a1 d8 96 02 c0       	mov    eax,ds:0xc00296d8
c0015021:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015025:	83 c4 08             	add    esp,0x8
c0015028:	5b                   	pop    ebx
c0015029:	e9 4a fc ff ff       	jmp    c0014c78 <EnvVarContainer::getEnv(char const*)>
c001502e:	83 c4 08             	add    esp,0x8
c0015031:	5b                   	pop    ebx
c0015032:	c3                   	ret    

c0015033 <Krnl::setEnvSystem(char const*, char const*)>:
c0015033:	83 ec 10             	sub    esp,0x10
c0015036:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001503a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001503e:	ff 35 d8 96 02 c0    	push   DWORD PTR ds:0xc00296d8
c0015044:	e8 6d fc ff ff       	call   c0014cb6 <EnvVarContainer::setEnv(char const*, char const*)>
c0015049:	83 c4 1c             	add    esp,0x1c
c001504c:	c3                   	ret    

c001504d <Krnl::setEnvUser(char const*, char const*)>:
c001504d:	a1 d4 96 02 c0       	mov    eax,ds:0xc00296d4
c0015052:	85 c0                	test   eax,eax
c0015054:	74 15                	je     c001506b <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0015056:	83 ec 10             	sub    esp,0x10
c0015059:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001505d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015061:	50                   	push   eax
c0015062:	e8 4f fc ff ff       	call   c0014cb6 <EnvVarContainer::setEnv(char const*, char const*)>
c0015067:	83 c4 1c             	add    esp,0x1c
c001506a:	c3                   	ret    
c001506b:	c3                   	ret    

c001506c <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001506c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015070:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0015076:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001507a:	e9 37 fc ff ff       	jmp    c0014cb6 <EnvVarContainer::setEnv(char const*, char const*)>

c001507f <Krnl::deleteEnvSystem(char const*)>:
c001507f:	c3                   	ret    

c0015080 <Krnl::deleteEnvUser(char const*)>:
c0015080:	c3                   	ret    

c0015081 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0015081:	c3                   	ret    

c0015082 <Krnl::newProcessEnv(Process*)>:
c0015082:	83 ec 28             	sub    esp,0x28
c0015085:	6a 0c                	push   0xc
c0015087:	e8 5b 4d ff ff       	call   c0009de7 <malloc>
c001508c:	5a                   	pop    edx
c001508d:	59                   	pop    ecx
c001508e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015092:	50                   	push   eax
c0015093:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015097:	e8 e0 fe ff ff       	call   c0014f7c <EnvVarContainer::EnvVarContainer(Process*)>
c001509c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00150a0:	83 c4 2c             	add    esp,0x2c
c00150a3:	c3                   	ret    

c00150a4 <Krnl::copyProcessEnv(Process*, Process*)>:
c00150a4:	57                   	push   edi
c00150a5:	56                   	push   esi
c00150a6:	53                   	push   ebx
c00150a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00150ab:	83 ec 0c             	sub    esp,0xc
c00150ae:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00150b4:	6a 0c                	push   0xc
c00150b6:	e8 2c 4d ff ff       	call   c0009de7 <malloc>
c00150bb:	89 c3                	mov    ebx,eax
c00150bd:	58                   	pop    eax
c00150be:	5a                   	pop    edx
c00150bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00150c3:	53                   	push   ebx
c00150c4:	e8 b3 fe ff ff       	call   c0014f7c <EnvVarContainer::EnvVarContainer(Process*)>
c00150c9:	8b 07                	mov    eax,DWORD PTR [edi]
c00150cb:	89 03                	mov    DWORD PTR [ebx],eax
c00150cd:	c1 e0 03             	shl    eax,0x3
c00150d0:	89 04 24             	mov    DWORD PTR [esp],eax
c00150d3:	e8 0f 4d ff ff       	call   c0009de7 <malloc>
c00150d8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00150db:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00150dd:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00150e0:	c1 e1 03             	shl    ecx,0x3
c00150e3:	89 c7                	mov    edi,eax
c00150e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00150e7:	83 c4 10             	add    esp,0x10
c00150ea:	89 d8                	mov    eax,ebx
c00150ec:	5b                   	pop    ebx
c00150ed:	5e                   	pop    esi
c00150ee:	5f                   	pop    edi
c00150ef:	c3                   	ret    

c00150f0 <Krnl::loadSystemEnv()>:
c00150f0:	53                   	push   ebx
c00150f1:	83 ec 14             	sub    esp,0x14
c00150f4:	6a 0c                	push   0xc
c00150f6:	e8 ec 4c ff ff       	call   c0009de7 <malloc>
c00150fb:	89 c3                	mov    ebx,eax
c00150fd:	58                   	pop    eax
c00150fe:	5a                   	pop    edx
c00150ff:	ff 35 50 a1 02 c0    	push   DWORD PTR ds:0xc002a150
c0015105:	53                   	push   ebx
c0015106:	e8 71 fe ff ff       	call   c0014f7c <EnvVarContainer::EnvVarContainer(Process*)>
c001510b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001510e:	89 1d d8 96 02 c0    	mov    DWORD PTR ds:0xc00296d8,ebx
c0015114:	e8 47 fe ff ff       	call   c0014f60 <EnvVarContainer::__loadSystem()>
c0015119:	83 c4 18             	add    esp,0x18
c001511c:	5b                   	pop    ebx
c001511d:	c3                   	ret    

c001511e <Krnl::loadUserEnv()>:
c001511e:	53                   	push   ebx
c001511f:	83 ec 14             	sub    esp,0x14
c0015122:	6a 0c                	push   0xc
c0015124:	e8 be 4c ff ff       	call   c0009de7 <malloc>
c0015129:	89 c3                	mov    ebx,eax
c001512b:	58                   	pop    eax
c001512c:	5a                   	pop    edx
c001512d:	ff 35 50 a1 02 c0    	push   DWORD PTR ds:0xc002a150
c0015133:	53                   	push   ebx
c0015134:	e8 43 fe ff ff       	call   c0014f7c <EnvVarContainer::EnvVarContainer(Process*)>
c0015139:	89 1d d4 96 02 c0    	mov    DWORD PTR ds:0xc00296d4,ebx
c001513f:	83 c4 18             	add    esp,0x18
c0015142:	5b                   	pop    ebx
c0015143:	c3                   	ret    

c0015144 <Krnl::flushEnv()>:
c0015144:	c3                   	ret    

c0015145 <Krnl::getProcessTotalEnvCount(Process*)>:
c0015145:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015149:	8b 15 d4 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296d4
c001514f:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0015155:	a1 d8 96 02 c0       	mov    eax,ds:0xc00296d8
c001515a:	8b 00                	mov    eax,DWORD PTR [eax]
c001515c:	03 01                	add    eax,DWORD PTR [ecx]
c001515e:	85 d2                	test   edx,edx
c0015160:	74 02                	je     c0015164 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0015162:	03 02                	add    eax,DWORD PTR [edx]
c0015164:	c3                   	ret    

c0015165 <Krnl::getProcessEnvPair(Process*, int)>:
c0015165:	57                   	push   edi
c0015166:	56                   	push   esi
c0015167:	8b 35 d4 96 02 c0    	mov    esi,DWORD PTR ds:0xc00296d4
c001516d:	53                   	push   ebx
c001516e:	85 f6                	test   esi,esi
c0015170:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015174:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015178:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001517e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015182:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015184:	75 16                	jne    c001519c <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0015186:	39 c2                	cmp    edx,eax
c0015188:	7c 16                	jl     c00151a0 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001518a:	8b 0d d8 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296d8
c0015190:	8b 31                	mov    esi,DWORD PTR [ecx]
c0015192:	01 c6                	add    esi,eax
c0015194:	39 d6                	cmp    esi,edx
c0015196:	7e 3c                	jle    c00151d4 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0015198:	29 c2                	sub    edx,eax
c001519a:	eb 04                	jmp    c00151a0 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001519c:	39 c2                	cmp    edx,eax
c001519e:	7d 05                	jge    c00151a5 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c00151a0:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00151a3:	eb 20                	jmp    c00151c5 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c00151a5:	8b 3e                	mov    edi,DWORD PTR [esi]
c00151a7:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00151aa:	39 d1                	cmp    ecx,edx
c00151ac:	7e 04                	jle    c00151b2 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c00151ae:	29 c2                	sub    edx,eax
c00151b0:	eb 10                	jmp    c00151c2 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c00151b2:	8b 35 d8 96 02 c0    	mov    esi,DWORD PTR ds:0xc00296d8
c00151b8:	03 0e                	add    ecx,DWORD PTR [esi]
c00151ba:	39 d1                	cmp    ecx,edx
c00151bc:	7e 16                	jle    c00151d4 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00151be:	29 c2                	sub    edx,eax
c00151c0:	29 fa                	sub    edx,edi
c00151c2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00151c5:	8d 14 d0             	lea    edx,[eax+edx*8]
c00151c8:	8b 02                	mov    eax,DWORD PTR [edx]
c00151ca:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00151cd:	89 03                	mov    DWORD PTR [ebx],eax
c00151cf:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00151d2:	eb 1d                	jmp    c00151f1 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c00151d4:	83 ec 0c             	sub    esp,0xc
c00151d7:	68 0b 67 02 c0       	push   0xc002670b
c00151dc:	e8 18 00 00 00       	call   c00151f9 <Krnl::panic(char const*)>
c00151e1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00151e7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00151ee:	83 c4 10             	add    esp,0x10
c00151f1:	89 d8                	mov    eax,ebx
c00151f3:	5b                   	pop    ebx
c00151f4:	5e                   	pop    esi
c00151f5:	5f                   	pop    edi
c00151f6:	c2 04 00             	ret    0x4

c00151f9 <Krnl::panic(char const*)>:
c00151f9:	53                   	push   ebx
c00151fa:	83 ec 10             	sub    esp,0x10
c00151fd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015201:	fa                   	cli    
c0015202:	c6 05 e4 96 02 c0 01 	mov    BYTE PTR ds:0xc00296e4,0x1
c0015209:	53                   	push   ebx
c001520a:	68 25 67 02 c0       	push   0xc0026725
c001520f:	e8 03 7f ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0015214:	83 c4 10             	add    esp,0x10
c0015217:	a1 28 92 02 c0       	mov    eax,ds:0xc0029228
c001521c:	85 c0                	test   eax,eax
c001521e:	74 0d                	je     c001522d <Krnl::panic(char const*)+0x34>
c0015220:	a1 2c 8d 02 c0       	mov    eax,ds:0xc0028d2c
c0015225:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015228:	0f 22 d8             	mov    cr3,eax
c001522b:	eb fe                	jmp    c001522b <Krnl::panic(char const*)+0x32>
c001522d:	50                   	push   eax
c001522e:	6a 01                	push   0x1
c0015230:	6a 0f                	push   0xf
c0015232:	ff 35 84 8c 02 c0    	push   DWORD PTR ds:0xc0028c84
c0015238:	e8 f7 5a ff ff       	call   c000ad34 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001523d:	58                   	pop    eax
c001523e:	ff 35 84 8c 02 c0    	push   DWORD PTR ds:0xc0028c84
c0015244:	e8 0d 60 ff ff       	call   c000b256 <VgaText::clearScreen()>
c0015249:	58                   	pop    eax
c001524a:	5a                   	pop    edx
c001524b:	68 7c 67 02 c0       	push   0xc002677c
c0015250:	ff 35 84 8c 02 c0    	push   DWORD PTR ds:0xc0028c84
c0015256:	e8 19 5b ff ff       	call   c000ad74 <VgaText::setTitle(char*)>
c001525b:	83 c4 0c             	add    esp,0xc
c001525e:	6a 01                	push   0x1
c0015260:	6a 0f                	push   0xf
c0015262:	ff 35 84 8c 02 c0    	push   DWORD PTR ds:0xc0028c84
c0015268:	e8 c7 5a ff ff       	call   c000ad34 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001526d:	59                   	pop    ecx
c001526e:	58                   	pop    eax
c001526f:	68 3e 67 02 c0       	push   0xc002673e
c0015274:	ff 35 84 8c 02 c0    	push   DWORD PTR ds:0xc0028c84
c001527a:	e8 63 61 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c001527f:	58                   	pop    eax
c0015280:	5a                   	pop    edx
c0015281:	68 c8 67 02 c0       	push   0xc00267c8
c0015286:	ff 35 84 8c 02 c0    	push   DWORD PTR ds:0xc0028c84
c001528c:	e8 51 61 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c0015291:	59                   	pop    ecx
c0015292:	58                   	pop    eax
c0015293:	68 5a 67 02 c0       	push   0xc002675a
c0015298:	ff 35 84 8c 02 c0    	push   DWORD PTR ds:0xc0028c84
c001529e:	e8 3f 61 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c00152a3:	58                   	pop    eax
c00152a4:	5a                   	pop    edx
c00152a5:	53                   	push   ebx
c00152a6:	ff 35 84 8c 02 c0    	push   DWORD PTR ds:0xc0028c84
c00152ac:	e8 31 61 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c00152b1:	59                   	pop    ecx
c00152b2:	5b                   	pop    ebx
c00152b3:	68 7a 67 02 c0       	push   0xc002677a
c00152b8:	ff 35 84 8c 02 c0    	push   DWORD PTR ds:0xc0028c84
c00152be:	e8 1f 61 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c00152c3:	58                   	pop    eax
c00152c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00152c8:	e8 50 32 00 00       	call   c001851d <Thr::getDriverNameFromAddress(unsigned long)>
c00152cd:	83 c4 10             	add    esp,0x10
c00152d0:	89 c3                	mov    ebx,eax
c00152d2:	85 c0                	test   eax,eax
c00152d4:	0f 84 32 01 00 00    	je     c001540c <Krnl::panic(char const*)+0x213>
c00152da:	51                   	push   ecx
c00152db:	51                   	push   ecx
c00152dc:	68 04 68 02 c0       	push   0xc0026804
c00152e1:	ff 35 84 8c 02 c0    	push   DWORD PTR ds:0xc0028c84
c00152e7:	e8 f6 60 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c00152ec:	58                   	pop    eax
c00152ed:	5a                   	pop    edx
c00152ee:	68 5a 67 02 c0       	push   0xc002675a
c00152f3:	ff 35 84 8c 02 c0    	push   DWORD PTR ds:0xc0028c84
c00152f9:	e8 e4 60 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c00152fe:	59                   	pop    ecx
c00152ff:	58                   	pop    eax
c0015300:	53                   	push   ebx
c0015301:	ff 35 84 8c 02 c0    	push   DWORD PTR ds:0xc0028c84
c0015307:	e8 d6 60 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c001530c:	83 c4 10             	add    esp,0x10
c001530f:	50                   	push   eax
c0015310:	50                   	push   eax
c0015311:	68 79 67 02 c0       	push   0xc0026779
c0015316:	ff 35 84 8c 02 c0    	push   DWORD PTR ds:0xc0028c84
c001531c:	e8 c1 60 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c0015321:	5a                   	pop    edx
c0015322:	59                   	pop    ecx
c0015323:	68 5c 68 02 c0       	push   0xc002685c
c0015328:	ff 35 84 8c 02 c0    	push   DWORD PTR ds:0xc0028c84
c001532e:	e8 af 60 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c0015333:	5b                   	pop    ebx
c0015334:	58                   	pop    eax
c0015335:	68 9c 68 02 c0       	push   0xc002689c
c001533a:	ff 35 84 8c 02 c0    	push   DWORD PTR ds:0xc0028c84
c0015340:	e8 9d 60 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c0015345:	58                   	pop    eax
c0015346:	5a                   	pop    edx
c0015347:	68 65 67 02 c0       	push   0xc0026765
c001534c:	ff 35 84 8c 02 c0    	push   DWORD PTR ds:0xc0028c84
c0015352:	e8 8b 60 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c0015357:	59                   	pop    ecx
c0015358:	5b                   	pop    ebx
c0015359:	68 e0 68 02 c0       	push   0xc00268e0
c001535e:	ff 35 84 8c 02 c0    	push   DWORD PTR ds:0xc0028c84
c0015364:	e8 79 60 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c0015369:	58                   	pop    eax
c001536a:	5a                   	pop    edx
c001536b:	68 7d 67 02 c0       	push   0xc002677d
c0015370:	ff 35 84 8c 02 c0    	push   DWORD PTR ds:0xc0028c84
c0015376:	e8 67 60 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c001537b:	0f 20 c0             	mov    eax,cr0
c001537e:	59                   	pop    ecx
c001537f:	5b                   	pop    ebx
c0015380:	50                   	push   eax
c0015381:	ff 35 84 8c 02 c0    	push   DWORD PTR ds:0xc0028c84
c0015387:	e8 10 60 ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c001538c:	58                   	pop    eax
c001538d:	5a                   	pop    edx
c001538e:	68 87 67 02 c0       	push   0xc0026787
c0015393:	ff 35 84 8c 02 c0    	push   DWORD PTR ds:0xc0028c84
c0015399:	e8 44 60 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c001539e:	0f 20 d0             	mov    eax,cr2
c00153a1:	59                   	pop    ecx
c00153a2:	5b                   	pop    ebx
c00153a3:	50                   	push   eax
c00153a4:	ff 35 84 8c 02 c0    	push   DWORD PTR ds:0xc0028c84
c00153aa:	e8 ed 5f ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c00153af:	58                   	pop    eax
c00153b0:	5a                   	pop    edx
c00153b1:	68 91 67 02 c0       	push   0xc0026791
c00153b6:	ff 35 84 8c 02 c0    	push   DWORD PTR ds:0xc0028c84
c00153bc:	e8 21 60 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c00153c1:	0f 20 d8             	mov    eax,cr3
c00153c4:	59                   	pop    ecx
c00153c5:	5b                   	pop    ebx
c00153c6:	50                   	push   eax
c00153c7:	ff 35 84 8c 02 c0    	push   DWORD PTR ds:0xc0028c84
c00153cd:	e8 ca 5f ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c00153d2:	58                   	pop    eax
c00153d3:	5a                   	pop    edx
c00153d4:	68 a4 67 02 c0       	push   0xc00267a4
c00153d9:	ff 35 84 8c 02 c0    	push   DWORD PTR ds:0xc0028c84
c00153df:	e8 fe 5f ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c00153e4:	0f 20 e0             	mov    eax,cr4
c00153e7:	59                   	pop    ecx
c00153e8:	5b                   	pop    ebx
c00153e9:	50                   	push   eax
c00153ea:	ff 35 84 8c 02 c0    	push   DWORD PTR ds:0xc0028c84
c00153f0:	e8 a7 5f ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c00153f5:	58                   	pop    eax
c00153f6:	5a                   	pop    edx
c00153f7:	68 ae 67 02 c0       	push   0xc00267ae
c00153fc:	ff 35 84 8c 02 c0    	push   DWORD PTR ds:0xc0028c84
c0015402:	e8 db 5f ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c0015407:	83 c4 10             	add    esp,0x10
c001540a:	eb fe                	jmp    c001540a <Krnl::panic(char const*)+0x211>
c001540c:	51                   	push   ecx
c001540d:	51                   	push   ecx
c001540e:	68 30 68 02 c0       	push   0xc0026830
c0015413:	ff 35 84 8c 02 c0    	push   DWORD PTR ds:0xc0028c84
c0015419:	e8 c4 5f ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c001541e:	5b                   	pop    ebx
c001541f:	58                   	pop    eax
c0015420:	68 5a 67 02 c0       	push   0xc002675a
c0015425:	ff 35 84 8c 02 c0    	push   DWORD PTR ds:0xc0028c84
c001542b:	e8 b2 5f ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c0015430:	58                   	pop    eax
c0015431:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015436:	5a                   	pop    edx
c0015437:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001543a:	83 c0 0c             	add    eax,0xc
c001543d:	50                   	push   eax
c001543e:	ff 35 84 8c 02 c0    	push   DWORD PTR ds:0xc0028c84
c0015444:	e8 99 5f ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c0015449:	83 c4 10             	add    esp,0x10
c001544c:	e9 be fe ff ff       	jmp    c001530f <Krnl::panic(char const*)+0x116>

c0015451 <Krnl::powerThread(void*)>:
c0015451:	53                   	push   ebx
c0015452:	83 ec 08             	sub    esp,0x8
c0015455:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c001545a:	48                   	dec    eax
c001545b:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c0015460:	75 01                	jne    c0015463 <Krnl::powerThread(void*)+0x12>
c0015462:	fb                   	sti    
c0015463:	52                   	push   edx
c0015464:	52                   	push   edx
c0015465:	ff 35 44 97 02 c0    	push   DWORD PTR ds:0xc0029744
c001546b:	68 06 69 02 c0       	push   0xc0026906
c0015470:	e8 a2 7c ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0015475:	59                   	pop    ecx
c0015476:	8b 1d 34 97 02 c0    	mov    ebx,DWORD PTR ds:0xc0029734
c001547c:	58                   	pop    eax
c001547d:	c6 05 00 97 02 c0 00 	mov    BYTE PTR ds:0xc0029700,0x0
c0015484:	53                   	push   ebx
c0015485:	68 10 69 02 c0       	push   0xc0026910
c001548a:	e8 88 7c ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c001548f:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c0015496:	e8 c1 3d 00 00       	call   c001925c <sleep(unsigned int)>
c001549b:	a1 44 97 02 c0       	mov    eax,ds:0xc0029744
c00154a0:	83 c4 10             	add    esp,0x10
c00154a3:	83 c0 0a             	add    eax,0xa
c00154a6:	85 db                	test   ebx,ebx
c00154a8:	a3 44 97 02 c0       	mov    ds:0xc0029744,eax
c00154ad:	74 b4                	je     c0015463 <Krnl::powerThread(void*)+0x12>
c00154af:	39 d8                	cmp    eax,ebx
c00154b1:	7e b0                	jle    c0015463 <Krnl::powerThread(void*)+0x12>
c00154b3:	83 ec 0c             	sub    esp,0xc
c00154b6:	68 28 69 02 c0       	push   0xc0026928
c00154bb:	e8 57 7c ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c00154c0:	58                   	pop    eax
c00154c1:	ff 35 08 8c 02 c0    	push   DWORD PTR ds:0xc0028c08
c00154c7:	e8 46 3e ff ff       	call   c0009312 <Computer::sleep()>
c00154cc:	83 c4 10             	add    esp,0x10
c00154cf:	eb 92                	jmp    c0015463 <Krnl::powerThread(void*)+0x12>

c00154d1 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c00154d1:	57                   	push   edi
c00154d2:	b9 09 00 00 00       	mov    ecx,0x9
c00154d7:	56                   	push   esi
c00154d8:	bf 20 97 02 c0       	mov    edi,0xc0029720
c00154dd:	fc                   	cld    
c00154de:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00154e2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00154e4:	5e                   	pop    esi
c00154e5:	5f                   	pop    edi
c00154e6:	c3                   	ret    

c00154e7 <Krnl::userIOReceived()>:
c00154e7:	c7 05 44 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029744,0x0
c00154f1:	c3                   	ret    

c00154f2 <Krnl::handlePowerButton()>:
c00154f2:	83 ec 0c             	sub    esp,0xc
c00154f5:	a1 20 97 02 c0       	mov    eax,ds:0xc0029720
c00154fa:	83 f8 02             	cmp    eax,0x2
c00154fd:	75 10                	jne    c001550f <Krnl::handlePowerButton()+0x1d>
c00154ff:	83 ec 0c             	sub    esp,0xc
c0015502:	ff 35 08 8c 02 c0    	push   DWORD PTR ds:0xc0028c08
c0015508:	e8 d5 3d ff ff       	call   c00092e2 <Computer::shutdown()>
c001550d:	eb 11                	jmp    c0015520 <Krnl::handlePowerButton()+0x2e>
c001550f:	48                   	dec    eax
c0015510:	75 11                	jne    c0015523 <Krnl::handlePowerButton()+0x31>
c0015512:	83 ec 0c             	sub    esp,0xc
c0015515:	ff 35 08 8c 02 c0    	push   DWORD PTR ds:0xc0028c08
c001551b:	e8 f2 3d ff ff       	call   c0009312 <Computer::sleep()>
c0015520:	83 c4 10             	add    esp,0x10
c0015523:	83 c4 0c             	add    esp,0xc
c0015526:	c3                   	ret    

c0015527 <Krnl::handleSleepButton()>:
c0015527:	83 ec 0c             	sub    esp,0xc
c001552a:	a1 24 97 02 c0       	mov    eax,ds:0xc0029724
c001552f:	83 f8 02             	cmp    eax,0x2
c0015532:	75 10                	jne    c0015544 <Krnl::handleSleepButton()+0x1d>
c0015534:	83 ec 0c             	sub    esp,0xc
c0015537:	ff 35 08 8c 02 c0    	push   DWORD PTR ds:0xc0028c08
c001553d:	e8 a0 3d ff ff       	call   c00092e2 <Computer::shutdown()>
c0015542:	eb 11                	jmp    c0015555 <Krnl::handleSleepButton()+0x2e>
c0015544:	48                   	dec    eax
c0015545:	75 11                	jne    c0015558 <Krnl::handleSleepButton()+0x31>
c0015547:	83 ec 0c             	sub    esp,0xc
c001554a:	ff 35 08 8c 02 c0    	push   DWORD PTR ds:0xc0028c08
c0015550:	e8 bd 3d ff ff       	call   c0009312 <Computer::sleep()>
c0015555:	83 c4 10             	add    esp,0x10
c0015558:	83 c4 0c             	add    esp,0xc
c001555b:	c3                   	ret    

c001555c <Krnl::setupPowerManager()>:
c001555c:	83 ec 0c             	sub    esp,0xc
c001555f:	c7 05 44 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029744,0x0
c0015569:	68 f0 00 00 00       	push   0xf0
c001556e:	c6 05 00 97 02 c0 00 	mov    BYTE PTR ds:0xc0029700,0x0
c0015575:	6a 00                	push   0x0
c0015577:	68 51 54 01 c0       	push   0xc0015451
c001557c:	ff 35 50 a1 02 c0    	push   DWORD PTR ds:0xc002a150
c0015582:	e8 b1 37 00 00       	call   c0018d38 <Process::createThread(void (*)(void*), void*, int)>
c0015587:	c7 05 20 97 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0029720,0x2
c0015591:	c7 05 24 97 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0029724,0x1
c001559b:	c7 05 28 97 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0029728,0x3
c00155a5:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c00155af:	c7 05 38 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029738,0x0
c00155b9:	c7 05 30 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029730,0x0
c00155c3:	c7 05 3c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002973c,0x0
c00155cd:	c7 05 34 97 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0029734,0x3c
c00155d7:	c7 05 40 97 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0029740,0x3c
c00155e1:	83 c4 1c             	add    esp,0x1c
c00155e4:	c3                   	ret    

c00155e5 <Krnl::initRNG()>:
c00155e5:	56                   	push   esi
c00155e6:	53                   	push   ebx
c00155e7:	52                   	push   edx
c00155e8:	80 3d 50 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029750,0x0
c00155ef:	74 15                	je     c0015606 <Krnl::initRNG()+0x21>
c00155f1:	83 ec 0c             	sub    esp,0xc
c00155f4:	68 35 69 02 c0       	push   0xc0026935
c00155f9:	e8 fb fb ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c00155fe:	83 c4 10             	add    esp,0x10
c0015601:	e9 b4 00 00 00       	jmp    c00156ba <Krnl::initRNG()+0xd5>
c0015606:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c001560b:	c7 05 48 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029748,0x0
c0015615:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001561b:	c7 05 4c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002974c,0x0
c0015625:	f6 80 90 11 00 00 01 	test   BYTE PTR [eax+0x1190],0x1
c001562c:	74 1f                	je     c001564d <Krnl::initRNG()+0x68>
c001562e:	e8 e6 ab fe ff       	call   c0000219 <getRDRAND>
c0015633:	c7 05 48 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029748,0x0
c001563d:	a3 4c 97 02 c0       	mov    ds:0xc002974c,eax
c0015642:	e8 d2 ab fe ff       	call   c0000219 <getRDRAND>
c0015647:	09 05 48 97 02 c0    	or     DWORD PTR ds:0xc0029748,eax
c001564d:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c0015652:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015658:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001565f:	74 10                	je     c0015671 <Krnl::initRNG()+0x8c>
c0015661:	0f 31                	rdtsc  
c0015663:	89 c1                	mov    ecx,eax
c0015665:	31 15 4c 97 02 c0    	xor    DWORD PTR ds:0xc002974c,edx
c001566b:	31 0d 48 97 02 c0    	xor    DWORD PTR ds:0xc0029748,ecx
c0015671:	8b 0d 48 97 02 c0    	mov    ecx,DWORD PTR ds:0xc0029748
c0015677:	8b 1d 4c 97 02 c0    	mov    ebx,DWORD PTR ds:0xc002974c
c001567d:	89 c8                	mov    eax,ecx
c001567f:	8b 35 2c 92 02 c0    	mov    esi,DWORD PTR ds:0xc002922c
c0015685:	0f a4 d9 11          	shld   ecx,ebx,0x11
c0015689:	c6 05 50 97 02 c0 01 	mov    BYTE PTR ds:0xc0029750,0x1
c0015690:	31 ce                	xor    esi,ecx
c0015692:	0f a4 c3 11          	shld   ebx,eax,0x11
c0015696:	89 f0                	mov    eax,esi
c0015698:	89 da                	mov    edx,ebx
c001569a:	0f ac d0 1b          	shrd   eax,edx,0x1b
c001569e:	0f ac f2 1b          	shrd   edx,esi,0x1b
c00156a2:	35 f6 5d 72 45       	xor    eax,0x45725df6
c00156a7:	89 d1                	mov    ecx,edx
c00156a9:	a3 48 97 02 c0       	mov    ds:0xc0029748,eax
c00156ae:	89 c8                	mov    eax,ecx
c00156b0:	35 89 c3 8d 30       	xor    eax,0x308dc389
c00156b5:	a3 4c 97 02 c0       	mov    ds:0xc002974c,eax
c00156ba:	58                   	pop    eax
c00156bb:	5b                   	pop    ebx
c00156bc:	5e                   	pop    esi
c00156bd:	c3                   	ret    

c00156be <Krnl::rand()>:
c00156be:	53                   	push   ebx
c00156bf:	83 ec 08             	sub    esp,0x8
c00156c2:	80 3d 50 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029750,0x0
c00156c9:	75 10                	jne    c00156db <Krnl::rand()+0x1d>
c00156cb:	83 ec 0c             	sub    esp,0xc
c00156ce:	68 4c 69 02 c0       	push   0xc002694c
c00156d3:	e8 21 fb ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c00156d8:	83 c4 10             	add    esp,0x10
c00156db:	69 05 48 97 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0029748,0x2875
c00156e5:	69 0d 4c 97 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002974c,0xa2e7b175
c00156ef:	01 c1                	add    ecx,eax
c00156f1:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c00156f6:	f7 25 48 97 02 c0    	mul    DWORD PTR ds:0xc0029748
c00156fc:	01 ca                	add    edx,ecx
c00156fe:	05 ef 04 b5 00       	add    eax,0xb504ef
c0015703:	83 d2 00             	adc    edx,0x0
c0015706:	a3 48 97 02 c0       	mov    ds:0xc0029748,eax
c001570b:	0f b7 da             	movzx  ebx,dx
c001570e:	89 1d 4c 97 02 c0    	mov    DWORD PTR ds:0xc002974c,ebx
c0015714:	89 da                	mov    edx,ebx
c0015716:	83 c4 08             	add    esp,0x8
c0015719:	0f ac d0 10          	shrd   eax,edx,0x10
c001571d:	5b                   	pop    ebx
c001571e:	c3                   	ret    
c001571f:	90                   	nop

c0015720 <Net::switchEndian16(unsigned short)>:
c0015720:	83 ec 04             	sub    esp,0x4
c0015723:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015727:	66 89 04 24          	mov    WORD PTR [esp],ax
c001572b:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001572f:	c1 f8 08             	sar    eax,0x8
c0015732:	89 c2                	mov    edx,eax
c0015734:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0015738:	c1 e0 08             	shl    eax,0x8
c001573b:	09 d0                	or     eax,edx
c001573d:	83 c4 04             	add    esp,0x4
c0015740:	c3                   	ret    
c0015741:	8d 76 00             	lea    esi,[esi+0x0]

c0015744 <Net::switchEndian32(unsigned int)>:
c0015744:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015748:	c1 e8 18             	shr    eax,0x18
c001574b:	89 c2                	mov    edx,eax
c001574d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015751:	c1 e0 08             	shl    eax,0x8
c0015754:	25 00 00 ff 00       	and    eax,0xff0000
c0015759:	09 c2                	or     edx,eax
c001575b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001575f:	c1 e8 08             	shr    eax,0x8
c0015762:	25 00 ff 00 00       	and    eax,0xff00
c0015767:	09 c2                	or     edx,eax
c0015769:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001576d:	c1 e0 18             	shl    eax,0x18
c0015770:	09 d0                	or     eax,edx
c0015772:	c3                   	ret    
c0015773:	90                   	nop

c0015774 <Net::crc32Calc(unsigned char*, int)>:
c0015774:	83 ec 10             	sub    esp,0x10
c0015777:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001577c:	75 0a                	jne    c0015788 <Net::crc32Calc(unsigned char*, int)+0x14>
c001577e:	b8 00 00 00 00       	mov    eax,0x0
c0015783:	e9 8c 00 00 00       	jmp    c0015814 <Net::crc32Calc(unsigned char*, int)+0xa0>
c0015788:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001578d:	7f 09                	jg     c0015798 <Net::crc32Calc(unsigned char*, int)+0x24>
c001578f:	b8 00 00 00 00       	mov    eax,0x0
c0015794:	eb 7e                	jmp    c0015814 <Net::crc32Calc(unsigned char*, int)+0xa0>
c0015796:	66 90                	xchg   ax,ax
c0015798:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c00157a0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00157a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00157ac:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c00157b0:	7d 5a                	jge    c001580c <Net::crc32Calc(unsigned char*, int)+0x98>
c00157b2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00157b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00157ba:	01 d0                	add    eax,edx
c00157bc:	8a 00                	mov    al,BYTE PTR [eax]
c00157be:	0f b6 c0             	movzx  eax,al
c00157c1:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c00157c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00157cd:	8d 76 00             	lea    esi,[esi+0x0]
c00157d0:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c00157d5:	7f 2d                	jg     c0015804 <Net::crc32Calc(unsigned char*, int)+0x90>
c00157d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00157db:	83 e0 01             	and    eax,0x1
c00157de:	74 10                	je     c00157f0 <Net::crc32Calc(unsigned char*, int)+0x7c>
c00157e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00157e4:	d1 e8                	shr    eax,1
c00157e6:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00157eb:	eb 0b                	jmp    c00157f8 <Net::crc32Calc(unsigned char*, int)+0x84>
c00157ed:	8d 76 00             	lea    esi,[esi+0x0]
c00157f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00157f4:	d1 e8                	shr    eax,1
c00157f6:	66 90                	xchg   ax,ax
c00157f8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00157fc:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0015800:	eb ce                	jmp    c00157d0 <Net::crc32Calc(unsigned char*, int)+0x5c>
c0015802:	66 90                	xchg   ax,ax
c0015804:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0015808:	eb 9e                	jmp    c00157a8 <Net::crc32Calc(unsigned char*, int)+0x34>
c001580a:	66 90                	xchg   ax,ax
c001580c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015810:	f7 d0                	not    eax
c0015812:	66 90                	xchg   ax,ax
c0015814:	83 c4 10             	add    esp,0x10
c0015817:	c3                   	ret    

c0015818 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c0015818:	57                   	push   edi
c0015819:	56                   	push   esi
c001581a:	53                   	push   ebx
c001581b:	83 ec 60             	sub    esp,0x60
c001581e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015825:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0015829:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0015831:	8d 76 00             	lea    esi,[esi+0x0]
c0015834:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c0015839:	7f 1d                	jg     c0015858 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x40>
c001583b:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015842:	8d 50 01             	lea    edx,[eax+0x1]
c0015845:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001584c:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001584f:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0015853:	eb df                	jmp    c0015834 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x1c>
c0015855:	8d 76 00             	lea    esi,[esi+0x0]
c0015858:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001585f:	8d 50 01             	lea    edx,[eax+0x1]
c0015862:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0015869:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001586c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015873:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015877:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001587b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001587f:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c0015887:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001588b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001588f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015893:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015897:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001589b:	89 c6                	mov    esi,eax
c001589d:	89 d7                	mov    edi,edx
c001589f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00158a1:	89 c8                	mov    eax,ecx
c00158a3:	89 fa                	mov    edx,edi
c00158a5:	89 f3                	mov    ebx,esi
c00158a7:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00158ab:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00158af:	89 04 24             	mov    DWORD PTR [esp],eax
c00158b2:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c00158ba:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00158c1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00158c5:	8d 44 24 78          	lea    eax,[esp+0x78]
c00158c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00158cd:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c00158d5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00158d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00158dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00158e1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00158e5:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00158e9:	89 c6                	mov    esi,eax
c00158eb:	89 d7                	mov    edi,edx
c00158ed:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00158ef:	89 c8                	mov    eax,ecx
c00158f1:	89 fa                	mov    edx,edi
c00158f3:	89 f3                	mov    ebx,esi
c00158f5:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c00158f9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00158fd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015901:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c0015909:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015910:	0f b7 c0             	movzx  eax,ax
c0015913:	c1 f8 08             	sar    eax,0x8
c0015916:	89 c1                	mov    ecx,eax
c0015918:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001591f:	8d 50 01             	lea    edx,[eax+0x1]
c0015922:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0015929:	88 ca                	mov    dl,cl
c001592b:	88 10                	mov    BYTE PTR [eax],dl
c001592d:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0015934:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001593b:	8d 48 01             	lea    ecx,[eax+0x1]
c001593e:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c0015945:	88 10                	mov    BYTE PTR [eax],dl
c0015947:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001594b:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001594f:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c0015956:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001595a:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001595e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0015962:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0015966:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001596a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001596e:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0015972:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0015976:	89 c6                	mov    esi,eax
c0015978:	89 d7                	mov    edi,edx
c001597a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001597c:	89 c8                	mov    eax,ecx
c001597e:	89 fa                	mov    edx,edi
c0015980:	89 f3                	mov    ebx,esi
c0015982:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0015986:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001598a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001598e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0015992:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c0015999:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00159a0:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c00159a4:	50                   	push   eax
c00159a5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00159a9:	e8 c6 fd ff ff       	call   c0015774 <Net::crc32Calc(unsigned char*, int)>
c00159ae:	83 c4 08             	add    esp,0x8
c00159b1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00159b5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00159b9:	c1 e8 18             	shr    eax,0x18
c00159bc:	89 c1                	mov    ecx,eax
c00159be:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00159c5:	8d 50 01             	lea    edx,[eax+0x1]
c00159c8:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00159cf:	88 ca                	mov    dl,cl
c00159d1:	88 10                	mov    BYTE PTR [eax],dl
c00159d3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00159d7:	c1 e8 10             	shr    eax,0x10
c00159da:	89 c1                	mov    ecx,eax
c00159dc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00159e3:	8d 50 01             	lea    edx,[eax+0x1]
c00159e6:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00159ed:	88 ca                	mov    dl,cl
c00159ef:	88 10                	mov    BYTE PTR [eax],dl
c00159f1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00159f5:	c1 e8 08             	shr    eax,0x8
c00159f8:	89 c1                	mov    ecx,eax
c00159fa:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015a01:	8d 50 01             	lea    edx,[eax+0x1]
c0015a04:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0015a0b:	88 ca                	mov    dl,cl
c0015a0d:	88 10                	mov    BYTE PTR [eax],dl
c0015a0f:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015a16:	8d 50 01             	lea    edx,[eax+0x1]
c0015a19:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0015a20:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0015a24:	88 10                	mov    BYTE PTR [eax],dl
c0015a26:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0015a2a:	83 c4 60             	add    esp,0x60
c0015a2d:	5b                   	pop    ebx
c0015a2e:	5e                   	pop    esi
c0015a2f:	5f                   	pop    edi
c0015a30:	c3                   	ret    
c0015a31:	8d 76 00             	lea    esi,[esi+0x0]

c0015a34 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c0015a34:	57                   	push   edi
c0015a35:	56                   	push   esi
c0015a36:	53                   	push   ebx
c0015a37:	83 ec 70             	sub    esp,0x70
c0015a3a:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015a41:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0015a45:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c0015a4d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015a54:	83 c0 0e             	add    eax,0xe
c0015a57:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0015a5b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015a62:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015a66:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c0015a6e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015a72:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015a76:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015a7a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0015a7e:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0015a82:	89 c6                	mov    esi,eax
c0015a84:	89 d7                	mov    edi,edx
c0015a86:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015a88:	89 c8                	mov    eax,ecx
c0015a8a:	89 fa                	mov    edx,edi
c0015a8c:	89 f3                	mov    ebx,esi
c0015a8e:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c0015a92:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0015a96:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015a9a:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c0015aa2:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015aa9:	83 c0 08             	add    eax,0x8
c0015aac:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0015ab0:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015ab7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0015abb:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c0015ac3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0015ac7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0015acb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015acf:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0015ad3:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0015ad7:	89 c6                	mov    esi,eax
c0015ad9:	89 d7                	mov    edi,edx
c0015adb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015add:	89 c8                	mov    eax,ecx
c0015adf:	89 fa                	mov    edx,edi
c0015ae1:	89 f3                	mov    ebx,esi
c0015ae3:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0015ae7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0015aeb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0015aef:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c0015af7:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015afe:	8d 50 01             	lea    edx,[eax+0x1]
c0015b01:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015b08:	8a 00                	mov    al,BYTE PTR [eax]
c0015b0a:	0f b6 c0             	movzx  eax,al
c0015b0d:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c0015b12:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015b19:	8d 50 01             	lea    edx,[eax+0x1]
c0015b1c:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015b23:	8a 00                	mov    al,BYTE PTR [eax]
c0015b25:	0f b6 c0             	movzx  eax,al
c0015b28:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c0015b2d:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c0015b32:	c1 e0 08             	shl    eax,0x8
c0015b35:	89 c2                	mov    edx,eax
c0015b37:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0015b3b:	09 d0                	or     eax,edx
c0015b3d:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0015b44:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c0015b48:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c0015b50:	75 46                	jne    c0015b98 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c0015b52:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015b59:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015b5c:	66 3d dc 05          	cmp    ax,0x5dc
c0015b60:	77 16                	ja     c0015b78 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c0015b62:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015b69:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015b6c:	0f b7 c0             	movzx  eax,ax
c0015b6f:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c0015b76:	eb 20                	jmp    c0015b98 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c0015b78:	83 ec 0c             	sub    esp,0xc
c0015b7b:	68 68 69 02 c0       	push   0xc0026968
c0015b80:	e8 92 75 ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0015b85:	83 c4 10             	add    esp,0x10
c0015b88:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015b8f:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c0015b93:	e9 18 01 00 00       	jmp    c0015cb0 <Net::unwrapEthernetFrame(unsigned char*, int)+0x27c>
c0015b98:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015b9f:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0015ba6:	8b 12                	mov    edx,DWORD PTR [edx]
c0015ba8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0015bac:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0015bb3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0015bb7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015bbb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015bbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015bc3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015bc7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015bcb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015bcf:	89 c6                	mov    esi,eax
c0015bd1:	89 d7                	mov    edi,edx
c0015bd3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015bd5:	89 c8                	mov    eax,ecx
c0015bd7:	89 fa                	mov    edx,edi
c0015bd9:	89 f3                	mov    ebx,esi
c0015bdb:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0015bdf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0015be3:	89 04 24             	mov    DWORD PTR [esp],eax
c0015be6:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015bed:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c0015bf4:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015bfb:	8d 50 01             	lea    edx,[eax+0x1]
c0015bfe:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015c05:	8a 00                	mov    al,BYTE PTR [eax]
c0015c07:	0f b6 c0             	movzx  eax,al
c0015c0a:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0015c0e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015c15:	8d 50 01             	lea    edx,[eax+0x1]
c0015c18:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015c1f:	8a 00                	mov    al,BYTE PTR [eax]
c0015c21:	0f b6 c0             	movzx  eax,al
c0015c24:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0015c28:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015c2f:	8d 50 01             	lea    edx,[eax+0x1]
c0015c32:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015c39:	8a 00                	mov    al,BYTE PTR [eax]
c0015c3b:	0f b6 c0             	movzx  eax,al
c0015c3e:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c0015c42:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015c49:	8d 50 01             	lea    edx,[eax+0x1]
c0015c4c:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015c53:	8a 00                	mov    al,BYTE PTR [eax]
c0015c55:	0f b6 c0             	movzx  eax,al
c0015c58:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0015c5c:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0015c60:	c1 e0 18             	shl    eax,0x18
c0015c63:	89 c2                	mov    edx,eax
c0015c65:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0015c69:	c1 e0 10             	shl    eax,0x10
c0015c6c:	09 c2                	or     edx,eax
c0015c6e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0015c72:	c1 e0 08             	shl    eax,0x8
c0015c75:	09 d0                	or     eax,edx
c0015c77:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c0015c7b:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0015c7f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015c86:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0015c8a:	83 e8 04             	sub    eax,0x4
c0015c8d:	83 ec 08             	sub    esp,0x8
c0015c90:	50                   	push   eax
c0015c91:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0015c95:	e8 da fa ff ff       	call   c0015774 <Net::crc32Calc(unsigned char*, int)>
c0015c9a:	83 c4 10             	add    esp,0x10
c0015c9d:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0015ca1:	0f 94 c2             	sete   dl
c0015ca4:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015cab:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c0015cae:	90                   	nop
c0015caf:	90                   	nop
c0015cb0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015cb7:	83 c4 70             	add    esp,0x70
c0015cba:	5b                   	pop    ebx
c0015cbb:	5e                   	pop    esi
c0015cbc:	5f                   	pop    edi
c0015cbd:	c2 04 00             	ret    0x4

c0015cc0 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0015cc0:	55                   	push   ebp
c0015cc1:	57                   	push   edi
c0015cc2:	56                   	push   esi
c0015cc3:	53                   	push   ebx
c0015cc4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0015cca:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0015cd1:	8a 1e                	mov    bl,BYTE PTR [esi]
c0015cd3:	8d 6e 01             	lea    ebp,[esi+0x1]
c0015cd6:	80 fb 40             	cmp    bl,0x40
c0015cd9:	75 1b                	jne    c0015cf6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0015cdb:	8a 16                	mov    dl,BYTE PTR [esi]
c0015cdd:	84 d2                	test   dl,dl
c0015cdf:	0f 84 f1 00 00 00    	je     c0015dd6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015ce5:	8d 46 01             	lea    eax,[esi+0x1]
c0015ce8:	80 fa 3a             	cmp    dl,0x3a
c0015ceb:	74 04                	je     c0015cf1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0015ced:	89 c6                	mov    esi,eax
c0015cef:	eb ea                	jmp    c0015cdb <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0015cf1:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015cf4:	89 c6                	mov    esi,eax
c0015cf6:	50                   	push   eax
c0015cf7:	6a 40                	push   0x40
c0015cf9:	6a 00                	push   0x0
c0015cfb:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015cff:	50                   	push   eax
c0015d00:	e8 8f a9 fe ff       	call   c0000694 <memset>
c0015d05:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0015d0c:	31 c0                	xor    eax,eax
c0015d0e:	83 c4 10             	add    esp,0x10
c0015d11:	8a 0f                	mov    cl,BYTE PTR [edi]
c0015d13:	84 c9                	test   cl,cl
c0015d15:	0f 84 bb 00 00 00    	je     c0015dd6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015d1b:	3d c7 00 00 00       	cmp    eax,0xc7
c0015d20:	0f 8f b0 00 00 00    	jg     c0015dd6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015d26:	80 f9 0a             	cmp    cl,0xa
c0015d29:	0f 85 98 00 00 00    	jne    c0015dc7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0015d2f:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0015d34:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0015d38:	a8 df                	test   al,0xdf
c0015d3a:	0f 94 c1             	sete   cl
c0015d3d:	3c 23                	cmp    al,0x23
c0015d3f:	0f 94 c2             	sete   dl
c0015d42:	08 d1                	or     cl,dl
c0015d44:	75 4a                	jne    c0015d90 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015d46:	8d 50 f7             	lea    edx,[eax-0x9]
c0015d49:	80 fa 01             	cmp    dl,0x1
c0015d4c:	76 42                	jbe    c0015d90 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015d4e:	3c 5b                	cmp    al,0x5b
c0015d50:	75 42                	jne    c0015d94 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0015d52:	80 fb 40             	cmp    bl,0x40
c0015d55:	75 39                	jne    c0015d90 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015d57:	83 ec 0c             	sub    esp,0xc
c0015d5a:	8d 54 24 65          	lea    edx,[esp+0x65]
c0015d5e:	52                   	push   edx
c0015d5f:	e8 4c a9 fe ff       	call   c00006b0 <strlen>
c0015d64:	83 c4 10             	add    esp,0x10
c0015d67:	83 f8 3f             	cmp    eax,0x3f
c0015d6a:	77 6a                	ja     c0015dd6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015d6c:	50                   	push   eax
c0015d6d:	50                   	push   eax
c0015d6e:	8d 54 24 61          	lea    edx,[esp+0x61]
c0015d72:	52                   	push   edx
c0015d73:	8d 54 24 24          	lea    edx,[esp+0x24]
c0015d77:	52                   	push   edx
c0015d78:	e8 d3 a9 fe ff       	call   c0000750 <strcpy>
c0015d7d:	58                   	pop    eax
c0015d7e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0015d82:	52                   	push   edx
c0015d83:	e8 28 a9 fe ff       	call   c00006b0 <strlen>
c0015d88:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0015d8d:	83 c4 10             	add    esp,0x10
c0015d90:	31 d2                	xor    edx,edx
c0015d92:	eb 3a                	jmp    c0015dce <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0015d94:	80 fb 40             	cmp    bl,0x40
c0015d97:	74 06                	je     c0015d9f <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0015d99:	8d 44 24 58          	lea    eax,[esp+0x58]
c0015d9d:	eb 20                	jmp    c0015dbf <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0015d9f:	50                   	push   eax
c0015da0:	50                   	push   eax
c0015da1:	55                   	push   ebp
c0015da2:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015da6:	50                   	push   eax
c0015da7:	e8 30 aa fe ff       	call   c00007dc <strcmp>
c0015dac:	83 c4 10             	add    esp,0x10
c0015daf:	85 c0                	test   eax,eax
c0015db1:	75 dd                	jne    c0015d90 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015db3:	eb e4                	jmp    c0015d99 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0015db5:	8d 50 01             	lea    edx,[eax+0x1]
c0015db8:	80 f9 3d             	cmp    cl,0x3d
c0015dbb:	74 1d                	je     c0015dda <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0015dbd:	89 d0                	mov    eax,edx
c0015dbf:	8a 08                	mov    cl,BYTE PTR [eax]
c0015dc1:	84 c9                	test   cl,cl
c0015dc3:	75 f0                	jne    c0015db5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0015dc5:	eb 0f                	jmp    c0015dd6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015dc7:	8d 50 01             	lea    edx,[eax+0x1]
c0015dca:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0015dce:	47                   	inc    edi
c0015dcf:	89 d0                	mov    eax,edx
c0015dd1:	e9 3b ff ff ff       	jmp    c0015d11 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0015dd6:	31 c0                	xor    eax,eax
c0015dd8:	eb 33                	jmp    c0015e0d <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0015dda:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015dde:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0015de1:	50                   	push   eax
c0015de2:	50                   	push   eax
c0015de3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0015de7:	50                   	push   eax
c0015de8:	56                   	push   esi
c0015de9:	e8 ee a9 fe ff       	call   c00007dc <strcmp>
c0015dee:	83 c4 10             	add    esp,0x10
c0015df1:	85 c0                	test   eax,eax
c0015df3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015df7:	75 97                	jne    c0015d90 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015df9:	51                   	push   ecx
c0015dfa:	51                   	push   ecx
c0015dfb:	52                   	push   edx
c0015dfc:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0015e03:	e8 48 a9 fe ff       	call   c0000750 <strcpy>
c0015e08:	83 c4 10             	add    esp,0x10
c0015e0b:	b0 01                	mov    al,0x1
c0015e0d:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015e13:	5b                   	pop    ebx
c0015e14:	5e                   	pop    esi
c0015e15:	5f                   	pop    edi
c0015e16:	5d                   	pop    ebp
c0015e17:	c3                   	ret    

c0015e18 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0015e18:	57                   	push   edi
c0015e19:	56                   	push   esi
c0015e1a:	53                   	push   ebx
c0015e1b:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0015e21:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0015e28:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0015e2f:	53                   	push   ebx
c0015e30:	e8 7b a8 fe ff       	call   c00006b0 <strlen>
c0015e35:	89 34 24             	mov    DWORD PTR [esp],esi
c0015e38:	89 c7                	mov    edi,eax
c0015e3a:	e8 71 a8 fe ff       	call   c00006b0 <strlen>
c0015e3f:	83 c4 10             	add    esp,0x10
c0015e42:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0015e46:	3d ff 00 00 00       	cmp    eax,0xff
c0015e4b:	0f 87 d3 00 00 00    	ja     c0015f24 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0015e51:	57                   	push   edi
c0015e52:	57                   	push   edi
c0015e53:	56                   	push   esi
c0015e54:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0015e58:	56                   	push   esi
c0015e59:	e8 f2 a8 fe ff       	call   c0000750 <strcpy>
c0015e5e:	58                   	pop    eax
c0015e5f:	5a                   	pop    edx
c0015e60:	68 0a 6d 02 c0       	push   0xc0026d0a
c0015e65:	56                   	push   esi
c0015e66:	e8 25 aa fe ff       	call   c0000890 <strcat>
c0015e6b:	59                   	pop    ecx
c0015e6c:	5f                   	pop    edi
c0015e6d:	53                   	push   ebx
c0015e6e:	56                   	push   esi
c0015e6f:	e8 1c aa fe ff       	call   c0000890 <strcat>
c0015e74:	58                   	pop    eax
c0015e75:	5a                   	pop    edx
c0015e76:	68 b4 69 02 c0       	push   0xc00269b4
c0015e7b:	56                   	push   esi
c0015e7c:	e8 0f aa fe ff       	call   c0000890 <strcat>
c0015e81:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015e88:	e8 5a 3f ff ff       	call   c0009de7 <malloc>
c0015e8d:	83 c4 0c             	add    esp,0xc
c0015e90:	89 c3                	mov    ebx,eax
c0015e92:	ff 35 50 a1 02 c0    	push   DWORD PTR ds:0xc002a150
c0015e98:	56                   	push   esi
c0015e99:	50                   	push   eax
c0015e9a:	e8 e3 77 ff ff       	call   c000d682 <File::File(char const*, Process*)>
c0015e9f:	83 c4 10             	add    esp,0x10
c0015ea2:	85 db                	test   ebx,ebx
c0015ea4:	74 7e                	je     c0015f24 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0015ea6:	51                   	push   ecx
c0015ea7:	51                   	push   ecx
c0015ea8:	6a 01                	push   0x1
c0015eaa:	53                   	push   ebx
c0015eab:	e8 ac 78 ff ff       	call   c000d75c <File::open(FileOpenMode)>
c0015eb0:	83 c4 10             	add    esp,0x10
c0015eb3:	85 c0                	test   eax,eax
c0015eb5:	74 08                	je     c0015ebf <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0015eb7:	83 ec 0c             	sub    esp,0xc
c0015eba:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015ebc:	53                   	push   ebx
c0015ebd:	eb 5f                	jmp    c0015f1e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0015ebf:	52                   	push   edx
c0015ec0:	8d 44 24 17          	lea    eax,[esp+0x17]
c0015ec4:	50                   	push   eax
c0015ec5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015ec9:	50                   	push   eax
c0015eca:	53                   	push   ebx
c0015ecb:	e8 38 7b ff ff       	call   c000da08 <File::stat(unsigned long long*, bool*)>
c0015ed0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015ed4:	83 c4 10             	add    esp,0x10
c0015ed7:	89 c1                	mov    ecx,eax
c0015ed9:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0015edd:	74 31                	je     c0015f10 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0015edf:	83 ec 0c             	sub    esp,0xc
c0015ee2:	50                   	push   eax
c0015ee3:	e8 ff 3e ff ff       	call   c0009de7 <malloc>
c0015ee8:	89 c6                	mov    esi,eax
c0015eea:	58                   	pop    eax
c0015eeb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015eed:	8d 54 24 20          	lea    edx,[esp+0x20]
c0015ef1:	52                   	push   edx
c0015ef2:	56                   	push   esi
c0015ef3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015ef7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015efb:	53                   	push   ebx
c0015efc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015eff:	83 c4 20             	add    esp,0x20
c0015f02:	85 c0                	test   eax,eax
c0015f04:	75 0a                	jne    c0015f10 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0015f06:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015f0a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0015f0e:	74 18                	je     c0015f28 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0015f10:	83 ec 0c             	sub    esp,0xc
c0015f13:	53                   	push   ebx
c0015f14:	e8 a1 78 ff ff       	call   c000d7ba <File::close()>
c0015f19:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f1b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015f1e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015f21:	83 c4 10             	add    esp,0x10
c0015f24:	31 c0                	xor    eax,eax
c0015f26:	eb 3b                	jmp    c0015f63 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0015f28:	83 ec 0c             	sub    esp,0xc
c0015f2b:	53                   	push   ebx
c0015f2c:	e8 89 78 ff ff       	call   c000d7ba <File::close()>
c0015f31:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f33:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015f36:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015f39:	83 c4 0c             	add    esp,0xc
c0015f3c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0015f43:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0015f4a:	56                   	push   esi
c0015f4b:	e8 70 fd ff ff       	call   c0015cc0 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0015f50:	89 34 24             	mov    DWORD PTR [esp],esi
c0015f53:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015f57:	e8 9b 3e ff ff       	call   c0009df7 <free>
c0015f5c:	83 c4 10             	add    esp,0x10
c0015f5f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015f63:	81 c4 20 01 00 00    	add    esp,0x120
c0015f69:	5b                   	pop    ebx
c0015f6a:	5e                   	pop    esi
c0015f6b:	5f                   	pop    edi
c0015f6c:	c3                   	ret    

c0015f6d <Reg::getLine(char*, char*, char*)>:
c0015f6d:	57                   	push   edi
c0015f6e:	56                   	push   esi
c0015f6f:	53                   	push   ebx
c0015f70:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015f74:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015f78:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015f7c:	57                   	push   edi
c0015f7d:	56                   	push   esi
c0015f7e:	53                   	push   ebx
c0015f7f:	68 b9 69 02 c0       	push   0xc00269b9
c0015f84:	e8 8f fe ff ff       	call   c0015e18 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015f89:	83 c4 10             	add    esp,0x10
c0015f8c:	84 c0                	test   al,al
c0015f8e:	75 10                	jne    c0015fa0 <Reg::getLine(char*, char*, char*)+0x33>
c0015f90:	57                   	push   edi
c0015f91:	56                   	push   esi
c0015f92:	53                   	push   ebx
c0015f93:	68 de 69 02 c0       	push   0xc00269de
c0015f98:	e8 7b fe ff ff       	call   c0015e18 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015f9d:	83 c4 10             	add    esp,0x10
c0015fa0:	5b                   	pop    ebx
c0015fa1:	5e                   	pop    esi
c0015fa2:	5f                   	pop    edi
c0015fa3:	c3                   	ret    

c0015fa4 <Reg::readInt(char*, char*, int*)>:
c0015fa4:	55                   	push   ebp
c0015fa5:	57                   	push   edi
c0015fa6:	56                   	push   esi
c0015fa7:	53                   	push   ebx
c0015fa8:	81 ec f0 00 00 00    	sub    esp,0xf0
c0015fae:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0015fb2:	57                   	push   edi
c0015fb3:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015fba:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015fc1:	e8 a7 ff ff ff       	call   c0015f6d <Reg::getLine(char*, char*, char*)>
c0015fc6:	83 c4 10             	add    esp,0x10
c0015fc9:	84 c0                	test   al,al
c0015fcb:	0f 84 b3 00 00 00    	je     c0016084 <Reg::readInt(char*, char*, int*)+0xe0>
c0015fd1:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0015fd5:	80 fa 2b             	cmp    dl,0x2b
c0015fd8:	74 0c                	je     c0015fe6 <Reg::readInt(char*, char*, int*)+0x42>
c0015fda:	80 fa 2d             	cmp    dl,0x2d
c0015fdd:	75 0e                	jne    c0015fed <Reg::readInt(char*, char*, int*)+0x49>
c0015fdf:	ba 01 00 00 00       	mov    edx,0x1
c0015fe4:	eb 0b                	jmp    c0015ff1 <Reg::readInt(char*, char*, int*)+0x4d>
c0015fe6:	ba 01 00 00 00       	mov    edx,0x1
c0015feb:	eb 02                	jmp    c0015fef <Reg::readInt(char*, char*, int*)+0x4b>
c0015fed:	31 d2                	xor    edx,edx
c0015fef:	31 c0                	xor    eax,eax
c0015ff1:	be 0a 00 00 00       	mov    esi,0xa
c0015ff6:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0015ffb:	75 20                	jne    c001601d <Reg::readInt(char*, char*, int*)+0x79>
c0015ffd:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0016001:	80 f9 78             	cmp    cl,0x78
c0016004:	75 0a                	jne    c0016010 <Reg::readInt(char*, char*, int*)+0x6c>
c0016006:	83 c2 02             	add    edx,0x2
c0016009:	be 10 00 00 00       	mov    esi,0x10
c001600e:	eb 0d                	jmp    c001601d <Reg::readInt(char*, char*, int*)+0x79>
c0016010:	80 f9 62             	cmp    cl,0x62
c0016013:	75 08                	jne    c001601d <Reg::readInt(char*, char*, int*)+0x79>
c0016015:	83 c2 02             	add    edx,0x2
c0016018:	be 02 00 00 00       	mov    esi,0x2
c001601d:	01 d7                	add    edi,edx
c001601f:	31 d2                	xor    edx,edx
c0016021:	8a 1f                	mov    bl,BYTE PTR [edi]
c0016023:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0016027:	80 fb 0d             	cmp    bl,0xd
c001602a:	0f 94 c3             	sete   bl
c001602d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0016032:	0f 94 c1             	sete   cl
c0016035:	08 cb                	or     bl,cl
c0016037:	75 3a                	jne    c0016073 <Reg::readInt(char*, char*, int*)+0xcf>
c0016039:	0f af d6             	imul   edx,esi
c001603c:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0016041:	83 fe 10             	cmp    esi,0x10
c0016044:	75 26                	jne    c001606c <Reg::readInt(char*, char*, int*)+0xc8>
c0016046:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001604a:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001604d:	89 e9                	mov    ecx,ebp
c001604f:	80 f9 05             	cmp    cl,0x5
c0016052:	77 06                	ja     c001605a <Reg::readInt(char*, char*, int*)+0xb6>
c0016054:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0016058:	eb 16                	jmp    c0016070 <Reg::readInt(char*, char*, int*)+0xcc>
c001605a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001605e:	83 e9 61             	sub    ecx,0x61
c0016061:	80 f9 05             	cmp    cl,0x5
c0016064:	77 06                	ja     c001606c <Reg::readInt(char*, char*, int*)+0xc8>
c0016066:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001606a:	eb 04                	jmp    c0016070 <Reg::readInt(char*, char*, int*)+0xcc>
c001606c:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0016070:	47                   	inc    edi
c0016071:	eb ae                	jmp    c0016021 <Reg::readInt(char*, char*, int*)+0x7d>
c0016073:	84 c0                	test   al,al
c0016075:	74 02                	je     c0016079 <Reg::readInt(char*, char*, int*)+0xd5>
c0016077:	f7 da                	neg    edx
c0016079:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0016080:	89 10                	mov    DWORD PTR [eax],edx
c0016082:	88 d8                	mov    al,bl
c0016084:	81 c4 ec 00 00 00    	add    esp,0xec
c001608a:	5b                   	pop    ebx
c001608b:	5e                   	pop    esi
c001608c:	5f                   	pop    edi
c001608d:	5d                   	pop    ebp
c001608e:	c3                   	ret    

c001608f <Reg::readString(char*, char*, char*, int)>:
c001608f:	57                   	push   edi
c0016090:	56                   	push   esi
c0016091:	53                   	push   ebx
c0016092:	81 ec d4 00 00 00    	sub    esp,0xd4
c0016098:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001609f:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c00160a3:	57                   	push   edi
c00160a4:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00160ab:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00160b2:	e8 b6 fe ff ff       	call   c0015f6d <Reg::getLine(char*, char*, char*)>
c00160b7:	83 c4 10             	add    esp,0x10
c00160ba:	89 c6                	mov    esi,eax
c00160bc:	84 c0                	test   al,al
c00160be:	74 44                	je     c0016104 <Reg::readString(char*, char*, char*, int)+0x75>
c00160c0:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00160c7:	31 c0                	xor    eax,eax
c00160c9:	4a                   	dec    edx
c00160ca:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00160cd:	84 c9                	test   cl,cl
c00160cf:	74 0f                	je     c00160e0 <Reg::readString(char*, char*, char*, int)+0x51>
c00160d1:	39 c2                	cmp    edx,eax
c00160d3:	7e 0b                	jle    c00160e0 <Reg::readString(char*, char*, char*, int)+0x51>
c00160d5:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00160d8:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00160dd:	40                   	inc    eax
c00160de:	eb ea                	jmp    c00160ca <Reg::readString(char*, char*, char*, int)+0x3b>
c00160e0:	83 ec 0c             	sub    esp,0xc
c00160e3:	53                   	push   ebx
c00160e4:	e8 c7 a5 fe ff       	call   c00006b0 <strlen>
c00160e9:	83 c4 10             	add    esp,0x10
c00160ec:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00160f1:	75 11                	jne    c0016104 <Reg::readString(char*, char*, char*, int)+0x75>
c00160f3:	83 ec 0c             	sub    esp,0xc
c00160f6:	53                   	push   ebx
c00160f7:	e8 b4 a5 fe ff       	call   c00006b0 <strlen>
c00160fc:	83 c4 10             	add    esp,0x10
c00160ff:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0016104:	81 c4 d0 00 00 00    	add    esp,0xd0
c001610a:	89 f0                	mov    eax,esi
c001610c:	5b                   	pop    ebx
c001610d:	5e                   	pop    esi
c001610e:	5f                   	pop    edi
c001610f:	c3                   	ret    

c0016110 <Reg::readBool(char*, char*, bool*)>:
c0016110:	83 ec 20             	sub    esp,0x20
c0016113:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016117:	50                   	push   eax
c0016118:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001611c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016120:	e8 7f fe ff ff       	call   c0015fa4 <Reg::readInt(char*, char*, int*)>
c0016125:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001612a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001612e:	0f 95 02             	setne  BYTE PTR [edx]
c0016131:	83 c4 2c             	add    esp,0x2c
c0016134:	c3                   	ret    

c0016135 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0016135:	53                   	push   ebx
c0016136:	83 ec 1c             	sub    esp,0x1c
c0016139:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001613d:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016141:	50                   	push   eax
c0016142:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016146:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001614a:	e8 c1 ff ff ff       	call   c0016110 <Reg::readBool(char*, char*, bool*)>
c001614f:	83 c4 10             	add    esp,0x10
c0016152:	84 c0                	test   al,al
c0016154:	74 04                	je     c001615a <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0016156:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001615a:	88 d8                	mov    al,bl
c001615c:	83 c4 18             	add    esp,0x18
c001615f:	5b                   	pop    ebx
c0016160:	c3                   	ret    

c0016161 <Reg::readIntWithDefault(char*, char*, int)>:
c0016161:	53                   	push   ebx
c0016162:	83 ec 1c             	sub    esp,0x1c
c0016165:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016169:	8d 44 24 10          	lea    eax,[esp+0x10]
c001616d:	50                   	push   eax
c001616e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016172:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016176:	e8 29 fe ff ff       	call   c0015fa4 <Reg::readInt(char*, char*, int*)>
c001617b:	83 c4 10             	add    esp,0x10
c001617e:	84 c0                	test   al,al
c0016180:	74 04                	je     c0016186 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0016182:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0016186:	89 d8                	mov    eax,ebx
c0016188:	83 c4 18             	add    esp,0x18
c001618b:	5b                   	pop    ebx
c001618c:	c3                   	ret    

c001618d <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001618d:	57                   	push   edi
c001618e:	56                   	push   esi
c001618f:	56                   	push   esi
c0016190:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0016194:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0016198:	56                   	push   esi
c0016199:	57                   	push   edi
c001619a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001619e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00161a2:	e8 e8 fe ff ff       	call   c001608f <Reg::readString(char*, char*, char*, int)>
c00161a7:	83 c4 10             	add    esp,0x10
c00161aa:	84 c0                	test   al,al
c00161ac:	75 1a                	jne    c00161c8 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c00161ae:	51                   	push   ecx
c00161af:	56                   	push   esi
c00161b0:	6a 00                	push   0x0
c00161b2:	57                   	push   edi
c00161b3:	e8 dc a4 fe ff       	call   c0000694 <memset>
c00161b8:	8d 4e ff             	lea    ecx,[esi-0x1]
c00161bb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00161bf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00161c1:	83 c4 10             	add    esp,0x10
c00161c4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00161c8:	89 f8                	mov    eax,edi
c00161ca:	5a                   	pop    edx
c00161cb:	5e                   	pop    esi
c00161cc:	5f                   	pop    edi
c00161cd:	c3                   	ret    

c00161ce <Sys::eject(regs*)>:
c00161ce:	83 ec 0c             	sub    esp,0xc
c00161d1:	83 ca ff             	or     edx,0xffffffff
c00161d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161d8:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00161db:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00161e0:	83 e9 41             	sub    ecx,0x41
c00161e3:	83 f9 19             	cmp    ecx,0x19
c00161e6:	77 18                	ja     c0016200 <Sys::eject(regs*)+0x32>
c00161e8:	8b 0c 8d c0 91 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6e40]
c00161ef:	85 c9                	test   ecx,ecx
c00161f1:	74 0d                	je     c0016200 <Sys::eject(regs*)+0x32>
c00161f3:	83 ec 0c             	sub    esp,0xc
c00161f6:	51                   	push   ecx
c00161f7:	e8 34 a8 ff ff       	call   c0010a30 <LogicalDisk::eject()>
c00161fc:	83 c4 10             	add    esp,0x10
c00161ff:	99                   	cdq    
c0016200:	83 c4 0c             	add    esp,0xc
c0016203:	c3                   	ret    

c0016204 <Sys::exit(regs*)>:
c0016204:	83 ec 18             	sub    esp,0x18
c0016207:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001620b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001620e:	e8 59 36 00 00       	call   c001986c <terminateTask(int)>
c0016213:	83 c8 ff             	or     eax,0xffffffff
c0016216:	83 c4 1c             	add    esp,0x1c
c0016219:	89 c2                	mov    edx,eax
c001621b:	c3                   	ret    

c001621c <Sys::getCwd(regs*)>:
c001621c:	83 ec 10             	sub    esp,0x10
c001621f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016223:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0016226:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0016229:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001622e:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016231:	e8 4e 72 ff ff       	call   c000d484 <Fs::getcwd(Process*, char*, int)>
c0016236:	83 c4 1c             	add    esp,0x1c
c0016239:	99                   	cdq    
c001623a:	c3                   	ret    

c001623b <Sys::getPID(regs*)>:
c001623b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016240:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016243:	8b 00                	mov    eax,DWORD PTR [eax]
c0016245:	99                   	cdq    
c0016246:	c3                   	ret    

c0016247 <Sys::getRAMData(regs*)>:
c0016247:	8b 0d 38 8c 02 c0    	mov    ecx,DWORD PTR ds:0xc0028c38
c001624d:	69 05 34 8c 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0028c34,0xc8
c0016257:	99                   	cdq    
c0016258:	f7 f9                	idiv   ecx
c001625a:	c1 e0 18             	shl    eax,0x18
c001625d:	09 c8                	or     eax,ecx
c001625f:	99                   	cdq    
c0016260:	c3                   	ret    

c0016261 <Sys::getVGAPtr(regs*)>:
c0016261:	55                   	push   ebp
c0016262:	57                   	push   edi
c0016263:	56                   	push   esi
c0016264:	53                   	push   ebx
c0016265:	83 ec 18             	sub    esp,0x18
c0016268:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001626c:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001626f:	e8 fc 30 00 00       	call   c0019370 <Thr::processFromPID(int)>
c0016274:	83 c4 10             	add    esp,0x10
c0016277:	89 c1                	mov    ecx,eax
c0016279:	b8 01 00 00 00       	mov    eax,0x1
c001627e:	85 c9                	test   ecx,ecx
c0016280:	74 59                	je     c00162db <Sys::getVGAPtr(regs*)+0x7a>
c0016282:	8b 99 06 05 00 00    	mov    ebx,DWORD PTR [ecx+0x506]
c0016288:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001628c:	74 0c                	je     c001629a <Sys::getVGAPtr(regs*)+0x39>
c001628e:	83 ec 0c             	sub    esp,0xc
c0016291:	53                   	push   ebx
c0016292:	e8 3e 4c ff ff       	call   c000aed5 <setActiveTerminal(VgaText*)>
c0016297:	83 c4 10             	add    esp,0x10
c001629a:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001629d:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c00162a0:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c00162a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00162a7:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00162aa:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00162ad:	81 c3 82 00 00 00    	add    ebx,0x82
c00162b3:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c00162b9:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00162bc:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c00162bf:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c00162c5:	50                   	push   eax
c00162c6:	50                   	push   eax
c00162c7:	53                   	push   ebx
c00162c8:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00162cb:	05 a8 0f 00 00       	add    eax,0xfa8
c00162d0:	50                   	push   eax
c00162d1:	e8 7a a4 fe ff       	call   c0000750 <strcpy>
c00162d6:	83 c4 10             	add    esp,0x10
c00162d9:	31 c0                	xor    eax,eax
c00162db:	83 c4 0c             	add    esp,0xc
c00162de:	31 d2                	xor    edx,edx
c00162e0:	5b                   	pop    ebx
c00162e1:	5e                   	pop    esi
c00162e2:	5f                   	pop    edi
c00162e3:	5d                   	pop    ebp
c00162e4:	c3                   	ret    

c00162e5 <Sys::loadDLL(regs*)>:
c00162e5:	56                   	push   esi
c00162e6:	53                   	push   ebx
c00162e7:	31 d2                	xor    edx,edx
c00162e9:	51                   	push   ecx
c00162ea:	b8 01 00 00 00       	mov    eax,0x1
c00162ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00162f3:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00162f7:	0f 84 8c 00 00 00    	je     c0016389 <Sys::loadDLL(regs*)+0xa4>
c00162fd:	83 ec 0c             	sub    esp,0xc
c0016300:	68 14 01 00 00       	push   0x114
c0016305:	e8 dd 3a ff ff       	call   c0009de7 <malloc>
c001630a:	83 c4 0c             	add    esp,0xc
c001630d:	89 c3                	mov    ebx,eax
c001630f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016314:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016317:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001631a:	53                   	push   ebx
c001631b:	e8 62 73 ff ff       	call   c000d682 <File::File(char const*, Process*)>
c0016320:	83 c4 10             	add    esp,0x10
c0016323:	31 d2                	xor    edx,edx
c0016325:	b8 02 00 00 00       	mov    eax,0x2
c001632a:	85 db                	test   ebx,ebx
c001632c:	74 5b                	je     c0016389 <Sys::loadDLL(regs*)+0xa4>
c001632e:	83 ec 0c             	sub    esp,0xc
c0016331:	53                   	push   ebx
c0016332:	e8 93 76 ff ff       	call   c000d9ca <File::exists()>
c0016337:	83 c4 10             	add    esp,0x10
c001633a:	84 c0                	test   al,al
c001633c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001633e:	75 11                	jne    c0016351 <Sys::loadDLL(regs*)+0x6c>
c0016340:	83 ec 0c             	sub    esp,0xc
c0016343:	53                   	push   ebx
c0016344:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016347:	83 c4 10             	add    esp,0x10
c001634a:	b8 03 00 00 00       	mov    eax,0x3
c001634f:	eb 36                	jmp    c0016387 <Sys::loadDLL(regs*)+0xa2>
c0016351:	83 ec 0c             	sub    esp,0xc
c0016354:	53                   	push   ebx
c0016355:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016358:	58                   	pop    eax
c0016359:	5a                   	pop    edx
c001635a:	6a 00                	push   0x0
c001635c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001635f:	e8 0a 22 00 00       	call   c001856e <Thr::loadDLL(char const*, bool)>
c0016364:	83 c4 10             	add    esp,0x10
c0016367:	89 c1                	mov    ecx,eax
c0016369:	31 d2                	xor    edx,edx
c001636b:	b8 04 00 00 00       	mov    eax,0x4
c0016370:	85 c9                	test   ecx,ecx
c0016372:	74 15                	je     c0016389 <Sys::loadDLL(regs*)+0xa4>
c0016374:	53                   	push   ebx
c0016375:	53                   	push   ebx
c0016376:	ff 35 08 8c 02 c0    	push   DWORD PTR ds:0xc0028c08
c001637c:	51                   	push   ecx
c001637d:	e8 1d 24 00 00       	call   c001879f <Thr::executeDLL(unsigned long, void*)>
c0016382:	83 c4 10             	add    esp,0x10
c0016385:	31 c0                	xor    eax,eax
c0016387:	31 d2                	xor    edx,edx
c0016389:	59                   	pop    ecx
c001638a:	5b                   	pop    ebx
c001638b:	5e                   	pop    esi
c001638c:	c3                   	ret    

c001638d <Sys::read(regs*)>:
c001638d:	57                   	push   edi
c001638e:	56                   	push   esi
c001638f:	53                   	push   ebx
c0016390:	83 ec 10             	sub    esp,0x10
c0016393:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016397:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001639a:	83 f8 02             	cmp    eax,0x2
c001639d:	77 10                	ja     c00163af <Sys::read(regs*)+0x22>
c001639f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163a4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00163a7:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00163ad:	eb 0e                	jmp    c00163bd <Sys::read(regs*)+0x30>
c00163af:	83 ec 0c             	sub    esp,0xc
c00163b2:	50                   	push   eax
c00163b3:	e8 93 58 ff ff       	call   c000bc4b <getFromFileDescriptor(int)>
c00163b8:	83 c4 10             	add    esp,0x10
c00163bb:	89 c1                	mov    ecx,eax
c00163bd:	83 c8 ff             	or     eax,0xffffffff
c00163c0:	85 c9                	test   ecx,ecx
c00163c2:	89 c2                	mov    edx,eax
c00163c4:	74 28                	je     c00163ee <Sys::read(regs*)+0x61>
c00163c6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00163ce:	31 ff                	xor    edi,edi
c00163d0:	83 ec 0c             	sub    esp,0xc
c00163d3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00163d5:	8d 54 24 18          	lea    edx,[esp+0x18]
c00163d9:	52                   	push   edx
c00163da:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00163dd:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00163e0:	57                   	push   edi
c00163e1:	56                   	push   esi
c00163e2:	51                   	push   ecx
c00163e3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00163e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00163ea:	83 c4 20             	add    esp,0x20
c00163ed:	99                   	cdq    
c00163ee:	83 c4 10             	add    esp,0x10
c00163f1:	5b                   	pop    ebx
c00163f2:	5e                   	pop    esi
c00163f3:	5f                   	pop    edi
c00163f4:	c3                   	ret    

c00163f5 <Sys::sbrk(regs*)>:
c00163f5:	56                   	push   esi
c00163f6:	53                   	push   ebx
c00163f7:	50                   	push   eax
c00163f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163fd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016401:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016404:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0016407:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c001640d:	85 db                	test   ebx,ebx
c001640f:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0016412:	74 02                	je     c0016416 <Sys::sbrk(regs*)+0x21>
c0016414:	79 06                	jns    c001641c <Sys::sbrk(regs*)+0x27>
c0016416:	89 f0                	mov    eax,esi
c0016418:	31 d2                	xor    edx,edx
c001641a:	eb 2a                	jmp    c0016446 <Sys::sbrk(regs*)+0x51>
c001641c:	83 c8 ff             	or     eax,0xffffffff
c001641f:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0016425:	89 c2                	mov    edx,eax
c0016427:	77 1d                	ja     c0016446 <Sys::sbrk(regs*)+0x51>
c0016429:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001642f:	50                   	push   eax
c0016430:	c1 ea 0c             	shr    edx,0xc
c0016433:	68 07 0c 00 00       	push   0xc07
c0016438:	52                   	push   edx
c0016439:	51                   	push   ecx
c001643a:	e8 cf 60 ff ff       	call   c000c50e <VAS::allocatePages(int, int)>
c001643f:	89 f0                	mov    eax,esi
c0016441:	31 d2                	xor    edx,edx
c0016443:	83 c4 10             	add    esp,0x10
c0016446:	59                   	pop    ecx
c0016447:	5b                   	pop    ebx
c0016448:	5e                   	pop    esi
c0016449:	c3                   	ret    

c001644a <Sys::setCwd(regs*)>:
c001644a:	83 ec 14             	sub    esp,0x14
c001644d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016451:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0016454:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016459:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001645c:	e8 08 76 ff ff       	call   c000da69 <Fs::setcwd(Process*, char*)>
c0016461:	83 c4 1c             	add    esp,0x1c
c0016464:	99                   	cdq    
c0016465:	c3                   	ret    

c0016466 <Sys::setTime(regs*)>:
c0016466:	55                   	push   ebp
c0016467:	31 c9                	xor    ecx,ecx
c0016469:	57                   	push   edi
c001646a:	bd 0c 00 00 00       	mov    ebp,0xc
c001646f:	56                   	push   esi
c0016470:	53                   	push   ebx
c0016471:	31 db                	xor    ebx,ebx
c0016473:	83 ec 10             	sub    esp,0x10
c0016476:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001647a:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001647d:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0016480:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0016483:	89 c2                	mov    edx,eax
c0016485:	66 81 ef 6c 07       	sub    di,0x76c
c001648a:	83 e2 1f             	and    edx,0x1f
c001648d:	c1 e7 10             	shl    edi,0x10
c0016490:	42                   	inc    edx
c0016491:	c1 e8 05             	shr    eax,0x5
c0016494:	88 d1                	mov    cl,dl
c0016496:	31 d2                	xor    edx,edx
c0016498:	f7 f5                	div    ebp
c001649a:	89 dd                	mov    ebp,ebx
c001649c:	88 d5                	mov    ch,dl
c001649e:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00164a4:	0f b7 c1             	movzx  eax,cx
c00164a7:	31 d2                	xor    edx,edx
c00164a9:	09 f8                	or     eax,edi
c00164ab:	bf 3c 00 00 00       	mov    edi,0x3c
c00164b0:	89 c1                	mov    ecx,eax
c00164b2:	89 f0                	mov    eax,esi
c00164b4:	f7 f7                	div    edi
c00164b6:	c1 e2 10             	shl    edx,0x10
c00164b9:	09 d5                	or     ebp,edx
c00164bb:	31 d2                	xor    edx,edx
c00164bd:	89 eb                	mov    ebx,ebp
c00164bf:	f7 f7                	div    edi
c00164c1:	bf 10 0e 00 00       	mov    edi,0xe10
c00164c6:	88 d7                	mov    bh,dl
c00164c8:	89 f0                	mov    eax,esi
c00164ca:	31 d2                	xor    edx,edx
c00164cc:	f7 f7                	div    edi
c00164ce:	bf 18 00 00 00       	mov    edi,0x18
c00164d3:	31 d2                	xor    edx,edx
c00164d5:	f7 f7                	div    edi
c00164d7:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c00164dc:	88 d3                	mov    bl,dl
c00164de:	53                   	push   ebx
c00164df:	51                   	push   ecx
c00164e0:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00164e6:	e8 7f 7e ff ff       	call   c000e36a <Clock::setTimeInDatetimeLocal(datetime_t)>
c00164eb:	83 c4 1c             	add    esp,0x1c
c00164ee:	83 f0 01             	xor    eax,0x1
c00164f1:	5b                   	pop    ebx
c00164f2:	0f b6 c0             	movzx  eax,al
c00164f5:	5e                   	pop    esi
c00164f6:	31 d2                	xor    edx,edx
c00164f8:	5f                   	pop    edi
c00164f9:	5d                   	pop    ebp
c00164fa:	c3                   	ret    

c00164fb <Sys::timezone(regs*)>:
c00164fb:	53                   	push   ebx
c00164fc:	83 ec 08             	sub    esp,0x8
c00164ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016503:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0016507:	75 17                	jne    c0016520 <Sys::timezone(regs*)+0x25>
c0016509:	83 ec 0c             	sub    esp,0xc
c001650c:	68 f9 69 02 c0       	push   0xc00269f9
c0016511:	e8 01 6c ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0016516:	83 c8 ff             	or     eax,0xffffffff
c0016519:	83 c4 10             	add    esp,0x10
c001651c:	89 c2                	mov    edx,eax
c001651e:	eb 20                	jmp    c0016540 <Sys::timezone(regs*)+0x45>
c0016520:	83 ec 0c             	sub    esp,0xc
c0016523:	68 0e 6a 02 c0       	push   0xc0026a0e
c0016528:	e8 ea 6b ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c001652d:	58                   	pop    eax
c001652e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016531:	e8 96 7b ff ff       	call   c000e0cc <User::loadClockSettings(int)>
c0016536:	83 c4 10             	add    esp,0x10
c0016539:	b8 01 00 00 00       	mov    eax,0x1
c001653e:	31 d2                	xor    edx,edx
c0016540:	83 c4 08             	add    esp,0x8
c0016543:	5b                   	pop    ebx
c0016544:	c3                   	ret    

c0016545 <Sys::write(regs*)>:
c0016545:	57                   	push   edi
c0016546:	56                   	push   esi
c0016547:	53                   	push   ebx
c0016548:	83 ec 10             	sub    esp,0x10
c001654b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001654f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016552:	83 f8 02             	cmp    eax,0x2
c0016555:	77 10                	ja     c0016567 <Sys::write(regs*)+0x22>
c0016557:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001655c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001655f:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0016565:	eb 0e                	jmp    c0016575 <Sys::write(regs*)+0x30>
c0016567:	83 ec 0c             	sub    esp,0xc
c001656a:	50                   	push   eax
c001656b:	e8 db 56 ff ff       	call   c000bc4b <getFromFileDescriptor(int)>
c0016570:	83 c4 10             	add    esp,0x10
c0016573:	89 c1                	mov    ecx,eax
c0016575:	83 c8 ff             	or     eax,0xffffffff
c0016578:	85 c9                	test   ecx,ecx
c001657a:	89 c2                	mov    edx,eax
c001657c:	74 28                	je     c00165a6 <Sys::write(regs*)+0x61>
c001657e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016586:	31 ff                	xor    edi,edi
c0016588:	83 ec 0c             	sub    esp,0xc
c001658b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001658d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0016591:	52                   	push   edx
c0016592:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016595:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0016598:	57                   	push   edi
c0016599:	56                   	push   esi
c001659a:	51                   	push   ecx
c001659b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001659e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00165a2:	83 c4 20             	add    esp,0x20
c00165a5:	99                   	cdq    
c00165a6:	83 c4 10             	add    esp,0x10
c00165a9:	5b                   	pop    ebx
c00165aa:	5e                   	pop    esi
c00165ab:	5f                   	pop    edi
c00165ac:	c3                   	ret    

c00165ad <Sys::wsbe(regs*)>:
c00165ad:	57                   	push   edi
c00165ae:	b9 0b 00 00 00       	mov    ecx,0xb
c00165b3:	56                   	push   esi
c00165b4:	be 4d 6a 02 c0       	mov    esi,0xc0026a4d
c00165b9:	53                   	push   ebx
c00165ba:	83 ec 30             	sub    esp,0x30
c00165bd:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00165c1:	fc                   	cld    
c00165c2:	83 ec 0c             	sub    esp,0xc
c00165c5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00165c7:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00165cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165d0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00165d3:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00165d9:	8b 06                	mov    eax,DWORD PTR [esi]
c00165db:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00165de:	57                   	push   edi
c00165df:	e8 cc a0 fe ff       	call   c00006b0 <strlen>
c00165e4:	5a                   	pop    edx
c00165e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00165e9:	52                   	push   edx
c00165ea:	31 d2                	xor    edx,edx
c00165ec:	57                   	push   edi
c00165ed:	52                   	push   edx
c00165ee:	50                   	push   eax
c00165ef:	56                   	push   esi
c00165f0:	ff d3                	call   ebx
c00165f2:	83 c4 14             	add    esp,0x14
c00165f5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00165f9:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00165fc:	e8 6b 32 00 00       	call   c001986c <terminateTask(int)>
c0016601:	83 c4 40             	add    esp,0x40
c0016604:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0016609:	5b                   	pop    ebx
c001660a:	31 d2                	xor    edx,edx
c001660c:	5e                   	pop    esi
c001660d:	5f                   	pop    edi
c001660e:	c3                   	ret    

c001660f <Sys::yield(regs*)>:
c001660f:	83 ec 0c             	sub    esp,0xc
c0016612:	fa                   	cli    
c0016613:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c0016619:	e8 36 29 00 00       	call   c0018f54 <schedule()>
c001661e:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c0016623:	48                   	dec    eax
c0016624:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c0016629:	75 01                	jne    c001662c <Sys::yield(regs*)+0x1d>
c001662b:	fb                   	sti    
c001662c:	8b 15 2c 92 02 c0    	mov    edx,DWORD PTR ds:0xc002922c
c0016632:	83 c4 0c             	add    esp,0xc
c0016635:	89 d0                	mov    eax,edx
c0016637:	c1 ea 11             	shr    edx,0x11
c001663a:	c1 e0 07             	shl    eax,0x7
c001663d:	25 80 30 0f 00       	and    eax,0xf3080
c0016642:	31 d0                	xor    eax,edx
c0016644:	31 d2                	xor    edx,edx
c0016646:	c3                   	ret    

c0016647 <sysCallSeekDir(regs*)>:
c0016647:	31 c0                	xor    eax,eax
c0016649:	31 d2                	xor    edx,edx
c001664b:	c3                   	ret    

c001664c <sysCallTellDir(regs*)>:
c001664c:	31 c0                	xor    eax,eax
c001664e:	31 d2                	xor    edx,edx
c0016650:	c3                   	ret    

c0016651 <sysCallVerify(regs*)>:
c0016651:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016655:	31 d2                	xor    edx,edx
c0016657:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001665a:	c3                   	ret    

c001665b <sysCallGetArgc(regs*)>:
c001665b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016660:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016663:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0016669:	99                   	cdq    
c001666a:	c3                   	ret    

c001666b <sysFormatDisk(regs*)>:
c001666b:	56                   	push   esi
c001666c:	53                   	push   ebx
c001666d:	53                   	push   ebx
c001666e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016672:	8b 1d 38 8d 02 c0    	mov    ebx,DWORD PTR ds:0xc0028d38
c0016678:	eb 25                	jmp    c001669f <sysFormatDisk(regs*)+0x34>
c001667a:	83 ec 0c             	sub    esp,0xc
c001667d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0016680:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016682:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0016685:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0016688:	50                   	push   eax
c0016689:	ff 34 85 c0 91 02 c0 	push   DWORD PTR [eax*4-0x3ffd6e40]
c0016690:	53                   	push   ebx
c0016691:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0016694:	83 c4 20             	add    esp,0x20
c0016697:	83 f8 08             	cmp    eax,0x8
c001669a:	75 12                	jne    c00166ae <sysFormatDisk(regs*)+0x43>
c001669c:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001669f:	85 db                	test   ebx,ebx
c00166a1:	75 d7                	jne    c001667a <sysFormatDisk(regs*)+0xf>
c00166a3:	59                   	pop    ecx
c00166a4:	b8 03 00 00 00       	mov    eax,0x3
c00166a9:	31 d2                	xor    edx,edx
c00166ab:	5b                   	pop    ebx
c00166ac:	5e                   	pop    esi
c00166ad:	c3                   	ret    
c00166ae:	85 c0                	test   eax,eax
c00166b0:	74 1b                	je     c00166cd <sysFormatDisk(regs*)+0x62>
c00166b2:	83 f8 09             	cmp    eax,0x9
c00166b5:	74 0b                	je     c00166c2 <sysFormatDisk(regs*)+0x57>
c00166b7:	59                   	pop    ecx
c00166b8:	b8 02 00 00 00       	mov    eax,0x2
c00166bd:	31 d2                	xor    edx,edx
c00166bf:	5b                   	pop    ebx
c00166c0:	5e                   	pop    esi
c00166c1:	c3                   	ret    
c00166c2:	59                   	pop    ecx
c00166c3:	b8 01 00 00 00       	mov    eax,0x1
c00166c8:	31 d2                	xor    edx,edx
c00166ca:	5b                   	pop    ebx
c00166cb:	5e                   	pop    esi
c00166cc:	c3                   	ret    
c00166cd:	59                   	pop    ecx
c00166ce:	31 c0                	xor    eax,eax
c00166d0:	31 d2                	xor    edx,edx
c00166d2:	5b                   	pop    ebx
c00166d3:	5e                   	pop    esi
c00166d4:	c3                   	ret    

c00166d5 <sysSetDiskVolumeLabel(regs*)>:
c00166d5:	56                   	push   esi
c00166d6:	53                   	push   ebx
c00166d7:	53                   	push   ebx
c00166d8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00166dc:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00166df:	83 f8 19             	cmp    eax,0x19
c00166e2:	77 2d                	ja     c0016711 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00166e4:	8b 0c 85 c0 91 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6e40]
c00166eb:	85 c9                	test   ecx,ecx
c00166ed:	74 22                	je     c0016711 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00166ef:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00166f2:	85 db                	test   ebx,ebx
c00166f4:	74 1b                	je     c0016711 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00166f6:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c00166fc:	85 d2                	test   edx,edx
c00166fe:	74 11                	je     c0016711 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0016700:	8b 32                	mov    esi,DWORD PTR [edx]
c0016702:	53                   	push   ebx
c0016703:	50                   	push   eax
c0016704:	51                   	push   ecx
c0016705:	52                   	push   edx
c0016706:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0016709:	83 c4 10             	add    esp,0x10
c001670c:	99                   	cdq    
c001670d:	59                   	pop    ecx
c001670e:	5b                   	pop    ebx
c001670f:	5e                   	pop    esi
c0016710:	c3                   	ret    
c0016711:	59                   	pop    ecx
c0016712:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0016717:	ba ff ff ff ff       	mov    edx,0xffffffff
c001671c:	5b                   	pop    ebx
c001671d:	5e                   	pop    esi
c001671e:	c3                   	ret    

c001671f <sysGetDiskVolumeLabel(regs*)>:
c001671f:	57                   	push   edi
c0016720:	56                   	push   esi
c0016721:	53                   	push   ebx
c0016722:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016726:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016729:	83 fa 19             	cmp    edx,0x19
c001672c:	77 38                	ja     c0016766 <sysGetDiskVolumeLabel(regs*)+0x47>
c001672e:	8b 0c 95 c0 91 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd6e40]
c0016735:	85 c9                	test   ecx,ecx
c0016737:	74 2d                	je     c0016766 <sysGetDiskVolumeLabel(regs*)+0x47>
c0016739:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001673c:	85 db                	test   ebx,ebx
c001673e:	74 26                	je     c0016766 <sysGetDiskVolumeLabel(regs*)+0x47>
c0016740:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0016743:	85 f6                	test   esi,esi
c0016745:	74 1f                	je     c0016766 <sysGetDiskVolumeLabel(regs*)+0x47>
c0016747:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c001674d:	85 c0                	test   eax,eax
c001674f:	74 15                	je     c0016766 <sysGetDiskVolumeLabel(regs*)+0x47>
c0016751:	83 ec 0c             	sub    esp,0xc
c0016754:	8b 38                	mov    edi,DWORD PTR [eax]
c0016756:	56                   	push   esi
c0016757:	53                   	push   ebx
c0016758:	52                   	push   edx
c0016759:	51                   	push   ecx
c001675a:	50                   	push   eax
c001675b:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001675e:	83 c4 20             	add    esp,0x20
c0016761:	99                   	cdq    
c0016762:	5b                   	pop    ebx
c0016763:	5e                   	pop    esi
c0016764:	5f                   	pop    edi
c0016765:	c3                   	ret    
c0016766:	5b                   	pop    ebx
c0016767:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001676c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016771:	5e                   	pop    esi
c0016772:	5f                   	pop    edi
c0016773:	c3                   	ret    

c0016774 <sysShutdown(regs*)>:
c0016774:	83 ec 0c             	sub    esp,0xc
c0016777:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001677b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001677e:	85 c0                	test   eax,eax
c0016780:	74 18                	je     c001679a <sysShutdown(regs*)+0x26>
c0016782:	83 f8 01             	cmp    eax,0x1
c0016785:	74 38                	je     c00167bf <sysShutdown(regs*)+0x4b>
c0016787:	83 f8 02             	cmp    eax,0x2
c001678a:	74 24                	je     c00167b0 <sysShutdown(regs*)+0x3c>
c001678c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016791:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016796:	83 c4 0c             	add    esp,0xc
c0016799:	c3                   	ret    
c001679a:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c001679f:	8b 10                	mov    edx,DWORD PTR [eax]
c00167a1:	6a 00                	push   0x0
c00167a3:	6a 00                	push   0x0
c00167a5:	6a 00                	push   0x0
c00167a7:	50                   	push   eax
c00167a8:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00167ab:	83 c4 10             	add    esp,0x10
c00167ae:	eb dc                	jmp    c001678c <sysShutdown(regs*)+0x18>
c00167b0:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c00167b5:	8b 10                	mov    edx,DWORD PTR [eax]
c00167b7:	6a 00                	push   0x0
c00167b9:	6a 00                	push   0x0
c00167bb:	6a 01                	push   0x1
c00167bd:	eb e8                	jmp    c00167a7 <sysShutdown(regs*)+0x33>
c00167bf:	a1 40 92 02 c0       	mov    eax,ds:0xc0029240
c00167c4:	85 c0                	test   eax,eax
c00167c6:	74 02                	je     c00167ca <sysShutdown(regs*)+0x56>
c00167c8:	ff d0                	call   eax
c00167ca:	31 c0                	xor    eax,eax
c00167cc:	31 d2                	xor    edx,edx
c00167ce:	83 c4 0c             	add    esp,0xc
c00167d1:	c3                   	ret    

c00167d2 <sysCallRealpath(regs*)>:
c00167d2:	83 ec 0c             	sub    esp,0xc
c00167d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167d9:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00167dc:	85 d2                	test   edx,edx
c00167de:	74 07                	je     c00167e7 <sysCallRealpath(regs*)+0x15>
c00167e0:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00167e3:	85 c0                	test   eax,eax
c00167e5:	75 0b                	jne    c00167f2 <sysCallRealpath(regs*)+0x20>
c00167e7:	b8 01 00 00 00       	mov    eax,0x1
c00167ec:	31 d2                	xor    edx,edx
c00167ee:	83 c4 0c             	add    esp,0xc
c00167f1:	c3                   	ret    
c00167f2:	51                   	push   ecx
c00167f3:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00167f9:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00167fc:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0016802:	51                   	push   ecx
c0016803:	52                   	push   edx
c0016804:	50                   	push   eax
c0016805:	e8 ce 6c ff ff       	call   c000d4d8 <Fs::standardiseFiles(char*, char const*, char const*)>
c001680a:	83 c4 10             	add    esp,0x10
c001680d:	31 c0                	xor    eax,eax
c001680f:	31 d2                	xor    edx,edx
c0016811:	83 c4 0c             	add    esp,0xc
c0016814:	c3                   	ret    

c0016815 <sysCallReadDir(regs*)>:
c0016815:	53                   	push   ebx
c0016816:	83 ec 18             	sub    esp,0x18
c0016819:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001681d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0016820:	83 f8 02             	cmp    eax,0x2
c0016823:	76 60                	jbe    c0016885 <sysCallReadDir(regs*)+0x70>
c0016825:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001682c:	77 48                	ja     c0016876 <sysCallReadDir(regs*)+0x61>
c001682e:	83 ec 0c             	sub    esp,0xc
c0016831:	50                   	push   eax
c0016832:	e8 14 54 ff ff       	call   c000bc4b <getFromFileDescriptor(int)>
c0016837:	83 c4 10             	add    esp,0x10
c001683a:	85 c0                	test   eax,eax
c001683c:	74 38                	je     c0016876 <sysCallReadDir(regs*)+0x61>
c001683e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016846:	83 ec 0c             	sub    esp,0xc
c0016849:	8b 10                	mov    edx,DWORD PTR [eax]
c001684b:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001684f:	51                   	push   ecx
c0016850:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016853:	6a 00                	push   0x0
c0016855:	68 10 01 00 00       	push   0x110
c001685a:	50                   	push   eax
c001685b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001685e:	83 c4 20             	add    esp,0x20
c0016861:	85 c0                	test   eax,eax
c0016863:	74 29                	je     c001688e <sysCallReadDir(regs*)+0x79>
c0016865:	83 f8 07             	cmp    eax,0x7
c0016868:	74 1b                	je     c0016885 <sysCallReadDir(regs*)+0x70>
c001686a:	b8 02 00 00 00       	mov    eax,0x2
c001686f:	31 d2                	xor    edx,edx
c0016871:	83 c4 18             	add    esp,0x18
c0016874:	5b                   	pop    ebx
c0016875:	c3                   	ret    
c0016876:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001687b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016880:	83 c4 18             	add    esp,0x18
c0016883:	5b                   	pop    ebx
c0016884:	c3                   	ret    
c0016885:	b8 01 00 00 00       	mov    eax,0x1
c001688a:	31 d2                	xor    edx,edx
c001688c:	eb e3                	jmp    c0016871 <sysCallReadDir(regs*)+0x5c>
c001688e:	31 c0                	xor    eax,eax
c0016890:	31 d2                	xor    edx,edx
c0016892:	eb dd                	jmp    c0016871 <sysCallReadDir(regs*)+0x5c>

c0016894 <sysCallIsATTY(regs*)>:
c0016894:	83 ec 0c             	sub    esp,0xc
c0016897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001689b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001689e:	83 f8 02             	cmp    eax,0x2
c00168a1:	76 07                	jbe    c00168aa <sysCallIsATTY(regs*)+0x16>
c00168a3:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00168a8:	75 26                	jne    c00168d0 <sysCallIsATTY(regs*)+0x3c>
c00168aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00168af:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00168b2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00168b8:	85 c0                	test   eax,eax
c00168ba:	74 24                	je     c00168e0 <sysCallIsATTY(regs*)+0x4c>
c00168bc:	83 ec 0c             	sub    esp,0xc
c00168bf:	8b 10                	mov    edx,DWORD PTR [eax]
c00168c1:	50                   	push   eax
c00168c2:	ff 12                	call   DWORD PTR [edx]
c00168c4:	31 d2                	xor    edx,edx
c00168c6:	0f b6 c0             	movzx  eax,al
c00168c9:	83 c4 10             	add    esp,0x10
c00168cc:	83 c4 0c             	add    esp,0xc
c00168cf:	c3                   	ret    
c00168d0:	83 ec 0c             	sub    esp,0xc
c00168d3:	50                   	push   eax
c00168d4:	e8 72 53 ff ff       	call   c000bc4b <getFromFileDescriptor(int)>
c00168d9:	83 c4 10             	add    esp,0x10
c00168dc:	85 c0                	test   eax,eax
c00168de:	75 dc                	jne    c00168bc <sysCallIsATTY(regs*)+0x28>
c00168e0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00168e5:	ba ff ff ff ff       	mov    edx,0xffffffff
c00168ea:	83 c4 0c             	add    esp,0xc
c00168ed:	c3                   	ret    

c00168ee <sysCallSeek(regs*)>:
c00168ee:	53                   	push   ebx
c00168ef:	83 ec 08             	sub    esp,0x8
c00168f2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00168f6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00168f9:	8d 50 fd             	lea    edx,[eax-0x3]
c00168fc:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0016902:	77 32                	ja     c0016936 <sysCallSeek(regs*)+0x48>
c0016904:	83 ec 0c             	sub    esp,0xc
c0016907:	50                   	push   eax
c0016908:	e8 3e 53 ff ff       	call   c000bc4b <getFromFileDescriptor(int)>
c001690d:	83 c4 0c             	add    esp,0xc
c0016910:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0016913:	31 db                	xor    ebx,ebx
c0016915:	53                   	push   ebx
c0016916:	51                   	push   ecx
c0016917:	50                   	push   eax
c0016918:	e8 fd 6e ff ff       	call   c000d81a <File::seek(unsigned long long)>
c001691d:	83 c4 10             	add    esp,0x10
c0016920:	85 c0                	test   eax,eax
c0016922:	0f 95 c0             	setne  al
c0016925:	31 d2                	xor    edx,edx
c0016927:	0f b6 c0             	movzx  eax,al
c001692a:	f7 d8                	neg    eax
c001692c:	83 d2 00             	adc    edx,0x0
c001692f:	83 c4 08             	add    esp,0x8
c0016932:	f7 da                	neg    edx
c0016934:	5b                   	pop    ebx
c0016935:	c3                   	ret    
c0016936:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001693b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016940:	83 c4 08             	add    esp,0x8
c0016943:	5b                   	pop    ebx
c0016944:	c3                   	ret    

c0016945 <sysCallTell(regs*)>:
c0016945:	53                   	push   ebx
c0016946:	83 ec 08             	sub    esp,0x8
c0016949:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001694d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016950:	83 f8 02             	cmp    eax,0x2
c0016953:	76 4d                	jbe    c00169a2 <sysCallTell(regs*)+0x5d>
c0016955:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001695a:	76 19                	jbe    c0016975 <sysCallTell(regs*)+0x30>
c001695c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001695f:	31 d2                	xor    edx,edx
c0016961:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0016967:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001696e:	31 c0                	xor    eax,eax
c0016970:	83 c4 08             	add    esp,0x8
c0016973:	5b                   	pop    ebx
c0016974:	c3                   	ret    
c0016975:	83 ec 0c             	sub    esp,0xc
c0016978:	50                   	push   eax
c0016979:	e8 cd 52 ff ff       	call   c000bc4b <getFromFileDescriptor(int)>
c001697e:	5a                   	pop    edx
c001697f:	59                   	pop    ecx
c0016980:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016983:	50                   	push   eax
c0016984:	e8 e7 6e ff ff       	call   c000d870 <File::tell(unsigned long long*)>
c0016989:	83 c4 10             	add    esp,0x10
c001698c:	85 c0                	test   eax,eax
c001698e:	0f 95 c0             	setne  al
c0016991:	31 d2                	xor    edx,edx
c0016993:	0f b6 c0             	movzx  eax,al
c0016996:	f7 d8                	neg    eax
c0016998:	83 d2 00             	adc    edx,0x0
c001699b:	83 c4 08             	add    esp,0x8
c001699e:	f7 da                	neg    edx
c00169a0:	5b                   	pop    ebx
c00169a1:	c3                   	ret    
c00169a2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00169a7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00169ac:	83 c4 08             	add    esp,0x8
c00169af:	5b                   	pop    ebx
c00169b0:	c3                   	ret    

c00169b1 <sysCallSize(regs*)>:
c00169b1:	53                   	push   ebx
c00169b2:	83 ec 18             	sub    esp,0x18
c00169b5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00169b9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00169bc:	83 f8 02             	cmp    eax,0x2
c00169bf:	76 53                	jbe    c0016a14 <sysCallSize(regs*)+0x63>
c00169c1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00169c6:	76 19                	jbe    c00169e1 <sysCallSize(regs*)+0x30>
c00169c8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00169cb:	31 d2                	xor    edx,edx
c00169cd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00169d3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00169da:	31 c0                	xor    eax,eax
c00169dc:	83 c4 18             	add    esp,0x18
c00169df:	5b                   	pop    ebx
c00169e0:	c3                   	ret    
c00169e1:	83 ec 0c             	sub    esp,0xc
c00169e4:	50                   	push   eax
c00169e5:	e8 61 52 ff ff       	call   c000bc4b <getFromFileDescriptor(int)>
c00169ea:	83 c4 0c             	add    esp,0xc
c00169ed:	8d 54 24 13          	lea    edx,[esp+0x13]
c00169f1:	52                   	push   edx
c00169f2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00169f5:	50                   	push   eax
c00169f6:	e8 0d 70 ff ff       	call   c000da08 <File::stat(unsigned long long*, bool*)>
c00169fb:	83 c4 10             	add    esp,0x10
c00169fe:	85 c0                	test   eax,eax
c0016a00:	0f 95 c0             	setne  al
c0016a03:	31 d2                	xor    edx,edx
c0016a05:	0f b6 c0             	movzx  eax,al
c0016a08:	f7 d8                	neg    eax
c0016a0a:	83 d2 00             	adc    edx,0x0
c0016a0d:	83 c4 18             	add    esp,0x18
c0016a10:	f7 da                	neg    edx
c0016a12:	5b                   	pop    ebx
c0016a13:	c3                   	ret    
c0016a14:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016a19:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016a1e:	83 c4 18             	add    esp,0x18
c0016a21:	5b                   	pop    ebx
c0016a22:	c3                   	ret    

c0016a23 <sysCallSizeFromFilename(regs*)>:
c0016a23:	57                   	push   edi
c0016a24:	56                   	push   esi
c0016a25:	53                   	push   ebx
c0016a26:	83 ec 20             	sub    esp,0x20
c0016a29:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016a2d:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0016a30:	83 fb 02             	cmp    ebx,0x2
c0016a33:	0f 86 88 00 00 00    	jbe    c0016ac1 <sysCallSizeFromFilename(regs*)+0x9e>
c0016a39:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0016a3f:	76 1b                	jbe    c0016a5c <sysCallSizeFromFilename(regs*)+0x39>
c0016a41:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0016a44:	31 d2                	xor    edx,edx
c0016a46:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0016a4c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016a53:	83 c4 20             	add    esp,0x20
c0016a56:	31 c0                	xor    eax,eax
c0016a58:	5b                   	pop    ebx
c0016a59:	5e                   	pop    esi
c0016a5a:	5f                   	pop    edi
c0016a5b:	c3                   	ret    
c0016a5c:	83 ec 0c             	sub    esp,0xc
c0016a5f:	68 14 01 00 00       	push   0x114
c0016a64:	e8 7e 33 ff ff       	call   c0009de7 <malloc>
c0016a69:	83 c4 0c             	add    esp,0xc
c0016a6c:	89 c7                	mov    edi,eax
c0016a6e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a73:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016a76:	53                   	push   ebx
c0016a77:	57                   	push   edi
c0016a78:	e8 05 6c ff ff       	call   c000d682 <File::File(char const*, Process*)>
c0016a7d:	83 c4 0c             	add    esp,0xc
c0016a80:	8d 44 24 23          	lea    eax,[esp+0x23]
c0016a84:	50                   	push   eax
c0016a85:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0016a88:	57                   	push   edi
c0016a89:	e8 7a 6f ff ff       	call   c000da08 <File::stat(unsigned long long*, bool*)>
c0016a8e:	83 c4 10             	add    esp,0x10
c0016a91:	85 ff                	test   edi,edi
c0016a93:	74 14                	je     c0016aa9 <sysCallSizeFromFilename(regs*)+0x86>
c0016a95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016a99:	8b 17                	mov    edx,DWORD PTR [edi]
c0016a9b:	83 ec 0c             	sub    esp,0xc
c0016a9e:	57                   	push   edi
c0016a9f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0016aa2:	83 c4 10             	add    esp,0x10
c0016aa5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016aa9:	85 c0                	test   eax,eax
c0016aab:	0f 95 c0             	setne  al
c0016aae:	31 d2                	xor    edx,edx
c0016ab0:	0f b6 c0             	movzx  eax,al
c0016ab3:	f7 d8                	neg    eax
c0016ab5:	83 d2 00             	adc    edx,0x0
c0016ab8:	83 c4 20             	add    esp,0x20
c0016abb:	f7 da                	neg    edx
c0016abd:	5b                   	pop    ebx
c0016abe:	5e                   	pop    esi
c0016abf:	5f                   	pop    edi
c0016ac0:	c3                   	ret    
c0016ac1:	83 c4 20             	add    esp,0x20
c0016ac4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016ac9:	5b                   	pop    ebx
c0016aca:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016acf:	5e                   	pop    esi
c0016ad0:	5f                   	pop    edi
c0016ad1:	c3                   	ret    

c0016ad2 <sysCallClose(regs*)>:
c0016ad2:	53                   	push   ebx
c0016ad3:	83 ec 08             	sub    esp,0x8
c0016ad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ada:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016add:	83 f8 02             	cmp    eax,0x2
c0016ae0:	76 41                	jbe    c0016b23 <sysCallClose(regs*)+0x51>
c0016ae2:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0016ae8:	83 fa 01             	cmp    edx,0x1
c0016aeb:	76 2d                	jbe    c0016b1a <sysCallClose(regs*)+0x48>
c0016aed:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016af2:	77 2f                	ja     c0016b23 <sysCallClose(regs*)+0x51>
c0016af4:	83 ec 0c             	sub    esp,0xc
c0016af7:	50                   	push   eax
c0016af8:	e8 4e 51 ff ff       	call   c000bc4b <getFromFileDescriptor(int)>
c0016afd:	89 c3                	mov    ebx,eax
c0016aff:	89 04 24             	mov    DWORD PTR [esp],eax
c0016b02:	e8 b3 6c ff ff       	call   c000d7ba <File::close()>
c0016b07:	83 c4 10             	add    esp,0x10
c0016b0a:	85 db                	test   ebx,ebx
c0016b0c:	74 0c                	je     c0016b1a <sysCallClose(regs*)+0x48>
c0016b0e:	83 ec 0c             	sub    esp,0xc
c0016b11:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b13:	53                   	push   ebx
c0016b14:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016b17:	83 c4 10             	add    esp,0x10
c0016b1a:	31 c0                	xor    eax,eax
c0016b1c:	31 d2                	xor    edx,edx
c0016b1e:	83 c4 08             	add    esp,0x8
c0016b21:	5b                   	pop    ebx
c0016b22:	c3                   	ret    
c0016b23:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016b28:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016b2d:	83 c4 08             	add    esp,0x8
c0016b30:	5b                   	pop    ebx
c0016b31:	c3                   	ret    

c0016b32 <sysCallOpenDir(regs*)>:
c0016b32:	56                   	push   esi
c0016b33:	53                   	push   ebx
c0016b34:	53                   	push   ebx
c0016b35:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016b39:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0016b3c:	85 f6                	test   esi,esi
c0016b3e:	74 59                	je     c0016b99 <sysCallOpenDir(regs*)+0x67>
c0016b40:	83 ec 0c             	sub    esp,0xc
c0016b43:	68 14 01 00 00       	push   0x114
c0016b48:	e8 9a 32 ff ff       	call   c0009de7 <malloc>
c0016b4d:	83 c4 0c             	add    esp,0xc
c0016b50:	89 c6                	mov    esi,eax
c0016b52:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b57:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016b5a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016b5d:	56                   	push   esi
c0016b5e:	e8 7f 70 ff ff       	call   c000dbe2 <Directory::Directory(char const*, Process*)>
c0016b63:	83 c4 10             	add    esp,0x10
c0016b66:	85 f6                	test   esi,esi
c0016b68:	74 2f                	je     c0016b99 <sysCallOpenDir(regs*)+0x67>
c0016b6a:	83 ec 0c             	sub    esp,0xc
c0016b6d:	56                   	push   esi
c0016b6e:	e8 49 71 ff ff       	call   c000dcbc <Directory::open()>
c0016b73:	83 c4 10             	add    esp,0x10
c0016b76:	85 c0                	test   eax,eax
c0016b78:	75 1f                	jne    c0016b99 <sysCallOpenDir(regs*)+0x67>
c0016b7a:	83 ec 0c             	sub    esp,0xc
c0016b7d:	56                   	push   esi
c0016b7e:	e8 d3 4d ff ff       	call   c000b956 <UnixFile::getFileDescriptor()>
c0016b83:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016b86:	83 c4 10             	add    esp,0x10
c0016b89:	89 02                	mov    DWORD PTR [edx],eax
c0016b8b:	c1 f8 1f             	sar    eax,0x1f
c0016b8e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016b91:	31 c0                	xor    eax,eax
c0016b93:	59                   	pop    ecx
c0016b94:	31 d2                	xor    edx,edx
c0016b96:	5b                   	pop    ebx
c0016b97:	5e                   	pop    esi
c0016b98:	c3                   	ret    
c0016b99:	59                   	pop    ecx
c0016b9a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016b9f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016ba4:	5b                   	pop    ebx
c0016ba5:	5e                   	pop    esi
c0016ba6:	c3                   	ret    

c0016ba7 <sysCallCloseDir(regs*)>:
c0016ba7:	53                   	push   ebx
c0016ba8:	83 ec 08             	sub    esp,0x8
c0016bab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016baf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016bb2:	8d 50 fd             	lea    edx,[eax-0x3]
c0016bb5:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0016bbb:	77 2f                	ja     c0016bec <sysCallCloseDir(regs*)+0x45>
c0016bbd:	83 ec 0c             	sub    esp,0xc
c0016bc0:	50                   	push   eax
c0016bc1:	e8 85 50 ff ff       	call   c000bc4b <getFromFileDescriptor(int)>
c0016bc6:	89 c3                	mov    ebx,eax
c0016bc8:	89 04 24             	mov    DWORD PTR [esp],eax
c0016bcb:	e8 48 71 ff ff       	call   c000dd18 <Directory::close()>
c0016bd0:	83 c4 10             	add    esp,0x10
c0016bd3:	85 db                	test   ebx,ebx
c0016bd5:	74 0c                	je     c0016be3 <sysCallCloseDir(regs*)+0x3c>
c0016bd7:	83 ec 0c             	sub    esp,0xc
c0016bda:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016bdc:	53                   	push   ebx
c0016bdd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016be0:	83 c4 10             	add    esp,0x10
c0016be3:	31 c0                	xor    eax,eax
c0016be5:	31 d2                	xor    edx,edx
c0016be7:	83 c4 08             	add    esp,0x8
c0016bea:	5b                   	pop    ebx
c0016beb:	c3                   	ret    
c0016bec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016bf1:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016bf6:	83 c4 08             	add    esp,0x8
c0016bf9:	5b                   	pop    ebx
c0016bfa:	c3                   	ret    

c0016bfb <sysCallMakeDir(regs*)>:
c0016bfb:	56                   	push   esi
c0016bfc:	53                   	push   ebx
c0016bfd:	83 ec 10             	sub    esp,0x10
c0016c00:	68 14 01 00 00       	push   0x114
c0016c05:	e8 dd 31 ff ff       	call   c0009de7 <malloc>
c0016c0a:	83 c4 0c             	add    esp,0xc
c0016c0d:	89 c3                	mov    ebx,eax
c0016c0f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c14:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016c17:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c1b:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016c1e:	53                   	push   ebx
c0016c1f:	e8 be 6f ff ff       	call   c000dbe2 <Directory::Directory(char const*, Process*)>
c0016c24:	83 c4 10             	add    esp,0x10
c0016c27:	85 db                	test   ebx,ebx
c0016c29:	74 32                	je     c0016c5d <sysCallMakeDir(regs*)+0x62>
c0016c2b:	83 ec 0c             	sub    esp,0xc
c0016c2e:	53                   	push   ebx
c0016c2f:	e8 68 72 ff ff       	call   c000de9c <Directory::create()>
c0016c34:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016c37:	89 c6                	mov    esi,eax
c0016c39:	e8 da 70 ff ff       	call   c000dd18 <Directory::close()>
c0016c3e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016c40:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016c43:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016c46:	83 c4 10             	add    esp,0x10
c0016c49:	31 c0                	xor    eax,eax
c0016c4b:	59                   	pop    ecx
c0016c4c:	85 f6                	test   esi,esi
c0016c4e:	5b                   	pop    ebx
c0016c4f:	0f 95 c0             	setne  al
c0016c52:	5e                   	pop    esi
c0016c53:	31 d2                	xor    edx,edx
c0016c55:	f7 d8                	neg    eax
c0016c57:	83 d2 00             	adc    edx,0x0
c0016c5a:	f7 da                	neg    edx
c0016c5c:	c3                   	ret    
c0016c5d:	59                   	pop    ecx
c0016c5e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016c63:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016c68:	5b                   	pop    ebx
c0016c69:	5e                   	pop    esi
c0016c6a:	c3                   	ret    

c0016c6b <sysCallWait(regs*)>:
c0016c6b:	83 ec 10             	sub    esp,0x10
c0016c6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016c72:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0016c75:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016c78:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0016c7b:	e8 fc 24 00 00       	call   c001917c <waitTask(int, int*, int)>
c0016c80:	83 c4 1c             	add    esp,0x1c
c0016c83:	99                   	cdq    
c0016c84:	c3                   	ret    

c0016c85 <sysCallNotImpl(regs*)>:
c0016c85:	83 ec 18             	sub    esp,0x18
c0016c88:	68 79 6a 02 c0       	push   0xc0026a79
c0016c8d:	e8 67 e5 ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c0016c92:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016c97:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016c9c:	83 c4 1c             	add    esp,0x1c
c0016c9f:	c3                   	ret    

c0016ca0 <sysPanic(regs*)>:
c0016ca0:	83 ec 18             	sub    esp,0x18
c0016ca3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016ca7:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016caa:	e8 4a e5 ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c0016caf:	b8 01 00 00 00       	mov    eax,0x1
c0016cb4:	31 d2                	xor    edx,edx
c0016cb6:	83 c4 1c             	add    esp,0x1c
c0016cb9:	c3                   	ret    

c0016cba <sysCallRmdir(regs*)>:
c0016cba:	56                   	push   esi
c0016cbb:	53                   	push   ebx
c0016cbc:	83 ec 20             	sub    esp,0x20
c0016cbf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016cc3:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016cc6:	68 14 01 00 00       	push   0x114
c0016ccb:	e8 17 31 ff ff       	call   c0009de7 <malloc>
c0016cd0:	83 c4 0c             	add    esp,0xc
c0016cd3:	89 c3                	mov    ebx,eax
c0016cd5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016cda:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016cdd:	56                   	push   esi
c0016cde:	53                   	push   ebx
c0016cdf:	e8 9e 69 ff ff       	call   c000d682 <File::File(char const*, Process*)>
c0016ce4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016ce7:	e8 e8 6b ff ff       	call   c000d8d4 <File::unlink()>
c0016cec:	83 c4 10             	add    esp,0x10
c0016cef:	85 db                	test   ebx,ebx
c0016cf1:	74 14                	je     c0016d07 <sysCallRmdir(regs*)+0x4d>
c0016cf3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016cf7:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016cf9:	83 ec 0c             	sub    esp,0xc
c0016cfc:	53                   	push   ebx
c0016cfd:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0016d00:	83 c4 10             	add    esp,0x10
c0016d03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016d07:	85 c0                	test   eax,eax
c0016d09:	0f 95 c0             	setne  al
c0016d0c:	31 d2                	xor    edx,edx
c0016d0e:	0f b6 c0             	movzx  eax,al
c0016d11:	f7 d8                	neg    eax
c0016d13:	83 d2 00             	adc    edx,0x0
c0016d16:	83 c4 14             	add    esp,0x14
c0016d19:	f7 da                	neg    edx
c0016d1b:	5b                   	pop    ebx
c0016d1c:	5e                   	pop    esi
c0016d1d:	c3                   	ret    

c0016d1e <sysCallUnlink(regs*)>:
c0016d1e:	56                   	push   esi
c0016d1f:	53                   	push   ebx
c0016d20:	83 ec 20             	sub    esp,0x20
c0016d23:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016d27:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016d2a:	68 14 01 00 00       	push   0x114
c0016d2f:	e8 b3 30 ff ff       	call   c0009de7 <malloc>
c0016d34:	83 c4 0c             	add    esp,0xc
c0016d37:	89 c3                	mov    ebx,eax
c0016d39:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d3e:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016d41:	56                   	push   esi
c0016d42:	53                   	push   ebx
c0016d43:	e8 3a 69 ff ff       	call   c000d682 <File::File(char const*, Process*)>
c0016d48:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016d4b:	e8 84 6b ff ff       	call   c000d8d4 <File::unlink()>
c0016d50:	83 c4 10             	add    esp,0x10
c0016d53:	85 db                	test   ebx,ebx
c0016d55:	74 14                	je     c0016d6b <sysCallUnlink(regs*)+0x4d>
c0016d57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d5b:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016d5d:	83 ec 0c             	sub    esp,0xc
c0016d60:	53                   	push   ebx
c0016d61:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0016d64:	83 c4 10             	add    esp,0x10
c0016d67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016d6b:	85 c0                	test   eax,eax
c0016d6d:	0f 95 c0             	setne  al
c0016d70:	31 d2                	xor    edx,edx
c0016d72:	0f b6 c0             	movzx  eax,al
c0016d75:	f7 d8                	neg    eax
c0016d77:	83 d2 00             	adc    edx,0x0
c0016d7a:	83 c4 14             	add    esp,0x14
c0016d7d:	f7 da                	neg    edx
c0016d7f:	5b                   	pop    ebx
c0016d80:	5e                   	pop    esi
c0016d81:	c3                   	ret    

c0016d82 <sysCallGetArgv(regs*)>:
c0016d82:	83 ec 0c             	sub    esp,0xc
c0016d85:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016d89:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0016d8c:	85 c0                	test   eax,eax
c0016d8e:	78 2b                	js     c0016dbb <sysCallGetArgv(regs*)+0x39>
c0016d90:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016d96:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0016d99:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0016d9f:	7d 1a                	jge    c0016dbb <sysCallGetArgv(regs*)+0x39>
c0016da1:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0016da8:	85 c0                	test   eax,eax
c0016daa:	74 17                	je     c0016dc3 <sysCallGetArgv(regs*)+0x41>
c0016dac:	83 ec 08             	sub    esp,0x8
c0016daf:	50                   	push   eax
c0016db0:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0016db3:	e8 98 99 fe ff       	call   c0000750 <strcpy>
c0016db8:	83 c4 10             	add    esp,0x10
c0016dbb:	31 c0                	xor    eax,eax
c0016dbd:	31 d2                	xor    edx,edx
c0016dbf:	83 c4 0c             	add    esp,0xc
c0016dc2:	c3                   	ret    
c0016dc3:	b8 01 00 00 00       	mov    eax,0x1
c0016dc8:	31 d2                	xor    edx,edx
c0016dca:	83 c4 0c             	add    esp,0xc
c0016dcd:	c3                   	ret    

c0016dce <sysCallTTYName(regs*)>:
c0016dce:	56                   	push   esi
c0016dcf:	53                   	push   ebx
c0016dd0:	53                   	push   ebx
c0016dd1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016dd5:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0016dd8:	85 c0                	test   eax,eax
c0016dda:	74 5f                	je     c0016e3b <sysCallTTYName(regs*)+0x6d>
c0016ddc:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0016ddf:	83 f8 02             	cmp    eax,0x2
c0016de2:	77 3e                	ja     c0016e22 <sysCallTTYName(regs*)+0x54>
c0016de4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016de9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016dec:	8b 98 06 05 00 00    	mov    ebx,DWORD PTR [eax+0x506]
c0016df2:	85 db                	test   ebx,ebx
c0016df4:	74 45                	je     c0016e3b <sysCallTTYName(regs*)+0x6d>
c0016df6:	83 ec 0c             	sub    esp,0xc
c0016df9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016dfb:	53                   	push   ebx
c0016dfc:	ff 10                	call   DWORD PTR [eax]
c0016dfe:	83 c4 10             	add    esp,0x10
c0016e01:	84 c0                	test   al,al
c0016e03:	74 41                	je     c0016e46 <sysCallTTYName(regs*)+0x78>
c0016e05:	83 ec 08             	sub    esp,0x8
c0016e08:	81 c3 82 00 00 00    	add    ebx,0x82
c0016e0e:	53                   	push   ebx
c0016e0f:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0016e12:	e8 39 99 fe ff       	call   c0000750 <strcpy>
c0016e17:	83 c4 10             	add    esp,0x10
c0016e1a:	31 c0                	xor    eax,eax
c0016e1c:	59                   	pop    ecx
c0016e1d:	31 d2                	xor    edx,edx
c0016e1f:	5b                   	pop    ebx
c0016e20:	5e                   	pop    esi
c0016e21:	c3                   	ret    
c0016e22:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016e27:	74 bb                	je     c0016de4 <sysCallTTYName(regs*)+0x16>
c0016e29:	83 ec 0c             	sub    esp,0xc
c0016e2c:	50                   	push   eax
c0016e2d:	e8 19 4e ff ff       	call   c000bc4b <getFromFileDescriptor(int)>
c0016e32:	83 c4 10             	add    esp,0x10
c0016e35:	89 c3                	mov    ebx,eax
c0016e37:	85 db                	test   ebx,ebx
c0016e39:	75 bb                	jne    c0016df6 <sysCallTTYName(regs*)+0x28>
c0016e3b:	59                   	pop    ecx
c0016e3c:	b8 01 00 00 00       	mov    eax,0x1
c0016e41:	31 d2                	xor    edx,edx
c0016e43:	5b                   	pop    ebx
c0016e44:	5e                   	pop    esi
c0016e45:	c3                   	ret    
c0016e46:	59                   	pop    ecx
c0016e47:	b8 02 00 00 00       	mov    eax,0x2
c0016e4c:	31 d2                	xor    edx,edx
c0016e4e:	5b                   	pop    ebx
c0016e4f:	5e                   	pop    esi
c0016e50:	c3                   	ret    

c0016e51 <sysCallUSleep(regs*)>:
c0016e51:	83 ec 1c             	sub    esp,0x1c
c0016e54:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016e58:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016e5b:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0016e5e:	6a 00                	push   0x0
c0016e60:	6a 64                	push   0x64
c0016e62:	52                   	push   edx
c0016e63:	50                   	push   eax
c0016e64:	e8 77 c1 00 00       	call   c0022fe0 <__udivdi3>
c0016e69:	83 c4 14             	add    esp,0x14
c0016e6c:	50                   	push   eax
c0016e6d:	e8 da 23 00 00       	call   c001924c <milliTenthSleep(unsigned int)>
c0016e72:	31 c0                	xor    eax,eax
c0016e74:	31 d2                	xor    edx,edx
c0016e76:	83 c4 1c             	add    esp,0x1c
c0016e79:	c3                   	ret    

c0016e7a <sysCallSpawn(regs*)>:
c0016e7a:	56                   	push   esi
c0016e7b:	53                   	push   ebx
c0016e7c:	50                   	push   eax
c0016e7d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016e81:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016e84:	85 c0                	test   eax,eax
c0016e86:	75 08                	jne    c0016e90 <sysCallSpawn(regs*)+0x16>
c0016e88:	59                   	pop    ecx
c0016e89:	31 c0                	xor    eax,eax
c0016e8b:	31 d2                	xor    edx,edx
c0016e8d:	5b                   	pop    ebx
c0016e8e:	5e                   	pop    esi
c0016e8f:	c3                   	ret    
c0016e90:	83 ec 0c             	sub    esp,0xc
c0016e93:	68 1f 07 00 00       	push   0x71f
c0016e98:	e8 4a 2f ff ff       	call   c0009de7 <malloc>
c0016e9d:	83 c4 10             	add    esp,0x10
c0016ea0:	89 c6                	mov    esi,eax
c0016ea2:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0016ea5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016ea8:	85 c0                	test   eax,eax
c0016eaa:	75 32                	jne    c0016ede <sysCallSpawn(regs*)+0x64>
c0016eac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016eb1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016eb4:	52                   	push   edx
c0016eb5:	50                   	push   eax
c0016eb6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016eb9:	56                   	push   esi
c0016eba:	e8 85 1a 00 00       	call   c0018944 <Process::Process(char const*, Process*, char**)>
c0016ebf:	83 c4 10             	add    esp,0x10
c0016ec2:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0016ec9:	75 bd                	jne    c0016e88 <sysCallSpawn(regs*)+0xe>
c0016ecb:	83 ec 0c             	sub    esp,0xc
c0016ece:	56                   	push   esi
c0016ecf:	e8 5c 1f 00 00       	call   c0018e30 <Process::createUserThread()>
c0016ed4:	8b 06                	mov    eax,DWORD PTR [esi]
c0016ed6:	83 c4 10             	add    esp,0x10
c0016ed9:	99                   	cdq    
c0016eda:	59                   	pop    ecx
c0016edb:	5b                   	pop    ebx
c0016edc:	5e                   	pop    esi
c0016edd:	c3                   	ret    
c0016ede:	31 c0                	xor    eax,eax
c0016ee0:	eb d2                	jmp    c0016eb4 <sysCallSpawn(regs*)+0x3a>

c0016ee2 <sysCallGetEnv(regs*)>:
c0016ee2:	57                   	push   edi
c0016ee3:	56                   	push   esi
c0016ee4:	53                   	push   ebx
c0016ee5:	83 ec 1c             	sub    esp,0x1c
c0016ee8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016eec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ef1:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0016ef4:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0016ef7:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016efa:	e8 46 e2 ff ff       	call   c0015145 <Krnl::getProcessTotalEnvCount(Process*)>
c0016eff:	83 c4 10             	add    esp,0x10
c0016f02:	39 c7                	cmp    edi,eax
c0016f04:	7c 14                	jl     c0016f1a <sysCallGetEnv(regs*)+0x38>
c0016f06:	85 f6                	test   esi,esi
c0016f08:	75 0b                	jne    c0016f15 <sysCallGetEnv(regs*)+0x33>
c0016f0a:	83 c4 10             	add    esp,0x10
c0016f0d:	31 c0                	xor    eax,eax
c0016f0f:	5b                   	pop    ebx
c0016f10:	31 d2                	xor    edx,edx
c0016f12:	5e                   	pop    esi
c0016f13:	5f                   	pop    edi
c0016f14:	c3                   	ret    
c0016f15:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0016f18:	eb f0                	jmp    c0016f0a <sysCallGetEnv(regs*)+0x28>
c0016f1a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016f1e:	52                   	push   edx
c0016f1f:	57                   	push   edi
c0016f20:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016f26:	ff 72 3c             	push   DWORD PTR [edx+0x3c]
c0016f29:	50                   	push   eax
c0016f2a:	e8 36 e2 ff ff       	call   c0015165 <Krnl::getProcessEnvPair(Process*, int)>
c0016f2f:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0016f32:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016f36:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0016f3a:	83 c4 0c             	add    esp,0xc
c0016f3d:	85 c9                	test   ecx,ecx
c0016f3f:	75 23                	jne    c0016f64 <sysCallGetEnv(regs*)+0x82>
c0016f41:	83 ec 0c             	sub    esp,0xc
c0016f44:	50                   	push   eax
c0016f45:	e8 66 97 fe ff       	call   c00006b0 <strlen>
c0016f4a:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016f4d:	89 c3                	mov    ebx,eax
c0016f4f:	e8 5c 97 fe ff       	call   c00006b0 <strlen>
c0016f54:	83 c4 10             	add    esp,0x10
c0016f57:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0016f5b:	83 c4 10             	add    esp,0x10
c0016f5e:	31 d2                	xor    edx,edx
c0016f60:	5b                   	pop    ebx
c0016f61:	5e                   	pop    esi
c0016f62:	5f                   	pop    edi
c0016f63:	c3                   	ret    
c0016f64:	83 ec 08             	sub    esp,0x8
c0016f67:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0016f6a:	50                   	push   eax
c0016f6b:	56                   	push   esi
c0016f6c:	e8 df 97 fe ff       	call   c0000750 <strcpy>
c0016f71:	58                   	pop    eax
c0016f72:	5a                   	pop    edx
c0016f73:	68 93 6a 02 c0       	push   0xc0026a93
c0016f78:	56                   	push   esi
c0016f79:	e8 12 99 fe ff       	call   c0000890 <strcat>
c0016f7e:	59                   	pop    ecx
c0016f7f:	5b                   	pop    ebx
c0016f80:	57                   	push   edi
c0016f81:	56                   	push   esi
c0016f82:	e8 09 99 fe ff       	call   c0000890 <strcat>
c0016f87:	83 c4 10             	add    esp,0x10
c0016f8a:	e9 7b ff ff ff       	jmp    c0016f0a <sysCallGetEnv(regs*)+0x28>

c0016f8f <sysAppSettings(regs*)>:
c0016f8f:	57                   	push   edi
c0016f90:	56                   	push   esi
c0016f91:	56                   	push   esi
c0016f92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f96:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016f99:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c0016f9f:	25 e0 1f 00 00       	and    eax,0x1fe0
c0016fa4:	66 3d c0 09          	cmp    ax,0x9c0
c0016fa8:	75 2e                	jne    c0016fd8 <sysAppSettings(regs*)+0x49>
c0016faa:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c0016fb0:	83 e0 1f             	and    eax,0x1f
c0016fb3:	3c 01                	cmp    al,0x1
c0016fb5:	74 2c                	je     c0016fe3 <sysAppSettings(regs*)+0x54>
c0016fb7:	3c 07                	cmp    al,0x7
c0016fb9:	0f 84 b3 00 00 00    	je     c0017072 <sysAppSettings(regs*)+0xe3>
c0016fbf:	84 c0                	test   al,al
c0016fc1:	0f 84 d2 00 00 00    	je     c0017099 <sysAppSettings(regs*)+0x10a>
c0016fc7:	3c 08                	cmp    al,0x8
c0016fc9:	74 63                	je     c001702e <sysAppSettings(regs*)+0x9f>
c0016fcb:	59                   	pop    ecx
c0016fcc:	0f b6 c0             	movzx  eax,al
c0016fcf:	5e                   	pop    esi
c0016fd0:	05 e8 03 00 00       	add    eax,0x3e8
c0016fd5:	5f                   	pop    edi
c0016fd6:	99                   	cdq    
c0016fd7:	c3                   	ret    
c0016fd8:	b8 01 00 00 00       	mov    eax,0x1
c0016fdd:	59                   	pop    ecx
c0016fde:	31 d2                	xor    edx,edx
c0016fe0:	5e                   	pop    esi
c0016fe1:	5f                   	pop    edi
c0016fe2:	c3                   	ret    
c0016fe3:	50                   	push   eax
c0016fe4:	68 00 01 00 00       	push   0x100
c0016fe9:	6a 00                	push   0x0
c0016feb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ff0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016ff3:	83 c0 0c             	add    eax,0xc
c0016ff6:	50                   	push   eax
c0016ff7:	e8 98 96 fe ff       	call   c0000694 <memset>
c0016ffc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017001:	b9 ff 00 00 00       	mov    ecx,0xff
c0017006:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c0017009:	83 c7 0c             	add    edi,0xc
c001700c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001700e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017013:	5a                   	pop    edx
c0017014:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017017:	59                   	pop    ecx
c0017018:	8d 50 0c             	lea    edx,[eax+0xc]
c001701b:	52                   	push   edx
c001701c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0017022:	e8 4d 3d ff ff       	call   c000ad74 <VgaText::setTitle(char*)>
c0017027:	83 c4 10             	add    esp,0x10
c001702a:	31 c0                	xor    eax,eax
c001702c:	eb af                	jmp    c0016fdd <sysAppSettings(regs*)+0x4e>
c001702e:	83 ec 08             	sub    esp,0x8
c0017031:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0017037:	83 e0 0f             	and    eax,0xf
c001703a:	50                   	push   eax
c001703b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017040:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017043:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0017049:	e8 16 3d ff ff       	call   c000ad64 <VgaText::setTitleColour(VgaColour)>
c001704e:	5f                   	pop    edi
c001704f:	58                   	pop    eax
c0017050:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0017056:	c1 e8 04             	shr    eax,0x4
c0017059:	83 e0 0f             	and    eax,0xf
c001705c:	50                   	push   eax
c001705d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017062:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017065:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001706b:	e8 e4 3c ff ff       	call   c000ad54 <VgaText::setTitleTextColour(VgaColour)>
c0017070:	eb b5                	jmp    c0017027 <sysAppSettings(regs*)+0x98>
c0017072:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017077:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001707a:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0017080:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c0017086:	c0 e8 06             	shr    al,0x6
c0017089:	83 e0 01             	and    eax,0x1
c001708c:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c0017092:	31 c0                	xor    eax,eax
c0017094:	e9 44 ff ff ff       	jmp    c0016fdd <sysAppSettings(regs*)+0x4e>
c0017099:	b8 02 00 00 00       	mov    eax,0x2
c001709e:	e9 3a ff ff ff       	jmp    c0016fdd <sysAppSettings(regs*)+0x4e>

c00170a3 <sysSetFatAttrib(regs*)>:
c00170a3:	57                   	push   edi
c00170a4:	56                   	push   esi
c00170a5:	53                   	push   ebx
c00170a6:	83 ec 1c             	sub    esp,0x1c
c00170a9:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00170ad:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00170b0:	68 14 01 00 00       	push   0x114
c00170b5:	e8 2d 2d ff ff       	call   c0009de7 <malloc>
c00170ba:	83 c4 0c             	add    esp,0xc
c00170bd:	89 c3                	mov    ebx,eax
c00170bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00170c4:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00170c7:	57                   	push   edi
c00170c8:	53                   	push   ebx
c00170c9:	e8 b4 65 ff ff       	call   c000d682 <File::File(char const*, Process*)>
c00170ce:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00170d1:	83 c4 0c             	add    esp,0xc
c00170d4:	0f b6 d4             	movzx  edx,ah
c00170d7:	0f b6 c0             	movzx  eax,al
c00170da:	52                   	push   edx
c00170db:	50                   	push   eax
c00170dc:	53                   	push   ebx
c00170dd:	e8 8c 68 ff ff       	call   c000d96e <File::chfatattr(unsigned char, unsigned char)>
c00170e2:	83 c4 10             	add    esp,0x10
c00170e5:	85 db                	test   ebx,ebx
c00170e7:	74 14                	je     c00170fd <sysSetFatAttrib(regs*)+0x5a>
c00170e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00170ed:	8b 13                	mov    edx,DWORD PTR [ebx]
c00170ef:	83 ec 0c             	sub    esp,0xc
c00170f2:	53                   	push   ebx
c00170f3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00170f6:	83 c4 10             	add    esp,0x10
c00170f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00170fd:	85 c0                	test   eax,eax
c00170ff:	0f 95 c0             	setne  al
c0017102:	31 d2                	xor    edx,edx
c0017104:	0f b6 c0             	movzx  eax,al
c0017107:	f7 d8                	neg    eax
c0017109:	83 d2 00             	adc    edx,0x0
c001710c:	83 c4 10             	add    esp,0x10
c001710f:	f7 da                	neg    edx
c0017111:	5b                   	pop    ebx
c0017112:	5e                   	pop    esi
c0017113:	5f                   	pop    edi
c0017114:	c3                   	ret    

c0017115 <sysPipe(regs*)>:
c0017115:	57                   	push   edi
c0017116:	56                   	push   esi
c0017117:	53                   	push   ebx
c0017118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001711c:	83 ec 0c             	sub    esp,0xc
c001711f:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0017122:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0017125:	6a 20                	push   0x20
c0017127:	e8 bb 2c ff ff       	call   c0009de7 <malloc>
c001712c:	89 c3                	mov    ebx,eax
c001712e:	58                   	pop    eax
c001712f:	5a                   	pop    edx
c0017130:	68 00 50 00 00       	push   0x5000
c0017135:	53                   	push   ebx
c0017136:	e8 b1 39 ff ff       	call   c000aaec <Pipe::Pipe(int)>
c001713b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001713e:	e8 13 48 ff ff       	call   c000b956 <UnixFile::getFileDescriptor()>
c0017143:	89 07                	mov    DWORD PTR [edi],eax
c0017145:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017148:	e8 09 48 ff ff       	call   c000b956 <UnixFile::getFileDescriptor()>
c001714d:	83 c4 10             	add    esp,0x10
c0017150:	89 06                	mov    DWORD PTR [esi],eax
c0017152:	31 d2                	xor    edx,edx
c0017154:	5b                   	pop    ebx
c0017155:	31 c0                	xor    eax,eax
c0017157:	5e                   	pop    esi
c0017158:	5f                   	pop    edi
c0017159:	c3                   	ret    

c001715a <sysGetUnixTime(regs*)>:
c001715a:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c001715f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017165:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017169:	e9 34 70 ff ff       	jmp    c000e1a2 <Clock::timeInSecondsLocal()>

c001716e <string_ends_with(char const*, char const*)>:
c001716e:	57                   	push   edi
c001716f:	56                   	push   esi
c0017170:	53                   	push   ebx
c0017171:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017175:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017179:	83 ec 0c             	sub    esp,0xc
c001717c:	53                   	push   ebx
c001717d:	e8 2e 95 fe ff       	call   c00006b0 <strlen>
c0017182:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017185:	89 c6                	mov    esi,eax
c0017187:	e8 24 95 fe ff       	call   c00006b0 <strlen>
c001718c:	83 c4 10             	add    esp,0x10
c001718f:	39 c6                	cmp    esi,eax
c0017191:	7d 06                	jge    c0017199 <string_ends_with(char const*, char const*)+0x2b>
c0017193:	5b                   	pop    ebx
c0017194:	31 c0                	xor    eax,eax
c0017196:	5e                   	pop    esi
c0017197:	5f                   	pop    edi
c0017198:	c3                   	ret    
c0017199:	83 ec 08             	sub    esp,0x8
c001719c:	29 c6                	sub    esi,eax
c001719e:	57                   	push   edi
c001719f:	01 f3                	add    ebx,esi
c00171a1:	53                   	push   ebx
c00171a2:	e8 35 96 fe ff       	call   c00007dc <strcmp>
c00171a7:	83 c4 10             	add    esp,0x10
c00171aa:	85 c0                	test   eax,eax
c00171ac:	5b                   	pop    ebx
c00171ad:	0f 94 c0             	sete   al
c00171b0:	5e                   	pop    esi
c00171b1:	0f b6 c0             	movzx  eax,al
c00171b4:	5f                   	pop    edi
c00171b5:	c3                   	ret    

c00171b6 <sysCallOpen(regs*)>:
c00171b6:	56                   	push   esi
c00171b7:	53                   	push   ebx
c00171b8:	81 ec 04 01 00 00    	sub    esp,0x104
c00171be:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00171c5:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00171c8:	85 c9                	test   ecx,ecx
c00171ca:	0f 84 ad 01 00 00    	je     c001737d <sysCallOpen(regs*)+0x1c7>
c00171d0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00171d3:	85 c0                	test   eax,eax
c00171d5:	0f 84 a2 01 00 00    	je     c001737d <sysCallOpen(regs*)+0x1c7>
c00171db:	52                   	push   edx
c00171dc:	68 95 6a 02 c0       	push   0xc0026a95
c00171e1:	50                   	push   eax
c00171e2:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00171e6:	56                   	push   esi
c00171e7:	e8 ec 62 ff ff       	call   c000d4d8 <Fs::standardiseFiles(char*, char const*, char const*)>
c00171ec:	89 34 24             	mov    DWORD PTR [esp],esi
c00171ef:	e8 bc 94 fe ff       	call   c00006b0 <strlen>
c00171f4:	83 c4 10             	add    esp,0x10
c00171f7:	48                   	dec    eax
c00171f8:	74 1d                	je     c0017217 <sysCallOpen(regs*)+0x61>
c00171fa:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c00171fd:	eb 0f                	jmp    c001720e <sysCallOpen(regs*)+0x58>
c00171ff:	80 fa 3a             	cmp    dl,0x3a
c0017202:	74 0f                	je     c0017213 <sysCallOpen(regs*)+0x5d>
c0017204:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0017208:	48                   	dec    eax
c0017209:	74 0c                	je     c0017217 <sysCallOpen(regs*)+0x61>
c001720b:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001720e:	80 fa 2e             	cmp    dl,0x2e
c0017211:	75 ec                	jne    c00171ff <sysCallOpen(regs*)+0x49>
c0017213:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0017217:	83 ec 08             	sub    esp,0x8
c001721a:	68 99 6a 02 c0       	push   0xc0026a99
c001721f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0017222:	e8 47 ff ff ff       	call   c001716e <string_ends_with(char const*, char const*)>
c0017227:	83 c4 10             	add    esp,0x10
c001722a:	85 c0                	test   eax,eax
c001722c:	74 1d                	je     c001724b <sysCallOpen(regs*)+0x95>
c001722e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0017231:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0017237:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001723e:	81 c4 04 01 00 00    	add    esp,0x104
c0017244:	31 c0                	xor    eax,eax
c0017246:	31 d2                	xor    edx,edx
c0017248:	5b                   	pop    ebx
c0017249:	5e                   	pop    esi
c001724a:	c3                   	ret    
c001724b:	83 ec 08             	sub    esp,0x8
c001724e:	68 9e 6a 02 c0       	push   0xc0026a9e
c0017253:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0017256:	e8 13 ff ff ff       	call   c001716e <string_ends_with(char const*, char const*)>
c001725b:	83 c4 10             	add    esp,0x10
c001725e:	85 c0                	test   eax,eax
c0017260:	75 cc                	jne    c001722e <sysCallOpen(regs*)+0x78>
c0017262:	83 ec 08             	sub    esp,0x8
c0017265:	68 9a 6a 02 c0       	push   0xc0026a9a
c001726a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001726d:	e8 6a 95 fe ff       	call   c00007dc <strcmp>
c0017272:	83 c4 10             	add    esp,0x10
c0017275:	85 c0                	test   eax,eax
c0017277:	74 b5                	je     c001722e <sysCallOpen(regs*)+0x78>
c0017279:	83 ec 08             	sub    esp,0x8
c001727c:	68 99 6a 02 c0       	push   0xc0026a99
c0017281:	56                   	push   esi
c0017282:	e8 e7 fe ff ff       	call   c001716e <string_ends_with(char const*, char const*)>
c0017287:	83 c4 10             	add    esp,0x10
c001728a:	85 c0                	test   eax,eax
c001728c:	75 a0                	jne    c001722e <sysCallOpen(regs*)+0x78>
c001728e:	83 ec 08             	sub    esp,0x8
c0017291:	68 a3 6a 02 c0       	push   0xc0026aa3
c0017296:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0017299:	e8 d0 fe ff ff       	call   c001716e <string_ends_with(char const*, char const*)>
c001729e:	83 c4 10             	add    esp,0x10
c00172a1:	85 c0                	test   eax,eax
c00172a3:	0f 85 e7 00 00 00    	jne    c0017390 <sysCallOpen(regs*)+0x1da>
c00172a9:	83 ec 08             	sub    esp,0x8
c00172ac:	68 a8 6a 02 c0       	push   0xc0026aa8
c00172b1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00172b4:	e8 b5 fe ff ff       	call   c001716e <string_ends_with(char const*, char const*)>
c00172b9:	83 c4 10             	add    esp,0x10
c00172bc:	85 c0                	test   eax,eax
c00172be:	0f 85 cc 00 00 00    	jne    c0017390 <sysCallOpen(regs*)+0x1da>
c00172c4:	83 ec 08             	sub    esp,0x8
c00172c7:	68 a4 6a 02 c0       	push   0xc0026aa4
c00172cc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00172cf:	e8 08 95 fe ff       	call   c00007dc <strcmp>
c00172d4:	83 c4 10             	add    esp,0x10
c00172d7:	85 c0                	test   eax,eax
c00172d9:	0f 84 b1 00 00 00    	je     c0017390 <sysCallOpen(regs*)+0x1da>
c00172df:	83 ec 08             	sub    esp,0x8
c00172e2:	68 a3 6a 02 c0       	push   0xc0026aa3
c00172e7:	56                   	push   esi
c00172e8:	e8 81 fe ff ff       	call   c001716e <string_ends_with(char const*, char const*)>
c00172ed:	83 c4 10             	add    esp,0x10
c00172f0:	85 c0                	test   eax,eax
c00172f2:	0f 85 98 00 00 00    	jne    c0017390 <sysCallOpen(regs*)+0x1da>
c00172f8:	83 ec 0c             	sub    esp,0xc
c00172fb:	68 14 01 00 00       	push   0x114
c0017300:	e8 e2 2a ff ff       	call   c0009de7 <malloc>
c0017305:	83 c4 0c             	add    esp,0xc
c0017308:	89 c6                	mov    esi,eax
c001730a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001730f:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0017312:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0017315:	56                   	push   esi
c0017316:	e8 67 63 ff ff       	call   c000d682 <File::File(char const*, Process*)>
c001731b:	83 c4 10             	add    esp,0x10
c001731e:	85 f6                	test   esi,esi
c0017320:	74 5b                	je     c001737d <sysCallOpen(regs*)+0x1c7>
c0017322:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0017325:	0f b6 c2             	movzx  eax,dl
c0017328:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001732b:	89 d0                	mov    eax,edx
c001732d:	83 e0 01             	and    eax,0x1
c0017330:	f6 c2 02             	test   dl,0x2
c0017333:	74 03                	je     c0017338 <sysCallOpen(regs*)+0x182>
c0017335:	83 c8 02             	or     eax,0x2
c0017338:	f6 c2 04             	test   dl,0x4
c001733b:	74 03                	je     c0017340 <sysCallOpen(regs*)+0x18a>
c001733d:	83 c8 04             	or     eax,0x4
c0017340:	f6 c2 08             	test   dl,0x8
c0017343:	74 03                	je     c0017348 <sysCallOpen(regs*)+0x192>
c0017345:	83 c8 0a             	or     eax,0xa
c0017348:	83 e2 10             	and    edx,0x10
c001734b:	74 03                	je     c0017350 <sysCallOpen(regs*)+0x19a>
c001734d:	83 c8 12             	or     eax,0x12
c0017350:	83 ec 08             	sub    esp,0x8
c0017353:	50                   	push   eax
c0017354:	56                   	push   esi
c0017355:	e8 02 64 ff ff       	call   c000d75c <File::open(FileOpenMode)>
c001735a:	83 c4 10             	add    esp,0x10
c001735d:	85 c0                	test   eax,eax
c001735f:	75 1c                	jne    c001737d <sysCallOpen(regs*)+0x1c7>
c0017361:	83 ec 0c             	sub    esp,0xc
c0017364:	56                   	push   esi
c0017365:	e8 ec 45 ff ff       	call   c000b956 <UnixFile::getFileDescriptor()>
c001736a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001736d:	83 c4 10             	add    esp,0x10
c0017370:	89 02                	mov    DWORD PTR [edx],eax
c0017372:	c1 f8 1f             	sar    eax,0x1f
c0017375:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0017378:	e9 c1 fe ff ff       	jmp    c001723e <sysCallOpen(regs*)+0x88>
c001737d:	81 c4 04 01 00 00    	add    esp,0x104
c0017383:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017388:	ba ff ff ff ff       	mov    edx,0xffffffff
c001738d:	5b                   	pop    ebx
c001738e:	5e                   	pop    esi
c001738f:	c3                   	ret    
c0017390:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0017393:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0017399:	e9 99 fe ff ff       	jmp    c0017237 <sysCallOpen(regs*)+0x81>

c001739e <Sys::loadSyscalls()>:
c001739e:	c7 05 60 97 02 c0 0f 66 01 c0 	mov    DWORD PTR ds:0xc0029760,0xc001660f
c00173a8:	c7 05 64 97 02 c0 04 62 01 c0 	mov    DWORD PTR ds:0xc0029764,0xc0016204
c00173b2:	c7 05 68 97 02 c0 f5 63 01 c0 	mov    DWORD PTR ds:0xc0029768,0xc00163f5
c00173bc:	c7 05 6c 97 02 c0 45 65 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc0016545
c00173c6:	c7 05 70 97 02 c0 8d 63 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001638d
c00173d0:	c7 05 74 97 02 c0 3b 62 01 c0 	mov    DWORD PTR ds:0xc0029774,0xc001623b
c00173da:	c7 05 78 97 02 c0 1c 62 01 c0 	mov    DWORD PTR ds:0xc0029778,0xc001621c
c00173e4:	c7 05 7c 97 02 c0 4a 64 01 c0 	mov    DWORD PTR ds:0xc002977c,0xc001644a
c00173ee:	c7 05 84 97 02 c0 d2 6a 01 c0 	mov    DWORD PTR ds:0xc0029784,0xc0016ad2
c00173f8:	c7 05 80 97 02 c0 b6 71 01 c0 	mov    DWORD PTR ds:0xc0029780,0xc00171b6
c0017402:	c7 05 88 97 02 c0 32 6b 01 c0 	mov    DWORD PTR ds:0xc0029788,0xc0016b32
c001740c:	c7 05 8c 97 02 c0 15 68 01 c0 	mov    DWORD PTR ds:0xc002978c,0xc0016815
c0017416:	c7 05 90 97 02 c0 47 66 01 c0 	mov    DWORD PTR ds:0xc0029790,0xc0016647
c0017420:	c7 05 94 97 02 c0 4c 66 01 c0 	mov    DWORD PTR ds:0xc0029794,0xc001664c
c001742a:	c7 05 98 97 02 c0 fb 6b 01 c0 	mov    DWORD PTR ds:0xc0029798,0xc0016bfb
c0017434:	c7 05 9c 97 02 c0 a7 6b 01 c0 	mov    DWORD PTR ds:0xc002979c,0xc0016ba7
c001743e:	c7 05 a0 97 02 c0 ee 68 01 c0 	mov    DWORD PTR ds:0xc00297a0,0xc00168ee
c0017448:	c7 05 a4 97 02 c0 45 69 01 c0 	mov    DWORD PTR ds:0xc00297a4,0xc0016945
c0017452:	c7 05 a8 97 02 c0 b1 69 01 c0 	mov    DWORD PTR ds:0xc00297a8,0xc00169b1
c001745c:	c7 05 ac 97 02 c0 51 66 01 c0 	mov    DWORD PTR ds:0xc00297ac,0xc0016651
c0017466:	c7 05 b0 97 02 c0 6b 6c 01 c0 	mov    DWORD PTR ds:0xc00297b0,0xc0016c6b
c0017470:	c7 05 b4 97 02 c0 85 6c 01 c0 	mov    DWORD PTR ds:0xc00297b4,0xc0016c85
c001747a:	c7 05 b8 97 02 c0 85 6c 01 c0 	mov    DWORD PTR ds:0xc00297b8,0xc0016c85
c0017484:	c7 05 bc 97 02 c0 ba 6c 01 c0 	mov    DWORD PTR ds:0xc00297bc,0xc0016cba
c001748e:	c7 05 c0 97 02 c0 1e 6d 01 c0 	mov    DWORD PTR ds:0xc00297c0,0xc0016d1e
c0017498:	c7 05 c4 97 02 c0 5b 66 01 c0 	mov    DWORD PTR ds:0xc00297c4,0xc001665b
c00174a2:	c7 05 c8 97 02 c0 82 6d 01 c0 	mov    DWORD PTR ds:0xc00297c8,0xc0016d82
c00174ac:	c7 05 cc 97 02 c0 d2 67 01 c0 	mov    DWORD PTR ds:0xc00297cc,0xc00167d2
c00174b6:	c7 05 d0 97 02 c0 ce 6d 01 c0 	mov    DWORD PTR ds:0xc00297d0,0xc0016dce
c00174c0:	c7 05 d4 97 02 c0 94 68 01 c0 	mov    DWORD PTR ds:0xc00297d4,0xc0016894
c00174ca:	c7 05 d8 97 02 c0 51 6e 01 c0 	mov    DWORD PTR ds:0xc00297d8,0xc0016e51
c00174d4:	c7 05 dc 97 02 c0 23 6a 01 c0 	mov    DWORD PTR ds:0xc00297dc,0xc0016a23
c00174de:	c7 05 e0 97 02 c0 7a 6e 01 c0 	mov    DWORD PTR ds:0xc00297e0,0xc0016e7a
c00174e8:	c7 05 e4 97 02 c0 e2 6e 01 c0 	mov    DWORD PTR ds:0xc00297e4,0xc0016ee2
c00174f2:	c7 05 e8 97 02 c0 8f 6f 01 c0 	mov    DWORD PTR ds:0xc00297e8,0xc0016f8f
c00174fc:	c7 05 ec 97 02 c0 6b 66 01 c0 	mov    DWORD PTR ds:0xc00297ec,0xc001666b
c0017506:	c7 05 f0 97 02 c0 d5 66 01 c0 	mov    DWORD PTR ds:0xc00297f0,0xc00166d5
c0017510:	c7 05 f4 97 02 c0 1f 67 01 c0 	mov    DWORD PTR ds:0xc00297f4,0xc001671f
c001751a:	c7 05 f8 97 02 c0 a3 70 01 c0 	mov    DWORD PTR ds:0xc00297f8,0xc00170a3
c0017524:	c7 05 fc 97 02 c0 a0 6c 01 c0 	mov    DWORD PTR ds:0xc00297fc,0xc0016ca0
c001752e:	c7 05 00 98 02 c0 74 67 01 c0 	mov    DWORD PTR ds:0xc0029800,0xc0016774
c0017538:	c7 05 04 98 02 c0 15 71 01 c0 	mov    DWORD PTR ds:0xc0029804,0xc0017115
c0017542:	c7 05 08 98 02 c0 5a 71 01 c0 	mov    DWORD PTR ds:0xc0029808,0xc001715a
c001754c:	c7 05 0c 98 02 c0 e5 62 01 c0 	mov    DWORD PTR ds:0xc002980c,0xc00162e5
c0017556:	c7 05 10 98 02 c0 66 64 01 c0 	mov    DWORD PTR ds:0xc0029810,0xc0016466
c0017560:	c7 05 14 98 02 c0 fb 64 01 c0 	mov    DWORD PTR ds:0xc0029814,0xc00164fb
c001756a:	c7 05 18 98 02 c0 ce 61 01 c0 	mov    DWORD PTR ds:0xc0029818,0xc00161ce
c0017574:	c7 05 1c 98 02 c0 ad 65 01 c0 	mov    DWORD PTR ds:0xc002981c,0xc00165ad
c001757e:	c7 05 20 98 02 c0 47 62 01 c0 	mov    DWORD PTR ds:0xc0029820,0xc0016247
c0017588:	c7 05 24 98 02 c0 61 62 01 c0 	mov    DWORD PTR ds:0xc0029824,0xc0016261
c0017592:	c3                   	ret    

c0017593 <Sys::systemCall(regs*, void*)>:
c0017593:	53                   	push   ebx
c0017594:	83 ec 08             	sub    esp,0x8
c0017597:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001759b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001759e:	83 f8 7f             	cmp    eax,0x7f
c00175a1:	77 16                	ja     c00175b9 <Sys::systemCall(regs*, void*)+0x26>
c00175a3:	8b 14 85 60 97 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd68a0]
c00175aa:	85 d2                	test   edx,edx
c00175ac:	74 0b                	je     c00175b9 <Sys::systemCall(regs*, void*)+0x26>
c00175ae:	83 ec 0c             	sub    esp,0xc
c00175b1:	53                   	push   ebx
c00175b2:	ff d2                	call   edx
c00175b4:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00175b7:	eb 0d                	jmp    c00175c6 <Sys::systemCall(regs*, void*)+0x33>
c00175b9:	52                   	push   edx
c00175ba:	52                   	push   edx
c00175bb:	50                   	push   eax
c00175bc:	68 ad 6a 02 c0       	push   0xc0026aad
c00175c1:	e8 51 5b ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c00175c6:	83 c4 10             	add    esp,0x10
c00175c9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00175ce:	31 d2                	xor    edx,edx
c00175d0:	83 c4 08             	add    esp,0x8
c00175d3:	5b                   	pop    ebx
c00175d4:	c3                   	ret    

c00175d5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00175d5:	55                   	push   ebp
c00175d6:	57                   	push   edi
c00175d7:	56                   	push   esi
c00175d8:	53                   	push   ebx
c00175d9:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00175df:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00175e6:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c00175ed:	85 c0                	test   eax,eax
c00175ef:	0f 95 c1             	setne  cl
c00175f2:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00175fa:	0f 94 c2             	sete   dl
c00175fd:	84 d1                	test   cl,dl
c00175ff:	74 23                	je     c0017624 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c0017601:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c0017607:	74 1b                	je     c0017624 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c0017609:	81 c3 00 10 00 00    	add    ebx,0x1000
c001760f:	89 da                	mov    edx,ebx
c0017611:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0017617:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001761d:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0017624:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001762b:	05 ff 0f 00 00       	add    eax,0xfff
c0017630:	83 ec 0c             	sub    esp,0xc
c0017633:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017637:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001763d:	c1 e8 0c             	shr    eax,0xc
c0017640:	89 fe                	mov    esi,edi
c0017642:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017646:	c1 ee 0c             	shr    esi,0xc
c0017649:	6a 01                	push   0x1
c001764b:	e8 51 47 ff ff       	call   c000bda1 <Virt::allocateKernelVirtualPages(int)>
c0017650:	89 c5                	mov    ebp,eax
c0017652:	58                   	pop    eax
c0017653:	5a                   	pop    edx
c0017654:	56                   	push   esi
c0017655:	68 c1 6a 02 c0       	push   0xc0026ac1
c001765a:	e8 b8 5a ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c001765f:	59                   	pop    ecx
c0017660:	58                   	pop    eax
c0017661:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017665:	68 d3 6a 02 c0       	push   0xc0026ad3
c001766a:	e8 a8 5a ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c001766f:	83 c4 10             	add    esp,0x10
c0017672:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c0017678:	0f 86 31 01 00 00    	jbe    c00177af <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001767e:	c1 e6 0c             	shl    esi,0xc
c0017681:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017684:	8d 04 1e             	lea    eax,[esi+ebx*1]
c0017687:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001768b:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0017692:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017695:	01 df                	add    edi,ebx
c0017697:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001769a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001769e:	0f 84 08 01 00 00    	je     c00177ac <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c00176a4:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00176aa:	76 05                	jbe    c00176b1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c00176ac:	bf 00 10 00 00       	mov    edi,0x1000
c00176b1:	83 ec 0c             	sub    esp,0xc
c00176b4:	31 d2                	xor    edx,edx
c00176b6:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00176bd:	8b 08                	mov    ecx,DWORD PTR [eax]
c00176bf:	8d 44 24 28          	lea    eax,[esp+0x28]
c00176c3:	50                   	push   eax
c00176c4:	8d 74 24 30          	lea    esi,[esp+0x30]
c00176c8:	56                   	push   esi
c00176c9:	52                   	push   edx
c00176ca:	57                   	push   edi
c00176cb:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c00176d2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00176d5:	83 c4 20             	add    esp,0x20
c00176d8:	85 c0                	test   eax,eax
c00176da:	74 0a                	je     c00176e6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c00176dc:	53                   	push   ebx
c00176dd:	53                   	push   ebx
c00176de:	50                   	push   eax
c00176df:	68 e5 6a 02 c0       	push   0xc0026ae5
c00176e4:	eb 0f                	jmp    c00176f5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c00176e6:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00176ea:	74 20                	je     c001770c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c00176ec:	51                   	push   ecx
c00176ed:	51                   	push   ecx
c00176ee:	6a 00                	push   0x0
c00176f0:	68 10 6b 02 c0       	push   0xc0026b10
c00176f5:	e8 1d 5a ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c00176fa:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00176fd:	e8 93 49 ff ff       	call   c000c095 <Virt::freeKernelVirtualPages(unsigned long)>
c0017702:	83 c4 10             	add    esp,0x10
c0017705:	31 c0                	xor    eax,eax
c0017707:	e9 68 01 00 00       	jmp    c0017874 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001770c:	fa                   	cli    
c001770d:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c0017713:	e8 86 2d ff ff       	call   c000a49e <Phys::allocatePage()>
c0017718:	6a 07                	push   0x7
c001771a:	89 c7                	mov    edi,eax
c001771c:	55                   	push   ebp
c001771d:	50                   	push   eax
c001771e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017723:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017726:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001772c:	e8 db 4c ff ff       	call   c000c40c <VAS::mapPage(unsigned long, unsigned long, int)>
c0017731:	83 c4 0c             	add    esp,0xc
c0017734:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001773b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0017741:	6a 00                	push   0x0
c0017743:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017748:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001774b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0017751:	e8 10 4b ff ff       	call   c000c266 <VAS::mapOtherVASIn(bool, VAS*)>
c0017756:	58                   	pop    eax
c0017757:	5a                   	pop    edx
c0017758:	68 07 0c 00 00       	push   0xc07
c001775d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017761:	57                   	push   edi
c0017762:	89 ef                	mov    edi,ebp
c0017764:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001776b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0017771:	6a 00                	push   0x0
c0017773:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017778:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001777b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0017781:	e8 42 50 ff ff       	call   c000c7c8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0017786:	b9 00 10 00 00       	mov    ecx,0x1000
c001778b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001778d:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c0017792:	83 c4 20             	add    esp,0x20
c0017795:	48                   	dec    eax
c0017796:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c001779b:	85 c0                	test   eax,eax
c001779d:	75 01                	jne    c00177a0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001779f:	fb                   	sti    
c00177a0:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c00177a7:	e9 df fe ff ff       	jmp    c001768b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c00177ac:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00177af:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c00177b7:	0f 86 a9 00 00 00    	jbe    c0017866 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c00177bd:	fa                   	cli    
c00177be:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c00177c4:	51                   	push   ecx
c00177c5:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00177cc:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00177d2:	6a 00                	push   0x0
c00177d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00177d9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00177dc:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00177e2:	e8 7f 4a ff ff       	call   c000c266 <VAS::mapOtherVASIn(bool, VAS*)>
c00177e7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00177eb:	c1 e6 0c             	shl    esi,0xc
c00177ee:	01 de                	add    esi,ebx
c00177f0:	83 c4 10             	add    esp,0x10
c00177f3:	39 de                	cmp    esi,ebx
c00177f5:	74 61                	je     c0017858 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c00177f7:	e8 a2 2c ff ff       	call   c000a49e <Phys::allocatePage()>
c00177fc:	6a 07                	push   0x7
c00177fe:	89 c7                	mov    edi,eax
c0017800:	55                   	push   ebp
c0017801:	50                   	push   eax
c0017802:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017807:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001780a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0017810:	e8 f7 4b ff ff       	call   c000c40c <VAS::mapPage(unsigned long, unsigned long, int)>
c0017815:	58                   	pop    eax
c0017816:	5a                   	pop    edx
c0017817:	68 07 0c 00 00       	push   0xc07
c001781c:	53                   	push   ebx
c001781d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0017823:	57                   	push   edi
c0017824:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001782b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0017831:	6a 00                	push   0x0
c0017833:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017838:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001783b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0017841:	e8 82 4f ff ff       	call   c000c7c8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0017846:	83 c4 1c             	add    esp,0x1c
c0017849:	68 00 10 00 00       	push   0x1000
c001784e:	6a 00                	push   0x0
c0017850:	55                   	push   ebp
c0017851:	e8 3e 8e fe ff       	call   c0000694 <memset>
c0017856:	eb 98                	jmp    c00177f0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c0017858:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c001785d:	48                   	dec    eax
c001785e:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c0017863:	75 01                	jne    c0017866 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0017865:	fb                   	sti    
c0017866:	83 ec 0c             	sub    esp,0xc
c0017869:	55                   	push   ebp
c001786a:	e8 26 48 ff ff       	call   c000c095 <Virt::freeKernelVirtualPages(unsigned long)>
c001786f:	83 c4 10             	add    esp,0x10
c0017872:	b0 01                	mov    al,0x1
c0017874:	81 c4 2c 10 00 00    	add    esp,0x102c
c001787a:	5b                   	pop    ebx
c001787b:	5e                   	pop    esi
c001787c:	5f                   	pop    edi
c001787d:	5d                   	pop    ebp
c001787e:	c3                   	ret    

c001787f <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001787f:	55                   	push   ebp
c0017880:	57                   	push   edi
c0017881:	56                   	push   esi
c0017882:	53                   	push   ebx
c0017883:	83 ec 48             	sub    esp,0x48
c0017886:	68 14 01 00 00       	push   0x114
c001788b:	e8 57 25 ff ff       	call   c0009de7 <malloc>
c0017890:	83 c4 0c             	add    esp,0xc
c0017893:	89 c6                	mov    esi,eax
c0017895:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017899:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001789d:	50                   	push   eax
c001789e:	e8 df 5d ff ff       	call   c000d682 <File::File(char const*, Process*)>
c00178a3:	58                   	pop    eax
c00178a4:	5a                   	pop    edx
c00178a5:	6a 01                	push   0x1
c00178a7:	56                   	push   esi
c00178a8:	e8 af 5e ff ff       	call   c000d75c <File::open(FileOpenMode)>
c00178ad:	83 c4 10             	add    esp,0x10
c00178b0:	85 c0                	test   eax,eax
c00178b2:	0f 85 47 01 00 00    	jne    c00179ff <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00178b8:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00178c0:	83 ec 0c             	sub    esp,0xc
c00178c3:	6a 34                	push   0x34
c00178c5:	e8 1d 25 ff ff       	call   c0009de7 <malloc>
c00178ca:	89 c3                	mov    ebx,eax
c00178cc:	58                   	pop    eax
c00178cd:	8b 06                	mov    eax,DWORD PTR [esi]
c00178cf:	8d 7c 24 38          	lea    edi,[esp+0x38]
c00178d3:	57                   	push   edi
c00178d4:	53                   	push   ebx
c00178d5:	6a 00                	push   0x0
c00178d7:	6a 34                	push   0x34
c00178d9:	56                   	push   esi
c00178da:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00178dd:	83 c4 20             	add    esp,0x20
c00178e0:	85 c0                	test   eax,eax
c00178e2:	0f 85 17 01 00 00    	jne    c00179ff <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00178e8:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00178ee:	0f 85 0b 01 00 00    	jne    c00179ff <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00178f4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00178f7:	85 c0                	test   eax,eax
c00178f9:	0f 84 00 01 00 00    	je     c00179ff <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00178ff:	31 d2                	xor    edx,edx
c0017901:	55                   	push   ebp
c0017902:	52                   	push   edx
c0017903:	50                   	push   eax
c0017904:	56                   	push   esi
c0017905:	e8 10 5f ff ff       	call   c000d81a <File::seek(unsigned long long)>
c001790a:	83 c4 10             	add    esp,0x10
c001790d:	85 c0                	test   eax,eax
c001790f:	0f 85 ea 00 00 00    	jne    c00179ff <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017915:	83 ec 0c             	sub    esp,0xc
c0017918:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001791b:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001791f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017923:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0017927:	0f af c2             	imul   eax,edx
c001792a:	50                   	push   eax
c001792b:	e8 b7 24 ff ff       	call   c0009de7 <malloc>
c0017930:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017932:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017936:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017939:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001793d:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0017941:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0017945:	0f af c2             	imul   eax,edx
c0017948:	99                   	cdq    
c0017949:	52                   	push   edx
c001794a:	50                   	push   eax
c001794b:	56                   	push   esi
c001794c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001794f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0017952:	83 c4 20             	add    esp,0x20
c0017955:	85 c0                	test   eax,eax
c0017957:	0f 84 a2 00 00 00    	je     c00179ff <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001795d:	31 d2                	xor    edx,edx
c001795f:	51                   	push   ecx
c0017960:	52                   	push   edx
c0017961:	50                   	push   eax
c0017962:	56                   	push   esi
c0017963:	e8 b2 5e ff ff       	call   c000d81a <File::seek(unsigned long long)>
c0017968:	83 c4 10             	add    esp,0x10
c001796b:	85 c0                	test   eax,eax
c001796d:	0f 85 8c 00 00 00    	jne    c00179ff <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017973:	83 ec 0c             	sub    esp,0xc
c0017976:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001797a:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001797e:	31 ed                	xor    ebp,ebp
c0017980:	0f af c2             	imul   eax,edx
c0017983:	50                   	push   eax
c0017984:	e8 5e 24 ff ff       	call   c0009de7 <malloc>
c0017989:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001798b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001798f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017992:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017996:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001799a:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001799e:	0f af c2             	imul   eax,edx
c00179a1:	99                   	cdq    
c00179a2:	52                   	push   edx
c00179a3:	50                   	push   eax
c00179a4:	56                   	push   esi
c00179a5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00179a8:	83 c4 20             	add    esp,0x20
c00179ab:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00179b3:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c00179b7:	0f 86 80 00 00 00    	jbe    c0017a3d <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c00179bd:	0f b7 fd             	movzx  edi,bp
c00179c0:	c1 e7 05             	shl    edi,0x5
c00179c3:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00179c7:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00179ca:	75 6b                	jne    c0017a37 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00179cc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00179cf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00179d3:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00179d6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00179da:	52                   	push   edx
c00179db:	31 d2                	xor    edx,edx
c00179dd:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00179e0:	52                   	push   edx
c00179e1:	50                   	push   eax
c00179e2:	56                   	push   esi
c00179e3:	e8 32 5e ff ff       	call   c000d81a <File::seek(unsigned long long)>
c00179e8:	83 c4 10             	add    esp,0x10
c00179eb:	85 c0                	test   eax,eax
c00179ed:	74 17                	je     c0017a06 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c00179ef:	83 ec 0c             	sub    esp,0xc
c00179f2:	68 3c 6b 02 c0       	push   0xc0026b3c
c00179f7:	e8 1b 57 ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c00179fc:	83 c4 10             	add    esp,0x10
c00179ff:	31 c0                	xor    eax,eax
c0017a01:	e9 87 00 00 00       	jmp    c0017a8d <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0017a06:	83 ec 0c             	sub    esp,0xc
c0017a09:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0017a0c:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0017a0f:	50                   	push   eax
c0017a10:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017a14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a18:	56                   	push   esi
c0017a19:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0017a1d:	e8 b3 fb ff ff       	call   c00175d5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0017a22:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a26:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0017a2a:	83 c4 20             	add    esp,0x20
c0017a2d:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0017a31:	73 04                	jae    c0017a37 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0017a33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017a37:	45                   	inc    ebp
c0017a38:	e9 76 ff ff ff       	jmp    c00179b3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0017a3d:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0017a41:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017a45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017a49:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0017a4f:	83 ec 0c             	sub    esp,0xc
c0017a52:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0017a58:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017a5d:	05 00 10 00 00       	add    eax,0x1000
c0017a62:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0017a65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a69:	e8 89 23 ff ff       	call   c0009df7 <free>
c0017a6e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017a71:	e8 81 23 ff ff       	call   c0009df7 <free>
c0017a76:	58                   	pop    eax
c0017a77:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017a7b:	e8 77 23 ff ff       	call   c0009df7 <free>
c0017a80:	89 34 24             	mov    DWORD PTR [esp],esi
c0017a83:	e8 32 5d ff ff       	call   c000d7ba <File::close()>
c0017a88:	83 c4 10             	add    esp,0x10
c0017a8b:	b0 01                	mov    al,0x1
c0017a8d:	83 c4 3c             	add    esp,0x3c
c0017a90:	5b                   	pop    ebx
c0017a91:	5e                   	pop    esi
c0017a92:	5f                   	pop    edi
c0017a93:	5d                   	pop    ebp
c0017a94:	c3                   	ret    

c0017a95 <Thr::runtimeReferenceHelper()>:
c0017a95:	83 ec 18             	sub    esp,0x18
c0017a98:	68 44 6b 02 c0       	push   0xc0026b44
c0017a9d:	e8 75 56 ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0017aa2:	fa                   	cli    
c0017aa3:	83 c4 10             	add    esp,0x10
c0017aa6:	eb fe                	jmp    c0017aa6 <Thr::runtimeReferenceHelper()+0x11>

c0017aa8 <Thr::getAddressOfKernelSymbol(char const*)>:
c0017aa8:	57                   	push   edi
c0017aa9:	56                   	push   esi
c0017aaa:	53                   	push   ebx
c0017aab:	31 db                	xor    ebx,ebx
c0017aad:	39 1d 00 a1 02 c0    	cmp    DWORD PTR ds:0xc002a100,ebx
c0017ab3:	7e 3c                	jle    c0017af1 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0017ab5:	8b 34 9d 80 a0 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd5f80]
c0017abc:	31 ff                	xor    edi,edi
c0017abe:	39 3c 9d 80 9f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd6080],edi
c0017ac5:	7e 27                	jle    c0017aee <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0017ac7:	50                   	push   eax
c0017ac8:	50                   	push   eax
c0017ac9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017acd:	8b 06                	mov    eax,DWORD PTR [esi]
c0017acf:	03 04 9d 00 a0 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd6000]
c0017ad6:	50                   	push   eax
c0017ad7:	e8 00 8d fe ff       	call   c00007dc <strcmp>
c0017adc:	83 c4 10             	add    esp,0x10
c0017adf:	85 c0                	test   eax,eax
c0017ae1:	75 05                	jne    c0017ae8 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0017ae3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0017ae6:	eb 0b                	jmp    c0017af3 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0017ae8:	83 c6 10             	add    esi,0x10
c0017aeb:	47                   	inc    edi
c0017aec:	eb d0                	jmp    c0017abe <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0017aee:	43                   	inc    ebx
c0017aef:	eb bc                	jmp    c0017aad <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0017af1:	31 c0                	xor    eax,eax
c0017af3:	5b                   	pop    ebx
c0017af4:	5e                   	pop    esi
c0017af5:	5f                   	pop    edi
c0017af6:	c3                   	ret    

c0017af7 <Thr::loadKernelSymbolTable(char const*)>:
c0017af7:	55                   	push   ebp
c0017af8:	57                   	push   edi
c0017af9:	56                   	push   esi
c0017afa:	53                   	push   ebx
c0017afb:	83 ec 68             	sub    esp,0x68
c0017afe:	8b 35 50 a1 02 c0    	mov    esi,DWORD PTR ds:0xc002a150
c0017b04:	68 14 01 00 00       	push   0x114
c0017b09:	e8 d9 22 ff ff       	call   c0009de7 <malloc>
c0017b0e:	83 c4 0c             	add    esp,0xc
c0017b11:	89 c3                	mov    ebx,eax
c0017b13:	56                   	push   esi
c0017b14:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0017b18:	50                   	push   eax
c0017b19:	e8 64 5b ff ff       	call   c000d682 <File::File(char const*, Process*)>
c0017b1e:	5e                   	pop    esi
c0017b1f:	5f                   	pop    edi
c0017b20:	6a 01                	push   0x1
c0017b22:	53                   	push   ebx
c0017b23:	e8 34 5c ff ff       	call   c000d75c <File::open(FileOpenMode)>
c0017b28:	83 c4 10             	add    esp,0x10
c0017b2b:	85 c0                	test   eax,eax
c0017b2d:	74 0a                	je     c0017b39 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0017b2f:	83 ec 0c             	sub    esp,0xc
c0017b32:	68 66 6b 02 c0       	push   0xc0026b66
c0017b37:	eb 34                	jmp    c0017b6d <Thr::loadKernelSymbolTable(char const*)+0x76>
c0017b39:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0017b41:	83 ec 0c             	sub    esp,0xc
c0017b44:	6a 34                	push   0x34
c0017b46:	e8 9c 22 ff ff       	call   c0009de7 <malloc>
c0017b4b:	59                   	pop    ecx
c0017b4c:	89 c7                	mov    edi,eax
c0017b4e:	8d 74 24 34          	lea    esi,[esp+0x34]
c0017b52:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017b54:	56                   	push   esi
c0017b55:	57                   	push   edi
c0017b56:	6a 00                	push   0x0
c0017b58:	6a 34                	push   0x34
c0017b5a:	53                   	push   ebx
c0017b5b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017b5e:	83 c4 20             	add    esp,0x20
c0017b61:	85 c0                	test   eax,eax
c0017b63:	74 17                	je     c0017b7c <Thr::loadKernelSymbolTable(char const*)+0x85>
c0017b65:	83 ec 0c             	sub    esp,0xc
c0017b68:	68 7d 6b 02 c0       	push   0xc0026b7d
c0017b6d:	e8 87 d6 ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c0017b72:	83 c4 10             	add    esp,0x10
c0017b75:	31 c0                	xor    eax,eax
c0017b77:	e9 31 02 00 00       	jmp    c0017dad <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0017b7c:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0017b82:	75 e1                	jne    c0017b65 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0017b84:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0017b87:	85 c0                	test   eax,eax
c0017b89:	74 da                	je     c0017b65 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0017b8b:	52                   	push   edx
c0017b8c:	31 d2                	xor    edx,edx
c0017b8e:	52                   	push   edx
c0017b8f:	50                   	push   eax
c0017b90:	53                   	push   ebx
c0017b91:	e8 84 5c ff ff       	call   c000d81a <File::seek(unsigned long long)>
c0017b96:	83 c4 10             	add    esp,0x10
c0017b99:	85 c0                	test   eax,eax
c0017b9b:	75 c8                	jne    c0017b65 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0017b9d:	83 ec 0c             	sub    esp,0xc
c0017ba0:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017ba4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017ba8:	31 ed                	xor    ebp,ebp
c0017baa:	0f af c2             	imul   eax,edx
c0017bad:	50                   	push   eax
c0017bae:	e8 34 22 ff ff       	call   c0009de7 <malloc>
c0017bb3:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0017bb5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017bb9:	89 34 24             	mov    DWORD PTR [esp],esi
c0017bbc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017bc0:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017bc4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017bc8:	0f af c2             	imul   eax,edx
c0017bcb:	99                   	cdq    
c0017bcc:	52                   	push   edx
c0017bcd:	50                   	push   eax
c0017bce:	53                   	push   ebx
c0017bcf:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017bd2:	83 c4 20             	add    esp,0x20
c0017bd5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017bdd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0017be5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017bed:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017bf5:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0017bf9:	0f 86 aa 00 00 00    	jbe    c0017ca9 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0017bff:	0f b7 f5             	movzx  esi,bp
c0017c02:	6b f6 28             	imul   esi,esi,0x28
c0017c05:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0017c09:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017c0c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017c10:	50                   	push   eax
c0017c11:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017c15:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0017c19:	8b 16                	mov    edx,DWORD PTR [esi]
c0017c1b:	6b c0 28             	imul   eax,eax,0x28
c0017c1e:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0017c22:	89 d0                	mov    eax,edx
c0017c24:	31 d2                	xor    edx,edx
c0017c26:	52                   	push   edx
c0017c27:	50                   	push   eax
c0017c28:	53                   	push   ebx
c0017c29:	e8 ec 5b ff ff       	call   c000d81a <File::seek(unsigned long long)>
c0017c2e:	83 c4 0c             	add    esp,0xc
c0017c31:	6a 20                	push   0x20
c0017c33:	6a 00                	push   0x0
c0017c35:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0017c39:	52                   	push   edx
c0017c3a:	e8 55 8a fe ff       	call   c0000694 <memset>
c0017c3f:	58                   	pop    eax
c0017c40:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017c42:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0017c46:	51                   	push   ecx
c0017c47:	8d 54 24 40          	lea    edx,[esp+0x40]
c0017c4b:	52                   	push   edx
c0017c4c:	6a 00                	push   0x0
c0017c4e:	6a 1f                	push   0x1f
c0017c50:	53                   	push   ebx
c0017c51:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017c54:	83 c4 18             	add    esp,0x18
c0017c57:	68 94 6b 02 c0       	push   0xc0026b94
c0017c5c:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0017c60:	52                   	push   edx
c0017c61:	e8 76 8b fe ff       	call   c00007dc <strcmp>
c0017c66:	83 c4 10             	add    esp,0x10
c0017c69:	85 c0                	test   eax,eax
c0017c6b:	75 0f                	jne    c0017c7c <Thr::loadKernelSymbolTable(char const*)+0x185>
c0017c6d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017c70:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017c74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017c78:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017c7c:	50                   	push   eax
c0017c7d:	50                   	push   eax
c0017c7e:	68 9c 6b 02 c0       	push   0xc0026b9c
c0017c83:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0017c87:	50                   	push   eax
c0017c88:	e8 4f 8b fe ff       	call   c00007dc <strcmp>
c0017c8d:	83 c4 10             	add    esp,0x10
c0017c90:	85 c0                	test   eax,eax
c0017c92:	75 0f                	jne    c0017ca3 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0017c94:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017c97:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017c9b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017c9f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017ca3:	45                   	inc    ebp
c0017ca4:	e9 4c ff ff ff       	jmp    c0017bf5 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0017ca9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017cae:	75 10                	jne    c0017cc0 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0017cb0:	83 ec 0c             	sub    esp,0xc
c0017cb3:	68 a4 6b 02 c0       	push   0xc0026ba4
c0017cb8:	e8 3c d5 ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c0017cbd:	83 c4 10             	add    esp,0x10
c0017cc0:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0017cc5:	75 10                	jne    c0017cd7 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0017cc7:	83 ec 0c             	sub    esp,0xc
c0017cca:	68 a4 6b 02 c0       	push   0xc0026ba4
c0017ccf:	e8 25 d5 ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c0017cd4:	83 c4 10             	add    esp,0x10
c0017cd7:	31 d2                	xor    edx,edx
c0017cd9:	50                   	push   eax
c0017cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017cde:	52                   	push   edx
c0017cdf:	50                   	push   eax
c0017ce0:	53                   	push   ebx
c0017ce1:	e8 34 5b ff ff       	call   c000d81a <File::seek(unsigned long long)>
c0017ce6:	5a                   	pop    edx
c0017ce7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017ceb:	e8 f7 20 ff ff       	call   c0009de7 <malloc>
c0017cf0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017cf4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017cf8:	31 c9                	xor    ecx,ecx
c0017cfa:	5e                   	pop    esi
c0017cfb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017cfd:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0017d01:	55                   	push   ebp
c0017d02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d06:	51                   	push   ecx
c0017d07:	52                   	push   edx
c0017d08:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0017d0c:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0017d10:	53                   	push   ebx
c0017d11:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017d14:	83 c4 14             	add    esp,0x14
c0017d17:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017d1b:	e8 c7 20 ff ff       	call   c0009de7 <malloc>
c0017d20:	89 c6                	mov    esi,eax
c0017d22:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017d24:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017d27:	56                   	push   esi
c0017d28:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017d2c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017d30:	51                   	push   ecx
c0017d31:	52                   	push   edx
c0017d32:	53                   	push   ebx
c0017d33:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017d36:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017d3a:	8b 15 00 a1 02 c0    	mov    edx,DWORD PTR ds:0xc002a100
c0017d40:	83 c4 1c             	add    esp,0x1c
c0017d43:	c1 e8 04             	shr    eax,0x4
c0017d46:	89 04 95 80 9f 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6080],eax
c0017d4d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017d51:	31 d2                	xor    edx,edx
c0017d53:	52                   	push   edx
c0017d54:	50                   	push   eax
c0017d55:	53                   	push   ebx
c0017d56:	e8 bf 5a ff ff       	call   c000d81a <File::seek(unsigned long long)>
c0017d5b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0017d5d:	31 d2                	xor    edx,edx
c0017d5f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017d62:	56                   	push   esi
c0017d63:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d67:	52                   	push   edx
c0017d68:	50                   	push   eax
c0017d69:	53                   	push   ebx
c0017d6a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017d6d:	83 c4 14             	add    esp,0x14
c0017d70:	53                   	push   ebx
c0017d71:	e8 44 5a ff ff       	call   c000d7ba <File::close()>
c0017d76:	5d                   	pop    ebp
c0017d77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017d7b:	e8 77 20 ff ff       	call   c0009df7 <free>
c0017d80:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017d83:	e8 6f 20 ff ff       	call   c0009df7 <free>
c0017d88:	a1 00 a1 02 c0       	mov    eax,ds:0xc002a100
c0017d8d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017d91:	8d 50 01             	lea    edx,[eax+0x1]
c0017d94:	89 0c 85 80 a0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5f80],ecx
c0017d9b:	89 34 85 00 a0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6000],esi
c0017da2:	89 15 00 a1 02 c0    	mov    DWORD PTR ds:0xc002a100,edx
c0017da8:	83 c4 10             	add    esp,0x10
c0017dab:	b0 01                	mov    al,0x1
c0017dad:	83 c4 5c             	add    esp,0x5c
c0017db0:	5b                   	pop    ebx
c0017db1:	5e                   	pop    esi
c0017db2:	5f                   	pop    edi
c0017db3:	5d                   	pop    ebp
c0017db4:	c3                   	ret    

c0017db5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0017db5:	55                   	push   ebp
c0017db6:	57                   	push   edi
c0017db7:	56                   	push   esi
c0017db8:	53                   	push   ebx
c0017db9:	81 ec 68 03 00 00    	sub    esp,0x368
c0017dbf:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0017dc6:	8b 1d 50 a1 02 c0    	mov    ebx,DWORD PTR ds:0xc002a150
c0017dcc:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0017dd0:	68 14 01 00 00       	push   0x114
c0017dd5:	e8 0d 20 ff ff       	call   c0009de7 <malloc>
c0017dda:	83 c4 0c             	add    esp,0xc
c0017ddd:	89 c5                	mov    ebp,eax
c0017ddf:	53                   	push   ebx
c0017de0:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0017de7:	50                   	push   eax
c0017de8:	e8 95 58 ff ff       	call   c000d682 <File::File(char const*, Process*)>
c0017ded:	5e                   	pop    esi
c0017dee:	5f                   	pop    edi
c0017def:	6a 01                	push   0x1
c0017df1:	55                   	push   ebp
c0017df2:	e8 65 59 ff ff       	call   c000d75c <File::open(FileOpenMode)>
c0017df7:	83 c4 10             	add    esp,0x10
c0017dfa:	85 c0                	test   eax,eax
c0017dfc:	0f 85 a7 06 00 00    	jne    c00184a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017e02:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0017e0a:	83 ec 0c             	sub    esp,0xc
c0017e0d:	6a 34                	push   0x34
c0017e0f:	e8 d3 1f ff ff       	call   c0009de7 <malloc>
c0017e14:	5b                   	pop    ebx
c0017e15:	89 c7                	mov    edi,eax
c0017e17:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017e1b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017e1e:	53                   	push   ebx
c0017e1f:	57                   	push   edi
c0017e20:	6a 00                	push   0x0
c0017e22:	6a 34                	push   0x34
c0017e24:	55                   	push   ebp
c0017e25:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017e28:	83 c4 20             	add    esp,0x20
c0017e2b:	85 c0                	test   eax,eax
c0017e2d:	0f 85 76 06 00 00    	jne    c00184a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017e33:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0017e39:	0f 85 6a 06 00 00    	jne    c00184a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017e3f:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0017e42:	85 c0                	test   eax,eax
c0017e44:	0f 84 5f 06 00 00    	je     c00184a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017e4a:	31 d2                	xor    edx,edx
c0017e4c:	51                   	push   ecx
c0017e4d:	52                   	push   edx
c0017e4e:	50                   	push   eax
c0017e4f:	55                   	push   ebp
c0017e50:	e8 c5 59 ff ff       	call   c000d81a <File::seek(unsigned long long)>
c0017e55:	83 c4 10             	add    esp,0x10
c0017e58:	85 c0                	test   eax,eax
c0017e5a:	0f 85 49 06 00 00    	jne    c00184a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017e60:	83 ec 0c             	sub    esp,0xc
c0017e63:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0017e66:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017e6a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017e6e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017e72:	0f af c2             	imul   eax,edx
c0017e75:	50                   	push   eax
c0017e76:	e8 6c 1f ff ff       	call   c0009de7 <malloc>
c0017e7b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017e7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017e82:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017e85:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017e89:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017e8d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017e91:	0f af c2             	imul   eax,edx
c0017e94:	99                   	cdq    
c0017e95:	52                   	push   edx
c0017e96:	50                   	push   eax
c0017e97:	55                   	push   ebp
c0017e98:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017e9b:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0017e9e:	83 c4 20             	add    esp,0x20
c0017ea1:	85 c0                	test   eax,eax
c0017ea3:	0f 84 00 06 00 00    	je     c00184a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017ea9:	52                   	push   edx
c0017eaa:	31 d2                	xor    edx,edx
c0017eac:	52                   	push   edx
c0017ead:	50                   	push   eax
c0017eae:	55                   	push   ebp
c0017eaf:	e8 66 59 ff ff       	call   c000d81a <File::seek(unsigned long long)>
c0017eb4:	83 c4 10             	add    esp,0x10
c0017eb7:	85 c0                	test   eax,eax
c0017eb9:	0f 85 ea 05 00 00    	jne    c00184a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017ebf:	83 ec 0c             	sub    esp,0xc
c0017ec2:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0017ec6:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0017eca:	31 f6                	xor    esi,esi
c0017ecc:	0f af c2             	imul   eax,edx
c0017ecf:	50                   	push   eax
c0017ed0:	e8 12 1f ff ff       	call   c0009de7 <malloc>
c0017ed5:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017ed8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017edc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017edf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017ee3:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0017ee7:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0017eeb:	0f af c2             	imul   eax,edx
c0017eee:	99                   	cdq    
c0017eef:	52                   	push   edx
c0017ef0:	50                   	push   eax
c0017ef1:	55                   	push   ebp
c0017ef2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017ef5:	83 c4 20             	add    esp,0x20
c0017ef8:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0017efc:	0f 86 8a 00 00 00    	jbe    c0017f8c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0017f02:	0f b7 de             	movzx  ebx,si
c0017f05:	c1 e3 05             	shl    ebx,0x5
c0017f08:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0017f0c:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0017f0f:	75 75                	jne    c0017f86 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0017f11:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017f14:	31 d2                	xor    edx,edx
c0017f16:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017f1a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017f1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017f21:	50                   	push   eax
c0017f22:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0017f25:	52                   	push   edx
c0017f26:	50                   	push   eax
c0017f27:	55                   	push   ebp
c0017f28:	e8 ed 58 ff ff       	call   c000d81a <File::seek(unsigned long long)>
c0017f2d:	83 c4 10             	add    esp,0x10
c0017f30:	85 c0                	test   eax,eax
c0017f32:	0f 85 71 05 00 00    	jne    c00184a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017f38:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0017f3f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017f42:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0017f46:	31 d2                	xor    edx,edx
c0017f48:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0017f4c:	83 ec 0c             	sub    esp,0xc
c0017f4f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017f53:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017f5a:	50                   	push   eax
c0017f5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017f5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f63:	52                   	push   edx
c0017f64:	50                   	push   eax
c0017f65:	55                   	push   ebp
c0017f66:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017f69:	83 c4 1c             	add    esp,0x1c
c0017f6c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017f6f:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0017f72:	50                   	push   eax
c0017f73:	6a 00                	push   0x0
c0017f75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f79:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0017f7d:	50                   	push   eax
c0017f7e:	e8 11 87 fe ff       	call   c0000694 <memset>
c0017f83:	83 c4 10             	add    esp,0x10
c0017f86:	46                   	inc    esi
c0017f87:	e9 6c ff ff ff       	jmp    c0017ef8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0017f8c:	53                   	push   ebx
c0017f8d:	31 db                	xor    ebx,ebx
c0017f8f:	68 00 01 00 00       	push   0x100
c0017f94:	6a 00                	push   0x0
c0017f96:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0017f9a:	50                   	push   eax
c0017f9b:	e8 f4 86 fe ff       	call   c0000694 <memset>
c0017fa0:	83 c4 0c             	add    esp,0xc
c0017fa3:	68 00 01 00 00       	push   0x100
c0017fa8:	6a 00                	push   0x0
c0017faa:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0017fb1:	50                   	push   eax
c0017fb2:	e8 dd 86 fe ff       	call   c0000694 <memset>
c0017fb7:	83 c4 10             	add    esp,0x10
c0017fba:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017fc2:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017fca:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0017fd2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017fda:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017fe2:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0017fe6:	0f 86 30 01 00 00    	jbe    c001811c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0017fec:	0f b7 f3             	movzx  esi,bx
c0017fef:	6b f6 28             	imul   esi,esi,0x28
c0017ff2:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0017ff6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017ff9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017ffd:	52                   	push   edx
c0017ffe:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018002:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0018006:	8b 06                	mov    eax,DWORD PTR [esi]
c0018008:	6b d2 28             	imul   edx,edx,0x28
c001800b:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001800f:	31 d2                	xor    edx,edx
c0018011:	52                   	push   edx
c0018012:	50                   	push   eax
c0018013:	55                   	push   ebp
c0018014:	e8 01 58 ff ff       	call   c000d81a <File::seek(unsigned long long)>
c0018019:	83 c4 0c             	add    esp,0xc
c001801c:	6a 20                	push   0x20
c001801e:	6a 00                	push   0x0
c0018020:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0018027:	51                   	push   ecx
c0018028:	e8 67 86 fe ff       	call   c0000694 <memset>
c001802d:	59                   	pop    ecx
c001802e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018031:	8d 54 24 58          	lea    edx,[esp+0x58]
c0018035:	52                   	push   edx
c0018036:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001803d:	51                   	push   ecx
c001803e:	6a 00                	push   0x0
c0018040:	6a 1f                	push   0x1f
c0018042:	55                   	push   ebp
c0018043:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0018046:	83 c4 1c             	add    esp,0x1c
c0018049:	6a 09                	push   0x9
c001804b:	68 be 6b 02 c0       	push   0xc0026bbe
c0018050:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0018057:	51                   	push   ecx
c0018058:	e8 33 85 fe ff       	call   c0000590 <memcmp>
c001805d:	83 c4 10             	add    esp,0x10
c0018060:	85 c0                	test   eax,eax
c0018062:	75 21                	jne    c0018085 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0018064:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018068:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001806c:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0018070:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018074:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0018077:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001807e:	89 d0                	mov    eax,edx
c0018080:	40                   	inc    eax
c0018081:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018085:	50                   	push   eax
c0018086:	6a 09                	push   0x9
c0018088:	68 c8 6b 02 c0       	push   0xc0026bc8
c001808d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0018094:	50                   	push   eax
c0018095:	e8 f6 84 fe ff       	call   c0000590 <memcmp>
c001809a:	83 c4 10             	add    esp,0x10
c001809d:	85 c0                	test   eax,eax
c001809f:	75 21                	jne    c00180c2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c00180a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00180a5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00180a9:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00180ad:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00180b1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00180b4:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00180bb:	89 d0                	mov    eax,edx
c00180bd:	40                   	inc    eax
c00180be:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00180c2:	50                   	push   eax
c00180c3:	50                   	push   eax
c00180c4:	68 94 6b 02 c0       	push   0xc0026b94
c00180c9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00180d0:	50                   	push   eax
c00180d1:	e8 06 87 fe ff       	call   c00007dc <strcmp>
c00180d6:	83 c4 10             	add    esp,0x10
c00180d9:	85 c0                	test   eax,eax
c00180db:	75 0f                	jne    c00180ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c00180dd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00180e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00180e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180e8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00180ec:	50                   	push   eax
c00180ed:	50                   	push   eax
c00180ee:	68 9c 6b 02 c0       	push   0xc0026b9c
c00180f3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00180fa:	50                   	push   eax
c00180fb:	e8 dc 86 fe ff       	call   c00007dc <strcmp>
c0018100:	83 c4 10             	add    esp,0x10
c0018103:	85 c0                	test   eax,eax
c0018105:	75 0f                	jne    c0018116 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0018107:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001810a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001810e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018112:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018116:	43                   	inc    ebx
c0018117:	e9 c6 fe ff ff       	jmp    c0017fe2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001811c:	31 d2                	xor    edx,edx
c001811e:	50                   	push   eax
c001811f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018123:	52                   	push   edx
c0018124:	50                   	push   eax
c0018125:	55                   	push   ebp
c0018126:	e8 ef 56 ff ff       	call   c000d81a <File::seek(unsigned long long)>
c001812b:	58                   	pop    eax
c001812c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018130:	e8 b2 1c ff ff       	call   c0009de7 <malloc>
c0018135:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0018138:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001813c:	31 d2                	xor    edx,edx
c001813e:	58                   	pop    eax
c001813f:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0018143:	53                   	push   ebx
c0018144:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0018148:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001814c:	52                   	push   edx
c001814d:	50                   	push   eax
c001814e:	55                   	push   ebp
c001814f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0018152:	83 c4 14             	add    esp,0x14
c0018155:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018159:	e8 89 1c ff ff       	call   c0009de7 <malloc>
c001815e:	31 d2                	xor    edx,edx
c0018160:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018164:	83 c4 0c             	add    esp,0xc
c0018167:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001816b:	52                   	push   edx
c001816c:	50                   	push   eax
c001816d:	55                   	push   ebp
c001816e:	e8 a7 56 ff ff       	call   c000d81a <File::seek(unsigned long long)>
c0018173:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0018176:	31 d2                	xor    edx,edx
c0018178:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001817b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001817f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018183:	52                   	push   edx
c0018184:	50                   	push   eax
c0018185:	55                   	push   ebp
c0018186:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0018189:	83 c4 20             	add    esp,0x20
c001818c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0018194:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018198:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001819c:	0f 84 0b 03 00 00    	je     c00184ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c00181a2:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c00181a9:	31 d2                	xor    edx,edx
c00181ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00181af:	c1 e8 03             	shr    eax,0x3
c00181b2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00181b6:	51                   	push   ecx
c00181b7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00181bb:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00181bf:	52                   	push   edx
c00181c0:	50                   	push   eax
c00181c1:	55                   	push   ebp
c00181c2:	e8 53 56 ff ff       	call   c000d81a <File::seek(unsigned long long)>
c00181c7:	5b                   	pop    ebx
c00181c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181cc:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00181d3:	e8 0f 1c ff ff       	call   c0009de7 <malloc>
c00181d8:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00181db:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00181df:	31 d2                	xor    edx,edx
c00181e1:	5e                   	pop    esi
c00181e2:	8d 44 24 58          	lea    eax,[esp+0x58]
c00181e6:	50                   	push   eax
c00181e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00181eb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00181ef:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00181f6:	52                   	push   edx
c00181f7:	50                   	push   eax
c00181f8:	55                   	push   ebp
c00181f9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00181fc:	83 c4 20             	add    esp,0x20
c00181ff:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0018207:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001820b:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001820f:	0f 8d 7c 02 00 00    	jge    c0018491 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0018215:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018219:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001821d:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0018222:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0018225:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018229:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001822d:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0018231:	89 d8                	mov    eax,ebx
c0018233:	c1 e8 08             	shr    eax,0x8
c0018236:	89 c6                	mov    esi,eax
c0018238:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001823c:	c1 e6 04             	shl    esi,0x4
c001823f:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0018243:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0018246:	85 d2                	test   edx,edx
c0018248:	0f 85 bf 00 00 00    	jne    c001830d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001824e:	83 ec 0c             	sub    esp,0xc
c0018251:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018255:	03 06                	add    eax,DWORD PTR [esi]
c0018257:	50                   	push   eax
c0018258:	e8 4b f8 ff ff       	call   c0017aa8 <Thr::getAddressOfKernelSymbol(char const*)>
c001825d:	83 c4 10             	add    esp,0x10
c0018260:	89 c2                	mov    edx,eax
c0018262:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0018267:	85 c0                	test   eax,eax
c0018269:	0f 85 9e 00 00 00    	jne    c001830d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001826f:	83 ec 0c             	sub    esp,0xc
c0018272:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018276:	03 06                	add    eax,DWORD PTR [esi]
c0018278:	50                   	push   eax
c0018279:	e8 a2 06 ff ff       	call   c0008920 <Krnl::resolveCompatibilitySymbol(char*)>
c001827e:	83 c4 10             	add    esp,0x10
c0018281:	89 c2                	mov    edx,eax
c0018283:	85 c0                	test   eax,eax
c0018285:	0f 85 82 00 00 00    	jne    c001830d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001828b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001828f:	50                   	push   eax
c0018290:	50                   	push   eax
c0018291:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018295:	03 06                	add    eax,DWORD PTR [esi]
c0018297:	50                   	push   eax
c0018298:	68 d2 6b 02 c0       	push   0xc0026bd2
c001829d:	e8 75 4e ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c00182a2:	58                   	pop    eax
c00182a3:	5a                   	pop    edx
c00182a4:	68 ec 6b 02 c0       	push   0xc0026bec
c00182a9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00182b0:	50                   	push   eax
c00182b1:	e8 9a 84 fe ff       	call   c0000750 <strcpy>
c00182b6:	59                   	pop    ecx
c00182b7:	58                   	pop    eax
c00182b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182bc:	03 06                	add    eax,DWORD PTR [esi]
c00182be:	50                   	push   eax
c00182bf:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00182c6:	50                   	push   eax
c00182c7:	e8 c4 85 fe ff       	call   c0000890 <strcat>
c00182cc:	58                   	pop    eax
c00182cd:	5a                   	pop    edx
c00182ce:	68 82 6c 02 c0       	push   0xc0026c82
c00182d3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00182da:	50                   	push   eax
c00182db:	e8 b0 85 fe ff       	call   c0000890 <strcat>
c00182e0:	83 c4 10             	add    esp,0x10
c00182e3:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00182e8:	0f 84 5d 01 00 00    	je     c001844b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00182ee:	83 ec 0c             	sub    esp,0xc
c00182f1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00182f8:	50                   	push   eax
c00182f9:	e8 fb ce ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c00182fe:	83 c4 10             	add    esp,0x10
c0018301:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0018305:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018309:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001830d:	80 fb 01             	cmp    bl,0x1
c0018310:	0f 85 88 00 00 00    	jne    c001839e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0018316:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001831d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0018321:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0018325:	01 ce                	add    esi,ecx
c0018327:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001832d:	0f 94 c0             	sete   al
c0018330:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0018336:	0f 94 c3             	sete   bl
c0018339:	09 c3                	or     ebx,eax
c001833b:	8b 06                	mov    eax,DWORD PTR [esi]
c001833d:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0018342:	74 41                	je     c0018385 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0018344:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0018347:	84 db                	test   bl,bl
c0018349:	75 15                	jne    c0018360 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001834b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001834f:	66 83 f8 0c          	cmp    ax,0xc
c0018353:	76 05                	jbe    c001835a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0018355:	b8 0c 00 00 00       	mov    eax,0xc
c001835a:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001835e:	76 37                	jbe    c0018397 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0018360:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0018364:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018369:	0f 84 dc 00 00 00    	je     c001844b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001836f:	83 ec 0c             	sub    esp,0xc
c0018372:	68 03 6c 02 c0       	push   0xc0026c03
c0018377:	e8 7d ce ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c001837c:	83 c4 10             	add    esp,0x10
c001837f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0018383:	eb 12                	jmp    c0018397 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0018385:	01 c1                	add    ecx,eax
c0018387:	84 db                	test   bl,bl
c0018389:	75 0c                	jne    c0018397 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001838b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001838f:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0018393:	77 02                	ja     c0018397 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0018395:	01 d1                	add    ecx,edx
c0018397:	89 0e                	mov    DWORD PTR [esi],ecx
c0018399:	e9 ea 00 00 00       	jmp    c0018488 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001839e:	80 fb 02             	cmp    bl,0x2
c00183a1:	75 7c                	jne    c001841f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c00183a3:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c00183aa:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c00183ae:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c00183b2:	81 fb 01 04 00 00    	cmp    ebx,0x401
c00183b8:	74 20                	je     c00183da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c00183ba:	81 fb 01 01 00 00    	cmp    ebx,0x101
c00183c0:	74 18                	je     c00183da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c00183c2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00183c6:	b9 0a 00 00 00       	mov    ecx,0xa
c00183cb:	66 83 f8 0e          	cmp    ax,0xe
c00183cf:	77 03                	ja     c00183d4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c00183d1:	8d 48 fc             	lea    ecx,[eax-0x4]
c00183d4:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c00183d8:	76 1f                	jbe    c00183f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c00183da:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00183de:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00183e3:	74 66                	je     c001844b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00183e5:	83 ec 0c             	sub    esp,0xc
c00183e8:	68 1f 6c 02 c0       	push   0xc0026c1f
c00183ed:	e8 07 ce ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c00183f2:	83 c4 10             	add    esp,0x10
c00183f5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00183f9:	8b 06                	mov    eax,DWORD PTR [esi]
c00183fb:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0018400:	74 13                	je     c0018415 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0018402:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0018406:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001840d:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0018411:	01 c8                	add    eax,ecx
c0018413:	eb 04                	jmp    c0018419 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0018415:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0018419:	01 c2                	add    edx,eax
c001841b:	89 16                	mov    DWORD PTR [esi],edx
c001841d:	eb 69                	jmp    c0018488 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001841f:	0f b6 db             	movzx  ebx,bl
c0018422:	50                   	push   eax
c0018423:	50                   	push   eax
c0018424:	53                   	push   ebx
c0018425:	68 3b 6c 02 c0       	push   0xc0026c3b
c001842a:	e8 e8 4c ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c001842f:	83 c4 10             	add    esp,0x10
c0018432:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018437:	74 12                	je     c001844b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0018439:	83 ec 0c             	sub    esp,0xc
c001843c:	68 46 6c 02 c0       	push   0xc0026c46
c0018441:	e8 b3 cd ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c0018446:	83 c4 10             	add    esp,0x10
c0018449:	eb 3d                	jmp    c0018488 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001844b:	83 ec 0c             	sub    esp,0xc
c001844e:	55                   	push   ebp
c001844f:	e8 66 53 ff ff       	call   c000d7ba <File::close()>
c0018454:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018457:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001845a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001845d:	59                   	pop    ecx
c001845e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018462:	e8 90 19 ff ff       	call   c0009df7 <free>
c0018467:	5b                   	pop    ebx
c0018468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001846c:	e8 86 19 ff ff       	call   c0009df7 <free>
c0018471:	89 3c 24             	mov    DWORD PTR [esp],edi
c0018474:	e8 7e 19 ff ff       	call   c0009df7 <free>
c0018479:	5e                   	pop    esi
c001847a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001847e:	e8 74 19 ff ff       	call   c0009df7 <free>
c0018483:	83 c4 10             	add    esp,0x10
c0018486:	eb 21                	jmp    c00184a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0018488:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001848c:	e9 76 fd ff ff       	jmp    c0018207 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0018491:	83 ec 0c             	sub    esp,0xc
c0018494:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018498:	e8 5a 19 ff ff       	call   c0009df7 <free>
c001849d:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00184a1:	83 c4 10             	add    esp,0x10
c00184a4:	e9 eb fc ff ff       	jmp    c0018194 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c00184a9:	31 c0                	xor    eax,eax
c00184ab:	eb 33                	jmp    c00184e0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c00184ad:	83 ec 0c             	sub    esp,0xc
c00184b0:	55                   	push   ebp
c00184b1:	e8 04 53 ff ff       	call   c000d7ba <File::close()>
c00184b6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00184b9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00184bc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00184bf:	58                   	pop    eax
c00184c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00184c4:	e8 2e 19 ff ff       	call   c0009df7 <free>
c00184c9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00184cc:	e8 26 19 ff ff       	call   c0009df7 <free>
c00184d1:	5a                   	pop    edx
c00184d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00184d6:	e8 1c 19 ff ff       	call   c0009df7 <free>
c00184db:	83 c4 10             	add    esp,0x10
c00184de:	b0 01                	mov    al,0x1
c00184e0:	81 c4 5c 03 00 00    	add    esp,0x35c
c00184e6:	5b                   	pop    ebx
c00184e7:	5e                   	pop    esi
c00184e8:	5f                   	pop    edi
c00184e9:	5d                   	pop    ebp
c00184ea:	c3                   	ret    

c00184eb <Thr::getDriverBaseFromAddress(unsigned long)>:
c00184eb:	56                   	push   esi
c00184ec:	31 d2                	xor    edx,edx
c00184ee:	53                   	push   ebx
c00184ef:	8b 1d 60 99 02 c0    	mov    ebx,DWORD PTR ds:0xc0029960
c00184f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00184f9:	39 d3                	cmp    ebx,edx
c00184fb:	7e 1b                	jle    c0018518 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00184fd:	8b 04 95 80 9b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6480]
c0018504:	39 c8                	cmp    eax,ecx
c0018506:	77 0d                	ja     c0018515 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0018508:	8b 34 95 80 99 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd6680]
c001850f:	01 c6                	add    esi,eax
c0018511:	39 ce                	cmp    esi,ecx
c0018513:	77 05                	ja     c001851a <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0018515:	42                   	inc    edx
c0018516:	eb e1                	jmp    c00184f9 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0018518:	31 c0                	xor    eax,eax
c001851a:	5b                   	pop    ebx
c001851b:	5e                   	pop    esi
c001851c:	c3                   	ret    

c001851d <Thr::getDriverNameFromAddress(unsigned long)>:
c001851d:	53                   	push   ebx
c001851e:	31 c0                	xor    eax,eax
c0018520:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018524:	8b 1d 60 99 02 c0    	mov    ebx,DWORD PTR ds:0xc0029960
c001852a:	39 c3                	cmp    ebx,eax
c001852c:	7e 22                	jle    c0018550 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001852e:	8b 14 85 80 9b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6480]
c0018535:	39 ca                	cmp    edx,ecx
c0018537:	77 14                	ja     c001854d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0018539:	03 14 85 80 99 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd6680]
c0018540:	39 ca                	cmp    edx,ecx
c0018542:	76 09                	jbe    c001854d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0018544:	8b 04 85 80 9d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6280]
c001854b:	eb 05                	jmp    c0018552 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001854d:	40                   	inc    eax
c001854e:	eb da                	jmp    c001852a <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0018550:	31 c0                	xor    eax,eax
c0018552:	5b                   	pop    ebx
c0018553:	c3                   	ret    

c0018554 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0018554:	53                   	push   ebx
c0018555:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0018559:	53                   	push   ebx
c001855a:	e8 8c ff ff ff       	call   c00184eb <Thr::getDriverBaseFromAddress(unsigned long)>
c001855f:	5a                   	pop    edx
c0018560:	31 d2                	xor    edx,edx
c0018562:	85 c0                	test   eax,eax
c0018564:	74 04                	je     c001856a <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0018566:	89 da                	mov    edx,ebx
c0018568:	29 c2                	sub    edx,eax
c001856a:	89 d0                	mov    eax,edx
c001856c:	5b                   	pop    ebx
c001856d:	c3                   	ret    

c001856e <Thr::loadDLL(char const*, bool)>:
c001856e:	55                   	push   ebp
c001856f:	57                   	push   edi
c0018570:	56                   	push   esi
c0018571:	53                   	push   ebx
c0018572:	81 ec 34 01 00 00    	sub    esp,0x134
c0018578:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001857f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0018586:	56                   	push   esi
c0018587:	68 5e 6c 02 c0       	push   0xc0026c5e
c001858c:	e8 86 4b ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0018591:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018598:	e8 4a 18 ff ff       	call   c0009de7 <malloc>
c001859d:	83 c4 0c             	add    esp,0xc
c00185a0:	89 c3                	mov    ebx,eax
c00185a2:	ff 35 50 a1 02 c0    	push   DWORD PTR ds:0xc002a150
c00185a8:	56                   	push   esi
c00185a9:	50                   	push   eax
c00185aa:	e8 d3 50 ff ff       	call   c000d682 <File::File(char const*, Process*)>
c00185af:	83 c4 10             	add    esp,0x10
c00185b2:	85 db                	test   ebx,ebx
c00185b4:	75 3c                	jne    c00185f2 <Thr::loadDLL(char const*, bool)+0x84>
c00185b6:	89 f8                	mov    eax,edi
c00185b8:	84 c0                	test   al,al
c00185ba:	0f 84 d2 01 00 00    	je     c0018792 <Thr::loadDLL(char const*, bool)+0x224>
c00185c0:	55                   	push   ebp
c00185c1:	55                   	push   ebp
c00185c2:	68 6f 6c 02 c0       	push   0xc0026c6f
c00185c7:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c00185cb:	55                   	push   ebp
c00185cc:	e8 7f 81 fe ff       	call   c0000750 <strcpy>
c00185d1:	58                   	pop    eax
c00185d2:	5a                   	pop    edx
c00185d3:	56                   	push   esi
c00185d4:	55                   	push   ebp
c00185d5:	e8 b6 82 fe ff       	call   c0000890 <strcat>
c00185da:	59                   	pop    ecx
c00185db:	58                   	pop    eax
c00185dc:	68 82 6c 02 c0       	push   0xc0026c82
c00185e1:	55                   	push   ebp
c00185e2:	e8 a9 82 fe ff       	call   c0000890 <strcat>
c00185e7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00185ea:	e8 0a cc ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c00185ef:	83 c4 10             	add    esp,0x10
c00185f2:	51                   	push   ecx
c00185f3:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00185f7:	50                   	push   eax
c00185f8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00185fc:	50                   	push   eax
c00185fd:	53                   	push   ebx
c00185fe:	e8 05 54 ff ff       	call   c000da08 <File::stat(unsigned long long*, bool*)>
c0018603:	83 c4 10             	add    esp,0x10
c0018606:	85 db                	test   ebx,ebx
c0018608:	74 0c                	je     c0018616 <Thr::loadDLL(char const*, bool)+0xa8>
c001860a:	83 ec 0c             	sub    esp,0xc
c001860d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001860f:	53                   	push   ebx
c0018610:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018613:	83 c4 10             	add    esp,0x10
c0018616:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001861b:	75 0a                	jne    c0018627 <Thr::loadDLL(char const*, bool)+0xb9>
c001861d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018621:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0018625:	75 3c                	jne    c0018663 <Thr::loadDLL(char const*, bool)+0xf5>
c0018627:	89 f8                	mov    eax,edi
c0018629:	84 c0                	test   al,al
c001862b:	0f 84 49 01 00 00    	je     c001877a <Thr::loadDLL(char const*, bool)+0x20c>
c0018631:	51                   	push   ecx
c0018632:	51                   	push   ecx
c0018633:	68 6f 6c 02 c0       	push   0xc0026c6f
c0018638:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001863c:	53                   	push   ebx
c001863d:	e8 0e 81 fe ff       	call   c0000750 <strcpy>
c0018642:	5d                   	pop    ebp
c0018643:	58                   	pop    eax
c0018644:	56                   	push   esi
c0018645:	53                   	push   ebx
c0018646:	e8 45 82 fe ff       	call   c0000890 <strcat>
c001864b:	58                   	pop    eax
c001864c:	5a                   	pop    edx
c001864d:	68 82 6c 02 c0       	push   0xc0026c82
c0018652:	53                   	push   ebx
c0018653:	e8 38 82 fe ff       	call   c0000890 <strcat>
c0018658:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001865b:	e8 99 cb ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c0018660:	83 c4 10             	add    esp,0x10
c0018663:	52                   	push   edx
c0018664:	6a 03                	push   0x3
c0018666:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001866a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001866e:	05 ff 0f 00 00       	add    eax,0xfff
c0018673:	83 d2 00             	adc    edx,0x0
c0018676:	0f ac d0 0c          	shrd   eax,edx,0xc
c001867a:	50                   	push   eax
c001867b:	ff 35 34 8d 02 c0    	push   DWORD PTR ds:0xc0028d34
c0018681:	e8 88 3e ff ff       	call   c000c50e <VAS::allocatePages(int, int)>
c0018686:	59                   	pop    ecx
c0018687:	89 c3                	mov    ebx,eax
c0018689:	5d                   	pop    ebp
c001868a:	50                   	push   eax
c001868b:	68 6e 4b 02 c0       	push   0xc0024b6e
c0018690:	e8 82 4a ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0018695:	89 34 24             	mov    DWORD PTR [esp],esi
c0018698:	e8 13 80 fe ff       	call   c00006b0 <strlen>
c001869d:	8b 2d 60 99 02 c0    	mov    ebp,DWORD PTR ds:0xc0029960
c00186a3:	40                   	inc    eax
c00186a4:	89 04 24             	mov    DWORD PTR [esp],eax
c00186a7:	e8 3b 17 ff ff       	call   c0009de7 <malloc>
c00186ac:	89 04 ad 80 9d 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd6280],eax
c00186b3:	58                   	pop    eax
c00186b4:	a1 60 99 02 c0       	mov    eax,ds:0xc0029960
c00186b9:	5a                   	pop    edx
c00186ba:	56                   	push   esi
c00186bb:	ff 34 85 80 9d 02 c0 	push   DWORD PTR [eax*4-0x3ffd6280]
c00186c2:	e8 89 80 fe ff       	call   c0000750 <strcpy>
c00186c7:	a1 60 99 02 c0       	mov    eax,ds:0xc0029960
c00186cc:	8d 50 01             	lea    edx,[eax+0x1]
c00186cf:	89 1c 85 80 9b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6480],ebx
c00186d6:	89 15 60 99 02 c0    	mov    DWORD PTR ds:0xc0029960,edx
c00186dc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00186e0:	83 c4 0c             	add    esp,0xc
c00186e3:	89 14 85 80 99 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6680],edx
c00186ea:	6a 01                	push   0x1
c00186ec:	53                   	push   ebx
c00186ed:	56                   	push   esi
c00186ee:	e8 c2 f6 ff ff       	call   c0017db5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00186f3:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00186f7:	83 c4 10             	add    esp,0x10
c00186fa:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00186ff:	0f 85 89 00 00 00    	jne    c001878e <Thr::loadDLL(char const*, bool)+0x220>
c0018705:	89 f8                	mov    eax,edi
c0018707:	84 c0                	test   al,al
c0018709:	74 73                	je     c001877e <Thr::loadDLL(char const*, bool)+0x210>
c001870b:	83 ec 0c             	sub    esp,0xc
c001870e:	68 84 6c 02 c0       	push   0xc0026c84
c0018713:	e8 e1 ca ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c0018718:	83 c4 10             	add    esp,0x10
c001871b:	eb 61                	jmp    c001877e <Thr::loadDLL(char const*, bool)+0x210>
c001871d:	50                   	push   eax
c001871e:	50                   	push   eax
c001871f:	89 e8                	mov    eax,ebp
c0018721:	c1 e0 0c             	shl    eax,0xc
c0018724:	01 d8                	add    eax,ebx
c0018726:	50                   	push   eax
c0018727:	ff 35 34 8d 02 c0    	push   DWORD PTR ds:0xc0028d34
c001872d:	e8 44 39 ff ff       	call   c000c076 <VAS::getPageTableEntry(unsigned long)>
c0018732:	83 c4 10             	add    esp,0x10
c0018735:	8b 00                	mov    eax,DWORD PTR [eax]
c0018737:	a8 60                	test   al,0x60
c0018739:	75 11                	jne    c001874c <Thr::loadDLL(char const*, bool)+0x1de>
c001873b:	83 ec 0c             	sub    esp,0xc
c001873e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018743:	50                   	push   eax
c0018744:	e8 d2 1c ff ff       	call   c000a41b <Phys::freePage(unsigned long)>
c0018749:	83 c4 10             	add    esp,0x10
c001874c:	45                   	inc    ebp
c001874d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018751:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018755:	05 ff 0f 00 00       	add    eax,0xfff
c001875a:	bf 00 00 00 00       	mov    edi,0x0
c001875f:	83 d2 00             	adc    edx,0x0
c0018762:	0f ac d0 0c          	shrd   eax,edx,0xc
c0018766:	c1 ea 0c             	shr    edx,0xc
c0018769:	39 c5                	cmp    ebp,eax
c001876b:	89 d1                	mov    ecx,edx
c001876d:	89 f8                	mov    eax,edi
c001876f:	19 c8                	sbb    eax,ecx
c0018771:	72 aa                	jb     c001871d <Thr::loadDLL(char const*, bool)+0x1af>
c0018773:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0018778:	75 18                	jne    c0018792 <Thr::loadDLL(char const*, bool)+0x224>
c001877a:	31 db                	xor    ebx,ebx
c001877c:	eb 14                	jmp    c0018792 <Thr::loadDLL(char const*, bool)+0x224>
c001877e:	83 ec 0c             	sub    esp,0xc
c0018781:	68 a3 6c 02 c0       	push   0xc0026ca3
c0018786:	e8 6e ca ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c001878b:	83 c4 10             	add    esp,0x10
c001878e:	31 ed                	xor    ebp,ebp
c0018790:	eb bb                	jmp    c001874d <Thr::loadDLL(char const*, bool)+0x1df>
c0018792:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018798:	89 d8                	mov    eax,ebx
c001879a:	5b                   	pop    ebx
c001879b:	5e                   	pop    esi
c001879c:	5f                   	pop    edi
c001879d:	5d                   	pop    ebp
c001879e:	c3                   	ret    

c001879f <Thr::executeDLL(unsigned long, void*)>:
c001879f:	56                   	push   esi
c00187a0:	53                   	push   ebx
c00187a1:	52                   	push   edx
c00187a2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00187a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00187aa:	85 db                	test   ebx,ebx
c00187ac:	75 10                	jne    c00187be <Thr::executeDLL(unsigned long, void*)+0x1f>
c00187ae:	83 ec 0c             	sub    esp,0xc
c00187b1:	68 bf 6c 02 c0       	push   0xc0026cbf
c00187b6:	e8 3e ca ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c00187bb:	83 c4 10             	add    esp,0x10
c00187be:	50                   	push   eax
c00187bf:	50                   	push   eax
c00187c0:	53                   	push   ebx
c00187c1:	68 e9 6c 02 c0       	push   0xc0026ce9
c00187c6:	e8 4c 49 ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c00187cb:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00187cf:	89 d8                	mov    eax,ebx
c00187d1:	83 c4 14             	add    esp,0x14
c00187d4:	5b                   	pop    ebx
c00187d5:	5e                   	pop    esi
c00187d6:	ff e0                	jmp    eax

c00187d8 <userModeEntryPoint(void*)>:
c00187d8:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c00187dd:	48                   	dec    eax
c00187de:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c00187e3:	75 03                	jne    c00187e8 <userModeEntryPoint(void*)+0x10>
c00187e5:	fb                   	sti    
c00187e6:	66 90                	xchg   ax,ax
c00187e8:	fb                   	sti    
c00187e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00187ee:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00187f1:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00187f7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00187fb:	e9 6f 7a fe ff       	jmp    c000026f <goToUsermode>

c0018800 <changeTSS>:
c0018800:	83 ec 14             	sub    esp,0x14
c0018803:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018808:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001880b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0018810:	c1 e2 15             	shl    edx,0x15
c0018813:	29 d0                	sub    eax,edx
c0018815:	50                   	push   eax
c0018816:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c001881b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018821:	05 7c 11 00 00       	add    eax,0x117c
c0018826:	50                   	push   eax
c0018827:	e8 c8 2e ff ff       	call   c000b6f4 <TSS::setESP(unsigned long)>
c001882c:	83 c4 1c             	add    esp,0x1c
c001882f:	c3                   	ret    

c0018830 <switchToThread(ThreadControlBlock*)>:
c0018830:	57                   	push   edi
c0018831:	a1 24 a1 02 c0       	mov    eax,ds:0xc002a124
c0018836:	56                   	push   esi
c0018837:	85 c0                	test   eax,eax
c0018839:	53                   	push   ebx
c001883a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001883e:	0f 85 90 00 00 00    	jne    c00188d4 <switchToThread(ThreadControlBlock*)+0xa4>
c0018844:	8a 41 40             	mov    al,BYTE PTR [ecx+0x40]
c0018847:	3c ff                	cmp    al,0xff
c0018849:	0f 84 81 00 00 00    	je     c00188d0 <switchToThread(ThreadControlBlock*)+0xa0>
c001884f:	0f b6 d0             	movzx  edx,al
c0018852:	b8 00 04 00 00       	mov    eax,0x400
c0018857:	29 d0                	sub    eax,edx
c0018859:	d1 f8                	sar    eax,1
c001885b:	03 41 34             	add    eax,DWORD PTR [ecx+0x34]
c001885e:	66 90                	xchg   ax,ax
c0018860:	89 41 34             	mov    DWORD PTR [ecx+0x34],eax
c0018863:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c0018868:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001886e:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c0018875:	74 4d                	je     c00188c4 <switchToThread(ThreadControlBlock*)+0x94>
c0018877:	0f 31                	rdtsc  
c0018879:	a3 68 a1 02 c0       	mov    ds:0xc002a168,eax
c001887e:	89 c6                	mov    esi,eax
c0018880:	89 d7                	mov    edi,edx
c0018882:	2b 35 58 a1 02 c0    	sub    esi,DWORD PTR ds:0xc002a158
c0018888:	89 15 6c a1 02 c0    	mov    DWORD PTR ds:0xc002a16c,edx
c001888e:	1b 3d 5c a1 02 c0    	sbb    edi,DWORD PTR ds:0xc002a15c
c0018894:	89 35 60 a1 02 c0    	mov    DWORD PTR ds:0xc002a160,esi
c001889a:	a3 58 a1 02 c0       	mov    ds:0xc002a158,eax
c001889f:	89 3d 64 a1 02 c0    	mov    DWORD PTR ds:0xc002a164,edi
c00188a5:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c00188ab:	89 15 5c a1 02 c0    	mov    DWORD PTR ds:0xc002a15c,edx
c00188b1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00188b4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00188b7:	01 c6                	add    esi,eax
c00188b9:	11 d7                	adc    edi,edx
c00188bb:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c00188be:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c00188c1:	8d 76 00             	lea    esi,[esi+0x0]
c00188c4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00188c8:	5b                   	pop    ebx
c00188c9:	5e                   	pop    esi
c00188ca:	5f                   	pop    edi
c00188cb:	e9 d7 79 fe ff       	jmp    c00002a7 <switchToThreadASM>
c00188d0:	31 c0                	xor    eax,eax
c00188d2:	eb 8c                	jmp    c0018860 <switchToThread(ThreadControlBlock*)+0x30>
c00188d4:	5b                   	pop    ebx
c00188d5:	c7 05 20 a1 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002a120,0x1
c00188df:	5e                   	pop    esi
c00188e0:	5f                   	pop    edi
c00188e1:	c3                   	ret    
c00188e2:	66 90                	xchg   ax,ax

c00188e4 <Process::addArgs(char**)>:
c00188e4:	57                   	push   edi
c00188e5:	56                   	push   esi
c00188e6:	53                   	push   ebx
c00188e7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00188eb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00188ef:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c00188f9:	85 ff                	test   edi,edi
c00188fb:	74 43                	je     c0018940 <Process::addArgs(char**)+0x5c>
c00188fd:	8b 07                	mov    eax,DWORD PTR [edi]
c00188ff:	85 c0                	test   eax,eax
c0018901:	74 3d                	je     c0018940 <Process::addArgs(char**)+0x5c>
c0018903:	31 db                	xor    ebx,ebx
c0018905:	8d 76 00             	lea    esi,[esi+0x0]
c0018908:	83 ec 0c             	sub    esp,0xc
c001890b:	50                   	push   eax
c001890c:	e8 9f 7d fe ff       	call   c00006b0 <strlen>
c0018911:	40                   	inc    eax
c0018912:	89 04 24             	mov    DWORD PTR [esp],eax
c0018915:	e8 cd 14 ff ff       	call   c0009de7 <malloc>
c001891a:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0018921:	5a                   	pop    edx
c0018922:	59                   	pop    ecx
c0018923:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c0018926:	43                   	inc    ebx
c0018927:	50                   	push   eax
c0018928:	e8 23 7e fe ff       	call   c0000750 <strcpy>
c001892d:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0018933:	83 c4 10             	add    esp,0x10
c0018936:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0018939:	85 c0                	test   eax,eax
c001893b:	75 cb                	jne    c0018908 <Process::addArgs(char**)+0x24>
c001893d:	8d 76 00             	lea    esi,[esi+0x0]
c0018940:	5b                   	pop    ebx
c0018941:	5e                   	pop    esi
c0018942:	5f                   	pop    edi
c0018943:	c3                   	ret    

c0018944 <Process::Process(char const*, Process*, char**)>:
c0018944:	56                   	push   esi
c0018945:	53                   	push   ebx
c0018946:	83 ec 14             	sub    esp,0x14
c0018949:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001894d:	05 0c 02 00 00       	add    eax,0x20c
c0018952:	bb 07 00 00 00       	mov    ebx,0x7
c0018957:	89 c6                	mov    esi,eax
c0018959:	8d 76 00             	lea    esi,[esi+0x0]
c001895c:	85 db                	test   ebx,ebx
c001895e:	78 14                	js     c0018974 <Process::Process(char const*, Process*, char**)+0x30>
c0018960:	83 ec 0c             	sub    esp,0xc
c0018963:	56                   	push   esi
c0018964:	e8 83 af 00 00       	call   c00238ec <ThreadControlBlock::ThreadControlBlock()>
c0018969:	83 c4 10             	add    esp,0x10
c001896c:	83 c6 5f             	add    esi,0x5f
c001896f:	4b                   	dec    ebx
c0018970:	eb ea                	jmp    c001895c <Process::Process(char const*, Process*, char**)+0x18>
c0018972:	66 90                	xchg   ax,ax
c0018974:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018978:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001897f:	83 ec 0c             	sub    esp,0xc
c0018982:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018986:	e8 f7 c6 ff ff       	call   c0015082 <Krnl::newProcessEnv(Process*)>
c001898b:	83 c4 10             	add    esp,0x10
c001898e:	89 c2                	mov    edx,eax
c0018990:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018994:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c001899a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001899e:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00189a7:	a1 30 86 02 c0       	mov    eax,ds:0xc0028630
c00189ac:	8d 50 01             	lea    edx,[eax+0x1]
c00189af:	89 15 30 86 02 c0    	mov    DWORD PTR ds:0xc0028630,edx
c00189b5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00189b9:	89 02                	mov    DWORD PTR [edx],eax
c00189bb:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00189c3:	83 ec 0c             	sub    esp,0xc
c00189c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00189ca:	e8 18 14 ff ff       	call   c0009de7 <malloc>
c00189cf:	83 c4 10             	add    esp,0x10
c00189d2:	89 c3                	mov    ebx,eax
c00189d4:	83 ec 08             	sub    esp,0x8
c00189d7:	6a 00                	push   0x0
c00189d9:	53                   	push   ebx
c00189da:	e8 d7 3e ff ff       	call   c000c8b6 <VAS::VAS(bool)>
c00189df:	83 c4 10             	add    esp,0x10
c00189e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189e6:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00189ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189f0:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00189fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189fe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018a02:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0018a08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a0c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018a12:	85 c0                	test   eax,eax
c0018a14:	74 42                	je     c0018a58 <Process::Process(char const*, Process*, char**)+0x114>
c0018a16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a1a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018a20:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0018a26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a2a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0018a30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a34:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018a3a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0018a40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a44:	05 0c 01 00 00       	add    eax,0x10c
c0018a49:	83 ec 08             	sub    esp,0x8
c0018a4c:	52                   	push   edx
c0018a4d:	50                   	push   eax
c0018a4e:	e8 fd 7c fe ff       	call   c0000750 <strcpy>
c0018a53:	83 c4 10             	add    esp,0x10
c0018a56:	eb 64                	jmp    c0018abc <Process::Process(char const*, Process*, char**)+0x178>
c0018a58:	c7 44 24 04 b4 01 00 00 	mov    DWORD PTR [esp+0x4],0x1b4
c0018a60:	83 ec 0c             	sub    esp,0xc
c0018a63:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018a67:	e8 7b 13 ff ff       	call   c0009de7 <malloc>
c0018a6c:	83 c4 10             	add    esp,0x10
c0018a6f:	89 c3                	mov    ebx,eax
c0018a71:	83 ec 08             	sub    esp,0x8
c0018a74:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018a78:	53                   	push   ebx
c0018a79:	e8 8a 29 ff ff       	call   c000b408 <VgaText::VgaText(char const*)>
c0018a7e:	83 c4 10             	add    esp,0x10
c0018a81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a85:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0018a8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a8f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018a95:	83 ec 0c             	sub    esp,0xc
c0018a98:	50                   	push   eax
c0018a99:	e8 29 21 ff ff       	call   c000abc7 <addToTerminalCycle(VgaText*)>
c0018a9e:	83 c4 10             	add    esp,0x10
c0018aa1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018aa5:	05 0c 01 00 00       	add    eax,0x10c
c0018aaa:	83 ec 08             	sub    esp,0x8
c0018aad:	68 08 6d 02 c0       	push   0xc0026d08
c0018ab2:	50                   	push   eax
c0018ab3:	e8 98 7c fe ff       	call   c0000750 <strcpy>
c0018ab8:	83 c4 10             	add    esp,0x10
c0018abb:	90                   	nop
c0018abc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018ac0:	83 c0 0c             	add    eax,0xc
c0018ac3:	83 ec 08             	sub    esp,0x8
c0018ac6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018aca:	50                   	push   eax
c0018acb:	e8 80 7c fe ff       	call   c0000750 <strcpy>
c0018ad0:	83 c4 10             	add    esp,0x10
c0018ad3:	83 ec 08             	sub    esp,0x8
c0018ad6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018ada:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018ade:	e8 01 fe ff ff       	call   c00188e4 <Process::addArgs(char**)>
c0018ae3:	83 c4 10             	add    esp,0x10
c0018ae6:	83 ec 08             	sub    esp,0x8
c0018ae9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018aed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018af1:	e8 89 ed ff ff       	call   c001787f <Thr::loadProgramIntoMemory(Process*, char const*)>
c0018af6:	83 c4 10             	add    esp,0x10
c0018af9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018afd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018b01:	83 f0 01             	xor    eax,0x1
c0018b04:	88 c2                	mov    dl,al
c0018b06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018b0a:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0018b10:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0018b15:	83 ec 08             	sub    esp,0x8
c0018b18:	50                   	push   eax
c0018b19:	68 60 6d 02 c0       	push   0xc0026d60
c0018b1e:	e8 f4 45 ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0018b23:	83 c4 10             	add    esp,0x10
c0018b26:	90                   	nop
c0018b27:	83 c4 14             	add    esp,0x14
c0018b2a:	5b                   	pop    ebx
c0018b2b:	5e                   	pop    esi
c0018b2c:	c3                   	ret    
c0018b2d:	90                   	nop
c0018b2e:	66 90                	xchg   ax,ax

c0018b30 <Process::Process(bool, char const*, Process*, char**)>:
c0018b30:	56                   	push   esi
c0018b31:	53                   	push   ebx
c0018b32:	83 ec 24             	sub    esp,0x24
c0018b35:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018b39:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018b3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018b41:	05 0c 02 00 00       	add    eax,0x20c
c0018b46:	bb 07 00 00 00       	mov    ebx,0x7
c0018b4b:	89 c6                	mov    esi,eax
c0018b4d:	8d 76 00             	lea    esi,[esi+0x0]
c0018b50:	85 db                	test   ebx,ebx
c0018b52:	78 14                	js     c0018b68 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0018b54:	83 ec 0c             	sub    esp,0xc
c0018b57:	56                   	push   esi
c0018b58:	e8 8f ad 00 00       	call   c00238ec <ThreadControlBlock::ThreadControlBlock()>
c0018b5d:	83 c4 10             	add    esp,0x10
c0018b60:	83 c6 5f             	add    esi,0x5f
c0018b63:	4b                   	dec    ebx
c0018b64:	eb ea                	jmp    c0018b50 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0018b66:	66 90                	xchg   ax,ax
c0018b68:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018b6c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0018b73:	83 ec 0c             	sub    esp,0xc
c0018b76:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018b7a:	e8 03 c5 ff ff       	call   c0015082 <Krnl::newProcessEnv(Process*)>
c0018b7f:	83 c4 10             	add    esp,0x10
c0018b82:	89 c2                	mov    edx,eax
c0018b84:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018b88:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0018b8e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018b92:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0018b9b:	a1 30 86 02 c0       	mov    eax,ds:0xc0028630
c0018ba0:	8d 50 01             	lea    edx,[eax+0x1]
c0018ba3:	89 15 30 86 02 c0    	mov    DWORD PTR ds:0xc0028630,edx
c0018ba9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018bad:	89 02                	mov    DWORD PTR [edx],eax
c0018baf:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0018bb7:	83 ec 0c             	sub    esp,0xc
c0018bba:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0018bbe:	e8 24 12 ff ff       	call   c0009de7 <malloc>
c0018bc3:	83 c4 10             	add    esp,0x10
c0018bc6:	89 c3                	mov    ebx,eax
c0018bc8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018bcd:	83 ec 08             	sub    esp,0x8
c0018bd0:	50                   	push   eax
c0018bd1:	53                   	push   ebx
c0018bd2:	e8 df 3c ff ff       	call   c000c8b6 <VAS::VAS(bool)>
c0018bd7:	83 c4 10             	add    esp,0x10
c0018bda:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018bde:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0018be4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018be8:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0018bf2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018bf6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018bfa:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0018c00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c04:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018c0a:	85 c0                	test   eax,eax
c0018c0c:	74 42                	je     c0018c50 <Process::Process(bool, char const*, Process*, char**)+0x120>
c0018c0e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c12:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018c18:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0018c1e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c22:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0018c28:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c2c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018c32:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0018c38:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c3c:	05 0c 01 00 00       	add    eax,0x10c
c0018c41:	83 ec 08             	sub    esp,0x8
c0018c44:	52                   	push   edx
c0018c45:	50                   	push   eax
c0018c46:	e8 05 7b fe ff       	call   c0000750 <strcpy>
c0018c4b:	83 c4 10             	add    esp,0x10
c0018c4e:	eb 64                	jmp    c0018cb4 <Process::Process(bool, char const*, Process*, char**)+0x184>
c0018c50:	c7 44 24 18 b4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1b4
c0018c58:	83 ec 0c             	sub    esp,0xc
c0018c5b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0018c5f:	e8 83 11 ff ff       	call   c0009de7 <malloc>
c0018c64:	83 c4 10             	add    esp,0x10
c0018c67:	89 c3                	mov    ebx,eax
c0018c69:	83 ec 08             	sub    esp,0x8
c0018c6c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0018c70:	53                   	push   ebx
c0018c71:	e8 92 27 ff ff       	call   c000b408 <VgaText::VgaText(char const*)>
c0018c76:	83 c4 10             	add    esp,0x10
c0018c79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c7d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0018c83:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c87:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018c8d:	83 ec 0c             	sub    esp,0xc
c0018c90:	50                   	push   eax
c0018c91:	e8 31 1f ff ff       	call   c000abc7 <addToTerminalCycle(VgaText*)>
c0018c96:	83 c4 10             	add    esp,0x10
c0018c99:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c9d:	05 0c 01 00 00       	add    eax,0x10c
c0018ca2:	83 ec 08             	sub    esp,0x8
c0018ca5:	68 08 6d 02 c0       	push   0xc0026d08
c0018caa:	50                   	push   eax
c0018cab:	e8 a0 7a fe ff       	call   c0000750 <strcpy>
c0018cb0:	83 c4 10             	add    esp,0x10
c0018cb3:	90                   	nop
c0018cb4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018cb8:	83 c0 0c             	add    eax,0xc
c0018cbb:	83 ec 08             	sub    esp,0x8
c0018cbe:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0018cc2:	50                   	push   eax
c0018cc3:	e8 88 7a fe ff       	call   c0000750 <strcpy>
c0018cc8:	83 c4 10             	add    esp,0x10
c0018ccb:	83 ec 08             	sub    esp,0x8
c0018cce:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018cd2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018cd6:	e8 09 fc ff ff       	call   c00188e4 <Process::addArgs(char**)>
c0018cdb:	83 c4 10             	add    esp,0x10
c0018cde:	90                   	nop
c0018cdf:	83 c4 24             	add    esp,0x24
c0018ce2:	5b                   	pop    ebx
c0018ce3:	5e                   	pop    esi
c0018ce4:	c3                   	ret    
c0018ce5:	8d 76 00             	lea    esi,[esi+0x0]

c0018ce8 <taskStartupFunction>:
c0018ce8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018ced:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0018cf0:	c3                   	ret    
c0018cf1:	90                   	nop
c0018cf2:	66 90                	xchg   ax,ax

c0018cf4 <Semaphore::Semaphore(int)>:
c0018cf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018cf8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018cfc:	89 10                	mov    DWORD PTR [eax],edx
c0018cfe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018d02:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018d09:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018d0d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018d14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018d18:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0018d1f:	90                   	nop
c0018d20:	c3                   	ret    
c0018d21:	90                   	nop
c0018d22:	66 90                	xchg   ax,ax

c0018d24 <Mutex::Mutex()>:
c0018d24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018d28:	6a 01                	push   0x1
c0018d2a:	50                   	push   eax
c0018d2b:	e8 c4 ff ff ff       	call   c0018cf4 <Semaphore::Semaphore(int)>
c0018d30:	83 c4 08             	add    esp,0x8
c0018d33:	90                   	nop
c0018d34:	c3                   	ret    
c0018d35:	90                   	nop
c0018d36:	66 90                	xchg   ax,ax

c0018d38 <Process::createThread(void (*)(void*), void*, int)>:
c0018d38:	57                   	push   edi
c0018d39:	31 c9                	xor    ecx,ecx
c0018d3b:	56                   	push   esi
c0018d3c:	53                   	push   ebx
c0018d3d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018d41:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0018d48:	89 f2                	mov    edx,esi
c0018d4a:	66 90                	xchg   ax,ax
c0018d4c:	0f b7 c2             	movzx  eax,dx
c0018d4f:	83 e2 01             	and    edx,0x1
c0018d52:	74 14                	je     c0018d68 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0018d54:	d1 f8                	sar    eax,1
c0018d56:	41                   	inc    ecx
c0018d57:	89 c2                	mov    edx,eax
c0018d59:	83 f9 10             	cmp    ecx,0x10
c0018d5c:	75 ee                	jne    c0018d4c <Process::createThread(void (*)(void*), void*, int)+0x14>
c0018d5e:	31 db                	xor    ebx,ebx
c0018d60:	89 d8                	mov    eax,ebx
c0018d62:	5b                   	pop    ebx
c0018d63:	5e                   	pop    esi
c0018d64:	5f                   	pop    edi
c0018d65:	c3                   	ret    
c0018d66:	66 90                	xchg   ax,ax
c0018d68:	b8 01 00 00 00       	mov    eax,0x1
c0018d6d:	d3 e0                	shl    eax,cl
c0018d6f:	09 c6                	or     esi,eax
c0018d71:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0018d74:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0018d7b:	01 c0                	add    eax,eax
c0018d7d:	01 c8                	add    eax,ecx
c0018d7f:	8d 04 80             	lea    eax,[eax+eax*4]
c0018d82:	01 d8                	add    eax,ebx
c0018d84:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0018d8b:	75 0b                	jne    c0018d98 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0018d8d:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0018d97:	90                   	nop
c0018d98:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0018d9e:	83 ec 08             	sub    esp,0x8
c0018da1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018da4:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0018da7:	01 c0                	add    eax,eax
c0018da9:	01 c8                	add    eax,ecx
c0018dab:	8d 3c 80             	lea    edi,[eax+eax*4]
c0018dae:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0018db1:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0018db7:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0018dbd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018dc1:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0018dc7:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0018dcd:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0018dd4:	89 ca                	mov    edx,ecx
c0018dd6:	f7 da                	neg    edx
c0018dd8:	c1 e2 15             	shl    edx,0x15
c0018ddb:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0018de1:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0018de7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018deb:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0018df5:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0018dfb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018dff:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0018e05:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0018e0f:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0018e19:	53                   	push   ebx
c0018e1a:	68 44 a1 02 c0       	push   0xc002a144
c0018e1f:	e8 68 a8 00 00       	call   c002368c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018e24:	83 c4 10             	add    esp,0x10
c0018e27:	89 d8                	mov    eax,ebx
c0018e29:	5b                   	pop    ebx
c0018e2a:	5e                   	pop    esi
c0018e2b:	5f                   	pop    edi
c0018e2c:	c3                   	ret    
c0018e2d:	90                   	nop
c0018e2e:	66 90                	xchg   ax,ax

c0018e30 <Process::createUserThread()>:
c0018e30:	83 ec 0c             	sub    esp,0xc
c0018e33:	68 80 00 00 00       	push   0x80
c0018e38:	6a 00                	push   0x0
c0018e3a:	68 d8 87 01 c0       	push   0xc00187d8
c0018e3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018e43:	e8 f0 fe ff ff       	call   c0018d38 <Process::createThread(void (*)(void*), void*, int)>
c0018e48:	83 c4 1c             	add    esp,0x1c
c0018e4b:	c3                   	ret    

c0018e4c <setupMultitasking(void (*)())>:
c0018e4c:	56                   	push   esi
c0018e4d:	53                   	push   ebx
c0018e4e:	51                   	push   ecx
c0018e4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018e53:	eb 13                	jmp    c0018e68 <setupMultitasking(void (*)())+0x1c>
c0018e55:	8d 76 00             	lea    esi,[esi+0x0]
c0018e58:	83 ec 0c             	sub    esp,0xc
c0018e5b:	68 44 a1 02 c0       	push   0xc002a144
c0018e60:	e8 6f a7 00 00       	call   c00235d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018e65:	83 c4 10             	add    esp,0x10
c0018e68:	83 ec 0c             	sub    esp,0xc
c0018e6b:	68 44 a1 02 c0       	push   0xc002a144
c0018e70:	e8 3b a7 00 00       	call   c00235b0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018e75:	83 c4 10             	add    esp,0x10
c0018e78:	84 c0                	test   al,al
c0018e7a:	74 dc                	je     c0018e58 <setupMultitasking(void (*)())+0xc>
c0018e7c:	83 ec 0c             	sub    esp,0xc
c0018e7f:	68 1f 07 00 00       	push   0x71f
c0018e84:	e8 5e 0f ff ff       	call   c0009de7 <malloc>
c0018e89:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018e90:	89 c3                	mov    ebx,eax
c0018e92:	6a 00                	push   0x0
c0018e94:	68 0c 6d 02 c0       	push   0xc0026d0c
c0018e99:	6a 01                	push   0x1
c0018e9b:	50                   	push   eax
c0018e9c:	e8 8f fc ff ff       	call   c0018b30 <Process::Process(bool, char const*, Process*, char**)>
c0018ea1:	83 c4 14             	add    esp,0x14
c0018ea4:	89 1d 50 a1 02 c0    	mov    DWORD PTR ds:0xc002a150,ebx
c0018eaa:	ff b3 06 05 00 00    	push   DWORD PTR [ebx+0x506]
c0018eb0:	e8 20 20 ff ff       	call   c000aed5 <setActiveTerminal(VgaText*)>
c0018eb5:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0018ebd:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0018ec7:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0018ecd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018ed0:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0018eda:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0018ee0:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0018ee6:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0018ef0:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0018efa:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0018f04:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0018f0a:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0018f14:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0018f1a:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0018f24:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0018f2a:	58                   	pop    eax
c0018f2b:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0018f31:	5a                   	pop    edx
c0018f32:	68 08 6d 02 c0       	push   0xc0026d08
c0018f37:	50                   	push   eax
c0018f38:	e8 13 78 fe ff       	call   c0000750 <strcpy>
c0018f3d:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0018f44:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0018f48:	83 c4 14             	add    esp,0x14
c0018f4b:	5b                   	pop    ebx
c0018f4c:	5e                   	pop    esi
c0018f4d:	e9 47 73 fe ff       	jmp    c0000299 <switchToThreadASMFirstTime>
c0018f52:	66 90                	xchg   ax,ax

c0018f54 <schedule()>:
c0018f54:	a1 24 a1 02 c0       	mov    eax,ds:0xc002a124
c0018f59:	85 c0                	test   eax,eax
c0018f5b:	74 0b                	je     c0018f68 <schedule()+0x14>
c0018f5d:	c7 05 20 a1 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002a120,0x1
c0018f67:	c3                   	ret    
c0018f68:	53                   	push   ebx
c0018f69:	83 ec 14             	sub    esp,0x14
c0018f6c:	68 44 a1 02 c0       	push   0xc002a144
c0018f71:	e8 3a a6 00 00       	call   c00235b0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018f76:	83 c4 10             	add    esp,0x10
c0018f79:	84 c0                	test   al,al
c0018f7b:	75 3b                	jne    c0018fb8 <schedule()+0x64>
c0018f7d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f82:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0018f85:	4a                   	dec    edx
c0018f86:	74 38                	je     c0018fc0 <schedule()+0x6c>
c0018f88:	83 ec 0c             	sub    esp,0xc
c0018f8b:	68 44 a1 02 c0       	push   0xc002a144
c0018f90:	e8 37 a6 00 00       	call   c00235cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018f95:	c7 04 24 44 a1 02 c0 	mov    DWORD PTR [esp],0xc002a144
c0018f9c:	89 c3                	mov    ebx,eax
c0018f9e:	e8 31 a6 00 00       	call   c00235d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018fa3:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0018faa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018fad:	e8 7e f8 ff ff       	call   c0018830 <switchToThread(ThreadControlBlock*)>
c0018fb2:	83 c4 10             	add    esp,0x10
c0018fb5:	8d 76 00             	lea    esi,[esi+0x0]
c0018fb8:	83 c4 08             	add    esp,0x8
c0018fbb:	5b                   	pop    ebx
c0018fbc:	c3                   	ret    
c0018fbd:	8d 76 00             	lea    esi,[esi+0x0]
c0018fc0:	83 ec 08             	sub    esp,0x8
c0018fc3:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0018fca:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0018fd0:	68 44 a1 02 c0       	push   0xc002a144
c0018fd5:	e8 b2 a6 00 00       	call   c002368c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018fda:	83 c4 10             	add    esp,0x10
c0018fdd:	eb a9                	jmp    c0018f88 <schedule()+0x34>
c0018fdf:	90                   	nop

c0018fe0 <Semaphore::tryAcquire()>:
c0018fe0:	53                   	push   ebx
c0018fe1:	83 ec 08             	sub    esp,0x8
c0018fe4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018fe8:	fa                   	cli    
c0018fe9:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c0018fee:	8d 50 01             	lea    edx,[eax+0x1]
c0018ff1:	89 15 28 a1 02 c0    	mov    DWORD PTR ds:0xc002a128,edx
c0018ff7:	8b 15 24 a1 02 c0    	mov    edx,DWORD PTR ds:0xc002a124
c0018ffd:	8d 5a 01             	lea    ebx,[edx+0x1]
c0019000:	89 1d 24 a1 02 c0    	mov    DWORD PTR ds:0xc002a124,ebx
c0019006:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0019009:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001900b:	7c 33                	jl     c0019040 <Semaphore::tryAcquire()+0x60>
c001900d:	89 15 24 a1 02 c0    	mov    DWORD PTR ds:0xc002a124,edx
c0019013:	85 d2                	test   edx,edx
c0019015:	75 0d                	jne    c0019024 <Semaphore::tryAcquire()+0x44>
c0019017:	8b 15 20 a1 02 c0    	mov    edx,DWORD PTR ds:0xc002a120
c001901d:	85 d2                	test   edx,edx
c001901f:	75 6b                	jne    c001908c <Semaphore::tryAcquire()+0xac>
c0019021:	8d 76 00             	lea    esi,[esi+0x0]
c0019024:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c0019029:	85 c0                	test   eax,eax
c001902b:	74 0b                	je     c0019038 <Semaphore::tryAcquire()+0x58>
c001902d:	8d 76 00             	lea    esi,[esi+0x0]
c0019030:	31 c0                	xor    eax,eax
c0019032:	83 c4 08             	add    esp,0x8
c0019035:	5b                   	pop    ebx
c0019036:	c3                   	ret    
c0019037:	90                   	nop
c0019038:	fb                   	sti    
c0019039:	83 c4 08             	add    esp,0x8
c001903c:	5b                   	pop    ebx
c001903d:	c3                   	ret    
c001903e:	66 90                	xchg   ax,ax
c0019040:	43                   	inc    ebx
c0019041:	89 15 24 a1 02 c0    	mov    DWORD PTR ds:0xc002a124,edx
c0019047:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001904a:	85 d2                	test   edx,edx
c001904c:	75 22                	jne    c0019070 <Semaphore::tryAcquire()+0x90>
c001904e:	8b 0d 20 a1 02 c0    	mov    ecx,DWORD PTR ds:0xc002a120
c0019054:	85 c9                	test   ecx,ecx
c0019056:	74 18                	je     c0019070 <Semaphore::tryAcquire()+0x90>
c0019058:	c7 05 20 a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a120,0x0
c0019062:	e8 ed fe ff ff       	call   c0018f54 <schedule()>
c0019067:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c001906c:	48                   	dec    eax
c001906d:	8d 76 00             	lea    esi,[esi+0x0]
c0019070:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c0019075:	85 c0                	test   eax,eax
c0019077:	75 0b                	jne    c0019084 <Semaphore::tryAcquire()+0xa4>
c0019079:	fb                   	sti    
c001907a:	b0 01                	mov    al,0x1
c001907c:	83 c4 08             	add    esp,0x8
c001907f:	5b                   	pop    ebx
c0019080:	c3                   	ret    
c0019081:	8d 76 00             	lea    esi,[esi+0x0]
c0019084:	b0 01                	mov    al,0x1
c0019086:	83 c4 08             	add    esp,0x8
c0019089:	5b                   	pop    ebx
c001908a:	c3                   	ret    
c001908b:	90                   	nop
c001908c:	c7 05 20 a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a120,0x0
c0019096:	e8 b9 fe ff ff       	call   c0018f54 <schedule()>
c001909b:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c00190a0:	48                   	dec    eax
c00190a1:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c00190a6:	85 c0                	test   eax,eax
c00190a8:	75 86                	jne    c0019030 <Semaphore::tryAcquire()+0x50>
c00190aa:	eb 8c                	jmp    c0019038 <Semaphore::tryAcquire()+0x58>

c00190ac <Semaphore::assertLocked(char const*)>:
c00190ac:	83 ec 0c             	sub    esp,0xc
c00190af:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00190b3:	fa                   	cli    
c00190b4:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c00190ba:	a1 24 a1 02 c0       	mov    eax,ds:0xc002a124
c00190bf:	8d 48 01             	lea    ecx,[eax+0x1]
c00190c2:	89 0d 24 a1 02 c0    	mov    DWORD PTR ds:0xc002a124,ecx
c00190c8:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00190ca:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c00190cd:	7c 29                	jl     c00190f8 <Semaphore::assertLocked(char const*)+0x4c>
c00190cf:	90                   	nop
c00190d0:	a3 24 a1 02 c0       	mov    ds:0xc002a124,eax
c00190d5:	85 c0                	test   eax,eax
c00190d7:	75 0b                	jne    c00190e4 <Semaphore::assertLocked(char const*)+0x38>
c00190d9:	a1 20 a1 02 c0       	mov    eax,ds:0xc002a120
c00190de:	85 c0                	test   eax,eax
c00190e0:	75 2e                	jne    c0019110 <Semaphore::assertLocked(char const*)+0x64>
c00190e2:	66 90                	xchg   ax,ax
c00190e4:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c00190e9:	48                   	dec    eax
c00190ea:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c00190ef:	75 03                	jne    c00190f4 <Semaphore::assertLocked(char const*)+0x48>
c00190f1:	fb                   	sti    
c00190f2:	66 90                	xchg   ax,ax
c00190f4:	83 c4 0c             	add    esp,0xc
c00190f7:	c3                   	ret    
c00190f8:	83 ec 0c             	sub    esp,0xc
c00190fb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00190ff:	e8 f5 c0 ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c0019104:	a1 24 a1 02 c0       	mov    eax,ds:0xc002a124
c0019109:	83 c4 10             	add    esp,0x10
c001910c:	48                   	dec    eax
c001910d:	eb c1                	jmp    c00190d0 <Semaphore::assertLocked(char const*)+0x24>
c001910f:	90                   	nop
c0019110:	c7 05 20 a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a120,0x0
c001911a:	e8 35 fe ff ff       	call   c0018f54 <schedule()>
c001911f:	eb c3                	jmp    c00190e4 <Semaphore::assertLocked(char const*)+0x38>
c0019121:	8d 76 00             	lea    esi,[esi+0x0]

c0019124 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0019124:	83 ec 0c             	sub    esp,0xc
c0019127:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001912c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019130:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019133:	e8 1c fe ff ff       	call   c0018f54 <schedule()>
c0019138:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c001913d:	48                   	dec    eax
c001913e:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c0019143:	75 03                	jne    c0019148 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0019145:	fb                   	sti    
c0019146:	66 90                	xchg   ax,ax
c0019148:	83 c4 0c             	add    esp,0xc
c001914b:	c3                   	ret    

c001914c <blockTask(TaskState)>:
c001914c:	83 ec 0c             	sub    esp,0xc
c001914f:	fa                   	cli    
c0019150:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c0019156:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001915a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001915f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019162:	e8 ed fd ff ff       	call   c0018f54 <schedule()>
c0019167:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c001916c:	48                   	dec    eax
c001916d:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c0019172:	75 04                	jne    c0019178 <blockTask(TaskState)+0x2c>
c0019174:	fb                   	sti    
c0019175:	8d 76 00             	lea    esi,[esi+0x0]
c0019178:	83 c4 0c             	add    esp,0xc
c001917b:	c3                   	ret    

c001917c <waitTask(int, int*, int)>:
c001917c:	83 ec 18             	sub    esp,0x18
c001917f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019184:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019188:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c001918b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001918f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019194:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0019197:	6a 07                	push   0x7
c0019199:	e8 ae ff ff ff       	call   c001914c <blockTask(TaskState)>
c001919e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00191a3:	83 c4 10             	add    esp,0x10
c00191a6:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00191a9:	85 d2                	test   edx,edx
c00191ab:	74 0b                	je     c00191b8 <waitTask(int, int*, int)+0x3c>
c00191ad:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00191b0:	89 02                	mov    DWORD PTR [edx],eax
c00191b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00191b7:	90                   	nop
c00191b8:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00191bb:	83 c4 0c             	add    esp,0xc
c00191be:	c3                   	ret    
c00191bf:	90                   	nop

c00191c0 <milliTenthSleepUntil(unsigned int)>:
c00191c0:	83 ec 0c             	sub    esp,0xc
c00191c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00191c7:	39 05 2c 92 02 c0    	cmp    DWORD PTR ds:0xc002922c,eax
c00191cd:	76 05                	jbe    c00191d4 <milliTenthSleepUntil(unsigned int)+0x14>
c00191cf:	90                   	nop
c00191d0:	83 c4 0c             	add    esp,0xc
c00191d3:	c3                   	ret    
c00191d4:	fa                   	cli    
c00191d5:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c00191db:	83 ec 08             	sub    esp,0x8
c00191de:	ff 05 24 a1 02 c0    	inc    DWORD PTR ds:0xc002a124
c00191e4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00191ea:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c00191ed:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c00191f3:	68 38 a1 02 c0       	push   0xc002a138
c00191f8:	e8 8f a4 00 00       	call   c002368c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00191fd:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0019204:	e8 43 ff ff ff       	call   c001914c <blockTask(TaskState)>
c0019209:	a1 24 a1 02 c0       	mov    eax,ds:0xc002a124
c001920e:	83 c4 10             	add    esp,0x10
c0019211:	48                   	dec    eax
c0019212:	a3 24 a1 02 c0       	mov    ds:0xc002a124,eax
c0019217:	85 c0                	test   eax,eax
c0019219:	75 09                	jne    c0019224 <milliTenthSleepUntil(unsigned int)+0x64>
c001921b:	a1 20 a1 02 c0       	mov    eax,ds:0xc002a120
c0019220:	85 c0                	test   eax,eax
c0019222:	75 14                	jne    c0019238 <milliTenthSleepUntil(unsigned int)+0x78>
c0019224:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c0019229:	48                   	dec    eax
c001922a:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c001922f:	75 9f                	jne    c00191d0 <milliTenthSleepUntil(unsigned int)+0x10>
c0019231:	fb                   	sti    
c0019232:	83 c4 0c             	add    esp,0xc
c0019235:	c3                   	ret    
c0019236:	66 90                	xchg   ax,ax
c0019238:	c7 05 20 a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a120,0x0
c0019242:	e8 0d fd ff ff       	call   c0018f54 <schedule()>
c0019247:	eb db                	jmp    c0019224 <milliTenthSleepUntil(unsigned int)+0x64>
c0019249:	8d 76 00             	lea    esi,[esi+0x0]

c001924c <milliTenthSleep(unsigned int)>:
c001924c:	a1 2c 92 02 c0       	mov    eax,ds:0xc002922c
c0019251:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0019255:	e9 66 ff ff ff       	jmp    c00191c0 <milliTenthSleepUntil(unsigned int)>
c001925a:	66 90                	xchg   ax,ax

c001925c <sleep(unsigned int)>:
c001925c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019260:	8d 04 80             	lea    eax,[eax+eax*4]
c0019263:	8d 04 80             	lea    eax,[eax+eax*4]
c0019266:	8d 04 80             	lea    eax,[eax+eax*4]
c0019269:	8d 04 80             	lea    eax,[eax+eax*4]
c001926c:	c1 e0 04             	shl    eax,0x4
c001926f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019273:	eb d7                	jmp    c001924c <milliTenthSleep(unsigned int)>
c0019275:	90                   	nop
c0019276:	66 90                	xchg   ax,ax

c0019278 <Semaphore::acquire()>:
c0019278:	83 ec 0c             	sub    esp,0xc
c001927b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001927f:	fa                   	cli    
c0019280:	a1 24 a1 02 c0       	mov    eax,ds:0xc002a124
c0019285:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c001928b:	8d 48 01             	lea    ecx,[eax+0x1]
c001928e:	89 0d 24 a1 02 c0    	mov    DWORD PTR ds:0xc002a124,ecx
c0019294:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0019297:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0019299:	7d 2d                	jge    c00192c8 <Semaphore::acquire()+0x50>
c001929b:	41                   	inc    ecx
c001929c:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001929f:	90                   	nop
c00192a0:	a3 24 a1 02 c0       	mov    ds:0xc002a124,eax
c00192a5:	85 c0                	test   eax,eax
c00192a7:	75 0b                	jne    c00192b4 <Semaphore::acquire()+0x3c>
c00192a9:	a1 20 a1 02 c0       	mov    eax,ds:0xc002a120
c00192ae:	85 c0                	test   eax,eax
c00192b0:	75 62                	jne    c0019314 <Semaphore::acquire()+0x9c>
c00192b2:	66 90                	xchg   ax,ax
c00192b4:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c00192b9:	48                   	dec    eax
c00192ba:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c00192bf:	75 03                	jne    c00192c4 <Semaphore::acquire()+0x4c>
c00192c1:	fb                   	sti    
c00192c2:	66 90                	xchg   ax,ax
c00192c4:	83 c4 0c             	add    esp,0xc
c00192c7:	c3                   	ret    
c00192c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00192cd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00192d4:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00192d7:	85 c9                	test   ecx,ecx
c00192d9:	74 4d                	je     c0019328 <Semaphore::acquire()+0xb0>
c00192db:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c00192de:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00192e4:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c00192e7:	90                   	nop
c00192e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00192ed:	83 ec 0c             	sub    esp,0xc
c00192f0:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00192f3:	68 88 6d 02 c0       	push   0xc0026d88
c00192f8:	e8 1a 3e ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c00192fd:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0019304:	e8 43 fe ff ff       	call   c001914c <blockTask(TaskState)>
c0019309:	a1 24 a1 02 c0       	mov    eax,ds:0xc002a124
c001930e:	83 c4 10             	add    esp,0x10
c0019311:	48                   	dec    eax
c0019312:	eb 8c                	jmp    c00192a0 <Semaphore::acquire()+0x28>
c0019314:	c7 05 20 a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a120,0x0
c001931e:	e8 31 fc ff ff       	call   c0018f54 <schedule()>
c0019323:	eb 8f                	jmp    c00192b4 <Semaphore::acquire()+0x3c>
c0019325:	8d 76 00             	lea    esi,[esi+0x0]
c0019328:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001932d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0019330:	eb b6                	jmp    c00192e8 <Semaphore::acquire()+0x70>
c0019332:	66 90                	xchg   ax,ax

c0019334 <taskReturned>:
c0019334:	83 ec 18             	sub    esp,0x18
c0019337:	68 a8 6d 02 c0       	push   0xc0026da8
c001933c:	e8 b8 be ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c0019341:	83 c4 10             	add    esp,0x10
c0019344:	83 ec 0c             	sub    esp,0xc
c0019347:	6a 02                	push   0x2
c0019349:	e8 fe fd ff ff       	call   c001914c <blockTask(TaskState)>
c001934e:	fa                   	cli    
c001934f:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c0019355:	e8 fa fb ff ff       	call   c0018f54 <schedule()>
c001935a:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c001935f:	83 c4 10             	add    esp,0x10
c0019362:	48                   	dec    eax
c0019363:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c0019368:	85 c0                	test   eax,eax
c001936a:	75 d8                	jne    c0019344 <taskReturned+0x10>
c001936c:	fb                   	sti    
c001936d:	eb d5                	jmp    c0019344 <taskReturned+0x10>
c001936f:	90                   	nop

c0019370 <Thr::processFromPID(int)>:
c0019370:	57                   	push   edi
c0019371:	56                   	push   esi
c0019372:	53                   	push   ebx
c0019373:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019377:	fa                   	cli    
c0019378:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c001937e:	83 ec 0c             	sub    esp,0xc
c0019381:	68 44 a1 02 c0       	push   0xc002a144
c0019386:	e8 41 a2 00 00       	call   c00235cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001938b:	83 c4 10             	add    esp,0x10
c001938e:	89 c7                	mov    edi,eax
c0019390:	eb 16                	jmp    c00193a8 <Thr::processFromPID(int)+0x38>
c0019392:	66 90                	xchg   ax,ax
c0019394:	83 ec 0c             	sub    esp,0xc
c0019397:	68 44 a1 02 c0       	push   0xc002a144
c001939c:	e8 2b a2 00 00       	call   c00235cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00193a1:	83 c4 10             	add    esp,0x10
c00193a4:	39 f8                	cmp    eax,edi
c00193a6:	74 4c                	je     c00193f4 <Thr::processFromPID(int)+0x84>
c00193a8:	83 ec 0c             	sub    esp,0xc
c00193ab:	68 44 a1 02 c0       	push   0xc002a144
c00193b0:	e8 17 a2 00 00       	call   c00235cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00193b5:	c7 04 24 44 a1 02 c0 	mov    DWORD PTR [esp],0xc002a144
c00193bc:	89 c3                	mov    ebx,eax
c00193be:	e8 11 a2 00 00       	call   c00235d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00193c3:	58                   	pop    eax
c00193c4:	5a                   	pop    edx
c00193c5:	53                   	push   ebx
c00193c6:	68 44 a1 02 c0       	push   0xc002a144
c00193cb:	e8 bc a2 00 00       	call   c002368c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00193d0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00193d3:	83 c4 10             	add    esp,0x10
c00193d6:	39 30                	cmp    DWORD PTR [eax],esi
c00193d8:	75 ba                	jne    c0019394 <Thr::processFromPID(int)+0x24>
c00193da:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c00193df:	48                   	dec    eax
c00193e0:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c00193e5:	74 09                	je     c00193f0 <Thr::processFromPID(int)+0x80>
c00193e7:	90                   	nop
c00193e8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00193eb:	5b                   	pop    ebx
c00193ec:	5e                   	pop    esi
c00193ed:	5f                   	pop    edi
c00193ee:	c3                   	ret    
c00193ef:	90                   	nop
c00193f0:	fb                   	sti    
c00193f1:	eb f5                	jmp    c00193e8 <Thr::processFromPID(int)+0x78>
c00193f3:	90                   	nop
c00193f4:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c00193f9:	48                   	dec    eax
c00193fa:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c00193ff:	75 07                	jne    c0019408 <Thr::processFromPID(int)+0x98>
c0019401:	fb                   	sti    
c0019402:	5b                   	pop    ebx
c0019403:	5e                   	pop    esi
c0019404:	5f                   	pop    edi
c0019405:	c3                   	ret    
c0019406:	66 90                	xchg   ax,ax
c0019408:	5b                   	pop    ebx
c0019409:	31 c0                	xor    eax,eax
c001940b:	5e                   	pop    esi
c001940c:	5f                   	pop    edi
c001940d:	c3                   	ret    
c001940e:	66 90                	xchg   ax,ax

c0019410 <unblockTask(ThreadControlBlock*)>:
c0019410:	53                   	push   ebx
c0019411:	83 ec 08             	sub    esp,0x8
c0019414:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019418:	fa                   	cli    
c0019419:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c001941f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0019422:	85 c0                	test   eax,eax
c0019424:	74 66                	je     c001948c <unblockTask(ThreadControlBlock*)+0x7c>
c0019426:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0019429:	48                   	dec    eax
c001942a:	74 38                	je     c0019464 <unblockTask(ThreadControlBlock*)+0x54>
c001942c:	83 ec 0c             	sub    esp,0xc
c001942f:	68 44 a1 02 c0       	push   0xc002a144
c0019434:	e8 93 a1 00 00       	call   c00235cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019439:	83 c4 10             	add    esp,0x10
c001943c:	85 c0                	test   eax,eax
c001943e:	75 1c                	jne    c001945c <unblockTask(ThreadControlBlock*)+0x4c>
c0019440:	eb 5e                	jmp    c00194a0 <unblockTask(ThreadControlBlock*)+0x90>
c0019442:	66 90                	xchg   ax,ax
c0019444:	83 ec 08             	sub    esp,0x8
c0019447:	50                   	push   eax
c0019448:	68 44 a1 02 c0       	push   0xc002a144
c001944d:	e8 2a a5 00 00       	call   c002397c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0019452:	83 c4 10             	add    esp,0x10
c0019455:	85 c0                	test   eax,eax
c0019457:	74 47                	je     c00194a0 <unblockTask(ThreadControlBlock*)+0x90>
c0019459:	8d 76 00             	lea    esi,[esi+0x0]
c001945c:	39 c3                	cmp    ebx,eax
c001945e:	75 e4                	jne    c0019444 <unblockTask(ThreadControlBlock*)+0x34>
c0019460:	eb 12                	jmp    c0019474 <unblockTask(ThreadControlBlock*)+0x64>
c0019462:	66 90                	xchg   ax,ax
c0019464:	83 ec 0c             	sub    esp,0xc
c0019467:	68 2a 6d 02 c0       	push   0xc0026d2a
c001946c:	e8 a6 3c ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0019471:	83 c4 10             	add    esp,0x10
c0019474:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c0019479:	48                   	dec    eax
c001947a:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c001947f:	75 03                	jne    c0019484 <unblockTask(ThreadControlBlock*)+0x74>
c0019481:	fb                   	sti    
c0019482:	66 90                	xchg   ax,ax
c0019484:	83 c4 08             	add    esp,0x8
c0019487:	5b                   	pop    ebx
c0019488:	c3                   	ret    
c0019489:	8d 76 00             	lea    esi,[esi+0x0]
c001948c:	83 ec 0c             	sub    esp,0xc
c001948f:	68 13 6d 02 c0       	push   0xc0026d13
c0019494:	e8 7e 3c ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0019499:	83 c4 10             	add    esp,0x10
c001949c:	eb d6                	jmp    c0019474 <unblockTask(ThreadControlBlock*)+0x64>
c001949e:	66 90                	xchg   ax,ax
c00194a0:	83 ec 08             	sub    esp,0x8
c00194a3:	53                   	push   ebx
c00194a4:	68 44 a1 02 c0       	push   0xc002a144
c00194a9:	e8 de a1 00 00       	call   c002368c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00194ae:	83 c4 10             	add    esp,0x10
c00194b1:	eb c1                	jmp    c0019474 <unblockTask(ThreadControlBlock*)+0x64>
c00194b3:	90                   	nop

c00194b4 <cleanupTerminatedTask(ThreadControlBlock*)>:
c00194b4:	55                   	push   ebp
c00194b5:	57                   	push   edi
c00194b6:	56                   	push   esi
c00194b7:	53                   	push   ebx
c00194b8:	83 ec 1c             	sub    esp,0x1c
c00194bb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00194bf:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00194c2:	8b b8 16 05 00 00    	mov    edi,DWORD PTR [eax+0x516]
c00194c8:	85 ff                	test   edi,edi
c00194ca:	7e 24                	jle    c00194f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c00194cc:	31 f6                	xor    esi,esi
c00194ce:	66 90                	xchg   ax,ax
c00194d0:	83 ec 0c             	sub    esp,0xc
c00194d3:	ff b4 b0 1a 05 00 00 	push   DWORD PTR [eax+esi*4+0x51a]
c00194da:	46                   	inc    esi
c00194db:	e8 17 09 ff ff       	call   c0009df7 <free>
c00194e0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00194e3:	83 c4 10             	add    esp,0x10
c00194e6:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00194ec:	7f e2                	jg     c00194d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00194ee:	66 90                	xchg   ax,ax
c00194f0:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00194fa:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00194ff:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0019502:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0019505:	d3 c0                	rol    eax,cl
c0019507:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c001950e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0019511:	89 f7                	mov    edi,esi
c0019513:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c001951b:	0f 85 73 01 00 00    	jne    c0019694 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0019521:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0019527:	85 ed                	test   ebp,ebp
c0019529:	74 1d                	je     c0019548 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c001952b:	83 ec 0c             	sub    esp,0xc
c001952e:	55                   	push   ebp
c001952f:	e8 6a ba ff ff       	call   c0014f9e <EnvVarContainer::~EnvVarContainer()>
c0019534:	59                   	pop    ecx
c0019535:	5e                   	pop    esi
c0019536:	6a 0c                	push   0xc
c0019538:	55                   	push   ebp
c0019539:	e8 f8 3a ff ff       	call   c000d036 <operator delete(void*, unsigned long)>
c001953e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0019541:	83 c4 10             	add    esp,0x10
c0019544:	89 f7                	mov    edi,esi
c0019546:	66 90                	xchg   ax,ax
c0019548:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001954e:	85 c0                	test   eax,eax
c0019550:	0f 84 b2 00 00 00    	je     c0019608 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0019556:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0019559:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001955d:	31 c9                	xor    ecx,ecx
c001955f:	eb 17                	jmp    c0019578 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0019561:	8d 76 00             	lea    esi,[esi+0x0]
c0019564:	41                   	inc    ecx
c0019565:	83 f9 10             	cmp    ecx,0x10
c0019568:	0f 84 9a 00 00 00    	je     c0019608 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c001956e:	66 90                	xchg   ax,ax
c0019570:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0019576:	66 90                	xchg   ax,ax
c0019578:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c001957f:	d3 fa                	sar    edx,cl
c0019581:	83 e2 01             	and    edx,0x1
c0019584:	74 de                	je     c0019564 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0019586:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0019589:	01 d2                	add    edx,edx
c001958b:	01 ca                	add    edx,ecx
c001958d:	8d 14 92             	lea    edx,[edx+edx*4]
c0019590:	01 d0                	add    eax,edx
c0019592:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0019598:	83 fd 07             	cmp    ebp,0x7
c001959b:	75 c7                	jne    c0019564 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c001959d:	05 40 02 00 00       	add    eax,0x240
c00195a2:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00195a5:	83 fd ff             	cmp    ebp,0xffffffff
c00195a8:	0f 8c ee 00 00 00    	jl     c001969c <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c00195ae:	0f 84 ac 01 00 00    	je     c0019760 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ac>
c00195b4:	85 ed                	test   ebp,ebp
c00195b6:	0f 84 90 01 00 00    	je     c001974c <cleanupTerminatedTask(ThreadControlBlock*)+0x298>
c00195bc:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00195be:	75 a4                	jne    c0019564 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00195c0:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00195c6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00195ca:	01 d0                	add    eax,edx
c00195cc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00195d0:	83 ec 0c             	sub    esp,0xc
c00195d3:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00195d9:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00195dc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00195e2:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00195e9:	50                   	push   eax
c00195ea:	e8 21 fe ff ff       	call   c0019410 <unblockTask(ThreadControlBlock*)>
c00195ef:	83 c4 10             	add    esp,0x10
c00195f2:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00195f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00195f9:	89 f7                	mov    edi,esi
c00195fb:	41                   	inc    ecx
c00195fc:	83 f9 10             	cmp    ecx,0x10
c00195ff:	0f 85 6b ff ff ff    	jne    c0019570 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0019605:	8d 76 00             	lea    esi,[esi+0x0]
c0019608:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c001960e:	85 c0                	test   eax,eax
c0019610:	74 62                	je     c0019674 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0019612:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0019618:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c001961e:	74 54                	je     c0019674 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0019620:	83 ec 0c             	sub    esp,0xc
c0019623:	68 44 a1 02 c0       	push   0xc002a144
c0019628:	e8 9f 9f 00 00       	call   c00235cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001962d:	c7 04 24 44 a1 02 c0 	mov    DWORD PTR [esp],0xc002a144
c0019634:	89 c7                	mov    edi,eax
c0019636:	e8 75 9f 00 00       	call   c00235b0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001963b:	83 c4 10             	add    esp,0x10
c001963e:	84 c0                	test   al,al
c0019640:	0f 84 ce 00 00 00    	je     c0019714 <cleanupTerminatedTask(ThreadControlBlock*)+0x260>
c0019646:	66 90                	xchg   ax,ax
c0019648:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001964b:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0019651:	85 d2                	test   edx,edx
c0019653:	74 0f                	je     c0019664 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b0>
c0019655:	83 ec 0c             	sub    esp,0xc
c0019658:	8b 02                	mov    eax,DWORD PTR [edx]
c001965a:	52                   	push   edx
c001965b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001965e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0019661:	83 c4 10             	add    esp,0x10
c0019664:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c001966e:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0019671:	8d 76 00             	lea    esi,[esi+0x0]
c0019674:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c001967a:	85 db                	test   ebx,ebx
c001967c:	74 16                	je     c0019694 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c001967e:	83 ec 0c             	sub    esp,0xc
c0019681:	53                   	push   ebx
c0019682:	e8 09 2c ff ff       	call   c000c290 <VAS::~VAS()>
c0019687:	58                   	pop    eax
c0019688:	5a                   	pop    edx
c0019689:	6a 14                	push   0x14
c001968b:	53                   	push   ebx
c001968c:	e8 a5 39 ff ff       	call   c000d036 <operator delete(void*, unsigned long)>
c0019691:	83 c4 10             	add    esp,0x10
c0019694:	83 c4 1c             	add    esp,0x1c
c0019697:	5b                   	pop    ebx
c0019698:	5e                   	pop    esi
c0019699:	5f                   	pop    edi
c001969a:	5d                   	pop    ebp
c001969b:	c3                   	ret    
c001969c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00196a0:	83 ec 0c             	sub    esp,0xc
c00196a3:	68 dc 6d 02 c0       	push   0xc0026ddc
c00196a8:	e8 4c bb ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c00196ad:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00196b0:	83 c4 10             	add    esp,0x10
c00196b3:	89 f7                	mov    edi,esi
c00196b5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00196b9:	e9 a6 fe ff ff       	jmp    c0019564 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00196be:	66 90                	xchg   ax,ax
c00196c0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00196c6:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c00196cc:	75 1e                	jne    c00196ec <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c00196ce:	83 ec 0c             	sub    esp,0xc
c00196d1:	68 44 6e 02 c0       	push   0xc0026e44
c00196d6:	e8 3c 3a ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c00196db:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00196e2:	e8 65 fa ff ff       	call   c001914c <blockTask(TaskState)>
c00196e7:	83 c4 10             	add    esp,0x10
c00196ea:	66 90                	xchg   ax,ax
c00196ec:	83 ec 08             	sub    esp,0x8
c00196ef:	56                   	push   esi
c00196f0:	68 44 a1 02 c0       	push   0xc002a144
c00196f5:	e8 92 9f 00 00       	call   c002368c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00196fa:	c7 04 24 44 a1 02 c0 	mov    DWORD PTR [esp],0xc002a144
c0019701:	e8 c6 9e 00 00       	call   c00235cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019706:	83 c4 10             	add    esp,0x10
c0019709:	39 f8                	cmp    eax,edi
c001970b:	0f 84 37 ff ff ff    	je     c0019648 <cleanupTerminatedTask(ThreadControlBlock*)+0x194>
c0019711:	8d 76 00             	lea    esi,[esi+0x0]
c0019714:	83 ec 0c             	sub    esp,0xc
c0019717:	68 44 a1 02 c0       	push   0xc002a144
c001971c:	e8 ab 9e 00 00       	call   c00235cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019721:	c7 04 24 44 a1 02 c0 	mov    DWORD PTR [esp],0xc002a144
c0019728:	89 c6                	mov    esi,eax
c001972a:	e8 a5 9e 00 00       	call   c00235d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001972f:	83 c4 10             	add    esp,0x10
c0019732:	39 f3                	cmp    ebx,esi
c0019734:	74 b6                	je     c00196ec <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0019736:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0019739:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001973c:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0019742:	75 a8                	jne    c00196ec <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0019744:	e9 77 ff ff ff       	jmp    c00196c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x20c>
c0019749:	8d 76 00             	lea    esi,[esi+0x0]
c001974c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019750:	83 ec 0c             	sub    esp,0xc
c0019753:	68 10 6e 02 c0       	push   0xc0026e10
c0019758:	e9 4b ff ff ff       	jmp    c00196a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c001975d:	8d 76 00             	lea    esi,[esi+0x0]
c0019760:	8b 36                	mov    esi,DWORD PTR [esi]
c0019762:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019766:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0019769:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001976c:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0019772:	01 d7                	add    edi,edx
c0019774:	89 f8                	mov    eax,edi
c0019776:	e9 51 fe ff ff       	jmp    c00195cc <cleanupTerminatedTask(ThreadControlBlock*)+0x118>
c001977b:	90                   	nop

c001977c <cleanerTaskFunction(void*)>:
c001977c:	53                   	push   ebx
c001977d:	83 ec 08             	sub    esp,0x8
c0019780:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c0019785:	48                   	dec    eax
c0019786:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c001978b:	75 03                	jne    c0019790 <cleanerTaskFunction(void*)+0x14>
c001978d:	fb                   	sti    
c001978e:	66 90                	xchg   ax,ax
c0019790:	fa                   	cli    
c0019791:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c0019796:	80 3d 0c a1 02 c0 00 	cmp    BYTE PTR ds:0xc002a10c,0x0
c001979d:	8d 50 01             	lea    edx,[eax+0x1]
c00197a0:	89 15 28 a1 02 c0    	mov    DWORD PTR ds:0xc002a128,edx
c00197a6:	0f 84 ac 00 00 00    	je     c0019858 <cleanerTaskFunction(void*)+0xdc>
c00197ac:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c00197b1:	85 c0                	test   eax,eax
c00197b3:	75 03                	jne    c00197b8 <cleanerTaskFunction(void*)+0x3c>
c00197b5:	fb                   	sti    
c00197b6:	66 90                	xchg   ax,ax
c00197b8:	c6 05 0c a1 02 c0 00 	mov    BYTE PTR ds:0xc002a10c,0x0
c00197bf:	fa                   	cli    
c00197c0:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c00197c6:	ff 05 24 a1 02 c0    	inc    DWORD PTR ds:0xc002a124
c00197cc:	fa                   	cli    
c00197cd:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c00197d3:	eb 2b                	jmp    c0019800 <cleanerTaskFunction(void*)+0x84>
c00197d5:	8d 76 00             	lea    esi,[esi+0x0]
c00197d8:	83 ec 0c             	sub    esp,0xc
c00197db:	68 2c a1 02 c0       	push   0xc002a12c
c00197e0:	e8 e7 9d 00 00       	call   c00235cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00197e5:	c7 04 24 2c a1 02 c0 	mov    DWORD PTR [esp],0xc002a12c
c00197ec:	89 c3                	mov    ebx,eax
c00197ee:	e8 e1 9d 00 00       	call   c00235d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00197f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00197f6:	e8 b9 fc ff ff       	call   c00194b4 <cleanupTerminatedTask(ThreadControlBlock*)>
c00197fb:	83 c4 10             	add    esp,0x10
c00197fe:	66 90                	xchg   ax,ax
c0019800:	83 ec 0c             	sub    esp,0xc
c0019803:	68 2c a1 02 c0       	push   0xc002a12c
c0019808:	e8 a3 9d 00 00       	call   c00235b0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001980d:	83 c4 10             	add    esp,0x10
c0019810:	84 c0                	test   al,al
c0019812:	74 c4                	je     c00197d8 <cleanerTaskFunction(void*)+0x5c>
c0019814:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c0019819:	48                   	dec    eax
c001981a:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c001981f:	75 03                	jne    c0019824 <cleanerTaskFunction(void*)+0xa8>
c0019821:	fb                   	sti    
c0019822:	66 90                	xchg   ax,ax
c0019824:	a1 24 a1 02 c0       	mov    eax,ds:0xc002a124
c0019829:	48                   	dec    eax
c001982a:	a3 24 a1 02 c0       	mov    ds:0xc002a124,eax
c001982f:	0f 85 4b ff ff ff    	jne    c0019780 <cleanerTaskFunction(void*)+0x4>
c0019835:	a1 20 a1 02 c0       	mov    eax,ds:0xc002a120
c001983a:	85 c0                	test   eax,eax
c001983c:	0f 84 3e ff ff ff    	je     c0019780 <cleanerTaskFunction(void*)+0x4>
c0019842:	c7 05 20 a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a120,0x0
c001984c:	e8 03 f7 ff ff       	call   c0018f54 <schedule()>
c0019851:	e9 2a ff ff ff       	jmp    c0019780 <cleanerTaskFunction(void*)+0x4>
c0019856:	66 90                	xchg   ax,ax
c0019858:	83 ec 0c             	sub    esp,0xc
c001985b:	6a 02                	push   0x2
c001985d:	e8 c2 f8 ff ff       	call   c0019124 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0019862:	83 c4 10             	add    esp,0x10
c0019865:	e9 4e ff ff ff       	jmp    c00197b8 <cleanerTaskFunction(void*)+0x3c>
c001986a:	66 90                	xchg   ax,ax

c001986c <terminateTask(int)>:
c001986c:	83 ec 14             	sub    esp,0x14
c001986f:	fa                   	cli    
c0019870:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c0019876:	ff 05 24 a1 02 c0    	inc    DWORD PTR ds:0xc002a124
c001987c:	fa                   	cli    
c001987d:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c0019883:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019887:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001988c:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c001988f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019894:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0019897:	50                   	push   eax
c0019898:	68 2c a1 02 c0       	push   0xc002a12c
c001989d:	e8 ea 9d 00 00       	call   c002368c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00198a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00198a7:	83 c4 10             	add    esp,0x10
c00198aa:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00198b1:	a1 08 a1 02 c0       	mov    eax,ds:0xc002a108
c00198b6:	85 c0                	test   eax,eax
c00198b8:	74 5e                	je     c0019918 <terminateTask(int)+0xac>
c00198ba:	83 ec 0c             	sub    esp,0xc
c00198bd:	c6 05 0c a1 02 c0 01 	mov    BYTE PTR ds:0xc002a10c,0x1
c00198c4:	50                   	push   eax
c00198c5:	e8 46 fb ff ff       	call   c0019410 <unblockTask(ThreadControlBlock*)>
c00198ca:	83 c4 10             	add    esp,0x10
c00198cd:	8d 76 00             	lea    esi,[esi+0x0]
c00198d0:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c00198d5:	48                   	dec    eax
c00198d6:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c00198db:	75 03                	jne    c00198e0 <terminateTask(int)+0x74>
c00198dd:	fb                   	sti    
c00198de:	66 90                	xchg   ax,ax
c00198e0:	a1 24 a1 02 c0       	mov    eax,ds:0xc002a124
c00198e5:	48                   	dec    eax
c00198e6:	a3 24 a1 02 c0       	mov    ds:0xc002a124,eax
c00198eb:	75 0b                	jne    c00198f8 <terminateTask(int)+0x8c>
c00198ed:	83 3d 20 a1 02 c0 00 	cmp    DWORD PTR ds:0xc002a120,0x0
c00198f4:	75 36                	jne    c001992c <terminateTask(int)+0xc0>
c00198f6:	66 90                	xchg   ax,ax
c00198f8:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c00198fd:	48                   	dec    eax
c00198fe:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c0019903:	75 03                	jne    c0019908 <terminateTask(int)+0x9c>
c0019905:	fb                   	sti    
c0019906:	66 90                	xchg   ax,ax
c0019908:	fa                   	cli    
c0019909:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c001990f:	90                   	nop
c0019910:	e8 3f f6 ff ff       	call   c0018f54 <schedule()>
c0019915:	eb e1                	jmp    c00198f8 <terminateTask(int)+0x8c>
c0019917:	90                   	nop
c0019918:	83 ec 0c             	sub    esp,0xc
c001991b:	68 41 6d 02 c0       	push   0xc0026d41
c0019920:	e8 f2 37 ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0019925:	83 c4 10             	add    esp,0x10
c0019928:	eb a6                	jmp    c00198d0 <terminateTask(int)+0x64>
c001992a:	66 90                	xchg   ax,ax
c001992c:	c7 05 20 a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a120,0x0
c0019936:	eb d8                	jmp    c0019910 <terminateTask(int)+0xa4>

c0019938 <Thr::terminateFromIRQ(int)>:
c0019938:	83 ec 18             	sub    esp,0x18
c001993b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001993f:	e8 28 ff ff ff       	call   c001986c <terminateTask(int)>

c0019944 <Semaphore::release()>:
c0019944:	83 ec 0c             	sub    esp,0xc
c0019947:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001994b:	fa                   	cli    
c001994c:	a1 24 a1 02 c0       	mov    eax,ds:0xc002a124
c0019951:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c0019957:	8d 48 01             	lea    ecx,[eax+0x1]
c001995a:	89 0d 24 a1 02 c0    	mov    DWORD PTR ds:0xc002a124,ecx
c0019960:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0019963:	85 c9                	test   ecx,ecx
c0019965:	74 41                	je     c00199a8 <Semaphore::release()+0x64>
c0019967:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001996a:	83 ec 0c             	sub    esp,0xc
c001996d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0019970:	51                   	push   ecx
c0019971:	e8 9a fa ff ff       	call   c0019410 <unblockTask(ThreadControlBlock*)>
c0019976:	a1 24 a1 02 c0       	mov    eax,ds:0xc002a124
c001997b:	83 c4 10             	add    esp,0x10
c001997e:	48                   	dec    eax
c001997f:	90                   	nop
c0019980:	a3 24 a1 02 c0       	mov    ds:0xc002a124,eax
c0019985:	85 c0                	test   eax,eax
c0019987:	75 0b                	jne    c0019994 <Semaphore::release()+0x50>
c0019989:	a1 20 a1 02 c0       	mov    eax,ds:0xc002a120
c001998e:	85 c0                	test   eax,eax
c0019990:	75 1e                	jne    c00199b0 <Semaphore::release()+0x6c>
c0019992:	66 90                	xchg   ax,ax
c0019994:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c0019999:	48                   	dec    eax
c001999a:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c001999f:	75 03                	jne    c00199a4 <Semaphore::release()+0x60>
c00199a1:	fb                   	sti    
c00199a2:	66 90                	xchg   ax,ax
c00199a4:	83 c4 0c             	add    esp,0xc
c00199a7:	c3                   	ret    
c00199a8:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c00199ab:	eb d3                	jmp    c0019980 <Semaphore::release()+0x3c>
c00199ad:	8d 76 00             	lea    esi,[esi+0x0]
c00199b0:	c7 05 20 a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a120,0x0
c00199ba:	e8 95 f5 ff ff       	call   c0018f54 <schedule()>
c00199bf:	eb d3                	jmp    c0019994 <Semaphore::release()+0x50>
c00199c1:	8d 76 00             	lea    esi,[esi+0x0]

c00199c4 <__static_initialization_and_destruction_0(int, int)>:
c00199c4:	83 ec 0c             	sub    esp,0xc
c00199c7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00199cc:	0f 85 8e 00 00 00    	jne    c0019a60 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00199d2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00199da:	0f 85 80 00 00 00    	jne    c0019a60 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00199e0:	83 ec 0c             	sub    esp,0xc
c00199e3:	68 44 a1 02 c0       	push   0xc002a144
c00199e8:	e8 4b 9f 00 00       	call   c0023938 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00199ed:	83 c4 10             	add    esp,0x10
c00199f0:	83 ec 04             	sub    esp,0x4
c00199f3:	68 78 7e 02 c0       	push   0xc0027e78
c00199f8:	68 44 a1 02 c0       	push   0xc002a144
c00199fd:	68 e8 38 02 c0       	push   0xc00238e8
c0019a02:	e8 a9 35 ff ff       	call   c000cfb0 <__cxa_atexit>
c0019a07:	83 c4 10             	add    esp,0x10
c0019a0a:	83 ec 0c             	sub    esp,0xc
c0019a0d:	68 38 a1 02 c0       	push   0xc002a138
c0019a12:	e8 21 9f 00 00       	call   c0023938 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0019a17:	83 c4 10             	add    esp,0x10
c0019a1a:	83 ec 04             	sub    esp,0x4
c0019a1d:	68 78 7e 02 c0       	push   0xc0027e78
c0019a22:	68 38 a1 02 c0       	push   0xc002a138
c0019a27:	68 e8 38 02 c0       	push   0xc00238e8
c0019a2c:	e8 7f 35 ff ff       	call   c000cfb0 <__cxa_atexit>
c0019a31:	83 c4 10             	add    esp,0x10
c0019a34:	83 ec 0c             	sub    esp,0xc
c0019a37:	68 2c a1 02 c0       	push   0xc002a12c
c0019a3c:	e8 f7 9e 00 00       	call   c0023938 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0019a41:	83 c4 10             	add    esp,0x10
c0019a44:	83 ec 04             	sub    esp,0x4
c0019a47:	68 78 7e 02 c0       	push   0xc0027e78
c0019a4c:	68 2c a1 02 c0       	push   0xc002a12c
c0019a51:	68 e8 38 02 c0       	push   0xc00238e8
c0019a56:	e8 55 35 ff ff       	call   c000cfb0 <__cxa_atexit>
c0019a5b:	83 c4 10             	add    esp,0x10
c0019a5e:	66 90                	xchg   ax,ax
c0019a60:	90                   	nop
c0019a61:	83 c4 0c             	add    esp,0xc
c0019a64:	c3                   	ret    
c0019a65:	8d 76 00             	lea    esi,[esi+0x0]

c0019a68 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0019a68:	83 ec 0c             	sub    esp,0xc
c0019a6b:	83 ec 08             	sub    esp,0x8
c0019a6e:	68 ff ff 00 00       	push   0xffff
c0019a73:	6a 01                	push   0x1
c0019a75:	e8 4a ff ff ff       	call   c00199c4 <__static_initialization_and_destruction_0(int, int)>
c0019a7a:	83 c4 10             	add    esp,0x10
c0019a7d:	83 c4 0c             	add    esp,0xc
c0019a80:	c3                   	ret    

c0019a81 <Vm::inbv(unsigned short)>:
c0019a81:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019a85:	66 81 fa fe fe       	cmp    dx,0xfefe
c0019a8a:	75 06                	jne    c0019a92 <Vm::inbv(unsigned short)+0x11>
c0019a8c:	a0 8c a1 02 c0       	mov    al,ds:0xc002a18c
c0019a91:	c3                   	ret    
c0019a92:	ec                   	in     al,dx
c0019a93:	c3                   	ret    

c0019a94 <Vm::outbv(unsigned short, unsigned char)>:
c0019a94:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019a98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019a9c:	66 81 fa fe fe       	cmp    dx,0xfefe
c0019aa1:	75 25                	jne    c0019ac8 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0019aa3:	8b 0d 8c a1 02 c0    	mov    ecx,DWORD PTR ds:0xc002a18c
c0019aa9:	8d 51 01             	lea    edx,[ecx+0x1]
c0019aac:	88 81 a0 a1 02 c0    	mov    BYTE PTR [ecx-0x3ffd5e60],al
c0019ab2:	89 15 8c a1 02 c0    	mov    DWORD PTR ds:0xc002a18c,edx
c0019ab8:	83 fa 20             	cmp    edx,0x20
c0019abb:	75 0c                	jne    c0019ac9 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0019abd:	c7 05 8c a1 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002a18c,0x1f
c0019ac7:	c3                   	ret    
c0019ac8:	ee                   	out    dx,al
c0019ac9:	c3                   	ret    

c0019aca <Vm::realToLinear(unsigned short, unsigned short)>:
c0019aca:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019acf:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019ad4:	c1 e0 04             	shl    eax,0x4
c0019ad7:	01 d0                	add    eax,edx
c0019ad9:	c3                   	ret    

c0019ada <Vm::getSegment(unsigned int)>:
c0019ada:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ade:	c1 e8 10             	shr    eax,0x10
c0019ae1:	c3                   	ret    

c0019ae2 <Vm::getOffset(unsigned int)>:
c0019ae2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ae6:	c3                   	ret    

c0019ae7 <Vm::mainloop2()>:
c0019ae7:	83 ec 18             	sub    esp,0x18
c0019aea:	fa                   	cli    
c0019aeb:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c0019af1:	6a 02                	push   0x2
c0019af3:	c6 05 85 a1 02 c0 01 	mov    BYTE PTR ds:0xc002a185,0x1
c0019afa:	e8 25 f6 ff ff       	call   c0019124 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0019aff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019b04:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0019b08:	52                   	push   edx
c0019b09:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0019b0d:	52                   	push   edx
c0019b0e:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0019b12:	52                   	push   edx
c0019b13:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0019b17:	50                   	push   eax
c0019b18:	e8 22 67 fe ff       	call   c000023f <goToVM86>
c0019b1d:	83 c4 2c             	add    esp,0x2c
c0019b20:	c3                   	ret    

c0019b21 <Vm::mainVm8086Loop(void*)>:
c0019b21:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c0019b26:	48                   	dec    eax
c0019b27:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c0019b2c:	75 01                	jne    c0019b2f <Vm::mainVm8086Loop(void*)+0xe>
c0019b2e:	fb                   	sti    
c0019b2f:	eb b6                	jmp    c0019ae7 <Vm::mainloop2()>

c0019b31 <Vm::mainloop3(unsigned long)>:
c0019b31:	83 ec 18             	sub    esp,0x18
c0019b34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019b38:	fa                   	cli    
c0019b39:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c0019b3f:	6a 02                	push   0x2
c0019b41:	c6 05 84 a1 02 c0 01 	mov    BYTE PTR ds:0xc002a184,0x1
c0019b48:	a3 80 a1 02 c0       	mov    ds:0xc002a180,eax
c0019b4d:	e8 d2 f5 ff ff       	call   c0019124 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0019b52:	83 c4 1c             	add    esp,0x1c
c0019b55:	eb 90                	jmp    c0019ae7 <Vm::mainloop2()>

c0019b57 <Vm::initialise8086()>:
c0019b57:	83 ec 0c             	sub    esp,0xc
c0019b5a:	68 80 00 00 00       	push   0x80
c0019b5f:	6a 00                	push   0x0
c0019b61:	68 21 9b 01 c0       	push   0xc0019b21
c0019b66:	ff 35 50 a1 02 c0    	push   DWORD PTR ds:0xc002a150
c0019b6c:	e8 c7 f1 ff ff       	call   c0018d38 <Process::createThread(void (*)(void*), void*, int)>
c0019b71:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0019b78:	a3 88 a1 02 c0       	mov    ds:0xc002a188,eax
c0019b7d:	68 00 01 00 00       	push   0x100
c0019b82:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c0019b87:	6a 00                	push   0x0
c0019b89:	6a 00                	push   0x0
c0019b8b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0019b91:	e8 6c 2b ff ff       	call   c000c702 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019b96:	83 c4 2c             	add    esp,0x2c
c0019b99:	c3                   	ret    

c0019b9a <Vm::finish8086()>:
c0019b9a:	53                   	push   ebx
c0019b9b:	83 ec 08             	sub    esp,0x8
c0019b9e:	fa                   	cli    
c0019b9f:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c0019ba5:	80 3d 84 a1 02 c0 00 	cmp    BYTE PTR ds:0xc002a184,0x0
c0019bac:	75 15                	jne    c0019bc3 <Vm::finish8086()+0x29>
c0019bae:	e8 a1 f3 ff ff       	call   c0018f54 <schedule()>
c0019bb3:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c0019bb8:	48                   	dec    eax
c0019bb9:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c0019bbe:	75 de                	jne    c0019b9e <Vm::finish8086()+0x4>
c0019bc0:	fb                   	sti    
c0019bc1:	eb db                	jmp    c0019b9e <Vm::finish8086()+0x4>
c0019bc3:	83 ec 0c             	sub    esp,0xc
c0019bc6:	8b 1d 80 a1 02 c0    	mov    ebx,DWORD PTR ds:0xc002a180
c0019bcc:	ff 35 88 a1 02 c0    	push   DWORD PTR ds:0xc002a188
c0019bd2:	c6 05 84 a1 02 c0 00 	mov    BYTE PTR ds:0xc002a184,0x0
c0019bd9:	e8 32 f8 ff ff       	call   c0019410 <unblockTask(ThreadControlBlock*)>
c0019bde:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c0019be3:	83 c4 10             	add    esp,0x10
c0019be6:	8d 50 ff             	lea    edx,[eax-0x1]
c0019be9:	89 15 28 a1 02 c0    	mov    DWORD PTR ds:0xc002a128,edx
c0019bef:	85 d2                	test   edx,edx
c0019bf1:	75 01                	jne    c0019bf4 <Vm::finish8086()+0x5a>
c0019bf3:	fb                   	sti    
c0019bf4:	89 d8                	mov    eax,ebx
c0019bf6:	83 c4 08             	add    esp,0x8
c0019bf9:	5b                   	pop    ebx
c0019bfa:	c3                   	ret    

c0019bfb <Vm::getOutput8086(unsigned char*)>:
c0019bfb:	57                   	push   edi
c0019bfc:	8b 0d 8c a1 02 c0    	mov    ecx,DWORD PTR ds:0xc002a18c
c0019c02:	56                   	push   esi
c0019c03:	be a0 a1 02 c0       	mov    esi,0xc002a1a0
c0019c08:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0019c0c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019c0e:	a1 8c a1 02 c0       	mov    eax,ds:0xc002a18c
c0019c13:	5e                   	pop    esi
c0019c14:	c7 05 8c a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a18c,0x0
c0019c1e:	5f                   	pop    edi
c0019c1f:	c3                   	ret    

c0019c20 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0019c20:	55                   	push   ebp
c0019c21:	57                   	push   edi
c0019c22:	56                   	push   esi
c0019c23:	53                   	push   ebx
c0019c24:	83 ec 0c             	sub    esp,0xc
c0019c27:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0019c2b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0019c2f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0019c33:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019c37:	fa                   	cli    
c0019c38:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c0019c3e:	80 3d 85 a1 02 c0 00 	cmp    BYTE PTR ds:0xc002a185,0x0
c0019c45:	75 15                	jne    c0019c5c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0019c47:	e8 08 f3 ff ff       	call   c0018f54 <schedule()>
c0019c4c:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c0019c51:	48                   	dec    eax
c0019c52:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c0019c57:	75 de                	jne    c0019c37 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0019c59:	fb                   	sti    
c0019c5a:	eb db                	jmp    c0019c37 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0019c5c:	a1 88 a1 02 c0       	mov    eax,ds:0xc002a188
c0019c61:	c7 05 8c a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a18c,0x0
c0019c6b:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0019c6f:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0019c73:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0019c77:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0019c7b:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0019c7f:	0f b7 ff             	movzx  edi,di
c0019c82:	0f b7 f6             	movzx  esi,si
c0019c85:	50                   	push   eax
c0019c86:	6a 20                	push   0x20
c0019c88:	6a 00                	push   0x0
c0019c8a:	68 a0 a1 02 c0       	push   0xc002a1a0
c0019c8f:	e8 00 6a fe ff       	call   c0000694 <memset>
c0019c94:	5a                   	pop    edx
c0019c95:	59                   	pop    ecx
c0019c96:	57                   	push   edi
c0019c97:	56                   	push   esi
c0019c98:	e8 2d fe ff ff       	call   c0019aca <Vm::realToLinear(unsigned short, unsigned short)>
c0019c9d:	83 c4 10             	add    esp,0x10
c0019ca0:	89 c7                	mov    edi,eax
c0019ca2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019ca6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0019caa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019cac:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c0019cb1:	c6 05 85 a1 02 c0 00 	mov    BYTE PTR ds:0xc002a185,0x0
c0019cb8:	48                   	dec    eax
c0019cb9:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c0019cbe:	75 01                	jne    c0019cc1 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0019cc0:	fb                   	sti    
c0019cc1:	83 ec 0c             	sub    esp,0xc
c0019cc4:	ff 35 88 a1 02 c0    	push   DWORD PTR ds:0xc002a188
c0019cca:	e8 41 f7 ff ff       	call   c0019410 <unblockTask(ThreadControlBlock*)>
c0019ccf:	83 c4 1c             	add    esp,0x1c
c0019cd2:	b0 01                	mov    al,0x1
c0019cd4:	5b                   	pop    ebx
c0019cd5:	5e                   	pop    esi
c0019cd6:	5f                   	pop    edi
c0019cd7:	5d                   	pop    ebp
c0019cd8:	c3                   	ret    

c0019cd9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0019cd9:	55                   	push   ebp
c0019cda:	57                   	push   edi
c0019cdb:	56                   	push   esi
c0019cdc:	53                   	push   ebx
c0019cdd:	83 ec 2c             	sub    esp,0x2c
c0019ce0:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0019ce4:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019ce8:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0019cec:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0019cf0:	fa                   	cli    
c0019cf1:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c0019cf7:	0f b6 35 85 a1 02 c0 	movzx  esi,BYTE PTR ds:0xc002a185
c0019cfe:	89 f0                	mov    eax,esi
c0019d00:	84 c0                	test   al,al
c0019d02:	75 1d                	jne    c0019d21 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0019d04:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019d08:	e8 47 f2 ff ff       	call   c0018f54 <schedule()>
c0019d0d:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c0019d12:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019d16:	48                   	dec    eax
c0019d17:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c0019d1c:	75 d2                	jne    c0019cf0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0019d1e:	fb                   	sti    
c0019d1f:	eb cf                	jmp    c0019cf0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0019d21:	a1 88 a1 02 c0       	mov    eax,ds:0xc002a188
c0019d26:	c7 05 8c a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a18c,0x0
c0019d30:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0019d34:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0019d38:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0019d3c:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0019d40:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0019d44:	50                   	push   eax
c0019d45:	6a 20                	push   0x20
c0019d47:	6a 00                	push   0x0
c0019d49:	68 a0 a1 02 c0       	push   0xc002a1a0
c0019d4e:	e8 41 69 fe ff       	call   c0000694 <memset>
c0019d53:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0019d5a:	e8 88 00 ff ff       	call   c0009de7 <malloc>
c0019d5f:	83 c4 0c             	add    esp,0xc
c0019d62:	89 c3                	mov    ebx,eax
c0019d64:	ff 35 50 a1 02 c0    	push   DWORD PTR ds:0xc002a150
c0019d6a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019d6e:	50                   	push   eax
c0019d6f:	e8 0e 39 ff ff       	call   c000d682 <File::File(char const*, Process*)>
c0019d74:	83 c4 10             	add    esp,0x10
c0019d77:	85 db                	test   ebx,ebx
c0019d79:	75 0a                	jne    c0019d85 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0019d7b:	83 ec 0c             	sub    esp,0xc
c0019d7e:	68 6c 6e 02 c0       	push   0xc0026e6c
c0019d83:	eb 3e                	jmp    c0019dc3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0019d85:	50                   	push   eax
c0019d86:	8d 44 24 17          	lea    eax,[esp+0x17]
c0019d8a:	50                   	push   eax
c0019d8b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019d8f:	50                   	push   eax
c0019d90:	53                   	push   ebx
c0019d91:	e8 72 3c ff ff       	call   c000da08 <File::stat(unsigned long long*, bool*)>
c0019d96:	83 c4 10             	add    esp,0x10
c0019d99:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0019d9e:	74 0a                	je     c0019daa <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0019da0:	83 ec 0c             	sub    esp,0xc
c0019da3:	68 80 6e 02 c0       	push   0xc0026e80
c0019da8:	eb 19                	jmp    c0019dc3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0019daa:	51                   	push   ecx
c0019dab:	51                   	push   ecx
c0019dac:	6a 01                	push   0x1
c0019dae:	53                   	push   ebx
c0019daf:	e8 a8 39 ff ff       	call   c000d75c <File::open(FileOpenMode)>
c0019db4:	83 c4 10             	add    esp,0x10
c0019db7:	85 c0                	test   eax,eax
c0019db9:	74 24                	je     c0019ddf <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0019dbb:	83 ec 0c             	sub    esp,0xc
c0019dbe:	68 99 6e 02 c0       	push   0xc0026e99
c0019dc3:	e8 31 b4 ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c0019dc8:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c0019dcd:	83 c4 10             	add    esp,0x10
c0019dd0:	48                   	dec    eax
c0019dd1:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c0019dd6:	85 c0                	test   eax,eax
c0019dd8:	75 01                	jne    c0019ddb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0019dda:	fb                   	sti    
c0019ddb:	31 f6                	xor    esi,esi
c0019ddd:	eb 58                	jmp    c0019e37 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c0019ddf:	0f b7 ed             	movzx  ebp,bp
c0019de2:	50                   	push   eax
c0019de3:	0f b7 ff             	movzx  edi,di
c0019de6:	50                   	push   eax
c0019de7:	55                   	push   ebp
c0019de8:	57                   	push   edi
c0019de9:	e8 dc fc ff ff       	call   c0019aca <Vm::realToLinear(unsigned short, unsigned short)>
c0019dee:	5a                   	pop    edx
c0019def:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019df1:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019df5:	51                   	push   ecx
c0019df6:	50                   	push   eax
c0019df7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019dfb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019dff:	53                   	push   ebx
c0019e00:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0019e03:	83 c4 14             	add    esp,0x14
c0019e06:	53                   	push   ebx
c0019e07:	e8 ae 39 ff ff       	call   c000d7ba <File::close()>
c0019e0c:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c0019e11:	83 c4 10             	add    esp,0x10
c0019e14:	48                   	dec    eax
c0019e15:	c6 05 85 a1 02 c0 00 	mov    BYTE PTR ds:0xc002a185,0x0
c0019e1c:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c0019e21:	85 c0                	test   eax,eax
c0019e23:	75 01                	jne    c0019e26 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0019e25:	fb                   	sti    
c0019e26:	83 ec 0c             	sub    esp,0xc
c0019e29:	ff 35 88 a1 02 c0    	push   DWORD PTR ds:0xc002a188
c0019e2f:	e8 dc f5 ff ff       	call   c0019410 <unblockTask(ThreadControlBlock*)>
c0019e34:	83 c4 10             	add    esp,0x10
c0019e37:	83 c4 2c             	add    esp,0x2c
c0019e3a:	89 f0                	mov    eax,esi
c0019e3c:	5b                   	pop    ebx
c0019e3d:	5e                   	pop    esi
c0019e3e:	5f                   	pop    edi
c0019e3f:	5d                   	pop    ebp
c0019e40:	c3                   	ret    

c0019e41 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0019e41:	57                   	push   edi
c0019e42:	56                   	push   esi
c0019e43:	53                   	push   ebx
c0019e44:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019e48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e4c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019e50:	83 e8 06             	sub    eax,0x6
c0019e53:	0f b7 c0             	movzx  eax,ax
c0019e56:	50                   	push   eax
c0019e57:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0019e5c:	50                   	push   eax
c0019e5d:	e8 68 fc ff ff       	call   c0019aca <Vm::realToLinear(unsigned short, unsigned short)>
c0019e62:	5a                   	pop    edx
c0019e63:	5e                   	pop    esi
c0019e64:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0019e67:	8d 56 fa             	lea    edx,[esi-0x6]
c0019e6a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0019e70:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0019e73:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0019e76:	83 c2 02             	add    edx,0x2
c0019e79:	66 89 10             	mov    WORD PTR [eax],dx
c0019e7c:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0019e7f:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0019e83:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0019e86:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0019e8a:	89 d6                	mov    esi,edx
c0019e8c:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0019e92:	66 81 e6 ff fd       	and    si,0xfdff
c0019e97:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0019e9b:	74 07                	je     c0019ea4 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0019e9d:	89 d6                	mov    esi,edx
c0019e9f:	66 81 ce 00 02       	or     si,0x200
c0019ea4:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0019ea8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019ead:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0019eb1:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0019eb9:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0019ebc:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0019ec4:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0019ec7:	5b                   	pop    ebx
c0019ec8:	5e                   	pop    esi
c0019ec9:	5f                   	pop    edi
c0019eca:	c3                   	ret    

c0019ecb <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0019ecb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019ed0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019ed5:	c1 e0 04             	shl    eax,0x4
c0019ed8:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0019edb:	c3                   	ret    

c0019edc <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0019edc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019ee1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019ee6:	c1 e0 04             	shl    eax,0x4
c0019ee9:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0019eed:	c3                   	ret    

c0019eee <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0019eee:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019ef3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019ef8:	c1 e0 04             	shl    eax,0x4
c0019efb:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0019efe:	c3                   	ret    

c0019eff <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0019eff:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019f04:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019f09:	c1 e0 04             	shl    eax,0x4
c0019f0c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019f10:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0019f13:	c3                   	ret    

c0019f14 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0019f14:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019f19:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019f1e:	c1 e0 04             	shl    eax,0x4
c0019f21:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019f25:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0019f29:	c3                   	ret    

c0019f2a <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0019f2a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019f2f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019f34:	c1 e0 04             	shl    eax,0x4
c0019f37:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019f3b:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0019f3e:	c3                   	ret    

c0019f3f <Vm::faultHandler(regs*)>:
c0019f3f:	55                   	push   ebp
c0019f40:	57                   	push   edi
c0019f41:	56                   	push   esi
c0019f42:	53                   	push   ebx
c0019f43:	83 ec 1c             	sub    esp,0x1c
c0019f46:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019f4a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0019f4d:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0019f51:	0f b7 f8             	movzx  edi,ax
c0019f54:	52                   	push   edx
c0019f55:	0f b7 c0             	movzx  eax,ax
c0019f58:	50                   	push   eax
c0019f59:	e8 6c fb ff ff       	call   c0019aca <Vm::realToLinear(unsigned short, unsigned short)>
c0019f5e:	5a                   	pop    edx
c0019f5f:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0019f62:	59                   	pop    ecx
c0019f63:	89 c1                	mov    ecx,eax
c0019f65:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019f68:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019f6c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019f71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019f75:	0f b7 c5             	movzx  eax,bp
c0019f78:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019f7c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0019f80:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019f84:	e8 41 fb ff ff       	call   c0019aca <Vm::realToLinear(unsigned short, unsigned short)>
c0019f89:	5e                   	pop    esi
c0019f8a:	be 06 00 00 00       	mov    esi,0x6
c0019f8f:	5a                   	pop    edx
c0019f90:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0019f95:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0019f9a:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0019f9d:	80 fa 9d             	cmp    dl,0x9d
c0019fa0:	0f 84 2c 02 00 00    	je     c001a1d2 <Vm::faultHandler(regs*)+0x293>
c0019fa6:	0f 87 91 00 00 00    	ja     c001a03d <Vm::faultHandler(regs*)+0xfe>
c0019fac:	80 fa 66             	cmp    dl,0x66
c0019faf:	0f 84 98 01 00 00    	je     c001a14d <Vm::faultHandler(regs*)+0x20e>
c0019fb5:	77 47                	ja     c0019ffe <Vm::faultHandler(regs*)+0xbf>
c0019fb7:	80 fa 36             	cmp    dl,0x36
c0019fba:	0f 84 80 01 00 00    	je     c001a140 <Vm::faultHandler(regs*)+0x201>
c0019fc0:	77 1a                	ja     c0019fdc <Vm::faultHandler(regs*)+0x9d>
c0019fc2:	80 fa 26             	cmp    dl,0x26
c0019fc5:	0f 84 4e 01 00 00    	je     c001a119 <Vm::faultHandler(regs*)+0x1da>
c0019fcb:	80 fa 2e             	cmp    dl,0x2e
c0019fce:	0f 85 e2 05 00 00    	jne    c001a5b6 <Vm::faultHandler(regs*)+0x677>
c0019fd4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019fd7:	31 f6                	xor    esi,esi
c0019fd9:	41                   	inc    ecx
c0019fda:	eb be                	jmp    c0019f9a <Vm::faultHandler(regs*)+0x5b>
c0019fdc:	80 fa 64             	cmp    dl,0x64
c0019fdf:	0f 84 41 01 00 00    	je     c001a126 <Vm::faultHandler(regs*)+0x1e7>
c0019fe5:	0f 87 48 01 00 00    	ja     c001a133 <Vm::faultHandler(regs*)+0x1f4>
c0019feb:	80 fa 3e             	cmp    dl,0x3e
c0019fee:	0f 85 c2 05 00 00    	jne    c001a5b6 <Vm::faultHandler(regs*)+0x677>
c0019ff4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019ff7:	be 01 00 00 00       	mov    esi,0x1
c0019ffc:	eb db                	jmp    c0019fd9 <Vm::faultHandler(regs*)+0x9a>
c0019ffe:	80 fa 6d             	cmp    dl,0x6d
c001a001:	0f 84 ec 02 00 00    	je     c001a2f3 <Vm::faultHandler(regs*)+0x3b4>
c001a007:	77 17                	ja     c001a020 <Vm::faultHandler(regs*)+0xe1>
c001a009:	80 fa 67             	cmp    dl,0x67
c001a00c:	0f 84 48 01 00 00    	je     c001a15a <Vm::faultHandler(regs*)+0x21b>
c001a012:	80 fa 6c             	cmp    dl,0x6c
c001a015:	0f 84 69 02 00 00    	je     c001a284 <Vm::faultHandler(regs*)+0x345>
c001a01b:	e9 96 05 00 00       	jmp    c001a5b6 <Vm::faultHandler(regs*)+0x677>
c001a020:	80 fa 6f             	cmp    dl,0x6f
c001a023:	0f 84 f4 03 00 00    	je     c001a41d <Vm::faultHandler(regs*)+0x4de>
c001a029:	0f 82 59 03 00 00    	jb     c001a388 <Vm::faultHandler(regs*)+0x449>
c001a02f:	80 fa 9c             	cmp    dl,0x9c
c001a032:	0f 84 2f 01 00 00    	je     c001a167 <Vm::faultHandler(regs*)+0x228>
c001a038:	e9 79 05 00 00       	jmp    c001a5b6 <Vm::faultHandler(regs*)+0x677>
c001a03d:	80 fa ec             	cmp    dl,0xec
c001a040:	0f 84 14 05 00 00    	je     c001a55a <Vm::faultHandler(regs*)+0x61b>
c001a046:	77 7b                	ja     c001a0c3 <Vm::faultHandler(regs*)+0x184>
c001a048:	80 fa e4             	cmp    dl,0xe4
c001a04b:	0f 84 93 04 00 00    	je     c001a4e4 <Vm::faultHandler(regs*)+0x5a5>
c001a051:	77 53                	ja     c001a0a6 <Vm::faultHandler(regs*)+0x167>
c001a053:	80 fa cd             	cmp    dl,0xcd
c001a056:	0f 84 d9 01 00 00    	je     c001a235 <Vm::faultHandler(regs*)+0x2f6>
c001a05c:	80 fa cf             	cmp    dl,0xcf
c001a05f:	0f 85 51 05 00 00    	jne    c001a5b6 <Vm::faultHandler(regs*)+0x677>
c001a065:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001a068:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001a06b:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001a06f:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001a072:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001a076:	81 ca 00 02 02 00    	or     edx,0x20200
c001a07c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001a07f:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001a083:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001a089:	66 c1 e8 09          	shr    ax,0x9
c001a08d:	83 e0 01             	and    eax,0x1
c001a090:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001a093:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001a096:	83 c0 06             	add    eax,0x6
c001a099:	25 ff ff 00 00       	and    eax,0xffff
c001a09e:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001a0a1:	e9 0c 05 00 00       	jmp    c001a5b2 <Vm::faultHandler(regs*)+0x673>
c001a0a6:	80 fa e6             	cmp    dl,0xe6
c001a0a9:	0f 84 7f 04 00 00    	je     c001a52e <Vm::faultHandler(regs*)+0x5ef>
c001a0af:	0f 82 4b 04 00 00    	jb     c001a500 <Vm::faultHandler(regs*)+0x5c1>
c001a0b5:	80 fa e7             	cmp    dl,0xe7
c001a0b8:	0f 84 87 04 00 00    	je     c001a545 <Vm::faultHandler(regs*)+0x606>
c001a0be:	e9 f3 04 00 00       	jmp    c001a5b6 <Vm::faultHandler(regs*)+0x677>
c001a0c3:	80 fa ef             	cmp    dl,0xef
c001a0c6:	0f 84 d1 04 00 00    	je     c001a59d <Vm::faultHandler(regs*)+0x65e>
c001a0cc:	77 28                	ja     c001a0f6 <Vm::faultHandler(regs*)+0x1b7>
c001a0ce:	80 fa ed             	cmp    dl,0xed
c001a0d1:	0f 84 9f 04 00 00    	je     c001a576 <Vm::faultHandler(regs*)+0x637>
c001a0d7:	80 fa ee             	cmp    dl,0xee
c001a0da:	0f 85 d6 04 00 00    	jne    c001a5b6 <Vm::faultHandler(regs*)+0x677>
c001a0e0:	50                   	push   eax
c001a0e1:	50                   	push   eax
c001a0e2:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001a0e6:	50                   	push   eax
c001a0e7:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001a0eb:	50                   	push   eax
c001a0ec:	e8 a3 f9 ff ff       	call   c0019a94 <Vm::outbv(unsigned short, unsigned char)>
c001a0f1:	e9 9f 04 00 00       	jmp    c001a595 <Vm::faultHandler(regs*)+0x656>
c001a0f6:	80 fa fa             	cmp    dl,0xfa
c001a0f9:	0f 84 69 01 00 00    	je     c001a268 <Vm::faultHandler(regs*)+0x329>
c001a0ff:	80 fa fb             	cmp    dl,0xfb
c001a102:	0f 84 6e 01 00 00    	je     c001a276 <Vm::faultHandler(regs*)+0x337>
c001a108:	80 fa f3             	cmp    dl,0xf3
c001a10b:	0f 85 a5 04 00 00    	jne    c001a5b6 <Vm::faultHandler(regs*)+0x677>
c001a111:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a114:	e9 c0 fe ff ff       	jmp    c0019fd9 <Vm::faultHandler(regs*)+0x9a>
c001a119:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a11c:	be 02 00 00 00       	mov    esi,0x2
c001a121:	e9 b3 fe ff ff       	jmp    c0019fd9 <Vm::faultHandler(regs*)+0x9a>
c001a126:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a129:	be 03 00 00 00       	mov    esi,0x3
c001a12e:	e9 a6 fe ff ff       	jmp    c0019fd9 <Vm::faultHandler(regs*)+0x9a>
c001a133:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a136:	be 04 00 00 00       	mov    esi,0x4
c001a13b:	e9 99 fe ff ff       	jmp    c0019fd9 <Vm::faultHandler(regs*)+0x9a>
c001a140:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a143:	be 05 00 00 00       	mov    esi,0x5
c001a148:	e9 8c fe ff ff       	jmp    c0019fd9 <Vm::faultHandler(regs*)+0x9a>
c001a14d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a150:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001a155:	e9 7f fe ff ff       	jmp    c0019fd9 <Vm::faultHandler(regs*)+0x9a>
c001a15a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a15d:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001a162:	e9 72 fe ff ff       	jmp    c0019fd9 <Vm::faultHandler(regs*)+0x9a>
c001a167:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001a16a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001a16e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a173:	74 30                	je     c001a1a5 <Vm::faultHandler(regs*)+0x266>
c001a175:	83 e9 04             	sub    ecx,0x4
c001a178:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001a17e:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001a184:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001a187:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001a18a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001a190:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001a194:	0f 84 15 04 00 00    	je     c001a5af <Vm::faultHandler(regs*)+0x670>
c001a19a:	80 ce 02             	or     dh,0x2
c001a19d:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001a1a0:	e9 0a 04 00 00       	jmp    c001a5af <Vm::faultHandler(regs*)+0x670>
c001a1a5:	83 e9 02             	sub    ecx,0x2
c001a1a8:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001a1ae:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001a1b1:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001a1b5:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001a1bb:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001a1bf:	74 05                	je     c001a1c6 <Vm::faultHandler(regs*)+0x287>
c001a1c1:	80 ce 02             	or     dh,0x2
c001a1c4:	eb 03                	jmp    c001a1c9 <Vm::faultHandler(regs*)+0x28a>
c001a1c6:	80 e6 fd             	and    dh,0xfd
c001a1c9:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001a1cd:	e9 dd 03 00 00       	jmp    c001a5af <Vm::faultHandler(regs*)+0x670>
c001a1d2:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a1d7:	74 2a                	je     c001a203 <Vm::faultHandler(regs*)+0x2c4>
c001a1d9:	8b 10                	mov    edx,DWORD PTR [eax]
c001a1db:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001a1e1:	81 ca 00 02 02 00    	or     edx,0x20200
c001a1e7:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001a1ea:	8b 00                	mov    eax,DWORD PTR [eax]
c001a1ec:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001a1f2:	c1 e8 09             	shr    eax,0x9
c001a1f5:	83 e0 01             	and    eax,0x1
c001a1f8:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001a1fb:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001a1fe:	83 c0 04             	add    eax,0x4
c001a201:	eb 25                	jmp    c001a228 <Vm::faultHandler(regs*)+0x2e9>
c001a203:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001a206:	81 ca 00 02 02 00    	or     edx,0x20200
c001a20c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001a20f:	66 8b 00             	mov    ax,WORD PTR [eax]
c001a212:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001a218:	66 c1 e8 09          	shr    ax,0x9
c001a21c:	83 e0 01             	and    eax,0x1
c001a21f:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001a222:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001a225:	83 c0 02             	add    eax,0x2
c001a228:	25 ff ff 00 00       	and    eax,0xffff
c001a22d:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001a230:	e9 7a 03 00 00       	jmp    c001a5af <Vm::faultHandler(regs*)+0x670>
c001a235:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a239:	3c ee                	cmp    al,0xee
c001a23b:	75 10                	jne    c001a24d <Vm::faultHandler(regs*)+0x30e>
c001a23d:	83 ec 0c             	sub    esp,0xc
c001a240:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001a243:	e8 e9 f8 ff ff       	call   c0019b31 <Vm::mainloop3(unsigned long)>
c001a248:	e9 4b 03 00 00       	jmp    c001a598 <Vm::faultHandler(regs*)+0x659>
c001a24d:	83 ec 0c             	sub    esp,0xc
c001a250:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a254:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a258:	51                   	push   ecx
c001a259:	50                   	push   eax
c001a25a:	53                   	push   ebx
c001a25b:	e8 e1 fb ff ff       	call   c0019e41 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001a260:	83 c4 20             	add    esp,0x20
c001a263:	e9 4a 03 00 00       	jmp    c001a5b2 <Vm::faultHandler(regs*)+0x673>
c001a268:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a26d:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001a271:	e9 39 03 00 00       	jmp    c001a5af <Vm::faultHandler(regs*)+0x670>
c001a276:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a27b:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c001a27f:	e9 2b 03 00 00       	jmp    c001a5af <Vm::faultHandler(regs*)+0x670>
c001a284:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001a287:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001a28c:	74 2b                	je     c001a2b9 <Vm::faultHandler(regs*)+0x37a>
c001a28e:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001a295:	76 22                	jbe    c001a2b9 <Vm::faultHandler(regs*)+0x37a>
c001a297:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001a29b:	50                   	push   eax
c001a29c:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001a2a0:	50                   	push   eax
c001a2a1:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001a2a5:	50                   	push   eax
c001a2a6:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001a2aa:	50                   	push   eax
c001a2ab:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a2af:	50                   	push   eax
c001a2b0:	6a 6c                	push   0x6c
c001a2b2:	6a 6c                	push   0x6c
c001a2b4:	e9 b9 01 00 00       	jmp    c001a472 <Vm::faultHandler(regs*)+0x533>
c001a2b9:	83 ec 0c             	sub    esp,0xc
c001a2bc:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001a2c0:	0f b7 f6             	movzx  esi,si
c001a2c3:	50                   	push   eax
c001a2c4:	e8 b8 f7 ff ff       	call   c0019a81 <Vm::inbv(unsigned short)>
c001a2c9:	83 c4 0c             	add    esp,0xc
c001a2cc:	0f b6 c0             	movzx  eax,al
c001a2cf:	50                   	push   eax
c001a2d0:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001a2d4:	50                   	push   eax
c001a2d5:	56                   	push   esi
c001a2d6:	e8 24 fc ff ff       	call   c0019eff <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001a2db:	83 c4 10             	add    esp,0x10
c001a2de:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001a2e1:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001a2e5:	74 03                	je     c001a2ea <Vm::faultHandler(regs*)+0x3ab>
c001a2e7:	48                   	dec    eax
c001a2e8:	eb 01                	jmp    c001a2eb <Vm::faultHandler(regs*)+0x3ac>
c001a2ea:	40                   	inc    eax
c001a2eb:	0f b7 c0             	movzx  eax,ax
c001a2ee:	e9 8d 00 00 00       	jmp    c001a380 <Vm::faultHandler(regs*)+0x441>
c001a2f3:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001a2f6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001a2f9:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001a2fe:	74 29                	je     c001a329 <Vm::faultHandler(regs*)+0x3ea>
c001a300:	3d ff ff 00 00       	cmp    eax,0xffff
c001a305:	76 22                	jbe    c001a329 <Vm::faultHandler(regs*)+0x3ea>
c001a307:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001a30b:	50                   	push   eax
c001a30c:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001a310:	50                   	push   eax
c001a311:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001a315:	50                   	push   eax
c001a316:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001a31a:	50                   	push   eax
c001a31b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a31f:	50                   	push   eax
c001a320:	6a 6d                	push   0x6d
c001a322:	6a 6d                	push   0x6d
c001a324:	e9 49 01 00 00       	jmp    c001a472 <Vm::faultHandler(regs*)+0x533>
c001a329:	0f b7 c8             	movzx  ecx,ax
c001a32c:	0f b7 f6             	movzx  esi,si
c001a32f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001a332:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a337:	74 20                	je     c001a359 <Vm::faultHandler(regs*)+0x41a>
c001a339:	ed                   	in     eax,dx
c001a33a:	55                   	push   ebp
c001a33b:	50                   	push   eax
c001a33c:	51                   	push   ecx
c001a33d:	56                   	push   esi
c001a33e:	e8 e7 fb ff ff       	call   c0019f2a <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001a343:	83 c4 10             	add    esp,0x10
c001a346:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001a349:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001a34d:	74 05                	je     c001a354 <Vm::faultHandler(regs*)+0x415>
c001a34f:	83 e8 04             	sub    eax,0x4
c001a352:	eb 27                	jmp    c001a37b <Vm::faultHandler(regs*)+0x43c>
c001a354:	83 c0 04             	add    eax,0x4
c001a357:	eb 22                	jmp    c001a37b <Vm::faultHandler(regs*)+0x43c>
c001a359:	66 ed                	in     ax,dx
c001a35b:	0f b7 c0             	movzx  eax,ax
c001a35e:	57                   	push   edi
c001a35f:	50                   	push   eax
c001a360:	51                   	push   ecx
c001a361:	56                   	push   esi
c001a362:	e8 ad fb ff ff       	call   c0019f14 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001a367:	83 c4 10             	add    esp,0x10
c001a36a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001a36d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001a371:	74 05                	je     c001a378 <Vm::faultHandler(regs*)+0x439>
c001a373:	83 e8 02             	sub    eax,0x2
c001a376:	eb 03                	jmp    c001a37b <Vm::faultHandler(regs*)+0x43c>
c001a378:	83 c0 02             	add    eax,0x2
c001a37b:	25 ff ff 00 00       	and    eax,0xffff
c001a380:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001a383:	e9 27 02 00 00       	jmp    c001a5af <Vm::faultHandler(regs*)+0x670>
c001a388:	8d 46 ff             	lea    eax,[esi-0x1]
c001a38b:	3c 05                	cmp    al,0x5
c001a38d:	77 24                	ja     c001a3b3 <Vm::faultHandler(regs*)+0x474>
c001a38f:	0f b6 c0             	movzx  eax,al
c001a392:	ff 24 85 0c 6f 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd90f4]
c001a399:	0f b7 fd             	movzx  edi,bp
c001a39c:	eb 15                	jmp    c001a3b3 <Vm::faultHandler(regs*)+0x474>
c001a39e:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001a3a2:	eb 0f                	jmp    c001a3b3 <Vm::faultHandler(regs*)+0x474>
c001a3a4:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001a3a8:	eb 09                	jmp    c001a3b3 <Vm::faultHandler(regs*)+0x474>
c001a3aa:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001a3ae:	eb 03                	jmp    c001a3b3 <Vm::faultHandler(regs*)+0x474>
c001a3b0:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001a3b3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001a3b6:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001a3bb:	74 29                	je     c001a3e6 <Vm::faultHandler(regs*)+0x4a7>
c001a3bd:	3d ff ff 00 00       	cmp    eax,0xffff
c001a3c2:	76 22                	jbe    c001a3e6 <Vm::faultHandler(regs*)+0x4a7>
c001a3c4:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001a3c8:	50                   	push   eax
c001a3c9:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001a3cd:	50                   	push   eax
c001a3ce:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001a3d2:	50                   	push   eax
c001a3d3:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001a3d7:	50                   	push   eax
c001a3d8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a3dc:	50                   	push   eax
c001a3dd:	6a 6e                	push   0x6e
c001a3df:	6a 6e                	push   0x6e
c001a3e1:	e9 8c 00 00 00       	jmp    c001a472 <Vm::faultHandler(regs*)+0x533>
c001a3e6:	0f b7 c0             	movzx  eax,ax
c001a3e9:	52                   	push   edx
c001a3ea:	52                   	push   edx
c001a3eb:	50                   	push   eax
c001a3ec:	57                   	push   edi
c001a3ed:	e8 d9 fa ff ff       	call   c0019ecb <Vm::readByteFromReal(unsigned short, unsigned short)>
c001a3f2:	59                   	pop    ecx
c001a3f3:	0f b6 c0             	movzx  eax,al
c001a3f6:	5e                   	pop    esi
c001a3f7:	50                   	push   eax
c001a3f8:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001a3fc:	50                   	push   eax
c001a3fd:	e8 92 f6 ff ff       	call   c0019a94 <Vm::outbv(unsigned short, unsigned char)>
c001a402:	83 c4 10             	add    esp,0x10
c001a405:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001a408:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001a40c:	74 03                	je     c001a411 <Vm::faultHandler(regs*)+0x4d2>
c001a40e:	48                   	dec    eax
c001a40f:	eb 01                	jmp    c001a412 <Vm::faultHandler(regs*)+0x4d3>
c001a411:	40                   	inc    eax
c001a412:	0f b7 c0             	movzx  eax,ax
c001a415:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001a418:	e9 92 01 00 00       	jmp    c001a5af <Vm::faultHandler(regs*)+0x670>
c001a41d:	8d 46 ff             	lea    eax,[esi-0x1]
c001a420:	3c 05                	cmp    al,0x5
c001a422:	77 1f                	ja     c001a443 <Vm::faultHandler(regs*)+0x504>
c001a424:	0f b6 c0             	movzx  eax,al
c001a427:	ff 24 85 24 6f 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd90dc]
c001a42e:	89 ef                	mov    edi,ebp
c001a430:	eb 11                	jmp    c001a443 <Vm::faultHandler(regs*)+0x504>
c001a432:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001a435:	eb 0c                	jmp    c001a443 <Vm::faultHandler(regs*)+0x504>
c001a437:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001a43a:	eb 07                	jmp    c001a443 <Vm::faultHandler(regs*)+0x504>
c001a43c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001a43f:	eb 02                	jmp    c001a443 <Vm::faultHandler(regs*)+0x504>
c001a441:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001a443:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001a446:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001a44b:	74 37                	je     c001a484 <Vm::faultHandler(regs*)+0x545>
c001a44d:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001a453:	76 2f                	jbe    c001a484 <Vm::faultHandler(regs*)+0x545>
c001a455:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001a459:	50                   	push   eax
c001a45a:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001a45e:	50                   	push   eax
c001a45f:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001a463:	50                   	push   eax
c001a464:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001a468:	50                   	push   eax
c001a469:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a46d:	50                   	push   eax
c001a46e:	6a 6f                	push   0x6f
c001a470:	6a 6f                	push   0x6f
c001a472:	68 b2 6e 02 c0       	push   0xc0026eb2
c001a477:	e8 9b 2c ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c001a47c:	83 c4 20             	add    esp,0x20
c001a47f:	e9 86 01 00 00       	jmp    c001a60a <Vm::faultHandler(regs*)+0x6cb>
c001a484:	0f b7 d7             	movzx  edx,di
c001a487:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001a48a:	0f b7 c6             	movzx  eax,si
c001a48d:	81 e1 00 04 00 00    	and    ecx,0x400
c001a493:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001a496:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a49b:	74 1d                	je     c001a4ba <Vm::faultHandler(regs*)+0x57b>
c001a49d:	55                   	push   ebp
c001a49e:	55                   	push   ebp
c001a49f:	50                   	push   eax
c001a4a0:	52                   	push   edx
c001a4a1:	e8 48 fa ff ff       	call   c0019eee <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001a4a6:	83 c4 10             	add    esp,0x10
c001a4a9:	89 fa                	mov    edx,edi
c001a4ab:	ef                   	out    dx,eax
c001a4ac:	85 c9                	test   ecx,ecx
c001a4ae:	74 05                	je     c001a4b5 <Vm::faultHandler(regs*)+0x576>
c001a4b0:	83 ee 04             	sub    esi,0x4
c001a4b3:	eb 21                	jmp    c001a4d6 <Vm::faultHandler(regs*)+0x597>
c001a4b5:	83 c6 04             	add    esi,0x4
c001a4b8:	eb 1c                	jmp    c001a4d6 <Vm::faultHandler(regs*)+0x597>
c001a4ba:	55                   	push   ebp
c001a4bb:	55                   	push   ebp
c001a4bc:	50                   	push   eax
c001a4bd:	52                   	push   edx
c001a4be:	e8 19 fa ff ff       	call   c0019edc <Vm::readWordFromReal(unsigned short, unsigned short)>
c001a4c3:	83 c4 10             	add    esp,0x10
c001a4c6:	89 fa                	mov    edx,edi
c001a4c8:	66 ef                	out    dx,ax
c001a4ca:	85 c9                	test   ecx,ecx
c001a4cc:	74 05                	je     c001a4d3 <Vm::faultHandler(regs*)+0x594>
c001a4ce:	83 ee 02             	sub    esi,0x2
c001a4d1:	eb 03                	jmp    c001a4d6 <Vm::faultHandler(regs*)+0x597>
c001a4d3:	83 c6 02             	add    esi,0x2
c001a4d6:	81 e6 ff ff 00 00    	and    esi,0xffff
c001a4dc:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001a4df:	e9 cb 00 00 00       	jmp    c001a5af <Vm::faultHandler(regs*)+0x670>
c001a4e4:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001a4eb:	83 ec 0c             	sub    esp,0xc
c001a4ee:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a4f2:	50                   	push   eax
c001a4f3:	e8 89 f5 ff ff       	call   c0019a81 <Vm::inbv(unsigned short)>
c001a4f8:	0f b6 c0             	movzx  eax,al
c001a4fb:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001a4fe:	eb 3f                	jmp    c001a53f <Vm::faultHandler(regs*)+0x600>
c001a500:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a505:	74 07                	je     c001a50e <Vm::faultHandler(regs*)+0x5cf>
c001a507:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001a50b:	ed                   	in     eax,dx
c001a50c:	eb 14                	jmp    c001a522 <Vm::faultHandler(regs*)+0x5e3>
c001a50e:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001a511:	66 31 f6             	xor    si,si
c001a514:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001a517:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001a51b:	66 ed                	in     ax,dx
c001a51d:	0f b7 c0             	movzx  eax,ax
c001a520:	09 f0                	or     eax,esi
c001a522:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001a525:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a529:	e9 84 00 00 00       	jmp    c001a5b2 <Vm::faultHandler(regs*)+0x673>
c001a52e:	52                   	push   edx
c001a52f:	52                   	push   edx
c001a530:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001a534:	50                   	push   eax
c001a535:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a539:	50                   	push   eax
c001a53a:	e8 55 f5 ff ff       	call   c0019a94 <Vm::outbv(unsigned short, unsigned char)>
c001a53f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a543:	eb 53                	jmp    c001a598 <Vm::faultHandler(regs*)+0x659>
c001a545:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001a548:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001a54c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a551:	74 03                	je     c001a556 <Vm::faultHandler(regs*)+0x617>
c001a553:	ef                   	out    dx,eax
c001a554:	eb cf                	jmp    c001a525 <Vm::faultHandler(regs*)+0x5e6>
c001a556:	66 ef                	out    dx,ax
c001a558:	eb cb                	jmp    c001a525 <Vm::faultHandler(regs*)+0x5e6>
c001a55a:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001a561:	83 ec 0c             	sub    esp,0xc
c001a564:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001a568:	50                   	push   eax
c001a569:	e8 13 f5 ff ff       	call   c0019a81 <Vm::inbv(unsigned short)>
c001a56e:	0f b6 c0             	movzx  eax,al
c001a571:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001a574:	eb 1f                	jmp    c001a595 <Vm::faultHandler(regs*)+0x656>
c001a576:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001a579:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a57e:	74 03                	je     c001a583 <Vm::faultHandler(regs*)+0x644>
c001a580:	ed                   	in     eax,dx
c001a581:	eb 0d                	jmp    c001a590 <Vm::faultHandler(regs*)+0x651>
c001a583:	66 ed                	in     ax,dx
c001a585:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001a588:	0f b7 c0             	movzx  eax,ax
c001a58b:	66 31 d2             	xor    dx,dx
c001a58e:	09 d0                	or     eax,edx
c001a590:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001a593:	eb 1a                	jmp    c001a5af <Vm::faultHandler(regs*)+0x670>
c001a595:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a598:	83 c4 10             	add    esp,0x10
c001a59b:	eb 15                	jmp    c001a5b2 <Vm::faultHandler(regs*)+0x673>
c001a59d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001a5a0:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001a5a3:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a5a8:	74 03                	je     c001a5ad <Vm::faultHandler(regs*)+0x66e>
c001a5aa:	ef                   	out    dx,eax
c001a5ab:	eb 02                	jmp    c001a5af <Vm::faultHandler(regs*)+0x670>
c001a5ad:	66 ef                	out    dx,ax
c001a5af:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a5b2:	b0 01                	mov    al,0x1
c001a5b4:	eb 56                	jmp    c001a60c <Vm::faultHandler(regs*)+0x6cd>
c001a5b6:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001a5ba:	50                   	push   eax
c001a5bb:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001a5bf:	50                   	push   eax
c001a5c0:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001a5c4:	50                   	push   eax
c001a5c5:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001a5c9:	50                   	push   eax
c001a5ca:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a5ce:	50                   	push   eax
c001a5cf:	52                   	push   edx
c001a5d0:	52                   	push   edx
c001a5d1:	68 df 6e 02 c0       	push   0xc0026edf
c001a5d6:	e8 3c 2b ff ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c001a5db:	83 c4 20             	add    esp,0x20
c001a5de:	83 ec 0c             	sub    esp,0xc
c001a5e1:	6a 60                	push   0x60
c001a5e3:	e8 99 f4 ff ff       	call   c0019a81 <Vm::inbv(unsigned short)>
c001a5e8:	83 c4 10             	add    esp,0x10
c001a5eb:	3c 1c                	cmp    al,0x1c
c001a5ed:	74 04                	je     c001a5f3 <Vm::faultHandler(regs*)+0x6b4>
c001a5ef:	3c 5a                	cmp    al,0x5a
c001a5f1:	75 eb                	jne    c001a5de <Vm::faultHandler(regs*)+0x69f>
c001a5f3:	3c 5a                	cmp    al,0x5a
c001a5f5:	74 04                	je     c001a5fb <Vm::faultHandler(regs*)+0x6bc>
c001a5f7:	3c 1c                	cmp    al,0x1c
c001a5f9:	75 0f                	jne    c001a60a <Vm::faultHandler(regs*)+0x6cb>
c001a5fb:	83 ec 0c             	sub    esp,0xc
c001a5fe:	6a 60                	push   0x60
c001a600:	e8 7c f4 ff ff       	call   c0019a81 <Vm::inbv(unsigned short)>
c001a605:	83 c4 10             	add    esp,0x10
c001a608:	eb e9                	jmp    c001a5f3 <Vm::faultHandler(regs*)+0x6b4>
c001a60a:	31 c0                	xor    eax,eax
c001a60c:	83 c4 1c             	add    esp,0x1c
c001a60f:	5b                   	pop    ebx
c001a610:	5e                   	pop    esi
c001a611:	5f                   	pop    edi
c001a612:	5d                   	pop    ebp
c001a613:	c3                   	ret    

c001a614 <Vm::fpuInternalTo32(unsigned long long)>:
c001a614:	57                   	push   edi
c001a615:	56                   	push   esi
c001a616:	53                   	push   ebx
c001a617:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a61b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a61f:	89 d6                	mov    esi,edx
c001a621:	89 d7                	mov    edi,edx
c001a623:	89 c1                	mov    ecx,eax
c001a625:	c1 ef 14             	shr    edi,0x14
c001a628:	89 d3                	mov    ebx,edx
c001a62a:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001a630:	31 d2                	xor    edx,edx
c001a632:	89 f8                	mov    eax,edi
c001a634:	81 e6 00 00 00 80    	and    esi,0x80000000
c001a63a:	bf ff 00 00 00       	mov    edi,0xff
c001a63f:	05 80 fc ff ff       	add    eax,0xfffffc80
c001a644:	83 d2 ff             	adc    edx,0xffffffff
c001a647:	39 c7                	cmp    edi,eax
c001a649:	bf 00 00 00 00       	mov    edi,0x0
c001a64e:	19 d7                	sbb    edi,edx
c001a650:	72 16                	jb     c001a668 <Vm::fpuInternalTo32(unsigned long long)+0x54>
c001a652:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001a656:	c1 e0 17             	shl    eax,0x17
c001a659:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001a65f:	09 f1                	or     ecx,esi
c001a661:	09 c1                	or     ecx,eax
c001a663:	89 cf                	mov    edi,ecx
c001a665:	eb 05                	jmp    c001a66c <Vm::fpuInternalTo32(unsigned long long)+0x58>
c001a667:	90                   	nop
c001a668:	31 ff                	xor    edi,edi
c001a66a:	66 90                	xchg   ax,ax
c001a66c:	89 f8                	mov    eax,edi
c001a66e:	5b                   	pop    ebx
c001a66f:	5e                   	pop    esi
c001a670:	5f                   	pop    edi
c001a671:	c3                   	ret    

c001a672 <Vm::fpuInternalTo64(unsigned long long)>:
c001a672:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a676:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a67a:	c3                   	ret    

c001a67b <Vm::fpu32ToInternal(unsigned int)>:
c001a67b:	57                   	push   edi
c001a67c:	31 ff                	xor    edi,edi
c001a67e:	56                   	push   esi
c001a67f:	53                   	push   ebx
c001a680:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a684:	89 cb                	mov    ebx,ecx
c001a686:	89 ce                	mov    esi,ecx
c001a688:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001a68e:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001a694:	c1 e9 17             	shr    ecx,0x17
c001a697:	89 f0                	mov    eax,esi
c001a699:	0f b6 d1             	movzx  edx,cl
c001a69c:	81 c2 80 03 00 00    	add    edx,0x380
c001a6a2:	89 d1                	mov    ecx,edx
c001a6a4:	89 fa                	mov    edx,edi
c001a6a6:	c1 e1 14             	shl    ecx,0x14
c001a6a9:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001a6ad:	c1 e0 1d             	shl    eax,0x1d
c001a6b0:	89 d7                	mov    edi,edx
c001a6b2:	89 c6                	mov    esi,eax
c001a6b4:	89 ca                	mov    edx,ecx
c001a6b6:	89 f0                	mov    eax,esi
c001a6b8:	09 fa                	or     edx,edi
c001a6ba:	09 da                	or     edx,ebx
c001a6bc:	5b                   	pop    ebx
c001a6bd:	5e                   	pop    esi
c001a6be:	5f                   	pop    edi
c001a6bf:	c3                   	ret    

c001a6c0 <Vm::fpu64ToInternal(unsigned long long)>:
c001a6c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a6c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a6c8:	c3                   	ret    

c001a6c9 <Vm::fpuFloatToLong(unsigned long long)>:
c001a6c9:	57                   	push   edi
c001a6ca:	31 c0                	xor    eax,eax
c001a6cc:	56                   	push   esi
c001a6cd:	31 d2                	xor    edx,edx
c001a6cf:	53                   	push   ebx
c001a6d0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a6d4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a6d8:	89 d9                	mov    ecx,ebx
c001a6da:	c1 e9 14             	shr    ecx,0x14
c001a6dd:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001a6e3:	89 cf                	mov    edi,ecx
c001a6e5:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001a6eb:	78 37                	js     c001a724 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c001a6ed:	89 d9                	mov    ecx,ebx
c001a6ef:	89 f0                	mov    eax,esi
c001a6f1:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001a6f7:	81 c9 00 00 10 00    	or     ecx,0x100000
c001a6fd:	89 ca                	mov    edx,ecx
c001a6ff:	b9 34 00 00 00       	mov    ecx,0x34
c001a704:	29 f9                	sub    ecx,edi
c001a706:	0f ad d0             	shrd   eax,edx,cl
c001a709:	d3 fa                	sar    edx,cl
c001a70b:	f6 c1 20             	test   cl,0x20
c001a70e:	74 08                	je     c001a718 <Vm::fpuFloatToLong(unsigned long long)+0x4f>
c001a710:	89 d0                	mov    eax,edx
c001a712:	c1 fa 1f             	sar    edx,0x1f
c001a715:	8d 76 00             	lea    esi,[esi+0x0]
c001a718:	85 db                	test   ebx,ebx
c001a71a:	79 08                	jns    c001a724 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c001a71c:	f7 d8                	neg    eax
c001a71e:	83 d2 00             	adc    edx,0x0
c001a721:	f7 da                	neg    edx
c001a723:	90                   	nop
c001a724:	5b                   	pop    ebx
c001a725:	5e                   	pop    esi
c001a726:	5f                   	pop    edi
c001a727:	c3                   	ret    

c001a728 <Vm::fpuULongToFloat(unsigned long long)>:
c001a728:	57                   	push   edi
c001a729:	31 c9                	xor    ecx,ecx
c001a72b:	56                   	push   esi
c001a72c:	53                   	push   ebx
c001a72d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a731:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a735:	8d 76 00             	lea    esi,[esi+0x0]
c001a738:	0f ba e7 14          	bt     edi,0x14
c001a73c:	72 0a                	jb     c001a748 <Vm::fpuULongToFloat(unsigned long long)+0x20>
c001a73e:	01 f6                	add    esi,esi
c001a740:	11 ff                	adc    edi,edi
c001a742:	41                   	inc    ecx
c001a743:	eb f3                	jmp    c001a738 <Vm::fpuULongToFloat(unsigned long long)+0x10>
c001a745:	8d 76 00             	lea    esi,[esi+0x0]
c001a748:	89 fa                	mov    edx,edi
c001a74a:	89 f0                	mov    eax,esi
c001a74c:	bb 33 04 00 00       	mov    ebx,0x433
c001a751:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001a757:	29 cb                	sub    ebx,ecx
c001a759:	89 d9                	mov    ecx,ebx
c001a75b:	5b                   	pop    ebx
c001a75c:	c1 e1 14             	shl    ecx,0x14
c001a75f:	5e                   	pop    esi
c001a760:	09 ca                	or     edx,ecx
c001a762:	5f                   	pop    edi
c001a763:	c3                   	ret    

c001a764 <Vm::fpuLongToFloat(long long)>:
c001a764:	56                   	push   esi
c001a765:	31 c0                	xor    eax,eax
c001a767:	53                   	push   ebx
c001a768:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a76c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a770:	39 c8                	cmp    eax,ecx
c001a772:	19 d8                	sbb    eax,ebx
c001a774:	7d 06                	jge    c001a77c <Vm::fpuLongToFloat(long long)+0x18>
c001a776:	31 f6                	xor    esi,esi
c001a778:	eb 0e                	jmp    c001a788 <Vm::fpuLongToFloat(long long)+0x24>
c001a77a:	66 90                	xchg   ax,ax
c001a77c:	f7 d9                	neg    ecx
c001a77e:	be 01 00 00 00       	mov    esi,0x1
c001a783:	83 d3 00             	adc    ebx,0x0
c001a786:	f7 db                	neg    ebx
c001a788:	31 c0                	xor    eax,eax
c001a78a:	66 90                	xchg   ax,ax
c001a78c:	0f ba e3 14          	bt     ebx,0x14
c001a790:	72 0a                	jb     c001a79c <Vm::fpuLongToFloat(long long)+0x38>
c001a792:	01 c9                	add    ecx,ecx
c001a794:	11 db                	adc    ebx,ebx
c001a796:	40                   	inc    eax
c001a797:	eb f3                	jmp    c001a78c <Vm::fpuLongToFloat(long long)+0x28>
c001a799:	8d 76 00             	lea    esi,[esi+0x0]
c001a79c:	ba 33 04 00 00       	mov    edx,0x433
c001a7a1:	29 c2                	sub    edx,eax
c001a7a3:	89 c8                	mov    eax,ecx
c001a7a5:	c1 e2 14             	shl    edx,0x14
c001a7a8:	89 d9                	mov    ecx,ebx
c001a7aa:	89 f3                	mov    ebx,esi
c001a7ac:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001a7b2:	09 ca                	or     edx,ecx
c001a7b4:	84 db                	test   bl,bl
c001a7b6:	74 08                	je     c001a7c0 <Vm::fpuLongToFloat(long long)+0x5c>
c001a7b8:	81 ca 00 00 00 80    	or     edx,0x80000000
c001a7be:	66 90                	xchg   ax,ax
c001a7c0:	5b                   	pop    ebx
c001a7c1:	5e                   	pop    esi
c001a7c2:	c3                   	ret    

c001a7c3 <Vm::fpuGet0()>:
c001a7c3:	31 c0                	xor    eax,eax
c001a7c5:	31 d2                	xor    edx,edx
c001a7c7:	c3                   	ret    

c001a7c8 <Vm::fpuGet1()>:
c001a7c8:	b8 01 00 00 00       	mov    eax,0x1
c001a7cd:	31 d2                	xor    edx,edx
c001a7cf:	c3                   	ret    

c001a7d0 <Vm::fpuGetPi()>:
c001a7d0:	b8 03 00 00 00       	mov    eax,0x3
c001a7d5:	31 d2                	xor    edx,edx
c001a7d7:	c3                   	ret    

c001a7d8 <Vm::fpuGetLog2E()>:
c001a7d8:	83 ec 18             	sub    esp,0x18
c001a7db:	68 3c 6f 02 c0       	push   0xc0026f3c
c001a7e0:	e8 14 aa ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c001a7e5:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001a7ea:	31 d2                	xor    edx,edx
c001a7ec:	83 c4 1c             	add    esp,0x1c
c001a7ef:	c3                   	ret    

c001a7f0 <Vm::fpuGetLogE2()>:
c001a7f0:	83 ec 18             	sub    esp,0x18
c001a7f3:	68 48 6f 02 c0       	push   0xc0026f48
c001a7f8:	e8 fc a9 ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c001a7fd:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001a802:	31 d2                	xor    edx,edx
c001a804:	83 c4 1c             	add    esp,0x1c
c001a807:	c3                   	ret    

c001a808 <Vm::fpuGetLog210()>:
c001a808:	83 ec 18             	sub    esp,0x18
c001a80b:	68 54 6f 02 c0       	push   0xc0026f54
c001a810:	e8 e4 a9 ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c001a815:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001a81a:	31 d2                	xor    edx,edx
c001a81c:	83 c4 1c             	add    esp,0x1c
c001a81f:	c3                   	ret    

c001a820 <Vm::fpuGetLog102()>:
c001a820:	83 ec 18             	sub    esp,0x18
c001a823:	68 61 6f 02 c0       	push   0xc0026f61
c001a828:	e8 cc a9 ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c001a82d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001a832:	31 d2                	xor    edx,edx
c001a834:	83 c4 1c             	add    esp,0x1c
c001a837:	c3                   	ret    

c001a838 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001a838:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a83c:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001a840:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a844:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001a848:	0f 92 c0             	setb   al
c001a84b:	c3                   	ret    

c001a84c <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001a84c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a854:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001a858:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001a85c:	09 c2                	or     edx,eax
c001a85e:	0f 94 c0             	sete   al
c001a861:	c3                   	ret    

c001a862 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001a862:	57                   	push   edi
c001a863:	56                   	push   esi
c001a864:	53                   	push   ebx
c001a865:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a869:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a86d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a871:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a875:	57                   	push   edi
c001a876:	56                   	push   esi
c001a877:	53                   	push   ebx
c001a878:	51                   	push   ecx
c001a879:	e8 ce ff ff ff       	call   c001a84c <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001a87e:	83 c4 10             	add    esp,0x10
c001a881:	88 c2                	mov    dl,al
c001a883:	31 c0                	xor    eax,eax
c001a885:	84 d2                	test   dl,dl
c001a887:	75 0f                	jne    c001a898 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x36>
c001a889:	57                   	push   edi
c001a88a:	56                   	push   esi
c001a88b:	53                   	push   ebx
c001a88c:	51                   	push   ecx
c001a88d:	e8 a6 ff ff ff       	call   c001a838 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001a892:	83 c4 10             	add    esp,0x10
c001a895:	8d 76 00             	lea    esi,[esi+0x0]
c001a898:	83 e0 01             	and    eax,0x1
c001a89b:	5b                   	pop    ebx
c001a89c:	88 c1                	mov    cl,al
c001a89e:	83 e2 01             	and    edx,0x1
c001a8a1:	a0 c1 a1 02 c0       	mov    al,ds:0xc002a1c1
c001a8a6:	c1 e2 06             	shl    edx,0x6
c001a8a9:	83 e0 ba             	and    eax,0xffffffba
c001a8ac:	5e                   	pop    esi
c001a8ad:	09 c8                	or     eax,ecx
c001a8af:	5f                   	pop    edi
c001a8b0:	09 d0                	or     eax,edx
c001a8b2:	a2 c1 a1 02 c0       	mov    ds:0xc002a1c1,al
c001a8b7:	c3                   	ret    

c001a8b8 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001a8b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a8bc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a8c0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001a8c4:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001a8c8:	c3                   	ret    

c001a8c9 <Vm::fpuAbs(unsigned long long)>:
c001a8c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a8d1:	c3                   	ret    

c001a8d2 <Vm::fpuChs(unsigned long long)>:
c001a8d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a8da:	f7 d8                	neg    eax
c001a8dc:	83 d2 00             	adc    edx,0x0
c001a8df:	f7 da                	neg    edx
c001a8e1:	c3                   	ret    

c001a8e2 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001a8e2:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001a8e6:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001a8eb:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001a8ef:	eb c7                	jmp    c001a8b8 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001a8f1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001a8f1:	53                   	push   ebx
c001a8f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a8f6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a8fa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a8fe:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a902:	0f af ca             	imul   ecx,edx
c001a905:	0f af d8             	imul   ebx,eax
c001a908:	f7 e2                	mul    edx
c001a90a:	01 d9                	add    ecx,ebx
c001a90c:	5b                   	pop    ebx
c001a90d:	01 ca                	add    edx,ecx
c001a90f:	c3                   	ret    

c001a910 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001a910:	83 ec 0c             	sub    esp,0xc
c001a913:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a917:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a91b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a91f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a923:	e8 b8 86 00 00       	call   c0022fe0 <__udivdi3>
c001a928:	83 c4 1c             	add    esp,0x1c
c001a92b:	c3                   	ret    

c001a92c <Vm::fpuSquare(unsigned long long)>:
c001a92c:	50                   	push   eax
c001a92d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a931:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a935:	52                   	push   edx
c001a936:	50                   	push   eax
c001a937:	52                   	push   edx
c001a938:	50                   	push   eax
c001a939:	e8 b3 ff ff ff       	call   c001a8f1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a93e:	83 c4 14             	add    esp,0x14
c001a941:	c3                   	ret    

c001a942 <Vm::fpuGetReg(int)>:
c001a942:	83 ec 0c             	sub    esp,0xc
c001a945:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001a94a:	76 10                	jbe    c001a95c <Vm::fpuGetReg(int)+0x1a>
c001a94c:	83 ec 0c             	sub    esp,0xc
c001a94f:	68 6e 6f 02 c0       	push   0xc0026f6e
c001a954:	e8 a0 a8 ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c001a959:	83 c4 10             	add    esp,0x10
c001a95c:	a0 c1 a1 02 c0       	mov    al,ds:0xc002a1c1
c001a961:	b9 08 00 00 00       	mov    ecx,0x8
c001a966:	c0 e8 03             	shr    al,0x3
c001a969:	83 e0 07             	and    eax,0x7
c001a96c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001a970:	99                   	cdq    
c001a971:	f7 f9                	idiv   ecx
c001a973:	8b 04 d5 c4 a1 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd5e3c]
c001a97a:	8b 14 d5 c8 a1 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd5e38]
c001a981:	83 c4 0c             	add    esp,0xc
c001a984:	c3                   	ret    

c001a985 <Vm::fpuSetReg(int, unsigned long long)>:
c001a985:	57                   	push   edi
c001a986:	56                   	push   esi
c001a987:	52                   	push   edx
c001a988:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a98c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a990:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001a995:	76 11                	jbe    c001a9a8 <Vm::fpuSetReg(int, unsigned long long)+0x23>
c001a997:	83 ec 0c             	sub    esp,0xc
c001a99a:	68 81 6f 02 c0       	push   0xc0026f81
c001a99f:	e8 55 a8 ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c001a9a4:	83 c4 10             	add    esp,0x10
c001a9a7:	90                   	nop
c001a9a8:	a0 c1 a1 02 c0       	mov    al,ds:0xc002a1c1
c001a9ad:	b9 08 00 00 00       	mov    ecx,0x8
c001a9b2:	c0 e8 03             	shr    al,0x3
c001a9b5:	83 e0 07             	and    eax,0x7
c001a9b8:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001a9bc:	99                   	cdq    
c001a9bd:	f7 f9                	idiv   ecx
c001a9bf:	89 34 d5 c4 a1 02 c0 	mov    DWORD PTR [edx*8-0x3ffd5e3c],esi
c001a9c6:	89 3c d5 c8 a1 02 c0 	mov    DWORD PTR [edx*8-0x3ffd5e38],edi
c001a9cd:	58                   	pop    eax
c001a9ce:	5e                   	pop    esi
c001a9cf:	5f                   	pop    edi
c001a9d0:	c3                   	ret    

c001a9d1 <Vm::fpuPush(unsigned long long)>:
c001a9d1:	a0 c1 a1 02 c0       	mov    al,ds:0xc002a1c1
c001a9d6:	c0 e8 03             	shr    al,0x3
c001a9d9:	83 e0 07             	and    eax,0x7
c001a9dc:	83 c0 07             	add    eax,0x7
c001a9df:	88 c2                	mov    dl,al
c001a9e1:	83 e0 07             	and    eax,0x7
c001a9e4:	83 e2 07             	and    edx,0x7
c001a9e7:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001a9ee:	8a 15 c1 a1 02 c0    	mov    dl,BYTE PTR ds:0xc002a1c1
c001a9f4:	83 e2 c7             	and    edx,0xffffffc7
c001a9f7:	09 ca                	or     edx,ecx
c001a9f9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a9fd:	88 15 c1 a1 02 c0    	mov    BYTE PTR ds:0xc002a1c1,dl
c001aa03:	89 0c c5 c8 a1 02 c0 	mov    DWORD PTR [eax*8-0x3ffd5e38],ecx
c001aa0a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001aa0e:	89 14 c5 c4 a1 02 c0 	mov    DWORD PTR [eax*8-0x3ffd5e3c],edx
c001aa15:	a1 04 a2 02 c0       	mov    eax,ds:0xc002a204
c001aa1a:	83 f8 08             	cmp    eax,0x8
c001aa1d:	75 09                	jne    c001aa28 <Vm::fpuPush(unsigned long long)+0x57>
c001aa1f:	80 0d c0 a1 02 c0 40 	or     BYTE PTR ds:0xc002a1c0,0x40
c001aa26:	c3                   	ret    
c001aa27:	90                   	nop
c001aa28:	40                   	inc    eax
c001aa29:	a3 04 a2 02 c0       	mov    ds:0xc002a204,eax
c001aa2e:	c3                   	ret    

c001aa2f <Vm::fpuPop()>:
c001aa2f:	8a 0d c1 a1 02 c0    	mov    cl,BYTE PTR ds:0xc002a1c1
c001aa35:	53                   	push   ebx
c001aa36:	c0 e9 03             	shr    cl,0x3
c001aa39:	8a 1d c1 a1 02 c0    	mov    bl,BYTE PTR ds:0xc002a1c1
c001aa3f:	83 e1 07             	and    ecx,0x7
c001aa42:	83 e3 c7             	and    ebx,0xffffffc7
c001aa45:	8b 04 cd c4 a1 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd5e3c]
c001aa4c:	8b 14 cd c8 a1 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd5e38]
c001aa53:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001aa5a:	83 e1 38             	and    ecx,0x38
c001aa5d:	09 d9                	or     ecx,ebx
c001aa5f:	88 0d c1 a1 02 c0    	mov    BYTE PTR ds:0xc002a1c1,cl
c001aa65:	8b 0d 04 a2 02 c0    	mov    ecx,DWORD PTR ds:0xc002a204
c001aa6b:	85 c9                	test   ecx,ecx
c001aa6d:	74 09                	je     c001aa78 <Vm::fpuPop()+0x49>
c001aa6f:	49                   	dec    ecx
c001aa70:	89 0d 04 a2 02 c0    	mov    DWORD PTR ds:0xc002a204,ecx
c001aa76:	eb 08                	jmp    c001aa80 <Vm::fpuPop()+0x51>
c001aa78:	80 0d c0 a1 02 c0 40 	or     BYTE PTR ds:0xc002a1c0,0x40
c001aa7f:	90                   	nop
c001aa80:	5b                   	pop    ebx
c001aa81:	c3                   	ret    

c001aa82 <Vm::x87Handler(regs*)>:
c001aa82:	55                   	push   ebp
c001aa83:	57                   	push   edi
c001aa84:	56                   	push   esi
c001aa85:	53                   	push   ebx
c001aa86:	83 ec 1c             	sub    esp,0x1c
c001aa89:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001aa8d:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001aa92:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001aa95:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001aa9d:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001aaa1:	50                   	push   eax
c001aaa2:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001aaa6:	50                   	push   eax
c001aaa7:	8d 44 24 14          	lea    eax,[esp+0x14]
c001aaab:	50                   	push   eax
c001aaac:	53                   	push   ebx
c001aaad:	e8 60 9e ff ff       	call   c0014912 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001aab2:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001aab5:	83 c4 10             	add    esp,0x10
c001aab8:	89 c6                	mov    esi,eax
c001aaba:	80 fa d9             	cmp    dl,0xd9
c001aabd:	0f 85 79 01 00 00    	jne    c001ac3c <Vm::x87Handler(regs*)+0x1ba>
c001aac3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001aac7:	8d 50 20             	lea    edx,[eax+0x20]
c001aaca:	80 fa 0e             	cmp    dl,0xe
c001aacd:	0f 87 a5 00 00 00    	ja     c001ab78 <Vm::x87Handler(regs*)+0xf6>
c001aad3:	0f b6 d2             	movzx  edx,dl
c001aad6:	ff 24 95 94 6f 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd906c]
c001aadd:	8d 76 00             	lea    esi,[esi+0x0]
c001aae0:	e8 de fc ff ff       	call   c001a7c3 <Vm::fpuGet0()>
c001aae5:	eb 09                	jmp    c001aaf0 <Vm::x87Handler(regs*)+0x6e>
c001aae7:	90                   	nop
c001aae8:	e8 db fc ff ff       	call   c001a7c8 <Vm::fpuGet1()>
c001aaed:	8d 76 00             	lea    esi,[esi+0x0]
c001aaf0:	57                   	push   edi
c001aaf1:	57                   	push   edi
c001aaf2:	66 90                	xchg   ax,ax
c001aaf4:	52                   	push   edx
c001aaf5:	50                   	push   eax
c001aaf6:	e8 d6 fe ff ff       	call   c001a9d1 <Vm::fpuPush(unsigned long long)>
c001aafb:	90                   	nop
c001aafc:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ab00:	83 c4 10             	add    esp,0x10
c001ab03:	90                   	nop
c001ab04:	b0 01                	mov    al,0x1
c001ab06:	e9 89 0a 00 00       	jmp    c001b594 <Vm::x87Handler(regs*)+0xb12>
c001ab0b:	90                   	nop
c001ab0c:	83 ec 0c             	sub    esp,0xc
c001ab0f:	6a 00                	push   0x0
c001ab11:	e8 2c fe ff ff       	call   c001a942 <Vm::fpuGetReg(int)>
c001ab16:	59                   	pop    ecx
c001ab17:	5e                   	pop    esi
c001ab18:	52                   	push   edx
c001ab19:	50                   	push   eax
c001ab1a:	e8 b3 fd ff ff       	call   c001a8d2 <Vm::fpuChs(unsigned long long)>
c001ab1f:	eb 17                	jmp    c001ab38 <Vm::x87Handler(regs*)+0xb6>
c001ab21:	8d 76 00             	lea    esi,[esi+0x0]
c001ab24:	83 ec 0c             	sub    esp,0xc
c001ab27:	6a 00                	push   0x0
c001ab29:	e8 14 fe ff ff       	call   c001a942 <Vm::fpuGetReg(int)>
c001ab2e:	5f                   	pop    edi
c001ab2f:	5d                   	pop    ebp
c001ab30:	52                   	push   edx
c001ab31:	50                   	push   eax
c001ab32:	e8 92 fd ff ff       	call   c001a8c9 <Vm::fpuAbs(unsigned long long)>
c001ab37:	90                   	nop
c001ab38:	83 c4 0c             	add    esp,0xc
c001ab3b:	90                   	nop
c001ab3c:	52                   	push   edx
c001ab3d:	50                   	push   eax
c001ab3e:	66 90                	xchg   ax,ax
c001ab40:	6a 00                	push   0x0
c001ab42:	66 90                	xchg   ax,ax
c001ab44:	e8 3c fe ff ff       	call   c001a985 <Vm::fpuSetReg(int, unsigned long long)>
c001ab49:	eb b1                	jmp    c001aafc <Vm::x87Handler(regs*)+0x7a>
c001ab4b:	90                   	nop
c001ab4c:	e8 b7 fc ff ff       	call   c001a808 <Vm::fpuGetLog210()>
c001ab51:	eb 9d                	jmp    c001aaf0 <Vm::x87Handler(regs*)+0x6e>
c001ab53:	90                   	nop
c001ab54:	e8 7f fc ff ff       	call   c001a7d8 <Vm::fpuGetLog2E()>
c001ab59:	eb 95                	jmp    c001aaf0 <Vm::x87Handler(regs*)+0x6e>
c001ab5b:	90                   	nop
c001ab5c:	e8 6f fc ff ff       	call   c001a7d0 <Vm::fpuGetPi()>
c001ab61:	eb 8d                	jmp    c001aaf0 <Vm::x87Handler(regs*)+0x6e>
c001ab63:	90                   	nop
c001ab64:	e8 b7 fc ff ff       	call   c001a820 <Vm::fpuGetLog102()>
c001ab69:	eb 85                	jmp    c001aaf0 <Vm::x87Handler(regs*)+0x6e>
c001ab6b:	90                   	nop
c001ab6c:	e8 7f fc ff ff       	call   c001a7f0 <Vm::fpuGetLogE2()>
c001ab71:	e9 7a ff ff ff       	jmp    c001aaf0 <Vm::x87Handler(regs*)+0x6e>
c001ab76:	66 90                	xchg   ax,ax
c001ab78:	8d 50 40             	lea    edx,[eax+0x40]
c001ab7b:	80 fa 07             	cmp    dl,0x7
c001ab7e:	77 18                	ja     c001ab98 <Vm::x87Handler(regs*)+0x116>
c001ab80:	83 ec 0c             	sub    esp,0xc
c001ab83:	2d c0 00 00 00       	sub    eax,0xc0
c001ab88:	50                   	push   eax
c001ab89:	e8 b4 fd ff ff       	call   c001a942 <Vm::fpuGetReg(int)>
c001ab8e:	59                   	pop    ecx
c001ab8f:	5e                   	pop    esi
c001ab90:	e9 5f ff ff ff       	jmp    c001aaf4 <Vm::x87Handler(regs*)+0x72>
c001ab95:	8d 76 00             	lea    esi,[esi+0x0]
c001ab98:	8d 50 38             	lea    edx,[eax+0x38]
c001ab9b:	80 fa 07             	cmp    dl,0x7
c001ab9e:	77 3c                	ja     c001abdc <Vm::x87Handler(regs*)+0x15a>
c001aba0:	83 ec 0c             	sub    esp,0xc
c001aba3:	2d c8 00 00 00       	sub    eax,0xc8
c001aba8:	50                   	push   eax
c001aba9:	e8 94 fd ff ff       	call   c001a942 <Vm::fpuGetReg(int)>
c001abae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001abb5:	89 c6                	mov    esi,eax
c001abb7:	89 d7                	mov    edi,edx
c001abb9:	e8 84 fd ff ff       	call   c001a942 <Vm::fpuGetReg(int)>
c001abbe:	83 c4 0c             	add    esp,0xc
c001abc1:	52                   	push   edx
c001abc2:	50                   	push   eax
c001abc3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001abc7:	2d c8 00 00 00       	sub    eax,0xc8
c001abcc:	50                   	push   eax
c001abcd:	e8 b3 fd ff ff       	call   c001a985 <Vm::fpuSetReg(int, unsigned long long)>
c001abd2:	83 c4 0c             	add    esp,0xc
c001abd5:	57                   	push   edi
c001abd6:	56                   	push   esi
c001abd7:	e9 64 ff ff ff       	jmp    c001ab40 <Vm::x87Handler(regs*)+0xbe>
c001abdc:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001abe0:	84 d2                	test   dl,dl
c001abe2:	75 10                	jne    c001abf4 <Vm::x87Handler(regs*)+0x172>
c001abe4:	83 ec 0c             	sub    esp,0xc
c001abe7:	ff 36                	push   DWORD PTR [esi]
c001abe9:	e8 8d fa ff ff       	call   c001a67b <Vm::fpu32ToInternal(unsigned int)>
c001abee:	e9 c9 00 00 00       	jmp    c001acbc <Vm::x87Handler(regs*)+0x23a>
c001abf3:	90                   	nop
c001abf4:	80 fa 03             	cmp    dl,0x3
c001abf7:	75 13                	jne    c001ac0c <Vm::x87Handler(regs*)+0x18a>
c001abf9:	e8 31 fe ff ff       	call   c001aa2f <Vm::fpuPop()>
c001abfe:	55                   	push   ebp
c001abff:	55                   	push   ebp
c001ac00:	52                   	push   edx
c001ac01:	50                   	push   eax
c001ac02:	e8 0d fa ff ff       	call   c001a614 <Vm::fpuInternalTo32(unsigned long long)>
c001ac07:	e9 90 00 00 00       	jmp    c001ac9c <Vm::x87Handler(regs*)+0x21a>
c001ac0c:	80 fa 05             	cmp    dl,0x5
c001ac0f:	75 0f                	jne    c001ac20 <Vm::x87Handler(regs*)+0x19e>
c001ac11:	66 8b 06             	mov    ax,WORD PTR [esi]
c001ac14:	66 a3 c2 a1 02 c0    	mov    ds:0xc002a1c2,ax
c001ac1a:	e9 ed 00 00 00       	jmp    c001ad0c <Vm::x87Handler(regs*)+0x28a>
c001ac1f:	90                   	nop
c001ac20:	31 c0                	xor    eax,eax
c001ac22:	80 fa 07             	cmp    dl,0x7
c001ac25:	0f 85 69 09 00 00    	jne    c001b594 <Vm::x87Handler(regs*)+0xb12>
c001ac2b:	66 a1 c2 a1 02 c0    	mov    ax,ds:0xc002a1c2
c001ac31:	66 89 06             	mov    WORD PTR [esi],ax
c001ac34:	e9 d3 00 00 00       	jmp    c001ad0c <Vm::x87Handler(regs*)+0x28a>
c001ac39:	8d 76 00             	lea    esi,[esi+0x0]
c001ac3c:	80 fa d8             	cmp    dl,0xd8
c001ac3f:	0f 84 d3 00 00 00    	je     c001ad18 <Vm::x87Handler(regs*)+0x296>
c001ac45:	80 fa dc             	cmp    dl,0xdc
c001ac48:	0f 84 2a 02 00 00    	je     c001ae78 <Vm::x87Handler(regs*)+0x3f6>
c001ac4e:	80 fa de             	cmp    dl,0xde
c001ac51:	0f 84 f1 02 00 00    	je     c001af48 <Vm::x87Handler(regs*)+0x4c6>
c001ac57:	80 fa dd             	cmp    dl,0xdd
c001ac5a:	0f 84 94 04 00 00    	je     c001b0f4 <Vm::x87Handler(regs*)+0x672>
c001ac60:	80 fa da             	cmp    dl,0xda
c001ac63:	0f 84 5f 05 00 00    	je     c001b1c8 <Vm::x87Handler(regs*)+0x746>
c001ac69:	80 fa df             	cmp    dl,0xdf
c001ac6c:	0f 84 aa 05 00 00    	je     c001b21c <Vm::x87Handler(regs*)+0x79a>
c001ac72:	31 c0                	xor    eax,eax
c001ac74:	80 fa db             	cmp    dl,0xdb
c001ac77:	0f 85 17 09 00 00    	jne    c001b594 <Vm::x87Handler(regs*)+0xb12>
c001ac7d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001ac81:	80 fa 03             	cmp    dl,0x3
c001ac84:	0f 85 c2 06 00 00    	jne    c001b34c <Vm::x87Handler(regs*)+0x8ca>
c001ac8a:	e8 a0 fd ff ff       	call   c001aa2f <Vm::fpuPop()>
c001ac8f:	55                   	push   ebp
c001ac90:	55                   	push   ebp
c001ac91:	8d 76 00             	lea    esi,[esi+0x0]
c001ac94:	52                   	push   edx
c001ac95:	50                   	push   eax
c001ac96:	e8 2e fa ff ff       	call   c001a6c9 <Vm::fpuFloatToLong(unsigned long long)>
c001ac9b:	90                   	nop
c001ac9c:	83 c4 10             	add    esp,0x10
c001ac9f:	89 06                	mov    DWORD PTR [esi],eax
c001aca1:	eb 69                	jmp    c001ad0c <Vm::x87Handler(regs*)+0x28a>
c001aca3:	90                   	nop
c001aca4:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001aca8:	84 d2                	test   dl,dl
c001acaa:	0f 85 2c 06 00 00    	jne    c001b2dc <Vm::x87Handler(regs*)+0x85a>
c001acb0:	57                   	push   edi
c001acb1:	57                   	push   edi
c001acb2:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001acb5:	ff 36                	push   DWORD PTR [esi]
c001acb7:	e8 04 fa ff ff       	call   c001a6c0 <Vm::fpu64ToInternal(unsigned long long)>
c001acbc:	5e                   	pop    esi
c001acbd:	5f                   	pop    edi
c001acbe:	52                   	push   edx
c001acbf:	50                   	push   eax
c001acc0:	e8 0c fd ff ff       	call   c001a9d1 <Vm::fpuPush(unsigned long long)>
c001acc5:	8d 76 00             	lea    esi,[esi+0x0]
c001acc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001accc:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001accf:	e9 2c fe ff ff       	jmp    c001ab00 <Vm::x87Handler(regs*)+0x7e>
c001acd4:	80 fa 03             	cmp    dl,0x3
c001acd7:	0f 85 2b 07 00 00    	jne    c001b408 <Vm::x87Handler(regs*)+0x986>
c001acdd:	57                   	push   edi
c001acde:	57                   	push   edi
c001acdf:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ace2:	ff 36                	push   DWORD PTR [esi]
c001ace4:	e8 d7 f9 ff ff       	call   c001a6c0 <Vm::fpu64ToInternal(unsigned long long)>
c001ace9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001acf0:	89 c6                	mov    esi,eax
c001acf2:	89 d7                	mov    edi,edx
c001acf4:	e8 49 fc ff ff       	call   c001a942 <Vm::fpuGetReg(int)>
c001acf9:	57                   	push   edi
c001acfa:	56                   	push   esi
c001acfb:	52                   	push   edx
c001acfc:	50                   	push   eax
c001acfd:	e8 60 fb ff ff       	call   c001a862 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001ad02:	83 c4 20             	add    esp,0x20
c001ad05:	e8 25 fd ff ff       	call   c001aa2f <Vm::fpuPop()>
c001ad0a:	66 90                	xchg   ax,ax
c001ad0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad10:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001ad13:	e9 ec fd ff ff       	jmp    c001ab04 <Vm::x87Handler(regs*)+0x82>
c001ad18:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ad1c:	8d 50 40             	lea    edx,[eax+0x40]
c001ad1f:	80 fa 07             	cmp    dl,0x7
c001ad22:	77 2c                	ja     c001ad50 <Vm::x87Handler(regs*)+0x2ce>
c001ad24:	83 ec 0c             	sub    esp,0xc
c001ad27:	2d c0 00 00 00       	sub    eax,0xc0
c001ad2c:	50                   	push   eax
c001ad2d:	e8 10 fc ff ff       	call   c001a942 <Vm::fpuGetReg(int)>
c001ad32:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ad39:	89 c6                	mov    esi,eax
c001ad3b:	89 d7                	mov    edi,edx
c001ad3d:	e8 00 fc ff ff       	call   c001a942 <Vm::fpuGetReg(int)>
c001ad42:	57                   	push   edi
c001ad43:	56                   	push   esi
c001ad44:	52                   	push   edx
c001ad45:	50                   	push   eax
c001ad46:	e8 6d fb ff ff       	call   c001a8b8 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ad4b:	eb 33                	jmp    c001ad80 <Vm::x87Handler(regs*)+0x2fe>
c001ad4d:	8d 76 00             	lea    esi,[esi+0x0]
c001ad50:	8d 50 38             	lea    edx,[eax+0x38]
c001ad53:	80 fa 07             	cmp    dl,0x7
c001ad56:	77 30                	ja     c001ad88 <Vm::x87Handler(regs*)+0x306>
c001ad58:	83 ec 0c             	sub    esp,0xc
c001ad5b:	2d c8 00 00 00       	sub    eax,0xc8
c001ad60:	50                   	push   eax
c001ad61:	e8 dc fb ff ff       	call   c001a942 <Vm::fpuGetReg(int)>
c001ad66:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ad6d:	89 c6                	mov    esi,eax
c001ad6f:	89 d7                	mov    edi,edx
c001ad71:	e8 cc fb ff ff       	call   c001a942 <Vm::fpuGetReg(int)>
c001ad76:	57                   	push   edi
c001ad77:	56                   	push   esi
c001ad78:	52                   	push   edx
c001ad79:	50                   	push   eax
c001ad7a:	e8 72 fb ff ff       	call   c001a8f1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ad7f:	90                   	nop
c001ad80:	83 c4 1c             	add    esp,0x1c
c001ad83:	e9 b4 fd ff ff       	jmp    c001ab3c <Vm::x87Handler(regs*)+0xba>
c001ad88:	8d 50 30             	lea    edx,[eax+0x30]
c001ad8b:	80 fa 07             	cmp    dl,0x7
c001ad8e:	77 10                	ja     c001ada0 <Vm::x87Handler(regs*)+0x31e>
c001ad90:	83 ec 0c             	sub    esp,0xc
c001ad93:	2d d0 00 00 00       	sub    eax,0xd0
c001ad98:	e9 c3 03 00 00       	jmp    c001b160 <Vm::x87Handler(regs*)+0x6de>
c001ad9d:	8d 76 00             	lea    esi,[esi+0x0]
c001ada0:	8d 50 28             	lea    edx,[eax+0x28]
c001ada3:	80 fa 07             	cmp    dl,0x7
c001ada6:	77 10                	ja     c001adb8 <Vm::x87Handler(regs*)+0x336>
c001ada8:	83 ec 0c             	sub    esp,0xc
c001adab:	2d d8 00 00 00       	sub    eax,0xd8
c001adb0:	e9 e7 03 00 00       	jmp    c001b19c <Vm::x87Handler(regs*)+0x71a>
c001adb5:	8d 76 00             	lea    esi,[esi+0x0]
c001adb8:	8d 50 20             	lea    edx,[eax+0x20]
c001adbb:	80 fa 07             	cmp    dl,0x7
c001adbe:	77 1c                	ja     c001addc <Vm::x87Handler(regs*)+0x35a>
c001adc0:	83 ec 0c             	sub    esp,0xc
c001adc3:	2d e0 00 00 00       	sub    eax,0xe0
c001adc8:	50                   	push   eax
c001adc9:	e8 74 fb ff ff       	call   c001a942 <Vm::fpuGetReg(int)>
c001adce:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001add5:	89 c6                	mov    esi,eax
c001add7:	89 d7                	mov    edi,edx
c001add9:	eb 25                	jmp    c001ae00 <Vm::x87Handler(regs*)+0x37e>
c001addb:	90                   	nop
c001addc:	8d 50 18             	lea    edx,[eax+0x18]
c001addf:	80 fa 07             	cmp    dl,0x7
c001ade2:	77 30                	ja     c001ae14 <Vm::x87Handler(regs*)+0x392>
c001ade4:	83 ec 0c             	sub    esp,0xc
c001ade7:	6a 00                	push   0x0
c001ade9:	e8 54 fb ff ff       	call   c001a942 <Vm::fpuGetReg(int)>
c001adee:	89 c6                	mov    esi,eax
c001adf0:	89 d7                	mov    edi,edx
c001adf2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001adf6:	2d e8 00 00 00       	sub    eax,0xe8
c001adfb:	89 04 24             	mov    DWORD PTR [esp],eax
c001adfe:	66 90                	xchg   ax,ax
c001ae00:	e8 3d fb ff ff       	call   c001a942 <Vm::fpuGetReg(int)>
c001ae05:	57                   	push   edi
c001ae06:	56                   	push   esi
c001ae07:	52                   	push   edx
c001ae08:	50                   	push   eax
c001ae09:	e8 d4 fa ff ff       	call   c001a8e2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ae0e:	e9 6d ff ff ff       	jmp    c001ad80 <Vm::x87Handler(regs*)+0x2fe>
c001ae13:	90                   	nop
c001ae14:	8d 50 10             	lea    edx,[eax+0x10]
c001ae17:	80 fa 07             	cmp    dl,0x7
c001ae1a:	77 1c                	ja     c001ae38 <Vm::x87Handler(regs*)+0x3b6>
c001ae1c:	83 ec 0c             	sub    esp,0xc
c001ae1f:	2d f0 00 00 00       	sub    eax,0xf0
c001ae24:	50                   	push   eax
c001ae25:	e8 18 fb ff ff       	call   c001a942 <Vm::fpuGetReg(int)>
c001ae2a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ae31:	89 c6                	mov    esi,eax
c001ae33:	89 d7                	mov    edi,edx
c001ae35:	eb 25                	jmp    c001ae5c <Vm::x87Handler(regs*)+0x3da>
c001ae37:	90                   	nop
c001ae38:	3c f7                	cmp    al,0xf7
c001ae3a:	0f 86 00 04 00 00    	jbe    c001b240 <Vm::x87Handler(regs*)+0x7be>
c001ae40:	83 ec 0c             	sub    esp,0xc
c001ae43:	6a 00                	push   0x0
c001ae45:	e8 f8 fa ff ff       	call   c001a942 <Vm::fpuGetReg(int)>
c001ae4a:	89 c6                	mov    esi,eax
c001ae4c:	89 d7                	mov    edi,edx
c001ae4e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ae52:	2d f8 00 00 00       	sub    eax,0xf8
c001ae57:	89 04 24             	mov    DWORD PTR [esp],eax
c001ae5a:	66 90                	xchg   ax,ax
c001ae5c:	e8 e1 fa ff ff       	call   c001a942 <Vm::fpuGetReg(int)>
c001ae61:	57                   	push   edi
c001ae62:	56                   	push   esi
c001ae63:	52                   	push   edx
c001ae64:	50                   	push   eax
c001ae65:	e8 a6 fa ff ff       	call   c001a910 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ae6a:	83 c4 1c             	add    esp,0x1c
c001ae6d:	52                   	push   edx
c001ae6e:	50                   	push   eax
c001ae6f:	6a 00                	push   0x0
c001ae71:	e9 6a 02 00 00       	jmp    c001b0e0 <Vm::x87Handler(regs*)+0x65e>
c001ae76:	66 90                	xchg   ax,ax
c001ae78:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ae7c:	8d 50 40             	lea    edx,[eax+0x40]
c001ae7f:	80 fa 07             	cmp    dl,0x7
c001ae82:	77 38                	ja     c001aebc <Vm::x87Handler(regs*)+0x43a>
c001ae84:	83 ec 0c             	sub    esp,0xc
c001ae87:	2d c0 00 00 00       	sub    eax,0xc0
c001ae8c:	50                   	push   eax
c001ae8d:	e8 b0 fa ff ff       	call   c001a942 <Vm::fpuGetReg(int)>
c001ae92:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ae99:	89 c6                	mov    esi,eax
c001ae9b:	89 d7                	mov    edi,edx
c001ae9d:	e8 a0 fa ff ff       	call   c001a942 <Vm::fpuGetReg(int)>
c001aea2:	57                   	push   edi
c001aea3:	56                   	push   esi
c001aea4:	52                   	push   edx
c001aea5:	50                   	push   eax
c001aea6:	e8 0d fa ff ff       	call   c001a8b8 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001aeab:	83 c4 1c             	add    esp,0x1c
c001aeae:	52                   	push   edx
c001aeaf:	50                   	push   eax
c001aeb0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001aeb4:	2d c0 00 00 00       	sub    eax,0xc0
c001aeb9:	eb 41                	jmp    c001aefc <Vm::x87Handler(regs*)+0x47a>
c001aebb:	90                   	nop
c001aebc:	8d 50 38             	lea    edx,[eax+0x38]
c001aebf:	80 fa 07             	cmp    dl,0x7
c001aec2:	77 40                	ja     c001af04 <Vm::x87Handler(regs*)+0x482>
c001aec4:	83 ec 0c             	sub    esp,0xc
c001aec7:	2d c8 00 00 00       	sub    eax,0xc8
c001aecc:	50                   	push   eax
c001aecd:	e8 70 fa ff ff       	call   c001a942 <Vm::fpuGetReg(int)>
c001aed2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001aed9:	89 c6                	mov    esi,eax
c001aedb:	89 d7                	mov    edi,edx
c001aedd:	e8 60 fa ff ff       	call   c001a942 <Vm::fpuGetReg(int)>
c001aee2:	57                   	push   edi
c001aee3:	56                   	push   esi
c001aee4:	52                   	push   edx
c001aee5:	50                   	push   eax
c001aee6:	e8 06 fa ff ff       	call   c001a8f1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001aeeb:	83 c4 1c             	add    esp,0x1c
c001aeee:	52                   	push   edx
c001aeef:	50                   	push   eax
c001aef0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001aef4:	2d c8 00 00 00       	sub    eax,0xc8
c001aef9:	8d 76 00             	lea    esi,[esi+0x0]
c001aefc:	50                   	push   eax
c001aefd:	e9 42 fc ff ff       	jmp    c001ab44 <Vm::x87Handler(regs*)+0xc2>
c001af02:	66 90                	xchg   ax,ax
c001af04:	83 c0 18             	add    eax,0x18
c001af07:	3c 07                	cmp    al,0x7
c001af09:	0f 87 6d 04 00 00    	ja     c001b37c <Vm::x87Handler(regs*)+0x8fa>
c001af0f:	83 ec 0c             	sub    esp,0xc
c001af12:	6a 00                	push   0x0
c001af14:	e8 29 fa ff ff       	call   c001a942 <Vm::fpuGetReg(int)>
c001af19:	89 c6                	mov    esi,eax
c001af1b:	89 d7                	mov    edi,edx
c001af1d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001af21:	2d e8 00 00 00       	sub    eax,0xe8
c001af26:	89 04 24             	mov    DWORD PTR [esp],eax
c001af29:	e8 14 fa ff ff       	call   c001a942 <Vm::fpuGetReg(int)>
c001af2e:	57                   	push   edi
c001af2f:	56                   	push   esi
c001af30:	52                   	push   edx
c001af31:	50                   	push   eax
c001af32:	e8 ab f9 ff ff       	call   c001a8e2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001af37:	83 c4 1c             	add    esp,0x1c
c001af3a:	52                   	push   edx
c001af3b:	50                   	push   eax
c001af3c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001af40:	2d e8 00 00 00       	sub    eax,0xe8
c001af45:	eb b5                	jmp    c001aefc <Vm::x87Handler(regs*)+0x47a>
c001af47:	90                   	nop
c001af48:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001af4c:	8d 50 40             	lea    edx,[eax+0x40]
c001af4f:	80 fa 07             	cmp    dl,0x7
c001af52:	77 3c                	ja     c001af90 <Vm::x87Handler(regs*)+0x50e>
c001af54:	83 ec 0c             	sub    esp,0xc
c001af57:	2d c0 00 00 00       	sub    eax,0xc0
c001af5c:	50                   	push   eax
c001af5d:	e8 e0 f9 ff ff       	call   c001a942 <Vm::fpuGetReg(int)>
c001af62:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001af69:	89 c6                	mov    esi,eax
c001af6b:	89 d7                	mov    edi,edx
c001af6d:	e8 d0 f9 ff ff       	call   c001a942 <Vm::fpuGetReg(int)>
c001af72:	57                   	push   edi
c001af73:	56                   	push   esi
c001af74:	52                   	push   edx
c001af75:	50                   	push   eax
c001af76:	e8 3d f9 ff ff       	call   c001a8b8 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001af7b:	83 c4 1c             	add    esp,0x1c
c001af7e:	52                   	push   edx
c001af7f:	50                   	push   eax
c001af80:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001af84:	2d c0 00 00 00       	sub    eax,0xc0
c001af89:	e9 b2 01 00 00       	jmp    c001b140 <Vm::x87Handler(regs*)+0x6be>
c001af8e:	66 90                	xchg   ax,ax
c001af90:	8d 50 20             	lea    edx,[eax+0x20]
c001af93:	80 fa 07             	cmp    dl,0x7
c001af96:	77 3c                	ja     c001afd4 <Vm::x87Handler(regs*)+0x552>
c001af98:	83 ec 0c             	sub    esp,0xc
c001af9b:	2d e0 00 00 00       	sub    eax,0xe0
c001afa0:	50                   	push   eax
c001afa1:	e8 9c f9 ff ff       	call   c001a942 <Vm::fpuGetReg(int)>
c001afa6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001afad:	89 c6                	mov    esi,eax
c001afaf:	89 d7                	mov    edi,edx
c001afb1:	e8 8c f9 ff ff       	call   c001a942 <Vm::fpuGetReg(int)>
c001afb6:	57                   	push   edi
c001afb7:	56                   	push   esi
c001afb8:	52                   	push   edx
c001afb9:	50                   	push   eax
c001afba:	e8 23 f9 ff ff       	call   c001a8e2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001afbf:	83 c4 1c             	add    esp,0x1c
c001afc2:	52                   	push   edx
c001afc3:	50                   	push   eax
c001afc4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001afc8:	2d e0 00 00 00       	sub    eax,0xe0
c001afcd:	e9 6e 01 00 00       	jmp    c001b140 <Vm::x87Handler(regs*)+0x6be>
c001afd2:	66 90                	xchg   ax,ax
c001afd4:	8d 50 18             	lea    edx,[eax+0x18]
c001afd7:	80 fa 07             	cmp    dl,0x7
c001afda:	77 3c                	ja     c001b018 <Vm::x87Handler(regs*)+0x596>
c001afdc:	83 ec 0c             	sub    esp,0xc
c001afdf:	6a 00                	push   0x0
c001afe1:	e8 5c f9 ff ff       	call   c001a942 <Vm::fpuGetReg(int)>
c001afe6:	89 c6                	mov    esi,eax
c001afe8:	89 d7                	mov    edi,edx
c001afea:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001afee:	2d e8 00 00 00       	sub    eax,0xe8
c001aff3:	89 04 24             	mov    DWORD PTR [esp],eax
c001aff6:	e8 47 f9 ff ff       	call   c001a942 <Vm::fpuGetReg(int)>
c001affb:	57                   	push   edi
c001affc:	56                   	push   esi
c001affd:	52                   	push   edx
c001affe:	50                   	push   eax
c001afff:	e8 de f8 ff ff       	call   c001a8e2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001b004:	83 c4 1c             	add    esp,0x1c
c001b007:	52                   	push   edx
c001b008:	50                   	push   eax
c001b009:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001b00d:	2d e8 00 00 00       	sub    eax,0xe8
c001b012:	e9 29 01 00 00       	jmp    c001b140 <Vm::x87Handler(regs*)+0x6be>
c001b017:	90                   	nop
c001b018:	8d 50 38             	lea    edx,[eax+0x38]
c001b01b:	80 fa 07             	cmp    dl,0x7
c001b01e:	77 3c                	ja     c001b05c <Vm::x87Handler(regs*)+0x5da>
c001b020:	83 ec 0c             	sub    esp,0xc
c001b023:	2d c8 00 00 00       	sub    eax,0xc8
c001b028:	50                   	push   eax
c001b029:	e8 14 f9 ff ff       	call   c001a942 <Vm::fpuGetReg(int)>
c001b02e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b035:	89 c6                	mov    esi,eax
c001b037:	89 d7                	mov    edi,edx
c001b039:	e8 04 f9 ff ff       	call   c001a942 <Vm::fpuGetReg(int)>
c001b03e:	57                   	push   edi
c001b03f:	56                   	push   esi
c001b040:	52                   	push   edx
c001b041:	50                   	push   eax
c001b042:	e8 aa f8 ff ff       	call   c001a8f1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001b047:	83 c4 1c             	add    esp,0x1c
c001b04a:	52                   	push   edx
c001b04b:	50                   	push   eax
c001b04c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001b050:	2d c8 00 00 00       	sub    eax,0xc8
c001b055:	e9 82 00 00 00       	jmp    c001b0dc <Vm::x87Handler(regs*)+0x65a>
c001b05a:	66 90                	xchg   ax,ax
c001b05c:	3c f7                	cmp    al,0xf7
c001b05e:	76 38                	jbe    c001b098 <Vm::x87Handler(regs*)+0x616>
c001b060:	83 ec 0c             	sub    esp,0xc
c001b063:	6a 00                	push   0x0
c001b065:	e8 d8 f8 ff ff       	call   c001a942 <Vm::fpuGetReg(int)>
c001b06a:	89 c6                	mov    esi,eax
c001b06c:	89 d7                	mov    edi,edx
c001b06e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001b072:	2d f8 00 00 00       	sub    eax,0xf8
c001b077:	89 04 24             	mov    DWORD PTR [esp],eax
c001b07a:	e8 c3 f8 ff ff       	call   c001a942 <Vm::fpuGetReg(int)>
c001b07f:	57                   	push   edi
c001b080:	56                   	push   esi
c001b081:	52                   	push   edx
c001b082:	50                   	push   eax
c001b083:	e8 88 f8 ff ff       	call   c001a910 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001b088:	83 c4 1c             	add    esp,0x1c
c001b08b:	52                   	push   edx
c001b08c:	50                   	push   eax
c001b08d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001b091:	2d f8 00 00 00       	sub    eax,0xf8
c001b096:	eb 44                	jmp    c001b0dc <Vm::x87Handler(regs*)+0x65a>
c001b098:	8d 50 10             	lea    edx,[eax+0x10]
c001b09b:	80 fa 07             	cmp    dl,0x7
c001b09e:	0f 87 6c 01 00 00    	ja     c001b210 <Vm::x87Handler(regs*)+0x78e>
c001b0a4:	83 ec 0c             	sub    esp,0xc
c001b0a7:	2d f0 00 00 00       	sub    eax,0xf0
c001b0ac:	50                   	push   eax
c001b0ad:	e8 90 f8 ff ff       	call   c001a942 <Vm::fpuGetReg(int)>
c001b0b2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b0b9:	89 c6                	mov    esi,eax
c001b0bb:	89 d7                	mov    edi,edx
c001b0bd:	e8 80 f8 ff ff       	call   c001a942 <Vm::fpuGetReg(int)>
c001b0c2:	57                   	push   edi
c001b0c3:	56                   	push   esi
c001b0c4:	52                   	push   edx
c001b0c5:	50                   	push   eax
c001b0c6:	e8 45 f8 ff ff       	call   c001a910 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001b0cb:	83 c4 1c             	add    esp,0x1c
c001b0ce:	52                   	push   edx
c001b0cf:	50                   	push   eax
c001b0d0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001b0d4:	2d f0 00 00 00       	sub    eax,0xf0
c001b0d9:	8d 76 00             	lea    esi,[esi+0x0]
c001b0dc:	50                   	push   eax
c001b0dd:	8d 76 00             	lea    esi,[esi+0x0]
c001b0e0:	e8 a0 f8 ff ff       	call   c001a985 <Vm::fpuSetReg(int, unsigned long long)>
c001b0e5:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001b0e9:	e8 41 f9 ff ff       	call   c001aa2f <Vm::fpuPop()>
c001b0ee:	e9 0d fa ff ff       	jmp    c001ab00 <Vm::x87Handler(regs*)+0x7e>
c001b0f3:	90                   	nop
c001b0f4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001b0f8:	8d 50 30             	lea    edx,[eax+0x30]
c001b0fb:	80 fa 07             	cmp    dl,0x7
c001b0fe:	77 20                	ja     c001b120 <Vm::x87Handler(regs*)+0x69e>
c001b100:	83 ec 0c             	sub    esp,0xc
c001b103:	6a 00                	push   0x0
c001b105:	e8 38 f8 ff ff       	call   c001a942 <Vm::fpuGetReg(int)>
c001b10a:	83 c4 0c             	add    esp,0xc
c001b10d:	52                   	push   edx
c001b10e:	50                   	push   eax
c001b10f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001b113:	2d d0 00 00 00       	sub    eax,0xd0
c001b118:	e9 df fd ff ff       	jmp    c001aefc <Vm::x87Handler(regs*)+0x47a>
c001b11d:	8d 76 00             	lea    esi,[esi+0x0]
c001b120:	8d 50 28             	lea    edx,[eax+0x28]
c001b123:	80 fa 07             	cmp    dl,0x7
c001b126:	77 28                	ja     c001b150 <Vm::x87Handler(regs*)+0x6ce>
c001b128:	83 ec 0c             	sub    esp,0xc
c001b12b:	6a 00                	push   0x0
c001b12d:	e8 10 f8 ff ff       	call   c001a942 <Vm::fpuGetReg(int)>
c001b132:	83 c4 0c             	add    esp,0xc
c001b135:	52                   	push   edx
c001b136:	50                   	push   eax
c001b137:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001b13b:	2d d8 00 00 00       	sub    eax,0xd8
c001b140:	50                   	push   eax
c001b141:	e8 3f f8 ff ff       	call   c001a985 <Vm::fpuSetReg(int, unsigned long long)>
c001b146:	e8 e4 f8 ff ff       	call   c001aa2f <Vm::fpuPop()>
c001b14b:	e9 ac f9 ff ff       	jmp    c001aafc <Vm::x87Handler(regs*)+0x7a>
c001b150:	8d 50 20             	lea    edx,[eax+0x20]
c001b153:	80 fa 07             	cmp    dl,0x7
c001b156:	77 30                	ja     c001b188 <Vm::x87Handler(regs*)+0x706>
c001b158:	83 ec 0c             	sub    esp,0xc
c001b15b:	2d e0 00 00 00       	sub    eax,0xe0
c001b160:	50                   	push   eax
c001b161:	e8 dc f7 ff ff       	call   c001a942 <Vm::fpuGetReg(int)>
c001b166:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b16d:	89 c6                	mov    esi,eax
c001b16f:	89 d7                	mov    edi,edx
c001b171:	e8 cc f7 ff ff       	call   c001a942 <Vm::fpuGetReg(int)>
c001b176:	57                   	push   edi
c001b177:	56                   	push   esi
c001b178:	52                   	push   edx
c001b179:	50                   	push   eax
c001b17a:	e8 e3 f6 ff ff       	call   c001a862 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001b17f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001b183:	e9 78 02 00 00       	jmp    c001b400 <Vm::x87Handler(regs*)+0x97e>
c001b188:	8d 50 18             	lea    edx,[eax+0x18]
c001b18b:	80 fa 07             	cmp    dl,0x7
c001b18e:	0f 87 10 fb ff ff    	ja     c001aca4 <Vm::x87Handler(regs*)+0x222>
c001b194:	83 ec 0c             	sub    esp,0xc
c001b197:	2d e8 00 00 00       	sub    eax,0xe8
c001b19c:	50                   	push   eax
c001b19d:	e8 a0 f7 ff ff       	call   c001a942 <Vm::fpuGetReg(int)>
c001b1a2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b1a9:	89 c6                	mov    esi,eax
c001b1ab:	89 d7                	mov    edi,edx
c001b1ad:	e8 90 f7 ff ff       	call   c001a942 <Vm::fpuGetReg(int)>
c001b1b2:	57                   	push   edi
c001b1b3:	56                   	push   esi
c001b1b4:	52                   	push   edx
c001b1b5:	50                   	push   eax
c001b1b6:	e8 a7 f6 ff ff       	call   c001a862 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001b1bb:	83 c4 20             	add    esp,0x20
c001b1be:	e8 6c f8 ff ff       	call   c001aa2f <Vm::fpuPop()>
c001b1c3:	eb 6f                	jmp    c001b234 <Vm::x87Handler(regs*)+0x7b2>
c001b1c5:	8d 76 00             	lea    esi,[esi+0x0]
c001b1c8:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001b1cc:	0f 85 22 01 00 00    	jne    c001b2f4 <Vm::x87Handler(regs*)+0x872>
c001b1d2:	66 90                	xchg   ax,ax
c001b1d4:	83 ec 0c             	sub    esp,0xc
c001b1d7:	6a 01                	push   0x1
c001b1d9:	e8 64 f7 ff ff       	call   c001a942 <Vm::fpuGetReg(int)>
c001b1de:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b1e5:	89 c6                	mov    esi,eax
c001b1e7:	89 d7                	mov    edi,edx
c001b1e9:	e8 54 f7 ff ff       	call   c001a942 <Vm::fpuGetReg(int)>
c001b1ee:	57                   	push   edi
c001b1ef:	56                   	push   esi
c001b1f0:	52                   	push   edx
c001b1f1:	50                   	push   eax
c001b1f2:	e8 6b f6 ff ff       	call   c001a862 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001b1f7:	83 c4 20             	add    esp,0x20
c001b1fa:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001b1fe:	e8 2c f8 ff ff       	call   c001aa2f <Vm::fpuPop()>
c001b203:	e8 27 f8 ff ff       	call   c001aa2f <Vm::fpuPop()>
c001b208:	e9 f7 f8 ff ff       	jmp    c001ab04 <Vm::x87Handler(regs*)+0x82>
c001b20d:	8d 76 00             	lea    esi,[esi+0x0]
c001b210:	3c d9                	cmp    al,0xd9
c001b212:	0f 85 e8 02 00 00    	jne    c001b500 <Vm::x87Handler(regs*)+0xa7e>
c001b218:	eb ba                	jmp    c001b1d4 <Vm::x87Handler(regs*)+0x752>
c001b21a:	66 90                	xchg   ax,ax
c001b21c:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001b220:	0f 85 2a 03 00 00    	jne    c001b550 <Vm::x87Handler(regs*)+0xace>
c001b226:	0f b7 05 c0 a1 02 c0 	movzx  eax,WORD PTR ds:0xc002a1c0
c001b22d:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001b231:	8d 76 00             	lea    esi,[esi+0x0]
c001b234:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001b238:	e9 c7 f8 ff ff       	jmp    c001ab04 <Vm::x87Handler(regs*)+0x82>
c001b23d:	8d 76 00             	lea    esi,[esi+0x0]
c001b240:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001b244:	84 d2                	test   dl,dl
c001b246:	75 10                	jne    c001b258 <Vm::x87Handler(regs*)+0x7d6>
c001b248:	83 ec 0c             	sub    esp,0xc
c001b24b:	ff 36                	push   DWORD PTR [esi]
c001b24d:	e8 29 f4 ff ff       	call   c001a67b <Vm::fpu32ToInternal(unsigned int)>
c001b252:	e9 39 01 00 00       	jmp    c001b390 <Vm::x87Handler(regs*)+0x90e>
c001b257:	90                   	nop
c001b258:	80 fa 01             	cmp    dl,0x1
c001b25b:	75 0f                	jne    c001b26c <Vm::x87Handler(regs*)+0x7ea>
c001b25d:	83 ec 0c             	sub    esp,0xc
c001b260:	ff 36                	push   DWORD PTR [esi]
c001b262:	e8 14 f4 ff ff       	call   c001a67b <Vm::fpu32ToInternal(unsigned int)>
c001b267:	e9 b4 02 00 00       	jmp    c001b520 <Vm::x87Handler(regs*)+0xa9e>
c001b26c:	80 fa 04             	cmp    dl,0x4
c001b26f:	75 0f                	jne    c001b280 <Vm::x87Handler(regs*)+0x7fe>
c001b271:	83 ec 0c             	sub    esp,0xc
c001b274:	ff 36                	push   DWORD PTR [esi]
c001b276:	e8 00 f4 ff ff       	call   c001a67b <Vm::fpu32ToInternal(unsigned int)>
c001b27b:	e9 9c 01 00 00       	jmp    c001b41c <Vm::x87Handler(regs*)+0x99a>
c001b280:	80 fa 05             	cmp    dl,0x5
c001b283:	75 1b                	jne    c001b2a0 <Vm::x87Handler(regs*)+0x81e>
c001b285:	83 ec 0c             	sub    esp,0xc
c001b288:	6a 00                	push   0x0
c001b28a:	e8 b3 f6 ff ff       	call   c001a942 <Vm::fpuGetReg(int)>
c001b28f:	89 c7                	mov    edi,eax
c001b291:	89 d5                	mov    ebp,edx
c001b293:	58                   	pop    eax
c001b294:	ff 36                	push   DWORD PTR [esi]
c001b296:	e8 e0 f3 ff ff       	call   c001a67b <Vm::fpu32ToInternal(unsigned int)>
c001b29b:	e9 bc 01 00 00       	jmp    c001b45c <Vm::x87Handler(regs*)+0x9da>
c001b2a0:	80 fa 06             	cmp    dl,0x6
c001b2a3:	75 0f                	jne    c001b2b4 <Vm::x87Handler(regs*)+0x832>
c001b2a5:	83 ec 0c             	sub    esp,0xc
c001b2a8:	ff 36                	push   DWORD PTR [esi]
c001b2aa:	e8 cc f3 ff ff       	call   c001a67b <Vm::fpu32ToInternal(unsigned int)>
c001b2af:	e9 cc 01 00 00       	jmp    c001b480 <Vm::x87Handler(regs*)+0x9fe>
c001b2b4:	31 c0                	xor    eax,eax
c001b2b6:	80 fa 07             	cmp    dl,0x7
c001b2b9:	0f 85 d5 02 00 00    	jne    c001b594 <Vm::x87Handler(regs*)+0xb12>
c001b2bf:	83 ec 0c             	sub    esp,0xc
c001b2c2:	6a 00                	push   0x0
c001b2c4:	e8 79 f6 ff ff       	call   c001a942 <Vm::fpuGetReg(int)>
c001b2c9:	89 c7                	mov    edi,eax
c001b2cb:	89 d5                	mov    ebp,edx
c001b2cd:	58                   	pop    eax
c001b2ce:	ff 36                	push   DWORD PTR [esi]
c001b2d0:	e8 a6 f3 ff ff       	call   c001a67b <Vm::fpu32ToInternal(unsigned int)>
c001b2d5:	e9 ee 01 00 00       	jmp    c001b4c8 <Vm::x87Handler(regs*)+0xa46>
c001b2da:	66 90                	xchg   ax,ax
c001b2dc:	80 fa 03             	cmp    dl,0x3
c001b2df:	0f 85 f7 01 00 00    	jne    c001b4dc <Vm::x87Handler(regs*)+0xa5a>
c001b2e5:	e8 45 f7 ff ff       	call   c001aa2f <Vm::fpuPop()>
c001b2ea:	51                   	push   ecx
c001b2eb:	51                   	push   ecx
c001b2ec:	e9 03 02 00 00       	jmp    c001b4f4 <Vm::x87Handler(regs*)+0xa72>
c001b2f1:	8d 76 00             	lea    esi,[esi+0x0]
c001b2f4:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001b2f8:	80 fa 01             	cmp    dl,0x1
c001b2fb:	75 0b                	jne    c001b308 <Vm::x87Handler(regs*)+0x886>
c001b2fd:	57                   	push   edi
c001b2fe:	57                   	push   edi
c001b2ff:	8b 06                	mov    eax,DWORD PTR [esi]
c001b301:	e9 0e 02 00 00       	jmp    c001b514 <Vm::x87Handler(regs*)+0xa92>
c001b306:	66 90                	xchg   ax,ax
c001b308:	80 fa 04             	cmp    dl,0x4
c001b30b:	75 13                	jne    c001b320 <Vm::x87Handler(regs*)+0x89e>
c001b30d:	31 d2                	xor    edx,edx
c001b30f:	51                   	push   ecx
c001b310:	51                   	push   ecx
c001b311:	8b 06                	mov    eax,DWORD PTR [esi]
c001b313:	52                   	push   edx
c001b314:	50                   	push   eax
c001b315:	e8 4a f4 ff ff       	call   c001a764 <Vm::fpuLongToFloat(long long)>
c001b31a:	e9 fd 00 00 00       	jmp    c001b41c <Vm::x87Handler(regs*)+0x99a>
c001b31f:	90                   	nop
c001b320:	31 c0                	xor    eax,eax
c001b322:	80 fa 07             	cmp    dl,0x7
c001b325:	0f 85 69 02 00 00    	jne    c001b594 <Vm::x87Handler(regs*)+0xb12>
c001b32b:	83 ec 0c             	sub    esp,0xc
c001b32e:	6a 00                	push   0x0
c001b330:	e8 0d f6 ff ff       	call   c001a942 <Vm::fpuGetReg(int)>
c001b335:	89 c7                	mov    edi,eax
c001b337:	89 d5                	mov    ebp,edx
c001b339:	58                   	pop    eax
c001b33a:	8b 06                	mov    eax,DWORD PTR [esi]
c001b33c:	5a                   	pop    edx
c001b33d:	31 d2                	xor    edx,edx
c001b33f:	52                   	push   edx
c001b340:	50                   	push   eax
c001b341:	e8 1e f4 ff ff       	call   c001a764 <Vm::fpuLongToFloat(long long)>
c001b346:	e9 7d 01 00 00       	jmp    c001b4c8 <Vm::x87Handler(regs*)+0xa46>
c001b34b:	90                   	nop
c001b34c:	84 d2                	test   dl,dl
c001b34e:	75 10                	jne    c001b360 <Vm::x87Handler(regs*)+0x8de>
c001b350:	31 d2                	xor    edx,edx
c001b352:	55                   	push   ebp
c001b353:	55                   	push   ebp
c001b354:	8b 06                	mov    eax,DWORD PTR [esi]
c001b356:	52                   	push   edx
c001b357:	50                   	push   eax
c001b358:	e9 03 02 00 00       	jmp    c001b560 <Vm::x87Handler(regs*)+0xade>
c001b35d:	8d 76 00             	lea    esi,[esi+0x0]
c001b360:	31 c0                	xor    eax,eax
c001b362:	80 fa 02             	cmp    dl,0x2
c001b365:	0f 85 29 02 00 00    	jne    c001b594 <Vm::x87Handler(regs*)+0xb12>
c001b36b:	83 ec 0c             	sub    esp,0xc
c001b36e:	6a 00                	push   0x0
c001b370:	e8 cd f5 ff ff       	call   c001a942 <Vm::fpuGetReg(int)>
c001b375:	59                   	pop    ecx
c001b376:	5f                   	pop    edi
c001b377:	e9 18 f9 ff ff       	jmp    c001ac94 <Vm::x87Handler(regs*)+0x212>
c001b37c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001b380:	84 d2                	test   dl,dl
c001b382:	75 2c                	jne    c001b3b0 <Vm::x87Handler(regs*)+0x92e>
c001b384:	50                   	push   eax
c001b385:	50                   	push   eax
c001b386:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b389:	ff 36                	push   DWORD PTR [esi]
c001b38b:	e8 30 f3 ff ff       	call   c001a6c0 <Vm::fpu64ToInternal(unsigned long long)>
c001b390:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b397:	89 c6                	mov    esi,eax
c001b399:	89 d7                	mov    edi,edx
c001b39b:	e8 a2 f5 ff ff       	call   c001a942 <Vm::fpuGetReg(int)>
c001b3a0:	57                   	push   edi
c001b3a1:	56                   	push   esi
c001b3a2:	52                   	push   edx
c001b3a3:	50                   	push   eax
c001b3a4:	e8 0f f5 ff ff       	call   c001a8b8 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001b3a9:	e9 8e 01 00 00       	jmp    c001b53c <Vm::x87Handler(regs*)+0xaba>
c001b3ae:	66 90                	xchg   ax,ax
c001b3b0:	80 fa 01             	cmp    dl,0x1
c001b3b3:	75 13                	jne    c001b3c8 <Vm::x87Handler(regs*)+0x946>
c001b3b5:	50                   	push   eax
c001b3b6:	50                   	push   eax
c001b3b7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b3ba:	ff 36                	push   DWORD PTR [esi]
c001b3bc:	e8 ff f2 ff ff       	call   c001a6c0 <Vm::fpu64ToInternal(unsigned long long)>
c001b3c1:	e9 5a 01 00 00       	jmp    c001b520 <Vm::x87Handler(regs*)+0xa9e>
c001b3c6:	66 90                	xchg   ax,ax
c001b3c8:	80 fa 02             	cmp    dl,0x2
c001b3cb:	0f 85 03 f9 ff ff    	jne    c001acd4 <Vm::x87Handler(regs*)+0x252>
c001b3d1:	55                   	push   ebp
c001b3d2:	55                   	push   ebp
c001b3d3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b3d6:	ff 36                	push   DWORD PTR [esi]
c001b3d8:	e8 e3 f2 ff ff       	call   c001a6c0 <Vm::fpu64ToInternal(unsigned long long)>
c001b3dd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b3e4:	89 c6                	mov    esi,eax
c001b3e6:	89 d7                	mov    edi,edx
c001b3e8:	e8 55 f5 ff ff       	call   c001a942 <Vm::fpuGetReg(int)>
c001b3ed:	57                   	push   edi
c001b3ee:	56                   	push   esi
c001b3ef:	52                   	push   edx
c001b3f0:	50                   	push   eax
c001b3f1:	e8 6c f4 ff ff       	call   c001a862 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001b3f6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b3fa:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001b3fd:	8d 76 00             	lea    esi,[esi+0x0]
c001b400:	83 c4 20             	add    esp,0x20
c001b403:	e9 fc f6 ff ff       	jmp    c001ab04 <Vm::x87Handler(regs*)+0x82>
c001b408:	80 fa 04             	cmp    dl,0x4
c001b40b:	75 2f                	jne    c001b43c <Vm::x87Handler(regs*)+0x9ba>
c001b40d:	51                   	push   ecx
c001b40e:	51                   	push   ecx
c001b40f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b412:	ff 36                	push   DWORD PTR [esi]
c001b414:	e8 a7 f2 ff ff       	call   c001a6c0 <Vm::fpu64ToInternal(unsigned long long)>
c001b419:	8d 76 00             	lea    esi,[esi+0x0]
c001b41c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b423:	89 c6                	mov    esi,eax
c001b425:	89 d7                	mov    edi,edx
c001b427:	e8 16 f5 ff ff       	call   c001a942 <Vm::fpuGetReg(int)>
c001b42c:	57                   	push   edi
c001b42d:	56                   	push   esi
c001b42e:	52                   	push   edx
c001b42f:	50                   	push   eax
c001b430:	e8 ad f4 ff ff       	call   c001a8e2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001b435:	e9 02 01 00 00       	jmp    c001b53c <Vm::x87Handler(regs*)+0xaba>
c001b43a:	66 90                	xchg   ax,ax
c001b43c:	80 fa 05             	cmp    dl,0x5
c001b43f:	75 2b                	jne    c001b46c <Vm::x87Handler(regs*)+0x9ea>
c001b441:	83 ec 0c             	sub    esp,0xc
c001b444:	6a 00                	push   0x0
c001b446:	e8 f7 f4 ff ff       	call   c001a942 <Vm::fpuGetReg(int)>
c001b44b:	89 c7                	mov    edi,eax
c001b44d:	89 d5                	mov    ebp,edx
c001b44f:	58                   	pop    eax
c001b450:	5a                   	pop    edx
c001b451:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b454:	ff 36                	push   DWORD PTR [esi]
c001b456:	e8 65 f2 ff ff       	call   c001a6c0 <Vm::fpu64ToInternal(unsigned long long)>
c001b45b:	90                   	nop
c001b45c:	83 c4 10             	add    esp,0x10
c001b45f:	55                   	push   ebp
c001b460:	57                   	push   edi
c001b461:	52                   	push   edx
c001b462:	50                   	push   eax
c001b463:	e8 7a f4 ff ff       	call   c001a8e2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001b468:	eb 6a                	jmp    c001b4d4 <Vm::x87Handler(regs*)+0xa52>
c001b46a:	66 90                	xchg   ax,ax
c001b46c:	80 fa 06             	cmp    dl,0x6
c001b46f:	75 2f                	jne    c001b4a0 <Vm::x87Handler(regs*)+0xa1e>
c001b471:	51                   	push   ecx
c001b472:	51                   	push   ecx
c001b473:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b476:	ff 36                	push   DWORD PTR [esi]
c001b478:	e8 43 f2 ff ff       	call   c001a6c0 <Vm::fpu64ToInternal(unsigned long long)>
c001b47d:	8d 76 00             	lea    esi,[esi+0x0]
c001b480:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b487:	89 c6                	mov    esi,eax
c001b489:	89 d7                	mov    edi,edx
c001b48b:	e8 b2 f4 ff ff       	call   c001a942 <Vm::fpuGetReg(int)>
c001b490:	57                   	push   edi
c001b491:	56                   	push   esi
c001b492:	52                   	push   edx
c001b493:	50                   	push   eax
c001b494:	e8 77 f4 ff ff       	call   c001a910 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001b499:	e9 9e 00 00 00       	jmp    c001b53c <Vm::x87Handler(regs*)+0xaba>
c001b49e:	66 90                	xchg   ax,ax
c001b4a0:	31 c0                	xor    eax,eax
c001b4a2:	80 fa 07             	cmp    dl,0x7
c001b4a5:	0f 85 e9 00 00 00    	jne    c001b594 <Vm::x87Handler(regs*)+0xb12>
c001b4ab:	83 ec 0c             	sub    esp,0xc
c001b4ae:	6a 00                	push   0x0
c001b4b0:	e8 8d f4 ff ff       	call   c001a942 <Vm::fpuGetReg(int)>
c001b4b5:	89 c7                	mov    edi,eax
c001b4b7:	89 d5                	mov    ebp,edx
c001b4b9:	58                   	pop    eax
c001b4ba:	5a                   	pop    edx
c001b4bb:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b4be:	ff 36                	push   DWORD PTR [esi]
c001b4c0:	e8 fb f1 ff ff       	call   c001a6c0 <Vm::fpu64ToInternal(unsigned long long)>
c001b4c5:	8d 76 00             	lea    esi,[esi+0x0]
c001b4c8:	83 c4 10             	add    esp,0x10
c001b4cb:	55                   	push   ebp
c001b4cc:	57                   	push   edi
c001b4cd:	52                   	push   edx
c001b4ce:	50                   	push   eax
c001b4cf:	e8 3c f4 ff ff       	call   c001a910 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001b4d4:	83 c4 0c             	add    esp,0xc
c001b4d7:	eb 67                	jmp    c001b540 <Vm::x87Handler(regs*)+0xabe>
c001b4d9:	8d 76 00             	lea    esi,[esi+0x0]
c001b4dc:	31 c0                	xor    eax,eax
c001b4de:	80 fa 02             	cmp    dl,0x2
c001b4e1:	0f 85 ad 00 00 00    	jne    c001b594 <Vm::x87Handler(regs*)+0xb12>
c001b4e7:	83 ec 0c             	sub    esp,0xc
c001b4ea:	6a 00                	push   0x0
c001b4ec:	e8 51 f4 ff ff       	call   c001a942 <Vm::fpuGetReg(int)>
c001b4f1:	59                   	pop    ecx
c001b4f2:	5f                   	pop    edi
c001b4f3:	90                   	nop
c001b4f4:	52                   	push   edx
c001b4f5:	50                   	push   eax
c001b4f6:	e8 77 f1 ff ff       	call   c001a672 <Vm::fpuInternalTo64(unsigned long long)>
c001b4fb:	e9 84 00 00 00       	jmp    c001b584 <Vm::x87Handler(regs*)+0xb02>
c001b500:	31 c0                	xor    eax,eax
c001b502:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001b507:	0f 85 87 00 00 00    	jne    c001b594 <Vm::x87Handler(regs*)+0xb12>
c001b50d:	50                   	push   eax
c001b50e:	50                   	push   eax
c001b50f:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001b512:	66 90                	xchg   ax,ax
c001b514:	31 d2                	xor    edx,edx
c001b516:	52                   	push   edx
c001b517:	50                   	push   eax
c001b518:	e8 47 f2 ff ff       	call   c001a764 <Vm::fpuLongToFloat(long long)>
c001b51d:	8d 76 00             	lea    esi,[esi+0x0]
c001b520:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b527:	89 c6                	mov    esi,eax
c001b529:	89 d7                	mov    edi,edx
c001b52b:	e8 12 f4 ff ff       	call   c001a942 <Vm::fpuGetReg(int)>
c001b530:	57                   	push   edi
c001b531:	56                   	push   esi
c001b532:	52                   	push   edx
c001b533:	50                   	push   eax
c001b534:	e8 b8 f3 ff ff       	call   c001a8f1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001b539:	8d 76 00             	lea    esi,[esi+0x0]
c001b53c:	83 c4 1c             	add    esp,0x1c
c001b53f:	90                   	nop
c001b540:	52                   	push   edx
c001b541:	50                   	push   eax
c001b542:	6a 00                	push   0x0
c001b544:	e8 3c f4 ff ff       	call   c001a985 <Vm::fpuSetReg(int, unsigned long long)>
c001b549:	e9 7a f7 ff ff       	jmp    c001acc8 <Vm::x87Handler(regs*)+0x246>
c001b54e:	66 90                	xchg   ax,ax
c001b550:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001b554:	80 fa 05             	cmp    dl,0x5
c001b557:	75 13                	jne    c001b56c <Vm::x87Handler(regs*)+0xaea>
c001b559:	55                   	push   ebp
c001b55a:	55                   	push   ebp
c001b55b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b55e:	ff 36                	push   DWORD PTR [esi]
c001b560:	e8 c3 f1 ff ff       	call   c001a728 <Vm::fpuULongToFloat(unsigned long long)>
c001b565:	e9 52 f7 ff ff       	jmp    c001acbc <Vm::x87Handler(regs*)+0x23a>
c001b56a:	66 90                	xchg   ax,ax
c001b56c:	31 c0                	xor    eax,eax
c001b56e:	80 fa 07             	cmp    dl,0x7
c001b571:	75 21                	jne    c001b594 <Vm::x87Handler(regs*)+0xb12>
c001b573:	e8 b7 f4 ff ff       	call   c001aa2f <Vm::fpuPop()>
c001b578:	51                   	push   ecx
c001b579:	51                   	push   ecx
c001b57a:	52                   	push   edx
c001b57b:	50                   	push   eax
c001b57c:	e8 48 f1 ff ff       	call   c001a6c9 <Vm::fpuFloatToLong(unsigned long long)>
c001b581:	8d 76 00             	lea    esi,[esi+0x0]
c001b584:	83 c4 10             	add    esp,0x10
c001b587:	89 06                	mov    DWORD PTR [esi],eax
c001b589:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001b58c:	e9 7b f7 ff ff       	jmp    c001ad0c <Vm::x87Handler(regs*)+0x28a>
c001b591:	8d 76 00             	lea    esi,[esi+0x0]
c001b594:	83 c4 1c             	add    esp,0x1c
c001b597:	5b                   	pop    ebx
c001b598:	5e                   	pop    esi
c001b599:	5f                   	pop    edi
c001b59a:	5d                   	pop    ebp
c001b59b:	c3                   	ret    

c001b59c <__static_initialization_and_destruction_0(int, int)>:
c001b59c:	83 ec 0c             	sub    esp,0xc
c001b59f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001b5a4:	75 1a                	jne    c001b5c0 <__static_initialization_and_destruction_0(int, int)+0x24>
c001b5a6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001b5ae:	75 10                	jne    c001b5c0 <__static_initialization_and_destruction_0(int, int)+0x24>
c001b5b0:	83 ec 0c             	sub    esp,0xc
c001b5b3:	68 c0 a1 02 c0       	push   0xc002a1c0
c001b5b8:	e8 c7 83 00 00       	call   c0023984 <Vm::_FPUState::_FPUState()>
c001b5bd:	83 c4 10             	add    esp,0x10
c001b5c0:	90                   	nop
c001b5c1:	83 c4 0c             	add    esp,0xc
c001b5c4:	c3                   	ret    
c001b5c5:	8d 76 00             	lea    esi,[esi+0x0]

c001b5c8 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001b5c8:	83 ec 0c             	sub    esp,0xc
c001b5cb:	83 ec 08             	sub    esp,0x8
c001b5ce:	68 ff ff 00 00       	push   0xffff
c001b5d3:	6a 01                	push   0x1
c001b5d5:	e8 c2 ff ff ff       	call   c001b59c <__static_initialization_and_destruction_0(int, int)>
c001b5da:	83 c4 10             	add    esp,0x10
c001b5dd:	83 c4 0c             	add    esp,0xc
c001b5e0:	c3                   	ret    
c001b5e1:	66 90                	xchg   ax,ax
c001b5e3:	90                   	nop

c001b5e4 <FAT::getName()>:
c001b5e4:	b8 d0 6f 02 c0       	mov    eax,0xc0026fd0
c001b5e9:	c3                   	ret    
c001b5ea:	66 90                	xchg   ax,ax

c001b5ec <FAT::tell(void*, unsigned long long*)>:
c001b5ec:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b5f1:	75 09                	jne    c001b5fc <FAT::tell(void*, unsigned long long*)+0x10>
c001b5f3:	b8 04 00 00 00       	mov    eax,0x4
c001b5f8:	c3                   	ret    
c001b5f9:	8d 76 00             	lea    esi,[esi+0x0]
c001b5fc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b601:	75 09                	jne    c001b60c <FAT::tell(void*, unsigned long long*)+0x20>
c001b603:	b8 04 00 00 00       	mov    eax,0x4
c001b608:	c3                   	ret    
c001b609:	8d 76 00             	lea    esi,[esi+0x0]
c001b60c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b610:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001b613:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001b616:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b61a:	89 01                	mov    DWORD PTR [ecx],eax
c001b61c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b61f:	b8 00 00 00 00       	mov    eax,0x0
c001b624:	c3                   	ret    
c001b625:	90                   	nop
c001b626:	66 90                	xchg   ax,ax

c001b628 <FAT::stat(void*, unsigned long long*)>:
c001b628:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b62d:	75 09                	jne    c001b638 <FAT::stat(void*, unsigned long long*)+0x10>
c001b62f:	b8 04 00 00 00       	mov    eax,0x4
c001b634:	c3                   	ret    
c001b635:	8d 76 00             	lea    esi,[esi+0x0]
c001b638:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b63d:	75 09                	jne    c001b648 <FAT::stat(void*, unsigned long long*)+0x20>
c001b63f:	b8 04 00 00 00       	mov    eax,0x4
c001b644:	c3                   	ret    
c001b645:	8d 76 00             	lea    esi,[esi+0x0]
c001b648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b64c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001b64f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001b652:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b656:	89 01                	mov    DWORD PTR [ecx],eax
c001b658:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b65b:	b8 00 00 00 00       	mov    eax,0x0
c001b660:	c3                   	ret    
c001b661:	90                   	nop
c001b662:	66 90                	xchg   ax,ax

c001b664 <FAT::~FAT()>:
c001b664:	83 ec 0c             	sub    esp,0xc
c001b667:	ba 1c 70 02 c0       	mov    edx,0xc002701c
c001b66c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b670:	89 10                	mov    DWORD PTR [eax],edx
c001b672:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b676:	83 ec 0c             	sub    esp,0xc
c001b679:	50                   	push   eax
c001b67a:	e8 d3 1d ff ff       	call   c000d452 <Filesystem::~Filesystem()>
c001b67f:	83 c4 10             	add    esp,0x10
c001b682:	90                   	nop
c001b683:	83 c4 0c             	add    esp,0xc
c001b686:	c3                   	ret    
c001b687:	90                   	nop

c001b688 <FAT::~FAT()>:
c001b688:	83 ec 0c             	sub    esp,0xc
c001b68b:	83 ec 0c             	sub    esp,0xc
c001b68e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b692:	e8 cd ff ff ff       	call   c001b664 <FAT::~FAT()>
c001b697:	83 c4 10             	add    esp,0x10
c001b69a:	83 ec 08             	sub    esp,0x8
c001b69d:	6a 08                	push   0x8
c001b69f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b6a3:	e8 8e 19 ff ff       	call   c000d036 <operator delete(void*, unsigned long)>
c001b6a8:	83 c4 10             	add    esp,0x10
c001b6ab:	83 c4 0c             	add    esp,0xc
c001b6ae:	c3                   	ret    
c001b6af:	90                   	nop

c001b6b0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001b6b0:	83 ec 1c             	sub    esp,0x1c
c001b6b3:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001b6ba:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001b6bf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b6c3:	8b 04 85 40 a2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5dc0]
c001b6ca:	83 f8 ff             	cmp    eax,0xffffffff
c001b6cd:	75 35                	jne    c001b704 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001b6cf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b6d3:	88 c2                	mov    dl,al
c001b6d5:	a1 20 a2 02 c0       	mov    eax,ds:0xc002a220
c001b6da:	01 d0                	add    eax,edx
c001b6dc:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b6e0:	8b 15 20 a2 02 c0    	mov    edx,DWORD PTR ds:0xc002a220
c001b6e6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b6ea:	89 14 85 40 a2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5dc0],edx
c001b6f1:	a1 20 a2 02 c0       	mov    eax,ds:0xc002a220
c001b6f6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b6fa:	89 14 85 c0 a2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5d40],edx
c001b701:	eb 19                	jmp    c001b71c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001b703:	90                   	nop
c001b704:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b708:	88 c2                	mov    dl,al
c001b70a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b70e:	8b 04 85 40 a2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5dc0]
c001b715:	01 d0                	add    eax,edx
c001b717:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b71b:	90                   	nop
c001b71c:	83 ec 04             	sub    esp,0x4
c001b71f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b723:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b727:	8d 44 24 15          	lea    eax,[esp+0x15]
c001b72b:	50                   	push   eax
c001b72c:	e8 11 b5 fe ff       	call   c0006c42 <f_getlabel>
c001b731:	83 c4 10             	add    esp,0x10
c001b734:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b738:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b73d:	75 09                	jne    c001b748 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001b73f:	b8 00 00 00 00       	mov    eax,0x0
c001b744:	eb 0a                	jmp    c001b750 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001b746:	66 90                	xchg   ax,ax
c001b748:	b8 01 00 00 00       	mov    eax,0x1
c001b74d:	8d 76 00             	lea    esi,[esi+0x0]
c001b750:	83 c4 1c             	add    esp,0x1c
c001b753:	c3                   	ret    

c001b754 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001b754:	57                   	push   edi
c001b755:	83 ec 58             	sub    esp,0x58
c001b758:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001b760:	8d 54 24 10          	lea    edx,[esp+0x10]
c001b764:	b9 0f 00 00 00       	mov    ecx,0xf
c001b769:	b8 00 00 00 00       	mov    eax,0x0
c001b76e:	fc                   	cld    
c001b76f:	89 d7                	mov    edi,edx
c001b771:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b773:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b777:	8b 04 85 40 a2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5dc0]
c001b77e:	83 f8 ff             	cmp    eax,0xffffffff
c001b781:	75 35                	jne    c001b7b8 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001b783:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b787:	88 c2                	mov    dl,al
c001b789:	a1 20 a2 02 c0       	mov    eax,ds:0xc002a220
c001b78e:	01 d0                	add    eax,edx
c001b790:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b794:	8b 15 20 a2 02 c0    	mov    edx,DWORD PTR ds:0xc002a220
c001b79a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b79e:	89 14 85 40 a2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5dc0],edx
c001b7a5:	a1 20 a2 02 c0       	mov    eax,ds:0xc002a220
c001b7aa:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001b7ae:	89 14 85 c0 a2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5d40],edx
c001b7b5:	eb 19                	jmp    c001b7d0 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001b7b7:	90                   	nop
c001b7b8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b7bc:	88 c2                	mov    dl,al
c001b7be:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b7c2:	8b 04 85 40 a2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5dc0]
c001b7c9:	01 d0                	add    eax,edx
c001b7cb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b7cf:	90                   	nop
c001b7d0:	83 ec 08             	sub    esp,0x8
c001b7d3:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001b7d7:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b7db:	50                   	push   eax
c001b7dc:	e8 af 50 fe ff       	call   c0000890 <strcat>
c001b7e1:	83 c4 10             	add    esp,0x10
c001b7e4:	83 ec 0c             	sub    esp,0xc
c001b7e7:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b7eb:	50                   	push   eax
c001b7ec:	e8 3f b6 fe ff       	call   c0006e30 <f_setlabel>
c001b7f1:	83 c4 10             	add    esp,0x10
c001b7f4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b7f8:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001b7fd:	75 09                	jne    c001b808 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001b7ff:	b8 00 00 00 00       	mov    eax,0x0
c001b804:	eb 0a                	jmp    c001b810 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001b806:	66 90                	xchg   ax,ax
c001b808:	b8 01 00 00 00       	mov    eax,0x1
c001b80d:	8d 76 00             	lea    esi,[esi+0x0]
c001b810:	83 c4 58             	add    esp,0x58
c001b813:	5f                   	pop    edi
c001b814:	c3                   	ret    
c001b815:	90                   	nop
c001b816:	66 90                	xchg   ax,ax

c001b818 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001b818:	83 ec 2c             	sub    esp,0x2c
c001b81b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001b823:	83 ec 08             	sub    esp,0x8
c001b826:	68 f4 6f 02 c0       	push   0xc0026ff4
c001b82b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b82f:	e8 a8 4f fe ff       	call   c00007dc <strcmp>
c001b834:	83 c4 10             	add    esp,0x10
c001b837:	85 c0                	test   eax,eax
c001b839:	0f 94 c0             	sete   al
c001b83c:	84 c0                	test   al,al
c001b83e:	74 10                	je     c001b850 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001b840:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b848:	e9 b3 00 00 00       	jmp    c001b900 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b84d:	8d 76 00             	lea    esi,[esi+0x0]
c001b850:	83 ec 08             	sub    esp,0x8
c001b853:	68 e6 6f 02 c0       	push   0xc0026fe6
c001b858:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b85c:	e8 7b 4f fe ff       	call   c00007dc <strcmp>
c001b861:	83 c4 10             	add    esp,0x10
c001b864:	85 c0                	test   eax,eax
c001b866:	0f 94 c0             	sete   al
c001b869:	84 c0                	test   al,al
c001b86b:	74 0f                	je     c001b87c <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c001b86d:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b875:	e9 86 00 00 00       	jmp    c001b900 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b87a:	66 90                	xchg   ax,ax
c001b87c:	83 ec 08             	sub    esp,0x8
c001b87f:	68 ec 6f 02 c0       	push   0xc0026fec
c001b884:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b888:	e8 4f 4f fe ff       	call   c00007dc <strcmp>
c001b88d:	83 c4 10             	add    esp,0x10
c001b890:	85 c0                	test   eax,eax
c001b892:	0f 94 c0             	sete   al
c001b895:	84 c0                	test   al,al
c001b897:	74 0b                	je     c001b8a4 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c001b899:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b8a1:	eb 5d                	jmp    c001b900 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b8a3:	90                   	nop
c001b8a4:	83 ec 08             	sub    esp,0x8
c001b8a7:	68 ec 40 02 c0       	push   0xc00240ec
c001b8ac:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b8b0:	e8 27 4f fe ff       	call   c00007dc <strcmp>
c001b8b5:	83 c4 10             	add    esp,0x10
c001b8b8:	85 c0                	test   eax,eax
c001b8ba:	0f 94 c0             	sete   al
c001b8bd:	84 c0                	test   al,al
c001b8bf:	74 0b                	je     c001b8cc <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c001b8c1:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001b8c9:	eb 35                	jmp    c001b900 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b8cb:	90                   	nop
c001b8cc:	83 ec 08             	sub    esp,0x8
c001b8cf:	68 f2 6f 02 c0       	push   0xc0026ff2
c001b8d4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b8d8:	e8 ff 4e fe ff       	call   c00007dc <strcmp>
c001b8dd:	83 c4 10             	add    esp,0x10
c001b8e0:	85 c0                	test   eax,eax
c001b8e2:	0f 94 c0             	sete   al
c001b8e5:	84 c0                	test   al,al
c001b8e7:	74 0b                	je     c001b8f4 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c001b8e9:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001b8f1:	eb 0d                	jmp    c001b900 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b8f3:	90                   	nop
c001b8f4:	b8 08 00 00 00       	mov    eax,0x8
c001b8f9:	e9 ea 00 00 00       	jmp    c001b9e8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b8fe:	66 90                	xchg   ax,ax
c001b900:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001b907:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001b90c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b910:	8b 04 85 40 a2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5dc0]
c001b917:	83 f8 ff             	cmp    eax,0xffffffff
c001b91a:	75 34                	jne    c001b950 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c001b91c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b920:	88 c2                	mov    dl,al
c001b922:	a1 20 a2 02 c0       	mov    eax,ds:0xc002a220
c001b927:	01 d0                	add    eax,edx
c001b929:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b92d:	8b 15 20 a2 02 c0    	mov    edx,DWORD PTR ds:0xc002a220
c001b933:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b937:	89 14 85 40 a2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5dc0],edx
c001b93e:	a1 20 a2 02 c0       	mov    eax,ds:0xc002a220
c001b943:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b947:	89 14 85 c0 a2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5d40],edx
c001b94e:	eb 18                	jmp    c001b968 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c001b950:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b954:	88 c2                	mov    dl,al
c001b956:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b95a:	8b 04 85 40 a2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5dc0]
c001b961:	01 d0                	add    eax,edx
c001b963:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b967:	90                   	nop
c001b968:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b96c:	88 04 24             	mov    BYTE PTR [esp],al
c001b96f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b973:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b977:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b97f:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001b984:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b98c:	83 ec 0c             	sub    esp,0xc
c001b98f:	68 00 20 00 00       	push   0x2000
c001b994:	e8 4e e4 fe ff       	call   c0009de7 <malloc>
c001b999:	83 c4 10             	add    esp,0x10
c001b99c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b9a0:	68 00 20 00 00       	push   0x2000
c001b9a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9a9:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b9ad:	50                   	push   eax
c001b9ae:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001b9b2:	50                   	push   eax
c001b9b3:	e8 f9 ba fe ff       	call   c00074b1 <f_mkfs>
c001b9b8:	83 c4 10             	add    esp,0x10
c001b9bb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b9bf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001b9c4:	75 0a                	jne    c001b9d0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001b9c6:	b8 00 00 00 00       	mov    eax,0x0
c001b9cb:	eb 1b                	jmp    c001b9e8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b9cd:	8d 76 00             	lea    esi,[esi+0x0]
c001b9d0:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001b9d5:	75 09                	jne    c001b9e0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001b9d7:	b8 09 00 00 00       	mov    eax,0x9
c001b9dc:	eb 0a                	jmp    c001b9e8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b9de:	66 90                	xchg   ax,ax
c001b9e0:	b8 01 00 00 00       	mov    eax,0x1
c001b9e5:	8d 76 00             	lea    esi,[esi+0x0]
c001b9e8:	83 c4 2c             	add    esp,0x2c
c001b9eb:	c3                   	ret    

c001b9ec <FAT::tryMount(LogicalDisk*, int)>:
c001b9ec:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001b9f2:	a1 20 a2 02 c0       	mov    eax,ds:0xc002a220
c001b9f7:	83 f8 14             	cmp    eax,0x14
c001b9fa:	75 18                	jne    c001ba14 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001b9fc:	83 ec 0c             	sub    esp,0xc
c001b9ff:	68 f8 6f 02 c0       	push   0xc0026ff8
c001ba04:	e8 f0 97 ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c001ba09:	83 c4 10             	add    esp,0x10
c001ba0c:	b0 00                	mov    al,0x0
c001ba0e:	e9 e9 01 00 00       	jmp    c001bbfc <FAT::tryMount(LogicalDisk*, int)+0x210>
c001ba13:	90                   	nop
c001ba14:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001ba1b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001ba21:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ba27:	3d 00 02 00 00       	cmp    eax,0x200
c001ba2c:	74 0a                	je     c001ba38 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001ba2e:	b0 00                	mov    al,0x0
c001ba30:	e9 c7 01 00 00       	jmp    c001bbfc <FAT::tryMount(LogicalDisk*, int)+0x210>
c001ba35:	8d 76 00             	lea    esi,[esi+0x0]
c001ba38:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001ba40:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001ba47:	8b 04 85 40 a2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5dc0]
c001ba4e:	83 f8 ff             	cmp    eax,0xffffffff
c001ba51:	74 09                	je     c001ba5c <FAT::tryMount(LogicalDisk*, int)+0x70>
c001ba53:	b0 01                	mov    al,0x1
c001ba55:	e9 a2 01 00 00       	jmp    c001bbfc <FAT::tryMount(LogicalDisk*, int)+0x210>
c001ba5a:	66 90                	xchg   ax,ax
c001ba5c:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001ba66:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001ba6e:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001ba75:	88 c2                	mov    dl,al
c001ba77:	a1 20 a2 02 c0       	mov    eax,ds:0xc002a220
c001ba7c:	01 d0                	add    eax,edx
c001ba7e:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001ba85:	8b 15 20 a2 02 c0    	mov    edx,DWORD PTR ds:0xc002a220
c001ba8b:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001ba92:	89 14 85 40 a2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5dc0],edx
c001ba99:	a1 20 a2 02 c0       	mov    eax,ds:0xc002a220
c001ba9e:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001baa5:	89 14 85 c0 a2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5d40],edx
c001baac:	83 ec 0c             	sub    esp,0xc
c001baaf:	68 54 02 00 00       	push   0x254
c001bab4:	e8 2e e3 fe ff       	call   c0009de7 <malloc>
c001bab9:	83 c4 10             	add    esp,0x10
c001babc:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001bac3:	83 ec 04             	sub    esp,0x4
c001bac6:	6a 00                	push   0x0
c001bac8:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001bacf:	50                   	push   eax
c001bad0:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001bad7:	e8 5d 93 fe ff       	call   c0004e39 <f_mount>
c001badc:	83 c4 10             	add    esp,0x10
c001badf:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001bae6:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001baee:	74 1c                	je     c001bb0c <FAT::tryMount(LogicalDisk*, int)+0x120>
c001baf0:	83 ec 0c             	sub    esp,0xc
c001baf3:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001bafa:	e8 08 e3 fe ff       	call   c0009e07 <rfree>
c001baff:	83 c4 10             	add    esp,0x10
c001bb02:	b0 00                	mov    al,0x0
c001bb04:	e9 f3 00 00 00       	jmp    c001bbfc <FAT::tryMount(LogicalDisk*, int)+0x210>
c001bb09:	8d 76 00             	lea    esi,[esi+0x0]
c001bb0c:	83 ec 04             	sub    esp,0x4
c001bb0f:	68 00 01 00 00       	push   0x100
c001bb14:	6a 00                	push   0x0
c001bb16:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001bb1d:	50                   	push   eax
c001bb1e:	e8 71 4b fe ff       	call   c0000694 <memset>
c001bb23:	83 c4 10             	add    esp,0x10
c001bb26:	83 ec 08             	sub    esp,0x8
c001bb29:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001bb30:	50                   	push   eax
c001bb31:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001bb38:	50                   	push   eax
c001bb39:	e8 52 4d fe ff       	call   c0000890 <strcat>
c001bb3e:	83 c4 10             	add    esp,0x10
c001bb41:	83 ec 08             	sub    esp,0x8
c001bb44:	68 06 70 02 c0       	push   0xc0027006
c001bb49:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001bb50:	50                   	push   eax
c001bb51:	e8 3a 4d fe ff       	call   c0000890 <strcat>
c001bb56:	83 c4 10             	add    esp,0x10
c001bb59:	83 ec 04             	sub    esp,0x4
c001bb5c:	6a 01                	push   0x1
c001bb5e:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001bb65:	50                   	push   eax
c001bb66:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001bb6a:	50                   	push   eax
c001bb6b:	e8 2b 93 fe ff       	call   c0004e9b <f_open>
c001bb70:	83 c4 10             	add    esp,0x10
c001bb73:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001bb7a:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001bb81:	85 c0                	test   eax,eax
c001bb83:	74 0b                	je     c001bb90 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001bb85:	78 31                	js     c001bbb8 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001bb87:	83 e8 04             	sub    eax,0x4
c001bb8a:	83 f8 01             	cmp    eax,0x1
c001bb8d:	77 29                	ja     c001bbb8 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001bb8f:	90                   	nop
c001bb90:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001bb98:	83 ec 0c             	sub    esp,0xc
c001bb9b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001bb9f:	50                   	push   eax
c001bba0:	e8 48 9e fe ff       	call   c00059ed <f_close>
c001bba5:	83 c4 10             	add    esp,0x10
c001bba8:	90                   	nop
c001bba9:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001bbb1:	74 41                	je     c001bbf4 <FAT::tryMount(LogicalDisk*, int)+0x208>
c001bbb3:	eb 33                	jmp    c001bbe8 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001bbb5:	8d 76 00             	lea    esi,[esi+0x0]
c001bbb8:	83 ec 0c             	sub    esp,0xc
c001bbbb:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001bbc2:	e8 40 e2 fe ff       	call   c0009e07 <rfree>
c001bbc7:	83 c4 10             	add    esp,0x10
c001bbca:	83 ec 04             	sub    esp,0x4
c001bbcd:	6a 00                	push   0x0
c001bbcf:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001bbd6:	50                   	push   eax
c001bbd7:	6a 00                	push   0x0
c001bbd9:	e8 5b 92 fe ff       	call   c0004e39 <f_mount>
c001bbde:	83 c4 10             	add    esp,0x10
c001bbe1:	b0 00                	mov    al,0x0
c001bbe3:	eb 17                	jmp    c001bbfc <FAT::tryMount(LogicalDisk*, int)+0x210>
c001bbe5:	8d 76 00             	lea    esi,[esi+0x0]
c001bbe8:	a1 20 a2 02 c0       	mov    eax,ds:0xc002a220
c001bbed:	40                   	inc    eax
c001bbee:	a3 20 a2 02 c0       	mov    ds:0xc002a220,eax
c001bbf3:	90                   	nop
c001bbf4:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001bbfb:	90                   	nop
c001bbfc:	81 c4 6c 03 00 00    	add    esp,0x36c
c001bc02:	c3                   	ret    
c001bc03:	90                   	nop

c001bc04 <FAT::allocateSwapfile(char const*, int)>:
c001bc04:	55                   	push   ebp
c001bc05:	57                   	push   edi
c001bc06:	56                   	push   esi
c001bc07:	53                   	push   ebx
c001bc08:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001bc0e:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001bc19:	83 ec 0c             	sub    esp,0xc
c001bc1c:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001bc23:	e8 bf e1 fe ff       	call   c0009de7 <malloc>
c001bc28:	83 c4 10             	add    esp,0x10
c001bc2b:	89 c7                	mov    edi,eax
c001bc2d:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c001bc32:	83 ec 04             	sub    esp,0x4
c001bc35:	50                   	push   eax
c001bc36:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001bc3d:	57                   	push   edi
c001bc3e:	e8 3f 1a ff ff       	call   c000d682 <File::File(char const*, Process*)>
c001bc43:	83 c4 10             	add    esp,0x10
c001bc46:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001bc4d:	83 ec 04             	sub    esp,0x4
c001bc50:	8d 44 24 13          	lea    eax,[esp+0x13]
c001bc54:	50                   	push   eax
c001bc55:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bc59:	50                   	push   eax
c001bc5a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bc61:	e8 a2 1d ff ff       	call   c000da08 <File::stat(unsigned long long*, bool*)>
c001bc66:	83 c4 10             	add    esp,0x10
c001bc69:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001bc70:	c1 e0 14             	shl    eax,0x14
c001bc73:	89 c7                	mov    edi,eax
c001bc75:	89 c5                	mov    ebp,eax
c001bc77:	c1 fd 1f             	sar    ebp,0x1f
c001bc7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc7e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bc82:	89 f9                	mov    ecx,edi
c001bc84:	31 c1                	xor    ecx,eax
c001bc86:	89 cb                	mov    ebx,ecx
c001bc88:	89 e9                	mov    ecx,ebp
c001bc8a:	31 d1                	xor    ecx,edx
c001bc8c:	89 ce                	mov    esi,ecx
c001bc8e:	89 f0                	mov    eax,esi
c001bc90:	09 d8                	or     eax,ebx
c001bc92:	0f 84 98 00 00 00    	je     c001bd30 <FAT::allocateSwapfile(char const*, int)+0x12c>
c001bc98:	83 ec 0c             	sub    esp,0xc
c001bc9b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bca2:	e8 2d 1c ff ff       	call   c000d8d4 <File::unlink()>
c001bca7:	83 c4 10             	add    esp,0x10
c001bcaa:	83 ec 08             	sub    esp,0x8
c001bcad:	6a 12                	push   0x12
c001bcaf:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bcb6:	e8 a1 1a ff ff       	call   c000d75c <File::open(FileOpenMode)>
c001bcbb:	83 c4 10             	add    esp,0x10
c001bcbe:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001bcc5:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001bccb:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001bcd2:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001bcd9:	c1 e0 14             	shl    eax,0x14
c001bcdc:	99                   	cdq    
c001bcdd:	6a 01                	push   0x1
c001bcdf:	52                   	push   edx
c001bce0:	50                   	push   eax
c001bce1:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001bce8:	e8 b0 b3 fe ff       	call   c000709d <f_expand>
c001bced:	83 c4 10             	add    esp,0x10
c001bcf0:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001bcf7:	8b 00                	mov    eax,DWORD PTR [eax]
c001bcf9:	83 c0 10             	add    eax,0x10
c001bcfc:	8b 00                	mov    eax,DWORD PTR [eax]
c001bcfe:	83 ec 0c             	sub    esp,0xc
c001bd01:	8d 54 24 24          	lea    edx,[esp+0x24]
c001bd05:	52                   	push   edx
c001bd06:	8d 54 24 30          	lea    edx,[esp+0x30]
c001bd0a:	52                   	push   edx
c001bd0b:	6a 00                	push   0x0
c001bd0d:	68 00 04 00 00       	push   0x400
c001bd12:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001bd19:	ff d0                	call   eax
c001bd1b:	83 c4 20             	add    esp,0x20
c001bd1e:	83 ec 0c             	sub    esp,0xc
c001bd21:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bd28:	e8 8d 1a ff ff       	call   c000d7ba <File::close()>
c001bd2d:	83 c4 10             	add    esp,0x10
c001bd30:	83 ec 08             	sub    esp,0x8
c001bd33:	6a 01                	push   0x1
c001bd35:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bd3c:	e8 1b 1a ff ff       	call   c000d75c <File::open(FileOpenMode)>
c001bd41:	83 c4 10             	add    esp,0x10
c001bd44:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001bd4b:	8b 00                	mov    eax,DWORD PTR [eax]
c001bd4d:	83 c0 0c             	add    eax,0xc
c001bd50:	8b 00                	mov    eax,DWORD PTR [eax]
c001bd52:	83 ec 0c             	sub    esp,0xc
c001bd55:	8d 54 24 24          	lea    edx,[esp+0x24]
c001bd59:	52                   	push   edx
c001bd5a:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001bd5e:	52                   	push   edx
c001bd5f:	6a 00                	push   0x0
c001bd61:	6a 04                	push   0x4
c001bd63:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001bd6a:	ff d0                	call   eax
c001bd6c:	83 c4 20             	add    esp,0x20
c001bd6f:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001bd76:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001bd7c:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001bd83:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001bd8a:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001bd8d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001bd90:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001bd97:	83 ec 0c             	sub    esp,0xc
c001bd9a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bda1:	e8 14 1a ff ff       	call   c000d7ba <File::close()>
c001bda6:	83 c4 10             	add    esp,0x10
c001bda9:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001bdb0:	ba 00 00 00 00       	mov    edx,0x0
c001bdb5:	81 c4 3c 04 00 00    	add    esp,0x43c
c001bdbb:	5b                   	pop    ebx
c001bdbc:	5e                   	pop    esi
c001bdbd:	5f                   	pop    edi
c001bdbe:	5d                   	pop    ebp
c001bdbf:	c3                   	ret    

c001bdc0 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001bdc0:	57                   	push   edi
c001bdc1:	56                   	push   esi
c001bdc2:	53                   	push   ebx
c001bdc3:	81 ec 50 02 00 00    	sub    esp,0x250
c001bdc9:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001bdd1:	74 0d                	je     c001bde0 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001bdd3:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001bddb:	75 0f                	jne    c001bdec <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001bddd:	8d 76 00             	lea    esi,[esi+0x0]
c001bde0:	b8 04 00 00 00       	mov    eax,0x4
c001bde5:	e9 36 01 00 00       	jmp    c001bf20 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001bdea:	66 90                	xchg   ax,ax
c001bdec:	83 ec 08             	sub    esp,0x8
c001bdef:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001bdf6:	50                   	push   eax
c001bdf7:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001bdfe:	e8 f4 a1 fe ff       	call   c0005ff7 <f_readdir>
c001be03:	83 c4 10             	add    esp,0x10
c001be06:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001be0d:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c001be14:	83 ec 0c             	sub    esp,0xc
c001be17:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001be1e:	83 c0 1a             	add    eax,0x1a
c001be21:	50                   	push   eax
c001be22:	e8 89 48 fe ff       	call   c00006b0 <strlen>
c001be27:	83 c4 10             	add    esp,0x10
c001be2a:	ba 00 00 00 00       	mov    edx,0x0
c001be2f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001be33:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001be37:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001be3e:	0f b6 c0             	movzx  eax,al
c001be41:	83 e0 10             	and    eax,0x10
c001be44:	74 0a                	je     c001be50 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001be46:	b8 02 00 00 00       	mov    eax,0x2
c001be4b:	eb 0b                	jmp    c001be58 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001be4d:	8d 76 00             	lea    esi,[esi+0x0]
c001be50:	b8 01 00 00 00       	mov    eax,0x1
c001be55:	8d 76 00             	lea    esi,[esi+0x0]
c001be58:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001be5c:	83 ec 08             	sub    esp,0x8
c001be5f:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001be66:	83 c0 1a             	add    eax,0x1a
c001be69:	50                   	push   eax
c001be6a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001be6e:	83 c0 10             	add    eax,0x10
c001be71:	50                   	push   eax
c001be72:	e8 d9 48 fe ff       	call   c0000750 <strcpy>
c001be77:	83 c4 10             	add    esp,0x10
c001be7a:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001be81:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001be88:	8d 44 24 04          	lea    eax,[esp+0x4]
c001be8c:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001be93:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001be9a:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001bea1:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001bea8:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001beaf:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001beb6:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001bebd:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001bec4:	89 c6                	mov    esi,eax
c001bec6:	89 d7                	mov    edi,edx
c001bec8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001beca:	89 c8                	mov    eax,ecx
c001becc:	89 fa                	mov    edx,edi
c001bece:	89 f3                	mov    ebx,esi
c001bed0:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001bed7:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001bede:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001bee5:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001beec:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001bef2:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001bef9:	84 c0                	test   al,al
c001befb:	75 07                	jne    c001bf04 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c001befd:	b8 07 00 00 00       	mov    eax,0x7
c001bf02:	eb 1c                	jmp    c001bf20 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001bf04:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001bf0b:	85 c0                	test   eax,eax
c001bf0d:	75 09                	jne    c001bf18 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c001bf0f:	b8 00 00 00 00       	mov    eax,0x0
c001bf14:	eb 0a                	jmp    c001bf20 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001bf16:	66 90                	xchg   ax,ax
c001bf18:	b8 01 00 00 00       	mov    eax,0x1
c001bf1d:	8d 76 00             	lea    esi,[esi+0x0]
c001bf20:	81 c4 50 02 00 00    	add    esp,0x250
c001bf26:	5b                   	pop    ebx
c001bf27:	5e                   	pop    esi
c001bf28:	5f                   	pop    edi
c001bf29:	c3                   	ret    
c001bf2a:	66 90                	xchg   ax,ax

c001bf2c <FAT::read(void*, unsigned long, void*, int*)>:
c001bf2c:	83 ec 1c             	sub    esp,0x1c
c001bf2f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001bf34:	74 0a                	je     c001bf40 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001bf36:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001bf3b:	75 0b                	jne    c001bf48 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001bf3d:	8d 76 00             	lea    esi,[esi+0x0]
c001bf40:	b8 04 00 00 00       	mov    eax,0x4
c001bf45:	eb 41                	jmp    c001bf88 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001bf47:	90                   	nop
c001bf48:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bf4c:	50                   	push   eax
c001bf4d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bf51:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001bf55:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bf59:	e8 79 93 fe ff       	call   c00052d7 <f_read>
c001bf5e:	83 c4 10             	add    esp,0x10
c001bf61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bf65:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bf69:	89 c2                	mov    edx,eax
c001bf6b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bf6f:	89 10                	mov    DWORD PTR [eax],edx
c001bf71:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bf75:	85 c0                	test   eax,eax
c001bf77:	75 07                	jne    c001bf80 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001bf79:	b8 00 00 00 00       	mov    eax,0x0
c001bf7e:	eb 08                	jmp    c001bf88 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001bf80:	b8 01 00 00 00       	mov    eax,0x1
c001bf85:	8d 76 00             	lea    esi,[esi+0x0]
c001bf88:	83 c4 1c             	add    esp,0x1c
c001bf8b:	c3                   	ret    

c001bf8c <FAT::write(void*, unsigned long, void*, int*)>:
c001bf8c:	83 ec 1c             	sub    esp,0x1c
c001bf8f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001bf94:	74 0a                	je     c001bfa0 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001bf96:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001bf9b:	75 0b                	jne    c001bfa8 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001bf9d:	8d 76 00             	lea    esi,[esi+0x0]
c001bfa0:	b8 04 00 00 00       	mov    eax,0x4
c001bfa5:	eb 41                	jmp    c001bfe8 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001bfa7:	90                   	nop
c001bfa8:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bfac:	50                   	push   eax
c001bfad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bfb1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001bfb5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bfb9:	e8 99 95 fe ff       	call   c0005557 <f_write>
c001bfbe:	83 c4 10             	add    esp,0x10
c001bfc1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bfc5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bfc9:	89 c2                	mov    edx,eax
c001bfcb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bfcf:	89 10                	mov    DWORD PTR [eax],edx
c001bfd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bfd5:	85 c0                	test   eax,eax
c001bfd7:	75 07                	jne    c001bfe0 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001bfd9:	b8 00 00 00 00       	mov    eax,0x0
c001bfde:	eb 08                	jmp    c001bfe8 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001bfe0:	b8 01 00 00 00       	mov    eax,0x1
c001bfe5:	8d 76 00             	lea    esi,[esi+0x0]
c001bfe8:	83 c4 1c             	add    esp,0x1c
c001bfeb:	c3                   	ret    

c001bfec <FAT::close(void*)>:
c001bfec:	83 ec 1c             	sub    esp,0x1c
c001bfef:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001bff4:	75 0a                	jne    c001c000 <FAT::close(void*)+0x14>
c001bff6:	b8 04 00 00 00       	mov    eax,0x4
c001bffb:	eb 3f                	jmp    c001c03c <FAT::close(void*)+0x50>
c001bffd:	8d 76 00             	lea    esi,[esi+0x0]
c001c000:	83 ec 0c             	sub    esp,0xc
c001c003:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c007:	e8 e1 99 fe ff       	call   c00059ed <f_close>
c001c00c:	83 c4 10             	add    esp,0x10
c001c00f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c013:	83 ec 0c             	sub    esp,0xc
c001c016:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c01a:	e8 d8 dd fe ff       	call   c0009df7 <free>
c001c01f:	83 c4 10             	add    esp,0x10
c001c022:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c026:	85 c0                	test   eax,eax
c001c028:	75 0a                	jne    c001c034 <FAT::close(void*)+0x48>
c001c02a:	b8 00 00 00 00       	mov    eax,0x0
c001c02f:	eb 0b                	jmp    c001c03c <FAT::close(void*)+0x50>
c001c031:	8d 76 00             	lea    esi,[esi+0x0]
c001c034:	b8 01 00 00 00       	mov    eax,0x1
c001c039:	8d 76 00             	lea    esi,[esi+0x0]
c001c03c:	83 c4 1c             	add    esp,0x1c
c001c03f:	c3                   	ret    

c001c040 <FAT::closeDir(void*)>:
c001c040:	83 ec 1c             	sub    esp,0x1c
c001c043:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c048:	75 0a                	jne    c001c054 <FAT::closeDir(void*)+0x14>
c001c04a:	b8 04 00 00 00       	mov    eax,0x4
c001c04f:	eb 3f                	jmp    c001c090 <FAT::closeDir(void*)+0x50>
c001c051:	8d 76 00             	lea    esi,[esi+0x0]
c001c054:	83 ec 0c             	sub    esp,0xc
c001c057:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c05b:	e8 75 9f fe ff       	call   c0005fd5 <f_closedir>
c001c060:	83 c4 10             	add    esp,0x10
c001c063:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c067:	83 ec 0c             	sub    esp,0xc
c001c06a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c06e:	e8 84 dd fe ff       	call   c0009df7 <free>
c001c073:	83 c4 10             	add    esp,0x10
c001c076:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c07a:	85 c0                	test   eax,eax
c001c07c:	75 0a                	jne    c001c088 <FAT::closeDir(void*)+0x48>
c001c07e:	b8 00 00 00 00       	mov    eax,0x0
c001c083:	eb 0b                	jmp    c001c090 <FAT::closeDir(void*)+0x50>
c001c085:	8d 76 00             	lea    esi,[esi+0x0]
c001c088:	b8 01 00 00 00       	mov    eax,0x1
c001c08d:	8d 76 00             	lea    esi,[esi+0x0]
c001c090:	83 c4 1c             	add    esp,0x1c
c001c093:	c3                   	ret    

c001c094 <FAT::seek(void*, unsigned long long)>:
c001c094:	83 ec 2c             	sub    esp,0x2c
c001c097:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c09b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c09f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c0a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c0a7:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001c0ac:	75 0a                	jne    c001c0b8 <FAT::seek(void*, unsigned long long)+0x24>
c001c0ae:	b8 04 00 00 00       	mov    eax,0x4
c001c0b3:	eb 37                	jmp    c001c0ec <FAT::seek(void*, unsigned long long)+0x58>
c001c0b5:	8d 76 00             	lea    esi,[esi+0x0]
c001c0b8:	83 ec 04             	sub    esp,0x4
c001c0bb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c0bf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c0c3:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001c0c7:	e8 50 99 fe ff       	call   c0005a1c <f_lseek>
c001c0cc:	83 c4 10             	add    esp,0x10
c001c0cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c0d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c0d7:	85 c0                	test   eax,eax
c001c0d9:	75 09                	jne    c001c0e4 <FAT::seek(void*, unsigned long long)+0x50>
c001c0db:	b8 00 00 00 00       	mov    eax,0x0
c001c0e0:	eb 0a                	jmp    c001c0ec <FAT::seek(void*, unsigned long long)+0x58>
c001c0e2:	66 90                	xchg   ax,ax
c001c0e4:	b8 01 00 00 00       	mov    eax,0x1
c001c0e9:	8d 76 00             	lea    esi,[esi+0x0]
c001c0ec:	83 c4 2c             	add    esp,0x2c
c001c0ef:	c3                   	ret    

c001c0f0 <fatWrapperReadDisk>:
c001c0f0:	83 ec 1c             	sub    esp,0x1c
c001c0f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c0f7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c0fb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c0ff:	89 04 24             	mov    DWORD PTR [esp],eax
c001c102:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c106:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c10a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c10f:	8b 04 85 c0 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e40]
c001c116:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c11a:	83 ec 0c             	sub    esp,0xc
c001c11d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c121:	52                   	push   edx
c001c122:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c126:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c12a:	50                   	push   eax
c001c12b:	e8 6a 49 ff ff       	call   c0010a9a <LogicalDisk::read(unsigned long long, int, void*)>
c001c130:	83 c4 20             	add    esp,0x20
c001c133:	83 c4 1c             	add    esp,0x1c
c001c136:	c3                   	ret    
c001c137:	90                   	nop

c001c138 <fatWrapperWriteDisk>:
c001c138:	83 ec 1c             	sub    esp,0x1c
c001c13b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c13f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c143:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c147:	89 04 24             	mov    DWORD PTR [esp],eax
c001c14a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c14e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c152:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c157:	8b 04 85 c0 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e40]
c001c15e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c162:	83 ec 0c             	sub    esp,0xc
c001c165:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c169:	52                   	push   edx
c001c16a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c16e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c172:	50                   	push   eax
c001c173:	e8 8e 49 ff ff       	call   c0010b06 <LogicalDisk::write(unsigned long long, int, void*)>
c001c178:	83 c4 20             	add    esp,0x20
c001c17b:	83 c4 1c             	add    esp,0x1c
c001c17e:	c3                   	ret    
c001c17f:	90                   	nop

c001c180 <fatWrapperIoctl>:
c001c180:	53                   	push   ebx
c001c181:	83 ec 28             	sub    esp,0x28
c001c184:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c188:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c18c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001c190:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c194:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001c199:	75 31                	jne    c001c1cc <fatWrapperIoctl+0x4c>
c001c19b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c19f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c1a3:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c1a8:	8b 04 85 c0 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e40]
c001c1af:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c1b5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c1bb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c1bf:	66 89 02             	mov    WORD PTR [edx],ax
c001c1c2:	b8 00 00 00 00       	mov    eax,0x0
c001c1c7:	e9 bc 00 00 00       	jmp    c001c288 <fatWrapperIoctl+0x108>
c001c1cc:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001c1d1:	75 6d                	jne    c001c240 <fatWrapperIoctl+0xc0>
c001c1d3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c1d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c1db:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c1e0:	8b 04 85 c0 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e40]
c001c1e7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c1ed:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001c1f3:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001c1f9:	89 c8                	mov    eax,ecx
c001c1fb:	89 da                	mov    edx,ebx
c001c1fd:	0f a4 c2 0a          	shld   edx,eax,0xa
c001c201:	c1 e0 0a             	shl    eax,0xa
c001c204:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001c209:	8b 0c 8d c0 91 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6e40]
c001c210:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001c216:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001c21c:	89 cb                	mov    ebx,ecx
c001c21e:	c1 fb 1f             	sar    ebx,0x1f
c001c221:	53                   	push   ebx
c001c222:	51                   	push   ecx
c001c223:	52                   	push   edx
c001c224:	50                   	push   eax
c001c225:	e8 b6 6d 00 00       	call   c0022fe0 <__udivdi3>
c001c22a:	83 c4 10             	add    esp,0x10
c001c22d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c231:	89 01                	mov    DWORD PTR [ecx],eax
c001c233:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001c236:	b8 00 00 00 00       	mov    eax,0x0
c001c23b:	eb 4b                	jmp    c001c288 <fatWrapperIoctl+0x108>
c001c23d:	8d 76 00             	lea    esi,[esi+0x0]
c001c240:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001c245:	75 09                	jne    c001c250 <fatWrapperIoctl+0xd0>
c001c247:	b8 00 00 00 00       	mov    eax,0x0
c001c24c:	eb 3a                	jmp    c001c288 <fatWrapperIoctl+0x108>
c001c24e:	66 90                	xchg   ax,ax
c001c250:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001c255:	75 19                	jne    c001c270 <fatWrapperIoctl+0xf0>
c001c257:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c25b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c25f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c263:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001c269:	b8 00 00 00 00       	mov    eax,0x0
c001c26e:	eb 18                	jmp    c001c288 <fatWrapperIoctl+0x108>
c001c270:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001c275:	75 09                	jne    c001c280 <fatWrapperIoctl+0x100>
c001c277:	b8 00 00 00 00       	mov    eax,0x0
c001c27c:	eb 0a                	jmp    c001c288 <fatWrapperIoctl+0x108>
c001c27e:	66 90                	xchg   ax,ax
c001c280:	b8 04 00 00 00       	mov    eax,0x4
c001c285:	8d 76 00             	lea    esi,[esi+0x0]
c001c288:	83 c4 28             	add    esp,0x28
c001c28b:	5b                   	pop    ebx
c001c28c:	c3                   	ret    
c001c28d:	90                   	nop
c001c28e:	66 90                	xchg   ax,ax

c001c290 <FAT::FAT()>:
c001c290:	83 ec 1c             	sub    esp,0x1c
c001c293:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c297:	83 ec 0c             	sub    esp,0xc
c001c29a:	50                   	push   eax
c001c29b:	e8 8e 11 ff ff       	call   c000d42e <Filesystem::Filesystem()>
c001c2a0:	83 c4 10             	add    esp,0x10
c001c2a3:	ba 1c 70 02 c0       	mov    edx,0xc002701c
c001c2a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c2ac:	89 10                	mov    DWORD PTR [eax],edx
c001c2ae:	c7 05 20 a2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a220,0x0
c001c2b8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c2c0:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001c2c5:	7f 15                	jg     c001c2dc <FAT::FAT()+0x4c>
c001c2c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c2cb:	c7 04 85 40 a2 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd5dc0],0xffffffff
c001c2d6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001c2da:	eb e4                	jmp    c001c2c0 <FAT::FAT()+0x30>
c001c2dc:	90                   	nop
c001c2dd:	83 c4 1c             	add    esp,0x1c
c001c2e0:	c3                   	ret    
c001c2e1:	90                   	nop
c001c2e2:	66 90                	xchg   ax,ax

c001c2e4 <FAT::fixFilepath(char*)>:
c001c2e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c2e8:	8a 00                	mov    al,BYTE PTR [eax]
c001c2ea:	3c 40                	cmp    al,0x40
c001c2ec:	7e 2e                	jle    c001c31c <FAT::fixFilepath(char*)+0x38>
c001c2ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c2f2:	8a 00                	mov    al,BYTE PTR [eax]
c001c2f4:	83 e8 41             	sub    eax,0x41
c001c2f7:	88 c2                	mov    dl,al
c001c2f9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c2fd:	88 10                	mov    BYTE PTR [eax],dl
c001c2ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c303:	8a 00                	mov    al,BYTE PTR [eax]
c001c305:	0f be c0             	movsx  eax,al
c001c308:	8b 04 85 40 a2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5dc0]
c001c30f:	83 c0 30             	add    eax,0x30
c001c312:	88 c2                	mov    dl,al
c001c314:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c318:	88 10                	mov    BYTE PTR [eax],dl
c001c31a:	66 90                	xchg   ax,ax
c001c31c:	90                   	nop
c001c31d:	c3                   	ret    
c001c31e:	66 90                	xchg   ax,ax

c001c320 <FAT::open(char const*, void**, FileOpenMode)>:
c001c320:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c326:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c32e:	74 0c                	je     c001c33c <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001c330:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001c338:	75 0e                	jne    c001c348 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001c33a:	66 90                	xchg   ax,ax
c001c33c:	b8 04 00 00 00       	mov    eax,0x4
c001c341:	e9 06 01 00 00       	jmp    c001c44c <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001c346:	66 90                	xchg   ax,ax
c001c348:	83 ec 08             	sub    esp,0x8
c001c34b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c352:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c356:	50                   	push   eax
c001c357:	e8 f4 43 fe ff       	call   c0000750 <strcpy>
c001c35c:	83 c4 10             	add    esp,0x10
c001c35f:	83 ec 08             	sub    esp,0x8
c001c362:	8d 44 24 10          	lea    eax,[esp+0x10]
c001c366:	50                   	push   eax
c001c367:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c36e:	e8 71 ff ff ff       	call   c001c2e4 <FAT::fixFilepath(char*)>
c001c373:	83 c4 10             	add    esp,0x10
c001c376:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001c37e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c385:	83 e0 01             	and    eax,0x1
c001c388:	74 0a                	je     c001c394 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c001c38a:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001c392:	66 90                	xchg   ax,ax
c001c394:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c39b:	83 e0 04             	and    eax,0x4
c001c39e:	74 10                	je     c001c3b0 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c001c3a0:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001c3a8:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001c3b0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c3b7:	83 e0 02             	and    eax,0x2
c001c3ba:	74 08                	je     c001c3c4 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c001c3bc:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001c3c4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c3cb:	83 e0 08             	and    eax,0x8
c001c3ce:	74 08                	je     c001c3d8 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c001c3d0:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001c3d8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c3df:	83 e0 10             	and    eax,0x10
c001c3e2:	74 08                	je     c001c3ec <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001c3e4:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001c3ec:	83 ec 0c             	sub    esp,0xc
c001c3ef:	68 50 02 00 00       	push   0x250
c001c3f4:	e8 ee d9 fe ff       	call   c0009de7 <malloc>
c001c3f9:	83 c4 10             	add    esp,0x10
c001c3fc:	89 c2                	mov    edx,eax
c001c3fe:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c405:	89 10                	mov    DWORD PTR [eax],edx
c001c407:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001c40f:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c416:	8b 00                	mov    eax,DWORD PTR [eax]
c001c418:	83 ec 04             	sub    esp,0x4
c001c41b:	52                   	push   edx
c001c41c:	8d 54 24 10          	lea    edx,[esp+0x10]
c001c420:	52                   	push   edx
c001c421:	50                   	push   eax
c001c422:	e8 74 8a fe ff       	call   c0004e9b <f_open>
c001c427:	83 c4 10             	add    esp,0x10
c001c42a:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001c431:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001c439:	74 09                	je     c001c444 <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001c43b:	b8 01 00 00 00       	mov    eax,0x1
c001c440:	eb 0a                	jmp    c001c44c <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001c442:	66 90                	xchg   ax,ax
c001c444:	b8 00 00 00 00       	mov    eax,0x0
c001c449:	8d 76 00             	lea    esi,[esi+0x0]
c001c44c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c452:	c3                   	ret    
c001c453:	90                   	nop

c001c454 <FAT::openDir(char const*, void**)>:
c001c454:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c45a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c462:	74 0c                	je     c001c470 <FAT::openDir(char const*, void**)+0x1c>
c001c464:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001c46c:	75 0e                	jne    c001c47c <FAT::openDir(char const*, void**)+0x28>
c001c46e:	66 90                	xchg   ax,ax
c001c470:	b8 04 00 00 00       	mov    eax,0x4
c001c475:	e9 82 00 00 00       	jmp    c001c4fc <FAT::openDir(char const*, void**)+0xa8>
c001c47a:	66 90                	xchg   ax,ax
c001c47c:	83 ec 08             	sub    esp,0x8
c001c47f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c486:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c48a:	50                   	push   eax
c001c48b:	e8 c0 42 fe ff       	call   c0000750 <strcpy>
c001c490:	83 c4 10             	add    esp,0x10
c001c493:	83 ec 08             	sub    esp,0x8
c001c496:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c49a:	50                   	push   eax
c001c49b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c4a2:	e8 3d fe ff ff       	call   c001c2e4 <FAT::fixFilepath(char*)>
c001c4a7:	83 c4 10             	add    esp,0x10
c001c4aa:	83 ec 0c             	sub    esp,0xc
c001c4ad:	6a 4c                	push   0x4c
c001c4af:	e8 33 d9 fe ff       	call   c0009de7 <malloc>
c001c4b4:	83 c4 10             	add    esp,0x10
c001c4b7:	89 c2                	mov    edx,eax
c001c4b9:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c4c0:	89 10                	mov    DWORD PTR [eax],edx
c001c4c2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c4c9:	8b 00                	mov    eax,DWORD PTR [eax]
c001c4cb:	83 ec 08             	sub    esp,0x8
c001c4ce:	8d 54 24 14          	lea    edx,[esp+0x14]
c001c4d2:	52                   	push   edx
c001c4d3:	50                   	push   eax
c001c4d4:	e8 fa 99 fe ff       	call   c0005ed3 <f_opendir>
c001c4d9:	83 c4 10             	add    esp,0x10
c001c4dc:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c4e3:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001c4eb:	74 07                	je     c001c4f4 <FAT::openDir(char const*, void**)+0xa0>
c001c4ed:	b8 01 00 00 00       	mov    eax,0x1
c001c4f2:	eb 08                	jmp    c001c4fc <FAT::openDir(char const*, void**)+0xa8>
c001c4f4:	b8 00 00 00 00       	mov    eax,0x0
c001c4f9:	8d 76 00             	lea    esi,[esi+0x0]
c001c4fc:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c502:	c3                   	ret    
c001c503:	90                   	nop

c001c504 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001c504:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001c50a:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001c512:	75 0c                	jne    c001c520 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001c514:	b8 04 00 00 00       	mov    eax,0x4
c001c519:	e9 d2 00 00 00       	jmp    c001c5f0 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001c51e:	66 90                	xchg   ax,ax
c001c520:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001c528:	75 0a                	jne    c001c534 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001c52a:	b8 04 00 00 00       	mov    eax,0x4
c001c52f:	e9 bc 00 00 00       	jmp    c001c5f0 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001c534:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001c53c:	75 0a                	jne    c001c548 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001c53e:	b8 04 00 00 00       	mov    eax,0x4
c001c543:	e9 a8 00 00 00       	jmp    c001c5f0 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001c548:	83 ec 08             	sub    esp,0x8
c001c54b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c552:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001c559:	50                   	push   eax
c001c55a:	e8 f1 41 fe ff       	call   c0000750 <strcpy>
c001c55f:	83 c4 10             	add    esp,0x10
c001c562:	83 ec 08             	sub    esp,0x8
c001c565:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001c56c:	50                   	push   eax
c001c56d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c574:	e8 6b fd ff ff       	call   c001c2e4 <FAT::fixFilepath(char*)>
c001c579:	83 c4 10             	add    esp,0x10
c001c57c:	83 ec 08             	sub    esp,0x8
c001c57f:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c583:	50                   	push   eax
c001c584:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001c58b:	50                   	push   eax
c001c58c:	e8 01 9b fe ff       	call   c0006092 <f_stat>
c001c591:	83 c4 10             	add    esp,0x10
c001c594:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001c59b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001c5a2:	85 c0                	test   eax,eax
c001c5a4:	74 0a                	je     c001c5b0 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001c5a6:	83 f8 04             	cmp    eax,0x4
c001c5a9:	74 35                	je     c001c5e0 <FAT::stat(char const*, unsigned long long*, bool*)+0xdc>
c001c5ab:	eb 3b                	jmp    c001c5e8 <FAT::stat(char const*, unsigned long long*, bool*)+0xe4>
c001c5ad:	8d 76 00             	lea    esi,[esi+0x0]
c001c5b0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001c5b4:	0f b6 c0             	movzx  eax,al
c001c5b7:	83 e0 10             	and    eax,0x10
c001c5ba:	0f 95 c2             	setne  dl
c001c5bd:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001c5c4:	88 10                	mov    BYTE PTR [eax],dl
c001c5c6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c5c9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c5cd:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001c5d4:	89 01                	mov    DWORD PTR [ecx],eax
c001c5d6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001c5d9:	b8 00 00 00 00       	mov    eax,0x0
c001c5de:	eb 10                	jmp    c001c5f0 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001c5e0:	b8 02 00 00 00       	mov    eax,0x2
c001c5e5:	eb 09                	jmp    c001c5f0 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001c5e7:	90                   	nop
c001c5e8:	b8 01 00 00 00       	mov    eax,0x1
c001c5ed:	8d 76 00             	lea    esi,[esi+0x0]
c001c5f0:	81 c4 2c 02 00 00    	add    esp,0x22c
c001c5f6:	c3                   	ret    
c001c5f7:	90                   	nop

c001c5f8 <FAT::unlink(char const*)>:
c001c5f8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c5fe:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c606:	75 08                	jne    c001c610 <FAT::unlink(char const*)+0x18>
c001c608:	b8 04 00 00 00       	mov    eax,0x4
c001c60d:	eb 61                	jmp    c001c670 <FAT::unlink(char const*)+0x78>
c001c60f:	90                   	nop
c001c610:	83 ec 08             	sub    esp,0x8
c001c613:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c61a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c61e:	50                   	push   eax
c001c61f:	e8 2c 41 fe ff       	call   c0000750 <strcpy>
c001c624:	83 c4 10             	add    esp,0x10
c001c627:	83 ec 08             	sub    esp,0x8
c001c62a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c62e:	50                   	push   eax
c001c62f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c636:	e8 a9 fc ff ff       	call   c001c2e4 <FAT::fixFilepath(char*)>
c001c63b:	83 c4 10             	add    esp,0x10
c001c63e:	83 ec 0c             	sub    esp,0xc
c001c641:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c645:	50                   	push   eax
c001c646:	e8 99 9d fe ff       	call   c00063e4 <f_unlink>
c001c64b:	83 c4 10             	add    esp,0x10
c001c64e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c655:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001c65c:	85 c0                	test   eax,eax
c001c65e:	75 08                	jne    c001c668 <FAT::unlink(char const*)+0x70>
c001c660:	b8 00 00 00 00       	mov    eax,0x0
c001c665:	eb 09                	jmp    c001c670 <FAT::unlink(char const*)+0x78>
c001c667:	90                   	nop
c001c668:	b8 01 00 00 00       	mov    eax,0x1
c001c66d:	8d 76 00             	lea    esi,[esi+0x0]
c001c670:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c676:	c3                   	ret    
c001c677:	90                   	nop

c001c678 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001c678:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001c67e:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001c685:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001c68c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001c690:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c694:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001c69c:	75 0a                	jne    c001c6a8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001c69e:	b8 04 00 00 00       	mov    eax,0x4
c001c6a3:	e9 30 01 00 00       	jmp    c001c7d8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001c6a8:	83 ec 08             	sub    esp,0x8
c001c6ab:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c6b2:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c6b6:	50                   	push   eax
c001c6b7:	e8 94 40 fe ff       	call   c0000750 <strcpy>
c001c6bc:	83 c4 10             	add    esp,0x10
c001c6bf:	83 ec 08             	sub    esp,0x8
c001c6c2:	8d 44 24 20          	lea    eax,[esp+0x20]
c001c6c6:	50                   	push   eax
c001c6c7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c6ce:	e8 11 fc ff ff       	call   c001c2e4 <FAT::fixFilepath(char*)>
c001c6d3:	83 c4 10             	add    esp,0x10
c001c6d6:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001c6de:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001c6e6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c6eb:	83 e0 01             	and    eax,0x1
c001c6ee:	74 08                	je     c001c6f8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001c6f0:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001c6f8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c6fd:	83 e0 02             	and    eax,0x2
c001c700:	74 0a                	je     c001c70c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x94>
c001c702:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001c70a:	66 90                	xchg   ax,ax
c001c70c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c711:	83 e0 04             	and    eax,0x4
c001c714:	74 0a                	je     c001c720 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001c716:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001c71e:	66 90                	xchg   ax,ax
c001c720:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c725:	83 e0 08             	and    eax,0x8
c001c728:	74 0a                	je     c001c734 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xbc>
c001c72a:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001c732:	66 90                	xchg   ax,ax
c001c734:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c739:	83 e0 01             	and    eax,0x1
c001c73c:	74 0a                	je     c001c748 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xd0>
c001c73e:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001c746:	66 90                	xchg   ax,ax
c001c748:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c74d:	83 e0 02             	and    eax,0x2
c001c750:	74 0a                	je     c001c75c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001c752:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001c75a:	66 90                	xchg   ax,ax
c001c75c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c761:	83 e0 04             	and    eax,0x4
c001c764:	74 0a                	je     c001c770 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf8>
c001c766:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001c76e:	66 90                	xchg   ax,ax
c001c770:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c775:	83 e0 08             	and    eax,0x8
c001c778:	74 0a                	je     c001c784 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x10c>
c001c77a:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001c782:	66 90                	xchg   ax,ax
c001c784:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c78b:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001c792:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001c79a:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001c7a2:	83 ec 04             	sub    esp,0x4
c001c7a5:	52                   	push   edx
c001c7a6:	50                   	push   eax
c001c7a7:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c7ab:	50                   	push   eax
c001c7ac:	e8 d5 a2 fe ff       	call   c0006a86 <f_chmod>
c001c7b1:	83 c4 10             	add    esp,0x10
c001c7b4:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001c7bb:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001c7c2:	85 c0                	test   eax,eax
c001c7c4:	75 0a                	jne    c001c7d0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x158>
c001c7c6:	b8 00 00 00 00       	mov    eax,0x0
c001c7cb:	eb 0b                	jmp    c001c7d8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001c7cd:	8d 76 00             	lea    esi,[esi+0x0]
c001c7d0:	b8 01 00 00 00       	mov    eax,0x1
c001c7d5:	8d 76 00             	lea    esi,[esi+0x0]
c001c7d8:	81 c4 2c 01 00 00    	add    esp,0x12c
c001c7de:	c3                   	ret    
c001c7df:	90                   	nop

c001c7e0 <FAT::rename(char const*, char const*)>:
c001c7e0:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c7e6:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001c7ee:	74 0c                	je     c001c7fc <FAT::rename(char const*, char const*)+0x1c>
c001c7f0:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001c7f8:	75 0e                	jne    c001c808 <FAT::rename(char const*, char const*)+0x28>
c001c7fa:	66 90                	xchg   ax,ax
c001c7fc:	b8 04 00 00 00       	mov    eax,0x4
c001c801:	e9 9e 00 00 00       	jmp    c001c8a4 <FAT::rename(char const*, char const*)+0xc4>
c001c806:	66 90                	xchg   ax,ax
c001c808:	83 ec 08             	sub    esp,0x8
c001c80b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c812:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001c819:	50                   	push   eax
c001c81a:	e8 31 3f fe ff       	call   c0000750 <strcpy>
c001c81f:	83 c4 10             	add    esp,0x10
c001c822:	83 ec 08             	sub    esp,0x8
c001c825:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001c82c:	50                   	push   eax
c001c82d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c834:	e8 ab fa ff ff       	call   c001c2e4 <FAT::fixFilepath(char*)>
c001c839:	83 c4 10             	add    esp,0x10
c001c83c:	83 ec 08             	sub    esp,0x8
c001c83f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001c846:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c84a:	50                   	push   eax
c001c84b:	e8 00 3f fe ff       	call   c0000750 <strcpy>
c001c850:	83 c4 10             	add    esp,0x10
c001c853:	83 ec 08             	sub    esp,0x8
c001c856:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c85a:	50                   	push   eax
c001c85b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c862:	e8 7d fa ff ff       	call   c001c2e4 <FAT::fixFilepath(char*)>
c001c867:	83 c4 10             	add    esp,0x10
c001c86a:	83 ec 08             	sub    esp,0x8
c001c86d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c871:	50                   	push   eax
c001c872:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001c879:	50                   	push   eax
c001c87a:	e8 14 9f fe ff       	call   c0006793 <f_rename>
c001c87f:	83 c4 10             	add    esp,0x10
c001c882:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001c889:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001c890:	85 c0                	test   eax,eax
c001c892:	75 08                	jne    c001c89c <FAT::rename(char const*, char const*)+0xbc>
c001c894:	b8 00 00 00 00       	mov    eax,0x0
c001c899:	eb 09                	jmp    c001c8a4 <FAT::rename(char const*, char const*)+0xc4>
c001c89b:	90                   	nop
c001c89c:	b8 01 00 00 00       	mov    eax,0x1
c001c8a1:	8d 76 00             	lea    esi,[esi+0x0]
c001c8a4:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c8aa:	c3                   	ret    
c001c8ab:	90                   	nop

c001c8ac <FAT::mkdir(char const*)>:
c001c8ac:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c8b2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c8ba:	75 08                	jne    c001c8c4 <FAT::mkdir(char const*)+0x18>
c001c8bc:	b8 04 00 00 00       	mov    eax,0x4
c001c8c1:	eb 61                	jmp    c001c924 <FAT::mkdir(char const*)+0x78>
c001c8c3:	90                   	nop
c001c8c4:	83 ec 08             	sub    esp,0x8
c001c8c7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c8ce:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c8d2:	50                   	push   eax
c001c8d3:	e8 78 3e fe ff       	call   c0000750 <strcpy>
c001c8d8:	83 c4 10             	add    esp,0x10
c001c8db:	83 ec 08             	sub    esp,0x8
c001c8de:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c8e2:	50                   	push   eax
c001c8e3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c8ea:	e8 f5 f9 ff ff       	call   c001c2e4 <FAT::fixFilepath(char*)>
c001c8ef:	83 c4 10             	add    esp,0x10
c001c8f2:	83 ec 0c             	sub    esp,0xc
c001c8f5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c8f9:	50                   	push   eax
c001c8fa:	e8 68 9c fe ff       	call   c0006567 <f_mkdir>
c001c8ff:	83 c4 10             	add    esp,0x10
c001c902:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c909:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001c910:	85 c0                	test   eax,eax
c001c912:	75 08                	jne    c001c91c <FAT::mkdir(char const*)+0x70>
c001c914:	b8 00 00 00 00       	mov    eax,0x0
c001c919:	eb 09                	jmp    c001c924 <FAT::mkdir(char const*)+0x78>
c001c91b:	90                   	nop
c001c91c:	b8 01 00 00 00       	mov    eax,0x1
c001c921:	8d 76 00             	lea    esi,[esi+0x0]
c001c924:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c92a:	c3                   	ret    
c001c92b:	90                   	nop

c001c92c <FAT::exists(char const*)>:
c001c92c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001c932:	83 ec 08             	sub    esp,0x8
c001c935:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c93c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c940:	50                   	push   eax
c001c941:	e8 0a 3e fe ff       	call   c0000750 <strcpy>
c001c946:	83 c4 10             	add    esp,0x10
c001c949:	83 ec 08             	sub    esp,0x8
c001c94c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c950:	50                   	push   eax
c001c951:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c958:	e8 87 f9 ff ff       	call   c001c2e4 <FAT::fixFilepath(char*)>
c001c95d:	83 c4 10             	add    esp,0x10
c001c960:	83 ec 08             	sub    esp,0x8
c001c963:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001c96a:	50                   	push   eax
c001c96b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c96f:	50                   	push   eax
c001c970:	e8 1d 97 fe ff       	call   c0006092 <f_stat>
c001c975:	83 c4 10             	add    esp,0x10
c001c978:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001c97f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001c986:	85 c0                	test   eax,eax
c001c988:	75 06                	jne    c001c990 <FAT::exists(char const*)+0x64>
c001c98a:	b0 01                	mov    al,0x1
c001c98c:	eb 06                	jmp    c001c994 <FAT::exists(char const*)+0x68>
c001c98e:	66 90                	xchg   ax,ax
c001c990:	b0 00                	mov    al,0x0
c001c992:	66 90                	xchg   ax,ax
c001c994:	81 c4 2c 02 00 00    	add    esp,0x22c
c001c99a:	c3                   	ret    
c001c99b:	90                   	nop

c001c99c <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001c99c:	b8 08 00 00 00       	mov    eax,0x8
c001c9a1:	c3                   	ret    

c001c9a2 <ISO9660::seek(void*, unsigned long long)>:
c001c9a2:	53                   	push   ebx
c001c9a3:	b8 04 00 00 00       	mov    eax,0x4
c001c9a8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c9ac:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c9b0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c9b4:	85 d2                	test   edx,edx
c001c9b6:	74 17                	je     c001c9cf <ISO9660::seek(void*, unsigned long long)+0x2d>
c001c9b8:	89 c8                	mov    eax,ecx
c001c9ba:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001c9bd:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001c9c0:	b8 01 00 00 00       	mov    eax,0x1
c001c9c5:	73 08                	jae    c001c9cf <ISO9660::seek(void*, unsigned long long)+0x2d>
c001c9c7:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001c9ca:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001c9cd:	31 c0                	xor    eax,eax
c001c9cf:	5b                   	pop    ebx
c001c9d0:	c3                   	ret    
c001c9d1:	90                   	nop

c001c9d2 <ISO9660::tell(void*, unsigned long long*)>:
c001c9d2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c9d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c9da:	85 d2                	test   edx,edx
c001c9dc:	74 12                	je     c001c9f0 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001c9de:	85 c0                	test   eax,eax
c001c9e0:	74 0e                	je     c001c9f0 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001c9e2:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c9e5:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001c9e8:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001c9eb:	89 10                	mov    DWORD PTR [eax],edx
c001c9ed:	31 c0                	xor    eax,eax
c001c9ef:	c3                   	ret    
c001c9f0:	b8 04 00 00 00       	mov    eax,0x4
c001c9f5:	c3                   	ret    

c001c9f6 <ISO9660::getName()>:
c001c9f6:	b8 7c 70 02 c0       	mov    eax,0xc002707c
c001c9fb:	c3                   	ret    

c001c9fc <ISO9660::stat(void*, unsigned long long*)>:
c001c9fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ca00:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ca04:	85 d2                	test   edx,edx
c001ca06:	74 12                	je     c001ca1a <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001ca08:	85 c0                	test   eax,eax
c001ca0a:	74 0e                	je     c001ca1a <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001ca0c:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001ca0f:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001ca12:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001ca15:	89 10                	mov    DWORD PTR [eax],edx
c001ca17:	31 c0                	xor    eax,eax
c001ca19:	c3                   	ret    
c001ca1a:	b8 04 00 00 00       	mov    eax,0x4
c001ca1f:	c3                   	ret    

c001ca20 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001ca20:	b8 01 00 00 00       	mov    eax,0x1
c001ca25:	c3                   	ret    

c001ca26 <ISO9660::unlink(char const*)>:
c001ca26:	b8 01 00 00 00       	mov    eax,0x1
c001ca2b:	c3                   	ret    

c001ca2c <ISO9660::write(void*, unsigned long, void*, int*)>:
c001ca2c:	b8 01 00 00 00       	mov    eax,0x1
c001ca31:	c3                   	ret    

c001ca32 <ISO9660::rename(char const*, char const*)>:
c001ca32:	b8 01 00 00 00       	mov    eax,0x1
c001ca37:	c3                   	ret    

c001ca38 <ISO9660::mkdir(char const*)>:
c001ca38:	b8 01 00 00 00       	mov    eax,0x1
c001ca3d:	c3                   	ret    

c001ca3e <ISO9660::close(void*)>:
c001ca3e:	83 ec 0c             	sub    esp,0xc
c001ca41:	b8 04 00 00 00       	mov    eax,0x4
c001ca46:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ca4a:	85 d2                	test   edx,edx
c001ca4c:	74 0e                	je     c001ca5c <ISO9660::close(void*)+0x1e>
c001ca4e:	83 ec 0c             	sub    esp,0xc
c001ca51:	52                   	push   edx
c001ca52:	e8 a0 d3 fe ff       	call   c0009df7 <free>
c001ca57:	83 c4 10             	add    esp,0x10
c001ca5a:	31 c0                	xor    eax,eax
c001ca5c:	83 c4 0c             	add    esp,0xc
c001ca5f:	c3                   	ret    

c001ca60 <ISO9660::closeDir(void*)>:
c001ca60:	83 ec 0c             	sub    esp,0xc
c001ca63:	b8 04 00 00 00       	mov    eax,0x4
c001ca68:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ca6c:	85 d2                	test   edx,edx
c001ca6e:	74 0e                	je     c001ca7e <ISO9660::closeDir(void*)+0x1e>
c001ca70:	83 ec 0c             	sub    esp,0xc
c001ca73:	52                   	push   edx
c001ca74:	e8 7e d3 fe ff       	call   c0009df7 <free>
c001ca79:	83 c4 10             	add    esp,0x10
c001ca7c:	31 c0                	xor    eax,eax
c001ca7e:	83 c4 0c             	add    esp,0xc
c001ca81:	c3                   	ret    

c001ca82 <ISO9660::~ISO9660()>:
c001ca82:	83 ec 0c             	sub    esp,0xc
c001ca85:	ba a0 70 02 c0       	mov    edx,0xc00270a0
c001ca8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca8e:	89 10                	mov    DWORD PTR [eax],edx
c001ca90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca94:	83 ec 0c             	sub    esp,0xc
c001ca97:	50                   	push   eax
c001ca98:	e8 b5 09 ff ff       	call   c000d452 <Filesystem::~Filesystem()>
c001ca9d:	83 c4 10             	add    esp,0x10
c001caa0:	90                   	nop
c001caa1:	83 c4 0c             	add    esp,0xc
c001caa4:	c3                   	ret    
c001caa5:	90                   	nop

c001caa6 <ISO9660::~ISO9660()>:
c001caa6:	83 ec 0c             	sub    esp,0xc
c001caa9:	83 ec 0c             	sub    esp,0xc
c001caac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cab0:	e8 cd ff ff ff       	call   c001ca82 <ISO9660::~ISO9660()>
c001cab5:	83 c4 10             	add    esp,0x10
c001cab8:	83 ec 08             	sub    esp,0x8
c001cabb:	6a 08                	push   0x8
c001cabd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cac1:	e8 70 05 ff ff       	call   c000d036 <operator delete(void*, unsigned long)>
c001cac6:	83 c4 10             	add    esp,0x10
c001cac9:	83 c4 0c             	add    esp,0xc
c001cacc:	c3                   	ret    

c001cacd <__memmem(unsigned char*, int, unsigned char*, int)>:
c001cacd:	55                   	push   ebp
c001cace:	31 c9                	xor    ecx,ecx
c001cad0:	57                   	push   edi
c001cad1:	56                   	push   esi
c001cad2:	53                   	push   ebx
c001cad3:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001cad7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001cadb:	89 eb                	mov    ebx,ebp
c001cadd:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001cae1:	39 ce                	cmp    esi,ecx
c001cae3:	7e 17                	jle    c001cafc <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001cae5:	31 d2                	xor    edx,edx
c001cae7:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001caeb:	7d 13                	jge    c001cb00 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001caed:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001caf1:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001caf4:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001caf7:	75 0d                	jne    c001cb06 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001caf9:	42                   	inc    edx
c001cafa:	eb eb                	jmp    c001cae7 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001cafc:	31 c0                	xor    eax,eax
c001cafe:	eb 0a                	jmp    c001cb0a <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001cb00:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001cb04:	eb 04                	jmp    c001cb0a <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001cb06:	41                   	inc    ecx
c001cb07:	43                   	inc    ebx
c001cb08:	eb d7                	jmp    c001cae1 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001cb0a:	5b                   	pop    ebx
c001cb0b:	5e                   	pop    esi
c001cb0c:	5f                   	pop    edi
c001cb0d:	5d                   	pop    ebp
c001cb0e:	c3                   	ret    

c001cb0f <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001cb0f:	57                   	push   edi
c001cb10:	56                   	push   esi
c001cb11:	53                   	push   ebx
c001cb12:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cb16:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001cb1a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001cb1e:	39 35 20 a3 02 c0    	cmp    DWORD PTR ds:0xc002a320,esi
c001cb24:	75 08                	jne    c001cb2e <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001cb26:	38 1d 34 86 02 c0    	cmp    BYTE PTR ds:0xc0028634,bl
c001cb2c:	74 4a                	je     c001cb78 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c001cb2e:	83 ec 0c             	sub    esp,0xc
c001cb31:	31 d2                	xor    edx,edx
c001cb33:	68 40 a3 02 c0       	push   0xc002a340
c001cb38:	0f be c3             	movsx  eax,bl
c001cb3b:	6a 01                	push   0x1
c001cb3d:	52                   	push   edx
c001cb3e:	56                   	push   esi
c001cb3f:	ff 34 85 bc 90 02 c0 	push   DWORD PTR [eax*4-0x3ffd6f44]
c001cb46:	e8 4f 3f ff ff       	call   c0010a9a <LogicalDisk::read(unsigned long long, int, void*)>
c001cb4b:	83 c4 20             	add    esp,0x20
c001cb4e:	85 c0                	test   eax,eax
c001cb50:	75 0e                	jne    c001cb60 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c001cb52:	89 35 20 a3 02 c0    	mov    DWORD PTR ds:0xc002a320,esi
c001cb58:	88 1d 34 86 02 c0    	mov    BYTE PTR ds:0xc0028634,bl
c001cb5e:	eb 18                	jmp    c001cb78 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c001cb60:	50                   	push   eax
c001cb61:	68 00 08 00 00       	push   0x800
c001cb66:	6a 00                	push   0x0
c001cb68:	57                   	push   edi
c001cb69:	e8 26 3b fe ff       	call   c0000694 <memset>
c001cb6e:	83 c4 10             	add    esp,0x10
c001cb71:	b8 01 00 00 00       	mov    eax,0x1
c001cb76:	eb 0e                	jmp    c001cb86 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c001cb78:	be 40 a3 02 c0       	mov    esi,0xc002a340
c001cb7d:	b9 00 08 00 00       	mov    ecx,0x800
c001cb82:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cb84:	31 c0                	xor    eax,eax
c001cb86:	5b                   	pop    ebx
c001cb87:	5e                   	pop    esi
c001cb88:	5f                   	pop    edi
c001cb89:	c3                   	ret    

c001cb8a <ISO9660::tryMount(LogicalDisk*, int)>:
c001cb8a:	81 ec 10 08 00 00    	sub    esp,0x810
c001cb90:	c7 05 20 a3 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002a320,0xdeadbeef
c001cb9a:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001cba1:	83 c0 41             	add    eax,0x41
c001cba4:	0f be c0             	movsx  eax,al
c001cba7:	50                   	push   eax
c001cba8:	8d 44 24 08          	lea    eax,[esp+0x8]
c001cbac:	50                   	push   eax
c001cbad:	6a 10                	push   0x10
c001cbaf:	e8 5b ff ff ff       	call   c001cb0f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001cbb4:	83 c4 10             	add    esp,0x10
c001cbb7:	31 d2                	xor    edx,edx
c001cbb9:	85 c0                	test   eax,eax
c001cbbb:	75 24                	jne    c001cbe1 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001cbbd:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001cbc2:	75 1d                	jne    c001cbe1 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001cbc4:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001cbc9:	75 16                	jne    c001cbe1 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001cbcb:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001cbd0:	75 0f                	jne    c001cbe1 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001cbd2:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001cbd7:	75 08                	jne    c001cbe1 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001cbd9:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001cbde:	0f 94 c2             	sete   dl
c001cbe1:	88 d0                	mov    al,dl
c001cbe3:	81 c4 0c 08 00 00    	add    esp,0x80c
c001cbe9:	c3                   	ret    

c001cbea <ISO9660::read(void*, unsigned long, void*, int*)>:
c001cbea:	55                   	push   ebp
c001cbeb:	57                   	push   edi
c001cbec:	56                   	push   esi
c001cbed:	53                   	push   ebx
c001cbee:	81 ec 2c 08 00 00    	sub    esp,0x82c
c001cbf4:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c001cbfb:	85 ed                	test   ebp,ebp
c001cbfd:	0f 84 da 01 00 00    	je     c001cddd <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001cc03:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001cc0b:	0f 84 cc 01 00 00    	je     c001cddd <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001cc11:	b8 01 00 00 00       	mov    eax,0x1
c001cc16:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c001cc1a:	0f 85 c2 01 00 00    	jne    c001cde2 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001cc20:	31 d2                	xor    edx,edx
c001cc22:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001cc29:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001cc2c:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001cc2f:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001cc32:	89 04 24             	mov    DWORD PTR [esp],eax
c001cc35:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001cc39:	01 c8                	add    eax,ecx
c001cc3b:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001cc3e:	11 da                	adc    edx,ebx
c001cc40:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001cc44:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001cc48:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cc4c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001cc50:	19 d7                	sbb    edi,edx
c001cc52:	72 11                	jb     c001cc65 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c001cc54:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001cc57:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001cc5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cc5f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001cc63:	eb 0c                	jmp    c001cc71 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c001cc65:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001cc69:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001cc6d:	29 ce                	sub    esi,ecx
c001cc6f:	19 df                	sbb    edi,ebx
c001cc71:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cc74:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001cc77:	0f a4 c2 0b          	shld   edx,eax,0xb
c001cc7b:	c1 e0 0b             	shl    eax,0xb
c001cc7e:	01 c8                	add    eax,ecx
c001cc80:	11 da                	adc    edx,ebx
c001cc82:	89 04 24             	mov    DWORD PTR [esp],eax
c001cc85:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001cc89:	51                   	push   ecx
c001cc8a:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001cc8e:	50                   	push   eax
c001cc8f:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c001cc93:	53                   	push   ebx
c001cc94:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001cc98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc9c:	0f ac d0 0b          	shrd   eax,edx,0xb
c001cca0:	50                   	push   eax
c001cca1:	e8 69 fe ff ff       	call   c001cb0f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001cca6:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001cca9:	b8 00 08 00 00       	mov    eax,0x800
c001ccae:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001ccb4:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c001ccb8:	29 d0                	sub    eax,edx
c001ccba:	83 c4 10             	add    esp,0x10
c001ccbd:	89 f9                	mov    ecx,edi
c001ccbf:	39 c6                	cmp    esi,eax
c001ccc1:	83 d9 00             	sbb    ecx,0x0
c001ccc4:	7d 1b                	jge    c001cce1 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c001ccc6:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001cccb:	75 12                	jne    c001ccdf <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c001cccd:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001ccd4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ccda:	e9 fa 00 00 00       	jmp    c001cdd9 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c001ccdf:	89 f0                	mov    eax,esi
c001cce1:	01 d3                	add    ebx,edx
c001cce3:	31 d2                	xor    edx,edx
c001cce5:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001cce9:	39 c2                	cmp    edx,eax
c001cceb:	7d 14                	jge    c001cd01 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c001cced:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c001ccf4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001ccf8:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c001ccfb:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c001ccfe:	42                   	inc    edx
c001ccff:	eb e8                	jmp    c001cce9 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c001cd01:	89 c2                	mov    edx,eax
c001cd03:	85 c0                	test   eax,eax
c001cd05:	79 02                	jns    c001cd09 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c001cd07:	31 d2                	xor    edx,edx
c001cd09:	01 c2                	add    edx,eax
c001cd0b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001cd0e:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c001cd15:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001cd19:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001cd1d:	99                   	cdq    
c001cd1e:	01 c1                	add    ecx,eax
c001cd20:	11 d3                	adc    ebx,edx
c001cd22:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001cd26:	29 c6                	sub    esi,eax
c001cd28:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001cd2c:	19 d7                	sbb    edi,edx
c001cd2e:	89 34 24             	mov    DWORD PTR [esp],esi
c001cd31:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001cd35:	b8 ff 07 00 00       	mov    eax,0x7ff
c001cd3a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001cd3d:	b8 00 00 00 00       	mov    eax,0x0
c001cd42:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001cd46:	7d 43                	jge    c001cd8b <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c001cd48:	52                   	push   edx
c001cd49:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001cd4d:	50                   	push   eax
c001cd4e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cd52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cd56:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001cd5a:	0f ac d0 0b          	shrd   eax,edx,0xb
c001cd5e:	50                   	push   eax
c001cd5f:	e8 ab fd ff ff       	call   c001cb0f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001cd64:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001cd6c:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c001cd71:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c001cd79:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001cd81:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001cd86:	83 c4 10             	add    esp,0x10
c001cd89:	eb aa                	jmp    c001cd35 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c001cd8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cd8f:	0b 04 24             	or     eax,DWORD PTR [esp]
c001cd92:	74 2a                	je     c001cdbe <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c001cd94:	50                   	push   eax
c001cd95:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001cd99:	50                   	push   eax
c001cd9a:	8d 74 24 28          	lea    esi,[esp+0x28]
c001cd9e:	56                   	push   esi
c001cd9f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cda3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cda7:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c001cdab:	51                   	push   ecx
c001cdac:	e8 5e fd ff ff       	call   c001cb0f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001cdb1:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001cdb5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cdb9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cdbb:	83 c4 10             	add    esp,0x10
c001cdbe:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001cdc5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001cdc9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cdcd:	89 18                	mov    DWORD PTR [eax],ebx
c001cdcf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cdd3:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001cdd6:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001cdd9:	31 c0                	xor    eax,eax
c001cddb:	eb 05                	jmp    c001cde2 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001cddd:	b8 04 00 00 00       	mov    eax,0x4
c001cde2:	81 c4 2c 08 00 00    	add    esp,0x82c
c001cde8:	5b                   	pop    ebx
c001cde9:	5e                   	pop    esi
c001cdea:	5f                   	pop    edi
c001cdeb:	5d                   	pop    ebp
c001cdec:	c3                   	ret    
c001cded:	90                   	nop

c001cdee <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001cdee:	55                   	push   ebp
c001cdef:	57                   	push   edi
c001cdf0:	56                   	push   esi
c001cdf1:	53                   	push   ebx
c001cdf2:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001cdf8:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c001cdff:	85 ed                	test   ebp,ebp
c001ce01:	0f 84 51 02 00 00    	je     c001d058 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001ce07:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001ce0f:	0f 84 43 02 00 00    	je     c001d058 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001ce15:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ce18:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c001ce1b:	75 0a                	jne    c001ce27 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001ce1d:	b8 07 00 00 00       	mov    eax,0x7
c001ce22:	e9 36 02 00 00       	jmp    c001d05d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001ce27:	50                   	push   eax
c001ce28:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001ce2c:	50                   	push   eax
c001ce2d:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001ce34:	53                   	push   ebx
c001ce35:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ce38:	c1 e0 0b             	shl    eax,0xb
c001ce3b:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c001ce3e:	c1 e8 0b             	shr    eax,0xb
c001ce41:	50                   	push   eax
c001ce42:	e8 c8 fc ff ff       	call   c001cb0f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ce47:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ce4a:	83 c4 10             	add    esp,0x10
c001ce4d:	89 c1                	mov    ecx,eax
c001ce4f:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001ce52:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001ce58:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001ce5b:	84 db                	test   bl,bl
c001ce5d:	0f 85 8b 00 00 00    	jne    c001ceee <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c001ce63:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c001ce69:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001ce6c:	81 e6 ff 07 00 00    	and    esi,0x7ff
c001ce72:	29 c6                	sub    esi,eax
c001ce74:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001ce78:	89 f3                	mov    ebx,esi
c001ce7a:	89 f1                	mov    ecx,esi
c001ce7c:	c1 fb 1f             	sar    ebx,0x1f
c001ce7f:	01 f0                	add    eax,esi
c001ce81:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001ce84:	11 da                	adc    edx,ebx
c001ce86:	89 04 24             	mov    DWORD PTR [esp],eax
c001ce89:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001ce8d:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001ce90:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001ce93:	89 d8                	mov    eax,ebx
c001ce95:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c001ce99:	ba 00 00 00 00       	mov    edx,0x0
c001ce9e:	19 f8                	sbb    eax,edi
c001cea0:	b8 00 00 00 00       	mov    eax,0x0
c001cea5:	73 08                	jae    c001ceaf <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c001cea7:	89 f0                	mov    eax,esi
c001cea9:	89 fa                	mov    edx,edi
c001ceab:	29 c8                	sub    eax,ecx
c001cead:	19 da                	sbb    edx,ebx
c001ceaf:	89 d7                	mov    edi,edx
c001ceb1:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001ceb4:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001ceb7:	09 c7                	or     edi,eax
c001ceb9:	0f 84 5e ff ff ff    	je     c001ce1d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001cebf:	57                   	push   edi
c001cec0:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001cec4:	50                   	push   eax
c001cec5:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001cecc:	53                   	push   ebx
c001cecd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ced0:	c1 e0 0b             	shl    eax,0xb
c001ced3:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001ced7:	c1 e8 0b             	shr    eax,0xb
c001ceda:	50                   	push   eax
c001cedb:	e8 2f fc ff ff       	call   c001cb0f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001cee0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001cee3:	83 c4 10             	add    esp,0x10
c001cee6:	25 ff 07 00 00       	and    eax,0x7ff
c001ceeb:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001ceee:	31 ff                	xor    edi,edi
c001cef0:	56                   	push   esi
c001cef1:	6a 28                	push   0x28
c001cef3:	6a 00                	push   0x0
c001cef5:	8d 44 24 24          	lea    eax,[esp+0x24]
c001cef9:	50                   	push   eax
c001cefa:	e8 95 37 fe ff       	call   c0000694 <memset>
c001ceff:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001cf02:	25 ff 07 00 00       	and    eax,0x7ff
c001cf07:	89 c6                	mov    esi,eax
c001cf09:	83 c6 21             	add    esi,0x21
c001cf0c:	83 d7 00             	adc    edi,0x0
c001cf0f:	83 c4 10             	add    esp,0x10
c001cf12:	31 c9                	xor    ecx,ecx
c001cf14:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c001cf1b:	83 f9 28             	cmp    ecx,0x28
c001cf1e:	88 04 24             	mov    BYTE PTR [esp],al
c001cf21:	0f 94 c2             	sete   dl
c001cf24:	88 d0                	mov    al,dl
c001cf26:	ba ff 07 00 00       	mov    edx,0x7ff
c001cf2b:	39 f2                	cmp    edx,esi
c001cf2d:	ba 00 00 00 00       	mov    edx,0x0
c001cf32:	19 fa                	sbb    edx,edi
c001cf34:	0f 92 c2             	setb   dl
c001cf37:	09 c2                	or     edx,eax
c001cf39:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001cf3d:	0f 94 c0             	sete   al
c001cf40:	08 d0                	or     al,dl
c001cf42:	75 16                	jne    c001cf5a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001cf44:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001cf48:	74 10                	je     c001cf5a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001cf4a:	8a 04 24             	mov    al,BYTE PTR [esp]
c001cf4d:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001cf51:	41                   	inc    ecx
c001cf52:	83 c6 01             	add    esi,0x1
c001cf55:	83 d7 00             	adc    edi,0x0
c001cf58:	eb ba                	jmp    c001cf14 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c001cf5a:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001cf61:	83 ec 0c             	sub    esp,0xc
c001cf64:	8d 74 24 24          	lea    esi,[esp+0x24]
c001cf68:	56                   	push   esi
c001cf69:	e8 42 37 fe ff       	call   c00006b0 <strlen>
c001cf6e:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c001cf75:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001cf79:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001cf81:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001cf84:	5a                   	pop    edx
c001cf85:	25 ff 07 00 00       	and    eax,0x7ff
c001cf8a:	59                   	pop    ecx
c001cf8b:	01 f8                	add    eax,edi
c001cf8d:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001cf93:	83 e0 02             	and    eax,0x2
c001cf96:	3c 01                	cmp    al,0x1
c001cf98:	19 c0                	sbb    eax,eax
c001cf9a:	83 c0 02             	add    eax,0x2
c001cf9d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001cfa1:	56                   	push   esi
c001cfa2:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001cfa6:	50                   	push   eax
c001cfa7:	e8 a4 37 fe ff       	call   c0000750 <strcpy>
c001cfac:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001cfb0:	83 c4 10             	add    esp,0x10
c001cfb3:	84 c0                	test   al,al
c001cfb5:	75 21                	jne    c001cfd8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c001cfb7:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001cfbf:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001cfc7:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001cfcf:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001cfd6:	eb 28                	jmp    c001d000 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001cfd8:	fe c8                	dec    al
c001cfda:	75 24                	jne    c001d000 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001cfdc:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001cfe4:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001cfec:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001cff4:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001cffb:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001d000:	8d 74 24 40          	lea    esi,[esp+0x40]
c001d004:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c001d00b:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c001d012:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d014:	0f b6 f3             	movzx  esi,bl
c001d017:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c001d01e:	31 db                	xor    ebx,ebx
c001d020:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001d026:	89 df                	mov    edi,ebx
c001d028:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c001d02b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d02e:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c001d031:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d034:	39 c6                	cmp    esi,eax
c001d036:	19 d7                	sbb    edi,edx
c001d038:	72 10                	jb     c001d04a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c001d03a:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c001d041:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c001d048:	eb 0a                	jmp    c001d054 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c001d04a:	29 f0                	sub    eax,esi
c001d04c:	19 da                	sbb    edx,ebx
c001d04e:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001d051:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001d054:	31 c0                	xor    eax,eax
c001d056:	eb 05                	jmp    c001d05d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001d058:	b8 04 00 00 00       	mov    eax,0x4
c001d05d:	81 c4 5c 09 00 00    	add    esp,0x95c
c001d063:	5b                   	pop    ebx
c001d064:	5e                   	pop    esi
c001d065:	5f                   	pop    edi
c001d066:	5d                   	pop    ebp
c001d067:	c3                   	ret    

c001d068 <readRoot(unsigned int*, unsigned int*, char)>:
c001d068:	57                   	push   edi
c001d069:	56                   	push   esi
c001d06a:	81 ec 38 08 00 00    	sub    esp,0x838
c001d070:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001d078:	50                   	push   eax
c001d079:	8d 44 24 38          	lea    eax,[esp+0x38]
c001d07d:	50                   	push   eax
c001d07e:	6a 10                	push   0x10
c001d080:	e8 8a fa ff ff       	call   c001cb0f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001d085:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c001d08c:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c001d090:	b9 22 00 00 00       	mov    ecx,0x22
c001d095:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d097:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001d09e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d0a2:	89 10                	mov    DWORD PTR [eax],edx
c001d0a4:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001d0ab:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d0af:	89 10                	mov    DWORD PTR [eax],edx
c001d0b1:	81 c4 44 08 00 00    	add    esp,0x844
c001d0b7:	b0 01                	mov    al,0x1
c001d0b9:	5e                   	pop    esi
c001d0ba:	5f                   	pop    edi
c001d0bb:	c3                   	ret    

c001d0bc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001d0bc:	55                   	push   ebp
c001d0bd:	57                   	push   edi
c001d0be:	56                   	push   esi
c001d0bf:	53                   	push   ebx
c001d0c0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001d0c6:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001d0cd:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001d0d4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d0d8:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001d0dc:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001d0e0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d0e4:	75 03                	jne    c001d0e9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001d0e6:	83 c3 02             	add    ebx,0x2
c001d0e9:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001d0ec:	75 03                	jne    c001d0f1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001d0ee:	43                   	inc    ebx
c001d0ef:	eb f8                	jmp    c001d0e9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001d0f1:	52                   	push   edx
c001d0f2:	68 00 01 00 00       	push   0x100
c001d0f7:	6a 00                	push   0x0
c001d0f9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d0fd:	50                   	push   eax
c001d0fe:	e8 91 35 fe ff       	call   c0000694 <memset>
c001d103:	83 c4 10             	add    esp,0x10
c001d106:	31 d2                	xor    edx,edx
c001d108:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001d10b:	84 c0                	test   al,al
c001d10d:	74 21                	je     c001d130 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001d10f:	3c 2f                	cmp    al,0x2f
c001d111:	75 0b                	jne    c001d11e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001d113:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001d117:	bd 01 00 00 00       	mov    ebp,0x1
c001d11c:	eb 14                	jmp    c001d132 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001d11e:	8d 48 9f             	lea    ecx,[eax-0x61]
c001d121:	80 f9 19             	cmp    cl,0x19
c001d124:	77 03                	ja     c001d129 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001d126:	83 e8 20             	sub    eax,0x20
c001d129:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001d12d:	42                   	inc    edx
c001d12e:	eb d8                	jmp    c001d108 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001d130:	31 ed                	xor    ebp,ebp
c001d132:	83 ec 0c             	sub    esp,0xc
c001d135:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001d13c:	e8 a6 cc fe ff       	call   c0009de7 <malloc>
c001d141:	89 c6                	mov    esi,eax
c001d143:	89 c2                	mov    edx,eax
c001d145:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c001d14c:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001d152:	c1 ef 0b             	shr    edi,0xb
c001d155:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001d15c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001d160:	83 c4 10             	add    esp,0x10
c001d163:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001d168:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d16c:	3b 84 24 34 01 00 00 	cmp    eax,DWORD PTR [esp+0x134]
c001d173:	74 29                	je     c001d19e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xe2>
c001d175:	50                   	push   eax
c001d176:	57                   	push   edi
c001d177:	52                   	push   edx
c001d178:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001d17c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001d183:	e8 87 f9 ff ff       	call   c001cb0f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001d188:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d18c:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001d193:	81 c2 00 08 00 00    	add    edx,0x800
c001d199:	83 c4 10             	add    esp,0x10
c001d19c:	eb ca                	jmp    c001d168 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xac>
c001d19e:	83 ec 0c             	sub    esp,0xc
c001d1a1:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001d1a5:	57                   	push   edi
c001d1a6:	e8 05 35 fe ff       	call   c00006b0 <strlen>
c001d1ab:	50                   	push   eax
c001d1ac:	57                   	push   edi
c001d1ad:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001d1b4:	56                   	push   esi
c001d1b5:	e8 13 f9 ff ff       	call   c001cacd <__memmem(unsigned char*, int, unsigned char*, int)>
c001d1ba:	83 c4 20             	add    esp,0x20
c001d1bd:	85 c0                	test   eax,eax
c001d1bf:	75 13                	jne    c001d1d4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x118>
c001d1c1:	83 ec 0c             	sub    esp,0xc
c001d1c4:	56                   	push   esi
c001d1c5:	e8 2d cc fe ff       	call   c0009df7 <free>
c001d1ca:	83 c4 10             	add    esp,0x10
c001d1cd:	31 c0                	xor    eax,eax
c001d1cf:	e9 b3 00 00 00       	jmp    c001d287 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c001d1d4:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001d1d8:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001d1dc:	c1 e7 08             	shl    edi,0x8
c001d1df:	c1 e2 10             	shl    edx,0x10
c001d1e2:	09 d7                	or     edi,edx
c001d1e4:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001d1e8:	09 d7                	or     edi,edx
c001d1ea:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001d1ee:	c1 e2 18             	shl    edx,0x18
c001d1f1:	09 d7                	or     edi,edx
c001d1f3:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001d1f7:	89 d1                	mov    ecx,edx
c001d1f9:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001d1fd:	c1 e1 08             	shl    ecx,0x8
c001d200:	c1 e2 10             	shl    edx,0x10
c001d203:	09 ca                	or     edx,ecx
c001d205:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001d209:	09 ca                	or     edx,ecx
c001d20b:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001d20f:	c1 e1 18             	shl    ecx,0x18
c001d212:	09 ca                	or     edx,ecx
c001d214:	89 e9                	mov    ecx,ebp
c001d216:	84 c9                	test   cl,cl
c001d218:	74 3c                	je     c001d256 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x19a>
c001d21a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001d21e:	83 ec 0c             	sub    esp,0xc
c001d221:	56                   	push   esi
c001d222:	e8 d0 cb fe ff       	call   c0009df7 <free>
c001d227:	83 c4 0c             	add    esp,0xc
c001d22a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001d231:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001d236:	50                   	push   eax
c001d237:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001d23e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001d245:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d249:	52                   	push   edx
c001d24a:	57                   	push   edi
c001d24b:	53                   	push   ebx
c001d24c:	e8 6b fe ff ff       	call   c001d0bc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001d251:	83 c4 20             	add    esp,0x20
c001d254:	eb 31                	jmp    c001d287 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c001d256:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001d259:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001d260:	d0 e8                	shr    al,1
c001d262:	89 3b                	mov    DWORD PTR [ebx],edi
c001d264:	83 e0 01             	and    eax,0x1
c001d267:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001d26e:	83 ec 0c             	sub    esp,0xc
c001d271:	89 13                	mov    DWORD PTR [ebx],edx
c001d273:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001d27a:	89 03                	mov    DWORD PTR [ebx],eax
c001d27c:	56                   	push   esi
c001d27d:	e8 75 cb fe ff       	call   c0009df7 <free>
c001d282:	83 c4 10             	add    esp,0x10
c001d285:	b0 01                	mov    al,0x1
c001d287:	81 c4 1c 01 00 00    	add    esp,0x11c
c001d28d:	5b                   	pop    ebx
c001d28e:	5e                   	pop    esi
c001d28f:	5f                   	pop    edi
c001d290:	5d                   	pop    ebp
c001d291:	c3                   	ret    

c001d292 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001d292:	55                   	push   ebp
c001d293:	57                   	push   edi
c001d294:	56                   	push   esi
c001d295:	53                   	push   ebx
c001d296:	83 ec 20             	sub    esp,0x20
c001d299:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d29d:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001d2a1:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d2a5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d2ad:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001d2b5:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001d2ba:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001d2c0:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001d2c6:	57                   	push   edi
c001d2c7:	8d 44 24 14          	lea    eax,[esp+0x14]
c001d2cb:	50                   	push   eax
c001d2cc:	8d 44 24 14          	lea    eax,[esp+0x14]
c001d2d0:	50                   	push   eax
c001d2d1:	e8 92 fd ff ff       	call   c001d068 <readRoot(unsigned int*, unsigned int*, char)>
c001d2d6:	5a                   	pop    edx
c001d2d7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d2db:	e8 d0 33 fe ff       	call   c00006b0 <strlen>
c001d2e0:	83 c4 10             	add    esp,0x10
c001d2e3:	83 f8 03             	cmp    eax,0x3
c001d2e6:	77 17                	ja     c001d2ff <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001d2e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d2ec:	89 03                	mov    DWORD PTR [ebx],eax
c001d2ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d2f2:	89 06                	mov    DWORD PTR [esi],eax
c001d2f4:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001d2fb:	b0 01                	mov    al,0x1
c001d2fd:	eb 19                	jmp    c001d318 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001d2ff:	50                   	push   eax
c001d300:	55                   	push   ebp
c001d301:	57                   	push   edi
c001d302:	56                   	push   esi
c001d303:	53                   	push   ebx
c001d304:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d308:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d30c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d310:	e8 a7 fd ff ff       	call   c001d0bc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001d315:	83 c4 20             	add    esp,0x20
c001d318:	83 c4 1c             	add    esp,0x1c
c001d31b:	5b                   	pop    ebx
c001d31c:	5e                   	pop    esi
c001d31d:	5f                   	pop    edi
c001d31e:	5d                   	pop    ebp
c001d31f:	c3                   	ret    

c001d320 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001d320:	57                   	push   edi
c001d321:	56                   	push   esi
c001d322:	53                   	push   ebx
c001d323:	83 ec 10             	sub    esp,0x10
c001d326:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d32a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d32e:	85 ff                	test   edi,edi
c001d330:	0f 84 8b 00 00 00    	je     c001d3c1 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001d336:	85 f6                	test   esi,esi
c001d338:	0f 84 83 00 00 00    	je     c001d3c1 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001d33e:	b8 03 00 00 00       	mov    eax,0x3
c001d343:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001d348:	75 7c                	jne    c001d3c6 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001d34a:	83 ec 0c             	sub    esp,0xc
c001d34d:	6a 1c                	push   0x1c
c001d34f:	e8 93 ca fe ff       	call   c0009de7 <malloc>
c001d354:	89 07                	mov    DWORD PTR [edi],eax
c001d356:	89 c3                	mov    ebx,eax
c001d358:	58                   	pop    eax
c001d359:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d35d:	50                   	push   eax
c001d35e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001d361:	50                   	push   eax
c001d362:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d366:	50                   	push   eax
c001d367:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d36b:	50                   	push   eax
c001d36c:	56                   	push   esi
c001d36d:	e8 20 ff ff ff       	call   c001d292 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001d372:	83 c4 20             	add    esp,0x20
c001d375:	84 c0                	test   al,al
c001d377:	74 07                	je     c001d380 <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c001d379:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d37e:	74 0b                	je     c001d38b <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c001d380:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001d384:	b8 01 00 00 00       	mov    eax,0x1
c001d389:	eb 3b                	jmp    c001d3c6 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001d38b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d38f:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001d393:	89 03                	mov    DWORD PTR [ebx],eax
c001d395:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001d39c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d3a0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001d3a7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d3ae:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001d3b1:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001d3b8:	8a 06                	mov    al,BYTE PTR [esi]
c001d3ba:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001d3bd:	31 c0                	xor    eax,eax
c001d3bf:	eb 05                	jmp    c001d3c6 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001d3c1:	b8 04 00 00 00       	mov    eax,0x4
c001d3c6:	83 c4 10             	add    esp,0x10
c001d3c9:	5b                   	pop    ebx
c001d3ca:	5e                   	pop    esi
c001d3cb:	5f                   	pop    edi
c001d3cc:	c3                   	ret    
c001d3cd:	90                   	nop

c001d3ce <ISO9660::exists(char const*)>:
c001d3ce:	83 ec 28             	sub    esp,0x28
c001d3d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d3d5:	8d 54 24 18          	lea    edx,[esp+0x18]
c001d3d9:	52                   	push   edx
c001d3da:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001d3dd:	52                   	push   edx
c001d3de:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001d3e2:	52                   	push   edx
c001d3e3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001d3e7:	52                   	push   edx
c001d3e8:	50                   	push   eax
c001d3e9:	e8 a4 fe ff ff       	call   c001d292 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001d3ee:	83 c4 3c             	add    esp,0x3c
c001d3f1:	c3                   	ret    

c001d3f2 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001d3f2:	56                   	push   esi
c001d3f3:	53                   	push   ebx
c001d3f4:	83 ec 14             	sub    esp,0x14
c001d3f7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001d3fb:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d3ff:	85 db                	test   ebx,ebx
c001d401:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d405:	0f 94 c2             	sete   dl
c001d408:	85 f6                	test   esi,esi
c001d40a:	0f 94 c0             	sete   al
c001d40d:	08 c2                	or     dl,al
c001d40f:	75 68                	jne    c001d479 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001d411:	85 c9                	test   ecx,ecx
c001d413:	74 64                	je     c001d479 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001d415:	83 ec 0c             	sub    esp,0xc
c001d418:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001d41b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d41f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001d425:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d42c:	50                   	push   eax
c001d42d:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001d430:	50                   	push   eax
c001d431:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d435:	50                   	push   eax
c001d436:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d43a:	50                   	push   eax
c001d43b:	51                   	push   ecx
c001d43c:	e8 51 fe ff ff       	call   c001d292 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001d441:	83 c4 20             	add    esp,0x20
c001d444:	ba 01 00 00 00       	mov    edx,0x1
c001d449:	84 c0                	test   al,al
c001d44b:	74 31                	je     c001d47e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001d44d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d451:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d458:	89 03                	mov    DWORD PTR [ebx],eax
c001d45a:	ba 00 00 00 00       	mov    edx,0x0
c001d45f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d463:	85 c0                	test   eax,eax
c001d465:	0f 95 06             	setne  BYTE PTR [esi]
c001d468:	74 14                	je     c001d47e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001d46a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001d470:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d477:	eb 05                	jmp    c001d47e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001d479:	ba 04 00 00 00       	mov    edx,0x4
c001d47e:	83 c4 14             	add    esp,0x14
c001d481:	89 d0                	mov    eax,edx
c001d483:	5b                   	pop    ebx
c001d484:	5e                   	pop    esi
c001d485:	c3                   	ret    

c001d486 <ISO9660::openDir(char const*, void**)>:
c001d486:	57                   	push   edi
c001d487:	56                   	push   esi
c001d488:	53                   	push   ebx
c001d489:	83 ec 10             	sub    esp,0x10
c001d48c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d490:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d494:	85 ff                	test   edi,edi
c001d496:	74 7b                	je     c001d513 <ISO9660::openDir(char const*, void**)+0x8d>
c001d498:	85 f6                	test   esi,esi
c001d49a:	74 77                	je     c001d513 <ISO9660::openDir(char const*, void**)+0x8d>
c001d49c:	83 ec 0c             	sub    esp,0xc
c001d49f:	6a 1c                	push   0x1c
c001d4a1:	e8 41 c9 fe ff       	call   c0009de7 <malloc>
c001d4a6:	89 07                	mov    DWORD PTR [edi],eax
c001d4a8:	89 c3                	mov    ebx,eax
c001d4aa:	58                   	pop    eax
c001d4ab:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d4af:	50                   	push   eax
c001d4b0:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001d4b3:	50                   	push   eax
c001d4b4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d4b8:	50                   	push   eax
c001d4b9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d4bd:	50                   	push   eax
c001d4be:	56                   	push   esi
c001d4bf:	e8 ce fd ff ff       	call   c001d292 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001d4c4:	83 c4 20             	add    esp,0x20
c001d4c7:	84 c0                	test   al,al
c001d4c9:	74 07                	je     c001d4d2 <ISO9660::openDir(char const*, void**)+0x4c>
c001d4cb:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d4d0:	75 0b                	jne    c001d4dd <ISO9660::openDir(char const*, void**)+0x57>
c001d4d2:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001d4d6:	b8 01 00 00 00       	mov    eax,0x1
c001d4db:	eb 3b                	jmp    c001d518 <ISO9660::openDir(char const*, void**)+0x92>
c001d4dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d4e1:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001d4e5:	89 03                	mov    DWORD PTR [ebx],eax
c001d4e7:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001d4ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d4f2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001d4f9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d500:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001d503:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001d50a:	8a 06                	mov    al,BYTE PTR [esi]
c001d50c:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001d50f:	31 c0                	xor    eax,eax
c001d511:	eb 05                	jmp    c001d518 <ISO9660::openDir(char const*, void**)+0x92>
c001d513:	b8 04 00 00 00       	mov    eax,0x4
c001d518:	83 c4 10             	add    esp,0x10
c001d51b:	5b                   	pop    ebx
c001d51c:	5e                   	pop    esi
c001d51d:	5f                   	pop    edi
c001d51e:	c3                   	ret    
c001d51f:	90                   	nop

c001d520 <ISO9660::ISO9660()>:
c001d520:	83 ec 0c             	sub    esp,0xc
c001d523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d527:	83 ec 0c             	sub    esp,0xc
c001d52a:	50                   	push   eax
c001d52b:	e8 fe fe fe ff       	call   c000d42e <Filesystem::Filesystem()>
c001d530:	83 c4 10             	add    esp,0x10
c001d533:	ba a0 70 02 c0       	mov    edx,0xc00270a0
c001d538:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d53c:	89 10                	mov    DWORD PTR [eax],edx
c001d53e:	90                   	nop
c001d53f:	83 c4 0c             	add    esp,0xc
c001d542:	c3                   	ret    
c001d543:	90                   	nop

c001d544 <SoundCard::beginPlayback()>:
c001d544:	c7 44 24 04 00 71 02 c0 	mov    DWORD PTR [esp+0x4],0xc0027100
c001d54c:	e9 a8 7c ff ff       	jmp    c00151f9 <Krnl::panic(char const*)>
c001d551:	90                   	nop

c001d552 <SoundCard::stopPlayback()>:
c001d552:	c7 44 24 04 34 71 02 c0 	mov    DWORD PTR [esp+0x4],0xc0027134
c001d55a:	e9 9a 7c ff ff       	jmp    c00151f9 <Krnl::panic(char const*)>
c001d55f:	90                   	nop

c001d560 <SoundCard::SoundCard(char const*)>:
c001d560:	83 ec 1c             	sub    esp,0x1c
c001d563:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d567:	83 ec 08             	sub    esp,0x8
c001d56a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d56e:	50                   	push   eax
c001d56f:	e8 1a 13 ff ff       	call   c000e88e <Device::Device(char const*)>
c001d574:	83 c4 10             	add    esp,0x10
c001d577:	ba cc 71 02 c0       	mov    edx,0xc00271cc
c001d57c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d580:	89 10                	mov    DWORD PTR [eax],edx
c001d582:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d586:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001d58d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d591:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001d59b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d59f:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001d5a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5ad:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001d5b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5bb:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001d5c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d5cd:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001d5d2:	7f 19                	jg     c001d5ed <SoundCard::SoundCard(char const*)+0x8d>
c001d5d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5d8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d5dc:	83 c2 54             	add    edx,0x54
c001d5df:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001d5e7:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001d5eb:	eb e0                	jmp    c001d5cd <SoundCard::SoundCard(char const*)+0x6d>
c001d5ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5f1:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001d5f8:	90                   	nop
c001d5f9:	83 c4 1c             	add    esp,0x1c
c001d5fc:	c3                   	ret    
c001d5fd:	90                   	nop

c001d5fe <SoundCard::~SoundCard()>:
c001d5fe:	83 ec 0c             	sub    esp,0xc
c001d601:	ba cc 71 02 c0       	mov    edx,0xc00271cc
c001d606:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d60a:	89 10                	mov    DWORD PTR [eax],edx
c001d60c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d610:	83 ec 0c             	sub    esp,0xc
c001d613:	50                   	push   eax
c001d614:	e8 3f 0f ff ff       	call   c000e558 <Device::~Device()>
c001d619:	83 c4 10             	add    esp,0x10
c001d61c:	90                   	nop
c001d61d:	83 c4 0c             	add    esp,0xc
c001d620:	c3                   	ret    
c001d621:	90                   	nop

c001d622 <SoundCard::~SoundCard()>:
c001d622:	83 ec 0c             	sub    esp,0xc
c001d625:	83 ec 0c             	sub    esp,0xc
c001d628:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d62c:	e8 cd ff ff ff       	call   c001d5fe <SoundCard::~SoundCard()>
c001d631:	83 c4 10             	add    esp,0x10
c001d634:	83 ec 08             	sub    esp,0x8
c001d637:	68 e8 01 00 00       	push   0x1e8
c001d63c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d640:	e8 f1 f9 fe ff       	call   c000d036 <operator delete(void*, unsigned long)>
c001d645:	83 c4 10             	add    esp,0x10
c001d648:	83 c4 0c             	add    esp,0xc
c001d64b:	c3                   	ret    

c001d64c <SoundCard::configureRates(int, int, int)>:
c001d64c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d650:	31 c0                	xor    eax,eax
c001d652:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001d659:	75 20                	jne    c001d67b <SoundCard::configureRates(int, int, int)+0x2f>
c001d65b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d65f:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001d665:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d669:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001d66f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d673:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001d679:	b0 01                	mov    al,0x1
c001d67b:	c3                   	ret    

c001d67c <SoundCard::getSamples16(int, short*)>:
c001d67c:	55                   	push   ebp
c001d67d:	57                   	push   edi
c001d67e:	31 ff                	xor    edi,edi
c001d680:	56                   	push   esi
c001d681:	53                   	push   ebx
c001d682:	31 db                	xor    ebx,ebx
c001d684:	83 ec 18             	sub    esp,0x18
c001d687:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d68b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d68f:	68 67 71 02 c0       	push   0xc0027167
c001d694:	e8 7e fa fe ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c001d699:	83 c4 0c             	add    esp,0xc
c001d69c:	8d 04 36             	lea    eax,[esi+esi*1]
c001d69f:	50                   	push   eax
c001d6a0:	6a 00                	push   0x0
c001d6a2:	55                   	push   ebp
c001d6a3:	e8 ec 2f fe ff       	call   c0000694 <memset>
c001d6a8:	83 c4 10             	add    esp,0x10
c001d6ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d6af:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001d6b6:	85 c0                	test   eax,eax
c001d6b8:	74 1b                	je     c001d6d5 <SoundCard::getSamples16(int, short*)+0x59>
c001d6ba:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001d6be:	75 15                	jne    c001d6d5 <SoundCard::getSamples16(int, short*)+0x59>
c001d6c0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d6c4:	55                   	push   ebp
c001d6c5:	56                   	push   esi
c001d6c6:	50                   	push   eax
c001d6c7:	e8 58 03 00 00       	call   c001da24 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001d6cc:	83 c4 10             	add    esp,0x10
c001d6cf:	39 c7                	cmp    edi,eax
c001d6d1:	7d 02                	jge    c001d6d5 <SoundCard::getSamples16(int, short*)+0x59>
c001d6d3:	89 c7                	mov    edi,eax
c001d6d5:	43                   	inc    ebx
c001d6d6:	83 fb 20             	cmp    ebx,0x20
c001d6d9:	75 d0                	jne    c001d6ab <SoundCard::getSamples16(int, short*)+0x2f>
c001d6db:	83 c4 0c             	add    esp,0xc
c001d6de:	89 f8                	mov    eax,edi
c001d6e0:	5b                   	pop    ebx
c001d6e1:	5e                   	pop    esi
c001d6e2:	5f                   	pop    edi
c001d6e3:	5d                   	pop    ebp
c001d6e4:	c3                   	ret    
c001d6e5:	90                   	nop

c001d6e6 <SoundCard::getSamples32(int, int*)>:
c001d6e6:	55                   	push   ebp
c001d6e7:	57                   	push   edi
c001d6e8:	31 ff                	xor    edi,edi
c001d6ea:	56                   	push   esi
c001d6eb:	31 f6                	xor    esi,esi
c001d6ed:	53                   	push   ebx
c001d6ee:	83 ec 10             	sub    esp,0x10
c001d6f1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d6f5:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d6f9:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001d6fd:	c1 e0 02             	shl    eax,0x2
c001d700:	50                   	push   eax
c001d701:	6a 00                	push   0x0
c001d703:	55                   	push   ebp
c001d704:	e8 8b 2f fe ff       	call   c0000694 <memset>
c001d709:	83 c4 10             	add    esp,0x10
c001d70c:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001d713:	85 c0                	test   eax,eax
c001d715:	74 1b                	je     c001d732 <SoundCard::getSamples32(int, int*)+0x4c>
c001d717:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001d71b:	75 15                	jne    c001d732 <SoundCard::getSamples32(int, int*)+0x4c>
c001d71d:	53                   	push   ebx
c001d71e:	55                   	push   ebp
c001d71f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d723:	50                   	push   eax
c001d724:	e8 f7 03 00 00       	call   c001db20 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001d729:	83 c4 10             	add    esp,0x10
c001d72c:	39 c6                	cmp    esi,eax
c001d72e:	7d 02                	jge    c001d732 <SoundCard::getSamples32(int, int*)+0x4c>
c001d730:	89 c6                	mov    esi,eax
c001d732:	47                   	inc    edi
c001d733:	83 ff 20             	cmp    edi,0x20
c001d736:	75 d4                	jne    c001d70c <SoundCard::getSamples32(int, int*)+0x26>
c001d738:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c001d73e:	85 f6                	test   esi,esi
c001d740:	75 0f                	jne    c001d751 <SoundCard::getSamples32(int, int*)+0x6b>
c001d742:	84 c0                	test   al,al
c001d744:	74 1b                	je     c001d761 <SoundCard::getSamples32(int, int*)+0x7b>
c001d746:	83 ec 0c             	sub    esp,0xc
c001d749:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d74b:	53                   	push   ebx
c001d74c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001d74f:	eb 0d                	jmp    c001d75e <SoundCard::getSamples32(int, int*)+0x78>
c001d751:	84 c0                	test   al,al
c001d753:	75 0c                	jne    c001d761 <SoundCard::getSamples32(int, int*)+0x7b>
c001d755:	83 ec 0c             	sub    esp,0xc
c001d758:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d75a:	53                   	push   ebx
c001d75b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d75e:	83 c4 10             	add    esp,0x10
c001d761:	83 c4 0c             	add    esp,0xc
c001d764:	89 f0                	mov    eax,esi
c001d766:	5b                   	pop    ebx
c001d767:	5e                   	pop    esi
c001d768:	5f                   	pop    edi
c001d769:	5d                   	pop    ebp
c001d76a:	c3                   	ret    
c001d76b:	90                   	nop

c001d76c <SoundCard::addChannel(SoundPort*)>:
c001d76c:	56                   	push   esi
c001d76d:	53                   	push   ebx
c001d76e:	53                   	push   ebx
c001d76f:	31 db                	xor    ebx,ebx
c001d771:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d775:	83 bc 9e 58 01 00 00 00 	cmp    DWORD PTR [esi+ebx*4+0x158],0x0
c001d77d:	74 27                	je     c001d7a6 <SoundCard::addChannel(SoundPort*)+0x3a>
c001d77f:	43                   	inc    ebx
c001d780:	83 fb 20             	cmp    ebx,0x20
c001d783:	75 f0                	jne    c001d775 <SoundCard::addChannel(SoundPort*)+0x9>
c001d785:	83 ec 0c             	sub    esp,0xc
c001d788:	83 cb ff             	or     ebx,0xffffffff
c001d78b:	68 8d 71 02 c0       	push   0xc002718d
c001d790:	e8 82 f9 fe ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c001d795:	c7 04 24 86 71 02 c0 	mov    DWORD PTR [esp],0xc0027186
c001d79c:	e8 58 7a ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c001d7a1:	83 c4 10             	add    esp,0x10
c001d7a4:	eb 1b                	jmp    c001d7c1 <SoundCard::addChannel(SoundPort*)+0x55>
c001d7a6:	51                   	push   ecx
c001d7a7:	51                   	push   ecx
c001d7a8:	53                   	push   ebx
c001d7a9:	68 a5 71 02 c0       	push   0xc00271a5
c001d7ae:	e8 64 f9 fe ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c001d7b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d7b7:	83 c4 10             	add    esp,0x10
c001d7ba:	89 84 9e 58 01 00 00 	mov    DWORD PTR [esi+ebx*4+0x158],eax
c001d7c1:	89 d8                	mov    eax,ebx
c001d7c3:	5a                   	pop    edx
c001d7c4:	5b                   	pop    ebx
c001d7c5:	5e                   	pop    esi
c001d7c6:	c3                   	ret    
c001d7c7:	90                   	nop

c001d7c8 <SoundCard::removeChannel(int)>:
c001d7c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d7cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d7d0:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001d7db:	c3                   	ret    

c001d7dc <SoundPort::SoundPort(int, int, int, int)>:
c001d7dc:	83 ec 0c             	sub    esp,0xc
c001d7df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7e3:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d7ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7ee:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001d7f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7f6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d7fa:	89 10                	mov    DWORD PTR [eax],edx
c001d7fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d800:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d804:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001d807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d80b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d80f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d812:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001d817:	75 13                	jne    c001d82c <SoundPort::SoundPort(int, int, int, int)+0x50>
c001d819:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d81d:	8b 00                	mov    eax,DWORD PTR [eax]
c001d81f:	05 a0 0f 00 00       	add    eax,0xfa0
c001d824:	01 c0                	add    eax,eax
c001d826:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d82a:	66 90                	xchg   ax,ax
c001d82c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d830:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d834:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001d837:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d83b:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001d842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d846:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d849:	c1 e0 02             	shl    eax,0x2
c001d84c:	83 ec 0c             	sub    esp,0xc
c001d84f:	50                   	push   eax
c001d850:	e8 92 c5 fe ff       	call   c0009de7 <malloc>
c001d855:	83 c4 10             	add    esp,0x10
c001d858:	89 c2                	mov    edx,eax
c001d85a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d85e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d861:	90                   	nop
c001d862:	83 c4 0c             	add    esp,0xc
c001d865:	c3                   	ret    
c001d866:	66 90                	xchg   ax,ax

c001d868 <SoundPort::~SoundPort()>:
c001d868:	83 ec 0c             	sub    esp,0xc
c001d86b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d86f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d872:	85 c0                	test   eax,eax
c001d874:	74 1e                	je     c001d894 <SoundPort::~SoundPort()+0x2c>
c001d876:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d87a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d87d:	83 ec 0c             	sub    esp,0xc
c001d880:	50                   	push   eax
c001d881:	e8 71 c5 fe ff       	call   c0009df7 <free>
c001d886:	83 c4 10             	add    esp,0x10
c001d889:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d88d:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d894:	90                   	nop
c001d895:	83 c4 0c             	add    esp,0xc
c001d898:	c3                   	ret    
c001d899:	90                   	nop
c001d89a:	66 90                	xchg   ax,ax

c001d89c <SoundPort::unpause()>:
c001d89c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d8a0:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001d8a4:	c3                   	ret    
c001d8a5:	90                   	nop
c001d8a6:	66 90                	xchg   ax,ax

c001d8a8 <SoundPort::pause()>:
c001d8a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d8ac:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001d8b0:	c3                   	ret    
c001d8b1:	90                   	nop
c001d8b2:	66 90                	xchg   ax,ax

c001d8b4 <SoundPort::getBufferUsed()>:
c001d8b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d8b8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001d8bb:	c3                   	ret    

c001d8bc <SoundPort::getBufferSize()>:
c001d8bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d8c0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d8c3:	c3                   	ret    

c001d8c4 <SoundPort::buffer16(short*, int)>:
c001d8c4:	55                   	push   ebp
c001d8c5:	57                   	push   edi
c001d8c6:	56                   	push   esi
c001d8c7:	53                   	push   ebx
c001d8c8:	83 ec 1c             	sub    esp,0x1c
c001d8cb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d8cf:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d8d3:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001d8d6:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001d8d9:	0f 84 85 00 00 00    	je     c001d964 <SoundPort::buffer16(short*, int)+0xa0>
c001d8df:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001d8e3:	85 c9                	test   ecx,ecx
c001d8e5:	7e 7d                	jle    c001d964 <SoundPort::buffer16(short*, int)+0xa0>
c001d8e7:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001d8eb:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d8ee:	c1 e1 0f             	shl    ecx,0xf
c001d8f1:	8d 70 01             	lea    esi,[eax+0x1]
c001d8f4:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001d8f7:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001d8fa:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d8fd:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d900:	74 6e                	je     c001d970 <SoundPort::buffer16(short*, int)+0xac>
c001d902:	31 f6                	xor    esi,esi
c001d904:	eb 22                	jmp    c001d928 <SoundPort::buffer16(short*, int)+0x64>
c001d906:	66 90                	xchg   ax,ax
c001d908:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001d90d:	8d 79 01             	lea    edi,[ecx+0x1]
c001d910:	c1 e3 0f             	shl    ebx,0xf
c001d913:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001d916:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001d919:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001d91c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d91f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d922:	74 1c                	je     c001d940 <SoundPort::buffer16(short*, int)+0x7c>
c001d924:	89 c6                	mov    esi,eax
c001d926:	66 90                	xchg   ax,ax
c001d928:	8d 46 01             	lea    eax,[esi+0x1]
c001d92b:	39 44 24 38          	cmp    DWORD PTR [esp+0x38],eax
c001d92f:	75 d7                	jne    c001d908 <SoundPort::buffer16(short*, int)+0x44>
c001d931:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d935:	83 c4 1c             	add    esp,0x1c
c001d938:	5b                   	pop    ebx
c001d939:	5e                   	pop    esi
c001d93a:	5f                   	pop    edi
c001d93b:	5d                   	pop    ebp
c001d93c:	c3                   	ret    
c001d93d:	8d 76 00             	lea    esi,[esi+0x0]
c001d940:	8d 46 02             	lea    eax,[esi+0x2]
c001d943:	90                   	nop
c001d944:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d948:	83 ec 0c             	sub    esp,0xc
c001d94b:	68 f8 71 02 c0       	push   0xc00271f8
c001d950:	e8 c2 f7 fe ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c001d955:	83 c4 10             	add    esp,0x10
c001d958:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d95c:	83 c4 1c             	add    esp,0x1c
c001d95f:	5b                   	pop    ebx
c001d960:	5e                   	pop    esi
c001d961:	5f                   	pop    edi
c001d962:	5d                   	pop    ebp
c001d963:	c3                   	ret    
c001d964:	83 c4 1c             	add    esp,0x1c
c001d967:	31 c0                	xor    eax,eax
c001d969:	5b                   	pop    ebx
c001d96a:	5e                   	pop    esi
c001d96b:	5f                   	pop    edi
c001d96c:	5d                   	pop    ebp
c001d96d:	c3                   	ret    
c001d96e:	66 90                	xchg   ax,ax
c001d970:	b8 01 00 00 00       	mov    eax,0x1
c001d975:	eb cd                	jmp    c001d944 <SoundPort::buffer16(short*, int)+0x80>
c001d977:	90                   	nop

c001d978 <SoundPort::buffer32(int*, int)>:
c001d978:	55                   	push   ebp
c001d979:	57                   	push   edi
c001d97a:	56                   	push   esi
c001d97b:	53                   	push   ebx
c001d97c:	83 ec 1c             	sub    esp,0x1c
c001d97f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d983:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d987:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d98a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d98e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d992:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d995:	74 79                	je     c001da10 <SoundPort::buffer32(int*, int)+0x98>
c001d997:	85 c0                	test   eax,eax
c001d999:	7e 75                	jle    c001da10 <SoundPort::buffer32(int*, int)+0x98>
c001d99b:	8d 71 01             	lea    esi,[ecx+0x1]
c001d99e:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d9a1:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001d9a4:	8b 37                	mov    esi,DWORD PTR [edi]
c001d9a6:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001d9a9:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d9ac:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d9af:	74 6b                	je     c001da1c <SoundPort::buffer32(int*, int)+0xa4>
c001d9b1:	31 f6                	xor    esi,esi
c001d9b3:	eb 1f                	jmp    c001d9d4 <SoundPort::buffer32(int*, int)+0x5c>
c001d9b5:	8d 76 00             	lea    esi,[esi+0x0]
c001d9b8:	8d 69 01             	lea    ebp,[ecx+0x1]
c001d9bb:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001d9be:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001d9c1:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d9c4:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001d9c8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d9cb:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d9ce:	74 1c                	je     c001d9ec <SoundPort::buffer32(int*, int)+0x74>
c001d9d0:	89 de                	mov    esi,ebx
c001d9d2:	66 90                	xchg   ax,ax
c001d9d4:	8d 5e 01             	lea    ebx,[esi+0x1]
c001d9d7:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001d9db:	75 db                	jne    c001d9b8 <SoundPort::buffer32(int*, int)+0x40>
c001d9dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d9e1:	83 c4 1c             	add    esp,0x1c
c001d9e4:	5b                   	pop    ebx
c001d9e5:	5e                   	pop    esi
c001d9e6:	5f                   	pop    edi
c001d9e7:	5d                   	pop    ebp
c001d9e8:	c3                   	ret    
c001d9e9:	8d 76 00             	lea    esi,[esi+0x0]
c001d9ec:	8d 46 02             	lea    eax,[esi+0x2]
c001d9ef:	90                   	nop
c001d9f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d9f4:	83 ec 0c             	sub    esp,0xc
c001d9f7:	68 13 72 02 c0       	push   0xc0027213
c001d9fc:	e8 16 f7 fe ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c001da01:	83 c4 10             	add    esp,0x10
c001da04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001da08:	83 c4 1c             	add    esp,0x1c
c001da0b:	5b                   	pop    ebx
c001da0c:	5e                   	pop    esi
c001da0d:	5f                   	pop    edi
c001da0e:	5d                   	pop    ebp
c001da0f:	c3                   	ret    
c001da10:	83 c4 1c             	add    esp,0x1c
c001da13:	31 c0                	xor    eax,eax
c001da15:	5b                   	pop    ebx
c001da16:	5e                   	pop    esi
c001da17:	5f                   	pop    edi
c001da18:	5d                   	pop    ebp
c001da19:	c3                   	ret    
c001da1a:	66 90                	xchg   ax,ax
c001da1c:	b8 01 00 00 00       	mov    eax,0x1
c001da21:	eb cd                	jmp    c001d9f0 <SoundPort::buffer32(int*, int)+0x78>
c001da23:	90                   	nop

c001da24 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001da24:	57                   	push   edi
c001da25:	56                   	push   esi
c001da26:	53                   	push   ebx
c001da27:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001da2b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001da2f:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001da35:	39 03                	cmp    DWORD PTR [ebx],eax
c001da37:	74 13                	je     c001da4c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001da39:	83 ec 0c             	sub    esp,0xc
c001da3c:	68 68 72 02 c0       	push   0xc0027268
c001da41:	e8 b3 77 ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c001da46:	83 c4 10             	add    esp,0x10
c001da49:	8d 76 00             	lea    esi,[esi+0x0]
c001da4c:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001da52:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001da55:	74 11                	je     c001da68 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001da57:	83 ec 0c             	sub    esp,0xc
c001da5a:	68 2e 72 02 c0       	push   0xc002722e
c001da5f:	e8 95 77 ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c001da64:	83 c4 10             	add    esp,0x10
c001da67:	90                   	nop
c001da68:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001da6e:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001da71:	74 11                	je     c001da84 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001da73:	83 ec 0c             	sub    esp,0xc
c001da76:	68 2e 72 02 c0       	push   0xc002722e
c001da7b:	e8 79 77 ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c001da80:	83 c4 10             	add    esp,0x10
c001da83:	90                   	nop
c001da84:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001da87:	89 c6                	mov    esi,eax
c001da89:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c001da8d:	7e 05                	jle    c001da94 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001da8f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001da93:	90                   	nop
c001da94:	85 f6                	test   esi,esi
c001da96:	7e 30                	jle    c001dac8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001da98:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001da9c:	8d 3c 36             	lea    edi,[esi+esi*1]
c001da9f:	31 c9                	xor    ecx,ecx
c001daa1:	01 d7                	add    edi,edx
c001daa3:	90                   	nop
c001daa4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001daa7:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001daaa:	85 c0                	test   eax,eax
c001daac:	79 06                	jns    c001dab4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001daae:	05 ff 7f 00 00       	add    eax,0x7fff
c001dab3:	90                   	nop
c001dab4:	c1 f8 0f             	sar    eax,0xf
c001dab7:	83 c1 04             	add    ecx,0x4
c001daba:	66 01 02             	add    WORD PTR [edx],ax
c001dabd:	83 c2 02             	add    edx,0x2
c001dac0:	39 d7                	cmp    edi,edx
c001dac2:	75 e0                	jne    c001daa4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001dac4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001dac7:	90                   	nop
c001dac8:	56                   	push   esi
c001dac9:	89 c2                	mov    edx,eax
c001dacb:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
c001dad2:	29 f2                	sub    edx,esi
c001dad4:	52                   	push   edx
c001dad5:	50                   	push   eax
c001dad6:	68 88 72 02 c0       	push   0xc0027288
c001dadb:	e8 37 f6 fe ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c001dae0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001dae3:	50                   	push   eax
c001dae4:	01 f8                	add    eax,edi
c001dae6:	50                   	push   eax
c001dae7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001daea:	29 f0                	sub    eax,esi
c001daec:	c1 e0 02             	shl    eax,0x2
c001daef:	50                   	push   eax
c001daf0:	68 b8 72 02 c0       	push   0xc00272b8
c001daf5:	e8 1d f6 fe ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c001dafa:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001dafd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001db00:	83 c4 1c             	add    esp,0x1c
c001db03:	01 d7                	add    edi,edx
c001db05:	29 f0                	sub    eax,esi
c001db07:	c1 e0 02             	shl    eax,0x2
c001db0a:	50                   	push   eax
c001db0b:	57                   	push   edi
c001db0c:	52                   	push   edx
c001db0d:	e8 ba 2a fe ff       	call   c00005cc <memmove>
c001db12:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001db15:	83 c4 10             	add    esp,0x10
c001db18:	89 f0                	mov    eax,esi
c001db1a:	5b                   	pop    ebx
c001db1b:	5e                   	pop    esi
c001db1c:	5f                   	pop    edi
c001db1d:	c3                   	ret    
c001db1e:	66 90                	xchg   ax,ax

c001db20 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001db20:	57                   	push   edi
c001db21:	56                   	push   esi
c001db22:	53                   	push   ebx
c001db23:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001db27:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001db2b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001db2f:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001db35:	39 06                	cmp    DWORD PTR [esi],eax
c001db37:	74 13                	je     c001db4c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001db39:	83 ec 0c             	sub    esp,0xc
c001db3c:	68 dc 72 02 c0       	push   0xc00272dc
c001db41:	e8 b3 76 ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c001db46:	83 c4 10             	add    esp,0x10
c001db49:	8d 76 00             	lea    esi,[esi+0x0]
c001db4c:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001db52:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001db55:	74 11                	je     c001db68 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001db57:	83 ec 0c             	sub    esp,0xc
c001db5a:	68 4a 72 02 c0       	push   0xc002724a
c001db5f:	e8 95 76 ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c001db64:	83 c4 10             	add    esp,0x10
c001db67:	90                   	nop
c001db68:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001db6e:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001db71:	74 11                	je     c001db84 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001db73:	83 ec 0c             	sub    esp,0xc
c001db76:	68 4a 72 02 c0       	push   0xc002724a
c001db7b:	e8 79 76 ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c001db80:	83 c4 10             	add    esp,0x10
c001db83:	90                   	nop
c001db84:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001db87:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001db8b:	7e 07                	jle    c001db94 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001db8d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001db91:	8d 76 00             	lea    esi,[esi+0x0]
c001db94:	85 ff                	test   edi,edi
c001db96:	7e 1c                	jle    c001dbb4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001db98:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001db9f:	31 c0                	xor    eax,eax
c001dba1:	8d 76 00             	lea    esi,[esi+0x0]
c001dba4:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001dba7:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001dbaa:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001dbad:	83 c0 04             	add    eax,0x4
c001dbb0:	39 c1                	cmp    ecx,eax
c001dbb2:	75 f0                	jne    c001dba4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001dbb4:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001dbb7:	50                   	push   eax
c001dbb8:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001dbbb:	29 f8                	sub    eax,edi
c001dbbd:	c1 e0 02             	shl    eax,0x2
c001dbc0:	50                   	push   eax
c001dbc1:	8d 04 ba             	lea    eax,[edx+edi*4]
c001dbc4:	50                   	push   eax
c001dbc5:	52                   	push   edx
c001dbc6:	e8 01 2a fe ff       	call   c00005cc <memmove>
c001dbcb:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001dbce:	83 c4 10             	add    esp,0x10
c001dbd1:	89 f8                	mov    eax,edi
c001dbd3:	5b                   	pop    ebx
c001dbd4:	5e                   	pop    esi
c001dbd5:	5f                   	pop    edi
c001dbd6:	c3                   	ret    
c001dbd7:	90                   	nop

c001dbd8 <PCI::open(int, int, void*)>:
c001dbd8:	83 ec 18             	sub    esp,0x18
c001dbdb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dbdf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dbe3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001dbe9:	8b 10                	mov    edx,DWORD PTR [eax]
c001dbeb:	50                   	push   eax
c001dbec:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001dbef:	31 c0                	xor    eax,eax
c001dbf1:	83 c4 1c             	add    esp,0x1c
c001dbf4:	c3                   	ret    
c001dbf5:	90                   	nop

c001dbf6 <PCI::close(int, int, void*)>:
c001dbf6:	31 c0                	xor    eax,eax
c001dbf8:	c3                   	ret    
c001dbf9:	90                   	nop

c001dbfa <PCI::PCI()>:
c001dbfa:	83 ec 0c             	sub    esp,0xc
c001dbfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc01:	83 ec 08             	sub    esp,0x8
c001dc04:	68 fb 72 02 c0       	push   0xc00272fb
c001dc09:	50                   	push   eax
c001dc0a:	e8 e1 02 ff ff       	call   c000def0 <Bus::Bus(char const*)>
c001dc0f:	83 c4 10             	add    esp,0x10
c001dc12:	ba d0 74 02 c0       	mov    edx,0xc00274d0
c001dc17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc1b:	89 10                	mov    DWORD PTR [eax],edx
c001dc1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc21:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001dc2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc2f:	a3 40 ab 02 c0       	mov    ds:0xc002ab40,eax
c001dc34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc38:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dc3e:	0f b6 d0             	movzx  edx,al
c001dc41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc45:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001dc4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc50:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dc56:	0f b6 d0             	movzx  edx,al
c001dc59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc5d:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001dc62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc66:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dc6c:	8d 50 01             	lea    edx,[eax+0x1]
c001dc6f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dc73:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001dc79:	0f b6 d0             	movzx  edx,al
c001dc7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc80:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001dc84:	83 c9 c0             	or     ecx,0xffffffc0
c001dc87:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001dc8b:	90                   	nop
c001dc8c:	83 c4 0c             	add    esp,0xc
c001dc8f:	c3                   	ret    

c001dc90 <PCI::readBAR8(unsigned int, int)>:
c001dc90:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dc94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dc98:	f6 c2 01             	test   dl,0x1
c001dc9b:	74 07                	je     c001dca4 <PCI::readBAR8(unsigned int, int)+0x14>
c001dc9d:	83 e2 fc             	and    edx,0xfffffffc
c001dca0:	01 c2                	add    edx,eax
c001dca2:	ec                   	in     al,dx
c001dca3:	c3                   	ret    
c001dca4:	83 e2 f0             	and    edx,0xfffffff0
c001dca7:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001dcaa:	c3                   	ret    
c001dcab:	90                   	nop

c001dcac <PCI::readBAR16(unsigned int, int)>:
c001dcac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dcb0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dcb4:	f6 c2 01             	test   dl,0x1
c001dcb7:	74 08                	je     c001dcc1 <PCI::readBAR16(unsigned int, int)+0x15>
c001dcb9:	83 e2 fc             	and    edx,0xfffffffc
c001dcbc:	01 c2                	add    edx,eax
c001dcbe:	66 ed                	in     ax,dx
c001dcc0:	c3                   	ret    
c001dcc1:	83 e2 f0             	and    edx,0xfffffff0
c001dcc4:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001dcc8:	c3                   	ret    
c001dcc9:	90                   	nop

c001dcca <PCI::readBAR32(unsigned int, int)>:
c001dcca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dcce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dcd2:	f6 c2 01             	test   dl,0x1
c001dcd5:	74 07                	je     c001dcde <PCI::readBAR32(unsigned int, int)+0x14>
c001dcd7:	83 e2 fc             	and    edx,0xfffffffc
c001dcda:	01 c2                	add    edx,eax
c001dcdc:	ed                   	in     eax,dx
c001dcdd:	c3                   	ret    
c001dcde:	83 e2 f0             	and    edx,0xfffffff0
c001dce1:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001dce4:	c3                   	ret    
c001dce5:	90                   	nop

c001dce6 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001dce6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dcea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dcee:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dcf2:	f6 c2 01             	test   dl,0x1
c001dcf5:	74 07                	je     c001dcfe <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001dcf7:	83 e2 fc             	and    edx,0xfffffffc
c001dcfa:	01 ca                	add    edx,ecx
c001dcfc:	ee                   	out    dx,al
c001dcfd:	c3                   	ret    
c001dcfe:	83 e2 f0             	and    edx,0xfffffff0
c001dd01:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001dd04:	c3                   	ret    
c001dd05:	90                   	nop

c001dd06 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001dd06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dd0a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dd0e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dd12:	f6 c2 01             	test   dl,0x1
c001dd15:	74 08                	je     c001dd1f <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001dd17:	83 e2 fc             	and    edx,0xfffffffc
c001dd1a:	01 ca                	add    edx,ecx
c001dd1c:	66 ef                	out    dx,ax
c001dd1e:	c3                   	ret    
c001dd1f:	83 e2 f0             	and    edx,0xfffffff0
c001dd22:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001dd26:	c3                   	ret    
c001dd27:	90                   	nop

c001dd28 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001dd28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dd2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dd30:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dd34:	f6 c2 01             	test   dl,0x1
c001dd37:	74 07                	je     c001dd40 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001dd39:	83 e2 fc             	and    edx,0xfffffffc
c001dd3c:	01 ca                	add    edx,ecx
c001dd3e:	ef                   	out    dx,eax
c001dd3f:	c3                   	ret    
c001dd40:	83 e2 f0             	and    edx,0xfffffff0
c001dd43:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001dd46:	c3                   	ret    
c001dd47:	90                   	nop

c001dd48 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001dd48:	55                   	push   ebp
c001dd49:	57                   	push   edi
c001dd4a:	56                   	push   esi
c001dd4b:	53                   	push   ebx
c001dd4c:	83 ec 0c             	sub    esp,0xc
c001dd4f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001dd53:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001dd57:	89 f0                	mov    eax,esi
c001dd59:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001dd5d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001dd61:	3c 07                	cmp    al,0x7
c001dd63:	76 10                	jbe    c001dd75 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001dd65:	83 ec 0c             	sub    esp,0xc
c001dd68:	68 03 73 02 c0       	push   0xc0027303
c001dd6d:	e8 87 74 ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c001dd72:	83 c4 10             	add    esp,0x10
c001dd75:	80 fb 0f             	cmp    bl,0xf
c001dd78:	76 10                	jbe    c001dd8a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001dd7a:	83 ec 0c             	sub    esp,0xc
c001dd7d:	68 33 73 02 c0       	push   0xc0027333
c001dd82:	e8 72 74 ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c001dd87:	83 c4 10             	add    esp,0x10
c001dd8a:	8d 04 36             	lea    eax,[esi+esi*1]
c001dd8d:	ba f8 0c 00 00       	mov    edx,0xcf8
c001dd92:	83 c8 f0             	or     eax,0xfffffff0
c001dd95:	ee                   	out    dx,al
c001dd96:	ba fa 0c 00 00       	mov    edx,0xcfa
c001dd9b:	89 e8                	mov    eax,ebp
c001dd9d:	ee                   	out    dx,al
c001dd9e:	83 c4 0c             	add    esp,0xc
c001dda1:	89 d8                	mov    eax,ebx
c001dda3:	66 81 e7 fc 00       	and    di,0xfc
c001dda8:	5b                   	pop    ebx
c001dda9:	c1 e0 08             	shl    eax,0x8
c001ddac:	5e                   	pop    esi
c001ddad:	09 f8                	or     eax,edi
c001ddaf:	5f                   	pop    edi
c001ddb0:	66 0d 00 c0          	or     ax,0xc000
c001ddb4:	5d                   	pop    ebp
c001ddb5:	c3                   	ret    

c001ddb6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ddb6:	57                   	push   edi
c001ddb7:	56                   	push   esi
c001ddb8:	53                   	push   ebx
c001ddb9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ddbd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ddc1:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001ddc7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ddcb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ddcf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ddd3:	83 ff 01             	cmp    edi,0x1
c001ddd6:	75 3e                	jne    c001de16 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c001ddd8:	89 de                	mov    esi,ebx
c001ddda:	0f b6 c0             	movzx  eax,al
c001dddd:	81 e6 fc 00 00 00    	and    esi,0xfc
c001dde3:	c1 e0 10             	shl    eax,0x10
c001dde6:	0f b6 c9             	movzx  ecx,cl
c001dde9:	09 f0                	or     eax,esi
c001ddeb:	c1 e1 08             	shl    ecx,0x8
c001ddee:	0f b6 d2             	movzx  edx,dl
c001ddf1:	09 c8                	or     eax,ecx
c001ddf3:	c1 e2 0b             	shl    edx,0xb
c001ddf6:	09 d0                	or     eax,edx
c001ddf8:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ddfd:	0d 00 00 00 80       	or     eax,0x80000000
c001de02:	ef                   	out    dx,eax
c001de03:	ba fc 0c 00 00       	mov    edx,0xcfc
c001de08:	ed                   	in     eax,dx
c001de09:	83 e3 02             	and    ebx,0x2
c001de0c:	0f b6 cb             	movzx  ecx,bl
c001de0f:	c1 e1 03             	shl    ecx,0x3
c001de12:	d3 e8                	shr    eax,cl
c001de14:	eb 43                	jmp    c001de59 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001de16:	83 ff 02             	cmp    edi,0x2
c001de19:	75 2c                	jne    c001de47 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001de1b:	83 ec 0c             	sub    esp,0xc
c001de1e:	0f b6 c9             	movzx  ecx,cl
c001de21:	0f b6 d2             	movzx  edx,dl
c001de24:	0f b6 fb             	movzx  edi,bl
c001de27:	0f b6 c0             	movzx  eax,al
c001de2a:	57                   	push   edi
c001de2b:	51                   	push   ecx
c001de2c:	52                   	push   edx
c001de2d:	50                   	push   eax
c001de2e:	56                   	push   esi
c001de2f:	e8 14 ff ff ff       	call   c001dd48 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001de34:	89 c2                	mov    edx,eax
c001de36:	ed                   	in     eax,dx
c001de37:	83 e3 02             	and    ebx,0x2
c001de3a:	83 c4 20             	add    esp,0x20
c001de3d:	0f b6 cb             	movzx  ecx,bl
c001de40:	c1 e1 03             	shl    ecx,0x3
c001de43:	d3 e8                	shr    eax,cl
c001de45:	eb 12                	jmp    c001de59 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001de47:	83 ec 0c             	sub    esp,0xc
c001de4a:	68 63 73 02 c0       	push   0xc0027363
c001de4f:	e8 a5 73 ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c001de54:	83 c4 10             	add    esp,0x10
c001de57:	31 c0                	xor    eax,eax
c001de59:	5b                   	pop    ebx
c001de5a:	5e                   	pop    esi
c001de5b:	5f                   	pop    edi
c001de5c:	c3                   	ret    
c001de5d:	90                   	nop

c001de5e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001de5e:	83 ec 18             	sub    esp,0x18
c001de61:	6a 00                	push   0x0
c001de63:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001de68:	50                   	push   eax
c001de69:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001de6e:	50                   	push   eax
c001de6f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001de74:	50                   	push   eax
c001de75:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001de79:	e8 38 ff ff ff       	call   c001ddb6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001de7e:	83 c4 2c             	add    esp,0x2c
c001de81:	c3                   	ret    

c001de82 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001de82:	83 ec 18             	sub    esp,0x18
c001de85:	6a 0e                	push   0xe
c001de87:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001de8c:	50                   	push   eax
c001de8d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001de92:	50                   	push   eax
c001de93:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001de98:	50                   	push   eax
c001de99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001de9d:	e8 14 ff ff ff       	call   c001ddb6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dea2:	83 c4 2c             	add    esp,0x2c
c001dea5:	0f b6 c0             	movzx  eax,al
c001dea8:	c3                   	ret    
c001dea9:	90                   	nop

c001deaa <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001deaa:	55                   	push   ebp
c001deab:	57                   	push   edi
c001deac:	56                   	push   esi
c001dead:	53                   	push   ebx
c001deae:	83 ec 18             	sub    esp,0x18
c001deb1:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001deb6:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001debb:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001dec0:	6a 0a                	push   0xa
c001dec2:	56                   	push   esi
c001dec3:	55                   	push   ebp
c001dec4:	57                   	push   edi
c001dec5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dec9:	e8 e8 fe ff ff       	call   c001ddb6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dece:	83 c4 14             	add    esp,0x14
c001ded1:	89 c3                	mov    ebx,eax
c001ded3:	6a 0a                	push   0xa
c001ded5:	0f b6 db             	movzx  ebx,bl
c001ded8:	56                   	push   esi
c001ded9:	55                   	push   ebp
c001deda:	57                   	push   edi
c001dedb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dedf:	e8 d2 fe ff ff       	call   c001ddb6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dee4:	83 c4 2c             	add    esp,0x2c
c001dee7:	25 00 ff 00 00       	and    eax,0xff00
c001deec:	09 d8                	or     eax,ebx
c001deee:	5b                   	pop    ebx
c001deef:	5e                   	pop    esi
c001def0:	5f                   	pop    edi
c001def1:	5d                   	pop    ebp
c001def2:	c3                   	ret    
c001def3:	90                   	nop

c001def4 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001def4:	83 ec 18             	sub    esp,0x18
c001def7:	6a 08                	push   0x8
c001def9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001defe:	50                   	push   eax
c001deff:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001df04:	50                   	push   eax
c001df05:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001df0a:	50                   	push   eax
c001df0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001df0f:	e8 a2 fe ff ff       	call   c001ddb6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001df14:	83 c4 2c             	add    esp,0x2c
c001df17:	0f b6 c4             	movzx  eax,ah
c001df1a:	c3                   	ret    
c001df1b:	90                   	nop

c001df1c <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001df1c:	83 ec 18             	sub    esp,0x18
c001df1f:	6a 08                	push   0x8
c001df21:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001df26:	50                   	push   eax
c001df27:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001df2c:	50                   	push   eax
c001df2d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001df32:	50                   	push   eax
c001df33:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001df37:	e8 7a fe ff ff       	call   c001ddb6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001df3c:	83 c4 2c             	add    esp,0x2c
c001df3f:	c3                   	ret    

c001df40 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001df40:	83 ec 18             	sub    esp,0x18
c001df43:	6a 3c                	push   0x3c
c001df45:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001df4a:	50                   	push   eax
c001df4b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001df50:	50                   	push   eax
c001df51:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001df56:	50                   	push   eax
c001df57:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001df5b:	e8 56 fe ff ff       	call   c001ddb6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001df60:	83 c4 2c             	add    esp,0x2c
c001df63:	c3                   	ret    

c001df64 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001df64:	83 ec 18             	sub    esp,0x18
c001df67:	6a 18                	push   0x18
c001df69:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001df6e:	50                   	push   eax
c001df6f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001df74:	50                   	push   eax
c001df75:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001df7a:	50                   	push   eax
c001df7b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001df7f:	e8 32 fe ff ff       	call   c001ddb6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001df84:	83 c4 2c             	add    esp,0x2c
c001df87:	0f b6 c4             	movzx  eax,ah
c001df8a:	c3                   	ret    
c001df8b:	90                   	nop

c001df8c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001df8c:	55                   	push   ebp
c001df8d:	57                   	push   edi
c001df8e:	56                   	push   esi
c001df8f:	53                   	push   ebx
c001df90:	83 ec 28             	sub    esp,0x28
c001df93:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001df97:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001df9c:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001dfa1:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001dfa6:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001dfad:	8d 43 12             	lea    eax,[ebx+0x12]
c001dfb0:	83 c3 10             	add    ebx,0x10
c001dfb3:	0f b6 c0             	movzx  eax,al
c001dfb6:	0f b6 db             	movzx  ebx,bl
c001dfb9:	50                   	push   eax
c001dfba:	51                   	push   ecx
c001dfbb:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001dfbf:	57                   	push   edi
c001dfc0:	55                   	push   ebp
c001dfc1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001dfc5:	e8 ec fd ff ff       	call   c001ddb6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dfca:	83 c4 14             	add    esp,0x14
c001dfcd:	89 c6                	mov    esi,eax
c001dfcf:	53                   	push   ebx
c001dfd0:	c1 e6 10             	shl    esi,0x10
c001dfd3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001dfd7:	51                   	push   ecx
c001dfd8:	57                   	push   edi
c001dfd9:	55                   	push   ebp
c001dfda:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001dfde:	e8 d3 fd ff ff       	call   c001ddb6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dfe3:	83 c4 3c             	add    esp,0x3c
c001dfe6:	0f b7 c0             	movzx  eax,ax
c001dfe9:	5b                   	pop    ebx
c001dfea:	09 f0                	or     eax,esi
c001dfec:	5e                   	pop    esi
c001dfed:	5f                   	pop    edi
c001dfee:	5d                   	pop    ebp
c001dfef:	c3                   	ret    

c001dff0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001dff0:	55                   	push   ebp
c001dff1:	57                   	push   edi
c001dff2:	56                   	push   esi
c001dff3:	53                   	push   ebx
c001dff4:	83 ec 0c             	sub    esp,0xc
c001dff7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001dffb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001dfff:	89 f5                	mov    ebp,esi
c001e001:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001e007:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e00b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e00f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e013:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e017:	83 f9 01             	cmp    ecx,0x1
c001e01a:	75 5d                	jne    c001e079 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001e01c:	0f b6 c8             	movzx  ecx,al
c001e01f:	0f b6 d2             	movzx  edx,dl
c001e022:	c1 e1 10             	shl    ecx,0x10
c001e025:	c1 e2 0b             	shl    edx,0xb
c001e028:	89 f0                	mov    eax,esi
c001e02a:	25 fc 00 00 00       	and    eax,0xfc
c001e02f:	09 c1                	or     ecx,eax
c001e031:	89 e8                	mov    eax,ebp
c001e033:	0f b6 c0             	movzx  eax,al
c001e036:	c1 e0 08             	shl    eax,0x8
c001e039:	09 c1                	or     ecx,eax
c001e03b:	09 d1                	or     ecx,edx
c001e03d:	ba f8 0c 00 00       	mov    edx,0xcf8
c001e042:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001e048:	89 c8                	mov    eax,ecx
c001e04a:	ef                   	out    dx,eax
c001e04b:	ba fc 0c 00 00       	mov    edx,0xcfc
c001e050:	ed                   	in     eax,dx
c001e051:	0f b7 db             	movzx  ebx,bx
c001e054:	83 e6 02             	and    esi,0x2
c001e057:	74 0a                	je     c001e063 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001e059:	0f b7 d0             	movzx  edx,ax
c001e05c:	c1 e3 10             	shl    ebx,0x10
c001e05f:	09 d3                	or     ebx,edx
c001e061:	eb 05                	jmp    c001e068 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001e063:	66 31 c0             	xor    ax,ax
c001e066:	09 c3                	or     ebx,eax
c001e068:	ba f8 0c 00 00       	mov    edx,0xcf8
c001e06d:	89 c8                	mov    eax,ecx
c001e06f:	ef                   	out    dx,eax
c001e070:	ba fc 0c 00 00       	mov    edx,0xcfc
c001e075:	89 d8                	mov    eax,ebx
c001e077:	eb 41                	jmp    c001e0ba <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001e079:	83 f9 02             	cmp    ecx,0x2
c001e07c:	75 45                	jne    c001e0c3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001e07e:	83 ec 0c             	sub    esp,0xc
c001e081:	0f b6 d2             	movzx  edx,dl
c001e084:	89 f1                	mov    ecx,esi
c001e086:	0f b6 c0             	movzx  eax,al
c001e089:	0f b6 f1             	movzx  esi,cl
c001e08c:	89 e9                	mov    ecx,ebp
c001e08e:	56                   	push   esi
c001e08f:	0f b6 c9             	movzx  ecx,cl
c001e092:	51                   	push   ecx
c001e093:	52                   	push   edx
c001e094:	50                   	push   eax
c001e095:	57                   	push   edi
c001e096:	e8 ad fc ff ff       	call   c001dd48 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e09b:	89 c2                	mov    edx,eax
c001e09d:	ed                   	in     eax,dx
c001e09e:	83 c4 20             	add    esp,0x20
c001e0a1:	0f b7 db             	movzx  ebx,bx
c001e0a4:	f6 c2 02             	test   dl,0x2
c001e0a7:	74 0c                	je     c001e0b5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001e0a9:	0f b7 c8             	movzx  ecx,ax
c001e0ac:	89 d8                	mov    eax,ebx
c001e0ae:	c1 e0 10             	shl    eax,0x10
c001e0b1:	09 c8                	or     eax,ecx
c001e0b3:	eb 05                	jmp    c001e0ba <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001e0b5:	66 31 c0             	xor    ax,ax
c001e0b8:	09 d8                	or     eax,ebx
c001e0ba:	ef                   	out    dx,eax
c001e0bb:	83 c4 0c             	add    esp,0xc
c001e0be:	5b                   	pop    ebx
c001e0bf:	5e                   	pop    esi
c001e0c0:	5f                   	pop    edi
c001e0c1:	5d                   	pop    ebp
c001e0c2:	c3                   	ret    
c001e0c3:	c7 44 24 20 63 73 02 c0 	mov    DWORD PTR [esp+0x20],0xc0027363
c001e0cb:	83 c4 0c             	add    esp,0xc
c001e0ce:	5b                   	pop    ebx
c001e0cf:	5e                   	pop    esi
c001e0d0:	5f                   	pop    edi
c001e0d1:	5d                   	pop    ebp
c001e0d2:	e9 22 71 ff ff       	jmp    c00151f9 <Krnl::panic(char const*)>
c001e0d7:	90                   	nop

c001e0d8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001e0d8:	55                   	push   ebp
c001e0d9:	57                   	push   edi
c001e0da:	56                   	push   esi
c001e0db:	53                   	push   ebx
c001e0dc:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001e0e2:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c001e0e9:	75 0f                	jne    c001e0fa <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x22>
c001e0eb:	80 3d 4c ab 02 c0 00 	cmp    BYTE PTR ds:0xc002ab4c,0x0
c001e0f2:	0f 85 fa 00 00 00    	jne    c001e1f2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001e0f8:	eb 2f                	jmp    c001e129 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x51>
c001e0fa:	83 ec 0c             	sub    esp,0xc
c001e0fd:	68 69 73 02 c0       	push   0xc0027369
c001e102:	e8 3a bd fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e107:	83 c4 10             	add    esp,0x10
c001e10a:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c001e111:	75 d8                	jne    c001e0eb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001e113:	e4 60                	in     al,0x60
c001e115:	3c 1c                	cmp    al,0x1c
c001e117:	74 04                	je     c001e11d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001e119:	3c 5a                	cmp    al,0x5a
c001e11b:	75 f6                	jne    c001e113 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3b>
c001e11d:	e4 60                	in     al,0x60
c001e11f:	3c 5a                	cmp    al,0x5a
c001e121:	74 fa                	je     c001e11d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001e123:	3c 1c                	cmp    al,0x1c
c001e125:	74 f6                	je     c001e11d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001e127:	eb c2                	jmp    c001e0eb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001e129:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c001e130:	0f 85 86 00 00 00    	jne    c001e1bc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xe4>
c001e136:	83 ec 0c             	sub    esp,0xc
c001e139:	68 14 01 00 00       	push   0x114
c001e13e:	e8 a4 bc fe ff       	call   c0009de7 <malloc>
c001e143:	83 c4 0c             	add    esp,0xc
c001e146:	89 c3                	mov    ebx,eax
c001e148:	ff 35 50 a1 02 c0    	push   DWORD PTR ds:0xc002a150
c001e14e:	68 83 73 02 c0       	push   0xc0027383
c001e153:	50                   	push   eax
c001e154:	e8 29 f5 fe ff       	call   c000d682 <File::File(char const*, Process*)>
c001e159:	5a                   	pop    edx
c001e15a:	59                   	pop    ecx
c001e15b:	6a 01                	push   0x1
c001e15d:	53                   	push   ebx
c001e15e:	e8 f9 f5 fe ff       	call   c000d75c <File::open(FileOpenMode)>
c001e163:	83 c4 0c             	add    esp,0xc
c001e166:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001e16a:	50                   	push   eax
c001e16b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001e16f:	50                   	push   eax
c001e170:	53                   	push   ebx
c001e171:	e8 92 f8 fe ff       	call   c000da08 <File::stat(unsigned long long*, bool*)>
c001e176:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e17a:	40                   	inc    eax
c001e17b:	89 04 24             	mov    DWORD PTR [esp],eax
c001e17e:	e8 64 bc fe ff       	call   c0009de7 <malloc>
c001e183:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e187:	a3 48 ab 02 c0       	mov    ds:0xc002ab48,eax
c001e18c:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001e190:	5e                   	pop    esi
c001e191:	8b 13                	mov    edx,DWORD PTR [ebx]
c001e193:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c001e197:	51                   	push   ecx
c001e198:	50                   	push   eax
c001e199:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001e19d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001e1a1:	53                   	push   ebx
c001e1a2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e1a5:	83 c4 14             	add    esp,0x14
c001e1a8:	53                   	push   ebx
c001e1a9:	e8 0c f6 fe ff       	call   c000d7ba <File::close()>
c001e1ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e1b2:	83 c4 10             	add    esp,0x10
c001e1b5:	a3 44 ab 02 c0       	mov    ds:0xc002ab44,eax
c001e1ba:	eb 36                	jmp    c001e1f2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001e1bc:	83 ec 0c             	sub    esp,0xc
c001e1bf:	68 9c 73 02 c0       	push   0xc002739c
c001e1c4:	e8 78 bc fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e1c9:	83 c4 10             	add    esp,0x10
c001e1cc:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c001e1d3:	0f 85 5d ff ff ff    	jne    c001e136 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001e1d9:	e4 60                	in     al,0x60
c001e1db:	3c 1c                	cmp    al,0x1c
c001e1dd:	74 04                	je     c001e1e3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001e1df:	3c 5a                	cmp    al,0x5a
c001e1e1:	75 f6                	jne    c001e1d9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x101>
c001e1e3:	e4 60                	in     al,0x60
c001e1e5:	3c 5a                	cmp    al,0x5a
c001e1e7:	74 fa                	je     c001e1e3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001e1e9:	3c 1c                	cmp    al,0x1c
c001e1eb:	74 f6                	je     c001e1e3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001e1ed:	e9 44 ff ff ff       	jmp    c001e136 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001e1f2:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c001e1f9:	75 0b                	jne    c001e206 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x12e>
c001e1fb:	31 f6                	xor    esi,esi
c001e1fd:	31 db                	xor    ebx,ebx
c001e1ff:	31 ed                	xor    ebp,ebp
c001e201:	e9 a3 01 00 00       	jmp    c001e3a9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001e206:	83 ec 0c             	sub    esp,0xc
c001e209:	68 ae 73 02 c0       	push   0xc00273ae
c001e20e:	e8 2e bc fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e213:	8b 15 20 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028c20
c001e219:	83 c4 10             	add    esp,0x10
c001e21c:	f6 c2 80             	test   dl,0x80
c001e21f:	74 0c                	je     c001e22d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x155>
c001e221:	0f ba e2 0b          	bt     edx,0xb
c001e225:	72 1a                	jb     c001e241 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x169>
c001e227:	eb d2                	jmp    c001e1fb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001e229:	3c 5a                	cmp    al,0x5a
c001e22b:	74 0c                	je     c001e239 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001e22d:	e4 60                	in     al,0x60
c001e22f:	3c 1c                	cmp    al,0x1c
c001e231:	75 f6                	jne    c001e229 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x151>
c001e233:	eb 04                	jmp    c001e239 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001e235:	3c 1c                	cmp    al,0x1c
c001e237:	75 e8                	jne    c001e221 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x149>
c001e239:	e4 60                	in     al,0x60
c001e23b:	3c 5a                	cmp    al,0x5a
c001e23d:	74 fa                	je     c001e239 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001e23f:	eb f4                	jmp    c001e235 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x15d>
c001e241:	83 ec 0c             	sub    esp,0xc
c001e244:	68 b3 73 02 c0       	push   0xc00273b3
c001e249:	e8 f3 bb fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e24e:	83 c4 10             	add    esp,0x10
c001e251:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c001e258:	75 a1                	jne    c001e1fb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001e25a:	e4 60                	in     al,0x60
c001e25c:	3c 5a                	cmp    al,0x5a
c001e25e:	74 04                	je     c001e264 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001e260:	3c 1c                	cmp    al,0x1c
c001e262:	75 f6                	jne    c001e25a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x182>
c001e264:	e4 60                	in     al,0x60
c001e266:	3c 5a                	cmp    al,0x5a
c001e268:	74 fa                	je     c001e264 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001e26a:	3c 1c                	cmp    al,0x1c
c001e26c:	74 f6                	je     c001e264 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001e26e:	eb 8b                	jmp    c001e1fb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001e270:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c001e277:	0f 85 3d 01 00 00    	jne    c001e3ba <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2e2>
c001e27d:	a1 48 ab 02 c0       	mov    eax,ds:0xc002ab48
c001e282:	8d 7e 01             	lea    edi,[esi+0x1]
c001e285:	8a 04 30             	mov    al,BYTE PTR [eax+esi*1]
c001e288:	d4 40                	aam    0x40
c001e28a:	d5 39                	aad    0x39
c001e28c:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c001e293:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e297:	0f 85 53 01 00 00    	jne    c001e3f0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x318>
c001e29d:	8b 15 48 ab 02 c0    	mov    edx,DWORD PTR ds:0xc002ab48
c001e2a3:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001e2a6:	d4 40                	aam    0x40
c001e2a8:	d5 39                	aad    0x39
c001e2aa:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001e2ae:	8a 44 32 03          	mov    al,BYTE PTR [edx+esi*1+0x3]
c001e2b2:	d4 40                	aam    0x40
c001e2b4:	d5 39                	aad    0x39
c001e2b6:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001e2ba:	8a 44 32 04          	mov    al,BYTE PTR [edx+esi*1+0x4]
c001e2be:	d4 40                	aam    0x40
c001e2c0:	d5 39                	aad    0x39
c001e2c2:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e2c6:	8a 44 32 06          	mov    al,BYTE PTR [edx+esi*1+0x6]
c001e2ca:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001e2ce:	3c 56                	cmp    al,0x56
c001e2d0:	74 49                	je     c001e31b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x243>
c001e2d2:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001e2d6:	d4 40                	aam    0x40
c001e2d8:	d5 39                	aad    0x39
c001e2da:	8d 48 d0             	lea    ecx,[eax-0x30]
c001e2dd:	8a 44 32 07          	mov    al,BYTE PTR [edx+esi*1+0x7]
c001e2e1:	0f b6 c9             	movzx  ecx,cl
c001e2e4:	c1 e1 04             	shl    ecx,0x4
c001e2e7:	d4 40                	aam    0x40
c001e2e9:	d5 39                	aad    0x39
c001e2eb:	83 e8 30             	sub    eax,0x30
c001e2ee:	0f b6 c0             	movzx  eax,al
c001e2f1:	09 c1                	or     ecx,eax
c001e2f3:	8a 44 32 08          	mov    al,BYTE PTR [edx+esi*1+0x8]
c001e2f7:	c1 e1 04             	shl    ecx,0x4
c001e2fa:	d4 40                	aam    0x40
c001e2fc:	d5 39                	aad    0x39
c001e2fe:	83 e8 30             	sub    eax,0x30
c001e301:	0f b6 c0             	movzx  eax,al
c001e304:	09 c1                	or     ecx,eax
c001e306:	8a 44 32 09          	mov    al,BYTE PTR [edx+esi*1+0x9]
c001e30a:	c1 e1 04             	shl    ecx,0x4
c001e30d:	d4 40                	aam    0x40
c001e30f:	d5 39                	aad    0x39
c001e311:	83 e8 30             	sub    eax,0x30
c001e314:	0f b6 c0             	movzx  eax,al
c001e317:	09 c8                	or     eax,ecx
c001e319:	89 c5                	mov    ebp,eax
c001e31b:	8a 4c 32 0b          	mov    cl,BYTE PTR [edx+esi*1+0xb]
c001e31f:	80 f9 44             	cmp    cl,0x44
c001e322:	74 47                	je     c001e36b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x293>
c001e324:	88 c8                	mov    al,cl
c001e326:	d4 40                	aam    0x40
c001e328:	d5 39                	aad    0x39
c001e32a:	83 e8 30             	sub    eax,0x30
c001e32d:	0f b6 f8             	movzx  edi,al
c001e330:	8a 44 32 0c          	mov    al,BYTE PTR [edx+esi*1+0xc]
c001e334:	c1 e7 04             	shl    edi,0x4
c001e337:	d4 40                	aam    0x40
c001e339:	d5 39                	aad    0x39
c001e33b:	8d 58 d0             	lea    ebx,[eax-0x30]
c001e33e:	8a 44 32 0d          	mov    al,BYTE PTR [edx+esi*1+0xd]
c001e342:	0f b6 db             	movzx  ebx,bl
c001e345:	09 fb                	or     ebx,edi
c001e347:	c1 e3 04             	shl    ebx,0x4
c001e34a:	d4 40                	aam    0x40
c001e34c:	d5 39                	aad    0x39
c001e34e:	83 e8 30             	sub    eax,0x30
c001e351:	0f b6 f8             	movzx  edi,al
c001e354:	8a 44 32 0e          	mov    al,BYTE PTR [edx+esi*1+0xe]
c001e358:	09 fb                	or     ebx,edi
c001e35a:	89 df                	mov    edi,ebx
c001e35c:	c1 e7 04             	shl    edi,0x4
c001e35f:	d4 40                	aam    0x40
c001e361:	d5 39                	aad    0x39
c001e363:	8d 58 d0             	lea    ebx,[eax-0x30]
c001e366:	0f b6 db             	movzx  ebx,bl
c001e369:	09 fb                	or     ebx,edi
c001e36b:	a1 44 ab 02 c0       	mov    eax,ds:0xc002ab44
c001e370:	83 c6 10             	add    esi,0x10
c001e373:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e377:	8d 7c 24 20          	lea    edi,[esp+0x20]
c001e37b:	8a 04 32             	mov    al,BYTE PTR [edx+esi*1]
c001e37e:	3c 0a                	cmp    al,0xa
c001e380:	0f 85 a0 00 00 00    	jne    c001e426 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x34e>
c001e386:	3c 0a                	cmp    al,0xa
c001e388:	0f 94 c0             	sete   al
c001e38b:	0f b6 c0             	movzx  eax,al
c001e38e:	01 c6                	add    esi,eax
c001e390:	80 7c 24 07 56       	cmp    BYTE PTR [esp+0x7],0x56
c001e395:	0f 84 a2 00 00 00    	je     c001e43d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001e39b:	66 39 ac 24 42 01 00 00 	cmp    WORD PTR [esp+0x142],bp
c001e3a3:	0f 84 94 00 00 00    	je     c001e43d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001e3a9:	39 35 44 ab 02 c0    	cmp    DWORD PTR ds:0xc002ab44,esi
c001e3af:	0f 8f bb fe ff ff    	jg     c001e270 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x198>
c001e3b5:	e9 e8 00 00 00       	jmp    c001e4a2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3ca>
c001e3ba:	83 ec 0c             	sub    esp,0xc
c001e3bd:	68 ba 73 02 c0       	push   0xc00273ba
c001e3c2:	e8 7a ba fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e3c7:	83 c4 10             	add    esp,0x10
c001e3ca:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c001e3d1:	0f 85 a6 fe ff ff    	jne    c001e27d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001e3d7:	e4 60                	in     al,0x60
c001e3d9:	3c 5a                	cmp    al,0x5a
c001e3db:	74 04                	je     c001e3e1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001e3dd:	3c 1c                	cmp    al,0x1c
c001e3df:	75 f6                	jne    c001e3d7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ff>
c001e3e1:	e4 60                	in     al,0x60
c001e3e3:	3c 5a                	cmp    al,0x5a
c001e3e5:	74 fa                	je     c001e3e1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001e3e7:	3c 1c                	cmp    al,0x1c
c001e3e9:	74 f6                	je     c001e3e1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001e3eb:	e9 8d fe ff ff       	jmp    c001e27d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001e3f0:	83 ec 0c             	sub    esp,0xc
c001e3f3:	68 c2 73 02 c0       	push   0xc00273c2
c001e3f8:	e8 44 ba fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e3fd:	83 c4 10             	add    esp,0x10
c001e400:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c001e407:	0f 85 90 fe ff ff    	jne    c001e29d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001e40d:	e4 60                	in     al,0x60
c001e40f:	3c 5a                	cmp    al,0x5a
c001e411:	74 04                	je     c001e417 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001e413:	3c 1c                	cmp    al,0x1c
c001e415:	75 f6                	jne    c001e40d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x335>
c001e417:	e4 60                	in     al,0x60
c001e419:	3c 5a                	cmp    al,0x5a
c001e41b:	74 fa                	je     c001e417 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001e41d:	3c 1c                	cmp    al,0x1c
c001e41f:	74 f6                	je     c001e417 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001e421:	e9 77 fe ff ff       	jmp    c001e29d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001e426:	47                   	inc    edi
c001e427:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001e42b:	0f 84 55 ff ff ff    	je     c001e386 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ae>
c001e431:	46                   	inc    esi
c001e432:	88 47 ff             	mov    BYTE PTR [edi-0x1],al
c001e435:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001e438:	e9 3e ff ff ff       	jmp    c001e37b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2a3>
c001e43d:	80 f9 44             	cmp    cl,0x44
c001e440:	74 0e                	je     c001e450 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x378>
c001e442:	66 39 9c 24 62 01 00 00 	cmp    WORD PTR [esp+0x162],bx
c001e44a:	0f 85 59 ff ff ff    	jne    c001e3a9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001e450:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001e454:	8a 54 24 0d          	mov    dl,BYTE PTR [esp+0xd]
c001e458:	c1 e0 04             	shl    eax,0x4
c001e45b:	83 ea 30             	sub    edx,0x30
c001e45e:	09 d0                	or     eax,edx
c001e460:	38 84 24 40 01 00 00 	cmp    BYTE PTR [esp+0x140],al
c001e467:	0f 85 3c ff ff ff    	jne    c001e3a9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001e46d:	8a 54 24 0e          	mov    dl,BYTE PTR [esp+0xe]
c001e471:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e475:	c1 e2 04             	shl    edx,0x4
c001e478:	83 e8 30             	sub    eax,0x30
c001e47b:	09 d0                	or     eax,edx
c001e47d:	38 84 24 41 01 00 00 	cmp    BYTE PTR [esp+0x141],al
c001e484:	0f 85 1f ff ff ff    	jne    c001e3a9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001e48a:	50                   	push   eax
c001e48b:	50                   	push   eax
c001e48c:	8d 44 24 28          	lea    eax,[esp+0x28]
c001e490:	50                   	push   eax
c001e491:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c001e498:	e8 b3 22 fe ff       	call   c0000750 <strcpy>
c001e49d:	83 c4 10             	add    esp,0x10
c001e4a0:	eb 15                	jmp    c001e4b7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3df>
c001e4a2:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001e4a9:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c001e4b4:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001e4b7:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001e4be:	81 c4 2c 01 00 00    	add    esp,0x12c
c001e4c4:	5b                   	pop    ebx
c001e4c5:	5e                   	pop    esi
c001e4c6:	5f                   	pop    edi
c001e4c7:	5d                   	pop    ebp
c001e4c8:	c3                   	ret    
c001e4c9:	90                   	nop

c001e4ca <PCI::checkBus(unsigned char)>:
c001e4ca:	56                   	push   esi
c001e4cb:	53                   	push   ebx
c001e4cc:	31 db                	xor    ebx,ebx
c001e4ce:	51                   	push   ecx
c001e4cf:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001e4d4:	52                   	push   edx
c001e4d5:	53                   	push   ebx
c001e4d6:	43                   	inc    ebx
c001e4d7:	56                   	push   esi
c001e4d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e4dc:	e8 bf 07 00 00       	call   c001eca0 <PCI::checkDevice(unsigned char, unsigned char)>
c001e4e1:	83 c4 10             	add    esp,0x10
c001e4e4:	83 fb 20             	cmp    ebx,0x20
c001e4e7:	75 eb                	jne    c001e4d4 <PCI::checkBus(unsigned char)+0xa>
c001e4e9:	58                   	pop    eax
c001e4ea:	5b                   	pop    ebx
c001e4eb:	5e                   	pop    esi
c001e4ec:	c3                   	ret    
c001e4ed:	90                   	nop

c001e4ee <PCI::foundDevice(PCIDeviceInfo)>:
c001e4ee:	55                   	push   ebp
c001e4ef:	57                   	push   edi
c001e4f0:	56                   	push   esi
c001e4f1:	53                   	push   ebx
c001e4f2:	83 ec 1c             	sub    esp,0x1c
c001e4f5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e4f9:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001e4ff:	0f 84 20 04 00 00    	je     c001e925 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e505:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c001e50c:	75 37                	jne    c001e545 <PCI::foundDevice(PCIDeviceInfo)+0x57>
c001e50e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001e512:	66 81 f9 06 04       	cmp    cx,0x406
c001e517:	75 5b                	jne    c001e574 <PCI::foundDevice(PCIDeviceInfo)+0x86>
c001e519:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001e51e:	50                   	push   eax
c001e51f:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001e524:	50                   	push   eax
c001e525:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001e52a:	50                   	push   eax
c001e52b:	53                   	push   ebx
c001e52c:	e8 33 fa ff ff       	call   c001df64 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001e531:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001e535:	0f b6 c0             	movzx  eax,al
c001e538:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001e53c:	83 c4 2c             	add    esp,0x2c
c001e53f:	5b                   	pop    ebx
c001e540:	5e                   	pop    esi
c001e541:	5f                   	pop    edi
c001e542:	5d                   	pop    ebp
c001e543:	eb 85                	jmp    c001e4ca <PCI::checkBus(unsigned char)>
c001e545:	83 ec 0c             	sub    esp,0xc
c001e548:	68 cb 73 02 c0       	push   0xc00273cb
c001e54d:	e8 ef b8 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e552:	83 c4 10             	add    esp,0x10
c001e555:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c001e55c:	75 b0                	jne    c001e50e <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001e55e:	e4 60                	in     al,0x60
c001e560:	3c 5a                	cmp    al,0x5a
c001e562:	74 04                	je     c001e568 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001e564:	3c 1c                	cmp    al,0x1c
c001e566:	75 f6                	jne    c001e55e <PCI::foundDevice(PCIDeviceInfo)+0x70>
c001e568:	e4 60                	in     al,0x60
c001e56a:	3c 5a                	cmp    al,0x5a
c001e56c:	74 fa                	je     c001e568 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001e56e:	3c 1c                	cmp    al,0x1c
c001e570:	74 f6                	je     c001e568 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001e572:	eb 9a                	jmp    c001e50e <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001e574:	8b 83 cc 00 00 00    	mov    eax,DWORD PTR [ebx+0xcc]
c001e57a:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001e57e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e582:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001e586:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001e58a:	88 d0                	mov    al,dl
c001e58c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001e591:	74 3b                	je     c001e5ce <PCI::foundDevice(PCIDeviceInfo)+0xe0>
c001e593:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e597:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001e59a:	85 d2                	test   edx,edx
c001e59c:	74 24                	je     c001e5c2 <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001e59e:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001e5a4:	31 ef                	xor    edi,ebp
c001e5a6:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001e5ac:	75 14                	jne    c001e5c2 <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001e5ae:	39 b2 20 01 00 00    	cmp    DWORD PTR [edx+0x120],esi
c001e5b4:	75 0c                	jne    c001e5c2 <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001e5b6:	38 82 38 01 00 00    	cmp    BYTE PTR [edx+0x138],al
c001e5bc:	0f 84 63 03 00 00    	je     c001e925 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e5c2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e5c6:	8b 12                	mov    edx,DWORD PTR [edx]
c001e5c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e5cc:	eb be                	jmp    c001e58c <PCI::foundDevice(PCIDeviceInfo)+0x9e>
c001e5ce:	66 81 f9 01 06       	cmp    cx,0x601
c001e5d3:	0f 85 81 01 00 00    	jne    c001e75a <PCI::foundDevice(PCIDeviceInfo)+0x26c>
c001e5d9:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c001e5e0:	75 25                	jne    c001e607 <PCI::foundDevice(PCIDeviceInfo)+0x119>
c001e5e2:	83 ec 0c             	sub    esp,0xc
c001e5e5:	68 64 01 00 00       	push   0x164
c001e5ea:	e8 f8 b7 fe ff       	call   c0009de7 <malloc>
c001e5ef:	89 04 24             	mov    DWORD PTR [esp],eax
c001e5f2:	89 c5                	mov    ebp,eax
c001e5f4:	e8 d3 12 00 00       	call   c001f8cc <SATABus::SATABus()>
c001e5f9:	83 c4 10             	add    esp,0x10
c001e5fc:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c001e603:	74 4a                	je     c001e64f <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001e605:	eb 2f                	jmp    c001e636 <PCI::foundDevice(PCIDeviceInfo)+0x148>
c001e607:	83 ec 0c             	sub    esp,0xc
c001e60a:	68 db 73 02 c0       	push   0xc00273db
c001e60f:	e8 2d b8 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e614:	83 c4 10             	add    esp,0x10
c001e617:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c001e61e:	75 c2                	jne    c001e5e2 <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001e620:	e4 60                	in     al,0x60
c001e622:	3c 1c                	cmp    al,0x1c
c001e624:	74 04                	je     c001e62a <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001e626:	3c 5a                	cmp    al,0x5a
c001e628:	75 f6                	jne    c001e620 <PCI::foundDevice(PCIDeviceInfo)+0x132>
c001e62a:	e4 60                	in     al,0x60
c001e62c:	3c 5a                	cmp    al,0x5a
c001e62e:	74 fa                	je     c001e62a <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001e630:	3c 1c                	cmp    al,0x1c
c001e632:	74 f6                	je     c001e62a <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001e634:	eb ac                	jmp    c001e5e2 <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001e636:	83 ec 0c             	sub    esp,0xc
c001e639:	68 e1 73 02 c0       	push   0xc00273e1
c001e63e:	e8 fe b7 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e643:	83 c4 10             	add    esp,0x10
c001e646:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c001e64d:	74 1b                	je     c001e66a <PCI::foundDevice(PCIDeviceInfo)+0x17c>
c001e64f:	50                   	push   eax
c001e650:	50                   	push   eax
c001e651:	55                   	push   ebp
c001e652:	53                   	push   ebx
c001e653:	e8 32 00 ff ff       	call   c000e68a <Device::addChild(Device*)>
c001e658:	83 c4 10             	add    esp,0x10
c001e65b:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c001e662:	74 33                	je     c001e697 <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001e664:	eb 18                	jmp    c001e67e <PCI::foundDevice(PCIDeviceInfo)+0x190>
c001e666:	3c 1c                	cmp    al,0x1c
c001e668:	74 0c                	je     c001e676 <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001e66a:	e4 60                	in     al,0x60
c001e66c:	3c 5a                	cmp    al,0x5a
c001e66e:	75 f6                	jne    c001e666 <PCI::foundDevice(PCIDeviceInfo)+0x178>
c001e670:	eb 04                	jmp    c001e676 <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001e672:	3c 1c                	cmp    al,0x1c
c001e674:	75 d9                	jne    c001e64f <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001e676:	e4 60                	in     al,0x60
c001e678:	3c 5a                	cmp    al,0x5a
c001e67a:	74 fa                	je     c001e676 <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001e67c:	eb f4                	jmp    c001e672 <PCI::foundDevice(PCIDeviceInfo)+0x184>
c001e67e:	83 ec 0c             	sub    esp,0xc
c001e681:	68 e9 73 02 c0       	push   0xc00273e9
c001e686:	e8 b6 b7 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e68b:	83 c4 10             	add    esp,0x10
c001e68e:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c001e695:	74 29                	je     c001e6c0 <PCI::foundDevice(PCIDeviceInfo)+0x1d2>
c001e697:	83 ec 2c             	sub    esp,0x2c
c001e69a:	b9 09 00 00 00       	mov    ecx,0x9
c001e69f:	8d 74 24 60          	lea    esi,[esp+0x60]
c001e6a3:	fc                   	cld    
c001e6a4:	89 e7                	mov    edi,esp
c001e6a6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e6a8:	55                   	push   ebp
c001e6a9:	e8 ee fe fe ff       	call   c000e59c <Device::preOpenPCI(PCIDeviceInfo)>
c001e6ae:	83 c4 30             	add    esp,0x30
c001e6b1:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c001e6b8:	74 33                	je     c001e6ed <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001e6ba:	eb 18                	jmp    c001e6d4 <PCI::foundDevice(PCIDeviceInfo)+0x1e6>
c001e6bc:	3c 1c                	cmp    al,0x1c
c001e6be:	74 0c                	je     c001e6cc <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001e6c0:	e4 60                	in     al,0x60
c001e6c2:	3c 5a                	cmp    al,0x5a
c001e6c4:	75 f6                	jne    c001e6bc <PCI::foundDevice(PCIDeviceInfo)+0x1ce>
c001e6c6:	eb 04                	jmp    c001e6cc <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001e6c8:	3c 1c                	cmp    al,0x1c
c001e6ca:	75 cb                	jne    c001e697 <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001e6cc:	e4 60                	in     al,0x60
c001e6ce:	3c 5a                	cmp    al,0x5a
c001e6d0:	74 fa                	je     c001e6cc <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001e6d2:	eb f4                	jmp    c001e6c8 <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001e6d4:	83 ec 0c             	sub    esp,0xc
c001e6d7:	68 f1 73 02 c0       	push   0xc00273f1
c001e6dc:	e8 60 b7 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e6e1:	83 c4 10             	add    esp,0x10
c001e6e4:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c001e6eb:	74 23                	je     c001e710 <PCI::foundDevice(PCIDeviceInfo)+0x222>
c001e6ed:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001e6f0:	6a 00                	push   0x0
c001e6f2:	6a 00                	push   0x0
c001e6f4:	6a 00                	push   0x0
c001e6f6:	55                   	push   ebp
c001e6f7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e6fa:	83 c4 10             	add    esp,0x10
c001e6fd:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c001e704:	0f 84 1b 02 00 00    	je     c001e925 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e70a:	eb 18                	jmp    c001e724 <PCI::foundDevice(PCIDeviceInfo)+0x236>
c001e70c:	3c 1c                	cmp    al,0x1c
c001e70e:	74 0c                	je     c001e71c <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001e710:	e4 60                	in     al,0x60
c001e712:	3c 5a                	cmp    al,0x5a
c001e714:	75 f6                	jne    c001e70c <PCI::foundDevice(PCIDeviceInfo)+0x21e>
c001e716:	eb 04                	jmp    c001e71c <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001e718:	3c 1c                	cmp    al,0x1c
c001e71a:	75 d1                	jne    c001e6ed <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001e71c:	e4 60                	in     al,0x60
c001e71e:	3c 5a                	cmp    al,0x5a
c001e720:	74 fa                	je     c001e71c <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001e722:	eb f4                	jmp    c001e718 <PCI::foundDevice(PCIDeviceInfo)+0x22a>
c001e724:	83 ec 0c             	sub    esp,0xc
c001e727:	68 f9 73 02 c0       	push   0xc00273f9
c001e72c:	e8 10 b7 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e731:	83 c4 10             	add    esp,0x10
c001e734:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c001e73b:	0f 85 e4 01 00 00    	jne    c001e925 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e741:	e4 60                	in     al,0x60
c001e743:	3c 5a                	cmp    al,0x5a
c001e745:	74 04                	je     c001e74b <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001e747:	3c 1c                	cmp    al,0x1c
c001e749:	75 f6                	jne    c001e741 <PCI::foundDevice(PCIDeviceInfo)+0x253>
c001e74b:	e4 60                	in     al,0x60
c001e74d:	3c 5a                	cmp    al,0x5a
c001e74f:	74 fa                	je     c001e74b <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001e751:	3c 1c                	cmp    al,0x1c
c001e753:	74 f6                	je     c001e74b <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001e755:	e9 cb 01 00 00       	jmp    c001e925 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e75a:	66 81 f9 01 01       	cmp    cx,0x101
c001e75f:	0f 85 7a 01 00 00    	jne    c001e8df <PCI::foundDevice(PCIDeviceInfo)+0x3f1>
c001e765:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c001e76c:	75 25                	jne    c001e793 <PCI::foundDevice(PCIDeviceInfo)+0x2a5>
c001e76e:	83 ec 0c             	sub    esp,0xc
c001e771:	68 70 02 00 00       	push   0x270
c001e776:	e8 6c b6 fe ff       	call   c0009de7 <malloc>
c001e77b:	89 04 24             	mov    DWORD PTR [esp],eax
c001e77e:	89 c5                	mov    ebp,eax
c001e780:	e8 df 05 00 00       	call   c001ed64 <IDE::IDE()>
c001e785:	83 c4 10             	add    esp,0x10
c001e788:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c001e78f:	74 4a                	je     c001e7db <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001e791:	eb 2f                	jmp    c001e7c2 <PCI::foundDevice(PCIDeviceInfo)+0x2d4>
c001e793:	83 ec 0c             	sub    esp,0xc
c001e796:	68 01 74 02 c0       	push   0xc0027401
c001e79b:	e8 a1 b6 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e7a0:	83 c4 10             	add    esp,0x10
c001e7a3:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c001e7aa:	75 c2                	jne    c001e76e <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001e7ac:	e4 60                	in     al,0x60
c001e7ae:	3c 5a                	cmp    al,0x5a
c001e7b0:	74 04                	je     c001e7b6 <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001e7b2:	3c 1c                	cmp    al,0x1c
c001e7b4:	75 f6                	jne    c001e7ac <PCI::foundDevice(PCIDeviceInfo)+0x2be>
c001e7b6:	e4 60                	in     al,0x60
c001e7b8:	3c 5a                	cmp    al,0x5a
c001e7ba:	74 fa                	je     c001e7b6 <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001e7bc:	3c 1c                	cmp    al,0x1c
c001e7be:	74 f6                	je     c001e7b6 <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001e7c0:	eb ac                	jmp    c001e76e <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001e7c2:	83 ec 0c             	sub    esp,0xc
c001e7c5:	68 08 74 02 c0       	push   0xc0027408
c001e7ca:	e8 72 b6 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e7cf:	83 c4 10             	add    esp,0x10
c001e7d2:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c001e7d9:	74 1b                	je     c001e7f6 <PCI::foundDevice(PCIDeviceInfo)+0x308>
c001e7db:	57                   	push   edi
c001e7dc:	57                   	push   edi
c001e7dd:	55                   	push   ebp
c001e7de:	53                   	push   ebx
c001e7df:	e8 a6 fe fe ff       	call   c000e68a <Device::addChild(Device*)>
c001e7e4:	83 c4 10             	add    esp,0x10
c001e7e7:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c001e7ee:	74 33                	je     c001e823 <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001e7f0:	eb 18                	jmp    c001e80a <PCI::foundDevice(PCIDeviceInfo)+0x31c>
c001e7f2:	3c 1c                	cmp    al,0x1c
c001e7f4:	74 0c                	je     c001e802 <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001e7f6:	e4 60                	in     al,0x60
c001e7f8:	3c 5a                	cmp    al,0x5a
c001e7fa:	75 f6                	jne    c001e7f2 <PCI::foundDevice(PCIDeviceInfo)+0x304>
c001e7fc:	eb 04                	jmp    c001e802 <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001e7fe:	3c 1c                	cmp    al,0x1c
c001e800:	75 d9                	jne    c001e7db <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001e802:	e4 60                	in     al,0x60
c001e804:	3c 5a                	cmp    al,0x5a
c001e806:	74 fa                	je     c001e802 <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001e808:	eb f4                	jmp    c001e7fe <PCI::foundDevice(PCIDeviceInfo)+0x310>
c001e80a:	83 ec 0c             	sub    esp,0xc
c001e80d:	68 0f 74 02 c0       	push   0xc002740f
c001e812:	e8 2a b6 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e817:	83 c4 10             	add    esp,0x10
c001e81a:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c001e821:	74 29                	je     c001e84c <PCI::foundDevice(PCIDeviceInfo)+0x35e>
c001e823:	83 ec 2c             	sub    esp,0x2c
c001e826:	b9 09 00 00 00       	mov    ecx,0x9
c001e82b:	8d 74 24 60          	lea    esi,[esp+0x60]
c001e82f:	fc                   	cld    
c001e830:	89 e7                	mov    edi,esp
c001e832:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e834:	55                   	push   ebp
c001e835:	e8 62 fd fe ff       	call   c000e59c <Device::preOpenPCI(PCIDeviceInfo)>
c001e83a:	83 c4 30             	add    esp,0x30
c001e83d:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c001e844:	74 33                	je     c001e879 <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001e846:	eb 18                	jmp    c001e860 <PCI::foundDevice(PCIDeviceInfo)+0x372>
c001e848:	3c 1c                	cmp    al,0x1c
c001e84a:	74 0c                	je     c001e858 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001e84c:	e4 60                	in     al,0x60
c001e84e:	3c 5a                	cmp    al,0x5a
c001e850:	75 f6                	jne    c001e848 <PCI::foundDevice(PCIDeviceInfo)+0x35a>
c001e852:	eb 04                	jmp    c001e858 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001e854:	3c 1c                	cmp    al,0x1c
c001e856:	75 cb                	jne    c001e823 <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001e858:	e4 60                	in     al,0x60
c001e85a:	3c 5a                	cmp    al,0x5a
c001e85c:	74 fa                	je     c001e858 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001e85e:	eb f4                	jmp    c001e854 <PCI::foundDevice(PCIDeviceInfo)+0x366>
c001e860:	83 ec 0c             	sub    esp,0xc
c001e863:	68 16 74 02 c0       	push   0xc0027416
c001e868:	e8 d4 b5 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e86d:	83 c4 10             	add    esp,0x10
c001e870:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c001e877:	74 23                	je     c001e89c <PCI::foundDevice(PCIDeviceInfo)+0x3ae>
c001e879:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001e87c:	6a 00                	push   0x0
c001e87e:	6a 00                	push   0x0
c001e880:	6a 00                	push   0x0
c001e882:	55                   	push   ebp
c001e883:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e886:	83 c4 10             	add    esp,0x10
c001e889:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c001e890:	0f 84 8f 00 00 00    	je     c001e925 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e896:	eb 18                	jmp    c001e8b0 <PCI::foundDevice(PCIDeviceInfo)+0x3c2>
c001e898:	3c 1c                	cmp    al,0x1c
c001e89a:	74 0c                	je     c001e8a8 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001e89c:	e4 60                	in     al,0x60
c001e89e:	3c 5a                	cmp    al,0x5a
c001e8a0:	75 f6                	jne    c001e898 <PCI::foundDevice(PCIDeviceInfo)+0x3aa>
c001e8a2:	eb 04                	jmp    c001e8a8 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001e8a4:	3c 1c                	cmp    al,0x1c
c001e8a6:	75 d1                	jne    c001e879 <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001e8a8:	e4 60                	in     al,0x60
c001e8aa:	3c 5a                	cmp    al,0x5a
c001e8ac:	74 fa                	je     c001e8a8 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001e8ae:	eb f4                	jmp    c001e8a4 <PCI::foundDevice(PCIDeviceInfo)+0x3b6>
c001e8b0:	83 ec 0c             	sub    esp,0xc
c001e8b3:	68 1d 74 02 c0       	push   0xc002741d
c001e8b8:	e8 84 b5 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e8bd:	83 c4 10             	add    esp,0x10
c001e8c0:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c001e8c7:	75 5c                	jne    c001e925 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e8c9:	e4 60                	in     al,0x60
c001e8cb:	3c 5a                	cmp    al,0x5a
c001e8cd:	74 04                	je     c001e8d3 <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001e8cf:	3c 1c                	cmp    al,0x1c
c001e8d1:	75 f6                	jne    c001e8c9 <PCI::foundDevice(PCIDeviceInfo)+0x3db>
c001e8d3:	e4 60                	in     al,0x60
c001e8d5:	3c 5a                	cmp    al,0x5a
c001e8d7:	74 fa                	je     c001e8d3 <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001e8d9:	3c 1c                	cmp    al,0x1c
c001e8db:	74 f6                	je     c001e8d3 <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001e8dd:	eb 46                	jmp    c001e925 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e8df:	83 ec 0c             	sub    esp,0xc
c001e8e2:	68 58 01 00 00       	push   0x158
c001e8e7:	e8 fb b4 fe ff       	call   c0009de7 <malloc>
c001e8ec:	89 c5                	mov    ebp,eax
c001e8ee:	58                   	pop    eax
c001e8ef:	5a                   	pop    edx
c001e8f0:	68 24 74 02 c0       	push   0xc0027424
c001e8f5:	55                   	push   ebp
c001e8f6:	e8 99 00 ff ff       	call   c000e994 <DriverlessDevice::DriverlessDevice(char const*)>
c001e8fb:	59                   	pop    ecx
c001e8fc:	5e                   	pop    esi
c001e8fd:	55                   	push   ebp
c001e8fe:	53                   	push   ebx
c001e8ff:	e8 86 fd fe ff       	call   c000e68a <Device::addChild(Device*)>
c001e904:	83 c4 10             	add    esp,0x10
c001e907:	b9 09 00 00 00       	mov    ecx,0x9
c001e90c:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001e910:	fc                   	cld    
c001e911:	89 fe                	mov    esi,edi
c001e913:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e915:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001e919:	83 c4 1c             	add    esp,0x1c
c001e91c:	5b                   	pop    ebx
c001e91d:	5e                   	pop    esi
c001e91e:	5f                   	pop    edi
c001e91f:	5d                   	pop    ebp
c001e920:	e9 77 fc fe ff       	jmp    c000e59c <Device::preOpenPCI(PCIDeviceInfo)>
c001e925:	83 c4 1c             	add    esp,0x1c
c001e928:	5b                   	pop    ebx
c001e929:	5e                   	pop    esi
c001e92a:	5f                   	pop    edi
c001e92b:	5d                   	pop    ebp
c001e92c:	c3                   	ret    
c001e92d:	90                   	nop

c001e92e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001e92e:	55                   	push   ebp
c001e92f:	57                   	push   edi
c001e930:	56                   	push   esi
c001e931:	53                   	push   ebx
c001e932:	81 ec b4 00 00 00    	sub    esp,0xb4
c001e938:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
c001e93f:	8b ac 24 c8 00 00 00 	mov    ebp,DWORD PTR [esp+0xc8]
c001e946:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e94a:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c001e951:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e955:	8b 84 24 d4 00 00 00 	mov    eax,DWORD PTR [esp+0xd4]
c001e95c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e960:	68 3e 74 02 c0       	push   0xc002743e
c001e965:	8d 5c 24 48          	lea    ebx,[esp+0x48]
c001e969:	53                   	push   ebx
c001e96a:	e8 e1 1d fe ff       	call   c0000750 <strcpy>
c001e96f:	0f b6 4c 24 24       	movzx  ecx,BYTE PTR [esp+0x24]
c001e974:	b2 64                	mov    dl,0x64
c001e976:	89 c8                	mov    eax,ecx
c001e978:	f6 f2                	div    dl
c001e97a:	b2 0a                	mov    dl,0xa
c001e97c:	83 c0 30             	add    eax,0x30
c001e97f:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001e983:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c001e987:	83 c4 10             	add    esp,0x10
c001e98a:	89 c8                	mov    eax,ecx
c001e98c:	f6 f2                	div    dl
c001e98e:	89 c1                	mov    ecx,eax
c001e990:	0f b6 c0             	movzx  eax,al
c001e993:	88 e9                	mov    cl,ch
c001e995:	f6 f2                	div    dl
c001e997:	88 e0                	mov    al,ah
c001e999:	83 c0 30             	add    eax,0x30
c001e99c:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001e9a0:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001e9a4:	8d 41 30             	lea    eax,[ecx+0x30]
c001e9a7:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c001e9ab:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c001e9af:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001e9b4:	f6 f2                	div    dl
c001e9b6:	89 c1                	mov    ecx,eax
c001e9b8:	0f b6 c0             	movzx  eax,al
c001e9bb:	88 e9                	mov    cl,ch
c001e9bd:	f6 f2                	div    dl
c001e9bf:	88 e0                	mov    al,ah
c001e9c1:	83 c0 30             	add    eax,0x30
c001e9c4:	88 44 24 26          	mov    BYTE PTR [esp+0x26],al
c001e9c8:	88 44 24 40          	mov    BYTE PTR [esp+0x40],al
c001e9cc:	8d 41 30             	lea    eax,[ecx+0x30]
c001e9cf:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001e9d3:	88 44 24 41          	mov    BYTE PTR [esp+0x41],al
c001e9d7:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001e9dc:	f6 f2                	div    dl
c001e9de:	89 c1                	mov    ecx,eax
c001e9e0:	0f b6 c0             	movzx  eax,al
c001e9e3:	88 e9                	mov    cl,ch
c001e9e5:	f6 f2                	div    dl
c001e9e7:	88 e0                	mov    al,ah
c001e9e9:	83 c0 30             	add    eax,0x30
c001e9ec:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c001e9f3:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001e9f7:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001e9fb:	8d 41 30             	lea    eax,[ecx+0x30]
c001e9fe:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c001ea02:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c001ea06:	74 29                	je     c001ea31 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001ea08:	83 ec 0c             	sub    esp,0xc
c001ea0b:	53                   	push   ebx
c001ea0c:	e8 30 b4 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001ea11:	83 c4 10             	add    esp,0x10
c001ea14:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c001ea1b:	75 14                	jne    c001ea31 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001ea1d:	e4 60                	in     al,0x60
c001ea1f:	3c 1c                	cmp    al,0x1c
c001ea21:	74 04                	je     c001ea27 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001ea23:	3c 5a                	cmp    al,0x5a
c001ea25:	75 f6                	jne    c001ea1d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xef>
c001ea27:	e4 60                	in     al,0x60
c001ea29:	3c 5a                	cmp    al,0x5a
c001ea2b:	74 fa                	je     c001ea27 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001ea2d:	3c 1c                	cmp    al,0x1c
c001ea2f:	74 f6                	je     c001ea27 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001ea31:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c001ea36:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c001ea3b:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001ea40:	83 ec 0c             	sub    esp,0xc
c001ea43:	6a 0c                	push   0xc
c001ea45:	56                   	push   esi
c001ea46:	53                   	push   ebx
c001ea47:	57                   	push   edi
c001ea48:	55                   	push   ebp
c001ea49:	e8 68 f3 ff ff       	call   c001ddb6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ea4e:	83 c4 20             	add    esp,0x20
c001ea51:	56                   	push   esi
c001ea52:	53                   	push   ebx
c001ea53:	57                   	push   edi
c001ea54:	55                   	push   ebp
c001ea55:	e8 50 f4 ff ff       	call   c001deaa <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001ea5a:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c001ea5f:	56                   	push   esi
c001ea60:	53                   	push   ebx
c001ea61:	57                   	push   edi
c001ea62:	55                   	push   ebp
c001ea63:	e8 d8 f4 ff ff       	call   c001df40 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001ea68:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c001ea6c:	83 c4 14             	add    esp,0x14
c001ea6f:	6a 3c                	push   0x3c
c001ea71:	56                   	push   esi
c001ea72:	53                   	push   ebx
c001ea73:	57                   	push   edi
c001ea74:	55                   	push   ebp
c001ea75:	e8 3c f3 ff ff       	call   c001ddb6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ea7a:	0f b6 c4             	movzx  eax,ah
c001ea7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ea81:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001ea85:	88 84 24 bd 00 00 00 	mov    BYTE PTR [esp+0xbd],al
c001ea8c:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c001ea91:	83 c4 20             	add    esp,0x20
c001ea94:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001ea9a:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c001eaa1:	0f 84 38 01 00 00    	je     c001ebdf <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001eaa7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001eaaf:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c001eab4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001eab8:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001eabe:	39 88 5c 11 00 00    	cmp    DWORD PTR [eax+0x115c],ecx
c001eac4:	0f 8e 15 01 00 00    	jle    c001ebdf <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001eaca:	50                   	push   eax
c001eacb:	50                   	push   eax
c001eacc:	68 59 74 02 c0       	push   0xc0027459
c001ead1:	8d 44 24 68          	lea    eax,[esp+0x68]
c001ead5:	50                   	push   eax
c001ead6:	e8 75 1c fe ff       	call   c0000750 <strcpy>
c001eadb:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001eadf:	b9 0a 00 00 00       	mov    ecx,0xa
c001eae4:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001eae8:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001eaec:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001eaf0:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c001eaf4:	88 44 24 6e          	mov    BYTE PTR [esp+0x6e],al
c001eaf8:	8a 44 24 36          	mov    al,BYTE PTR [esp+0x36]
c001eafc:	88 44 24 70          	mov    BYTE PTR [esp+0x70],al
c001eb00:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001eb04:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c001eb08:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001eb0c:	88 44 24 73          	mov    BYTE PTR [esp+0x73],al
c001eb10:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c001eb14:	88 44 24 74          	mov    BYTE PTR [esp+0x74],al
c001eb18:	83 c4 10             	add    esp,0x10
c001eb1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eb1f:	99                   	cdq    
c001eb20:	f7 f9                	idiv   ecx
c001eb22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001eb26:	99                   	cdq    
c001eb27:	f7 f9                	idiv   ecx
c001eb29:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c001eb2d:	83 c2 30             	add    edx,0x30
c001eb30:	83 c0 30             	add    eax,0x30
c001eb33:	88 54 24 66          	mov    BYTE PTR [esp+0x66],dl
c001eb37:	88 44 24 67          	mov    BYTE PTR [esp+0x67],al
c001eb3b:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c001eb42:	74 2d                	je     c001eb71 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001eb44:	83 ec 0c             	sub    esp,0xc
c001eb47:	8d 44 24 68          	lea    eax,[esp+0x68]
c001eb4b:	50                   	push   eax
c001eb4c:	e8 f0 b2 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001eb51:	83 c4 10             	add    esp,0x10
c001eb54:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c001eb5b:	75 14                	jne    c001eb71 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001eb5d:	e4 60                	in     al,0x60
c001eb5f:	3c 5a                	cmp    al,0x5a
c001eb61:	74 04                	je     c001eb67 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001eb63:	3c 1c                	cmp    al,0x1c
c001eb65:	75 f6                	jne    c001eb5d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x22f>
c001eb67:	e4 60                	in     al,0x60
c001eb69:	3c 5a                	cmp    al,0x5a
c001eb6b:	74 fa                	je     c001eb67 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001eb6d:	3c 1c                	cmp    al,0x1c
c001eb6f:	74 f6                	je     c001eb67 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001eb71:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001eb75:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c001eb7a:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001eb80:	8d 04 d0             	lea    eax,[eax+edx*8]
c001eb83:	0f b7 90 5c 01 00 00 	movzx  edx,WORD PTR [eax+0x15c]
c001eb8a:	39 d3                	cmp    ebx,edx
c001eb8c:	75 48                	jne    c001ebd6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001eb8e:	0f b6 80 5e 01 00 00 	movzx  eax,BYTE PTR [eax+0x15e]
c001eb95:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c001eb99:	75 3b                	jne    c001ebd6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001eb9b:	83 ec 0c             	sub    esp,0xc
c001eb9e:	68 88 74 02 c0       	push   0xc0027488
c001eba3:	e8 6f e5 fe ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c001eba8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ebac:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c001ebb1:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001ebb7:	0f b6 84 d0 5f 01 00 00 	movzx  eax,BYTE PTR [eax+edx*8+0x15f]
c001ebbf:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001ebc3:	50                   	push   eax
c001ebc4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ebc8:	53                   	push   ebx
c001ebc9:	68 ad 74 02 c0       	push   0xc00274ad
c001ebce:	e8 44 e5 fe ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c001ebd3:	83 c4 20             	add    esp,0x20
c001ebd6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ebda:	e9 d0 fe ff ff       	jmp    c001eaaf <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x181>
c001ebdf:	31 d2                	xor    edx,edx
c001ebe1:	83 ec 0c             	sub    esp,0xc
c001ebe4:	56                   	push   esi
c001ebe5:	53                   	push   ebx
c001ebe6:	57                   	push   edi
c001ebe7:	52                   	push   edx
c001ebe8:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001ebec:	55                   	push   ebp
c001ebed:	e8 9a f3 ff ff       	call   c001df8c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ebf2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ebf6:	89 84 94 a4 00 00 00 	mov    DWORD PTR [esp+edx*4+0xa4],eax
c001ebfd:	42                   	inc    edx
c001ebfe:	83 c4 20             	add    esp,0x20
c001ec01:	83 fa 06             	cmp    edx,0x6
c001ec04:	75 db                	jne    c001ebe1 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b3>
c001ec06:	66 8b 44 24 2a       	mov    ax,WORD PTR [esp+0x2a]
c001ec0b:	83 ec 0c             	sub    esp,0xc
c001ec0e:	86 e0                	xchg   al,ah
c001ec10:	66 89 84 24 88 00 00 00 	mov    WORD PTR [esp+0x88],ax
c001ec18:	6a 02                	push   0x2
c001ec1a:	56                   	push   esi
c001ec1b:	53                   	push   ebx
c001ec1c:	57                   	push   edi
c001ec1d:	55                   	push   ebp
c001ec1e:	e8 93 f1 ff ff       	call   c001ddb6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ec23:	66 89 84 24 be 00 00 00 	mov    WORD PTR [esp+0xbe],ax
c001ec2b:	83 c4 20             	add    esp,0x20
c001ec2e:	56                   	push   esi
c001ec2f:	53                   	push   ebx
c001ec30:	57                   	push   edi
c001ec31:	55                   	push   ebp
c001ec32:	e8 bd f2 ff ff       	call   c001def4 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001ec37:	88 84 24 93 00 00 00 	mov    BYTE PTR [esp+0x93],al
c001ec3e:	56                   	push   esi
c001ec3f:	53                   	push   ebx
c001ec40:	57                   	push   edi
c001ec41:	55                   	push   ebp
c001ec42:	e8 17 f2 ff ff       	call   c001de5e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ec47:	b9 09 00 00 00       	mov    ecx,0x9
c001ec4c:	66 89 84 24 9e 00 00 00 	mov    WORD PTR [esp+0x9e],ax
c001ec54:	8a 44 24 42          	mov    al,BYTE PTR [esp+0x42]
c001ec58:	88 84 24 bc 00 00 00 	mov    BYTE PTR [esp+0xbc],al
c001ec5f:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001ec63:	88 84 24 a0 00 00 00 	mov    BYTE PTR [esp+0xa0],al
c001ec6a:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001ec6e:	88 84 24 a1 00 00 00 	mov    BYTE PTR [esp+0xa1],al
c001ec75:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001ec79:	88 84 24 a2 00 00 00 	mov    BYTE PTR [esp+0xa2],al
c001ec80:	83 ec 0c             	sub    esp,0xc
c001ec83:	fc                   	cld    
c001ec84:	89 e7                	mov    edi,esp
c001ec86:	8d b4 24 a8 00 00 00 	lea    esi,[esp+0xa8]
c001ec8d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ec8f:	55                   	push   ebp
c001ec90:	e8 59 f8 ff ff       	call   c001e4ee <PCI::foundDevice(PCIDeviceInfo)>
c001ec95:	81 c4 dc 00 00 00    	add    esp,0xdc
c001ec9b:	5b                   	pop    ebx
c001ec9c:	5e                   	pop    esi
c001ec9d:	5f                   	pop    edi
c001ec9e:	5d                   	pop    ebp
c001ec9f:	c3                   	ret    

c001eca0 <PCI::checkDevice(unsigned char, unsigned char)>:
c001eca0:	55                   	push   ebp
c001eca1:	57                   	push   edi
c001eca2:	56                   	push   esi
c001eca3:	53                   	push   ebx
c001eca4:	83 ec 0c             	sub    esp,0xc
c001eca7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001ecab:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001ecb0:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001ecb5:	6a 00                	push   0x0
c001ecb7:	56                   	push   esi
c001ecb8:	57                   	push   edi
c001ecb9:	55                   	push   ebp
c001ecba:	e8 9f f1 ff ff       	call   c001de5e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ecbf:	6a 00                	push   0x0
c001ecc1:	56                   	push   esi
c001ecc2:	57                   	push   edi
c001ecc3:	55                   	push   ebp
c001ecc4:	e8 65 fc ff ff       	call   c001e92e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001ecc9:	83 c4 20             	add    esp,0x20
c001eccc:	6a 00                	push   0x0
c001ecce:	56                   	push   esi
c001eccf:	57                   	push   edi
c001ecd0:	55                   	push   ebp
c001ecd1:	e8 ac f1 ff ff       	call   c001de82 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001ecd6:	83 c4 10             	add    esp,0x10
c001ecd9:	84 c0                	test   al,al
c001ecdb:	79 27                	jns    c001ed04 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001ecdd:	bb 01 00 00 00       	mov    ebx,0x1
c001ece2:	53                   	push   ebx
c001ece3:	56                   	push   esi
c001ece4:	57                   	push   edi
c001ece5:	55                   	push   ebp
c001ece6:	e8 73 f1 ff ff       	call   c001de5e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001eceb:	83 c4 10             	add    esp,0x10
c001ecee:	66 40                	inc    ax
c001ecf0:	74 0c                	je     c001ecfe <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001ecf2:	53                   	push   ebx
c001ecf3:	56                   	push   esi
c001ecf4:	57                   	push   edi
c001ecf5:	55                   	push   ebp
c001ecf6:	e8 33 fc ff ff       	call   c001e92e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001ecfb:	83 c4 10             	add    esp,0x10
c001ecfe:	43                   	inc    ebx
c001ecff:	83 fb 08             	cmp    ebx,0x8
c001ed02:	75 de                	jne    c001ece2 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001ed04:	83 c4 0c             	add    esp,0xc
c001ed07:	5b                   	pop    ebx
c001ed08:	5e                   	pop    esi
c001ed09:	5f                   	pop    edi
c001ed0a:	5d                   	pop    ebp
c001ed0b:	c3                   	ret    

c001ed0c <PCI::detect()>:
c001ed0c:	56                   	push   esi
c001ed0d:	53                   	push   ebx
c001ed0e:	53                   	push   ebx
c001ed0f:	31 db                	xor    ebx,ebx
c001ed11:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ed15:	6a 00                	push   0x0
c001ed17:	6a 00                	push   0x0
c001ed19:	6a 00                	push   0x0
c001ed1b:	56                   	push   esi
c001ed1c:	e8 61 f1 ff ff       	call   c001de82 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001ed21:	83 c4 10             	add    esp,0x10
c001ed24:	a8 80                	test   al,0x80
c001ed26:	75 21                	jne    c001ed49 <PCI::detect()+0x3d>
c001ed28:	51                   	push   ecx
c001ed29:	51                   	push   ecx
c001ed2a:	6a 00                	push   0x0
c001ed2c:	56                   	push   esi
c001ed2d:	e8 98 f7 ff ff       	call   c001e4ca <PCI::checkBus(unsigned char)>
c001ed32:	83 c4 10             	add    esp,0x10
c001ed35:	eb 24                	jmp    c001ed5b <PCI::detect()+0x4f>
c001ed37:	52                   	push   edx
c001ed38:	52                   	push   edx
c001ed39:	53                   	push   ebx
c001ed3a:	43                   	inc    ebx
c001ed3b:	56                   	push   esi
c001ed3c:	e8 89 f7 ff ff       	call   c001e4ca <PCI::checkBus(unsigned char)>
c001ed41:	83 c4 10             	add    esp,0x10
c001ed44:	83 fb 08             	cmp    ebx,0x8
c001ed47:	74 12                	je     c001ed5b <PCI::detect()+0x4f>
c001ed49:	53                   	push   ebx
c001ed4a:	6a 00                	push   0x0
c001ed4c:	6a 00                	push   0x0
c001ed4e:	56                   	push   esi
c001ed4f:	e8 0a f1 ff ff       	call   c001de5e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ed54:	83 c4 10             	add    esp,0x10
c001ed57:	66 40                	inc    ax
c001ed59:	74 dc                	je     c001ed37 <PCI::detect()+0x2b>
c001ed5b:	58                   	pop    eax
c001ed5c:	5b                   	pop    ebx
c001ed5d:	5e                   	pop    esi
c001ed5e:	c3                   	ret    
c001ed5f:	90                   	nop

c001ed60 <IDE::close(int, int, void*)>:
c001ed60:	83 c8 ff             	or     eax,0xffffffff
c001ed63:	c3                   	ret    

c001ed64 <IDE::IDE()>:
c001ed64:	83 ec 0c             	sub    esp,0xc
c001ed67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed6b:	83 ec 08             	sub    esp,0x8
c001ed6e:	68 f4 74 02 c0       	push   0xc00274f4
c001ed73:	50                   	push   eax
c001ed74:	e8 bf fc fe ff       	call   c000ea38 <HardDiskController::HardDiskController(char const*)>
c001ed79:	83 c4 10             	add    esp,0x10
c001ed7c:	ba a0 75 02 c0       	mov    edx,0xc00275a0
c001ed81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed85:	89 10                	mov    DWORD PTR [eax],edx
c001ed87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed8b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001ed92:	90                   	nop
c001ed93:	83 c4 0c             	add    esp,0xc
c001ed96:	c3                   	ret    
c001ed97:	90                   	nop

c001ed98 <IDE::prepareInterrupt(unsigned char)>:
c001ed98:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ed9d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001eda1:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001eda9:	c3                   	ret    

c001edaa <selectDrive(unsigned char, unsigned char)>:
c001edaa:	c3                   	ret    
c001edab:	90                   	nop

c001edac <IDE::getBase(unsigned char)>:
c001edac:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001edb1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001edb5:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001edbd:	c3                   	ret    

c001edbe <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001edbe:	55                   	push   ebp
c001edbf:	57                   	push   edi
c001edc0:	56                   	push   esi
c001edc1:	53                   	push   ebx
c001edc2:	83 ec 1c             	sub    esp,0x1c
c001edc5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001edc9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001edcd:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001edd0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001edd4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001edd8:	80 f9 03             	cmp    cl,0x3
c001eddb:	77 51                	ja     c001ee2e <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001eddd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ede1:	0f b6 f2             	movzx  esi,dl
c001ede4:	0f b6 db             	movzx  ebx,bl
c001ede7:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001edea:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001edee:	83 ca 80             	or     edx,0xffffff80
c001edf1:	0f b6 d2             	movzx  edx,dl
c001edf4:	52                   	push   edx
c001edf5:	6a 0c                	push   0xc
c001edf7:	56                   	push   esi
c001edf8:	57                   	push   edi
c001edf9:	e8 c0 ff ff ff       	call   c001edbe <IDE::write(unsigned char, unsigned char, unsigned char)>
c001edfe:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001ee03:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ee07:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001ee0b:	ee                   	out    dx,al
c001ee0c:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001ee11:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001ee15:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001ee19:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ee1d:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001ee25:	83 c4 2c             	add    esp,0x2c
c001ee28:	5b                   	pop    ebx
c001ee29:	5e                   	pop    esi
c001ee2a:	5f                   	pop    edi
c001ee2b:	5d                   	pop    ebp
c001ee2c:	eb 90                	jmp    c001edbe <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ee2e:	80 fb 07             	cmp    bl,0x7
c001ee31:	77 12                	ja     c001ee45 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001ee33:	0f b6 d2             	movzx  edx,dl
c001ee36:	0f b6 db             	movzx  ebx,bl
c001ee39:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001ee41:	89 da                	mov    edx,ebx
c001ee43:	eb 2f                	jmp    c001ee74 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001ee45:	80 fb 0d             	cmp    bl,0xd
c001ee48:	77 13                	ja     c001ee5d <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001ee4a:	0f b6 d2             	movzx  edx,dl
c001ee4d:	0f b6 db             	movzx  ebx,bl
c001ee50:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001ee57:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001ee5b:	eb 17                	jmp    c001ee74 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001ee5d:	80 fb 15             	cmp    bl,0x15
c001ee60:	77 13                	ja     c001ee75 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001ee62:	0f b6 d2             	movzx  edx,dl
c001ee65:	0f b6 db             	movzx  ebx,bl
c001ee68:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001ee70:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001ee74:	ee                   	out    dx,al
c001ee75:	83 c4 1c             	add    esp,0x1c
c001ee78:	5b                   	pop    ebx
c001ee79:	5e                   	pop    esi
c001ee7a:	5f                   	pop    edi
c001ee7b:	5d                   	pop    ebp
c001ee7c:	c3                   	ret    
c001ee7d:	90                   	nop

c001ee7e <IDE::read(unsigned char, unsigned char)>:
c001ee7e:	55                   	push   ebp
c001ee7f:	57                   	push   edi
c001ee80:	56                   	push   esi
c001ee81:	53                   	push   ebx
c001ee82:	83 ec 1c             	sub    esp,0x1c
c001ee85:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ee89:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ee8d:	8d 43 f8             	lea    eax,[ebx-0x8]
c001ee90:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ee94:	3c 03                	cmp    al,0x3
c001ee96:	77 43                	ja     c001eedb <IDE::read(unsigned char, unsigned char)+0x5d>
c001ee98:	0f b6 f2             	movzx  esi,dl
c001ee9b:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001ee9e:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001eea2:	83 c8 80             	or     eax,0xffffff80
c001eea5:	0f b6 c0             	movzx  eax,al
c001eea8:	50                   	push   eax
c001eea9:	6a 0c                	push   0xc
c001eeab:	56                   	push   esi
c001eeac:	57                   	push   edi
c001eead:	e8 0c ff ff ff       	call   c001edbe <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eeb2:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001eeb7:	0f b6 c3             	movzx  eax,bl
c001eeba:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001eebe:	ec                   	in     al,dx
c001eebf:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001eec3:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001eec8:	52                   	push   edx
c001eec9:	6a 0c                	push   0xc
c001eecb:	56                   	push   esi
c001eecc:	57                   	push   edi
c001eecd:	e8 ec fe ff ff       	call   c001edbe <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eed2:	83 c4 20             	add    esp,0x20
c001eed5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001eed9:	eb 49                	jmp    c001ef24 <IDE::read(unsigned char, unsigned char)+0xa6>
c001eedb:	80 fb 07             	cmp    bl,0x7
c001eede:	77 12                	ja     c001eef2 <IDE::read(unsigned char, unsigned char)+0x74>
c001eee0:	0f b6 d2             	movzx  edx,dl
c001eee3:	0f b6 c3             	movzx  eax,bl
c001eee6:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001eeee:	89 c2                	mov    edx,eax
c001eef0:	eb 31                	jmp    c001ef23 <IDE::read(unsigned char, unsigned char)+0xa5>
c001eef2:	80 fb 0d             	cmp    bl,0xd
c001eef5:	77 13                	ja     c001ef0a <IDE::read(unsigned char, unsigned char)+0x8c>
c001eef7:	0f b6 d2             	movzx  edx,dl
c001eefa:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001ef01:	0f b6 d3             	movzx  edx,bl
c001ef04:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001ef08:	eb 19                	jmp    c001ef23 <IDE::read(unsigned char, unsigned char)+0xa5>
c001ef0a:	31 c0                	xor    eax,eax
c001ef0c:	80 fb 15             	cmp    bl,0x15
c001ef0f:	77 13                	ja     c001ef24 <IDE::read(unsigned char, unsigned char)+0xa6>
c001ef11:	0f b6 d2             	movzx  edx,dl
c001ef14:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001ef1c:	0f b6 d3             	movzx  edx,bl
c001ef1f:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001ef23:	ec                   	in     al,dx
c001ef24:	83 c4 1c             	add    esp,0x1c
c001ef27:	5b                   	pop    ebx
c001ef28:	5e                   	pop    esi
c001ef29:	5f                   	pop    edi
c001ef2a:	5d                   	pop    ebp
c001ef2b:	c3                   	ret    

c001ef2c <IDE::waitInterrupt(unsigned char)>:
c001ef2c:	55                   	push   ebp
c001ef2d:	57                   	push   edi
c001ef2e:	56                   	push   esi
c001ef2f:	53                   	push   ebx
c001ef30:	31 db                	xor    ebx,ebx
c001ef32:	83 ec 0c             	sub    esp,0xc
c001ef35:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ef39:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001ef3e:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001ef46:	89 e8                	mov    eax,ebp
c001ef48:	84 c0                	test   al,al
c001ef4a:	75 30                	jne    c001ef7c <IDE::waitInterrupt(unsigned char)+0x50>
c001ef4c:	50                   	push   eax
c001ef4d:	6a 0c                	push   0xc
c001ef4f:	56                   	push   esi
c001ef50:	57                   	push   edi
c001ef51:	e8 28 ff ff ff       	call   c001ee7e <IDE::read(unsigned char, unsigned char)>
c001ef56:	83 c4 10             	add    esp,0x10
c001ef59:	a8 01                	test   al,0x1
c001ef5b:	75 27                	jne    c001ef84 <IDE::waitInterrupt(unsigned char)+0x58>
c001ef5d:	f6 c3 04             	test   bl,0x4
c001ef60:	75 12                	jne    c001ef74 <IDE::waitInterrupt(unsigned char)+0x48>
c001ef62:	83 fb 32             	cmp    ebx,0x32
c001ef65:	7e 0d                	jle    c001ef74 <IDE::waitInterrupt(unsigned char)+0x48>
c001ef67:	83 ec 0c             	sub    esp,0xc
c001ef6a:	6a 64                	push   0x64
c001ef6c:	e8 db a2 ff ff       	call   c001924c <milliTenthSleep(unsigned int)>
c001ef71:	83 c4 10             	add    esp,0x10
c001ef74:	83 fb 3c             	cmp    ebx,0x3c
c001ef77:	74 0b                	je     c001ef84 <IDE::waitInterrupt(unsigned char)+0x58>
c001ef79:	43                   	inc    ebx
c001ef7a:	eb c2                	jmp    c001ef3e <IDE::waitInterrupt(unsigned char)+0x12>
c001ef7c:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001ef84:	83 c4 0c             	add    esp,0xc
c001ef87:	89 e8                	mov    eax,ebp
c001ef89:	5b                   	pop    ebx
c001ef8a:	5e                   	pop    esi
c001ef8b:	5f                   	pop    edi
c001ef8c:	5d                   	pop    ebp
c001ef8d:	c3                   	ret    

c001ef8e <ideChannel0IRQHandler(regs*, void*)>:
c001ef8e:	83 ec 10             	sub    esp,0x10
c001ef91:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ef95:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001ef9c:	6a 07                	push   0x7
c001ef9e:	6a 00                	push   0x0
c001efa0:	50                   	push   eax
c001efa1:	e8 d8 fe ff ff       	call   c001ee7e <IDE::read(unsigned char, unsigned char)>
c001efa6:	83 c4 1c             	add    esp,0x1c
c001efa9:	c3                   	ret    

c001efaa <ideChannel1IRQHandler(regs*, void*)>:
c001efaa:	83 ec 10             	sub    esp,0x10
c001efad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001efb1:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001efb8:	6a 07                	push   0x7
c001efba:	6a 01                	push   0x1
c001efbc:	50                   	push   eax
c001efbd:	e8 bc fe ff ff       	call   c001ee7e <IDE::read(unsigned char, unsigned char)>
c001efc2:	83 c4 1c             	add    esp,0x1c
c001efc5:	c3                   	ret    

c001efc6 <IDE::enableIRQs(unsigned char, bool)>:
c001efc6:	57                   	push   edi
c001efc7:	56                   	push   esi
c001efc8:	be 04 00 00 00       	mov    esi,0x4
c001efcd:	53                   	push   ebx
c001efce:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001efd3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001efd7:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001efdc:	0f 94 c0             	sete   al
c001efdf:	d1 e0                	shl    eax,1
c001efe1:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001efe8:	0f b6 c0             	movzx  eax,al
c001efeb:	50                   	push   eax
c001efec:	6a 0c                	push   0xc
c001efee:	57                   	push   edi
c001efef:	53                   	push   ebx
c001eff0:	e8 c9 fd ff ff       	call   c001edbe <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eff5:	83 c4 10             	add    esp,0x10
c001eff8:	50                   	push   eax
c001eff9:	6a 0c                	push   0xc
c001effb:	57                   	push   edi
c001effc:	53                   	push   ebx
c001effd:	e8 7c fe ff ff       	call   c001ee7e <IDE::read(unsigned char, unsigned char)>
c001f002:	83 c4 10             	add    esp,0x10
c001f005:	4e                   	dec    esi
c001f006:	75 f0                	jne    c001eff8 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001f008:	5b                   	pop    ebx
c001f009:	5e                   	pop    esi
c001f00a:	5f                   	pop    edi
c001f00b:	c3                   	ret    

c001f00c <IDE::open(int, int, void*)>:
c001f00c:	55                   	push   ebp
c001f00d:	57                   	push   edi
c001f00e:	56                   	push   esi
c001f00f:	53                   	push   ebx
c001f010:	83 ec 1c             	sub    esp,0x1c
c001f013:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f017:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001f020:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001f029:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001f030:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001f037:	0f 85 cb 02 00 00    	jne    c001f308 <IDE::open(int, int, void*)+0x2fc>
c001f03d:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001f043:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001f047:	83 e0 7f             	and    eax,0x7f
c001f04a:	3c 05                	cmp    al,0x5
c001f04c:	74 04                	je     c001f052 <IDE::open(int, int, void*)+0x46>
c001f04e:	3c 0f                	cmp    al,0xf
c001f050:	75 32                	jne    c001f084 <IDE::open(int, int, void*)+0x78>
c001f052:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001f058:	83 e0 fc             	and    eax,0xfffffffc
c001f05b:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001f062:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001f068:	83 e0 fc             	and    eax,0xfffffffc
c001f06b:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001f072:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001f078:	83 e0 fc             	and    eax,0xfffffffc
c001f07b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001f082:	eb 14                	jmp    c001f098 <IDE::open(int, int, void*)+0x8c>
c001f084:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001f08e:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001f098:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001f09f:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001f0a6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f0aa:	89 c6                	mov    esi,eax
c001f0ac:	bf f8 0c 00 00       	mov    edi,0xcf8
c001f0b1:	c1 e6 10             	shl    esi,0x10
c001f0b4:	89 e8                	mov    eax,ebp
c001f0b6:	89 fa                	mov    edx,edi
c001f0b8:	c1 e0 0b             	shl    eax,0xb
c001f0bb:	09 f0                	or     eax,esi
c001f0bd:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001f0c4:	c1 e6 08             	shl    esi,0x8
c001f0c7:	09 c6                	or     esi,eax
c001f0c9:	89 f0                	mov    eax,esi
c001f0cb:	0d 08 00 00 80       	or     eax,0x80000008
c001f0d0:	ef                   	out    dx,eax
c001f0d1:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001f0d6:	89 ca                	mov    edx,ecx
c001f0d8:	ed                   	in     eax,dx
c001f0d9:	c1 e8 10             	shr    eax,0x10
c001f0dc:	3d ff ff 00 00       	cmp    eax,0xffff
c001f0e1:	0f 84 f5 00 00 00    	je     c001f1dc <IDE::open(int, int, void*)+0x1d0>
c001f0e7:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001f0ed:	89 fa                	mov    edx,edi
c001f0ef:	89 f0                	mov    eax,esi
c001f0f1:	ef                   	out    dx,eax
c001f0f2:	b0 fe                	mov    al,0xfe
c001f0f4:	89 ca                	mov    edx,ecx
c001f0f6:	ee                   	out    dx,al
c001f0f7:	89 f0                	mov    eax,esi
c001f0f9:	89 fa                	mov    edx,edi
c001f0fb:	ef                   	out    dx,eax
c001f0fc:	89 ca                	mov    edx,ecx
c001f0fe:	ed                   	in     eax,dx
c001f0ff:	3c fe                	cmp    al,0xfe
c001f101:	0f 85 a9 00 00 00    	jne    c001f1b0 <IDE::open(int, int, void*)+0x1a4>
c001f107:	8b 15 08 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028c08
c001f10d:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001f114:	74 33                	je     c001f149 <IDE::open(int, int, void*)+0x13d>
c001f116:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001f11c:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001f120:	40                   	inc    eax
c001f121:	83 ec 0c             	sub    esp,0xc
c001f124:	0f b6 c0             	movzx  eax,al
c001f127:	50                   	push   eax
c001f128:	55                   	push   ebp
c001f129:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001f12d:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001f133:	51                   	push   ecx
c001f134:	e8 cf 35 ff ff       	call   c0012708 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001f139:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001f13e:	83 c4 1c             	add    esp,0x1c
c001f141:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001f147:	eb 0a                	jmp    c001f153 <IDE::open(int, int, void*)+0x147>
c001f149:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001f153:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001f15a:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001f161:	c1 e1 10             	shl    ecx,0x10
c001f164:	c1 e0 08             	shl    eax,0x8
c001f167:	bf f8 0c 00 00       	mov    edi,0xcf8
c001f16c:	09 c1                	or     ecx,eax
c001f16e:	89 fa                	mov    edx,edi
c001f170:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001f177:	c1 e0 0b             	shl    eax,0xb
c001f17a:	09 c1                	or     ecx,eax
c001f17c:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001f182:	89 c8                	mov    eax,ecx
c001f184:	ef                   	out    dx,eax
c001f185:	be fc 0c 00 00       	mov    esi,0xcfc
c001f18a:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001f190:	89 f2                	mov    edx,esi
c001f192:	ee                   	out    dx,al
c001f193:	89 c8                	mov    eax,ecx
c001f195:	89 fa                	mov    edx,edi
c001f197:	ef                   	out    dx,eax
c001f198:	89 f2                	mov    edx,esi
c001f19a:	ed                   	in     eax,dx
c001f19b:	0f b6 c0             	movzx  eax,al
c001f19e:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001f1a4:	74 46                	je     c001f1ec <IDE::open(int, int, void*)+0x1e0>
c001f1a6:	83 ec 0c             	sub    esp,0xc
c001f1a9:	68 0c 75 02 c0       	push   0xc002750c
c001f1ae:	eb 34                	jmp    c001f1e4 <IDE::open(int, int, void*)+0x1d8>
c001f1b0:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001f1b9:	75 17                	jne    c001f1d2 <IDE::open(int, int, void*)+0x1c6>
c001f1bb:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001f1c0:	74 07                	je     c001f1c9 <IDE::open(int, int, void*)+0x1bd>
c001f1c2:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001f1c7:	75 09                	jne    c001f1d2 <IDE::open(int, int, void*)+0x1c6>
c001f1c9:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001f1d0:	eb 1a                	jmp    c001f1ec <IDE::open(int, int, void*)+0x1e0>
c001f1d2:	83 ec 0c             	sub    esp,0xc
c001f1d5:	68 14 75 02 c0       	push   0xc0027514
c001f1da:	eb 08                	jmp    c001f1e4 <IDE::open(int, int, void*)+0x1d8>
c001f1dc:	83 ec 0c             	sub    esp,0xc
c001f1df:	68 45 75 02 c0       	push   0xc0027545
c001f1e4:	e8 10 60 ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c001f1e9:	83 c4 10             	add    esp,0x10
c001f1ec:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001f1f3:	79 1a                	jns    c001f20f <IDE::open(int, int, void*)+0x203>
c001f1f5:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001f1fb:	83 e0 fc             	and    eax,0xfffffffc
c001f1fe:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001f205:	83 c0 08             	add    eax,0x8
c001f208:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001f20f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001f215:	89 c2                	mov    edx,eax
c001f217:	83 e2 0f             	and    edx,0xf
c001f21a:	66 83 fa 08          	cmp    dx,0x8
c001f21e:	75 0a                	jne    c001f22a <IDE::open(int, int, void*)+0x21e>
c001f220:	83 e8 02             	sub    eax,0x2
c001f223:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001f22a:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001f230:	89 c2                	mov    edx,eax
c001f232:	83 e2 0f             	and    edx,0xf
c001f235:	66 83 fa 08          	cmp    dx,0x8
c001f239:	75 0a                	jne    c001f245 <IDE::open(int, int, void*)+0x239>
c001f23b:	83 e8 02             	sub    eax,0x2
c001f23e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001f245:	0f b6 8b c4 00 00 00 	movzx  ecx,BYTE PTR [ebx+0xc4]
c001f24c:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001f253:	89 c8                	mov    eax,ecx
c001f255:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001f258:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001f25c:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001f260:	8d 51 01             	lea    edx,[ecx+0x1]
c001f263:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001f268:	0f b6 d2             	movzx  edx,dl
c001f26b:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001f272:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001f275:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001f279:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001f27d:	8d 48 02             	lea    ecx,[eax+0x2]
c001f280:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001f285:	0f b6 c9             	movzx  ecx,cl
c001f288:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001f28e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001f291:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001f295:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001f299:	8d 50 03             	lea    edx,[eax+0x3]
c001f29c:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001f2a1:	0f b6 d2             	movzx  edx,dl
c001f2a4:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001f2aa:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001f2ad:	83 c0 04             	add    eax,0x4
c001f2b0:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001f2b4:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001f2b8:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001f2be:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001f2c3:	56                   	push   esi
c001f2c4:	56                   	push   esi
c001f2c5:	0f b7 83 5e 01 00 00 	movzx  eax,WORD PTR [ebx+0x15e]
c001f2cc:	50                   	push   eax
c001f2cd:	68 6f 75 02 c0       	push   0xc002756f
c001f2d2:	e8 40 de fe ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c001f2d7:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001f2de:	83 c4 10             	add    esp,0x10
c001f2e1:	66 85 f6             	test   si,si
c001f2e4:	74 5f                	je     c001f345 <IDE::open(int, int, void*)+0x339>
c001f2e6:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001f2ed:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001f2f0:	89 d0                	mov    eax,edx
c001f2f2:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001f2f6:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001f2fa:	40                   	inc    eax
c001f2fb:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001f301:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001f306:	eb 3d                	jmp    c001f345 <IDE::open(int, int, void*)+0x339>
c001f308:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001f30e:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001f315:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001f31c:	66 05 06 02          	add    ax,0x206
c001f320:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001f327:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001f32e:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001f335:	66 05 06 02          	add    ax,0x206
c001f339:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001f340:	e9 ca fe ff ff       	jmp    c001f20f <IDE::open(int, int, void*)+0x203>
c001f345:	50                   	push   eax
c001f346:	50                   	push   eax
c001f347:	6a 00                	push   0x0
c001f349:	53                   	push   ebx
c001f34a:	e8 49 fa ff ff       	call   c001ed98 <IDE::prepareInterrupt(unsigned char)>
c001f34f:	5a                   	pop    edx
c001f350:	59                   	pop    ecx
c001f351:	6a 01                	push   0x1
c001f353:	53                   	push   ebx
c001f354:	e8 3f fa ff ff       	call   c001ed98 <IDE::prepareInterrupt(unsigned char)>
c001f359:	83 c4 0c             	add    esp,0xc
c001f35c:	6a 00                	push   0x0
c001f35e:	6a 00                	push   0x0
c001f360:	53                   	push   ebx
c001f361:	e8 60 fc ff ff       	call   c001efc6 <IDE::enableIRQs(unsigned char, bool)>
c001f366:	83 c4 0c             	add    esp,0xc
c001f369:	6a 00                	push   0x0
c001f36b:	6a 01                	push   0x1
c001f36d:	53                   	push   ebx
c001f36e:	e8 53 fc ff ff       	call   c001efc6 <IDE::enableIRQs(unsigned char, bool)>
c001f373:	83 c4 10             	add    esp,0x10
c001f376:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001f37d:	74 34                	je     c001f3b3 <IDE::open(int, int, void*)+0x3a7>
c001f37f:	83 ec 0c             	sub    esp,0xc
c001f382:	53                   	push   ebx
c001f383:	6a 01                	push   0x1
c001f385:	68 8e ef 01 c0       	push   0xc001ef8e
c001f38a:	6a 0e                	push   0xe
c001f38c:	53                   	push   ebx
c001f38d:	e8 70 f2 fe ff       	call   c000e602 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f392:	83 c4 14             	add    esp,0x14
c001f395:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001f39b:	53                   	push   ebx
c001f39c:	6a 01                	push   0x1
c001f39e:	68 aa ef 01 c0       	push   0xc001efaa
c001f3a3:	6a 0f                	push   0xf
c001f3a5:	53                   	push   ebx
c001f3a6:	e8 57 f2 fe ff       	call   c000e602 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f3ab:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001f3b1:	eb 38                	jmp    c001f3eb <IDE::open(int, int, void*)+0x3df>
c001f3b3:	83 ec 0c             	sub    esp,0xc
c001f3b6:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001f3c0:	53                   	push   ebx
c001f3c1:	6a 00                	push   0x0
c001f3c3:	68 8e ef 01 c0       	push   0xc001ef8e
c001f3c8:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001f3ce:	53                   	push   ebx
c001f3cf:	e8 2e f2 fe ff       	call   c000e602 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f3d4:	83 c4 14             	add    esp,0x14
c001f3d7:	53                   	push   ebx
c001f3d8:	6a 00                	push   0x0
c001f3da:	68 aa ef 01 c0       	push   0xc001efaa
c001f3df:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001f3e5:	53                   	push   ebx
c001f3e6:	e8 17 f2 fe ff       	call   c000e602 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f3eb:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f3ed:	83 c4 20             	add    esp,0x20
c001f3f0:	83 ec 0c             	sub    esp,0xc
c001f3f3:	53                   	push   ebx
c001f3f4:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001f3f7:	83 c4 0c             	add    esp,0xc
c001f3fa:	6a 07                	push   0x7
c001f3fc:	6a 00                	push   0x0
c001f3fe:	53                   	push   ebx
c001f3ff:	e8 7a fa ff ff       	call   c001ee7e <IDE::read(unsigned char, unsigned char)>
c001f404:	83 c4 0c             	add    esp,0xc
c001f407:	6a 07                	push   0x7
c001f409:	6a 01                	push   0x1
c001f40b:	53                   	push   ebx
c001f40c:	e8 6d fa ff ff       	call   c001ee7e <IDE::read(unsigned char, unsigned char)>
c001f411:	83 c4 0c             	add    esp,0xc
c001f414:	6a 01                	push   0x1
c001f416:	6a 00                	push   0x0
c001f418:	53                   	push   ebx
c001f419:	e8 a8 fb ff ff       	call   c001efc6 <IDE::enableIRQs(unsigned char, bool)>
c001f41e:	83 c4 0c             	add    esp,0xc
c001f421:	6a 01                	push   0x1
c001f423:	6a 01                	push   0x1
c001f425:	53                   	push   ebx
c001f426:	e8 9b fb ff ff       	call   c001efc6 <IDE::enableIRQs(unsigned char, bool)>
c001f42b:	83 c4 2c             	add    esp,0x2c
c001f42e:	31 c0                	xor    eax,eax
c001f430:	5b                   	pop    ebx
c001f431:	5e                   	pop    esi
c001f432:	5f                   	pop    edi
c001f433:	5d                   	pop    ebp
c001f434:	c3                   	ret    
c001f435:	90                   	nop

c001f436 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001f436:	55                   	push   ebp
c001f437:	57                   	push   edi
c001f438:	56                   	push   esi
c001f439:	53                   	push   ebx
c001f43a:	83 ec 1c             	sub    esp,0x1c
c001f43d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f441:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f445:	8d 50 f8             	lea    edx,[eax-0x8]
c001f448:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f44c:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001f450:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f454:	80 fa 03             	cmp    dl,0x3
c001f457:	77 5d                	ja     c001f4b6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001f459:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001f45d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f461:	0f b6 db             	movzx  ebx,bl
c001f464:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001f467:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001f46b:	83 ca 80             	or     edx,0xffffff80
c001f46e:	0f b6 d2             	movzx  edx,dl
c001f471:	52                   	push   edx
c001f472:	6a 0c                	push   0xc
c001f474:	53                   	push   ebx
c001f475:	56                   	push   esi
c001f476:	e8 43 f9 ff ff       	call   c001edbe <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f47b:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001f480:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f484:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001f488:	0f b6 c0             	movzx  eax,al
c001f48b:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001f48f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001f491:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001f496:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001f49a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001f49e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001f4a2:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001f4aa:	83 c4 2c             	add    esp,0x2c
c001f4ad:	5b                   	pop    ebx
c001f4ae:	5e                   	pop    esi
c001f4af:	5f                   	pop    edi
c001f4b0:	5d                   	pop    ebp
c001f4b1:	e9 08 f9 ff ff       	jmp    c001edbe <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f4b6:	3c 07                	cmp    al,0x7
c001f4b8:	77 10                	ja     c001f4ca <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001f4ba:	0f b6 db             	movzx  ebx,bl
c001f4bd:	0f b6 d0             	movzx  edx,al
c001f4c0:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001f4c8:	eb 2d                	jmp    c001f4f7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001f4ca:	3c 0d                	cmp    al,0xd
c001f4cc:	77 13                	ja     c001f4e1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001f4ce:	0f b6 db             	movzx  ebx,bl
c001f4d1:	0f b6 c0             	movzx  eax,al
c001f4d4:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001f4db:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001f4df:	eb 16                	jmp    c001f4f7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001f4e1:	3c 15                	cmp    al,0x15
c001f4e3:	77 14                	ja     c001f4f9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001f4e5:	0f b6 db             	movzx  ebx,bl
c001f4e8:	0f b6 c0             	movzx  eax,al
c001f4eb:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001f4f3:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001f4f7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001f4f9:	83 c4 1c             	add    esp,0x1c
c001f4fc:	5b                   	pop    ebx
c001f4fd:	5e                   	pop    esi
c001f4fe:	5f                   	pop    edi
c001f4ff:	5d                   	pop    ebp
c001f500:	c3                   	ret    
c001f501:	90                   	nop

c001f502 <IDE::detect()>:
c001f502:	55                   	push   ebp
c001f503:	57                   	push   edi
c001f504:	56                   	push   esi
c001f505:	53                   	push   ebx
c001f506:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001f50c:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001f513:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001f51a:	0f 85 97 02 00 00    	jne    c001f7b7 <IDE::detect()+0x2b5>
c001f520:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001f527:	31 f6                	xor    esi,esi
c001f529:	31 ed                	xor    ebp,ebp
c001f52b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001f533:	89 e8                	mov    eax,ebp
c001f535:	c1 e0 06             	shl    eax,0x6
c001f538:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001f540:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001f544:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001f548:	c1 e0 04             	shl    eax,0x4
c001f54b:	83 c8 a0             	or     eax,0xffffffa0
c001f54e:	0f b6 c0             	movzx  eax,al
c001f551:	50                   	push   eax
c001f552:	6a 06                	push   0x6
c001f554:	56                   	push   esi
c001f555:	53                   	push   ebx
c001f556:	e8 63 f8 ff ff       	call   c001edbe <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f55b:	83 c4 0c             	add    esp,0xc
c001f55e:	6a 0c                	push   0xc
c001f560:	56                   	push   esi
c001f561:	53                   	push   ebx
c001f562:	e8 17 f9 ff ff       	call   c001ee7e <IDE::read(unsigned char, unsigned char)>
c001f567:	83 c4 0c             	add    esp,0xc
c001f56a:	6a 0c                	push   0xc
c001f56c:	56                   	push   esi
c001f56d:	53                   	push   ebx
c001f56e:	e8 0b f9 ff ff       	call   c001ee7e <IDE::read(unsigned char, unsigned char)>
c001f573:	83 c4 0c             	add    esp,0xc
c001f576:	6a 0c                	push   0xc
c001f578:	56                   	push   esi
c001f579:	53                   	push   ebx
c001f57a:	e8 ff f8 ff ff       	call   c001ee7e <IDE::read(unsigned char, unsigned char)>
c001f57f:	83 c4 0c             	add    esp,0xc
c001f582:	6a 0c                	push   0xc
c001f584:	56                   	push   esi
c001f585:	53                   	push   ebx
c001f586:	e8 f3 f8 ff ff       	call   c001ee7e <IDE::read(unsigned char, unsigned char)>
c001f58b:	68 ec 00 00 00       	push   0xec
c001f590:	6a 07                	push   0x7
c001f592:	56                   	push   esi
c001f593:	53                   	push   ebx
c001f594:	e8 25 f8 ff ff       	call   c001edbe <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f599:	83 c4 1c             	add    esp,0x1c
c001f59c:	6a 0c                	push   0xc
c001f59e:	56                   	push   esi
c001f59f:	53                   	push   ebx
c001f5a0:	e8 d9 f8 ff ff       	call   c001ee7e <IDE::read(unsigned char, unsigned char)>
c001f5a5:	83 c4 0c             	add    esp,0xc
c001f5a8:	6a 0c                	push   0xc
c001f5aa:	56                   	push   esi
c001f5ab:	53                   	push   ebx
c001f5ac:	e8 cd f8 ff ff       	call   c001ee7e <IDE::read(unsigned char, unsigned char)>
c001f5b1:	83 c4 0c             	add    esp,0xc
c001f5b4:	6a 0c                	push   0xc
c001f5b6:	56                   	push   esi
c001f5b7:	53                   	push   ebx
c001f5b8:	e8 c1 f8 ff ff       	call   c001ee7e <IDE::read(unsigned char, unsigned char)>
c001f5bd:	83 c4 0c             	add    esp,0xc
c001f5c0:	6a 0c                	push   0xc
c001f5c2:	56                   	push   esi
c001f5c3:	53                   	push   ebx
c001f5c4:	e8 b5 f8 ff ff       	call   c001ee7e <IDE::read(unsigned char, unsigned char)>
c001f5c9:	83 c4 0c             	add    esp,0xc
c001f5cc:	6a 0c                	push   0xc
c001f5ce:	56                   	push   esi
c001f5cf:	53                   	push   ebx
c001f5d0:	e8 a9 f8 ff ff       	call   c001ee7e <IDE::read(unsigned char, unsigned char)>
c001f5d5:	83 c4 10             	add    esp,0x10
c001f5d8:	84 c0                	test   al,al
c001f5da:	0f 84 5f 01 00 00    	je     c001f73f <IDE::detect()+0x23d>
c001f5e0:	31 ff                	xor    edi,edi
c001f5e2:	50                   	push   eax
c001f5e3:	6a 0c                	push   0xc
c001f5e5:	56                   	push   esi
c001f5e6:	53                   	push   ebx
c001f5e7:	e8 92 f8 ff ff       	call   c001ee7e <IDE::read(unsigned char, unsigned char)>
c001f5ec:	83 c4 10             	add    esp,0x10
c001f5ef:	a8 01                	test   al,0x1
c001f5f1:	0f 85 69 01 00 00    	jne    c001f760 <IDE::detect()+0x25e>
c001f5f7:	84 c0                	test   al,al
c001f5f9:	78 04                	js     c001f5ff <IDE::detect()+0xfd>
c001f5fb:	a8 08                	test   al,0x8
c001f5fd:	75 23                	jne    c001f622 <IDE::detect()+0x120>
c001f5ff:	47                   	inc    edi
c001f600:	81 ff 17 01 00 00    	cmp    edi,0x117
c001f606:	7e da                	jle    c001f5e2 <IDE::detect()+0xe0>
c001f608:	83 ec 0c             	sub    esp,0xc
c001f60b:	6a 32                	push   0x32
c001f60d:	e8 3a 9c ff ff       	call   c001924c <milliTenthSleep(unsigned int)>
c001f612:	83 c4 10             	add    esp,0x10
c001f615:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001f61b:	75 c5                	jne    c001f5e2 <IDE::detect()+0xe0>
c001f61d:	e9 3e 01 00 00       	jmp    c001f760 <IDE::detect()+0x25e>
c001f622:	31 c9                	xor    ecx,ecx
c001f624:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001f628:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001f62c:	83 ec 0c             	sub    esp,0xc
c001f62f:	68 80 00 00 00       	push   0x80
c001f634:	57                   	push   edi
c001f635:	6a 00                	push   0x0
c001f637:	56                   	push   esi
c001f638:	53                   	push   ebx
c001f639:	e8 f8 fd ff ff       	call   c001f436 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001f63e:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001f643:	89 e8                	mov    eax,ebp
c001f645:	89 d1                	mov    ecx,edx
c001f647:	c1 e0 06             	shl    eax,0x6
c001f64a:	01 d8                	add    eax,ebx
c001f64c:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001f653:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001f65a:	89 f2                	mov    edx,esi
c001f65c:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001f662:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001f666:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001f66c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001f670:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001f677:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001f67f:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001f686:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001f68e:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001f694:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001f69b:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001f6a1:	8d 54 24 58          	lea    edx,[esp+0x58]
c001f6a5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001f6a9:	83 c4 20             	add    esp,0x20
c001f6ac:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001f6af:	83 c0 02             	add    eax,0x2
c001f6b2:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001f6b8:	83 c7 02             	add    edi,0x2
c001f6bb:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001f6be:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001f6c4:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001f6c8:	75 e2                	jne    c001f6ac <IDE::detect()+0x1aa>
c001f6ca:	89 e8                	mov    eax,ebp
c001f6cc:	c1 e0 06             	shl    eax,0x6
c001f6cf:	01 d8                	add    eax,ebx
c001f6d1:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001f6d7:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001f6de:	66 c1 ea 09          	shr    dx,0x9
c001f6e2:	83 e2 01             	and    edx,0x1
c001f6e5:	84 c9                	test   cl,cl
c001f6e7:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001f6ed:	75 22                	jne    c001f711 <IDE::detect()+0x20f>
c001f6ef:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001f6f6:	74 46                	je     c001f73e <IDE::detect()+0x23c>
c001f6f8:	83 ec 0c             	sub    esp,0xc
c001f6fb:	68 7c 01 00 00       	push   0x17c
c001f700:	e8 e2 a6 fe ff       	call   c0009de7 <malloc>
c001f705:	89 c7                	mov    edi,eax
c001f707:	89 04 24             	mov    DWORD PTR [esp],eax
c001f70a:	e8 49 06 00 00       	call   c001fd58 <ATA::ATA()>
c001f70f:	eb 17                	jmp    c001f728 <IDE::detect()+0x226>
c001f711:	83 ec 0c             	sub    esp,0xc
c001f714:	68 84 01 00 00       	push   0x184
c001f719:	e8 c9 a6 fe ff       	call   c0009de7 <malloc>
c001f71e:	89 c7                	mov    edi,eax
c001f720:	89 04 24             	mov    DWORD PTR [esp],eax
c001f723:	e8 b8 0c 00 00       	call   c00203e0 <ATAPI::ATAPI()>
c001f728:	5a                   	pop    edx
c001f729:	59                   	pop    ecx
c001f72a:	57                   	push   edi
c001f72b:	53                   	push   ebx
c001f72c:	e8 59 ef fe ff       	call   c000e68a <Device::addChild(Device*)>
c001f731:	8b 07                	mov    eax,DWORD PTR [edi]
c001f733:	53                   	push   ebx
c001f734:	55                   	push   ebp
c001f735:	6a 00                	push   0x0
c001f737:	57                   	push   edi
c001f738:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f73b:	83 c4 20             	add    esp,0x20
c001f73e:	45                   	inc    ebp
c001f73f:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001f744:	74 0d                	je     c001f753 <IDE::detect()+0x251>
c001f746:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001f74e:	e9 e0 fd ff ff       	jmp    c001f533 <IDE::detect()+0x31>
c001f753:	4e                   	dec    esi
c001f754:	74 61                	je     c001f7b7 <IDE::detect()+0x2b5>
c001f756:	be 01 00 00 00       	mov    esi,0x1
c001f75b:	e9 cb fd ff ff       	jmp    c001f52b <IDE::detect()+0x29>
c001f760:	50                   	push   eax
c001f761:	6a 04                	push   0x4
c001f763:	56                   	push   esi
c001f764:	53                   	push   ebx
c001f765:	e8 14 f7 ff ff       	call   c001ee7e <IDE::read(unsigned char, unsigned char)>
c001f76a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001f76e:	83 c4 0c             	add    esp,0xc
c001f771:	6a 05                	push   0x5
c001f773:	56                   	push   esi
c001f774:	53                   	push   ebx
c001f775:	e8 04 f7 ff ff       	call   c001ee7e <IDE::read(unsigned char, unsigned char)>
c001f77a:	83 c4 10             	add    esp,0x10
c001f77d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001f781:	80 fa 14             	cmp    dl,0x14
c001f784:	75 04                	jne    c001f78a <IDE::detect()+0x288>
c001f786:	3c eb                	cmp    al,0xeb
c001f788:	eb 07                	jmp    c001f791 <IDE::detect()+0x28f>
c001f78a:	3c 96                	cmp    al,0x96
c001f78c:	75 b1                	jne    c001f73f <IDE::detect()+0x23d>
c001f78e:	80 fa 69             	cmp    dl,0x69
c001f791:	75 ac                	jne    c001f73f <IDE::detect()+0x23d>
c001f793:	68 a1 00 00 00       	push   0xa1
c001f798:	6a 07                	push   0x7
c001f79a:	56                   	push   esi
c001f79b:	53                   	push   ebx
c001f79c:	e8 1d f6 ff ff       	call   c001edbe <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f7a1:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001f7a8:	e8 9f 9a ff ff       	call   c001924c <milliTenthSleep(unsigned int)>
c001f7ad:	83 c4 10             	add    esp,0x10
c001f7b0:	b1 01                	mov    cl,0x1
c001f7b2:	e9 6d fe ff ff       	jmp    c001f624 <IDE::detect()+0x122>
c001f7b7:	81 c4 1c 02 00 00    	add    esp,0x21c
c001f7bd:	5b                   	pop    ebx
c001f7be:	5e                   	pop    esi
c001f7bf:	5f                   	pop    edi
c001f7c0:	5d                   	pop    ebp
c001f7c1:	c3                   	ret    

c001f7c2 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001f7c2:	55                   	push   ebp
c001f7c3:	57                   	push   edi
c001f7c4:	56                   	push   esi
c001f7c5:	53                   	push   ebx
c001f7c6:	83 ec 1c             	sub    esp,0x1c
c001f7c9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f7cd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f7d1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f7d5:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001f7d9:	88 c3                	mov    bl,al
c001f7db:	84 c0                	test   al,al
c001f7dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f7e1:	0f 84 81 00 00 00    	je     c001f868 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f7e7:	83 ec 0c             	sub    esp,0xc
c001f7ea:	68 8b 75 02 c0       	push   0xc002758b
c001f7ef:	e8 23 d9 fe ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c001f7f4:	83 c4 10             	add    esp,0x10
c001f7f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f7fb:	3c 01                	cmp    al,0x1
c001f7fd:	74 63                	je     c001f862 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001f7ff:	3c 02                	cmp    al,0x2
c001f801:	75 53                	jne    c001f856 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001f803:	d1 e6                	shl    esi,1
c001f805:	09 ee                	or     esi,ebp
c001f807:	50                   	push   eax
c001f808:	89 f0                	mov    eax,esi
c001f80a:	6a 01                	push   0x1
c001f80c:	0f b6 f0             	movzx  esi,al
c001f80f:	c1 e6 06             	shl    esi,0x6
c001f812:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001f81a:	50                   	push   eax
c001f81b:	57                   	push   edi
c001f81c:	e8 5d f6 ff ff       	call   c001ee7e <IDE::read(unsigned char, unsigned char)>
c001f821:	83 c4 10             	add    esp,0x10
c001f824:	a8 01                	test   al,0x1
c001f826:	74 02                	je     c001f82a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001f828:	b3 07                	mov    bl,0x7
c001f82a:	a8 02                	test   al,0x2
c001f82c:	74 02                	je     c001f830 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001f82e:	b3 03                	mov    bl,0x3
c001f830:	a8 04                	test   al,0x4
c001f832:	74 02                	je     c001f836 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001f834:	b3 14                	mov    bl,0x14
c001f836:	a8 08                	test   al,0x8
c001f838:	74 02                	je     c001f83c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001f83a:	b3 03                	mov    bl,0x3
c001f83c:	a8 10                	test   al,0x10
c001f83e:	74 02                	je     c001f842 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001f840:	b3 15                	mov    bl,0x15
c001f842:	a8 20                	test   al,0x20
c001f844:	74 02                	je     c001f848 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001f846:	b3 03                	mov    bl,0x3
c001f848:	a8 40                	test   al,0x40
c001f84a:	74 02                	je     c001f84e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001f84c:	b3 16                	mov    bl,0x16
c001f84e:	84 c0                	test   al,al
c001f850:	79 16                	jns    c001f868 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f852:	b3 0d                	mov    bl,0xd
c001f854:	eb 12                	jmp    c001f868 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f856:	3c 03                	cmp    al,0x3
c001f858:	74 0c                	je     c001f866 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001f85a:	3c 04                	cmp    al,0x4
c001f85c:	75 0a                	jne    c001f868 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f85e:	b3 08                	mov    bl,0x8
c001f860:	eb 06                	jmp    c001f868 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f862:	b3 13                	mov    bl,0x13
c001f864:	eb 02                	jmp    c001f868 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f866:	b3 17                	mov    bl,0x17
c001f868:	83 c4 1c             	add    esp,0x1c
c001f86b:	88 d8                	mov    al,bl
c001f86d:	5b                   	pop    ebx
c001f86e:	5e                   	pop    esi
c001f86f:	5f                   	pop    edi
c001f870:	5d                   	pop    ebp
c001f871:	c3                   	ret    

c001f872 <IDE::polling(unsigned char, unsigned int)>:
c001f872:	57                   	push   edi
c001f873:	56                   	push   esi
c001f874:	53                   	push   ebx
c001f875:	bb 04 00 00 00       	mov    ebx,0x4
c001f87a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001f87e:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001f883:	52                   	push   edx
c001f884:	6a 0c                	push   0xc
c001f886:	56                   	push   esi
c001f887:	57                   	push   edi
c001f888:	e8 f1 f5 ff ff       	call   c001ee7e <IDE::read(unsigned char, unsigned char)>
c001f88d:	83 c4 10             	add    esp,0x10
c001f890:	4b                   	dec    ebx
c001f891:	75 f0                	jne    c001f883 <IDE::polling(unsigned char, unsigned int)+0x11>
c001f893:	bb a0 86 01 00       	mov    ebx,0x186a0
c001f898:	50                   	push   eax
c001f899:	6a 0c                	push   0xc
c001f89b:	56                   	push   esi
c001f89c:	57                   	push   edi
c001f89d:	e8 dc f5 ff ff       	call   c001ee7e <IDE::read(unsigned char, unsigned char)>
c001f8a2:	83 c4 10             	add    esp,0x10
c001f8a5:	a8 01                	test   al,0x1
c001f8a7:	75 17                	jne    c001f8c0 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f8a9:	a8 20                	test   al,0x20
c001f8ab:	75 0f                	jne    c001f8bc <IDE::polling(unsigned char, unsigned int)+0x4a>
c001f8ad:	4b                   	dec    ebx
c001f8ae:	74 10                	je     c001f8c0 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f8b0:	84 c0                	test   al,al
c001f8b2:	78 e4                	js     c001f898 <IDE::polling(unsigned char, unsigned int)+0x26>
c001f8b4:	a8 08                	test   al,0x8
c001f8b6:	74 e0                	je     c001f898 <IDE::polling(unsigned char, unsigned int)+0x26>
c001f8b8:	31 c0                	xor    eax,eax
c001f8ba:	eb 06                	jmp    c001f8c2 <IDE::polling(unsigned char, unsigned int)+0x50>
c001f8bc:	b0 01                	mov    al,0x1
c001f8be:	eb 02                	jmp    c001f8c2 <IDE::polling(unsigned char, unsigned int)+0x50>
c001f8c0:	b0 02                	mov    al,0x2
c001f8c2:	5b                   	pop    ebx
c001f8c3:	5e                   	pop    esi
c001f8c4:	5f                   	pop    edi
c001f8c5:	c3                   	ret    

c001f8c6 <SATABus::close(int, int, void*)>:
c001f8c6:	31 c0                	xor    eax,eax
c001f8c8:	c3                   	ret    
c001f8c9:	90                   	nop

c001f8ca <SATABus::detect()>:
c001f8ca:	c3                   	ret    
c001f8cb:	90                   	nop

c001f8cc <SATABus::SATABus()>:
c001f8cc:	83 ec 0c             	sub    esp,0xc
c001f8cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8d3:	83 ec 08             	sub    esp,0x8
c001f8d6:	68 c4 75 02 c0       	push   0xc00275c4
c001f8db:	50                   	push   eax
c001f8dc:	e8 57 f1 fe ff       	call   c000ea38 <HardDiskController::HardDiskController(char const*)>
c001f8e1:	83 c4 10             	add    esp,0x10
c001f8e4:	ba 6c 76 02 c0       	mov    edx,0xc002766c
c001f8e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8ed:	89 10                	mov    DWORD PTR [eax],edx
c001f8ef:	83 ec 0c             	sub    esp,0xc
c001f8f2:	6a 50                	push   0x50
c001f8f4:	e8 90 ac fe ff       	call   c000a589 <Phys::allocateContiguousPages(int)>
c001f8f9:	83 c4 10             	add    esp,0x10
c001f8fc:	89 c2                	mov    edx,eax
c001f8fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f902:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001f908:	83 ec 0c             	sub    esp,0xc
c001f90b:	6a 50                	push   0x50
c001f90d:	e8 8f c4 fe ff       	call   c000bda1 <Virt::allocateKernelVirtualPages(int)>
c001f912:	83 c4 10             	add    esp,0x10
c001f915:	89 c2                	mov    edx,eax
c001f917:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f91b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f921:	a1 34 8d 02 c0       	mov    eax,ds:0xc0028d34
c001f926:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f92a:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001f930:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f934:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001f93a:	83 ec 0c             	sub    esp,0xc
c001f93d:	6a 03                	push   0x3
c001f93f:	6a 50                	push   0x50
c001f941:	51                   	push   ecx
c001f942:	52                   	push   edx
c001f943:	50                   	push   eax
c001f944:	e8 b9 cd fe ff       	call   c000c702 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001f949:	83 c4 20             	add    esp,0x20
c001f94c:	90                   	nop
c001f94d:	83 c4 0c             	add    esp,0xc
c001f950:	c3                   	ret    
c001f951:	90                   	nop

c001f952 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001f952:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f956:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001f959:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001f95c:	09 c2                	or     edx,eax
c001f95e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f962:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f968:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f96a:	31 c0                	xor    eax,eax
c001f96c:	c1 e9 08             	shr    ecx,0x8
c001f96f:	83 e1 0f             	and    ecx,0xf
c001f972:	39 c8                	cmp    eax,ecx
c001f974:	74 0a                	je     c001f980 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001f976:	f6 c2 01             	test   dl,0x1
c001f979:	74 08                	je     c001f983 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001f97b:	d1 ea                	shr    edx,1
c001f97d:	40                   	inc    eax
c001f97e:	eb f2                	jmp    c001f972 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001f980:	83 c8 ff             	or     eax,0xffffffff
c001f983:	c3                   	ret    

c001f984 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001f984:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f988:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001f98b:	89 c2                	mov    edx,eax
c001f98d:	c1 ea 08             	shr    edx,0x8
c001f990:	83 e2 0f             	and    edx,0xf
c001f993:	fe ca                	dec    dl
c001f995:	75 31                	jne    c001f9c8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f997:	83 e0 0f             	and    eax,0xf
c001f99a:	3c 03                	cmp    al,0x3
c001f99c:	75 2a                	jne    c001f9c8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f99e:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001f9a1:	b8 02 00 00 00       	mov    eax,0x2
c001f9a6:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001f9ac:	74 1c                	je     c001f9ca <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f9ae:	b8 04 00 00 00       	mov    eax,0x4
c001f9b3:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001f9b9:	74 0f                	je     c001f9ca <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f9bb:	31 c0                	xor    eax,eax
c001f9bd:	83 fa 03             	cmp    edx,0x3
c001f9c0:	0f 94 c0             	sete   al
c001f9c3:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001f9c7:	c3                   	ret    
c001f9c8:	31 c0                	xor    eax,eax
c001f9ca:	c3                   	ret    
c001f9cb:	90                   	nop

c001f9cc <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001f9cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f9d0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f9d3:	0f ba e2 0f          	bt     edx,0xf
c001f9d7:	72 f7                	jb     c001f9d0 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001f9d9:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f9dc:	83 ca 10             	or     edx,0x10
c001f9df:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f9e2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f9e5:	83 ca 01             	or     edx,0x1
c001f9e8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f9eb:	c3                   	ret    

c001f9ec <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001f9ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f9f0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f9f3:	83 e2 fe             	and    edx,0xfffffffe
c001f9f6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f9f9:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f9fc:	83 e2 ef             	and    edx,0xffffffef
c001f9ff:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001fa02:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001fa05:	0f ba e2 0e          	bt     edx,0xe
c001fa09:	72 f7                	jb     c001fa02 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001fa0b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001fa0e:	0f ba e2 0f          	bt     edx,0xf
c001fa12:	72 ee                	jb     c001fa02 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001fa14:	c3                   	ret    
c001fa15:	90                   	nop

c001fa16 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001fa16:	55                   	push   ebp
c001fa17:	57                   	push   edi
c001fa18:	56                   	push   esi
c001fa19:	53                   	push   ebx
c001fa1a:	83 ec 1c             	sub    esp,0x1c
c001fa1d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001fa21:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001fa25:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001fa29:	53                   	push   ebx
c001fa2a:	89 fd                	mov    ebp,edi
c001fa2c:	56                   	push   esi
c001fa2d:	c1 e5 0a             	shl    ebp,0xa
c001fa30:	e8 b7 ff ff ff       	call   c001f9ec <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001fa35:	83 ec 0c             	sub    esp,0xc
c001fa38:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001fa3e:	01 e8                	add    eax,ebp
c001fa40:	89 03                	mov    DWORD PTR [ebx],eax
c001fa42:	8b 03                	mov    eax,DWORD PTR [ebx]
c001fa44:	68 00 04 00 00       	push   0x400
c001fa49:	6a 00                	push   0x0
c001fa4b:	50                   	push   eax
c001fa4c:	e8 43 0c fe ff       	call   c0000694 <memset>
c001fa51:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001fa57:	89 fa                	mov    edx,edi
c001fa59:	01 e8                	add    eax,ebp
c001fa5b:	c1 e7 0d             	shl    edi,0xd
c001fa5e:	89 03                	mov    DWORD PTR [ebx],eax
c001fa60:	c1 e2 08             	shl    edx,0x8
c001fa63:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001fa6a:	81 c2 00 80 00 00    	add    edx,0x8000
c001fa70:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001fa74:	89 d0                	mov    eax,edx
c001fa76:	83 c4 1c             	add    esp,0x1c
c001fa79:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001fa7f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001fa82:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001fa85:	68 00 01 00 00       	push   0x100
c001fa8a:	6a 00                	push   0x0
c001fa8c:	50                   	push   eax
c001fa8d:	e8 02 0c fe ff       	call   c0000694 <memset>
c001fa92:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fa96:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001fa9c:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c001faa2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001faa6:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001faa9:	83 c4 10             	add    esp,0x10
c001faac:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001fab3:	31 ff                	xor    edi,edi
c001fab5:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001fabb:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001fac1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fac5:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001facb:	83 c5 20             	add    ebp,0x20
c001face:	01 f8                	add    eax,edi
c001fad0:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001fad3:	52                   	push   edx
c001fad4:	68 00 01 00 00       	push   0x100
c001fad9:	6a 00                	push   0x0
c001fadb:	50                   	push   eax
c001fadc:	e8 b3 0b fe ff       	call   c0000694 <memset>
c001fae1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fae5:	83 c4 10             	add    esp,0x10
c001fae8:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001faee:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001faf5:	01 f8                	add    eax,edi
c001faf7:	81 c7 00 01 00 00    	add    edi,0x100
c001fafd:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001fb00:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001fb06:	75 b3                	jne    c001fabb <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c001fb08:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c001fb0c:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001fb10:	83 c4 1c             	add    esp,0x1c
c001fb13:	5b                   	pop    ebx
c001fb14:	5e                   	pop    esi
c001fb15:	5f                   	pop    edi
c001fb16:	5d                   	pop    ebp
c001fb17:	e9 b0 fe ff ff       	jmp    c001f9cc <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c001fb1c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001fb1c:	55                   	push   ebp
c001fb1d:	57                   	push   edi
c001fb1e:	56                   	push   esi
c001fb1f:	53                   	push   ebx
c001fb20:	83 ec 0c             	sub    esp,0xc
c001fb23:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001fb27:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c001fb2e:	74 2d                	je     c001fb5d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001fb30:	83 ec 0c             	sub    esp,0xc
c001fb33:	68 e8 75 02 c0       	push   0xc00275e8
c001fb38:	e8 04 a3 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001fb3d:	83 c4 10             	add    esp,0x10
c001fb40:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c001fb47:	75 14                	jne    c001fb5d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001fb49:	e4 60                	in     al,0x60
c001fb4b:	3c 1c                	cmp    al,0x1c
c001fb4d:	74 04                	je     c001fb53 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001fb4f:	3c 5a                	cmp    al,0x5a
c001fb51:	75 f6                	jne    c001fb49 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x2d>
c001fb53:	e4 60                	in     al,0x60
c001fb55:	3c 5a                	cmp    al,0x5a
c001fb57:	74 fa                	je     c001fb53 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001fb59:	3c 1c                	cmp    al,0x1c
c001fb5b:	74 f6                	je     c001fb53 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001fb5d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001fb61:	31 db                	xor    ebx,ebx
c001fb63:	8b 68 0c             	mov    ebp,DWORD PTR [eax+0xc]
c001fb66:	f7 c5 01 00 00 00    	test   ebp,0x1
c001fb6c:	0f 84 78 01 00 00    	je     c001fcea <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001fb72:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001fb76:	89 d8                	mov    eax,ebx
c001fb78:	c1 e0 07             	shl    eax,0x7
c001fb7b:	8d bc 02 00 01 00 00 	lea    edi,[edx+eax*1+0x100]
c001fb82:	50                   	push   eax
c001fb83:	50                   	push   eax
c001fb84:	57                   	push   edi
c001fb85:	56                   	push   esi
c001fb86:	e8 f9 fd ff ff       	call   c001f984 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001fb8b:	83 c4 10             	add    esp,0x10
c001fb8e:	83 f8 01             	cmp    eax,0x1
c001fb91:	0f 85 19 01 00 00    	jne    c001fcb0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x194>
c001fb97:	50                   	push   eax
c001fb98:	53                   	push   ebx
c001fb99:	57                   	push   edi
c001fb9a:	56                   	push   esi
c001fb9b:	e8 76 fe ff ff       	call   c001fa16 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001fba0:	83 c4 10             	add    esp,0x10
c001fba3:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c001fbaa:	74 2d                	je     c001fbd9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001fbac:	83 ec 0c             	sub    esp,0xc
c001fbaf:	68 fd 75 02 c0       	push   0xc00275fd
c001fbb4:	e8 88 a2 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001fbb9:	83 c4 10             	add    esp,0x10
c001fbbc:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c001fbc3:	75 14                	jne    c001fbd9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001fbc5:	e4 60                	in     al,0x60
c001fbc7:	3c 1c                	cmp    al,0x1c
c001fbc9:	74 04                	je     c001fbcf <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001fbcb:	3c 5a                	cmp    al,0x5a
c001fbcd:	75 f6                	jne    c001fbc5 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa9>
c001fbcf:	e4 60                	in     al,0x60
c001fbd1:	3c 5a                	cmp    al,0x5a
c001fbd3:	74 fa                	je     c001fbcf <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001fbd5:	3c 1c                	cmp    al,0x1c
c001fbd7:	74 f6                	je     c001fbcf <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001fbd9:	83 ec 0c             	sub    esp,0xc
c001fbdc:	68 7c 01 00 00       	push   0x17c
c001fbe1:	e8 01 a2 fe ff       	call   c0009de7 <malloc>
c001fbe6:	89 04 24             	mov    DWORD PTR [esp],eax
c001fbe9:	89 c7                	mov    edi,eax
c001fbeb:	e8 28 10 00 00       	call   c0020c18 <SATA::SATA()>
c001fbf0:	83 c4 10             	add    esp,0x10
c001fbf3:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c001fbfa:	74 2d                	je     c001fc29 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001fbfc:	83 ec 0c             	sub    esp,0xc
c001fbff:	68 12 76 02 c0       	push   0xc0027612
c001fc04:	e8 38 a2 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001fc09:	83 c4 10             	add    esp,0x10
c001fc0c:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c001fc13:	75 14                	jne    c001fc29 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001fc15:	e4 60                	in     al,0x60
c001fc17:	3c 5a                	cmp    al,0x5a
c001fc19:	74 04                	je     c001fc1f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001fc1b:	3c 1c                	cmp    al,0x1c
c001fc1d:	75 f6                	jne    c001fc15 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xf9>
c001fc1f:	e4 60                	in     al,0x60
c001fc21:	3c 5a                	cmp    al,0x5a
c001fc23:	74 fa                	je     c001fc1f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001fc25:	3c 1c                	cmp    al,0x1c
c001fc27:	74 f6                	je     c001fc1f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001fc29:	50                   	push   eax
c001fc2a:	50                   	push   eax
c001fc2b:	57                   	push   edi
c001fc2c:	56                   	push   esi
c001fc2d:	e8 58 ea fe ff       	call   c000e68a <Device::addChild(Device*)>
c001fc32:	83 c4 10             	add    esp,0x10
c001fc35:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c001fc3c:	74 2d                	je     c001fc6b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001fc3e:	83 ec 0c             	sub    esp,0xc
c001fc41:	68 27 76 02 c0       	push   0xc0027627
c001fc46:	e8 f6 a1 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001fc4b:	83 c4 10             	add    esp,0x10
c001fc4e:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c001fc55:	75 14                	jne    c001fc6b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001fc57:	e4 60                	in     al,0x60
c001fc59:	3c 1c                	cmp    al,0x1c
c001fc5b:	74 04                	je     c001fc61 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001fc5d:	3c 5a                	cmp    al,0x5a
c001fc5f:	75 f6                	jne    c001fc57 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x13b>
c001fc61:	e4 60                	in     al,0x60
c001fc63:	3c 5a                	cmp    al,0x5a
c001fc65:	74 fa                	je     c001fc61 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001fc67:	3c 1c                	cmp    al,0x1c
c001fc69:	74 f6                	je     c001fc61 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001fc6b:	8b 07                	mov    eax,DWORD PTR [edi]
c001fc6d:	56                   	push   esi
c001fc6e:	6a 00                	push   0x0
c001fc70:	53                   	push   ebx
c001fc71:	57                   	push   edi
c001fc72:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001fc75:	83 c4 10             	add    esp,0x10
c001fc78:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c001fc7f:	74 69                	je     c001fcea <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001fc81:	83 ec 0c             	sub    esp,0xc
c001fc84:	68 3c 76 02 c0       	push   0xc002763c
c001fc89:	e8 b3 a1 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001fc8e:	83 c4 10             	add    esp,0x10
c001fc91:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c001fc98:	75 50                	jne    c001fcea <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001fc9a:	e4 60                	in     al,0x60
c001fc9c:	3c 1c                	cmp    al,0x1c
c001fc9e:	74 04                	je     c001fca4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001fca0:	3c 5a                	cmp    al,0x5a
c001fca2:	75 f6                	jne    c001fc9a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x17e>
c001fca4:	e4 60                	in     al,0x60
c001fca6:	3c 5a                	cmp    al,0x5a
c001fca8:	74 fa                	je     c001fca4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001fcaa:	3c 1c                	cmp    al,0x1c
c001fcac:	74 f6                	je     c001fca4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001fcae:	eb 3a                	jmp    c001fcea <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001fcb0:	83 f8 04             	cmp    eax,0x4
c001fcb3:	75 35                	jne    c001fcea <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001fcb5:	50                   	push   eax
c001fcb6:	53                   	push   ebx
c001fcb7:	57                   	push   edi
c001fcb8:	56                   	push   esi
c001fcb9:	e8 58 fd ff ff       	call   c001fa16 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001fcbe:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001fcc5:	e8 1d a1 fe ff       	call   c0009de7 <malloc>
c001fcca:	89 04 24             	mov    DWORD PTR [esp],eax
c001fccd:	89 c7                	mov    edi,eax
c001fccf:	e8 ba 17 00 00       	call   c002148e <SATAPI::SATAPI()>
c001fcd4:	5a                   	pop    edx
c001fcd5:	59                   	pop    ecx
c001fcd6:	57                   	push   edi
c001fcd7:	56                   	push   esi
c001fcd8:	e8 ad e9 fe ff       	call   c000e68a <Device::addChild(Device*)>
c001fcdd:	8b 07                	mov    eax,DWORD PTR [edi]
c001fcdf:	56                   	push   esi
c001fce0:	6a 00                	push   0x0
c001fce2:	53                   	push   ebx
c001fce3:	57                   	push   edi
c001fce4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001fce7:	83 c4 20             	add    esp,0x20
c001fcea:	d1 ed                	shr    ebp,1
c001fcec:	43                   	inc    ebx
c001fced:	83 fb 20             	cmp    ebx,0x20
c001fcf0:	0f 85 70 fe ff ff    	jne    c001fb66 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x4a>
c001fcf6:	83 c4 0c             	add    esp,0xc
c001fcf9:	5b                   	pop    ebx
c001fcfa:	5e                   	pop    esi
c001fcfb:	5f                   	pop    edi
c001fcfc:	5d                   	pop    ebp
c001fcfd:	c3                   	ret    

c001fcfe <SATABus::open(int, int, void*)>:
c001fcfe:	53                   	push   ebx
c001fcff:	83 ec 10             	sub    esp,0x10
c001fd02:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001fd06:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c001fd0c:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001fd12:	50                   	push   eax
c001fd13:	68 51 76 02 c0       	push   0xc0027651
c001fd18:	e8 fa d3 fe ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c001fd1d:	58                   	pop    eax
c001fd1e:	5a                   	pop    edx
c001fd1f:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c001fd25:	53                   	push   ebx
c001fd26:	e8 f1 fd ff ff       	call   c001fb1c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001fd2b:	31 c0                	xor    eax,eax
c001fd2d:	83 c4 18             	add    esp,0x18
c001fd30:	5b                   	pop    ebx
c001fd31:	c3                   	ret    

c001fd32 <ATA::close(int, int, void*)>:
c001fd32:	83 ec 0c             	sub    esp,0xc
c001fd35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd39:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001fd3f:	85 c0                	test   eax,eax
c001fd41:	74 0c                	je     c001fd4f <ATA::close(int, int, void*)+0x1d>
c001fd43:	83 ec 0c             	sub    esp,0xc
c001fd46:	8b 10                	mov    edx,DWORD PTR [eax]
c001fd48:	50                   	push   eax
c001fd49:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001fd4c:	83 c4 10             	add    esp,0x10
c001fd4f:	31 c0                	xor    eax,eax
c001fd51:	83 c4 0c             	add    esp,0xc
c001fd54:	c3                   	ret    
c001fd55:	90                   	nop

c001fd56 <ATA::powerSaving(PowerSavingLevel)>:
c001fd56:	c3                   	ret    
c001fd57:	90                   	nop

c001fd58 <ATA::ATA()>:
c001fd58:	83 ec 0c             	sub    esp,0xc
c001fd5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd5f:	83 ec 04             	sub    esp,0x4
c001fd62:	68 00 02 00 00       	push   0x200
c001fd67:	68 ef 77 02 c0       	push   0xc00277ef
c001fd6c:	50                   	push   eax
c001fd6d:	e8 50 ed fe ff       	call   c000eac2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001fd72:	83 c4 10             	add    esp,0x10
c001fd75:	ba e4 76 02 c0       	mov    edx,0xc00276e4
c001fd7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd7e:	89 10                	mov    DWORD PTR [eax],edx
c001fd80:	90                   	nop
c001fd81:	83 c4 0c             	add    esp,0xc
c001fd84:	c3                   	ret    
c001fd85:	90                   	nop

c001fd86 <ATA::flush(bool)>:
c001fd86:	53                   	push   ebx
c001fd87:	83 ec 08             	sub    esp,0x8
c001fd8a:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001fd8f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fd93:	19 c0                	sbb    eax,eax
c001fd95:	83 e0 fd             	and    eax,0xfffffffd
c001fd98:	05 ea 00 00 00       	add    eax,0xea
c001fd9d:	50                   	push   eax
c001fd9e:	6a 07                	push   0x7
c001fda0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fda7:	50                   	push   eax
c001fda8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fdae:	e8 0b f0 ff ff       	call   c001edbe <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fdb3:	83 c4 0c             	add    esp,0xc
c001fdb6:	6a 00                	push   0x0
c001fdb8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fdbf:	50                   	push   eax
c001fdc0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fdc6:	e8 a7 fa ff ff       	call   c001f872 <IDE::polling(unsigned char, unsigned int)>
c001fdcb:	83 c4 18             	add    esp,0x18
c001fdce:	5b                   	pop    ebx
c001fdcf:	c3                   	ret    

c001fdd0 <ATA::readyForCommand()>:
c001fdd0:	56                   	push   esi
c001fdd1:	53                   	push   ebx
c001fdd2:	53                   	push   ebx
c001fdd3:	31 db                	xor    ebx,ebx
c001fdd5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fdd9:	51                   	push   ecx
c001fdda:	6a 0c                	push   0xc
c001fddc:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001fde3:	50                   	push   eax
c001fde4:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001fdea:	e8 8f f0 ff ff       	call   c001ee7e <IDE::read(unsigned char, unsigned char)>
c001fdef:	83 c4 10             	add    esp,0x10
c001fdf2:	a8 88                	test   al,0x88
c001fdf4:	74 1f                	je     c001fe15 <ATA::readyForCommand()+0x45>
c001fdf6:	43                   	inc    ebx
c001fdf7:	83 fb 63             	cmp    ebx,0x63
c001fdfa:	7e dd                	jle    c001fdd9 <ATA::readyForCommand()+0x9>
c001fdfc:	83 ec 0c             	sub    esp,0xc
c001fdff:	6a 0a                	push   0xa
c001fe01:	e8 46 94 ff ff       	call   c001924c <milliTenthSleep(unsigned int)>
c001fe06:	83 c4 10             	add    esp,0x10
c001fe09:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001fe0f:	75 c8                	jne    c001fdd9 <ATA::readyForCommand()+0x9>
c001fe11:	31 c0                	xor    eax,eax
c001fe13:	eb 02                	jmp    c001fe17 <ATA::readyForCommand()+0x47>
c001fe15:	b0 01                	mov    al,0x1
c001fe17:	5a                   	pop    edx
c001fe18:	5b                   	pop    ebx
c001fe19:	5e                   	pop    esi
c001fe1a:	c3                   	ret    
c001fe1b:	90                   	nop

c001fe1c <ATA::access(unsigned long long, int, void*, bool)>:
c001fe1c:	55                   	push   ebp
c001fe1d:	57                   	push   edi
c001fe1e:	56                   	push   esi
c001fe1f:	53                   	push   ebx
c001fe20:	83 ec 38             	sub    esp,0x38
c001fe23:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001fe27:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001fe2b:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001fe2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001fe33:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001fe37:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001fe3b:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001fe3f:	68 90 76 02 c0       	push   0xc0027690
c001fe44:	e8 ce d2 fe ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c001fe49:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001fe4f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fe53:	83 c4 10             	add    esp,0x10
c001fe56:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001fe5c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fe60:	c1 e0 06             	shl    eax,0x6
c001fe63:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001fe6b:	74 5d                	je     c001feca <ATA::access(unsigned long long, int, void*, bool)+0xae>
c001fe6d:	89 fa                	mov    edx,edi
c001fe6f:	89 f0                	mov    eax,esi
c001fe71:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001fe75:	c1 ea 1c             	shr    edx,0x1c
c001fe78:	89 d1                	mov    ecx,edx
c001fe7a:	09 c1                	or     ecx,eax
c001fe7c:	74 25                	je     c001fea3 <ATA::access(unsigned long long, int, void*, bool)+0x87>
c001fe7e:	31 ed                	xor    ebp,ebp
c001fe80:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001fe87:	89 fa                	mov    edx,edi
c001fe89:	89 f0                	mov    eax,esi
c001fe8b:	0f ad d0             	shrd   eax,edx,cl
c001fe8e:	d3 ea                	shr    edx,cl
c001fe90:	f6 c1 20             	test   cl,0x20
c001fe93:	74 02                	je     c001fe97 <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c001fe95:	89 d0                	mov    eax,edx
c001fe97:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001fe9b:	45                   	inc    ebp
c001fe9c:	83 fd 06             	cmp    ebp,0x6
c001fe9f:	75 df                	jne    c001fe80 <ATA::access(unsigned long long, int, void*, bool)+0x64>
c001fea1:	eb 76                	jmp    c001ff19 <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c001fea3:	89 f0                	mov    eax,esi
c001fea5:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001feaa:	89 fa                	mov    edx,edi
c001feac:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001feb3:	0f ac d0 10          	shrd   eax,edx,0x10
c001feb7:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001febc:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001fec0:	c1 ee 18             	shr    esi,0x18
c001fec3:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001fec8:	eb 56                	jmp    c001ff20 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001feca:	6a 00                	push   0x0
c001fecc:	6a 3f                	push   0x3f
c001fece:	57                   	push   edi
c001fecf:	56                   	push   esi
c001fed0:	e8 0b 32 00 00       	call   c00230e0 <__umoddi3>
c001fed5:	83 c4 10             	add    esp,0x10
c001fed8:	40                   	inc    eax
c001fed9:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001fedd:	6a 00                	push   0x0
c001fedf:	68 f0 03 00 00       	push   0x3f0
c001fee4:	57                   	push   edi
c001fee5:	56                   	push   esi
c001fee6:	e8 f5 30 00 00       	call   c0022fe0 <__udivdi3>
c001feeb:	83 c4 10             	add    esp,0x10
c001feee:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001fef3:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001fefa:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001feff:	6a 00                	push   0x0
c001ff01:	6a 3f                	push   0x3f
c001ff03:	57                   	push   edi
c001ff04:	56                   	push   esi
c001ff05:	e8 d6 30 00 00       	call   c0022fe0 <__udivdi3>
c001ff0a:	83 c4 10             	add    esp,0x10
c001ff0d:	89 c6                	mov    esi,eax
c001ff0f:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001ff14:	83 e6 0f             	and    esi,0xf
c001ff17:	eb 07                	jmp    c001ff20 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001ff19:	31 f6                	xor    esi,esi
c001ff1b:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001ff20:	bf 01 00 00 00       	mov    edi,0x1
c001ff25:	50                   	push   eax
c001ff26:	6a 00                	push   0x0
c001ff28:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ff2f:	50                   	push   eax
c001ff30:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ff34:	e8 8d f0 ff ff       	call   c001efc6 <IDE::enableIRQs(unsigned char, bool)>
c001ff39:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ff3c:	e8 8f fe ff ff       	call   c001fdd0 <ATA::readyForCommand()>
c001ff41:	83 c4 10             	add    esp,0x10
c001ff44:	84 c0                	test   al,al
c001ff46:	0f 84 bc 02 00 00    	je     c0020208 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001ff4c:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ff52:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ff58:	c1 e0 04             	shl    eax,0x4
c001ff5b:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001ff62:	09 c6                	or     esi,eax
c001ff64:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ff69:	75 05                	jne    c001ff70 <ATA::access(unsigned long long, int, void*, bool)+0x154>
c001ff6b:	83 ce a0             	or     esi,0xffffffa0
c001ff6e:	eb 03                	jmp    c001ff73 <ATA::access(unsigned long long, int, void*, bool)+0x157>
c001ff70:	83 ce e0             	or     esi,0xffffffe0
c001ff73:	89 f0                	mov    eax,esi
c001ff75:	0f b6 f0             	movzx  esi,al
c001ff78:	56                   	push   esi
c001ff79:	6a 06                	push   0x6
c001ff7b:	51                   	push   ecx
c001ff7c:	52                   	push   edx
c001ff7d:	e8 3c ee ff ff       	call   c001edbe <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ff82:	83 c4 10             	add    esp,0x10
c001ff85:	6a 00                	push   0x0
c001ff87:	6a 01                	push   0x1
c001ff89:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ff90:	50                   	push   eax
c001ff91:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ff97:	e8 22 ee ff ff       	call   c001edbe <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ff9c:	83 c4 10             	add    esp,0x10
c001ff9f:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001ffa4:	75 6e                	jne    c0020014 <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001ffa6:	6a 00                	push   0x0
c001ffa8:	6a 08                	push   0x8
c001ffaa:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ffb1:	50                   	push   eax
c001ffb2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ffb8:	e8 01 ee ff ff       	call   c001edbe <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ffbd:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001ffc2:	50                   	push   eax
c001ffc3:	6a 09                	push   0x9
c001ffc5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ffcc:	50                   	push   eax
c001ffcd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ffd3:	e8 e6 ed ff ff       	call   c001edbe <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ffd8:	83 c4 20             	add    esp,0x20
c001ffdb:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001ffe0:	50                   	push   eax
c001ffe1:	6a 0a                	push   0xa
c001ffe3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ffea:	50                   	push   eax
c001ffeb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fff1:	e8 c8 ed ff ff       	call   c001edbe <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fff6:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001fffb:	50                   	push   eax
c001fffc:	6a 0b                	push   0xb
c001fffe:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020005:	50                   	push   eax
c0020006:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002000c:	e8 ad ed ff ff       	call   c001edbe <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020011:	83 c4 20             	add    esp,0x20
c0020014:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0020019:	50                   	push   eax
c002001a:	6a 02                	push   0x2
c002001c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020023:	50                   	push   eax
c0020024:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002002a:	e8 8f ed ff ff       	call   c001edbe <IDE::write(unsigned char, unsigned char, unsigned char)>
c002002f:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0020034:	50                   	push   eax
c0020035:	6a 03                	push   0x3
c0020037:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002003e:	50                   	push   eax
c002003f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020045:	e8 74 ed ff ff       	call   c001edbe <IDE::write(unsigned char, unsigned char, unsigned char)>
c002004a:	83 c4 20             	add    esp,0x20
c002004d:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0020052:	50                   	push   eax
c0020053:	6a 04                	push   0x4
c0020055:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002005c:	50                   	push   eax
c002005d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020063:	e8 56 ed ff ff       	call   c001edbe <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020068:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002006d:	50                   	push   eax
c002006e:	6a 05                	push   0x5
c0020070:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020077:	50                   	push   eax
c0020078:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002007e:	e8 3b ed ff ff       	call   c001edbe <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020083:	83 c4 20             	add    esp,0x20
c0020086:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c002008b:	0f 94 c0             	sete   al
c002008e:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0020093:	74 09                	je     c002009e <ATA::access(unsigned long long, int, void*, bool)+0x282>
c0020095:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c002009c:	eb 07                	jmp    c00200a5 <ATA::access(unsigned long long, int, void*, bool)+0x289>
c002009e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c00200a5:	0f b6 c0             	movzx  eax,al
c00200a8:	50                   	push   eax
c00200a9:	6a 07                	push   0x7
c00200ab:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00200b2:	50                   	push   eax
c00200b3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00200b9:	e8 00 ed ff ff       	call   c001edbe <IDE::write(unsigned char, unsigned char, unsigned char)>
c00200be:	c7 04 24 9d 76 02 c0 	mov    DWORD PTR [esp],0xc002769d
c00200c5:	e8 4d d0 fe ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c00200ca:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00200ce:	83 c4 10             	add    esp,0x10
c00200d1:	85 f6                	test   esi,esi
c00200d3:	0f 84 f7 00 00 00    	je     c00201d0 <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c00200d9:	83 ec 0c             	sub    esp,0xc
c00200dc:	68 a0 76 02 c0       	push   0xc00276a0
c00200e1:	e8 31 d0 fe ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c00200e6:	83 c4 0c             	add    esp,0xc
c00200e9:	6a 01                	push   0x1
c00200eb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00200f2:	50                   	push   eax
c00200f3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00200f9:	e8 74 f7 ff ff       	call   c001f872 <IDE::polling(unsigned char, unsigned int)>
c00200fe:	c7 04 24 a3 76 02 c0 	mov    DWORD PTR [esp],0xc00276a3
c0020105:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0020109:	e8 09 d0 fe ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c002010e:	83 c4 10             	add    esp,0x10
c0020111:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0020115:	84 c0                	test   al,al
c0020117:	74 2b                	je     c0020144 <ATA::access(unsigned long long, int, void*, bool)+0x328>
c0020119:	0f b6 f8             	movzx  edi,al
c002011c:	57                   	push   edi
c002011d:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0020124:	50                   	push   eax
c0020125:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002012c:	50                   	push   eax
c002012d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020133:	e8 8a f6 ff ff       	call   c001f7c2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0020138:	c7 04 24 a6 76 02 c0 	mov    DWORD PTR [esp],0xc00276a6
c002013f:	e9 bc 00 00 00       	jmp    c0020200 <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c0020144:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0020149:	74 50                	je     c002019b <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c002014b:	83 ec 0c             	sub    esp,0xc
c002014e:	31 ed                	xor    ebp,ebp
c0020150:	68 b1 76 02 c0       	push   0xc00276b1
c0020155:	e8 bd cf fe ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c002015a:	83 c4 10             	add    esp,0x10
c002015d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0020161:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0020165:	50                   	push   eax
c0020166:	50                   	push   eax
c0020167:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002016e:	50                   	push   eax
c002016f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020175:	e8 32 ec ff ff       	call   c001edac <IDE::getBase(unsigned char)>
c002017a:	89 c2                	mov    edx,eax
c002017c:	89 f8                	mov    eax,edi
c002017e:	66 ef                	out    dx,ax
c0020180:	45                   	inc    ebp
c0020181:	83 c4 10             	add    esp,0x10
c0020184:	81 fd 00 01 00 00    	cmp    ebp,0x100
c002018a:	75 d1                	jne    c002015d <ATA::access(unsigned long long, int, void*, bool)+0x341>
c002018c:	83 ec 0c             	sub    esp,0xc
c002018f:	68 b4 76 02 c0       	push   0xc00276b4
c0020194:	e8 7e cf fe ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0020199:	eb 24                	jmp    c00201bf <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c002019b:	51                   	push   ecx
c002019c:	51                   	push   ecx
c002019d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00201a4:	50                   	push   eax
c00201a5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00201ab:	e8 fc eb ff ff       	call   c001edac <IDE::getBase(unsigned char)>
c00201b0:	b9 00 01 00 00       	mov    ecx,0x100
c00201b5:	89 c2                	mov    edx,eax
c00201b7:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c00201bb:	fc                   	cld    
c00201bc:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c00201bf:	83 c4 10             	add    esp,0x10
c00201c2:	4e                   	dec    esi
c00201c3:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c00201cb:	e9 01 ff ff ff       	jmp    c00200d1 <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c00201d0:	31 ff                	xor    edi,edi
c00201d2:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00201d7:	74 2f                	je     c0020208 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c00201d9:	83 ec 0c             	sub    esp,0xc
c00201dc:	68 b7 76 02 c0       	push   0xc00276b7
c00201e1:	e8 31 cf fe ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c00201e6:	58                   	pop    eax
c00201e7:	31 c0                	xor    eax,eax
c00201e9:	5a                   	pop    edx
c00201ea:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c00201ef:	0f 94 c0             	sete   al
c00201f2:	50                   	push   eax
c00201f3:	53                   	push   ebx
c00201f4:	e8 8d fb ff ff       	call   c001fd86 <ATA::flush(bool)>
c00201f9:	c7 04 24 ba 76 02 c0 	mov    DWORD PTR [esp],0xc00276ba
c0020200:	e8 12 cf fe ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0020205:	83 c4 10             	add    esp,0x10
c0020208:	83 c4 2c             	add    esp,0x2c
c002020b:	89 f8                	mov    eax,edi
c002020d:	5b                   	pop    ebx
c002020e:	5e                   	pop    esi
c002020f:	5f                   	pop    edi
c0020210:	5d                   	pop    ebp
c0020211:	c3                   	ret    

c0020212 <ATA::read(unsigned long long, int, void*)>:
c0020212:	57                   	push   edi
c0020213:	b8 04 00 00 00       	mov    eax,0x4
c0020218:	56                   	push   esi
c0020219:	53                   	push   ebx
c002021a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002021e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020222:	8d 7a ff             	lea    edi,[edx-0x1]
c0020225:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020229:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002022d:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0020233:	77 25                	ja     c002025a <ATA::read(unsigned long long, int, void*)+0x48>
c0020235:	b8 06 00 00 00       	mov    eax,0x6
c002023a:	85 f6                	test   esi,esi
c002023c:	74 1c                	je     c002025a <ATA::read(unsigned long long, int, void*)+0x48>
c002023e:	50                   	push   eax
c002023f:	50                   	push   eax
c0020240:	6a 00                	push   0x0
c0020242:	56                   	push   esi
c0020243:	52                   	push   edx
c0020244:	53                   	push   ebx
c0020245:	51                   	push   ecx
c0020246:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002024a:	e8 cd fb ff ff       	call   c001fe1c <ATA::access(unsigned long long, int, void*, bool)>
c002024f:	83 c4 20             	add    esp,0x20
c0020252:	85 c0                	test   eax,eax
c0020254:	0f 95 c0             	setne  al
c0020257:	0f b6 c0             	movzx  eax,al
c002025a:	5b                   	pop    ebx
c002025b:	5e                   	pop    esi
c002025c:	5f                   	pop    edi
c002025d:	c3                   	ret    

c002025e <ATA::write(unsigned long long, int, void*)>:
c002025e:	55                   	push   ebp
c002025f:	57                   	push   edi
c0020260:	56                   	push   esi
c0020261:	53                   	push   ebx
c0020262:	83 ec 18             	sub    esp,0x18
c0020265:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0020269:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002026d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0020271:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0020275:	68 bd 76 02 c0       	push   0xc00276bd
c002027a:	e8 98 ce fe ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c002027f:	8d 53 ff             	lea    edx,[ebx-0x1]
c0020282:	83 c4 10             	add    esp,0x10
c0020285:	b8 04 00 00 00       	mov    eax,0x4
c002028a:	81 fa fe 00 00 00    	cmp    edx,0xfe
c0020290:	77 25                	ja     c00202b7 <ATA::write(unsigned long long, int, void*)+0x59>
c0020292:	b8 06 00 00 00       	mov    eax,0x6
c0020297:	85 f6                	test   esi,esi
c0020299:	74 1c                	je     c00202b7 <ATA::write(unsigned long long, int, void*)+0x59>
c002029b:	50                   	push   eax
c002029c:	50                   	push   eax
c002029d:	6a 01                	push   0x1
c002029f:	56                   	push   esi
c00202a0:	53                   	push   ebx
c00202a1:	55                   	push   ebp
c00202a2:	57                   	push   edi
c00202a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00202a7:	e8 70 fb ff ff       	call   c001fe1c <ATA::access(unsigned long long, int, void*, bool)>
c00202ac:	83 c4 20             	add    esp,0x20
c00202af:	85 c0                	test   eax,eax
c00202b1:	0f 95 c0             	setne  al
c00202b4:	0f b6 c0             	movzx  eax,al
c00202b7:	83 c4 0c             	add    esp,0xc
c00202ba:	5b                   	pop    ebx
c00202bb:	5e                   	pop    esi
c00202bc:	5f                   	pop    edi
c00202bd:	5d                   	pop    ebp
c00202be:	c3                   	ret    
c00202bf:	90                   	nop

c00202c0 <ATA::detectCHS()>:
c00202c0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00202c4:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c00202ca:	c1 e0 06             	shl    eax,0x6
c00202cd:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c00202d3:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c00202dd:	c7 44 24 04 c9 76 02 c0 	mov    DWORD PTR [esp+0x4],0xc00276c9
c00202e5:	e9 0f 4f ff ff       	jmp    c00151f9 <Krnl::panic(char const*)>

c00202ea <ATA::open(int, int, void*)>:
c00202ea:	53                   	push   ebx
c00202eb:	83 ec 08             	sub    esp,0x8
c00202ee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00202f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00202f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00202fa:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0020300:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0020306:	c1 e0 06             	shl    eax,0x6
c0020309:	01 d0                	add    eax,edx
c002030b:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0020312:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0020318:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c002031f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0020329:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c002032f:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0020336:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002033d:	75 0c                	jne    c002034b <ATA::open(int, int, void*)+0x61>
c002033f:	83 ec 0c             	sub    esp,0xc
c0020342:	53                   	push   ebx
c0020343:	e8 78 ff ff ff       	call   c00202c0 <ATA::detectCHS()>
c0020348:	83 c4 10             	add    esp,0x10
c002034b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0020351:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0020357:	c1 e0 06             	shl    eax,0x6
c002035a:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0020361:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002036b:	d1 e8                	shr    eax,1
c002036d:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0020373:	6a 04                	push   0x4
c0020375:	6a 0c                	push   0xc
c0020377:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002037e:	50                   	push   eax
c002037f:	52                   	push   edx
c0020380:	e8 39 ea ff ff       	call   c001edbe <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020385:	90                   	nop
c0020386:	90                   	nop
c0020387:	6a 00                	push   0x0
c0020389:	6a 0c                	push   0xc
c002038b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020392:	50                   	push   eax
c0020393:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020399:	e8 20 ea ff ff       	call   c001edbe <IDE::write(unsigned char, unsigned char, unsigned char)>
c002039e:	83 c4 14             	add    esp,0x14
c00203a1:	53                   	push   ebx
c00203a2:	e8 83 e7 fe ff       	call   c000eb2a <PhysicalDisk::startCache()>
c00203a7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00203aa:	e8 f3 08 ff ff       	call   c0010ca2 <createPartitionsForDisk(PhysicalDisk*)>
c00203af:	31 c0                	xor    eax,eax
c00203b1:	83 c4 18             	add    esp,0x18
c00203b4:	5b                   	pop    ebx
c00203b5:	c3                   	ret    

c00203b6 <ATAPI::write(unsigned long long, int, void*)>:
c00203b6:	b8 03 00 00 00       	mov    eax,0x3
c00203bb:	c3                   	ret    

c00203bc <ATAPI::close(int, int, void*)>:
c00203bc:	83 ec 0c             	sub    esp,0xc
c00203bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203c3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00203c9:	85 c0                	test   eax,eax
c00203cb:	74 0c                	je     c00203d9 <ATAPI::close(int, int, void*)+0x1d>
c00203cd:	83 ec 0c             	sub    esp,0xc
c00203d0:	8b 10                	mov    edx,DWORD PTR [eax]
c00203d2:	50                   	push   eax
c00203d3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00203d6:	83 c4 10             	add    esp,0x10
c00203d9:	31 c0                	xor    eax,eax
c00203db:	83 c4 0c             	add    esp,0xc
c00203de:	c3                   	ret    
c00203df:	90                   	nop

c00203e0 <ATAPI::ATAPI()>:
c00203e0:	83 ec 0c             	sub    esp,0xc
c00203e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203e7:	83 ec 04             	sub    esp,0x4
c00203ea:	68 00 08 00 00       	push   0x800
c00203ef:	68 c9 79 02 c0       	push   0xc00279c9
c00203f4:	50                   	push   eax
c00203f5:	e8 c8 e6 fe ff       	call   c000eac2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00203fa:	83 c4 10             	add    esp,0x10
c00203fd:	ba 5c 77 02 c0       	mov    edx,0xc002775c
c0020402:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020406:	89 10                	mov    DWORD PTR [eax],edx
c0020408:	90                   	nop
c0020409:	83 c4 0c             	add    esp,0xc
c002040c:	c3                   	ret    
c002040d:	90                   	nop

c002040e <ATAPI::readyForCommand()>:
c002040e:	56                   	push   esi
c002040f:	53                   	push   ebx
c0020410:	53                   	push   ebx
c0020411:	31 db                	xor    ebx,ebx
c0020413:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020417:	51                   	push   ecx
c0020418:	6a 0c                	push   0xc
c002041a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0020421:	50                   	push   eax
c0020422:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0020428:	e8 51 ea ff ff       	call   c001ee7e <IDE::read(unsigned char, unsigned char)>
c002042d:	83 c4 10             	add    esp,0x10
c0020430:	a8 88                	test   al,0x88
c0020432:	74 25                	je     c0020459 <ATAPI::readyForCommand()+0x4b>
c0020434:	43                   	inc    ebx
c0020435:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c002043b:	7e da                	jle    c0020417 <ATAPI::readyForCommand()+0x9>
c002043d:	83 ec 0c             	sub    esp,0xc
c0020440:	68 5e 01 00 00       	push   0x15e
c0020445:	e8 02 8e ff ff       	call   c001924c <milliTenthSleep(unsigned int)>
c002044a:	83 c4 10             	add    esp,0x10
c002044d:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c0020453:	75 c2                	jne    c0020417 <ATAPI::readyForCommand()+0x9>
c0020455:	31 c0                	xor    eax,eax
c0020457:	eb 02                	jmp    c002045b <ATAPI::readyForCommand()+0x4d>
c0020459:	b0 01                	mov    al,0x1
c002045b:	5a                   	pop    edx
c002045c:	5b                   	pop    ebx
c002045d:	5e                   	pop    esi
c002045e:	c3                   	ret    
c002045f:	90                   	nop

c0020460 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0020460:	55                   	push   ebp
c0020461:	57                   	push   edi
c0020462:	56                   	push   esi
c0020463:	53                   	push   ebx
c0020464:	83 ec 20             	sub    esp,0x20
c0020467:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002046b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002046f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0020473:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0020477:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002047b:	6a 01                	push   0x1
c002047d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020484:	50                   	push   eax
c0020485:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002048b:	e8 36 eb ff ff       	call   c001efc6 <IDE::enableIRQs(unsigned char, bool)>
c0020490:	5e                   	pop    esi
c0020491:	58                   	pop    eax
c0020492:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020499:	50                   	push   eax
c002049a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00204a0:	e8 f3 e8 ff ff       	call   c001ed98 <IDE::prepareInterrupt(unsigned char)>
c00204a5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00204a8:	e8 61 ff ff ff       	call   c002040e <ATAPI::readyForCommand()>
c00204ad:	83 c4 10             	add    esp,0x10
c00204b0:	84 c0                	test   al,al
c00204b2:	75 0a                	jne    c00204be <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c00204b4:	bb 01 00 00 00       	mov    ebx,0x1
c00204b9:	e9 57 02 00 00       	jmp    c0020715 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00204be:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c00204c4:	c1 e0 04             	shl    eax,0x4
c00204c7:	0f b6 c0             	movzx  eax,al
c00204ca:	50                   	push   eax
c00204cb:	6a 06                	push   0x6
c00204cd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00204d4:	50                   	push   eax
c00204d5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00204db:	e8 de e8 ff ff       	call   c001edbe <IDE::write(unsigned char, unsigned char, unsigned char)>
c00204e0:	6a 00                	push   0x0
c00204e2:	6a 01                	push   0x1
c00204e4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00204eb:	50                   	push   eax
c00204ec:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00204f2:	e8 c7 e8 ff ff       	call   c001edbe <IDE::write(unsigned char, unsigned char, unsigned char)>
c00204f7:	83 c4 20             	add    esp,0x20
c00204fa:	0f b6 c3             	movzx  eax,bl
c00204fd:	0f b6 df             	movzx  ebx,bh
c0020500:	50                   	push   eax
c0020501:	6a 04                	push   0x4
c0020503:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002050a:	50                   	push   eax
c002050b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020511:	e8 a8 e8 ff ff       	call   c001edbe <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020516:	53                   	push   ebx
c0020517:	6a 05                	push   0x5
c0020519:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020520:	50                   	push   eax
c0020521:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020527:	e8 92 e8 ff ff       	call   c001edbe <IDE::write(unsigned char, unsigned char, unsigned char)>
c002052c:	83 c4 20             	add    esp,0x20
c002052f:	68 a0 00 00 00       	push   0xa0
c0020534:	6a 07                	push   0x7
c0020536:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002053d:	50                   	push   eax
c002053e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020544:	e8 75 e8 ff ff       	call   c001edbe <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020549:	83 c4 0c             	add    esp,0xc
c002054c:	6a 01                	push   0x1
c002054e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020555:	50                   	push   eax
c0020556:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002055c:	e8 11 f3 ff ff       	call   c001f872 <IDE::polling(unsigned char, unsigned int)>
c0020561:	83 c4 10             	add    esp,0x10
c0020564:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c002056a:	84 c0                	test   al,al
c002056c:	74 23                	je     c0020591 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c002056e:	0f b6 d8             	movzx  ebx,al
c0020571:	0f b6 d2             	movzx  edx,dl
c0020574:	53                   	push   ebx
c0020575:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c002057c:	50                   	push   eax
c002057d:	52                   	push   edx
c002057e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020584:	e8 39 f2 ff ff       	call   c001f7c2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0020589:	83 c4 10             	add    esp,0x10
c002058c:	e9 84 01 00 00       	jmp    c0020715 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0020591:	0f b6 d2             	movzx  edx,dl
c0020594:	53                   	push   ebx
c0020595:	53                   	push   ebx
c0020596:	52                   	push   edx
c0020597:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002059d:	e8 0a e8 ff ff       	call   c001edac <IDE::getBase(unsigned char)>
c00205a2:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00205a6:	b9 06 00 00 00       	mov    ecx,0x6
c00205ab:	89 c2                	mov    edx,eax
c00205ad:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c00205b0:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00205b4:	83 c4 10             	add    esp,0x10
c00205b7:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00205bd:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00205c4:	85 db                	test   ebx,ebx
c00205c6:	0f 84 ec 00 00 00    	je     c00206b8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c00205cc:	51                   	push   ecx
c00205cd:	51                   	push   ecx
c00205ce:	52                   	push   edx
c00205cf:	50                   	push   eax
c00205d0:	e8 57 e9 ff ff       	call   c001ef2c <IDE::waitInterrupt(unsigned char)>
c00205d5:	83 c4 10             	add    esp,0x10
c00205d8:	84 c0                	test   al,al
c00205da:	0f 84 d4 fe ff ff    	je     c00204b4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00205e0:	56                   	push   esi
c00205e1:	56                   	push   esi
c00205e2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00205e9:	50                   	push   eax
c00205ea:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00205f0:	e8 a3 e7 ff ff       	call   c001ed98 <IDE::prepareInterrupt(unsigned char)>
c00205f5:	83 c4 0c             	add    esp,0xc
c00205f8:	6a 04                	push   0x4
c00205fa:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020601:	50                   	push   eax
c0020602:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020608:	e8 71 e8 ff ff       	call   c001ee7e <IDE::read(unsigned char, unsigned char)>
c002060d:	83 c4 0c             	add    esp,0xc
c0020610:	89 c6                	mov    esi,eax
c0020612:	6a 05                	push   0x5
c0020614:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002061b:	50                   	push   eax
c002061c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020622:	e8 57 e8 ff ff       	call   c001ee7e <IDE::read(unsigned char, unsigned char)>
c0020627:	89 f1                	mov    ecx,esi
c0020629:	0f b6 c0             	movzx  eax,al
c002062c:	0f b6 f1             	movzx  esi,cl
c002062f:	c1 e0 08             	shl    eax,0x8
c0020632:	09 c6                	or     esi,eax
c0020634:	d1 fe                	sar    esi,1
c0020636:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c002063a:	83 c4 10             	add    esp,0x10
c002063d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0020642:	74 41                	je     c0020685 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0020644:	31 c9                	xor    ecx,ecx
c0020646:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002064c:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0020653:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0020657:	75 0a                	jne    c0020663 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0020659:	01 c9                	add    ecx,ecx
c002065b:	01 cd                	add    ebp,ecx
c002065d:	4b                   	dec    ebx
c002065e:	e9 54 ff ff ff       	jmp    c00205b7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0020663:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0020668:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002066c:	51                   	push   ecx
c002066d:	51                   	push   ecx
c002066e:	52                   	push   edx
c002066f:	50                   	push   eax
c0020670:	e8 37 e7 ff ff       	call   c001edac <IDE::getBase(unsigned char)>
c0020675:	89 c2                	mov    edx,eax
c0020677:	89 f0                	mov    eax,esi
c0020679:	66 ef                	out    dx,ax
c002067b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002067f:	83 c4 10             	add    esp,0x10
c0020682:	41                   	inc    ecx
c0020683:	eb c1                	jmp    c0020646 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0020685:	31 f6                	xor    esi,esi
c0020687:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002068d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0020694:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0020698:	75 06                	jne    c00206a0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c002069a:	01 f6                	add    esi,esi
c002069c:	01 f5                	add    ebp,esi
c002069e:	eb bd                	jmp    c002065d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c00206a0:	51                   	push   ecx
c00206a1:	51                   	push   ecx
c00206a2:	52                   	push   edx
c00206a3:	50                   	push   eax
c00206a4:	e8 03 e7 ff ff       	call   c001edac <IDE::getBase(unsigned char)>
c00206a9:	89 c2                	mov    edx,eax
c00206ab:	66 ed                	in     ax,dx
c00206ad:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c00206b2:	83 c4 10             	add    esp,0x10
c00206b5:	46                   	inc    esi
c00206b6:	eb cf                	jmp    c0020687 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c00206b8:	51                   	push   ecx
c00206b9:	51                   	push   ecx
c00206ba:	52                   	push   edx
c00206bb:	50                   	push   eax
c00206bc:	e8 6b e8 ff ff       	call   c001ef2c <IDE::waitInterrupt(unsigned char)>
c00206c1:	83 c4 10             	add    esp,0x10
c00206c4:	84 c0                	test   al,al
c00206c6:	0f 84 e8 fd ff ff    	je     c00204b4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00206cc:	bb a0 86 01 00       	mov    ebx,0x186a0
c00206d1:	52                   	push   edx
c00206d2:	52                   	push   edx
c00206d3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00206da:	50                   	push   eax
c00206db:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00206e1:	e8 b2 e6 ff ff       	call   c001ed98 <IDE::prepareInterrupt(unsigned char)>
c00206e6:	83 c4 10             	add    esp,0x10
c00206e9:	50                   	push   eax
c00206ea:	50                   	push   eax
c00206eb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00206f2:	50                   	push   eax
c00206f3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00206f9:	e8 ae e6 ff ff       	call   c001edac <IDE::getBase(unsigned char)>
c00206fe:	8d 50 07             	lea    edx,[eax+0x7]
c0020701:	ec                   	in     al,dx
c0020702:	83 c4 10             	add    esp,0x10
c0020705:	a8 88                	test   al,0x88
c0020707:	74 0a                	je     c0020713 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0020709:	4b                   	dec    ebx
c002070a:	75 dd                	jne    c00206e9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c002070c:	bb 02 00 00 00       	mov    ebx,0x2
c0020711:	eb 02                	jmp    c0020715 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0020713:	31 db                	xor    ebx,ebx
c0020715:	83 c4 1c             	add    esp,0x1c
c0020718:	89 d8                	mov    eax,ebx
c002071a:	5b                   	pop    ebx
c002071b:	5e                   	pop    esi
c002071c:	5f                   	pop    edi
c002071d:	5d                   	pop    ebp
c002071e:	c3                   	ret    
c002071f:	90                   	nop

c0020720 <ATAPI::diskRemoved()>:
c0020720:	53                   	push   ebx
c0020721:	83 ec 14             	sub    esp,0x14
c0020724:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0020728:	68 14 77 02 c0       	push   0xc0027714
c002072d:	e8 e5 c9 fe ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0020732:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0020739:	c7 04 24 2a 77 02 c0 	mov    DWORD PTR [esp],0xc002772a
c0020740:	e8 d2 c9 fe ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0020745:	58                   	pop    eax
c0020746:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c002074c:	e8 cf 02 ff ff       	call   c0010a20 <LogicalDisk::unmount()>
c0020751:	c7 04 24 39 77 02 c0 	mov    DWORD PTR [esp],0xc0027739
c0020758:	e8 ba c9 fe ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c002075d:	5a                   	pop    edx
c002075e:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0020764:	e8 bf 0c ff ff       	call   c0011428 <VCache::writeWriteBuffer()>
c0020769:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c002076f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020773:	83 c4 18             	add    esp,0x18
c0020776:	5b                   	pop    ebx
c0020777:	e9 9c 0c ff ff       	jmp    c0011418 <VCache::invalidateReadBuffer()>

c002077c <ATAPI::eject()>:
c002077c:	57                   	push   edi
c002077d:	b9 03 00 00 00       	mov    ecx,0x3
c0020782:	53                   	push   ebx
c0020783:	83 ec 14             	sub    esp,0x14
c0020786:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002078a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002078e:	fc                   	cld    
c002078f:	31 c0                	xor    eax,eax
c0020791:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020793:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0020798:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002079d:	50                   	push   eax
c002079e:	50                   	push   eax
c002079f:	6a 00                	push   0x0
c00207a1:	6a 00                	push   0x0
c00207a3:	6a 00                	push   0x0
c00207a5:	6a 02                	push   0x2
c00207a7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00207ab:	50                   	push   eax
c00207ac:	53                   	push   ebx
c00207ad:	e8 ae fc ff ff       	call   c0020460 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00207b2:	83 c4 14             	add    esp,0x14
c00207b5:	53                   	push   ebx
c00207b6:	e8 65 ff ff ff       	call   c0020720 <ATAPI::diskRemoved()>
c00207bb:	83 c4 24             	add    esp,0x24
c00207be:	31 c0                	xor    eax,eax
c00207c0:	5b                   	pop    ebx
c00207c1:	5f                   	pop    edi
c00207c2:	c3                   	ret    
c00207c3:	90                   	nop

c00207c4 <ATAPI::diskInserted()>:
c00207c4:	83 ec 18             	sub    esp,0x18
c00207c7:	68 d5 79 02 c0       	push   0xc00279d5
c00207cc:	e8 46 c9 fe ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c00207d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00207d5:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c00207dc:	83 c4 1c             	add    esp,0x1c
c00207df:	c3                   	ret    

c00207e0 <ATAPI::detectMedia()>:
c00207e0:	56                   	push   esi
c00207e1:	53                   	push   ebx
c00207e2:	83 ec 28             	sub    esp,0x28
c00207e5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00207e9:	6a 0c                	push   0xc
c00207eb:	6a 00                	push   0x0
c00207ed:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00207f1:	56                   	push   esi
c00207f2:	e8 9d fe fd ff       	call   c0000694 <memset>
c00207f7:	58                   	pop    eax
c00207f8:	5a                   	pop    edx
c00207f9:	6a 00                	push   0x0
c00207fb:	6a 00                	push   0x0
c00207fd:	6a 00                	push   0x0
c00207ff:	6a 00                	push   0x0
c0020801:	56                   	push   esi
c0020802:	53                   	push   ebx
c0020803:	e8 58 fc ff ff       	call   c0020460 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020808:	83 c4 1c             	add    esp,0x1c
c002080b:	6a 0c                	push   0xc
c002080d:	6a 00                	push   0x0
c002080f:	56                   	push   esi
c0020810:	e8 7f fe fd ff       	call   c0000694 <memset>
c0020815:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002081a:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002081f:	59                   	pop    ecx
c0020820:	58                   	pop    eax
c0020821:	6a 01                	push   0x1
c0020823:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0020827:	50                   	push   eax
c0020828:	6a 00                	push   0x0
c002082a:	6a 12                	push   0x12
c002082c:	56                   	push   esi
c002082d:	53                   	push   ebx
c002082e:	e8 2d fc ff ff       	call   c0020460 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020833:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0020837:	83 c4 20             	add    esp,0x20
c002083a:	83 e0 7f             	and    eax,0x7f
c002083d:	3c 70                	cmp    al,0x70
c002083f:	74 15                	je     c0020856 <ATAPI::detectMedia()+0x76>
c0020841:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020848:	75 0c                	jne    c0020856 <ATAPI::detectMedia()+0x76>
c002084a:	83 ec 0c             	sub    esp,0xc
c002084d:	53                   	push   ebx
c002084e:	e8 71 ff ff ff       	call   c00207c4 <ATAPI::diskInserted()>
c0020853:	83 c4 10             	add    esp,0x10
c0020856:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002085a:	83 e0 0f             	and    eax,0xf
c002085d:	3c 02                	cmp    al,0x2
c002085f:	75 1b                	jne    c002087c <ATAPI::detectMedia()+0x9c>
c0020861:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0020866:	75 2d                	jne    c0020895 <ATAPI::detectMedia()+0xb5>
c0020868:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002086f:	74 24                	je     c0020895 <ATAPI::detectMedia()+0xb5>
c0020871:	83 ec 0c             	sub    esp,0xc
c0020874:	53                   	push   ebx
c0020875:	e8 a6 fe ff ff       	call   c0020720 <ATAPI::diskRemoved()>
c002087a:	eb 16                	jmp    c0020892 <ATAPI::detectMedia()+0xb2>
c002087c:	84 c0                	test   al,al
c002087e:	75 15                	jne    c0020895 <ATAPI::detectMedia()+0xb5>
c0020880:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020887:	75 0c                	jne    c0020895 <ATAPI::detectMedia()+0xb5>
c0020889:	83 ec 0c             	sub    esp,0xc
c002088c:	53                   	push   ebx
c002088d:	e8 32 ff ff ff       	call   c00207c4 <ATAPI::diskInserted()>
c0020892:	83 c4 10             	add    esp,0x10
c0020895:	83 c4 24             	add    esp,0x24
c0020898:	5b                   	pop    ebx
c0020899:	5e                   	pop    esi
c002089a:	c3                   	ret    
c002089b:	90                   	nop

c002089c <ATAPI::open(int, int, void*)>:
c002089c:	56                   	push   esi
c002089d:	53                   	push   ebx
c002089e:	50                   	push   eax
c002089f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00208a3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00208a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00208ab:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00208b1:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00208b7:	c1 e0 06             	shl    eax,0x6
c00208ba:	01 d0                	add    eax,edx
c00208bc:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c00208c3:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c00208c9:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c00208d0:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00208da:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00208e0:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00208e7:	6a 04                	push   0x4
c00208e9:	6a 0c                	push   0xc
c00208eb:	51                   	push   ecx
c00208ec:	52                   	push   edx
c00208ed:	e8 cc e4 ff ff       	call   c001edbe <IDE::write(unsigned char, unsigned char, unsigned char)>
c00208f2:	90                   	nop
c00208f3:	90                   	nop
c00208f4:	6a 00                	push   0x0
c00208f6:	6a 0c                	push   0xc
c00208f8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00208ff:	50                   	push   eax
c0020900:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020906:	e8 b3 e4 ff ff       	call   c001edbe <IDE::write(unsigned char, unsigned char, unsigned char)>
c002090b:	83 c4 14             	add    esp,0x14
c002090e:	68 74 01 00 00       	push   0x174
c0020913:	e8 cf 94 fe ff       	call   c0009de7 <malloc>
c0020918:	83 c4 0c             	add    esp,0xc
c002091b:	89 c6                	mov    esi,eax
c002091d:	6a 00                	push   0x0
c002091f:	68 ff ff ff 7f       	push   0x7fffffff
c0020924:	6a 00                	push   0x0
c0020926:	6a 00                	push   0x0
c0020928:	53                   	push   ebx
c0020929:	68 b2 7a 02 c0       	push   0xc0027ab2
c002092e:	50                   	push   eax
c002092f:	e8 f8 fe fe ff       	call   c001082c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0020934:	83 c4 14             	add    esp,0x14
c0020937:	56                   	push   esi
c0020938:	e8 a5 ff fe ff       	call   c00108e2 <LogicalDisk::assignDriveLetter()>
c002093d:	5a                   	pop    edx
c002093e:	0f be c0             	movsx  eax,al
c0020941:	59                   	pop    ecx
c0020942:	50                   	push   eax
c0020943:	68 47 77 02 c0       	push   0xc0027747
c0020948:	e8 ca c7 fe ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c002094d:	58                   	pop    eax
c002094e:	5a                   	pop    edx
c002094f:	56                   	push   esi
c0020950:	53                   	push   ebx
c0020951:	e8 34 dd fe ff       	call   c000e68a <Device::addChild(Device*)>
c0020956:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c002095c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002095f:	e8 c6 e1 fe ff       	call   c000eb2a <PhysicalDisk::startCache()>
c0020964:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002096b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002096e:	e8 6d fe ff ff       	call   c00207e0 <ATAPI::detectMedia()>
c0020973:	83 c4 14             	add    esp,0x14
c0020976:	31 c0                	xor    eax,eax
c0020978:	5b                   	pop    ebx
c0020979:	5e                   	pop    esi
c002097a:	c3                   	ret    
c002097b:	90                   	nop

c002097c <ATAPI::read(unsigned long long, int, void*)>:
c002097c:	55                   	push   ebp
c002097d:	57                   	push   edi
c002097e:	56                   	push   esi
c002097f:	53                   	push   ebx
c0020980:	83 ec 1c             	sub    esp,0x1c
c0020983:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0020987:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002098b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002098f:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0020996:	74 41                	je     c00209d9 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0020998:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002099c:	b9 03 00 00 00       	mov    ecx,0x3
c00209a1:	fc                   	cld    
c00209a2:	31 c0                	xor    eax,eax
c00209a4:	86 fb                	xchg   bl,bh
c00209a6:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00209a8:	c1 c3 10             	rol    ebx,0x10
c00209ab:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00209b0:	89 e8                	mov    eax,ebp
c00209b2:	86 fb                	xchg   bl,bh
c00209b4:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00209b8:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c00209bc:	50                   	push   eax
c00209bd:	50                   	push   eax
c00209be:	55                   	push   ebp
c00209bf:	c1 e5 0b             	shl    ebp,0xb
c00209c2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00209c6:	6a 00                	push   0x0
c00209c8:	55                   	push   ebp
c00209c9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00209cd:	50                   	push   eax
c00209ce:	56                   	push   esi
c00209cf:	e8 8c fa ff ff       	call   c0020460 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00209d4:	83 c4 20             	add    esp,0x20
c00209d7:	eb 1a                	jmp    c00209f3 <ATAPI::read(unsigned long long, int, void*)+0x77>
c00209d9:	83 ec 0c             	sub    esp,0xc
c00209dc:	56                   	push   esi
c00209dd:	e8 fe fd ff ff       	call   c00207e0 <ATAPI::detectMedia()>
c00209e2:	83 c4 10             	add    esp,0x10
c00209e5:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00209ec:	75 aa                	jne    c0020998 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c00209ee:	b8 02 00 00 00       	mov    eax,0x2
c00209f3:	83 c4 1c             	add    esp,0x1c
c00209f6:	5b                   	pop    ebx
c00209f7:	5e                   	pop    esi
c00209f8:	5f                   	pop    edi
c00209f9:	5d                   	pop    ebp
c00209fa:	c3                   	ret    
c00209fb:	90                   	nop

c00209fc <SATA::close(int, int, void*)>:
c00209fc:	83 ec 0c             	sub    esp,0xc
c00209ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a03:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020a09:	85 c0                	test   eax,eax
c0020a0b:	74 0c                	je     c0020a19 <SATA::close(int, int, void*)+0x1d>
c0020a0d:	83 ec 0c             	sub    esp,0xc
c0020a10:	8b 10                	mov    edx,DWORD PTR [eax]
c0020a12:	50                   	push   eax
c0020a13:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020a16:	83 c4 10             	add    esp,0x10
c0020a19:	31 c0                	xor    eax,eax
c0020a1b:	83 c4 0c             	add    esp,0xc
c0020a1e:	c3                   	ret    
c0020a1f:	90                   	nop

c0020a20 <SATA::powerSaving(PowerSavingLevel)>:
c0020a20:	c3                   	ret    
c0020a21:	90                   	nop

c0020a22 <SATA::open(int, int, void*)>:
c0020a22:	56                   	push   esi
c0020a23:	53                   	push   ebx
c0020a24:	51                   	push   ecx
c0020a25:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020a29:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c0020a30:	74 2d                	je     c0020a5f <SATA::open(int, int, void*)+0x3d>
c0020a32:	83 ec 0c             	sub    esp,0xc
c0020a35:	68 8c 77 02 c0       	push   0xc002778c
c0020a3a:	e8 02 94 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020a3f:	83 c4 10             	add    esp,0x10
c0020a42:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c0020a49:	75 14                	jne    c0020a5f <SATA::open(int, int, void*)+0x3d>
c0020a4b:	e4 60                	in     al,0x60
c0020a4d:	3c 5a                	cmp    al,0x5a
c0020a4f:	74 04                	je     c0020a55 <SATA::open(int, int, void*)+0x33>
c0020a51:	3c 1c                	cmp    al,0x1c
c0020a53:	75 f6                	jne    c0020a4b <SATA::open(int, int, void*)+0x29>
c0020a55:	e4 60                	in     al,0x60
c0020a57:	3c 5a                	cmp    al,0x5a
c0020a59:	74 fa                	je     c0020a55 <SATA::open(int, int, void*)+0x33>
c0020a5b:	3c 1c                	cmp    al,0x1c
c0020a5d:	74 f6                	je     c0020a55 <SATA::open(int, int, void*)+0x33>
c0020a5f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020a63:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0020a6d:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0020a73:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0020a7d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020a81:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0020a8b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0020a91:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0020a98:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c0020a9f:	74 2d                	je     c0020ace <SATA::open(int, int, void*)+0xac>
c0020aa1:	83 ec 0c             	sub    esp,0xc
c0020aa4:	68 99 77 02 c0       	push   0xc0027799
c0020aa9:	e8 93 93 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020aae:	83 c4 10             	add    esp,0x10
c0020ab1:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c0020ab8:	75 14                	jne    c0020ace <SATA::open(int, int, void*)+0xac>
c0020aba:	e4 60                	in     al,0x60
c0020abc:	3c 1c                	cmp    al,0x1c
c0020abe:	74 04                	je     c0020ac4 <SATA::open(int, int, void*)+0xa2>
c0020ac0:	3c 5a                	cmp    al,0x5a
c0020ac2:	75 f6                	jne    c0020aba <SATA::open(int, int, void*)+0x98>
c0020ac4:	e4 60                	in     al,0x60
c0020ac6:	3c 5a                	cmp    al,0x5a
c0020ac8:	74 fa                	je     c0020ac4 <SATA::open(int, int, void*)+0xa2>
c0020aca:	3c 1c                	cmp    al,0x1c
c0020acc:	74 f6                	je     c0020ac4 <SATA::open(int, int, void*)+0xa2>
c0020ace:	e8 cb 99 fe ff       	call   c000a49e <Phys::allocatePage()>
c0020ad3:	89 c6                	mov    esi,eax
c0020ad5:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0020adb:	81 c6 00 10 00 00    	add    esi,0x1000
c0020ae1:	e8 b8 99 fe ff       	call   c000a49e <Phys::allocatePage()>
c0020ae6:	39 c6                	cmp    esi,eax
c0020ae8:	74 10                	je     c0020afa <SATA::open(int, int, void*)+0xd8>
c0020aea:	83 ec 0c             	sub    esp,0xc
c0020aed:	68 a6 77 02 c0       	push   0xc00277a6
c0020af2:	e8 02 47 ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c0020af7:	83 c4 10             	add    esp,0x10
c0020afa:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c0020b01:	74 2d                	je     c0020b30 <SATA::open(int, int, void*)+0x10e>
c0020b03:	83 ec 0c             	sub    esp,0xc
c0020b06:	68 ba 77 02 c0       	push   0xc00277ba
c0020b0b:	e8 31 93 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020b10:	83 c4 10             	add    esp,0x10
c0020b13:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c0020b1a:	75 14                	jne    c0020b30 <SATA::open(int, int, void*)+0x10e>
c0020b1c:	e4 60                	in     al,0x60
c0020b1e:	3c 1c                	cmp    al,0x1c
c0020b20:	74 04                	je     c0020b26 <SATA::open(int, int, void*)+0x104>
c0020b22:	3c 5a                	cmp    al,0x5a
c0020b24:	75 f6                	jne    c0020b1c <SATA::open(int, int, void*)+0xfa>
c0020b26:	e4 60                	in     al,0x60
c0020b28:	3c 5a                	cmp    al,0x5a
c0020b2a:	74 fa                	je     c0020b26 <SATA::open(int, int, void*)+0x104>
c0020b2c:	3c 1c                	cmp    al,0x1c
c0020b2e:	74 f6                	je     c0020b26 <SATA::open(int, int, void*)+0x104>
c0020b30:	83 ec 0c             	sub    esp,0xc
c0020b33:	6a 02                	push   0x2
c0020b35:	e8 67 b2 fe ff       	call   c000bda1 <Virt::allocateKernelVirtualPages(int)>
c0020b3a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0020b40:	6a 03                	push   0x3
c0020b42:	50                   	push   eax
c0020b43:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0020b49:	ff 35 34 8d 02 c0    	push   DWORD PTR ds:0xc0028d34
c0020b4f:	e8 b8 b8 fe ff       	call   c000c40c <VAS::mapPage(unsigned long, unsigned long, int)>
c0020b54:	83 c4 20             	add    esp,0x20
c0020b57:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c0020b5e:	74 2d                	je     c0020b8d <SATA::open(int, int, void*)+0x16b>
c0020b60:	83 ec 0c             	sub    esp,0xc
c0020b63:	68 c7 77 02 c0       	push   0xc00277c7
c0020b68:	e8 d4 92 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020b6d:	83 c4 10             	add    esp,0x10
c0020b70:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c0020b77:	75 14                	jne    c0020b8d <SATA::open(int, int, void*)+0x16b>
c0020b79:	e4 60                	in     al,0x60
c0020b7b:	3c 1c                	cmp    al,0x1c
c0020b7d:	74 04                	je     c0020b83 <SATA::open(int, int, void*)+0x161>
c0020b7f:	3c 5a                	cmp    al,0x5a
c0020b81:	75 f6                	jne    c0020b79 <SATA::open(int, int, void*)+0x157>
c0020b83:	e4 60                	in     al,0x60
c0020b85:	3c 5a                	cmp    al,0x5a
c0020b87:	74 fa                	je     c0020b83 <SATA::open(int, int, void*)+0x161>
c0020b89:	3c 1c                	cmp    al,0x1c
c0020b8b:	74 f6                	je     c0020b83 <SATA::open(int, int, void*)+0x161>
c0020b8d:	83 ec 0c             	sub    esp,0xc
c0020b90:	53                   	push   ebx
c0020b91:	e8 94 df fe ff       	call   c000eb2a <PhysicalDisk::startCache()>
c0020b96:	83 c4 10             	add    esp,0x10
c0020b99:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c0020ba0:	74 2d                	je     c0020bcf <SATA::open(int, int, void*)+0x1ad>
c0020ba2:	83 ec 0c             	sub    esp,0xc
c0020ba5:	68 d4 77 02 c0       	push   0xc00277d4
c0020baa:	e8 92 92 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020baf:	83 c4 10             	add    esp,0x10
c0020bb2:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c0020bb9:	75 14                	jne    c0020bcf <SATA::open(int, int, void*)+0x1ad>
c0020bbb:	e4 60                	in     al,0x60
c0020bbd:	3c 1c                	cmp    al,0x1c
c0020bbf:	74 04                	je     c0020bc5 <SATA::open(int, int, void*)+0x1a3>
c0020bc1:	3c 5a                	cmp    al,0x5a
c0020bc3:	75 f6                	jne    c0020bbb <SATA::open(int, int, void*)+0x199>
c0020bc5:	e4 60                	in     al,0x60
c0020bc7:	3c 5a                	cmp    al,0x5a
c0020bc9:	74 fa                	je     c0020bc5 <SATA::open(int, int, void*)+0x1a3>
c0020bcb:	3c 1c                	cmp    al,0x1c
c0020bcd:	74 f6                	je     c0020bc5 <SATA::open(int, int, void*)+0x1a3>
c0020bcf:	83 ec 0c             	sub    esp,0xc
c0020bd2:	53                   	push   ebx
c0020bd3:	e8 ca 00 ff ff       	call   c0010ca2 <createPartitionsForDisk(PhysicalDisk*)>
c0020bd8:	83 c4 10             	add    esp,0x10
c0020bdb:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c0020be2:	74 2d                	je     c0020c11 <SATA::open(int, int, void*)+0x1ef>
c0020be4:	83 ec 0c             	sub    esp,0xc
c0020be7:	68 e1 77 02 c0       	push   0xc00277e1
c0020bec:	e8 50 92 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020bf1:	83 c4 10             	add    esp,0x10
c0020bf4:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c0020bfb:	75 14                	jne    c0020c11 <SATA::open(int, int, void*)+0x1ef>
c0020bfd:	e4 60                	in     al,0x60
c0020bff:	3c 1c                	cmp    al,0x1c
c0020c01:	74 04                	je     c0020c07 <SATA::open(int, int, void*)+0x1e5>
c0020c03:	3c 5a                	cmp    al,0x5a
c0020c05:	75 f6                	jne    c0020bfd <SATA::open(int, int, void*)+0x1db>
c0020c07:	e4 60                	in     al,0x60
c0020c09:	3c 5a                	cmp    al,0x5a
c0020c0b:	74 fa                	je     c0020c07 <SATA::open(int, int, void*)+0x1e5>
c0020c0d:	3c 1c                	cmp    al,0x1c
c0020c0f:	74 f6                	je     c0020c07 <SATA::open(int, int, void*)+0x1e5>
c0020c11:	5a                   	pop    edx
c0020c12:	31 c0                	xor    eax,eax
c0020c14:	5b                   	pop    ebx
c0020c15:	5e                   	pop    esi
c0020c16:	c3                   	ret    
c0020c17:	90                   	nop

c0020c18 <SATA::SATA()>:
c0020c18:	83 ec 0c             	sub    esp,0xc
c0020c1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c1f:	83 ec 04             	sub    esp,0x4
c0020c22:	68 00 02 00 00       	push   0x200
c0020c27:	68 ee 77 02 c0       	push   0xc00277ee
c0020c2c:	50                   	push   eax
c0020c2d:	e8 90 de fe ff       	call   c000eac2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020c32:	83 c4 10             	add    esp,0x10
c0020c35:	ba 98 79 02 c0       	mov    edx,0xc0027998
c0020c3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c3e:	89 10                	mov    DWORD PTR [eax],edx
c0020c40:	90                   	nop
c0020c41:	83 c4 0c             	add    esp,0xc
c0020c44:	c3                   	ret    
c0020c45:	90                   	nop

c0020c46 <SATA::access(unsigned long long, int, void*, bool)>:
c0020c46:	55                   	push   ebp
c0020c47:	57                   	push   edi
c0020c48:	56                   	push   esi
c0020c49:	53                   	push   ebx
c0020c4a:	83 ec 2c             	sub    esp,0x2c
c0020c4d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0020c51:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0020c55:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020c59:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c0020c60:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020c64:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020c68:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0020c6c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c70:	75 19                	jne    c0020c8b <SATA::access(unsigned long long, int, void*, bool)+0x45>
c0020c72:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0020c77:	7e 41                	jle    c0020cba <SATA::access(unsigned long long, int, void*, bool)+0x74>
c0020c79:	83 ec 0c             	sub    esp,0xc
c0020c7c:	68 0d 78 02 c0       	push   0xc002780d
c0020c81:	e8 73 45 ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c0020c86:	83 c4 10             	add    esp,0x10
c0020c89:	eb 2f                	jmp    c0020cba <SATA::access(unsigned long long, int, void*, bool)+0x74>
c0020c8b:	83 ec 0c             	sub    esp,0xc
c0020c8e:	68 fe 77 02 c0       	push   0xc00277fe
c0020c93:	e8 a9 91 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020c98:	83 c4 10             	add    esp,0x10
c0020c9b:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c0020ca2:	75 ce                	jne    c0020c72 <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c0020ca4:	e4 60                	in     al,0x60
c0020ca6:	3c 1c                	cmp    al,0x1c
c0020ca8:	74 04                	je     c0020cae <SATA::access(unsigned long long, int, void*, bool)+0x68>
c0020caa:	3c 5a                	cmp    al,0x5a
c0020cac:	75 f6                	jne    c0020ca4 <SATA::access(unsigned long long, int, void*, bool)+0x5e>
c0020cae:	e4 60                	in     al,0x60
c0020cb0:	3c 5a                	cmp    al,0x5a
c0020cb2:	74 fa                	je     c0020cae <SATA::access(unsigned long long, int, void*, bool)+0x68>
c0020cb4:	3c 1c                	cmp    al,0x1c
c0020cb6:	74 f6                	je     c0020cae <SATA::access(unsigned long long, int, void*, bool)+0x68>
c0020cb8:	eb b8                	jmp    c0020c72 <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c0020cba:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c0020cc1:	75 29                	jne    c0020cec <SATA::access(unsigned long long, int, void*, bool)+0xa6>
c0020cc3:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020cc9:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c0020ccf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020cd5:	8d 75 02             	lea    esi,[ebp+0x2]
c0020cd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020cdc:	c1 e6 07             	shl    esi,0x7
c0020cdf:	01 c6                	add    esi,eax
c0020ce1:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c0020ce8:	74 4a                	je     c0020d34 <SATA::access(unsigned long long, int, void*, bool)+0xee>
c0020cea:	eb 2f                	jmp    c0020d1b <SATA::access(unsigned long long, int, void*, bool)+0xd5>
c0020cec:	83 ec 0c             	sub    esp,0xc
c0020cef:	68 46 78 02 c0       	push   0xc0027846
c0020cf4:	e8 48 91 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020cf9:	83 c4 10             	add    esp,0x10
c0020cfc:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c0020d03:	75 be                	jne    c0020cc3 <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c0020d05:	e4 60                	in     al,0x60
c0020d07:	3c 1c                	cmp    al,0x1c
c0020d09:	74 04                	je     c0020d0f <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c0020d0b:	3c 5a                	cmp    al,0x5a
c0020d0d:	75 f6                	jne    c0020d05 <SATA::access(unsigned long long, int, void*, bool)+0xbf>
c0020d0f:	e4 60                	in     al,0x60
c0020d11:	3c 5a                	cmp    al,0x5a
c0020d13:	74 fa                	je     c0020d0f <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c0020d15:	3c 1c                	cmp    al,0x1c
c0020d17:	74 f6                	je     c0020d0f <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c0020d19:	eb a8                	jmp    c0020cc3 <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c0020d1b:	83 ec 0c             	sub    esp,0xc
c0020d1e:	68 55 78 02 c0       	push   0xc0027855
c0020d23:	e8 19 91 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020d28:	83 c4 10             	add    esp,0x10
c0020d2b:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c0020d32:	74 3d                	je     c0020d71 <SATA::access(unsigned long long, int, void*, bool)+0x12b>
c0020d34:	89 e8                	mov    eax,ebp
c0020d36:	c1 e0 07             	shl    eax,0x7
c0020d39:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020d3d:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0020d47:	52                   	push   edx
c0020d48:	52                   	push   edx
c0020d49:	56                   	push   esi
c0020d4a:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0020d50:	e8 fd eb ff ff       	call   c001f952 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020d55:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020d59:	83 c4 10             	add    esp,0x10
c0020d5c:	b8 01 00 00 00       	mov    eax,0x1
c0020d61:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0020d66:	75 1d                	jne    c0020d85 <SATA::access(unsigned long long, int, void*, bool)+0x13f>
c0020d68:	e9 c8 04 00 00       	jmp    c0021235 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c0020d6d:	3c 5a                	cmp    al,0x5a
c0020d6f:	74 0c                	je     c0020d7d <SATA::access(unsigned long long, int, void*, bool)+0x137>
c0020d71:	e4 60                	in     al,0x60
c0020d73:	3c 1c                	cmp    al,0x1c
c0020d75:	75 f6                	jne    c0020d6d <SATA::access(unsigned long long, int, void*, bool)+0x127>
c0020d77:	eb 04                	jmp    c0020d7d <SATA::access(unsigned long long, int, void*, bool)+0x137>
c0020d79:	3c 1c                	cmp    al,0x1c
c0020d7b:	75 b7                	jne    c0020d34 <SATA::access(unsigned long long, int, void*, bool)+0xee>
c0020d7d:	e4 60                	in     al,0x60
c0020d7f:	3c 5a                	cmp    al,0x5a
c0020d81:	74 fa                	je     c0020d7d <SATA::access(unsigned long long, int, void*, bool)+0x137>
c0020d83:	eb f4                	jmp    c0020d79 <SATA::access(unsigned long long, int, void*, bool)+0x133>
c0020d85:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c0020d8c:	74 3a                	je     c0020dc8 <SATA::access(unsigned long long, int, void*, bool)+0x182>
c0020d8e:	83 ec 0c             	sub    esp,0xc
c0020d91:	68 64 78 02 c0       	push   0xc0027864
c0020d96:	e8 a6 90 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020d9b:	83 c4 10             	add    esp,0x10
c0020d9e:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c0020da5:	74 0d                	je     c0020db4 <SATA::access(unsigned long long, int, void*, bool)+0x16e>
c0020da7:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020dac:	74 34                	je     c0020de2 <SATA::access(unsigned long long, int, void*, bool)+0x19c>
c0020dae:	eb 1f                	jmp    c0020dcf <SATA::access(unsigned long long, int, void*, bool)+0x189>
c0020db0:	3c 1c                	cmp    al,0x1c
c0020db2:	74 0c                	je     c0020dc0 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c0020db4:	e4 60                	in     al,0x60
c0020db6:	3c 5a                	cmp    al,0x5a
c0020db8:	75 f6                	jne    c0020db0 <SATA::access(unsigned long long, int, void*, bool)+0x16a>
c0020dba:	eb 04                	jmp    c0020dc0 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c0020dbc:	3c 1c                	cmp    al,0x1c
c0020dbe:	75 e7                	jne    c0020da7 <SATA::access(unsigned long long, int, void*, bool)+0x161>
c0020dc0:	e4 60                	in     al,0x60
c0020dc2:	3c 5a                	cmp    al,0x5a
c0020dc4:	74 fa                	je     c0020dc0 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c0020dc6:	eb f4                	jmp    c0020dbc <SATA::access(unsigned long long, int, void*, bool)+0x176>
c0020dc8:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020dcd:	74 1c                	je     c0020deb <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c0020dcf:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0020dd3:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0020dd9:	c1 e1 09             	shl    ecx,0x9
c0020ddc:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0020de0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020de2:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c0020de9:	75 55                	jne    c0020e40 <SATA::access(unsigned long long, int, void*, bool)+0x1fa>
c0020deb:	8d 45 02             	lea    eax,[ebp+0x2]
c0020dee:	c1 e0 07             	shl    eax,0x7
c0020df1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020df5:	8b 38                	mov    edi,DWORD PTR [eax]
c0020df7:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020dfd:	2b b8 5c 01 00 00    	sub    edi,DWORD PTR [eax+0x15c]
c0020e03:	03 b8 58 01 00 00    	add    edi,DWORD PTR [eax+0x158]
c0020e09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e0d:	c1 e0 05             	shl    eax,0x5
c0020e10:	01 c7                	add    edi,eax
c0020e12:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020e16:	83 e0 01             	and    eax,0x1
c0020e19:	c1 e0 06             	shl    eax,0x6
c0020e1c:	88 c2                	mov    dl,al
c0020e1e:	8a 07                	mov    al,BYTE PTR [edi]
c0020e20:	83 e0 bf             	and    eax,0xffffffbf
c0020e23:	09 d0                	or     eax,edx
c0020e25:	88 07                	mov    BYTE PTR [edi],al
c0020e27:	8b 07                	mov    eax,DWORD PTR [edi]
c0020e29:	25 e0 ff 00 00       	and    eax,0xffe0
c0020e2e:	0d 05 00 01 00       	or     eax,0x10005
c0020e33:	89 07                	mov    DWORD PTR [edi],eax
c0020e35:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c0020e3c:	74 4d                	je     c0020e8b <SATA::access(unsigned long long, int, void*, bool)+0x245>
c0020e3e:	eb 32                	jmp    c0020e72 <SATA::access(unsigned long long, int, void*, bool)+0x22c>
c0020e40:	83 ec 0c             	sub    esp,0xc
c0020e43:	68 73 78 02 c0       	push   0xc0027873
c0020e48:	e8 f4 8f fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020e4d:	83 c4 10             	add    esp,0x10
c0020e50:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c0020e57:	75 92                	jne    c0020deb <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c0020e59:	e4 60                	in     al,0x60
c0020e5b:	3c 1c                	cmp    al,0x1c
c0020e5d:	74 04                	je     c0020e63 <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020e5f:	3c 5a                	cmp    al,0x5a
c0020e61:	75 f6                	jne    c0020e59 <SATA::access(unsigned long long, int, void*, bool)+0x213>
c0020e63:	e4 60                	in     al,0x60
c0020e65:	3c 5a                	cmp    al,0x5a
c0020e67:	74 fa                	je     c0020e63 <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020e69:	3c 1c                	cmp    al,0x1c
c0020e6b:	74 f6                	je     c0020e63 <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020e6d:	e9 79 ff ff ff       	jmp    c0020deb <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c0020e72:	83 ec 0c             	sub    esp,0xc
c0020e75:	68 82 78 02 c0       	push   0xc0027882
c0020e7a:	e8 c2 8f fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020e7f:	83 c4 10             	add    esp,0x10
c0020e82:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c0020e89:	74 3b                	je     c0020ec6 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c0020e8b:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020e91:	8b b0 58 01 00 00    	mov    esi,DWORD PTR [eax+0x158]
c0020e97:	2b b0 5c 01 00 00    	sub    esi,DWORD PTR [eax+0x15c]
c0020e9d:	03 77 08             	add    esi,DWORD PTR [edi+0x8]
c0020ea0:	50                   	push   eax
c0020ea1:	0f b7 47 02          	movzx  eax,WORD PTR [edi+0x2]
c0020ea5:	83 c0 08             	add    eax,0x8
c0020ea8:	c1 e0 04             	shl    eax,0x4
c0020eab:	50                   	push   eax
c0020eac:	6a 00                	push   0x0
c0020eae:	56                   	push   esi
c0020eaf:	e8 e0 f7 fd ff       	call   c0000694 <memset>
c0020eb4:	83 c4 10             	add    esp,0x10
c0020eb7:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c0020ebe:	74 33                	je     c0020ef3 <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c0020ec0:	eb 18                	jmp    c0020eda <SATA::access(unsigned long long, int, void*, bool)+0x294>
c0020ec2:	3c 1c                	cmp    al,0x1c
c0020ec4:	74 0c                	je     c0020ed2 <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c0020ec6:	e4 60                	in     al,0x60
c0020ec8:	3c 5a                	cmp    al,0x5a
c0020eca:	75 f6                	jne    c0020ec2 <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c0020ecc:	eb 04                	jmp    c0020ed2 <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c0020ece:	3c 1c                	cmp    al,0x1c
c0020ed0:	75 b9                	jne    c0020e8b <SATA::access(unsigned long long, int, void*, bool)+0x245>
c0020ed2:	e4 60                	in     al,0x60
c0020ed4:	3c 5a                	cmp    al,0x5a
c0020ed6:	74 fa                	je     c0020ed2 <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c0020ed8:	eb f4                	jmp    c0020ece <SATA::access(unsigned long long, int, void*, bool)+0x288>
c0020eda:	83 ec 0c             	sub    esp,0xc
c0020edd:	68 91 78 02 c0       	push   0xc0027891
c0020ee2:	e8 5a 8f fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020ee7:	83 c4 10             	add    esp,0x10
c0020eea:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c0020ef1:	74 48                	je     c0020f3b <SATA::access(unsigned long long, int, void*, bool)+0x2f5>
c0020ef3:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0020ef9:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0020eff:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0020f03:	c1 e0 09             	shl    eax,0x9
c0020f06:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020f0a:	48                   	dec    eax
c0020f0b:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020f10:	89 c2                	mov    edx,eax
c0020f12:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0020f18:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020f1d:	09 d0                	or     eax,edx
c0020f1f:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0020f25:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0020f2c:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c0020f33:	74 33                	je     c0020f68 <SATA::access(unsigned long long, int, void*, bool)+0x322>
c0020f35:	eb 18                	jmp    c0020f4f <SATA::access(unsigned long long, int, void*, bool)+0x309>
c0020f37:	3c 1c                	cmp    al,0x1c
c0020f39:	74 0c                	je     c0020f47 <SATA::access(unsigned long long, int, void*, bool)+0x301>
c0020f3b:	e4 60                	in     al,0x60
c0020f3d:	3c 5a                	cmp    al,0x5a
c0020f3f:	75 f6                	jne    c0020f37 <SATA::access(unsigned long long, int, void*, bool)+0x2f1>
c0020f41:	eb 04                	jmp    c0020f47 <SATA::access(unsigned long long, int, void*, bool)+0x301>
c0020f43:	3c 1c                	cmp    al,0x1c
c0020f45:	75 ac                	jne    c0020ef3 <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c0020f47:	e4 60                	in     al,0x60
c0020f49:	3c 5a                	cmp    al,0x5a
c0020f4b:	74 fa                	je     c0020f47 <SATA::access(unsigned long long, int, void*, bool)+0x301>
c0020f4d:	eb f4                	jmp    c0020f43 <SATA::access(unsigned long long, int, void*, bool)+0x2fd>
c0020f4f:	83 ec 0c             	sub    esp,0xc
c0020f52:	68 a0 78 02 c0       	push   0xc00278a0
c0020f57:	e8 e5 8e fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020f5c:	83 c4 10             	add    esp,0x10
c0020f5f:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c0020f66:	74 63                	je     c0020fcb <SATA::access(unsigned long long, int, void*, bool)+0x385>
c0020f68:	66 8b 06             	mov    ax,WORD PTR [esi]
c0020f6b:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0020f6f:	66 25 00 7f          	and    ax,0x7f00
c0020f73:	66 0d 27 80          	or     ax,0x8027
c0020f77:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0020f7c:	66 89 06             	mov    WORD PTR [esi],ax
c0020f7f:	19 c0                	sbb    eax,eax
c0020f81:	83 e0 f0             	and    eax,0xfffffff0
c0020f84:	83 c0 35             	add    eax,0x35
c0020f87:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0020f8a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020f8e:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c0020f92:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020f96:	c1 e8 10             	shr    eax,0x10
c0020f99:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0020f9c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020fa0:	c1 e8 18             	shr    eax,0x18
c0020fa3:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c0020faa:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0020fad:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0020fb1:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0020fb4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020fb8:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0020fbb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0020fbf:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0020fc3:	74 33                	je     c0020ff8 <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c0020fc5:	eb 18                	jmp    c0020fdf <SATA::access(unsigned long long, int, void*, bool)+0x399>
c0020fc7:	3c 1c                	cmp    al,0x1c
c0020fc9:	74 0c                	je     c0020fd7 <SATA::access(unsigned long long, int, void*, bool)+0x391>
c0020fcb:	e4 60                	in     al,0x60
c0020fcd:	3c 5a                	cmp    al,0x5a
c0020fcf:	75 f6                	jne    c0020fc7 <SATA::access(unsigned long long, int, void*, bool)+0x381>
c0020fd1:	eb 04                	jmp    c0020fd7 <SATA::access(unsigned long long, int, void*, bool)+0x391>
c0020fd3:	3c 1c                	cmp    al,0x1c
c0020fd5:	75 91                	jne    c0020f68 <SATA::access(unsigned long long, int, void*, bool)+0x322>
c0020fd7:	e4 60                	in     al,0x60
c0020fd9:	3c 5a                	cmp    al,0x5a
c0020fdb:	74 fa                	je     c0020fd7 <SATA::access(unsigned long long, int, void*, bool)+0x391>
c0020fdd:	eb f4                	jmp    c0020fd3 <SATA::access(unsigned long long, int, void*, bool)+0x38d>
c0020fdf:	83 ec 0c             	sub    esp,0xc
c0020fe2:	68 af 78 02 c0       	push   0xc00278af
c0020fe7:	e8 55 8e fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020fec:	83 c4 10             	add    esp,0x10
c0020fef:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c0020ff6:	74 11                	je     c0021009 <SATA::access(unsigned long long, int, void*, bool)+0x3c3>
c0020ff8:	89 e8                	mov    eax,ebp
c0020ffa:	31 f6                	xor    esi,esi
c0020ffc:	c1 e0 07             	shl    eax,0x7
c0020fff:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0021003:	eb 21                	jmp    c0021026 <SATA::access(unsigned long long, int, void*, bool)+0x3e0>
c0021005:	3c 1c                	cmp    al,0x1c
c0021007:	74 0c                	je     c0021015 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c0021009:	e4 60                	in     al,0x60
c002100b:	3c 5a                	cmp    al,0x5a
c002100d:	75 f6                	jne    c0021005 <SATA::access(unsigned long long, int, void*, bool)+0x3bf>
c002100f:	eb 04                	jmp    c0021015 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c0021011:	3c 1c                	cmp    al,0x1c
c0021013:	75 e3                	jne    c0020ff8 <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c0021015:	e4 60                	in     al,0x60
c0021017:	3c 5a                	cmp    al,0x5a
c0021019:	74 fa                	je     c0021015 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c002101b:	eb f4                	jmp    c0021011 <SATA::access(unsigned long long, int, void*, bool)+0x3cb>
c002101d:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c0021023:	74 0c                	je     c0021031 <SATA::access(unsigned long long, int, void*, bool)+0x3eb>
c0021025:	46                   	inc    esi
c0021026:	8b 90 20 01 00 00    	mov    edx,DWORD PTR [eax+0x120]
c002102c:	80 e2 88             	and    dl,0x88
c002102f:	75 ec                	jne    c002101d <SATA::access(unsigned long long, int, void*, bool)+0x3d7>
c0021031:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c0021038:	74 3d                	je     c0021077 <SATA::access(unsigned long long, int, void*, bool)+0x431>
c002103a:	83 ec 0c             	sub    esp,0xc
c002103d:	68 be 78 02 c0       	push   0xc00278be
c0021042:	e8 fa 8d fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0021047:	8b 15 20 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028c20
c002104d:	83 c4 10             	add    esp,0x10
c0021050:	f6 c2 80             	test   dl,0x80
c0021053:	74 0e                	je     c0021063 <SATA::access(unsigned long long, int, void*, bool)+0x41d>
c0021055:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c002105b:	75 2f                	jne    c002108c <SATA::access(unsigned long long, int, void*, bool)+0x446>
c002105d:	eb 20                	jmp    c002107f <SATA::access(unsigned long long, int, void*, bool)+0x439>
c002105f:	3c 1c                	cmp    al,0x1c
c0021061:	74 0c                	je     c002106f <SATA::access(unsigned long long, int, void*, bool)+0x429>
c0021063:	e4 60                	in     al,0x60
c0021065:	3c 5a                	cmp    al,0x5a
c0021067:	75 f6                	jne    c002105f <SATA::access(unsigned long long, int, void*, bool)+0x419>
c0021069:	eb 04                	jmp    c002106f <SATA::access(unsigned long long, int, void*, bool)+0x429>
c002106b:	3c 1c                	cmp    al,0x1c
c002106d:	75 e6                	jne    c0021055 <SATA::access(unsigned long long, int, void*, bool)+0x40f>
c002106f:	e4 60                	in     al,0x60
c0021071:	3c 5a                	cmp    al,0x5a
c0021073:	74 fa                	je     c002106f <SATA::access(unsigned long long, int, void*, bool)+0x429>
c0021075:	eb f4                	jmp    c002106b <SATA::access(unsigned long long, int, void*, bool)+0x425>
c0021077:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c002107d:	75 13                	jne    c0021092 <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c002107f:	83 ec 0c             	sub    esp,0xc
c0021082:	68 ce 78 02 c0       	push   0xc00278ce
c0021087:	e9 d2 00 00 00       	jmp    c002115e <SATA::access(unsigned long long, int, void*, bool)+0x518>
c002108c:	0f ba e2 0b          	bt     edx,0xb
c0021090:	72 25                	jb     c00210b7 <SATA::access(unsigned long long, int, void*, bool)+0x471>
c0021092:	be 01 00 00 00       	mov    esi,0x1
c0021097:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002109b:	89 e8                	mov    eax,ebp
c002109d:	d3 e6                	shl    esi,cl
c002109f:	c1 e0 07             	shl    eax,0x7
c00210a2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00210a6:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c00210ad:	89 b0 38 01 00 00    	mov    DWORD PTR [eax+0x138],esi
c00210b3:	74 4a                	je     c00210ff <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c00210b5:	eb 2f                	jmp    c00210e6 <SATA::access(unsigned long long, int, void*, bool)+0x4a0>
c00210b7:	83 ec 0c             	sub    esp,0xc
c00210ba:	68 dc 78 02 c0       	push   0xc00278dc
c00210bf:	e8 7d 8d fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00210c4:	83 c4 10             	add    esp,0x10
c00210c7:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c00210ce:	75 c2                	jne    c0021092 <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c00210d0:	e4 60                	in     al,0x60
c00210d2:	3c 5a                	cmp    al,0x5a
c00210d4:	74 04                	je     c00210da <SATA::access(unsigned long long, int, void*, bool)+0x494>
c00210d6:	3c 1c                	cmp    al,0x1c
c00210d8:	75 f6                	jne    c00210d0 <SATA::access(unsigned long long, int, void*, bool)+0x48a>
c00210da:	e4 60                	in     al,0x60
c00210dc:	3c 5a                	cmp    al,0x5a
c00210de:	74 fa                	je     c00210da <SATA::access(unsigned long long, int, void*, bool)+0x494>
c00210e0:	3c 1c                	cmp    al,0x1c
c00210e2:	74 f6                	je     c00210da <SATA::access(unsigned long long, int, void*, bool)+0x494>
c00210e4:	eb ac                	jmp    c0021092 <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c00210e6:	83 ec 0c             	sub    esp,0xc
c00210e9:	68 ec 78 02 c0       	push   0xc00278ec
c00210ee:	e8 4e 8d fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00210f3:	83 c4 10             	add    esp,0x10
c00210f6:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c00210fd:	74 0f                	je     c002110e <SATA::access(unsigned long long, int, void*, bool)+0x4c8>
c00210ff:	89 e8                	mov    eax,ebp
c0021101:	c1 e0 07             	shl    eax,0x7
c0021104:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0021108:	eb 24                	jmp    c002112e <SATA::access(unsigned long long, int, void*, bool)+0x4e8>
c002110a:	3c 1c                	cmp    al,0x1c
c002110c:	74 0c                	je     c002111a <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c002110e:	e4 60                	in     al,0x60
c0021110:	3c 5a                	cmp    al,0x5a
c0021112:	75 f6                	jne    c002110a <SATA::access(unsigned long long, int, void*, bool)+0x4c4>
c0021114:	eb 04                	jmp    c002111a <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c0021116:	3c 1c                	cmp    al,0x1c
c0021118:	75 e5                	jne    c00210ff <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c002111a:	e4 60                	in     al,0x60
c002111c:	3c 5a                	cmp    al,0x5a
c002111e:	74 fa                	je     c002111a <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c0021120:	eb f4                	jmp    c0021116 <SATA::access(unsigned long long, int, void*, bool)+0x4d0>
c0021122:	8b 90 10 01 00 00    	mov    edx,DWORD PTR [eax+0x110]
c0021128:	0f ba e2 1e          	bt     edx,0x1e
c002112c:	72 28                	jb     c0021156 <SATA::access(unsigned long long, int, void*, bool)+0x510>
c002112e:	8b 90 38 01 00 00    	mov    edx,DWORD PTR [eax+0x138]
c0021134:	85 d6                	test   esi,edx
c0021136:	75 ea                	jne    c0021122 <SATA::access(unsigned long long, int, void*, bool)+0x4dc>
c0021138:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c002113f:	75 2f                	jne    c0021170 <SATA::access(unsigned long long, int, void*, bool)+0x52a>
c0021141:	89 e8                	mov    eax,ebp
c0021143:	c1 e0 07             	shl    eax,0x7
c0021146:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002114a:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0021150:	0f ba e0 1e          	bt     eax,0x1e
c0021154:	73 49                	jae    c002119f <SATA::access(unsigned long long, int, void*, bool)+0x559>
c0021156:	83 ec 0c             	sub    esp,0xc
c0021159:	68 fc 78 02 c0       	push   0xc00278fc
c002115e:	e8 b4 bf fe ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0021163:	83 c4 10             	add    esp,0x10
c0021166:	b8 01 00 00 00       	mov    eax,0x1
c002116b:	e9 c5 00 00 00       	jmp    c0021235 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c0021170:	83 ec 0c             	sub    esp,0xc
c0021173:	68 0d 79 02 c0       	push   0xc002790d
c0021178:	e8 c4 8c fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c002117d:	83 c4 10             	add    esp,0x10
c0021180:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c0021187:	75 b8                	jne    c0021141 <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c0021189:	e4 60                	in     al,0x60
c002118b:	3c 5a                	cmp    al,0x5a
c002118d:	74 04                	je     c0021193 <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c002118f:	3c 1c                	cmp    al,0x1c
c0021191:	75 f6                	jne    c0021189 <SATA::access(unsigned long long, int, void*, bool)+0x543>
c0021193:	e4 60                	in     al,0x60
c0021195:	3c 5a                	cmp    al,0x5a
c0021197:	74 fa                	je     c0021193 <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c0021199:	3c 1c                	cmp    al,0x1c
c002119b:	74 f6                	je     c0021193 <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c002119d:	eb a2                	jmp    c0021141 <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c002119f:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c00211a6:	74 3a                	je     c00211e2 <SATA::access(unsigned long long, int, void*, bool)+0x59c>
c00211a8:	83 ec 0c             	sub    esp,0xc
c00211ab:	68 1d 79 02 c0       	push   0xc002791d
c00211b0:	e8 8c 8c fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00211b5:	83 c4 10             	add    esp,0x10
c00211b8:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c00211bf:	74 0d                	je     c00211ce <SATA::access(unsigned long long, int, void*, bool)+0x588>
c00211c1:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00211c6:	75 31                	jne    c00211f9 <SATA::access(unsigned long long, int, void*, bool)+0x5b3>
c00211c8:	eb 1f                	jmp    c00211e9 <SATA::access(unsigned long long, int, void*, bool)+0x5a3>
c00211ca:	3c 1c                	cmp    al,0x1c
c00211cc:	74 0c                	je     c00211da <SATA::access(unsigned long long, int, void*, bool)+0x594>
c00211ce:	e4 60                	in     al,0x60
c00211d0:	3c 5a                	cmp    al,0x5a
c00211d2:	75 f6                	jne    c00211ca <SATA::access(unsigned long long, int, void*, bool)+0x584>
c00211d4:	eb 04                	jmp    c00211da <SATA::access(unsigned long long, int, void*, bool)+0x594>
c00211d6:	3c 1c                	cmp    al,0x1c
c00211d8:	75 e7                	jne    c00211c1 <SATA::access(unsigned long long, int, void*, bool)+0x57b>
c00211da:	e4 60                	in     al,0x60
c00211dc:	3c 5a                	cmp    al,0x5a
c00211de:	74 fa                	je     c00211da <SATA::access(unsigned long long, int, void*, bool)+0x594>
c00211e0:	eb f4                	jmp    c00211d6 <SATA::access(unsigned long long, int, void*, bool)+0x590>
c00211e2:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00211e7:	75 19                	jne    c0021202 <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c00211e9:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c00211ef:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00211f3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00211f7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00211f9:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c0021200:	75 04                	jne    c0021206 <SATA::access(unsigned long long, int, void*, bool)+0x5c0>
c0021202:	31 c0                	xor    eax,eax
c0021204:	eb 2f                	jmp    c0021235 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c0021206:	83 ec 0c             	sub    esp,0xc
c0021209:	68 2d 79 02 c0       	push   0xc002792d
c002120e:	e8 2e 8c fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0021213:	83 c4 10             	add    esp,0x10
c0021216:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c002121d:	75 e3                	jne    c0021202 <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c002121f:	e4 60                	in     al,0x60
c0021221:	3c 1c                	cmp    al,0x1c
c0021223:	74 04                	je     c0021229 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c0021225:	3c 5a                	cmp    al,0x5a
c0021227:	75 f6                	jne    c002121f <SATA::access(unsigned long long, int, void*, bool)+0x5d9>
c0021229:	e4 60                	in     al,0x60
c002122b:	3c 5a                	cmp    al,0x5a
c002122d:	74 fa                	je     c0021229 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c002122f:	3c 1c                	cmp    al,0x1c
c0021231:	74 f6                	je     c0021229 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c0021233:	eb cd                	jmp    c0021202 <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c0021235:	83 c4 2c             	add    esp,0x2c
c0021238:	5b                   	pop    ebx
c0021239:	5e                   	pop    esi
c002123a:	5f                   	pop    edi
c002123b:	5d                   	pop    ebp
c002123c:	c3                   	ret    
c002123d:	90                   	nop

c002123e <SATA::read(unsigned long long, int, void*)>:
c002123e:	55                   	push   ebp
c002123f:	57                   	push   edi
c0021240:	56                   	push   esi
c0021241:	53                   	push   ebx
c0021242:	83 ec 0c             	sub    esp,0xc
c0021245:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021249:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002124d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0021251:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0021255:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c002125c:	74 2d                	je     c002128b <SATA::read(unsigned long long, int, void*)+0x4d>
c002125e:	83 ec 0c             	sub    esp,0xc
c0021261:	68 3d 79 02 c0       	push   0xc002793d
c0021266:	e8 d6 8b fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c002126b:	83 c4 10             	add    esp,0x10
c002126e:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c0021275:	75 14                	jne    c002128b <SATA::read(unsigned long long, int, void*)+0x4d>
c0021277:	e4 60                	in     al,0x60
c0021279:	3c 1c                	cmp    al,0x1c
c002127b:	74 04                	je     c0021281 <SATA::read(unsigned long long, int, void*)+0x43>
c002127d:	3c 5a                	cmp    al,0x5a
c002127f:	75 f6                	jne    c0021277 <SATA::read(unsigned long long, int, void*)+0x39>
c0021281:	e4 60                	in     al,0x60
c0021283:	3c 5a                	cmp    al,0x5a
c0021285:	74 fa                	je     c0021281 <SATA::read(unsigned long long, int, void*)+0x43>
c0021287:	3c 1c                	cmp    al,0x1c
c0021289:	74 f6                	je     c0021281 <SATA::read(unsigned long long, int, void*)+0x43>
c002128b:	8d 53 ff             	lea    edx,[ebx-0x1]
c002128e:	b8 04 00 00 00       	mov    eax,0x4
c0021293:	81 fa fe 00 00 00    	cmp    edx,0xfe
c0021299:	0f 87 96 00 00 00    	ja     c0021335 <SATA::read(unsigned long long, int, void*)+0xf7>
c002129f:	b8 06 00 00 00       	mov    eax,0x6
c00212a4:	85 ed                	test   ebp,ebp
c00212a6:	0f 84 89 00 00 00    	je     c0021335 <SATA::read(unsigned long long, int, void*)+0xf7>
c00212ac:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c00212b3:	74 2d                	je     c00212e2 <SATA::read(unsigned long long, int, void*)+0xa4>
c00212b5:	83 ec 0c             	sub    esp,0xc
c00212b8:	68 4a 79 02 c0       	push   0xc002794a
c00212bd:	e8 7f 8b fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00212c2:	83 c4 10             	add    esp,0x10
c00212c5:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c00212cc:	75 14                	jne    c00212e2 <SATA::read(unsigned long long, int, void*)+0xa4>
c00212ce:	e4 60                	in     al,0x60
c00212d0:	3c 5a                	cmp    al,0x5a
c00212d2:	74 04                	je     c00212d8 <SATA::read(unsigned long long, int, void*)+0x9a>
c00212d4:	3c 1c                	cmp    al,0x1c
c00212d6:	75 f6                	jne    c00212ce <SATA::read(unsigned long long, int, void*)+0x90>
c00212d8:	e4 60                	in     al,0x60
c00212da:	3c 5a                	cmp    al,0x5a
c00212dc:	74 fa                	je     c00212d8 <SATA::read(unsigned long long, int, void*)+0x9a>
c00212de:	3c 1c                	cmp    al,0x1c
c00212e0:	74 f6                	je     c00212d8 <SATA::read(unsigned long long, int, void*)+0x9a>
c00212e2:	50                   	push   eax
c00212e3:	50                   	push   eax
c00212e4:	6a 00                	push   0x0
c00212e6:	55                   	push   ebp
c00212e7:	53                   	push   ebx
c00212e8:	57                   	push   edi
c00212e9:	56                   	push   esi
c00212ea:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00212ee:	e8 53 f9 ff ff       	call   c0020c46 <SATA::access(unsigned long long, int, void*, bool)>
c00212f3:	83 c4 20             	add    esp,0x20
c00212f6:	89 c3                	mov    ebx,eax
c00212f8:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c00212ff:	74 2d                	je     c002132e <SATA::read(unsigned long long, int, void*)+0xf0>
c0021301:	83 ec 0c             	sub    esp,0xc
c0021304:	68 57 79 02 c0       	push   0xc0027957
c0021309:	e8 33 8b fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c002130e:	83 c4 10             	add    esp,0x10
c0021311:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c0021318:	75 14                	jne    c002132e <SATA::read(unsigned long long, int, void*)+0xf0>
c002131a:	e4 60                	in     al,0x60
c002131c:	3c 5a                	cmp    al,0x5a
c002131e:	74 04                	je     c0021324 <SATA::read(unsigned long long, int, void*)+0xe6>
c0021320:	3c 1c                	cmp    al,0x1c
c0021322:	75 f6                	jne    c002131a <SATA::read(unsigned long long, int, void*)+0xdc>
c0021324:	e4 60                	in     al,0x60
c0021326:	3c 5a                	cmp    al,0x5a
c0021328:	74 fa                	je     c0021324 <SATA::read(unsigned long long, int, void*)+0xe6>
c002132a:	3c 1c                	cmp    al,0x1c
c002132c:	74 f6                	je     c0021324 <SATA::read(unsigned long long, int, void*)+0xe6>
c002132e:	31 c0                	xor    eax,eax
c0021330:	85 db                	test   ebx,ebx
c0021332:	0f 95 c0             	setne  al
c0021335:	83 c4 0c             	add    esp,0xc
c0021338:	5b                   	pop    ebx
c0021339:	5e                   	pop    esi
c002133a:	5f                   	pop    edi
c002133b:	5d                   	pop    ebp
c002133c:	c3                   	ret    
c002133d:	90                   	nop

c002133e <SATA::write(unsigned long long, int, void*)>:
c002133e:	55                   	push   ebp
c002133f:	57                   	push   edi
c0021340:	56                   	push   esi
c0021341:	53                   	push   ebx
c0021342:	83 ec 1c             	sub    esp,0x1c
c0021345:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0021349:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002134d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0021351:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0021355:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c002135c:	74 2d                	je     c002138b <SATA::write(unsigned long long, int, void*)+0x4d>
c002135e:	83 ec 0c             	sub    esp,0xc
c0021361:	68 64 79 02 c0       	push   0xc0027964
c0021366:	e8 d6 8a fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c002136b:	83 c4 10             	add    esp,0x10
c002136e:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c0021375:	75 14                	jne    c002138b <SATA::write(unsigned long long, int, void*)+0x4d>
c0021377:	e4 60                	in     al,0x60
c0021379:	3c 1c                	cmp    al,0x1c
c002137b:	74 04                	je     c0021381 <SATA::write(unsigned long long, int, void*)+0x43>
c002137d:	3c 5a                	cmp    al,0x5a
c002137f:	75 f6                	jne    c0021377 <SATA::write(unsigned long long, int, void*)+0x39>
c0021381:	e4 60                	in     al,0x60
c0021383:	3c 5a                	cmp    al,0x5a
c0021385:	74 fa                	je     c0021381 <SATA::write(unsigned long long, int, void*)+0x43>
c0021387:	3c 1c                	cmp    al,0x1c
c0021389:	74 f6                	je     c0021381 <SATA::write(unsigned long long, int, void*)+0x43>
c002138b:	8d 55 ff             	lea    edx,[ebp-0x1]
c002138e:	b8 04 00 00 00       	mov    eax,0x4
c0021393:	81 fa fe 00 00 00    	cmp    edx,0xfe
c0021399:	0f 87 bd 00 00 00    	ja     c002145c <SATA::write(unsigned long long, int, void*)+0x11e>
c002139f:	b8 06 00 00 00       	mov    eax,0x6
c00213a4:	85 db                	test   ebx,ebx
c00213a6:	0f 84 b0 00 00 00    	je     c002145c <SATA::write(unsigned long long, int, void*)+0x11e>
c00213ac:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c00213b3:	74 2d                	je     c00213e2 <SATA::write(unsigned long long, int, void*)+0xa4>
c00213b5:	83 ec 0c             	sub    esp,0xc
c00213b8:	68 72 79 02 c0       	push   0xc0027972
c00213bd:	e8 7f 8a fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00213c2:	83 c4 10             	add    esp,0x10
c00213c5:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c00213cc:	75 14                	jne    c00213e2 <SATA::write(unsigned long long, int, void*)+0xa4>
c00213ce:	e4 60                	in     al,0x60
c00213d0:	3c 1c                	cmp    al,0x1c
c00213d2:	74 04                	je     c00213d8 <SATA::write(unsigned long long, int, void*)+0x9a>
c00213d4:	3c 5a                	cmp    al,0x5a
c00213d6:	75 f6                	jne    c00213ce <SATA::write(unsigned long long, int, void*)+0x90>
c00213d8:	e4 60                	in     al,0x60
c00213da:	3c 5a                	cmp    al,0x5a
c00213dc:	74 fa                	je     c00213d8 <SATA::write(unsigned long long, int, void*)+0x9a>
c00213de:	3c 1c                	cmp    al,0x1c
c00213e0:	74 f6                	je     c00213d8 <SATA::write(unsigned long long, int, void*)+0x9a>
c00213e2:	c1 e5 09             	shl    ebp,0x9
c00213e5:	01 dd                	add    ebp,ebx
c00213e7:	89 f0                	mov    eax,esi
c00213e9:	89 fa                	mov    edx,edi
c00213eb:	83 c0 01             	add    eax,0x1
c00213ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00213f2:	83 d2 00             	adc    edx,0x0
c00213f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00213f9:	50                   	push   eax
c00213fa:	50                   	push   eax
c00213fb:	6a 01                	push   0x1
c00213fd:	53                   	push   ebx
c00213fe:	81 c3 00 02 00 00    	add    ebx,0x200
c0021404:	6a 01                	push   0x1
c0021406:	57                   	push   edi
c0021407:	56                   	push   esi
c0021408:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002140c:	e8 35 f8 ff ff       	call   c0020c46 <SATA::access(unsigned long long, int, void*, bool)>
c0021411:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0021415:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0021419:	83 c4 20             	add    esp,0x20
c002141c:	39 dd                	cmp    ebp,ebx
c002141e:	75 c7                	jne    c00213e7 <SATA::write(unsigned long long, int, void*)+0xa9>
c0021420:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c0021427:	75 04                	jne    c002142d <SATA::write(unsigned long long, int, void*)+0xef>
c0021429:	31 c0                	xor    eax,eax
c002142b:	eb 2f                	jmp    c002145c <SATA::write(unsigned long long, int, void*)+0x11e>
c002142d:	83 ec 0c             	sub    esp,0xc
c0021430:	68 80 79 02 c0       	push   0xc0027980
c0021435:	e8 07 8a fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c002143a:	83 c4 10             	add    esp,0x10
c002143d:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c0021444:	75 e3                	jne    c0021429 <SATA::write(unsigned long long, int, void*)+0xeb>
c0021446:	e4 60                	in     al,0x60
c0021448:	3c 5a                	cmp    al,0x5a
c002144a:	74 04                	je     c0021450 <SATA::write(unsigned long long, int, void*)+0x112>
c002144c:	3c 1c                	cmp    al,0x1c
c002144e:	75 f6                	jne    c0021446 <SATA::write(unsigned long long, int, void*)+0x108>
c0021450:	e4 60                	in     al,0x60
c0021452:	3c 5a                	cmp    al,0x5a
c0021454:	74 fa                	je     c0021450 <SATA::write(unsigned long long, int, void*)+0x112>
c0021456:	3c 1c                	cmp    al,0x1c
c0021458:	74 f6                	je     c0021450 <SATA::write(unsigned long long, int, void*)+0x112>
c002145a:	eb cd                	jmp    c0021429 <SATA::write(unsigned long long, int, void*)+0xeb>
c002145c:	83 c4 1c             	add    esp,0x1c
c002145f:	5b                   	pop    ebx
c0021460:	5e                   	pop    esi
c0021461:	5f                   	pop    edi
c0021462:	5d                   	pop    ebp
c0021463:	c3                   	ret    

c0021464 <SATAPI::write(unsigned long long, int, void*)>:
c0021464:	b8 03 00 00 00       	mov    eax,0x3
c0021469:	c3                   	ret    

c002146a <SATAPI::close(int, int, void*)>:
c002146a:	83 ec 0c             	sub    esp,0xc
c002146d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021471:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0021477:	85 c0                	test   eax,eax
c0021479:	74 0c                	je     c0021487 <SATAPI::close(int, int, void*)+0x1d>
c002147b:	83 ec 0c             	sub    esp,0xc
c002147e:	8b 10                	mov    edx,DWORD PTR [eax]
c0021480:	50                   	push   eax
c0021481:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0021484:	83 c4 10             	add    esp,0x10
c0021487:	31 c0                	xor    eax,eax
c0021489:	83 c4 0c             	add    esp,0xc
c002148c:	c3                   	ret    
c002148d:	90                   	nop

c002148e <SATAPI::SATAPI()>:
c002148e:	83 ec 0c             	sub    esp,0xc
c0021491:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021495:	83 ec 04             	sub    esp,0x4
c0021498:	68 00 08 00 00       	push   0x800
c002149d:	68 c8 79 02 c0       	push   0xc00279c8
c00214a2:	50                   	push   eax
c00214a3:	e8 1a d6 fe ff       	call   c000eac2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00214a8:	83 c4 10             	add    esp,0x10
c00214ab:	ba 04 7b 02 c0       	mov    edx,0xc0027b04
c00214b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214b4:	89 10                	mov    DWORD PTR [eax],edx
c00214b6:	90                   	nop
c00214b7:	83 c4 0c             	add    esp,0xc
c00214ba:	c3                   	ret    
c00214bb:	90                   	nop

c00214bc <SATAPI::diskRemoved()>:
c00214bc:	c3                   	ret    
c00214bd:	90                   	nop

c00214be <SATAPI::diskInserted()>:
c00214be:	83 ec 18             	sub    esp,0x18
c00214c1:	68 d4 79 02 c0       	push   0xc00279d4
c00214c6:	e8 4c bc fe ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c00214cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00214cf:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c00214d6:	83 c4 1c             	add    esp,0x1c
c00214d9:	c3                   	ret    

c00214da <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c00214da:	55                   	push   ebp
c00214db:	57                   	push   edi
c00214dc:	56                   	push   esi
c00214dd:	53                   	push   ebx
c00214de:	83 ec 38             	sub    esp,0x38
c00214e1:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c00214e5:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00214e9:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00214ed:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00214f1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00214f5:	68 ec 79 02 c0       	push   0xc00279ec
c00214fa:	e8 18 bc fe ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c00214ff:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0021505:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002150b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002150f:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0021515:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021519:	c1 e0 07             	shl    eax,0x7
c002151c:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0021520:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0021524:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002152e:	5a                   	pop    edx
c002152f:	59                   	pop    ecx
c0021530:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021534:	8d 58 02             	lea    ebx,[eax+0x2]
c0021537:	c1 e3 07             	shl    ebx,0x7
c002153a:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c002153e:	53                   	push   ebx
c002153f:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0021545:	e8 08 e4 ff ff       	call   c001f952 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002154a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002154e:	83 c4 10             	add    esp,0x10
c0021551:	b8 01 00 00 00       	mov    eax,0x1
c0021556:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c002155b:	0f 84 ff 01 00 00    	je     c0021760 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c0021561:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0021567:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021569:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002156f:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0021575:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021579:	c1 e1 05             	shl    ecx,0x5
c002157c:	01 c8                	add    eax,ecx
c002157e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0021580:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0021586:	81 c9 25 00 01 00    	or     ecx,0x10025
c002158c:	89 08                	mov    DWORD PTR [eax],ecx
c002158e:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0021594:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c002159a:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c00215a0:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c00215a3:	8d 7b 40             	lea    edi,[ebx+0x40]
c00215a6:	50                   	push   eax
c00215a7:	68 90 00 00 00       	push   0x90
c00215ac:	6a 00                	push   0x0
c00215ae:	53                   	push   ebx
c00215af:	e8 e0 f0 fd ff       	call   c0000694 <memset>
c00215b4:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00215b8:	b9 0c 00 00 00       	mov    ecx,0xc
c00215bd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00215bf:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c00215c5:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c00215c9:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c00215cf:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c00215d3:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00215d7:	48                   	dec    eax
c00215d8:	25 ff ff 3f 00       	and    eax,0x3fffff
c00215dd:	89 c1                	mov    ecx,eax
c00215df:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c00215e5:	25 00 00 c0 ff       	and    eax,0xffc00000
c00215ea:	09 c8                	or     eax,ecx
c00215ec:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c00215f2:	66 8b 03             	mov    ax,WORD PTR [ebx]
c00215f5:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c00215fc:	66 25 00 7f          	and    ax,0x7f00
c0021600:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021604:	66 0d 27 80          	or     ax,0x8027
c0021608:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c002160c:	66 89 03             	mov    WORD PTR [ebx],ax
c002160f:	89 d0                	mov    eax,edx
c0021611:	c1 ea 18             	shr    edx,0x18
c0021614:	c1 e8 10             	shr    eax,0x10
c0021617:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c002161a:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c002161d:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0021621:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0021624:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0021628:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c002162b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002162f:	83 c4 10             	add    esp,0x10
c0021632:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0021636:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002163a:	31 c0                	xor    eax,eax
c002163c:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c0021642:	80 e1 88             	and    cl,0x88
c0021645:	74 0a                	je     c0021651 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x177>
c0021647:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002164c:	74 0a                	je     c0021658 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17e>
c002164e:	40                   	inc    eax
c002164f:	eb eb                	jmp    c002163c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x162>
c0021651:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0021656:	75 0a                	jne    c0021662 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c0021658:	83 ec 0c             	sub    esp,0xc
c002165b:	68 06 7a 02 c0       	push   0xc0027a06
c0021660:	eb 43                	jmp    c00216a5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c0021662:	be 01 00 00 00       	mov    esi,0x1
c0021667:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002166b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002166f:	d3 e6                	shl    esi,cl
c0021671:	c1 e7 07             	shl    edi,0x7
c0021674:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c002167a:	bb 18 fc ff ff       	mov    ebx,0xfffffc18
c002167f:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0021683:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c0021689:	85 c6                	test   esi,eax
c002168b:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0021691:	0f 84 96 00 00 00    	je     c002172d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x253>
c0021697:	0f ba e0 1e          	bt     eax,0x1e
c002169b:	73 1a                	jae    c00216b7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1dd>
c002169d:	83 ec 0c             	sub    esp,0xc
c00216a0:	68 1b 7a 02 c0       	push   0xc0027a1b
c00216a5:	e8 6d ba fe ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c00216aa:	83 c4 10             	add    esp,0x10
c00216ad:	b8 01 00 00 00       	mov    eax,0x1
c00216b2:	e9 a9 00 00 00       	jmp    c0021760 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c00216b7:	83 fb 0d             	cmp    ebx,0xd
c00216ba:	77 12                	ja     c00216ce <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f4>
c00216bc:	83 ec 0c             	sub    esp,0xc
c00216bf:	68 c8 00 00 00       	push   0xc8
c00216c4:	e8 83 7b ff ff       	call   c001924c <milliTenthSleep(unsigned int)>
c00216c9:	83 c4 10             	add    esp,0x10
c00216cc:	eb 2a                	jmp    c00216f8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21e>
c00216ce:	8d 83 18 fc ff ff    	lea    eax,[ebx-0x3e8]
c00216d4:	83 f8 0d             	cmp    eax,0xd
c00216d7:	77 0a                	ja     c00216e3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x209>
c00216d9:	83 ec 0c             	sub    esp,0xc
c00216dc:	68 58 02 00 00       	push   0x258
c00216e1:	eb 28                	jmp    c002170b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x231>
c00216e3:	8d 83 30 f8 ff ff    	lea    eax,[ebx-0x7d0]
c00216e9:	83 f8 0d             	cmp    eax,0xd
c00216ec:	77 0a                	ja     c00216f8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21e>
c00216ee:	83 ec 0c             	sub    esp,0xc
c00216f1:	68 dc 05 00 00       	push   0x5dc
c00216f6:	eb 13                	jmp    c002170b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x231>
c00216f8:	8d 83 90 e8 ff ff    	lea    eax,[ebx-0x1770]
c00216fe:	83 f8 0d             	cmp    eax,0xd
c0021701:	77 10                	ja     c0021713 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x239>
c0021703:	83 ec 0c             	sub    esp,0xc
c0021706:	68 c4 09 00 00       	push   0x9c4
c002170b:	e8 3c 7b ff ff       	call   c001924c <milliTenthSleep(unsigned int)>
c0021710:	83 c4 10             	add    esp,0x10
c0021713:	43                   	inc    ebx
c0021714:	81 fb 29 23 00 00    	cmp    ebx,0x2329
c002171a:	0f 85 63 ff ff ff    	jne    c0021683 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1a9>
c0021720:	83 ec 0c             	sub    esp,0xc
c0021723:	68 2e 7a 02 c0       	push   0xc0027a2e
c0021728:	e9 78 ff ff ff       	jmp    c00216a5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c002172d:	0f ba e0 1e          	bt     eax,0x1e
c0021731:	73 0d                	jae    c0021740 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x266>
c0021733:	83 ec 0c             	sub    esp,0xc
c0021736:	68 42 7a 02 c0       	push   0xc0027a42
c002173b:	e9 65 ff ff ff       	jmp    c00216a5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c0021740:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0021745:	74 17                	je     c002175e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x284>
c0021747:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c002174c:	74 10                	je     c002175e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x284>
c002174e:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c0021754:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0021758:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c002175c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002175e:	31 c0                	xor    eax,eax
c0021760:	83 c4 2c             	add    esp,0x2c
c0021763:	5b                   	pop    ebx
c0021764:	5e                   	pop    esi
c0021765:	5f                   	pop    edi
c0021766:	5d                   	pop    ebp
c0021767:	c3                   	ret    

c0021768 <SATAPI::eject()>:
c0021768:	57                   	push   edi
c0021769:	b9 03 00 00 00       	mov    ecx,0x3
c002176e:	83 ec 18             	sub    esp,0x18
c0021771:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0021775:	fc                   	cld    
c0021776:	31 c0                	xor    eax,eax
c0021778:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002177a:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002177f:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0021784:	50                   	push   eax
c0021785:	6a 00                	push   0x0
c0021787:	6a 00                	push   0x0
c0021789:	6a 00                	push   0x0
c002178b:	6a 00                	push   0x0
c002178d:	6a 02                	push   0x2
c002178f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021793:	50                   	push   eax
c0021794:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021798:	e8 3d fd ff ff       	call   c00214da <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002179d:	31 c0                	xor    eax,eax
c002179f:	83 c4 38             	add    esp,0x38
c00217a2:	5f                   	pop    edi
c00217a3:	c3                   	ret    

c00217a4 <SATAPI::detectMedia()>:
c00217a4:	56                   	push   esi
c00217a5:	53                   	push   ebx
c00217a6:	83 ec 30             	sub    esp,0x30
c00217a9:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00217ad:	68 57 7a 02 c0       	push   0xc0027a57
c00217b2:	e8 60 b9 fe ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c00217b7:	83 c4 0c             	add    esp,0xc
c00217ba:	6a 0c                	push   0xc
c00217bc:	6a 00                	push   0x0
c00217be:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00217c2:	56                   	push   esi
c00217c3:	e8 cc ee fd ff       	call   c0000694 <memset>
c00217c8:	83 c4 0c             	add    esp,0xc
c00217cb:	6a 00                	push   0x0
c00217cd:	6a 00                	push   0x0
c00217cf:	6a 00                	push   0x0
c00217d1:	6a 00                	push   0x0
c00217d3:	6a 00                	push   0x0
c00217d5:	56                   	push   esi
c00217d6:	53                   	push   ebx
c00217d7:	e8 fe fc ff ff       	call   c00214da <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00217dc:	83 c4 20             	add    esp,0x20
c00217df:	48                   	dec    eax
c00217e0:	74 34                	je     c0021816 <SATAPI::detectMedia()+0x72>
c00217e2:	50                   	push   eax
c00217e3:	6a 0c                	push   0xc
c00217e5:	6a 00                	push   0x0
c00217e7:	56                   	push   esi
c00217e8:	e8 a7 ee fd ff       	call   c0000694 <memset>
c00217ed:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00217f2:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00217f7:	83 c4 0c             	add    esp,0xc
c00217fa:	6a 01                	push   0x1
c00217fc:	8d 44 24 16          	lea    eax,[esp+0x16]
c0021800:	50                   	push   eax
c0021801:	6a 00                	push   0x0
c0021803:	6a 00                	push   0x0
c0021805:	6a 12                	push   0x12
c0021807:	56                   	push   esi
c0021808:	53                   	push   ebx
c0021809:	e8 cc fc ff ff       	call   c00214da <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002180e:	83 c4 20             	add    esp,0x20
c0021811:	48                   	dec    eax
c0021812:	75 39                	jne    c002184d <SATAPI::detectMedia()+0xa9>
c0021814:	eb 1e                	jmp    c0021834 <SATAPI::detectMedia()+0x90>
c0021816:	83 ec 0c             	sub    esp,0xc
c0021819:	68 6b 7a 02 c0       	push   0xc0027a6b
c002181e:	e8 f4 b8 fe ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0021823:	83 c4 10             	add    esp,0x10
c0021826:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002182d:	74 b3                	je     c00217e2 <SATAPI::detectMedia()+0x3e>
c002182f:	e9 93 00 00 00       	jmp    c00218c7 <SATAPI::detectMedia()+0x123>
c0021834:	83 ec 0c             	sub    esp,0xc
c0021837:	68 75 7a 02 c0       	push   0xc0027a75
c002183c:	e8 d6 b8 fe ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0021841:	83 c4 10             	add    esp,0x10
c0021844:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002184b:	75 7a                	jne    c00218c7 <SATAPI::detectMedia()+0x123>
c002184d:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c0021851:	83 e0 7f             	and    eax,0x7f
c0021854:	3c 70                	cmp    al,0x70
c0021856:	74 25                	je     c002187d <SATAPI::detectMedia()+0xd9>
c0021858:	83 ec 0c             	sub    esp,0xc
c002185b:	68 7f 7a 02 c0       	push   0xc0027a7f
c0021860:	e8 b2 b8 fe ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c0021865:	83 c4 10             	add    esp,0x10
c0021868:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002186f:	75 0c                	jne    c002187d <SATAPI::detectMedia()+0xd9>
c0021871:	83 ec 0c             	sub    esp,0xc
c0021874:	53                   	push   ebx
c0021875:	e8 44 fc ff ff       	call   c00214be <SATAPI::diskInserted()>
c002187a:	83 c4 10             	add    esp,0x10
c002187d:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0021881:	83 e0 0f             	and    eax,0xf
c0021884:	3c 02                	cmp    al,0x2
c0021886:	75 16                	jne    c002189e <SATAPI::detectMedia()+0xfa>
c0021888:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002188d:	75 38                	jne    c00218c7 <SATAPI::detectMedia()+0x123>
c002188f:	83 ec 0c             	sub    esp,0xc
c0021892:	68 88 7a 02 c0       	push   0xc0027a88
c0021897:	e8 7b b8 fe ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c002189c:	eb 26                	jmp    c00218c4 <SATAPI::detectMedia()+0x120>
c002189e:	84 c0                	test   al,al
c00218a0:	75 25                	jne    c00218c7 <SATAPI::detectMedia()+0x123>
c00218a2:	83 ec 0c             	sub    esp,0xc
c00218a5:	68 91 7a 02 c0       	push   0xc0027a91
c00218aa:	e8 68 b8 fe ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c00218af:	83 c4 10             	add    esp,0x10
c00218b2:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00218b9:	75 0c                	jne    c00218c7 <SATAPI::detectMedia()+0x123>
c00218bb:	83 ec 0c             	sub    esp,0xc
c00218be:	53                   	push   ebx
c00218bf:	e8 fa fb ff ff       	call   c00214be <SATAPI::diskInserted()>
c00218c4:	83 c4 10             	add    esp,0x10
c00218c7:	83 c4 24             	add    esp,0x24
c00218ca:	5b                   	pop    ebx
c00218cb:	5e                   	pop    esi
c00218cc:	c3                   	ret    
c00218cd:	90                   	nop

c00218ce <SATAPI::open(int, int, void*)>:
c00218ce:	56                   	push   esi
c00218cf:	53                   	push   ebx
c00218d0:	51                   	push   ecx
c00218d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00218d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00218d9:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00218e3:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00218e9:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00218f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00218f7:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0021901:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0021907:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002190e:	e8 8b 8b fe ff       	call   c000a49e <Phys::allocatePage()>
c0021913:	89 c6                	mov    esi,eax
c0021915:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002191b:	81 c6 00 10 00 00    	add    esi,0x1000
c0021921:	e8 78 8b fe ff       	call   c000a49e <Phys::allocatePage()>
c0021926:	39 c6                	cmp    esi,eax
c0021928:	74 10                	je     c002193a <SATAPI::open(int, int, void*)+0x6c>
c002192a:	83 ec 0c             	sub    esp,0xc
c002192d:	68 9b 7a 02 c0       	push   0xc0027a9b
c0021932:	e8 c2 38 ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c0021937:	83 c4 10             	add    esp,0x10
c002193a:	83 ec 0c             	sub    esp,0xc
c002193d:	6a 02                	push   0x2
c002193f:	e8 5d a4 fe ff       	call   c000bda1 <Virt::allocateKernelVirtualPages(int)>
c0021944:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c002194a:	6a 03                	push   0x3
c002194c:	50                   	push   eax
c002194d:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0021953:	ff 35 34 8d 02 c0    	push   DWORD PTR ds:0xc0028d34
c0021959:	e8 ae aa fe ff       	call   c000c40c <VAS::mapPage(unsigned long, unsigned long, int)>
c002195e:	83 c4 14             	add    esp,0x14
c0021961:	68 74 01 00 00       	push   0x174
c0021966:	e8 7c 84 fe ff       	call   c0009de7 <malloc>
c002196b:	83 c4 0c             	add    esp,0xc
c002196e:	89 c6                	mov    esi,eax
c0021970:	6a 00                	push   0x0
c0021972:	68 ff ff ff 7f       	push   0x7fffffff
c0021977:	6a 00                	push   0x0
c0021979:	6a 00                	push   0x0
c002197b:	53                   	push   ebx
c002197c:	68 b1 7a 02 c0       	push   0xc0027ab1
c0021981:	50                   	push   eax
c0021982:	e8 a5 ee fe ff       	call   c001082c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0021987:	83 c4 14             	add    esp,0x14
c002198a:	56                   	push   esi
c002198b:	e8 52 ef fe ff       	call   c00108e2 <LogicalDisk::assignDriveLetter()>
c0021990:	5a                   	pop    edx
c0021991:	0f be c0             	movsx  eax,al
c0021994:	59                   	pop    ecx
c0021995:	50                   	push   eax
c0021996:	68 47 77 02 c0       	push   0xc0027747
c002199b:	e8 77 b7 fe ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c00219a0:	58                   	pop    eax
c00219a1:	5a                   	pop    edx
c00219a2:	56                   	push   esi
c00219a3:	53                   	push   ebx
c00219a4:	e8 e1 cc fe ff       	call   c000e68a <Device::addChild(Device*)>
c00219a9:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c00219af:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00219b2:	e8 73 d1 fe ff       	call   c000eb2a <PhysicalDisk::startCache()>
c00219b7:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c00219be:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00219c1:	e8 de fd ff ff       	call   c00217a4 <SATAPI::detectMedia()>
c00219c6:	83 c4 14             	add    esp,0x14
c00219c9:	31 c0                	xor    eax,eax
c00219cb:	5b                   	pop    ebx
c00219cc:	5e                   	pop    esi
c00219cd:	c3                   	ret    

c00219ce <SATAPI::read(unsigned long long, int, void*)>:
c00219ce:	55                   	push   ebp
c00219cf:	57                   	push   edi
c00219d0:	56                   	push   esi
c00219d1:	53                   	push   ebx
c00219d2:	83 ec 48             	sub    esp,0x48
c00219d5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00219d9:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c00219dd:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c00219e1:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00219e5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00219e9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00219ed:	68 bf 7a 02 c0       	push   0xc0027abf
c00219f2:	e8 20 b7 fe ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c00219f7:	83 c4 10             	add    esp,0x10
c00219fa:	83 fb 04             	cmp    ebx,0x4
c00219fd:	7e 10                	jle    c0021a0f <SATAPI::read(unsigned long long, int, void*)+0x41>
c00219ff:	83 ec 0c             	sub    esp,0xc
c0021a02:	68 d0 7a 02 c0       	push   0xc0027ad0
c0021a07:	e8 ed 37 ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c0021a0c:	83 c4 10             	add    esp,0x10
c0021a0f:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0021a13:	31 ed                	xor    ebp,ebp
c0021a15:	b9 03 00 00 00       	mov    ecx,0x3
c0021a1a:	fc                   	cld    
c0021a1b:	89 e8                	mov    eax,ebp
c0021a1d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021a1f:	c6 44 24 18 1b       	mov    BYTE PTR [esp+0x18],0x1b
c0021a24:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c0021a29:	50                   	push   eax
c0021a2a:	6a 00                	push   0x0
c0021a2c:	6a 00                	push   0x0
c0021a2e:	6a 00                	push   0x0
c0021a30:	6a 00                	push   0x0
c0021a32:	6a 02                	push   0x2
c0021a34:	8d 44 24 30          	lea    eax,[esp+0x30]
c0021a38:	50                   	push   eax
c0021a39:	56                   	push   esi
c0021a3a:	e8 9b fa ff ff       	call   c00214da <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0021a3f:	8d 7c 24 44          	lea    edi,[esp+0x44]
c0021a43:	89 e8                	mov    eax,ebp
c0021a45:	b9 03 00 00 00       	mov    ecx,0x3
c0021a4a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021a4c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0021a50:	88 5c 24 4d          	mov    BYTE PTR [esp+0x4d],bl
c0021a54:	c6 44 24 44 a8       	mov    BYTE PTR [esp+0x44],0xa8
c0021a59:	86 e0                	xchg   al,ah
c0021a5b:	c1 c0 10             	rol    eax,0x10
c0021a5e:	86 e0                	xchg   al,ah
c0021a60:	89 44 24 46          	mov    DWORD PTR [esp+0x46],eax
c0021a64:	83 c4 1c             	add    esp,0x1c
c0021a67:	53                   	push   ebx
c0021a68:	c1 e3 0b             	shl    ebx,0xb
c0021a6b:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c0021a6f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021a73:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021a77:	53                   	push   ebx
c0021a78:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0021a7c:	50                   	push   eax
c0021a7d:	56                   	push   esi
c0021a7e:	e8 57 fa ff ff       	call   c00214da <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0021a83:	83 c4 20             	add    esp,0x20
c0021a86:	85 c0                	test   eax,eax
c0021a88:	74 14                	je     c0021a9e <SATAPI::read(unsigned long long, int, void*)+0xd0>
c0021a8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021a8e:	83 ec 0c             	sub    esp,0xc
c0021a91:	56                   	push   esi
c0021a92:	e8 0d fd ff ff       	call   c00217a4 <SATAPI::detectMedia()>
c0021a97:	83 c4 10             	add    esp,0x10
c0021a9a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021a9e:	83 c4 3c             	add    esp,0x3c
c0021aa1:	5b                   	pop    ebx
c0021aa2:	5e                   	pop    esi
c0021aa3:	5f                   	pop    edi
c0021aa4:	5d                   	pop    ebp
c0021aa5:	c3                   	ret    
c0021aa6:	66 90                	xchg   ax,ax

c0021aa8 <AVX::open(int, int, void*)>:
c0021aa8:	83 ec 0c             	sub    esp,0xc
c0021aab:	e8 6c 11 00 00       	call   c0022c1c <avxInit>
c0021ab0:	b8 00 00 00 00       	mov    eax,0x0
c0021ab5:	83 c4 0c             	add    esp,0xc
c0021ab8:	c3                   	ret    
c0021ab9:	90                   	nop
c0021aba:	66 90                	xchg   ax,ax

c0021abc <AVX::close(int, int, void*)>:
c0021abc:	83 ec 0c             	sub    esp,0xc
c0021abf:	e8 7a 11 00 00       	call   c0022c3e <avxClose>
c0021ac4:	b8 00 00 00 00       	mov    eax,0x0
c0021ac9:	83 c4 0c             	add    esp,0xc
c0021acc:	c3                   	ret    
c0021acd:	90                   	nop
c0021ace:	66 90                	xchg   ax,ax

c0021ad0 <AVX::available()>:
c0021ad0:	83 ec 0c             	sub    esp,0xc
c0021ad3:	e8 f8 10 00 00       	call   c0022bd0 <avxDetect>
c0021ad8:	85 c0                	test   eax,eax
c0021ada:	0f 95 c0             	setne  al
c0021add:	83 c4 0c             	add    esp,0xc
c0021ae0:	c3                   	ret    
c0021ae1:	90                   	nop
c0021ae2:	66 90                	xchg   ax,ax

c0021ae4 <AVX::save(void*)>:
c0021ae4:	83 ec 0c             	sub    esp,0xc
c0021ae7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021aeb:	83 ec 0c             	sub    esp,0xc
c0021aee:	50                   	push   eax
c0021aef:	e8 06 11 00 00       	call   c0022bfa <avxSave>
c0021af4:	83 c4 10             	add    esp,0x10
c0021af7:	90                   	nop
c0021af8:	83 c4 0c             	add    esp,0xc
c0021afb:	c3                   	ret    

c0021afc <AVX::load(void*)>:
c0021afc:	83 ec 0c             	sub    esp,0xc
c0021aff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021b03:	83 ec 0c             	sub    esp,0xc
c0021b06:	50                   	push   eax
c0021b07:	e8 ff 10 00 00       	call   c0022c0b <avxLoad>
c0021b0c:	83 c4 10             	add    esp,0x10
c0021b0f:	90                   	nop
c0021b10:	83 c4 0c             	add    esp,0xc
c0021b13:	c3                   	ret    

c0021b14 <AVX::AVX()>:
c0021b14:	83 ec 0c             	sub    esp,0xc
c0021b17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b1b:	83 ec 08             	sub    esp,0x8
c0021b1e:	68 34 7b 02 c0       	push   0xc0027b34
c0021b23:	50                   	push   eax
c0021b24:	e8 77 d0 fe ff       	call   c000eba0 <FPU::FPU(char const*)>
c0021b29:	83 c4 10             	add    esp,0x10
c0021b2c:	ba 44 7b 02 c0       	mov    edx,0xc0027b44
c0021b31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b35:	89 10                	mov    DWORD PTR [eax],edx
c0021b37:	90                   	nop
c0021b38:	83 c4 0c             	add    esp,0xc
c0021b3b:	c3                   	ret    

c0021b3c <MMX::available()>:
c0021b3c:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c0021b41:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0021b47:	83 e0 20             	and    eax,0x20
c0021b4a:	84 c0                	test   al,al
c0021b4c:	0f 95 c0             	setne  al
c0021b4f:	c3                   	ret    

c0021b50 <MMX::open(int, int, void*)>:
c0021b50:	83 ec 0c             	sub    esp,0xc
c0021b53:	e8 77 11 00 00       	call   c0022ccf <x87Init>
c0021b58:	b8 00 00 00 00       	mov    eax,0x0
c0021b5d:	83 c4 0c             	add    esp,0xc
c0021b60:	c3                   	ret    
c0021b61:	90                   	nop
c0021b62:	66 90                	xchg   ax,ax

c0021b64 <MMX::close(int, int, void*)>:
c0021b64:	83 ec 0c             	sub    esp,0xc
c0021b67:	e8 7c 11 00 00       	call   c0022ce8 <x87Close>
c0021b6c:	b8 00 00 00 00       	mov    eax,0x0
c0021b71:	83 c4 0c             	add    esp,0xc
c0021b74:	c3                   	ret    
c0021b75:	90                   	nop
c0021b76:	66 90                	xchg   ax,ax

c0021b78 <MMX::save(void*)>:
c0021b78:	83 ec 0c             	sub    esp,0xc
c0021b7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021b7f:	83 ec 0c             	sub    esp,0xc
c0021b82:	50                   	push   eax
c0021b83:	e8 39 11 00 00       	call   c0022cc1 <x87Save>
c0021b88:	83 c4 10             	add    esp,0x10
c0021b8b:	90                   	nop
c0021b8c:	83 c4 0c             	add    esp,0xc
c0021b8f:	c3                   	ret    

c0021b90 <MMX::load(void*)>:
c0021b90:	83 ec 0c             	sub    esp,0xc
c0021b93:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021b97:	83 ec 0c             	sub    esp,0xc
c0021b9a:	50                   	push   eax
c0021b9b:	e8 28 11 00 00       	call   c0022cc8 <x87Load>
c0021ba0:	83 c4 10             	add    esp,0x10
c0021ba3:	90                   	nop
c0021ba4:	83 c4 0c             	add    esp,0xc
c0021ba7:	c3                   	ret    

c0021ba8 <MMX::MMX()>:
c0021ba8:	83 ec 0c             	sub    esp,0xc
c0021bab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021baf:	83 ec 08             	sub    esp,0x8
c0021bb2:	68 74 7b 02 c0       	push   0xc0027b74
c0021bb7:	50                   	push   eax
c0021bb8:	e8 e3 cf fe ff       	call   c000eba0 <FPU::FPU(char const*)>
c0021bbd:	83 c4 10             	add    esp,0x10
c0021bc0:	ba 84 7b 02 c0       	mov    edx,0xc0027b84
c0021bc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bc9:	89 10                	mov    DWORD PTR [eax],edx
c0021bcb:	90                   	nop
c0021bcc:	83 c4 0c             	add    esp,0xc
c0021bcf:	c3                   	ret    

c0021bd0 <SSE::open(int, int, void*)>:
c0021bd0:	83 ec 0c             	sub    esp,0xc
c0021bd3:	e8 b0 10 00 00       	call   c0022c88 <sseInit>
c0021bd8:	b8 00 00 00 00       	mov    eax,0x0
c0021bdd:	83 c4 0c             	add    esp,0xc
c0021be0:	c3                   	ret    
c0021be1:	90                   	nop
c0021be2:	66 90                	xchg   ax,ax

c0021be4 <SSE::close(int, int, void*)>:
c0021be4:	83 ec 0c             	sub    esp,0xc
c0021be7:	e8 ac 10 00 00       	call   c0022c98 <sseClose>
c0021bec:	b8 00 00 00 00       	mov    eax,0x0
c0021bf1:	83 c4 0c             	add    esp,0xc
c0021bf4:	c3                   	ret    
c0021bf5:	90                   	nop
c0021bf6:	66 90                	xchg   ax,ax

c0021bf8 <SSE::available()>:
c0021bf8:	83 ec 1c             	sub    esp,0x1c
c0021bfb:	e8 60 10 00 00       	call   c0022c60 <absolutelyNoChanceInHell>
c0021c00:	85 c0                	test   eax,eax
c0021c02:	0f 95 c0             	setne  al
c0021c05:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0021c09:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0021c0d:	83 c4 1c             	add    esp,0x1c
c0021c10:	c3                   	ret    
c0021c11:	90                   	nop
c0021c12:	66 90                	xchg   ax,ax

c0021c14 <SSE::save(void*)>:
c0021c14:	83 ec 0c             	sub    esp,0xc
c0021c17:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021c1b:	83 ec 0c             	sub    esp,0xc
c0021c1e:	50                   	push   eax
c0021c1f:	e8 54 10 00 00       	call   c0022c78 <sseSave>
c0021c24:	83 c4 10             	add    esp,0x10
c0021c27:	90                   	nop
c0021c28:	83 c4 0c             	add    esp,0xc
c0021c2b:	c3                   	ret    

c0021c2c <SSE::load(void*)>:
c0021c2c:	83 ec 0c             	sub    esp,0xc
c0021c2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021c33:	83 ec 0c             	sub    esp,0xc
c0021c36:	50                   	push   eax
c0021c37:	e8 44 10 00 00       	call   c0022c80 <sseLoad>
c0021c3c:	83 c4 10             	add    esp,0x10
c0021c3f:	90                   	nop
c0021c40:	83 c4 0c             	add    esp,0xc
c0021c43:	c3                   	ret    

c0021c44 <SSE::SSE()>:
c0021c44:	83 ec 0c             	sub    esp,0xc
c0021c47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c4b:	83 ec 08             	sub    esp,0x8
c0021c4e:	68 b4 7b 02 c0       	push   0xc0027bb4
c0021c53:	50                   	push   eax
c0021c54:	e8 47 cf fe ff       	call   c000eba0 <FPU::FPU(char const*)>
c0021c59:	83 c4 10             	add    esp,0x10
c0021c5c:	ba c4 7b 02 c0       	mov    edx,0xc0027bc4
c0021c61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c65:	89 10                	mov    DWORD PTR [eax],edx
c0021c67:	90                   	nop
c0021c68:	83 c4 0c             	add    esp,0xc
c0021c6b:	c3                   	ret    

c0021c6c <x87::open(int, int, void*)>:
c0021c6c:	55                   	push   ebp
c0021c6d:	89 e5                	mov    ebp,esp
c0021c6f:	83 ec 08             	sub    esp,0x8
c0021c72:	e8 58 10 00 00       	call   c0022ccf <x87Init>
c0021c77:	b8 00 00 00 00       	mov    eax,0x0
c0021c7c:	c9                   	leave  
c0021c7d:	c3                   	ret    

c0021c7e <x87::close(int, int, void*)>:
c0021c7e:	55                   	push   ebp
c0021c7f:	89 e5                	mov    ebp,esp
c0021c81:	83 ec 08             	sub    esp,0x8
c0021c84:	e8 5f 10 00 00       	call   c0022ce8 <x87Close>
c0021c89:	b8 00 00 00 00       	mov    eax,0x0
c0021c8e:	c9                   	leave  
c0021c8f:	c3                   	ret    

c0021c90 <x87::available()>:
c0021c90:	55                   	push   ebp
c0021c91:	89 e5                	mov    ebp,esp
c0021c93:	83 ec 08             	sub    esp,0x8
c0021c96:	e8 0b 10 00 00       	call   c0022ca6 <x87Detect>
c0021c9b:	85 c0                	test   eax,eax
c0021c9d:	0f 95 c0             	setne  al
c0021ca0:	c9                   	leave  
c0021ca1:	c3                   	ret    

c0021ca2 <x87::save(void*)>:
c0021ca2:	55                   	push   ebp
c0021ca3:	89 e5                	mov    ebp,esp
c0021ca5:	83 ec 08             	sub    esp,0x8
c0021ca8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021cab:	83 ec 0c             	sub    esp,0xc
c0021cae:	50                   	push   eax
c0021caf:	e8 0d 10 00 00       	call   c0022cc1 <x87Save>
c0021cb4:	83 c4 10             	add    esp,0x10
c0021cb7:	90                   	nop
c0021cb8:	c9                   	leave  
c0021cb9:	c3                   	ret    

c0021cba <x87::load(void*)>:
c0021cba:	55                   	push   ebp
c0021cbb:	89 e5                	mov    ebp,esp
c0021cbd:	83 ec 08             	sub    esp,0x8
c0021cc0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021cc3:	83 ec 0c             	sub    esp,0xc
c0021cc6:	50                   	push   eax
c0021cc7:	e8 fc 0f 00 00       	call   c0022cc8 <x87Load>
c0021ccc:	83 c4 10             	add    esp,0x10
c0021ccf:	90                   	nop
c0021cd0:	c9                   	leave  
c0021cd1:	c3                   	ret    

c0021cd2 <x87::x87()>:
c0021cd2:	83 ec 0c             	sub    esp,0xc
c0021cd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cd9:	83 ec 08             	sub    esp,0x8
c0021cdc:	68 f4 7b 02 c0       	push   0xc0027bf4
c0021ce1:	50                   	push   eax
c0021ce2:	e8 b9 ce fe ff       	call   c000eba0 <FPU::FPU(char const*)>
c0021ce7:	83 c4 10             	add    esp,0x10
c0021cea:	ba 04 7c 02 c0       	mov    edx,0xc0027c04
c0021cef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cf3:	89 10                	mov    DWORD PTR [eax],edx
c0021cf5:	90                   	nop
c0021cf6:	83 c4 0c             	add    esp,0xc
c0021cf9:	c3                   	ret    

c0021cfa <APIC::disable()>:
c0021cfa:	90                   	nop
c0021cfb:	c3                   	ret    

c0021cfc <APIC::close(int, int, void*)>:
c0021cfc:	55                   	push   ebp
c0021cfd:	89 e5                	mov    ebp,esp
c0021cff:	83 ec 08             	sub    esp,0x8
c0021d02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021d05:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d07:	83 c0 3c             	add    eax,0x3c
c0021d0a:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d0c:	83 ec 0c             	sub    esp,0xc
c0021d0f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021d12:	ff d0                	call   eax
c0021d14:	83 c4 10             	add    esp,0x10
c0021d17:	b8 00 00 00 00       	mov    eax,0x0
c0021d1c:	c9                   	leave  
c0021d1d:	c3                   	ret    

c0021d1e <IOAPIC::close(int, int, void*)>:
c0021d1e:	b8 00 00 00 00       	mov    eax,0x0
c0021d23:	c3                   	ret    

c0021d24 <APIC::io_wait()>:
c0021d24:	eb 00                	jmp    c0021d26 <APIC::io_wait()+0x2>
c0021d26:	eb 00                	jmp    c0021d28 <APIC::io_wait()+0x4>
c0021d28:	90                   	nop
c0021d29:	c3                   	ret    

c0021d2a <APIC::getBase()>:
c0021d2a:	55                   	push   ebp
c0021d2b:	89 e5                	mov    ebp,esp
c0021d2d:	83 ec 18             	sub    esp,0x18
c0021d30:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c0021d35:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0021d3b:	83 e0 08             	and    eax,0x8
c0021d3e:	84 c0                	test   al,al
c0021d40:	75 07                	jne    c0021d49 <APIC::getBase()+0x1f>
c0021d42:	b8 00 00 00 00       	mov    eax,0x0
c0021d47:	eb 21                	jmp    c0021d6a <APIC::getBase()+0x40>
c0021d49:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c0021d4e:	83 ec 08             	sub    esp,0x8
c0021d51:	6a 1b                	push   0x1b
c0021d53:	50                   	push   eax
c0021d54:	e8 25 75 fe ff       	call   c000927e <Computer::rdmsr(unsigned int)>
c0021d59:	83 c4 10             	add    esp,0x10
c0021d5c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0021d5f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0021d62:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021d65:	25 00 f0 ff ff       	and    eax,0xfffff000
c0021d6a:	c9                   	leave  
c0021d6b:	c3                   	ret    

c0021d6c <APIC::eoi(unsigned char)>:
c0021d6c:	55                   	push   ebp
c0021d6d:	89 e5                	mov    ebp,esp
c0021d6f:	83 ec 28             	sub    esp,0x28
c0021d72:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021d75:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0021d78:	83 ec 0c             	sub    esp,0xc
c0021d7b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021d7e:	e8 a7 ff ff ff       	call   c0021d2a <APIC::getBase()>
c0021d83:	83 c4 10             	add    esp,0x10
c0021d86:	05 b0 00 00 00       	add    eax,0xb0
c0021d8b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0021d8e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0021d91:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0021d97:	90                   	nop
c0021d98:	c9                   	leave  
c0021d99:	c3                   	ret    

c0021d9a <APIC::open(int, int, void*)>:
c0021d9a:	55                   	push   ebp
c0021d9b:	89 e5                	mov    ebp,esp
c0021d9d:	57                   	push   edi
c0021d9e:	56                   	push   esi
c0021d9f:	53                   	push   ebx
c0021da0:	83 ec 2c             	sub    esp,0x2c
c0021da3:	83 ec 0c             	sub    esp,0xc
c0021da6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021da9:	e8 7c ff ff ff       	call   c0021d2a <APIC::getBase()>
c0021dae:	83 c4 10             	add    esp,0x10
c0021db1:	89 c2                	mov    edx,eax
c0021db3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021db6:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021dbc:	0f b6 f8             	movzx  edi,al
c0021dbf:	89 d0                	mov    eax,edx
c0021dc1:	ba 00 00 00 00       	mov    edx,0x0
c0021dc6:	89 c1                	mov    ecx,eax
c0021dc8:	80 e5 ff             	and    ch,0xff
c0021dcb:	89 cb                	mov    ebx,ecx
c0021dcd:	0f b6 f2             	movzx  esi,dl
c0021dd0:	89 d8                	mov    eax,ebx
c0021dd2:	89 f2                	mov    edx,esi
c0021dd4:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021dd7:	8d 5f 08             	lea    ebx,[edi+0x8]
c0021dda:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0021dde:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0021de2:	83 e0 00             	and    eax,0x0
c0021de5:	09 d0                	or     eax,edx
c0021de7:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0021deb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021dee:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021df4:	8d 50 01             	lea    edx,[eax+0x1]
c0021df7:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021dfa:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0021e00:	0f b6 d0             	movzx  edx,al
c0021e03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021e06:	83 c2 08             	add    edx,0x8
c0021e09:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0021e0d:	0f b6 c9             	movzx  ecx,cl
c0021e10:	81 c9 00 00 01 00    	or     ecx,0x10000
c0021e16:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0021e1a:	83 ec 0c             	sub    esp,0xc
c0021e1d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021e20:	e8 05 ff ff ff       	call   c0021d2a <APIC::getBase()>
c0021e25:	83 c4 10             	add    esp,0x10
c0021e28:	05 f0 00 00 00       	add    eax,0xf0
c0021e2d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0021e30:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0021e33:	8b 00                	mov    eax,DWORD PTR [eax]
c0021e35:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0021e38:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0021e3f:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0021e46:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0021e49:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021e4c:	89 10                	mov    DWORD PTR [eax],edx
c0021e4e:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0021e55:	a1 70 94 02 c0       	mov    eax,ds:0xc0029470
c0021e5a:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0021e5d:	7d 7c                	jge    c0021edb <APIC::open(int, int, void*)+0x141>
c0021e5f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0021e62:	8b 04 85 80 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b80]
c0021e69:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0021e6c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0021e6f:	8b 04 85 80 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b80]
c0021e76:	c1 e8 08             	shr    eax,0x8
c0021e79:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0021e7d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0021e80:	8b 04 85 80 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b80]
c0021e87:	c1 e8 18             	shr    eax,0x18
c0021e8a:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0021e8d:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0021e91:	75 40                	jne    c0021ed3 <APIC::open(int, int, void*)+0x139>
c0021e93:	83 ec 0c             	sub    esp,0xc
c0021e96:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021e99:	e8 8c fe ff ff       	call   c0021d2a <APIC::getBase()>
c0021e9e:	83 c4 10             	add    esp,0x10
c0021ea1:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0021ea5:	75 07                	jne    c0021eae <APIC::open(int, int, void*)+0x114>
c0021ea7:	ba 60 03 00 00       	mov    edx,0x360
c0021eac:	eb 05                	jmp    c0021eb3 <APIC::open(int, int, void*)+0x119>
c0021eae:	ba 50 03 00 00       	mov    edx,0x350
c0021eb3:	01 d0                	add    eax,edx
c0021eb5:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0021eb8:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0021ebb:	8b 00                	mov    eax,DWORD PTR [eax]
c0021ebd:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0021ec0:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0021ec7:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0021ecb:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0021ece:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0021ed1:	89 10                	mov    DWORD PTR [eax],edx
c0021ed3:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0021ed6:	e9 7a ff ff ff       	jmp    c0021e55 <APIC::open(int, int, void*)+0xbb>
c0021edb:	b8 00 00 00 00       	mov    eax,0x0
c0021ee0:	8d 65 f4             	lea    esp,[ebp-0xc]
c0021ee3:	5b                   	pop    ebx
c0021ee4:	5e                   	pop    esi
c0021ee5:	5f                   	pop    edi
c0021ee6:	5d                   	pop    ebp
c0021ee7:	c3                   	ret    

c0021ee8 <IOAPIC::IOAPIC()>:
c0021ee8:	83 ec 0c             	sub    esp,0xc
c0021eeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021eef:	83 ec 08             	sub    esp,0x8
c0021ef2:	68 34 7c 02 c0       	push   0xc0027c34
c0021ef7:	50                   	push   eax
c0021ef8:	e8 91 c9 fe ff       	call   c000e88e <Device::Device(char const*)>
c0021efd:	83 c4 10             	add    esp,0x10
c0021f00:	ba 5c 7d 02 c0       	mov    edx,0xc0027d5c
c0021f05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f09:	89 10                	mov    DWORD PTR [eax],edx
c0021f0b:	90                   	nop
c0021f0c:	83 c4 0c             	add    esp,0xc
c0021f0f:	c3                   	ret    

c0021f10 <APIC::APIC()>:
c0021f10:	53                   	push   ebx
c0021f11:	83 ec 18             	sub    esp,0x18
c0021f14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f18:	83 ec 08             	sub    esp,0x8
c0021f1b:	68 3c 7c 02 c0       	push   0xc0027c3c
c0021f20:	50                   	push   eax
c0021f21:	e8 f8 d0 fe ff       	call   c000f01e <InterruptController::InterruptController(char const*)>
c0021f26:	83 c4 10             	add    esp,0x10
c0021f29:	ba 14 7d 02 c0       	mov    edx,0xc0027d14
c0021f2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f32:	89 10                	mov    DWORD PTR [eax],edx
c0021f34:	a0 a0 ab 02 c0       	mov    al,ds:0xc002aba0
c0021f39:	83 f0 01             	xor    eax,0x1
c0021f3c:	84 c0                	test   al,al
c0021f3e:	0f 84 a1 00 00 00    	je     c0021fe5 <APIC::APIC()+0xd5>
c0021f44:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0021f49:	a0 20 95 02 c0       	mov    al,ds:0xc0029520
c0021f4e:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0021f52:	0f 83 86 00 00 00    	jae    c0021fde <APIC::APIC()+0xce>
c0021f58:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0021f60:	83 ec 0c             	sub    esp,0xc
c0021f63:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021f67:	e8 7b 7e fe ff       	call   c0009de7 <malloc>
c0021f6c:	83 c4 10             	add    esp,0x10
c0021f6f:	89 c3                	mov    ebx,eax
c0021f71:	83 ec 0c             	sub    esp,0xc
c0021f74:	53                   	push   ebx
c0021f75:	e8 6e ff ff ff       	call   c0021ee8 <IOAPIC::IOAPIC()>
c0021f7a:	83 c4 10             	add    esp,0x10
c0021f7d:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0021f81:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0021f86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021f8a:	89 14 85 80 ab 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5480],edx
c0021f91:	a1 60 ab 02 c0       	mov    eax,ds:0xc002ab60
c0021f96:	40                   	inc    eax
c0021f97:	a3 60 ab 02 c0       	mov    ds:0xc002ab60,eax
c0021f9c:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c0021fa1:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0021fa7:	83 ec 08             	sub    esp,0x8
c0021faa:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021fae:	50                   	push   eax
c0021faf:	e8 d6 c6 fe ff       	call   c000e68a <Device::addChild(Device*)>
c0021fb4:	83 c4 10             	add    esp,0x10
c0021fb7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021fbb:	8b 00                	mov    eax,DWORD PTR [eax]
c0021fbd:	83 c0 08             	add    eax,0x8
c0021fc0:	8b 00                	mov    eax,DWORD PTR [eax]
c0021fc2:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0021fc7:	6a 00                	push   0x0
c0021fc9:	6a 00                	push   0x0
c0021fcb:	52                   	push   edx
c0021fcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021fd0:	ff d0                	call   eax
c0021fd2:	83 c4 10             	add    esp,0x10
c0021fd5:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0021fd9:	e9 6b ff ff ff       	jmp    c0021f49 <APIC::APIC()+0x39>
c0021fde:	c6 05 a0 ab 02 c0 01 	mov    BYTE PTR ds:0xc002aba0,0x1
c0021fe5:	90                   	nop
c0021fe6:	83 c4 18             	add    esp,0x18
c0021fe9:	5b                   	pop    ebx
c0021fea:	c3                   	ret    
c0021feb:	90                   	nop

c0021fec <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0021fec:	55                   	push   ebp
c0021fed:	89 e5                	mov    ebp,esp
c0021fef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021ff2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0021ff8:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0021ffb:	72 1d                	jb     c002201a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0021ffd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022000:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0022006:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022009:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c002200f:	01 d0                	add    eax,edx
c0022011:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0022014:	73 04                	jae    c002201a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0022016:	b0 01                	mov    al,0x1
c0022018:	eb 02                	jmp    c002201c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c002201a:	b0 00                	mov    al,0x0
c002201c:	5d                   	pop    ebp
c002201d:	c3                   	ret    

c002201e <IOAPIC::read(int)>:
c002201e:	55                   	push   ebp
c002201f:	89 e5                	mov    ebp,esp
c0022021:	83 ec 10             	sub    esp,0x10
c0022024:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022027:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002202d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0022030:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022033:	0f b6 d0             	movzx  edx,al
c0022036:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0022039:	89 10                	mov    DWORD PTR [eax],edx
c002203b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002203e:	83 c0 10             	add    eax,0x10
c0022041:	8b 00                	mov    eax,DWORD PTR [eax]
c0022043:	c9                   	leave  
c0022044:	c3                   	ret    
c0022045:	90                   	nop

c0022046 <IOAPIC::open(int, int, void*)>:
c0022046:	55                   	push   ebp
c0022047:	89 e5                	mov    ebp,esp
c0022049:	57                   	push   edi
c002204a:	56                   	push   esi
c002204b:	53                   	push   ebx
c002204c:	83 ec 0c             	sub    esp,0xc
c002204f:	83 ec 0c             	sub    esp,0xc
c0022052:	68 67 7c 02 c0       	push   0xc0027c67
c0022057:	e8 bb b0 fe ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c002205c:	83 c4 10             	add    esp,0x10
c002205f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022062:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022065:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002206b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002206e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0022074:	8b 14 85 60 95 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6aa0]
c002207b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002207e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0022084:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022087:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002208d:	8b 14 85 e0 95 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6a20]
c0022094:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022097:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002209d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00220a0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00220a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00220a9:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00220af:	0f b6 f8             	movzx  edi,al
c00220b2:	89 d0                	mov    eax,edx
c00220b4:	ba 00 00 00 00       	mov    edx,0x0
c00220b9:	89 c1                	mov    ecx,eax
c00220bb:	80 e5 ff             	and    ch,0xff
c00220be:	89 cb                	mov    ebx,ecx
c00220c0:	0f b6 f2             	movzx  esi,dl
c00220c3:	89 d8                	mov    eax,ebx
c00220c5:	89 f2                	mov    edx,esi
c00220c7:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00220ca:	8d 5f 08             	lea    ebx,[edi+0x8]
c00220cd:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00220d1:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00220d5:	83 e0 00             	and    eax,0x0
c00220d8:	09 d0                	or     eax,edx
c00220da:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00220de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00220e1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00220e7:	8d 50 01             	lea    edx,[eax+0x1]
c00220ea:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00220ed:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00220f3:	0f b6 d0             	movzx  edx,al
c00220f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00220f9:	83 c2 08             	add    edx,0x8
c00220fc:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0022100:	0f b6 c9             	movzx  ecx,cl
c0022103:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0022109:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002210d:	83 ec 08             	sub    esp,0x8
c0022110:	6a 01                	push   0x1
c0022112:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022115:	e8 04 ff ff ff       	call   c002201e <IOAPIC::read(int)>
c002211a:	83 c4 10             	add    esp,0x10
c002211d:	c1 f8 10             	sar    eax,0x10
c0022120:	0f b6 c0             	movzx  eax,al
c0022123:	8d 50 01             	lea    edx,[eax+0x1]
c0022126:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022129:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c002212f:	b8 00 00 00 00       	mov    eax,0x0
c0022134:	8d 65 f4             	lea    esp,[ebp-0xc]
c0022137:	5b                   	pop    ebx
c0022138:	5e                   	pop    esi
c0022139:	5f                   	pop    edi
c002213a:	5d                   	pop    ebp
c002213b:	c3                   	ret    

c002213c <IOAPIC::write(int, int)>:
c002213c:	55                   	push   ebp
c002213d:	89 e5                	mov    ebp,esp
c002213f:	83 ec 10             	sub    esp,0x10
c0022142:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022145:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002214b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002214e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022151:	0f b6 d0             	movzx  edx,al
c0022154:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0022157:	89 10                	mov    DWORD PTR [eax],edx
c0022159:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002215c:	8d 50 10             	lea    edx,[eax+0x10]
c002215f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0022162:	89 02                	mov    DWORD PTR [edx],eax
c0022164:	90                   	nop
c0022165:	c9                   	leave  
c0022166:	c3                   	ret    
c0022167:	90                   	nop

c0022168 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0022168:	55                   	push   ebp
c0022169:	89 e5                	mov    ebp,esp
c002216b:	53                   	push   ebx
c002216c:	83 ec 2c             	sub    esp,0x2c
c002216f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022172:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0022175:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0022178:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c002217b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002217e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0022181:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0022184:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0022187:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002218a:	88 d8                	mov    al,bl
c002218c:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c002218f:	88 c8                	mov    al,cl
c0022191:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0022194:	88 d0                	mov    al,dl
c0022196:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0022199:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002219d:	83 c0 08             	add    eax,0x8
c00221a0:	01 c0                	add    eax,eax
c00221a2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00221a5:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00221a9:	83 c0 08             	add    eax,0x8
c00221ac:	01 c0                	add    eax,eax
c00221ae:	40                   	inc    eax
c00221af:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00221b2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00221b5:	50                   	push   eax
c00221b6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00221b9:	e8 60 fe ff ff       	call   c002201e <IOAPIC::read(int)>
c00221be:	83 c4 08             	add    esp,0x8
c00221c1:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00221c4:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c00221cb:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00221ce:	c1 e0 18             	shl    eax,0x18
c00221d1:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c00221d4:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00221d7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00221da:	52                   	push   edx
c00221db:	50                   	push   eax
c00221dc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00221df:	e8 58 ff ff ff       	call   c002213c <IOAPIC::write(int, int)>
c00221e4:	83 c4 0c             	add    esp,0xc
c00221e7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00221ea:	50                   	push   eax
c00221eb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00221ee:	e8 2b fe ff ff       	call   c002201e <IOAPIC::read(int)>
c00221f3:	83 c4 08             	add    esp,0x8
c00221f6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00221f9:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0022200:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0022207:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c002220e:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0022212:	74 09                	je     c002221d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0022214:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c002221b:	eb 07                	jmp    c0022224 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c002221d:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0022224:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0022228:	74 09                	je     c0022233 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c002222a:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0022231:	eb 07                	jmp    c002223a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0022233:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c002223a:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0022241:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0022245:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0022248:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c002224b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002224e:	52                   	push   edx
c002224f:	50                   	push   eax
c0022250:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022253:	e8 e4 fe ff ff       	call   c002213c <IOAPIC::write(int, int)>
c0022258:	83 c4 0c             	add    esp,0xc
c002225b:	90                   	nop
c002225c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002225f:	c9                   	leave  
c0022260:	c3                   	ret    
c0022261:	90                   	nop

c0022262 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0022262:	55                   	push   ebp
c0022263:	89 e5                	mov    ebp,esp
c0022265:	57                   	push   edi
c0022266:	56                   	push   esi
c0022267:	53                   	push   ebx
c0022268:	83 ec 2c             	sub    esp,0x2c
c002226b:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002226e:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0022271:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0022275:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0022279:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c002227d:	74 5a                	je     c00222d9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002227f:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0022283:	7f 44                	jg     c00222c9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0022285:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022288:	05 00 83 02 c0       	add    eax,0xc0028300
c002228d:	8a 00                	mov    al,BYTE PTR [eax]
c002228f:	0f b6 c0             	movzx  eax,al
c0022292:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0022295:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022298:	66 8b 84 00 00 95 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd6b00]
c00222a0:	0f b7 c0             	movzx  eax,ax
c00222a3:	83 e0 02             	and    eax,0x2
c00222a6:	85 c0                	test   eax,eax
c00222a8:	74 04                	je     c00222ae <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c00222aa:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c00222ae:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00222b1:	66 8b 84 00 00 95 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd6b00]
c00222b9:	0f b7 c0             	movzx  eax,ax
c00222bc:	83 e0 08             	and    eax,0x8
c00222bf:	85 c0                	test   eax,eax
c00222c1:	74 16                	je     c00222d9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00222c3:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00222c7:	eb 10                	jmp    c00222d9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00222c9:	83 ec 0c             	sub    esp,0xc
c00222cc:	68 78 7c 02 c0       	push   0xc0027c78
c00222d1:	e8 23 2f ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c00222d6:	83 c4 10             	add    esp,0x10
c00222d9:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c00222dd:	a1 60 ab 02 c0       	mov    eax,ds:0xc002ab60
c00222e2:	83 ec 08             	sub    esp,0x8
c00222e5:	50                   	push   eax
c00222e6:	68 b0 7c 02 c0       	push   0xc0027cb0
c00222eb:	e8 27 ae fe ff       	call   c000d117 <Dbg::kprintf(char const*, ...)>
c00222f0:	83 c4 10             	add    esp,0x10
c00222f3:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c00222fa:	a1 60 ab 02 c0       	mov    eax,ds:0xc002ab60
c00222ff:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0022302:	7d 67                	jge    c002236b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0022304:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0022307:	8b 04 85 80 ab 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5480]
c002230e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022311:	83 ec 08             	sub    esp,0x8
c0022314:	52                   	push   edx
c0022315:	50                   	push   eax
c0022316:	e8 d1 fc ff ff       	call   c0021fec <IOAPIC::handlesGSIWithNumber(unsigned int)>
c002231b:	83 c4 10             	add    esp,0x10
c002231e:	84 c0                	test   al,al
c0022320:	74 44                	je     c0022366 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0022322:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0022325:	8b 1c 85 80 ab 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd5480]
c002232c:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0022330:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0022333:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0022337:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002233a:	83 c0 20             	add    eax,0x20
c002233d:	0f b6 f0             	movzx  esi,al
c0022340:	b8 00 00 00 00       	mov    eax,0x0
c0022345:	99                   	cdq    
c0022346:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0022349:	0f b6 c9             	movzx  ecx,cl
c002234c:	83 ec 04             	sub    esp,0x4
c002234f:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0022352:	57                   	push   edi
c0022353:	56                   	push   esi
c0022354:	52                   	push   edx
c0022355:	50                   	push   eax
c0022356:	51                   	push   ecx
c0022357:	53                   	push   ebx
c0022358:	e8 0b fe ff ff       	call   c0022168 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c002235d:	83 c4 20             	add    esp,0x20
c0022360:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0022364:	eb 05                	jmp    c002236b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0022366:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0022369:	eb 8f                	jmp    c00222fa <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c002236b:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c002236e:	83 f0 01             	xor    eax,0x1
c0022371:	84 c0                	test   al,al
c0022373:	74 10                	je     c0022385 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0022375:	83 ec 0c             	sub    esp,0xc
c0022378:	68 c7 7c 02 c0       	push   0xc0027cc7
c002237d:	e8 77 2e ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c0022382:	83 c4 10             	add    esp,0x10
c0022385:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0022389:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0022390:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0022394:	7f 65                	jg     c00223fb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0022396:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022399:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002239c:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00223a3:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00223a6:	01 ca                	add    edx,ecx
c00223a8:	83 c2 54             	add    edx,0x54
c00223ab:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c00223af:	85 c0                	test   eax,eax
c00223b1:	75 43                	jne    c00223f6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c00223b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00223b6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00223b9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00223c0:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00223c3:	01 ca                	add    edx,ecx
c00223c5:	8d 4a 54             	lea    ecx,[edx+0x54]
c00223c8:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00223cb:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00223cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00223d2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00223d5:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00223dc:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00223df:	01 ca                	add    edx,ecx
c00223e1:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c00223e7:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00223ea:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00223ee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00223f1:	83 e8 20             	sub    eax,0x20
c00223f4:	eb 1a                	jmp    c0022410 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c00223f6:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c00223f9:	eb 95                	jmp    c0022390 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c00223fb:	83 ec 0c             	sub    esp,0xc
c00223fe:	68 d4 7c 02 c0       	push   0xc0027cd4
c0022403:	e8 f1 2d ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c0022408:	83 c4 10             	add    esp,0x10
c002240b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0022410:	8d 65 f4             	lea    esp,[ebp-0xc]
c0022413:	5b                   	pop    ebx
c0022414:	5e                   	pop    esi
c0022415:	5f                   	pop    edi
c0022416:	5d                   	pop    ebp
c0022417:	c3                   	ret    

c0022418 <PIC::disable()>:
c0022418:	55                   	push   ebp
c0022419:	89 e5                	mov    ebp,esp
c002241b:	83 ec 10             	sub    esp,0x10
c002241e:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0022424:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0022428:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002242b:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c002242f:	ee                   	out    dx,al
c0022430:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0022436:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c002243a:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c002243d:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0022441:	ee                   	out    dx,al
c0022442:	90                   	nop
c0022443:	c9                   	leave  
c0022444:	c3                   	ret    
c0022445:	90                   	nop

c0022446 <PIC::close(int, int, void*)>:
c0022446:	55                   	push   ebp
c0022447:	89 e5                	mov    ebp,esp
c0022449:	83 ec 08             	sub    esp,0x8
c002244c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002244f:	8b 00                	mov    eax,DWORD PTR [eax]
c0022451:	83 c0 3c             	add    eax,0x3c
c0022454:	8b 00                	mov    eax,DWORD PTR [eax]
c0022456:	83 ec 0c             	sub    esp,0xc
c0022459:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002245c:	ff d0                	call   eax
c002245e:	83 c4 10             	add    esp,0x10
c0022461:	b8 00 00 00 00       	mov    eax,0x0
c0022466:	c9                   	leave  
c0022467:	c3                   	ret    

c0022468 <PIC::PIC()>:
c0022468:	83 ec 0c             	sub    esp,0xc
c002246b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002246f:	83 ec 08             	sub    esp,0x8
c0022472:	68 80 7d 02 c0       	push   0xc0027d80
c0022477:	50                   	push   eax
c0022478:	e8 a1 cb fe ff       	call   c000f01e <InterruptController::InterruptController(char const*)>
c002247d:	83 c4 10             	add    esp,0x10
c0022480:	ba ac 7d 02 c0       	mov    edx,0xc0027dac
c0022485:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022489:	89 10                	mov    DWORD PTR [eax],edx
c002248b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002248f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022495:	0f b6 d0             	movzx  edx,al
c0022498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002249c:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c00224a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224a7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00224ad:	0f b6 d0             	movzx  edx,al
c00224b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224b4:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00224b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224bd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00224c3:	8d 50 01             	lea    edx,[eax+0x1]
c00224c6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00224ca:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00224d0:	0f b6 d0             	movzx  edx,al
c00224d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224d7:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00224db:	83 e1 3f             	and    ecx,0x3f
c00224de:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00224e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224e6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00224ec:	0f b6 d0             	movzx  edx,al
c00224ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224f3:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c00224fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224fe:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022504:	0f b6 d0             	movzx  edx,al
c0022507:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002250b:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0022510:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022514:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002251a:	8d 50 01             	lea    edx,[eax+0x1]
c002251d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022521:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022527:	0f b6 d0             	movzx  edx,al
c002252a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002252e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022532:	83 e1 3f             	and    ecx,0x3f
c0022535:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022539:	90                   	nop
c002253a:	83 c4 0c             	add    esp,0xc
c002253d:	c3                   	ret    

c002253e <PIC::ioWait()>:
c002253e:	eb 00                	jmp    c0022540 <PIC::ioWait()+0x2>
c0022540:	eb 00                	jmp    c0022542 <PIC::ioWait()+0x4>
c0022542:	90                   	nop
c0022543:	c3                   	ret    

c0022544 <PIC::getIRQReg(int)>:
c0022544:	55                   	push   ebp
c0022545:	89 e5                	mov    ebp,esp
c0022547:	83 ec 10             	sub    esp,0x10
c002254a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002254d:	0f b6 c0             	movzx  eax,al
c0022550:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0022556:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0022559:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002255c:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0022560:	ee                   	out    dx,al
c0022561:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022564:	0f b6 c0             	movzx  eax,al
c0022567:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c002256d:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0022570:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0022573:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0022577:	ee                   	out    dx,al
c0022578:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c002257e:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0022582:	89 c2                	mov    edx,eax
c0022584:	ec                   	in     al,dx
c0022585:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0022588:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002258b:	0f b6 c0             	movzx  eax,al
c002258e:	c1 e0 08             	shl    eax,0x8
c0022591:	89 c1                	mov    ecx,eax
c0022593:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0022599:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c002259d:	89 c2                	mov    edx,eax
c002259f:	ec                   	in     al,dx
c00225a0:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c00225a3:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00225a6:	0f b6 c0             	movzx  eax,al
c00225a9:	09 c8                	or     eax,ecx
c00225ab:	c9                   	leave  
c00225ac:	c3                   	ret    
c00225ad:	90                   	nop

c00225ae <PIC::eoi(unsigned char)>:
c00225ae:	55                   	push   ebp
c00225af:	89 e5                	mov    ebp,esp
c00225b1:	83 ec 14             	sub    esp,0x14
c00225b4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00225b7:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c00225ba:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00225be:	75 1e                	jne    c00225de <PIC::eoi(unsigned char)+0x30>
c00225c0:	6a 0b                	push   0xb
c00225c2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00225c5:	e8 7a ff ff ff       	call   c0022544 <PIC::getIRQReg(int)>
c00225ca:	83 c4 08             	add    esp,0x8
c00225cd:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00225d1:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c00225d5:	25 80 00 00 00       	and    eax,0x80
c00225da:	85 c0                	test   eax,eax
c00225dc:	74 5f                	je     c002263d <PIC::eoi(unsigned char)+0x8f>
c00225de:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c00225e2:	75 2d                	jne    c0022611 <PIC::eoi(unsigned char)+0x63>
c00225e4:	6a 0b                	push   0xb
c00225e6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00225e9:	e8 56 ff ff ff       	call   c0022544 <PIC::getIRQReg(int)>
c00225ee:	83 c4 08             	add    esp,0x8
c00225f1:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c00225f5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00225f8:	66 85 c0             	test   ax,ax
c00225fb:	78 14                	js     c0022611 <PIC::eoi(unsigned char)+0x63>
c00225fd:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0022603:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0022607:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002260a:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c002260e:	ee                   	out    dx,al
c002260f:	eb 2d                	jmp    c002263e <PIC::eoi(unsigned char)+0x90>
c0022611:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0022615:	76 12                	jbe    c0022629 <PIC::eoi(unsigned char)+0x7b>
c0022617:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c002261d:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0022621:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0022624:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0022628:	ee                   	out    dx,al
c0022629:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c002262f:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0022633:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0022636:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002263a:	ee                   	out    dx,al
c002263b:	eb 01                	jmp    c002263e <PIC::eoi(unsigned char)+0x90>
c002263d:	90                   	nop
c002263e:	c9                   	leave  
c002263f:	c3                   	ret    

c0022640 <PIC::remap()>:
c0022640:	55                   	push   ebp
c0022641:	89 e5                	mov    ebp,esp
c0022643:	83 ec 48             	sub    esp,0x48
c0022646:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c002264d:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0022654:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c002265a:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c002265d:	89 c2                	mov    edx,eax
c002265f:	ec                   	in     al,dx
c0022660:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0022663:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0022666:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0022669:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c002266f:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0022672:	89 c2                	mov    edx,eax
c0022674:	ec                   	in     al,dx
c0022675:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0022678:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c002267b:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c002267e:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0022684:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0022688:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c002268b:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c002268e:	ee                   	out    dx,al
c002268f:	83 ec 0c             	sub    esp,0xc
c0022692:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022695:	e8 a4 fe ff ff       	call   c002253e <PIC::ioWait()>
c002269a:	83 c4 10             	add    esp,0x10
c002269d:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c00226a3:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c00226a7:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c00226aa:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00226ad:	ee                   	out    dx,al
c00226ae:	83 ec 0c             	sub    esp,0xc
c00226b1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00226b4:	e8 85 fe ff ff       	call   c002253e <PIC::ioWait()>
c00226b9:	83 c4 10             	add    esp,0x10
c00226bc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00226bf:	0f b6 c0             	movzx  eax,al
c00226c2:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c00226c8:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c00226cb:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c00226ce:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00226d1:	ee                   	out    dx,al
c00226d2:	83 ec 0c             	sub    esp,0xc
c00226d5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00226d8:	e8 61 fe ff ff       	call   c002253e <PIC::ioWait()>
c00226dd:	83 c4 10             	add    esp,0x10
c00226e0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00226e3:	0f b6 c0             	movzx  eax,al
c00226e6:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c00226ec:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c00226ef:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c00226f2:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00226f5:	ee                   	out    dx,al
c00226f6:	83 ec 0c             	sub    esp,0xc
c00226f9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00226fc:	e8 3d fe ff ff       	call   c002253e <PIC::ioWait()>
c0022701:	83 c4 10             	add    esp,0x10
c0022704:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c002270a:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c002270e:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0022711:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0022714:	ee                   	out    dx,al
c0022715:	83 ec 0c             	sub    esp,0xc
c0022718:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002271b:	e8 1e fe ff ff       	call   c002253e <PIC::ioWait()>
c0022720:	83 c4 10             	add    esp,0x10
c0022723:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0022729:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c002272d:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0022730:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0022733:	ee                   	out    dx,al
c0022734:	83 ec 0c             	sub    esp,0xc
c0022737:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002273a:	e8 ff fd ff ff       	call   c002253e <PIC::ioWait()>
c002273f:	83 c4 10             	add    esp,0x10
c0022742:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0022748:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c002274c:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c002274f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0022752:	ee                   	out    dx,al
c0022753:	83 ec 0c             	sub    esp,0xc
c0022756:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022759:	e8 e0 fd ff ff       	call   c002253e <PIC::ioWait()>
c002275e:	83 c4 10             	add    esp,0x10
c0022761:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0022767:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c002276b:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c002276e:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0022771:	ee                   	out    dx,al
c0022772:	83 ec 0c             	sub    esp,0xc
c0022775:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022778:	e8 c1 fd ff ff       	call   c002253e <PIC::ioWait()>
c002277d:	83 c4 10             	add    esp,0x10
c0022780:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0022784:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c002278a:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c002278d:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0022790:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0022793:	ee                   	out    dx,al
c0022794:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0022798:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c002279e:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c00227a1:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c00227a4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00227a7:	ee                   	out    dx,al
c00227a8:	90                   	nop
c00227a9:	c9                   	leave  
c00227aa:	c3                   	ret    
c00227ab:	90                   	nop

c00227ac <PIC::open(int, int, void*)>:
c00227ac:	55                   	push   ebp
c00227ad:	89 e5                	mov    ebp,esp
c00227af:	83 ec 18             	sub    esp,0x18
c00227b2:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c00227b8:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c00227bc:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00227bf:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00227c3:	ee                   	out    dx,al
c00227c4:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c00227ca:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c00227ce:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00227d1:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00227d5:	ee                   	out    dx,al
c00227d6:	83 ec 0c             	sub    esp,0xc
c00227d9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00227dc:	e8 5f fe ff ff       	call   c0022640 <PIC::remap()>
c00227e1:	83 c4 10             	add    esp,0x10
c00227e4:	b8 00 00 00 00       	mov    eax,0x0
c00227e9:	c9                   	leave  
c00227ea:	c3                   	ret    
c00227eb:	90                   	nop

c00227ec <APICTimer::close(int, int, void*)>:
c00227ec:	b8 00 00 00 00       	mov    eax,0x0
c00227f1:	c3                   	ret    
c00227f2:	66 90                	xchg   ax,ax

c00227f4 <apicTimerHandler(regs*, void*)>:
c00227f4:	83 ec 0c             	sub    esp,0xc
c00227f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00227fb:	8b 08                	mov    ecx,DWORD PTR [eax]
c00227fd:	b8 10 27 00 00       	mov    eax,0x2710
c0022802:	ba 00 00 00 00       	mov    edx,0x0
c0022807:	f7 f1                	div    ecx
c0022809:	83 ec 0c             	sub    esp,0xc
c002280c:	50                   	push   eax
c002280d:	e8 3b e8 fe ff       	call   c001104d <timerHandler(unsigned int)>
c0022812:	83 c4 10             	add    esp,0x10
c0022815:	90                   	nop
c0022816:	83 c4 0c             	add    esp,0xc
c0022819:	c3                   	ret    
c002281a:	66 90                	xchg   ax,ax

c002281c <APICTimer::write(int)>:
c002281c:	83 ec 1c             	sub    esp,0x1c
c002281f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022823:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022827:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002282d:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c0022832:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0022838:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002283e:	83 ec 0c             	sub    esp,0xc
c0022841:	50                   	push   eax
c0022842:	e8 e3 f4 ff ff       	call   c0021d2a <APIC::getBase()>
c0022847:	83 c4 10             	add    esp,0x10
c002284a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002284e:	a1 2c 92 02 c0       	mov    eax,ds:0xc002922c
c0022853:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022857:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002285b:	05 e0 03 00 00       	add    eax,0x3e0
c0022860:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0022866:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002286a:	05 80 03 00 00       	add    eax,0x380
c002286f:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0022875:	fb                   	sti    
c0022876:	66 90                	xchg   ax,ax
c0022878:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002287c:	8d 90 10 27 00 00    	lea    edx,[eax+0x2710]
c0022882:	a1 2c 92 02 c0       	mov    eax,ds:0xc002922c
c0022887:	39 c2                	cmp    edx,eax
c0022889:	76 05                	jbe    c0022890 <APICTimer::write(int)+0x74>
c002288b:	eb eb                	jmp    c0022878 <APICTimer::write(int)+0x5c>
c002288d:	8d 76 00             	lea    esi,[esi+0x0]
c0022890:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022894:	05 20 03 00 00       	add    eax,0x320
c0022899:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c002289f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00228a3:	05 90 03 00 00       	add    eax,0x390
c00228a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00228aa:	f7 d0                	not    eax
c00228ac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00228b0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00228b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00228b8:	ba 00 00 00 00       	mov    edx,0x0
c00228bd:	f7 f1                	div    ecx
c00228bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00228c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00228c6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00228cc:	0d 00 00 02 00       	or     eax,0x20000
c00228d1:	89 c2                	mov    edx,eax
c00228d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00228d7:	05 20 03 00 00       	add    eax,0x320
c00228dc:	89 10                	mov    DWORD PTR [eax],edx
c00228de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00228e2:	05 e0 03 00 00       	add    eax,0x3e0
c00228e7:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00228ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00228f1:	05 80 03 00 00       	add    eax,0x380
c00228f6:	89 c2                	mov    edx,eax
c00228f8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00228fb:	89 02                	mov    DWORD PTR [edx],eax
c00228fd:	90                   	nop
c00228fe:	83 c4 1c             	add    esp,0x1c
c0022901:	c3                   	ret    
c0022902:	66 90                	xchg   ax,ax

c0022904 <APICTimer::open(int, int, void*)>:
c0022904:	57                   	push   edi
c0022905:	56                   	push   esi
c0022906:	53                   	push   ebx
c0022907:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002290b:	8b 00                	mov    eax,DWORD PTR [eax]
c002290d:	83 c0 24             	add    eax,0x24
c0022910:	8b 00                	mov    eax,DWORD PTR [eax]
c0022912:	83 ec 08             	sub    esp,0x8
c0022915:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022919:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002291d:	ff d0                	call   eax
c002291f:	83 c4 10             	add    esp,0x10
c0022922:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c0022927:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002292d:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0022933:	83 ec 0c             	sub    esp,0xc
c0022936:	50                   	push   eax
c0022937:	e8 ee f3 ff ff       	call   c0021d2a <APIC::getBase()>
c002293c:	83 c4 10             	add    esp,0x10
c002293f:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0022945:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022949:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002294f:	0f b6 f8             	movzx  edi,al
c0022952:	89 d0                	mov    eax,edx
c0022954:	ba 00 00 00 00       	mov    edx,0x0
c0022959:	89 c1                	mov    ecx,eax
c002295b:	80 e5 ff             	and    ch,0xff
c002295e:	89 cb                	mov    ebx,ecx
c0022960:	0f b6 f2             	movzx  esi,dl
c0022963:	89 d8                	mov    eax,ebx
c0022965:	89 f2                	mov    edx,esi
c0022967:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002296b:	8d 5f 08             	lea    ebx,[edi+0x8]
c002296e:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0022972:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0022976:	83 e0 00             	and    eax,0x0
c0022979:	09 d0                	or     eax,edx
c002297b:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002297f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022983:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022989:	8d 50 01             	lea    edx,[eax+0x1]
c002298c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022990:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0022996:	0f b6 d0             	movzx  edx,al
c0022999:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002299d:	83 c2 08             	add    edx,0x8
c00229a0:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00229a4:	0f b6 c9             	movzx  ecx,cl
c00229a7:	81 c9 00 00 01 00    	or     ecx,0x10000
c00229ad:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00229b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229b5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00229b9:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00229bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229c3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00229c7:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00229cd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00229d1:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00229d7:	83 ec 0c             	sub    esp,0xc
c00229da:	51                   	push   ecx
c00229db:	6a 01                	push   0x1
c00229dd:	68 f4 27 02 c0       	push   0xc00227f4
c00229e2:	52                   	push   edx
c00229e3:	50                   	push   eax
c00229e4:	e8 19 bc fe ff       	call   c000e602 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00229e9:	83 c4 20             	add    esp,0x20
c00229ec:	89 c2                	mov    edx,eax
c00229ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229f2:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00229f8:	b8 00 00 00 00       	mov    eax,0x0
c00229fd:	5b                   	pop    ebx
c00229fe:	5e                   	pop    esi
c00229ff:	5f                   	pop    edi
c0022a00:	c3                   	ret    
c0022a01:	90                   	nop
c0022a02:	66 90                	xchg   ax,ax

c0022a04 <APICTimer::APICTimer()>:
c0022a04:	83 ec 0c             	sub    esp,0xc
c0022a07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a0b:	83 ec 08             	sub    esp,0x8
c0022a0e:	68 ec 7d 02 c0       	push   0xc0027dec
c0022a13:	50                   	push   eax
c0022a14:	e8 a3 e5 fe ff       	call   c0010fbc <Timer::Timer(char const*)>
c0022a19:	83 c4 10             	add    esp,0x10
c0022a1c:	ba 00 7e 02 c0       	mov    edx,0xc0027e00
c0022a21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a25:	89 10                	mov    DWORD PTR [eax],edx
c0022a27:	90                   	nop
c0022a28:	83 c4 0c             	add    esp,0xc
c0022a2b:	c3                   	ret    

c0022a2c <PIT::write(int)>:
c0022a2c:	83 ec 10             	sub    esp,0x10
c0022a2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022a33:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022a37:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022a3d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022a41:	a3 a4 ab 02 c0       	mov    ds:0xc002aba4,eax
c0022a46:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0022a4b:	99                   	cdq    
c0022a4c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0022a50:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022a54:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0022a5b:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0022a60:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0022a64:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0022a69:	ee                   	out    dx,al
c0022a6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022a6e:	0f b6 c0             	movzx  eax,al
c0022a71:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0022a78:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0022a7c:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0022a80:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0022a85:	ee                   	out    dx,al
c0022a86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022a8a:	c1 f8 08             	sar    eax,0x8
c0022a8d:	0f b6 c0             	movzx  eax,al
c0022a90:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0022a97:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0022a9b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0022a9f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0022aa4:	ee                   	out    dx,al
c0022aa5:	90                   	nop
c0022aa6:	83 c4 10             	add    esp,0x10
c0022aa9:	c3                   	ret    
c0022aaa:	66 90                	xchg   ax,ax

c0022aac <pitHandler(regs*, void*)>:
c0022aac:	83 ec 0c             	sub    esp,0xc
c0022aaf:	8b 0d a4 ab 02 c0    	mov    ecx,DWORD PTR ds:0xc002aba4
c0022ab5:	b8 10 27 00 00       	mov    eax,0x2710
c0022aba:	99                   	cdq    
c0022abb:	f7 f9                	idiv   ecx
c0022abd:	83 ec 0c             	sub    esp,0xc
c0022ac0:	50                   	push   eax
c0022ac1:	e8 87 e5 fe ff       	call   c001104d <timerHandler(unsigned int)>
c0022ac6:	83 c4 10             	add    esp,0x10
c0022ac9:	90                   	nop
c0022aca:	83 c4 0c             	add    esp,0xc
c0022acd:	c3                   	ret    
c0022ace:	66 90                	xchg   ax,ax

c0022ad0 <PIT::open(int, int, void*)>:
c0022ad0:	83 ec 0c             	sub    esp,0xc
c0022ad3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ad7:	8b 00                	mov    eax,DWORD PTR [eax]
c0022ad9:	83 c0 24             	add    eax,0x24
c0022adc:	8b 00                	mov    eax,DWORD PTR [eax]
c0022ade:	83 ec 08             	sub    esp,0x8
c0022ae1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022ae5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022ae9:	ff d0                	call   eax
c0022aeb:	83 c4 10             	add    esp,0x10
c0022aee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022af2:	83 ec 0c             	sub    esp,0xc
c0022af5:	6a 00                	push   0x0
c0022af7:	6a 01                	push   0x1
c0022af9:	68 ac 2a 02 c0       	push   0xc0022aac
c0022afe:	6a 00                	push   0x0
c0022b00:	50                   	push   eax
c0022b01:	e8 fc ba fe ff       	call   c000e602 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022b06:	83 c4 20             	add    esp,0x20
c0022b09:	89 c2                	mov    edx,eax
c0022b0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b0f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0022b15:	b8 00 00 00 00       	mov    eax,0x0
c0022b1a:	83 c4 0c             	add    esp,0xc
c0022b1d:	c3                   	ret    
c0022b1e:	66 90                	xchg   ax,ax

c0022b20 <PIT::close(int, int, void*)>:
c0022b20:	83 ec 0c             	sub    esp,0xc
c0022b23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b27:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0022b31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b35:	6a 01                	push   0x1
c0022b37:	68 ac 2a 02 c0       	push   0xc0022aac
c0022b3c:	6a 00                	push   0x0
c0022b3e:	50                   	push   eax
c0022b3f:	e8 08 bb fe ff       	call   c000e64c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0022b44:	83 c4 10             	add    esp,0x10
c0022b47:	b8 00 00 00 00       	mov    eax,0x0
c0022b4c:	83 c4 0c             	add    esp,0xc
c0022b4f:	c3                   	ret    

c0022b50 <PIT::PIT()>:
c0022b50:	83 ec 0c             	sub    esp,0xc
c0022b53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b57:	83 ec 08             	sub    esp,0x8
c0022b5a:	68 28 7e 02 c0       	push   0xc0027e28
c0022b5f:	50                   	push   eax
c0022b60:	e8 57 e4 fe ff       	call   c0010fbc <Timer::Timer(char const*)>
c0022b65:	83 c4 10             	add    esp,0x10
c0022b68:	ba 50 7e 02 c0       	mov    edx,0xc0027e50
c0022b6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b71:	89 10                	mov    DWORD PTR [eax],edx
c0022b73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b77:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022b7d:	0f b6 d0             	movzx  edx,al
c0022b80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b84:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0022b8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b8f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022b95:	0f b6 d0             	movzx  edx,al
c0022b98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b9c:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0022ba1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ba5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022bab:	8d 50 01             	lea    edx,[eax+0x1]
c0022bae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022bb2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022bb8:	0f b6 d0             	movzx  edx,al
c0022bbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bbf:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022bc3:	83 e1 3f             	and    ecx,0x3f
c0022bc6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022bca:	90                   	nop
c0022bcb:	83 c4 0c             	add    esp,0xc
c0022bce:	c3                   	ret    
c0022bcf:	90                   	nop

c0022bd0 <avxDetect>:
c0022bd0:	b8 01 00 00 00       	mov    eax,0x1
c0022bd5:	0f a2                	cpuid  
c0022bd7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c0022bdd:	74 15                	je     c0022bf4 <avxDetect.noAVX>
c0022bdf:	b8 01 00 00 00       	mov    eax,0x1
c0022be4:	0f a2                	cpuid  
c0022be6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c0022bec:	74 06                	je     c0022bf4 <avxDetect.noAVX>
c0022bee:	b8 01 00 00 00       	mov    eax,0x1
c0022bf3:	c3                   	ret    

c0022bf4 <avxDetect.noAVX>:
c0022bf4:	b8 00 00 00 00       	mov    eax,0x0
c0022bf9:	c3                   	ret    

c0022bfa <avxSave>:
c0022bfa:	53                   	push   ebx
c0022bfb:	52                   	push   edx
c0022bfc:	31 c0                	xor    eax,eax
c0022bfe:	48                   	dec    eax
c0022bff:	89 c2                	mov    edx,eax
c0022c01:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022c05:	0f ae 23             	xsave  [ebx]
c0022c08:	5a                   	pop    edx
c0022c09:	5b                   	pop    ebx
c0022c0a:	c3                   	ret    

c0022c0b <avxLoad>:
c0022c0b:	53                   	push   ebx
c0022c0c:	52                   	push   edx
c0022c0d:	31 c0                	xor    eax,eax
c0022c0f:	48                   	dec    eax
c0022c10:	89 c2                	mov    edx,eax
c0022c12:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022c16:	0f ae 2b             	xrstor [ebx]
c0022c19:	5a                   	pop    edx
c0022c1a:	5b                   	pop    ebx
c0022c1b:	c3                   	ret    

c0022c1c <avxInit>:
c0022c1c:	e8 67 00 00 00       	call   c0022c88 <sseInit>
c0022c21:	50                   	push   eax
c0022c22:	51                   	push   ecx
c0022c23:	0f 20 e0             	mov    eax,cr4
c0022c26:	0d 00 00 04 00       	or     eax,0x40000
c0022c2b:	0f 22 e0             	mov    cr4,eax
c0022c2e:	31 c9                	xor    ecx,ecx
c0022c30:	0f 01 d0             	xgetbv 
c0022c33:	0d 07 00 00 00       	or     eax,0x7
c0022c38:	0f 01 d1             	xsetbv 
c0022c3b:	59                   	pop    ecx
c0022c3c:	58                   	pop    eax
c0022c3d:	c3                   	ret    

c0022c3e <avxClose>:
c0022c3e:	c3                   	ret    

c0022c3f <wouldSheSayYes>:
c0022c3f:	c3                   	ret    
c0022c40:	49                   	dec    ecx
c0022c41:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0022c45:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0022c49:	75 20                	jne    c0022c6b <absolutelyNoChanceInHell+0xb>
c0022c4b:	4e                   	dec    esi
c0022c4c:	79 61                	jns    c0022caf <x87Detect+0x9>
c0022c4e:	68 2e 2e 2e 00       	push   0x2e2e2e
c0022c53:	66 90                	xchg   ax,ax
c0022c55:	66 90                	xchg   ax,ax
c0022c57:	66 90                	xchg   ax,ax
c0022c59:	66 90                	xchg   ax,ax
c0022c5b:	66 90                	xchg   ax,ax
c0022c5d:	66 90                	xchg   ax,ax
c0022c5f:	90                   	nop

c0022c60 <absolutelyNoChanceInHell>:
c0022c60:	b8 01 00 00 00       	mov    eax,0x1
c0022c65:	0f a2                	cpuid  
c0022c67:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0022c6d:	74 06                	je     c0022c75 <sseDetect.noSSE>
c0022c6f:	b8 01 00 00 00       	mov    eax,0x1
c0022c74:	c3                   	ret    

c0022c75 <sseDetect.noSSE>:
c0022c75:	31 c0                	xor    eax,eax
c0022c77:	c3                   	ret    

c0022c78 <sseSave>:
c0022c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c7c:	0f ae 00             	fxsave [eax]
c0022c7f:	c3                   	ret    

c0022c80 <sseLoad>:
c0022c80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c84:	0f ae 08             	fxrstor [eax]
c0022c87:	c3                   	ret    

c0022c88 <sseInit>:
c0022c88:	e8 42 00 00 00       	call   c0022ccf <x87Init>
c0022c8d:	0f 20 e0             	mov    eax,cr4
c0022c90:	66 0d 00 06          	or     ax,0x600
c0022c94:	0f 22 e0             	mov    cr4,eax
c0022c97:	c3                   	ret    

c0022c98 <sseClose>:
c0022c98:	c3                   	ret    
c0022c99:	66 90                	xchg   ax,ax
c0022c9b:	66 90                	xchg   ax,ax
c0022c9d:	66 90                	xchg   ax,ax
c0022c9f:	90                   	nop

c0022ca0 <value_37F>:
c0022ca0:	7f 03                	jg     c0022ca5 <value_37A+0x1>

c0022ca2 <value_37E>:
c0022ca2:	7e 03                	jle    c0022ca7 <x87Detect+0x1>

c0022ca4 <value_37A>:
c0022ca4:	7a 03                	jp     c0022ca9 <x87Detect+0x3>

c0022ca6 <x87Detect>:
c0022ca6:	b8 01 00 00 00       	mov    eax,0x1
c0022cab:	0f a2                	cpuid  
c0022cad:	f7 c2 01 00 00 00    	test   edx,0x1
c0022cb3:	74 06                	je     c0022cbb <x87Detect.nox87>
c0022cb5:	b8 01 00 00 00       	mov    eax,0x1
c0022cba:	c3                   	ret    

c0022cbb <x87Detect.nox87>:
c0022cbb:	b8 00 00 00 00       	mov    eax,0x0
c0022cc0:	c3                   	ret    

c0022cc1 <x87Save>:
c0022cc1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022cc5:	dd 30                	fnsave [eax]
c0022cc7:	c3                   	ret    

c0022cc8 <x87Load>:
c0022cc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ccc:	dd 20                	frstor [eax]
c0022cce:	c3                   	ret    

c0022ccf <x87Init>:
c0022ccf:	0f 20 c0             	mov    eax,cr0
c0022cd2:	66 25 fb ff          	and    ax,0xfffb
c0022cd6:	66 0d 22 00          	or     ax,0x22
c0022cda:	0f 22 c0             	mov    cr0,eax
c0022cdd:	db e3                	fninit 
c0022cdf:	0f 06                	clts   
c0022ce1:	d9 2d a4 2c 02 c0    	fldcw  WORD PTR ds:0xc0022ca4
c0022ce7:	c3                   	ret    

c0022ce8 <x87Close>:
c0022ce8:	c3                   	ret    
c0022ce9:	66 90                	xchg   ax,ax
c0022ceb:	90                   	nop

c0022cec <__do_global_ctors_aux>:
c0022cec:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c0022cf1:	83 f8 ff             	cmp    eax,0xffffffff
c0022cf4:	74 1a                	je     c0022d10 <__do_global_ctors_aux+0x24>
c0022cf6:	55                   	push   ebp
c0022cf7:	89 e5                	mov    ebp,esp
c0022cf9:	53                   	push   ebx
c0022cfa:	52                   	push   edx
c0022cfb:	bb 88 3e 02 c0       	mov    ebx,0xc0023e88
c0022d00:	ff d0                	call   eax
c0022d02:	83 eb 04             	sub    ebx,0x4
c0022d05:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022d07:	83 f8 ff             	cmp    eax,0xffffffff
c0022d0a:	75 f4                	jne    c0022d00 <__do_global_ctors_aux+0x14>
c0022d0c:	58                   	pop    eax
c0022d0d:	5b                   	pop    ebx
c0022d0e:	5d                   	pop    ebp
c0022d0f:	c3                   	ret    
c0022d10:	c3                   	ret    
c0022d11:	66 90                	xchg   ax,ax
c0022d13:	90                   	nop

c0022d14 <__divdi3>:
c0022d14:	55                   	push   ebp
c0022d15:	57                   	push   edi
c0022d16:	56                   	push   esi
c0022d17:	53                   	push   ebx
c0022d18:	83 ec 1c             	sub    esp,0x1c
c0022d1b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0022d1f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022d23:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0022d26:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0022d2a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022d2e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022d32:	85 db                	test   ebx,ebx
c0022d34:	0f 88 8e 00 00 00    	js     c0022dc8 <__divdi3+0xb4>
c0022d3a:	89 dd                	mov    ebp,ebx
c0022d3c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0022d44:	89 d3                	mov    ebx,edx
c0022d46:	85 d2                	test   edx,edx
c0022d48:	79 0d                	jns    c0022d57 <__divdi3+0x43>
c0022d4a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0022d4e:	f7 d8                	neg    eax
c0022d50:	83 d2 00             	adc    edx,0x0
c0022d53:	f7 da                	neg    edx
c0022d55:	89 d3                	mov    ebx,edx
c0022d57:	89 c7                	mov    edi,eax
c0022d59:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0022d5c:	85 db                	test   ebx,ebx
c0022d5e:	75 48                	jne    c0022da8 <__divdi3+0x94>
c0022d60:	39 ef                	cmp    edi,ebp
c0022d62:	76 24                	jbe    c0022d88 <__divdi3+0x74>
c0022d64:	89 ea                	mov    edx,ebp
c0022d66:	f7 f7                	div    edi
c0022d68:	89 c1                	mov    ecx,eax
c0022d6a:	31 f6                	xor    esi,esi
c0022d6c:	89 c8                	mov    eax,ecx
c0022d6e:	89 f2                	mov    edx,esi
c0022d70:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022d74:	85 c9                	test   ecx,ecx
c0022d76:	74 07                	je     c0022d7f <__divdi3+0x6b>
c0022d78:	f7 d8                	neg    eax
c0022d7a:	83 d2 00             	adc    edx,0x0
c0022d7d:	f7 da                	neg    edx
c0022d7f:	83 c4 1c             	add    esp,0x1c
c0022d82:	5b                   	pop    ebx
c0022d83:	5e                   	pop    esi
c0022d84:	5f                   	pop    edi
c0022d85:	5d                   	pop    ebp
c0022d86:	c3                   	ret    
c0022d87:	90                   	nop
c0022d88:	85 ff                	test   edi,edi
c0022d8a:	75 0b                	jne    c0022d97 <__divdi3+0x83>
c0022d8c:	b8 01 00 00 00       	mov    eax,0x1
c0022d91:	31 d2                	xor    edx,edx
c0022d93:	f7 f3                	div    ebx
c0022d95:	89 c7                	mov    edi,eax
c0022d97:	31 d2                	xor    edx,edx
c0022d99:	89 e8                	mov    eax,ebp
c0022d9b:	f7 f7                	div    edi
c0022d9d:	89 c6                	mov    esi,eax
c0022d9f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0022da2:	f7 f7                	div    edi
c0022da4:	89 c1                	mov    ecx,eax
c0022da6:	eb c4                	jmp    c0022d6c <__divdi3+0x58>
c0022da8:	39 eb                	cmp    ebx,ebp
c0022daa:	77 3c                	ja     c0022de8 <__divdi3+0xd4>
c0022dac:	0f bd f3             	bsr    esi,ebx
c0022daf:	83 f6 1f             	xor    esi,0x1f
c0022db2:	75 40                	jne    c0022df4 <__divdi3+0xe0>
c0022db4:	39 eb                	cmp    ebx,ebp
c0022db6:	72 09                	jb     c0022dc1 <__divdi3+0xad>
c0022db8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0022dbb:	0f 87 97 00 00 00    	ja     c0022e58 <__divdi3+0x144>
c0022dc1:	b9 01 00 00 00       	mov    ecx,0x1
c0022dc6:	eb a4                	jmp    c0022d6c <__divdi3+0x58>
c0022dc8:	f7 d9                	neg    ecx
c0022dca:	83 d3 00             	adc    ebx,0x0
c0022dcd:	f7 db                	neg    ebx
c0022dcf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0022dd2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0022dd6:	89 dd                	mov    ebp,ebx
c0022dd8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0022de0:	e9 5f ff ff ff       	jmp    c0022d44 <__divdi3+0x30>
c0022de5:	8d 76 00             	lea    esi,[esi+0x0]
c0022de8:	31 f6                	xor    esi,esi
c0022dea:	31 c9                	xor    ecx,ecx
c0022dec:	e9 7b ff ff ff       	jmp    c0022d6c <__divdi3+0x58>
c0022df1:	8d 76 00             	lea    esi,[esi+0x0]
c0022df4:	b8 20 00 00 00       	mov    eax,0x20
c0022df9:	29 f0                	sub    eax,esi
c0022dfb:	89 f1                	mov    ecx,esi
c0022dfd:	d3 e3                	shl    ebx,cl
c0022dff:	89 fa                	mov    edx,edi
c0022e01:	88 c1                	mov    cl,al
c0022e03:	d3 ea                	shr    edx,cl
c0022e05:	09 da                	or     edx,ebx
c0022e07:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022e0b:	89 f1                	mov    ecx,esi
c0022e0d:	d3 e7                	shl    edi,cl
c0022e0f:	89 eb                	mov    ebx,ebp
c0022e11:	88 c1                	mov    cl,al
c0022e13:	d3 eb                	shr    ebx,cl
c0022e15:	89 f1                	mov    ecx,esi
c0022e17:	d3 e5                	shl    ebp,cl
c0022e19:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0022e1c:	88 c1                	mov    cl,al
c0022e1e:	d3 ea                	shr    edx,cl
c0022e20:	09 d5                	or     ebp,edx
c0022e22:	89 e8                	mov    eax,ebp
c0022e24:	89 da                	mov    edx,ebx
c0022e26:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0022e2a:	89 d3                	mov    ebx,edx
c0022e2c:	89 c5                	mov    ebp,eax
c0022e2e:	f7 e7                	mul    edi
c0022e30:	39 d3                	cmp    ebx,edx
c0022e32:	72 18                	jb     c0022e4c <__divdi3+0x138>
c0022e34:	74 0a                	je     c0022e40 <__divdi3+0x12c>
c0022e36:	89 e9                	mov    ecx,ebp
c0022e38:	31 f6                	xor    esi,esi
c0022e3a:	e9 2d ff ff ff       	jmp    c0022d6c <__divdi3+0x58>
c0022e3f:	90                   	nop
c0022e40:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0022e43:	89 f1                	mov    ecx,esi
c0022e45:	d3 e7                	shl    edi,cl
c0022e47:	39 c7                	cmp    edi,eax
c0022e49:	73 eb                	jae    c0022e36 <__divdi3+0x122>
c0022e4b:	90                   	nop
c0022e4c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0022e4f:	31 f6                	xor    esi,esi
c0022e51:	e9 16 ff ff ff       	jmp    c0022d6c <__divdi3+0x58>
c0022e56:	66 90                	xchg   ax,ax
c0022e58:	31 c9                	xor    ecx,ecx
c0022e5a:	e9 0d ff ff ff       	jmp    c0022d6c <__divdi3+0x58>
c0022e5f:	90                   	nop

c0022e60 <__moddi3>:
c0022e60:	55                   	push   ebp
c0022e61:	57                   	push   edi
c0022e62:	56                   	push   esi
c0022e63:	53                   	push   ebx
c0022e64:	83 ec 2c             	sub    esp,0x2c
c0022e67:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0022e6b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0022e6f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022e73:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0022e77:	85 db                	test   ebx,ebx
c0022e79:	0f 88 85 00 00 00    	js     c0022f04 <__moddi3+0xa4>
c0022e7f:	89 de                	mov    esi,ebx
c0022e81:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0022e89:	89 d7                	mov    edi,edx
c0022e8b:	85 d2                	test   edx,edx
c0022e8d:	79 09                	jns    c0022e98 <__moddi3+0x38>
c0022e8f:	f7 d8                	neg    eax
c0022e91:	83 d2 00             	adc    edx,0x0
c0022e94:	f7 da                	neg    edx
c0022e96:	89 d7                	mov    edi,edx
c0022e98:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022e9c:	89 cd                	mov    ebp,ecx
c0022e9e:	85 ff                	test   edi,edi
c0022ea0:	75 52                	jne    c0022ef4 <__moddi3+0x94>
c0022ea2:	89 c3                	mov    ebx,eax
c0022ea4:	39 f0                	cmp    eax,esi
c0022ea6:	76 24                	jbe    c0022ecc <__moddi3+0x6c>
c0022ea8:	89 c8                	mov    eax,ecx
c0022eaa:	89 f2                	mov    edx,esi
c0022eac:	f7 f3                	div    ebx
c0022eae:	89 d6                	mov    esi,edx
c0022eb0:	89 f0                	mov    eax,esi
c0022eb2:	31 d2                	xor    edx,edx
c0022eb4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022eb8:	85 c9                	test   ecx,ecx
c0022eba:	74 07                	je     c0022ec3 <__moddi3+0x63>
c0022ebc:	f7 d8                	neg    eax
c0022ebe:	83 d2 00             	adc    edx,0x0
c0022ec1:	f7 da                	neg    edx
c0022ec3:	83 c4 2c             	add    esp,0x2c
c0022ec6:	5b                   	pop    ebx
c0022ec7:	5e                   	pop    esi
c0022ec8:	5f                   	pop    edi
c0022ec9:	5d                   	pop    ebp
c0022eca:	c3                   	ret    
c0022ecb:	90                   	nop
c0022ecc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022ed0:	85 db                	test   ebx,ebx
c0022ed2:	75 0d                	jne    c0022ee1 <__moddi3+0x81>
c0022ed4:	b8 01 00 00 00       	mov    eax,0x1
c0022ed9:	31 d2                	xor    edx,edx
c0022edb:	f7 f7                	div    edi
c0022edd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022ee1:	89 f0                	mov    eax,esi
c0022ee3:	31 d2                	xor    edx,edx
c0022ee5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022ee9:	f7 f7                	div    edi
c0022eeb:	89 e8                	mov    eax,ebp
c0022eed:	f7 f7                	div    edi
c0022eef:	89 d6                	mov    esi,edx
c0022ef1:	eb bd                	jmp    c0022eb0 <__moddi3+0x50>
c0022ef3:	90                   	nop
c0022ef4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0022ef8:	39 f7                	cmp    edi,esi
c0022efa:	76 20                	jbe    c0022f1c <__moddi3+0xbc>
c0022efc:	89 c8                	mov    eax,ecx
c0022efe:	89 f2                	mov    edx,esi
c0022f00:	eb b2                	jmp    c0022eb4 <__moddi3+0x54>
c0022f02:	66 90                	xchg   ax,ax
c0022f04:	f7 d9                	neg    ecx
c0022f06:	83 d3 00             	adc    ebx,0x0
c0022f09:	f7 db                	neg    ebx
c0022f0b:	89 de                	mov    esi,ebx
c0022f0d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0022f15:	e9 6f ff ff ff       	jmp    c0022e89 <__moddi3+0x29>
c0022f1a:	66 90                	xchg   ax,ax
c0022f1c:	0f bd c7             	bsr    eax,edi
c0022f1f:	83 f0 1f             	xor    eax,0x1f
c0022f22:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022f26:	75 24                	jne    c0022f4c <__moddi3+0xec>
c0022f28:	39 f7                	cmp    edi,esi
c0022f2a:	72 06                	jb     c0022f32 <__moddi3+0xd2>
c0022f2c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0022f30:	77 0c                	ja     c0022f3e <__moddi3+0xde>
c0022f32:	89 e9                	mov    ecx,ebp
c0022f34:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0022f38:	19 fe                	sbb    esi,edi
c0022f3a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0022f3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022f42:	89 f2                	mov    edx,esi
c0022f44:	e9 6b ff ff ff       	jmp    c0022eb4 <__moddi3+0x54>
c0022f49:	8d 76 00             	lea    esi,[esi+0x0]
c0022f4c:	b8 20 00 00 00       	mov    eax,0x20
c0022f51:	89 c2                	mov    edx,eax
c0022f53:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0022f57:	29 da                	sub    edx,ebx
c0022f59:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0022f5d:	88 d9                	mov    cl,bl
c0022f5f:	d3 e7                	shl    edi,cl
c0022f61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022f65:	88 d1                	mov    cl,dl
c0022f67:	d3 e8                	shr    eax,cl
c0022f69:	09 c7                	or     edi,eax
c0022f6b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0022f6f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022f73:	89 d8                	mov    eax,ebx
c0022f75:	88 d9                	mov    cl,bl
c0022f77:	d3 e7                	shl    edi,cl
c0022f79:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022f7d:	89 f3                	mov    ebx,esi
c0022f7f:	88 d1                	mov    cl,dl
c0022f81:	d3 eb                	shr    ebx,cl
c0022f83:	89 c7                	mov    edi,eax
c0022f85:	88 c1                	mov    cl,al
c0022f87:	d3 e6                	shl    esi,cl
c0022f89:	89 e8                	mov    eax,ebp
c0022f8b:	88 d1                	mov    cl,dl
c0022f8d:	d3 e8                	shr    eax,cl
c0022f8f:	09 f0                	or     eax,esi
c0022f91:	89 f9                	mov    ecx,edi
c0022f93:	d3 e5                	shl    ebp,cl
c0022f95:	89 da                	mov    edx,ebx
c0022f97:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0022f9b:	89 d3                	mov    ebx,edx
c0022f9d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0022fa1:	89 c6                	mov    esi,eax
c0022fa3:	89 d1                	mov    ecx,edx
c0022fa5:	39 d3                	cmp    ebx,edx
c0022fa7:	72 27                	jb     c0022fd0 <__moddi3+0x170>
c0022fa9:	74 21                	je     c0022fcc <__moddi3+0x16c>
c0022fab:	29 f5                	sub    ebp,esi
c0022fad:	19 cb                	sbb    ebx,ecx
c0022faf:	89 de                	mov    esi,ebx
c0022fb1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0022fb5:	d3 e6                	shl    esi,cl
c0022fb7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0022fbb:	89 f9                	mov    ecx,edi
c0022fbd:	d3 ed                	shr    ebp,cl
c0022fbf:	09 ee                	or     esi,ebp
c0022fc1:	89 f0                	mov    eax,esi
c0022fc3:	d3 eb                	shr    ebx,cl
c0022fc5:	89 da                	mov    edx,ebx
c0022fc7:	e9 e8 fe ff ff       	jmp    c0022eb4 <__moddi3+0x54>
c0022fcc:	39 c5                	cmp    ebp,eax
c0022fce:	73 db                	jae    c0022fab <__moddi3+0x14b>
c0022fd0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0022fd4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0022fd8:	89 d1                	mov    ecx,edx
c0022fda:	89 c6                	mov    esi,eax
c0022fdc:	eb cd                	jmp    c0022fab <__moddi3+0x14b>
c0022fde:	66 90                	xchg   ax,ax

c0022fe0 <__udivdi3>:
c0022fe0:	55                   	push   ebp
c0022fe1:	57                   	push   edi
c0022fe2:	56                   	push   esi
c0022fe3:	53                   	push   ebx
c0022fe4:	83 ec 1c             	sub    esp,0x1c
c0022fe7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0022feb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0022fef:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0022ff3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022ff7:	85 d2                	test   edx,edx
c0022ff9:	75 41                	jne    c002303c <__udivdi3+0x5c>
c0022ffb:	39 f7                	cmp    edi,esi
c0022ffd:	76 15                	jbe    c0023014 <__udivdi3+0x34>
c0022fff:	89 e8                	mov    eax,ebp
c0023001:	89 f2                	mov    edx,esi
c0023003:	f7 f7                	div    edi
c0023005:	31 db                	xor    ebx,ebx
c0023007:	89 da                	mov    edx,ebx
c0023009:	83 c4 1c             	add    esp,0x1c
c002300c:	5b                   	pop    ebx
c002300d:	5e                   	pop    esi
c002300e:	5f                   	pop    edi
c002300f:	5d                   	pop    ebp
c0023010:	c3                   	ret    
c0023011:	8d 76 00             	lea    esi,[esi+0x0]
c0023014:	89 f9                	mov    ecx,edi
c0023016:	85 ff                	test   edi,edi
c0023018:	75 0b                	jne    c0023025 <__udivdi3+0x45>
c002301a:	b8 01 00 00 00       	mov    eax,0x1
c002301f:	31 d2                	xor    edx,edx
c0023021:	f7 f7                	div    edi
c0023023:	89 c1                	mov    ecx,eax
c0023025:	31 d2                	xor    edx,edx
c0023027:	89 f0                	mov    eax,esi
c0023029:	f7 f1                	div    ecx
c002302b:	89 c3                	mov    ebx,eax
c002302d:	89 e8                	mov    eax,ebp
c002302f:	f7 f1                	div    ecx
c0023031:	89 da                	mov    edx,ebx
c0023033:	83 c4 1c             	add    esp,0x1c
c0023036:	5b                   	pop    ebx
c0023037:	5e                   	pop    esi
c0023038:	5f                   	pop    edi
c0023039:	5d                   	pop    ebp
c002303a:	c3                   	ret    
c002303b:	90                   	nop
c002303c:	39 f2                	cmp    edx,esi
c002303e:	77 1c                	ja     c002305c <__udivdi3+0x7c>
c0023040:	0f bd da             	bsr    ebx,edx
c0023043:	83 f3 1f             	xor    ebx,0x1f
c0023046:	75 24                	jne    c002306c <__udivdi3+0x8c>
c0023048:	39 f2                	cmp    edx,esi
c002304a:	72 08                	jb     c0023054 <__udivdi3+0x74>
c002304c:	39 ef                	cmp    edi,ebp
c002304e:	0f 87 84 00 00 00    	ja     c00230d8 <__udivdi3+0xf8>
c0023054:	b8 01 00 00 00       	mov    eax,0x1
c0023059:	eb ac                	jmp    c0023007 <__udivdi3+0x27>
c002305b:	90                   	nop
c002305c:	31 db                	xor    ebx,ebx
c002305e:	31 c0                	xor    eax,eax
c0023060:	89 da                	mov    edx,ebx
c0023062:	83 c4 1c             	add    esp,0x1c
c0023065:	5b                   	pop    ebx
c0023066:	5e                   	pop    esi
c0023067:	5f                   	pop    edi
c0023068:	5d                   	pop    ebp
c0023069:	c3                   	ret    
c002306a:	66 90                	xchg   ax,ax
c002306c:	b8 20 00 00 00       	mov    eax,0x20
c0023071:	29 d8                	sub    eax,ebx
c0023073:	88 d9                	mov    cl,bl
c0023075:	d3 e2                	shl    edx,cl
c0023077:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002307b:	89 fa                	mov    edx,edi
c002307d:	88 c1                	mov    cl,al
c002307f:	d3 ea                	shr    edx,cl
c0023081:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023085:	09 d1                	or     ecx,edx
c0023087:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002308b:	88 d9                	mov    cl,bl
c002308d:	d3 e7                	shl    edi,cl
c002308f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0023093:	89 f7                	mov    edi,esi
c0023095:	88 c1                	mov    cl,al
c0023097:	d3 ef                	shr    edi,cl
c0023099:	88 d9                	mov    cl,bl
c002309b:	d3 e6                	shl    esi,cl
c002309d:	89 ea                	mov    edx,ebp
c002309f:	88 c1                	mov    cl,al
c00230a1:	d3 ea                	shr    edx,cl
c00230a3:	09 d6                	or     esi,edx
c00230a5:	89 f0                	mov    eax,esi
c00230a7:	89 fa                	mov    edx,edi
c00230a9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00230ad:	89 d7                	mov    edi,edx
c00230af:	89 c6                	mov    esi,eax
c00230b1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00230b5:	39 d7                	cmp    edi,edx
c00230b7:	72 13                	jb     c00230cc <__udivdi3+0xec>
c00230b9:	74 09                	je     c00230c4 <__udivdi3+0xe4>
c00230bb:	89 f0                	mov    eax,esi
c00230bd:	31 db                	xor    ebx,ebx
c00230bf:	e9 43 ff ff ff       	jmp    c0023007 <__udivdi3+0x27>
c00230c4:	88 d9                	mov    cl,bl
c00230c6:	d3 e5                	shl    ebp,cl
c00230c8:	39 c5                	cmp    ebp,eax
c00230ca:	73 ef                	jae    c00230bb <__udivdi3+0xdb>
c00230cc:	8d 46 ff             	lea    eax,[esi-0x1]
c00230cf:	31 db                	xor    ebx,ebx
c00230d1:	e9 31 ff ff ff       	jmp    c0023007 <__udivdi3+0x27>
c00230d6:	66 90                	xchg   ax,ax
c00230d8:	31 c0                	xor    eax,eax
c00230da:	e9 28 ff ff ff       	jmp    c0023007 <__udivdi3+0x27>
c00230df:	90                   	nop

c00230e0 <__umoddi3>:
c00230e0:	55                   	push   ebp
c00230e1:	57                   	push   edi
c00230e2:	56                   	push   esi
c00230e3:	53                   	push   ebx
c00230e4:	83 ec 1c             	sub    esp,0x1c
c00230e7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00230eb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00230ef:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00230f3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00230f7:	89 da                	mov    edx,ebx
c00230f9:	85 c0                	test   eax,eax
c00230fb:	75 37                	jne    c0023134 <__umoddi3+0x54>
c00230fd:	39 df                	cmp    edi,ebx
c00230ff:	76 13                	jbe    c0023114 <__umoddi3+0x34>
c0023101:	89 f0                	mov    eax,esi
c0023103:	f7 f7                	div    edi
c0023105:	89 d0                	mov    eax,edx
c0023107:	31 d2                	xor    edx,edx
c0023109:	83 c4 1c             	add    esp,0x1c
c002310c:	5b                   	pop    ebx
c002310d:	5e                   	pop    esi
c002310e:	5f                   	pop    edi
c002310f:	5d                   	pop    ebp
c0023110:	c3                   	ret    
c0023111:	8d 76 00             	lea    esi,[esi+0x0]
c0023114:	89 fd                	mov    ebp,edi
c0023116:	85 ff                	test   edi,edi
c0023118:	75 0b                	jne    c0023125 <__umoddi3+0x45>
c002311a:	b8 01 00 00 00       	mov    eax,0x1
c002311f:	31 d2                	xor    edx,edx
c0023121:	f7 f7                	div    edi
c0023123:	89 c5                	mov    ebp,eax
c0023125:	89 d8                	mov    eax,ebx
c0023127:	31 d2                	xor    edx,edx
c0023129:	f7 f5                	div    ebp
c002312b:	89 f0                	mov    eax,esi
c002312d:	f7 f5                	div    ebp
c002312f:	89 d0                	mov    eax,edx
c0023131:	eb d4                	jmp    c0023107 <__umoddi3+0x27>
c0023133:	90                   	nop
c0023134:	89 f1                	mov    ecx,esi
c0023136:	39 d8                	cmp    eax,ebx
c0023138:	76 0a                	jbe    c0023144 <__umoddi3+0x64>
c002313a:	89 f0                	mov    eax,esi
c002313c:	83 c4 1c             	add    esp,0x1c
c002313f:	5b                   	pop    ebx
c0023140:	5e                   	pop    esi
c0023141:	5f                   	pop    edi
c0023142:	5d                   	pop    ebp
c0023143:	c3                   	ret    
c0023144:	0f bd e8             	bsr    ebp,eax
c0023147:	83 f5 1f             	xor    ebp,0x1f
c002314a:	75 1c                	jne    c0023168 <__umoddi3+0x88>
c002314c:	39 d8                	cmp    eax,ebx
c002314e:	72 04                	jb     c0023154 <__umoddi3+0x74>
c0023150:	39 f7                	cmp    edi,esi
c0023152:	77 08                	ja     c002315c <__umoddi3+0x7c>
c0023154:	89 da                	mov    edx,ebx
c0023156:	29 fe                	sub    esi,edi
c0023158:	19 c2                	sbb    edx,eax
c002315a:	89 f1                	mov    ecx,esi
c002315c:	89 c8                	mov    eax,ecx
c002315e:	83 c4 1c             	add    esp,0x1c
c0023161:	5b                   	pop    ebx
c0023162:	5e                   	pop    esi
c0023163:	5f                   	pop    edi
c0023164:	5d                   	pop    ebp
c0023165:	c3                   	ret    
c0023166:	66 90                	xchg   ax,ax
c0023168:	ba 20 00 00 00       	mov    edx,0x20
c002316d:	29 ea                	sub    edx,ebp
c002316f:	89 e9                	mov    ecx,ebp
c0023171:	d3 e0                	shl    eax,cl
c0023173:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023177:	89 f8                	mov    eax,edi
c0023179:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002317d:	88 d1                	mov    cl,dl
c002317f:	d3 e8                	shr    eax,cl
c0023181:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023185:	09 c1                	or     ecx,eax
c0023187:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002318b:	89 e9                	mov    ecx,ebp
c002318d:	d3 e7                	shl    edi,cl
c002318f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0023193:	89 d8                	mov    eax,ebx
c0023195:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023199:	88 d1                	mov    cl,dl
c002319b:	d3 e8                	shr    eax,cl
c002319d:	89 c7                	mov    edi,eax
c002319f:	89 e9                	mov    ecx,ebp
c00231a1:	d3 e3                	shl    ebx,cl
c00231a3:	89 f0                	mov    eax,esi
c00231a5:	88 d1                	mov    cl,dl
c00231a7:	d3 e8                	shr    eax,cl
c00231a9:	09 d8                	or     eax,ebx
c00231ab:	89 e9                	mov    ecx,ebp
c00231ad:	d3 e6                	shl    esi,cl
c00231af:	89 f3                	mov    ebx,esi
c00231b1:	89 fa                	mov    edx,edi
c00231b3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00231b7:	89 d1                	mov    ecx,edx
c00231b9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00231bd:	89 c6                	mov    esi,eax
c00231bf:	89 d7                	mov    edi,edx
c00231c1:	39 d1                	cmp    ecx,edx
c00231c3:	72 27                	jb     c00231ec <__umoddi3+0x10c>
c00231c5:	74 21                	je     c00231e8 <__umoddi3+0x108>
c00231c7:	89 ca                	mov    edx,ecx
c00231c9:	29 f3                	sub    ebx,esi
c00231cb:	19 fa                	sbb    edx,edi
c00231cd:	89 d0                	mov    eax,edx
c00231cf:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00231d3:	d3 e0                	shl    eax,cl
c00231d5:	89 e9                	mov    ecx,ebp
c00231d7:	d3 eb                	shr    ebx,cl
c00231d9:	09 d8                	or     eax,ebx
c00231db:	d3 ea                	shr    edx,cl
c00231dd:	83 c4 1c             	add    esp,0x1c
c00231e0:	5b                   	pop    ebx
c00231e1:	5e                   	pop    esi
c00231e2:	5f                   	pop    edi
c00231e3:	5d                   	pop    ebp
c00231e4:	c3                   	ret    
c00231e5:	8d 76 00             	lea    esi,[esi+0x0]
c00231e8:	39 c3                	cmp    ebx,eax
c00231ea:	73 db                	jae    c00231c7 <__umoddi3+0xe7>
c00231ec:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00231f0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00231f4:	89 d7                	mov    edi,edx
c00231f6:	89 c6                	mov    esi,eax
c00231f8:	eb cd                	jmp    c00231c7 <__umoddi3+0xe7>

Disassembly of section .init:

c00231fa <_init>:
c00231fa:	55                   	push   ebp
c00231fb:	89 e5                	mov    ebp,esp
c00231fd:	e8 16 cf fd ff       	call   c0000118 <frame_dummy>
c0023202:	e8 e5 fa ff ff       	call   c0022cec <__do_global_ctors_aux>
c0023207:	5d                   	pop    ebp
c0023208:	c3                   	ret    

Disassembly of section .fini:

c0023209 <_fini>:
c0023209:	55                   	push   ebp
c002320a:	89 e5                	mov    ebp,esp
c002320c:	e8 97 ce fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0023211:	5d                   	pop    ebp
c0023212:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0023214 <Computer::~Computer()>:
c0023214:	83 ec 0c             	sub    esp,0xc
c0023217:	ba 80 49 02 c0       	mov    edx,0xc0024980
c002321c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023220:	89 10                	mov    DWORD PTR [eax],edx
c0023222:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023226:	83 ec 0c             	sub    esp,0xc
c0023229:	50                   	push   eax
c002322a:	e8 29 b3 fe ff       	call   c000e558 <Device::~Device()>
c002322f:	83 c4 10             	add    esp,0x10
c0023232:	90                   	nop
c0023233:	83 c4 0c             	add    esp,0xc
c0023236:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0023238 <Computer::~Computer()>:
c0023238:	83 ec 0c             	sub    esp,0xc
c002323b:	83 ec 0c             	sub    esp,0xc
c002323e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023242:	e8 cd ff ff ff       	call   c0023214 <Computer::~Computer()>
c0023247:	83 c4 10             	add    esp,0x10
c002324a:	83 ec 08             	sub    esp,0x8
c002324d:	68 ec 01 00 00       	push   0x1ec
c0023252:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023256:	e8 db 9d fe ff       	call   c000d036 <operator delete(void*, unsigned long)>
c002325b:	83 c4 10             	add    esp,0x10
c002325e:	83 c4 0c             	add    esp,0xc
c0023261:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0023262 <idleCommon()>:
c0023262:	83 ec 0c             	sub    esp,0xc
c0023265:	fa                   	cli    
c0023266:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c002326c:	e8 e3 5c ff ff       	call   c0018f54 <schedule()>
c0023271:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c0023276:	48                   	dec    eax
c0023277:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c002327c:	75 01                	jne    c002327f <idleCommon()+0x1d>
c002327e:	fb                   	sti    
c002327f:	83 c4 0c             	add    esp,0xc
c0023282:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0023284 <LinkedList<UnixFile>::~LinkedList()>:
c0023284:	90                   	nop
c0023285:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0023286 <LinkedList<UnixFile>::LinkedList()>:
c0023286:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002328a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023290:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023294:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002329b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002329f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00232a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00232aa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00232b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00232b4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00232bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00232bf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00232c6:	90                   	nop
c00232c7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00232c8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00232c8:	83 ec 0c             	sub    esp,0xc
c00232cb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00232d0:	75 10                	jne    c00232e2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00232d2:	83 ec 0c             	sub    esp,0xc
c00232d5:	68 50 4d 02 c0       	push   0xc0024d50
c00232da:	e8 1a 1f ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c00232df:	83 c4 10             	add    esp,0x10
c00232e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00232e8:	85 c0                	test   eax,eax
c00232ea:	74 34                	je     c0023320 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00232ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00232f3:	85 c0                	test   eax,eax
c00232f5:	74 29                	je     c0023320 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00232f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232fb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00232fe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023302:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0023305:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023309:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002330d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0023310:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023314:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023317:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002331e:	eb 65                	jmp    c0023385 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0023320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023324:	8b 00                	mov    eax,DWORD PTR [eax]
c0023326:	85 c0                	test   eax,eax
c0023328:	75 4b                	jne    c0023375 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002332a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002332e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023331:	85 c0                	test   eax,eax
c0023333:	75 40                	jne    c0023375 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0023335:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023339:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002333d:	89 10                	mov    DWORD PTR [eax],edx
c002333f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023343:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023347:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002334a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002334e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023351:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0023358:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002335c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002335f:	85 c0                	test   eax,eax
c0023361:	74 22                	je     c0023385 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0023363:	83 ec 0c             	sub    esp,0xc
c0023366:	68 72 4d 02 c0       	push   0xc0024d72
c002336b:	e8 89 1e ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c0023370:	83 c4 10             	add    esp,0x10
c0023373:	eb 10                	jmp    c0023385 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0023375:	83 ec 0c             	sub    esp,0xc
c0023378:	68 7c 4d 02 c0       	push   0xc0024d7c
c002337d:	e8 77 1e ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c0023382:	83 c4 10             	add    esp,0x10
c0023385:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023389:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002338c:	8d 50 01             	lea    edx,[eax+0x1]
c002338f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023393:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0023396:	90                   	nop
c0023397:	83 c4 0c             	add    esp,0xc
c002339a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c002339c <LinkedList<UnixFile>::getFirstElement()>:
c002339c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00233a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00233a2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00233a4 <LinkedList<UnixFile>::removeFirst()>:
c00233a4:	83 ec 0c             	sub    esp,0xc
c00233a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00233ad:	85 c0                	test   eax,eax
c00233af:	75 12                	jne    c00233c3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c00233b1:	83 ec 0c             	sub    esp,0xc
c00233b4:	68 88 4d 02 c0       	push   0xc0024d88
c00233b9:	e8 3b 1e ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c00233be:	83 c4 10             	add    esp,0x10
c00233c1:	eb 7e                	jmp    c0023441 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00233c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233c7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00233ca:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00233cd:	85 c0                	test   eax,eax
c00233cf:	74 10                	je     c00233e1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00233d1:	83 ec 0c             	sub    esp,0xc
c00233d4:	68 d3 4d 02 c0       	push   0xc0024dd3
c00233d9:	e8 1b 1e ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c00233de:	83 c4 10             	add    esp,0x10
c00233e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00233e7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00233ea:	85 c0                	test   eax,eax
c00233ec:	75 33                	jne    c0023421 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00233ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233f2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00233f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233fc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0023403:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023407:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002340a:	83 f8 01             	cmp    eax,0x1
c002340d:	74 21                	je     c0023430 <LinkedList<UnixFile>::removeFirst()+0x8c>
c002340f:	83 ec 0c             	sub    esp,0xc
c0023412:	68 ac 4d 02 c0       	push   0xc0024dac
c0023417:	e8 dd 1d ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c002341c:	83 c4 10             	add    esp,0x10
c002341f:	eb 0f                	jmp    c0023430 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0023421:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023425:	8b 00                	mov    eax,DWORD PTR [eax]
c0023427:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002342a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002342e:	89 10                	mov    DWORD PTR [eax],edx
c0023430:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023434:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023437:	8d 50 ff             	lea    edx,[eax-0x1]
c002343a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002343e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0023441:	83 c4 0c             	add    esp,0xc
c0023444:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0023446 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0023446:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002344a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002344d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c002344e <DriverlessDevice::~DriverlessDevice()>:
c002344e:	ba fc 55 02 c0       	mov    edx,0xc00255fc
c0023453:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023457:	89 10                	mov    DWORD PTR [eax],edx
c0023459:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002345d:	50                   	push   eax
c002345e:	e8 f5 b0 fe ff       	call   c000e558 <Device::~Device()>
c0023463:	83 c4 04             	add    esp,0x4
c0023466:	90                   	nop
c0023467:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0023468 <DriverlessDevice::~DriverlessDevice()>:
c0023468:	83 ec 0c             	sub    esp,0xc
c002346b:	83 ec 0c             	sub    esp,0xc
c002346e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023472:	e8 d7 ff ff ff       	call   c002344e <DriverlessDevice::~DriverlessDevice()>
c0023477:	83 c4 10             	add    esp,0x10
c002347a:	83 ec 08             	sub    esp,0x8
c002347d:	68 58 01 00 00       	push   0x158
c0023482:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023486:	e8 ab 9b fe ff       	call   c000d036 <operator delete(void*, unsigned long)>
c002348b:	83 c4 10             	add    esp,0x10
c002348e:	83 c4 0c             	add    esp,0xc
c0023491:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0023492 <LinkedList<Device>::addElement(Device*)>:
c0023492:	83 ec 0c             	sub    esp,0xc
c0023495:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002349a:	75 10                	jne    c00234ac <LinkedList<Device>::addElement(Device*)+0x1a>
c002349c:	83 ec 0c             	sub    esp,0xc
c002349f:	68 50 4d 02 c0       	push   0xc0024d50
c00234a4:	e8 50 1d ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c00234a9:	83 c4 10             	add    esp,0x10
c00234ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00234b2:	85 c0                	test   eax,eax
c00234b4:	74 3a                	je     c00234f0 <LinkedList<Device>::addElement(Device*)+0x5e>
c00234b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00234bd:	85 c0                	test   eax,eax
c00234bf:	74 2f                	je     c00234f0 <LinkedList<Device>::addElement(Device*)+0x5e>
c00234c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234c5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00234c8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00234cc:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00234d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234d6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00234da:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00234dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234e1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00234e4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00234ee:	eb 68                	jmp    c0023558 <LinkedList<Device>::addElement(Device*)+0xc6>
c00234f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00234f6:	85 c0                	test   eax,eax
c00234f8:	75 4e                	jne    c0023548 <LinkedList<Device>::addElement(Device*)+0xb6>
c00234fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023501:	85 c0                	test   eax,eax
c0023503:	75 43                	jne    c0023548 <LinkedList<Device>::addElement(Device*)+0xb6>
c0023505:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023509:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002350d:	89 10                	mov    DWORD PTR [eax],edx
c002350f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023513:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023517:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002351a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002351e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023521:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002352b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002352f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023532:	85 c0                	test   eax,eax
c0023534:	74 22                	je     c0023558 <LinkedList<Device>::addElement(Device*)+0xc6>
c0023536:	83 ec 0c             	sub    esp,0xc
c0023539:	68 72 4d 02 c0       	push   0xc0024d72
c002353e:	e8 b6 1c ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c0023543:	83 c4 10             	add    esp,0x10
c0023546:	eb 10                	jmp    c0023558 <LinkedList<Device>::addElement(Device*)+0xc6>
c0023548:	83 ec 0c             	sub    esp,0xc
c002354b:	68 7c 4d 02 c0       	push   0xc0024d7c
c0023550:	e8 a4 1c ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c0023555:	83 c4 10             	add    esp,0x10
c0023558:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002355c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002355f:	8d 50 01             	lea    edx,[eax+0x1]
c0023562:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023566:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0023569:	90                   	nop
c002356a:	83 c4 0c             	add    esp,0xc
c002356d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c002356e <LinkedList<Device>::LinkedList()>:
c002356e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023572:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023578:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002357c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0023583:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023587:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002358e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023592:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023598:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002359c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00235a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00235a7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00235ae:	90                   	nop
c00235af:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00235b0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00235b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00235b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00235b6:	85 c0                	test   eax,eax
c00235b8:	75 0e                	jne    c00235c8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00235ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00235be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00235c1:	85 c0                	test   eax,eax
c00235c3:	75 03                	jne    c00235c8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00235c5:	b0 01                	mov    al,0x1
c00235c7:	c3                   	ret    
c00235c8:	b0 00                	mov    al,0x0
c00235ca:	90                   	nop
c00235cb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00235cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00235cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00235d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00235d2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c00235d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c00235d4:	83 ec 0c             	sub    esp,0xc
c00235d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235db:	8b 00                	mov    eax,DWORD PTR [eax]
c00235dd:	85 c0                	test   eax,eax
c00235df:	75 17                	jne    c00235f8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c00235e1:	83 ec 0c             	sub    esp,0xc
c00235e4:	68 88 4d 02 c0       	push   0xc0024d88
c00235e9:	e8 0b 1c ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c00235ee:	83 c4 10             	add    esp,0x10
c00235f1:	e9 92 00 00 00       	jmp    c0023688 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c00235f6:	66 90                	xchg   ax,ax
c00235f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00235ff:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0023602:	85 c0                	test   eax,eax
c0023604:	0f 95 c0             	setne  al
c0023607:	84 c0                	test   al,al
c0023609:	74 11                	je     c002361c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c002360b:	83 ec 0c             	sub    esp,0xc
c002360e:	68 d3 4d 02 c0       	push   0xc0024dd3
c0023613:	e8 e1 1b ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c0023618:	83 c4 10             	add    esp,0x10
c002361b:	90                   	nop
c002361c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023620:	8b 00                	mov    eax,DWORD PTR [eax]
c0023622:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0023625:	85 c0                	test   eax,eax
c0023627:	0f 94 c0             	sete   al
c002362a:	84 c0                	test   al,al
c002362c:	74 36                	je     c0023664 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c002362e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023632:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023638:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002363c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0023643:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023647:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002364a:	83 f8 01             	cmp    eax,0x1
c002364d:	74 25                	je     c0023674 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c002364f:	83 ec 0c             	sub    esp,0xc
c0023652:	68 ac 4d 02 c0       	push   0xc0024dac
c0023657:	e8 9d 1b ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c002365c:	83 c4 10             	add    esp,0x10
c002365f:	eb 13                	jmp    c0023674 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0023661:	8d 76 00             	lea    esi,[esi+0x0]
c0023664:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023668:	8b 00                	mov    eax,DWORD PTR [eax]
c002366a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c002366d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023671:	89 10                	mov    DWORD PTR [eax],edx
c0023673:	90                   	nop
c0023674:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023678:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002367b:	8d 50 ff             	lea    edx,[eax-0x1]
c002367e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023682:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0023685:	8d 76 00             	lea    esi,[esi+0x0]
c0023688:	83 c4 0c             	add    esp,0xc
c002368b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c002368c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c002368c:	83 ec 0c             	sub    esp,0xc
c002368f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0023694:	75 12                	jne    c00236a8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c0023696:	83 ec 0c             	sub    esp,0xc
c0023699:	68 50 4d 02 c0       	push   0xc0024d50
c002369e:	e8 56 1b ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c00236a3:	83 c4 10             	add    esp,0x10
c00236a6:	66 90                	xchg   ax,ax
c00236a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00236ae:	85 c0                	test   eax,eax
c00236b0:	74 36                	je     c00236e8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c00236b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00236b9:	85 c0                	test   eax,eax
c00236bb:	74 2b                	je     c00236e8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c00236bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236c1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00236c4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00236c8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00236cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236cf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00236d3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00236d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00236dd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00236e4:	eb 6a                	jmp    c0023750 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c00236e6:	66 90                	xchg   ax,ax
c00236e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00236ee:	85 c0                	test   eax,eax
c00236f0:	75 4e                	jne    c0023740 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c00236f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00236f9:	85 c0                	test   eax,eax
c00236fb:	75 43                	jne    c0023740 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c00236fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023701:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023705:	89 10                	mov    DWORD PTR [eax],edx
c0023707:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002370b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002370f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0023712:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023716:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023719:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0023720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023724:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023727:	85 c0                	test   eax,eax
c0023729:	74 25                	je     c0023750 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002372b:	83 ec 0c             	sub    esp,0xc
c002372e:	68 72 4d 02 c0       	push   0xc0024d72
c0023733:	e8 c1 1a ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c0023738:	83 c4 10             	add    esp,0x10
c002373b:	eb 13                	jmp    c0023750 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002373d:	8d 76 00             	lea    esi,[esi+0x0]
c0023740:	83 ec 0c             	sub    esp,0xc
c0023743:	68 7c 4d 02 c0       	push   0xc0024d7c
c0023748:	e8 ac 1a ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c002374d:	83 c4 10             	add    esp,0x10
c0023750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023754:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023757:	8d 50 01             	lea    edx,[eax+0x1]
c002375a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002375e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0023761:	90                   	nop
c0023762:	83 c4 0c             	add    esp,0xc
c0023765:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0023768 <ACPI::~ACPI()>:
c0023768:	83 ec 0c             	sub    esp,0xc
c002376b:	ba 24 61 02 c0       	mov    edx,0xc0026124
c0023770:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023774:	89 10                	mov    DWORD PTR [eax],edx
c0023776:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002377a:	83 ec 0c             	sub    esp,0xc
c002377d:	50                   	push   eax
c002377e:	e8 d5 ad fe ff       	call   c000e558 <Device::~Device()>
c0023783:	83 c4 10             	add    esp,0x10
c0023786:	90                   	nop
c0023787:	83 c4 0c             	add    esp,0xc
c002378a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c002378c <ACPI::~ACPI()>:
c002378c:	83 ec 0c             	sub    esp,0xc
c002378f:	83 ec 0c             	sub    esp,0xc
c0023792:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023796:	e8 cd ff ff ff       	call   c0023768 <ACPI::~ACPI()>
c002379b:	83 c4 10             	add    esp,0x10
c002379e:	83 ec 08             	sub    esp,0x8
c00237a1:	68 64 12 00 00       	push   0x1264
c00237a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00237aa:	e8 87 98 fe ff       	call   c000d036 <operator delete(void*, unsigned long)>
c00237af:	83 c4 10             	add    esp,0x10
c00237b2:	83 c4 0c             	add    esp,0xc
c00237b5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c00237b8 <LinkedList<Device>::~LinkedList()>:
c00237b8:	90                   	nop
c00237b9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c00237bc <LinkedList<Device>::isEmpty()>:
c00237bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00237c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00237c2:	85 c0                	test   eax,eax
c00237c4:	75 0e                	jne    c00237d4 <LinkedList<Device>::isEmpty()+0x18>
c00237c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00237ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00237cd:	85 c0                	test   eax,eax
c00237cf:	75 03                	jne    c00237d4 <LinkedList<Device>::isEmpty()+0x18>
c00237d1:	b0 01                	mov    al,0x1
c00237d3:	c3                   	ret    
c00237d4:	b0 00                	mov    al,0x0
c00237d6:	90                   	nop
c00237d7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c00237d8 <LinkedList<Device>::getFirstElement()>:
c00237d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00237dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00237de:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c00237e0 <LinkedList<Device>::removeFirst()>:
c00237e0:	83 ec 0c             	sub    esp,0xc
c00237e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00237e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00237e9:	85 c0                	test   eax,eax
c00237eb:	75 17                	jne    c0023804 <LinkedList<Device>::removeFirst()+0x24>
c00237ed:	83 ec 0c             	sub    esp,0xc
c00237f0:	68 88 4d 02 c0       	push   0xc0024d88
c00237f5:	e8 ff 19 ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c00237fa:	83 c4 10             	add    esp,0x10
c00237fd:	e9 92 00 00 00       	jmp    c0023894 <LinkedList<Device>::removeFirst()+0xb4>
c0023802:	66 90                	xchg   ax,ax
c0023804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023808:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002380b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0023811:	85 c0                	test   eax,eax
c0023813:	74 13                	je     c0023828 <LinkedList<Device>::removeFirst()+0x48>
c0023815:	83 ec 0c             	sub    esp,0xc
c0023818:	68 d3 4d 02 c0       	push   0xc0024dd3
c002381d:	e8 d7 19 ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c0023822:	83 c4 10             	add    esp,0x10
c0023825:	8d 76 00             	lea    esi,[esi+0x0]
c0023828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002382c:	8b 00                	mov    eax,DWORD PTR [eax]
c002382e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0023834:	85 c0                	test   eax,eax
c0023836:	75 34                	jne    c002386c <LinkedList<Device>::removeFirst()+0x8c>
c0023838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002383c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023846:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002384d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023851:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023854:	83 f8 01             	cmp    eax,0x1
c0023857:	74 27                	je     c0023880 <LinkedList<Device>::removeFirst()+0xa0>
c0023859:	83 ec 0c             	sub    esp,0xc
c002385c:	68 ac 4d 02 c0       	push   0xc0024dac
c0023861:	e8 93 19 ff ff       	call   c00151f9 <Krnl::panic(char const*)>
c0023866:	83 c4 10             	add    esp,0x10
c0023869:	eb 15                	jmp    c0023880 <LinkedList<Device>::removeFirst()+0xa0>
c002386b:	90                   	nop
c002386c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023870:	8b 00                	mov    eax,DWORD PTR [eax]
c0023872:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0023878:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002387c:	89 10                	mov    DWORD PTR [eax],edx
c002387e:	66 90                	xchg   ax,ax
c0023880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023884:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023887:	8d 50 ff             	lea    edx,[eax-0x1]
c002388a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002388e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0023891:	8d 76 00             	lea    esi,[esi+0x0]
c0023894:	83 c4 0c             	add    esp,0xc
c0023897:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0023898 <CPU::~CPU()>:
c0023898:	83 ec 0c             	sub    esp,0xc
c002389b:	ba b4 66 02 c0       	mov    edx,0xc00266b4
c00238a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00238a4:	89 10                	mov    DWORD PTR [eax],edx
c00238a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00238aa:	83 ec 0c             	sub    esp,0xc
c00238ad:	50                   	push   eax
c00238ae:	e8 a5 ac fe ff       	call   c000e558 <Device::~Device()>
c00238b3:	83 c4 10             	add    esp,0x10
c00238b6:	90                   	nop
c00238b7:	83 c4 0c             	add    esp,0xc
c00238ba:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00238bc <CPU::~CPU()>:
c00238bc:	83 ec 0c             	sub    esp,0xc
c00238bf:	83 ec 0c             	sub    esp,0xc
c00238c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00238c6:	e8 cd ff ff ff       	call   c0023898 <CPU::~CPU()>
c00238cb:	83 c4 10             	add    esp,0x10
c00238ce:	83 ec 08             	sub    esp,0x8
c00238d1:	68 98 11 00 00       	push   0x1198
c00238d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00238da:	e8 57 97 fe ff       	call   c000d036 <operator delete(void*, unsigned long)>
c00238df:	83 c4 10             	add    esp,0x10
c00238e2:	83 c4 0c             	add    esp,0xc
c00238e5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00238e8 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00238e8:	90                   	nop
c00238e9:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00238ec <ThreadControlBlock::ThreadControlBlock()>:
c00238ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00238f0:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00238f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00238fb:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0023902:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023906:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c002390d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023911:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c0023918:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002391c:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c0023923:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023927:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c002392b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002392f:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c0023933:	90                   	nop
c0023934:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0023938 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0023938:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002393c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023942:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023946:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002394d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023951:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0023958:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002395c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023962:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023966:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002396d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023971:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0023978:	90                   	nop
c0023979:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c002397c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c002397c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023980:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0023983:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0023984 <Vm::_FPUState::_FPUState()>:
c0023984:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023988:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c002398f:	90                   	nop
c0023990:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0023992 <PCI::~PCI()>:
c0023992:	83 ec 0c             	sub    esp,0xc
c0023995:	ba d0 74 02 c0       	mov    edx,0xc00274d0
c002399a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002399e:	89 10                	mov    DWORD PTR [eax],edx
c00239a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00239a4:	83 ec 0c             	sub    esp,0xc
c00239a7:	50                   	push   eax
c00239a8:	e8 7b a5 fe ff       	call   c000df28 <Bus::~Bus()>
c00239ad:	83 c4 10             	add    esp,0x10
c00239b0:	90                   	nop
c00239b1:	83 c4 0c             	add    esp,0xc
c00239b4:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00239b6 <PCI::~PCI()>:
c00239b6:	83 ec 0c             	sub    esp,0xc
c00239b9:	83 ec 0c             	sub    esp,0xc
c00239bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00239c0:	e8 cd ff ff ff       	call   c0023992 <PCI::~PCI()>
c00239c5:	83 c4 10             	add    esp,0x10
c00239c8:	83 ec 08             	sub    esp,0x8
c00239cb:	68 5c 01 00 00       	push   0x15c
c00239d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00239d4:	e8 5d 96 fe ff       	call   c000d036 <operator delete(void*, unsigned long)>
c00239d9:	83 c4 10             	add    esp,0x10
c00239dc:	83 c4 0c             	add    esp,0xc
c00239df:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00239e0 <IDE::~IDE()>:
c00239e0:	83 ec 0c             	sub    esp,0xc
c00239e3:	ba a0 75 02 c0       	mov    edx,0xc00275a0
c00239e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00239ec:	89 10                	mov    DWORD PTR [eax],edx
c00239ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00239f2:	83 ec 0c             	sub    esp,0xc
c00239f5:	50                   	push   eax
c00239f6:	e8 75 b0 fe ff       	call   c000ea70 <HardDiskController::~HardDiskController()>
c00239fb:	83 c4 10             	add    esp,0x10
c00239fe:	90                   	nop
c00239ff:	83 c4 0c             	add    esp,0xc
c0023a02:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0023a04 <IDE::~IDE()>:
c0023a04:	83 ec 0c             	sub    esp,0xc
c0023a07:	83 ec 0c             	sub    esp,0xc
c0023a0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023a0e:	e8 cd ff ff ff       	call   c00239e0 <IDE::~IDE()>
c0023a13:	83 c4 10             	add    esp,0x10
c0023a16:	83 ec 08             	sub    esp,0x8
c0023a19:	68 70 02 00 00       	push   0x270
c0023a1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023a22:	e8 0f 96 fe ff       	call   c000d036 <operator delete(void*, unsigned long)>
c0023a27:	83 c4 10             	add    esp,0x10
c0023a2a:	83 c4 0c             	add    esp,0xc
c0023a2d:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0023a2e <SATABus::~SATABus()>:
c0023a2e:	83 ec 0c             	sub    esp,0xc
c0023a31:	ba 6c 76 02 c0       	mov    edx,0xc002766c
c0023a36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a3a:	89 10                	mov    DWORD PTR [eax],edx
c0023a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a40:	83 ec 0c             	sub    esp,0xc
c0023a43:	50                   	push   eax
c0023a44:	e8 27 b0 fe ff       	call   c000ea70 <HardDiskController::~HardDiskController()>
c0023a49:	83 c4 10             	add    esp,0x10
c0023a4c:	90                   	nop
c0023a4d:	83 c4 0c             	add    esp,0xc
c0023a50:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0023a52 <SATABus::~SATABus()>:
c0023a52:	83 ec 0c             	sub    esp,0xc
c0023a55:	83 ec 0c             	sub    esp,0xc
c0023a58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023a5c:	e8 cd ff ff ff       	call   c0023a2e <SATABus::~SATABus()>
c0023a61:	83 c4 10             	add    esp,0x10
c0023a64:	83 ec 08             	sub    esp,0x8
c0023a67:	68 64 01 00 00       	push   0x164
c0023a6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023a70:	e8 c1 95 fe ff       	call   c000d036 <operator delete(void*, unsigned long)>
c0023a75:	83 c4 10             	add    esp,0x10
c0023a78:	83 c4 0c             	add    esp,0xc
c0023a7b:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0023a7c <ATA::~ATA()>:
c0023a7c:	83 ec 0c             	sub    esp,0xc
c0023a7f:	ba e4 76 02 c0       	mov    edx,0xc00276e4
c0023a84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a88:	89 10                	mov    DWORD PTR [eax],edx
c0023a8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a8e:	83 ec 0c             	sub    esp,0xc
c0023a91:	50                   	push   eax
c0023a92:	e8 bb b0 fe ff       	call   c000eb52 <PhysicalDisk::~PhysicalDisk()>
c0023a97:	83 c4 10             	add    esp,0x10
c0023a9a:	90                   	nop
c0023a9b:	83 c4 0c             	add    esp,0xc
c0023a9e:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0023aa0 <ATA::~ATA()>:
c0023aa0:	83 ec 0c             	sub    esp,0xc
c0023aa3:	83 ec 0c             	sub    esp,0xc
c0023aa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023aaa:	e8 cd ff ff ff       	call   c0023a7c <ATA::~ATA()>
c0023aaf:	83 c4 10             	add    esp,0x10
c0023ab2:	83 ec 08             	sub    esp,0x8
c0023ab5:	68 7c 01 00 00       	push   0x17c
c0023aba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023abe:	e8 73 95 fe ff       	call   c000d036 <operator delete(void*, unsigned long)>
c0023ac3:	83 c4 10             	add    esp,0x10
c0023ac6:	83 c4 0c             	add    esp,0xc
c0023ac9:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0023aca <ATAPI::~ATAPI()>:
c0023aca:	83 ec 0c             	sub    esp,0xc
c0023acd:	ba 5c 77 02 c0       	mov    edx,0xc002775c
c0023ad2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ad6:	89 10                	mov    DWORD PTR [eax],edx
c0023ad8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023adc:	83 ec 0c             	sub    esp,0xc
c0023adf:	50                   	push   eax
c0023ae0:	e8 6d b0 fe ff       	call   c000eb52 <PhysicalDisk::~PhysicalDisk()>
c0023ae5:	83 c4 10             	add    esp,0x10
c0023ae8:	90                   	nop
c0023ae9:	83 c4 0c             	add    esp,0xc
c0023aec:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0023aee <ATAPI::~ATAPI()>:
c0023aee:	83 ec 0c             	sub    esp,0xc
c0023af1:	83 ec 0c             	sub    esp,0xc
c0023af4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023af8:	e8 cd ff ff ff       	call   c0023aca <ATAPI::~ATAPI()>
c0023afd:	83 c4 10             	add    esp,0x10
c0023b00:	83 ec 08             	sub    esp,0x8
c0023b03:	68 84 01 00 00       	push   0x184
c0023b08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023b0c:	e8 25 95 fe ff       	call   c000d036 <operator delete(void*, unsigned long)>
c0023b11:	83 c4 10             	add    esp,0x10
c0023b14:	83 c4 0c             	add    esp,0xc
c0023b17:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0023b18 <SATA::~SATA()>:
c0023b18:	83 ec 0c             	sub    esp,0xc
c0023b1b:	ba 98 79 02 c0       	mov    edx,0xc0027998
c0023b20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b24:	89 10                	mov    DWORD PTR [eax],edx
c0023b26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b2a:	83 ec 0c             	sub    esp,0xc
c0023b2d:	50                   	push   eax
c0023b2e:	e8 1f b0 fe ff       	call   c000eb52 <PhysicalDisk::~PhysicalDisk()>
c0023b33:	83 c4 10             	add    esp,0x10
c0023b36:	90                   	nop
c0023b37:	83 c4 0c             	add    esp,0xc
c0023b3a:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0023b3c <SATA::~SATA()>:
c0023b3c:	83 ec 0c             	sub    esp,0xc
c0023b3f:	83 ec 0c             	sub    esp,0xc
c0023b42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023b46:	e8 cd ff ff ff       	call   c0023b18 <SATA::~SATA()>
c0023b4b:	83 c4 10             	add    esp,0x10
c0023b4e:	83 ec 08             	sub    esp,0x8
c0023b51:	68 7c 01 00 00       	push   0x17c
c0023b56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023b5a:	e8 d7 94 fe ff       	call   c000d036 <operator delete(void*, unsigned long)>
c0023b5f:	83 c4 10             	add    esp,0x10
c0023b62:	83 c4 0c             	add    esp,0xc
c0023b65:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0023b66 <SATAPI::~SATAPI()>:
c0023b66:	83 ec 0c             	sub    esp,0xc
c0023b69:	ba 04 7b 02 c0       	mov    edx,0xc0027b04
c0023b6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b72:	89 10                	mov    DWORD PTR [eax],edx
c0023b74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b78:	83 ec 0c             	sub    esp,0xc
c0023b7b:	50                   	push   eax
c0023b7c:	e8 d1 af fe ff       	call   c000eb52 <PhysicalDisk::~PhysicalDisk()>
c0023b81:	83 c4 10             	add    esp,0x10
c0023b84:	90                   	nop
c0023b85:	83 c4 0c             	add    esp,0xc
c0023b88:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0023b8a <SATAPI::~SATAPI()>:
c0023b8a:	83 ec 0c             	sub    esp,0xc
c0023b8d:	83 ec 0c             	sub    esp,0xc
c0023b90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023b94:	e8 cd ff ff ff       	call   c0023b66 <SATAPI::~SATAPI()>
c0023b99:	83 c4 10             	add    esp,0x10
c0023b9c:	83 ec 08             	sub    esp,0x8
c0023b9f:	68 84 01 00 00       	push   0x184
c0023ba4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023ba8:	e8 89 94 fe ff       	call   c000d036 <operator delete(void*, unsigned long)>
c0023bad:	83 c4 10             	add    esp,0x10
c0023bb0:	83 c4 0c             	add    esp,0xc
c0023bb3:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0023bb4 <AVX::~AVX()>:
c0023bb4:	83 ec 0c             	sub    esp,0xc
c0023bb7:	ba 44 7b 02 c0       	mov    edx,0xc0027b44
c0023bbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bc0:	89 10                	mov    DWORD PTR [eax],edx
c0023bc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bc6:	83 ec 0c             	sub    esp,0xc
c0023bc9:	50                   	push   eax
c0023bca:	e8 09 b0 fe ff       	call   c000ebd8 <FPU::~FPU()>
c0023bcf:	83 c4 10             	add    esp,0x10
c0023bd2:	90                   	nop
c0023bd3:	83 c4 0c             	add    esp,0xc
c0023bd6:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0023bd8 <AVX::~AVX()>:
c0023bd8:	83 ec 0c             	sub    esp,0xc
c0023bdb:	83 ec 0c             	sub    esp,0xc
c0023bde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023be2:	e8 cd ff ff ff       	call   c0023bb4 <AVX::~AVX()>
c0023be7:	83 c4 10             	add    esp,0x10
c0023bea:	83 ec 08             	sub    esp,0x8
c0023bed:	68 58 01 00 00       	push   0x158
c0023bf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023bf6:	e8 3b 94 fe ff       	call   c000d036 <operator delete(void*, unsigned long)>
c0023bfb:	83 c4 10             	add    esp,0x10
c0023bfe:	83 c4 0c             	add    esp,0xc
c0023c01:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0023c04 <MMX::~MMX()>:
c0023c04:	83 ec 0c             	sub    esp,0xc
c0023c07:	ba 84 7b 02 c0       	mov    edx,0xc0027b84
c0023c0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c10:	89 10                	mov    DWORD PTR [eax],edx
c0023c12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c16:	83 ec 0c             	sub    esp,0xc
c0023c19:	50                   	push   eax
c0023c1a:	e8 b9 af fe ff       	call   c000ebd8 <FPU::~FPU()>
c0023c1f:	83 c4 10             	add    esp,0x10
c0023c22:	90                   	nop
c0023c23:	83 c4 0c             	add    esp,0xc
c0023c26:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0023c28 <MMX::~MMX()>:
c0023c28:	83 ec 0c             	sub    esp,0xc
c0023c2b:	83 ec 0c             	sub    esp,0xc
c0023c2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023c32:	e8 cd ff ff ff       	call   c0023c04 <MMX::~MMX()>
c0023c37:	83 c4 10             	add    esp,0x10
c0023c3a:	83 ec 08             	sub    esp,0x8
c0023c3d:	68 58 01 00 00       	push   0x158
c0023c42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023c46:	e8 eb 93 fe ff       	call   c000d036 <operator delete(void*, unsigned long)>
c0023c4b:	83 c4 10             	add    esp,0x10
c0023c4e:	83 c4 0c             	add    esp,0xc
c0023c51:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0023c54 <SSE::~SSE()>:
c0023c54:	83 ec 0c             	sub    esp,0xc
c0023c57:	ba c4 7b 02 c0       	mov    edx,0xc0027bc4
c0023c5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c60:	89 10                	mov    DWORD PTR [eax],edx
c0023c62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c66:	83 ec 0c             	sub    esp,0xc
c0023c69:	50                   	push   eax
c0023c6a:	e8 69 af fe ff       	call   c000ebd8 <FPU::~FPU()>
c0023c6f:	83 c4 10             	add    esp,0x10
c0023c72:	90                   	nop
c0023c73:	83 c4 0c             	add    esp,0xc
c0023c76:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0023c78 <SSE::~SSE()>:
c0023c78:	83 ec 0c             	sub    esp,0xc
c0023c7b:	83 ec 0c             	sub    esp,0xc
c0023c7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023c82:	e8 cd ff ff ff       	call   c0023c54 <SSE::~SSE()>
c0023c87:	83 c4 10             	add    esp,0x10
c0023c8a:	83 ec 08             	sub    esp,0x8
c0023c8d:	68 58 01 00 00       	push   0x158
c0023c92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023c96:	e8 9b 93 fe ff       	call   c000d036 <operator delete(void*, unsigned long)>
c0023c9b:	83 c4 10             	add    esp,0x10
c0023c9e:	83 c4 0c             	add    esp,0xc
c0023ca1:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0023ca2 <x87::~x87()>:
c0023ca2:	83 ec 0c             	sub    esp,0xc
c0023ca5:	ba 04 7c 02 c0       	mov    edx,0xc0027c04
c0023caa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cae:	89 10                	mov    DWORD PTR [eax],edx
c0023cb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cb4:	83 ec 0c             	sub    esp,0xc
c0023cb7:	50                   	push   eax
c0023cb8:	e8 1b af fe ff       	call   c000ebd8 <FPU::~FPU()>
c0023cbd:	83 c4 10             	add    esp,0x10
c0023cc0:	90                   	nop
c0023cc1:	83 c4 0c             	add    esp,0xc
c0023cc4:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0023cc6 <x87::~x87()>:
c0023cc6:	83 ec 0c             	sub    esp,0xc
c0023cc9:	83 ec 0c             	sub    esp,0xc
c0023ccc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023cd0:	e8 cd ff ff ff       	call   c0023ca2 <x87::~x87()>
c0023cd5:	83 c4 10             	add    esp,0x10
c0023cd8:	83 ec 08             	sub    esp,0x8
c0023cdb:	68 58 01 00 00       	push   0x158
c0023ce0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023ce4:	e8 4d 93 fe ff       	call   c000d036 <operator delete(void*, unsigned long)>
c0023ce9:	83 c4 10             	add    esp,0x10
c0023cec:	83 c4 0c             	add    esp,0xc
c0023cef:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0023cf0 <IOAPIC::~IOAPIC()>:
c0023cf0:	83 ec 0c             	sub    esp,0xc
c0023cf3:	ba 5c 7d 02 c0       	mov    edx,0xc0027d5c
c0023cf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cfc:	89 10                	mov    DWORD PTR [eax],edx
c0023cfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d02:	83 ec 0c             	sub    esp,0xc
c0023d05:	50                   	push   eax
c0023d06:	e8 4d a8 fe ff       	call   c000e558 <Device::~Device()>
c0023d0b:	83 c4 10             	add    esp,0x10
c0023d0e:	90                   	nop
c0023d0f:	83 c4 0c             	add    esp,0xc
c0023d12:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0023d14 <IOAPIC::~IOAPIC()>:
c0023d14:	83 ec 0c             	sub    esp,0xc
c0023d17:	83 ec 0c             	sub    esp,0xc
c0023d1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023d1e:	e8 cd ff ff ff       	call   c0023cf0 <IOAPIC::~IOAPIC()>
c0023d23:	83 c4 10             	add    esp,0x10
c0023d26:	83 ec 08             	sub    esp,0x8
c0023d29:	68 68 01 00 00       	push   0x168
c0023d2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023d32:	e8 ff 92 fe ff       	call   c000d036 <operator delete(void*, unsigned long)>
c0023d37:	83 c4 10             	add    esp,0x10
c0023d3a:	83 c4 0c             	add    esp,0xc
c0023d3d:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0023d3e <APIC::~APIC()>:
c0023d3e:	83 ec 0c             	sub    esp,0xc
c0023d41:	ba 14 7d 02 c0       	mov    edx,0xc0027d14
c0023d46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d4a:	89 10                	mov    DWORD PTR [eax],edx
c0023d4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d50:	83 ec 0c             	sub    esp,0xc
c0023d53:	50                   	push   eax
c0023d54:	e8 6b b3 fe ff       	call   c000f0c4 <InterruptController::~InterruptController()>
c0023d59:	83 c4 10             	add    esp,0x10
c0023d5c:	90                   	nop
c0023d5d:	83 c4 0c             	add    esp,0xc
c0023d60:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0023d62 <APIC::~APIC()>:
c0023d62:	83 ec 0c             	sub    esp,0xc
c0023d65:	83 ec 0c             	sub    esp,0xc
c0023d68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023d6c:	e8 cd ff ff ff       	call   c0023d3e <APIC::~APIC()>
c0023d71:	83 c4 10             	add    esp,0x10
c0023d74:	83 ec 08             	sub    esp,0x8
c0023d77:	68 58 21 00 00       	push   0x2158
c0023d7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023d80:	e8 b1 92 fe ff       	call   c000d036 <operator delete(void*, unsigned long)>
c0023d85:	83 c4 10             	add    esp,0x10
c0023d88:	83 c4 0c             	add    esp,0xc
c0023d8b:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0023d8c <PIC::~PIC()>:
c0023d8c:	83 ec 0c             	sub    esp,0xc
c0023d8f:	ba ac 7d 02 c0       	mov    edx,0xc0027dac
c0023d94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d98:	89 10                	mov    DWORD PTR [eax],edx
c0023d9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d9e:	83 ec 0c             	sub    esp,0xc
c0023da1:	50                   	push   eax
c0023da2:	e8 1d b3 fe ff       	call   c000f0c4 <InterruptController::~InterruptController()>
c0023da7:	83 c4 10             	add    esp,0x10
c0023daa:	90                   	nop
c0023dab:	83 c4 0c             	add    esp,0xc
c0023dae:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0023db0 <PIC::~PIC()>:
c0023db0:	83 ec 0c             	sub    esp,0xc
c0023db3:	83 ec 0c             	sub    esp,0xc
c0023db6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023dba:	e8 cd ff ff ff       	call   c0023d8c <PIC::~PIC()>
c0023dbf:	83 c4 10             	add    esp,0x10
c0023dc2:	83 ec 08             	sub    esp,0x8
c0023dc5:	68 58 21 00 00       	push   0x2158
c0023dca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023dce:	e8 63 92 fe ff       	call   c000d036 <operator delete(void*, unsigned long)>
c0023dd3:	83 c4 10             	add    esp,0x10
c0023dd6:	83 c4 0c             	add    esp,0xc
c0023dd9:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0023ddc <APICTimer::~APICTimer()>:
c0023ddc:	83 ec 0c             	sub    esp,0xc
c0023ddf:	ba 00 7e 02 c0       	mov    edx,0xc0027e00
c0023de4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023de8:	89 10                	mov    DWORD PTR [eax],edx
c0023dea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023dee:	83 ec 0c             	sub    esp,0xc
c0023df1:	50                   	push   eax
c0023df2:	e8 fd d1 fe ff       	call   c0010ff4 <Timer::~Timer()>
c0023df7:	83 c4 10             	add    esp,0x10
c0023dfa:	90                   	nop
c0023dfb:	83 c4 0c             	add    esp,0xc
c0023dfe:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0023e00 <APICTimer::~APICTimer()>:
c0023e00:	83 ec 0c             	sub    esp,0xc
c0023e03:	83 ec 0c             	sub    esp,0xc
c0023e06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023e0a:	e8 cd ff ff ff       	call   c0023ddc <APICTimer::~APICTimer()>
c0023e0f:	83 c4 10             	add    esp,0x10
c0023e12:	83 ec 08             	sub    esp,0x8
c0023e15:	68 60 01 00 00       	push   0x160
c0023e1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023e1e:	e8 13 92 fe ff       	call   c000d036 <operator delete(void*, unsigned long)>
c0023e23:	83 c4 10             	add    esp,0x10
c0023e26:	83 c4 0c             	add    esp,0xc
c0023e29:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0023e2c <PIT::~PIT()>:
c0023e2c:	83 ec 0c             	sub    esp,0xc
c0023e2f:	ba 50 7e 02 c0       	mov    edx,0xc0027e50
c0023e34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e38:	89 10                	mov    DWORD PTR [eax],edx
c0023e3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e3e:	83 ec 0c             	sub    esp,0xc
c0023e41:	50                   	push   eax
c0023e42:	e8 ad d1 fe ff       	call   c0010ff4 <Timer::~Timer()>
c0023e47:	83 c4 10             	add    esp,0x10
c0023e4a:	90                   	nop
c0023e4b:	83 c4 0c             	add    esp,0xc
c0023e4e:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0023e50 <PIT::~PIT()>:
c0023e50:	83 ec 0c             	sub    esp,0xc
c0023e53:	83 ec 0c             	sub    esp,0xc
c0023e56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023e5a:	e8 cd ff ff ff       	call   c0023e2c <PIT::~PIT()>
c0023e5f:	83 c4 10             	add    esp,0x10
c0023e62:	83 ec 08             	sub    esp,0x8
c0023e65:	68 5c 01 00 00       	push   0x15c
c0023e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023e6e:	e8 c3 91 fe ff       	call   c000d036 <operator delete(void*, unsigned long)>
c0023e73:	83 c4 10             	add    esp,0x10
c0023e76:	83 c4 0c             	add    esp,0xc
c0023e79:	c3                   	ret    
